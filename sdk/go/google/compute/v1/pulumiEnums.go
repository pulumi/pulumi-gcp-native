// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD.
//
// If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier.
//
// If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
type AccessConfigNetworkTier pulumi.String

const (
	AccessConfigNetworkTierPremium  = AccessConfigNetworkTier("PREMIUM")
	AccessConfigNetworkTierStandard = AccessConfigNetworkTier("STANDARD")
)

func (AccessConfigNetworkTier) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AccessConfigNetworkTier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessConfigNetworkTier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessConfigNetworkTier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AccessConfigNetworkTier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The type of configuration. The default and only option is ONE_TO_ONE_NAT.
type AccessConfigType pulumi.String

const (
	AccessConfigTypeOneToOneNat = AccessConfigType("ONE_TO_ONE_NAT")
)

func (AccessConfigType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AccessConfigType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessConfigType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessConfigType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AccessConfigType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
type AddressAddressType pulumi.String

const (
	AddressAddressTypeExternal        = AddressAddressType("EXTERNAL")
	AddressAddressTypeInternal        = AddressAddressType("INTERNAL")
	AddressAddressTypeUnspecifiedType = AddressAddressType("UNSPECIFIED_TYPE")
)

func (AddressAddressType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AddressAddressType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AddressAddressType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AddressAddressType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AddressAddressType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The IP version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address.
type AddressIpVersion pulumi.String

const (
	AddressIpVersionIpv4               = AddressIpVersion("IPV4")
	AddressIpVersionIpv6               = AddressIpVersion("IPV6")
	AddressIpVersionUnspecifiedVersion = AddressIpVersion("UNSPECIFIED_VERSION")
)

func (AddressIpVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AddressIpVersion) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AddressIpVersion) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AddressIpVersion) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AddressIpVersion) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Global forwarding rules can only be Premium Tier. Regional forwarding rules can be either Premium or Standard Tier. Standard Tier addresses applied to regional forwarding rules can be used with any external load balancer. Regional forwarding rules in Premium Tier can only be used with a network load balancer.
//
// If this field is not specified, it is assumed to be PREMIUM.
type AddressNetworkTier pulumi.String

const (
	AddressNetworkTierPremium  = AddressNetworkTier("PREMIUM")
	AddressNetworkTierStandard = AddressNetworkTier("STANDARD")
)

func (AddressNetworkTier) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AddressNetworkTier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AddressNetworkTier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AddressNetworkTier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AddressNetworkTier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The purpose of this resource, which can be one of the following values:
// - `GCE_ENDPOINT` for addresses that are used by VM instances, alias IP ranges, internal load balancers, and similar resources.
// - `DNS_RESOLVER` for a DNS resolver address in a subnetwork
// - `VPC_PEERING` for addresses that are reserved for VPC peer networks.
// - `NAT_AUTO` for addresses that are external IP addresses automatically reserved for Cloud NAT.
// - `IPSEC_INTERCONNECT` for addresses created from a private IP range that are reserved for a VLAN attachment in an IPsec-encrypted Cloud Interconnect configuration. These addresses are regional resources.
type AddressPurpose pulumi.String

const (
	AddressPurposeDnsResolver           = AddressPurpose("DNS_RESOLVER")
	AddressPurposeGceEndpoint           = AddressPurpose("GCE_ENDPOINT")
	AddressPurposeIpsecInterconnect     = AddressPurpose("IPSEC_INTERCONNECT")
	AddressPurposeNatAuto               = AddressPurpose("NAT_AUTO")
	AddressPurposePrivateServiceConnect = AddressPurpose("PRIVATE_SERVICE_CONNECT")
	AddressPurposeSharedLoadbalancerVip = AddressPurpose("SHARED_LOADBALANCER_VIP")
	AddressPurposeVpcPeering            = AddressPurpose("VPC_PEERING")
)

func (AddressPurpose) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AddressPurpose) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AddressPurpose) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AddressPurpose) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AddressPurpose) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available.
type AddressStatus pulumi.String

const (
	AddressStatusInUse     = AddressStatus("IN_USE")
	AddressStatusReserved  = AddressStatus("RESERVED")
	AddressStatusReserving = AddressStatus("RESERVING")
)

func (AddressStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AddressStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AddressStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AddressStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AddressStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
type AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface pulumi.String

const (
	AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterfaceNvme = AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface("NVME")
	AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterfaceScsi = AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface("SCSI")
)

func (AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies which action to take on instance update with this disk. Default is to use the existing disk.
type AttachedDiskInitializeParamsOnUpdateAction pulumi.String

const (
	AttachedDiskInitializeParamsOnUpdateActionRecreateDisk                = AttachedDiskInitializeParamsOnUpdateAction("RECREATE_DISK")
	AttachedDiskInitializeParamsOnUpdateActionRecreateDiskIfSourceChanged = AttachedDiskInitializeParamsOnUpdateAction("RECREATE_DISK_IF_SOURCE_CHANGED")
	AttachedDiskInitializeParamsOnUpdateActionUseExistingDisk             = AttachedDiskInitializeParamsOnUpdateAction("USE_EXISTING_DISK")
)

func (AttachedDiskInitializeParamsOnUpdateAction) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AttachedDiskInitializeParamsOnUpdateAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttachedDiskInitializeParamsOnUpdateAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttachedDiskInitializeParamsOnUpdateAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AttachedDiskInitializeParamsOnUpdateAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
type AttachedDiskInterface pulumi.String

const (
	AttachedDiskInterfaceNvme = AttachedDiskInterface("NVME")
	AttachedDiskInterfaceScsi = AttachedDiskInterface("SCSI")
)

func (AttachedDiskInterface) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AttachedDiskInterface) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttachedDiskInterface) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttachedDiskInterface) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AttachedDiskInterface) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
type AttachedDiskMode pulumi.String

const (
	AttachedDiskModeReadOnly  = AttachedDiskMode("READ_ONLY")
	AttachedDiskModeReadWrite = AttachedDiskMode("READ_WRITE")
)

func (AttachedDiskMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AttachedDiskMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttachedDiskMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttachedDiskMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AttachedDiskMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
type AttachedDiskType pulumi.String

const (
	AttachedDiskTypePersistent = AttachedDiskType("PERSISTENT")
	AttachedDiskTypeScratch    = AttachedDiskType("SCRATCH")
)

func (AttachedDiskType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AttachedDiskType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttachedDiskType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttachedDiskType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AttachedDiskType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The log type that this config enables.
type AuditLogConfigLogType pulumi.String

const (
	AuditLogConfigLogTypeAdminRead          = AuditLogConfigLogType("ADMIN_READ")
	AuditLogConfigLogTypeDataRead           = AuditLogConfigLogType("DATA_READ")
	AuditLogConfigLogTypeDataWrite          = AuditLogConfigLogType("DATA_WRITE")
	AuditLogConfigLogTypeLogTypeUnspecified = AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED")
)

func (AuditLogConfigLogType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AuditLogConfigLogType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The type of the permission that was checked.
type AuthorizationLoggingOptionsPermissionType pulumi.String

const (
	AuthorizationLoggingOptionsPermissionTypeAdminRead                 = AuthorizationLoggingOptionsPermissionType("ADMIN_READ")
	AuthorizationLoggingOptionsPermissionTypeAdminWrite                = AuthorizationLoggingOptionsPermissionType("ADMIN_WRITE")
	AuthorizationLoggingOptionsPermissionTypeDataRead                  = AuthorizationLoggingOptionsPermissionType("DATA_READ")
	AuthorizationLoggingOptionsPermissionTypeDataWrite                 = AuthorizationLoggingOptionsPermissionType("DATA_WRITE")
	AuthorizationLoggingOptionsPermissionTypePermissionTypeUnspecified = AuthorizationLoggingOptionsPermissionType("PERMISSION_TYPE_UNSPECIFIED")
)

func (AuthorizationLoggingOptionsPermissionType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AuthorizationLoggingOptionsPermissionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuthorizationLoggingOptionsPermissionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuthorizationLoggingOptionsPermissionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuthorizationLoggingOptionsPermissionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The status of the autoscaler configuration. Current set of possible values:
// - PENDING: Autoscaler backend hasn't read new/updated configuration.
// - DELETING: Configuration is being deleted.
// - ACTIVE: Configuration is acknowledged to be effective. Some warnings might be present in the statusDetails field.
// - ERROR: Configuration has errors. Actionable for users. Details are present in the statusDetails field.  New values might be added in the future.
type AutoscalerStatus pulumi.String

const (
	AutoscalerStatusActive   = AutoscalerStatus("ACTIVE")
	AutoscalerStatusDeleting = AutoscalerStatus("DELETING")
	AutoscalerStatusError    = AutoscalerStatus("ERROR")
	AutoscalerStatusPending  = AutoscalerStatus("PENDING")
)

func (AutoscalerStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AutoscalerStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoscalerStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoscalerStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AutoscalerStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The type of error, warning, or notice returned. Current set of possible values:
// - ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state).
// - BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group.
// - CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas.
// - CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling.
// - CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels.
// - MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group.
// - MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling.
// - MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer.
// - MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved.
// - MODE_ONLY_UP (WARNING): Autoscaling is in the "Autoscale only out" mode. The autoscaler can add instances but not remove any.
// - MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it.
// - NOT_ENOUGH_QUOTA_AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances.
// - REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region.
// - SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist.
// - UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate.
// - ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout.  New values might be added in the future. Some of the values might not be available in all API versions.
type AutoscalerStatusDetailsType pulumi.String

const (
	AutoscalerStatusDetailsTypeAllInstancesUnhealthy                        = AutoscalerStatusDetailsType("ALL_INSTANCES_UNHEALTHY")
	AutoscalerStatusDetailsTypeBackendServiceDoesNotExist                   = AutoscalerStatusDetailsType("BACKEND_SERVICE_DOES_NOT_EXIST")
	AutoscalerStatusDetailsTypeCappedAtMaxNumReplicas                       = AutoscalerStatusDetailsType("CAPPED_AT_MAX_NUM_REPLICAS")
	AutoscalerStatusDetailsTypeCustomMetricDataPointsTooSparse              = AutoscalerStatusDetailsType("CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE")
	AutoscalerStatusDetailsTypeCustomMetricInvalid                          = AutoscalerStatusDetailsType("CUSTOM_METRIC_INVALID")
	AutoscalerStatusDetailsTypeMinEqualsMax                                 = AutoscalerStatusDetailsType("MIN_EQUALS_MAX")
	AutoscalerStatusDetailsTypeMissingCustomMetricDataPoints                = AutoscalerStatusDetailsType("MISSING_CUSTOM_METRIC_DATA_POINTS")
	AutoscalerStatusDetailsTypeMissingLoadBalancingDataPoints               = AutoscalerStatusDetailsType("MISSING_LOAD_BALANCING_DATA_POINTS")
	AutoscalerStatusDetailsTypeModeOff                                      = AutoscalerStatusDetailsType("MODE_OFF")
	AutoscalerStatusDetailsTypeModeOnlyScaleOut                             = AutoscalerStatusDetailsType("MODE_ONLY_SCALE_OUT")
	AutoscalerStatusDetailsTypeModeOnlyUp                                   = AutoscalerStatusDetailsType("MODE_ONLY_UP")
	AutoscalerStatusDetailsTypeMoreThanOneBackendService                    = AutoscalerStatusDetailsType("MORE_THAN_ONE_BACKEND_SERVICE")
	AutoscalerStatusDetailsTypeNotEnoughQuotaAvailable                      = AutoscalerStatusDetailsType("NOT_ENOUGH_QUOTA_AVAILABLE")
	AutoscalerStatusDetailsTypeRegionResourceStockout                       = AutoscalerStatusDetailsType("REGION_RESOURCE_STOCKOUT")
	AutoscalerStatusDetailsTypeScalingTargetDoesNotExist                    = AutoscalerStatusDetailsType("SCALING_TARGET_DOES_NOT_EXIST")
	AutoscalerStatusDetailsTypeScheduledInstancesGreaterThanAutoscalerMax   = AutoscalerStatusDetailsType("SCHEDULED_INSTANCES_GREATER_THAN_AUTOSCALER_MAX")
	AutoscalerStatusDetailsTypeScheduledInstancesLessThanAutoscalerMin      = AutoscalerStatusDetailsType("SCHEDULED_INSTANCES_LESS_THAN_AUTOSCALER_MIN")
	AutoscalerStatusDetailsTypeUnknown                                      = AutoscalerStatusDetailsType("UNKNOWN")
	AutoscalerStatusDetailsTypeUnsupportedMaxRateLoadBalancingConfiguration = AutoscalerStatusDetailsType("UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION")
	AutoscalerStatusDetailsTypeZoneResourceStockout                         = AutoscalerStatusDetailsType("ZONE_RESOURCE_STOCKOUT")
)

func (AutoscalerStatusDetailsType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AutoscalerStatusDetailsType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoscalerStatusDetailsType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoscalerStatusDetailsType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AutoscalerStatusDetailsType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are:
//
// * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
type AutoscalingPolicyCpuUtilizationPredictiveMethod pulumi.String

const (
	AutoscalingPolicyCpuUtilizationPredictiveMethodNone                 = AutoscalingPolicyCpuUtilizationPredictiveMethod("NONE")
	AutoscalingPolicyCpuUtilizationPredictiveMethodOptimizeAvailability = AutoscalingPolicyCpuUtilizationPredictiveMethod("OPTIMIZE_AVAILABILITY")
)

func (AutoscalingPolicyCpuUtilizationPredictiveMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AutoscalingPolicyCpuUtilizationPredictiveMethod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoscalingPolicyCpuUtilizationPredictiveMethod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoscalingPolicyCpuUtilizationPredictiveMethod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AutoscalingPolicyCpuUtilizationPredictiveMethod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE.
type AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType pulumi.String

const (
	AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeDeltaPerMinute = AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType("DELTA_PER_MINUTE")
	AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeDeltaPerSecond = AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType("DELTA_PER_SECOND")
	AutoscalingPolicyCustomMetricUtilizationUtilizationTargetTypeGauge          = AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType("GAUGE")
)

func (AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Defines operating mode for this policy.
type AutoscalingPolicyMode pulumi.String

const (
	AutoscalingPolicyModeOff          = AutoscalingPolicyMode("OFF")
	AutoscalingPolicyModeOn           = AutoscalingPolicyMode("ON")
	AutoscalingPolicyModeOnlyScaleOut = AutoscalingPolicyMode("ONLY_SCALE_OUT")
	AutoscalingPolicyModeOnlyUp       = AutoscalingPolicyMode("ONLY_UP")
)

func (AutoscalingPolicyMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AutoscalingPolicyMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoscalingPolicyMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoscalingPolicyMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AutoscalingPolicyMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see  Connection balancing mode.
type BackendBalancingMode pulumi.String

const (
	BackendBalancingModeConnection  = BackendBalancingMode("CONNECTION")
	BackendBalancingModeRate        = BackendBalancingMode("RATE")
	BackendBalancingModeUtilization = BackendBalancingMode("UTILIZATION")
)

func (BackendBalancingMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BackendBalancingMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendBalancingMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendBalancingMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BackendBalancingMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the cache setting for all responses from this backend. The possible values are:
//
// USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.
//
// FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.
//
// CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
type BackendBucketCdnPolicyCacheMode pulumi.String

const (
	BackendBucketCdnPolicyCacheModeCacheAllStatic   = BackendBucketCdnPolicyCacheMode("CACHE_ALL_STATIC")
	BackendBucketCdnPolicyCacheModeForceCacheAll    = BackendBucketCdnPolicyCacheMode("FORCE_CACHE_ALL")
	BackendBucketCdnPolicyCacheModeInvalidCacheMode = BackendBucketCdnPolicyCacheMode("INVALID_CACHE_MODE")
	BackendBucketCdnPolicyCacheModeUseOriginHeaders = BackendBucketCdnPolicyCacheMode("USE_ORIGIN_HEADERS")
)

func (BackendBucketCdnPolicyCacheMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BackendBucketCdnPolicyCacheMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendBucketCdnPolicyCacheMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendBucketCdnPolicyCacheMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BackendBucketCdnPolicyCacheMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the cache setting for all responses from this backend. The possible values are:
//
// USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server.
//
// FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content.
//
// CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
type BackendServiceCdnPolicyCacheMode pulumi.String

const (
	BackendServiceCdnPolicyCacheModeCacheAllStatic   = BackendServiceCdnPolicyCacheMode("CACHE_ALL_STATIC")
	BackendServiceCdnPolicyCacheModeForceCacheAll    = BackendServiceCdnPolicyCacheMode("FORCE_CACHE_ALL")
	BackendServiceCdnPolicyCacheModeInvalidCacheMode = BackendServiceCdnPolicyCacheMode("INVALID_CACHE_MODE")
	BackendServiceCdnPolicyCacheModeUseOriginHeaders = BackendServiceCdnPolicyCacheMode("USE_ORIGIN_HEADERS")
)

func (BackendServiceCdnPolicyCacheMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BackendServiceCdnPolicyCacheMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendServiceCdnPolicyCacheMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendServiceCdnPolicyCacheMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BackendServiceCdnPolicyCacheMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the load balancer type. Choose EXTERNAL for external HTTP(S), SSL Proxy, TCP Proxy and Network Load Balancing. Choose  INTERNAL for Internal TCP/UDP Load Balancing. Choose  INTERNAL_MANAGED for Internal HTTP(S) Load Balancing.  INTERNAL_SELF_MANAGED for Traffic Director. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer.
type BackendServiceLoadBalancingScheme pulumi.String

const (
	BackendServiceLoadBalancingSchemeExternal                   = BackendServiceLoadBalancingScheme("EXTERNAL")
	BackendServiceLoadBalancingSchemeInternal                   = BackendServiceLoadBalancingScheme("INTERNAL")
	BackendServiceLoadBalancingSchemeInternalManaged            = BackendServiceLoadBalancingScheme("INTERNAL_MANAGED")
	BackendServiceLoadBalancingSchemeInternalSelfManaged        = BackendServiceLoadBalancingScheme("INTERNAL_SELF_MANAGED")
	BackendServiceLoadBalancingSchemeInvalidLoadBalancingScheme = BackendServiceLoadBalancingScheme("INVALID_LOAD_BALANCING_SCHEME")
)

func (BackendServiceLoadBalancingScheme) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BackendServiceLoadBalancingScheme) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendServiceLoadBalancingScheme) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendServiceLoadBalancingScheme) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BackendServiceLoadBalancingScheme) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The load balancing algorithm used within the scope of the locality. The possible values are:
// - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default.
// - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests.
// - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests.
// - RANDOM: The load balancer selects a random healthy host.
// - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer.
// - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824
//
// This field is applicable to either:
// - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED.
// - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
//
// If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect.
//
// Only the default ROUND_ROBIN policy is supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
type BackendServiceLocalityLbPolicy pulumi.String

const (
	BackendServiceLocalityLbPolicyInvalidLbPolicy     = BackendServiceLocalityLbPolicy("INVALID_LB_POLICY")
	BackendServiceLocalityLbPolicyLeastRequest        = BackendServiceLocalityLbPolicy("LEAST_REQUEST")
	BackendServiceLocalityLbPolicyMaglev              = BackendServiceLocalityLbPolicy("MAGLEV")
	BackendServiceLocalityLbPolicyOriginalDestination = BackendServiceLocalityLbPolicy("ORIGINAL_DESTINATION")
	BackendServiceLocalityLbPolicyRandom              = BackendServiceLocalityLbPolicy("RANDOM")
	BackendServiceLocalityLbPolicyRingHash            = BackendServiceLocalityLbPolicy("RING_HASH")
	BackendServiceLocalityLbPolicyRoundRobin          = BackendServiceLocalityLbPolicy("ROUND_ROBIN")
)

func (BackendServiceLocalityLbPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BackendServiceLocalityLbPolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendServiceLocalityLbPolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendServiceLocalityLbPolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BackendServiceLocalityLbPolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The protocol this BackendService uses to communicate with backends.
//
// Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancer or for Traffic Director for more information.
//
// Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy.
type BackendServiceProtocol pulumi.String

const (
	BackendServiceProtocolGrpc  = BackendServiceProtocol("GRPC")
	BackendServiceProtocolHttp  = BackendServiceProtocol("HTTP")
	BackendServiceProtocolHttp2 = BackendServiceProtocol("HTTP2")
	BackendServiceProtocolHttps = BackendServiceProtocol("HTTPS")
	BackendServiceProtocolSsl   = BackendServiceProtocol("SSL")
	BackendServiceProtocolTcp   = BackendServiceProtocol("TCP")
	BackendServiceProtocolUdp   = BackendServiceProtocol("UDP")
)

func (BackendServiceProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BackendServiceProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendServiceProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendServiceProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BackendServiceProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Type of session affinity to use. The default is NONE.
//
// When the loadBalancingScheme is EXTERNAL: * For Network Load Balancing, the possible values are NONE, CLIENT_IP, CLIENT_IP_PROTO, or  CLIENT_IP_PORT_PROTO. * For all other load balancers that use loadBalancingScheme=EXTERNAL, the possible values are NONE, CLIENT_IP, or GENERATED_COOKIE. * You can use GENERATED_COOKIE if the protocol is HTTP, HTTP2, or HTTPS.
//
// When the loadBalancingScheme is INTERNAL, possible values are NONE, CLIENT_IP, CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO.
//
// When the loadBalancingScheme is INTERNAL_SELF_MANAGED, or INTERNAL_MANAGED, possible values are NONE, CLIENT_IP, GENERATED_COOKIE, HEADER_FIELD, or HTTP_COOKIE.
//
// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
type BackendServiceSessionAffinity pulumi.String

const (
	BackendServiceSessionAffinityClientIp              = BackendServiceSessionAffinity("CLIENT_IP")
	BackendServiceSessionAffinityClientIpNoDestination = BackendServiceSessionAffinity("CLIENT_IP_NO_DESTINATION")
	BackendServiceSessionAffinityClientIpPortProto     = BackendServiceSessionAffinity("CLIENT_IP_PORT_PROTO")
	BackendServiceSessionAffinityClientIpProto         = BackendServiceSessionAffinity("CLIENT_IP_PROTO")
	BackendServiceSessionAffinityGeneratedCookie       = BackendServiceSessionAffinity("GENERATED_COOKIE")
	BackendServiceSessionAffinityHeaderField           = BackendServiceSessionAffinity("HEADER_FIELD")
	BackendServiceSessionAffinityHttpCookie            = BackendServiceSessionAffinity("HTTP_COOKIE")
	BackendServiceSessionAffinityNone                  = BackendServiceSessionAffinity("NONE")
)

func (BackendServiceSessionAffinity) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BackendServiceSessionAffinity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendServiceSessionAffinity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BackendServiceSessionAffinity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BackendServiceSessionAffinity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Trusted attributes supplied by the IAM system.
type ConditionIam pulumi.String

const (
	ConditionIamApprover          = ConditionIam("APPROVER")
	ConditionIamAttribution       = ConditionIam("ATTRIBUTION")
	ConditionIamAuthority         = ConditionIam("AUTHORITY")
	ConditionIamCredentialsType   = ConditionIam("CREDENTIALS_TYPE")
	ConditionIamCredsAssertion    = ConditionIam("CREDS_ASSERTION")
	ConditionIamJustificationType = ConditionIam("JUSTIFICATION_TYPE")
	ConditionIamNoAttr            = ConditionIam("NO_ATTR")
	ConditionIamSecurityRealm     = ConditionIam("SECURITY_REALM")
)

func (ConditionIam) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ConditionIam) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConditionIam) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConditionIam) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConditionIam) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// An operator to apply the subject with.
type ConditionOp pulumi.String

const (
	ConditionOpDischarged = ConditionOp("DISCHARGED")
	ConditionOpEquals     = ConditionOp("EQUALS")
	ConditionOpIn         = ConditionOp("IN")
	ConditionOpNotEquals  = ConditionOp("NOT_EQUALS")
	ConditionOpNotIn      = ConditionOp("NOT_IN")
	ConditionOpNoOp       = ConditionOp("NO_OP")
)

func (ConditionOp) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ConditionOp) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConditionOp) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConditionOp) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConditionOp) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Trusted attributes supplied by any service that owns resources and uses the IAM system for access control.
type ConditionSys pulumi.String

const (
	ConditionSysIp      = ConditionSys("IP")
	ConditionSysName    = ConditionSys("NAME")
	ConditionSysNoAttr  = ConditionSys("NO_ATTR")
	ConditionSysRegion  = ConditionSys("REGION")
	ConditionSysService = ConditionSys("SERVICE")
)

func (ConditionSys) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ConditionSys) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConditionSys) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConditionSys) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConditionSys) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
type DeprecationStatusState pulumi.String

const (
	DeprecationStatusStateActive     = DeprecationStatusState("ACTIVE")
	DeprecationStatusStateDeleted    = DeprecationStatusState("DELETED")
	DeprecationStatusStateDeprecated = DeprecationStatusState("DEPRECATED")
	DeprecationStatusStateObsolete   = DeprecationStatusState("OBSOLETE")
)

func (DeprecationStatusState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e DeprecationStatusState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeprecationStatusState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeprecationStatusState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DeprecationStatusState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies whether to include the disk and what image to use. Possible values are:
// - source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks.
// - source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks.
// - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks.
// - attach-read-only: to attach a read-only disk. Applicable to read-only disks.
// - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks.
type DiskInstantiationConfigInstantiateFrom pulumi.String

const (
	DiskInstantiationConfigInstantiateFromAttachReadOnly    = DiskInstantiationConfigInstantiateFrom("ATTACH_READ_ONLY")
	DiskInstantiationConfigInstantiateFromBlank             = DiskInstantiationConfigInstantiateFrom("BLANK")
	DiskInstantiationConfigInstantiateFromCustomImage       = DiskInstantiationConfigInstantiateFrom("CUSTOM_IMAGE")
	DiskInstantiationConfigInstantiateFromDefault           = DiskInstantiationConfigInstantiateFrom("DEFAULT")
	DiskInstantiationConfigInstantiateFromDoNotInclude      = DiskInstantiationConfigInstantiateFrom("DO_NOT_INCLUDE")
	DiskInstantiationConfigInstantiateFromSourceImage       = DiskInstantiationConfigInstantiateFrom("SOURCE_IMAGE")
	DiskInstantiationConfigInstantiateFromSourceImageFamily = DiskInstantiationConfigInstantiateFrom("SOURCE_IMAGE_FAMILY")
)

func (DiskInstantiationConfigInstantiateFrom) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e DiskInstantiationConfigInstantiateFrom) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiskInstantiationConfigInstantiateFrom) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiskInstantiationConfigInstantiateFrom) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DiskInstantiationConfigInstantiateFrom) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The status of disk creation.
// - CREATING: Disk is provisioning.
// - RESTORING: Source data is being copied into the disk.
// - FAILED: Disk creation failed.
// - READY: Disk is ready for use.
// - DELETING: Disk is deleting.
type DiskStatus pulumi.String

const (
	DiskStatusCreating  = DiskStatus("CREATING")
	DiskStatusDeleting  = DiskStatus("DELETING")
	DiskStatusFailed    = DiskStatus("FAILED")
	DiskStatusReady     = DiskStatus("READY")
	DiskStatusRestoring = DiskStatus("RESTORING")
)

func (DiskStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e DiskStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiskStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiskStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DiskStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).
type DistributionPolicyTargetShape pulumi.String

const (
	DistributionPolicyTargetShapeAny      = DistributionPolicyTargetShape("ANY")
	DistributionPolicyTargetShapeBalanced = DistributionPolicyTargetShape("BALANCED")
	DistributionPolicyTargetShapeEven     = DistributionPolicyTargetShape("EVEN")
)

func (DistributionPolicyTargetShape) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e DistributionPolicyTargetShape) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DistributionPolicyTargetShape) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DistributionPolicyTargetShape) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DistributionPolicyTargetShape) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Indicates the user-supplied redundancy type of this external VPN gateway.
type ExternalVpnGatewayRedundancyType pulumi.String

const (
	ExternalVpnGatewayRedundancyTypeFourIpsRedundancy           = ExternalVpnGatewayRedundancyType("FOUR_IPS_REDUNDANCY")
	ExternalVpnGatewayRedundancyTypeSingleIpInternallyRedundant = ExternalVpnGatewayRedundancyType("SINGLE_IP_INTERNALLY_REDUNDANT")
	ExternalVpnGatewayRedundancyTypeTwoIpsRedundancy            = ExternalVpnGatewayRedundancyType("TWO_IPS_REDUNDANCY")
)

func (ExternalVpnGatewayRedundancyType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ExternalVpnGatewayRedundancyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExternalVpnGatewayRedundancyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExternalVpnGatewayRedundancyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ExternalVpnGatewayRedundancyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The file type of source file.
type FileContentBufferFileType pulumi.String

const (
	FileContentBufferFileTypeBin       = FileContentBufferFileType("BIN")
	FileContentBufferFileTypeUndefined = FileContentBufferFileType("UNDEFINED")
	FileContentBufferFileTypeX509      = FileContentBufferFileType("X509")
)

func (FileContentBufferFileType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e FileContentBufferFileType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FileContentBufferFileType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FileContentBufferFileType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FileContentBufferFileType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Direction of traffic to which this firewall applies, either `INGRESS` or `EGRESS`. The default is `INGRESS`. For `INGRESS` traffic, you cannot specify the destinationRanges field, and for `EGRESS` traffic, you cannot specify the sourceRanges or sourceTags fields.
type FirewallDirection pulumi.String

const (
	FirewallDirectionEgress  = FirewallDirection("EGRESS")
	FirewallDirectionIngress = FirewallDirection("INGRESS")
)

func (FirewallDirection) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e FirewallDirection) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FirewallDirection) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FirewallDirection) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FirewallDirection) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs.
type FirewallLogConfigMetadata pulumi.String

const (
	FirewallLogConfigMetadataExcludeAllMetadata = FirewallLogConfigMetadata("EXCLUDE_ALL_METADATA")
	FirewallLogConfigMetadataIncludeAllMetadata = FirewallLogConfigMetadata("INCLUDE_ALL_METADATA")
)

func (FirewallLogConfigMetadata) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e FirewallLogConfigMetadata) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FirewallLogConfigMetadata) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FirewallLogConfigMetadata) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FirewallLogConfigMetadata) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The direction in which this rule applies.
type FirewallPolicyRuleDirection pulumi.String

const (
	FirewallPolicyRuleDirectionEgress  = FirewallPolicyRuleDirection("EGRESS")
	FirewallPolicyRuleDirectionIngress = FirewallPolicyRuleDirection("INGRESS")
)

func (FirewallPolicyRuleDirection) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e FirewallPolicyRuleDirection) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FirewallPolicyRuleDirection) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FirewallPolicyRuleDirection) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FirewallPolicyRuleDirection) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The IP protocol to which this rule applies.
//
// For protocol forwarding, valid options are TCP, UDP, ESP, AH, SCTP and ICMP.
//
// The valid IP protocols are different for different load balancing products:
// - Internal TCP/UDP Load Balancing: The load balancing scheme is INTERNAL, and one of TCP, UDP or ALL is valid.
// - Traffic Director: The load balancing scheme is INTERNAL_SELF_MANAGED, and only TCP is valid.
// - Internal HTTP(S) Load Balancing: The load balancing scheme is INTERNAL_MANAGED, and only TCP is valid.
// - HTTP(S), SSL Proxy, and TCP Proxy Load Balancing: The load balancing scheme is EXTERNAL and only TCP is valid.
// - Network Load Balancing: The load balancing scheme is EXTERNAL, and one of TCP or UDP is valid.
type ForwardingRuleIPProtocol pulumi.String

const (
	ForwardingRuleIPProtocolAh   = ForwardingRuleIPProtocol("AH")
	ForwardingRuleIPProtocolEsp  = ForwardingRuleIPProtocol("ESP")
	ForwardingRuleIPProtocolIcmp = ForwardingRuleIPProtocol("ICMP")
	ForwardingRuleIPProtocolSctp = ForwardingRuleIPProtocol("SCTP")
	ForwardingRuleIPProtocolTcp  = ForwardingRuleIPProtocol("TCP")
	ForwardingRuleIPProtocolUdp  = ForwardingRuleIPProtocol("UDP")
)

func (ForwardingRuleIPProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ForwardingRuleIPProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ForwardingRuleIPProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ForwardingRuleIPProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ForwardingRuleIPProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6. This can only be specified for an external global forwarding rule.
type ForwardingRuleIpVersion pulumi.String

const (
	ForwardingRuleIpVersionIpv4               = ForwardingRuleIpVersion("IPV4")
	ForwardingRuleIpVersionIpv6               = ForwardingRuleIpVersion("IPV6")
	ForwardingRuleIpVersionUnspecifiedVersion = ForwardingRuleIpVersion("UNSPECIFIED_VERSION")
)

func (ForwardingRuleIpVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ForwardingRuleIpVersion) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ForwardingRuleIpVersion) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ForwardingRuleIpVersion) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ForwardingRuleIpVersion) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the forwarding rule type.
//
// - EXTERNAL is used for:
// - Classic Cloud VPN gateways
// - Protocol forwarding to VMs from an external IP address
// - HTTP(S), SSL Proxy, TCP Proxy, and Network Load Balancing
// - INTERNAL is used for:
// - Protocol forwarding to VMs from an internal IP address
// - Internal TCP/UDP Load Balancing
// - INTERNAL_MANAGED is used for:
// - Internal HTTP(S) Load Balancing
// - INTERNAL_SELF_MANAGED is used for:
// - Traffic Director
//
// For more information about forwarding rules, refer to Forwarding rule concepts.
type ForwardingRuleLoadBalancingScheme pulumi.String

const (
	ForwardingRuleLoadBalancingSchemeExternal            = ForwardingRuleLoadBalancingScheme("EXTERNAL")
	ForwardingRuleLoadBalancingSchemeInternal            = ForwardingRuleLoadBalancingScheme("INTERNAL")
	ForwardingRuleLoadBalancingSchemeInternalManaged     = ForwardingRuleLoadBalancingScheme("INTERNAL_MANAGED")
	ForwardingRuleLoadBalancingSchemeInternalSelfManaged = ForwardingRuleLoadBalancingScheme("INTERNAL_SELF_MANAGED")
	ForwardingRuleLoadBalancingSchemeInvalid             = ForwardingRuleLoadBalancingScheme("INVALID")
)

func (ForwardingRuleLoadBalancingScheme) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ForwardingRuleLoadBalancingScheme) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ForwardingRuleLoadBalancingScheme) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ForwardingRuleLoadBalancingScheme) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ForwardingRuleLoadBalancingScheme) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM, STANDARD.
//
// For regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM.
//
// If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address.
type ForwardingRuleNetworkTier pulumi.String

const (
	ForwardingRuleNetworkTierPremium  = ForwardingRuleNetworkTier("PREMIUM")
	ForwardingRuleNetworkTierStandard = ForwardingRuleNetworkTier("STANDARD")
)

func (ForwardingRuleNetworkTier) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ForwardingRuleNetworkTier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ForwardingRuleNetworkTier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ForwardingRuleNetworkTier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ForwardingRuleNetworkTier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies how port is selected for health checking, can be one of following values:
// USE_FIXED_PORT: The port number in port is used for health checking.
// USE_NAMED_PORT: The portName is used for health checking.
// USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.
//
// If not specified, gRPC health check follows behavior specified in port and portName fields.
type GRPCHealthCheckPortSpecification pulumi.String

const (
	GRPCHealthCheckPortSpecificationUseFixedPort   = GRPCHealthCheckPortSpecification("USE_FIXED_PORT")
	GRPCHealthCheckPortSpecificationUseNamedPort   = GRPCHealthCheckPortSpecification("USE_NAMED_PORT")
	GRPCHealthCheckPortSpecificationUseServingPort = GRPCHealthCheckPortSpecification("USE_SERVING_PORT")
)

func (GRPCHealthCheckPortSpecification) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GRPCHealthCheckPortSpecification) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GRPCHealthCheckPortSpecification) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GRPCHealthCheckPortSpecification) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GRPCHealthCheckPortSpecification) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
type GlobalAddressAddressType pulumi.String

const (
	GlobalAddressAddressTypeExternal        = GlobalAddressAddressType("EXTERNAL")
	GlobalAddressAddressTypeInternal        = GlobalAddressAddressType("INTERNAL")
	GlobalAddressAddressTypeUnspecifiedType = GlobalAddressAddressType("UNSPECIFIED_TYPE")
)

func (GlobalAddressAddressType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GlobalAddressAddressType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalAddressAddressType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalAddressAddressType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GlobalAddressAddressType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The IP version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address.
type GlobalAddressIpVersion pulumi.String

const (
	GlobalAddressIpVersionIpv4               = GlobalAddressIpVersion("IPV4")
	GlobalAddressIpVersionIpv6               = GlobalAddressIpVersion("IPV6")
	GlobalAddressIpVersionUnspecifiedVersion = GlobalAddressIpVersion("UNSPECIFIED_VERSION")
)

func (GlobalAddressIpVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GlobalAddressIpVersion) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalAddressIpVersion) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalAddressIpVersion) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GlobalAddressIpVersion) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Global forwarding rules can only be Premium Tier. Regional forwarding rules can be either Premium or Standard Tier. Standard Tier addresses applied to regional forwarding rules can be used with any external load balancer. Regional forwarding rules in Premium Tier can only be used with a network load balancer.
//
// If this field is not specified, it is assumed to be PREMIUM.
type GlobalAddressNetworkTier pulumi.String

const (
	GlobalAddressNetworkTierPremium  = GlobalAddressNetworkTier("PREMIUM")
	GlobalAddressNetworkTierStandard = GlobalAddressNetworkTier("STANDARD")
)

func (GlobalAddressNetworkTier) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GlobalAddressNetworkTier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalAddressNetworkTier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalAddressNetworkTier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GlobalAddressNetworkTier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The purpose of this resource, which can be one of the following values:
// - `GCE_ENDPOINT` for addresses that are used by VM instances, alias IP ranges, internal load balancers, and similar resources.
// - `DNS_RESOLVER` for a DNS resolver address in a subnetwork
// - `VPC_PEERING` for addresses that are reserved for VPC peer networks.
// - `NAT_AUTO` for addresses that are external IP addresses automatically reserved for Cloud NAT.
// - `IPSEC_INTERCONNECT` for addresses created from a private IP range that are reserved for a VLAN attachment in an IPsec-encrypted Cloud Interconnect configuration. These addresses are regional resources.
type GlobalAddressPurpose pulumi.String

const (
	GlobalAddressPurposeDnsResolver           = GlobalAddressPurpose("DNS_RESOLVER")
	GlobalAddressPurposeGceEndpoint           = GlobalAddressPurpose("GCE_ENDPOINT")
	GlobalAddressPurposeIpsecInterconnect     = GlobalAddressPurpose("IPSEC_INTERCONNECT")
	GlobalAddressPurposeNatAuto               = GlobalAddressPurpose("NAT_AUTO")
	GlobalAddressPurposePrivateServiceConnect = GlobalAddressPurpose("PRIVATE_SERVICE_CONNECT")
	GlobalAddressPurposeSharedLoadbalancerVip = GlobalAddressPurpose("SHARED_LOADBALANCER_VIP")
	GlobalAddressPurposeVpcPeering            = GlobalAddressPurpose("VPC_PEERING")
)

func (GlobalAddressPurpose) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GlobalAddressPurpose) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalAddressPurpose) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalAddressPurpose) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GlobalAddressPurpose) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available.
type GlobalAddressStatus pulumi.String

const (
	GlobalAddressStatusInUse     = GlobalAddressStatus("IN_USE")
	GlobalAddressStatusReserved  = GlobalAddressStatus("RESERVED")
	GlobalAddressStatusReserving = GlobalAddressStatus("RESERVING")
)

func (GlobalAddressStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GlobalAddressStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalAddressStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalAddressStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GlobalAddressStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The IP protocol to which this rule applies.
//
// For protocol forwarding, valid options are TCP, UDP, ESP, AH, SCTP and ICMP.
//
// The valid IP protocols are different for different load balancing products:
// - Internal TCP/UDP Load Balancing: The load balancing scheme is INTERNAL, and one of TCP, UDP or ALL is valid.
// - Traffic Director: The load balancing scheme is INTERNAL_SELF_MANAGED, and only TCP is valid.
// - Internal HTTP(S) Load Balancing: The load balancing scheme is INTERNAL_MANAGED, and only TCP is valid.
// - HTTP(S), SSL Proxy, and TCP Proxy Load Balancing: The load balancing scheme is EXTERNAL and only TCP is valid.
// - Network Load Balancing: The load balancing scheme is EXTERNAL, and one of TCP or UDP is valid.
type GlobalForwardingRuleIPProtocol pulumi.String

const (
	GlobalForwardingRuleIPProtocolAh   = GlobalForwardingRuleIPProtocol("AH")
	GlobalForwardingRuleIPProtocolEsp  = GlobalForwardingRuleIPProtocol("ESP")
	GlobalForwardingRuleIPProtocolIcmp = GlobalForwardingRuleIPProtocol("ICMP")
	GlobalForwardingRuleIPProtocolSctp = GlobalForwardingRuleIPProtocol("SCTP")
	GlobalForwardingRuleIPProtocolTcp  = GlobalForwardingRuleIPProtocol("TCP")
	GlobalForwardingRuleIPProtocolUdp  = GlobalForwardingRuleIPProtocol("UDP")
)

func (GlobalForwardingRuleIPProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GlobalForwardingRuleIPProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalForwardingRuleIPProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalForwardingRuleIPProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GlobalForwardingRuleIPProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6. This can only be specified for an external global forwarding rule.
type GlobalForwardingRuleIpVersion pulumi.String

const (
	GlobalForwardingRuleIpVersionIpv4               = GlobalForwardingRuleIpVersion("IPV4")
	GlobalForwardingRuleIpVersionIpv6               = GlobalForwardingRuleIpVersion("IPV6")
	GlobalForwardingRuleIpVersionUnspecifiedVersion = GlobalForwardingRuleIpVersion("UNSPECIFIED_VERSION")
)

func (GlobalForwardingRuleIpVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GlobalForwardingRuleIpVersion) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalForwardingRuleIpVersion) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalForwardingRuleIpVersion) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GlobalForwardingRuleIpVersion) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the forwarding rule type.
//
// - EXTERNAL is used for:
// - Classic Cloud VPN gateways
// - Protocol forwarding to VMs from an external IP address
// - HTTP(S), SSL Proxy, TCP Proxy, and Network Load Balancing
// - INTERNAL is used for:
// - Protocol forwarding to VMs from an internal IP address
// - Internal TCP/UDP Load Balancing
// - INTERNAL_MANAGED is used for:
// - Internal HTTP(S) Load Balancing
// - INTERNAL_SELF_MANAGED is used for:
// - Traffic Director
//
// For more information about forwarding rules, refer to Forwarding rule concepts.
type GlobalForwardingRuleLoadBalancingScheme pulumi.String

const (
	GlobalForwardingRuleLoadBalancingSchemeExternal            = GlobalForwardingRuleLoadBalancingScheme("EXTERNAL")
	GlobalForwardingRuleLoadBalancingSchemeInternal            = GlobalForwardingRuleLoadBalancingScheme("INTERNAL")
	GlobalForwardingRuleLoadBalancingSchemeInternalManaged     = GlobalForwardingRuleLoadBalancingScheme("INTERNAL_MANAGED")
	GlobalForwardingRuleLoadBalancingSchemeInternalSelfManaged = GlobalForwardingRuleLoadBalancingScheme("INTERNAL_SELF_MANAGED")
	GlobalForwardingRuleLoadBalancingSchemeInvalid             = GlobalForwardingRuleLoadBalancingScheme("INVALID")
)

func (GlobalForwardingRuleLoadBalancingScheme) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GlobalForwardingRuleLoadBalancingScheme) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalForwardingRuleLoadBalancingScheme) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalForwardingRuleLoadBalancingScheme) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GlobalForwardingRuleLoadBalancingScheme) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM, STANDARD.
//
// For regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM.
//
// If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address.
type GlobalForwardingRuleNetworkTier pulumi.String

const (
	GlobalForwardingRuleNetworkTierPremium  = GlobalForwardingRuleNetworkTier("PREMIUM")
	GlobalForwardingRuleNetworkTierStandard = GlobalForwardingRuleNetworkTier("STANDARD")
)

func (GlobalForwardingRuleNetworkTier) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GlobalForwardingRuleNetworkTier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalForwardingRuleNetworkTier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalForwardingRuleNetworkTier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GlobalForwardingRuleNetworkTier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Type of network endpoints in this network endpoint group. Can be one of GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT, INTERNET_FQDN_PORT, INTERNET_IP_PORT, or SERVERLESS.
type GlobalNetworkEndpointGroupNetworkEndpointType pulumi.String

const (
	GlobalNetworkEndpointGroupNetworkEndpointTypeGceVmIp             = GlobalNetworkEndpointGroupNetworkEndpointType("GCE_VM_IP")
	GlobalNetworkEndpointGroupNetworkEndpointTypeGceVmIpPort         = GlobalNetworkEndpointGroupNetworkEndpointType("GCE_VM_IP_PORT")
	GlobalNetworkEndpointGroupNetworkEndpointTypeInternetFqdnPort    = GlobalNetworkEndpointGroupNetworkEndpointType("INTERNET_FQDN_PORT")
	GlobalNetworkEndpointGroupNetworkEndpointTypeInternetIpPort      = GlobalNetworkEndpointGroupNetworkEndpointType("INTERNET_IP_PORT")
	GlobalNetworkEndpointGroupNetworkEndpointTypeNonGcpPrivateIpPort = GlobalNetworkEndpointGroupNetworkEndpointType("NON_GCP_PRIVATE_IP_PORT")
	GlobalNetworkEndpointGroupNetworkEndpointTypeServerless          = GlobalNetworkEndpointGroupNetworkEndpointType("SERVERLESS")
)

func (GlobalNetworkEndpointGroupNetworkEndpointType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GlobalNetworkEndpointGroupNetworkEndpointType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalNetworkEndpointGroupNetworkEndpointType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalNetworkEndpointGroupNetworkEndpointType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GlobalNetworkEndpointGroupNetworkEndpointType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The status of the public delegated prefix.
type GlobalPublicDelegatedPrefixStatus pulumi.String

const (
	GlobalPublicDelegatedPrefixStatusAnnounced    = GlobalPublicDelegatedPrefixStatus("ANNOUNCED")
	GlobalPublicDelegatedPrefixStatusDeleting     = GlobalPublicDelegatedPrefixStatus("DELETING")
	GlobalPublicDelegatedPrefixStatusInitializing = GlobalPublicDelegatedPrefixStatus("INITIALIZING")
)

func (GlobalPublicDelegatedPrefixStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GlobalPublicDelegatedPrefixStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalPublicDelegatedPrefixStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GlobalPublicDelegatedPrefixStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GlobalPublicDelegatedPrefixStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The ID of a supported feature. Read  Enabling guest operating system features to see a list of available options.
type GuestOsFeatureType pulumi.String

const (
	GuestOsFeatureTypeFeatureTypeUnspecified = GuestOsFeatureType("FEATURE_TYPE_UNSPECIFIED")
	GuestOsFeatureTypeGvnic                  = GuestOsFeatureType("GVNIC")
	GuestOsFeatureTypeMultiIpSubnet          = GuestOsFeatureType("MULTI_IP_SUBNET")
	GuestOsFeatureTypeSecureBoot             = GuestOsFeatureType("SECURE_BOOT")
	GuestOsFeatureTypeSevCapable             = GuestOsFeatureType("SEV_CAPABLE")
	GuestOsFeatureTypeUefiCompatible         = GuestOsFeatureType("UEFI_COMPATIBLE")
	GuestOsFeatureTypeVirtioScsiMultiqueue   = GuestOsFeatureType("VIRTIO_SCSI_MULTIQUEUE")
	GuestOsFeatureTypeWindows                = GuestOsFeatureType("WINDOWS")
)

func (GuestOsFeatureType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GuestOsFeatureType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GuestOsFeatureType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GuestOsFeatureType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GuestOsFeatureType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies how port is selected for health checking, can be one of following values:
// USE_FIXED_PORT: The port number in port is used for health checking.
// USE_NAMED_PORT: The portName is used for health checking.
// USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.
//
// If not specified, HTTP2 health check follows behavior specified in port and portName fields.
type HTTP2HealthCheckPortSpecification pulumi.String

const (
	HTTP2HealthCheckPortSpecificationUseFixedPort   = HTTP2HealthCheckPortSpecification("USE_FIXED_PORT")
	HTTP2HealthCheckPortSpecificationUseNamedPort   = HTTP2HealthCheckPortSpecification("USE_NAMED_PORT")
	HTTP2HealthCheckPortSpecificationUseServingPort = HTTP2HealthCheckPortSpecification("USE_SERVING_PORT")
)

func (HTTP2HealthCheckPortSpecification) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e HTTP2HealthCheckPortSpecification) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HTTP2HealthCheckPortSpecification) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HTTP2HealthCheckPortSpecification) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HTTP2HealthCheckPortSpecification) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
type HTTP2HealthCheckProxyHeader pulumi.String

const (
	HTTP2HealthCheckProxyHeaderNone    = HTTP2HealthCheckProxyHeader("NONE")
	HTTP2HealthCheckProxyHeaderProxyV1 = HTTP2HealthCheckProxyHeader("PROXY_V1")
)

func (HTTP2HealthCheckProxyHeader) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e HTTP2HealthCheckProxyHeader) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HTTP2HealthCheckProxyHeader) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HTTP2HealthCheckProxyHeader) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HTTP2HealthCheckProxyHeader) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies how port is selected for health checking, can be one of following values:
// USE_FIXED_PORT: The port number in port is used for health checking.
// USE_NAMED_PORT: The portName is used for health checking.
// USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.
//
// If not specified, HTTP health check follows behavior specified in port and portName fields.
type HTTPHealthCheckPortSpecification pulumi.String

const (
	HTTPHealthCheckPortSpecificationUseFixedPort   = HTTPHealthCheckPortSpecification("USE_FIXED_PORT")
	HTTPHealthCheckPortSpecificationUseNamedPort   = HTTPHealthCheckPortSpecification("USE_NAMED_PORT")
	HTTPHealthCheckPortSpecificationUseServingPort = HTTPHealthCheckPortSpecification("USE_SERVING_PORT")
)

func (HTTPHealthCheckPortSpecification) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e HTTPHealthCheckPortSpecification) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HTTPHealthCheckPortSpecification) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HTTPHealthCheckPortSpecification) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HTTPHealthCheckPortSpecification) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
type HTTPHealthCheckProxyHeader pulumi.String

const (
	HTTPHealthCheckProxyHeaderNone    = HTTPHealthCheckProxyHeader("NONE")
	HTTPHealthCheckProxyHeaderProxyV1 = HTTPHealthCheckProxyHeader("PROXY_V1")
)

func (HTTPHealthCheckProxyHeader) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e HTTPHealthCheckProxyHeader) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HTTPHealthCheckProxyHeader) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HTTPHealthCheckProxyHeader) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HTTPHealthCheckProxyHeader) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies how port is selected for health checking, can be one of following values:
// USE_FIXED_PORT: The port number in port is used for health checking.
// USE_NAMED_PORT: The portName is used for health checking.
// USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.
//
// If not specified, HTTPS health check follows behavior specified in port and portName fields.
type HTTPSHealthCheckPortSpecification pulumi.String

const (
	HTTPSHealthCheckPortSpecificationUseFixedPort   = HTTPSHealthCheckPortSpecification("USE_FIXED_PORT")
	HTTPSHealthCheckPortSpecificationUseNamedPort   = HTTPSHealthCheckPortSpecification("USE_NAMED_PORT")
	HTTPSHealthCheckPortSpecificationUseServingPort = HTTPSHealthCheckPortSpecification("USE_SERVING_PORT")
)

func (HTTPSHealthCheckPortSpecification) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e HTTPSHealthCheckPortSpecification) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HTTPSHealthCheckPortSpecification) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HTTPSHealthCheckPortSpecification) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HTTPSHealthCheckPortSpecification) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
type HTTPSHealthCheckProxyHeader pulumi.String

const (
	HTTPSHealthCheckProxyHeaderNone    = HTTPSHealthCheckProxyHeader("NONE")
	HTTPSHealthCheckProxyHeaderProxyV1 = HTTPSHealthCheckProxyHeader("PROXY_V1")
)

func (HTTPSHealthCheckProxyHeader) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e HTTPSHealthCheckProxyHeader) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HTTPSHealthCheckProxyHeader) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HTTPSHealthCheckProxyHeader) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HTTPSHealthCheckProxyHeader) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS or HTTP2. If not specified, the default is TCP. Exactly one of the protocol-specific health check field must be specified, which must match type field.
type HealthCheckType pulumi.String

const (
	HealthCheckTypeGrpc    = HealthCheckType("GRPC")
	HealthCheckTypeHttp    = HealthCheckType("HTTP")
	HealthCheckTypeHttp2   = HealthCheckType("HTTP2")
	HealthCheckTypeHttps   = HealthCheckType("HTTPS")
	HealthCheckTypeInvalid = HealthCheckType("INVALID")
	HealthCheckTypeSsl     = HealthCheckType("SSL")
	HealthCheckTypeTcp     = HealthCheckType("TCP")
)

func (HealthCheckType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e HealthCheckType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HealthCheckType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HealthCheckType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HealthCheckType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The HTTP Status code to use for this RedirectAction.
// Supported values are:
// - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301.
// - FOUND, which corresponds to 302.
// - SEE_OTHER which corresponds to 303.
// - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained.
// - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained.
type HttpRedirectActionRedirectResponseCode pulumi.String

const (
	HttpRedirectActionRedirectResponseCodeFound                   = HttpRedirectActionRedirectResponseCode("FOUND")
	HttpRedirectActionRedirectResponseCodeMovedPermanentlyDefault = HttpRedirectActionRedirectResponseCode("MOVED_PERMANENTLY_DEFAULT")
	HttpRedirectActionRedirectResponseCodePermanentRedirect       = HttpRedirectActionRedirectResponseCode("PERMANENT_REDIRECT")
	HttpRedirectActionRedirectResponseCodeSeeOther                = HttpRedirectActionRedirectResponseCode("SEE_OTHER")
	HttpRedirectActionRedirectResponseCodeTemporaryRedirect       = HttpRedirectActionRedirectResponseCode("TEMPORARY_REDIRECT")
)

func (HttpRedirectActionRedirectResponseCode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e HttpRedirectActionRedirectResponseCode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpRedirectActionRedirectResponseCode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpRedirectActionRedirectResponseCode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HttpRedirectActionRedirectResponseCode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
type ImageRawDiskContainerType pulumi.String

const (
	ImageRawDiskContainerTypeTar = ImageRawDiskContainerType("TAR")
)

func (ImageRawDiskContainerType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ImageRawDiskContainerType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImageRawDiskContainerType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImageRawDiskContainerType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ImageRawDiskContainerType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The type of the image used to create this disk. The default and only value is RAW
type ImageSourceType pulumi.String

const (
	ImageSourceTypeRaw = ImageSourceType("RAW")
)

func (ImageSourceType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ImageSourceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImageSourceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImageSourceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ImageSourceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The status of the image. An image can be used to create other resources, such as instances, only after the image has been successfully created and the status is set to READY. Possible values are FAILED, PENDING, or READY.
type ImageStatus pulumi.String

const (
	ImageStatusDeleting = ImageStatus("DELETING")
	ImageStatusFailed   = ImageStatus("FAILED")
	ImageStatusPending  = ImageStatus("PENDING")
	ImageStatusReady    = ImageStatus("READY")
)

func (ImageStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ImageStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImageStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImageStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ImageStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The  instance redistribution policy for regional managed instance groups. Valid values are:
// - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region.
// - NONE: For non-autoscaled groups, proactive redistribution is disabled.
type InstanceGroupManagerUpdatePolicyInstanceRedistributionType pulumi.String

const (
	InstanceGroupManagerUpdatePolicyInstanceRedistributionTypeNone      = InstanceGroupManagerUpdatePolicyInstanceRedistributionType("NONE")
	InstanceGroupManagerUpdatePolicyInstanceRedistributionTypeProactive = InstanceGroupManagerUpdatePolicyInstanceRedistributionType("PROACTIVE")
)

func (InstanceGroupManagerUpdatePolicyInstanceRedistributionType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InstanceGroupManagerUpdatePolicyInstanceRedistributionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceGroupManagerUpdatePolicyInstanceRedistributionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceGroupManagerUpdatePolicyInstanceRedistributionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InstanceGroupManagerUpdatePolicyInstanceRedistributionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
type InstanceGroupManagerUpdatePolicyMinimalAction pulumi.String

const (
	InstanceGroupManagerUpdatePolicyMinimalActionNone    = InstanceGroupManagerUpdatePolicyMinimalAction("NONE")
	InstanceGroupManagerUpdatePolicyMinimalActionRefresh = InstanceGroupManagerUpdatePolicyMinimalAction("REFRESH")
	InstanceGroupManagerUpdatePolicyMinimalActionReplace = InstanceGroupManagerUpdatePolicyMinimalAction("REPLACE")
	InstanceGroupManagerUpdatePolicyMinimalActionRestart = InstanceGroupManagerUpdatePolicyMinimalAction("RESTART")
)

func (InstanceGroupManagerUpdatePolicyMinimalAction) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InstanceGroupManagerUpdatePolicyMinimalAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceGroupManagerUpdatePolicyMinimalAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceGroupManagerUpdatePolicyMinimalAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InstanceGroupManagerUpdatePolicyMinimalAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// What action should be used to replace instances. See minimal_action.REPLACE
type InstanceGroupManagerUpdatePolicyReplacementMethod pulumi.String

const (
	InstanceGroupManagerUpdatePolicyReplacementMethodRecreate   = InstanceGroupManagerUpdatePolicyReplacementMethod("RECREATE")
	InstanceGroupManagerUpdatePolicyReplacementMethodSubstitute = InstanceGroupManagerUpdatePolicyReplacementMethod("SUBSTITUTE")
)

func (InstanceGroupManagerUpdatePolicyReplacementMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InstanceGroupManagerUpdatePolicyReplacementMethod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceGroupManagerUpdatePolicyReplacementMethod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceGroupManagerUpdatePolicyReplacementMethod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InstanceGroupManagerUpdatePolicyReplacementMethod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
type InstanceGroupManagerUpdatePolicyType pulumi.String

const (
	InstanceGroupManagerUpdatePolicyTypeOpportunistic = InstanceGroupManagerUpdatePolicyType("OPPORTUNISTIC")
	InstanceGroupManagerUpdatePolicyTypeProactive     = InstanceGroupManagerUpdatePolicyType("PROACTIVE")
)

func (InstanceGroupManagerUpdatePolicyType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InstanceGroupManagerUpdatePolicyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceGroupManagerUpdatePolicyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceGroupManagerUpdatePolicyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InstanceGroupManagerUpdatePolicyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// PostKeyRevocationActionType of the instance.
type InstancePostKeyRevocationActionType pulumi.String

const (
	InstancePostKeyRevocationActionTypeNoop                                   = InstancePostKeyRevocationActionType("NOOP")
	InstancePostKeyRevocationActionTypePostKeyRevocationActionTypeUnspecified = InstancePostKeyRevocationActionType("POST_KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED")
	InstancePostKeyRevocationActionTypeShutdown                               = InstancePostKeyRevocationActionType("SHUTDOWN")
)

func (InstancePostKeyRevocationActionType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InstancePostKeyRevocationActionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstancePostKeyRevocationActionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstancePostKeyRevocationActionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InstancePostKeyRevocationActionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The private IPv6 google access type for the VM. If not specified, use  INHERIT_FROM_SUBNETWORK as default.
type InstancePrivateIpv6GoogleAccess pulumi.String

const (
	InstancePrivateIpv6GoogleAccessEnableBidirectionalAccessToGoogle = InstancePrivateIpv6GoogleAccess("ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE")
	InstancePrivateIpv6GoogleAccessEnableOutboundVmAccessToGoogle    = InstancePrivateIpv6GoogleAccess("ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE")
	InstancePrivateIpv6GoogleAccessInheritFromSubnetwork             = InstancePrivateIpv6GoogleAccess("INHERIT_FROM_SUBNETWORK")
)

func (InstancePrivateIpv6GoogleAccess) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InstancePrivateIpv6GoogleAccess) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstancePrivateIpv6GoogleAccess) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstancePrivateIpv6GoogleAccess) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InstancePrivateIpv6GoogleAccess) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// PostKeyRevocationActionType of the instance.
type InstancePropertiesPostKeyRevocationActionType pulumi.String

const (
	InstancePropertiesPostKeyRevocationActionTypeNoop                                   = InstancePropertiesPostKeyRevocationActionType("NOOP")
	InstancePropertiesPostKeyRevocationActionTypePostKeyRevocationActionTypeUnspecified = InstancePropertiesPostKeyRevocationActionType("POST_KEY_REVOCATION_ACTION_TYPE_UNSPECIFIED")
	InstancePropertiesPostKeyRevocationActionTypeShutdown                               = InstancePropertiesPostKeyRevocationActionType("SHUTDOWN")
)

func (InstancePropertiesPostKeyRevocationActionType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InstancePropertiesPostKeyRevocationActionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstancePropertiesPostKeyRevocationActionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstancePropertiesPostKeyRevocationActionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InstancePropertiesPostKeyRevocationActionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The private IPv6 google access type for VMs. If not specified, use  INHERIT_FROM_SUBNETWORK as default.
type InstancePropertiesPrivateIpv6GoogleAccess pulumi.String

const (
	InstancePropertiesPrivateIpv6GoogleAccessEnableBidirectionalAccessToGoogle = InstancePropertiesPrivateIpv6GoogleAccess("ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE")
	InstancePropertiesPrivateIpv6GoogleAccessEnableOutboundVmAccessToGoogle    = InstancePropertiesPrivateIpv6GoogleAccess("ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE")
	InstancePropertiesPrivateIpv6GoogleAccessInheritFromSubnetwork             = InstancePropertiesPrivateIpv6GoogleAccess("INHERIT_FROM_SUBNETWORK")
)

func (InstancePropertiesPrivateIpv6GoogleAccess) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InstancePropertiesPrivateIpv6GoogleAccess) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstancePropertiesPrivateIpv6GoogleAccess) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstancePropertiesPrivateIpv6GoogleAccess) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InstancePropertiesPrivateIpv6GoogleAccess) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The status of the instance. One of the following values: PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, REPAIRING, and TERMINATED. For more information about the status of the instance, see  Instance life cycle.
type InstanceStatus pulumi.String

const (
	InstanceStatusDeprovisioning = InstanceStatus("DEPROVISIONING")
	InstanceStatusProvisioning   = InstanceStatus("PROVISIONING")
	InstanceStatusRepairing      = InstanceStatus("REPAIRING")
	InstanceStatusRunning        = InstanceStatus("RUNNING")
	InstanceStatusStaging        = InstanceStatus("STAGING")
	InstanceStatusStopped        = InstanceStatus("STOPPED")
	InstanceStatusStopping       = InstanceStatus("STOPPING")
	InstanceStatusSuspended      = InstanceStatus("SUSPENDED")
	InstanceStatusSuspending     = InstanceStatus("SUSPENDING")
	InstanceStatusTerminated     = InstanceStatus("TERMINATED")
)

func (InstanceStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InstanceStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InstanceStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, and can take one of the following values:
// - BPS_50M: 50 Mbit/s
// - BPS_100M: 100 Mbit/s
// - BPS_200M: 200 Mbit/s
// - BPS_300M: 300 Mbit/s
// - BPS_400M: 400 Mbit/s
// - BPS_500M: 500 Mbit/s
// - BPS_1G: 1 Gbit/s
// - BPS_2G: 2 Gbit/s
// - BPS_5G: 5 Gbit/s
// - BPS_10G: 10 Gbit/s
// - BPS_20G: 20 Gbit/s
// - BPS_50G: 50 Gbit/s
type InterconnectAttachmentBandwidth pulumi.String

const (
	InterconnectAttachmentBandwidthBps100m = InterconnectAttachmentBandwidth("BPS_100M")
	InterconnectAttachmentBandwidthBps10g  = InterconnectAttachmentBandwidth("BPS_10G")
	InterconnectAttachmentBandwidthBps1g   = InterconnectAttachmentBandwidth("BPS_1G")
	InterconnectAttachmentBandwidthBps200m = InterconnectAttachmentBandwidth("BPS_200M")
	InterconnectAttachmentBandwidthBps20g  = InterconnectAttachmentBandwidth("BPS_20G")
	InterconnectAttachmentBandwidthBps2g   = InterconnectAttachmentBandwidth("BPS_2G")
	InterconnectAttachmentBandwidthBps300m = InterconnectAttachmentBandwidth("BPS_300M")
	InterconnectAttachmentBandwidthBps400m = InterconnectAttachmentBandwidth("BPS_400M")
	InterconnectAttachmentBandwidthBps500m = InterconnectAttachmentBandwidth("BPS_500M")
	InterconnectAttachmentBandwidthBps50g  = InterconnectAttachmentBandwidth("BPS_50G")
	InterconnectAttachmentBandwidthBps50m  = InterconnectAttachmentBandwidth("BPS_50M")
	InterconnectAttachmentBandwidthBps5g   = InterconnectAttachmentBandwidth("BPS_5G")
)

func (InterconnectAttachmentBandwidth) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InterconnectAttachmentBandwidth) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectAttachmentBandwidth) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectAttachmentBandwidth) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InterconnectAttachmentBandwidth) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values:
// - AVAILABILITY_DOMAIN_ANY
// - AVAILABILITY_DOMAIN_1
// - AVAILABILITY_DOMAIN_2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY_DOMAIN_ANY.
type InterconnectAttachmentEdgeAvailabilityDomain pulumi.String

const (
	InterconnectAttachmentEdgeAvailabilityDomainAvailabilityDomain1   = InterconnectAttachmentEdgeAvailabilityDomain("AVAILABILITY_DOMAIN_1")
	InterconnectAttachmentEdgeAvailabilityDomainAvailabilityDomain2   = InterconnectAttachmentEdgeAvailabilityDomain("AVAILABILITY_DOMAIN_2")
	InterconnectAttachmentEdgeAvailabilityDomainAvailabilityDomainAny = InterconnectAttachmentEdgeAvailabilityDomain("AVAILABILITY_DOMAIN_ANY")
)

func (InterconnectAttachmentEdgeAvailabilityDomain) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InterconnectAttachmentEdgeAvailabilityDomain) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectAttachmentEdgeAvailabilityDomain) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectAttachmentEdgeAvailabilityDomain) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InterconnectAttachmentEdgeAvailabilityDomain) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Indicates the user-supplied encryption option of this interconnect attachment:
// - NONE is the default value, which means that the attachment carries unencrypted traffic. VMs can send traffic to, or receive traffic from, this type of attachment.
// - IPSEC indicates that the attachment carries only traffic encrypted by an IPsec device such as an HA VPN gateway. VMs cannot directly send traffic to, or receive traffic from, such an attachment. To use IPsec-encrypted Cloud Interconnect, create the attachment using this option.
//   Not currently available in all Interconnect locations.
type InterconnectAttachmentEncryption pulumi.String

const (
	InterconnectAttachmentEncryptionIpsec = InterconnectAttachmentEncryption("IPSEC")
	InterconnectAttachmentEncryptionNone  = InterconnectAttachmentEncryption("NONE")
)

func (InterconnectAttachmentEncryption) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InterconnectAttachmentEncryption) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectAttachmentEncryption) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectAttachmentEncryption) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InterconnectAttachmentEncryption) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The current status of whether or not this interconnect attachment is functional, which can take one of the following values:
// - OS_ACTIVE: The attachment has been turned up and is ready to use.
// - OS_UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete.
type InterconnectAttachmentOperationalStatus pulumi.String

const (
	InterconnectAttachmentOperationalStatusOsActive        = InterconnectAttachmentOperationalStatus("OS_ACTIVE")
	InterconnectAttachmentOperationalStatusOsUnprovisioned = InterconnectAttachmentOperationalStatus("OS_UNPROVISIONED")
)

func (InterconnectAttachmentOperationalStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InterconnectAttachmentOperationalStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectAttachmentOperationalStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectAttachmentOperationalStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InterconnectAttachmentOperationalStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The current state of this attachment's functionality. Enum values ACTIVE and UNPROVISIONED are shared by DEDICATED/PRIVATE, PARTNER, and PARTNER_PROVIDER interconnect attachments, while enum values PENDING_PARTNER, PARTNER_REQUEST_RECEIVED, and PENDING_CUSTOMER are used for only PARTNER and PARTNER_PROVIDER interconnect attachments. This state can take one of the following values:
// - ACTIVE: The attachment has been turned up and is ready to use.
// - UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete.
// - PENDING_PARTNER: A newly-created PARTNER attachment that has not yet been configured on the Partner side.
// - PARTNER_REQUEST_RECEIVED: A PARTNER attachment is in the process of provisioning after a PARTNER_PROVIDER attachment was created that references it.
// - PENDING_CUSTOMER: A PARTNER or PARTNER_PROVIDER attachment that is waiting for a customer to activate it.
// - DEFUNCT: The attachment was deleted externally and is no longer functional. This could be because the associated Interconnect was removed, or because the other side of a Partner attachment was deleted.
type InterconnectAttachmentStateEnum pulumi.String

const (
	InterconnectAttachmentStateEnumActive                 = InterconnectAttachmentStateEnum("ACTIVE")
	InterconnectAttachmentStateEnumDefunct                = InterconnectAttachmentStateEnum("DEFUNCT")
	InterconnectAttachmentStateEnumPartnerRequestReceived = InterconnectAttachmentStateEnum("PARTNER_REQUEST_RECEIVED")
	InterconnectAttachmentStateEnumPendingCustomer        = InterconnectAttachmentStateEnum("PENDING_CUSTOMER")
	InterconnectAttachmentStateEnumPendingPartner         = InterconnectAttachmentStateEnum("PENDING_PARTNER")
	InterconnectAttachmentStateEnumStateUnspecified       = InterconnectAttachmentStateEnum("STATE_UNSPECIFIED")
	InterconnectAttachmentStateEnumUnprovisioned          = InterconnectAttachmentStateEnum("UNPROVISIONED")
)

func (InterconnectAttachmentStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InterconnectAttachmentStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectAttachmentStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectAttachmentStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InterconnectAttachmentStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The type of interconnect attachment this is, which can take one of the following values:
// - DEDICATED: an attachment to a Dedicated Interconnect.
// - PARTNER: an attachment to a Partner Interconnect, created by the customer.
// - PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner.
type InterconnectAttachmentType pulumi.String

const (
	InterconnectAttachmentTypeDedicated       = InterconnectAttachmentType("DEDICATED")
	InterconnectAttachmentTypePartner         = InterconnectAttachmentType("PARTNER")
	InterconnectAttachmentTypePartnerProvider = InterconnectAttachmentType("PARTNER_PROVIDER")
)

func (InterconnectAttachmentType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InterconnectAttachmentType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectAttachmentType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectAttachmentType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InterconnectAttachmentType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Type of interconnect, which can take one of the following values:
// - PARTNER: A partner-managed interconnection shared between customers though a partner.
// - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED.
type InterconnectInterconnectType pulumi.String

const (
	InterconnectInterconnectTypeDedicated = InterconnectInterconnectType("DEDICATED")
	InterconnectInterconnectTypeItPrivate = InterconnectInterconnectType("IT_PRIVATE")
	InterconnectInterconnectTypePartner   = InterconnectInterconnectType("PARTNER")
)

func (InterconnectInterconnectType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InterconnectInterconnectType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectInterconnectType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectInterconnectType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InterconnectInterconnectType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Type of link requested, which can take one of the following values:
// - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics
// - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle.
type InterconnectLinkType pulumi.String

const (
	InterconnectLinkTypeLinkTypeEthernet100gLr = InterconnectLinkType("LINK_TYPE_ETHERNET_100G_LR")
	InterconnectLinkTypeLinkTypeEthernet10gLr  = InterconnectLinkType("LINK_TYPE_ETHERNET_10G_LR")
)

func (InterconnectLinkType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InterconnectLinkType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectLinkType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectLinkType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InterconnectLinkType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The current status of this Interconnect's functionality, which can take one of the following values:
// - OS_ACTIVE: A valid Interconnect, which is turned up and is ready to use. Attachments may be provisioned on this Interconnect.
// - OS_UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this Interconnect.
// - OS_UNDER_MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
type InterconnectOperationalStatus pulumi.String

const (
	InterconnectOperationalStatusOsActive        = InterconnectOperationalStatus("OS_ACTIVE")
	InterconnectOperationalStatusOsUnprovisioned = InterconnectOperationalStatus("OS_UNPROVISIONED")
)

func (InterconnectOperationalStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InterconnectOperationalStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectOperationalStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectOperationalStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InterconnectOperationalStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Form this outage is expected to take, which can take one of the following values:
// - OUTAGE: The Interconnect may be completely out of service for some or all of the specified window.
// - PARTIAL_OUTAGE: Some circuits comprising the Interconnect as a whole should remain up, but with reduced bandwidth. Note that the versions of this enum prefixed with "IT_" have been deprecated in favor of the unprefixed values.
type InterconnectOutageNotificationIssueType pulumi.String

const (
	InterconnectOutageNotificationIssueTypeItOutage        = InterconnectOutageNotificationIssueType("IT_OUTAGE")
	InterconnectOutageNotificationIssueTypeItPartialOutage = InterconnectOutageNotificationIssueType("IT_PARTIAL_OUTAGE")
	InterconnectOutageNotificationIssueTypeOutage          = InterconnectOutageNotificationIssueType("OUTAGE")
	InterconnectOutageNotificationIssueTypePartialOutage   = InterconnectOutageNotificationIssueType("PARTIAL_OUTAGE")
)

func (InterconnectOutageNotificationIssueType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InterconnectOutageNotificationIssueType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectOutageNotificationIssueType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectOutageNotificationIssueType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InterconnectOutageNotificationIssueType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The party that generated this notification, which can take the following value:
// - GOOGLE: this notification as generated by Google. Note that the value of NSRC_GOOGLE has been deprecated in favor of GOOGLE.
type InterconnectOutageNotificationSource pulumi.String

const (
	InterconnectOutageNotificationSourceGoogle     = InterconnectOutageNotificationSource("GOOGLE")
	InterconnectOutageNotificationSourceNsrcGoogle = InterconnectOutageNotificationSource("NSRC_GOOGLE")
)

func (InterconnectOutageNotificationSource) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InterconnectOutageNotificationSource) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectOutageNotificationSource) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectOutageNotificationSource) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InterconnectOutageNotificationSource) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// State of this notification, which can take one of the following values:
// - ACTIVE: This outage notification is active. The event could be in the past, present, or future. See start_time and end_time for scheduling.
// - CANCELLED: The outage associated with this notification was cancelled before the outage was due to start. Note that the versions of this enum prefixed with "NS_" have been deprecated in favor of the unprefixed values.
type InterconnectOutageNotificationState pulumi.String

const (
	InterconnectOutageNotificationStateActive     = InterconnectOutageNotificationState("ACTIVE")
	InterconnectOutageNotificationStateCancelled  = InterconnectOutageNotificationState("CANCELLED")
	InterconnectOutageNotificationStateCompleted  = InterconnectOutageNotificationState("COMPLETED")
	InterconnectOutageNotificationStateNsActive   = InterconnectOutageNotificationState("NS_ACTIVE")
	InterconnectOutageNotificationStateNsCanceled = InterconnectOutageNotificationState("NS_CANCELED")
)

func (InterconnectOutageNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InterconnectOutageNotificationState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectOutageNotificationState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectOutageNotificationState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InterconnectOutageNotificationState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The current state of Interconnect functionality, which can take one of the following values:
// - ACTIVE: The Interconnect is valid, turned up and ready to use. Attachments may be provisioned on this Interconnect.
// - UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect.
// - UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
type InterconnectStateEnum pulumi.String

const (
	InterconnectStateEnumActive        = InterconnectStateEnum("ACTIVE")
	InterconnectStateEnumUnprovisioned = InterconnectStateEnum("UNPROVISIONED")
)

func (InterconnectStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InterconnectStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InterconnectStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InterconnectStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The log_name to populate in the Cloud Audit Record.
type LogConfigCloudAuditOptionsLogName pulumi.String

const (
	LogConfigCloudAuditOptionsLogNameAdminActivity      = LogConfigCloudAuditOptionsLogName("ADMIN_ACTIVITY")
	LogConfigCloudAuditOptionsLogNameDataAccess         = LogConfigCloudAuditOptionsLogName("DATA_ACCESS")
	LogConfigCloudAuditOptionsLogNameUnspecifiedLogName = LogConfigCloudAuditOptionsLogName("UNSPECIFIED_LOG_NAME")
)

func (LogConfigCloudAuditOptionsLogName) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e LogConfigCloudAuditOptionsLogName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LogConfigCloudAuditOptionsLogName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LogConfigCloudAuditOptionsLogName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LogConfigCloudAuditOptionsLogName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LogConfigDataAccessOptionsLogMode pulumi.String

const (
	LogConfigDataAccessOptionsLogModeLogFailClosed      = LogConfigDataAccessOptionsLogMode("LOG_FAIL_CLOSED")
	LogConfigDataAccessOptionsLogModeLogModeUnspecified = LogConfigDataAccessOptionsLogMode("LOG_MODE_UNSPECIFIED")
)

func (LogConfigDataAccessOptionsLogMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e LogConfigDataAccessOptionsLogMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LogConfigDataAccessOptionsLogMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LogConfigDataAccessOptionsLogMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LogConfigDataAccessOptionsLogMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies how individual filterLabel matches within the list of filterLabels contribute towards the overall metadataFilter match.
// Supported values are:
// - MATCH_ANY: At least one of the filterLabels must have a matching label in the provided metadata.
// - MATCH_ALL: All filterLabels must have matching labels in the provided metadata.
type MetadataFilterFilterMatchCriteria pulumi.String

const (
	MetadataFilterFilterMatchCriteriaMatchAll = MetadataFilterFilterMatchCriteria("MATCH_ALL")
	MetadataFilterFilterMatchCriteriaMatchAny = MetadataFilterFilterMatchCriteria("MATCH_ANY")
	MetadataFilterFilterMatchCriteriaNotSet   = MetadataFilterFilterMatchCriteria("NOT_SET")
)

func (MetadataFilterFilterMatchCriteria) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e MetadataFilterFilterMatchCriteria) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetadataFilterFilterMatchCriteria) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetadataFilterFilterMatchCriteria) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MetadataFilterFilterMatchCriteria) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Type of network endpoints in this network endpoint group. Can be one of GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT, INTERNET_FQDN_PORT, INTERNET_IP_PORT, or SERVERLESS.
type NetworkEndpointGroupNetworkEndpointType pulumi.String

const (
	NetworkEndpointGroupNetworkEndpointTypeGceVmIp             = NetworkEndpointGroupNetworkEndpointType("GCE_VM_IP")
	NetworkEndpointGroupNetworkEndpointTypeGceVmIpPort         = NetworkEndpointGroupNetworkEndpointType("GCE_VM_IP_PORT")
	NetworkEndpointGroupNetworkEndpointTypeInternetFqdnPort    = NetworkEndpointGroupNetworkEndpointType("INTERNET_FQDN_PORT")
	NetworkEndpointGroupNetworkEndpointTypeInternetIpPort      = NetworkEndpointGroupNetworkEndpointType("INTERNET_IP_PORT")
	NetworkEndpointGroupNetworkEndpointTypeNonGcpPrivateIpPort = NetworkEndpointGroupNetworkEndpointType("NON_GCP_PRIVATE_IP_PORT")
	NetworkEndpointGroupNetworkEndpointTypeServerless          = NetworkEndpointGroupNetworkEndpointType("SERVERLESS")
)

func (NetworkEndpointGroupNetworkEndpointType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NetworkEndpointGroupNetworkEndpointType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkEndpointGroupNetworkEndpointType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkEndpointGroupNetworkEndpointType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NetworkEndpointGroupNetworkEndpointType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
type NetworkInterfaceNicType pulumi.String

const (
	NetworkInterfaceNicTypeGvnic              = NetworkInterfaceNicType("GVNIC")
	NetworkInterfaceNicTypeUnspecifiedNicType = NetworkInterfaceNicType("UNSPECIFIED_NIC_TYPE")
	NetworkInterfaceNicTypeVirtioNet          = NetworkInterfaceNicType("VIRTIO_NET")
)

func (NetworkInterfaceNicType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NetworkInterfaceNicType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkInterfaceNicType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkInterfaceNicType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NetworkInterfaceNicType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network.
type NetworkPeeringState pulumi.String

const (
	NetworkPeeringStateActive   = NetworkPeeringState("ACTIVE")
	NetworkPeeringStateInactive = NetworkPeeringState("INACTIVE")
)

func (NetworkPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NetworkPeeringState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkPeeringState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkPeeringState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NetworkPeeringState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions.
type NetworkRoutingConfigRoutingMode pulumi.String

const (
	NetworkRoutingConfigRoutingModeGlobal   = NetworkRoutingConfigRoutingMode("GLOBAL")
	NetworkRoutingConfigRoutingModeRegional = NetworkRoutingConfigRoutingMode("REGIONAL")
)

func (NetworkRoutingConfigRoutingMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NetworkRoutingConfigRoutingMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkRoutingConfigRoutingMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkRoutingConfigRoutingMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NetworkRoutingConfigRoutingMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see  Autoscaler modes.
type NodeGroupAutoscalingPolicyMode pulumi.String

const (
	NodeGroupAutoscalingPolicyModeModeUnspecified = NodeGroupAutoscalingPolicyMode("MODE_UNSPECIFIED")
	NodeGroupAutoscalingPolicyModeOff             = NodeGroupAutoscalingPolicyMode("OFF")
	NodeGroupAutoscalingPolicyModeOn              = NodeGroupAutoscalingPolicyMode("ON")
	NodeGroupAutoscalingPolicyModeOnlyScaleOut    = NodeGroupAutoscalingPolicyMode("ONLY_SCALE_OUT")
)

func (NodeGroupAutoscalingPolicyMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NodeGroupAutoscalingPolicyMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeGroupAutoscalingPolicyMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeGroupAutoscalingPolicyMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NodeGroupAutoscalingPolicyMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT. For more information, see  Maintenance policies.
type NodeGroupMaintenancePolicy pulumi.String

const (
	NodeGroupMaintenancePolicyDefault                      = NodeGroupMaintenancePolicy("DEFAULT")
	NodeGroupMaintenancePolicyMaintenancePolicyUnspecified = NodeGroupMaintenancePolicy("MAINTENANCE_POLICY_UNSPECIFIED")
	NodeGroupMaintenancePolicyMigrateWithinNodeGroup       = NodeGroupMaintenancePolicy("MIGRATE_WITHIN_NODE_GROUP")
	NodeGroupMaintenancePolicyRestartInPlace               = NodeGroupMaintenancePolicy("RESTART_IN_PLACE")
)

func (NodeGroupMaintenancePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NodeGroupMaintenancePolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeGroupMaintenancePolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeGroupMaintenancePolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NodeGroupMaintenancePolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NodeGroupStatus pulumi.String

const (
	NodeGroupStatusCreating = NodeGroupStatus("CREATING")
	NodeGroupStatusDeleting = NodeGroupStatus("DELETING")
	NodeGroupStatusInvalid  = NodeGroupStatus("INVALID")
	NodeGroupStatusReady    = NodeGroupStatus("READY")
)

func (NodeGroupStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NodeGroupStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeGroupStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeGroupStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NodeGroupStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// CPU overcommit.
type NodeTemplateCpuOvercommitType pulumi.String

const (
	NodeTemplateCpuOvercommitTypeCpuOvercommitTypeUnspecified = NodeTemplateCpuOvercommitType("CPU_OVERCOMMIT_TYPE_UNSPECIFIED")
	NodeTemplateCpuOvercommitTypeEnabled                      = NodeTemplateCpuOvercommitType("ENABLED")
	NodeTemplateCpuOvercommitTypeNone                         = NodeTemplateCpuOvercommitType("NONE")
)

func (NodeTemplateCpuOvercommitType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NodeTemplateCpuOvercommitType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeTemplateCpuOvercommitType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeTemplateCpuOvercommitType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NodeTemplateCpuOvercommitType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The status of the node template. One of the following values: CREATING, READY, and DELETING.
type NodeTemplateStatus pulumi.String

const (
	NodeTemplateStatusCreating = NodeTemplateStatus("CREATING")
	NodeTemplateStatusDeleting = NodeTemplateStatus("DELETING")
	NodeTemplateStatusInvalid  = NodeTemplateStatus("INVALID")
	NodeTemplateStatusReady    = NodeTemplateStatus("READY")
)

func (NodeTemplateStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NodeTemplateStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeTemplateStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeTemplateStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NodeTemplateStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Indicates whether or not this packet mirroring takes effect. If set to FALSE, this packet mirroring policy will not be enforced on the network.
//
// The default is TRUE.
type PacketMirroringEnable pulumi.String

const (
	PacketMirroringEnableFalse = PacketMirroringEnable("FALSE")
	PacketMirroringEnableTrue  = PacketMirroringEnable("TRUE")
)

func (PacketMirroringEnable) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e PacketMirroringEnable) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PacketMirroringEnable) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PacketMirroringEnable) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PacketMirroringEnable) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH.
type PacketMirroringFilterDirection pulumi.String

const (
	PacketMirroringFilterDirectionBoth    = PacketMirroringFilterDirection("BOTH")
	PacketMirroringFilterDirectionEgress  = PacketMirroringFilterDirection("EGRESS")
	PacketMirroringFilterDirectionIngress = PacketMirroringFilterDirection("INGRESS")
)

func (PacketMirroringFilterDirection) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e PacketMirroringFilterDirection) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PacketMirroringFilterDirection) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PacketMirroringFilterDirection) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PacketMirroringFilterDirection) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The status of the public advertised prefix.
type PublicAdvertisedPrefixStatus pulumi.String

const (
	PublicAdvertisedPrefixStatusInitial                       = PublicAdvertisedPrefixStatus("INITIAL")
	PublicAdvertisedPrefixStatusPrefixConfigurationComplete   = PublicAdvertisedPrefixStatus("PREFIX_CONFIGURATION_COMPLETE")
	PublicAdvertisedPrefixStatusPrefixConfigurationInProgress = PublicAdvertisedPrefixStatus("PREFIX_CONFIGURATION_IN_PROGRESS")
	PublicAdvertisedPrefixStatusPrefixRemovalInProgress       = PublicAdvertisedPrefixStatus("PREFIX_REMOVAL_IN_PROGRESS")
	PublicAdvertisedPrefixStatusPtrConfigured                 = PublicAdvertisedPrefixStatus("PTR_CONFIGURED")
	PublicAdvertisedPrefixStatusReverseDnsLookupFailed        = PublicAdvertisedPrefixStatus("REVERSE_DNS_LOOKUP_FAILED")
	PublicAdvertisedPrefixStatusValidated                     = PublicAdvertisedPrefixStatus("VALIDATED")
)

func (PublicAdvertisedPrefixStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e PublicAdvertisedPrefixStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicAdvertisedPrefixStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicAdvertisedPrefixStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PublicAdvertisedPrefixStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The status of the sub public delegated prefix.
type PublicDelegatedPrefixPublicDelegatedSubPrefixStatus pulumi.String

const (
	PublicDelegatedPrefixPublicDelegatedSubPrefixStatusActive   = PublicDelegatedPrefixPublicDelegatedSubPrefixStatus("ACTIVE")
	PublicDelegatedPrefixPublicDelegatedSubPrefixStatusInactive = PublicDelegatedPrefixPublicDelegatedSubPrefixStatus("INACTIVE")
)

func (PublicDelegatedPrefixPublicDelegatedSubPrefixStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e PublicDelegatedPrefixPublicDelegatedSubPrefixStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicDelegatedPrefixPublicDelegatedSubPrefixStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicDelegatedPrefixPublicDelegatedSubPrefixStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PublicDelegatedPrefixPublicDelegatedSubPrefixStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The status of the public delegated prefix.
type PublicDelegatedPrefixStatus pulumi.String

const (
	PublicDelegatedPrefixStatusAnnounced    = PublicDelegatedPrefixStatus("ANNOUNCED")
	PublicDelegatedPrefixStatusDeleting     = PublicDelegatedPrefixStatus("DELETING")
	PublicDelegatedPrefixStatusInitializing = PublicDelegatedPrefixStatus("INITIALIZING")
)

func (PublicDelegatedPrefixStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e PublicDelegatedPrefixStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicDelegatedPrefixStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicDelegatedPrefixStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PublicDelegatedPrefixStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The status of the autoscaler configuration. Current set of possible values:
// - PENDING: Autoscaler backend hasn't read new/updated configuration.
// - DELETING: Configuration is being deleted.
// - ACTIVE: Configuration is acknowledged to be effective. Some warnings might be present in the statusDetails field.
// - ERROR: Configuration has errors. Actionable for users. Details are present in the statusDetails field.  New values might be added in the future.
type RegionAutoscalerStatus pulumi.String

const (
	RegionAutoscalerStatusActive   = RegionAutoscalerStatus("ACTIVE")
	RegionAutoscalerStatusDeleting = RegionAutoscalerStatus("DELETING")
	RegionAutoscalerStatusError    = RegionAutoscalerStatus("ERROR")
	RegionAutoscalerStatusPending  = RegionAutoscalerStatus("PENDING")
)

func (RegionAutoscalerStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RegionAutoscalerStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionAutoscalerStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionAutoscalerStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RegionAutoscalerStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the load balancer type. Choose EXTERNAL for external HTTP(S), SSL Proxy, TCP Proxy and Network Load Balancing. Choose  INTERNAL for Internal TCP/UDP Load Balancing. Choose  INTERNAL_MANAGED for Internal HTTP(S) Load Balancing.  INTERNAL_SELF_MANAGED for Traffic Director. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer.
type RegionBackendServiceLoadBalancingScheme pulumi.String

const (
	RegionBackendServiceLoadBalancingSchemeExternal                   = RegionBackendServiceLoadBalancingScheme("EXTERNAL")
	RegionBackendServiceLoadBalancingSchemeInternal                   = RegionBackendServiceLoadBalancingScheme("INTERNAL")
	RegionBackendServiceLoadBalancingSchemeInternalManaged            = RegionBackendServiceLoadBalancingScheme("INTERNAL_MANAGED")
	RegionBackendServiceLoadBalancingSchemeInternalSelfManaged        = RegionBackendServiceLoadBalancingScheme("INTERNAL_SELF_MANAGED")
	RegionBackendServiceLoadBalancingSchemeInvalidLoadBalancingScheme = RegionBackendServiceLoadBalancingScheme("INVALID_LOAD_BALANCING_SCHEME")
)

func (RegionBackendServiceLoadBalancingScheme) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RegionBackendServiceLoadBalancingScheme) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionBackendServiceLoadBalancingScheme) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionBackendServiceLoadBalancingScheme) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RegionBackendServiceLoadBalancingScheme) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The load balancing algorithm used within the scope of the locality. The possible values are:
// - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default.
// - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests.
// - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests.
// - RANDOM: The load balancer selects a random healthy host.
// - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer.
// - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824
//
// This field is applicable to either:
// - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED.
// - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
//
// If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect.
//
// Only the default ROUND_ROBIN policy is supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
type RegionBackendServiceLocalityLbPolicy pulumi.String

const (
	RegionBackendServiceLocalityLbPolicyInvalidLbPolicy     = RegionBackendServiceLocalityLbPolicy("INVALID_LB_POLICY")
	RegionBackendServiceLocalityLbPolicyLeastRequest        = RegionBackendServiceLocalityLbPolicy("LEAST_REQUEST")
	RegionBackendServiceLocalityLbPolicyMaglev              = RegionBackendServiceLocalityLbPolicy("MAGLEV")
	RegionBackendServiceLocalityLbPolicyOriginalDestination = RegionBackendServiceLocalityLbPolicy("ORIGINAL_DESTINATION")
	RegionBackendServiceLocalityLbPolicyRandom              = RegionBackendServiceLocalityLbPolicy("RANDOM")
	RegionBackendServiceLocalityLbPolicyRingHash            = RegionBackendServiceLocalityLbPolicy("RING_HASH")
	RegionBackendServiceLocalityLbPolicyRoundRobin          = RegionBackendServiceLocalityLbPolicy("ROUND_ROBIN")
)

func (RegionBackendServiceLocalityLbPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RegionBackendServiceLocalityLbPolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionBackendServiceLocalityLbPolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionBackendServiceLocalityLbPolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RegionBackendServiceLocalityLbPolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The protocol this BackendService uses to communicate with backends.
//
// Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancer or for Traffic Director for more information.
//
// Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy.
type RegionBackendServiceProtocol pulumi.String

const (
	RegionBackendServiceProtocolGrpc  = RegionBackendServiceProtocol("GRPC")
	RegionBackendServiceProtocolHttp  = RegionBackendServiceProtocol("HTTP")
	RegionBackendServiceProtocolHttp2 = RegionBackendServiceProtocol("HTTP2")
	RegionBackendServiceProtocolHttps = RegionBackendServiceProtocol("HTTPS")
	RegionBackendServiceProtocolSsl   = RegionBackendServiceProtocol("SSL")
	RegionBackendServiceProtocolTcp   = RegionBackendServiceProtocol("TCP")
	RegionBackendServiceProtocolUdp   = RegionBackendServiceProtocol("UDP")
)

func (RegionBackendServiceProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RegionBackendServiceProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionBackendServiceProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionBackendServiceProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RegionBackendServiceProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Type of session affinity to use. The default is NONE.
//
// When the loadBalancingScheme is EXTERNAL: * For Network Load Balancing, the possible values are NONE, CLIENT_IP, CLIENT_IP_PROTO, or  CLIENT_IP_PORT_PROTO. * For all other load balancers that use loadBalancingScheme=EXTERNAL, the possible values are NONE, CLIENT_IP, or GENERATED_COOKIE. * You can use GENERATED_COOKIE if the protocol is HTTP, HTTP2, or HTTPS.
//
// When the loadBalancingScheme is INTERNAL, possible values are NONE, CLIENT_IP, CLIENT_IP_PROTO, or CLIENT_IP_PORT_PROTO.
//
// When the loadBalancingScheme is INTERNAL_SELF_MANAGED, or INTERNAL_MANAGED, possible values are NONE, CLIENT_IP, GENERATED_COOKIE, HEADER_FIELD, or HTTP_COOKIE.
//
// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
type RegionBackendServiceSessionAffinity pulumi.String

const (
	RegionBackendServiceSessionAffinityClientIp              = RegionBackendServiceSessionAffinity("CLIENT_IP")
	RegionBackendServiceSessionAffinityClientIpNoDestination = RegionBackendServiceSessionAffinity("CLIENT_IP_NO_DESTINATION")
	RegionBackendServiceSessionAffinityClientIpPortProto     = RegionBackendServiceSessionAffinity("CLIENT_IP_PORT_PROTO")
	RegionBackendServiceSessionAffinityClientIpProto         = RegionBackendServiceSessionAffinity("CLIENT_IP_PROTO")
	RegionBackendServiceSessionAffinityGeneratedCookie       = RegionBackendServiceSessionAffinity("GENERATED_COOKIE")
	RegionBackendServiceSessionAffinityHeaderField           = RegionBackendServiceSessionAffinity("HEADER_FIELD")
	RegionBackendServiceSessionAffinityHttpCookie            = RegionBackendServiceSessionAffinity("HTTP_COOKIE")
	RegionBackendServiceSessionAffinityNone                  = RegionBackendServiceSessionAffinity("NONE")
)

func (RegionBackendServiceSessionAffinity) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RegionBackendServiceSessionAffinity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionBackendServiceSessionAffinity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionBackendServiceSessionAffinity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RegionBackendServiceSessionAffinity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in licenseResources. Note that only MACHINE commitments should have a Type specified.
type RegionCommitmentCategory pulumi.String

const (
	RegionCommitmentCategoryCategoryUnspecified = RegionCommitmentCategory("CATEGORY_UNSPECIFIED")
	RegionCommitmentCategoryLicense             = RegionCommitmentCategory("LICENSE")
	RegionCommitmentCategoryMachine             = RegionCommitmentCategory("MACHINE")
)

func (RegionCommitmentCategory) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RegionCommitmentCategory) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionCommitmentCategory) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionCommitmentCategory) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RegionCommitmentCategory) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
type RegionCommitmentPlan pulumi.String

const (
	RegionCommitmentPlanInvalid        = RegionCommitmentPlan("INVALID")
	RegionCommitmentPlanThirtySixMonth = RegionCommitmentPlan("THIRTY_SIX_MONTH")
	RegionCommitmentPlanTwelveMonth    = RegionCommitmentPlan("TWELVE_MONTH")
)

func (RegionCommitmentPlan) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RegionCommitmentPlan) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionCommitmentPlan) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionCommitmentPlan) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RegionCommitmentPlan) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT_YET_ACTIVE, ACTIVE, EXPIRED.
type RegionCommitmentStatus pulumi.String

const (
	RegionCommitmentStatusActive       = RegionCommitmentStatus("ACTIVE")
	RegionCommitmentStatusCreating     = RegionCommitmentStatus("CREATING")
	RegionCommitmentStatusExpired      = RegionCommitmentStatus("EXPIRED")
	RegionCommitmentStatusNotYetActive = RegionCommitmentStatus("NOT_YET_ACTIVE")
)

func (RegionCommitmentStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RegionCommitmentStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionCommitmentStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionCommitmentStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RegionCommitmentStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The status of disk creation.
// - CREATING: Disk is provisioning.
// - RESTORING: Source data is being copied into the disk.
// - FAILED: Disk creation failed.
// - READY: Disk is ready for use.
// - DELETING: Disk is deleting.
type RegionDiskStatus pulumi.String

const (
	RegionDiskStatusCreating  = RegionDiskStatus("CREATING")
	RegionDiskStatusDeleting  = RegionDiskStatus("DELETING")
	RegionDiskStatusFailed    = RegionDiskStatus("FAILED")
	RegionDiskStatusReady     = RegionDiskStatus("READY")
	RegionDiskStatusRestoring = RegionDiskStatus("RESTORING")
)

func (RegionDiskStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RegionDiskStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionDiskStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionDiskStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RegionDiskStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified.
// - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service.
// - AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. .
type RegionHealthCheckServiceHealthStatusAggregationPolicy pulumi.String

const (
	RegionHealthCheckServiceHealthStatusAggregationPolicyAnd           = RegionHealthCheckServiceHealthStatusAggregationPolicy("AND")
	RegionHealthCheckServiceHealthStatusAggregationPolicyNoAggregation = RegionHealthCheckServiceHealthStatusAggregationPolicy("NO_AGGREGATION")
)

func (RegionHealthCheckServiceHealthStatusAggregationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RegionHealthCheckServiceHealthStatusAggregationPolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionHealthCheckServiceHealthStatusAggregationPolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionHealthCheckServiceHealthStatusAggregationPolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RegionHealthCheckServiceHealthStatusAggregationPolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS or HTTP2. If not specified, the default is TCP. Exactly one of the protocol-specific health check field must be specified, which must match type field.
type RegionHealthCheckType pulumi.String

const (
	RegionHealthCheckTypeGrpc    = RegionHealthCheckType("GRPC")
	RegionHealthCheckTypeHttp    = RegionHealthCheckType("HTTP")
	RegionHealthCheckTypeHttp2   = RegionHealthCheckType("HTTP2")
	RegionHealthCheckTypeHttps   = RegionHealthCheckType("HTTPS")
	RegionHealthCheckTypeInvalid = RegionHealthCheckType("INVALID")
	RegionHealthCheckTypeSsl     = RegionHealthCheckType("SSL")
	RegionHealthCheckTypeTcp     = RegionHealthCheckType("TCP")
)

func (RegionHealthCheckType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RegionHealthCheckType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionHealthCheckType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionHealthCheckType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RegionHealthCheckType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Type of network endpoints in this network endpoint group. Can be one of GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT, INTERNET_FQDN_PORT, INTERNET_IP_PORT, or SERVERLESS.
type RegionNetworkEndpointGroupNetworkEndpointType pulumi.String

const (
	RegionNetworkEndpointGroupNetworkEndpointTypeGceVmIp             = RegionNetworkEndpointGroupNetworkEndpointType("GCE_VM_IP")
	RegionNetworkEndpointGroupNetworkEndpointTypeGceVmIpPort         = RegionNetworkEndpointGroupNetworkEndpointType("GCE_VM_IP_PORT")
	RegionNetworkEndpointGroupNetworkEndpointTypeInternetFqdnPort    = RegionNetworkEndpointGroupNetworkEndpointType("INTERNET_FQDN_PORT")
	RegionNetworkEndpointGroupNetworkEndpointTypeInternetIpPort      = RegionNetworkEndpointGroupNetworkEndpointType("INTERNET_IP_PORT")
	RegionNetworkEndpointGroupNetworkEndpointTypeNonGcpPrivateIpPort = RegionNetworkEndpointGroupNetworkEndpointType("NON_GCP_PRIVATE_IP_PORT")
	RegionNetworkEndpointGroupNetworkEndpointTypeServerless          = RegionNetworkEndpointGroupNetworkEndpointType("SERVERLESS")
)

func (RegionNetworkEndpointGroupNetworkEndpointType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RegionNetworkEndpointGroupNetworkEndpointType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionNetworkEndpointGroupNetworkEndpointType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionNetworkEndpointGroupNetworkEndpointType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RegionNetworkEndpointGroupNetworkEndpointType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
type RegionSslCertificateType pulumi.String

const (
	RegionSslCertificateTypeManaged         = RegionSslCertificateType("MANAGED")
	RegionSslCertificateTypeSelfManaged     = RegionSslCertificateType("SELF_MANAGED")
	RegionSslCertificateTypeTypeUnspecified = RegionSslCertificateType("TYPE_UNSPECIFIED")
)

func (RegionSslCertificateType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RegionSslCertificateType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionSslCertificateType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionSslCertificateType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RegionSslCertificateType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the QUIC override policy for this TargetHttpsProxy resource. This setting determines whether the load balancer attempts to negotiate QUIC with clients. You can specify NONE, ENABLE, or DISABLE.
// - When quic-override is set to NONE, Google manages whether QUIC is used.
// - When quic-override is set to ENABLE, the load balancer uses QUIC when possible.
// - When quic-override is set to DISABLE, the load balancer doesn't use QUIC.
// - If the quic-override flag is not specified, NONE is implied.
type RegionTargetHttpsProxyQuicOverride pulumi.String

const (
	RegionTargetHttpsProxyQuicOverrideDisable = RegionTargetHttpsProxyQuicOverride("DISABLE")
	RegionTargetHttpsProxyQuicOverrideEnable  = RegionTargetHttpsProxyQuicOverride("ENABLE")
	RegionTargetHttpsProxyQuicOverrideNone    = RegionTargetHttpsProxyQuicOverride("NONE")
)

func (RegionTargetHttpsProxyQuicOverride) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RegionTargetHttpsProxyQuicOverride) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionTargetHttpsProxyQuicOverride) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegionTargetHttpsProxyQuicOverride) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RegionTargetHttpsProxyQuicOverride) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See  Consuming reserved instances for examples.
type ReservationAffinityConsumeReservationType pulumi.String

const (
	ReservationAffinityConsumeReservationTypeAnyReservation      = ReservationAffinityConsumeReservationType("ANY_RESERVATION")
	ReservationAffinityConsumeReservationTypeNoReservation       = ReservationAffinityConsumeReservationType("NO_RESERVATION")
	ReservationAffinityConsumeReservationTypeSpecificReservation = ReservationAffinityConsumeReservationType("SPECIFIC_RESERVATION")
	ReservationAffinityConsumeReservationTypeUnspecified         = ReservationAffinityConsumeReservationType("UNSPECIFIED")
)

func (ReservationAffinityConsumeReservationType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ReservationAffinityConsumeReservationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReservationAffinityConsumeReservationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReservationAffinityConsumeReservationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReservationAffinityConsumeReservationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The status of the reservation.
type ReservationStatus pulumi.String

const (
	ReservationStatusCreating = ReservationStatus("CREATING")
	ReservationStatusDeleting = ReservationStatus("DELETING")
	ReservationStatusInvalid  = ReservationStatus("INVALID")
	ReservationStatusReady    = ReservationStatus("READY")
	ReservationStatusUpdating = ReservationStatus("UPDATING")
)

func (ReservationStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ReservationStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReservationStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReservationStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReservationStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Type of resource for which this commitment applies. Possible values are VCPU and MEMORY
type ResourceCommitmentType pulumi.String

const (
	ResourceCommitmentTypeAccelerator = ResourceCommitmentType("ACCELERATOR")
	ResourceCommitmentTypeLocalSsd    = ResourceCommitmentType("LOCAL_SSD")
	ResourceCommitmentTypeMemory      = ResourceCommitmentType("MEMORY")
	ResourceCommitmentTypeUnspecified = ResourceCommitmentType("UNSPECIFIED")
	ResourceCommitmentTypeVcpu        = ResourceCommitmentType("VCPU")
)

func (ResourceCommitmentType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ResourceCommitmentType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceCommitmentType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceCommitmentType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourceCommitmentType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies network collocation
type ResourcePolicyGroupPlacementPolicyCollocation pulumi.String

const (
	ResourcePolicyGroupPlacementPolicyCollocationCollocated             = ResourcePolicyGroupPlacementPolicyCollocation("COLLOCATED")
	ResourcePolicyGroupPlacementPolicyCollocationUnspecifiedCollocation = ResourcePolicyGroupPlacementPolicyCollocation("UNSPECIFIED_COLLOCATION")
)

func (ResourcePolicyGroupPlacementPolicyCollocation) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ResourcePolicyGroupPlacementPolicyCollocation) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourcePolicyGroupPlacementPolicyCollocation) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourcePolicyGroupPlacementPolicyCollocation) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourcePolicyGroupPlacementPolicyCollocation) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
type ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete pulumi.String

const (
	ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteApplyRetentionPolicy          = ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete("APPLY_RETENTION_POLICY")
	ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteKeepAutoSnapshots             = ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete("KEEP_AUTO_SNAPSHOTS")
	ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDeleteUnspecifiedOnSourceDiskDelete = ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete("UNSPECIFIED_ON_SOURCE_DISK_DELETE")
)

func (ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The status of resource policy creation.
type ResourcePolicyStatus pulumi.String

const (
	ResourcePolicyStatusCreating = ResourcePolicyStatus("CREATING")
	ResourcePolicyStatusDeleting = ResourcePolicyStatus("DELETING")
	ResourcePolicyStatusExpired  = ResourcePolicyStatus("EXPIRED")
	ResourcePolicyStatusInvalid  = ResourcePolicyStatus("INVALID")
	ResourcePolicyStatusReady    = ResourcePolicyStatus("READY")
)

func (ResourcePolicyStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ResourcePolicyStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourcePolicyStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourcePolicyStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourcePolicyStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
type ResourcePolicyWeeklyCycleDayOfWeekDay pulumi.String

const (
	ResourcePolicyWeeklyCycleDayOfWeekDayFriday    = ResourcePolicyWeeklyCycleDayOfWeekDay("FRIDAY")
	ResourcePolicyWeeklyCycleDayOfWeekDayInvalid   = ResourcePolicyWeeklyCycleDayOfWeekDay("INVALID")
	ResourcePolicyWeeklyCycleDayOfWeekDayMonday    = ResourcePolicyWeeklyCycleDayOfWeekDay("MONDAY")
	ResourcePolicyWeeklyCycleDayOfWeekDaySaturday  = ResourcePolicyWeeklyCycleDayOfWeekDay("SATURDAY")
	ResourcePolicyWeeklyCycleDayOfWeekDaySunday    = ResourcePolicyWeeklyCycleDayOfWeekDay("SUNDAY")
	ResourcePolicyWeeklyCycleDayOfWeekDayThursday  = ResourcePolicyWeeklyCycleDayOfWeekDay("THURSDAY")
	ResourcePolicyWeeklyCycleDayOfWeekDayTuesday   = ResourcePolicyWeeklyCycleDayOfWeekDay("TUESDAY")
	ResourcePolicyWeeklyCycleDayOfWeekDayWednesday = ResourcePolicyWeeklyCycleDayOfWeekDay("WEDNESDAY")
)

func (ResourcePolicyWeeklyCycleDayOfWeekDay) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ResourcePolicyWeeklyCycleDayOfWeekDay) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourcePolicyWeeklyCycleDayOfWeekDay) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourcePolicyWeeklyCycleDayOfWeekDay) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourcePolicyWeeklyCycleDayOfWeekDay) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
type RouteWarningsItemCode pulumi.String

const (
	RouteWarningsItemCodeCleanupFailed                       = RouteWarningsItemCode("CLEANUP_FAILED")
	RouteWarningsItemCodeDeprecatedResourceUsed              = RouteWarningsItemCode("DEPRECATED_RESOURCE_USED")
	RouteWarningsItemCodeDeprecatedTypeUsed                  = RouteWarningsItemCode("DEPRECATED_TYPE_USED")
	RouteWarningsItemCodeDiskSizeLargerThanImageSize         = RouteWarningsItemCode("DISK_SIZE_LARGER_THAN_IMAGE_SIZE")
	RouteWarningsItemCodeExperimentalTypeUsed                = RouteWarningsItemCode("EXPERIMENTAL_TYPE_USED")
	RouteWarningsItemCodeExternalApiWarning                  = RouteWarningsItemCode("EXTERNAL_API_WARNING")
	RouteWarningsItemCodeFieldValueOverriden                 = RouteWarningsItemCode("FIELD_VALUE_OVERRIDEN")
	RouteWarningsItemCodeInjectedKernelsDeprecated           = RouteWarningsItemCode("INJECTED_KERNELS_DEPRECATED")
	RouteWarningsItemCodeLargeDeploymentWarning              = RouteWarningsItemCode("LARGE_DEPLOYMENT_WARNING")
	RouteWarningsItemCodeMissingTypeDependency               = RouteWarningsItemCode("MISSING_TYPE_DEPENDENCY")
	RouteWarningsItemCodeNextHopAddressNotAssigned           = RouteWarningsItemCode("NEXT_HOP_ADDRESS_NOT_ASSIGNED")
	RouteWarningsItemCodeNextHopCannotIpForward              = RouteWarningsItemCode("NEXT_HOP_CANNOT_IP_FORWARD")
	RouteWarningsItemCodeNextHopInstanceNotFound             = RouteWarningsItemCode("NEXT_HOP_INSTANCE_NOT_FOUND")
	RouteWarningsItemCodeNextHopInstanceNotOnNetwork         = RouteWarningsItemCode("NEXT_HOP_INSTANCE_NOT_ON_NETWORK")
	RouteWarningsItemCodeNextHopNotRunning                   = RouteWarningsItemCode("NEXT_HOP_NOT_RUNNING")
	RouteWarningsItemCodeNotCriticalError                    = RouteWarningsItemCode("NOT_CRITICAL_ERROR")
	RouteWarningsItemCodeNoResultsOnPage                     = RouteWarningsItemCode("NO_RESULTS_ON_PAGE")
	RouteWarningsItemCodePartialSuccess                      = RouteWarningsItemCode("PARTIAL_SUCCESS")
	RouteWarningsItemCodeRequiredTosAgreement                = RouteWarningsItemCode("REQUIRED_TOS_AGREEMENT")
	RouteWarningsItemCodeResourceInUseByOtherResourceWarning = RouteWarningsItemCode("RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")
	RouteWarningsItemCodeResourceNotDeleted                  = RouteWarningsItemCode("RESOURCE_NOT_DELETED")
	RouteWarningsItemCodeSchemaValidationIgnored             = RouteWarningsItemCode("SCHEMA_VALIDATION_IGNORED")
	RouteWarningsItemCodeSingleInstancePropertyTemplate      = RouteWarningsItemCode("SINGLE_INSTANCE_PROPERTY_TEMPLATE")
	RouteWarningsItemCodeUndeclaredProperties                = RouteWarningsItemCode("UNDECLARED_PROPERTIES")
	RouteWarningsItemCodeUnreachable                         = RouteWarningsItemCode("UNREACHABLE")
)

func (RouteWarningsItemCode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RouteWarningsItemCode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouteWarningsItemCode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouteWarningsItemCode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RouteWarningsItemCode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM.
type RouterBgpAdvertiseMode pulumi.String

const (
	RouterBgpAdvertiseModeCustom  = RouterBgpAdvertiseMode("CUSTOM")
	RouterBgpAdvertiseModeDefault = RouterBgpAdvertiseMode("DEFAULT")
)

func (RouterBgpAdvertiseMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RouterBgpAdvertiseMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterBgpAdvertiseMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterBgpAdvertiseMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RouterBgpAdvertiseMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RouterBgpAdvertisedGroupsItem pulumi.String

const (
	RouterBgpAdvertisedGroupsItemAllSubnets = RouterBgpAdvertisedGroupsItem("ALL_SUBNETS")
)

func (RouterBgpAdvertisedGroupsItem) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RouterBgpAdvertisedGroupsItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterBgpAdvertisedGroupsItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterBgpAdvertisedGroupsItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RouterBgpAdvertisedGroupsItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// RouterBgpAdvertisedGroupsItemArrayInput is an input type that accepts RouterBgpAdvertisedGroupsItemArray and RouterBgpAdvertisedGroupsItemArrayOutput values.
// You can construct a concrete instance of `RouterBgpAdvertisedGroupsItemArrayInput` via:
//
//          RouterBgpAdvertisedGroupsItemArray{ RouterBgpAdvertisedGroupsItemArgs{...} }
type RouterBgpAdvertisedGroupsItemArrayInput interface {
	pulumi.Input

	ToRouterBgpAdvertisedGroupsItemArrayOutput() RouterBgpAdvertisedGroupsItemArrayOutput
	ToRouterBgpAdvertisedGroupsItemArrayOutputWithContext(context.Context) RouterBgpAdvertisedGroupsItemArrayOutput
}

type RouterBgpAdvertisedGroupsItemArray []RouterBgpAdvertisedGroupsItem

func (RouterBgpAdvertisedGroupsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterBgpAdvertisedGroupsItem)(nil)).Elem()
}

func (i RouterBgpAdvertisedGroupsItemArray) ToRouterBgpAdvertisedGroupsItemArrayOutput() RouterBgpAdvertisedGroupsItemArrayOutput {
	return i.ToRouterBgpAdvertisedGroupsItemArrayOutputWithContext(context.Background())
}

func (i RouterBgpAdvertisedGroupsItemArray) ToRouterBgpAdvertisedGroupsItemArrayOutputWithContext(ctx context.Context) RouterBgpAdvertisedGroupsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpAdvertisedGroupsItemArrayOutput)
}

type RouterBgpAdvertisedGroupsItemArrayOutput struct{ *pulumi.OutputState }

func (RouterBgpAdvertisedGroupsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterBgpAdvertisedGroupsItem)(nil)).Elem()
}

func (o RouterBgpAdvertisedGroupsItemArrayOutput) ToRouterBgpAdvertisedGroupsItemArrayOutput() RouterBgpAdvertisedGroupsItemArrayOutput {
	return o
}

func (o RouterBgpAdvertisedGroupsItemArrayOutput) ToRouterBgpAdvertisedGroupsItemArrayOutputWithContext(ctx context.Context) RouterBgpAdvertisedGroupsItemArrayOutput {
	return o
}

func (o RouterBgpAdvertisedGroupsItemArrayOutput) Index(i pulumi.IntInput) pulumi.StringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) pulumi.StringOutput {
		return vs[0].([]RouterBgpAdvertisedGroupsItem)[vs[1].(int)].ToStringOutput()
	}).(pulumi.StringOutput)
}

// User-specified flag to indicate which mode to use for advertisement.
type RouterBgpPeerAdvertiseMode pulumi.String

const (
	RouterBgpPeerAdvertiseModeCustom  = RouterBgpPeerAdvertiseMode("CUSTOM")
	RouterBgpPeerAdvertiseModeDefault = RouterBgpPeerAdvertiseMode("DEFAULT")
)

func (RouterBgpPeerAdvertiseMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RouterBgpPeerAdvertiseMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterBgpPeerAdvertiseMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterBgpPeerAdvertiseMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RouterBgpPeerAdvertiseMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RouterBgpPeerAdvertisedGroupsItem pulumi.String

const (
	RouterBgpPeerAdvertisedGroupsItemAllSubnets = RouterBgpPeerAdvertisedGroupsItem("ALL_SUBNETS")
)

func (RouterBgpPeerAdvertisedGroupsItem) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RouterBgpPeerAdvertisedGroupsItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterBgpPeerAdvertisedGroupsItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterBgpPeerAdvertisedGroupsItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RouterBgpPeerAdvertisedGroupsItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// RouterBgpPeerAdvertisedGroupsItemArrayInput is an input type that accepts RouterBgpPeerAdvertisedGroupsItemArray and RouterBgpPeerAdvertisedGroupsItemArrayOutput values.
// You can construct a concrete instance of `RouterBgpPeerAdvertisedGroupsItemArrayInput` via:
//
//          RouterBgpPeerAdvertisedGroupsItemArray{ RouterBgpPeerAdvertisedGroupsItemArgs{...} }
type RouterBgpPeerAdvertisedGroupsItemArrayInput interface {
	pulumi.Input

	ToRouterBgpPeerAdvertisedGroupsItemArrayOutput() RouterBgpPeerAdvertisedGroupsItemArrayOutput
	ToRouterBgpPeerAdvertisedGroupsItemArrayOutputWithContext(context.Context) RouterBgpPeerAdvertisedGroupsItemArrayOutput
}

type RouterBgpPeerAdvertisedGroupsItemArray []RouterBgpPeerAdvertisedGroupsItem

func (RouterBgpPeerAdvertisedGroupsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterBgpPeerAdvertisedGroupsItem)(nil)).Elem()
}

func (i RouterBgpPeerAdvertisedGroupsItemArray) ToRouterBgpPeerAdvertisedGroupsItemArrayOutput() RouterBgpPeerAdvertisedGroupsItemArrayOutput {
	return i.ToRouterBgpPeerAdvertisedGroupsItemArrayOutputWithContext(context.Background())
}

func (i RouterBgpPeerAdvertisedGroupsItemArray) ToRouterBgpPeerAdvertisedGroupsItemArrayOutputWithContext(ctx context.Context) RouterBgpPeerAdvertisedGroupsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpPeerAdvertisedGroupsItemArrayOutput)
}

type RouterBgpPeerAdvertisedGroupsItemArrayOutput struct{ *pulumi.OutputState }

func (RouterBgpPeerAdvertisedGroupsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterBgpPeerAdvertisedGroupsItem)(nil)).Elem()
}

func (o RouterBgpPeerAdvertisedGroupsItemArrayOutput) ToRouterBgpPeerAdvertisedGroupsItemArrayOutput() RouterBgpPeerAdvertisedGroupsItemArrayOutput {
	return o
}

func (o RouterBgpPeerAdvertisedGroupsItemArrayOutput) ToRouterBgpPeerAdvertisedGroupsItemArrayOutputWithContext(ctx context.Context) RouterBgpPeerAdvertisedGroupsItemArrayOutput {
	return o
}

func (o RouterBgpPeerAdvertisedGroupsItemArrayOutput) Index(i pulumi.IntInput) pulumi.StringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) pulumi.StringOutput {
		return vs[0].([]RouterBgpPeerAdvertisedGroupsItem)[vs[1].(int)].ToStringOutput()
	}).(pulumi.StringOutput)
}

// [Output Only] The resource that configures and manages this BGP peer.
// - MANAGED_BY_USER is the default value and can be managed by you or other users
// - MANAGED_BY_ATTACHMENT is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted.
type RouterBgpPeerManagementType pulumi.String

const (
	RouterBgpPeerManagementTypeManagedByAttachment = RouterBgpPeerManagementType("MANAGED_BY_ATTACHMENT")
	RouterBgpPeerManagementTypeManagedByUser       = RouterBgpPeerManagementType("MANAGED_BY_USER")
)

func (RouterBgpPeerManagementType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RouterBgpPeerManagementType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterBgpPeerManagementType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterBgpPeerManagementType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RouterBgpPeerManagementType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The resource that configures and manages this interface.
// - MANAGED_BY_USER is the default value and can be managed directly by users.
// - MANAGED_BY_ATTACHMENT is an interface that is configured and managed by Cloud Interconnect, specifically, by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of interface when the PARTNER InterconnectAttachment is created, updated, or deleted.
type RouterInterfaceManagementType pulumi.String

const (
	RouterInterfaceManagementTypeManagedByAttachment = RouterInterfaceManagementType("MANAGED_BY_ATTACHMENT")
	RouterInterfaceManagementTypeManagedByUser       = RouterInterfaceManagementType("MANAGED_BY_USER")
)

func (RouterInterfaceManagementType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RouterInterfaceManagementType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterInterfaceManagementType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterInterfaceManagementType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RouterInterfaceManagementType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values:
// - ERRORS_ONLY: Export logs only for connection failures.
// - TRANSLATIONS_ONLY: Export logs only for successful connections.
// - ALL: Export logs for all connections, successful and unsuccessful.
type RouterNatLogConfigFilter pulumi.String

const (
	RouterNatLogConfigFilterAll              = RouterNatLogConfigFilter("ALL")
	RouterNatLogConfigFilterErrorsOnly       = RouterNatLogConfigFilter("ERRORS_ONLY")
	RouterNatLogConfigFilterTranslationsOnly = RouterNatLogConfigFilter("TRANSLATIONS_ONLY")
)

func (RouterNatLogConfigFilter) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RouterNatLogConfigFilter) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterNatLogConfigFilter) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterNatLogConfigFilter) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RouterNatLogConfigFilter) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specify the NatIpAllocateOption, which can take one of the following values:
// - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs.
// - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty.
type RouterNatNatIpAllocateOption pulumi.String

const (
	RouterNatNatIpAllocateOptionAutoOnly   = RouterNatNatIpAllocateOption("AUTO_ONLY")
	RouterNatNatIpAllocateOptionManualOnly = RouterNatNatIpAllocateOption("MANUAL_ONLY")
)

func (RouterNatNatIpAllocateOption) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RouterNatNatIpAllocateOption) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterNatNatIpAllocateOption) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterNatNatIpAllocateOption) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RouterNatNatIpAllocateOption) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specify the Nat option, which can take one of the following values:
// - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat.
// - ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat.
// - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other Router.Nat section in any Router for this network in this region.
type RouterNatSourceSubnetworkIpRangesToNat pulumi.String

const (
	RouterNatSourceSubnetworkIpRangesToNatAllSubnetworksAllIpRanges        = RouterNatSourceSubnetworkIpRangesToNat("ALL_SUBNETWORKS_ALL_IP_RANGES")
	RouterNatSourceSubnetworkIpRangesToNatAllSubnetworksAllPrimaryIpRanges = RouterNatSourceSubnetworkIpRangesToNat("ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES")
	RouterNatSourceSubnetworkIpRangesToNatListOfSubnetworks                = RouterNatSourceSubnetworkIpRangesToNat("LIST_OF_SUBNETWORKS")
)

func (RouterNatSourceSubnetworkIpRangesToNat) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RouterNatSourceSubnetworkIpRangesToNat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterNatSourceSubnetworkIpRangesToNat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterNatSourceSubnetworkIpRangesToNat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RouterNatSourceSubnetworkIpRangesToNat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RouterNatSubnetworkToNatSourceIpRangesToNatItem pulumi.String

const (
	RouterNatSubnetworkToNatSourceIpRangesToNatItemAllIpRanges             = RouterNatSubnetworkToNatSourceIpRangesToNatItem("ALL_IP_RANGES")
	RouterNatSubnetworkToNatSourceIpRangesToNatItemListOfSecondaryIpRanges = RouterNatSubnetworkToNatSourceIpRangesToNatItem("LIST_OF_SECONDARY_IP_RANGES")
	RouterNatSubnetworkToNatSourceIpRangesToNatItemPrimaryIpRange          = RouterNatSubnetworkToNatSourceIpRangesToNatItem("PRIMARY_IP_RANGE")
)

func (RouterNatSubnetworkToNatSourceIpRangesToNatItem) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RouterNatSubnetworkToNatSourceIpRangesToNatItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterNatSubnetworkToNatSourceIpRangesToNatItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RouterNatSubnetworkToNatSourceIpRangesToNatItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RouterNatSubnetworkToNatSourceIpRangesToNatItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayInput is an input type that accepts RouterNatSubnetworkToNatSourceIpRangesToNatItemArray and RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutput values.
// You can construct a concrete instance of `RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayInput` via:
//
//          RouterNatSubnetworkToNatSourceIpRangesToNatItemArray{ RouterNatSubnetworkToNatSourceIpRangesToNatItemArgs{...} }
type RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayInput interface {
	pulumi.Input

	ToRouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutput() RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutput
	ToRouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutputWithContext(context.Context) RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutput
}

type RouterNatSubnetworkToNatSourceIpRangesToNatItemArray []RouterNatSubnetworkToNatSourceIpRangesToNatItem

func (RouterNatSubnetworkToNatSourceIpRangesToNatItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterNatSubnetworkToNatSourceIpRangesToNatItem)(nil)).Elem()
}

func (i RouterNatSubnetworkToNatSourceIpRangesToNatItemArray) ToRouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutput() RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutput {
	return i.ToRouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutputWithContext(context.Background())
}

func (i RouterNatSubnetworkToNatSourceIpRangesToNatItemArray) ToRouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutputWithContext(ctx context.Context) RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutput)
}

type RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutput struct{ *pulumi.OutputState }

func (RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterNatSubnetworkToNatSourceIpRangesToNatItem)(nil)).Elem()
}

func (o RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutput) ToRouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutput() RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutput {
	return o
}

func (o RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutput) ToRouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutputWithContext(ctx context.Context) RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutput {
	return o
}

func (o RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayOutput) Index(i pulumi.IntInput) pulumi.StringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) pulumi.StringOutput {
		return vs[0].([]RouterNatSubnetworkToNatSourceIpRangesToNatItem)[vs[1].(int)].ToStringOutput()
	}).(pulumi.StringOutput)
}

// Required
type RuleAction pulumi.String

const (
	RuleActionAllow        = RuleAction("ALLOW")
	RuleActionAllowWithLog = RuleAction("ALLOW_WITH_LOG")
	RuleActionDeny         = RuleAction("DENY")
	RuleActionDenyWithLog  = RuleAction("DENY_WITH_LOG")
	RuleActionLog          = RuleAction("LOG")
	RuleActionNoAction     = RuleAction("NO_ACTION")
)

func (RuleAction) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RuleAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RuleAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RuleAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RuleAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies how port is selected for health checking, can be one of following values:
// USE_FIXED_PORT: The port number in port is used for health checking.
// USE_NAMED_PORT: The portName is used for health checking.
// USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.
//
// If not specified, SSL health check follows behavior specified in port and portName fields.
type SSLHealthCheckPortSpecification pulumi.String

const (
	SSLHealthCheckPortSpecificationUseFixedPort   = SSLHealthCheckPortSpecification("USE_FIXED_PORT")
	SSLHealthCheckPortSpecificationUseNamedPort   = SSLHealthCheckPortSpecification("USE_NAMED_PORT")
	SSLHealthCheckPortSpecificationUseServingPort = SSLHealthCheckPortSpecification("USE_SERVING_PORT")
)

func (SSLHealthCheckPortSpecification) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SSLHealthCheckPortSpecification) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SSLHealthCheckPortSpecification) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SSLHealthCheckPortSpecification) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SSLHealthCheckPortSpecification) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
type SSLHealthCheckProxyHeader pulumi.String

const (
	SSLHealthCheckProxyHeaderNone    = SSLHealthCheckProxyHeader("NONE")
	SSLHealthCheckProxyHeaderProxyV1 = SSLHealthCheckProxyHeader("PROXY_V1")
)

func (SSLHealthCheckProxyHeader) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SSLHealthCheckProxyHeader) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SSLHealthCheckProxyHeader) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SSLHealthCheckProxyHeader) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SSLHealthCheckProxyHeader) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity.
type SchedulingNodeAffinityOperator pulumi.String

const (
	SchedulingNodeAffinityOperatorIn                  = SchedulingNodeAffinityOperator("IN")
	SchedulingNodeAffinityOperatorNotIn               = SchedulingNodeAffinityOperator("NOT_IN")
	SchedulingNodeAffinityOperatorOperatorUnspecified = SchedulingNodeAffinityOperator("OPERATOR_UNSPECIFIED")
)

func (SchedulingNodeAffinityOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SchedulingNodeAffinityOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchedulingNodeAffinityOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchedulingNodeAffinityOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SchedulingNodeAffinityOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options.
type SchedulingOnHostMaintenance pulumi.String

const (
	SchedulingOnHostMaintenanceMigrate   = SchedulingOnHostMaintenance("MIGRATE")
	SchedulingOnHostMaintenanceTerminate = SchedulingOnHostMaintenance("TERMINATE")
)

func (SchedulingOnHostMaintenance) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SchedulingOnHostMaintenance) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchedulingOnHostMaintenance) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchedulingOnHostMaintenance) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SchedulingOnHostMaintenance) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config.
type SecurityPolicyRuleMatcherVersionedExpr pulumi.String

const (
	SecurityPolicyRuleMatcherVersionedExprSrcIpsV1 = SecurityPolicyRuleMatcherVersionedExpr("SRC_IPS_V1")
)

func (SecurityPolicyRuleMatcherVersionedExpr) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SecurityPolicyRuleMatcherVersionedExpr) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SecurityPolicyRuleMatcherVersionedExpr) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SecurityPolicyRuleMatcherVersionedExpr) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SecurityPolicyRuleMatcherVersionedExpr) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ServerBindingType pulumi.String

const (
	ServerBindingTypeRestartNodeOnAnyServer       = ServerBindingType("RESTART_NODE_ON_ANY_SERVER")
	ServerBindingTypeRestartNodeOnMinimalServers  = ServerBindingType("RESTART_NODE_ON_MINIMAL_SERVERS")
	ServerBindingTypeServerBindingTypeUnspecified = ServerBindingType("SERVER_BINDING_TYPE_UNSPECIFIED")
)

func (ServerBindingType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ServerBindingType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServerBindingType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServerBindingType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ServerBindingType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output only] Status of the managed certificate resource.
type SslCertificateManagedSslCertificateStatus pulumi.String

const (
	SslCertificateManagedSslCertificateStatusActive                              = SslCertificateManagedSslCertificateStatus("ACTIVE")
	SslCertificateManagedSslCertificateStatusManagedCertificateStatusUnspecified = SslCertificateManagedSslCertificateStatus("MANAGED_CERTIFICATE_STATUS_UNSPECIFIED")
	SslCertificateManagedSslCertificateStatusProvisioning                        = SslCertificateManagedSslCertificateStatus("PROVISIONING")
	SslCertificateManagedSslCertificateStatusProvisioningFailed                  = SslCertificateManagedSslCertificateStatus("PROVISIONING_FAILED")
	SslCertificateManagedSslCertificateStatusProvisioningFailedPermanently       = SslCertificateManagedSslCertificateStatus("PROVISIONING_FAILED_PERMANENTLY")
	SslCertificateManagedSslCertificateStatusRenewalFailed                       = SslCertificateManagedSslCertificateStatus("RENEWAL_FAILED")
)

func (SslCertificateManagedSslCertificateStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SslCertificateManagedSslCertificateStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslCertificateManagedSslCertificateStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslCertificateManagedSslCertificateStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SslCertificateManagedSslCertificateStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
type SslCertificateType pulumi.String

const (
	SslCertificateTypeManaged         = SslCertificateType("MANAGED")
	SslCertificateTypeSelfManaged     = SslCertificateType("SELF_MANAGED")
	SslCertificateTypeTypeUnspecified = SslCertificateType("TYPE_UNSPECIFIED")
)

func (SslCertificateType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SslCertificateType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslCertificateType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslCertificateType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SslCertificateType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2.
type SslPolicyMinTlsVersion pulumi.String

const (
	SslPolicyMinTlsVersionTls10 = SslPolicyMinTlsVersion("TLS_1_0")
	SslPolicyMinTlsVersionTls11 = SslPolicyMinTlsVersion("TLS_1_1")
	SslPolicyMinTlsVersionTls12 = SslPolicyMinTlsVersion("TLS_1_2")
)

func (SslPolicyMinTlsVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SslPolicyMinTlsVersion) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslPolicyMinTlsVersion) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslPolicyMinTlsVersion) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SslPolicyMinTlsVersion) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field.
type SslPolicyProfile pulumi.String

const (
	SslPolicyProfileCompatible = SslPolicyProfile("COMPATIBLE")
	SslPolicyProfileCustom     = SslPolicyProfile("CUSTOM")
	SslPolicyProfileModern     = SslPolicyProfile("MODERN")
	SslPolicyProfileRestricted = SslPolicyProfile("RESTRICTED")
)

func (SslPolicyProfile) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SslPolicyProfile) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslPolicyProfile) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslPolicyProfile) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SslPolicyProfile) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
type SslPolicyWarningsItemCode pulumi.String

const (
	SslPolicyWarningsItemCodeCleanupFailed                       = SslPolicyWarningsItemCode("CLEANUP_FAILED")
	SslPolicyWarningsItemCodeDeprecatedResourceUsed              = SslPolicyWarningsItemCode("DEPRECATED_RESOURCE_USED")
	SslPolicyWarningsItemCodeDeprecatedTypeUsed                  = SslPolicyWarningsItemCode("DEPRECATED_TYPE_USED")
	SslPolicyWarningsItemCodeDiskSizeLargerThanImageSize         = SslPolicyWarningsItemCode("DISK_SIZE_LARGER_THAN_IMAGE_SIZE")
	SslPolicyWarningsItemCodeExperimentalTypeUsed                = SslPolicyWarningsItemCode("EXPERIMENTAL_TYPE_USED")
	SslPolicyWarningsItemCodeExternalApiWarning                  = SslPolicyWarningsItemCode("EXTERNAL_API_WARNING")
	SslPolicyWarningsItemCodeFieldValueOverriden                 = SslPolicyWarningsItemCode("FIELD_VALUE_OVERRIDEN")
	SslPolicyWarningsItemCodeInjectedKernelsDeprecated           = SslPolicyWarningsItemCode("INJECTED_KERNELS_DEPRECATED")
	SslPolicyWarningsItemCodeLargeDeploymentWarning              = SslPolicyWarningsItemCode("LARGE_DEPLOYMENT_WARNING")
	SslPolicyWarningsItemCodeMissingTypeDependency               = SslPolicyWarningsItemCode("MISSING_TYPE_DEPENDENCY")
	SslPolicyWarningsItemCodeNextHopAddressNotAssigned           = SslPolicyWarningsItemCode("NEXT_HOP_ADDRESS_NOT_ASSIGNED")
	SslPolicyWarningsItemCodeNextHopCannotIpForward              = SslPolicyWarningsItemCode("NEXT_HOP_CANNOT_IP_FORWARD")
	SslPolicyWarningsItemCodeNextHopInstanceNotFound             = SslPolicyWarningsItemCode("NEXT_HOP_INSTANCE_NOT_FOUND")
	SslPolicyWarningsItemCodeNextHopInstanceNotOnNetwork         = SslPolicyWarningsItemCode("NEXT_HOP_INSTANCE_NOT_ON_NETWORK")
	SslPolicyWarningsItemCodeNextHopNotRunning                   = SslPolicyWarningsItemCode("NEXT_HOP_NOT_RUNNING")
	SslPolicyWarningsItemCodeNotCriticalError                    = SslPolicyWarningsItemCode("NOT_CRITICAL_ERROR")
	SslPolicyWarningsItemCodeNoResultsOnPage                     = SslPolicyWarningsItemCode("NO_RESULTS_ON_PAGE")
	SslPolicyWarningsItemCodePartialSuccess                      = SslPolicyWarningsItemCode("PARTIAL_SUCCESS")
	SslPolicyWarningsItemCodeRequiredTosAgreement                = SslPolicyWarningsItemCode("REQUIRED_TOS_AGREEMENT")
	SslPolicyWarningsItemCodeResourceInUseByOtherResourceWarning = SslPolicyWarningsItemCode("RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")
	SslPolicyWarningsItemCodeResourceNotDeleted                  = SslPolicyWarningsItemCode("RESOURCE_NOT_DELETED")
	SslPolicyWarningsItemCodeSchemaValidationIgnored             = SslPolicyWarningsItemCode("SCHEMA_VALIDATION_IGNORED")
	SslPolicyWarningsItemCodeSingleInstancePropertyTemplate      = SslPolicyWarningsItemCode("SINGLE_INSTANCE_PROPERTY_TEMPLATE")
	SslPolicyWarningsItemCodeUndeclaredProperties                = SslPolicyWarningsItemCode("UNDECLARED_PROPERTIES")
	SslPolicyWarningsItemCodeUnreachable                         = SslPolicyWarningsItemCode("UNREACHABLE")
)

func (SslPolicyWarningsItemCode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SslPolicyWarningsItemCode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslPolicyWarningsItemCode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslPolicyWarningsItemCode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SslPolicyWarningsItemCode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
type SubnetworkLogConfigAggregationInterval pulumi.String

const (
	SubnetworkLogConfigAggregationIntervalInterval10Min = SubnetworkLogConfigAggregationInterval("INTERVAL_10_MIN")
	SubnetworkLogConfigAggregationIntervalInterval15Min = SubnetworkLogConfigAggregationInterval("INTERVAL_15_MIN")
	SubnetworkLogConfigAggregationIntervalInterval1Min  = SubnetworkLogConfigAggregationInterval("INTERVAL_1_MIN")
	SubnetworkLogConfigAggregationIntervalInterval30Sec = SubnetworkLogConfigAggregationInterval("INTERVAL_30_SEC")
	SubnetworkLogConfigAggregationIntervalInterval5Min  = SubnetworkLogConfigAggregationInterval("INTERVAL_5_MIN")
	SubnetworkLogConfigAggregationIntervalInterval5Sec  = SubnetworkLogConfigAggregationInterval("INTERVAL_5_SEC")
)

func (SubnetworkLogConfigAggregationInterval) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SubnetworkLogConfigAggregationInterval) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubnetworkLogConfigAggregationInterval) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubnetworkLogConfigAggregationInterval) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SubnetworkLogConfigAggregationInterval) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
type SubnetworkLogConfigMetadata pulumi.String

const (
	SubnetworkLogConfigMetadataCustomMetadata     = SubnetworkLogConfigMetadata("CUSTOM_METADATA")
	SubnetworkLogConfigMetadataExcludeAllMetadata = SubnetworkLogConfigMetadata("EXCLUDE_ALL_METADATA")
	SubnetworkLogConfigMetadataIncludeAllMetadata = SubnetworkLogConfigMetadata("INCLUDE_ALL_METADATA")
)

func (SubnetworkLogConfigMetadata) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SubnetworkLogConfigMetadata) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubnetworkLogConfigMetadata) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubnetworkLogConfigMetadata) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SubnetworkLogConfigMetadata) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The private IPv6 google access type for the VMs in this subnet. This is an expanded field of enablePrivateV6Access. If both fields are set, privateIpv6GoogleAccess will take priority.
//
// This field can be both set at resource creation time and updated using patch.
type SubnetworkPrivateIpv6GoogleAccess pulumi.String

const (
	SubnetworkPrivateIpv6GoogleAccessDisableGoogleAccess               = SubnetworkPrivateIpv6GoogleAccess("DISABLE_GOOGLE_ACCESS")
	SubnetworkPrivateIpv6GoogleAccessEnableBidirectionalAccessToGoogle = SubnetworkPrivateIpv6GoogleAccess("ENABLE_BIDIRECTIONAL_ACCESS_TO_GOOGLE")
	SubnetworkPrivateIpv6GoogleAccessEnableOutboundVmAccessToGoogle    = SubnetworkPrivateIpv6GoogleAccess("ENABLE_OUTBOUND_VM_ACCESS_TO_GOOGLE")
)

func (SubnetworkPrivateIpv6GoogleAccess) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SubnetworkPrivateIpv6GoogleAccess) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubnetworkPrivateIpv6GoogleAccess) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubnetworkPrivateIpv6GoogleAccess) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SubnetworkPrivateIpv6GoogleAccess) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
type SubnetworkPurpose pulumi.String

const (
	SubnetworkPurposeInternalHttpsLoadBalancer = SubnetworkPurpose("INTERNAL_HTTPS_LOAD_BALANCER")
	SubnetworkPurposePrivate                   = SubnetworkPurpose("PRIVATE")
	SubnetworkPurposePrivateRfc1918            = SubnetworkPurpose("PRIVATE_RFC_1918")
)

func (SubnetworkPurpose) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SubnetworkPurpose) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubnetworkPurpose) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubnetworkPurpose) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SubnetworkPurpose) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
type SubnetworkRole pulumi.String

const (
	SubnetworkRoleActive = SubnetworkRole("ACTIVE")
	SubnetworkRoleBackup = SubnetworkRole("BACKUP")
)

func (SubnetworkRole) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SubnetworkRole) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubnetworkRole) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubnetworkRole) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SubnetworkRole) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The state of the subnetwork, which can be one of the following values: READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY CREATING: Subnetwork is provisioning DELETING: Subnetwork is being deleted UPDATING: Subnetwork is being updated
type SubnetworkStateEnum pulumi.String

const (
	SubnetworkStateEnumDraining = SubnetworkStateEnum("DRAINING")
	SubnetworkStateEnumReady    = SubnetworkStateEnum("READY")
)

func (SubnetworkStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SubnetworkStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubnetworkStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SubnetworkStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SubnetworkStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies how port is selected for health checking, can be one of following values:
// USE_FIXED_PORT: The port number in port is used for health checking.
// USE_NAMED_PORT: The portName is used for health checking.
// USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking.
//
// If not specified, TCP health check follows behavior specified in port and portName fields.
type TCPHealthCheckPortSpecification pulumi.String

const (
	TCPHealthCheckPortSpecificationUseFixedPort   = TCPHealthCheckPortSpecification("USE_FIXED_PORT")
	TCPHealthCheckPortSpecificationUseNamedPort   = TCPHealthCheckPortSpecification("USE_NAMED_PORT")
	TCPHealthCheckPortSpecificationUseServingPort = TCPHealthCheckPortSpecification("USE_SERVING_PORT")
)

func (TCPHealthCheckPortSpecification) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e TCPHealthCheckPortSpecification) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TCPHealthCheckPortSpecification) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TCPHealthCheckPortSpecification) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TCPHealthCheckPortSpecification) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
type TCPHealthCheckProxyHeader pulumi.String

const (
	TCPHealthCheckProxyHeaderNone    = TCPHealthCheckProxyHeader("NONE")
	TCPHealthCheckProxyHeaderProxyV1 = TCPHealthCheckProxyHeader("PROXY_V1")
)

func (TCPHealthCheckProxyHeader) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e TCPHealthCheckProxyHeader) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TCPHealthCheckProxyHeader) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TCPHealthCheckProxyHeader) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TCPHealthCheckProxyHeader) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the QUIC override policy for this TargetHttpsProxy resource. This setting determines whether the load balancer attempts to negotiate QUIC with clients. You can specify NONE, ENABLE, or DISABLE.
// - When quic-override is set to NONE, Google manages whether QUIC is used.
// - When quic-override is set to ENABLE, the load balancer uses QUIC when possible.
// - When quic-override is set to DISABLE, the load balancer doesn't use QUIC.
// - If the quic-override flag is not specified, NONE is implied.
type TargetHttpsProxyQuicOverride pulumi.String

const (
	TargetHttpsProxyQuicOverrideDisable = TargetHttpsProxyQuicOverride("DISABLE")
	TargetHttpsProxyQuicOverrideEnable  = TargetHttpsProxyQuicOverride("ENABLE")
	TargetHttpsProxyQuicOverrideNone    = TargetHttpsProxyQuicOverride("NONE")
)

func (TargetHttpsProxyQuicOverride) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e TargetHttpsProxyQuicOverride) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TargetHttpsProxyQuicOverride) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TargetHttpsProxyQuicOverride) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TargetHttpsProxyQuicOverride) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// NAT option controlling how IPs are NAT'ed to the instance. Currently only NO_NAT (default value) is supported.
type TargetInstanceNatPolicy pulumi.String

const (
	TargetInstanceNatPolicyNoNat = TargetInstanceNatPolicy("NO_NAT")
)

func (TargetInstanceNatPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e TargetInstanceNatPolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TargetInstanceNatPolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TargetInstanceNatPolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TargetInstanceNatPolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Session affinity option, must be one of the following values:
// NONE: Connections from the same client IP may go to any instance in the pool.
// CLIENT_IP: Connections from the same client IP will go to the same instance in the pool while that instance remains healthy.
// CLIENT_IP_PROTO: Connections from the same client IP with the same IP protocol will go to the same instance in the pool while that instance remains healthy.
type TargetPoolSessionAffinity pulumi.String

const (
	TargetPoolSessionAffinityClientIp              = TargetPoolSessionAffinity("CLIENT_IP")
	TargetPoolSessionAffinityClientIpNoDestination = TargetPoolSessionAffinity("CLIENT_IP_NO_DESTINATION")
	TargetPoolSessionAffinityClientIpPortProto     = TargetPoolSessionAffinity("CLIENT_IP_PORT_PROTO")
	TargetPoolSessionAffinityClientIpProto         = TargetPoolSessionAffinity("CLIENT_IP_PROTO")
	TargetPoolSessionAffinityGeneratedCookie       = TargetPoolSessionAffinity("GENERATED_COOKIE")
	TargetPoolSessionAffinityHeaderField           = TargetPoolSessionAffinity("HEADER_FIELD")
	TargetPoolSessionAffinityHttpCookie            = TargetPoolSessionAffinity("HTTP_COOKIE")
	TargetPoolSessionAffinityNone                  = TargetPoolSessionAffinity("NONE")
)

func (TargetPoolSessionAffinity) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e TargetPoolSessionAffinity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TargetPoolSessionAffinity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TargetPoolSessionAffinity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TargetPoolSessionAffinity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
type TargetSslProxyProxyHeader pulumi.String

const (
	TargetSslProxyProxyHeaderNone    = TargetSslProxyProxyHeader("NONE")
	TargetSslProxyProxyHeaderProxyV1 = TargetSslProxyProxyHeader("PROXY_V1")
)

func (TargetSslProxyProxyHeader) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e TargetSslProxyProxyHeader) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TargetSslProxyProxyHeader) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TargetSslProxyProxyHeader) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TargetSslProxyProxyHeader) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
type TargetTcpProxyProxyHeader pulumi.String

const (
	TargetTcpProxyProxyHeaderNone    = TargetTcpProxyProxyHeader("NONE")
	TargetTcpProxyProxyHeaderProxyV1 = TargetTcpProxyProxyHeader("PROXY_V1")
)

func (TargetTcpProxyProxyHeader) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e TargetTcpProxyProxyHeader) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TargetTcpProxyProxyHeader) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TargetTcpProxyProxyHeader) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TargetTcpProxyProxyHeader) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The status of the VPN gateway, which can be one of the following: CREATING, READY, FAILED, or DELETING.
type TargetVpnGatewayStatus pulumi.String

const (
	TargetVpnGatewayStatusCreating = TargetVpnGatewayStatus("CREATING")
	TargetVpnGatewayStatusDeleting = TargetVpnGatewayStatus("DELETING")
	TargetVpnGatewayStatusFailed   = TargetVpnGatewayStatus("FAILED")
	TargetVpnGatewayStatusReady    = TargetVpnGatewayStatus("READY")
)

func (TargetVpnGatewayStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e TargetVpnGatewayStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TargetVpnGatewayStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TargetVpnGatewayStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TargetVpnGatewayStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// [Output Only] The status of the VPN tunnel, which can be one of the following:
// - PROVISIONING: Resource is being allocated for the VPN tunnel.
// - WAITING_FOR_FULL_CONFIG: Waiting to receive all VPN-related configs from the user. Network, TargetVpnGateway, VpnTunnel, ForwardingRule, and Route resources are needed to setup the VPN tunnel.
// - FIRST_HANDSHAKE: Successful first handshake with the peer VPN.
// - ESTABLISHED: Secure session is successfully established with the peer VPN.
// - NETWORK_ERROR: Deprecated, replaced by NO_INCOMING_PACKETS
// - AUTHORIZATION_ERROR: Auth error (for example, bad shared secret).
// - NEGOTIATION_FAILURE: Handshake failed.
// - DEPROVISIONING: Resources are being deallocated for the VPN tunnel.
// - FAILED: Tunnel creation has failed and the tunnel is not ready to be used.
// - NO_INCOMING_PACKETS: No incoming packets from peer.
// - REJECTED: Tunnel configuration was rejected, can be result of being denied access.
// - ALLOCATING_RESOURCES: Cloud VPN is in the process of allocating all required resources.
// - STOPPED: Tunnel is stopped due to its Forwarding Rules being deleted for Classic VPN tunnels or the project is in frozen state.
// - PEER_IDENTITY_MISMATCH: Peer identity does not match peer IP, probably behind NAT.
// - TS_NARROWING_NOT_ALLOWED: Traffic selector narrowing not allowed for an HA-VPN tunnel.
type VpnTunnelStatus pulumi.String

const (
	VpnTunnelStatusAllocatingResources  = VpnTunnelStatus("ALLOCATING_RESOURCES")
	VpnTunnelStatusAuthorizationError   = VpnTunnelStatus("AUTHORIZATION_ERROR")
	VpnTunnelStatusDeprovisioning       = VpnTunnelStatus("DEPROVISIONING")
	VpnTunnelStatusEstablished          = VpnTunnelStatus("ESTABLISHED")
	VpnTunnelStatusFailed               = VpnTunnelStatus("FAILED")
	VpnTunnelStatusFirstHandshake       = VpnTunnelStatus("FIRST_HANDSHAKE")
	VpnTunnelStatusNegotiationFailure   = VpnTunnelStatus("NEGOTIATION_FAILURE")
	VpnTunnelStatusNetworkError         = VpnTunnelStatus("NETWORK_ERROR")
	VpnTunnelStatusNoIncomingPackets    = VpnTunnelStatus("NO_INCOMING_PACKETS")
	VpnTunnelStatusProvisioning         = VpnTunnelStatus("PROVISIONING")
	VpnTunnelStatusRejected             = VpnTunnelStatus("REJECTED")
	VpnTunnelStatusStopped              = VpnTunnelStatus("STOPPED")
	VpnTunnelStatusWaitingForFullConfig = VpnTunnelStatus("WAITING_FOR_FULL_CONFIG")
)

func (VpnTunnelStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e VpnTunnelStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VpnTunnelStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VpnTunnelStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VpnTunnelStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
