// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a TargetTcpProxy resource in the specified project using the data included in the request.
type TargetTcpProxy struct {
	pulumi.CustomResourceState

	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// Type of the resource. Always compute#targetTcpProxy for target TCP proxies.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
	ProxyBind pulumi.BoolOutput `pulumi:"proxyBind"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader pulumi.StringOutput `pulumi:"proxyHeader"`
	// Server-defined URL for the resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// URL to the BackendService resource.
	Service pulumi.StringOutput `pulumi:"service"`
}

// NewTargetTcpProxy registers a new resource with the given unique name, arguments, and options.
func NewTargetTcpProxy(ctx *pulumi.Context,
	name string, args *TargetTcpProxyArgs, opts ...pulumi.ResourceOption) (*TargetTcpProxy, error) {
	if args == nil {
		args = &TargetTcpProxyArgs{}
	}

	var resource TargetTcpProxy
	err := ctx.RegisterResource("google-native:compute/v1:TargetTcpProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTargetTcpProxy gets an existing TargetTcpProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTargetTcpProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TargetTcpProxyState, opts ...pulumi.ResourceOption) (*TargetTcpProxy, error) {
	var resource TargetTcpProxy
	err := ctx.ReadResource("google-native:compute/v1:TargetTcpProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TargetTcpProxy resources.
type targetTcpProxyState struct {
}

type TargetTcpProxyState struct {
}

func (TargetTcpProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*targetTcpProxyState)(nil)).Elem()
}

type targetTcpProxyArgs struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
	ProxyBind *bool `pulumi:"proxyBind"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *TargetTcpProxyProxyHeader `pulumi:"proxyHeader"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// URL to the BackendService resource.
	Service *string `pulumi:"service"`
}

// The set of arguments for constructing a TargetTcpProxy resource.
type TargetTcpProxyArgs struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
	ProxyBind pulumi.BoolPtrInput
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader TargetTcpProxyProxyHeaderPtrInput
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// URL to the BackendService resource.
	Service pulumi.StringPtrInput
}

func (TargetTcpProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*targetTcpProxyArgs)(nil)).Elem()
}

type TargetTcpProxyInput interface {
	pulumi.Input

	ToTargetTcpProxyOutput() TargetTcpProxyOutput
	ToTargetTcpProxyOutputWithContext(ctx context.Context) TargetTcpProxyOutput
}

func (*TargetTcpProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetTcpProxy)(nil)).Elem()
}

func (i *TargetTcpProxy) ToTargetTcpProxyOutput() TargetTcpProxyOutput {
	return i.ToTargetTcpProxyOutputWithContext(context.Background())
}

func (i *TargetTcpProxy) ToTargetTcpProxyOutputWithContext(ctx context.Context) TargetTcpProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetTcpProxyOutput)
}

type TargetTcpProxyOutput struct{ *pulumi.OutputState }

func (TargetTcpProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetTcpProxy)(nil)).Elem()
}

func (o TargetTcpProxyOutput) ToTargetTcpProxyOutput() TargetTcpProxyOutput {
	return o
}

func (o TargetTcpProxyOutput) ToTargetTcpProxyOutputWithContext(ctx context.Context) TargetTcpProxyOutput {
	return o
}

// Creation timestamp in RFC3339 text format.
func (o TargetTcpProxyOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetTcpProxy) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o TargetTcpProxyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetTcpProxy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Type of the resource. Always compute#targetTcpProxy for target TCP proxies.
func (o TargetTcpProxyOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetTcpProxy) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o TargetTcpProxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetTcpProxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
func (o TargetTcpProxyOutput) ProxyBind() pulumi.BoolOutput {
	return o.ApplyT(func(v *TargetTcpProxy) pulumi.BoolOutput { return v.ProxyBind }).(pulumi.BoolOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o TargetTcpProxyOutput) ProxyHeader() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetTcpProxy) pulumi.StringOutput { return v.ProxyHeader }).(pulumi.StringOutput)
}

// Server-defined URL for the resource.
func (o TargetTcpProxyOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetTcpProxy) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// URL to the BackendService resource.
func (o TargetTcpProxyOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *TargetTcpProxy) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TargetTcpProxyInput)(nil)).Elem(), &TargetTcpProxy{})
	pulumi.RegisterOutputType(TargetTcpProxyOutput{})
}
