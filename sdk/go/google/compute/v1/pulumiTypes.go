// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A specification of the type and number of accelerator cards attached to the instance.
type AcceleratorConfig struct {
	// The number of the guest accelerator cards exposed to this instance.
	AcceleratorCount *int `pulumi:"acceleratorCount"`
	// Full or partial URL of the accelerator type resource to attach to this instance. For example: projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100 If you are creating an instance template, specify only the accelerator name. See GPUs on Compute Engine for a full list of accelerator types.
	AcceleratorType *string `pulumi:"acceleratorType"`
}

// AcceleratorConfigInput is an input type that accepts AcceleratorConfigArgs and AcceleratorConfigOutput values.
// You can construct a concrete instance of `AcceleratorConfigInput` via:
//
//          AcceleratorConfigArgs{...}
type AcceleratorConfigInput interface {
	pulumi.Input

	ToAcceleratorConfigOutput() AcceleratorConfigOutput
	ToAcceleratorConfigOutputWithContext(context.Context) AcceleratorConfigOutput
}

// A specification of the type and number of accelerator cards attached to the instance.
type AcceleratorConfigArgs struct {
	// The number of the guest accelerator cards exposed to this instance.
	AcceleratorCount pulumi.IntPtrInput `pulumi:"acceleratorCount"`
	// Full or partial URL of the accelerator type resource to attach to this instance. For example: projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100 If you are creating an instance template, specify only the accelerator name. See GPUs on Compute Engine for a full list of accelerator types.
	AcceleratorType pulumi.StringPtrInput `pulumi:"acceleratorType"`
}

func (AcceleratorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return i.ToAcceleratorConfigOutputWithContext(context.Background())
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigOutput)
}

// AcceleratorConfigArrayInput is an input type that accepts AcceleratorConfigArray and AcceleratorConfigArrayOutput values.
// You can construct a concrete instance of `AcceleratorConfigArrayInput` via:
//
//          AcceleratorConfigArray{ AcceleratorConfigArgs{...} }
type AcceleratorConfigArrayInput interface {
	pulumi.Input

	ToAcceleratorConfigArrayOutput() AcceleratorConfigArrayOutput
	ToAcceleratorConfigArrayOutputWithContext(context.Context) AcceleratorConfigArrayOutput
}

type AcceleratorConfigArray []AcceleratorConfigInput

func (AcceleratorConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcceleratorConfig)(nil)).Elem()
}

func (i AcceleratorConfigArray) ToAcceleratorConfigArrayOutput() AcceleratorConfigArrayOutput {
	return i.ToAcceleratorConfigArrayOutputWithContext(context.Background())
}

func (i AcceleratorConfigArray) ToAcceleratorConfigArrayOutputWithContext(ctx context.Context) AcceleratorConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigArrayOutput)
}

// A specification of the type and number of accelerator cards attached to the instance.
type AcceleratorConfigOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return o
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return o
}

// The number of the guest accelerator cards exposed to this instance.
func (o AcceleratorConfigOutput) AcceleratorCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *int { return v.AcceleratorCount }).(pulumi.IntPtrOutput)
}

// Full or partial URL of the accelerator type resource to attach to this instance. For example: projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100 If you are creating an instance template, specify only the accelerator name. See GPUs on Compute Engine for a full list of accelerator types.
func (o AcceleratorConfigOutput) AcceleratorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *string { return v.AcceleratorType }).(pulumi.StringPtrOutput)
}

type AcceleratorConfigArrayOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigArrayOutput) ToAcceleratorConfigArrayOutput() AcceleratorConfigArrayOutput {
	return o
}

func (o AcceleratorConfigArrayOutput) ToAcceleratorConfigArrayOutputWithContext(ctx context.Context) AcceleratorConfigArrayOutput {
	return o
}

func (o AcceleratorConfigArrayOutput) Index(i pulumi.IntInput) AcceleratorConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AcceleratorConfig {
		return vs[0].([]AcceleratorConfig)[vs[1].(int)]
	}).(AcceleratorConfigOutput)
}

// A specification of the type and number of accelerator cards attached to the instance.
type AcceleratorConfigResponse struct {
	// The number of the guest accelerator cards exposed to this instance.
	AcceleratorCount int `pulumi:"acceleratorCount"`
	// Full or partial URL of the accelerator type resource to attach to this instance. For example: projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100 If you are creating an instance template, specify only the accelerator name. See GPUs on Compute Engine for a full list of accelerator types.
	AcceleratorType string `pulumi:"acceleratorType"`
}

// AcceleratorConfigResponseInput is an input type that accepts AcceleratorConfigResponseArgs and AcceleratorConfigResponseOutput values.
// You can construct a concrete instance of `AcceleratorConfigResponseInput` via:
//
//          AcceleratorConfigResponseArgs{...}
type AcceleratorConfigResponseInput interface {
	pulumi.Input

	ToAcceleratorConfigResponseOutput() AcceleratorConfigResponseOutput
	ToAcceleratorConfigResponseOutputWithContext(context.Context) AcceleratorConfigResponseOutput
}

// A specification of the type and number of accelerator cards attached to the instance.
type AcceleratorConfigResponseArgs struct {
	// The number of the guest accelerator cards exposed to this instance.
	AcceleratorCount pulumi.IntInput `pulumi:"acceleratorCount"`
	// Full or partial URL of the accelerator type resource to attach to this instance. For example: projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100 If you are creating an instance template, specify only the accelerator name. See GPUs on Compute Engine for a full list of accelerator types.
	AcceleratorType pulumi.StringInput `pulumi:"acceleratorType"`
}

func (AcceleratorConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfigResponse)(nil)).Elem()
}

func (i AcceleratorConfigResponseArgs) ToAcceleratorConfigResponseOutput() AcceleratorConfigResponseOutput {
	return i.ToAcceleratorConfigResponseOutputWithContext(context.Background())
}

func (i AcceleratorConfigResponseArgs) ToAcceleratorConfigResponseOutputWithContext(ctx context.Context) AcceleratorConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigResponseOutput)
}

// AcceleratorConfigResponseArrayInput is an input type that accepts AcceleratorConfigResponseArray and AcceleratorConfigResponseArrayOutput values.
// You can construct a concrete instance of `AcceleratorConfigResponseArrayInput` via:
//
//          AcceleratorConfigResponseArray{ AcceleratorConfigResponseArgs{...} }
type AcceleratorConfigResponseArrayInput interface {
	pulumi.Input

	ToAcceleratorConfigResponseArrayOutput() AcceleratorConfigResponseArrayOutput
	ToAcceleratorConfigResponseArrayOutputWithContext(context.Context) AcceleratorConfigResponseArrayOutput
}

type AcceleratorConfigResponseArray []AcceleratorConfigResponseInput

func (AcceleratorConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcceleratorConfigResponse)(nil)).Elem()
}

func (i AcceleratorConfigResponseArray) ToAcceleratorConfigResponseArrayOutput() AcceleratorConfigResponseArrayOutput {
	return i.ToAcceleratorConfigResponseArrayOutputWithContext(context.Background())
}

func (i AcceleratorConfigResponseArray) ToAcceleratorConfigResponseArrayOutputWithContext(ctx context.Context) AcceleratorConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigResponseArrayOutput)
}

// A specification of the type and number of accelerator cards attached to the instance.
type AcceleratorConfigResponseOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfigResponse)(nil)).Elem()
}

func (o AcceleratorConfigResponseOutput) ToAcceleratorConfigResponseOutput() AcceleratorConfigResponseOutput {
	return o
}

func (o AcceleratorConfigResponseOutput) ToAcceleratorConfigResponseOutputWithContext(ctx context.Context) AcceleratorConfigResponseOutput {
	return o
}

// The number of the guest accelerator cards exposed to this instance.
func (o AcceleratorConfigResponseOutput) AcceleratorCount() pulumi.IntOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) int { return v.AcceleratorCount }).(pulumi.IntOutput)
}

// Full or partial URL of the accelerator type resource to attach to this instance. For example: projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100 If you are creating an instance template, specify only the accelerator name. See GPUs on Compute Engine for a full list of accelerator types.
func (o AcceleratorConfigResponseOutput) AcceleratorType() pulumi.StringOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) string { return v.AcceleratorType }).(pulumi.StringOutput)
}

type AcceleratorConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcceleratorConfigResponse)(nil)).Elem()
}

func (o AcceleratorConfigResponseArrayOutput) ToAcceleratorConfigResponseArrayOutput() AcceleratorConfigResponseArrayOutput {
	return o
}

func (o AcceleratorConfigResponseArrayOutput) ToAcceleratorConfigResponseArrayOutputWithContext(ctx context.Context) AcceleratorConfigResponseArrayOutput {
	return o
}

func (o AcceleratorConfigResponseArrayOutput) Index(i pulumi.IntInput) AcceleratorConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AcceleratorConfigResponse {
		return vs[0].([]AcceleratorConfigResponse)[vs[1].(int)]
	}).(AcceleratorConfigResponseOutput)
}

// An access configuration attached to an instance's network interface. Only one access config per instance is supported.
type AccessConfig struct {
	// The name of this access configuration. The default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access.
	Name *string `pulumi:"name"`
	// An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance.
	NatIP *string `pulumi:"natIP"`
	// This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
	NetworkTier *string `pulumi:"networkTier"`
	// The DNS domain name for the public PTR record. You can set this field only if the `setPublicPtr` field is enabled.
	PublicPtrDomainName *string `pulumi:"publicPtrDomainName"`
	// Specifies whether a public DNS 'PTR' record should be created to map the external IP address of the instance to a DNS domain name.
	SetPublicPtr *bool `pulumi:"setPublicPtr"`
	// The type of configuration. The default and only option is ONE_TO_ONE_NAT.
	Type *string `pulumi:"type"`
}

// AccessConfigInput is an input type that accepts AccessConfigArgs and AccessConfigOutput values.
// You can construct a concrete instance of `AccessConfigInput` via:
//
//          AccessConfigArgs{...}
type AccessConfigInput interface {
	pulumi.Input

	ToAccessConfigOutput() AccessConfigOutput
	ToAccessConfigOutputWithContext(context.Context) AccessConfigOutput
}

// An access configuration attached to an instance's network interface. Only one access config per instance is supported.
type AccessConfigArgs struct {
	// The name of this access configuration. The default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance.
	NatIP pulumi.StringPtrInput `pulumi:"natIP"`
	// This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
	NetworkTier *AccessConfigNetworkTier `pulumi:"networkTier"`
	// The DNS domain name for the public PTR record. You can set this field only if the `setPublicPtr` field is enabled.
	PublicPtrDomainName pulumi.StringPtrInput `pulumi:"publicPtrDomainName"`
	// Specifies whether a public DNS 'PTR' record should be created to map the external IP address of the instance to a DNS domain name.
	SetPublicPtr pulumi.BoolPtrInput `pulumi:"setPublicPtr"`
	// The type of configuration. The default and only option is ONE_TO_ONE_NAT.
	Type *AccessConfigType `pulumi:"type"`
}

func (AccessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessConfig)(nil)).Elem()
}

func (i AccessConfigArgs) ToAccessConfigOutput() AccessConfigOutput {
	return i.ToAccessConfigOutputWithContext(context.Background())
}

func (i AccessConfigArgs) ToAccessConfigOutputWithContext(ctx context.Context) AccessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessConfigOutput)
}

// AccessConfigArrayInput is an input type that accepts AccessConfigArray and AccessConfigArrayOutput values.
// You can construct a concrete instance of `AccessConfigArrayInput` via:
//
//          AccessConfigArray{ AccessConfigArgs{...} }
type AccessConfigArrayInput interface {
	pulumi.Input

	ToAccessConfigArrayOutput() AccessConfigArrayOutput
	ToAccessConfigArrayOutputWithContext(context.Context) AccessConfigArrayOutput
}

type AccessConfigArray []AccessConfigInput

func (AccessConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessConfig)(nil)).Elem()
}

func (i AccessConfigArray) ToAccessConfigArrayOutput() AccessConfigArrayOutput {
	return i.ToAccessConfigArrayOutputWithContext(context.Background())
}

func (i AccessConfigArray) ToAccessConfigArrayOutputWithContext(ctx context.Context) AccessConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessConfigArrayOutput)
}

// An access configuration attached to an instance's network interface. Only one access config per instance is supported.
type AccessConfigOutput struct{ *pulumi.OutputState }

func (AccessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessConfig)(nil)).Elem()
}

func (o AccessConfigOutput) ToAccessConfigOutput() AccessConfigOutput {
	return o
}

func (o AccessConfigOutput) ToAccessConfigOutputWithContext(ctx context.Context) AccessConfigOutput {
	return o
}

// The name of this access configuration. The default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access.
func (o AccessConfigOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessConfig) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance.
func (o AccessConfigOutput) NatIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessConfig) *string { return v.NatIP }).(pulumi.StringPtrOutput)
}

// This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
func (o AccessConfigOutput) NetworkTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessConfig) *string { return v.NetworkTier }).(pulumi.StringPtrOutput)
}

// The DNS domain name for the public PTR record. You can set this field only if the `setPublicPtr` field is enabled.
func (o AccessConfigOutput) PublicPtrDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessConfig) *string { return v.PublicPtrDomainName }).(pulumi.StringPtrOutput)
}

// Specifies whether a public DNS 'PTR' record should be created to map the external IP address of the instance to a DNS domain name.
func (o AccessConfigOutput) SetPublicPtr() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessConfig) *bool { return v.SetPublicPtr }).(pulumi.BoolPtrOutput)
}

// The type of configuration. The default and only option is ONE_TO_ONE_NAT.
func (o AccessConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AccessConfigArrayOutput struct{ *pulumi.OutputState }

func (AccessConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessConfig)(nil)).Elem()
}

func (o AccessConfigArrayOutput) ToAccessConfigArrayOutput() AccessConfigArrayOutput {
	return o
}

func (o AccessConfigArrayOutput) ToAccessConfigArrayOutputWithContext(ctx context.Context) AccessConfigArrayOutput {
	return o
}

func (o AccessConfigArrayOutput) Index(i pulumi.IntInput) AccessConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessConfig {
		return vs[0].([]AccessConfig)[vs[1].(int)]
	}).(AccessConfigOutput)
}

// An access configuration attached to an instance's network interface. Only one access config per instance is supported.
type AccessConfigResponse struct {
	// The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. The field is output only, an IPv6 address from a subnetwork associated with the instance will be allocated dynamically.
	ExternalIpv6 string `pulumi:"externalIpv6"`
	// The prefix length of the external IPv6 range.
	ExternalIpv6PrefixLength int `pulumi:"externalIpv6PrefixLength"`
	// Type of the resource. Always compute#accessConfig for access configs.
	Kind string `pulumi:"kind"`
	// The name of this access configuration. The default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access.
	Name string `pulumi:"name"`
	// An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance.
	NatIP string `pulumi:"natIP"`
	// This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
	NetworkTier string `pulumi:"networkTier"`
	// The DNS domain name for the public PTR record. You can set this field only if the `setPublicPtr` field is enabled.
	PublicPtrDomainName string `pulumi:"publicPtrDomainName"`
	// Specifies whether a public DNS 'PTR' record should be created to map the external IP address of the instance to a DNS domain name.
	SetPublicPtr bool `pulumi:"setPublicPtr"`
	// The type of configuration. The default and only option is ONE_TO_ONE_NAT.
	Type string `pulumi:"type"`
}

// AccessConfigResponseInput is an input type that accepts AccessConfigResponseArgs and AccessConfigResponseOutput values.
// You can construct a concrete instance of `AccessConfigResponseInput` via:
//
//          AccessConfigResponseArgs{...}
type AccessConfigResponseInput interface {
	pulumi.Input

	ToAccessConfigResponseOutput() AccessConfigResponseOutput
	ToAccessConfigResponseOutputWithContext(context.Context) AccessConfigResponseOutput
}

// An access configuration attached to an instance's network interface. Only one access config per instance is supported.
type AccessConfigResponseArgs struct {
	// The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. The field is output only, an IPv6 address from a subnetwork associated with the instance will be allocated dynamically.
	ExternalIpv6 pulumi.StringInput `pulumi:"externalIpv6"`
	// The prefix length of the external IPv6 range.
	ExternalIpv6PrefixLength pulumi.IntInput `pulumi:"externalIpv6PrefixLength"`
	// Type of the resource. Always compute#accessConfig for access configs.
	Kind pulumi.StringInput `pulumi:"kind"`
	// The name of this access configuration. The default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access.
	Name pulumi.StringInput `pulumi:"name"`
	// An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance.
	NatIP pulumi.StringInput `pulumi:"natIP"`
	// This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
	NetworkTier pulumi.StringInput `pulumi:"networkTier"`
	// The DNS domain name for the public PTR record. You can set this field only if the `setPublicPtr` field is enabled.
	PublicPtrDomainName pulumi.StringInput `pulumi:"publicPtrDomainName"`
	// Specifies whether a public DNS 'PTR' record should be created to map the external IP address of the instance to a DNS domain name.
	SetPublicPtr pulumi.BoolInput `pulumi:"setPublicPtr"`
	// The type of configuration. The default and only option is ONE_TO_ONE_NAT.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AccessConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessConfigResponse)(nil)).Elem()
}

func (i AccessConfigResponseArgs) ToAccessConfigResponseOutput() AccessConfigResponseOutput {
	return i.ToAccessConfigResponseOutputWithContext(context.Background())
}

func (i AccessConfigResponseArgs) ToAccessConfigResponseOutputWithContext(ctx context.Context) AccessConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessConfigResponseOutput)
}

// AccessConfigResponseArrayInput is an input type that accepts AccessConfigResponseArray and AccessConfigResponseArrayOutput values.
// You can construct a concrete instance of `AccessConfigResponseArrayInput` via:
//
//          AccessConfigResponseArray{ AccessConfigResponseArgs{...} }
type AccessConfigResponseArrayInput interface {
	pulumi.Input

	ToAccessConfigResponseArrayOutput() AccessConfigResponseArrayOutput
	ToAccessConfigResponseArrayOutputWithContext(context.Context) AccessConfigResponseArrayOutput
}

type AccessConfigResponseArray []AccessConfigResponseInput

func (AccessConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessConfigResponse)(nil)).Elem()
}

func (i AccessConfigResponseArray) ToAccessConfigResponseArrayOutput() AccessConfigResponseArrayOutput {
	return i.ToAccessConfigResponseArrayOutputWithContext(context.Background())
}

func (i AccessConfigResponseArray) ToAccessConfigResponseArrayOutputWithContext(ctx context.Context) AccessConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessConfigResponseArrayOutput)
}

// An access configuration attached to an instance's network interface. Only one access config per instance is supported.
type AccessConfigResponseOutput struct{ *pulumi.OutputState }

func (AccessConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessConfigResponse)(nil)).Elem()
}

func (o AccessConfigResponseOutput) ToAccessConfigResponseOutput() AccessConfigResponseOutput {
	return o
}

func (o AccessConfigResponseOutput) ToAccessConfigResponseOutputWithContext(ctx context.Context) AccessConfigResponseOutput {
	return o
}

// The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. The field is output only, an IPv6 address from a subnetwork associated with the instance will be allocated dynamically.
func (o AccessConfigResponseOutput) ExternalIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v AccessConfigResponse) string { return v.ExternalIpv6 }).(pulumi.StringOutput)
}

// The prefix length of the external IPv6 range.
func (o AccessConfigResponseOutput) ExternalIpv6PrefixLength() pulumi.IntOutput {
	return o.ApplyT(func(v AccessConfigResponse) int { return v.ExternalIpv6PrefixLength }).(pulumi.IntOutput)
}

// Type of the resource. Always compute#accessConfig for access configs.
func (o AccessConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v AccessConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The name of this access configuration. The default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access.
func (o AccessConfigResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AccessConfigResponse) string { return v.Name }).(pulumi.StringOutput)
}

// An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance.
func (o AccessConfigResponseOutput) NatIP() pulumi.StringOutput {
	return o.ApplyT(func(v AccessConfigResponse) string { return v.NatIP }).(pulumi.StringOutput)
}

// This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
func (o AccessConfigResponseOutput) NetworkTier() pulumi.StringOutput {
	return o.ApplyT(func(v AccessConfigResponse) string { return v.NetworkTier }).(pulumi.StringOutput)
}

// The DNS domain name for the public PTR record. You can set this field only if the `setPublicPtr` field is enabled.
func (o AccessConfigResponseOutput) PublicPtrDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v AccessConfigResponse) string { return v.PublicPtrDomainName }).(pulumi.StringOutput)
}

// Specifies whether a public DNS 'PTR' record should be created to map the external IP address of the instance to a DNS domain name.
func (o AccessConfigResponseOutput) SetPublicPtr() pulumi.BoolOutput {
	return o.ApplyT(func(v AccessConfigResponse) bool { return v.SetPublicPtr }).(pulumi.BoolOutput)
}

// The type of configuration. The default and only option is ONE_TO_ONE_NAT.
func (o AccessConfigResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AccessConfigResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AccessConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AccessConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessConfigResponse)(nil)).Elem()
}

func (o AccessConfigResponseArrayOutput) ToAccessConfigResponseArrayOutput() AccessConfigResponseArrayOutput {
	return o
}

func (o AccessConfigResponseArrayOutput) ToAccessConfigResponseArrayOutputWithContext(ctx context.Context) AccessConfigResponseArrayOutput {
	return o
}

func (o AccessConfigResponseArrayOutput) Index(i pulumi.IntInput) AccessConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessConfigResponse {
		return vs[0].([]AccessConfigResponse)[vs[1].(int)]
	}).(AccessConfigResponseOutput)
}

// Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled).
type AdvancedMachineFeatures struct {
	// Whether to enable nested virtualization or not (default is false).
	EnableNestedVirtualization *bool `pulumi:"enableNestedVirtualization"`
	// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
	ThreadsPerCore *int `pulumi:"threadsPerCore"`
}

// AdvancedMachineFeaturesInput is an input type that accepts AdvancedMachineFeaturesArgs and AdvancedMachineFeaturesOutput values.
// You can construct a concrete instance of `AdvancedMachineFeaturesInput` via:
//
//          AdvancedMachineFeaturesArgs{...}
type AdvancedMachineFeaturesInput interface {
	pulumi.Input

	ToAdvancedMachineFeaturesOutput() AdvancedMachineFeaturesOutput
	ToAdvancedMachineFeaturesOutputWithContext(context.Context) AdvancedMachineFeaturesOutput
}

// Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled).
type AdvancedMachineFeaturesArgs struct {
	// Whether to enable nested virtualization or not (default is false).
	EnableNestedVirtualization pulumi.BoolPtrInput `pulumi:"enableNestedVirtualization"`
	// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
	ThreadsPerCore pulumi.IntPtrInput `pulumi:"threadsPerCore"`
}

func (AdvancedMachineFeaturesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedMachineFeatures)(nil)).Elem()
}

func (i AdvancedMachineFeaturesArgs) ToAdvancedMachineFeaturesOutput() AdvancedMachineFeaturesOutput {
	return i.ToAdvancedMachineFeaturesOutputWithContext(context.Background())
}

func (i AdvancedMachineFeaturesArgs) ToAdvancedMachineFeaturesOutputWithContext(ctx context.Context) AdvancedMachineFeaturesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedMachineFeaturesOutput)
}

func (i AdvancedMachineFeaturesArgs) ToAdvancedMachineFeaturesPtrOutput() AdvancedMachineFeaturesPtrOutput {
	return i.ToAdvancedMachineFeaturesPtrOutputWithContext(context.Background())
}

func (i AdvancedMachineFeaturesArgs) ToAdvancedMachineFeaturesPtrOutputWithContext(ctx context.Context) AdvancedMachineFeaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedMachineFeaturesOutput).ToAdvancedMachineFeaturesPtrOutputWithContext(ctx)
}

// AdvancedMachineFeaturesPtrInput is an input type that accepts AdvancedMachineFeaturesArgs, AdvancedMachineFeaturesPtr and AdvancedMachineFeaturesPtrOutput values.
// You can construct a concrete instance of `AdvancedMachineFeaturesPtrInput` via:
//
//          AdvancedMachineFeaturesArgs{...}
//
//  or:
//
//          nil
type AdvancedMachineFeaturesPtrInput interface {
	pulumi.Input

	ToAdvancedMachineFeaturesPtrOutput() AdvancedMachineFeaturesPtrOutput
	ToAdvancedMachineFeaturesPtrOutputWithContext(context.Context) AdvancedMachineFeaturesPtrOutput
}

type advancedMachineFeaturesPtrType AdvancedMachineFeaturesArgs

func AdvancedMachineFeaturesPtr(v *AdvancedMachineFeaturesArgs) AdvancedMachineFeaturesPtrInput {
	return (*advancedMachineFeaturesPtrType)(v)
}

func (*advancedMachineFeaturesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedMachineFeatures)(nil)).Elem()
}

func (i *advancedMachineFeaturesPtrType) ToAdvancedMachineFeaturesPtrOutput() AdvancedMachineFeaturesPtrOutput {
	return i.ToAdvancedMachineFeaturesPtrOutputWithContext(context.Background())
}

func (i *advancedMachineFeaturesPtrType) ToAdvancedMachineFeaturesPtrOutputWithContext(ctx context.Context) AdvancedMachineFeaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedMachineFeaturesPtrOutput)
}

// Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled).
type AdvancedMachineFeaturesOutput struct{ *pulumi.OutputState }

func (AdvancedMachineFeaturesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedMachineFeatures)(nil)).Elem()
}

func (o AdvancedMachineFeaturesOutput) ToAdvancedMachineFeaturesOutput() AdvancedMachineFeaturesOutput {
	return o
}

func (o AdvancedMachineFeaturesOutput) ToAdvancedMachineFeaturesOutputWithContext(ctx context.Context) AdvancedMachineFeaturesOutput {
	return o
}

func (o AdvancedMachineFeaturesOutput) ToAdvancedMachineFeaturesPtrOutput() AdvancedMachineFeaturesPtrOutput {
	return o.ToAdvancedMachineFeaturesPtrOutputWithContext(context.Background())
}

func (o AdvancedMachineFeaturesOutput) ToAdvancedMachineFeaturesPtrOutputWithContext(ctx context.Context) AdvancedMachineFeaturesPtrOutput {
	return o.ApplyT(func(v AdvancedMachineFeatures) *AdvancedMachineFeatures {
		return &v
	}).(AdvancedMachineFeaturesPtrOutput)
}

// Whether to enable nested virtualization or not (default is false).
func (o AdvancedMachineFeaturesOutput) EnableNestedVirtualization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AdvancedMachineFeatures) *bool { return v.EnableNestedVirtualization }).(pulumi.BoolPtrOutput)
}

// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
func (o AdvancedMachineFeaturesOutput) ThreadsPerCore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AdvancedMachineFeatures) *int { return v.ThreadsPerCore }).(pulumi.IntPtrOutput)
}

type AdvancedMachineFeaturesPtrOutput struct{ *pulumi.OutputState }

func (AdvancedMachineFeaturesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedMachineFeatures)(nil)).Elem()
}

func (o AdvancedMachineFeaturesPtrOutput) ToAdvancedMachineFeaturesPtrOutput() AdvancedMachineFeaturesPtrOutput {
	return o
}

func (o AdvancedMachineFeaturesPtrOutput) ToAdvancedMachineFeaturesPtrOutputWithContext(ctx context.Context) AdvancedMachineFeaturesPtrOutput {
	return o
}

func (o AdvancedMachineFeaturesPtrOutput) Elem() AdvancedMachineFeaturesOutput {
	return o.ApplyT(func(v *AdvancedMachineFeatures) AdvancedMachineFeatures { return *v }).(AdvancedMachineFeaturesOutput)
}

// Whether to enable nested virtualization or not (default is false).
func (o AdvancedMachineFeaturesPtrOutput) EnableNestedVirtualization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdvancedMachineFeatures) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNestedVirtualization
	}).(pulumi.BoolPtrOutput)
}

// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
func (o AdvancedMachineFeaturesPtrOutput) ThreadsPerCore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AdvancedMachineFeatures) *int {
		if v == nil {
			return nil
		}
		return v.ThreadsPerCore
	}).(pulumi.IntPtrOutput)
}

// Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled).
type AdvancedMachineFeaturesResponse struct {
	// Whether to enable nested virtualization or not (default is false).
	EnableNestedVirtualization bool `pulumi:"enableNestedVirtualization"`
	// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
	ThreadsPerCore int `pulumi:"threadsPerCore"`
}

// AdvancedMachineFeaturesResponseInput is an input type that accepts AdvancedMachineFeaturesResponseArgs and AdvancedMachineFeaturesResponseOutput values.
// You can construct a concrete instance of `AdvancedMachineFeaturesResponseInput` via:
//
//          AdvancedMachineFeaturesResponseArgs{...}
type AdvancedMachineFeaturesResponseInput interface {
	pulumi.Input

	ToAdvancedMachineFeaturesResponseOutput() AdvancedMachineFeaturesResponseOutput
	ToAdvancedMachineFeaturesResponseOutputWithContext(context.Context) AdvancedMachineFeaturesResponseOutput
}

// Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled).
type AdvancedMachineFeaturesResponseArgs struct {
	// Whether to enable nested virtualization or not (default is false).
	EnableNestedVirtualization pulumi.BoolInput `pulumi:"enableNestedVirtualization"`
	// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
	ThreadsPerCore pulumi.IntInput `pulumi:"threadsPerCore"`
}

func (AdvancedMachineFeaturesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedMachineFeaturesResponse)(nil)).Elem()
}

func (i AdvancedMachineFeaturesResponseArgs) ToAdvancedMachineFeaturesResponseOutput() AdvancedMachineFeaturesResponseOutput {
	return i.ToAdvancedMachineFeaturesResponseOutputWithContext(context.Background())
}

func (i AdvancedMachineFeaturesResponseArgs) ToAdvancedMachineFeaturesResponseOutputWithContext(ctx context.Context) AdvancedMachineFeaturesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedMachineFeaturesResponseOutput)
}

func (i AdvancedMachineFeaturesResponseArgs) ToAdvancedMachineFeaturesResponsePtrOutput() AdvancedMachineFeaturesResponsePtrOutput {
	return i.ToAdvancedMachineFeaturesResponsePtrOutputWithContext(context.Background())
}

func (i AdvancedMachineFeaturesResponseArgs) ToAdvancedMachineFeaturesResponsePtrOutputWithContext(ctx context.Context) AdvancedMachineFeaturesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedMachineFeaturesResponseOutput).ToAdvancedMachineFeaturesResponsePtrOutputWithContext(ctx)
}

// AdvancedMachineFeaturesResponsePtrInput is an input type that accepts AdvancedMachineFeaturesResponseArgs, AdvancedMachineFeaturesResponsePtr and AdvancedMachineFeaturesResponsePtrOutput values.
// You can construct a concrete instance of `AdvancedMachineFeaturesResponsePtrInput` via:
//
//          AdvancedMachineFeaturesResponseArgs{...}
//
//  or:
//
//          nil
type AdvancedMachineFeaturesResponsePtrInput interface {
	pulumi.Input

	ToAdvancedMachineFeaturesResponsePtrOutput() AdvancedMachineFeaturesResponsePtrOutput
	ToAdvancedMachineFeaturesResponsePtrOutputWithContext(context.Context) AdvancedMachineFeaturesResponsePtrOutput
}

type advancedMachineFeaturesResponsePtrType AdvancedMachineFeaturesResponseArgs

func AdvancedMachineFeaturesResponsePtr(v *AdvancedMachineFeaturesResponseArgs) AdvancedMachineFeaturesResponsePtrInput {
	return (*advancedMachineFeaturesResponsePtrType)(v)
}

func (*advancedMachineFeaturesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedMachineFeaturesResponse)(nil)).Elem()
}

func (i *advancedMachineFeaturesResponsePtrType) ToAdvancedMachineFeaturesResponsePtrOutput() AdvancedMachineFeaturesResponsePtrOutput {
	return i.ToAdvancedMachineFeaturesResponsePtrOutputWithContext(context.Background())
}

func (i *advancedMachineFeaturesResponsePtrType) ToAdvancedMachineFeaturesResponsePtrOutputWithContext(ctx context.Context) AdvancedMachineFeaturesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedMachineFeaturesResponsePtrOutput)
}

// Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled).
type AdvancedMachineFeaturesResponseOutput struct{ *pulumi.OutputState }

func (AdvancedMachineFeaturesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedMachineFeaturesResponse)(nil)).Elem()
}

func (o AdvancedMachineFeaturesResponseOutput) ToAdvancedMachineFeaturesResponseOutput() AdvancedMachineFeaturesResponseOutput {
	return o
}

func (o AdvancedMachineFeaturesResponseOutput) ToAdvancedMachineFeaturesResponseOutputWithContext(ctx context.Context) AdvancedMachineFeaturesResponseOutput {
	return o
}

func (o AdvancedMachineFeaturesResponseOutput) ToAdvancedMachineFeaturesResponsePtrOutput() AdvancedMachineFeaturesResponsePtrOutput {
	return o.ToAdvancedMachineFeaturesResponsePtrOutputWithContext(context.Background())
}

func (o AdvancedMachineFeaturesResponseOutput) ToAdvancedMachineFeaturesResponsePtrOutputWithContext(ctx context.Context) AdvancedMachineFeaturesResponsePtrOutput {
	return o.ApplyT(func(v AdvancedMachineFeaturesResponse) *AdvancedMachineFeaturesResponse {
		return &v
	}).(AdvancedMachineFeaturesResponsePtrOutput)
}

// Whether to enable nested virtualization or not (default is false).
func (o AdvancedMachineFeaturesResponseOutput) EnableNestedVirtualization() pulumi.BoolOutput {
	return o.ApplyT(func(v AdvancedMachineFeaturesResponse) bool { return v.EnableNestedVirtualization }).(pulumi.BoolOutput)
}

// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
func (o AdvancedMachineFeaturesResponseOutput) ThreadsPerCore() pulumi.IntOutput {
	return o.ApplyT(func(v AdvancedMachineFeaturesResponse) int { return v.ThreadsPerCore }).(pulumi.IntOutput)
}

type AdvancedMachineFeaturesResponsePtrOutput struct{ *pulumi.OutputState }

func (AdvancedMachineFeaturesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedMachineFeaturesResponse)(nil)).Elem()
}

func (o AdvancedMachineFeaturesResponsePtrOutput) ToAdvancedMachineFeaturesResponsePtrOutput() AdvancedMachineFeaturesResponsePtrOutput {
	return o
}

func (o AdvancedMachineFeaturesResponsePtrOutput) ToAdvancedMachineFeaturesResponsePtrOutputWithContext(ctx context.Context) AdvancedMachineFeaturesResponsePtrOutput {
	return o
}

func (o AdvancedMachineFeaturesResponsePtrOutput) Elem() AdvancedMachineFeaturesResponseOutput {
	return o.ApplyT(func(v *AdvancedMachineFeaturesResponse) AdvancedMachineFeaturesResponse { return *v }).(AdvancedMachineFeaturesResponseOutput)
}

// Whether to enable nested virtualization or not (default is false).
func (o AdvancedMachineFeaturesResponsePtrOutput) EnableNestedVirtualization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdvancedMachineFeaturesResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableNestedVirtualization
	}).(pulumi.BoolPtrOutput)
}

// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
func (o AdvancedMachineFeaturesResponsePtrOutput) ThreadsPerCore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AdvancedMachineFeaturesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ThreadsPerCore
	}).(pulumi.IntPtrOutput)
}

// An alias IP range attached to an instance's network interface.
type AliasIpRange struct {
	// The IP alias ranges to allocate for this interface. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. This range may be a single IP address (such as 10.2.3.4), a netmask (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24).
	IpCidrRange *string `pulumi:"ipCidrRange"`
	// The name of a subnetwork secondary IP range from which to allocate an IP alias range. If not specified, the primary range of the subnetwork is used.
	SubnetworkRangeName *string `pulumi:"subnetworkRangeName"`
}

// AliasIpRangeInput is an input type that accepts AliasIpRangeArgs and AliasIpRangeOutput values.
// You can construct a concrete instance of `AliasIpRangeInput` via:
//
//          AliasIpRangeArgs{...}
type AliasIpRangeInput interface {
	pulumi.Input

	ToAliasIpRangeOutput() AliasIpRangeOutput
	ToAliasIpRangeOutputWithContext(context.Context) AliasIpRangeOutput
}

// An alias IP range attached to an instance's network interface.
type AliasIpRangeArgs struct {
	// The IP alias ranges to allocate for this interface. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. This range may be a single IP address (such as 10.2.3.4), a netmask (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24).
	IpCidrRange pulumi.StringPtrInput `pulumi:"ipCidrRange"`
	// The name of a subnetwork secondary IP range from which to allocate an IP alias range. If not specified, the primary range of the subnetwork is used.
	SubnetworkRangeName pulumi.StringPtrInput `pulumi:"subnetworkRangeName"`
}

func (AliasIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasIpRange)(nil)).Elem()
}

func (i AliasIpRangeArgs) ToAliasIpRangeOutput() AliasIpRangeOutput {
	return i.ToAliasIpRangeOutputWithContext(context.Background())
}

func (i AliasIpRangeArgs) ToAliasIpRangeOutputWithContext(ctx context.Context) AliasIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasIpRangeOutput)
}

// AliasIpRangeArrayInput is an input type that accepts AliasIpRangeArray and AliasIpRangeArrayOutput values.
// You can construct a concrete instance of `AliasIpRangeArrayInput` via:
//
//          AliasIpRangeArray{ AliasIpRangeArgs{...} }
type AliasIpRangeArrayInput interface {
	pulumi.Input

	ToAliasIpRangeArrayOutput() AliasIpRangeArrayOutput
	ToAliasIpRangeArrayOutputWithContext(context.Context) AliasIpRangeArrayOutput
}

type AliasIpRangeArray []AliasIpRangeInput

func (AliasIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AliasIpRange)(nil)).Elem()
}

func (i AliasIpRangeArray) ToAliasIpRangeArrayOutput() AliasIpRangeArrayOutput {
	return i.ToAliasIpRangeArrayOutputWithContext(context.Background())
}

func (i AliasIpRangeArray) ToAliasIpRangeArrayOutputWithContext(ctx context.Context) AliasIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasIpRangeArrayOutput)
}

// An alias IP range attached to an instance's network interface.
type AliasIpRangeOutput struct{ *pulumi.OutputState }

func (AliasIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasIpRange)(nil)).Elem()
}

func (o AliasIpRangeOutput) ToAliasIpRangeOutput() AliasIpRangeOutput {
	return o
}

func (o AliasIpRangeOutput) ToAliasIpRangeOutputWithContext(ctx context.Context) AliasIpRangeOutput {
	return o
}

// The IP alias ranges to allocate for this interface. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. This range may be a single IP address (such as 10.2.3.4), a netmask (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24).
func (o AliasIpRangeOutput) IpCidrRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AliasIpRange) *string { return v.IpCidrRange }).(pulumi.StringPtrOutput)
}

// The name of a subnetwork secondary IP range from which to allocate an IP alias range. If not specified, the primary range of the subnetwork is used.
func (o AliasIpRangeOutput) SubnetworkRangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AliasIpRange) *string { return v.SubnetworkRangeName }).(pulumi.StringPtrOutput)
}

type AliasIpRangeArrayOutput struct{ *pulumi.OutputState }

func (AliasIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AliasIpRange)(nil)).Elem()
}

func (o AliasIpRangeArrayOutput) ToAliasIpRangeArrayOutput() AliasIpRangeArrayOutput {
	return o
}

func (o AliasIpRangeArrayOutput) ToAliasIpRangeArrayOutputWithContext(ctx context.Context) AliasIpRangeArrayOutput {
	return o
}

func (o AliasIpRangeArrayOutput) Index(i pulumi.IntInput) AliasIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AliasIpRange {
		return vs[0].([]AliasIpRange)[vs[1].(int)]
	}).(AliasIpRangeOutput)
}

// An alias IP range attached to an instance's network interface.
type AliasIpRangeResponse struct {
	// The IP alias ranges to allocate for this interface. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. This range may be a single IP address (such as 10.2.3.4), a netmask (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24).
	IpCidrRange string `pulumi:"ipCidrRange"`
	// The name of a subnetwork secondary IP range from which to allocate an IP alias range. If not specified, the primary range of the subnetwork is used.
	SubnetworkRangeName string `pulumi:"subnetworkRangeName"`
}

// AliasIpRangeResponseInput is an input type that accepts AliasIpRangeResponseArgs and AliasIpRangeResponseOutput values.
// You can construct a concrete instance of `AliasIpRangeResponseInput` via:
//
//          AliasIpRangeResponseArgs{...}
type AliasIpRangeResponseInput interface {
	pulumi.Input

	ToAliasIpRangeResponseOutput() AliasIpRangeResponseOutput
	ToAliasIpRangeResponseOutputWithContext(context.Context) AliasIpRangeResponseOutput
}

// An alias IP range attached to an instance's network interface.
type AliasIpRangeResponseArgs struct {
	// The IP alias ranges to allocate for this interface. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. This range may be a single IP address (such as 10.2.3.4), a netmask (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24).
	IpCidrRange pulumi.StringInput `pulumi:"ipCidrRange"`
	// The name of a subnetwork secondary IP range from which to allocate an IP alias range. If not specified, the primary range of the subnetwork is used.
	SubnetworkRangeName pulumi.StringInput `pulumi:"subnetworkRangeName"`
}

func (AliasIpRangeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasIpRangeResponse)(nil)).Elem()
}

func (i AliasIpRangeResponseArgs) ToAliasIpRangeResponseOutput() AliasIpRangeResponseOutput {
	return i.ToAliasIpRangeResponseOutputWithContext(context.Background())
}

func (i AliasIpRangeResponseArgs) ToAliasIpRangeResponseOutputWithContext(ctx context.Context) AliasIpRangeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasIpRangeResponseOutput)
}

// AliasIpRangeResponseArrayInput is an input type that accepts AliasIpRangeResponseArray and AliasIpRangeResponseArrayOutput values.
// You can construct a concrete instance of `AliasIpRangeResponseArrayInput` via:
//
//          AliasIpRangeResponseArray{ AliasIpRangeResponseArgs{...} }
type AliasIpRangeResponseArrayInput interface {
	pulumi.Input

	ToAliasIpRangeResponseArrayOutput() AliasIpRangeResponseArrayOutput
	ToAliasIpRangeResponseArrayOutputWithContext(context.Context) AliasIpRangeResponseArrayOutput
}

type AliasIpRangeResponseArray []AliasIpRangeResponseInput

func (AliasIpRangeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AliasIpRangeResponse)(nil)).Elem()
}

func (i AliasIpRangeResponseArray) ToAliasIpRangeResponseArrayOutput() AliasIpRangeResponseArrayOutput {
	return i.ToAliasIpRangeResponseArrayOutputWithContext(context.Background())
}

func (i AliasIpRangeResponseArray) ToAliasIpRangeResponseArrayOutputWithContext(ctx context.Context) AliasIpRangeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AliasIpRangeResponseArrayOutput)
}

// An alias IP range attached to an instance's network interface.
type AliasIpRangeResponseOutput struct{ *pulumi.OutputState }

func (AliasIpRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AliasIpRangeResponse)(nil)).Elem()
}

func (o AliasIpRangeResponseOutput) ToAliasIpRangeResponseOutput() AliasIpRangeResponseOutput {
	return o
}

func (o AliasIpRangeResponseOutput) ToAliasIpRangeResponseOutputWithContext(ctx context.Context) AliasIpRangeResponseOutput {
	return o
}

// The IP alias ranges to allocate for this interface. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. This range may be a single IP address (such as 10.2.3.4), a netmask (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24).
func (o AliasIpRangeResponseOutput) IpCidrRange() pulumi.StringOutput {
	return o.ApplyT(func(v AliasIpRangeResponse) string { return v.IpCidrRange }).(pulumi.StringOutput)
}

// The name of a subnetwork secondary IP range from which to allocate an IP alias range. If not specified, the primary range of the subnetwork is used.
func (o AliasIpRangeResponseOutput) SubnetworkRangeName() pulumi.StringOutput {
	return o.ApplyT(func(v AliasIpRangeResponse) string { return v.SubnetworkRangeName }).(pulumi.StringOutput)
}

type AliasIpRangeResponseArrayOutput struct{ *pulumi.OutputState }

func (AliasIpRangeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AliasIpRangeResponse)(nil)).Elem()
}

func (o AliasIpRangeResponseArrayOutput) ToAliasIpRangeResponseArrayOutput() AliasIpRangeResponseArrayOutput {
	return o
}

func (o AliasIpRangeResponseArrayOutput) ToAliasIpRangeResponseArrayOutputWithContext(ctx context.Context) AliasIpRangeResponseArrayOutput {
	return o
}

func (o AliasIpRangeResponseArrayOutput) Index(i pulumi.IntInput) AliasIpRangeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AliasIpRangeResponse {
		return vs[0].([]AliasIpRangeResponse)[vs[1].(int)]
	}).(AliasIpRangeResponseOutput)
}

type AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk struct {
	// Specifies the size of the disk in base-2 GB.
	DiskSizeGb *string `pulumi:"diskSizeGb"`
	// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
	Interface *string `pulumi:"interface"`
}

// AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInput is an input type that accepts AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArgs and AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput values.
// You can construct a concrete instance of `AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInput` via:
//
//          AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArgs{...}
type AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInput interface {
	pulumi.Input

	ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput() AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput
	ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutputWithContext(context.Context) AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput
}

type AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArgs struct {
	// Specifies the size of the disk in base-2 GB.
	DiskSizeGb pulumi.StringPtrInput `pulumi:"diskSizeGb"`
	// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
	Interface *AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInterface `pulumi:"interface"`
}

func (AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk)(nil)).Elem()
}

func (i AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArgs) ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput() AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput {
	return i.ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutputWithContext(context.Background())
}

func (i AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArgs) ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput)
}

// AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayInput is an input type that accepts AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArray and AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput values.
// You can construct a concrete instance of `AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayInput` via:
//
//          AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArray{ AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArgs{...} }
type AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayInput interface {
	pulumi.Input

	ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput() AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput
	ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutputWithContext(context.Context) AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput
}

type AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArray []AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskInput

func (AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk)(nil)).Elem()
}

func (i AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArray) ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput() AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput {
	return i.ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutputWithContext(context.Background())
}

func (i AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArray) ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput)
}

type AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput struct{ *pulumi.OutputState }

func (AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk)(nil)).Elem()
}

func (o AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput) ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput() AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput {
	return o
}

func (o AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput) ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput {
	return o
}

// Specifies the size of the disk in base-2 GB.
func (o AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk) *string {
		return v.DiskSizeGb
	}).(pulumi.StringPtrOutput)
}

// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
func (o AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk) *string {
		return v.Interface
	}).(pulumi.StringPtrOutput)
}

type AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput struct{ *pulumi.OutputState }

func (AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk)(nil)).Elem()
}

func (o AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput) ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput() AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput {
	return o
}

func (o AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput) ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput {
	return o
}

func (o AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput) Index(i pulumi.IntInput) AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk {
		return vs[0].([]AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk)[vs[1].(int)]
	}).(AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput)
}

type AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponse struct {
	// Specifies the size of the disk in base-2 GB.
	DiskSizeGb string `pulumi:"diskSizeGb"`
	// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
	Interface string `pulumi:"interface"`
}

// AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseInput is an input type that accepts AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArgs and AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput values.
// You can construct a concrete instance of `AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseInput` via:
//
//          AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArgs{...}
type AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseInput interface {
	pulumi.Input

	ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput() AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput
	ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutputWithContext(context.Context) AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput
}

type AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArgs struct {
	// Specifies the size of the disk in base-2 GB.
	DiskSizeGb pulumi.StringInput `pulumi:"diskSizeGb"`
	// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
	Interface pulumi.StringInput `pulumi:"interface"`
}

func (AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponse)(nil)).Elem()
}

func (i AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArgs) ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput() AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput {
	return i.ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutputWithContext(context.Background())
}

func (i AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArgs) ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput)
}

// AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayInput is an input type that accepts AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArray and AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput values.
// You can construct a concrete instance of `AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayInput` via:
//
//          AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArray{ AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArgs{...} }
type AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayInput interface {
	pulumi.Input

	ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput() AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput
	ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutputWithContext(context.Context) AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput
}

type AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArray []AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseInput

func (AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponse)(nil)).Elem()
}

func (i AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArray) ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput() AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput {
	return i.ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutputWithContext(context.Background())
}

func (i AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArray) ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput)
}

type AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput struct{ *pulumi.OutputState }

func (AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponse)(nil)).Elem()
}

func (o AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput) ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput() AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput {
	return o
}

func (o AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput) ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput {
	return o
}

// Specifies the size of the disk in base-2 GB.
func (o AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput) DiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponse) string {
		return v.DiskSizeGb
	}).(pulumi.StringOutput)
}

// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
func (o AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponse) string {
		return v.Interface
	}).(pulumi.StringOutput)
}

type AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponse)(nil)).Elem()
}

func (o AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput) ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput() AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput {
	return o
}

func (o AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput) ToAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput {
	return o
}

func (o AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput) Index(i pulumi.IntInput) AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponse {
		return vs[0].([]AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponse)[vs[1].(int)]
	}).(AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput)
}

// Properties of the SKU instances being reserved. Next ID: 9
type AllocationSpecificSKUAllocationReservedInstanceProperties struct {
	// Specifies accelerator type and count.
	GuestAccelerators []AcceleratorConfig `pulumi:"guestAccelerators"`
	// Specifies amount of local ssd to reserve with each instance. The type of disk is local-ssd.
	LocalSsds []AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk `pulumi:"localSsds"`
	// An opaque location hint used to place the allocation close to other resources. This field is for use by internal tools that use the public API.
	LocationHint *string `pulumi:"locationHint"`
	// Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern.
	MachineType *string `pulumi:"machineType"`
	// Minimum cpu platform the reservation.
	MinCpuPlatform *string `pulumi:"minCpuPlatform"`
}

// AllocationSpecificSKUAllocationReservedInstancePropertiesInput is an input type that accepts AllocationSpecificSKUAllocationReservedInstancePropertiesArgs and AllocationSpecificSKUAllocationReservedInstancePropertiesOutput values.
// You can construct a concrete instance of `AllocationSpecificSKUAllocationReservedInstancePropertiesInput` via:
//
//          AllocationSpecificSKUAllocationReservedInstancePropertiesArgs{...}
type AllocationSpecificSKUAllocationReservedInstancePropertiesInput interface {
	pulumi.Input

	ToAllocationSpecificSKUAllocationReservedInstancePropertiesOutput() AllocationSpecificSKUAllocationReservedInstancePropertiesOutput
	ToAllocationSpecificSKUAllocationReservedInstancePropertiesOutputWithContext(context.Context) AllocationSpecificSKUAllocationReservedInstancePropertiesOutput
}

// Properties of the SKU instances being reserved. Next ID: 9
type AllocationSpecificSKUAllocationReservedInstancePropertiesArgs struct {
	// Specifies accelerator type and count.
	GuestAccelerators AcceleratorConfigArrayInput `pulumi:"guestAccelerators"`
	// Specifies amount of local ssd to reserve with each instance. The type of disk is local-ssd.
	LocalSsds AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayInput `pulumi:"localSsds"`
	// An opaque location hint used to place the allocation close to other resources. This field is for use by internal tools that use the public API.
	LocationHint pulumi.StringPtrInput `pulumi:"locationHint"`
	// Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// Minimum cpu platform the reservation.
	MinCpuPlatform pulumi.StringPtrInput `pulumi:"minCpuPlatform"`
}

func (AllocationSpecificSKUAllocationReservedInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationSpecificSKUAllocationReservedInstanceProperties)(nil)).Elem()
}

func (i AllocationSpecificSKUAllocationReservedInstancePropertiesArgs) ToAllocationSpecificSKUAllocationReservedInstancePropertiesOutput() AllocationSpecificSKUAllocationReservedInstancePropertiesOutput {
	return i.ToAllocationSpecificSKUAllocationReservedInstancePropertiesOutputWithContext(context.Background())
}

func (i AllocationSpecificSKUAllocationReservedInstancePropertiesArgs) ToAllocationSpecificSKUAllocationReservedInstancePropertiesOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationReservedInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationSpecificSKUAllocationReservedInstancePropertiesOutput)
}

func (i AllocationSpecificSKUAllocationReservedInstancePropertiesArgs) ToAllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput() AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput {
	return i.ToAllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i AllocationSpecificSKUAllocationReservedInstancePropertiesArgs) ToAllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationSpecificSKUAllocationReservedInstancePropertiesOutput).ToAllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutputWithContext(ctx)
}

// AllocationSpecificSKUAllocationReservedInstancePropertiesPtrInput is an input type that accepts AllocationSpecificSKUAllocationReservedInstancePropertiesArgs, AllocationSpecificSKUAllocationReservedInstancePropertiesPtr and AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `AllocationSpecificSKUAllocationReservedInstancePropertiesPtrInput` via:
//
//          AllocationSpecificSKUAllocationReservedInstancePropertiesArgs{...}
//
//  or:
//
//          nil
type AllocationSpecificSKUAllocationReservedInstancePropertiesPtrInput interface {
	pulumi.Input

	ToAllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput() AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput
	ToAllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutputWithContext(context.Context) AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput
}

type allocationSpecificSKUAllocationReservedInstancePropertiesPtrType AllocationSpecificSKUAllocationReservedInstancePropertiesArgs

func AllocationSpecificSKUAllocationReservedInstancePropertiesPtr(v *AllocationSpecificSKUAllocationReservedInstancePropertiesArgs) AllocationSpecificSKUAllocationReservedInstancePropertiesPtrInput {
	return (*allocationSpecificSKUAllocationReservedInstancePropertiesPtrType)(v)
}

func (*allocationSpecificSKUAllocationReservedInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationSpecificSKUAllocationReservedInstanceProperties)(nil)).Elem()
}

func (i *allocationSpecificSKUAllocationReservedInstancePropertiesPtrType) ToAllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput() AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput {
	return i.ToAllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *allocationSpecificSKUAllocationReservedInstancePropertiesPtrType) ToAllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput)
}

// Properties of the SKU instances being reserved. Next ID: 9
type AllocationSpecificSKUAllocationReservedInstancePropertiesOutput struct{ *pulumi.OutputState }

func (AllocationSpecificSKUAllocationReservedInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationSpecificSKUAllocationReservedInstanceProperties)(nil)).Elem()
}

func (o AllocationSpecificSKUAllocationReservedInstancePropertiesOutput) ToAllocationSpecificSKUAllocationReservedInstancePropertiesOutput() AllocationSpecificSKUAllocationReservedInstancePropertiesOutput {
	return o
}

func (o AllocationSpecificSKUAllocationReservedInstancePropertiesOutput) ToAllocationSpecificSKUAllocationReservedInstancePropertiesOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationReservedInstancePropertiesOutput {
	return o
}

func (o AllocationSpecificSKUAllocationReservedInstancePropertiesOutput) ToAllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput() AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput {
	return o.ToAllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o AllocationSpecificSKUAllocationReservedInstancePropertiesOutput) ToAllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput {
	return o.ApplyT(func(v AllocationSpecificSKUAllocationReservedInstanceProperties) *AllocationSpecificSKUAllocationReservedInstanceProperties {
		return &v
	}).(AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput)
}

// Specifies accelerator type and count.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesOutput) GuestAccelerators() AcceleratorConfigArrayOutput {
	return o.ApplyT(func(v AllocationSpecificSKUAllocationReservedInstanceProperties) []AcceleratorConfig {
		return v.GuestAccelerators
	}).(AcceleratorConfigArrayOutput)
}

// Specifies amount of local ssd to reserve with each instance. The type of disk is local-ssd.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesOutput) LocalSsds() AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput {
	return o.ApplyT(func(v AllocationSpecificSKUAllocationReservedInstanceProperties) []AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk {
		return v.LocalSsds
	}).(AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput)
}

// An opaque location hint used to place the allocation close to other resources. This field is for use by internal tools that use the public API.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesOutput) LocationHint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllocationSpecificSKUAllocationReservedInstanceProperties) *string { return v.LocationHint }).(pulumi.StringPtrOutput)
}

// Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllocationSpecificSKUAllocationReservedInstanceProperties) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// Minimum cpu platform the reservation.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllocationSpecificSKUAllocationReservedInstanceProperties) *string { return v.MinCpuPlatform }).(pulumi.StringPtrOutput)
}

type AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationSpecificSKUAllocationReservedInstanceProperties)(nil)).Elem()
}

func (o AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput) ToAllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput() AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput {
	return o
}

func (o AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput) ToAllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput {
	return o
}

func (o AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput) Elem() AllocationSpecificSKUAllocationReservedInstancePropertiesOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUAllocationReservedInstanceProperties) AllocationSpecificSKUAllocationReservedInstanceProperties {
		return *v
	}).(AllocationSpecificSKUAllocationReservedInstancePropertiesOutput)
}

// Specifies accelerator type and count.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput) GuestAccelerators() AcceleratorConfigArrayOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUAllocationReservedInstanceProperties) []AcceleratorConfig {
		if v == nil {
			return nil
		}
		return v.GuestAccelerators
	}).(AcceleratorConfigArrayOutput)
}

// Specifies amount of local ssd to reserve with each instance. The type of disk is local-ssd.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput) LocalSsds() AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUAllocationReservedInstanceProperties) []AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk {
		if v == nil {
			return nil
		}
		return v.LocalSsds
	}).(AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput)
}

// An opaque location hint used to place the allocation close to other resources. This field is for use by internal tools that use the public API.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput) LocationHint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUAllocationReservedInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.LocationHint
	}).(pulumi.StringPtrOutput)
}

// Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUAllocationReservedInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Minimum cpu platform the reservation.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUAllocationReservedInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.MinCpuPlatform
	}).(pulumi.StringPtrOutput)
}

// Properties of the SKU instances being reserved. Next ID: 9
type AllocationSpecificSKUAllocationReservedInstancePropertiesResponse struct {
	// Specifies accelerator type and count.
	GuestAccelerators []AcceleratorConfigResponse `pulumi:"guestAccelerators"`
	// Specifies amount of local ssd to reserve with each instance. The type of disk is local-ssd.
	LocalSsds []AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponse `pulumi:"localSsds"`
	// An opaque location hint used to place the allocation close to other resources. This field is for use by internal tools that use the public API.
	LocationHint string `pulumi:"locationHint"`
	// Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern.
	MachineType string `pulumi:"machineType"`
	// Minimum cpu platform the reservation.
	MinCpuPlatform string `pulumi:"minCpuPlatform"`
}

// AllocationSpecificSKUAllocationReservedInstancePropertiesResponseInput is an input type that accepts AllocationSpecificSKUAllocationReservedInstancePropertiesResponseArgs and AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput values.
// You can construct a concrete instance of `AllocationSpecificSKUAllocationReservedInstancePropertiesResponseInput` via:
//
//          AllocationSpecificSKUAllocationReservedInstancePropertiesResponseArgs{...}
type AllocationSpecificSKUAllocationReservedInstancePropertiesResponseInput interface {
	pulumi.Input

	ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput() AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput
	ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutputWithContext(context.Context) AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput
}

// Properties of the SKU instances being reserved. Next ID: 9
type AllocationSpecificSKUAllocationReservedInstancePropertiesResponseArgs struct {
	// Specifies accelerator type and count.
	GuestAccelerators AcceleratorConfigResponseArrayInput `pulumi:"guestAccelerators"`
	// Specifies amount of local ssd to reserve with each instance. The type of disk is local-ssd.
	LocalSsds AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayInput `pulumi:"localSsds"`
	// An opaque location hint used to place the allocation close to other resources. This field is for use by internal tools that use the public API.
	LocationHint pulumi.StringInput `pulumi:"locationHint"`
	// Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern.
	MachineType pulumi.StringInput `pulumi:"machineType"`
	// Minimum cpu platform the reservation.
	MinCpuPlatform pulumi.StringInput `pulumi:"minCpuPlatform"`
}

func (AllocationSpecificSKUAllocationReservedInstancePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationSpecificSKUAllocationReservedInstancePropertiesResponse)(nil)).Elem()
}

func (i AllocationSpecificSKUAllocationReservedInstancePropertiesResponseArgs) ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput() AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput {
	return i.ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutputWithContext(context.Background())
}

func (i AllocationSpecificSKUAllocationReservedInstancePropertiesResponseArgs) ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput)
}

func (i AllocationSpecificSKUAllocationReservedInstancePropertiesResponseArgs) ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput() AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput {
	return i.ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i AllocationSpecificSKUAllocationReservedInstancePropertiesResponseArgs) ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput).ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutputWithContext(ctx)
}

// AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrInput is an input type that accepts AllocationSpecificSKUAllocationReservedInstancePropertiesResponseArgs, AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtr and AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrInput` via:
//
//          AllocationSpecificSKUAllocationReservedInstancePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrInput interface {
	pulumi.Input

	ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput() AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput
	ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutputWithContext(context.Context) AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput
}

type allocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrType AllocationSpecificSKUAllocationReservedInstancePropertiesResponseArgs

func AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtr(v *AllocationSpecificSKUAllocationReservedInstancePropertiesResponseArgs) AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrInput {
	return (*allocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrType)(v)
}

func (*allocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationSpecificSKUAllocationReservedInstancePropertiesResponse)(nil)).Elem()
}

func (i *allocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrType) ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput() AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput {
	return i.ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *allocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrType) ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput)
}

// Properties of the SKU instances being reserved. Next ID: 9
type AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationSpecificSKUAllocationReservedInstancePropertiesResponse)(nil)).Elem()
}

func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput) ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput() AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput {
	return o
}

func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput) ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput {
	return o
}

func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput) ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput() AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput {
	return o.ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput) ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput {
	return o.ApplyT(func(v AllocationSpecificSKUAllocationReservedInstancePropertiesResponse) *AllocationSpecificSKUAllocationReservedInstancePropertiesResponse {
		return &v
	}).(AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput)
}

// Specifies accelerator type and count.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput) GuestAccelerators() AcceleratorConfigResponseArrayOutput {
	return o.ApplyT(func(v AllocationSpecificSKUAllocationReservedInstancePropertiesResponse) []AcceleratorConfigResponse {
		return v.GuestAccelerators
	}).(AcceleratorConfigResponseArrayOutput)
}

// Specifies amount of local ssd to reserve with each instance. The type of disk is local-ssd.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput) LocalSsds() AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput {
	return o.ApplyT(func(v AllocationSpecificSKUAllocationReservedInstancePropertiesResponse) []AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponse {
		return v.LocalSsds
	}).(AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput)
}

// An opaque location hint used to place the allocation close to other resources. This field is for use by internal tools that use the public API.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput) LocationHint() pulumi.StringOutput {
	return o.ApplyT(func(v AllocationSpecificSKUAllocationReservedInstancePropertiesResponse) string {
		return v.LocationHint
	}).(pulumi.StringOutput)
}

// Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v AllocationSpecificSKUAllocationReservedInstancePropertiesResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// Minimum cpu platform the reservation.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput) MinCpuPlatform() pulumi.StringOutput {
	return o.ApplyT(func(v AllocationSpecificSKUAllocationReservedInstancePropertiesResponse) string {
		return v.MinCpuPlatform
	}).(pulumi.StringOutput)
}

type AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationSpecificSKUAllocationReservedInstancePropertiesResponse)(nil)).Elem()
}

func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput) ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput() AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput {
	return o
}

func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput) ToAllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput {
	return o
}

func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput) Elem() AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUAllocationReservedInstancePropertiesResponse) AllocationSpecificSKUAllocationReservedInstancePropertiesResponse {
		return *v
	}).(AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput)
}

// Specifies accelerator type and count.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput) GuestAccelerators() AcceleratorConfigResponseArrayOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUAllocationReservedInstancePropertiesResponse) []AcceleratorConfigResponse {
		if v == nil {
			return nil
		}
		return v.GuestAccelerators
	}).(AcceleratorConfigResponseArrayOutput)
}

// Specifies amount of local ssd to reserve with each instance. The type of disk is local-ssd.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput) LocalSsds() AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUAllocationReservedInstancePropertiesResponse) []AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponse {
		if v == nil {
			return nil
		}
		return v.LocalSsds
	}).(AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput)
}

// An opaque location hint used to place the allocation close to other resources. This field is for use by internal tools that use the public API.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput) LocationHint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUAllocationReservedInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LocationHint
	}).(pulumi.StringPtrOutput)
}

// Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUAllocationReservedInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Minimum cpu platform the reservation.
func (o AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUAllocationReservedInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MinCpuPlatform
	}).(pulumi.StringPtrOutput)
}

// This reservation type allows to pre allocate specific instance configuration.
type AllocationSpecificSKUReservation struct {
	// Specifies the number of resources that are allocated.
	Count *string `pulumi:"count"`
	// The instance properties for the reservation.
	InstanceProperties *AllocationSpecificSKUAllocationReservedInstanceProperties `pulumi:"instanceProperties"`
}

// AllocationSpecificSKUReservationInput is an input type that accepts AllocationSpecificSKUReservationArgs and AllocationSpecificSKUReservationOutput values.
// You can construct a concrete instance of `AllocationSpecificSKUReservationInput` via:
//
//          AllocationSpecificSKUReservationArgs{...}
type AllocationSpecificSKUReservationInput interface {
	pulumi.Input

	ToAllocationSpecificSKUReservationOutput() AllocationSpecificSKUReservationOutput
	ToAllocationSpecificSKUReservationOutputWithContext(context.Context) AllocationSpecificSKUReservationOutput
}

// This reservation type allows to pre allocate specific instance configuration.
type AllocationSpecificSKUReservationArgs struct {
	// Specifies the number of resources that are allocated.
	Count pulumi.StringPtrInput `pulumi:"count"`
	// The instance properties for the reservation.
	InstanceProperties AllocationSpecificSKUAllocationReservedInstancePropertiesPtrInput `pulumi:"instanceProperties"`
}

func (AllocationSpecificSKUReservationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationSpecificSKUReservation)(nil)).Elem()
}

func (i AllocationSpecificSKUReservationArgs) ToAllocationSpecificSKUReservationOutput() AllocationSpecificSKUReservationOutput {
	return i.ToAllocationSpecificSKUReservationOutputWithContext(context.Background())
}

func (i AllocationSpecificSKUReservationArgs) ToAllocationSpecificSKUReservationOutputWithContext(ctx context.Context) AllocationSpecificSKUReservationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationSpecificSKUReservationOutput)
}

func (i AllocationSpecificSKUReservationArgs) ToAllocationSpecificSKUReservationPtrOutput() AllocationSpecificSKUReservationPtrOutput {
	return i.ToAllocationSpecificSKUReservationPtrOutputWithContext(context.Background())
}

func (i AllocationSpecificSKUReservationArgs) ToAllocationSpecificSKUReservationPtrOutputWithContext(ctx context.Context) AllocationSpecificSKUReservationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationSpecificSKUReservationOutput).ToAllocationSpecificSKUReservationPtrOutputWithContext(ctx)
}

// AllocationSpecificSKUReservationPtrInput is an input type that accepts AllocationSpecificSKUReservationArgs, AllocationSpecificSKUReservationPtr and AllocationSpecificSKUReservationPtrOutput values.
// You can construct a concrete instance of `AllocationSpecificSKUReservationPtrInput` via:
//
//          AllocationSpecificSKUReservationArgs{...}
//
//  or:
//
//          nil
type AllocationSpecificSKUReservationPtrInput interface {
	pulumi.Input

	ToAllocationSpecificSKUReservationPtrOutput() AllocationSpecificSKUReservationPtrOutput
	ToAllocationSpecificSKUReservationPtrOutputWithContext(context.Context) AllocationSpecificSKUReservationPtrOutput
}

type allocationSpecificSKUReservationPtrType AllocationSpecificSKUReservationArgs

func AllocationSpecificSKUReservationPtr(v *AllocationSpecificSKUReservationArgs) AllocationSpecificSKUReservationPtrInput {
	return (*allocationSpecificSKUReservationPtrType)(v)
}

func (*allocationSpecificSKUReservationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationSpecificSKUReservation)(nil)).Elem()
}

func (i *allocationSpecificSKUReservationPtrType) ToAllocationSpecificSKUReservationPtrOutput() AllocationSpecificSKUReservationPtrOutput {
	return i.ToAllocationSpecificSKUReservationPtrOutputWithContext(context.Background())
}

func (i *allocationSpecificSKUReservationPtrType) ToAllocationSpecificSKUReservationPtrOutputWithContext(ctx context.Context) AllocationSpecificSKUReservationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationSpecificSKUReservationPtrOutput)
}

// This reservation type allows to pre allocate specific instance configuration.
type AllocationSpecificSKUReservationOutput struct{ *pulumi.OutputState }

func (AllocationSpecificSKUReservationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationSpecificSKUReservation)(nil)).Elem()
}

func (o AllocationSpecificSKUReservationOutput) ToAllocationSpecificSKUReservationOutput() AllocationSpecificSKUReservationOutput {
	return o
}

func (o AllocationSpecificSKUReservationOutput) ToAllocationSpecificSKUReservationOutputWithContext(ctx context.Context) AllocationSpecificSKUReservationOutput {
	return o
}

func (o AllocationSpecificSKUReservationOutput) ToAllocationSpecificSKUReservationPtrOutput() AllocationSpecificSKUReservationPtrOutput {
	return o.ToAllocationSpecificSKUReservationPtrOutputWithContext(context.Background())
}

func (o AllocationSpecificSKUReservationOutput) ToAllocationSpecificSKUReservationPtrOutputWithContext(ctx context.Context) AllocationSpecificSKUReservationPtrOutput {
	return o.ApplyT(func(v AllocationSpecificSKUReservation) *AllocationSpecificSKUReservation {
		return &v
	}).(AllocationSpecificSKUReservationPtrOutput)
}

// Specifies the number of resources that are allocated.
func (o AllocationSpecificSKUReservationOutput) Count() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllocationSpecificSKUReservation) *string { return v.Count }).(pulumi.StringPtrOutput)
}

// The instance properties for the reservation.
func (o AllocationSpecificSKUReservationOutput) InstanceProperties() AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput {
	return o.ApplyT(func(v AllocationSpecificSKUReservation) *AllocationSpecificSKUAllocationReservedInstanceProperties {
		return v.InstanceProperties
	}).(AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput)
}

type AllocationSpecificSKUReservationPtrOutput struct{ *pulumi.OutputState }

func (AllocationSpecificSKUReservationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationSpecificSKUReservation)(nil)).Elem()
}

func (o AllocationSpecificSKUReservationPtrOutput) ToAllocationSpecificSKUReservationPtrOutput() AllocationSpecificSKUReservationPtrOutput {
	return o
}

func (o AllocationSpecificSKUReservationPtrOutput) ToAllocationSpecificSKUReservationPtrOutputWithContext(ctx context.Context) AllocationSpecificSKUReservationPtrOutput {
	return o
}

func (o AllocationSpecificSKUReservationPtrOutput) Elem() AllocationSpecificSKUReservationOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUReservation) AllocationSpecificSKUReservation { return *v }).(AllocationSpecificSKUReservationOutput)
}

// Specifies the number of resources that are allocated.
func (o AllocationSpecificSKUReservationPtrOutput) Count() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUReservation) *string {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.StringPtrOutput)
}

// The instance properties for the reservation.
func (o AllocationSpecificSKUReservationPtrOutput) InstanceProperties() AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUReservation) *AllocationSpecificSKUAllocationReservedInstanceProperties {
		if v == nil {
			return nil
		}
		return v.InstanceProperties
	}).(AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput)
}

// This reservation type allows to pre allocate specific instance configuration.
type AllocationSpecificSKUReservationResponse struct {
	// Specifies the number of resources that are allocated.
	Count string `pulumi:"count"`
	// Indicates how many instances are in use.
	InUseCount string `pulumi:"inUseCount"`
	// The instance properties for the reservation.
	InstanceProperties AllocationSpecificSKUAllocationReservedInstancePropertiesResponse `pulumi:"instanceProperties"`
}

// AllocationSpecificSKUReservationResponseInput is an input type that accepts AllocationSpecificSKUReservationResponseArgs and AllocationSpecificSKUReservationResponseOutput values.
// You can construct a concrete instance of `AllocationSpecificSKUReservationResponseInput` via:
//
//          AllocationSpecificSKUReservationResponseArgs{...}
type AllocationSpecificSKUReservationResponseInput interface {
	pulumi.Input

	ToAllocationSpecificSKUReservationResponseOutput() AllocationSpecificSKUReservationResponseOutput
	ToAllocationSpecificSKUReservationResponseOutputWithContext(context.Context) AllocationSpecificSKUReservationResponseOutput
}

// This reservation type allows to pre allocate specific instance configuration.
type AllocationSpecificSKUReservationResponseArgs struct {
	// Specifies the number of resources that are allocated.
	Count pulumi.StringInput `pulumi:"count"`
	// Indicates how many instances are in use.
	InUseCount pulumi.StringInput `pulumi:"inUseCount"`
	// The instance properties for the reservation.
	InstanceProperties AllocationSpecificSKUAllocationReservedInstancePropertiesResponseInput `pulumi:"instanceProperties"`
}

func (AllocationSpecificSKUReservationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationSpecificSKUReservationResponse)(nil)).Elem()
}

func (i AllocationSpecificSKUReservationResponseArgs) ToAllocationSpecificSKUReservationResponseOutput() AllocationSpecificSKUReservationResponseOutput {
	return i.ToAllocationSpecificSKUReservationResponseOutputWithContext(context.Background())
}

func (i AllocationSpecificSKUReservationResponseArgs) ToAllocationSpecificSKUReservationResponseOutputWithContext(ctx context.Context) AllocationSpecificSKUReservationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationSpecificSKUReservationResponseOutput)
}

func (i AllocationSpecificSKUReservationResponseArgs) ToAllocationSpecificSKUReservationResponsePtrOutput() AllocationSpecificSKUReservationResponsePtrOutput {
	return i.ToAllocationSpecificSKUReservationResponsePtrOutputWithContext(context.Background())
}

func (i AllocationSpecificSKUReservationResponseArgs) ToAllocationSpecificSKUReservationResponsePtrOutputWithContext(ctx context.Context) AllocationSpecificSKUReservationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationSpecificSKUReservationResponseOutput).ToAllocationSpecificSKUReservationResponsePtrOutputWithContext(ctx)
}

// AllocationSpecificSKUReservationResponsePtrInput is an input type that accepts AllocationSpecificSKUReservationResponseArgs, AllocationSpecificSKUReservationResponsePtr and AllocationSpecificSKUReservationResponsePtrOutput values.
// You can construct a concrete instance of `AllocationSpecificSKUReservationResponsePtrInput` via:
//
//          AllocationSpecificSKUReservationResponseArgs{...}
//
//  or:
//
//          nil
type AllocationSpecificSKUReservationResponsePtrInput interface {
	pulumi.Input

	ToAllocationSpecificSKUReservationResponsePtrOutput() AllocationSpecificSKUReservationResponsePtrOutput
	ToAllocationSpecificSKUReservationResponsePtrOutputWithContext(context.Context) AllocationSpecificSKUReservationResponsePtrOutput
}

type allocationSpecificSKUReservationResponsePtrType AllocationSpecificSKUReservationResponseArgs

func AllocationSpecificSKUReservationResponsePtr(v *AllocationSpecificSKUReservationResponseArgs) AllocationSpecificSKUReservationResponsePtrInput {
	return (*allocationSpecificSKUReservationResponsePtrType)(v)
}

func (*allocationSpecificSKUReservationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationSpecificSKUReservationResponse)(nil)).Elem()
}

func (i *allocationSpecificSKUReservationResponsePtrType) ToAllocationSpecificSKUReservationResponsePtrOutput() AllocationSpecificSKUReservationResponsePtrOutput {
	return i.ToAllocationSpecificSKUReservationResponsePtrOutputWithContext(context.Background())
}

func (i *allocationSpecificSKUReservationResponsePtrType) ToAllocationSpecificSKUReservationResponsePtrOutputWithContext(ctx context.Context) AllocationSpecificSKUReservationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationSpecificSKUReservationResponsePtrOutput)
}

// This reservation type allows to pre allocate specific instance configuration.
type AllocationSpecificSKUReservationResponseOutput struct{ *pulumi.OutputState }

func (AllocationSpecificSKUReservationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationSpecificSKUReservationResponse)(nil)).Elem()
}

func (o AllocationSpecificSKUReservationResponseOutput) ToAllocationSpecificSKUReservationResponseOutput() AllocationSpecificSKUReservationResponseOutput {
	return o
}

func (o AllocationSpecificSKUReservationResponseOutput) ToAllocationSpecificSKUReservationResponseOutputWithContext(ctx context.Context) AllocationSpecificSKUReservationResponseOutput {
	return o
}

func (o AllocationSpecificSKUReservationResponseOutput) ToAllocationSpecificSKUReservationResponsePtrOutput() AllocationSpecificSKUReservationResponsePtrOutput {
	return o.ToAllocationSpecificSKUReservationResponsePtrOutputWithContext(context.Background())
}

func (o AllocationSpecificSKUReservationResponseOutput) ToAllocationSpecificSKUReservationResponsePtrOutputWithContext(ctx context.Context) AllocationSpecificSKUReservationResponsePtrOutput {
	return o.ApplyT(func(v AllocationSpecificSKUReservationResponse) *AllocationSpecificSKUReservationResponse {
		return &v
	}).(AllocationSpecificSKUReservationResponsePtrOutput)
}

// Specifies the number of resources that are allocated.
func (o AllocationSpecificSKUReservationResponseOutput) Count() pulumi.StringOutput {
	return o.ApplyT(func(v AllocationSpecificSKUReservationResponse) string { return v.Count }).(pulumi.StringOutput)
}

// Indicates how many instances are in use.
func (o AllocationSpecificSKUReservationResponseOutput) InUseCount() pulumi.StringOutput {
	return o.ApplyT(func(v AllocationSpecificSKUReservationResponse) string { return v.InUseCount }).(pulumi.StringOutput)
}

// The instance properties for the reservation.
func (o AllocationSpecificSKUReservationResponseOutput) InstanceProperties() AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput {
	return o.ApplyT(func(v AllocationSpecificSKUReservationResponse) AllocationSpecificSKUAllocationReservedInstancePropertiesResponse {
		return v.InstanceProperties
	}).(AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput)
}

type AllocationSpecificSKUReservationResponsePtrOutput struct{ *pulumi.OutputState }

func (AllocationSpecificSKUReservationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationSpecificSKUReservationResponse)(nil)).Elem()
}

func (o AllocationSpecificSKUReservationResponsePtrOutput) ToAllocationSpecificSKUReservationResponsePtrOutput() AllocationSpecificSKUReservationResponsePtrOutput {
	return o
}

func (o AllocationSpecificSKUReservationResponsePtrOutput) ToAllocationSpecificSKUReservationResponsePtrOutputWithContext(ctx context.Context) AllocationSpecificSKUReservationResponsePtrOutput {
	return o
}

func (o AllocationSpecificSKUReservationResponsePtrOutput) Elem() AllocationSpecificSKUReservationResponseOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUReservationResponse) AllocationSpecificSKUReservationResponse { return *v }).(AllocationSpecificSKUReservationResponseOutput)
}

// Specifies the number of resources that are allocated.
func (o AllocationSpecificSKUReservationResponsePtrOutput) Count() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUReservationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.StringPtrOutput)
}

// Indicates how many instances are in use.
func (o AllocationSpecificSKUReservationResponsePtrOutput) InUseCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUReservationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InUseCount
	}).(pulumi.StringPtrOutput)
}

// The instance properties for the reservation.
func (o AllocationSpecificSKUReservationResponsePtrOutput) InstanceProperties() AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *AllocationSpecificSKUReservationResponse) *AllocationSpecificSKUAllocationReservedInstancePropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.InstanceProperties
	}).(AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput)
}

// An instance-attached disk resource.
type AttachedDisk struct {
	// Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
	AutoDelete *bool `pulumi:"autoDelete"`
	// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
	Boot *bool `pulumi:"boot"`
	// Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
	DeviceName *string `pulumi:"deviceName"`
	// Encrypts or decrypts a disk using a customer-supplied encryption key. If you are creating a new disk, this field encrypts the new disk using an encryption key that you provide. If you are attaching an existing disk that is already encrypted, this field decrypts the disk using the customer-supplied encryption key. If you encrypt a disk using a customer-supplied key, you must provide the same key again when you attempt to use this resource at a later time. For example, you must provide the key when you create a snapshot or an image from the disk or when you attach the disk to a virtual machine instance. If you do not provide an encryption key, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later. Instance templates do not store customer-supplied encryption keys, so you cannot use your own keys to encrypt disks in a managed instance group.
	DiskEncryptionKey *CustomerEncryptionKey `pulumi:"diskEncryptionKey"`
	// The size of the disk in GB.
	DiskSizeGb *string `pulumi:"diskSizeGb"`
	// A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
	GuestOsFeatures []GuestOsFeature `pulumi:"guestOsFeatures"`
	// [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
	InitializeParams *AttachedDiskInitializeParams `pulumi:"initializeParams"`
	// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
	Interface *string `pulumi:"interface"`
	// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
	Mode *string `pulumi:"mode"`
	// Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks. Note that for InstanceTemplate, specify the disk name, not the URL for the disk.
	Source *string `pulumi:"source"`
	// Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
	Type *string `pulumi:"type"`
}

// AttachedDiskInput is an input type that accepts AttachedDiskArgs and AttachedDiskOutput values.
// You can construct a concrete instance of `AttachedDiskInput` via:
//
//          AttachedDiskArgs{...}
type AttachedDiskInput interface {
	pulumi.Input

	ToAttachedDiskOutput() AttachedDiskOutput
	ToAttachedDiskOutputWithContext(context.Context) AttachedDiskOutput
}

// An instance-attached disk resource.
type AttachedDiskArgs struct {
	// Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
	AutoDelete pulumi.BoolPtrInput `pulumi:"autoDelete"`
	// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
	Boot pulumi.BoolPtrInput `pulumi:"boot"`
	// Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
	// Encrypts or decrypts a disk using a customer-supplied encryption key. If you are creating a new disk, this field encrypts the new disk using an encryption key that you provide. If you are attaching an existing disk that is already encrypted, this field decrypts the disk using the customer-supplied encryption key. If you encrypt a disk using a customer-supplied key, you must provide the same key again when you attempt to use this resource at a later time. For example, you must provide the key when you create a snapshot or an image from the disk or when you attach the disk to a virtual machine instance. If you do not provide an encryption key, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later. Instance templates do not store customer-supplied encryption keys, so you cannot use your own keys to encrypt disks in a managed instance group.
	DiskEncryptionKey CustomerEncryptionKeyPtrInput `pulumi:"diskEncryptionKey"`
	// The size of the disk in GB.
	DiskSizeGb pulumi.StringPtrInput `pulumi:"diskSizeGb"`
	// A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
	GuestOsFeatures GuestOsFeatureArrayInput `pulumi:"guestOsFeatures"`
	// [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
	InitializeParams AttachedDiskInitializeParamsPtrInput `pulumi:"initializeParams"`
	// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
	Interface *AttachedDiskInterface `pulumi:"interface"`
	// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
	Mode *AttachedDiskMode `pulumi:"mode"`
	// Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks. Note that for InstanceTemplate, specify the disk name, not the URL for the disk.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
	Type *AttachedDiskType `pulumi:"type"`
}

func (AttachedDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDisk)(nil)).Elem()
}

func (i AttachedDiskArgs) ToAttachedDiskOutput() AttachedDiskOutput {
	return i.ToAttachedDiskOutputWithContext(context.Background())
}

func (i AttachedDiskArgs) ToAttachedDiskOutputWithContext(ctx context.Context) AttachedDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedDiskOutput)
}

// AttachedDiskArrayInput is an input type that accepts AttachedDiskArray and AttachedDiskArrayOutput values.
// You can construct a concrete instance of `AttachedDiskArrayInput` via:
//
//          AttachedDiskArray{ AttachedDiskArgs{...} }
type AttachedDiskArrayInput interface {
	pulumi.Input

	ToAttachedDiskArrayOutput() AttachedDiskArrayOutput
	ToAttachedDiskArrayOutputWithContext(context.Context) AttachedDiskArrayOutput
}

type AttachedDiskArray []AttachedDiskInput

func (AttachedDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttachedDisk)(nil)).Elem()
}

func (i AttachedDiskArray) ToAttachedDiskArrayOutput() AttachedDiskArrayOutput {
	return i.ToAttachedDiskArrayOutputWithContext(context.Background())
}

func (i AttachedDiskArray) ToAttachedDiskArrayOutputWithContext(ctx context.Context) AttachedDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedDiskArrayOutput)
}

// An instance-attached disk resource.
type AttachedDiskOutput struct{ *pulumi.OutputState }

func (AttachedDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDisk)(nil)).Elem()
}

func (o AttachedDiskOutput) ToAttachedDiskOutput() AttachedDiskOutput {
	return o
}

func (o AttachedDiskOutput) ToAttachedDiskOutputWithContext(ctx context.Context) AttachedDiskOutput {
	return o
}

// Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
func (o AttachedDiskOutput) AutoDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AttachedDisk) *bool { return v.AutoDelete }).(pulumi.BoolPtrOutput)
}

// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
func (o AttachedDiskOutput) Boot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AttachedDisk) *bool { return v.Boot }).(pulumi.BoolPtrOutput)
}

// Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
func (o AttachedDiskOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedDisk) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

// Encrypts or decrypts a disk using a customer-supplied encryption key. If you are creating a new disk, this field encrypts the new disk using an encryption key that you provide. If you are attaching an existing disk that is already encrypted, this field decrypts the disk using the customer-supplied encryption key. If you encrypt a disk using a customer-supplied key, you must provide the same key again when you attempt to use this resource at a later time. For example, you must provide the key when you create a snapshot or an image from the disk or when you attach the disk to a virtual machine instance. If you do not provide an encryption key, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later. Instance templates do not store customer-supplied encryption keys, so you cannot use your own keys to encrypt disks in a managed instance group.
func (o AttachedDiskOutput) DiskEncryptionKey() CustomerEncryptionKeyPtrOutput {
	return o.ApplyT(func(v AttachedDisk) *CustomerEncryptionKey { return v.DiskEncryptionKey }).(CustomerEncryptionKeyPtrOutput)
}

// The size of the disk in GB.
func (o AttachedDiskOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedDisk) *string { return v.DiskSizeGb }).(pulumi.StringPtrOutput)
}

// A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
func (o AttachedDiskOutput) GuestOsFeatures() GuestOsFeatureArrayOutput {
	return o.ApplyT(func(v AttachedDisk) []GuestOsFeature { return v.GuestOsFeatures }).(GuestOsFeatureArrayOutput)
}

// [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
func (o AttachedDiskOutput) InitializeParams() AttachedDiskInitializeParamsPtrOutput {
	return o.ApplyT(func(v AttachedDisk) *AttachedDiskInitializeParams { return v.InitializeParams }).(AttachedDiskInitializeParamsPtrOutput)
}

// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
func (o AttachedDiskOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedDisk) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
func (o AttachedDiskOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedDisk) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks. Note that for InstanceTemplate, specify the disk name, not the URL for the disk.
func (o AttachedDiskOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedDisk) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
func (o AttachedDiskOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedDisk) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AttachedDiskArrayOutput struct{ *pulumi.OutputState }

func (AttachedDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttachedDisk)(nil)).Elem()
}

func (o AttachedDiskArrayOutput) ToAttachedDiskArrayOutput() AttachedDiskArrayOutput {
	return o
}

func (o AttachedDiskArrayOutput) ToAttachedDiskArrayOutputWithContext(ctx context.Context) AttachedDiskArrayOutput {
	return o
}

func (o AttachedDiskArrayOutput) Index(i pulumi.IntInput) AttachedDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AttachedDisk {
		return vs[0].([]AttachedDisk)[vs[1].(int)]
	}).(AttachedDiskOutput)
}

// [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
type AttachedDiskInitializeParams struct {
	// An optional description. Provide this property when creating the disk.
	Description *string `pulumi:"description"`
	// Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created.
	DiskName *string `pulumi:"diskName"`
	// Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB.
	DiskSizeGb *string `pulumi:"diskSizeGb"`
	// Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/pd-standard For a full list of acceptable values, see Persistent disk types. If you define this field, you can provide either the full or partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/diskType - projects/project/zones/zone/diskTypes/diskType - zones/zone/diskTypes/diskType Note that for InstanceTemplate, this is the name of the disk type, not URL.
	DiskType *string `pulumi:"diskType"`
	// Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
	Labels map[string]string `pulumi:"labels"`
	// Specifies which action to take on instance update with this disk. Default is to use the existing disk.
	OnUpdateAction *string `pulumi:"onUpdateAction"`
	// Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
	ProvisionedIops *string `pulumi:"provisionedIops"`
	// Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name.
	ResourcePolicies []string `pulumi:"resourcePolicies"`
	// The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family If the source image is deleted later, this field will not be set.
	SourceImage *string `pulumi:"sourceImage"`
	// The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. Instance templates do not store customer-supplied encryption keys, so you cannot create disks for instances in a managed instance group if the source images are encrypted with your own keys.
	SourceImageEncryptionKey *CustomerEncryptionKey `pulumi:"sourceImageEncryptionKey"`
	// The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: global/snapshots/my-backup If the source snapshot is deleted later, this field will not be set.
	SourceSnapshot *string `pulumi:"sourceSnapshot"`
	// The customer-supplied encryption key of the source snapshot.
	SourceSnapshotEncryptionKey *CustomerEncryptionKey `pulumi:"sourceSnapshotEncryptionKey"`
}

// AttachedDiskInitializeParamsInput is an input type that accepts AttachedDiskInitializeParamsArgs and AttachedDiskInitializeParamsOutput values.
// You can construct a concrete instance of `AttachedDiskInitializeParamsInput` via:
//
//          AttachedDiskInitializeParamsArgs{...}
type AttachedDiskInitializeParamsInput interface {
	pulumi.Input

	ToAttachedDiskInitializeParamsOutput() AttachedDiskInitializeParamsOutput
	ToAttachedDiskInitializeParamsOutputWithContext(context.Context) AttachedDiskInitializeParamsOutput
}

// [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
type AttachedDiskInitializeParamsArgs struct {
	// An optional description. Provide this property when creating the disk.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created.
	DiskName pulumi.StringPtrInput `pulumi:"diskName"`
	// Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB.
	DiskSizeGb pulumi.StringPtrInput `pulumi:"diskSizeGb"`
	// Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/pd-standard For a full list of acceptable values, see Persistent disk types. If you define this field, you can provide either the full or partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/diskType - projects/project/zones/zone/diskTypes/diskType - zones/zone/diskTypes/diskType Note that for InstanceTemplate, this is the name of the disk type, not URL.
	DiskType pulumi.StringPtrInput `pulumi:"diskType"`
	// Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Specifies which action to take on instance update with this disk. Default is to use the existing disk.
	OnUpdateAction *AttachedDiskInitializeParamsOnUpdateAction `pulumi:"onUpdateAction"`
	// Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
	ProvisionedIops pulumi.StringPtrInput `pulumi:"provisionedIops"`
	// Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name.
	ResourcePolicies pulumi.StringArrayInput `pulumi:"resourcePolicies"`
	// The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family If the source image is deleted later, this field will not be set.
	SourceImage pulumi.StringPtrInput `pulumi:"sourceImage"`
	// The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. Instance templates do not store customer-supplied encryption keys, so you cannot create disks for instances in a managed instance group if the source images are encrypted with your own keys.
	SourceImageEncryptionKey CustomerEncryptionKeyPtrInput `pulumi:"sourceImageEncryptionKey"`
	// The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: global/snapshots/my-backup If the source snapshot is deleted later, this field will not be set.
	SourceSnapshot pulumi.StringPtrInput `pulumi:"sourceSnapshot"`
	// The customer-supplied encryption key of the source snapshot.
	SourceSnapshotEncryptionKey CustomerEncryptionKeyPtrInput `pulumi:"sourceSnapshotEncryptionKey"`
}

func (AttachedDiskInitializeParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDiskInitializeParams)(nil)).Elem()
}

func (i AttachedDiskInitializeParamsArgs) ToAttachedDiskInitializeParamsOutput() AttachedDiskInitializeParamsOutput {
	return i.ToAttachedDiskInitializeParamsOutputWithContext(context.Background())
}

func (i AttachedDiskInitializeParamsArgs) ToAttachedDiskInitializeParamsOutputWithContext(ctx context.Context) AttachedDiskInitializeParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedDiskInitializeParamsOutput)
}

func (i AttachedDiskInitializeParamsArgs) ToAttachedDiskInitializeParamsPtrOutput() AttachedDiskInitializeParamsPtrOutput {
	return i.ToAttachedDiskInitializeParamsPtrOutputWithContext(context.Background())
}

func (i AttachedDiskInitializeParamsArgs) ToAttachedDiskInitializeParamsPtrOutputWithContext(ctx context.Context) AttachedDiskInitializeParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedDiskInitializeParamsOutput).ToAttachedDiskInitializeParamsPtrOutputWithContext(ctx)
}

// AttachedDiskInitializeParamsPtrInput is an input type that accepts AttachedDiskInitializeParamsArgs, AttachedDiskInitializeParamsPtr and AttachedDiskInitializeParamsPtrOutput values.
// You can construct a concrete instance of `AttachedDiskInitializeParamsPtrInput` via:
//
//          AttachedDiskInitializeParamsArgs{...}
//
//  or:
//
//          nil
type AttachedDiskInitializeParamsPtrInput interface {
	pulumi.Input

	ToAttachedDiskInitializeParamsPtrOutput() AttachedDiskInitializeParamsPtrOutput
	ToAttachedDiskInitializeParamsPtrOutputWithContext(context.Context) AttachedDiskInitializeParamsPtrOutput
}

type attachedDiskInitializeParamsPtrType AttachedDiskInitializeParamsArgs

func AttachedDiskInitializeParamsPtr(v *AttachedDiskInitializeParamsArgs) AttachedDiskInitializeParamsPtrInput {
	return (*attachedDiskInitializeParamsPtrType)(v)
}

func (*attachedDiskInitializeParamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachedDiskInitializeParams)(nil)).Elem()
}

func (i *attachedDiskInitializeParamsPtrType) ToAttachedDiskInitializeParamsPtrOutput() AttachedDiskInitializeParamsPtrOutput {
	return i.ToAttachedDiskInitializeParamsPtrOutputWithContext(context.Background())
}

func (i *attachedDiskInitializeParamsPtrType) ToAttachedDiskInitializeParamsPtrOutputWithContext(ctx context.Context) AttachedDiskInitializeParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedDiskInitializeParamsPtrOutput)
}

// [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
type AttachedDiskInitializeParamsOutput struct{ *pulumi.OutputState }

func (AttachedDiskInitializeParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDiskInitializeParams)(nil)).Elem()
}

func (o AttachedDiskInitializeParamsOutput) ToAttachedDiskInitializeParamsOutput() AttachedDiskInitializeParamsOutput {
	return o
}

func (o AttachedDiskInitializeParamsOutput) ToAttachedDiskInitializeParamsOutputWithContext(ctx context.Context) AttachedDiskInitializeParamsOutput {
	return o
}

func (o AttachedDiskInitializeParamsOutput) ToAttachedDiskInitializeParamsPtrOutput() AttachedDiskInitializeParamsPtrOutput {
	return o.ToAttachedDiskInitializeParamsPtrOutputWithContext(context.Background())
}

func (o AttachedDiskInitializeParamsOutput) ToAttachedDiskInitializeParamsPtrOutputWithContext(ctx context.Context) AttachedDiskInitializeParamsPtrOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParams) *AttachedDiskInitializeParams {
		return &v
	}).(AttachedDiskInitializeParamsPtrOutput)
}

// An optional description. Provide this property when creating the disk.
func (o AttachedDiskInitializeParamsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParams) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created.
func (o AttachedDiskInitializeParamsOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParams) *string { return v.DiskName }).(pulumi.StringPtrOutput)
}

// Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB.
func (o AttachedDiskInitializeParamsOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParams) *string { return v.DiskSizeGb }).(pulumi.StringPtrOutput)
}

// Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/pd-standard For a full list of acceptable values, see Persistent disk types. If you define this field, you can provide either the full or partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/diskType - projects/project/zones/zone/diskTypes/diskType - zones/zone/diskTypes/diskType Note that for InstanceTemplate, this is the name of the disk type, not URL.
func (o AttachedDiskInitializeParamsOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParams) *string { return v.DiskType }).(pulumi.StringPtrOutput)
}

// Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
func (o AttachedDiskInitializeParamsOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParams) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies which action to take on instance update with this disk. Default is to use the existing disk.
func (o AttachedDiskInitializeParamsOutput) OnUpdateAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParams) *string { return v.OnUpdateAction }).(pulumi.StringPtrOutput)
}

// Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
func (o AttachedDiskInitializeParamsOutput) ProvisionedIops() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParams) *string { return v.ProvisionedIops }).(pulumi.StringPtrOutput)
}

// Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name.
func (o AttachedDiskInitializeParamsOutput) ResourcePolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParams) []string { return v.ResourcePolicies }).(pulumi.StringArrayOutput)
}

// The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family If the source image is deleted later, this field will not be set.
func (o AttachedDiskInitializeParamsOutput) SourceImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParams) *string { return v.SourceImage }).(pulumi.StringPtrOutput)
}

// The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. Instance templates do not store customer-supplied encryption keys, so you cannot create disks for instances in a managed instance group if the source images are encrypted with your own keys.
func (o AttachedDiskInitializeParamsOutput) SourceImageEncryptionKey() CustomerEncryptionKeyPtrOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParams) *CustomerEncryptionKey { return v.SourceImageEncryptionKey }).(CustomerEncryptionKeyPtrOutput)
}

// The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: global/snapshots/my-backup If the source snapshot is deleted later, this field will not be set.
func (o AttachedDiskInitializeParamsOutput) SourceSnapshot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParams) *string { return v.SourceSnapshot }).(pulumi.StringPtrOutput)
}

// The customer-supplied encryption key of the source snapshot.
func (o AttachedDiskInitializeParamsOutput) SourceSnapshotEncryptionKey() CustomerEncryptionKeyPtrOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParams) *CustomerEncryptionKey { return v.SourceSnapshotEncryptionKey }).(CustomerEncryptionKeyPtrOutput)
}

type AttachedDiskInitializeParamsPtrOutput struct{ *pulumi.OutputState }

func (AttachedDiskInitializeParamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachedDiskInitializeParams)(nil)).Elem()
}

func (o AttachedDiskInitializeParamsPtrOutput) ToAttachedDiskInitializeParamsPtrOutput() AttachedDiskInitializeParamsPtrOutput {
	return o
}

func (o AttachedDiskInitializeParamsPtrOutput) ToAttachedDiskInitializeParamsPtrOutputWithContext(ctx context.Context) AttachedDiskInitializeParamsPtrOutput {
	return o
}

func (o AttachedDiskInitializeParamsPtrOutput) Elem() AttachedDiskInitializeParamsOutput {
	return o.ApplyT(func(v *AttachedDiskInitializeParams) AttachedDiskInitializeParams { return *v }).(AttachedDiskInitializeParamsOutput)
}

// An optional description. Provide this property when creating the disk.
func (o AttachedDiskInitializeParamsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttachedDiskInitializeParams) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created.
func (o AttachedDiskInitializeParamsPtrOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttachedDiskInitializeParams) *string {
		if v == nil {
			return nil
		}
		return v.DiskName
	}).(pulumi.StringPtrOutput)
}

// Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB.
func (o AttachedDiskInitializeParamsPtrOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttachedDiskInitializeParams) *string {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.StringPtrOutput)
}

// Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/pd-standard For a full list of acceptable values, see Persistent disk types. If you define this field, you can provide either the full or partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/diskType - projects/project/zones/zone/diskTypes/diskType - zones/zone/diskTypes/diskType Note that for InstanceTemplate, this is the name of the disk type, not URL.
func (o AttachedDiskInitializeParamsPtrOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttachedDiskInitializeParams) *string {
		if v == nil {
			return nil
		}
		return v.DiskType
	}).(pulumi.StringPtrOutput)
}

// Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
func (o AttachedDiskInitializeParamsPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AttachedDiskInitializeParams) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Specifies which action to take on instance update with this disk. Default is to use the existing disk.
func (o AttachedDiskInitializeParamsPtrOutput) OnUpdateAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttachedDiskInitializeParams) *string {
		if v == nil {
			return nil
		}
		return v.OnUpdateAction
	}).(pulumi.StringPtrOutput)
}

// Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
func (o AttachedDiskInitializeParamsPtrOutput) ProvisionedIops() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttachedDiskInitializeParams) *string {
		if v == nil {
			return nil
		}
		return v.ProvisionedIops
	}).(pulumi.StringPtrOutput)
}

// Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name.
func (o AttachedDiskInitializeParamsPtrOutput) ResourcePolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AttachedDiskInitializeParams) []string {
		if v == nil {
			return nil
		}
		return v.ResourcePolicies
	}).(pulumi.StringArrayOutput)
}

// The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family If the source image is deleted later, this field will not be set.
func (o AttachedDiskInitializeParamsPtrOutput) SourceImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttachedDiskInitializeParams) *string {
		if v == nil {
			return nil
		}
		return v.SourceImage
	}).(pulumi.StringPtrOutput)
}

// The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. Instance templates do not store customer-supplied encryption keys, so you cannot create disks for instances in a managed instance group if the source images are encrypted with your own keys.
func (o AttachedDiskInitializeParamsPtrOutput) SourceImageEncryptionKey() CustomerEncryptionKeyPtrOutput {
	return o.ApplyT(func(v *AttachedDiskInitializeParams) *CustomerEncryptionKey {
		if v == nil {
			return nil
		}
		return v.SourceImageEncryptionKey
	}).(CustomerEncryptionKeyPtrOutput)
}

// The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: global/snapshots/my-backup If the source snapshot is deleted later, this field will not be set.
func (o AttachedDiskInitializeParamsPtrOutput) SourceSnapshot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AttachedDiskInitializeParams) *string {
		if v == nil {
			return nil
		}
		return v.SourceSnapshot
	}).(pulumi.StringPtrOutput)
}

// The customer-supplied encryption key of the source snapshot.
func (o AttachedDiskInitializeParamsPtrOutput) SourceSnapshotEncryptionKey() CustomerEncryptionKeyPtrOutput {
	return o.ApplyT(func(v *AttachedDiskInitializeParams) *CustomerEncryptionKey {
		if v == nil {
			return nil
		}
		return v.SourceSnapshotEncryptionKey
	}).(CustomerEncryptionKeyPtrOutput)
}

// [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
type AttachedDiskInitializeParamsResponse struct {
	// An optional description. Provide this property when creating the disk.
	Description string `pulumi:"description"`
	// Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created.
	DiskName string `pulumi:"diskName"`
	// Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB.
	DiskSizeGb string `pulumi:"diskSizeGb"`
	// Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/pd-standard For a full list of acceptable values, see Persistent disk types. If you define this field, you can provide either the full or partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/diskType - projects/project/zones/zone/diskTypes/diskType - zones/zone/diskTypes/diskType Note that for InstanceTemplate, this is the name of the disk type, not URL.
	DiskType string `pulumi:"diskType"`
	// Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
	Labels map[string]string `pulumi:"labels"`
	// Specifies which action to take on instance update with this disk. Default is to use the existing disk.
	OnUpdateAction string `pulumi:"onUpdateAction"`
	// Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
	ProvisionedIops string `pulumi:"provisionedIops"`
	// Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name.
	ResourcePolicies []string `pulumi:"resourcePolicies"`
	// The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family If the source image is deleted later, this field will not be set.
	SourceImage string `pulumi:"sourceImage"`
	// The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. Instance templates do not store customer-supplied encryption keys, so you cannot create disks for instances in a managed instance group if the source images are encrypted with your own keys.
	SourceImageEncryptionKey CustomerEncryptionKeyResponse `pulumi:"sourceImageEncryptionKey"`
	// The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: global/snapshots/my-backup If the source snapshot is deleted later, this field will not be set.
	SourceSnapshot string `pulumi:"sourceSnapshot"`
	// The customer-supplied encryption key of the source snapshot.
	SourceSnapshotEncryptionKey CustomerEncryptionKeyResponse `pulumi:"sourceSnapshotEncryptionKey"`
}

// AttachedDiskInitializeParamsResponseInput is an input type that accepts AttachedDiskInitializeParamsResponseArgs and AttachedDiskInitializeParamsResponseOutput values.
// You can construct a concrete instance of `AttachedDiskInitializeParamsResponseInput` via:
//
//          AttachedDiskInitializeParamsResponseArgs{...}
type AttachedDiskInitializeParamsResponseInput interface {
	pulumi.Input

	ToAttachedDiskInitializeParamsResponseOutput() AttachedDiskInitializeParamsResponseOutput
	ToAttachedDiskInitializeParamsResponseOutputWithContext(context.Context) AttachedDiskInitializeParamsResponseOutput
}

// [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
type AttachedDiskInitializeParamsResponseArgs struct {
	// An optional description. Provide this property when creating the disk.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created.
	DiskName pulumi.StringInput `pulumi:"diskName"`
	// Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB.
	DiskSizeGb pulumi.StringInput `pulumi:"diskSizeGb"`
	// Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/pd-standard For a full list of acceptable values, see Persistent disk types. If you define this field, you can provide either the full or partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/diskType - projects/project/zones/zone/diskTypes/diskType - zones/zone/diskTypes/diskType Note that for InstanceTemplate, this is the name of the disk type, not URL.
	DiskType pulumi.StringInput `pulumi:"diskType"`
	// Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Specifies which action to take on instance update with this disk. Default is to use the existing disk.
	OnUpdateAction pulumi.StringInput `pulumi:"onUpdateAction"`
	// Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
	ProvisionedIops pulumi.StringInput `pulumi:"provisionedIops"`
	// Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name.
	ResourcePolicies pulumi.StringArrayInput `pulumi:"resourcePolicies"`
	// The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family If the source image is deleted later, this field will not be set.
	SourceImage pulumi.StringInput `pulumi:"sourceImage"`
	// The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. Instance templates do not store customer-supplied encryption keys, so you cannot create disks for instances in a managed instance group if the source images are encrypted with your own keys.
	SourceImageEncryptionKey CustomerEncryptionKeyResponseInput `pulumi:"sourceImageEncryptionKey"`
	// The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: global/snapshots/my-backup If the source snapshot is deleted later, this field will not be set.
	SourceSnapshot pulumi.StringInput `pulumi:"sourceSnapshot"`
	// The customer-supplied encryption key of the source snapshot.
	SourceSnapshotEncryptionKey CustomerEncryptionKeyResponseInput `pulumi:"sourceSnapshotEncryptionKey"`
}

func (AttachedDiskInitializeParamsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDiskInitializeParamsResponse)(nil)).Elem()
}

func (i AttachedDiskInitializeParamsResponseArgs) ToAttachedDiskInitializeParamsResponseOutput() AttachedDiskInitializeParamsResponseOutput {
	return i.ToAttachedDiskInitializeParamsResponseOutputWithContext(context.Background())
}

func (i AttachedDiskInitializeParamsResponseArgs) ToAttachedDiskInitializeParamsResponseOutputWithContext(ctx context.Context) AttachedDiskInitializeParamsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedDiskInitializeParamsResponseOutput)
}

// [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
type AttachedDiskInitializeParamsResponseOutput struct{ *pulumi.OutputState }

func (AttachedDiskInitializeParamsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDiskInitializeParamsResponse)(nil)).Elem()
}

func (o AttachedDiskInitializeParamsResponseOutput) ToAttachedDiskInitializeParamsResponseOutput() AttachedDiskInitializeParamsResponseOutput {
	return o
}

func (o AttachedDiskInitializeParamsResponseOutput) ToAttachedDiskInitializeParamsResponseOutputWithContext(ctx context.Context) AttachedDiskInitializeParamsResponseOutput {
	return o
}

// An optional description. Provide this property when creating the disk.
func (o AttachedDiskInitializeParamsResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParamsResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created.
func (o AttachedDiskInitializeParamsResponseOutput) DiskName() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParamsResponse) string { return v.DiskName }).(pulumi.StringOutput)
}

// Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB.
func (o AttachedDiskInitializeParamsResponseOutput) DiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParamsResponse) string { return v.DiskSizeGb }).(pulumi.StringOutput)
}

// Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example: https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/pd-standard For a full list of acceptable values, see Persistent disk types. If you define this field, you can provide either the full or partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/diskType - projects/project/zones/zone/diskTypes/diskType - zones/zone/diskTypes/diskType Note that for InstanceTemplate, this is the name of the disk type, not URL.
func (o AttachedDiskInitializeParamsResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParamsResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
func (o AttachedDiskInitializeParamsResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParamsResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies which action to take on instance update with this disk. Default is to use the existing disk.
func (o AttachedDiskInitializeParamsResponseOutput) OnUpdateAction() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParamsResponse) string { return v.OnUpdateAction }).(pulumi.StringOutput)
}

// Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
func (o AttachedDiskInitializeParamsResponseOutput) ProvisionedIops() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParamsResponse) string { return v.ProvisionedIops }).(pulumi.StringOutput)
}

// Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name.
func (o AttachedDiskInitializeParamsResponseOutput) ResourcePolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParamsResponse) []string { return v.ResourcePolicies }).(pulumi.StringArrayOutput)
}

// The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family If the source image is deleted later, this field will not be set.
func (o AttachedDiskInitializeParamsResponseOutput) SourceImage() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParamsResponse) string { return v.SourceImage }).(pulumi.StringOutput)
}

// The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. Instance templates do not store customer-supplied encryption keys, so you cannot create disks for instances in a managed instance group if the source images are encrypted with your own keys.
func (o AttachedDiskInitializeParamsResponseOutput) SourceImageEncryptionKey() CustomerEncryptionKeyResponseOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParamsResponse) CustomerEncryptionKeyResponse {
		return v.SourceImageEncryptionKey
	}).(CustomerEncryptionKeyResponseOutput)
}

// The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: global/snapshots/my-backup If the source snapshot is deleted later, this field will not be set.
func (o AttachedDiskInitializeParamsResponseOutput) SourceSnapshot() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParamsResponse) string { return v.SourceSnapshot }).(pulumi.StringOutput)
}

// The customer-supplied encryption key of the source snapshot.
func (o AttachedDiskInitializeParamsResponseOutput) SourceSnapshotEncryptionKey() CustomerEncryptionKeyResponseOutput {
	return o.ApplyT(func(v AttachedDiskInitializeParamsResponse) CustomerEncryptionKeyResponse {
		return v.SourceSnapshotEncryptionKey
	}).(CustomerEncryptionKeyResponseOutput)
}

// An instance-attached disk resource.
type AttachedDiskResponse struct {
	// Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
	AutoDelete bool `pulumi:"autoDelete"`
	// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
	Boot bool `pulumi:"boot"`
	// Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
	DeviceName string `pulumi:"deviceName"`
	// Encrypts or decrypts a disk using a customer-supplied encryption key. If you are creating a new disk, this field encrypts the new disk using an encryption key that you provide. If you are attaching an existing disk that is already encrypted, this field decrypts the disk using the customer-supplied encryption key. If you encrypt a disk using a customer-supplied key, you must provide the same key again when you attempt to use this resource at a later time. For example, you must provide the key when you create a snapshot or an image from the disk or when you attach the disk to a virtual machine instance. If you do not provide an encryption key, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later. Instance templates do not store customer-supplied encryption keys, so you cannot use your own keys to encrypt disks in a managed instance group.
	DiskEncryptionKey CustomerEncryptionKeyResponse `pulumi:"diskEncryptionKey"`
	// The size of the disk in GB.
	DiskSizeGb string `pulumi:"diskSizeGb"`
	// A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
	GuestOsFeatures []GuestOsFeatureResponse `pulumi:"guestOsFeatures"`
	// A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
	Index int `pulumi:"index"`
	// [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
	InitializeParams AttachedDiskInitializeParamsResponse `pulumi:"initializeParams"`
	// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
	Interface string `pulumi:"interface"`
	// Type of the resource. Always compute#attachedDisk for attached disks.
	Kind string `pulumi:"kind"`
	// Any valid publicly visible licenses.
	Licenses []string `pulumi:"licenses"`
	// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
	Mode string `pulumi:"mode"`
	// shielded vm initial state stored on disk
	ShieldedInstanceInitialState InitialStateConfigResponse `pulumi:"shieldedInstanceInitialState"`
	// Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks. Note that for InstanceTemplate, specify the disk name, not the URL for the disk.
	Source string `pulumi:"source"`
	// Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
	Type string `pulumi:"type"`
}

// AttachedDiskResponseInput is an input type that accepts AttachedDiskResponseArgs and AttachedDiskResponseOutput values.
// You can construct a concrete instance of `AttachedDiskResponseInput` via:
//
//          AttachedDiskResponseArgs{...}
type AttachedDiskResponseInput interface {
	pulumi.Input

	ToAttachedDiskResponseOutput() AttachedDiskResponseOutput
	ToAttachedDiskResponseOutputWithContext(context.Context) AttachedDiskResponseOutput
}

// An instance-attached disk resource.
type AttachedDiskResponseArgs struct {
	// Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
	AutoDelete pulumi.BoolInput `pulumi:"autoDelete"`
	// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
	Boot pulumi.BoolInput `pulumi:"boot"`
	// Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
	DeviceName pulumi.StringInput `pulumi:"deviceName"`
	// Encrypts or decrypts a disk using a customer-supplied encryption key. If you are creating a new disk, this field encrypts the new disk using an encryption key that you provide. If you are attaching an existing disk that is already encrypted, this field decrypts the disk using the customer-supplied encryption key. If you encrypt a disk using a customer-supplied key, you must provide the same key again when you attempt to use this resource at a later time. For example, you must provide the key when you create a snapshot or an image from the disk or when you attach the disk to a virtual machine instance. If you do not provide an encryption key, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later. Instance templates do not store customer-supplied encryption keys, so you cannot use your own keys to encrypt disks in a managed instance group.
	DiskEncryptionKey CustomerEncryptionKeyResponseInput `pulumi:"diskEncryptionKey"`
	// The size of the disk in GB.
	DiskSizeGb pulumi.StringInput `pulumi:"diskSizeGb"`
	// A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
	GuestOsFeatures GuestOsFeatureResponseArrayInput `pulumi:"guestOsFeatures"`
	// A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
	Index pulumi.IntInput `pulumi:"index"`
	// [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
	InitializeParams AttachedDiskInitializeParamsResponseInput `pulumi:"initializeParams"`
	// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
	Interface pulumi.StringInput `pulumi:"interface"`
	// Type of the resource. Always compute#attachedDisk for attached disks.
	Kind pulumi.StringInput `pulumi:"kind"`
	// Any valid publicly visible licenses.
	Licenses pulumi.StringArrayInput `pulumi:"licenses"`
	// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
	Mode pulumi.StringInput `pulumi:"mode"`
	// shielded vm initial state stored on disk
	ShieldedInstanceInitialState InitialStateConfigResponseInput `pulumi:"shieldedInstanceInitialState"`
	// Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks. Note that for InstanceTemplate, specify the disk name, not the URL for the disk.
	Source pulumi.StringInput `pulumi:"source"`
	// Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AttachedDiskResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDiskResponse)(nil)).Elem()
}

func (i AttachedDiskResponseArgs) ToAttachedDiskResponseOutput() AttachedDiskResponseOutput {
	return i.ToAttachedDiskResponseOutputWithContext(context.Background())
}

func (i AttachedDiskResponseArgs) ToAttachedDiskResponseOutputWithContext(ctx context.Context) AttachedDiskResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedDiskResponseOutput)
}

// AttachedDiskResponseArrayInput is an input type that accepts AttachedDiskResponseArray and AttachedDiskResponseArrayOutput values.
// You can construct a concrete instance of `AttachedDiskResponseArrayInput` via:
//
//          AttachedDiskResponseArray{ AttachedDiskResponseArgs{...} }
type AttachedDiskResponseArrayInput interface {
	pulumi.Input

	ToAttachedDiskResponseArrayOutput() AttachedDiskResponseArrayOutput
	ToAttachedDiskResponseArrayOutputWithContext(context.Context) AttachedDiskResponseArrayOutput
}

type AttachedDiskResponseArray []AttachedDiskResponseInput

func (AttachedDiskResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttachedDiskResponse)(nil)).Elem()
}

func (i AttachedDiskResponseArray) ToAttachedDiskResponseArrayOutput() AttachedDiskResponseArrayOutput {
	return i.ToAttachedDiskResponseArrayOutputWithContext(context.Background())
}

func (i AttachedDiskResponseArray) ToAttachedDiskResponseArrayOutputWithContext(ctx context.Context) AttachedDiskResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedDiskResponseArrayOutput)
}

// An instance-attached disk resource.
type AttachedDiskResponseOutput struct{ *pulumi.OutputState }

func (AttachedDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDiskResponse)(nil)).Elem()
}

func (o AttachedDiskResponseOutput) ToAttachedDiskResponseOutput() AttachedDiskResponseOutput {
	return o
}

func (o AttachedDiskResponseOutput) ToAttachedDiskResponseOutputWithContext(ctx context.Context) AttachedDiskResponseOutput {
	return o
}

// Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
func (o AttachedDiskResponseOutput) AutoDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v AttachedDiskResponse) bool { return v.AutoDelete }).(pulumi.BoolOutput)
}

// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
func (o AttachedDiskResponseOutput) Boot() pulumi.BoolOutput {
	return o.ApplyT(func(v AttachedDiskResponse) bool { return v.Boot }).(pulumi.BoolOutput)
}

// Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
func (o AttachedDiskResponseOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskResponse) string { return v.DeviceName }).(pulumi.StringOutput)
}

// Encrypts or decrypts a disk using a customer-supplied encryption key. If you are creating a new disk, this field encrypts the new disk using an encryption key that you provide. If you are attaching an existing disk that is already encrypted, this field decrypts the disk using the customer-supplied encryption key. If you encrypt a disk using a customer-supplied key, you must provide the same key again when you attempt to use this resource at a later time. For example, you must provide the key when you create a snapshot or an image from the disk or when you attach the disk to a virtual machine instance. If you do not provide an encryption key, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later. Instance templates do not store customer-supplied encryption keys, so you cannot use your own keys to encrypt disks in a managed instance group.
func (o AttachedDiskResponseOutput) DiskEncryptionKey() CustomerEncryptionKeyResponseOutput {
	return o.ApplyT(func(v AttachedDiskResponse) CustomerEncryptionKeyResponse { return v.DiskEncryptionKey }).(CustomerEncryptionKeyResponseOutput)
}

// The size of the disk in GB.
func (o AttachedDiskResponseOutput) DiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskResponse) string { return v.DiskSizeGb }).(pulumi.StringOutput)
}

// A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
func (o AttachedDiskResponseOutput) GuestOsFeatures() GuestOsFeatureResponseArrayOutput {
	return o.ApplyT(func(v AttachedDiskResponse) []GuestOsFeatureResponse { return v.GuestOsFeatures }).(GuestOsFeatureResponseArrayOutput)
}

// A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
func (o AttachedDiskResponseOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v AttachedDiskResponse) int { return v.Index }).(pulumi.IntOutput)
}

// [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
func (o AttachedDiskResponseOutput) InitializeParams() AttachedDiskInitializeParamsResponseOutput {
	return o.ApplyT(func(v AttachedDiskResponse) AttachedDiskInitializeParamsResponse { return v.InitializeParams }).(AttachedDiskInitializeParamsResponseOutput)
}

// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
func (o AttachedDiskResponseOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskResponse) string { return v.Interface }).(pulumi.StringOutput)
}

// Type of the resource. Always compute#attachedDisk for attached disks.
func (o AttachedDiskResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Any valid publicly visible licenses.
func (o AttachedDiskResponseOutput) Licenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AttachedDiskResponse) []string { return v.Licenses }).(pulumi.StringArrayOutput)
}

// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
func (o AttachedDiskResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// shielded vm initial state stored on disk
func (o AttachedDiskResponseOutput) ShieldedInstanceInitialState() InitialStateConfigResponseOutput {
	return o.ApplyT(func(v AttachedDiskResponse) InitialStateConfigResponse { return v.ShieldedInstanceInitialState }).(InitialStateConfigResponseOutput)
}

// Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks. Note that for InstanceTemplate, specify the disk name, not the URL for the disk.
func (o AttachedDiskResponseOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskResponse) string { return v.Source }).(pulumi.StringOutput)
}

// Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
func (o AttachedDiskResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AttachedDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (AttachedDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttachedDiskResponse)(nil)).Elem()
}

func (o AttachedDiskResponseArrayOutput) ToAttachedDiskResponseArrayOutput() AttachedDiskResponseArrayOutput {
	return o
}

func (o AttachedDiskResponseArrayOutput) ToAttachedDiskResponseArrayOutputWithContext(ctx context.Context) AttachedDiskResponseArrayOutput {
	return o
}

func (o AttachedDiskResponseArrayOutput) Index(i pulumi.IntInput) AttachedDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AttachedDiskResponse {
		return vs[0].([]AttachedDiskResponse)[vs[1].(int)]
	}).(AttachedDiskResponseOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// This is deprecated and has no effect. Do not use.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// This is deprecated and has no effect. Do not use.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// This is deprecated and has no effect. Do not use.
func (o AuditConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// This is deprecated and has no effect. Do not use.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// AuditConfigResponseInput is an input type that accepts AuditConfigResponseArgs and AuditConfigResponseOutput values.
// You can construct a concrete instance of `AuditConfigResponseInput` via:
//
//          AuditConfigResponseArgs{...}
type AuditConfigResponseInput interface {
	pulumi.Input

	ToAuditConfigResponseOutput() AuditConfigResponseOutput
	ToAuditConfigResponseOutputWithContext(context.Context) AuditConfigResponseOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigResponseArrayInput `pulumi:"auditLogConfigs"`
	// This is deprecated and has no effect. Do not use.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringInput `pulumi:"service"`
}

func (AuditConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (i AuditConfigResponseArgs) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return i.ToAuditConfigResponseOutputWithContext(context.Background())
}

func (i AuditConfigResponseArgs) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigResponseOutput)
}

// AuditConfigResponseArrayInput is an input type that accepts AuditConfigResponseArray and AuditConfigResponseArrayOutput values.
// You can construct a concrete instance of `AuditConfigResponseArrayInput` via:
//
//          AuditConfigResponseArray{ AuditConfigResponseArgs{...} }
type AuditConfigResponseArrayInput interface {
	pulumi.Input

	ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput
	ToAuditConfigResponseArrayOutputWithContext(context.Context) AuditConfigResponseArrayOutput
}

type AuditConfigResponseArray []AuditConfigResponseInput

func (AuditConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (i AuditConfigResponseArray) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return i.ToAuditConfigResponseArrayOutputWithContext(context.Background())
}

func (i AuditConfigResponseArray) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigResponseArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// This is deprecated and has no effect. Do not use.
func (o AuditConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// This is deprecated and has no effect. Do not use.
	IgnoreChildExemptions *bool `pulumi:"ignoreChildExemptions"`
	// The log type that this config enables.
	LogType *string `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// This is deprecated and has no effect. Do not use.
	IgnoreChildExemptions pulumi.BoolPtrInput `pulumi:"ignoreChildExemptions"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// This is deprecated and has no effect. Do not use.
func (o AuditLogConfigOutput) IgnoreChildExemptions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *bool { return v.IgnoreChildExemptions }).(pulumi.BoolPtrOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// This is deprecated and has no effect. Do not use.
	IgnoreChildExemptions bool `pulumi:"ignoreChildExemptions"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// AuditLogConfigResponseInput is an input type that accepts AuditLogConfigResponseArgs and AuditLogConfigResponseOutput values.
// You can construct a concrete instance of `AuditLogConfigResponseInput` via:
//
//          AuditLogConfigResponseArgs{...}
type AuditLogConfigResponseInput interface {
	pulumi.Input

	ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput
	ToAuditLogConfigResponseOutputWithContext(context.Context) AuditLogConfigResponseOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// This is deprecated and has no effect. Do not use.
	IgnoreChildExemptions pulumi.BoolInput `pulumi:"ignoreChildExemptions"`
	// The log type that this config enables.
	LogType pulumi.StringInput `pulumi:"logType"`
}

func (AuditLogConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (i AuditLogConfigResponseArgs) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return i.ToAuditLogConfigResponseOutputWithContext(context.Background())
}

func (i AuditLogConfigResponseArgs) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigResponseOutput)
}

// AuditLogConfigResponseArrayInput is an input type that accepts AuditLogConfigResponseArray and AuditLogConfigResponseArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigResponseArrayInput` via:
//
//          AuditLogConfigResponseArray{ AuditLogConfigResponseArgs{...} }
type AuditLogConfigResponseArrayInput interface {
	pulumi.Input

	ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput
	ToAuditLogConfigResponseArrayOutputWithContext(context.Context) AuditLogConfigResponseArrayOutput
}

type AuditLogConfigResponseArray []AuditLogConfigResponseInput

func (AuditLogConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (i AuditLogConfigResponseArray) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return i.ToAuditLogConfigResponseArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigResponseArray) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigResponseArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// This is deprecated and has no effect. Do not use.
func (o AuditLogConfigResponseOutput) IgnoreChildExemptions() pulumi.BoolOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) bool { return v.IgnoreChildExemptions }).(pulumi.BoolOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// This is deprecated and has no effect. Do not use.
type AuthorizationLoggingOptions struct {
	// This is deprecated and has no effect. Do not use.
	PermissionType *string `pulumi:"permissionType"`
}

// AuthorizationLoggingOptionsInput is an input type that accepts AuthorizationLoggingOptionsArgs and AuthorizationLoggingOptionsOutput values.
// You can construct a concrete instance of `AuthorizationLoggingOptionsInput` via:
//
//          AuthorizationLoggingOptionsArgs{...}
type AuthorizationLoggingOptionsInput interface {
	pulumi.Input

	ToAuthorizationLoggingOptionsOutput() AuthorizationLoggingOptionsOutput
	ToAuthorizationLoggingOptionsOutputWithContext(context.Context) AuthorizationLoggingOptionsOutput
}

// This is deprecated and has no effect. Do not use.
type AuthorizationLoggingOptionsArgs struct {
	// This is deprecated and has no effect. Do not use.
	PermissionType *AuthorizationLoggingOptionsPermissionType `pulumi:"permissionType"`
}

func (AuthorizationLoggingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationLoggingOptions)(nil)).Elem()
}

func (i AuthorizationLoggingOptionsArgs) ToAuthorizationLoggingOptionsOutput() AuthorizationLoggingOptionsOutput {
	return i.ToAuthorizationLoggingOptionsOutputWithContext(context.Background())
}

func (i AuthorizationLoggingOptionsArgs) ToAuthorizationLoggingOptionsOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationLoggingOptionsOutput)
}

func (i AuthorizationLoggingOptionsArgs) ToAuthorizationLoggingOptionsPtrOutput() AuthorizationLoggingOptionsPtrOutput {
	return i.ToAuthorizationLoggingOptionsPtrOutputWithContext(context.Background())
}

func (i AuthorizationLoggingOptionsArgs) ToAuthorizationLoggingOptionsPtrOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationLoggingOptionsOutput).ToAuthorizationLoggingOptionsPtrOutputWithContext(ctx)
}

// AuthorizationLoggingOptionsPtrInput is an input type that accepts AuthorizationLoggingOptionsArgs, AuthorizationLoggingOptionsPtr and AuthorizationLoggingOptionsPtrOutput values.
// You can construct a concrete instance of `AuthorizationLoggingOptionsPtrInput` via:
//
//          AuthorizationLoggingOptionsArgs{...}
//
//  or:
//
//          nil
type AuthorizationLoggingOptionsPtrInput interface {
	pulumi.Input

	ToAuthorizationLoggingOptionsPtrOutput() AuthorizationLoggingOptionsPtrOutput
	ToAuthorizationLoggingOptionsPtrOutputWithContext(context.Context) AuthorizationLoggingOptionsPtrOutput
}

type authorizationLoggingOptionsPtrType AuthorizationLoggingOptionsArgs

func AuthorizationLoggingOptionsPtr(v *AuthorizationLoggingOptionsArgs) AuthorizationLoggingOptionsPtrInput {
	return (*authorizationLoggingOptionsPtrType)(v)
}

func (*authorizationLoggingOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationLoggingOptions)(nil)).Elem()
}

func (i *authorizationLoggingOptionsPtrType) ToAuthorizationLoggingOptionsPtrOutput() AuthorizationLoggingOptionsPtrOutput {
	return i.ToAuthorizationLoggingOptionsPtrOutputWithContext(context.Background())
}

func (i *authorizationLoggingOptionsPtrType) ToAuthorizationLoggingOptionsPtrOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationLoggingOptionsPtrOutput)
}

// This is deprecated and has no effect. Do not use.
type AuthorizationLoggingOptionsOutput struct{ *pulumi.OutputState }

func (AuthorizationLoggingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationLoggingOptions)(nil)).Elem()
}

func (o AuthorizationLoggingOptionsOutput) ToAuthorizationLoggingOptionsOutput() AuthorizationLoggingOptionsOutput {
	return o
}

func (o AuthorizationLoggingOptionsOutput) ToAuthorizationLoggingOptionsOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsOutput {
	return o
}

func (o AuthorizationLoggingOptionsOutput) ToAuthorizationLoggingOptionsPtrOutput() AuthorizationLoggingOptionsPtrOutput {
	return o.ToAuthorizationLoggingOptionsPtrOutputWithContext(context.Background())
}

func (o AuthorizationLoggingOptionsOutput) ToAuthorizationLoggingOptionsPtrOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsPtrOutput {
	return o.ApplyT(func(v AuthorizationLoggingOptions) *AuthorizationLoggingOptions {
		return &v
	}).(AuthorizationLoggingOptionsPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o AuthorizationLoggingOptionsOutput) PermissionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthorizationLoggingOptions) *string { return v.PermissionType }).(pulumi.StringPtrOutput)
}

type AuthorizationLoggingOptionsPtrOutput struct{ *pulumi.OutputState }

func (AuthorizationLoggingOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationLoggingOptions)(nil)).Elem()
}

func (o AuthorizationLoggingOptionsPtrOutput) ToAuthorizationLoggingOptionsPtrOutput() AuthorizationLoggingOptionsPtrOutput {
	return o
}

func (o AuthorizationLoggingOptionsPtrOutput) ToAuthorizationLoggingOptionsPtrOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsPtrOutput {
	return o
}

func (o AuthorizationLoggingOptionsPtrOutput) Elem() AuthorizationLoggingOptionsOutput {
	return o.ApplyT(func(v *AuthorizationLoggingOptions) AuthorizationLoggingOptions { return *v }).(AuthorizationLoggingOptionsOutput)
}

// This is deprecated and has no effect. Do not use.
func (o AuthorizationLoggingOptionsPtrOutput) PermissionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationLoggingOptions) *string {
		if v == nil {
			return nil
		}
		return v.PermissionType
	}).(pulumi.StringPtrOutput)
}

// This is deprecated and has no effect. Do not use.
type AuthorizationLoggingOptionsResponse struct {
	// This is deprecated and has no effect. Do not use.
	PermissionType string `pulumi:"permissionType"`
}

// AuthorizationLoggingOptionsResponseInput is an input type that accepts AuthorizationLoggingOptionsResponseArgs and AuthorizationLoggingOptionsResponseOutput values.
// You can construct a concrete instance of `AuthorizationLoggingOptionsResponseInput` via:
//
//          AuthorizationLoggingOptionsResponseArgs{...}
type AuthorizationLoggingOptionsResponseInput interface {
	pulumi.Input

	ToAuthorizationLoggingOptionsResponseOutput() AuthorizationLoggingOptionsResponseOutput
	ToAuthorizationLoggingOptionsResponseOutputWithContext(context.Context) AuthorizationLoggingOptionsResponseOutput
}

// This is deprecated and has no effect. Do not use.
type AuthorizationLoggingOptionsResponseArgs struct {
	// This is deprecated and has no effect. Do not use.
	PermissionType pulumi.StringInput `pulumi:"permissionType"`
}

func (AuthorizationLoggingOptionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationLoggingOptionsResponse)(nil)).Elem()
}

func (i AuthorizationLoggingOptionsResponseArgs) ToAuthorizationLoggingOptionsResponseOutput() AuthorizationLoggingOptionsResponseOutput {
	return i.ToAuthorizationLoggingOptionsResponseOutputWithContext(context.Background())
}

func (i AuthorizationLoggingOptionsResponseArgs) ToAuthorizationLoggingOptionsResponseOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationLoggingOptionsResponseOutput)
}

// This is deprecated and has no effect. Do not use.
type AuthorizationLoggingOptionsResponseOutput struct{ *pulumi.OutputState }

func (AuthorizationLoggingOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationLoggingOptionsResponse)(nil)).Elem()
}

func (o AuthorizationLoggingOptionsResponseOutput) ToAuthorizationLoggingOptionsResponseOutput() AuthorizationLoggingOptionsResponseOutput {
	return o
}

func (o AuthorizationLoggingOptionsResponseOutput) ToAuthorizationLoggingOptionsResponseOutputWithContext(ctx context.Context) AuthorizationLoggingOptionsResponseOutput {
	return o
}

// This is deprecated and has no effect. Do not use.
func (o AuthorizationLoggingOptionsResponseOutput) PermissionType() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationLoggingOptionsResponse) string { return v.PermissionType }).(pulumi.StringOutput)
}

type AutoscalerStatusDetailsResponse struct {
	// The status message.
	Message string `pulumi:"message"`
	// The type of error, warning, or notice returned. Current set of possible values: - ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state). - BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group. - CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas. - CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling. - CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels. - MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group. - MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling. - MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer. - MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved. - MODE_ONLY_UP (WARNING): Autoscaling is in the "Autoscale only out" mode. The autoscaler can add instances but not remove any. - MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it. - NOT_ENOUGH_QUOTA_AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances. - REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region. - SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist. - UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate. - ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout. New values might be added in the future. Some of the values might not be available in all API versions.
	Type string `pulumi:"type"`
}

// AutoscalerStatusDetailsResponseInput is an input type that accepts AutoscalerStatusDetailsResponseArgs and AutoscalerStatusDetailsResponseOutput values.
// You can construct a concrete instance of `AutoscalerStatusDetailsResponseInput` via:
//
//          AutoscalerStatusDetailsResponseArgs{...}
type AutoscalerStatusDetailsResponseInput interface {
	pulumi.Input

	ToAutoscalerStatusDetailsResponseOutput() AutoscalerStatusDetailsResponseOutput
	ToAutoscalerStatusDetailsResponseOutputWithContext(context.Context) AutoscalerStatusDetailsResponseOutput
}

type AutoscalerStatusDetailsResponseArgs struct {
	// The status message.
	Message pulumi.StringInput `pulumi:"message"`
	// The type of error, warning, or notice returned. Current set of possible values: - ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state). - BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group. - CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas. - CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling. - CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels. - MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group. - MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling. - MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer. - MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved. - MODE_ONLY_UP (WARNING): Autoscaling is in the "Autoscale only out" mode. The autoscaler can add instances but not remove any. - MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it. - NOT_ENOUGH_QUOTA_AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances. - REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region. - SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist. - UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate. - ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout. New values might be added in the future. Some of the values might not be available in all API versions.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AutoscalerStatusDetailsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalerStatusDetailsResponse)(nil)).Elem()
}

func (i AutoscalerStatusDetailsResponseArgs) ToAutoscalerStatusDetailsResponseOutput() AutoscalerStatusDetailsResponseOutput {
	return i.ToAutoscalerStatusDetailsResponseOutputWithContext(context.Background())
}

func (i AutoscalerStatusDetailsResponseArgs) ToAutoscalerStatusDetailsResponseOutputWithContext(ctx context.Context) AutoscalerStatusDetailsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalerStatusDetailsResponseOutput)
}

// AutoscalerStatusDetailsResponseArrayInput is an input type that accepts AutoscalerStatusDetailsResponseArray and AutoscalerStatusDetailsResponseArrayOutput values.
// You can construct a concrete instance of `AutoscalerStatusDetailsResponseArrayInput` via:
//
//          AutoscalerStatusDetailsResponseArray{ AutoscalerStatusDetailsResponseArgs{...} }
type AutoscalerStatusDetailsResponseArrayInput interface {
	pulumi.Input

	ToAutoscalerStatusDetailsResponseArrayOutput() AutoscalerStatusDetailsResponseArrayOutput
	ToAutoscalerStatusDetailsResponseArrayOutputWithContext(context.Context) AutoscalerStatusDetailsResponseArrayOutput
}

type AutoscalerStatusDetailsResponseArray []AutoscalerStatusDetailsResponseInput

func (AutoscalerStatusDetailsResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscalerStatusDetailsResponse)(nil)).Elem()
}

func (i AutoscalerStatusDetailsResponseArray) ToAutoscalerStatusDetailsResponseArrayOutput() AutoscalerStatusDetailsResponseArrayOutput {
	return i.ToAutoscalerStatusDetailsResponseArrayOutputWithContext(context.Background())
}

func (i AutoscalerStatusDetailsResponseArray) ToAutoscalerStatusDetailsResponseArrayOutputWithContext(ctx context.Context) AutoscalerStatusDetailsResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalerStatusDetailsResponseArrayOutput)
}

type AutoscalerStatusDetailsResponseOutput struct{ *pulumi.OutputState }

func (AutoscalerStatusDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalerStatusDetailsResponse)(nil)).Elem()
}

func (o AutoscalerStatusDetailsResponseOutput) ToAutoscalerStatusDetailsResponseOutput() AutoscalerStatusDetailsResponseOutput {
	return o
}

func (o AutoscalerStatusDetailsResponseOutput) ToAutoscalerStatusDetailsResponseOutputWithContext(ctx context.Context) AutoscalerStatusDetailsResponseOutput {
	return o
}

// The status message.
func (o AutoscalerStatusDetailsResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscalerStatusDetailsResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The type of error, warning, or notice returned. Current set of possible values: - ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state). - BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group. - CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas. - CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling. - CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels. - MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group. - MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling. - MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer. - MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved. - MODE_ONLY_UP (WARNING): Autoscaling is in the "Autoscale only out" mode. The autoscaler can add instances but not remove any. - MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it. - NOT_ENOUGH_QUOTA_AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances. - REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region. - SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist. - UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate. - ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout. New values might be added in the future. Some of the values might not be available in all API versions.
func (o AutoscalerStatusDetailsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscalerStatusDetailsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AutoscalerStatusDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (AutoscalerStatusDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscalerStatusDetailsResponse)(nil)).Elem()
}

func (o AutoscalerStatusDetailsResponseArrayOutput) ToAutoscalerStatusDetailsResponseArrayOutput() AutoscalerStatusDetailsResponseArrayOutput {
	return o
}

func (o AutoscalerStatusDetailsResponseArrayOutput) ToAutoscalerStatusDetailsResponseArrayOutputWithContext(ctx context.Context) AutoscalerStatusDetailsResponseArrayOutput {
	return o
}

func (o AutoscalerStatusDetailsResponseArrayOutput) Index(i pulumi.IntInput) AutoscalerStatusDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscalerStatusDetailsResponse {
		return vs[0].([]AutoscalerStatusDetailsResponse)[vs[1].(int)]
	}).(AutoscalerStatusDetailsResponseOutput)
}

// Cloud Autoscaler policy.
type AutoscalingPolicy struct {
	// The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
	CoolDownPeriodSec *int `pulumi:"coolDownPeriodSec"`
	// Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
	CpuUtilization *AutoscalingPolicyCpuUtilization `pulumi:"cpuUtilization"`
	// Configuration parameters of autoscaling based on a custom metric.
	CustomMetricUtilizations []AutoscalingPolicyCustomMetricUtilization `pulumi:"customMetricUtilizations"`
	// Configuration parameters of autoscaling based on load balancer.
	LoadBalancingUtilization *AutoscalingPolicyLoadBalancingUtilization `pulumi:"loadBalancingUtilization"`
	// The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
	MaxNumReplicas *int `pulumi:"maxNumReplicas"`
	// The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
	MinNumReplicas *int `pulumi:"minNumReplicas"`
	// Defines operating mode for this policy.
	Mode           *string                          `pulumi:"mode"`
	ScaleInControl *AutoscalingPolicyScaleInControl `pulumi:"scaleInControl"`
	// Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
	ScalingSchedules map[string]string `pulumi:"scalingSchedules"`
}

// AutoscalingPolicyInput is an input type that accepts AutoscalingPolicyArgs and AutoscalingPolicyOutput values.
// You can construct a concrete instance of `AutoscalingPolicyInput` via:
//
//          AutoscalingPolicyArgs{...}
type AutoscalingPolicyInput interface {
	pulumi.Input

	ToAutoscalingPolicyOutput() AutoscalingPolicyOutput
	ToAutoscalingPolicyOutputWithContext(context.Context) AutoscalingPolicyOutput
}

// Cloud Autoscaler policy.
type AutoscalingPolicyArgs struct {
	// The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
	CoolDownPeriodSec pulumi.IntPtrInput `pulumi:"coolDownPeriodSec"`
	// Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
	CpuUtilization AutoscalingPolicyCpuUtilizationPtrInput `pulumi:"cpuUtilization"`
	// Configuration parameters of autoscaling based on a custom metric.
	CustomMetricUtilizations AutoscalingPolicyCustomMetricUtilizationArrayInput `pulumi:"customMetricUtilizations"`
	// Configuration parameters of autoscaling based on load balancer.
	LoadBalancingUtilization AutoscalingPolicyLoadBalancingUtilizationPtrInput `pulumi:"loadBalancingUtilization"`
	// The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
	MaxNumReplicas pulumi.IntPtrInput `pulumi:"maxNumReplicas"`
	// The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
	MinNumReplicas pulumi.IntPtrInput `pulumi:"minNumReplicas"`
	// Defines operating mode for this policy.
	Mode           *AutoscalingPolicyMode                  `pulumi:"mode"`
	ScaleInControl AutoscalingPolicyScaleInControlPtrInput `pulumi:"scaleInControl"`
	// Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
	ScalingSchedules pulumi.StringMapInput `pulumi:"scalingSchedules"`
}

func (AutoscalingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicy)(nil)).Elem()
}

func (i AutoscalingPolicyArgs) ToAutoscalingPolicyOutput() AutoscalingPolicyOutput {
	return i.ToAutoscalingPolicyOutputWithContext(context.Background())
}

func (i AutoscalingPolicyArgs) ToAutoscalingPolicyOutputWithContext(ctx context.Context) AutoscalingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyOutput)
}

func (i AutoscalingPolicyArgs) ToAutoscalingPolicyPtrOutput() AutoscalingPolicyPtrOutput {
	return i.ToAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (i AutoscalingPolicyArgs) ToAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyOutput).ToAutoscalingPolicyPtrOutputWithContext(ctx)
}

// AutoscalingPolicyPtrInput is an input type that accepts AutoscalingPolicyArgs, AutoscalingPolicyPtr and AutoscalingPolicyPtrOutput values.
// You can construct a concrete instance of `AutoscalingPolicyPtrInput` via:
//
//          AutoscalingPolicyArgs{...}
//
//  or:
//
//          nil
type AutoscalingPolicyPtrInput interface {
	pulumi.Input

	ToAutoscalingPolicyPtrOutput() AutoscalingPolicyPtrOutput
	ToAutoscalingPolicyPtrOutputWithContext(context.Context) AutoscalingPolicyPtrOutput
}

type autoscalingPolicyPtrType AutoscalingPolicyArgs

func AutoscalingPolicyPtr(v *AutoscalingPolicyArgs) AutoscalingPolicyPtrInput {
	return (*autoscalingPolicyPtrType)(v)
}

func (*autoscalingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicy)(nil)).Elem()
}

func (i *autoscalingPolicyPtrType) ToAutoscalingPolicyPtrOutput() AutoscalingPolicyPtrOutput {
	return i.ToAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (i *autoscalingPolicyPtrType) ToAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyPtrOutput)
}

// Cloud Autoscaler policy.
type AutoscalingPolicyOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicy)(nil)).Elem()
}

func (o AutoscalingPolicyOutput) ToAutoscalingPolicyOutput() AutoscalingPolicyOutput {
	return o
}

func (o AutoscalingPolicyOutput) ToAutoscalingPolicyOutputWithContext(ctx context.Context) AutoscalingPolicyOutput {
	return o
}

func (o AutoscalingPolicyOutput) ToAutoscalingPolicyPtrOutput() AutoscalingPolicyPtrOutput {
	return o.ToAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (o AutoscalingPolicyOutput) ToAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalingPolicyPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicy) *AutoscalingPolicy {
		return &v
	}).(AutoscalingPolicyPtrOutput)
}

// The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
func (o AutoscalingPolicyOutput) CoolDownPeriodSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicy) *int { return v.CoolDownPeriodSec }).(pulumi.IntPtrOutput)
}

// Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
func (o AutoscalingPolicyOutput) CpuUtilization() AutoscalingPolicyCpuUtilizationPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicy) *AutoscalingPolicyCpuUtilization { return v.CpuUtilization }).(AutoscalingPolicyCpuUtilizationPtrOutput)
}

// Configuration parameters of autoscaling based on a custom metric.
func (o AutoscalingPolicyOutput) CustomMetricUtilizations() AutoscalingPolicyCustomMetricUtilizationArrayOutput {
	return o.ApplyT(func(v AutoscalingPolicy) []AutoscalingPolicyCustomMetricUtilization {
		return v.CustomMetricUtilizations
	}).(AutoscalingPolicyCustomMetricUtilizationArrayOutput)
}

// Configuration parameters of autoscaling based on load balancer.
func (o AutoscalingPolicyOutput) LoadBalancingUtilization() AutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicy) *AutoscalingPolicyLoadBalancingUtilization {
		return v.LoadBalancingUtilization
	}).(AutoscalingPolicyLoadBalancingUtilizationPtrOutput)
}

// The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
func (o AutoscalingPolicyOutput) MaxNumReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicy) *int { return v.MaxNumReplicas }).(pulumi.IntPtrOutput)
}

// The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
func (o AutoscalingPolicyOutput) MinNumReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicy) *int { return v.MinNumReplicas }).(pulumi.IntPtrOutput)
}

// Defines operating mode for this policy.
func (o AutoscalingPolicyOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicy) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o AutoscalingPolicyOutput) ScaleInControl() AutoscalingPolicyScaleInControlPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicy) *AutoscalingPolicyScaleInControl { return v.ScaleInControl }).(AutoscalingPolicyScaleInControlPtrOutput)
}

// Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
func (o AutoscalingPolicyOutput) ScalingSchedules() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoscalingPolicy) map[string]string { return v.ScalingSchedules }).(pulumi.StringMapOutput)
}

type AutoscalingPolicyPtrOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicy)(nil)).Elem()
}

func (o AutoscalingPolicyPtrOutput) ToAutoscalingPolicyPtrOutput() AutoscalingPolicyPtrOutput {
	return o
}

func (o AutoscalingPolicyPtrOutput) ToAutoscalingPolicyPtrOutputWithContext(ctx context.Context) AutoscalingPolicyPtrOutput {
	return o
}

func (o AutoscalingPolicyPtrOutput) Elem() AutoscalingPolicyOutput {
	return o.ApplyT(func(v *AutoscalingPolicy) AutoscalingPolicy { return *v }).(AutoscalingPolicyOutput)
}

// The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
func (o AutoscalingPolicyPtrOutput) CoolDownPeriodSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.CoolDownPeriodSec
	}).(pulumi.IntPtrOutput)
}

// Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
func (o AutoscalingPolicyPtrOutput) CpuUtilization() AutoscalingPolicyCpuUtilizationPtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicy) *AutoscalingPolicyCpuUtilization {
		if v == nil {
			return nil
		}
		return v.CpuUtilization
	}).(AutoscalingPolicyCpuUtilizationPtrOutput)
}

// Configuration parameters of autoscaling based on a custom metric.
func (o AutoscalingPolicyPtrOutput) CustomMetricUtilizations() AutoscalingPolicyCustomMetricUtilizationArrayOutput {
	return o.ApplyT(func(v *AutoscalingPolicy) []AutoscalingPolicyCustomMetricUtilization {
		if v == nil {
			return nil
		}
		return v.CustomMetricUtilizations
	}).(AutoscalingPolicyCustomMetricUtilizationArrayOutput)
}

// Configuration parameters of autoscaling based on load balancer.
func (o AutoscalingPolicyPtrOutput) LoadBalancingUtilization() AutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicy) *AutoscalingPolicyLoadBalancingUtilization {
		if v == nil {
			return nil
		}
		return v.LoadBalancingUtilization
	}).(AutoscalingPolicyLoadBalancingUtilizationPtrOutput)
}

// The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
func (o AutoscalingPolicyPtrOutput) MaxNumReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxNumReplicas
	}).(pulumi.IntPtrOutput)
}

// The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
func (o AutoscalingPolicyPtrOutput) MinNumReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MinNumReplicas
	}).(pulumi.IntPtrOutput)
}

// Defines operating mode for this policy.
func (o AutoscalingPolicyPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

func (o AutoscalingPolicyPtrOutput) ScaleInControl() AutoscalingPolicyScaleInControlPtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicy) *AutoscalingPolicyScaleInControl {
		if v == nil {
			return nil
		}
		return v.ScaleInControl
	}).(AutoscalingPolicyScaleInControlPtrOutput)
}

// Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
func (o AutoscalingPolicyPtrOutput) ScalingSchedules() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AutoscalingPolicy) map[string]string {
		if v == nil {
			return nil
		}
		return v.ScalingSchedules
	}).(pulumi.StringMapOutput)
}

// CPU utilization policy.
type AutoscalingPolicyCpuUtilization struct {
	// Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are: * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
	PredictiveMethod *string `pulumi:"predictiveMethod"`
	// The target CPU utilization that the autoscaler maintains. Must be a float value in the range (0, 1]. If not specified, the default is 0.6. If the CPU level is below the target utilization, the autoscaler scales in the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization. If the average CPU is above the target utilization, the autoscaler scales out until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.
	UtilizationTarget *float64 `pulumi:"utilizationTarget"`
}

// AutoscalingPolicyCpuUtilizationInput is an input type that accepts AutoscalingPolicyCpuUtilizationArgs and AutoscalingPolicyCpuUtilizationOutput values.
// You can construct a concrete instance of `AutoscalingPolicyCpuUtilizationInput` via:
//
//          AutoscalingPolicyCpuUtilizationArgs{...}
type AutoscalingPolicyCpuUtilizationInput interface {
	pulumi.Input

	ToAutoscalingPolicyCpuUtilizationOutput() AutoscalingPolicyCpuUtilizationOutput
	ToAutoscalingPolicyCpuUtilizationOutputWithContext(context.Context) AutoscalingPolicyCpuUtilizationOutput
}

// CPU utilization policy.
type AutoscalingPolicyCpuUtilizationArgs struct {
	// Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are: * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
	PredictiveMethod *AutoscalingPolicyCpuUtilizationPredictiveMethod `pulumi:"predictiveMethod"`
	// The target CPU utilization that the autoscaler maintains. Must be a float value in the range (0, 1]. If not specified, the default is 0.6. If the CPU level is below the target utilization, the autoscaler scales in the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization. If the average CPU is above the target utilization, the autoscaler scales out until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.
	UtilizationTarget pulumi.Float64PtrInput `pulumi:"utilizationTarget"`
}

func (AutoscalingPolicyCpuUtilizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyCpuUtilization)(nil)).Elem()
}

func (i AutoscalingPolicyCpuUtilizationArgs) ToAutoscalingPolicyCpuUtilizationOutput() AutoscalingPolicyCpuUtilizationOutput {
	return i.ToAutoscalingPolicyCpuUtilizationOutputWithContext(context.Background())
}

func (i AutoscalingPolicyCpuUtilizationArgs) ToAutoscalingPolicyCpuUtilizationOutputWithContext(ctx context.Context) AutoscalingPolicyCpuUtilizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyCpuUtilizationOutput)
}

func (i AutoscalingPolicyCpuUtilizationArgs) ToAutoscalingPolicyCpuUtilizationPtrOutput() AutoscalingPolicyCpuUtilizationPtrOutput {
	return i.ToAutoscalingPolicyCpuUtilizationPtrOutputWithContext(context.Background())
}

func (i AutoscalingPolicyCpuUtilizationArgs) ToAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx context.Context) AutoscalingPolicyCpuUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyCpuUtilizationOutput).ToAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx)
}

// AutoscalingPolicyCpuUtilizationPtrInput is an input type that accepts AutoscalingPolicyCpuUtilizationArgs, AutoscalingPolicyCpuUtilizationPtr and AutoscalingPolicyCpuUtilizationPtrOutput values.
// You can construct a concrete instance of `AutoscalingPolicyCpuUtilizationPtrInput` via:
//
//          AutoscalingPolicyCpuUtilizationArgs{...}
//
//  or:
//
//          nil
type AutoscalingPolicyCpuUtilizationPtrInput interface {
	pulumi.Input

	ToAutoscalingPolicyCpuUtilizationPtrOutput() AutoscalingPolicyCpuUtilizationPtrOutput
	ToAutoscalingPolicyCpuUtilizationPtrOutputWithContext(context.Context) AutoscalingPolicyCpuUtilizationPtrOutput
}

type autoscalingPolicyCpuUtilizationPtrType AutoscalingPolicyCpuUtilizationArgs

func AutoscalingPolicyCpuUtilizationPtr(v *AutoscalingPolicyCpuUtilizationArgs) AutoscalingPolicyCpuUtilizationPtrInput {
	return (*autoscalingPolicyCpuUtilizationPtrType)(v)
}

func (*autoscalingPolicyCpuUtilizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicyCpuUtilization)(nil)).Elem()
}

func (i *autoscalingPolicyCpuUtilizationPtrType) ToAutoscalingPolicyCpuUtilizationPtrOutput() AutoscalingPolicyCpuUtilizationPtrOutput {
	return i.ToAutoscalingPolicyCpuUtilizationPtrOutputWithContext(context.Background())
}

func (i *autoscalingPolicyCpuUtilizationPtrType) ToAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx context.Context) AutoscalingPolicyCpuUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyCpuUtilizationPtrOutput)
}

// CPU utilization policy.
type AutoscalingPolicyCpuUtilizationOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyCpuUtilizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyCpuUtilization)(nil)).Elem()
}

func (o AutoscalingPolicyCpuUtilizationOutput) ToAutoscalingPolicyCpuUtilizationOutput() AutoscalingPolicyCpuUtilizationOutput {
	return o
}

func (o AutoscalingPolicyCpuUtilizationOutput) ToAutoscalingPolicyCpuUtilizationOutputWithContext(ctx context.Context) AutoscalingPolicyCpuUtilizationOutput {
	return o
}

func (o AutoscalingPolicyCpuUtilizationOutput) ToAutoscalingPolicyCpuUtilizationPtrOutput() AutoscalingPolicyCpuUtilizationPtrOutput {
	return o.ToAutoscalingPolicyCpuUtilizationPtrOutputWithContext(context.Background())
}

func (o AutoscalingPolicyCpuUtilizationOutput) ToAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx context.Context) AutoscalingPolicyCpuUtilizationPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyCpuUtilization) *AutoscalingPolicyCpuUtilization {
		return &v
	}).(AutoscalingPolicyCpuUtilizationPtrOutput)
}

// Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are: * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
func (o AutoscalingPolicyCpuUtilizationOutput) PredictiveMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyCpuUtilization) *string { return v.PredictiveMethod }).(pulumi.StringPtrOutput)
}

// The target CPU utilization that the autoscaler maintains. Must be a float value in the range (0, 1]. If not specified, the default is 0.6. If the CPU level is below the target utilization, the autoscaler scales in the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization. If the average CPU is above the target utilization, the autoscaler scales out until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.
func (o AutoscalingPolicyCpuUtilizationOutput) UtilizationTarget() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyCpuUtilization) *float64 { return v.UtilizationTarget }).(pulumi.Float64PtrOutput)
}

type AutoscalingPolicyCpuUtilizationPtrOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyCpuUtilizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicyCpuUtilization)(nil)).Elem()
}

func (o AutoscalingPolicyCpuUtilizationPtrOutput) ToAutoscalingPolicyCpuUtilizationPtrOutput() AutoscalingPolicyCpuUtilizationPtrOutput {
	return o
}

func (o AutoscalingPolicyCpuUtilizationPtrOutput) ToAutoscalingPolicyCpuUtilizationPtrOutputWithContext(ctx context.Context) AutoscalingPolicyCpuUtilizationPtrOutput {
	return o
}

func (o AutoscalingPolicyCpuUtilizationPtrOutput) Elem() AutoscalingPolicyCpuUtilizationOutput {
	return o.ApplyT(func(v *AutoscalingPolicyCpuUtilization) AutoscalingPolicyCpuUtilization { return *v }).(AutoscalingPolicyCpuUtilizationOutput)
}

// Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are: * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
func (o AutoscalingPolicyCpuUtilizationPtrOutput) PredictiveMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyCpuUtilization) *string {
		if v == nil {
			return nil
		}
		return v.PredictiveMethod
	}).(pulumi.StringPtrOutput)
}

// The target CPU utilization that the autoscaler maintains. Must be a float value in the range (0, 1]. If not specified, the default is 0.6. If the CPU level is below the target utilization, the autoscaler scales in the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization. If the average CPU is above the target utilization, the autoscaler scales out until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.
func (o AutoscalingPolicyCpuUtilizationPtrOutput) UtilizationTarget() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyCpuUtilization) *float64 {
		if v == nil {
			return nil
		}
		return v.UtilizationTarget
	}).(pulumi.Float64PtrOutput)
}

// CPU utilization policy.
type AutoscalingPolicyCpuUtilizationResponse struct {
	// Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are: * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
	PredictiveMethod string `pulumi:"predictiveMethod"`
	// The target CPU utilization that the autoscaler maintains. Must be a float value in the range (0, 1]. If not specified, the default is 0.6. If the CPU level is below the target utilization, the autoscaler scales in the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization. If the average CPU is above the target utilization, the autoscaler scales out until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.
	UtilizationTarget float64 `pulumi:"utilizationTarget"`
}

// AutoscalingPolicyCpuUtilizationResponseInput is an input type that accepts AutoscalingPolicyCpuUtilizationResponseArgs and AutoscalingPolicyCpuUtilizationResponseOutput values.
// You can construct a concrete instance of `AutoscalingPolicyCpuUtilizationResponseInput` via:
//
//          AutoscalingPolicyCpuUtilizationResponseArgs{...}
type AutoscalingPolicyCpuUtilizationResponseInput interface {
	pulumi.Input

	ToAutoscalingPolicyCpuUtilizationResponseOutput() AutoscalingPolicyCpuUtilizationResponseOutput
	ToAutoscalingPolicyCpuUtilizationResponseOutputWithContext(context.Context) AutoscalingPolicyCpuUtilizationResponseOutput
}

// CPU utilization policy.
type AutoscalingPolicyCpuUtilizationResponseArgs struct {
	// Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are: * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
	PredictiveMethod pulumi.StringInput `pulumi:"predictiveMethod"`
	// The target CPU utilization that the autoscaler maintains. Must be a float value in the range (0, 1]. If not specified, the default is 0.6. If the CPU level is below the target utilization, the autoscaler scales in the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization. If the average CPU is above the target utilization, the autoscaler scales out until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.
	UtilizationTarget pulumi.Float64Input `pulumi:"utilizationTarget"`
}

func (AutoscalingPolicyCpuUtilizationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyCpuUtilizationResponse)(nil)).Elem()
}

func (i AutoscalingPolicyCpuUtilizationResponseArgs) ToAutoscalingPolicyCpuUtilizationResponseOutput() AutoscalingPolicyCpuUtilizationResponseOutput {
	return i.ToAutoscalingPolicyCpuUtilizationResponseOutputWithContext(context.Background())
}

func (i AutoscalingPolicyCpuUtilizationResponseArgs) ToAutoscalingPolicyCpuUtilizationResponseOutputWithContext(ctx context.Context) AutoscalingPolicyCpuUtilizationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyCpuUtilizationResponseOutput)
}

func (i AutoscalingPolicyCpuUtilizationResponseArgs) ToAutoscalingPolicyCpuUtilizationResponsePtrOutput() AutoscalingPolicyCpuUtilizationResponsePtrOutput {
	return i.ToAutoscalingPolicyCpuUtilizationResponsePtrOutputWithContext(context.Background())
}

func (i AutoscalingPolicyCpuUtilizationResponseArgs) ToAutoscalingPolicyCpuUtilizationResponsePtrOutputWithContext(ctx context.Context) AutoscalingPolicyCpuUtilizationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyCpuUtilizationResponseOutput).ToAutoscalingPolicyCpuUtilizationResponsePtrOutputWithContext(ctx)
}

// AutoscalingPolicyCpuUtilizationResponsePtrInput is an input type that accepts AutoscalingPolicyCpuUtilizationResponseArgs, AutoscalingPolicyCpuUtilizationResponsePtr and AutoscalingPolicyCpuUtilizationResponsePtrOutput values.
// You can construct a concrete instance of `AutoscalingPolicyCpuUtilizationResponsePtrInput` via:
//
//          AutoscalingPolicyCpuUtilizationResponseArgs{...}
//
//  or:
//
//          nil
type AutoscalingPolicyCpuUtilizationResponsePtrInput interface {
	pulumi.Input

	ToAutoscalingPolicyCpuUtilizationResponsePtrOutput() AutoscalingPolicyCpuUtilizationResponsePtrOutput
	ToAutoscalingPolicyCpuUtilizationResponsePtrOutputWithContext(context.Context) AutoscalingPolicyCpuUtilizationResponsePtrOutput
}

type autoscalingPolicyCpuUtilizationResponsePtrType AutoscalingPolicyCpuUtilizationResponseArgs

func AutoscalingPolicyCpuUtilizationResponsePtr(v *AutoscalingPolicyCpuUtilizationResponseArgs) AutoscalingPolicyCpuUtilizationResponsePtrInput {
	return (*autoscalingPolicyCpuUtilizationResponsePtrType)(v)
}

func (*autoscalingPolicyCpuUtilizationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicyCpuUtilizationResponse)(nil)).Elem()
}

func (i *autoscalingPolicyCpuUtilizationResponsePtrType) ToAutoscalingPolicyCpuUtilizationResponsePtrOutput() AutoscalingPolicyCpuUtilizationResponsePtrOutput {
	return i.ToAutoscalingPolicyCpuUtilizationResponsePtrOutputWithContext(context.Background())
}

func (i *autoscalingPolicyCpuUtilizationResponsePtrType) ToAutoscalingPolicyCpuUtilizationResponsePtrOutputWithContext(ctx context.Context) AutoscalingPolicyCpuUtilizationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyCpuUtilizationResponsePtrOutput)
}

// CPU utilization policy.
type AutoscalingPolicyCpuUtilizationResponseOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyCpuUtilizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyCpuUtilizationResponse)(nil)).Elem()
}

func (o AutoscalingPolicyCpuUtilizationResponseOutput) ToAutoscalingPolicyCpuUtilizationResponseOutput() AutoscalingPolicyCpuUtilizationResponseOutput {
	return o
}

func (o AutoscalingPolicyCpuUtilizationResponseOutput) ToAutoscalingPolicyCpuUtilizationResponseOutputWithContext(ctx context.Context) AutoscalingPolicyCpuUtilizationResponseOutput {
	return o
}

func (o AutoscalingPolicyCpuUtilizationResponseOutput) ToAutoscalingPolicyCpuUtilizationResponsePtrOutput() AutoscalingPolicyCpuUtilizationResponsePtrOutput {
	return o.ToAutoscalingPolicyCpuUtilizationResponsePtrOutputWithContext(context.Background())
}

func (o AutoscalingPolicyCpuUtilizationResponseOutput) ToAutoscalingPolicyCpuUtilizationResponsePtrOutputWithContext(ctx context.Context) AutoscalingPolicyCpuUtilizationResponsePtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyCpuUtilizationResponse) *AutoscalingPolicyCpuUtilizationResponse {
		return &v
	}).(AutoscalingPolicyCpuUtilizationResponsePtrOutput)
}

// Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are: * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
func (o AutoscalingPolicyCpuUtilizationResponseOutput) PredictiveMethod() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscalingPolicyCpuUtilizationResponse) string { return v.PredictiveMethod }).(pulumi.StringOutput)
}

// The target CPU utilization that the autoscaler maintains. Must be a float value in the range (0, 1]. If not specified, the default is 0.6. If the CPU level is below the target utilization, the autoscaler scales in the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization. If the average CPU is above the target utilization, the autoscaler scales out until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.
func (o AutoscalingPolicyCpuUtilizationResponseOutput) UtilizationTarget() pulumi.Float64Output {
	return o.ApplyT(func(v AutoscalingPolicyCpuUtilizationResponse) float64 { return v.UtilizationTarget }).(pulumi.Float64Output)
}

type AutoscalingPolicyCpuUtilizationResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyCpuUtilizationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicyCpuUtilizationResponse)(nil)).Elem()
}

func (o AutoscalingPolicyCpuUtilizationResponsePtrOutput) ToAutoscalingPolicyCpuUtilizationResponsePtrOutput() AutoscalingPolicyCpuUtilizationResponsePtrOutput {
	return o
}

func (o AutoscalingPolicyCpuUtilizationResponsePtrOutput) ToAutoscalingPolicyCpuUtilizationResponsePtrOutputWithContext(ctx context.Context) AutoscalingPolicyCpuUtilizationResponsePtrOutput {
	return o
}

func (o AutoscalingPolicyCpuUtilizationResponsePtrOutput) Elem() AutoscalingPolicyCpuUtilizationResponseOutput {
	return o.ApplyT(func(v *AutoscalingPolicyCpuUtilizationResponse) AutoscalingPolicyCpuUtilizationResponse { return *v }).(AutoscalingPolicyCpuUtilizationResponseOutput)
}

// Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are: * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
func (o AutoscalingPolicyCpuUtilizationResponsePtrOutput) PredictiveMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyCpuUtilizationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PredictiveMethod
	}).(pulumi.StringPtrOutput)
}

// The target CPU utilization that the autoscaler maintains. Must be a float value in the range (0, 1]. If not specified, the default is 0.6. If the CPU level is below the target utilization, the autoscaler scales in the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization. If the average CPU is above the target utilization, the autoscaler scales out until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.
func (o AutoscalingPolicyCpuUtilizationResponsePtrOutput) UtilizationTarget() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyCpuUtilizationResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.UtilizationTarget
	}).(pulumi.Float64PtrOutput)
}

// Custom utilization metric policy.
type AutoscalingPolicyCustomMetricUtilization struct {
	// A filter string, compatible with a Stackdriver Monitoring filter string for TimeSeries.list API call. This filter is used to select a specific TimeSeries for the purpose of autoscaling and to determine whether the metric is exporting per-instance or per-group data. For the filter to be valid for autoscaling purposes, the following rules apply: - You can only use the AND operator for joining selectors. - You can only use direct equality comparison operator (=) without any functions for each selector. - You can specify the metric in both the filter string and in the metric field. However, if specified in both places, the metric must be identical. - The monitored resource type determines what kind of values are expected for the metric. If it is a gce_instance, the autoscaler expects the metric to include a separate TimeSeries for each instance in a group. In such a case, you cannot filter on resource labels. If the resource type is any other value, the autoscaler expects this metric to contain values that apply to the entire autoscaled instance group and resource label filtering can be performed to point autoscaler at the correct TimeSeries to scale upon. This is called a *per-group metric* for the purpose of autoscaling. If not specified, the type defaults to gce_instance. Try to provide a filter that is selective enough to pick just one TimeSeries for the autoscaled group or for each of the instances (if you are using gce_instance resource type). If multiple TimeSeries are returned upon the query execution, the autoscaler will sum their respective values to obtain its scaling value.
	Filter *string `pulumi:"filter"`
	// The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values. The metric must have a value type of INT64 or DOUBLE.
	Metric *string `pulumi:"metric"`
	// If scaling is based on a per-group metric value that represents the total amount of work to be done or resource usage, set this value to an amount assigned for a single instance of the scaled group. Autoscaler keeps the number of instances proportional to the value of this metric. The metric itself does not change value due to group resizing. A good metric to use with the target is for example pubsub.googleapis.com/subscription/num_undelivered_messages or a custom metric exporting the total number of requests coming to your instances. A bad example would be a metric exporting an average or median latency, since this value can't include a chunk assignable to a single instance, it could be better used with utilization_target instead.
	SingleInstanceAssignment *float64 `pulumi:"singleInstanceAssignment"`
	// The target value of the metric that autoscaler maintains. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric. For example, a good metric to use as a utilization_target is https://www.googleapis.com/compute/v1/instance/network/received_bytes_count. The autoscaler works to keep this value constant for each of the instances.
	UtilizationTarget *float64 `pulumi:"utilizationTarget"`
	// Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE.
	UtilizationTargetType *string `pulumi:"utilizationTargetType"`
}

// AutoscalingPolicyCustomMetricUtilizationInput is an input type that accepts AutoscalingPolicyCustomMetricUtilizationArgs and AutoscalingPolicyCustomMetricUtilizationOutput values.
// You can construct a concrete instance of `AutoscalingPolicyCustomMetricUtilizationInput` via:
//
//          AutoscalingPolicyCustomMetricUtilizationArgs{...}
type AutoscalingPolicyCustomMetricUtilizationInput interface {
	pulumi.Input

	ToAutoscalingPolicyCustomMetricUtilizationOutput() AutoscalingPolicyCustomMetricUtilizationOutput
	ToAutoscalingPolicyCustomMetricUtilizationOutputWithContext(context.Context) AutoscalingPolicyCustomMetricUtilizationOutput
}

// Custom utilization metric policy.
type AutoscalingPolicyCustomMetricUtilizationArgs struct {
	// A filter string, compatible with a Stackdriver Monitoring filter string for TimeSeries.list API call. This filter is used to select a specific TimeSeries for the purpose of autoscaling and to determine whether the metric is exporting per-instance or per-group data. For the filter to be valid for autoscaling purposes, the following rules apply: - You can only use the AND operator for joining selectors. - You can only use direct equality comparison operator (=) without any functions for each selector. - You can specify the metric in both the filter string and in the metric field. However, if specified in both places, the metric must be identical. - The monitored resource type determines what kind of values are expected for the metric. If it is a gce_instance, the autoscaler expects the metric to include a separate TimeSeries for each instance in a group. In such a case, you cannot filter on resource labels. If the resource type is any other value, the autoscaler expects this metric to contain values that apply to the entire autoscaled instance group and resource label filtering can be performed to point autoscaler at the correct TimeSeries to scale upon. This is called a *per-group metric* for the purpose of autoscaling. If not specified, the type defaults to gce_instance. Try to provide a filter that is selective enough to pick just one TimeSeries for the autoscaled group or for each of the instances (if you are using gce_instance resource type). If multiple TimeSeries are returned upon the query execution, the autoscaler will sum their respective values to obtain its scaling value.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values. The metric must have a value type of INT64 or DOUBLE.
	Metric pulumi.StringPtrInput `pulumi:"metric"`
	// If scaling is based on a per-group metric value that represents the total amount of work to be done or resource usage, set this value to an amount assigned for a single instance of the scaled group. Autoscaler keeps the number of instances proportional to the value of this metric. The metric itself does not change value due to group resizing. A good metric to use with the target is for example pubsub.googleapis.com/subscription/num_undelivered_messages or a custom metric exporting the total number of requests coming to your instances. A bad example would be a metric exporting an average or median latency, since this value can't include a chunk assignable to a single instance, it could be better used with utilization_target instead.
	SingleInstanceAssignment pulumi.Float64PtrInput `pulumi:"singleInstanceAssignment"`
	// The target value of the metric that autoscaler maintains. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric. For example, a good metric to use as a utilization_target is https://www.googleapis.com/compute/v1/instance/network/received_bytes_count. The autoscaler works to keep this value constant for each of the instances.
	UtilizationTarget pulumi.Float64PtrInput `pulumi:"utilizationTarget"`
	// Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE.
	UtilizationTargetType *AutoscalingPolicyCustomMetricUtilizationUtilizationTargetType `pulumi:"utilizationTargetType"`
}

func (AutoscalingPolicyCustomMetricUtilizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyCustomMetricUtilization)(nil)).Elem()
}

func (i AutoscalingPolicyCustomMetricUtilizationArgs) ToAutoscalingPolicyCustomMetricUtilizationOutput() AutoscalingPolicyCustomMetricUtilizationOutput {
	return i.ToAutoscalingPolicyCustomMetricUtilizationOutputWithContext(context.Background())
}

func (i AutoscalingPolicyCustomMetricUtilizationArgs) ToAutoscalingPolicyCustomMetricUtilizationOutputWithContext(ctx context.Context) AutoscalingPolicyCustomMetricUtilizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyCustomMetricUtilizationOutput)
}

// AutoscalingPolicyCustomMetricUtilizationArrayInput is an input type that accepts AutoscalingPolicyCustomMetricUtilizationArray and AutoscalingPolicyCustomMetricUtilizationArrayOutput values.
// You can construct a concrete instance of `AutoscalingPolicyCustomMetricUtilizationArrayInput` via:
//
//          AutoscalingPolicyCustomMetricUtilizationArray{ AutoscalingPolicyCustomMetricUtilizationArgs{...} }
type AutoscalingPolicyCustomMetricUtilizationArrayInput interface {
	pulumi.Input

	ToAutoscalingPolicyCustomMetricUtilizationArrayOutput() AutoscalingPolicyCustomMetricUtilizationArrayOutput
	ToAutoscalingPolicyCustomMetricUtilizationArrayOutputWithContext(context.Context) AutoscalingPolicyCustomMetricUtilizationArrayOutput
}

type AutoscalingPolicyCustomMetricUtilizationArray []AutoscalingPolicyCustomMetricUtilizationInput

func (AutoscalingPolicyCustomMetricUtilizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscalingPolicyCustomMetricUtilization)(nil)).Elem()
}

func (i AutoscalingPolicyCustomMetricUtilizationArray) ToAutoscalingPolicyCustomMetricUtilizationArrayOutput() AutoscalingPolicyCustomMetricUtilizationArrayOutput {
	return i.ToAutoscalingPolicyCustomMetricUtilizationArrayOutputWithContext(context.Background())
}

func (i AutoscalingPolicyCustomMetricUtilizationArray) ToAutoscalingPolicyCustomMetricUtilizationArrayOutputWithContext(ctx context.Context) AutoscalingPolicyCustomMetricUtilizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyCustomMetricUtilizationArrayOutput)
}

// Custom utilization metric policy.
type AutoscalingPolicyCustomMetricUtilizationOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyCustomMetricUtilizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyCustomMetricUtilization)(nil)).Elem()
}

func (o AutoscalingPolicyCustomMetricUtilizationOutput) ToAutoscalingPolicyCustomMetricUtilizationOutput() AutoscalingPolicyCustomMetricUtilizationOutput {
	return o
}

func (o AutoscalingPolicyCustomMetricUtilizationOutput) ToAutoscalingPolicyCustomMetricUtilizationOutputWithContext(ctx context.Context) AutoscalingPolicyCustomMetricUtilizationOutput {
	return o
}

// A filter string, compatible with a Stackdriver Monitoring filter string for TimeSeries.list API call. This filter is used to select a specific TimeSeries for the purpose of autoscaling and to determine whether the metric is exporting per-instance or per-group data. For the filter to be valid for autoscaling purposes, the following rules apply: - You can only use the AND operator for joining selectors. - You can only use direct equality comparison operator (=) without any functions for each selector. - You can specify the metric in both the filter string and in the metric field. However, if specified in both places, the metric must be identical. - The monitored resource type determines what kind of values are expected for the metric. If it is a gce_instance, the autoscaler expects the metric to include a separate TimeSeries for each instance in a group. In such a case, you cannot filter on resource labels. If the resource type is any other value, the autoscaler expects this metric to contain values that apply to the entire autoscaled instance group and resource label filtering can be performed to point autoscaler at the correct TimeSeries to scale upon. This is called a *per-group metric* for the purpose of autoscaling. If not specified, the type defaults to gce_instance. Try to provide a filter that is selective enough to pick just one TimeSeries for the autoscaled group or for each of the instances (if you are using gce_instance resource type). If multiple TimeSeries are returned upon the query execution, the autoscaler will sum their respective values to obtain its scaling value.
func (o AutoscalingPolicyCustomMetricUtilizationOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyCustomMetricUtilization) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values. The metric must have a value type of INT64 or DOUBLE.
func (o AutoscalingPolicyCustomMetricUtilizationOutput) Metric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyCustomMetricUtilization) *string { return v.Metric }).(pulumi.StringPtrOutput)
}

// If scaling is based on a per-group metric value that represents the total amount of work to be done or resource usage, set this value to an amount assigned for a single instance of the scaled group. Autoscaler keeps the number of instances proportional to the value of this metric. The metric itself does not change value due to group resizing. A good metric to use with the target is for example pubsub.googleapis.com/subscription/num_undelivered_messages or a custom metric exporting the total number of requests coming to your instances. A bad example would be a metric exporting an average or median latency, since this value can't include a chunk assignable to a single instance, it could be better used with utilization_target instead.
func (o AutoscalingPolicyCustomMetricUtilizationOutput) SingleInstanceAssignment() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyCustomMetricUtilization) *float64 { return v.SingleInstanceAssignment }).(pulumi.Float64PtrOutput)
}

// The target value of the metric that autoscaler maintains. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric. For example, a good metric to use as a utilization_target is https://www.googleapis.com/compute/v1/instance/network/received_bytes_count. The autoscaler works to keep this value constant for each of the instances.
func (o AutoscalingPolicyCustomMetricUtilizationOutput) UtilizationTarget() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyCustomMetricUtilization) *float64 { return v.UtilizationTarget }).(pulumi.Float64PtrOutput)
}

// Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE.
func (o AutoscalingPolicyCustomMetricUtilizationOutput) UtilizationTargetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyCustomMetricUtilization) *string { return v.UtilizationTargetType }).(pulumi.StringPtrOutput)
}

type AutoscalingPolicyCustomMetricUtilizationArrayOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyCustomMetricUtilizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscalingPolicyCustomMetricUtilization)(nil)).Elem()
}

func (o AutoscalingPolicyCustomMetricUtilizationArrayOutput) ToAutoscalingPolicyCustomMetricUtilizationArrayOutput() AutoscalingPolicyCustomMetricUtilizationArrayOutput {
	return o
}

func (o AutoscalingPolicyCustomMetricUtilizationArrayOutput) ToAutoscalingPolicyCustomMetricUtilizationArrayOutputWithContext(ctx context.Context) AutoscalingPolicyCustomMetricUtilizationArrayOutput {
	return o
}

func (o AutoscalingPolicyCustomMetricUtilizationArrayOutput) Index(i pulumi.IntInput) AutoscalingPolicyCustomMetricUtilizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscalingPolicyCustomMetricUtilization {
		return vs[0].([]AutoscalingPolicyCustomMetricUtilization)[vs[1].(int)]
	}).(AutoscalingPolicyCustomMetricUtilizationOutput)
}

// Custom utilization metric policy.
type AutoscalingPolicyCustomMetricUtilizationResponse struct {
	// A filter string, compatible with a Stackdriver Monitoring filter string for TimeSeries.list API call. This filter is used to select a specific TimeSeries for the purpose of autoscaling and to determine whether the metric is exporting per-instance or per-group data. For the filter to be valid for autoscaling purposes, the following rules apply: - You can only use the AND operator for joining selectors. - You can only use direct equality comparison operator (=) without any functions for each selector. - You can specify the metric in both the filter string and in the metric field. However, if specified in both places, the metric must be identical. - The monitored resource type determines what kind of values are expected for the metric. If it is a gce_instance, the autoscaler expects the metric to include a separate TimeSeries for each instance in a group. In such a case, you cannot filter on resource labels. If the resource type is any other value, the autoscaler expects this metric to contain values that apply to the entire autoscaled instance group and resource label filtering can be performed to point autoscaler at the correct TimeSeries to scale upon. This is called a *per-group metric* for the purpose of autoscaling. If not specified, the type defaults to gce_instance. Try to provide a filter that is selective enough to pick just one TimeSeries for the autoscaled group or for each of the instances (if you are using gce_instance resource type). If multiple TimeSeries are returned upon the query execution, the autoscaler will sum their respective values to obtain its scaling value.
	Filter string `pulumi:"filter"`
	// The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values. The metric must have a value type of INT64 or DOUBLE.
	Metric string `pulumi:"metric"`
	// If scaling is based on a per-group metric value that represents the total amount of work to be done or resource usage, set this value to an amount assigned for a single instance of the scaled group. Autoscaler keeps the number of instances proportional to the value of this metric. The metric itself does not change value due to group resizing. A good metric to use with the target is for example pubsub.googleapis.com/subscription/num_undelivered_messages or a custom metric exporting the total number of requests coming to your instances. A bad example would be a metric exporting an average or median latency, since this value can't include a chunk assignable to a single instance, it could be better used with utilization_target instead.
	SingleInstanceAssignment float64 `pulumi:"singleInstanceAssignment"`
	// The target value of the metric that autoscaler maintains. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric. For example, a good metric to use as a utilization_target is https://www.googleapis.com/compute/v1/instance/network/received_bytes_count. The autoscaler works to keep this value constant for each of the instances.
	UtilizationTarget float64 `pulumi:"utilizationTarget"`
	// Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE.
	UtilizationTargetType string `pulumi:"utilizationTargetType"`
}

// AutoscalingPolicyCustomMetricUtilizationResponseInput is an input type that accepts AutoscalingPolicyCustomMetricUtilizationResponseArgs and AutoscalingPolicyCustomMetricUtilizationResponseOutput values.
// You can construct a concrete instance of `AutoscalingPolicyCustomMetricUtilizationResponseInput` via:
//
//          AutoscalingPolicyCustomMetricUtilizationResponseArgs{...}
type AutoscalingPolicyCustomMetricUtilizationResponseInput interface {
	pulumi.Input

	ToAutoscalingPolicyCustomMetricUtilizationResponseOutput() AutoscalingPolicyCustomMetricUtilizationResponseOutput
	ToAutoscalingPolicyCustomMetricUtilizationResponseOutputWithContext(context.Context) AutoscalingPolicyCustomMetricUtilizationResponseOutput
}

// Custom utilization metric policy.
type AutoscalingPolicyCustomMetricUtilizationResponseArgs struct {
	// A filter string, compatible with a Stackdriver Monitoring filter string for TimeSeries.list API call. This filter is used to select a specific TimeSeries for the purpose of autoscaling and to determine whether the metric is exporting per-instance or per-group data. For the filter to be valid for autoscaling purposes, the following rules apply: - You can only use the AND operator for joining selectors. - You can only use direct equality comparison operator (=) without any functions for each selector. - You can specify the metric in both the filter string and in the metric field. However, if specified in both places, the metric must be identical. - The monitored resource type determines what kind of values are expected for the metric. If it is a gce_instance, the autoscaler expects the metric to include a separate TimeSeries for each instance in a group. In such a case, you cannot filter on resource labels. If the resource type is any other value, the autoscaler expects this metric to contain values that apply to the entire autoscaled instance group and resource label filtering can be performed to point autoscaler at the correct TimeSeries to scale upon. This is called a *per-group metric* for the purpose of autoscaling. If not specified, the type defaults to gce_instance. Try to provide a filter that is selective enough to pick just one TimeSeries for the autoscaled group or for each of the instances (if you are using gce_instance resource type). If multiple TimeSeries are returned upon the query execution, the autoscaler will sum their respective values to obtain its scaling value.
	Filter pulumi.StringInput `pulumi:"filter"`
	// The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values. The metric must have a value type of INT64 or DOUBLE.
	Metric pulumi.StringInput `pulumi:"metric"`
	// If scaling is based on a per-group metric value that represents the total amount of work to be done or resource usage, set this value to an amount assigned for a single instance of the scaled group. Autoscaler keeps the number of instances proportional to the value of this metric. The metric itself does not change value due to group resizing. A good metric to use with the target is for example pubsub.googleapis.com/subscription/num_undelivered_messages or a custom metric exporting the total number of requests coming to your instances. A bad example would be a metric exporting an average or median latency, since this value can't include a chunk assignable to a single instance, it could be better used with utilization_target instead.
	SingleInstanceAssignment pulumi.Float64Input `pulumi:"singleInstanceAssignment"`
	// The target value of the metric that autoscaler maintains. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric. For example, a good metric to use as a utilization_target is https://www.googleapis.com/compute/v1/instance/network/received_bytes_count. The autoscaler works to keep this value constant for each of the instances.
	UtilizationTarget pulumi.Float64Input `pulumi:"utilizationTarget"`
	// Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE.
	UtilizationTargetType pulumi.StringInput `pulumi:"utilizationTargetType"`
}

func (AutoscalingPolicyCustomMetricUtilizationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyCustomMetricUtilizationResponse)(nil)).Elem()
}

func (i AutoscalingPolicyCustomMetricUtilizationResponseArgs) ToAutoscalingPolicyCustomMetricUtilizationResponseOutput() AutoscalingPolicyCustomMetricUtilizationResponseOutput {
	return i.ToAutoscalingPolicyCustomMetricUtilizationResponseOutputWithContext(context.Background())
}

func (i AutoscalingPolicyCustomMetricUtilizationResponseArgs) ToAutoscalingPolicyCustomMetricUtilizationResponseOutputWithContext(ctx context.Context) AutoscalingPolicyCustomMetricUtilizationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyCustomMetricUtilizationResponseOutput)
}

// AutoscalingPolicyCustomMetricUtilizationResponseArrayInput is an input type that accepts AutoscalingPolicyCustomMetricUtilizationResponseArray and AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput values.
// You can construct a concrete instance of `AutoscalingPolicyCustomMetricUtilizationResponseArrayInput` via:
//
//          AutoscalingPolicyCustomMetricUtilizationResponseArray{ AutoscalingPolicyCustomMetricUtilizationResponseArgs{...} }
type AutoscalingPolicyCustomMetricUtilizationResponseArrayInput interface {
	pulumi.Input

	ToAutoscalingPolicyCustomMetricUtilizationResponseArrayOutput() AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput
	ToAutoscalingPolicyCustomMetricUtilizationResponseArrayOutputWithContext(context.Context) AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput
}

type AutoscalingPolicyCustomMetricUtilizationResponseArray []AutoscalingPolicyCustomMetricUtilizationResponseInput

func (AutoscalingPolicyCustomMetricUtilizationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscalingPolicyCustomMetricUtilizationResponse)(nil)).Elem()
}

func (i AutoscalingPolicyCustomMetricUtilizationResponseArray) ToAutoscalingPolicyCustomMetricUtilizationResponseArrayOutput() AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput {
	return i.ToAutoscalingPolicyCustomMetricUtilizationResponseArrayOutputWithContext(context.Background())
}

func (i AutoscalingPolicyCustomMetricUtilizationResponseArray) ToAutoscalingPolicyCustomMetricUtilizationResponseArrayOutputWithContext(ctx context.Context) AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput)
}

// Custom utilization metric policy.
type AutoscalingPolicyCustomMetricUtilizationResponseOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyCustomMetricUtilizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyCustomMetricUtilizationResponse)(nil)).Elem()
}

func (o AutoscalingPolicyCustomMetricUtilizationResponseOutput) ToAutoscalingPolicyCustomMetricUtilizationResponseOutput() AutoscalingPolicyCustomMetricUtilizationResponseOutput {
	return o
}

func (o AutoscalingPolicyCustomMetricUtilizationResponseOutput) ToAutoscalingPolicyCustomMetricUtilizationResponseOutputWithContext(ctx context.Context) AutoscalingPolicyCustomMetricUtilizationResponseOutput {
	return o
}

// A filter string, compatible with a Stackdriver Monitoring filter string for TimeSeries.list API call. This filter is used to select a specific TimeSeries for the purpose of autoscaling and to determine whether the metric is exporting per-instance or per-group data. For the filter to be valid for autoscaling purposes, the following rules apply: - You can only use the AND operator for joining selectors. - You can only use direct equality comparison operator (=) without any functions for each selector. - You can specify the metric in both the filter string and in the metric field. However, if specified in both places, the metric must be identical. - The monitored resource type determines what kind of values are expected for the metric. If it is a gce_instance, the autoscaler expects the metric to include a separate TimeSeries for each instance in a group. In such a case, you cannot filter on resource labels. If the resource type is any other value, the autoscaler expects this metric to contain values that apply to the entire autoscaled instance group and resource label filtering can be performed to point autoscaler at the correct TimeSeries to scale upon. This is called a *per-group metric* for the purpose of autoscaling. If not specified, the type defaults to gce_instance. Try to provide a filter that is selective enough to pick just one TimeSeries for the autoscaled group or for each of the instances (if you are using gce_instance resource type). If multiple TimeSeries are returned upon the query execution, the autoscaler will sum their respective values to obtain its scaling value.
func (o AutoscalingPolicyCustomMetricUtilizationResponseOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscalingPolicyCustomMetricUtilizationResponse) string { return v.Filter }).(pulumi.StringOutput)
}

// The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values. The metric must have a value type of INT64 or DOUBLE.
func (o AutoscalingPolicyCustomMetricUtilizationResponseOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscalingPolicyCustomMetricUtilizationResponse) string { return v.Metric }).(pulumi.StringOutput)
}

// If scaling is based on a per-group metric value that represents the total amount of work to be done or resource usage, set this value to an amount assigned for a single instance of the scaled group. Autoscaler keeps the number of instances proportional to the value of this metric. The metric itself does not change value due to group resizing. A good metric to use with the target is for example pubsub.googleapis.com/subscription/num_undelivered_messages or a custom metric exporting the total number of requests coming to your instances. A bad example would be a metric exporting an average or median latency, since this value can't include a chunk assignable to a single instance, it could be better used with utilization_target instead.
func (o AutoscalingPolicyCustomMetricUtilizationResponseOutput) SingleInstanceAssignment() pulumi.Float64Output {
	return o.ApplyT(func(v AutoscalingPolicyCustomMetricUtilizationResponse) float64 { return v.SingleInstanceAssignment }).(pulumi.Float64Output)
}

// The target value of the metric that autoscaler maintains. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric. For example, a good metric to use as a utilization_target is https://www.googleapis.com/compute/v1/instance/network/received_bytes_count. The autoscaler works to keep this value constant for each of the instances.
func (o AutoscalingPolicyCustomMetricUtilizationResponseOutput) UtilizationTarget() pulumi.Float64Output {
	return o.ApplyT(func(v AutoscalingPolicyCustomMetricUtilizationResponse) float64 { return v.UtilizationTarget }).(pulumi.Float64Output)
}

// Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE.
func (o AutoscalingPolicyCustomMetricUtilizationResponseOutput) UtilizationTargetType() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscalingPolicyCustomMetricUtilizationResponse) string { return v.UtilizationTargetType }).(pulumi.StringOutput)
}

type AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscalingPolicyCustomMetricUtilizationResponse)(nil)).Elem()
}

func (o AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput) ToAutoscalingPolicyCustomMetricUtilizationResponseArrayOutput() AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput {
	return o
}

func (o AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput) ToAutoscalingPolicyCustomMetricUtilizationResponseArrayOutputWithContext(ctx context.Context) AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput {
	return o
}

func (o AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput) Index(i pulumi.IntInput) AutoscalingPolicyCustomMetricUtilizationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscalingPolicyCustomMetricUtilizationResponse {
		return vs[0].([]AutoscalingPolicyCustomMetricUtilizationResponse)[vs[1].(int)]
	}).(AutoscalingPolicyCustomMetricUtilizationResponseOutput)
}

// Configuration parameters of autoscaling based on load balancing.
type AutoscalingPolicyLoadBalancingUtilization struct {
	// Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that the autoscaler maintains. Must be a positive float value. If not defined, the default is 0.8.
	UtilizationTarget *float64 `pulumi:"utilizationTarget"`
}

// AutoscalingPolicyLoadBalancingUtilizationInput is an input type that accepts AutoscalingPolicyLoadBalancingUtilizationArgs and AutoscalingPolicyLoadBalancingUtilizationOutput values.
// You can construct a concrete instance of `AutoscalingPolicyLoadBalancingUtilizationInput` via:
//
//          AutoscalingPolicyLoadBalancingUtilizationArgs{...}
type AutoscalingPolicyLoadBalancingUtilizationInput interface {
	pulumi.Input

	ToAutoscalingPolicyLoadBalancingUtilizationOutput() AutoscalingPolicyLoadBalancingUtilizationOutput
	ToAutoscalingPolicyLoadBalancingUtilizationOutputWithContext(context.Context) AutoscalingPolicyLoadBalancingUtilizationOutput
}

// Configuration parameters of autoscaling based on load balancing.
type AutoscalingPolicyLoadBalancingUtilizationArgs struct {
	// Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that the autoscaler maintains. Must be a positive float value. If not defined, the default is 0.8.
	UtilizationTarget pulumi.Float64PtrInput `pulumi:"utilizationTarget"`
}

func (AutoscalingPolicyLoadBalancingUtilizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyLoadBalancingUtilization)(nil)).Elem()
}

func (i AutoscalingPolicyLoadBalancingUtilizationArgs) ToAutoscalingPolicyLoadBalancingUtilizationOutput() AutoscalingPolicyLoadBalancingUtilizationOutput {
	return i.ToAutoscalingPolicyLoadBalancingUtilizationOutputWithContext(context.Background())
}

func (i AutoscalingPolicyLoadBalancingUtilizationArgs) ToAutoscalingPolicyLoadBalancingUtilizationOutputWithContext(ctx context.Context) AutoscalingPolicyLoadBalancingUtilizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyLoadBalancingUtilizationOutput)
}

func (i AutoscalingPolicyLoadBalancingUtilizationArgs) ToAutoscalingPolicyLoadBalancingUtilizationPtrOutput() AutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return i.ToAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(context.Background())
}

func (i AutoscalingPolicyLoadBalancingUtilizationArgs) ToAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx context.Context) AutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyLoadBalancingUtilizationOutput).ToAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx)
}

// AutoscalingPolicyLoadBalancingUtilizationPtrInput is an input type that accepts AutoscalingPolicyLoadBalancingUtilizationArgs, AutoscalingPolicyLoadBalancingUtilizationPtr and AutoscalingPolicyLoadBalancingUtilizationPtrOutput values.
// You can construct a concrete instance of `AutoscalingPolicyLoadBalancingUtilizationPtrInput` via:
//
//          AutoscalingPolicyLoadBalancingUtilizationArgs{...}
//
//  or:
//
//          nil
type AutoscalingPolicyLoadBalancingUtilizationPtrInput interface {
	pulumi.Input

	ToAutoscalingPolicyLoadBalancingUtilizationPtrOutput() AutoscalingPolicyLoadBalancingUtilizationPtrOutput
	ToAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(context.Context) AutoscalingPolicyLoadBalancingUtilizationPtrOutput
}

type autoscalingPolicyLoadBalancingUtilizationPtrType AutoscalingPolicyLoadBalancingUtilizationArgs

func AutoscalingPolicyLoadBalancingUtilizationPtr(v *AutoscalingPolicyLoadBalancingUtilizationArgs) AutoscalingPolicyLoadBalancingUtilizationPtrInput {
	return (*autoscalingPolicyLoadBalancingUtilizationPtrType)(v)
}

func (*autoscalingPolicyLoadBalancingUtilizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicyLoadBalancingUtilization)(nil)).Elem()
}

func (i *autoscalingPolicyLoadBalancingUtilizationPtrType) ToAutoscalingPolicyLoadBalancingUtilizationPtrOutput() AutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return i.ToAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(context.Background())
}

func (i *autoscalingPolicyLoadBalancingUtilizationPtrType) ToAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx context.Context) AutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyLoadBalancingUtilizationPtrOutput)
}

// Configuration parameters of autoscaling based on load balancing.
type AutoscalingPolicyLoadBalancingUtilizationOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyLoadBalancingUtilizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyLoadBalancingUtilization)(nil)).Elem()
}

func (o AutoscalingPolicyLoadBalancingUtilizationOutput) ToAutoscalingPolicyLoadBalancingUtilizationOutput() AutoscalingPolicyLoadBalancingUtilizationOutput {
	return o
}

func (o AutoscalingPolicyLoadBalancingUtilizationOutput) ToAutoscalingPolicyLoadBalancingUtilizationOutputWithContext(ctx context.Context) AutoscalingPolicyLoadBalancingUtilizationOutput {
	return o
}

func (o AutoscalingPolicyLoadBalancingUtilizationOutput) ToAutoscalingPolicyLoadBalancingUtilizationPtrOutput() AutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o.ToAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(context.Background())
}

func (o AutoscalingPolicyLoadBalancingUtilizationOutput) ToAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx context.Context) AutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyLoadBalancingUtilization) *AutoscalingPolicyLoadBalancingUtilization {
		return &v
	}).(AutoscalingPolicyLoadBalancingUtilizationPtrOutput)
}

// Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that the autoscaler maintains. Must be a positive float value. If not defined, the default is 0.8.
func (o AutoscalingPolicyLoadBalancingUtilizationOutput) UtilizationTarget() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyLoadBalancingUtilization) *float64 { return v.UtilizationTarget }).(pulumi.Float64PtrOutput)
}

type AutoscalingPolicyLoadBalancingUtilizationPtrOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyLoadBalancingUtilizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicyLoadBalancingUtilization)(nil)).Elem()
}

func (o AutoscalingPolicyLoadBalancingUtilizationPtrOutput) ToAutoscalingPolicyLoadBalancingUtilizationPtrOutput() AutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o
}

func (o AutoscalingPolicyLoadBalancingUtilizationPtrOutput) ToAutoscalingPolicyLoadBalancingUtilizationPtrOutputWithContext(ctx context.Context) AutoscalingPolicyLoadBalancingUtilizationPtrOutput {
	return o
}

func (o AutoscalingPolicyLoadBalancingUtilizationPtrOutput) Elem() AutoscalingPolicyLoadBalancingUtilizationOutput {
	return o.ApplyT(func(v *AutoscalingPolicyLoadBalancingUtilization) AutoscalingPolicyLoadBalancingUtilization {
		return *v
	}).(AutoscalingPolicyLoadBalancingUtilizationOutput)
}

// Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that the autoscaler maintains. Must be a positive float value. If not defined, the default is 0.8.
func (o AutoscalingPolicyLoadBalancingUtilizationPtrOutput) UtilizationTarget() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyLoadBalancingUtilization) *float64 {
		if v == nil {
			return nil
		}
		return v.UtilizationTarget
	}).(pulumi.Float64PtrOutput)
}

// Configuration parameters of autoscaling based on load balancing.
type AutoscalingPolicyLoadBalancingUtilizationResponse struct {
	// Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that the autoscaler maintains. Must be a positive float value. If not defined, the default is 0.8.
	UtilizationTarget float64 `pulumi:"utilizationTarget"`
}

// AutoscalingPolicyLoadBalancingUtilizationResponseInput is an input type that accepts AutoscalingPolicyLoadBalancingUtilizationResponseArgs and AutoscalingPolicyLoadBalancingUtilizationResponseOutput values.
// You can construct a concrete instance of `AutoscalingPolicyLoadBalancingUtilizationResponseInput` via:
//
//          AutoscalingPolicyLoadBalancingUtilizationResponseArgs{...}
type AutoscalingPolicyLoadBalancingUtilizationResponseInput interface {
	pulumi.Input

	ToAutoscalingPolicyLoadBalancingUtilizationResponseOutput() AutoscalingPolicyLoadBalancingUtilizationResponseOutput
	ToAutoscalingPolicyLoadBalancingUtilizationResponseOutputWithContext(context.Context) AutoscalingPolicyLoadBalancingUtilizationResponseOutput
}

// Configuration parameters of autoscaling based on load balancing.
type AutoscalingPolicyLoadBalancingUtilizationResponseArgs struct {
	// Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that the autoscaler maintains. Must be a positive float value. If not defined, the default is 0.8.
	UtilizationTarget pulumi.Float64Input `pulumi:"utilizationTarget"`
}

func (AutoscalingPolicyLoadBalancingUtilizationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyLoadBalancingUtilizationResponse)(nil)).Elem()
}

func (i AutoscalingPolicyLoadBalancingUtilizationResponseArgs) ToAutoscalingPolicyLoadBalancingUtilizationResponseOutput() AutoscalingPolicyLoadBalancingUtilizationResponseOutput {
	return i.ToAutoscalingPolicyLoadBalancingUtilizationResponseOutputWithContext(context.Background())
}

func (i AutoscalingPolicyLoadBalancingUtilizationResponseArgs) ToAutoscalingPolicyLoadBalancingUtilizationResponseOutputWithContext(ctx context.Context) AutoscalingPolicyLoadBalancingUtilizationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyLoadBalancingUtilizationResponseOutput)
}

func (i AutoscalingPolicyLoadBalancingUtilizationResponseArgs) ToAutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput() AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput {
	return i.ToAutoscalingPolicyLoadBalancingUtilizationResponsePtrOutputWithContext(context.Background())
}

func (i AutoscalingPolicyLoadBalancingUtilizationResponseArgs) ToAutoscalingPolicyLoadBalancingUtilizationResponsePtrOutputWithContext(ctx context.Context) AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyLoadBalancingUtilizationResponseOutput).ToAutoscalingPolicyLoadBalancingUtilizationResponsePtrOutputWithContext(ctx)
}

// AutoscalingPolicyLoadBalancingUtilizationResponsePtrInput is an input type that accepts AutoscalingPolicyLoadBalancingUtilizationResponseArgs, AutoscalingPolicyLoadBalancingUtilizationResponsePtr and AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput values.
// You can construct a concrete instance of `AutoscalingPolicyLoadBalancingUtilizationResponsePtrInput` via:
//
//          AutoscalingPolicyLoadBalancingUtilizationResponseArgs{...}
//
//  or:
//
//          nil
type AutoscalingPolicyLoadBalancingUtilizationResponsePtrInput interface {
	pulumi.Input

	ToAutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput() AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput
	ToAutoscalingPolicyLoadBalancingUtilizationResponsePtrOutputWithContext(context.Context) AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput
}

type autoscalingPolicyLoadBalancingUtilizationResponsePtrType AutoscalingPolicyLoadBalancingUtilizationResponseArgs

func AutoscalingPolicyLoadBalancingUtilizationResponsePtr(v *AutoscalingPolicyLoadBalancingUtilizationResponseArgs) AutoscalingPolicyLoadBalancingUtilizationResponsePtrInput {
	return (*autoscalingPolicyLoadBalancingUtilizationResponsePtrType)(v)
}

func (*autoscalingPolicyLoadBalancingUtilizationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicyLoadBalancingUtilizationResponse)(nil)).Elem()
}

func (i *autoscalingPolicyLoadBalancingUtilizationResponsePtrType) ToAutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput() AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput {
	return i.ToAutoscalingPolicyLoadBalancingUtilizationResponsePtrOutputWithContext(context.Background())
}

func (i *autoscalingPolicyLoadBalancingUtilizationResponsePtrType) ToAutoscalingPolicyLoadBalancingUtilizationResponsePtrOutputWithContext(ctx context.Context) AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput)
}

// Configuration parameters of autoscaling based on load balancing.
type AutoscalingPolicyLoadBalancingUtilizationResponseOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyLoadBalancingUtilizationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyLoadBalancingUtilizationResponse)(nil)).Elem()
}

func (o AutoscalingPolicyLoadBalancingUtilizationResponseOutput) ToAutoscalingPolicyLoadBalancingUtilizationResponseOutput() AutoscalingPolicyLoadBalancingUtilizationResponseOutput {
	return o
}

func (o AutoscalingPolicyLoadBalancingUtilizationResponseOutput) ToAutoscalingPolicyLoadBalancingUtilizationResponseOutputWithContext(ctx context.Context) AutoscalingPolicyLoadBalancingUtilizationResponseOutput {
	return o
}

func (o AutoscalingPolicyLoadBalancingUtilizationResponseOutput) ToAutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput() AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput {
	return o.ToAutoscalingPolicyLoadBalancingUtilizationResponsePtrOutputWithContext(context.Background())
}

func (o AutoscalingPolicyLoadBalancingUtilizationResponseOutput) ToAutoscalingPolicyLoadBalancingUtilizationResponsePtrOutputWithContext(ctx context.Context) AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyLoadBalancingUtilizationResponse) *AutoscalingPolicyLoadBalancingUtilizationResponse {
		return &v
	}).(AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput)
}

// Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that the autoscaler maintains. Must be a positive float value. If not defined, the default is 0.8.
func (o AutoscalingPolicyLoadBalancingUtilizationResponseOutput) UtilizationTarget() pulumi.Float64Output {
	return o.ApplyT(func(v AutoscalingPolicyLoadBalancingUtilizationResponse) float64 { return v.UtilizationTarget }).(pulumi.Float64Output)
}

type AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicyLoadBalancingUtilizationResponse)(nil)).Elem()
}

func (o AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput) ToAutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput() AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput {
	return o
}

func (o AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput) ToAutoscalingPolicyLoadBalancingUtilizationResponsePtrOutputWithContext(ctx context.Context) AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput {
	return o
}

func (o AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput) Elem() AutoscalingPolicyLoadBalancingUtilizationResponseOutput {
	return o.ApplyT(func(v *AutoscalingPolicyLoadBalancingUtilizationResponse) AutoscalingPolicyLoadBalancingUtilizationResponse {
		return *v
	}).(AutoscalingPolicyLoadBalancingUtilizationResponseOutput)
}

// Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that the autoscaler maintains. Must be a positive float value. If not defined, the default is 0.8.
func (o AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput) UtilizationTarget() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyLoadBalancingUtilizationResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.UtilizationTarget
	}).(pulumi.Float64PtrOutput)
}

// Cloud Autoscaler policy.
type AutoscalingPolicyResponse struct {
	// The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
	CoolDownPeriodSec int `pulumi:"coolDownPeriodSec"`
	// Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
	CpuUtilization AutoscalingPolicyCpuUtilizationResponse `pulumi:"cpuUtilization"`
	// Configuration parameters of autoscaling based on a custom metric.
	CustomMetricUtilizations []AutoscalingPolicyCustomMetricUtilizationResponse `pulumi:"customMetricUtilizations"`
	// Configuration parameters of autoscaling based on load balancer.
	LoadBalancingUtilization AutoscalingPolicyLoadBalancingUtilizationResponse `pulumi:"loadBalancingUtilization"`
	// The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
	MaxNumReplicas int `pulumi:"maxNumReplicas"`
	// The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
	MinNumReplicas int `pulumi:"minNumReplicas"`
	// Defines operating mode for this policy.
	Mode           string                                  `pulumi:"mode"`
	ScaleInControl AutoscalingPolicyScaleInControlResponse `pulumi:"scaleInControl"`
	// Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
	ScalingSchedules map[string]string `pulumi:"scalingSchedules"`
}

// AutoscalingPolicyResponseInput is an input type that accepts AutoscalingPolicyResponseArgs and AutoscalingPolicyResponseOutput values.
// You can construct a concrete instance of `AutoscalingPolicyResponseInput` via:
//
//          AutoscalingPolicyResponseArgs{...}
type AutoscalingPolicyResponseInput interface {
	pulumi.Input

	ToAutoscalingPolicyResponseOutput() AutoscalingPolicyResponseOutput
	ToAutoscalingPolicyResponseOutputWithContext(context.Context) AutoscalingPolicyResponseOutput
}

// Cloud Autoscaler policy.
type AutoscalingPolicyResponseArgs struct {
	// The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
	CoolDownPeriodSec pulumi.IntInput `pulumi:"coolDownPeriodSec"`
	// Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
	CpuUtilization AutoscalingPolicyCpuUtilizationResponseInput `pulumi:"cpuUtilization"`
	// Configuration parameters of autoscaling based on a custom metric.
	CustomMetricUtilizations AutoscalingPolicyCustomMetricUtilizationResponseArrayInput `pulumi:"customMetricUtilizations"`
	// Configuration parameters of autoscaling based on load balancer.
	LoadBalancingUtilization AutoscalingPolicyLoadBalancingUtilizationResponseInput `pulumi:"loadBalancingUtilization"`
	// The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
	MaxNumReplicas pulumi.IntInput `pulumi:"maxNumReplicas"`
	// The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
	MinNumReplicas pulumi.IntInput `pulumi:"minNumReplicas"`
	// Defines operating mode for this policy.
	Mode           pulumi.StringInput                           `pulumi:"mode"`
	ScaleInControl AutoscalingPolicyScaleInControlResponseInput `pulumi:"scaleInControl"`
	// Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
	ScalingSchedules pulumi.StringMapInput `pulumi:"scalingSchedules"`
}

func (AutoscalingPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyResponse)(nil)).Elem()
}

func (i AutoscalingPolicyResponseArgs) ToAutoscalingPolicyResponseOutput() AutoscalingPolicyResponseOutput {
	return i.ToAutoscalingPolicyResponseOutputWithContext(context.Background())
}

func (i AutoscalingPolicyResponseArgs) ToAutoscalingPolicyResponseOutputWithContext(ctx context.Context) AutoscalingPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyResponseOutput)
}

func (i AutoscalingPolicyResponseArgs) ToAutoscalingPolicyResponsePtrOutput() AutoscalingPolicyResponsePtrOutput {
	return i.ToAutoscalingPolicyResponsePtrOutputWithContext(context.Background())
}

func (i AutoscalingPolicyResponseArgs) ToAutoscalingPolicyResponsePtrOutputWithContext(ctx context.Context) AutoscalingPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyResponseOutput).ToAutoscalingPolicyResponsePtrOutputWithContext(ctx)
}

// AutoscalingPolicyResponsePtrInput is an input type that accepts AutoscalingPolicyResponseArgs, AutoscalingPolicyResponsePtr and AutoscalingPolicyResponsePtrOutput values.
// You can construct a concrete instance of `AutoscalingPolicyResponsePtrInput` via:
//
//          AutoscalingPolicyResponseArgs{...}
//
//  or:
//
//          nil
type AutoscalingPolicyResponsePtrInput interface {
	pulumi.Input

	ToAutoscalingPolicyResponsePtrOutput() AutoscalingPolicyResponsePtrOutput
	ToAutoscalingPolicyResponsePtrOutputWithContext(context.Context) AutoscalingPolicyResponsePtrOutput
}

type autoscalingPolicyResponsePtrType AutoscalingPolicyResponseArgs

func AutoscalingPolicyResponsePtr(v *AutoscalingPolicyResponseArgs) AutoscalingPolicyResponsePtrInput {
	return (*autoscalingPolicyResponsePtrType)(v)
}

func (*autoscalingPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicyResponse)(nil)).Elem()
}

func (i *autoscalingPolicyResponsePtrType) ToAutoscalingPolicyResponsePtrOutput() AutoscalingPolicyResponsePtrOutput {
	return i.ToAutoscalingPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *autoscalingPolicyResponsePtrType) ToAutoscalingPolicyResponsePtrOutputWithContext(ctx context.Context) AutoscalingPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyResponsePtrOutput)
}

// Cloud Autoscaler policy.
type AutoscalingPolicyResponseOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyResponse)(nil)).Elem()
}

func (o AutoscalingPolicyResponseOutput) ToAutoscalingPolicyResponseOutput() AutoscalingPolicyResponseOutput {
	return o
}

func (o AutoscalingPolicyResponseOutput) ToAutoscalingPolicyResponseOutputWithContext(ctx context.Context) AutoscalingPolicyResponseOutput {
	return o
}

func (o AutoscalingPolicyResponseOutput) ToAutoscalingPolicyResponsePtrOutput() AutoscalingPolicyResponsePtrOutput {
	return o.ToAutoscalingPolicyResponsePtrOutputWithContext(context.Background())
}

func (o AutoscalingPolicyResponseOutput) ToAutoscalingPolicyResponsePtrOutputWithContext(ctx context.Context) AutoscalingPolicyResponsePtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyResponse) *AutoscalingPolicyResponse {
		return &v
	}).(AutoscalingPolicyResponsePtrOutput)
}

// The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
func (o AutoscalingPolicyResponseOutput) CoolDownPeriodSec() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalingPolicyResponse) int { return v.CoolDownPeriodSec }).(pulumi.IntOutput)
}

// Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
func (o AutoscalingPolicyResponseOutput) CpuUtilization() AutoscalingPolicyCpuUtilizationResponseOutput {
	return o.ApplyT(func(v AutoscalingPolicyResponse) AutoscalingPolicyCpuUtilizationResponse { return v.CpuUtilization }).(AutoscalingPolicyCpuUtilizationResponseOutput)
}

// Configuration parameters of autoscaling based on a custom metric.
func (o AutoscalingPolicyResponseOutput) CustomMetricUtilizations() AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput {
	return o.ApplyT(func(v AutoscalingPolicyResponse) []AutoscalingPolicyCustomMetricUtilizationResponse {
		return v.CustomMetricUtilizations
	}).(AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput)
}

// Configuration parameters of autoscaling based on load balancer.
func (o AutoscalingPolicyResponseOutput) LoadBalancingUtilization() AutoscalingPolicyLoadBalancingUtilizationResponseOutput {
	return o.ApplyT(func(v AutoscalingPolicyResponse) AutoscalingPolicyLoadBalancingUtilizationResponse {
		return v.LoadBalancingUtilization
	}).(AutoscalingPolicyLoadBalancingUtilizationResponseOutput)
}

// The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
func (o AutoscalingPolicyResponseOutput) MaxNumReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalingPolicyResponse) int { return v.MaxNumReplicas }).(pulumi.IntOutput)
}

// The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
func (o AutoscalingPolicyResponseOutput) MinNumReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalingPolicyResponse) int { return v.MinNumReplicas }).(pulumi.IntOutput)
}

// Defines operating mode for this policy.
func (o AutoscalingPolicyResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscalingPolicyResponse) string { return v.Mode }).(pulumi.StringOutput)
}

func (o AutoscalingPolicyResponseOutput) ScaleInControl() AutoscalingPolicyScaleInControlResponseOutput {
	return o.ApplyT(func(v AutoscalingPolicyResponse) AutoscalingPolicyScaleInControlResponse { return v.ScaleInControl }).(AutoscalingPolicyScaleInControlResponseOutput)
}

// Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
func (o AutoscalingPolicyResponseOutput) ScalingSchedules() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoscalingPolicyResponse) map[string]string { return v.ScalingSchedules }).(pulumi.StringMapOutput)
}

type AutoscalingPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicyResponse)(nil)).Elem()
}

func (o AutoscalingPolicyResponsePtrOutput) ToAutoscalingPolicyResponsePtrOutput() AutoscalingPolicyResponsePtrOutput {
	return o
}

func (o AutoscalingPolicyResponsePtrOutput) ToAutoscalingPolicyResponsePtrOutputWithContext(ctx context.Context) AutoscalingPolicyResponsePtrOutput {
	return o
}

func (o AutoscalingPolicyResponsePtrOutput) Elem() AutoscalingPolicyResponseOutput {
	return o.ApplyT(func(v *AutoscalingPolicyResponse) AutoscalingPolicyResponse { return *v }).(AutoscalingPolicyResponseOutput)
}

// The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
func (o AutoscalingPolicyResponsePtrOutput) CoolDownPeriodSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.CoolDownPeriodSec
	}).(pulumi.IntPtrOutput)
}

// Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
func (o AutoscalingPolicyResponsePtrOutput) CpuUtilization() AutoscalingPolicyCpuUtilizationResponsePtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyResponse) *AutoscalingPolicyCpuUtilizationResponse {
		if v == nil {
			return nil
		}
		return &v.CpuUtilization
	}).(AutoscalingPolicyCpuUtilizationResponsePtrOutput)
}

// Configuration parameters of autoscaling based on a custom metric.
func (o AutoscalingPolicyResponsePtrOutput) CustomMetricUtilizations() AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput {
	return o.ApplyT(func(v *AutoscalingPolicyResponse) []AutoscalingPolicyCustomMetricUtilizationResponse {
		if v == nil {
			return nil
		}
		return v.CustomMetricUtilizations
	}).(AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput)
}

// Configuration parameters of autoscaling based on load balancer.
func (o AutoscalingPolicyResponsePtrOutput) LoadBalancingUtilization() AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyResponse) *AutoscalingPolicyLoadBalancingUtilizationResponse {
		if v == nil {
			return nil
		}
		return &v.LoadBalancingUtilization
	}).(AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput)
}

// The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
func (o AutoscalingPolicyResponsePtrOutput) MaxNumReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxNumReplicas
	}).(pulumi.IntPtrOutput)
}

// The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
func (o AutoscalingPolicyResponsePtrOutput) MinNumReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MinNumReplicas
	}).(pulumi.IntPtrOutput)
}

// Defines operating mode for this policy.
func (o AutoscalingPolicyResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

func (o AutoscalingPolicyResponsePtrOutput) ScaleInControl() AutoscalingPolicyScaleInControlResponsePtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyResponse) *AutoscalingPolicyScaleInControlResponse {
		if v == nil {
			return nil
		}
		return &v.ScaleInControl
	}).(AutoscalingPolicyScaleInControlResponsePtrOutput)
}

// Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
func (o AutoscalingPolicyResponsePtrOutput) ScalingSchedules() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AutoscalingPolicyResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.ScalingSchedules
	}).(pulumi.StringMapOutput)
}

// Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below.
type AutoscalingPolicyScaleInControl struct {
	// Maximum allowed number (or %) of VMs that can be deducted from the peak recommendation during the window autoscaler looks at when computing recommendations. Possibly all these VMs can be deleted at once so user service needs to be prepared to lose that many VMs in one step.
	MaxScaledInReplicas *FixedOrPercent `pulumi:"maxScaledInReplicas"`
	// How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above.
	TimeWindowSec *int `pulumi:"timeWindowSec"`
}

// AutoscalingPolicyScaleInControlInput is an input type that accepts AutoscalingPolicyScaleInControlArgs and AutoscalingPolicyScaleInControlOutput values.
// You can construct a concrete instance of `AutoscalingPolicyScaleInControlInput` via:
//
//          AutoscalingPolicyScaleInControlArgs{...}
type AutoscalingPolicyScaleInControlInput interface {
	pulumi.Input

	ToAutoscalingPolicyScaleInControlOutput() AutoscalingPolicyScaleInControlOutput
	ToAutoscalingPolicyScaleInControlOutputWithContext(context.Context) AutoscalingPolicyScaleInControlOutput
}

// Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below.
type AutoscalingPolicyScaleInControlArgs struct {
	// Maximum allowed number (or %) of VMs that can be deducted from the peak recommendation during the window autoscaler looks at when computing recommendations. Possibly all these VMs can be deleted at once so user service needs to be prepared to lose that many VMs in one step.
	MaxScaledInReplicas FixedOrPercentPtrInput `pulumi:"maxScaledInReplicas"`
	// How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above.
	TimeWindowSec pulumi.IntPtrInput `pulumi:"timeWindowSec"`
}

func (AutoscalingPolicyScaleInControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyScaleInControl)(nil)).Elem()
}

func (i AutoscalingPolicyScaleInControlArgs) ToAutoscalingPolicyScaleInControlOutput() AutoscalingPolicyScaleInControlOutput {
	return i.ToAutoscalingPolicyScaleInControlOutputWithContext(context.Background())
}

func (i AutoscalingPolicyScaleInControlArgs) ToAutoscalingPolicyScaleInControlOutputWithContext(ctx context.Context) AutoscalingPolicyScaleInControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyScaleInControlOutput)
}

func (i AutoscalingPolicyScaleInControlArgs) ToAutoscalingPolicyScaleInControlPtrOutput() AutoscalingPolicyScaleInControlPtrOutput {
	return i.ToAutoscalingPolicyScaleInControlPtrOutputWithContext(context.Background())
}

func (i AutoscalingPolicyScaleInControlArgs) ToAutoscalingPolicyScaleInControlPtrOutputWithContext(ctx context.Context) AutoscalingPolicyScaleInControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyScaleInControlOutput).ToAutoscalingPolicyScaleInControlPtrOutputWithContext(ctx)
}

// AutoscalingPolicyScaleInControlPtrInput is an input type that accepts AutoscalingPolicyScaleInControlArgs, AutoscalingPolicyScaleInControlPtr and AutoscalingPolicyScaleInControlPtrOutput values.
// You can construct a concrete instance of `AutoscalingPolicyScaleInControlPtrInput` via:
//
//          AutoscalingPolicyScaleInControlArgs{...}
//
//  or:
//
//          nil
type AutoscalingPolicyScaleInControlPtrInput interface {
	pulumi.Input

	ToAutoscalingPolicyScaleInControlPtrOutput() AutoscalingPolicyScaleInControlPtrOutput
	ToAutoscalingPolicyScaleInControlPtrOutputWithContext(context.Context) AutoscalingPolicyScaleInControlPtrOutput
}

type autoscalingPolicyScaleInControlPtrType AutoscalingPolicyScaleInControlArgs

func AutoscalingPolicyScaleInControlPtr(v *AutoscalingPolicyScaleInControlArgs) AutoscalingPolicyScaleInControlPtrInput {
	return (*autoscalingPolicyScaleInControlPtrType)(v)
}

func (*autoscalingPolicyScaleInControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicyScaleInControl)(nil)).Elem()
}

func (i *autoscalingPolicyScaleInControlPtrType) ToAutoscalingPolicyScaleInControlPtrOutput() AutoscalingPolicyScaleInControlPtrOutput {
	return i.ToAutoscalingPolicyScaleInControlPtrOutputWithContext(context.Background())
}

func (i *autoscalingPolicyScaleInControlPtrType) ToAutoscalingPolicyScaleInControlPtrOutputWithContext(ctx context.Context) AutoscalingPolicyScaleInControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyScaleInControlPtrOutput)
}

// Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below.
type AutoscalingPolicyScaleInControlOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyScaleInControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyScaleInControl)(nil)).Elem()
}

func (o AutoscalingPolicyScaleInControlOutput) ToAutoscalingPolicyScaleInControlOutput() AutoscalingPolicyScaleInControlOutput {
	return o
}

func (o AutoscalingPolicyScaleInControlOutput) ToAutoscalingPolicyScaleInControlOutputWithContext(ctx context.Context) AutoscalingPolicyScaleInControlOutput {
	return o
}

func (o AutoscalingPolicyScaleInControlOutput) ToAutoscalingPolicyScaleInControlPtrOutput() AutoscalingPolicyScaleInControlPtrOutput {
	return o.ToAutoscalingPolicyScaleInControlPtrOutputWithContext(context.Background())
}

func (o AutoscalingPolicyScaleInControlOutput) ToAutoscalingPolicyScaleInControlPtrOutputWithContext(ctx context.Context) AutoscalingPolicyScaleInControlPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyScaleInControl) *AutoscalingPolicyScaleInControl {
		return &v
	}).(AutoscalingPolicyScaleInControlPtrOutput)
}

// Maximum allowed number (or %) of VMs that can be deducted from the peak recommendation during the window autoscaler looks at when computing recommendations. Possibly all these VMs can be deleted at once so user service needs to be prepared to lose that many VMs in one step.
func (o AutoscalingPolicyScaleInControlOutput) MaxScaledInReplicas() FixedOrPercentPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyScaleInControl) *FixedOrPercent { return v.MaxScaledInReplicas }).(FixedOrPercentPtrOutput)
}

// How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above.
func (o AutoscalingPolicyScaleInControlOutput) TimeWindowSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyScaleInControl) *int { return v.TimeWindowSec }).(pulumi.IntPtrOutput)
}

type AutoscalingPolicyScaleInControlPtrOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyScaleInControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicyScaleInControl)(nil)).Elem()
}

func (o AutoscalingPolicyScaleInControlPtrOutput) ToAutoscalingPolicyScaleInControlPtrOutput() AutoscalingPolicyScaleInControlPtrOutput {
	return o
}

func (o AutoscalingPolicyScaleInControlPtrOutput) ToAutoscalingPolicyScaleInControlPtrOutputWithContext(ctx context.Context) AutoscalingPolicyScaleInControlPtrOutput {
	return o
}

func (o AutoscalingPolicyScaleInControlPtrOutput) Elem() AutoscalingPolicyScaleInControlOutput {
	return o.ApplyT(func(v *AutoscalingPolicyScaleInControl) AutoscalingPolicyScaleInControl { return *v }).(AutoscalingPolicyScaleInControlOutput)
}

// Maximum allowed number (or %) of VMs that can be deducted from the peak recommendation during the window autoscaler looks at when computing recommendations. Possibly all these VMs can be deleted at once so user service needs to be prepared to lose that many VMs in one step.
func (o AutoscalingPolicyScaleInControlPtrOutput) MaxScaledInReplicas() FixedOrPercentPtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyScaleInControl) *FixedOrPercent {
		if v == nil {
			return nil
		}
		return v.MaxScaledInReplicas
	}).(FixedOrPercentPtrOutput)
}

// How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above.
func (o AutoscalingPolicyScaleInControlPtrOutput) TimeWindowSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyScaleInControl) *int {
		if v == nil {
			return nil
		}
		return v.TimeWindowSec
	}).(pulumi.IntPtrOutput)
}

// Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below.
type AutoscalingPolicyScaleInControlResponse struct {
	// Maximum allowed number (or %) of VMs that can be deducted from the peak recommendation during the window autoscaler looks at when computing recommendations. Possibly all these VMs can be deleted at once so user service needs to be prepared to lose that many VMs in one step.
	MaxScaledInReplicas FixedOrPercentResponse `pulumi:"maxScaledInReplicas"`
	// How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above.
	TimeWindowSec int `pulumi:"timeWindowSec"`
}

// AutoscalingPolicyScaleInControlResponseInput is an input type that accepts AutoscalingPolicyScaleInControlResponseArgs and AutoscalingPolicyScaleInControlResponseOutput values.
// You can construct a concrete instance of `AutoscalingPolicyScaleInControlResponseInput` via:
//
//          AutoscalingPolicyScaleInControlResponseArgs{...}
type AutoscalingPolicyScaleInControlResponseInput interface {
	pulumi.Input

	ToAutoscalingPolicyScaleInControlResponseOutput() AutoscalingPolicyScaleInControlResponseOutput
	ToAutoscalingPolicyScaleInControlResponseOutputWithContext(context.Context) AutoscalingPolicyScaleInControlResponseOutput
}

// Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below.
type AutoscalingPolicyScaleInControlResponseArgs struct {
	// Maximum allowed number (or %) of VMs that can be deducted from the peak recommendation during the window autoscaler looks at when computing recommendations. Possibly all these VMs can be deleted at once so user service needs to be prepared to lose that many VMs in one step.
	MaxScaledInReplicas FixedOrPercentResponseInput `pulumi:"maxScaledInReplicas"`
	// How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above.
	TimeWindowSec pulumi.IntInput `pulumi:"timeWindowSec"`
}

func (AutoscalingPolicyScaleInControlResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyScaleInControlResponse)(nil)).Elem()
}

func (i AutoscalingPolicyScaleInControlResponseArgs) ToAutoscalingPolicyScaleInControlResponseOutput() AutoscalingPolicyScaleInControlResponseOutput {
	return i.ToAutoscalingPolicyScaleInControlResponseOutputWithContext(context.Background())
}

func (i AutoscalingPolicyScaleInControlResponseArgs) ToAutoscalingPolicyScaleInControlResponseOutputWithContext(ctx context.Context) AutoscalingPolicyScaleInControlResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyScaleInControlResponseOutput)
}

func (i AutoscalingPolicyScaleInControlResponseArgs) ToAutoscalingPolicyScaleInControlResponsePtrOutput() AutoscalingPolicyScaleInControlResponsePtrOutput {
	return i.ToAutoscalingPolicyScaleInControlResponsePtrOutputWithContext(context.Background())
}

func (i AutoscalingPolicyScaleInControlResponseArgs) ToAutoscalingPolicyScaleInControlResponsePtrOutputWithContext(ctx context.Context) AutoscalingPolicyScaleInControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyScaleInControlResponseOutput).ToAutoscalingPolicyScaleInControlResponsePtrOutputWithContext(ctx)
}

// AutoscalingPolicyScaleInControlResponsePtrInput is an input type that accepts AutoscalingPolicyScaleInControlResponseArgs, AutoscalingPolicyScaleInControlResponsePtr and AutoscalingPolicyScaleInControlResponsePtrOutput values.
// You can construct a concrete instance of `AutoscalingPolicyScaleInControlResponsePtrInput` via:
//
//          AutoscalingPolicyScaleInControlResponseArgs{...}
//
//  or:
//
//          nil
type AutoscalingPolicyScaleInControlResponsePtrInput interface {
	pulumi.Input

	ToAutoscalingPolicyScaleInControlResponsePtrOutput() AutoscalingPolicyScaleInControlResponsePtrOutput
	ToAutoscalingPolicyScaleInControlResponsePtrOutputWithContext(context.Context) AutoscalingPolicyScaleInControlResponsePtrOutput
}

type autoscalingPolicyScaleInControlResponsePtrType AutoscalingPolicyScaleInControlResponseArgs

func AutoscalingPolicyScaleInControlResponsePtr(v *AutoscalingPolicyScaleInControlResponseArgs) AutoscalingPolicyScaleInControlResponsePtrInput {
	return (*autoscalingPolicyScaleInControlResponsePtrType)(v)
}

func (*autoscalingPolicyScaleInControlResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicyScaleInControlResponse)(nil)).Elem()
}

func (i *autoscalingPolicyScaleInControlResponsePtrType) ToAutoscalingPolicyScaleInControlResponsePtrOutput() AutoscalingPolicyScaleInControlResponsePtrOutput {
	return i.ToAutoscalingPolicyScaleInControlResponsePtrOutputWithContext(context.Background())
}

func (i *autoscalingPolicyScaleInControlResponsePtrType) ToAutoscalingPolicyScaleInControlResponsePtrOutputWithContext(ctx context.Context) AutoscalingPolicyScaleInControlResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingPolicyScaleInControlResponsePtrOutput)
}

// Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below.
type AutoscalingPolicyScaleInControlResponseOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyScaleInControlResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingPolicyScaleInControlResponse)(nil)).Elem()
}

func (o AutoscalingPolicyScaleInControlResponseOutput) ToAutoscalingPolicyScaleInControlResponseOutput() AutoscalingPolicyScaleInControlResponseOutput {
	return o
}

func (o AutoscalingPolicyScaleInControlResponseOutput) ToAutoscalingPolicyScaleInControlResponseOutputWithContext(ctx context.Context) AutoscalingPolicyScaleInControlResponseOutput {
	return o
}

func (o AutoscalingPolicyScaleInControlResponseOutput) ToAutoscalingPolicyScaleInControlResponsePtrOutput() AutoscalingPolicyScaleInControlResponsePtrOutput {
	return o.ToAutoscalingPolicyScaleInControlResponsePtrOutputWithContext(context.Background())
}

func (o AutoscalingPolicyScaleInControlResponseOutput) ToAutoscalingPolicyScaleInControlResponsePtrOutputWithContext(ctx context.Context) AutoscalingPolicyScaleInControlResponsePtrOutput {
	return o.ApplyT(func(v AutoscalingPolicyScaleInControlResponse) *AutoscalingPolicyScaleInControlResponse {
		return &v
	}).(AutoscalingPolicyScaleInControlResponsePtrOutput)
}

// Maximum allowed number (or %) of VMs that can be deducted from the peak recommendation during the window autoscaler looks at when computing recommendations. Possibly all these VMs can be deleted at once so user service needs to be prepared to lose that many VMs in one step.
func (o AutoscalingPolicyScaleInControlResponseOutput) MaxScaledInReplicas() FixedOrPercentResponseOutput {
	return o.ApplyT(func(v AutoscalingPolicyScaleInControlResponse) FixedOrPercentResponse { return v.MaxScaledInReplicas }).(FixedOrPercentResponseOutput)
}

// How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above.
func (o AutoscalingPolicyScaleInControlResponseOutput) TimeWindowSec() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalingPolicyScaleInControlResponse) int { return v.TimeWindowSec }).(pulumi.IntOutput)
}

type AutoscalingPolicyScaleInControlResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoscalingPolicyScaleInControlResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingPolicyScaleInControlResponse)(nil)).Elem()
}

func (o AutoscalingPolicyScaleInControlResponsePtrOutput) ToAutoscalingPolicyScaleInControlResponsePtrOutput() AutoscalingPolicyScaleInControlResponsePtrOutput {
	return o
}

func (o AutoscalingPolicyScaleInControlResponsePtrOutput) ToAutoscalingPolicyScaleInControlResponsePtrOutputWithContext(ctx context.Context) AutoscalingPolicyScaleInControlResponsePtrOutput {
	return o
}

func (o AutoscalingPolicyScaleInControlResponsePtrOutput) Elem() AutoscalingPolicyScaleInControlResponseOutput {
	return o.ApplyT(func(v *AutoscalingPolicyScaleInControlResponse) AutoscalingPolicyScaleInControlResponse { return *v }).(AutoscalingPolicyScaleInControlResponseOutput)
}

// Maximum allowed number (or %) of VMs that can be deducted from the peak recommendation during the window autoscaler looks at when computing recommendations. Possibly all these VMs can be deleted at once so user service needs to be prepared to lose that many VMs in one step.
func (o AutoscalingPolicyScaleInControlResponsePtrOutput) MaxScaledInReplicas() FixedOrPercentResponsePtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyScaleInControlResponse) *FixedOrPercentResponse {
		if v == nil {
			return nil
		}
		return &v.MaxScaledInReplicas
	}).(FixedOrPercentResponsePtrOutput)
}

// How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above.
func (o AutoscalingPolicyScaleInControlResponsePtrOutput) TimeWindowSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingPolicyScaleInControlResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TimeWindowSec
	}).(pulumi.IntPtrOutput)
}

// Message containing information of one individual backend.
type Backend struct {
	// Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode.
	BalancingMode *string `pulumi:"balancingMode"`
	// A multiplier applied to the backend's target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service.
	CapacityScaler *float64 `pulumi:"capacityScaler"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService.
	Failover *bool `pulumi:"failover"`
	// The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service#backends). You must use the *fully-qualified* URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported.
	Group *string `pulumi:"group"`
	// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
	MaxConnections *int `pulumi:"maxConnections"`
	// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
	MaxConnectionsPerEndpoint *int `pulumi:"maxConnectionsPerEndpoint"`
	// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
	MaxConnectionsPerInstance *int `pulumi:"maxConnectionsPerInstance"`
	// Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
	MaxRate *int `pulumi:"maxRate"`
	// Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
	MaxRatePerEndpoint *float64 `pulumi:"maxRatePerEndpoint"`
	// Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
	MaxRatePerInstance *float64 `pulumi:"maxRatePerInstance"`
	MaxUtilization     *float64 `pulumi:"maxUtilization"`
}

// BackendInput is an input type that accepts BackendArgs and BackendOutput values.
// You can construct a concrete instance of `BackendInput` via:
//
//          BackendArgs{...}
type BackendInput interface {
	pulumi.Input

	ToBackendOutput() BackendOutput
	ToBackendOutputWithContext(context.Context) BackendOutput
}

// Message containing information of one individual backend.
type BackendArgs struct {
	// Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode.
	BalancingMode *BackendBalancingMode `pulumi:"balancingMode"`
	// A multiplier applied to the backend's target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service.
	CapacityScaler pulumi.Float64PtrInput `pulumi:"capacityScaler"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService.
	Failover pulumi.BoolPtrInput `pulumi:"failover"`
	// The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service#backends). You must use the *fully-qualified* URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
	MaxConnections pulumi.IntPtrInput `pulumi:"maxConnections"`
	// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
	MaxConnectionsPerEndpoint pulumi.IntPtrInput `pulumi:"maxConnectionsPerEndpoint"`
	// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
	MaxConnectionsPerInstance pulumi.IntPtrInput `pulumi:"maxConnectionsPerInstance"`
	// Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
	MaxRate pulumi.IntPtrInput `pulumi:"maxRate"`
	// Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
	MaxRatePerEndpoint pulumi.Float64PtrInput `pulumi:"maxRatePerEndpoint"`
	// Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
	MaxRatePerInstance pulumi.Float64PtrInput `pulumi:"maxRatePerInstance"`
	MaxUtilization     pulumi.Float64PtrInput `pulumi:"maxUtilization"`
}

func (BackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Backend)(nil)).Elem()
}

func (i BackendArgs) ToBackendOutput() BackendOutput {
	return i.ToBackendOutputWithContext(context.Background())
}

func (i BackendArgs) ToBackendOutputWithContext(ctx context.Context) BackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendOutput)
}

// BackendArrayInput is an input type that accepts BackendArray and BackendArrayOutput values.
// You can construct a concrete instance of `BackendArrayInput` via:
//
//          BackendArray{ BackendArgs{...} }
type BackendArrayInput interface {
	pulumi.Input

	ToBackendArrayOutput() BackendArrayOutput
	ToBackendArrayOutputWithContext(context.Context) BackendArrayOutput
}

type BackendArray []BackendInput

func (BackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Backend)(nil)).Elem()
}

func (i BackendArray) ToBackendArrayOutput() BackendArrayOutput {
	return i.ToBackendArrayOutputWithContext(context.Background())
}

func (i BackendArray) ToBackendArrayOutputWithContext(ctx context.Context) BackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendArrayOutput)
}

// Message containing information of one individual backend.
type BackendOutput struct{ *pulumi.OutputState }

func (BackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Backend)(nil)).Elem()
}

func (o BackendOutput) ToBackendOutput() BackendOutput {
	return o
}

func (o BackendOutput) ToBackendOutputWithContext(ctx context.Context) BackendOutput {
	return o
}

// Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode.
func (o BackendOutput) BalancingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Backend) *string { return v.BalancingMode }).(pulumi.StringPtrOutput)
}

// A multiplier applied to the backend's target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service.
func (o BackendOutput) CapacityScaler() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Backend) *float64 { return v.CapacityScaler }).(pulumi.Float64PtrOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o BackendOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Backend) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService.
func (o BackendOutput) Failover() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Backend) *bool { return v.Failover }).(pulumi.BoolPtrOutput)
}

// The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service#backends). You must use the *fully-qualified* URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported.
func (o BackendOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Backend) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
func (o BackendOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Backend) *int { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
func (o BackendOutput) MaxConnectionsPerEndpoint() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Backend) *int { return v.MaxConnectionsPerEndpoint }).(pulumi.IntPtrOutput)
}

// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
func (o BackendOutput) MaxConnectionsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Backend) *int { return v.MaxConnectionsPerInstance }).(pulumi.IntPtrOutput)
}

// Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
func (o BackendOutput) MaxRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Backend) *int { return v.MaxRate }).(pulumi.IntPtrOutput)
}

// Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
func (o BackendOutput) MaxRatePerEndpoint() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Backend) *float64 { return v.MaxRatePerEndpoint }).(pulumi.Float64PtrOutput)
}

// Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
func (o BackendOutput) MaxRatePerInstance() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Backend) *float64 { return v.MaxRatePerInstance }).(pulumi.Float64PtrOutput)
}

func (o BackendOutput) MaxUtilization() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Backend) *float64 { return v.MaxUtilization }).(pulumi.Float64PtrOutput)
}

type BackendArrayOutput struct{ *pulumi.OutputState }

func (BackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Backend)(nil)).Elem()
}

func (o BackendArrayOutput) ToBackendArrayOutput() BackendArrayOutput {
	return o
}

func (o BackendArrayOutput) ToBackendArrayOutputWithContext(ctx context.Context) BackendArrayOutput {
	return o
}

func (o BackendArrayOutput) Index(i pulumi.IntInput) BackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Backend {
		return vs[0].([]Backend)[vs[1].(int)]
	}).(BackendOutput)
}

// Message containing Cloud CDN configuration for a backend bucket.
type BackendBucketCdnPolicy struct {
	// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
	BypassCacheOnRequestHeaders []BackendBucketCdnPolicyBypassCacheOnRequestHeader `pulumi:"bypassCacheOnRequestHeaders"`
	// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
	CacheMode *string `pulumi:"cacheMode"`
	// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day).
	ClientTtl *int `pulumi:"clientTtl"`
	// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	DefaultTtl *int `pulumi:"defaultTtl"`
	// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	MaxTtl *int `pulumi:"maxTtl"`
	// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
	NegativeCaching *bool `pulumi:"negativeCaching"`
	// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
	NegativeCachingPolicy []BackendBucketCdnPolicyNegativeCachingPolicy `pulumi:"negativeCachingPolicy"`
	// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
	RequestCoalescing *bool `pulumi:"requestCoalescing"`
	// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
	ServeWhileStale *int `pulumi:"serveWhileStale"`
	// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
	SignedUrlCacheMaxAgeSec *string `pulumi:"signedUrlCacheMaxAgeSec"`
}

// BackendBucketCdnPolicyInput is an input type that accepts BackendBucketCdnPolicyArgs and BackendBucketCdnPolicyOutput values.
// You can construct a concrete instance of `BackendBucketCdnPolicyInput` via:
//
//          BackendBucketCdnPolicyArgs{...}
type BackendBucketCdnPolicyInput interface {
	pulumi.Input

	ToBackendBucketCdnPolicyOutput() BackendBucketCdnPolicyOutput
	ToBackendBucketCdnPolicyOutputWithContext(context.Context) BackendBucketCdnPolicyOutput
}

// Message containing Cloud CDN configuration for a backend bucket.
type BackendBucketCdnPolicyArgs struct {
	// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
	BypassCacheOnRequestHeaders BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayInput `pulumi:"bypassCacheOnRequestHeaders"`
	// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
	CacheMode *BackendBucketCdnPolicyCacheMode `pulumi:"cacheMode"`
	// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day).
	ClientTtl pulumi.IntPtrInput `pulumi:"clientTtl"`
	// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	DefaultTtl pulumi.IntPtrInput `pulumi:"defaultTtl"`
	// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	MaxTtl pulumi.IntPtrInput `pulumi:"maxTtl"`
	// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
	NegativeCaching pulumi.BoolPtrInput `pulumi:"negativeCaching"`
	// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
	NegativeCachingPolicy BackendBucketCdnPolicyNegativeCachingPolicyArrayInput `pulumi:"negativeCachingPolicy"`
	// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
	RequestCoalescing pulumi.BoolPtrInput `pulumi:"requestCoalescing"`
	// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
	ServeWhileStale pulumi.IntPtrInput `pulumi:"serveWhileStale"`
	// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
	SignedUrlCacheMaxAgeSec pulumi.StringPtrInput `pulumi:"signedUrlCacheMaxAgeSec"`
}

func (BackendBucketCdnPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendBucketCdnPolicy)(nil)).Elem()
}

func (i BackendBucketCdnPolicyArgs) ToBackendBucketCdnPolicyOutput() BackendBucketCdnPolicyOutput {
	return i.ToBackendBucketCdnPolicyOutputWithContext(context.Background())
}

func (i BackendBucketCdnPolicyArgs) ToBackendBucketCdnPolicyOutputWithContext(ctx context.Context) BackendBucketCdnPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyOutput)
}

func (i BackendBucketCdnPolicyArgs) ToBackendBucketCdnPolicyPtrOutput() BackendBucketCdnPolicyPtrOutput {
	return i.ToBackendBucketCdnPolicyPtrOutputWithContext(context.Background())
}

func (i BackendBucketCdnPolicyArgs) ToBackendBucketCdnPolicyPtrOutputWithContext(ctx context.Context) BackendBucketCdnPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyOutput).ToBackendBucketCdnPolicyPtrOutputWithContext(ctx)
}

// BackendBucketCdnPolicyPtrInput is an input type that accepts BackendBucketCdnPolicyArgs, BackendBucketCdnPolicyPtr and BackendBucketCdnPolicyPtrOutput values.
// You can construct a concrete instance of `BackendBucketCdnPolicyPtrInput` via:
//
//          BackendBucketCdnPolicyArgs{...}
//
//  or:
//
//          nil
type BackendBucketCdnPolicyPtrInput interface {
	pulumi.Input

	ToBackendBucketCdnPolicyPtrOutput() BackendBucketCdnPolicyPtrOutput
	ToBackendBucketCdnPolicyPtrOutputWithContext(context.Context) BackendBucketCdnPolicyPtrOutput
}

type backendBucketCdnPolicyPtrType BackendBucketCdnPolicyArgs

func BackendBucketCdnPolicyPtr(v *BackendBucketCdnPolicyArgs) BackendBucketCdnPolicyPtrInput {
	return (*backendBucketCdnPolicyPtrType)(v)
}

func (*backendBucketCdnPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendBucketCdnPolicy)(nil)).Elem()
}

func (i *backendBucketCdnPolicyPtrType) ToBackendBucketCdnPolicyPtrOutput() BackendBucketCdnPolicyPtrOutput {
	return i.ToBackendBucketCdnPolicyPtrOutputWithContext(context.Background())
}

func (i *backendBucketCdnPolicyPtrType) ToBackendBucketCdnPolicyPtrOutputWithContext(ctx context.Context) BackendBucketCdnPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyPtrOutput)
}

// Message containing Cloud CDN configuration for a backend bucket.
type BackendBucketCdnPolicyOutput struct{ *pulumi.OutputState }

func (BackendBucketCdnPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendBucketCdnPolicy)(nil)).Elem()
}

func (o BackendBucketCdnPolicyOutput) ToBackendBucketCdnPolicyOutput() BackendBucketCdnPolicyOutput {
	return o
}

func (o BackendBucketCdnPolicyOutput) ToBackendBucketCdnPolicyOutputWithContext(ctx context.Context) BackendBucketCdnPolicyOutput {
	return o
}

func (o BackendBucketCdnPolicyOutput) ToBackendBucketCdnPolicyPtrOutput() BackendBucketCdnPolicyPtrOutput {
	return o.ToBackendBucketCdnPolicyPtrOutputWithContext(context.Background())
}

func (o BackendBucketCdnPolicyOutput) ToBackendBucketCdnPolicyPtrOutputWithContext(ctx context.Context) BackendBucketCdnPolicyPtrOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicy) *BackendBucketCdnPolicy {
		return &v
	}).(BackendBucketCdnPolicyPtrOutput)
}

// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
func (o BackendBucketCdnPolicyOutput) BypassCacheOnRequestHeaders() BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicy) []BackendBucketCdnPolicyBypassCacheOnRequestHeader {
		return v.BypassCacheOnRequestHeaders
	}).(BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput)
}

// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
func (o BackendBucketCdnPolicyOutput) CacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicy) *string { return v.CacheMode }).(pulumi.StringPtrOutput)
}

// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day).
func (o BackendBucketCdnPolicyOutput) ClientTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicy) *int { return v.ClientTtl }).(pulumi.IntPtrOutput)
}

// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendBucketCdnPolicyOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicy) *int { return v.DefaultTtl }).(pulumi.IntPtrOutput)
}

// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendBucketCdnPolicyOutput) MaxTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicy) *int { return v.MaxTtl }).(pulumi.IntPtrOutput)
}

// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
func (o BackendBucketCdnPolicyOutput) NegativeCaching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicy) *bool { return v.NegativeCaching }).(pulumi.BoolPtrOutput)
}

// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
func (o BackendBucketCdnPolicyOutput) NegativeCachingPolicy() BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicy) []BackendBucketCdnPolicyNegativeCachingPolicy {
		return v.NegativeCachingPolicy
	}).(BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput)
}

// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
func (o BackendBucketCdnPolicyOutput) RequestCoalescing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicy) *bool { return v.RequestCoalescing }).(pulumi.BoolPtrOutput)
}

// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
func (o BackendBucketCdnPolicyOutput) ServeWhileStale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicy) *int { return v.ServeWhileStale }).(pulumi.IntPtrOutput)
}

// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
func (o BackendBucketCdnPolicyOutput) SignedUrlCacheMaxAgeSec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicy) *string { return v.SignedUrlCacheMaxAgeSec }).(pulumi.StringPtrOutput)
}

type BackendBucketCdnPolicyPtrOutput struct{ *pulumi.OutputState }

func (BackendBucketCdnPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendBucketCdnPolicy)(nil)).Elem()
}

func (o BackendBucketCdnPolicyPtrOutput) ToBackendBucketCdnPolicyPtrOutput() BackendBucketCdnPolicyPtrOutput {
	return o
}

func (o BackendBucketCdnPolicyPtrOutput) ToBackendBucketCdnPolicyPtrOutputWithContext(ctx context.Context) BackendBucketCdnPolicyPtrOutput {
	return o
}

func (o BackendBucketCdnPolicyPtrOutput) Elem() BackendBucketCdnPolicyOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicy) BackendBucketCdnPolicy { return *v }).(BackendBucketCdnPolicyOutput)
}

// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
func (o BackendBucketCdnPolicyPtrOutput) BypassCacheOnRequestHeaders() BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicy) []BackendBucketCdnPolicyBypassCacheOnRequestHeader {
		if v == nil {
			return nil
		}
		return v.BypassCacheOnRequestHeaders
	}).(BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput)
}

// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
func (o BackendBucketCdnPolicyPtrOutput) CacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.CacheMode
	}).(pulumi.StringPtrOutput)
}

// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day).
func (o BackendBucketCdnPolicyPtrOutput) ClientTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicy) *int {
		if v == nil {
			return nil
		}
		return v.ClientTtl
	}).(pulumi.IntPtrOutput)
}

// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendBucketCdnPolicyPtrOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicy) *int {
		if v == nil {
			return nil
		}
		return v.DefaultTtl
	}).(pulumi.IntPtrOutput)
}

// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendBucketCdnPolicyPtrOutput) MaxTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxTtl
	}).(pulumi.IntPtrOutput)
}

// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
func (o BackendBucketCdnPolicyPtrOutput) NegativeCaching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.NegativeCaching
	}).(pulumi.BoolPtrOutput)
}

// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
func (o BackendBucketCdnPolicyPtrOutput) NegativeCachingPolicy() BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicy) []BackendBucketCdnPolicyNegativeCachingPolicy {
		if v == nil {
			return nil
		}
		return v.NegativeCachingPolicy
	}).(BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput)
}

// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
func (o BackendBucketCdnPolicyPtrOutput) RequestCoalescing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.RequestCoalescing
	}).(pulumi.BoolPtrOutput)
}

// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
func (o BackendBucketCdnPolicyPtrOutput) ServeWhileStale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicy) *int {
		if v == nil {
			return nil
		}
		return v.ServeWhileStale
	}).(pulumi.IntPtrOutput)
}

// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
func (o BackendBucketCdnPolicyPtrOutput) SignedUrlCacheMaxAgeSec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.SignedUrlCacheMaxAgeSec
	}).(pulumi.StringPtrOutput)
}

// Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
type BackendBucketCdnPolicyBypassCacheOnRequestHeader struct {
	// The header field name to match on when bypassing cache. Values are case-insensitive.
	HeaderName *string `pulumi:"headerName"`
}

// BackendBucketCdnPolicyBypassCacheOnRequestHeaderInput is an input type that accepts BackendBucketCdnPolicyBypassCacheOnRequestHeaderArgs and BackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput values.
// You can construct a concrete instance of `BackendBucketCdnPolicyBypassCacheOnRequestHeaderInput` via:
//
//          BackendBucketCdnPolicyBypassCacheOnRequestHeaderArgs{...}
type BackendBucketCdnPolicyBypassCacheOnRequestHeaderInput interface {
	pulumi.Input

	ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput() BackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput
	ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderOutputWithContext(context.Context) BackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput
}

// Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
type BackendBucketCdnPolicyBypassCacheOnRequestHeaderArgs struct {
	// The header field name to match on when bypassing cache. Values are case-insensitive.
	HeaderName pulumi.StringPtrInput `pulumi:"headerName"`
}

func (BackendBucketCdnPolicyBypassCacheOnRequestHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendBucketCdnPolicyBypassCacheOnRequestHeader)(nil)).Elem()
}

func (i BackendBucketCdnPolicyBypassCacheOnRequestHeaderArgs) ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput() BackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput {
	return i.ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderOutputWithContext(context.Background())
}

func (i BackendBucketCdnPolicyBypassCacheOnRequestHeaderArgs) ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderOutputWithContext(ctx context.Context) BackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput)
}

// BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayInput is an input type that accepts BackendBucketCdnPolicyBypassCacheOnRequestHeaderArray and BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput values.
// You can construct a concrete instance of `BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayInput` via:
//
//          BackendBucketCdnPolicyBypassCacheOnRequestHeaderArray{ BackendBucketCdnPolicyBypassCacheOnRequestHeaderArgs{...} }
type BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayInput interface {
	pulumi.Input

	ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput() BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput
	ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutputWithContext(context.Context) BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput
}

type BackendBucketCdnPolicyBypassCacheOnRequestHeaderArray []BackendBucketCdnPolicyBypassCacheOnRequestHeaderInput

func (BackendBucketCdnPolicyBypassCacheOnRequestHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendBucketCdnPolicyBypassCacheOnRequestHeader)(nil)).Elem()
}

func (i BackendBucketCdnPolicyBypassCacheOnRequestHeaderArray) ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput() BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput {
	return i.ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutputWithContext(context.Background())
}

func (i BackendBucketCdnPolicyBypassCacheOnRequestHeaderArray) ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutputWithContext(ctx context.Context) BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput)
}

// Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
type BackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput struct{ *pulumi.OutputState }

func (BackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendBucketCdnPolicyBypassCacheOnRequestHeader)(nil)).Elem()
}

func (o BackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput) ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput() BackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput {
	return o
}

func (o BackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput) ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderOutputWithContext(ctx context.Context) BackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput {
	return o
}

// The header field name to match on when bypassing cache. Values are case-insensitive.
func (o BackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput) HeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyBypassCacheOnRequestHeader) *string { return v.HeaderName }).(pulumi.StringPtrOutput)
}

type BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput struct{ *pulumi.OutputState }

func (BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendBucketCdnPolicyBypassCacheOnRequestHeader)(nil)).Elem()
}

func (o BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput) ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput() BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput {
	return o
}

func (o BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput) ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutputWithContext(ctx context.Context) BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput {
	return o
}

func (o BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput) Index(i pulumi.IntInput) BackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendBucketCdnPolicyBypassCacheOnRequestHeader {
		return vs[0].([]BackendBucketCdnPolicyBypassCacheOnRequestHeader)[vs[1].(int)]
	}).(BackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput)
}

// Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
type BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse struct {
	// The header field name to match on when bypassing cache. Values are case-insensitive.
	HeaderName string `pulumi:"headerName"`
}

// BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseInput is an input type that accepts BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArgs and BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput values.
// You can construct a concrete instance of `BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseInput` via:
//
//          BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArgs{...}
type BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseInput interface {
	pulumi.Input

	ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput() BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput
	ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutputWithContext(context.Context) BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput
}

// Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
type BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArgs struct {
	// The header field name to match on when bypassing cache. Values are case-insensitive.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
}

func (BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse)(nil)).Elem()
}

func (i BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArgs) ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput() BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput {
	return i.ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutputWithContext(context.Background())
}

func (i BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArgs) ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutputWithContext(ctx context.Context) BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput)
}

// BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayInput is an input type that accepts BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArray and BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput values.
// You can construct a concrete instance of `BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayInput` via:
//
//          BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArray{ BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArgs{...} }
type BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayInput interface {
	pulumi.Input

	ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput() BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput
	ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutputWithContext(context.Context) BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput
}

type BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArray []BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseInput

func (BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse)(nil)).Elem()
}

func (i BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArray) ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput() BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput {
	return i.ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutputWithContext(context.Background())
}

func (i BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArray) ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutputWithContext(ctx context.Context) BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput)
}

// Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
type BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput struct{ *pulumi.OutputState }

func (BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse)(nil)).Elem()
}

func (o BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput) ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput() BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput {
	return o
}

func (o BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput) ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutputWithContext(ctx context.Context) BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput {
	return o
}

// The header field name to match on when bypassing cache. Values are case-insensitive.
func (o BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse) string { return v.HeaderName }).(pulumi.StringOutput)
}

type BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput struct{ *pulumi.OutputState }

func (BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse)(nil)).Elem()
}

func (o BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput) ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput() BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput {
	return o
}

func (o BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput) ToBackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutputWithContext(ctx context.Context) BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput {
	return o
}

func (o BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput) Index(i pulumi.IntInput) BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse {
		return vs[0].([]BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse)[vs[1].(int)]
	}).(BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput)
}

// Specify CDN TTLs for response error codes.
type BackendBucketCdnPolicyNegativeCachingPolicy struct {
	// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
	Code *int `pulumi:"code"`
	// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	Ttl *int `pulumi:"ttl"`
}

// BackendBucketCdnPolicyNegativeCachingPolicyInput is an input type that accepts BackendBucketCdnPolicyNegativeCachingPolicyArgs and BackendBucketCdnPolicyNegativeCachingPolicyOutput values.
// You can construct a concrete instance of `BackendBucketCdnPolicyNegativeCachingPolicyInput` via:
//
//          BackendBucketCdnPolicyNegativeCachingPolicyArgs{...}
type BackendBucketCdnPolicyNegativeCachingPolicyInput interface {
	pulumi.Input

	ToBackendBucketCdnPolicyNegativeCachingPolicyOutput() BackendBucketCdnPolicyNegativeCachingPolicyOutput
	ToBackendBucketCdnPolicyNegativeCachingPolicyOutputWithContext(context.Context) BackendBucketCdnPolicyNegativeCachingPolicyOutput
}

// Specify CDN TTLs for response error codes.
type BackendBucketCdnPolicyNegativeCachingPolicyArgs struct {
	// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
}

func (BackendBucketCdnPolicyNegativeCachingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendBucketCdnPolicyNegativeCachingPolicy)(nil)).Elem()
}

func (i BackendBucketCdnPolicyNegativeCachingPolicyArgs) ToBackendBucketCdnPolicyNegativeCachingPolicyOutput() BackendBucketCdnPolicyNegativeCachingPolicyOutput {
	return i.ToBackendBucketCdnPolicyNegativeCachingPolicyOutputWithContext(context.Background())
}

func (i BackendBucketCdnPolicyNegativeCachingPolicyArgs) ToBackendBucketCdnPolicyNegativeCachingPolicyOutputWithContext(ctx context.Context) BackendBucketCdnPolicyNegativeCachingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyNegativeCachingPolicyOutput)
}

// BackendBucketCdnPolicyNegativeCachingPolicyArrayInput is an input type that accepts BackendBucketCdnPolicyNegativeCachingPolicyArray and BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput values.
// You can construct a concrete instance of `BackendBucketCdnPolicyNegativeCachingPolicyArrayInput` via:
//
//          BackendBucketCdnPolicyNegativeCachingPolicyArray{ BackendBucketCdnPolicyNegativeCachingPolicyArgs{...} }
type BackendBucketCdnPolicyNegativeCachingPolicyArrayInput interface {
	pulumi.Input

	ToBackendBucketCdnPolicyNegativeCachingPolicyArrayOutput() BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput
	ToBackendBucketCdnPolicyNegativeCachingPolicyArrayOutputWithContext(context.Context) BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput
}

type BackendBucketCdnPolicyNegativeCachingPolicyArray []BackendBucketCdnPolicyNegativeCachingPolicyInput

func (BackendBucketCdnPolicyNegativeCachingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendBucketCdnPolicyNegativeCachingPolicy)(nil)).Elem()
}

func (i BackendBucketCdnPolicyNegativeCachingPolicyArray) ToBackendBucketCdnPolicyNegativeCachingPolicyArrayOutput() BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput {
	return i.ToBackendBucketCdnPolicyNegativeCachingPolicyArrayOutputWithContext(context.Background())
}

func (i BackendBucketCdnPolicyNegativeCachingPolicyArray) ToBackendBucketCdnPolicyNegativeCachingPolicyArrayOutputWithContext(ctx context.Context) BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput)
}

// Specify CDN TTLs for response error codes.
type BackendBucketCdnPolicyNegativeCachingPolicyOutput struct{ *pulumi.OutputState }

func (BackendBucketCdnPolicyNegativeCachingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendBucketCdnPolicyNegativeCachingPolicy)(nil)).Elem()
}

func (o BackendBucketCdnPolicyNegativeCachingPolicyOutput) ToBackendBucketCdnPolicyNegativeCachingPolicyOutput() BackendBucketCdnPolicyNegativeCachingPolicyOutput {
	return o
}

func (o BackendBucketCdnPolicyNegativeCachingPolicyOutput) ToBackendBucketCdnPolicyNegativeCachingPolicyOutputWithContext(ctx context.Context) BackendBucketCdnPolicyNegativeCachingPolicyOutput {
	return o
}

// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
func (o BackendBucketCdnPolicyNegativeCachingPolicyOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyNegativeCachingPolicy) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendBucketCdnPolicyNegativeCachingPolicyOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyNegativeCachingPolicy) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

type BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput struct{ *pulumi.OutputState }

func (BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendBucketCdnPolicyNegativeCachingPolicy)(nil)).Elem()
}

func (o BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput) ToBackendBucketCdnPolicyNegativeCachingPolicyArrayOutput() BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput {
	return o
}

func (o BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput) ToBackendBucketCdnPolicyNegativeCachingPolicyArrayOutputWithContext(ctx context.Context) BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput {
	return o
}

func (o BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput) Index(i pulumi.IntInput) BackendBucketCdnPolicyNegativeCachingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendBucketCdnPolicyNegativeCachingPolicy {
		return vs[0].([]BackendBucketCdnPolicyNegativeCachingPolicy)[vs[1].(int)]
	}).(BackendBucketCdnPolicyNegativeCachingPolicyOutput)
}

// Specify CDN TTLs for response error codes.
type BackendBucketCdnPolicyNegativeCachingPolicyResponse struct {
	// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
	Code int `pulumi:"code"`
	// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	Ttl int `pulumi:"ttl"`
}

// BackendBucketCdnPolicyNegativeCachingPolicyResponseInput is an input type that accepts BackendBucketCdnPolicyNegativeCachingPolicyResponseArgs and BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput values.
// You can construct a concrete instance of `BackendBucketCdnPolicyNegativeCachingPolicyResponseInput` via:
//
//          BackendBucketCdnPolicyNegativeCachingPolicyResponseArgs{...}
type BackendBucketCdnPolicyNegativeCachingPolicyResponseInput interface {
	pulumi.Input

	ToBackendBucketCdnPolicyNegativeCachingPolicyResponseOutput() BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput
	ToBackendBucketCdnPolicyNegativeCachingPolicyResponseOutputWithContext(context.Context) BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput
}

// Specify CDN TTLs for response error codes.
type BackendBucketCdnPolicyNegativeCachingPolicyResponseArgs struct {
	// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
	Code pulumi.IntInput `pulumi:"code"`
	// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	Ttl pulumi.IntInput `pulumi:"ttl"`
}

func (BackendBucketCdnPolicyNegativeCachingPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendBucketCdnPolicyNegativeCachingPolicyResponse)(nil)).Elem()
}

func (i BackendBucketCdnPolicyNegativeCachingPolicyResponseArgs) ToBackendBucketCdnPolicyNegativeCachingPolicyResponseOutput() BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput {
	return i.ToBackendBucketCdnPolicyNegativeCachingPolicyResponseOutputWithContext(context.Background())
}

func (i BackendBucketCdnPolicyNegativeCachingPolicyResponseArgs) ToBackendBucketCdnPolicyNegativeCachingPolicyResponseOutputWithContext(ctx context.Context) BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput)
}

// BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayInput is an input type that accepts BackendBucketCdnPolicyNegativeCachingPolicyResponseArray and BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput values.
// You can construct a concrete instance of `BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayInput` via:
//
//          BackendBucketCdnPolicyNegativeCachingPolicyResponseArray{ BackendBucketCdnPolicyNegativeCachingPolicyResponseArgs{...} }
type BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayInput interface {
	pulumi.Input

	ToBackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput() BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput
	ToBackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutputWithContext(context.Context) BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput
}

type BackendBucketCdnPolicyNegativeCachingPolicyResponseArray []BackendBucketCdnPolicyNegativeCachingPolicyResponseInput

func (BackendBucketCdnPolicyNegativeCachingPolicyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendBucketCdnPolicyNegativeCachingPolicyResponse)(nil)).Elem()
}

func (i BackendBucketCdnPolicyNegativeCachingPolicyResponseArray) ToBackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput() BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput {
	return i.ToBackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutputWithContext(context.Background())
}

func (i BackendBucketCdnPolicyNegativeCachingPolicyResponseArray) ToBackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutputWithContext(ctx context.Context) BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput)
}

// Specify CDN TTLs for response error codes.
type BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput struct{ *pulumi.OutputState }

func (BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendBucketCdnPolicyNegativeCachingPolicyResponse)(nil)).Elem()
}

func (o BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput) ToBackendBucketCdnPolicyNegativeCachingPolicyResponseOutput() BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput {
	return o
}

func (o BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput) ToBackendBucketCdnPolicyNegativeCachingPolicyResponseOutputWithContext(ctx context.Context) BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput {
	return o
}

// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
func (o BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyNegativeCachingPolicyResponse) int { return v.Code }).(pulumi.IntOutput)
}

// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyNegativeCachingPolicyResponse) int { return v.Ttl }).(pulumi.IntOutput)
}

type BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput struct{ *pulumi.OutputState }

func (BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendBucketCdnPolicyNegativeCachingPolicyResponse)(nil)).Elem()
}

func (o BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput) ToBackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput() BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput {
	return o
}

func (o BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput) ToBackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutputWithContext(ctx context.Context) BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput {
	return o
}

func (o BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput) Index(i pulumi.IntInput) BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendBucketCdnPolicyNegativeCachingPolicyResponse {
		return vs[0].([]BackendBucketCdnPolicyNegativeCachingPolicyResponse)[vs[1].(int)]
	}).(BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput)
}

// Message containing Cloud CDN configuration for a backend bucket.
type BackendBucketCdnPolicyResponse struct {
	// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
	BypassCacheOnRequestHeaders []BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse `pulumi:"bypassCacheOnRequestHeaders"`
	// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
	CacheMode string `pulumi:"cacheMode"`
	// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day).
	ClientTtl int `pulumi:"clientTtl"`
	// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	DefaultTtl int `pulumi:"defaultTtl"`
	// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	MaxTtl int `pulumi:"maxTtl"`
	// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
	NegativeCaching bool `pulumi:"negativeCaching"`
	// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
	NegativeCachingPolicy []BackendBucketCdnPolicyNegativeCachingPolicyResponse `pulumi:"negativeCachingPolicy"`
	// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
	RequestCoalescing bool `pulumi:"requestCoalescing"`
	// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
	ServeWhileStale int `pulumi:"serveWhileStale"`
	// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
	SignedUrlCacheMaxAgeSec string `pulumi:"signedUrlCacheMaxAgeSec"`
	// Names of the keys for signing request URLs.
	SignedUrlKeyNames []string `pulumi:"signedUrlKeyNames"`
}

// BackendBucketCdnPolicyResponseInput is an input type that accepts BackendBucketCdnPolicyResponseArgs and BackendBucketCdnPolicyResponseOutput values.
// You can construct a concrete instance of `BackendBucketCdnPolicyResponseInput` via:
//
//          BackendBucketCdnPolicyResponseArgs{...}
type BackendBucketCdnPolicyResponseInput interface {
	pulumi.Input

	ToBackendBucketCdnPolicyResponseOutput() BackendBucketCdnPolicyResponseOutput
	ToBackendBucketCdnPolicyResponseOutputWithContext(context.Context) BackendBucketCdnPolicyResponseOutput
}

// Message containing Cloud CDN configuration for a backend bucket.
type BackendBucketCdnPolicyResponseArgs struct {
	// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
	BypassCacheOnRequestHeaders BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayInput `pulumi:"bypassCacheOnRequestHeaders"`
	// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
	CacheMode pulumi.StringInput `pulumi:"cacheMode"`
	// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day).
	ClientTtl pulumi.IntInput `pulumi:"clientTtl"`
	// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	DefaultTtl pulumi.IntInput `pulumi:"defaultTtl"`
	// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	MaxTtl pulumi.IntInput `pulumi:"maxTtl"`
	// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
	NegativeCaching pulumi.BoolInput `pulumi:"negativeCaching"`
	// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
	NegativeCachingPolicy BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayInput `pulumi:"negativeCachingPolicy"`
	// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
	RequestCoalescing pulumi.BoolInput `pulumi:"requestCoalescing"`
	// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
	ServeWhileStale pulumi.IntInput `pulumi:"serveWhileStale"`
	// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
	SignedUrlCacheMaxAgeSec pulumi.StringInput `pulumi:"signedUrlCacheMaxAgeSec"`
	// Names of the keys for signing request URLs.
	SignedUrlKeyNames pulumi.StringArrayInput `pulumi:"signedUrlKeyNames"`
}

func (BackendBucketCdnPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendBucketCdnPolicyResponse)(nil)).Elem()
}

func (i BackendBucketCdnPolicyResponseArgs) ToBackendBucketCdnPolicyResponseOutput() BackendBucketCdnPolicyResponseOutput {
	return i.ToBackendBucketCdnPolicyResponseOutputWithContext(context.Background())
}

func (i BackendBucketCdnPolicyResponseArgs) ToBackendBucketCdnPolicyResponseOutputWithContext(ctx context.Context) BackendBucketCdnPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyResponseOutput)
}

func (i BackendBucketCdnPolicyResponseArgs) ToBackendBucketCdnPolicyResponsePtrOutput() BackendBucketCdnPolicyResponsePtrOutput {
	return i.ToBackendBucketCdnPolicyResponsePtrOutputWithContext(context.Background())
}

func (i BackendBucketCdnPolicyResponseArgs) ToBackendBucketCdnPolicyResponsePtrOutputWithContext(ctx context.Context) BackendBucketCdnPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyResponseOutput).ToBackendBucketCdnPolicyResponsePtrOutputWithContext(ctx)
}

// BackendBucketCdnPolicyResponsePtrInput is an input type that accepts BackendBucketCdnPolicyResponseArgs, BackendBucketCdnPolicyResponsePtr and BackendBucketCdnPolicyResponsePtrOutput values.
// You can construct a concrete instance of `BackendBucketCdnPolicyResponsePtrInput` via:
//
//          BackendBucketCdnPolicyResponseArgs{...}
//
//  or:
//
//          nil
type BackendBucketCdnPolicyResponsePtrInput interface {
	pulumi.Input

	ToBackendBucketCdnPolicyResponsePtrOutput() BackendBucketCdnPolicyResponsePtrOutput
	ToBackendBucketCdnPolicyResponsePtrOutputWithContext(context.Context) BackendBucketCdnPolicyResponsePtrOutput
}

type backendBucketCdnPolicyResponsePtrType BackendBucketCdnPolicyResponseArgs

func BackendBucketCdnPolicyResponsePtr(v *BackendBucketCdnPolicyResponseArgs) BackendBucketCdnPolicyResponsePtrInput {
	return (*backendBucketCdnPolicyResponsePtrType)(v)
}

func (*backendBucketCdnPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendBucketCdnPolicyResponse)(nil)).Elem()
}

func (i *backendBucketCdnPolicyResponsePtrType) ToBackendBucketCdnPolicyResponsePtrOutput() BackendBucketCdnPolicyResponsePtrOutput {
	return i.ToBackendBucketCdnPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *backendBucketCdnPolicyResponsePtrType) ToBackendBucketCdnPolicyResponsePtrOutputWithContext(ctx context.Context) BackendBucketCdnPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendBucketCdnPolicyResponsePtrOutput)
}

// Message containing Cloud CDN configuration for a backend bucket.
type BackendBucketCdnPolicyResponseOutput struct{ *pulumi.OutputState }

func (BackendBucketCdnPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendBucketCdnPolicyResponse)(nil)).Elem()
}

func (o BackendBucketCdnPolicyResponseOutput) ToBackendBucketCdnPolicyResponseOutput() BackendBucketCdnPolicyResponseOutput {
	return o
}

func (o BackendBucketCdnPolicyResponseOutput) ToBackendBucketCdnPolicyResponseOutputWithContext(ctx context.Context) BackendBucketCdnPolicyResponseOutput {
	return o
}

func (o BackendBucketCdnPolicyResponseOutput) ToBackendBucketCdnPolicyResponsePtrOutput() BackendBucketCdnPolicyResponsePtrOutput {
	return o.ToBackendBucketCdnPolicyResponsePtrOutputWithContext(context.Background())
}

func (o BackendBucketCdnPolicyResponseOutput) ToBackendBucketCdnPolicyResponsePtrOutputWithContext(ctx context.Context) BackendBucketCdnPolicyResponsePtrOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyResponse) *BackendBucketCdnPolicyResponse {
		return &v
	}).(BackendBucketCdnPolicyResponsePtrOutput)
}

// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
func (o BackendBucketCdnPolicyResponseOutput) BypassCacheOnRequestHeaders() BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyResponse) []BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse {
		return v.BypassCacheOnRequestHeaders
	}).(BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput)
}

// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
func (o BackendBucketCdnPolicyResponseOutput) CacheMode() pulumi.StringOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyResponse) string { return v.CacheMode }).(pulumi.StringOutput)
}

// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day).
func (o BackendBucketCdnPolicyResponseOutput) ClientTtl() pulumi.IntOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyResponse) int { return v.ClientTtl }).(pulumi.IntOutput)
}

// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendBucketCdnPolicyResponseOutput) DefaultTtl() pulumi.IntOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyResponse) int { return v.DefaultTtl }).(pulumi.IntOutput)
}

// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendBucketCdnPolicyResponseOutput) MaxTtl() pulumi.IntOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyResponse) int { return v.MaxTtl }).(pulumi.IntOutput)
}

// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
func (o BackendBucketCdnPolicyResponseOutput) NegativeCaching() pulumi.BoolOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyResponse) bool { return v.NegativeCaching }).(pulumi.BoolOutput)
}

// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
func (o BackendBucketCdnPolicyResponseOutput) NegativeCachingPolicy() BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyResponse) []BackendBucketCdnPolicyNegativeCachingPolicyResponse {
		return v.NegativeCachingPolicy
	}).(BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput)
}

// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
func (o BackendBucketCdnPolicyResponseOutput) RequestCoalescing() pulumi.BoolOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyResponse) bool { return v.RequestCoalescing }).(pulumi.BoolOutput)
}

// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
func (o BackendBucketCdnPolicyResponseOutput) ServeWhileStale() pulumi.IntOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyResponse) int { return v.ServeWhileStale }).(pulumi.IntOutput)
}

// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
func (o BackendBucketCdnPolicyResponseOutput) SignedUrlCacheMaxAgeSec() pulumi.StringOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyResponse) string { return v.SignedUrlCacheMaxAgeSec }).(pulumi.StringOutput)
}

// Names of the keys for signing request URLs.
func (o BackendBucketCdnPolicyResponseOutput) SignedUrlKeyNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackendBucketCdnPolicyResponse) []string { return v.SignedUrlKeyNames }).(pulumi.StringArrayOutput)
}

type BackendBucketCdnPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (BackendBucketCdnPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendBucketCdnPolicyResponse)(nil)).Elem()
}

func (o BackendBucketCdnPolicyResponsePtrOutput) ToBackendBucketCdnPolicyResponsePtrOutput() BackendBucketCdnPolicyResponsePtrOutput {
	return o
}

func (o BackendBucketCdnPolicyResponsePtrOutput) ToBackendBucketCdnPolicyResponsePtrOutputWithContext(ctx context.Context) BackendBucketCdnPolicyResponsePtrOutput {
	return o
}

func (o BackendBucketCdnPolicyResponsePtrOutput) Elem() BackendBucketCdnPolicyResponseOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicyResponse) BackendBucketCdnPolicyResponse { return *v }).(BackendBucketCdnPolicyResponseOutput)
}

// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
func (o BackendBucketCdnPolicyResponsePtrOutput) BypassCacheOnRequestHeaders() BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicyResponse) []BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponse {
		if v == nil {
			return nil
		}
		return v.BypassCacheOnRequestHeaders
	}).(BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput)
}

// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
func (o BackendBucketCdnPolicyResponsePtrOutput) CacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CacheMode
	}).(pulumi.StringPtrOutput)
}

// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day).
func (o BackendBucketCdnPolicyResponsePtrOutput) ClientTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ClientTtl
	}).(pulumi.IntPtrOutput)
}

// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendBucketCdnPolicyResponsePtrOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DefaultTtl
	}).(pulumi.IntPtrOutput)
}

// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendBucketCdnPolicyResponsePtrOutput) MaxTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxTtl
	}).(pulumi.IntPtrOutput)
}

// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
func (o BackendBucketCdnPolicyResponsePtrOutput) NegativeCaching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.NegativeCaching
	}).(pulumi.BoolPtrOutput)
}

// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
func (o BackendBucketCdnPolicyResponsePtrOutput) NegativeCachingPolicy() BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicyResponse) []BackendBucketCdnPolicyNegativeCachingPolicyResponse {
		if v == nil {
			return nil
		}
		return v.NegativeCachingPolicy
	}).(BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput)
}

// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
func (o BackendBucketCdnPolicyResponsePtrOutput) RequestCoalescing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.RequestCoalescing
	}).(pulumi.BoolPtrOutput)
}

// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
func (o BackendBucketCdnPolicyResponsePtrOutput) ServeWhileStale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ServeWhileStale
	}).(pulumi.IntPtrOutput)
}

// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
func (o BackendBucketCdnPolicyResponsePtrOutput) SignedUrlCacheMaxAgeSec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SignedUrlCacheMaxAgeSec
	}).(pulumi.StringPtrOutput)
}

// Names of the keys for signing request URLs.
func (o BackendBucketCdnPolicyResponsePtrOutput) SignedUrlKeyNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendBucketCdnPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.SignedUrlKeyNames
	}).(pulumi.StringArrayOutput)
}

// Message containing information of one individual backend.
type BackendResponse struct {
	// Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode.
	BalancingMode string `pulumi:"balancingMode"`
	// A multiplier applied to the backend's target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service.
	CapacityScaler float64 `pulumi:"capacityScaler"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description string `pulumi:"description"`
	// This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService.
	Failover bool `pulumi:"failover"`
	// The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service#backends). You must use the *fully-qualified* URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported.
	Group string `pulumi:"group"`
	// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
	MaxConnections int `pulumi:"maxConnections"`
	// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
	MaxConnectionsPerEndpoint int `pulumi:"maxConnectionsPerEndpoint"`
	// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
	MaxConnectionsPerInstance int `pulumi:"maxConnectionsPerInstance"`
	// Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
	MaxRate int `pulumi:"maxRate"`
	// Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
	MaxRatePerEndpoint float64 `pulumi:"maxRatePerEndpoint"`
	// Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
	MaxRatePerInstance float64 `pulumi:"maxRatePerInstance"`
	MaxUtilization     float64 `pulumi:"maxUtilization"`
}

// BackendResponseInput is an input type that accepts BackendResponseArgs and BackendResponseOutput values.
// You can construct a concrete instance of `BackendResponseInput` via:
//
//          BackendResponseArgs{...}
type BackendResponseInput interface {
	pulumi.Input

	ToBackendResponseOutput() BackendResponseOutput
	ToBackendResponseOutputWithContext(context.Context) BackendResponseOutput
}

// Message containing information of one individual backend.
type BackendResponseArgs struct {
	// Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode.
	BalancingMode pulumi.StringInput `pulumi:"balancingMode"`
	// A multiplier applied to the backend's target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service.
	CapacityScaler pulumi.Float64Input `pulumi:"capacityScaler"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringInput `pulumi:"description"`
	// This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService.
	Failover pulumi.BoolInput `pulumi:"failover"`
	// The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service#backends). You must use the *fully-qualified* URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported.
	Group pulumi.StringInput `pulumi:"group"`
	// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
	MaxConnections pulumi.IntInput `pulumi:"maxConnections"`
	// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
	MaxConnectionsPerEndpoint pulumi.IntInput `pulumi:"maxConnectionsPerEndpoint"`
	// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
	MaxConnectionsPerInstance pulumi.IntInput `pulumi:"maxConnectionsPerInstance"`
	// Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
	MaxRate pulumi.IntInput `pulumi:"maxRate"`
	// Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
	MaxRatePerEndpoint pulumi.Float64Input `pulumi:"maxRatePerEndpoint"`
	// Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
	MaxRatePerInstance pulumi.Float64Input `pulumi:"maxRatePerInstance"`
	MaxUtilization     pulumi.Float64Input `pulumi:"maxUtilization"`
}

func (BackendResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendResponse)(nil)).Elem()
}

func (i BackendResponseArgs) ToBackendResponseOutput() BackendResponseOutput {
	return i.ToBackendResponseOutputWithContext(context.Background())
}

func (i BackendResponseArgs) ToBackendResponseOutputWithContext(ctx context.Context) BackendResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendResponseOutput)
}

// BackendResponseArrayInput is an input type that accepts BackendResponseArray and BackendResponseArrayOutput values.
// You can construct a concrete instance of `BackendResponseArrayInput` via:
//
//          BackendResponseArray{ BackendResponseArgs{...} }
type BackendResponseArrayInput interface {
	pulumi.Input

	ToBackendResponseArrayOutput() BackendResponseArrayOutput
	ToBackendResponseArrayOutputWithContext(context.Context) BackendResponseArrayOutput
}

type BackendResponseArray []BackendResponseInput

func (BackendResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendResponse)(nil)).Elem()
}

func (i BackendResponseArray) ToBackendResponseArrayOutput() BackendResponseArrayOutput {
	return i.ToBackendResponseArrayOutputWithContext(context.Background())
}

func (i BackendResponseArray) ToBackendResponseArrayOutputWithContext(ctx context.Context) BackendResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendResponseArrayOutput)
}

// Message containing information of one individual backend.
type BackendResponseOutput struct{ *pulumi.OutputState }

func (BackendResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendResponse)(nil)).Elem()
}

func (o BackendResponseOutput) ToBackendResponseOutput() BackendResponseOutput {
	return o
}

func (o BackendResponseOutput) ToBackendResponseOutputWithContext(ctx context.Context) BackendResponseOutput {
	return o
}

// Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode.
func (o BackendResponseOutput) BalancingMode() pulumi.StringOutput {
	return o.ApplyT(func(v BackendResponse) string { return v.BalancingMode }).(pulumi.StringOutput)
}

// A multiplier applied to the backend's target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service.
func (o BackendResponseOutput) CapacityScaler() pulumi.Float64Output {
	return o.ApplyT(func(v BackendResponse) float64 { return v.CapacityScaler }).(pulumi.Float64Output)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o BackendResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v BackendResponse) string { return v.Description }).(pulumi.StringOutput)
}

// This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService.
func (o BackendResponseOutput) Failover() pulumi.BoolOutput {
	return o.ApplyT(func(v BackendResponse) bool { return v.Failover }).(pulumi.BoolOutput)
}

// The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service#backends). You must use the *fully-qualified* URL (starting with https://www.googleapis.com/) to specify the instance group or NEG. Partial URLs are not supported.
func (o BackendResponseOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v BackendResponse) string { return v.Group }).(pulumi.StringOutput)
}

// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
func (o BackendResponseOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v BackendResponse) int { return v.MaxConnections }).(pulumi.IntOutput)
}

// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
func (o BackendResponseOutput) MaxConnectionsPerEndpoint() pulumi.IntOutput {
	return o.ApplyT(func(v BackendResponse) int { return v.MaxConnectionsPerEndpoint }).(pulumi.IntOutput)
}

// Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is RATE.
func (o BackendResponseOutput) MaxConnectionsPerInstance() pulumi.IntOutput {
	return o.ApplyT(func(v BackendResponse) int { return v.MaxConnectionsPerInstance }).(pulumi.IntOutput)
}

// Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
func (o BackendResponseOutput) MaxRate() pulumi.IntOutput {
	return o.ApplyT(func(v BackendResponse) int { return v.MaxRate }).(pulumi.IntOutput)
}

// Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
func (o BackendResponseOutput) MaxRatePerEndpoint() pulumi.Float64Output {
	return o.ApplyT(func(v BackendResponse) float64 { return v.MaxRatePerEndpoint }).(pulumi.Float64Output)
}

// Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is CONNECTION.
func (o BackendResponseOutput) MaxRatePerInstance() pulumi.Float64Output {
	return o.ApplyT(func(v BackendResponse) float64 { return v.MaxRatePerInstance }).(pulumi.Float64Output)
}

func (o BackendResponseOutput) MaxUtilization() pulumi.Float64Output {
	return o.ApplyT(func(v BackendResponse) float64 { return v.MaxUtilization }).(pulumi.Float64Output)
}

type BackendResponseArrayOutput struct{ *pulumi.OutputState }

func (BackendResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendResponse)(nil)).Elem()
}

func (o BackendResponseArrayOutput) ToBackendResponseArrayOutput() BackendResponseArrayOutput {
	return o
}

func (o BackendResponseArrayOutput) ToBackendResponseArrayOutputWithContext(ctx context.Context) BackendResponseArrayOutput {
	return o
}

func (o BackendResponseArrayOutput) Index(i pulumi.IntInput) BackendResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendResponse {
		return vs[0].([]BackendResponse)[vs[1].(int)]
	}).(BackendResponseOutput)
}

// Message containing Cloud CDN configuration for a backend service.
type BackendServiceCdnPolicy struct {
	// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
	BypassCacheOnRequestHeaders []BackendServiceCdnPolicyBypassCacheOnRequestHeader `pulumi:"bypassCacheOnRequestHeaders"`
	// The CacheKeyPolicy for this CdnPolicy.
	CacheKeyPolicy *CacheKeyPolicy `pulumi:"cacheKeyPolicy"`
	// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
	CacheMode *string `pulumi:"cacheMode"`
	// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day).
	ClientTtl *int `pulumi:"clientTtl"`
	// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	DefaultTtl *int `pulumi:"defaultTtl"`
	// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	MaxTtl *int `pulumi:"maxTtl"`
	// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
	NegativeCaching *bool `pulumi:"negativeCaching"`
	// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
	NegativeCachingPolicy []BackendServiceCdnPolicyNegativeCachingPolicy `pulumi:"negativeCachingPolicy"`
	// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
	RequestCoalescing *bool `pulumi:"requestCoalescing"`
	// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
	ServeWhileStale *int `pulumi:"serveWhileStale"`
	// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
	SignedUrlCacheMaxAgeSec *string `pulumi:"signedUrlCacheMaxAgeSec"`
}

// BackendServiceCdnPolicyInput is an input type that accepts BackendServiceCdnPolicyArgs and BackendServiceCdnPolicyOutput values.
// You can construct a concrete instance of `BackendServiceCdnPolicyInput` via:
//
//          BackendServiceCdnPolicyArgs{...}
type BackendServiceCdnPolicyInput interface {
	pulumi.Input

	ToBackendServiceCdnPolicyOutput() BackendServiceCdnPolicyOutput
	ToBackendServiceCdnPolicyOutputWithContext(context.Context) BackendServiceCdnPolicyOutput
}

// Message containing Cloud CDN configuration for a backend service.
type BackendServiceCdnPolicyArgs struct {
	// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
	BypassCacheOnRequestHeaders BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayInput `pulumi:"bypassCacheOnRequestHeaders"`
	// The CacheKeyPolicy for this CdnPolicy.
	CacheKeyPolicy CacheKeyPolicyPtrInput `pulumi:"cacheKeyPolicy"`
	// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
	CacheMode *BackendServiceCdnPolicyCacheMode `pulumi:"cacheMode"`
	// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day).
	ClientTtl pulumi.IntPtrInput `pulumi:"clientTtl"`
	// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	DefaultTtl pulumi.IntPtrInput `pulumi:"defaultTtl"`
	// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	MaxTtl pulumi.IntPtrInput `pulumi:"maxTtl"`
	// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
	NegativeCaching pulumi.BoolPtrInput `pulumi:"negativeCaching"`
	// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
	NegativeCachingPolicy BackendServiceCdnPolicyNegativeCachingPolicyArrayInput `pulumi:"negativeCachingPolicy"`
	// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
	RequestCoalescing pulumi.BoolPtrInput `pulumi:"requestCoalescing"`
	// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
	ServeWhileStale pulumi.IntPtrInput `pulumi:"serveWhileStale"`
	// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
	SignedUrlCacheMaxAgeSec pulumi.StringPtrInput `pulumi:"signedUrlCacheMaxAgeSec"`
}

func (BackendServiceCdnPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCdnPolicy)(nil)).Elem()
}

func (i BackendServiceCdnPolicyArgs) ToBackendServiceCdnPolicyOutput() BackendServiceCdnPolicyOutput {
	return i.ToBackendServiceCdnPolicyOutputWithContext(context.Background())
}

func (i BackendServiceCdnPolicyArgs) ToBackendServiceCdnPolicyOutputWithContext(ctx context.Context) BackendServiceCdnPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyOutput)
}

func (i BackendServiceCdnPolicyArgs) ToBackendServiceCdnPolicyPtrOutput() BackendServiceCdnPolicyPtrOutput {
	return i.ToBackendServiceCdnPolicyPtrOutputWithContext(context.Background())
}

func (i BackendServiceCdnPolicyArgs) ToBackendServiceCdnPolicyPtrOutputWithContext(ctx context.Context) BackendServiceCdnPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyOutput).ToBackendServiceCdnPolicyPtrOutputWithContext(ctx)
}

// BackendServiceCdnPolicyPtrInput is an input type that accepts BackendServiceCdnPolicyArgs, BackendServiceCdnPolicyPtr and BackendServiceCdnPolicyPtrOutput values.
// You can construct a concrete instance of `BackendServiceCdnPolicyPtrInput` via:
//
//          BackendServiceCdnPolicyArgs{...}
//
//  or:
//
//          nil
type BackendServiceCdnPolicyPtrInput interface {
	pulumi.Input

	ToBackendServiceCdnPolicyPtrOutput() BackendServiceCdnPolicyPtrOutput
	ToBackendServiceCdnPolicyPtrOutputWithContext(context.Context) BackendServiceCdnPolicyPtrOutput
}

type backendServiceCdnPolicyPtrType BackendServiceCdnPolicyArgs

func BackendServiceCdnPolicyPtr(v *BackendServiceCdnPolicyArgs) BackendServiceCdnPolicyPtrInput {
	return (*backendServiceCdnPolicyPtrType)(v)
}

func (*backendServiceCdnPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceCdnPolicy)(nil)).Elem()
}

func (i *backendServiceCdnPolicyPtrType) ToBackendServiceCdnPolicyPtrOutput() BackendServiceCdnPolicyPtrOutput {
	return i.ToBackendServiceCdnPolicyPtrOutputWithContext(context.Background())
}

func (i *backendServiceCdnPolicyPtrType) ToBackendServiceCdnPolicyPtrOutputWithContext(ctx context.Context) BackendServiceCdnPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyPtrOutput)
}

// Message containing Cloud CDN configuration for a backend service.
type BackendServiceCdnPolicyOutput struct{ *pulumi.OutputState }

func (BackendServiceCdnPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCdnPolicy)(nil)).Elem()
}

func (o BackendServiceCdnPolicyOutput) ToBackendServiceCdnPolicyOutput() BackendServiceCdnPolicyOutput {
	return o
}

func (o BackendServiceCdnPolicyOutput) ToBackendServiceCdnPolicyOutputWithContext(ctx context.Context) BackendServiceCdnPolicyOutput {
	return o
}

func (o BackendServiceCdnPolicyOutput) ToBackendServiceCdnPolicyPtrOutput() BackendServiceCdnPolicyPtrOutput {
	return o.ToBackendServiceCdnPolicyPtrOutputWithContext(context.Background())
}

func (o BackendServiceCdnPolicyOutput) ToBackendServiceCdnPolicyPtrOutputWithContext(ctx context.Context) BackendServiceCdnPolicyPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicy) *BackendServiceCdnPolicy {
		return &v
	}).(BackendServiceCdnPolicyPtrOutput)
}

// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
func (o BackendServiceCdnPolicyOutput) BypassCacheOnRequestHeaders() BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicy) []BackendServiceCdnPolicyBypassCacheOnRequestHeader {
		return v.BypassCacheOnRequestHeaders
	}).(BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput)
}

// The CacheKeyPolicy for this CdnPolicy.
func (o BackendServiceCdnPolicyOutput) CacheKeyPolicy() CacheKeyPolicyPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicy) *CacheKeyPolicy { return v.CacheKeyPolicy }).(CacheKeyPolicyPtrOutput)
}

// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
func (o BackendServiceCdnPolicyOutput) CacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicy) *string { return v.CacheMode }).(pulumi.StringPtrOutput)
}

// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day).
func (o BackendServiceCdnPolicyOutput) ClientTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicy) *int { return v.ClientTtl }).(pulumi.IntPtrOutput)
}

// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendServiceCdnPolicyOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicy) *int { return v.DefaultTtl }).(pulumi.IntPtrOutput)
}

// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendServiceCdnPolicyOutput) MaxTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicy) *int { return v.MaxTtl }).(pulumi.IntPtrOutput)
}

// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
func (o BackendServiceCdnPolicyOutput) NegativeCaching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicy) *bool { return v.NegativeCaching }).(pulumi.BoolPtrOutput)
}

// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
func (o BackendServiceCdnPolicyOutput) NegativeCachingPolicy() BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicy) []BackendServiceCdnPolicyNegativeCachingPolicy {
		return v.NegativeCachingPolicy
	}).(BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput)
}

// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
func (o BackendServiceCdnPolicyOutput) RequestCoalescing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicy) *bool { return v.RequestCoalescing }).(pulumi.BoolPtrOutput)
}

// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
func (o BackendServiceCdnPolicyOutput) ServeWhileStale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicy) *int { return v.ServeWhileStale }).(pulumi.IntPtrOutput)
}

// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
func (o BackendServiceCdnPolicyOutput) SignedUrlCacheMaxAgeSec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicy) *string { return v.SignedUrlCacheMaxAgeSec }).(pulumi.StringPtrOutput)
}

type BackendServiceCdnPolicyPtrOutput struct{ *pulumi.OutputState }

func (BackendServiceCdnPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceCdnPolicy)(nil)).Elem()
}

func (o BackendServiceCdnPolicyPtrOutput) ToBackendServiceCdnPolicyPtrOutput() BackendServiceCdnPolicyPtrOutput {
	return o
}

func (o BackendServiceCdnPolicyPtrOutput) ToBackendServiceCdnPolicyPtrOutputWithContext(ctx context.Context) BackendServiceCdnPolicyPtrOutput {
	return o
}

func (o BackendServiceCdnPolicyPtrOutput) Elem() BackendServiceCdnPolicyOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicy) BackendServiceCdnPolicy { return *v }).(BackendServiceCdnPolicyOutput)
}

// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
func (o BackendServiceCdnPolicyPtrOutput) BypassCacheOnRequestHeaders() BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicy) []BackendServiceCdnPolicyBypassCacheOnRequestHeader {
		if v == nil {
			return nil
		}
		return v.BypassCacheOnRequestHeaders
	}).(BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput)
}

// The CacheKeyPolicy for this CdnPolicy.
func (o BackendServiceCdnPolicyPtrOutput) CacheKeyPolicy() CacheKeyPolicyPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicy) *CacheKeyPolicy {
		if v == nil {
			return nil
		}
		return v.CacheKeyPolicy
	}).(CacheKeyPolicyPtrOutput)
}

// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
func (o BackendServiceCdnPolicyPtrOutput) CacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.CacheMode
	}).(pulumi.StringPtrOutput)
}

// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day).
func (o BackendServiceCdnPolicyPtrOutput) ClientTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicy) *int {
		if v == nil {
			return nil
		}
		return v.ClientTtl
	}).(pulumi.IntPtrOutput)
}

// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendServiceCdnPolicyPtrOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicy) *int {
		if v == nil {
			return nil
		}
		return v.DefaultTtl
	}).(pulumi.IntPtrOutput)
}

// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendServiceCdnPolicyPtrOutput) MaxTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxTtl
	}).(pulumi.IntPtrOutput)
}

// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
func (o BackendServiceCdnPolicyPtrOutput) NegativeCaching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.NegativeCaching
	}).(pulumi.BoolPtrOutput)
}

// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
func (o BackendServiceCdnPolicyPtrOutput) NegativeCachingPolicy() BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicy) []BackendServiceCdnPolicyNegativeCachingPolicy {
		if v == nil {
			return nil
		}
		return v.NegativeCachingPolicy
	}).(BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput)
}

// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
func (o BackendServiceCdnPolicyPtrOutput) RequestCoalescing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.RequestCoalescing
	}).(pulumi.BoolPtrOutput)
}

// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
func (o BackendServiceCdnPolicyPtrOutput) ServeWhileStale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicy) *int {
		if v == nil {
			return nil
		}
		return v.ServeWhileStale
	}).(pulumi.IntPtrOutput)
}

// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
func (o BackendServiceCdnPolicyPtrOutput) SignedUrlCacheMaxAgeSec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicy) *string {
		if v == nil {
			return nil
		}
		return v.SignedUrlCacheMaxAgeSec
	}).(pulumi.StringPtrOutput)
}

// Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
type BackendServiceCdnPolicyBypassCacheOnRequestHeader struct {
	// The header field name to match on when bypassing cache. Values are case-insensitive.
	HeaderName *string `pulumi:"headerName"`
}

// BackendServiceCdnPolicyBypassCacheOnRequestHeaderInput is an input type that accepts BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs and BackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput values.
// You can construct a concrete instance of `BackendServiceCdnPolicyBypassCacheOnRequestHeaderInput` via:
//
//          BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs{...}
type BackendServiceCdnPolicyBypassCacheOnRequestHeaderInput interface {
	pulumi.Input

	ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput() BackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput
	ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderOutputWithContext(context.Context) BackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput
}

// Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
type BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs struct {
	// The header field name to match on when bypassing cache. Values are case-insensitive.
	HeaderName pulumi.StringPtrInput `pulumi:"headerName"`
}

func (BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCdnPolicyBypassCacheOnRequestHeader)(nil)).Elem()
}

func (i BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs) ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput() BackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput {
	return i.ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderOutputWithContext(context.Background())
}

func (i BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs) ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderOutputWithContext(ctx context.Context) BackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput)
}

// BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayInput is an input type that accepts BackendServiceCdnPolicyBypassCacheOnRequestHeaderArray and BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput values.
// You can construct a concrete instance of `BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayInput` via:
//
//          BackendServiceCdnPolicyBypassCacheOnRequestHeaderArray{ BackendServiceCdnPolicyBypassCacheOnRequestHeaderArgs{...} }
type BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayInput interface {
	pulumi.Input

	ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput() BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput
	ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutputWithContext(context.Context) BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput
}

type BackendServiceCdnPolicyBypassCacheOnRequestHeaderArray []BackendServiceCdnPolicyBypassCacheOnRequestHeaderInput

func (BackendServiceCdnPolicyBypassCacheOnRequestHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendServiceCdnPolicyBypassCacheOnRequestHeader)(nil)).Elem()
}

func (i BackendServiceCdnPolicyBypassCacheOnRequestHeaderArray) ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput() BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput {
	return i.ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutputWithContext(context.Background())
}

func (i BackendServiceCdnPolicyBypassCacheOnRequestHeaderArray) ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutputWithContext(ctx context.Context) BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput)
}

// Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
type BackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput struct{ *pulumi.OutputState }

func (BackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCdnPolicyBypassCacheOnRequestHeader)(nil)).Elem()
}

func (o BackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput) ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput() BackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput {
	return o
}

func (o BackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput) ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderOutputWithContext(ctx context.Context) BackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput {
	return o
}

// The header field name to match on when bypassing cache. Values are case-insensitive.
func (o BackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput) HeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyBypassCacheOnRequestHeader) *string { return v.HeaderName }).(pulumi.StringPtrOutput)
}

type BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput struct{ *pulumi.OutputState }

func (BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendServiceCdnPolicyBypassCacheOnRequestHeader)(nil)).Elem()
}

func (o BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput) ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput() BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput {
	return o
}

func (o BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput) ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutputWithContext(ctx context.Context) BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput {
	return o
}

func (o BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput) Index(i pulumi.IntInput) BackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendServiceCdnPolicyBypassCacheOnRequestHeader {
		return vs[0].([]BackendServiceCdnPolicyBypassCacheOnRequestHeader)[vs[1].(int)]
	}).(BackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput)
}

// Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
type BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponse struct {
	// The header field name to match on when bypassing cache. Values are case-insensitive.
	HeaderName string `pulumi:"headerName"`
}

// BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseInput is an input type that accepts BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArgs and BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput values.
// You can construct a concrete instance of `BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseInput` via:
//
//          BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArgs{...}
type BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseInput interface {
	pulumi.Input

	ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput() BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput
	ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutputWithContext(context.Context) BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput
}

// Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
type BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArgs struct {
	// The header field name to match on when bypassing cache. Values are case-insensitive.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
}

func (BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponse)(nil)).Elem()
}

func (i BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArgs) ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput() BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput {
	return i.ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutputWithContext(context.Background())
}

func (i BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArgs) ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutputWithContext(ctx context.Context) BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput)
}

// BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayInput is an input type that accepts BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArray and BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput values.
// You can construct a concrete instance of `BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayInput` via:
//
//          BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArray{ BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArgs{...} }
type BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayInput interface {
	pulumi.Input

	ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput() BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput
	ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutputWithContext(context.Context) BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput
}

type BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArray []BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseInput

func (BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponse)(nil)).Elem()
}

func (i BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArray) ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput() BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput {
	return i.ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutputWithContext(context.Background())
}

func (i BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArray) ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutputWithContext(ctx context.Context) BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput)
}

// Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
type BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput struct{ *pulumi.OutputState }

func (BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponse)(nil)).Elem()
}

func (o BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput) ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput() BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput {
	return o
}

func (o BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput) ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutputWithContext(ctx context.Context) BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput {
	return o
}

// The header field name to match on when bypassing cache. Values are case-insensitive.
func (o BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponse) string { return v.HeaderName }).(pulumi.StringOutput)
}

type BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput struct{ *pulumi.OutputState }

func (BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponse)(nil)).Elem()
}

func (o BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput) ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput() BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput {
	return o
}

func (o BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput) ToBackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutputWithContext(ctx context.Context) BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput {
	return o
}

func (o BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput) Index(i pulumi.IntInput) BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponse {
		return vs[0].([]BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponse)[vs[1].(int)]
	}).(BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput)
}

// Specify CDN TTLs for response error codes.
type BackendServiceCdnPolicyNegativeCachingPolicy struct {
	// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
	Code *int `pulumi:"code"`
	// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	Ttl *int `pulumi:"ttl"`
}

// BackendServiceCdnPolicyNegativeCachingPolicyInput is an input type that accepts BackendServiceCdnPolicyNegativeCachingPolicyArgs and BackendServiceCdnPolicyNegativeCachingPolicyOutput values.
// You can construct a concrete instance of `BackendServiceCdnPolicyNegativeCachingPolicyInput` via:
//
//          BackendServiceCdnPolicyNegativeCachingPolicyArgs{...}
type BackendServiceCdnPolicyNegativeCachingPolicyInput interface {
	pulumi.Input

	ToBackendServiceCdnPolicyNegativeCachingPolicyOutput() BackendServiceCdnPolicyNegativeCachingPolicyOutput
	ToBackendServiceCdnPolicyNegativeCachingPolicyOutputWithContext(context.Context) BackendServiceCdnPolicyNegativeCachingPolicyOutput
}

// Specify CDN TTLs for response error codes.
type BackendServiceCdnPolicyNegativeCachingPolicyArgs struct {
	// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
}

func (BackendServiceCdnPolicyNegativeCachingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCdnPolicyNegativeCachingPolicy)(nil)).Elem()
}

func (i BackendServiceCdnPolicyNegativeCachingPolicyArgs) ToBackendServiceCdnPolicyNegativeCachingPolicyOutput() BackendServiceCdnPolicyNegativeCachingPolicyOutput {
	return i.ToBackendServiceCdnPolicyNegativeCachingPolicyOutputWithContext(context.Background())
}

func (i BackendServiceCdnPolicyNegativeCachingPolicyArgs) ToBackendServiceCdnPolicyNegativeCachingPolicyOutputWithContext(ctx context.Context) BackendServiceCdnPolicyNegativeCachingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyNegativeCachingPolicyOutput)
}

// BackendServiceCdnPolicyNegativeCachingPolicyArrayInput is an input type that accepts BackendServiceCdnPolicyNegativeCachingPolicyArray and BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput values.
// You can construct a concrete instance of `BackendServiceCdnPolicyNegativeCachingPolicyArrayInput` via:
//
//          BackendServiceCdnPolicyNegativeCachingPolicyArray{ BackendServiceCdnPolicyNegativeCachingPolicyArgs{...} }
type BackendServiceCdnPolicyNegativeCachingPolicyArrayInput interface {
	pulumi.Input

	ToBackendServiceCdnPolicyNegativeCachingPolicyArrayOutput() BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput
	ToBackendServiceCdnPolicyNegativeCachingPolicyArrayOutputWithContext(context.Context) BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput
}

type BackendServiceCdnPolicyNegativeCachingPolicyArray []BackendServiceCdnPolicyNegativeCachingPolicyInput

func (BackendServiceCdnPolicyNegativeCachingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendServiceCdnPolicyNegativeCachingPolicy)(nil)).Elem()
}

func (i BackendServiceCdnPolicyNegativeCachingPolicyArray) ToBackendServiceCdnPolicyNegativeCachingPolicyArrayOutput() BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput {
	return i.ToBackendServiceCdnPolicyNegativeCachingPolicyArrayOutputWithContext(context.Background())
}

func (i BackendServiceCdnPolicyNegativeCachingPolicyArray) ToBackendServiceCdnPolicyNegativeCachingPolicyArrayOutputWithContext(ctx context.Context) BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput)
}

// Specify CDN TTLs for response error codes.
type BackendServiceCdnPolicyNegativeCachingPolicyOutput struct{ *pulumi.OutputState }

func (BackendServiceCdnPolicyNegativeCachingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCdnPolicyNegativeCachingPolicy)(nil)).Elem()
}

func (o BackendServiceCdnPolicyNegativeCachingPolicyOutput) ToBackendServiceCdnPolicyNegativeCachingPolicyOutput() BackendServiceCdnPolicyNegativeCachingPolicyOutput {
	return o
}

func (o BackendServiceCdnPolicyNegativeCachingPolicyOutput) ToBackendServiceCdnPolicyNegativeCachingPolicyOutputWithContext(ctx context.Context) BackendServiceCdnPolicyNegativeCachingPolicyOutput {
	return o
}

// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
func (o BackendServiceCdnPolicyNegativeCachingPolicyOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyNegativeCachingPolicy) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendServiceCdnPolicyNegativeCachingPolicyOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyNegativeCachingPolicy) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

type BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput struct{ *pulumi.OutputState }

func (BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendServiceCdnPolicyNegativeCachingPolicy)(nil)).Elem()
}

func (o BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput) ToBackendServiceCdnPolicyNegativeCachingPolicyArrayOutput() BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput {
	return o
}

func (o BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput) ToBackendServiceCdnPolicyNegativeCachingPolicyArrayOutputWithContext(ctx context.Context) BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput {
	return o
}

func (o BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput) Index(i pulumi.IntInput) BackendServiceCdnPolicyNegativeCachingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendServiceCdnPolicyNegativeCachingPolicy {
		return vs[0].([]BackendServiceCdnPolicyNegativeCachingPolicy)[vs[1].(int)]
	}).(BackendServiceCdnPolicyNegativeCachingPolicyOutput)
}

// Specify CDN TTLs for response error codes.
type BackendServiceCdnPolicyNegativeCachingPolicyResponse struct {
	// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
	Code int `pulumi:"code"`
	// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	Ttl int `pulumi:"ttl"`
}

// BackendServiceCdnPolicyNegativeCachingPolicyResponseInput is an input type that accepts BackendServiceCdnPolicyNegativeCachingPolicyResponseArgs and BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput values.
// You can construct a concrete instance of `BackendServiceCdnPolicyNegativeCachingPolicyResponseInput` via:
//
//          BackendServiceCdnPolicyNegativeCachingPolicyResponseArgs{...}
type BackendServiceCdnPolicyNegativeCachingPolicyResponseInput interface {
	pulumi.Input

	ToBackendServiceCdnPolicyNegativeCachingPolicyResponseOutput() BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput
	ToBackendServiceCdnPolicyNegativeCachingPolicyResponseOutputWithContext(context.Context) BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput
}

// Specify CDN TTLs for response error codes.
type BackendServiceCdnPolicyNegativeCachingPolicyResponseArgs struct {
	// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
	Code pulumi.IntInput `pulumi:"code"`
	// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	Ttl pulumi.IntInput `pulumi:"ttl"`
}

func (BackendServiceCdnPolicyNegativeCachingPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCdnPolicyNegativeCachingPolicyResponse)(nil)).Elem()
}

func (i BackendServiceCdnPolicyNegativeCachingPolicyResponseArgs) ToBackendServiceCdnPolicyNegativeCachingPolicyResponseOutput() BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput {
	return i.ToBackendServiceCdnPolicyNegativeCachingPolicyResponseOutputWithContext(context.Background())
}

func (i BackendServiceCdnPolicyNegativeCachingPolicyResponseArgs) ToBackendServiceCdnPolicyNegativeCachingPolicyResponseOutputWithContext(ctx context.Context) BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput)
}

// BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayInput is an input type that accepts BackendServiceCdnPolicyNegativeCachingPolicyResponseArray and BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput values.
// You can construct a concrete instance of `BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayInput` via:
//
//          BackendServiceCdnPolicyNegativeCachingPolicyResponseArray{ BackendServiceCdnPolicyNegativeCachingPolicyResponseArgs{...} }
type BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayInput interface {
	pulumi.Input

	ToBackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput() BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput
	ToBackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutputWithContext(context.Context) BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput
}

type BackendServiceCdnPolicyNegativeCachingPolicyResponseArray []BackendServiceCdnPolicyNegativeCachingPolicyResponseInput

func (BackendServiceCdnPolicyNegativeCachingPolicyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendServiceCdnPolicyNegativeCachingPolicyResponse)(nil)).Elem()
}

func (i BackendServiceCdnPolicyNegativeCachingPolicyResponseArray) ToBackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput() BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput {
	return i.ToBackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutputWithContext(context.Background())
}

func (i BackendServiceCdnPolicyNegativeCachingPolicyResponseArray) ToBackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutputWithContext(ctx context.Context) BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput)
}

// Specify CDN TTLs for response error codes.
type BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput struct{ *pulumi.OutputState }

func (BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCdnPolicyNegativeCachingPolicyResponse)(nil)).Elem()
}

func (o BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput) ToBackendServiceCdnPolicyNegativeCachingPolicyResponseOutput() BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput {
	return o
}

func (o BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput) ToBackendServiceCdnPolicyNegativeCachingPolicyResponseOutputWithContext(ctx context.Context) BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput {
	return o
}

// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
func (o BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyNegativeCachingPolicyResponse) int { return v.Code }).(pulumi.IntOutput)
}

// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyNegativeCachingPolicyResponse) int { return v.Ttl }).(pulumi.IntOutput)
}

type BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput struct{ *pulumi.OutputState }

func (BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendServiceCdnPolicyNegativeCachingPolicyResponse)(nil)).Elem()
}

func (o BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput) ToBackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput() BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput {
	return o
}

func (o BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput) ToBackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutputWithContext(ctx context.Context) BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput {
	return o
}

func (o BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput) Index(i pulumi.IntInput) BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendServiceCdnPolicyNegativeCachingPolicyResponse {
		return vs[0].([]BackendServiceCdnPolicyNegativeCachingPolicyResponse)[vs[1].(int)]
	}).(BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput)
}

// Message containing Cloud CDN configuration for a backend service.
type BackendServiceCdnPolicyResponse struct {
	// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
	BypassCacheOnRequestHeaders []BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponse `pulumi:"bypassCacheOnRequestHeaders"`
	// The CacheKeyPolicy for this CdnPolicy.
	CacheKeyPolicy CacheKeyPolicyResponse `pulumi:"cacheKeyPolicy"`
	// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
	CacheMode string `pulumi:"cacheMode"`
	// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day).
	ClientTtl int `pulumi:"clientTtl"`
	// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	DefaultTtl int `pulumi:"defaultTtl"`
	// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	MaxTtl int `pulumi:"maxTtl"`
	// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
	NegativeCaching bool `pulumi:"negativeCaching"`
	// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
	NegativeCachingPolicy []BackendServiceCdnPolicyNegativeCachingPolicyResponse `pulumi:"negativeCachingPolicy"`
	// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
	RequestCoalescing bool `pulumi:"requestCoalescing"`
	// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
	ServeWhileStale int `pulumi:"serveWhileStale"`
	// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
	SignedUrlCacheMaxAgeSec string `pulumi:"signedUrlCacheMaxAgeSec"`
	// Names of the keys for signing request URLs.
	SignedUrlKeyNames []string `pulumi:"signedUrlKeyNames"`
}

// BackendServiceCdnPolicyResponseInput is an input type that accepts BackendServiceCdnPolicyResponseArgs and BackendServiceCdnPolicyResponseOutput values.
// You can construct a concrete instance of `BackendServiceCdnPolicyResponseInput` via:
//
//          BackendServiceCdnPolicyResponseArgs{...}
type BackendServiceCdnPolicyResponseInput interface {
	pulumi.Input

	ToBackendServiceCdnPolicyResponseOutput() BackendServiceCdnPolicyResponseOutput
	ToBackendServiceCdnPolicyResponseOutputWithContext(context.Context) BackendServiceCdnPolicyResponseOutput
}

// Message containing Cloud CDN configuration for a backend service.
type BackendServiceCdnPolicyResponseArgs struct {
	// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
	BypassCacheOnRequestHeaders BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayInput `pulumi:"bypassCacheOnRequestHeaders"`
	// The CacheKeyPolicy for this CdnPolicy.
	CacheKeyPolicy CacheKeyPolicyResponseInput `pulumi:"cacheKeyPolicy"`
	// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
	CacheMode pulumi.StringInput `pulumi:"cacheMode"`
	// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day).
	ClientTtl pulumi.IntInput `pulumi:"clientTtl"`
	// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	DefaultTtl pulumi.IntInput `pulumi:"defaultTtl"`
	// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
	MaxTtl pulumi.IntInput `pulumi:"maxTtl"`
	// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
	NegativeCaching pulumi.BoolInput `pulumi:"negativeCaching"`
	// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
	NegativeCachingPolicy BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayInput `pulumi:"negativeCachingPolicy"`
	// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
	RequestCoalescing pulumi.BoolInput `pulumi:"requestCoalescing"`
	// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
	ServeWhileStale pulumi.IntInput `pulumi:"serveWhileStale"`
	// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
	SignedUrlCacheMaxAgeSec pulumi.StringInput `pulumi:"signedUrlCacheMaxAgeSec"`
	// Names of the keys for signing request URLs.
	SignedUrlKeyNames pulumi.StringArrayInput `pulumi:"signedUrlKeyNames"`
}

func (BackendServiceCdnPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCdnPolicyResponse)(nil)).Elem()
}

func (i BackendServiceCdnPolicyResponseArgs) ToBackendServiceCdnPolicyResponseOutput() BackendServiceCdnPolicyResponseOutput {
	return i.ToBackendServiceCdnPolicyResponseOutputWithContext(context.Background())
}

func (i BackendServiceCdnPolicyResponseArgs) ToBackendServiceCdnPolicyResponseOutputWithContext(ctx context.Context) BackendServiceCdnPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyResponseOutput)
}

func (i BackendServiceCdnPolicyResponseArgs) ToBackendServiceCdnPolicyResponsePtrOutput() BackendServiceCdnPolicyResponsePtrOutput {
	return i.ToBackendServiceCdnPolicyResponsePtrOutputWithContext(context.Background())
}

func (i BackendServiceCdnPolicyResponseArgs) ToBackendServiceCdnPolicyResponsePtrOutputWithContext(ctx context.Context) BackendServiceCdnPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyResponseOutput).ToBackendServiceCdnPolicyResponsePtrOutputWithContext(ctx)
}

// BackendServiceCdnPolicyResponsePtrInput is an input type that accepts BackendServiceCdnPolicyResponseArgs, BackendServiceCdnPolicyResponsePtr and BackendServiceCdnPolicyResponsePtrOutput values.
// You can construct a concrete instance of `BackendServiceCdnPolicyResponsePtrInput` via:
//
//          BackendServiceCdnPolicyResponseArgs{...}
//
//  or:
//
//          nil
type BackendServiceCdnPolicyResponsePtrInput interface {
	pulumi.Input

	ToBackendServiceCdnPolicyResponsePtrOutput() BackendServiceCdnPolicyResponsePtrOutput
	ToBackendServiceCdnPolicyResponsePtrOutputWithContext(context.Context) BackendServiceCdnPolicyResponsePtrOutput
}

type backendServiceCdnPolicyResponsePtrType BackendServiceCdnPolicyResponseArgs

func BackendServiceCdnPolicyResponsePtr(v *BackendServiceCdnPolicyResponseArgs) BackendServiceCdnPolicyResponsePtrInput {
	return (*backendServiceCdnPolicyResponsePtrType)(v)
}

func (*backendServiceCdnPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceCdnPolicyResponse)(nil)).Elem()
}

func (i *backendServiceCdnPolicyResponsePtrType) ToBackendServiceCdnPolicyResponsePtrOutput() BackendServiceCdnPolicyResponsePtrOutput {
	return i.ToBackendServiceCdnPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *backendServiceCdnPolicyResponsePtrType) ToBackendServiceCdnPolicyResponsePtrOutputWithContext(ctx context.Context) BackendServiceCdnPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceCdnPolicyResponsePtrOutput)
}

// Message containing Cloud CDN configuration for a backend service.
type BackendServiceCdnPolicyResponseOutput struct{ *pulumi.OutputState }

func (BackendServiceCdnPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceCdnPolicyResponse)(nil)).Elem()
}

func (o BackendServiceCdnPolicyResponseOutput) ToBackendServiceCdnPolicyResponseOutput() BackendServiceCdnPolicyResponseOutput {
	return o
}

func (o BackendServiceCdnPolicyResponseOutput) ToBackendServiceCdnPolicyResponseOutputWithContext(ctx context.Context) BackendServiceCdnPolicyResponseOutput {
	return o
}

func (o BackendServiceCdnPolicyResponseOutput) ToBackendServiceCdnPolicyResponsePtrOutput() BackendServiceCdnPolicyResponsePtrOutput {
	return o.ToBackendServiceCdnPolicyResponsePtrOutputWithContext(context.Background())
}

func (o BackendServiceCdnPolicyResponseOutput) ToBackendServiceCdnPolicyResponsePtrOutputWithContext(ctx context.Context) BackendServiceCdnPolicyResponsePtrOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyResponse) *BackendServiceCdnPolicyResponse {
		return &v
	}).(BackendServiceCdnPolicyResponsePtrOutput)
}

// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
func (o BackendServiceCdnPolicyResponseOutput) BypassCacheOnRequestHeaders() BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyResponse) []BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponse {
		return v.BypassCacheOnRequestHeaders
	}).(BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput)
}

// The CacheKeyPolicy for this CdnPolicy.
func (o BackendServiceCdnPolicyResponseOutput) CacheKeyPolicy() CacheKeyPolicyResponseOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyResponse) CacheKeyPolicyResponse { return v.CacheKeyPolicy }).(CacheKeyPolicyResponseOutput)
}

// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
func (o BackendServiceCdnPolicyResponseOutput) CacheMode() pulumi.StringOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyResponse) string { return v.CacheMode }).(pulumi.StringOutput)
}

// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day).
func (o BackendServiceCdnPolicyResponseOutput) ClientTtl() pulumi.IntOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyResponse) int { return v.ClientTtl }).(pulumi.IntOutput)
}

// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendServiceCdnPolicyResponseOutput) DefaultTtl() pulumi.IntOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyResponse) int { return v.DefaultTtl }).(pulumi.IntOutput)
}

// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendServiceCdnPolicyResponseOutput) MaxTtl() pulumi.IntOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyResponse) int { return v.MaxTtl }).(pulumi.IntOutput)
}

// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
func (o BackendServiceCdnPolicyResponseOutput) NegativeCaching() pulumi.BoolOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyResponse) bool { return v.NegativeCaching }).(pulumi.BoolOutput)
}

// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
func (o BackendServiceCdnPolicyResponseOutput) NegativeCachingPolicy() BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyResponse) []BackendServiceCdnPolicyNegativeCachingPolicyResponse {
		return v.NegativeCachingPolicy
	}).(BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput)
}

// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
func (o BackendServiceCdnPolicyResponseOutput) RequestCoalescing() pulumi.BoolOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyResponse) bool { return v.RequestCoalescing }).(pulumi.BoolOutput)
}

// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
func (o BackendServiceCdnPolicyResponseOutput) ServeWhileStale() pulumi.IntOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyResponse) int { return v.ServeWhileStale }).(pulumi.IntOutput)
}

// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
func (o BackendServiceCdnPolicyResponseOutput) SignedUrlCacheMaxAgeSec() pulumi.StringOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyResponse) string { return v.SignedUrlCacheMaxAgeSec }).(pulumi.StringOutput)
}

// Names of the keys for signing request URLs.
func (o BackendServiceCdnPolicyResponseOutput) SignedUrlKeyNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackendServiceCdnPolicyResponse) []string { return v.SignedUrlKeyNames }).(pulumi.StringArrayOutput)
}

type BackendServiceCdnPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (BackendServiceCdnPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceCdnPolicyResponse)(nil)).Elem()
}

func (o BackendServiceCdnPolicyResponsePtrOutput) ToBackendServiceCdnPolicyResponsePtrOutput() BackendServiceCdnPolicyResponsePtrOutput {
	return o
}

func (o BackendServiceCdnPolicyResponsePtrOutput) ToBackendServiceCdnPolicyResponsePtrOutputWithContext(ctx context.Context) BackendServiceCdnPolicyResponsePtrOutput {
	return o
}

func (o BackendServiceCdnPolicyResponsePtrOutput) Elem() BackendServiceCdnPolicyResponseOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyResponse) BackendServiceCdnPolicyResponse { return *v }).(BackendServiceCdnPolicyResponseOutput)
}

// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
func (o BackendServiceCdnPolicyResponsePtrOutput) BypassCacheOnRequestHeaders() BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyResponse) []BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponse {
		if v == nil {
			return nil
		}
		return v.BypassCacheOnRequestHeaders
	}).(BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput)
}

// The CacheKeyPolicy for this CdnPolicy.
func (o BackendServiceCdnPolicyResponsePtrOutput) CacheKeyPolicy() CacheKeyPolicyResponsePtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyResponse) *CacheKeyPolicyResponse {
		if v == nil {
			return nil
		}
		return &v.CacheKeyPolicy
	}).(CacheKeyPolicyResponsePtrOutput)
}

// Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
func (o BackendServiceCdnPolicyResponsePtrOutput) CacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CacheMode
	}).(pulumi.StringPtrOutput)
}

// Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 86400s (1 day).
func (o BackendServiceCdnPolicyResponsePtrOutput) ClientTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ClientTtl
	}).(pulumi.IntPtrOutput)
}

// Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendServiceCdnPolicyResponsePtrOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DefaultTtl
	}).(pulumi.IntPtrOutput)
}

// Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
func (o BackendServiceCdnPolicyResponsePtrOutput) MaxTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxTtl
	}).(pulumi.IntPtrOutput)
}

// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.
func (o BackendServiceCdnPolicyResponsePtrOutput) NegativeCaching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.NegativeCaching
	}).(pulumi.BoolPtrOutput)
}

// Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
func (o BackendServiceCdnPolicyResponsePtrOutput) NegativeCachingPolicy() BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyResponse) []BackendServiceCdnPolicyNegativeCachingPolicyResponse {
		if v == nil {
			return nil
		}
		return v.NegativeCachingPolicy
	}).(BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput)
}

// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
func (o BackendServiceCdnPolicyResponsePtrOutput) RequestCoalescing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.RequestCoalescing
	}).(pulumi.BoolPtrOutput)
}

// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
func (o BackendServiceCdnPolicyResponsePtrOutput) ServeWhileStale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ServeWhileStale
	}).(pulumi.IntPtrOutput)
}

// Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
func (o BackendServiceCdnPolicyResponsePtrOutput) SignedUrlCacheMaxAgeSec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SignedUrlCacheMaxAgeSec
	}).(pulumi.StringPtrOutput)
}

// Names of the keys for signing request URLs.
func (o BackendServiceCdnPolicyResponsePtrOutput) SignedUrlKeyNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackendServiceCdnPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.SignedUrlKeyNames
	}).(pulumi.StringArrayOutput)
}

// For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview). On failover or failback, this field indicates whether connection draining will be honored. Google Cloud has a fixed connection draining timeout of 10 minutes. A setting of true terminates existing TCP connections to the active pool during failover and failback, immediately draining traffic. A setting of false allows existing TCP connections to persist, even on VMs no longer in the active pool, for up to the duration of the connection draining timeout (10 minutes).
type BackendServiceFailoverPolicy struct {
	// This can be set to true only if the protocol is TCP. The default is false.
	DisableConnectionDrainOnFailover *bool `pulumi:"disableConnectionDrainOnFailover"`
	// If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy.If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview). The default is false.
	DropTrafficIfUnhealthy *bool `pulumi:"dropTrafficIfUnhealthy"`
	// The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview).
	FailoverRatio *float64 `pulumi:"failoverRatio"`
}

// BackendServiceFailoverPolicyInput is an input type that accepts BackendServiceFailoverPolicyArgs and BackendServiceFailoverPolicyOutput values.
// You can construct a concrete instance of `BackendServiceFailoverPolicyInput` via:
//
//          BackendServiceFailoverPolicyArgs{...}
type BackendServiceFailoverPolicyInput interface {
	pulumi.Input

	ToBackendServiceFailoverPolicyOutput() BackendServiceFailoverPolicyOutput
	ToBackendServiceFailoverPolicyOutputWithContext(context.Context) BackendServiceFailoverPolicyOutput
}

// For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview). On failover or failback, this field indicates whether connection draining will be honored. Google Cloud has a fixed connection draining timeout of 10 minutes. A setting of true terminates existing TCP connections to the active pool during failover and failback, immediately draining traffic. A setting of false allows existing TCP connections to persist, even on VMs no longer in the active pool, for up to the duration of the connection draining timeout (10 minutes).
type BackendServiceFailoverPolicyArgs struct {
	// This can be set to true only if the protocol is TCP. The default is false.
	DisableConnectionDrainOnFailover pulumi.BoolPtrInput `pulumi:"disableConnectionDrainOnFailover"`
	// If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy.If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview). The default is false.
	DropTrafficIfUnhealthy pulumi.BoolPtrInput `pulumi:"dropTrafficIfUnhealthy"`
	// The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview).
	FailoverRatio pulumi.Float64PtrInput `pulumi:"failoverRatio"`
}

func (BackendServiceFailoverPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceFailoverPolicy)(nil)).Elem()
}

func (i BackendServiceFailoverPolicyArgs) ToBackendServiceFailoverPolicyOutput() BackendServiceFailoverPolicyOutput {
	return i.ToBackendServiceFailoverPolicyOutputWithContext(context.Background())
}

func (i BackendServiceFailoverPolicyArgs) ToBackendServiceFailoverPolicyOutputWithContext(ctx context.Context) BackendServiceFailoverPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceFailoverPolicyOutput)
}

func (i BackendServiceFailoverPolicyArgs) ToBackendServiceFailoverPolicyPtrOutput() BackendServiceFailoverPolicyPtrOutput {
	return i.ToBackendServiceFailoverPolicyPtrOutputWithContext(context.Background())
}

func (i BackendServiceFailoverPolicyArgs) ToBackendServiceFailoverPolicyPtrOutputWithContext(ctx context.Context) BackendServiceFailoverPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceFailoverPolicyOutput).ToBackendServiceFailoverPolicyPtrOutputWithContext(ctx)
}

// BackendServiceFailoverPolicyPtrInput is an input type that accepts BackendServiceFailoverPolicyArgs, BackendServiceFailoverPolicyPtr and BackendServiceFailoverPolicyPtrOutput values.
// You can construct a concrete instance of `BackendServiceFailoverPolicyPtrInput` via:
//
//          BackendServiceFailoverPolicyArgs{...}
//
//  or:
//
//          nil
type BackendServiceFailoverPolicyPtrInput interface {
	pulumi.Input

	ToBackendServiceFailoverPolicyPtrOutput() BackendServiceFailoverPolicyPtrOutput
	ToBackendServiceFailoverPolicyPtrOutputWithContext(context.Context) BackendServiceFailoverPolicyPtrOutput
}

type backendServiceFailoverPolicyPtrType BackendServiceFailoverPolicyArgs

func BackendServiceFailoverPolicyPtr(v *BackendServiceFailoverPolicyArgs) BackendServiceFailoverPolicyPtrInput {
	return (*backendServiceFailoverPolicyPtrType)(v)
}

func (*backendServiceFailoverPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceFailoverPolicy)(nil)).Elem()
}

func (i *backendServiceFailoverPolicyPtrType) ToBackendServiceFailoverPolicyPtrOutput() BackendServiceFailoverPolicyPtrOutput {
	return i.ToBackendServiceFailoverPolicyPtrOutputWithContext(context.Background())
}

func (i *backendServiceFailoverPolicyPtrType) ToBackendServiceFailoverPolicyPtrOutputWithContext(ctx context.Context) BackendServiceFailoverPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceFailoverPolicyPtrOutput)
}

// For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview). On failover or failback, this field indicates whether connection draining will be honored. Google Cloud has a fixed connection draining timeout of 10 minutes. A setting of true terminates existing TCP connections to the active pool during failover and failback, immediately draining traffic. A setting of false allows existing TCP connections to persist, even on VMs no longer in the active pool, for up to the duration of the connection draining timeout (10 minutes).
type BackendServiceFailoverPolicyOutput struct{ *pulumi.OutputState }

func (BackendServiceFailoverPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceFailoverPolicy)(nil)).Elem()
}

func (o BackendServiceFailoverPolicyOutput) ToBackendServiceFailoverPolicyOutput() BackendServiceFailoverPolicyOutput {
	return o
}

func (o BackendServiceFailoverPolicyOutput) ToBackendServiceFailoverPolicyOutputWithContext(ctx context.Context) BackendServiceFailoverPolicyOutput {
	return o
}

func (o BackendServiceFailoverPolicyOutput) ToBackendServiceFailoverPolicyPtrOutput() BackendServiceFailoverPolicyPtrOutput {
	return o.ToBackendServiceFailoverPolicyPtrOutputWithContext(context.Background())
}

func (o BackendServiceFailoverPolicyOutput) ToBackendServiceFailoverPolicyPtrOutputWithContext(ctx context.Context) BackendServiceFailoverPolicyPtrOutput {
	return o.ApplyT(func(v BackendServiceFailoverPolicy) *BackendServiceFailoverPolicy {
		return &v
	}).(BackendServiceFailoverPolicyPtrOutput)
}

// This can be set to true only if the protocol is TCP. The default is false.
func (o BackendServiceFailoverPolicyOutput) DisableConnectionDrainOnFailover() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendServiceFailoverPolicy) *bool { return v.DisableConnectionDrainOnFailover }).(pulumi.BoolPtrOutput)
}

// If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy.If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview). The default is false.
func (o BackendServiceFailoverPolicyOutput) DropTrafficIfUnhealthy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendServiceFailoverPolicy) *bool { return v.DropTrafficIfUnhealthy }).(pulumi.BoolPtrOutput)
}

// The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview).
func (o BackendServiceFailoverPolicyOutput) FailoverRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BackendServiceFailoverPolicy) *float64 { return v.FailoverRatio }).(pulumi.Float64PtrOutput)
}

type BackendServiceFailoverPolicyPtrOutput struct{ *pulumi.OutputState }

func (BackendServiceFailoverPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceFailoverPolicy)(nil)).Elem()
}

func (o BackendServiceFailoverPolicyPtrOutput) ToBackendServiceFailoverPolicyPtrOutput() BackendServiceFailoverPolicyPtrOutput {
	return o
}

func (o BackendServiceFailoverPolicyPtrOutput) ToBackendServiceFailoverPolicyPtrOutputWithContext(ctx context.Context) BackendServiceFailoverPolicyPtrOutput {
	return o
}

func (o BackendServiceFailoverPolicyPtrOutput) Elem() BackendServiceFailoverPolicyOutput {
	return o.ApplyT(func(v *BackendServiceFailoverPolicy) BackendServiceFailoverPolicy { return *v }).(BackendServiceFailoverPolicyOutput)
}

// This can be set to true only if the protocol is TCP. The default is false.
func (o BackendServiceFailoverPolicyPtrOutput) DisableConnectionDrainOnFailover() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendServiceFailoverPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.DisableConnectionDrainOnFailover
	}).(pulumi.BoolPtrOutput)
}

// If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy.If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview). The default is false.
func (o BackendServiceFailoverPolicyPtrOutput) DropTrafficIfUnhealthy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendServiceFailoverPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.DropTrafficIfUnhealthy
	}).(pulumi.BoolPtrOutput)
}

// The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview).
func (o BackendServiceFailoverPolicyPtrOutput) FailoverRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BackendServiceFailoverPolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.FailoverRatio
	}).(pulumi.Float64PtrOutput)
}

// For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview). On failover or failback, this field indicates whether connection draining will be honored. Google Cloud has a fixed connection draining timeout of 10 minutes. A setting of true terminates existing TCP connections to the active pool during failover and failback, immediately draining traffic. A setting of false allows existing TCP connections to persist, even on VMs no longer in the active pool, for up to the duration of the connection draining timeout (10 minutes).
type BackendServiceFailoverPolicyResponse struct {
	// This can be set to true only if the protocol is TCP. The default is false.
	DisableConnectionDrainOnFailover bool `pulumi:"disableConnectionDrainOnFailover"`
	// If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy.If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview). The default is false.
	DropTrafficIfUnhealthy bool `pulumi:"dropTrafficIfUnhealthy"`
	// The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview).
	FailoverRatio float64 `pulumi:"failoverRatio"`
}

// BackendServiceFailoverPolicyResponseInput is an input type that accepts BackendServiceFailoverPolicyResponseArgs and BackendServiceFailoverPolicyResponseOutput values.
// You can construct a concrete instance of `BackendServiceFailoverPolicyResponseInput` via:
//
//          BackendServiceFailoverPolicyResponseArgs{...}
type BackendServiceFailoverPolicyResponseInput interface {
	pulumi.Input

	ToBackendServiceFailoverPolicyResponseOutput() BackendServiceFailoverPolicyResponseOutput
	ToBackendServiceFailoverPolicyResponseOutputWithContext(context.Context) BackendServiceFailoverPolicyResponseOutput
}

// For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview). On failover or failback, this field indicates whether connection draining will be honored. Google Cloud has a fixed connection draining timeout of 10 minutes. A setting of true terminates existing TCP connections to the active pool during failover and failback, immediately draining traffic. A setting of false allows existing TCP connections to persist, even on VMs no longer in the active pool, for up to the duration of the connection draining timeout (10 minutes).
type BackendServiceFailoverPolicyResponseArgs struct {
	// This can be set to true only if the protocol is TCP. The default is false.
	DisableConnectionDrainOnFailover pulumi.BoolInput `pulumi:"disableConnectionDrainOnFailover"`
	// If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy.If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview). The default is false.
	DropTrafficIfUnhealthy pulumi.BoolInput `pulumi:"dropTrafficIfUnhealthy"`
	// The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview).
	FailoverRatio pulumi.Float64Input `pulumi:"failoverRatio"`
}

func (BackendServiceFailoverPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceFailoverPolicyResponse)(nil)).Elem()
}

func (i BackendServiceFailoverPolicyResponseArgs) ToBackendServiceFailoverPolicyResponseOutput() BackendServiceFailoverPolicyResponseOutput {
	return i.ToBackendServiceFailoverPolicyResponseOutputWithContext(context.Background())
}

func (i BackendServiceFailoverPolicyResponseArgs) ToBackendServiceFailoverPolicyResponseOutputWithContext(ctx context.Context) BackendServiceFailoverPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceFailoverPolicyResponseOutput)
}

func (i BackendServiceFailoverPolicyResponseArgs) ToBackendServiceFailoverPolicyResponsePtrOutput() BackendServiceFailoverPolicyResponsePtrOutput {
	return i.ToBackendServiceFailoverPolicyResponsePtrOutputWithContext(context.Background())
}

func (i BackendServiceFailoverPolicyResponseArgs) ToBackendServiceFailoverPolicyResponsePtrOutputWithContext(ctx context.Context) BackendServiceFailoverPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceFailoverPolicyResponseOutput).ToBackendServiceFailoverPolicyResponsePtrOutputWithContext(ctx)
}

// BackendServiceFailoverPolicyResponsePtrInput is an input type that accepts BackendServiceFailoverPolicyResponseArgs, BackendServiceFailoverPolicyResponsePtr and BackendServiceFailoverPolicyResponsePtrOutput values.
// You can construct a concrete instance of `BackendServiceFailoverPolicyResponsePtrInput` via:
//
//          BackendServiceFailoverPolicyResponseArgs{...}
//
//  or:
//
//          nil
type BackendServiceFailoverPolicyResponsePtrInput interface {
	pulumi.Input

	ToBackendServiceFailoverPolicyResponsePtrOutput() BackendServiceFailoverPolicyResponsePtrOutput
	ToBackendServiceFailoverPolicyResponsePtrOutputWithContext(context.Context) BackendServiceFailoverPolicyResponsePtrOutput
}

type backendServiceFailoverPolicyResponsePtrType BackendServiceFailoverPolicyResponseArgs

func BackendServiceFailoverPolicyResponsePtr(v *BackendServiceFailoverPolicyResponseArgs) BackendServiceFailoverPolicyResponsePtrInput {
	return (*backendServiceFailoverPolicyResponsePtrType)(v)
}

func (*backendServiceFailoverPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceFailoverPolicyResponse)(nil)).Elem()
}

func (i *backendServiceFailoverPolicyResponsePtrType) ToBackendServiceFailoverPolicyResponsePtrOutput() BackendServiceFailoverPolicyResponsePtrOutput {
	return i.ToBackendServiceFailoverPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *backendServiceFailoverPolicyResponsePtrType) ToBackendServiceFailoverPolicyResponsePtrOutputWithContext(ctx context.Context) BackendServiceFailoverPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceFailoverPolicyResponsePtrOutput)
}

// For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview). On failover or failback, this field indicates whether connection draining will be honored. Google Cloud has a fixed connection draining timeout of 10 minutes. A setting of true terminates existing TCP connections to the active pool during failover and failback, immediately draining traffic. A setting of false allows existing TCP connections to persist, even on VMs no longer in the active pool, for up to the duration of the connection draining timeout (10 minutes).
type BackendServiceFailoverPolicyResponseOutput struct{ *pulumi.OutputState }

func (BackendServiceFailoverPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceFailoverPolicyResponse)(nil)).Elem()
}

func (o BackendServiceFailoverPolicyResponseOutput) ToBackendServiceFailoverPolicyResponseOutput() BackendServiceFailoverPolicyResponseOutput {
	return o
}

func (o BackendServiceFailoverPolicyResponseOutput) ToBackendServiceFailoverPolicyResponseOutputWithContext(ctx context.Context) BackendServiceFailoverPolicyResponseOutput {
	return o
}

func (o BackendServiceFailoverPolicyResponseOutput) ToBackendServiceFailoverPolicyResponsePtrOutput() BackendServiceFailoverPolicyResponsePtrOutput {
	return o.ToBackendServiceFailoverPolicyResponsePtrOutputWithContext(context.Background())
}

func (o BackendServiceFailoverPolicyResponseOutput) ToBackendServiceFailoverPolicyResponsePtrOutputWithContext(ctx context.Context) BackendServiceFailoverPolicyResponsePtrOutput {
	return o.ApplyT(func(v BackendServiceFailoverPolicyResponse) *BackendServiceFailoverPolicyResponse {
		return &v
	}).(BackendServiceFailoverPolicyResponsePtrOutput)
}

// This can be set to true only if the protocol is TCP. The default is false.
func (o BackendServiceFailoverPolicyResponseOutput) DisableConnectionDrainOnFailover() pulumi.BoolOutput {
	return o.ApplyT(func(v BackendServiceFailoverPolicyResponse) bool { return v.DisableConnectionDrainOnFailover }).(pulumi.BoolOutput)
}

// If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy.If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview). The default is false.
func (o BackendServiceFailoverPolicyResponseOutput) DropTrafficIfUnhealthy() pulumi.BoolOutput {
	return o.ApplyT(func(v BackendServiceFailoverPolicyResponse) bool { return v.DropTrafficIfUnhealthy }).(pulumi.BoolOutput)
}

// The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview).
func (o BackendServiceFailoverPolicyResponseOutput) FailoverRatio() pulumi.Float64Output {
	return o.ApplyT(func(v BackendServiceFailoverPolicyResponse) float64 { return v.FailoverRatio }).(pulumi.Float64Output)
}

type BackendServiceFailoverPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (BackendServiceFailoverPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceFailoverPolicyResponse)(nil)).Elem()
}

func (o BackendServiceFailoverPolicyResponsePtrOutput) ToBackendServiceFailoverPolicyResponsePtrOutput() BackendServiceFailoverPolicyResponsePtrOutput {
	return o
}

func (o BackendServiceFailoverPolicyResponsePtrOutput) ToBackendServiceFailoverPolicyResponsePtrOutputWithContext(ctx context.Context) BackendServiceFailoverPolicyResponsePtrOutput {
	return o
}

func (o BackendServiceFailoverPolicyResponsePtrOutput) Elem() BackendServiceFailoverPolicyResponseOutput {
	return o.ApplyT(func(v *BackendServiceFailoverPolicyResponse) BackendServiceFailoverPolicyResponse { return *v }).(BackendServiceFailoverPolicyResponseOutput)
}

// This can be set to true only if the protocol is TCP. The default is false.
func (o BackendServiceFailoverPolicyResponsePtrOutput) DisableConnectionDrainOnFailover() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendServiceFailoverPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.DisableConnectionDrainOnFailover
	}).(pulumi.BoolPtrOutput)
}

// If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy.If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview). The default is false.
func (o BackendServiceFailoverPolicyResponsePtrOutput) DropTrafficIfUnhealthy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendServiceFailoverPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.DropTrafficIfUnhealthy
	}).(pulumi.BoolPtrOutput)
}

// The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](/network/networklb-failover-overview).
func (o BackendServiceFailoverPolicyResponsePtrOutput) FailoverRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BackendServiceFailoverPolicyResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.FailoverRatio
	}).(pulumi.Float64PtrOutput)
}

// Identity-Aware Proxy
type BackendServiceIAP struct {
	// Whether the serving infrastructure will authenticate and authorize all incoming requests. If true, the oauth2ClientId and oauth2ClientSecret fields must be non-empty.
	Enabled *bool `pulumi:"enabled"`
	// OAuth2 client ID to use for the authentication flow.
	Oauth2ClientId *string `pulumi:"oauth2ClientId"`
	// OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field. @InputOnly
	Oauth2ClientSecret *string `pulumi:"oauth2ClientSecret"`
}

// BackendServiceIAPInput is an input type that accepts BackendServiceIAPArgs and BackendServiceIAPOutput values.
// You can construct a concrete instance of `BackendServiceIAPInput` via:
//
//          BackendServiceIAPArgs{...}
type BackendServiceIAPInput interface {
	pulumi.Input

	ToBackendServiceIAPOutput() BackendServiceIAPOutput
	ToBackendServiceIAPOutputWithContext(context.Context) BackendServiceIAPOutput
}

// Identity-Aware Proxy
type BackendServiceIAPArgs struct {
	// Whether the serving infrastructure will authenticate and authorize all incoming requests. If true, the oauth2ClientId and oauth2ClientSecret fields must be non-empty.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// OAuth2 client ID to use for the authentication flow.
	Oauth2ClientId pulumi.StringPtrInput `pulumi:"oauth2ClientId"`
	// OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field. @InputOnly
	Oauth2ClientSecret pulumi.StringPtrInput `pulumi:"oauth2ClientSecret"`
}

func (BackendServiceIAPArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceIAP)(nil)).Elem()
}

func (i BackendServiceIAPArgs) ToBackendServiceIAPOutput() BackendServiceIAPOutput {
	return i.ToBackendServiceIAPOutputWithContext(context.Background())
}

func (i BackendServiceIAPArgs) ToBackendServiceIAPOutputWithContext(ctx context.Context) BackendServiceIAPOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIAPOutput)
}

func (i BackendServiceIAPArgs) ToBackendServiceIAPPtrOutput() BackendServiceIAPPtrOutput {
	return i.ToBackendServiceIAPPtrOutputWithContext(context.Background())
}

func (i BackendServiceIAPArgs) ToBackendServiceIAPPtrOutputWithContext(ctx context.Context) BackendServiceIAPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIAPOutput).ToBackendServiceIAPPtrOutputWithContext(ctx)
}

// BackendServiceIAPPtrInput is an input type that accepts BackendServiceIAPArgs, BackendServiceIAPPtr and BackendServiceIAPPtrOutput values.
// You can construct a concrete instance of `BackendServiceIAPPtrInput` via:
//
//          BackendServiceIAPArgs{...}
//
//  or:
//
//          nil
type BackendServiceIAPPtrInput interface {
	pulumi.Input

	ToBackendServiceIAPPtrOutput() BackendServiceIAPPtrOutput
	ToBackendServiceIAPPtrOutputWithContext(context.Context) BackendServiceIAPPtrOutput
}

type backendServiceIAPPtrType BackendServiceIAPArgs

func BackendServiceIAPPtr(v *BackendServiceIAPArgs) BackendServiceIAPPtrInput {
	return (*backendServiceIAPPtrType)(v)
}

func (*backendServiceIAPPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceIAP)(nil)).Elem()
}

func (i *backendServiceIAPPtrType) ToBackendServiceIAPPtrOutput() BackendServiceIAPPtrOutput {
	return i.ToBackendServiceIAPPtrOutputWithContext(context.Background())
}

func (i *backendServiceIAPPtrType) ToBackendServiceIAPPtrOutputWithContext(ctx context.Context) BackendServiceIAPPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIAPPtrOutput)
}

// Identity-Aware Proxy
type BackendServiceIAPOutput struct{ *pulumi.OutputState }

func (BackendServiceIAPOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceIAP)(nil)).Elem()
}

func (o BackendServiceIAPOutput) ToBackendServiceIAPOutput() BackendServiceIAPOutput {
	return o
}

func (o BackendServiceIAPOutput) ToBackendServiceIAPOutputWithContext(ctx context.Context) BackendServiceIAPOutput {
	return o
}

func (o BackendServiceIAPOutput) ToBackendServiceIAPPtrOutput() BackendServiceIAPPtrOutput {
	return o.ToBackendServiceIAPPtrOutputWithContext(context.Background())
}

func (o BackendServiceIAPOutput) ToBackendServiceIAPPtrOutputWithContext(ctx context.Context) BackendServiceIAPPtrOutput {
	return o.ApplyT(func(v BackendServiceIAP) *BackendServiceIAP {
		return &v
	}).(BackendServiceIAPPtrOutput)
}

// Whether the serving infrastructure will authenticate and authorize all incoming requests. If true, the oauth2ClientId and oauth2ClientSecret fields must be non-empty.
func (o BackendServiceIAPOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendServiceIAP) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// OAuth2 client ID to use for the authentication flow.
func (o BackendServiceIAPOutput) Oauth2ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendServiceIAP) *string { return v.Oauth2ClientId }).(pulumi.StringPtrOutput)
}

// OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field. @InputOnly
func (o BackendServiceIAPOutput) Oauth2ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendServiceIAP) *string { return v.Oauth2ClientSecret }).(pulumi.StringPtrOutput)
}

type BackendServiceIAPPtrOutput struct{ *pulumi.OutputState }

func (BackendServiceIAPPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceIAP)(nil)).Elem()
}

func (o BackendServiceIAPPtrOutput) ToBackendServiceIAPPtrOutput() BackendServiceIAPPtrOutput {
	return o
}

func (o BackendServiceIAPPtrOutput) ToBackendServiceIAPPtrOutputWithContext(ctx context.Context) BackendServiceIAPPtrOutput {
	return o
}

func (o BackendServiceIAPPtrOutput) Elem() BackendServiceIAPOutput {
	return o.ApplyT(func(v *BackendServiceIAP) BackendServiceIAP { return *v }).(BackendServiceIAPOutput)
}

// Whether the serving infrastructure will authenticate and authorize all incoming requests. If true, the oauth2ClientId and oauth2ClientSecret fields must be non-empty.
func (o BackendServiceIAPPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendServiceIAP) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// OAuth2 client ID to use for the authentication flow.
func (o BackendServiceIAPPtrOutput) Oauth2ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceIAP) *string {
		if v == nil {
			return nil
		}
		return v.Oauth2ClientId
	}).(pulumi.StringPtrOutput)
}

// OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field. @InputOnly
func (o BackendServiceIAPPtrOutput) Oauth2ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceIAP) *string {
		if v == nil {
			return nil
		}
		return v.Oauth2ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Identity-Aware Proxy
type BackendServiceIAPResponse struct {
	// Whether the serving infrastructure will authenticate and authorize all incoming requests. If true, the oauth2ClientId and oauth2ClientSecret fields must be non-empty.
	Enabled bool `pulumi:"enabled"`
	// OAuth2 client ID to use for the authentication flow.
	Oauth2ClientId string `pulumi:"oauth2ClientId"`
	// OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field. @InputOnly
	Oauth2ClientSecret string `pulumi:"oauth2ClientSecret"`
	// SHA256 hash value for the field oauth2_client_secret above.
	Oauth2ClientSecretSha256 string `pulumi:"oauth2ClientSecretSha256"`
}

// BackendServiceIAPResponseInput is an input type that accepts BackendServiceIAPResponseArgs and BackendServiceIAPResponseOutput values.
// You can construct a concrete instance of `BackendServiceIAPResponseInput` via:
//
//          BackendServiceIAPResponseArgs{...}
type BackendServiceIAPResponseInput interface {
	pulumi.Input

	ToBackendServiceIAPResponseOutput() BackendServiceIAPResponseOutput
	ToBackendServiceIAPResponseOutputWithContext(context.Context) BackendServiceIAPResponseOutput
}

// Identity-Aware Proxy
type BackendServiceIAPResponseArgs struct {
	// Whether the serving infrastructure will authenticate and authorize all incoming requests. If true, the oauth2ClientId and oauth2ClientSecret fields must be non-empty.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// OAuth2 client ID to use for the authentication flow.
	Oauth2ClientId pulumi.StringInput `pulumi:"oauth2ClientId"`
	// OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field. @InputOnly
	Oauth2ClientSecret pulumi.StringInput `pulumi:"oauth2ClientSecret"`
	// SHA256 hash value for the field oauth2_client_secret above.
	Oauth2ClientSecretSha256 pulumi.StringInput `pulumi:"oauth2ClientSecretSha256"`
}

func (BackendServiceIAPResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceIAPResponse)(nil)).Elem()
}

func (i BackendServiceIAPResponseArgs) ToBackendServiceIAPResponseOutput() BackendServiceIAPResponseOutput {
	return i.ToBackendServiceIAPResponseOutputWithContext(context.Background())
}

func (i BackendServiceIAPResponseArgs) ToBackendServiceIAPResponseOutputWithContext(ctx context.Context) BackendServiceIAPResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIAPResponseOutput)
}

func (i BackendServiceIAPResponseArgs) ToBackendServiceIAPResponsePtrOutput() BackendServiceIAPResponsePtrOutput {
	return i.ToBackendServiceIAPResponsePtrOutputWithContext(context.Background())
}

func (i BackendServiceIAPResponseArgs) ToBackendServiceIAPResponsePtrOutputWithContext(ctx context.Context) BackendServiceIAPResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIAPResponseOutput).ToBackendServiceIAPResponsePtrOutputWithContext(ctx)
}

// BackendServiceIAPResponsePtrInput is an input type that accepts BackendServiceIAPResponseArgs, BackendServiceIAPResponsePtr and BackendServiceIAPResponsePtrOutput values.
// You can construct a concrete instance of `BackendServiceIAPResponsePtrInput` via:
//
//          BackendServiceIAPResponseArgs{...}
//
//  or:
//
//          nil
type BackendServiceIAPResponsePtrInput interface {
	pulumi.Input

	ToBackendServiceIAPResponsePtrOutput() BackendServiceIAPResponsePtrOutput
	ToBackendServiceIAPResponsePtrOutputWithContext(context.Context) BackendServiceIAPResponsePtrOutput
}

type backendServiceIAPResponsePtrType BackendServiceIAPResponseArgs

func BackendServiceIAPResponsePtr(v *BackendServiceIAPResponseArgs) BackendServiceIAPResponsePtrInput {
	return (*backendServiceIAPResponsePtrType)(v)
}

func (*backendServiceIAPResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceIAPResponse)(nil)).Elem()
}

func (i *backendServiceIAPResponsePtrType) ToBackendServiceIAPResponsePtrOutput() BackendServiceIAPResponsePtrOutput {
	return i.ToBackendServiceIAPResponsePtrOutputWithContext(context.Background())
}

func (i *backendServiceIAPResponsePtrType) ToBackendServiceIAPResponsePtrOutputWithContext(ctx context.Context) BackendServiceIAPResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceIAPResponsePtrOutput)
}

// Identity-Aware Proxy
type BackendServiceIAPResponseOutput struct{ *pulumi.OutputState }

func (BackendServiceIAPResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceIAPResponse)(nil)).Elem()
}

func (o BackendServiceIAPResponseOutput) ToBackendServiceIAPResponseOutput() BackendServiceIAPResponseOutput {
	return o
}

func (o BackendServiceIAPResponseOutput) ToBackendServiceIAPResponseOutputWithContext(ctx context.Context) BackendServiceIAPResponseOutput {
	return o
}

func (o BackendServiceIAPResponseOutput) ToBackendServiceIAPResponsePtrOutput() BackendServiceIAPResponsePtrOutput {
	return o.ToBackendServiceIAPResponsePtrOutputWithContext(context.Background())
}

func (o BackendServiceIAPResponseOutput) ToBackendServiceIAPResponsePtrOutputWithContext(ctx context.Context) BackendServiceIAPResponsePtrOutput {
	return o.ApplyT(func(v BackendServiceIAPResponse) *BackendServiceIAPResponse {
		return &v
	}).(BackendServiceIAPResponsePtrOutput)
}

// Whether the serving infrastructure will authenticate and authorize all incoming requests. If true, the oauth2ClientId and oauth2ClientSecret fields must be non-empty.
func (o BackendServiceIAPResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v BackendServiceIAPResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// OAuth2 client ID to use for the authentication flow.
func (o BackendServiceIAPResponseOutput) Oauth2ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v BackendServiceIAPResponse) string { return v.Oauth2ClientId }).(pulumi.StringOutput)
}

// OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field. @InputOnly
func (o BackendServiceIAPResponseOutput) Oauth2ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v BackendServiceIAPResponse) string { return v.Oauth2ClientSecret }).(pulumi.StringOutput)
}

// SHA256 hash value for the field oauth2_client_secret above.
func (o BackendServiceIAPResponseOutput) Oauth2ClientSecretSha256() pulumi.StringOutput {
	return o.ApplyT(func(v BackendServiceIAPResponse) string { return v.Oauth2ClientSecretSha256 }).(pulumi.StringOutput)
}

type BackendServiceIAPResponsePtrOutput struct{ *pulumi.OutputState }

func (BackendServiceIAPResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceIAPResponse)(nil)).Elem()
}

func (o BackendServiceIAPResponsePtrOutput) ToBackendServiceIAPResponsePtrOutput() BackendServiceIAPResponsePtrOutput {
	return o
}

func (o BackendServiceIAPResponsePtrOutput) ToBackendServiceIAPResponsePtrOutputWithContext(ctx context.Context) BackendServiceIAPResponsePtrOutput {
	return o
}

func (o BackendServiceIAPResponsePtrOutput) Elem() BackendServiceIAPResponseOutput {
	return o.ApplyT(func(v *BackendServiceIAPResponse) BackendServiceIAPResponse { return *v }).(BackendServiceIAPResponseOutput)
}

// Whether the serving infrastructure will authenticate and authorize all incoming requests. If true, the oauth2ClientId and oauth2ClientSecret fields must be non-empty.
func (o BackendServiceIAPResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendServiceIAPResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// OAuth2 client ID to use for the authentication flow.
func (o BackendServiceIAPResponsePtrOutput) Oauth2ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceIAPResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Oauth2ClientId
	}).(pulumi.StringPtrOutput)
}

// OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field. @InputOnly
func (o BackendServiceIAPResponsePtrOutput) Oauth2ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceIAPResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Oauth2ClientSecret
	}).(pulumi.StringPtrOutput)
}

// SHA256 hash value for the field oauth2_client_secret above.
func (o BackendServiceIAPResponsePtrOutput) Oauth2ClientSecretSha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendServiceIAPResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Oauth2ClientSecretSha256
	}).(pulumi.StringPtrOutput)
}

// The available logging options for the load balancer traffic served by this backend service.
type BackendServiceLogConfig struct {
	// This field denotes whether to enable logging for the load balancer traffic served by this backend service.
	Enable *bool `pulumi:"enable"`
	// This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.
	SampleRate *float64 `pulumi:"sampleRate"`
}

// BackendServiceLogConfigInput is an input type that accepts BackendServiceLogConfigArgs and BackendServiceLogConfigOutput values.
// You can construct a concrete instance of `BackendServiceLogConfigInput` via:
//
//          BackendServiceLogConfigArgs{...}
type BackendServiceLogConfigInput interface {
	pulumi.Input

	ToBackendServiceLogConfigOutput() BackendServiceLogConfigOutput
	ToBackendServiceLogConfigOutputWithContext(context.Context) BackendServiceLogConfigOutput
}

// The available logging options for the load balancer traffic served by this backend service.
type BackendServiceLogConfigArgs struct {
	// This field denotes whether to enable logging for the load balancer traffic served by this backend service.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.
	SampleRate pulumi.Float64PtrInput `pulumi:"sampleRate"`
}

func (BackendServiceLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceLogConfig)(nil)).Elem()
}

func (i BackendServiceLogConfigArgs) ToBackendServiceLogConfigOutput() BackendServiceLogConfigOutput {
	return i.ToBackendServiceLogConfigOutputWithContext(context.Background())
}

func (i BackendServiceLogConfigArgs) ToBackendServiceLogConfigOutputWithContext(ctx context.Context) BackendServiceLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceLogConfigOutput)
}

func (i BackendServiceLogConfigArgs) ToBackendServiceLogConfigPtrOutput() BackendServiceLogConfigPtrOutput {
	return i.ToBackendServiceLogConfigPtrOutputWithContext(context.Background())
}

func (i BackendServiceLogConfigArgs) ToBackendServiceLogConfigPtrOutputWithContext(ctx context.Context) BackendServiceLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceLogConfigOutput).ToBackendServiceLogConfigPtrOutputWithContext(ctx)
}

// BackendServiceLogConfigPtrInput is an input type that accepts BackendServiceLogConfigArgs, BackendServiceLogConfigPtr and BackendServiceLogConfigPtrOutput values.
// You can construct a concrete instance of `BackendServiceLogConfigPtrInput` via:
//
//          BackendServiceLogConfigArgs{...}
//
//  or:
//
//          nil
type BackendServiceLogConfigPtrInput interface {
	pulumi.Input

	ToBackendServiceLogConfigPtrOutput() BackendServiceLogConfigPtrOutput
	ToBackendServiceLogConfigPtrOutputWithContext(context.Context) BackendServiceLogConfigPtrOutput
}

type backendServiceLogConfigPtrType BackendServiceLogConfigArgs

func BackendServiceLogConfigPtr(v *BackendServiceLogConfigArgs) BackendServiceLogConfigPtrInput {
	return (*backendServiceLogConfigPtrType)(v)
}

func (*backendServiceLogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceLogConfig)(nil)).Elem()
}

func (i *backendServiceLogConfigPtrType) ToBackendServiceLogConfigPtrOutput() BackendServiceLogConfigPtrOutput {
	return i.ToBackendServiceLogConfigPtrOutputWithContext(context.Background())
}

func (i *backendServiceLogConfigPtrType) ToBackendServiceLogConfigPtrOutputWithContext(ctx context.Context) BackendServiceLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceLogConfigPtrOutput)
}

// The available logging options for the load balancer traffic served by this backend service.
type BackendServiceLogConfigOutput struct{ *pulumi.OutputState }

func (BackendServiceLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceLogConfig)(nil)).Elem()
}

func (o BackendServiceLogConfigOutput) ToBackendServiceLogConfigOutput() BackendServiceLogConfigOutput {
	return o
}

func (o BackendServiceLogConfigOutput) ToBackendServiceLogConfigOutputWithContext(ctx context.Context) BackendServiceLogConfigOutput {
	return o
}

func (o BackendServiceLogConfigOutput) ToBackendServiceLogConfigPtrOutput() BackendServiceLogConfigPtrOutput {
	return o.ToBackendServiceLogConfigPtrOutputWithContext(context.Background())
}

func (o BackendServiceLogConfigOutput) ToBackendServiceLogConfigPtrOutputWithContext(ctx context.Context) BackendServiceLogConfigPtrOutput {
	return o.ApplyT(func(v BackendServiceLogConfig) *BackendServiceLogConfig {
		return &v
	}).(BackendServiceLogConfigPtrOutput)
}

// This field denotes whether to enable logging for the load balancer traffic served by this backend service.
func (o BackendServiceLogConfigOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendServiceLogConfig) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.
func (o BackendServiceLogConfigOutput) SampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BackendServiceLogConfig) *float64 { return v.SampleRate }).(pulumi.Float64PtrOutput)
}

type BackendServiceLogConfigPtrOutput struct{ *pulumi.OutputState }

func (BackendServiceLogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceLogConfig)(nil)).Elem()
}

func (o BackendServiceLogConfigPtrOutput) ToBackendServiceLogConfigPtrOutput() BackendServiceLogConfigPtrOutput {
	return o
}

func (o BackendServiceLogConfigPtrOutput) ToBackendServiceLogConfigPtrOutputWithContext(ctx context.Context) BackendServiceLogConfigPtrOutput {
	return o
}

func (o BackendServiceLogConfigPtrOutput) Elem() BackendServiceLogConfigOutput {
	return o.ApplyT(func(v *BackendServiceLogConfig) BackendServiceLogConfig { return *v }).(BackendServiceLogConfigOutput)
}

// This field denotes whether to enable logging for the load balancer traffic served by this backend service.
func (o BackendServiceLogConfigPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendServiceLogConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.
func (o BackendServiceLogConfigPtrOutput) SampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BackendServiceLogConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.SampleRate
	}).(pulumi.Float64PtrOutput)
}

// The available logging options for the load balancer traffic served by this backend service.
type BackendServiceLogConfigResponse struct {
	// This field denotes whether to enable logging for the load balancer traffic served by this backend service.
	Enable bool `pulumi:"enable"`
	// This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.
	SampleRate float64 `pulumi:"sampleRate"`
}

// BackendServiceLogConfigResponseInput is an input type that accepts BackendServiceLogConfigResponseArgs and BackendServiceLogConfigResponseOutput values.
// You can construct a concrete instance of `BackendServiceLogConfigResponseInput` via:
//
//          BackendServiceLogConfigResponseArgs{...}
type BackendServiceLogConfigResponseInput interface {
	pulumi.Input

	ToBackendServiceLogConfigResponseOutput() BackendServiceLogConfigResponseOutput
	ToBackendServiceLogConfigResponseOutputWithContext(context.Context) BackendServiceLogConfigResponseOutput
}

// The available logging options for the load balancer traffic served by this backend service.
type BackendServiceLogConfigResponseArgs struct {
	// This field denotes whether to enable logging for the load balancer traffic served by this backend service.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.
	SampleRate pulumi.Float64Input `pulumi:"sampleRate"`
}

func (BackendServiceLogConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceLogConfigResponse)(nil)).Elem()
}

func (i BackendServiceLogConfigResponseArgs) ToBackendServiceLogConfigResponseOutput() BackendServiceLogConfigResponseOutput {
	return i.ToBackendServiceLogConfigResponseOutputWithContext(context.Background())
}

func (i BackendServiceLogConfigResponseArgs) ToBackendServiceLogConfigResponseOutputWithContext(ctx context.Context) BackendServiceLogConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceLogConfigResponseOutput)
}

func (i BackendServiceLogConfigResponseArgs) ToBackendServiceLogConfigResponsePtrOutput() BackendServiceLogConfigResponsePtrOutput {
	return i.ToBackendServiceLogConfigResponsePtrOutputWithContext(context.Background())
}

func (i BackendServiceLogConfigResponseArgs) ToBackendServiceLogConfigResponsePtrOutputWithContext(ctx context.Context) BackendServiceLogConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceLogConfigResponseOutput).ToBackendServiceLogConfigResponsePtrOutputWithContext(ctx)
}

// BackendServiceLogConfigResponsePtrInput is an input type that accepts BackendServiceLogConfigResponseArgs, BackendServiceLogConfigResponsePtr and BackendServiceLogConfigResponsePtrOutput values.
// You can construct a concrete instance of `BackendServiceLogConfigResponsePtrInput` via:
//
//          BackendServiceLogConfigResponseArgs{...}
//
//  or:
//
//          nil
type BackendServiceLogConfigResponsePtrInput interface {
	pulumi.Input

	ToBackendServiceLogConfigResponsePtrOutput() BackendServiceLogConfigResponsePtrOutput
	ToBackendServiceLogConfigResponsePtrOutputWithContext(context.Context) BackendServiceLogConfigResponsePtrOutput
}

type backendServiceLogConfigResponsePtrType BackendServiceLogConfigResponseArgs

func BackendServiceLogConfigResponsePtr(v *BackendServiceLogConfigResponseArgs) BackendServiceLogConfigResponsePtrInput {
	return (*backendServiceLogConfigResponsePtrType)(v)
}

func (*backendServiceLogConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceLogConfigResponse)(nil)).Elem()
}

func (i *backendServiceLogConfigResponsePtrType) ToBackendServiceLogConfigResponsePtrOutput() BackendServiceLogConfigResponsePtrOutput {
	return i.ToBackendServiceLogConfigResponsePtrOutputWithContext(context.Background())
}

func (i *backendServiceLogConfigResponsePtrType) ToBackendServiceLogConfigResponsePtrOutputWithContext(ctx context.Context) BackendServiceLogConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendServiceLogConfigResponsePtrOutput)
}

// The available logging options for the load balancer traffic served by this backend service.
type BackendServiceLogConfigResponseOutput struct{ *pulumi.OutputState }

func (BackendServiceLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendServiceLogConfigResponse)(nil)).Elem()
}

func (o BackendServiceLogConfigResponseOutput) ToBackendServiceLogConfigResponseOutput() BackendServiceLogConfigResponseOutput {
	return o
}

func (o BackendServiceLogConfigResponseOutput) ToBackendServiceLogConfigResponseOutputWithContext(ctx context.Context) BackendServiceLogConfigResponseOutput {
	return o
}

func (o BackendServiceLogConfigResponseOutput) ToBackendServiceLogConfigResponsePtrOutput() BackendServiceLogConfigResponsePtrOutput {
	return o.ToBackendServiceLogConfigResponsePtrOutputWithContext(context.Background())
}

func (o BackendServiceLogConfigResponseOutput) ToBackendServiceLogConfigResponsePtrOutputWithContext(ctx context.Context) BackendServiceLogConfigResponsePtrOutput {
	return o.ApplyT(func(v BackendServiceLogConfigResponse) *BackendServiceLogConfigResponse {
		return &v
	}).(BackendServiceLogConfigResponsePtrOutput)
}

// This field denotes whether to enable logging for the load balancer traffic served by this backend service.
func (o BackendServiceLogConfigResponseOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v BackendServiceLogConfigResponse) bool { return v.Enable }).(pulumi.BoolOutput)
}

// This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.
func (o BackendServiceLogConfigResponseOutput) SampleRate() pulumi.Float64Output {
	return o.ApplyT(func(v BackendServiceLogConfigResponse) float64 { return v.SampleRate }).(pulumi.Float64Output)
}

type BackendServiceLogConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (BackendServiceLogConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendServiceLogConfigResponse)(nil)).Elem()
}

func (o BackendServiceLogConfigResponsePtrOutput) ToBackendServiceLogConfigResponsePtrOutput() BackendServiceLogConfigResponsePtrOutput {
	return o
}

func (o BackendServiceLogConfigResponsePtrOutput) ToBackendServiceLogConfigResponsePtrOutputWithContext(ctx context.Context) BackendServiceLogConfigResponsePtrOutput {
	return o
}

func (o BackendServiceLogConfigResponsePtrOutput) Elem() BackendServiceLogConfigResponseOutput {
	return o.ApplyT(func(v *BackendServiceLogConfigResponse) BackendServiceLogConfigResponse { return *v }).(BackendServiceLogConfigResponseOutput)
}

// This field denotes whether to enable logging for the load balancer traffic served by this backend service.
func (o BackendServiceLogConfigResponsePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackendServiceLogConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enable
	}).(pulumi.BoolPtrOutput)
}

// This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.
func (o BackendServiceLogConfigResponsePtrOutput) SampleRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BackendServiceLogConfigResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.SampleRate
	}).(pulumi.Float64PtrOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// This is deprecated and has no effect. Do not use.
	BindingId *string `pulumi:"bindingId"`
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// This is deprecated and has no effect. Do not use.
	BindingId pulumi.StringPtrInput `pulumi:"bindingId"`
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// This is deprecated and has no effect. Do not use.
func (o BindingOutput) BindingId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.BindingId }).(pulumi.StringPtrOutput)
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members` with a `role`.
type BindingResponse struct {
	// This is deprecated and has no effect. Do not use.
	BindingId string `pulumi:"bindingId"`
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// BindingResponseInput is an input type that accepts BindingResponseArgs and BindingResponseOutput values.
// You can construct a concrete instance of `BindingResponseInput` via:
//
//          BindingResponseArgs{...}
type BindingResponseInput interface {
	pulumi.Input

	ToBindingResponseOutput() BindingResponseOutput
	ToBindingResponseOutputWithContext(context.Context) BindingResponseOutput
}

// Associates `members` with a `role`.
type BindingResponseArgs struct {
	// This is deprecated and has no effect. Do not use.
	BindingId pulumi.StringInput `pulumi:"bindingId"`
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponseInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringInput `pulumi:"role"`
}

func (BindingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (i BindingResponseArgs) ToBindingResponseOutput() BindingResponseOutput {
	return i.ToBindingResponseOutputWithContext(context.Background())
}

func (i BindingResponseArgs) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseOutput)
}

// BindingResponseArrayInput is an input type that accepts BindingResponseArray and BindingResponseArrayOutput values.
// You can construct a concrete instance of `BindingResponseArrayInput` via:
//
//          BindingResponseArray{ BindingResponseArgs{...} }
type BindingResponseArrayInput interface {
	pulumi.Input

	ToBindingResponseArrayOutput() BindingResponseArrayOutput
	ToBindingResponseArrayOutputWithContext(context.Context) BindingResponseArrayOutput
}

type BindingResponseArray []BindingResponseInput

func (BindingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (i BindingResponseArray) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return i.ToBindingResponseArrayOutputWithContext(context.Background())
}

func (i BindingResponseArray) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseArrayOutput)
}

// Associates `members` with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// This is deprecated and has no effect. Do not use.
func (o BindingResponseOutput) BindingId() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.BindingId }).(pulumi.StringOutput)
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Message containing what to include in the cache key for a request for Cloud CDN.
type CacheKeyPolicy struct {
	// If true, requests to different hosts will be cached separately.
	IncludeHost *bool `pulumi:"includeHost"`
	// If true, http and https requests will be cached separately.
	IncludeProtocol *bool `pulumi:"includeProtocol"`
	// If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
	IncludeQueryString *bool `pulumi:"includeQueryString"`
	// Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
	QueryStringBlacklist []string `pulumi:"queryStringBlacklist"`
	// Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
	QueryStringWhitelist []string `pulumi:"queryStringWhitelist"`
}

// CacheKeyPolicyInput is an input type that accepts CacheKeyPolicyArgs and CacheKeyPolicyOutput values.
// You can construct a concrete instance of `CacheKeyPolicyInput` via:
//
//          CacheKeyPolicyArgs{...}
type CacheKeyPolicyInput interface {
	pulumi.Input

	ToCacheKeyPolicyOutput() CacheKeyPolicyOutput
	ToCacheKeyPolicyOutputWithContext(context.Context) CacheKeyPolicyOutput
}

// Message containing what to include in the cache key for a request for Cloud CDN.
type CacheKeyPolicyArgs struct {
	// If true, requests to different hosts will be cached separately.
	IncludeHost pulumi.BoolPtrInput `pulumi:"includeHost"`
	// If true, http and https requests will be cached separately.
	IncludeProtocol pulumi.BoolPtrInput `pulumi:"includeProtocol"`
	// If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
	IncludeQueryString pulumi.BoolPtrInput `pulumi:"includeQueryString"`
	// Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
	QueryStringBlacklist pulumi.StringArrayInput `pulumi:"queryStringBlacklist"`
	// Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
	QueryStringWhitelist pulumi.StringArrayInput `pulumi:"queryStringWhitelist"`
}

func (CacheKeyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheKeyPolicy)(nil)).Elem()
}

func (i CacheKeyPolicyArgs) ToCacheKeyPolicyOutput() CacheKeyPolicyOutput {
	return i.ToCacheKeyPolicyOutputWithContext(context.Background())
}

func (i CacheKeyPolicyArgs) ToCacheKeyPolicyOutputWithContext(ctx context.Context) CacheKeyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheKeyPolicyOutput)
}

func (i CacheKeyPolicyArgs) ToCacheKeyPolicyPtrOutput() CacheKeyPolicyPtrOutput {
	return i.ToCacheKeyPolicyPtrOutputWithContext(context.Background())
}

func (i CacheKeyPolicyArgs) ToCacheKeyPolicyPtrOutputWithContext(ctx context.Context) CacheKeyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheKeyPolicyOutput).ToCacheKeyPolicyPtrOutputWithContext(ctx)
}

// CacheKeyPolicyPtrInput is an input type that accepts CacheKeyPolicyArgs, CacheKeyPolicyPtr and CacheKeyPolicyPtrOutput values.
// You can construct a concrete instance of `CacheKeyPolicyPtrInput` via:
//
//          CacheKeyPolicyArgs{...}
//
//  or:
//
//          nil
type CacheKeyPolicyPtrInput interface {
	pulumi.Input

	ToCacheKeyPolicyPtrOutput() CacheKeyPolicyPtrOutput
	ToCacheKeyPolicyPtrOutputWithContext(context.Context) CacheKeyPolicyPtrOutput
}

type cacheKeyPolicyPtrType CacheKeyPolicyArgs

func CacheKeyPolicyPtr(v *CacheKeyPolicyArgs) CacheKeyPolicyPtrInput {
	return (*cacheKeyPolicyPtrType)(v)
}

func (*cacheKeyPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheKeyPolicy)(nil)).Elem()
}

func (i *cacheKeyPolicyPtrType) ToCacheKeyPolicyPtrOutput() CacheKeyPolicyPtrOutput {
	return i.ToCacheKeyPolicyPtrOutputWithContext(context.Background())
}

func (i *cacheKeyPolicyPtrType) ToCacheKeyPolicyPtrOutputWithContext(ctx context.Context) CacheKeyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheKeyPolicyPtrOutput)
}

// Message containing what to include in the cache key for a request for Cloud CDN.
type CacheKeyPolicyOutput struct{ *pulumi.OutputState }

func (CacheKeyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheKeyPolicy)(nil)).Elem()
}

func (o CacheKeyPolicyOutput) ToCacheKeyPolicyOutput() CacheKeyPolicyOutput {
	return o
}

func (o CacheKeyPolicyOutput) ToCacheKeyPolicyOutputWithContext(ctx context.Context) CacheKeyPolicyOutput {
	return o
}

func (o CacheKeyPolicyOutput) ToCacheKeyPolicyPtrOutput() CacheKeyPolicyPtrOutput {
	return o.ToCacheKeyPolicyPtrOutputWithContext(context.Background())
}

func (o CacheKeyPolicyOutput) ToCacheKeyPolicyPtrOutputWithContext(ctx context.Context) CacheKeyPolicyPtrOutput {
	return o.ApplyT(func(v CacheKeyPolicy) *CacheKeyPolicy {
		return &v
	}).(CacheKeyPolicyPtrOutput)
}

// If true, requests to different hosts will be cached separately.
func (o CacheKeyPolicyOutput) IncludeHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheKeyPolicy) *bool { return v.IncludeHost }).(pulumi.BoolPtrOutput)
}

// If true, http and https requests will be cached separately.
func (o CacheKeyPolicyOutput) IncludeProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheKeyPolicy) *bool { return v.IncludeProtocol }).(pulumi.BoolPtrOutput)
}

// If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
func (o CacheKeyPolicyOutput) IncludeQueryString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CacheKeyPolicy) *bool { return v.IncludeQueryString }).(pulumi.BoolPtrOutput)
}

// Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
func (o CacheKeyPolicyOutput) QueryStringBlacklist() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CacheKeyPolicy) []string { return v.QueryStringBlacklist }).(pulumi.StringArrayOutput)
}

// Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
func (o CacheKeyPolicyOutput) QueryStringWhitelist() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CacheKeyPolicy) []string { return v.QueryStringWhitelist }).(pulumi.StringArrayOutput)
}

type CacheKeyPolicyPtrOutput struct{ *pulumi.OutputState }

func (CacheKeyPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheKeyPolicy)(nil)).Elem()
}

func (o CacheKeyPolicyPtrOutput) ToCacheKeyPolicyPtrOutput() CacheKeyPolicyPtrOutput {
	return o
}

func (o CacheKeyPolicyPtrOutput) ToCacheKeyPolicyPtrOutputWithContext(ctx context.Context) CacheKeyPolicyPtrOutput {
	return o
}

func (o CacheKeyPolicyPtrOutput) Elem() CacheKeyPolicyOutput {
	return o.ApplyT(func(v *CacheKeyPolicy) CacheKeyPolicy { return *v }).(CacheKeyPolicyOutput)
}

// If true, requests to different hosts will be cached separately.
func (o CacheKeyPolicyPtrOutput) IncludeHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheKeyPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeHost
	}).(pulumi.BoolPtrOutput)
}

// If true, http and https requests will be cached separately.
func (o CacheKeyPolicyPtrOutput) IncludeProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheKeyPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeProtocol
	}).(pulumi.BoolPtrOutput)
}

// If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
func (o CacheKeyPolicyPtrOutput) IncludeQueryString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheKeyPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeQueryString
	}).(pulumi.BoolPtrOutput)
}

// Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
func (o CacheKeyPolicyPtrOutput) QueryStringBlacklist() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CacheKeyPolicy) []string {
		if v == nil {
			return nil
		}
		return v.QueryStringBlacklist
	}).(pulumi.StringArrayOutput)
}

// Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
func (o CacheKeyPolicyPtrOutput) QueryStringWhitelist() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CacheKeyPolicy) []string {
		if v == nil {
			return nil
		}
		return v.QueryStringWhitelist
	}).(pulumi.StringArrayOutput)
}

// Message containing what to include in the cache key for a request for Cloud CDN.
type CacheKeyPolicyResponse struct {
	// If true, requests to different hosts will be cached separately.
	IncludeHost bool `pulumi:"includeHost"`
	// If true, http and https requests will be cached separately.
	IncludeProtocol bool `pulumi:"includeProtocol"`
	// If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
	IncludeQueryString bool `pulumi:"includeQueryString"`
	// Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
	QueryStringBlacklist []string `pulumi:"queryStringBlacklist"`
	// Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
	QueryStringWhitelist []string `pulumi:"queryStringWhitelist"`
}

// CacheKeyPolicyResponseInput is an input type that accepts CacheKeyPolicyResponseArgs and CacheKeyPolicyResponseOutput values.
// You can construct a concrete instance of `CacheKeyPolicyResponseInput` via:
//
//          CacheKeyPolicyResponseArgs{...}
type CacheKeyPolicyResponseInput interface {
	pulumi.Input

	ToCacheKeyPolicyResponseOutput() CacheKeyPolicyResponseOutput
	ToCacheKeyPolicyResponseOutputWithContext(context.Context) CacheKeyPolicyResponseOutput
}

// Message containing what to include in the cache key for a request for Cloud CDN.
type CacheKeyPolicyResponseArgs struct {
	// If true, requests to different hosts will be cached separately.
	IncludeHost pulumi.BoolInput `pulumi:"includeHost"`
	// If true, http and https requests will be cached separately.
	IncludeProtocol pulumi.BoolInput `pulumi:"includeProtocol"`
	// If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
	IncludeQueryString pulumi.BoolInput `pulumi:"includeQueryString"`
	// Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
	QueryStringBlacklist pulumi.StringArrayInput `pulumi:"queryStringBlacklist"`
	// Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
	QueryStringWhitelist pulumi.StringArrayInput `pulumi:"queryStringWhitelist"`
}

func (CacheKeyPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheKeyPolicyResponse)(nil)).Elem()
}

func (i CacheKeyPolicyResponseArgs) ToCacheKeyPolicyResponseOutput() CacheKeyPolicyResponseOutput {
	return i.ToCacheKeyPolicyResponseOutputWithContext(context.Background())
}

func (i CacheKeyPolicyResponseArgs) ToCacheKeyPolicyResponseOutputWithContext(ctx context.Context) CacheKeyPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheKeyPolicyResponseOutput)
}

func (i CacheKeyPolicyResponseArgs) ToCacheKeyPolicyResponsePtrOutput() CacheKeyPolicyResponsePtrOutput {
	return i.ToCacheKeyPolicyResponsePtrOutputWithContext(context.Background())
}

func (i CacheKeyPolicyResponseArgs) ToCacheKeyPolicyResponsePtrOutputWithContext(ctx context.Context) CacheKeyPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheKeyPolicyResponseOutput).ToCacheKeyPolicyResponsePtrOutputWithContext(ctx)
}

// CacheKeyPolicyResponsePtrInput is an input type that accepts CacheKeyPolicyResponseArgs, CacheKeyPolicyResponsePtr and CacheKeyPolicyResponsePtrOutput values.
// You can construct a concrete instance of `CacheKeyPolicyResponsePtrInput` via:
//
//          CacheKeyPolicyResponseArgs{...}
//
//  or:
//
//          nil
type CacheKeyPolicyResponsePtrInput interface {
	pulumi.Input

	ToCacheKeyPolicyResponsePtrOutput() CacheKeyPolicyResponsePtrOutput
	ToCacheKeyPolicyResponsePtrOutputWithContext(context.Context) CacheKeyPolicyResponsePtrOutput
}

type cacheKeyPolicyResponsePtrType CacheKeyPolicyResponseArgs

func CacheKeyPolicyResponsePtr(v *CacheKeyPolicyResponseArgs) CacheKeyPolicyResponsePtrInput {
	return (*cacheKeyPolicyResponsePtrType)(v)
}

func (*cacheKeyPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheKeyPolicyResponse)(nil)).Elem()
}

func (i *cacheKeyPolicyResponsePtrType) ToCacheKeyPolicyResponsePtrOutput() CacheKeyPolicyResponsePtrOutput {
	return i.ToCacheKeyPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *cacheKeyPolicyResponsePtrType) ToCacheKeyPolicyResponsePtrOutputWithContext(ctx context.Context) CacheKeyPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheKeyPolicyResponsePtrOutput)
}

// Message containing what to include in the cache key for a request for Cloud CDN.
type CacheKeyPolicyResponseOutput struct{ *pulumi.OutputState }

func (CacheKeyPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheKeyPolicyResponse)(nil)).Elem()
}

func (o CacheKeyPolicyResponseOutput) ToCacheKeyPolicyResponseOutput() CacheKeyPolicyResponseOutput {
	return o
}

func (o CacheKeyPolicyResponseOutput) ToCacheKeyPolicyResponseOutputWithContext(ctx context.Context) CacheKeyPolicyResponseOutput {
	return o
}

func (o CacheKeyPolicyResponseOutput) ToCacheKeyPolicyResponsePtrOutput() CacheKeyPolicyResponsePtrOutput {
	return o.ToCacheKeyPolicyResponsePtrOutputWithContext(context.Background())
}

func (o CacheKeyPolicyResponseOutput) ToCacheKeyPolicyResponsePtrOutputWithContext(ctx context.Context) CacheKeyPolicyResponsePtrOutput {
	return o.ApplyT(func(v CacheKeyPolicyResponse) *CacheKeyPolicyResponse {
		return &v
	}).(CacheKeyPolicyResponsePtrOutput)
}

// If true, requests to different hosts will be cached separately.
func (o CacheKeyPolicyResponseOutput) IncludeHost() pulumi.BoolOutput {
	return o.ApplyT(func(v CacheKeyPolicyResponse) bool { return v.IncludeHost }).(pulumi.BoolOutput)
}

// If true, http and https requests will be cached separately.
func (o CacheKeyPolicyResponseOutput) IncludeProtocol() pulumi.BoolOutput {
	return o.ApplyT(func(v CacheKeyPolicyResponse) bool { return v.IncludeProtocol }).(pulumi.BoolOutput)
}

// If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
func (o CacheKeyPolicyResponseOutput) IncludeQueryString() pulumi.BoolOutput {
	return o.ApplyT(func(v CacheKeyPolicyResponse) bool { return v.IncludeQueryString }).(pulumi.BoolOutput)
}

// Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
func (o CacheKeyPolicyResponseOutput) QueryStringBlacklist() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CacheKeyPolicyResponse) []string { return v.QueryStringBlacklist }).(pulumi.StringArrayOutput)
}

// Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
func (o CacheKeyPolicyResponseOutput) QueryStringWhitelist() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CacheKeyPolicyResponse) []string { return v.QueryStringWhitelist }).(pulumi.StringArrayOutput)
}

type CacheKeyPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheKeyPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheKeyPolicyResponse)(nil)).Elem()
}

func (o CacheKeyPolicyResponsePtrOutput) ToCacheKeyPolicyResponsePtrOutput() CacheKeyPolicyResponsePtrOutput {
	return o
}

func (o CacheKeyPolicyResponsePtrOutput) ToCacheKeyPolicyResponsePtrOutputWithContext(ctx context.Context) CacheKeyPolicyResponsePtrOutput {
	return o
}

func (o CacheKeyPolicyResponsePtrOutput) Elem() CacheKeyPolicyResponseOutput {
	return o.ApplyT(func(v *CacheKeyPolicyResponse) CacheKeyPolicyResponse { return *v }).(CacheKeyPolicyResponseOutput)
}

// If true, requests to different hosts will be cached separately.
func (o CacheKeyPolicyResponsePtrOutput) IncludeHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheKeyPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IncludeHost
	}).(pulumi.BoolPtrOutput)
}

// If true, http and https requests will be cached separately.
func (o CacheKeyPolicyResponsePtrOutput) IncludeProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheKeyPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IncludeProtocol
	}).(pulumi.BoolPtrOutput)
}

// If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
func (o CacheKeyPolicyResponsePtrOutput) IncludeQueryString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CacheKeyPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IncludeQueryString
	}).(pulumi.BoolPtrOutput)
}

// Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
func (o CacheKeyPolicyResponsePtrOutput) QueryStringBlacklist() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CacheKeyPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.QueryStringBlacklist
	}).(pulumi.StringArrayOutput)
}

// Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.
func (o CacheKeyPolicyResponsePtrOutput) QueryStringWhitelist() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CacheKeyPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.QueryStringWhitelist
	}).(pulumi.StringArrayOutput)
}

// Settings controlling the volume of requests, connections and retries to this backend service.
type CircuitBreakers struct {
	// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
	MaxConnections *int `pulumi:"maxConnections"`
	// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
	MaxPendingRequests *int `pulumi:"maxPendingRequests"`
	// The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
	MaxRequests *int `pulumi:"maxRequests"`
	// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
	MaxRequestsPerConnection *int `pulumi:"maxRequestsPerConnection"`
	// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
	MaxRetries *int `pulumi:"maxRetries"`
}

// CircuitBreakersInput is an input type that accepts CircuitBreakersArgs and CircuitBreakersOutput values.
// You can construct a concrete instance of `CircuitBreakersInput` via:
//
//          CircuitBreakersArgs{...}
type CircuitBreakersInput interface {
	pulumi.Input

	ToCircuitBreakersOutput() CircuitBreakersOutput
	ToCircuitBreakersOutputWithContext(context.Context) CircuitBreakersOutput
}

// Settings controlling the volume of requests, connections and retries to this backend service.
type CircuitBreakersArgs struct {
	// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
	MaxConnections pulumi.IntPtrInput `pulumi:"maxConnections"`
	// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
	MaxPendingRequests pulumi.IntPtrInput `pulumi:"maxPendingRequests"`
	// The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
	MaxRequests pulumi.IntPtrInput `pulumi:"maxRequests"`
	// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
	MaxRequestsPerConnection pulumi.IntPtrInput `pulumi:"maxRequestsPerConnection"`
	// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
}

func (CircuitBreakersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CircuitBreakers)(nil)).Elem()
}

func (i CircuitBreakersArgs) ToCircuitBreakersOutput() CircuitBreakersOutput {
	return i.ToCircuitBreakersOutputWithContext(context.Background())
}

func (i CircuitBreakersArgs) ToCircuitBreakersOutputWithContext(ctx context.Context) CircuitBreakersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CircuitBreakersOutput)
}

func (i CircuitBreakersArgs) ToCircuitBreakersPtrOutput() CircuitBreakersPtrOutput {
	return i.ToCircuitBreakersPtrOutputWithContext(context.Background())
}

func (i CircuitBreakersArgs) ToCircuitBreakersPtrOutputWithContext(ctx context.Context) CircuitBreakersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CircuitBreakersOutput).ToCircuitBreakersPtrOutputWithContext(ctx)
}

// CircuitBreakersPtrInput is an input type that accepts CircuitBreakersArgs, CircuitBreakersPtr and CircuitBreakersPtrOutput values.
// You can construct a concrete instance of `CircuitBreakersPtrInput` via:
//
//          CircuitBreakersArgs{...}
//
//  or:
//
//          nil
type CircuitBreakersPtrInput interface {
	pulumi.Input

	ToCircuitBreakersPtrOutput() CircuitBreakersPtrOutput
	ToCircuitBreakersPtrOutputWithContext(context.Context) CircuitBreakersPtrOutput
}

type circuitBreakersPtrType CircuitBreakersArgs

func CircuitBreakersPtr(v *CircuitBreakersArgs) CircuitBreakersPtrInput {
	return (*circuitBreakersPtrType)(v)
}

func (*circuitBreakersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CircuitBreakers)(nil)).Elem()
}

func (i *circuitBreakersPtrType) ToCircuitBreakersPtrOutput() CircuitBreakersPtrOutput {
	return i.ToCircuitBreakersPtrOutputWithContext(context.Background())
}

func (i *circuitBreakersPtrType) ToCircuitBreakersPtrOutputWithContext(ctx context.Context) CircuitBreakersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CircuitBreakersPtrOutput)
}

// Settings controlling the volume of requests, connections and retries to this backend service.
type CircuitBreakersOutput struct{ *pulumi.OutputState }

func (CircuitBreakersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CircuitBreakers)(nil)).Elem()
}

func (o CircuitBreakersOutput) ToCircuitBreakersOutput() CircuitBreakersOutput {
	return o
}

func (o CircuitBreakersOutput) ToCircuitBreakersOutputWithContext(ctx context.Context) CircuitBreakersOutput {
	return o
}

func (o CircuitBreakersOutput) ToCircuitBreakersPtrOutput() CircuitBreakersPtrOutput {
	return o.ToCircuitBreakersPtrOutputWithContext(context.Background())
}

func (o CircuitBreakersOutput) ToCircuitBreakersPtrOutputWithContext(ctx context.Context) CircuitBreakersPtrOutput {
	return o.ApplyT(func(v CircuitBreakers) *CircuitBreakers {
		return &v
	}).(CircuitBreakersPtrOutput)
}

// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o CircuitBreakersOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CircuitBreakers) *int { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o CircuitBreakersOutput) MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CircuitBreakers) *int { return v.MaxPendingRequests }).(pulumi.IntPtrOutput)
}

// The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
func (o CircuitBreakersOutput) MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CircuitBreakers) *int { return v.MaxRequests }).(pulumi.IntPtrOutput)
}

// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o CircuitBreakersOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CircuitBreakers) *int { return v.MaxRequestsPerConnection }).(pulumi.IntPtrOutput)
}

// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o CircuitBreakersOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CircuitBreakers) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

type CircuitBreakersPtrOutput struct{ *pulumi.OutputState }

func (CircuitBreakersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CircuitBreakers)(nil)).Elem()
}

func (o CircuitBreakersPtrOutput) ToCircuitBreakersPtrOutput() CircuitBreakersPtrOutput {
	return o
}

func (o CircuitBreakersPtrOutput) ToCircuitBreakersPtrOutputWithContext(ctx context.Context) CircuitBreakersPtrOutput {
	return o
}

func (o CircuitBreakersPtrOutput) Elem() CircuitBreakersOutput {
	return o.ApplyT(func(v *CircuitBreakers) CircuitBreakers { return *v }).(CircuitBreakersOutput)
}

// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o CircuitBreakersPtrOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CircuitBreakers) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o CircuitBreakersPtrOutput) MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CircuitBreakers) *int {
		if v == nil {
			return nil
		}
		return v.MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
func (o CircuitBreakersPtrOutput) MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CircuitBreakers) *int {
		if v == nil {
			return nil
		}
		return v.MaxRequests
	}).(pulumi.IntPtrOutput)
}

// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o CircuitBreakersPtrOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CircuitBreakers) *int {
		if v == nil {
			return nil
		}
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o CircuitBreakersPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CircuitBreakers) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// Settings controlling the volume of requests, connections and retries to this backend service.
type CircuitBreakersResponse struct {
	// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
	MaxConnections int `pulumi:"maxConnections"`
	// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
	MaxPendingRequests int `pulumi:"maxPendingRequests"`
	// The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
	MaxRequests int `pulumi:"maxRequests"`
	// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
	MaxRequestsPerConnection int `pulumi:"maxRequestsPerConnection"`
	// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
	MaxRetries int `pulumi:"maxRetries"`
}

// CircuitBreakersResponseInput is an input type that accepts CircuitBreakersResponseArgs and CircuitBreakersResponseOutput values.
// You can construct a concrete instance of `CircuitBreakersResponseInput` via:
//
//          CircuitBreakersResponseArgs{...}
type CircuitBreakersResponseInput interface {
	pulumi.Input

	ToCircuitBreakersResponseOutput() CircuitBreakersResponseOutput
	ToCircuitBreakersResponseOutputWithContext(context.Context) CircuitBreakersResponseOutput
}

// Settings controlling the volume of requests, connections and retries to this backend service.
type CircuitBreakersResponseArgs struct {
	// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
	MaxConnections pulumi.IntInput `pulumi:"maxConnections"`
	// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
	MaxPendingRequests pulumi.IntInput `pulumi:"maxPendingRequests"`
	// The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
	MaxRequests pulumi.IntInput `pulumi:"maxRequests"`
	// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
	MaxRequestsPerConnection pulumi.IntInput `pulumi:"maxRequestsPerConnection"`
	// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
	MaxRetries pulumi.IntInput `pulumi:"maxRetries"`
}

func (CircuitBreakersResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CircuitBreakersResponse)(nil)).Elem()
}

func (i CircuitBreakersResponseArgs) ToCircuitBreakersResponseOutput() CircuitBreakersResponseOutput {
	return i.ToCircuitBreakersResponseOutputWithContext(context.Background())
}

func (i CircuitBreakersResponseArgs) ToCircuitBreakersResponseOutputWithContext(ctx context.Context) CircuitBreakersResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CircuitBreakersResponseOutput)
}

func (i CircuitBreakersResponseArgs) ToCircuitBreakersResponsePtrOutput() CircuitBreakersResponsePtrOutput {
	return i.ToCircuitBreakersResponsePtrOutputWithContext(context.Background())
}

func (i CircuitBreakersResponseArgs) ToCircuitBreakersResponsePtrOutputWithContext(ctx context.Context) CircuitBreakersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CircuitBreakersResponseOutput).ToCircuitBreakersResponsePtrOutputWithContext(ctx)
}

// CircuitBreakersResponsePtrInput is an input type that accepts CircuitBreakersResponseArgs, CircuitBreakersResponsePtr and CircuitBreakersResponsePtrOutput values.
// You can construct a concrete instance of `CircuitBreakersResponsePtrInput` via:
//
//          CircuitBreakersResponseArgs{...}
//
//  or:
//
//          nil
type CircuitBreakersResponsePtrInput interface {
	pulumi.Input

	ToCircuitBreakersResponsePtrOutput() CircuitBreakersResponsePtrOutput
	ToCircuitBreakersResponsePtrOutputWithContext(context.Context) CircuitBreakersResponsePtrOutput
}

type circuitBreakersResponsePtrType CircuitBreakersResponseArgs

func CircuitBreakersResponsePtr(v *CircuitBreakersResponseArgs) CircuitBreakersResponsePtrInput {
	return (*circuitBreakersResponsePtrType)(v)
}

func (*circuitBreakersResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CircuitBreakersResponse)(nil)).Elem()
}

func (i *circuitBreakersResponsePtrType) ToCircuitBreakersResponsePtrOutput() CircuitBreakersResponsePtrOutput {
	return i.ToCircuitBreakersResponsePtrOutputWithContext(context.Background())
}

func (i *circuitBreakersResponsePtrType) ToCircuitBreakersResponsePtrOutputWithContext(ctx context.Context) CircuitBreakersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CircuitBreakersResponsePtrOutput)
}

// Settings controlling the volume of requests, connections and retries to this backend service.
type CircuitBreakersResponseOutput struct{ *pulumi.OutputState }

func (CircuitBreakersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CircuitBreakersResponse)(nil)).Elem()
}

func (o CircuitBreakersResponseOutput) ToCircuitBreakersResponseOutput() CircuitBreakersResponseOutput {
	return o
}

func (o CircuitBreakersResponseOutput) ToCircuitBreakersResponseOutputWithContext(ctx context.Context) CircuitBreakersResponseOutput {
	return o
}

func (o CircuitBreakersResponseOutput) ToCircuitBreakersResponsePtrOutput() CircuitBreakersResponsePtrOutput {
	return o.ToCircuitBreakersResponsePtrOutputWithContext(context.Background())
}

func (o CircuitBreakersResponseOutput) ToCircuitBreakersResponsePtrOutputWithContext(ctx context.Context) CircuitBreakersResponsePtrOutput {
	return o.ApplyT(func(v CircuitBreakersResponse) *CircuitBreakersResponse {
		return &v
	}).(CircuitBreakersResponsePtrOutput)
}

// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o CircuitBreakersResponseOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v CircuitBreakersResponse) int { return v.MaxConnections }).(pulumi.IntOutput)
}

// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o CircuitBreakersResponseOutput) MaxPendingRequests() pulumi.IntOutput {
	return o.ApplyT(func(v CircuitBreakersResponse) int { return v.MaxPendingRequests }).(pulumi.IntOutput)
}

// The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
func (o CircuitBreakersResponseOutput) MaxRequests() pulumi.IntOutput {
	return o.ApplyT(func(v CircuitBreakersResponse) int { return v.MaxRequests }).(pulumi.IntOutput)
}

// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o CircuitBreakersResponseOutput) MaxRequestsPerConnection() pulumi.IntOutput {
	return o.ApplyT(func(v CircuitBreakersResponse) int { return v.MaxRequestsPerConnection }).(pulumi.IntOutput)
}

// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o CircuitBreakersResponseOutput) MaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v CircuitBreakersResponse) int { return v.MaxRetries }).(pulumi.IntOutput)
}

type CircuitBreakersResponsePtrOutput struct{ *pulumi.OutputState }

func (CircuitBreakersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CircuitBreakersResponse)(nil)).Elem()
}

func (o CircuitBreakersResponsePtrOutput) ToCircuitBreakersResponsePtrOutput() CircuitBreakersResponsePtrOutput {
	return o
}

func (o CircuitBreakersResponsePtrOutput) ToCircuitBreakersResponsePtrOutputWithContext(ctx context.Context) CircuitBreakersResponsePtrOutput {
	return o
}

func (o CircuitBreakersResponsePtrOutput) Elem() CircuitBreakersResponseOutput {
	return o.ApplyT(func(v *CircuitBreakersResponse) CircuitBreakersResponse { return *v }).(CircuitBreakersResponseOutput)
}

// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o CircuitBreakersResponsePtrOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CircuitBreakersResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o CircuitBreakersResponsePtrOutput) MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CircuitBreakersResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
func (o CircuitBreakersResponsePtrOutput) MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CircuitBreakersResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxRequests
	}).(pulumi.IntPtrOutput)
}

// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o CircuitBreakersResponsePtrOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CircuitBreakersResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

// Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o CircuitBreakersResponsePtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CircuitBreakersResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// This is deprecated and has no effect. Do not use.
type Condition struct {
	// This is deprecated and has no effect. Do not use.
	Iam *string `pulumi:"iam"`
	// This is deprecated and has no effect. Do not use.
	Op *string `pulumi:"op"`
	// This is deprecated and has no effect. Do not use.
	Svc *string `pulumi:"svc"`
	// This is deprecated and has no effect. Do not use.
	Sys *string `pulumi:"sys"`
	// This is deprecated and has no effect. Do not use.
	Values []string `pulumi:"values"`
}

// ConditionInput is an input type that accepts ConditionArgs and ConditionOutput values.
// You can construct a concrete instance of `ConditionInput` via:
//
//          ConditionArgs{...}
type ConditionInput interface {
	pulumi.Input

	ToConditionOutput() ConditionOutput
	ToConditionOutputWithContext(context.Context) ConditionOutput
}

// This is deprecated and has no effect. Do not use.
type ConditionArgs struct {
	// This is deprecated and has no effect. Do not use.
	Iam *ConditionIam `pulumi:"iam"`
	// This is deprecated and has no effect. Do not use.
	Op *ConditionOp `pulumi:"op"`
	// This is deprecated and has no effect. Do not use.
	Svc pulumi.StringPtrInput `pulumi:"svc"`
	// This is deprecated and has no effect. Do not use.
	Sys *ConditionSys `pulumi:"sys"`
	// This is deprecated and has no effect. Do not use.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (i ConditionArgs) ToConditionOutput() ConditionOutput {
	return i.ToConditionOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput)
}

// ConditionArrayInput is an input type that accepts ConditionArray and ConditionArrayOutput values.
// You can construct a concrete instance of `ConditionArrayInput` via:
//
//          ConditionArray{ ConditionArgs{...} }
type ConditionArrayInput interface {
	pulumi.Input

	ToConditionArrayOutput() ConditionArrayOutput
	ToConditionArrayOutputWithContext(context.Context) ConditionArrayOutput
}

type ConditionArray []ConditionInput

func (ConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Condition)(nil)).Elem()
}

func (i ConditionArray) ToConditionArrayOutput() ConditionArrayOutput {
	return i.ToConditionArrayOutputWithContext(context.Background())
}

func (i ConditionArray) ToConditionArrayOutputWithContext(ctx context.Context) ConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionArrayOutput)
}

// This is deprecated and has no effect. Do not use.
type ConditionOutput struct{ *pulumi.OutputState }

func (ConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (o ConditionOutput) ToConditionOutput() ConditionOutput {
	return o
}

func (o ConditionOutput) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return o
}

// This is deprecated and has no effect. Do not use.
func (o ConditionOutput) Iam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.Iam }).(pulumi.StringPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o ConditionOutput) Op() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.Op }).(pulumi.StringPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o ConditionOutput) Svc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.Svc }).(pulumi.StringPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o ConditionOutput) Sys() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.Sys }).(pulumi.StringPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o ConditionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Condition) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionArrayOutput struct{ *pulumi.OutputState }

func (ConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Condition)(nil)).Elem()
}

func (o ConditionArrayOutput) ToConditionArrayOutput() ConditionArrayOutput {
	return o
}

func (o ConditionArrayOutput) ToConditionArrayOutputWithContext(ctx context.Context) ConditionArrayOutput {
	return o
}

func (o ConditionArrayOutput) Index(i pulumi.IntInput) ConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Condition {
		return vs[0].([]Condition)[vs[1].(int)]
	}).(ConditionOutput)
}

// This is deprecated and has no effect. Do not use.
type ConditionResponse struct {
	// This is deprecated and has no effect. Do not use.
	Iam string `pulumi:"iam"`
	// This is deprecated and has no effect. Do not use.
	Op string `pulumi:"op"`
	// This is deprecated and has no effect. Do not use.
	Svc string `pulumi:"svc"`
	// This is deprecated and has no effect. Do not use.
	Sys string `pulumi:"sys"`
	// This is deprecated and has no effect. Do not use.
	Values []string `pulumi:"values"`
}

// ConditionResponseInput is an input type that accepts ConditionResponseArgs and ConditionResponseOutput values.
// You can construct a concrete instance of `ConditionResponseInput` via:
//
//          ConditionResponseArgs{...}
type ConditionResponseInput interface {
	pulumi.Input

	ToConditionResponseOutput() ConditionResponseOutput
	ToConditionResponseOutputWithContext(context.Context) ConditionResponseOutput
}

// This is deprecated and has no effect. Do not use.
type ConditionResponseArgs struct {
	// This is deprecated and has no effect. Do not use.
	Iam pulumi.StringInput `pulumi:"iam"`
	// This is deprecated and has no effect. Do not use.
	Op pulumi.StringInput `pulumi:"op"`
	// This is deprecated and has no effect. Do not use.
	Svc pulumi.StringInput `pulumi:"svc"`
	// This is deprecated and has no effect. Do not use.
	Sys pulumi.StringInput `pulumi:"sys"`
	// This is deprecated and has no effect. Do not use.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ConditionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponse)(nil)).Elem()
}

func (i ConditionResponseArgs) ToConditionResponseOutput() ConditionResponseOutput {
	return i.ToConditionResponseOutputWithContext(context.Background())
}

func (i ConditionResponseArgs) ToConditionResponseOutputWithContext(ctx context.Context) ConditionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionResponseOutput)
}

// ConditionResponseArrayInput is an input type that accepts ConditionResponseArray and ConditionResponseArrayOutput values.
// You can construct a concrete instance of `ConditionResponseArrayInput` via:
//
//          ConditionResponseArray{ ConditionResponseArgs{...} }
type ConditionResponseArrayInput interface {
	pulumi.Input

	ToConditionResponseArrayOutput() ConditionResponseArrayOutput
	ToConditionResponseArrayOutputWithContext(context.Context) ConditionResponseArrayOutput
}

type ConditionResponseArray []ConditionResponseInput

func (ConditionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConditionResponse)(nil)).Elem()
}

func (i ConditionResponseArray) ToConditionResponseArrayOutput() ConditionResponseArrayOutput {
	return i.ToConditionResponseArrayOutputWithContext(context.Background())
}

func (i ConditionResponseArray) ToConditionResponseArrayOutputWithContext(ctx context.Context) ConditionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionResponseArrayOutput)
}

// This is deprecated and has no effect. Do not use.
type ConditionResponseOutput struct{ *pulumi.OutputState }

func (ConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseOutput) ToConditionResponseOutput() ConditionResponseOutput {
	return o
}

func (o ConditionResponseOutput) ToConditionResponseOutputWithContext(ctx context.Context) ConditionResponseOutput {
	return o
}

// This is deprecated and has no effect. Do not use.
func (o ConditionResponseOutput) Iam() pulumi.StringOutput {
	return o.ApplyT(func(v ConditionResponse) string { return v.Iam }).(pulumi.StringOutput)
}

// This is deprecated and has no effect. Do not use.
func (o ConditionResponseOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v ConditionResponse) string { return v.Op }).(pulumi.StringOutput)
}

// This is deprecated and has no effect. Do not use.
func (o ConditionResponseOutput) Svc() pulumi.StringOutput {
	return o.ApplyT(func(v ConditionResponse) string { return v.Svc }).(pulumi.StringOutput)
}

// This is deprecated and has no effect. Do not use.
func (o ConditionResponseOutput) Sys() pulumi.StringOutput {
	return o.ApplyT(func(v ConditionResponse) string { return v.Sys }).(pulumi.StringOutput)
}

// This is deprecated and has no effect. Do not use.
func (o ConditionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConditionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (ConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseArrayOutput) ToConditionResponseArrayOutput() ConditionResponseArrayOutput {
	return o
}

func (o ConditionResponseArrayOutput) ToConditionResponseArrayOutputWithContext(ctx context.Context) ConditionResponseArrayOutput {
	return o
}

func (o ConditionResponseArrayOutput) Index(i pulumi.IntInput) ConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConditionResponse {
		return vs[0].([]ConditionResponse)[vs[1].(int)]
	}).(ConditionResponseOutput)
}

// A set of Confidential Instance options.
type ConfidentialInstanceConfig struct {
	// Defines whether the instance should have confidential compute enabled.
	EnableConfidentialCompute *bool `pulumi:"enableConfidentialCompute"`
}

// ConfidentialInstanceConfigInput is an input type that accepts ConfidentialInstanceConfigArgs and ConfidentialInstanceConfigOutput values.
// You can construct a concrete instance of `ConfidentialInstanceConfigInput` via:
//
//          ConfidentialInstanceConfigArgs{...}
type ConfidentialInstanceConfigInput interface {
	pulumi.Input

	ToConfidentialInstanceConfigOutput() ConfidentialInstanceConfigOutput
	ToConfidentialInstanceConfigOutputWithContext(context.Context) ConfidentialInstanceConfigOutput
}

// A set of Confidential Instance options.
type ConfidentialInstanceConfigArgs struct {
	// Defines whether the instance should have confidential compute enabled.
	EnableConfidentialCompute pulumi.BoolPtrInput `pulumi:"enableConfidentialCompute"`
}

func (ConfidentialInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfidentialInstanceConfig)(nil)).Elem()
}

func (i ConfidentialInstanceConfigArgs) ToConfidentialInstanceConfigOutput() ConfidentialInstanceConfigOutput {
	return i.ToConfidentialInstanceConfigOutputWithContext(context.Background())
}

func (i ConfidentialInstanceConfigArgs) ToConfidentialInstanceConfigOutputWithContext(ctx context.Context) ConfidentialInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfidentialInstanceConfigOutput)
}

func (i ConfidentialInstanceConfigArgs) ToConfidentialInstanceConfigPtrOutput() ConfidentialInstanceConfigPtrOutput {
	return i.ToConfidentialInstanceConfigPtrOutputWithContext(context.Background())
}

func (i ConfidentialInstanceConfigArgs) ToConfidentialInstanceConfigPtrOutputWithContext(ctx context.Context) ConfidentialInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfidentialInstanceConfigOutput).ToConfidentialInstanceConfigPtrOutputWithContext(ctx)
}

// ConfidentialInstanceConfigPtrInput is an input type that accepts ConfidentialInstanceConfigArgs, ConfidentialInstanceConfigPtr and ConfidentialInstanceConfigPtrOutput values.
// You can construct a concrete instance of `ConfidentialInstanceConfigPtrInput` via:
//
//          ConfidentialInstanceConfigArgs{...}
//
//  or:
//
//          nil
type ConfidentialInstanceConfigPtrInput interface {
	pulumi.Input

	ToConfidentialInstanceConfigPtrOutput() ConfidentialInstanceConfigPtrOutput
	ToConfidentialInstanceConfigPtrOutputWithContext(context.Context) ConfidentialInstanceConfigPtrOutput
}

type confidentialInstanceConfigPtrType ConfidentialInstanceConfigArgs

func ConfidentialInstanceConfigPtr(v *ConfidentialInstanceConfigArgs) ConfidentialInstanceConfigPtrInput {
	return (*confidentialInstanceConfigPtrType)(v)
}

func (*confidentialInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfidentialInstanceConfig)(nil)).Elem()
}

func (i *confidentialInstanceConfigPtrType) ToConfidentialInstanceConfigPtrOutput() ConfidentialInstanceConfigPtrOutput {
	return i.ToConfidentialInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *confidentialInstanceConfigPtrType) ToConfidentialInstanceConfigPtrOutputWithContext(ctx context.Context) ConfidentialInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfidentialInstanceConfigPtrOutput)
}

// A set of Confidential Instance options.
type ConfidentialInstanceConfigOutput struct{ *pulumi.OutputState }

func (ConfidentialInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfidentialInstanceConfig)(nil)).Elem()
}

func (o ConfidentialInstanceConfigOutput) ToConfidentialInstanceConfigOutput() ConfidentialInstanceConfigOutput {
	return o
}

func (o ConfidentialInstanceConfigOutput) ToConfidentialInstanceConfigOutputWithContext(ctx context.Context) ConfidentialInstanceConfigOutput {
	return o
}

func (o ConfidentialInstanceConfigOutput) ToConfidentialInstanceConfigPtrOutput() ConfidentialInstanceConfigPtrOutput {
	return o.ToConfidentialInstanceConfigPtrOutputWithContext(context.Background())
}

func (o ConfidentialInstanceConfigOutput) ToConfidentialInstanceConfigPtrOutputWithContext(ctx context.Context) ConfidentialInstanceConfigPtrOutput {
	return o.ApplyT(func(v ConfidentialInstanceConfig) *ConfidentialInstanceConfig {
		return &v
	}).(ConfidentialInstanceConfigPtrOutput)
}

// Defines whether the instance should have confidential compute enabled.
func (o ConfidentialInstanceConfigOutput) EnableConfidentialCompute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfidentialInstanceConfig) *bool { return v.EnableConfidentialCompute }).(pulumi.BoolPtrOutput)
}

type ConfidentialInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (ConfidentialInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfidentialInstanceConfig)(nil)).Elem()
}

func (o ConfidentialInstanceConfigPtrOutput) ToConfidentialInstanceConfigPtrOutput() ConfidentialInstanceConfigPtrOutput {
	return o
}

func (o ConfidentialInstanceConfigPtrOutput) ToConfidentialInstanceConfigPtrOutputWithContext(ctx context.Context) ConfidentialInstanceConfigPtrOutput {
	return o
}

func (o ConfidentialInstanceConfigPtrOutput) Elem() ConfidentialInstanceConfigOutput {
	return o.ApplyT(func(v *ConfidentialInstanceConfig) ConfidentialInstanceConfig { return *v }).(ConfidentialInstanceConfigOutput)
}

// Defines whether the instance should have confidential compute enabled.
func (o ConfidentialInstanceConfigPtrOutput) EnableConfidentialCompute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfidentialInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableConfidentialCompute
	}).(pulumi.BoolPtrOutput)
}

// A set of Confidential Instance options.
type ConfidentialInstanceConfigResponse struct {
	// Defines whether the instance should have confidential compute enabled.
	EnableConfidentialCompute bool `pulumi:"enableConfidentialCompute"`
}

// ConfidentialInstanceConfigResponseInput is an input type that accepts ConfidentialInstanceConfigResponseArgs and ConfidentialInstanceConfigResponseOutput values.
// You can construct a concrete instance of `ConfidentialInstanceConfigResponseInput` via:
//
//          ConfidentialInstanceConfigResponseArgs{...}
type ConfidentialInstanceConfigResponseInput interface {
	pulumi.Input

	ToConfidentialInstanceConfigResponseOutput() ConfidentialInstanceConfigResponseOutput
	ToConfidentialInstanceConfigResponseOutputWithContext(context.Context) ConfidentialInstanceConfigResponseOutput
}

// A set of Confidential Instance options.
type ConfidentialInstanceConfigResponseArgs struct {
	// Defines whether the instance should have confidential compute enabled.
	EnableConfidentialCompute pulumi.BoolInput `pulumi:"enableConfidentialCompute"`
}

func (ConfidentialInstanceConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfidentialInstanceConfigResponse)(nil)).Elem()
}

func (i ConfidentialInstanceConfigResponseArgs) ToConfidentialInstanceConfigResponseOutput() ConfidentialInstanceConfigResponseOutput {
	return i.ToConfidentialInstanceConfigResponseOutputWithContext(context.Background())
}

func (i ConfidentialInstanceConfigResponseArgs) ToConfidentialInstanceConfigResponseOutputWithContext(ctx context.Context) ConfidentialInstanceConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfidentialInstanceConfigResponseOutput)
}

func (i ConfidentialInstanceConfigResponseArgs) ToConfidentialInstanceConfigResponsePtrOutput() ConfidentialInstanceConfigResponsePtrOutput {
	return i.ToConfidentialInstanceConfigResponsePtrOutputWithContext(context.Background())
}

func (i ConfidentialInstanceConfigResponseArgs) ToConfidentialInstanceConfigResponsePtrOutputWithContext(ctx context.Context) ConfidentialInstanceConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfidentialInstanceConfigResponseOutput).ToConfidentialInstanceConfigResponsePtrOutputWithContext(ctx)
}

// ConfidentialInstanceConfigResponsePtrInput is an input type that accepts ConfidentialInstanceConfigResponseArgs, ConfidentialInstanceConfigResponsePtr and ConfidentialInstanceConfigResponsePtrOutput values.
// You can construct a concrete instance of `ConfidentialInstanceConfigResponsePtrInput` via:
//
//          ConfidentialInstanceConfigResponseArgs{...}
//
//  or:
//
//          nil
type ConfidentialInstanceConfigResponsePtrInput interface {
	pulumi.Input

	ToConfidentialInstanceConfigResponsePtrOutput() ConfidentialInstanceConfigResponsePtrOutput
	ToConfidentialInstanceConfigResponsePtrOutputWithContext(context.Context) ConfidentialInstanceConfigResponsePtrOutput
}

type confidentialInstanceConfigResponsePtrType ConfidentialInstanceConfigResponseArgs

func ConfidentialInstanceConfigResponsePtr(v *ConfidentialInstanceConfigResponseArgs) ConfidentialInstanceConfigResponsePtrInput {
	return (*confidentialInstanceConfigResponsePtrType)(v)
}

func (*confidentialInstanceConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfidentialInstanceConfigResponse)(nil)).Elem()
}

func (i *confidentialInstanceConfigResponsePtrType) ToConfidentialInstanceConfigResponsePtrOutput() ConfidentialInstanceConfigResponsePtrOutput {
	return i.ToConfidentialInstanceConfigResponsePtrOutputWithContext(context.Background())
}

func (i *confidentialInstanceConfigResponsePtrType) ToConfidentialInstanceConfigResponsePtrOutputWithContext(ctx context.Context) ConfidentialInstanceConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfidentialInstanceConfigResponsePtrOutput)
}

// A set of Confidential Instance options.
type ConfidentialInstanceConfigResponseOutput struct{ *pulumi.OutputState }

func (ConfidentialInstanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfidentialInstanceConfigResponse)(nil)).Elem()
}

func (o ConfidentialInstanceConfigResponseOutput) ToConfidentialInstanceConfigResponseOutput() ConfidentialInstanceConfigResponseOutput {
	return o
}

func (o ConfidentialInstanceConfigResponseOutput) ToConfidentialInstanceConfigResponseOutputWithContext(ctx context.Context) ConfidentialInstanceConfigResponseOutput {
	return o
}

func (o ConfidentialInstanceConfigResponseOutput) ToConfidentialInstanceConfigResponsePtrOutput() ConfidentialInstanceConfigResponsePtrOutput {
	return o.ToConfidentialInstanceConfigResponsePtrOutputWithContext(context.Background())
}

func (o ConfidentialInstanceConfigResponseOutput) ToConfidentialInstanceConfigResponsePtrOutputWithContext(ctx context.Context) ConfidentialInstanceConfigResponsePtrOutput {
	return o.ApplyT(func(v ConfidentialInstanceConfigResponse) *ConfidentialInstanceConfigResponse {
		return &v
	}).(ConfidentialInstanceConfigResponsePtrOutput)
}

// Defines whether the instance should have confidential compute enabled.
func (o ConfidentialInstanceConfigResponseOutput) EnableConfidentialCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfidentialInstanceConfigResponse) bool { return v.EnableConfidentialCompute }).(pulumi.BoolOutput)
}

type ConfidentialInstanceConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ConfidentialInstanceConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfidentialInstanceConfigResponse)(nil)).Elem()
}

func (o ConfidentialInstanceConfigResponsePtrOutput) ToConfidentialInstanceConfigResponsePtrOutput() ConfidentialInstanceConfigResponsePtrOutput {
	return o
}

func (o ConfidentialInstanceConfigResponsePtrOutput) ToConfidentialInstanceConfigResponsePtrOutputWithContext(ctx context.Context) ConfidentialInstanceConfigResponsePtrOutput {
	return o
}

func (o ConfidentialInstanceConfigResponsePtrOutput) Elem() ConfidentialInstanceConfigResponseOutput {
	return o.ApplyT(func(v *ConfidentialInstanceConfigResponse) ConfidentialInstanceConfigResponse { return *v }).(ConfidentialInstanceConfigResponseOutput)
}

// Defines whether the instance should have confidential compute enabled.
func (o ConfidentialInstanceConfigResponsePtrOutput) EnableConfidentialCompute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfidentialInstanceConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableConfidentialCompute
	}).(pulumi.BoolPtrOutput)
}

// Message containing connection draining configuration.
type ConnectionDraining struct {
	// Configures a duration timeout for existing requests on a removed backend instance. For supported load balancers and protocols, as described in Enabling connection draining.
	DrainingTimeoutSec *int `pulumi:"drainingTimeoutSec"`
}

// ConnectionDrainingInput is an input type that accepts ConnectionDrainingArgs and ConnectionDrainingOutput values.
// You can construct a concrete instance of `ConnectionDrainingInput` via:
//
//          ConnectionDrainingArgs{...}
type ConnectionDrainingInput interface {
	pulumi.Input

	ToConnectionDrainingOutput() ConnectionDrainingOutput
	ToConnectionDrainingOutputWithContext(context.Context) ConnectionDrainingOutput
}

// Message containing connection draining configuration.
type ConnectionDrainingArgs struct {
	// Configures a duration timeout for existing requests on a removed backend instance. For supported load balancers and protocols, as described in Enabling connection draining.
	DrainingTimeoutSec pulumi.IntPtrInput `pulumi:"drainingTimeoutSec"`
}

func (ConnectionDrainingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionDraining)(nil)).Elem()
}

func (i ConnectionDrainingArgs) ToConnectionDrainingOutput() ConnectionDrainingOutput {
	return i.ToConnectionDrainingOutputWithContext(context.Background())
}

func (i ConnectionDrainingArgs) ToConnectionDrainingOutputWithContext(ctx context.Context) ConnectionDrainingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionDrainingOutput)
}

func (i ConnectionDrainingArgs) ToConnectionDrainingPtrOutput() ConnectionDrainingPtrOutput {
	return i.ToConnectionDrainingPtrOutputWithContext(context.Background())
}

func (i ConnectionDrainingArgs) ToConnectionDrainingPtrOutputWithContext(ctx context.Context) ConnectionDrainingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionDrainingOutput).ToConnectionDrainingPtrOutputWithContext(ctx)
}

// ConnectionDrainingPtrInput is an input type that accepts ConnectionDrainingArgs, ConnectionDrainingPtr and ConnectionDrainingPtrOutput values.
// You can construct a concrete instance of `ConnectionDrainingPtrInput` via:
//
//          ConnectionDrainingArgs{...}
//
//  or:
//
//          nil
type ConnectionDrainingPtrInput interface {
	pulumi.Input

	ToConnectionDrainingPtrOutput() ConnectionDrainingPtrOutput
	ToConnectionDrainingPtrOutputWithContext(context.Context) ConnectionDrainingPtrOutput
}

type connectionDrainingPtrType ConnectionDrainingArgs

func ConnectionDrainingPtr(v *ConnectionDrainingArgs) ConnectionDrainingPtrInput {
	return (*connectionDrainingPtrType)(v)
}

func (*connectionDrainingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionDraining)(nil)).Elem()
}

func (i *connectionDrainingPtrType) ToConnectionDrainingPtrOutput() ConnectionDrainingPtrOutput {
	return i.ToConnectionDrainingPtrOutputWithContext(context.Background())
}

func (i *connectionDrainingPtrType) ToConnectionDrainingPtrOutputWithContext(ctx context.Context) ConnectionDrainingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionDrainingPtrOutput)
}

// Message containing connection draining configuration.
type ConnectionDrainingOutput struct{ *pulumi.OutputState }

func (ConnectionDrainingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionDraining)(nil)).Elem()
}

func (o ConnectionDrainingOutput) ToConnectionDrainingOutput() ConnectionDrainingOutput {
	return o
}

func (o ConnectionDrainingOutput) ToConnectionDrainingOutputWithContext(ctx context.Context) ConnectionDrainingOutput {
	return o
}

func (o ConnectionDrainingOutput) ToConnectionDrainingPtrOutput() ConnectionDrainingPtrOutput {
	return o.ToConnectionDrainingPtrOutputWithContext(context.Background())
}

func (o ConnectionDrainingOutput) ToConnectionDrainingPtrOutputWithContext(ctx context.Context) ConnectionDrainingPtrOutput {
	return o.ApplyT(func(v ConnectionDraining) *ConnectionDraining {
		return &v
	}).(ConnectionDrainingPtrOutput)
}

// Configures a duration timeout for existing requests on a removed backend instance. For supported load balancers and protocols, as described in Enabling connection draining.
func (o ConnectionDrainingOutput) DrainingTimeoutSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectionDraining) *int { return v.DrainingTimeoutSec }).(pulumi.IntPtrOutput)
}

type ConnectionDrainingPtrOutput struct{ *pulumi.OutputState }

func (ConnectionDrainingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionDraining)(nil)).Elem()
}

func (o ConnectionDrainingPtrOutput) ToConnectionDrainingPtrOutput() ConnectionDrainingPtrOutput {
	return o
}

func (o ConnectionDrainingPtrOutput) ToConnectionDrainingPtrOutputWithContext(ctx context.Context) ConnectionDrainingPtrOutput {
	return o
}

func (o ConnectionDrainingPtrOutput) Elem() ConnectionDrainingOutput {
	return o.ApplyT(func(v *ConnectionDraining) ConnectionDraining { return *v }).(ConnectionDrainingOutput)
}

// Configures a duration timeout for existing requests on a removed backend instance. For supported load balancers and protocols, as described in Enabling connection draining.
func (o ConnectionDrainingPtrOutput) DrainingTimeoutSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionDraining) *int {
		if v == nil {
			return nil
		}
		return v.DrainingTimeoutSec
	}).(pulumi.IntPtrOutput)
}

// Message containing connection draining configuration.
type ConnectionDrainingResponse struct {
	// Configures a duration timeout for existing requests on a removed backend instance. For supported load balancers and protocols, as described in Enabling connection draining.
	DrainingTimeoutSec int `pulumi:"drainingTimeoutSec"`
}

// ConnectionDrainingResponseInput is an input type that accepts ConnectionDrainingResponseArgs and ConnectionDrainingResponseOutput values.
// You can construct a concrete instance of `ConnectionDrainingResponseInput` via:
//
//          ConnectionDrainingResponseArgs{...}
type ConnectionDrainingResponseInput interface {
	pulumi.Input

	ToConnectionDrainingResponseOutput() ConnectionDrainingResponseOutput
	ToConnectionDrainingResponseOutputWithContext(context.Context) ConnectionDrainingResponseOutput
}

// Message containing connection draining configuration.
type ConnectionDrainingResponseArgs struct {
	// Configures a duration timeout for existing requests on a removed backend instance. For supported load balancers and protocols, as described in Enabling connection draining.
	DrainingTimeoutSec pulumi.IntInput `pulumi:"drainingTimeoutSec"`
}

func (ConnectionDrainingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionDrainingResponse)(nil)).Elem()
}

func (i ConnectionDrainingResponseArgs) ToConnectionDrainingResponseOutput() ConnectionDrainingResponseOutput {
	return i.ToConnectionDrainingResponseOutputWithContext(context.Background())
}

func (i ConnectionDrainingResponseArgs) ToConnectionDrainingResponseOutputWithContext(ctx context.Context) ConnectionDrainingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionDrainingResponseOutput)
}

func (i ConnectionDrainingResponseArgs) ToConnectionDrainingResponsePtrOutput() ConnectionDrainingResponsePtrOutput {
	return i.ToConnectionDrainingResponsePtrOutputWithContext(context.Background())
}

func (i ConnectionDrainingResponseArgs) ToConnectionDrainingResponsePtrOutputWithContext(ctx context.Context) ConnectionDrainingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionDrainingResponseOutput).ToConnectionDrainingResponsePtrOutputWithContext(ctx)
}

// ConnectionDrainingResponsePtrInput is an input type that accepts ConnectionDrainingResponseArgs, ConnectionDrainingResponsePtr and ConnectionDrainingResponsePtrOutput values.
// You can construct a concrete instance of `ConnectionDrainingResponsePtrInput` via:
//
//          ConnectionDrainingResponseArgs{...}
//
//  or:
//
//          nil
type ConnectionDrainingResponsePtrInput interface {
	pulumi.Input

	ToConnectionDrainingResponsePtrOutput() ConnectionDrainingResponsePtrOutput
	ToConnectionDrainingResponsePtrOutputWithContext(context.Context) ConnectionDrainingResponsePtrOutput
}

type connectionDrainingResponsePtrType ConnectionDrainingResponseArgs

func ConnectionDrainingResponsePtr(v *ConnectionDrainingResponseArgs) ConnectionDrainingResponsePtrInput {
	return (*connectionDrainingResponsePtrType)(v)
}

func (*connectionDrainingResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionDrainingResponse)(nil)).Elem()
}

func (i *connectionDrainingResponsePtrType) ToConnectionDrainingResponsePtrOutput() ConnectionDrainingResponsePtrOutput {
	return i.ToConnectionDrainingResponsePtrOutputWithContext(context.Background())
}

func (i *connectionDrainingResponsePtrType) ToConnectionDrainingResponsePtrOutputWithContext(ctx context.Context) ConnectionDrainingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionDrainingResponsePtrOutput)
}

// Message containing connection draining configuration.
type ConnectionDrainingResponseOutput struct{ *pulumi.OutputState }

func (ConnectionDrainingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionDrainingResponse)(nil)).Elem()
}

func (o ConnectionDrainingResponseOutput) ToConnectionDrainingResponseOutput() ConnectionDrainingResponseOutput {
	return o
}

func (o ConnectionDrainingResponseOutput) ToConnectionDrainingResponseOutputWithContext(ctx context.Context) ConnectionDrainingResponseOutput {
	return o
}

func (o ConnectionDrainingResponseOutput) ToConnectionDrainingResponsePtrOutput() ConnectionDrainingResponsePtrOutput {
	return o.ToConnectionDrainingResponsePtrOutputWithContext(context.Background())
}

func (o ConnectionDrainingResponseOutput) ToConnectionDrainingResponsePtrOutputWithContext(ctx context.Context) ConnectionDrainingResponsePtrOutput {
	return o.ApplyT(func(v ConnectionDrainingResponse) *ConnectionDrainingResponse {
		return &v
	}).(ConnectionDrainingResponsePtrOutput)
}

// Configures a duration timeout for existing requests on a removed backend instance. For supported load balancers and protocols, as described in Enabling connection draining.
func (o ConnectionDrainingResponseOutput) DrainingTimeoutSec() pulumi.IntOutput {
	return o.ApplyT(func(v ConnectionDrainingResponse) int { return v.DrainingTimeoutSec }).(pulumi.IntOutput)
}

type ConnectionDrainingResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectionDrainingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionDrainingResponse)(nil)).Elem()
}

func (o ConnectionDrainingResponsePtrOutput) ToConnectionDrainingResponsePtrOutput() ConnectionDrainingResponsePtrOutput {
	return o
}

func (o ConnectionDrainingResponsePtrOutput) ToConnectionDrainingResponsePtrOutputWithContext(ctx context.Context) ConnectionDrainingResponsePtrOutput {
	return o
}

func (o ConnectionDrainingResponsePtrOutput) Elem() ConnectionDrainingResponseOutput {
	return o.ApplyT(func(v *ConnectionDrainingResponse) ConnectionDrainingResponse { return *v }).(ConnectionDrainingResponseOutput)
}

// Configures a duration timeout for existing requests on a removed backend instance. For supported load balancers and protocols, as described in Enabling connection draining.
func (o ConnectionDrainingResponsePtrOutput) DrainingTimeoutSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectionDrainingResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DrainingTimeoutSec
	}).(pulumi.IntPtrOutput)
}

// This message defines settings for a consistent hash style load balancer.
type ConsistentHashLoadBalancerSettings struct {
	// Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
	HttpCookie *ConsistentHashLoadBalancerSettingsHttpCookie `pulumi:"httpCookie"`
	// The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
	HttpHeaderName *string `pulumi:"httpHeaderName"`
	// The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
	MinimumRingSize *string `pulumi:"minimumRingSize"`
}

// ConsistentHashLoadBalancerSettingsInput is an input type that accepts ConsistentHashLoadBalancerSettingsArgs and ConsistentHashLoadBalancerSettingsOutput values.
// You can construct a concrete instance of `ConsistentHashLoadBalancerSettingsInput` via:
//
//          ConsistentHashLoadBalancerSettingsArgs{...}
type ConsistentHashLoadBalancerSettingsInput interface {
	pulumi.Input

	ToConsistentHashLoadBalancerSettingsOutput() ConsistentHashLoadBalancerSettingsOutput
	ToConsistentHashLoadBalancerSettingsOutputWithContext(context.Context) ConsistentHashLoadBalancerSettingsOutput
}

// This message defines settings for a consistent hash style load balancer.
type ConsistentHashLoadBalancerSettingsArgs struct {
	// Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
	HttpCookie ConsistentHashLoadBalancerSettingsHttpCookiePtrInput `pulumi:"httpCookie"`
	// The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
	HttpHeaderName pulumi.StringPtrInput `pulumi:"httpHeaderName"`
	// The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
	MinimumRingSize pulumi.StringPtrInput `pulumi:"minimumRingSize"`
}

func (ConsistentHashLoadBalancerSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsistentHashLoadBalancerSettings)(nil)).Elem()
}

func (i ConsistentHashLoadBalancerSettingsArgs) ToConsistentHashLoadBalancerSettingsOutput() ConsistentHashLoadBalancerSettingsOutput {
	return i.ToConsistentHashLoadBalancerSettingsOutputWithContext(context.Background())
}

func (i ConsistentHashLoadBalancerSettingsArgs) ToConsistentHashLoadBalancerSettingsOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistentHashLoadBalancerSettingsOutput)
}

func (i ConsistentHashLoadBalancerSettingsArgs) ToConsistentHashLoadBalancerSettingsPtrOutput() ConsistentHashLoadBalancerSettingsPtrOutput {
	return i.ToConsistentHashLoadBalancerSettingsPtrOutputWithContext(context.Background())
}

func (i ConsistentHashLoadBalancerSettingsArgs) ToConsistentHashLoadBalancerSettingsPtrOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistentHashLoadBalancerSettingsOutput).ToConsistentHashLoadBalancerSettingsPtrOutputWithContext(ctx)
}

// ConsistentHashLoadBalancerSettingsPtrInput is an input type that accepts ConsistentHashLoadBalancerSettingsArgs, ConsistentHashLoadBalancerSettingsPtr and ConsistentHashLoadBalancerSettingsPtrOutput values.
// You can construct a concrete instance of `ConsistentHashLoadBalancerSettingsPtrInput` via:
//
//          ConsistentHashLoadBalancerSettingsArgs{...}
//
//  or:
//
//          nil
type ConsistentHashLoadBalancerSettingsPtrInput interface {
	pulumi.Input

	ToConsistentHashLoadBalancerSettingsPtrOutput() ConsistentHashLoadBalancerSettingsPtrOutput
	ToConsistentHashLoadBalancerSettingsPtrOutputWithContext(context.Context) ConsistentHashLoadBalancerSettingsPtrOutput
}

type consistentHashLoadBalancerSettingsPtrType ConsistentHashLoadBalancerSettingsArgs

func ConsistentHashLoadBalancerSettingsPtr(v *ConsistentHashLoadBalancerSettingsArgs) ConsistentHashLoadBalancerSettingsPtrInput {
	return (*consistentHashLoadBalancerSettingsPtrType)(v)
}

func (*consistentHashLoadBalancerSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsistentHashLoadBalancerSettings)(nil)).Elem()
}

func (i *consistentHashLoadBalancerSettingsPtrType) ToConsistentHashLoadBalancerSettingsPtrOutput() ConsistentHashLoadBalancerSettingsPtrOutput {
	return i.ToConsistentHashLoadBalancerSettingsPtrOutputWithContext(context.Background())
}

func (i *consistentHashLoadBalancerSettingsPtrType) ToConsistentHashLoadBalancerSettingsPtrOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistentHashLoadBalancerSettingsPtrOutput)
}

// This message defines settings for a consistent hash style load balancer.
type ConsistentHashLoadBalancerSettingsOutput struct{ *pulumi.OutputState }

func (ConsistentHashLoadBalancerSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsistentHashLoadBalancerSettings)(nil)).Elem()
}

func (o ConsistentHashLoadBalancerSettingsOutput) ToConsistentHashLoadBalancerSettingsOutput() ConsistentHashLoadBalancerSettingsOutput {
	return o
}

func (o ConsistentHashLoadBalancerSettingsOutput) ToConsistentHashLoadBalancerSettingsOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsOutput {
	return o
}

func (o ConsistentHashLoadBalancerSettingsOutput) ToConsistentHashLoadBalancerSettingsPtrOutput() ConsistentHashLoadBalancerSettingsPtrOutput {
	return o.ToConsistentHashLoadBalancerSettingsPtrOutputWithContext(context.Background())
}

func (o ConsistentHashLoadBalancerSettingsOutput) ToConsistentHashLoadBalancerSettingsPtrOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsPtrOutput {
	return o.ApplyT(func(v ConsistentHashLoadBalancerSettings) *ConsistentHashLoadBalancerSettings {
		return &v
	}).(ConsistentHashLoadBalancerSettingsPtrOutput)
}

// Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
func (o ConsistentHashLoadBalancerSettingsOutput) HttpCookie() ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput {
	return o.ApplyT(func(v ConsistentHashLoadBalancerSettings) *ConsistentHashLoadBalancerSettingsHttpCookie {
		return v.HttpCookie
	}).(ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput)
}

// The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
func (o ConsistentHashLoadBalancerSettingsOutput) HttpHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsistentHashLoadBalancerSettings) *string { return v.HttpHeaderName }).(pulumi.StringPtrOutput)
}

// The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
func (o ConsistentHashLoadBalancerSettingsOutput) MinimumRingSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsistentHashLoadBalancerSettings) *string { return v.MinimumRingSize }).(pulumi.StringPtrOutput)
}

type ConsistentHashLoadBalancerSettingsPtrOutput struct{ *pulumi.OutputState }

func (ConsistentHashLoadBalancerSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsistentHashLoadBalancerSettings)(nil)).Elem()
}

func (o ConsistentHashLoadBalancerSettingsPtrOutput) ToConsistentHashLoadBalancerSettingsPtrOutput() ConsistentHashLoadBalancerSettingsPtrOutput {
	return o
}

func (o ConsistentHashLoadBalancerSettingsPtrOutput) ToConsistentHashLoadBalancerSettingsPtrOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsPtrOutput {
	return o
}

func (o ConsistentHashLoadBalancerSettingsPtrOutput) Elem() ConsistentHashLoadBalancerSettingsOutput {
	return o.ApplyT(func(v *ConsistentHashLoadBalancerSettings) ConsistentHashLoadBalancerSettings { return *v }).(ConsistentHashLoadBalancerSettingsOutput)
}

// Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
func (o ConsistentHashLoadBalancerSettingsPtrOutput) HttpCookie() ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput {
	return o.ApplyT(func(v *ConsistentHashLoadBalancerSettings) *ConsistentHashLoadBalancerSettingsHttpCookie {
		if v == nil {
			return nil
		}
		return v.HttpCookie
	}).(ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput)
}

// The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
func (o ConsistentHashLoadBalancerSettingsPtrOutput) HttpHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsistentHashLoadBalancerSettings) *string {
		if v == nil {
			return nil
		}
		return v.HttpHeaderName
	}).(pulumi.StringPtrOutput)
}

// The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
func (o ConsistentHashLoadBalancerSettingsPtrOutput) MinimumRingSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsistentHashLoadBalancerSettings) *string {
		if v == nil {
			return nil
		}
		return v.MinimumRingSize
	}).(pulumi.StringPtrOutput)
}

// The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash.
type ConsistentHashLoadBalancerSettingsHttpCookie struct {
	// Name of the cookie.
	Name *string `pulumi:"name"`
	// Path to set for the cookie.
	Path *string `pulumi:"path"`
	// Lifetime of the cookie.
	Ttl *Duration `pulumi:"ttl"`
}

// ConsistentHashLoadBalancerSettingsHttpCookieInput is an input type that accepts ConsistentHashLoadBalancerSettingsHttpCookieArgs and ConsistentHashLoadBalancerSettingsHttpCookieOutput values.
// You can construct a concrete instance of `ConsistentHashLoadBalancerSettingsHttpCookieInput` via:
//
//          ConsistentHashLoadBalancerSettingsHttpCookieArgs{...}
type ConsistentHashLoadBalancerSettingsHttpCookieInput interface {
	pulumi.Input

	ToConsistentHashLoadBalancerSettingsHttpCookieOutput() ConsistentHashLoadBalancerSettingsHttpCookieOutput
	ToConsistentHashLoadBalancerSettingsHttpCookieOutputWithContext(context.Context) ConsistentHashLoadBalancerSettingsHttpCookieOutput
}

// The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash.
type ConsistentHashLoadBalancerSettingsHttpCookieArgs struct {
	// Name of the cookie.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path to set for the cookie.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Lifetime of the cookie.
	Ttl DurationPtrInput `pulumi:"ttl"`
}

func (ConsistentHashLoadBalancerSettingsHttpCookieArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsistentHashLoadBalancerSettingsHttpCookie)(nil)).Elem()
}

func (i ConsistentHashLoadBalancerSettingsHttpCookieArgs) ToConsistentHashLoadBalancerSettingsHttpCookieOutput() ConsistentHashLoadBalancerSettingsHttpCookieOutput {
	return i.ToConsistentHashLoadBalancerSettingsHttpCookieOutputWithContext(context.Background())
}

func (i ConsistentHashLoadBalancerSettingsHttpCookieArgs) ToConsistentHashLoadBalancerSettingsHttpCookieOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsHttpCookieOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistentHashLoadBalancerSettingsHttpCookieOutput)
}

func (i ConsistentHashLoadBalancerSettingsHttpCookieArgs) ToConsistentHashLoadBalancerSettingsHttpCookiePtrOutput() ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput {
	return i.ToConsistentHashLoadBalancerSettingsHttpCookiePtrOutputWithContext(context.Background())
}

func (i ConsistentHashLoadBalancerSettingsHttpCookieArgs) ToConsistentHashLoadBalancerSettingsHttpCookiePtrOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistentHashLoadBalancerSettingsHttpCookieOutput).ToConsistentHashLoadBalancerSettingsHttpCookiePtrOutputWithContext(ctx)
}

// ConsistentHashLoadBalancerSettingsHttpCookiePtrInput is an input type that accepts ConsistentHashLoadBalancerSettingsHttpCookieArgs, ConsistentHashLoadBalancerSettingsHttpCookiePtr and ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput values.
// You can construct a concrete instance of `ConsistentHashLoadBalancerSettingsHttpCookiePtrInput` via:
//
//          ConsistentHashLoadBalancerSettingsHttpCookieArgs{...}
//
//  or:
//
//          nil
type ConsistentHashLoadBalancerSettingsHttpCookiePtrInput interface {
	pulumi.Input

	ToConsistentHashLoadBalancerSettingsHttpCookiePtrOutput() ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput
	ToConsistentHashLoadBalancerSettingsHttpCookiePtrOutputWithContext(context.Context) ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput
}

type consistentHashLoadBalancerSettingsHttpCookiePtrType ConsistentHashLoadBalancerSettingsHttpCookieArgs

func ConsistentHashLoadBalancerSettingsHttpCookiePtr(v *ConsistentHashLoadBalancerSettingsHttpCookieArgs) ConsistentHashLoadBalancerSettingsHttpCookiePtrInput {
	return (*consistentHashLoadBalancerSettingsHttpCookiePtrType)(v)
}

func (*consistentHashLoadBalancerSettingsHttpCookiePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsistentHashLoadBalancerSettingsHttpCookie)(nil)).Elem()
}

func (i *consistentHashLoadBalancerSettingsHttpCookiePtrType) ToConsistentHashLoadBalancerSettingsHttpCookiePtrOutput() ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput {
	return i.ToConsistentHashLoadBalancerSettingsHttpCookiePtrOutputWithContext(context.Background())
}

func (i *consistentHashLoadBalancerSettingsHttpCookiePtrType) ToConsistentHashLoadBalancerSettingsHttpCookiePtrOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput)
}

// The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash.
type ConsistentHashLoadBalancerSettingsHttpCookieOutput struct{ *pulumi.OutputState }

func (ConsistentHashLoadBalancerSettingsHttpCookieOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsistentHashLoadBalancerSettingsHttpCookie)(nil)).Elem()
}

func (o ConsistentHashLoadBalancerSettingsHttpCookieOutput) ToConsistentHashLoadBalancerSettingsHttpCookieOutput() ConsistentHashLoadBalancerSettingsHttpCookieOutput {
	return o
}

func (o ConsistentHashLoadBalancerSettingsHttpCookieOutput) ToConsistentHashLoadBalancerSettingsHttpCookieOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsHttpCookieOutput {
	return o
}

func (o ConsistentHashLoadBalancerSettingsHttpCookieOutput) ToConsistentHashLoadBalancerSettingsHttpCookiePtrOutput() ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput {
	return o.ToConsistentHashLoadBalancerSettingsHttpCookiePtrOutputWithContext(context.Background())
}

func (o ConsistentHashLoadBalancerSettingsHttpCookieOutput) ToConsistentHashLoadBalancerSettingsHttpCookiePtrOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput {
	return o.ApplyT(func(v ConsistentHashLoadBalancerSettingsHttpCookie) *ConsistentHashLoadBalancerSettingsHttpCookie {
		return &v
	}).(ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput)
}

// Name of the cookie.
func (o ConsistentHashLoadBalancerSettingsHttpCookieOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsistentHashLoadBalancerSettingsHttpCookie) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path to set for the cookie.
func (o ConsistentHashLoadBalancerSettingsHttpCookieOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsistentHashLoadBalancerSettingsHttpCookie) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Lifetime of the cookie.
func (o ConsistentHashLoadBalancerSettingsHttpCookieOutput) Ttl() DurationPtrOutput {
	return o.ApplyT(func(v ConsistentHashLoadBalancerSettingsHttpCookie) *Duration { return v.Ttl }).(DurationPtrOutput)
}

type ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput struct{ *pulumi.OutputState }

func (ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsistentHashLoadBalancerSettingsHttpCookie)(nil)).Elem()
}

func (o ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput) ToConsistentHashLoadBalancerSettingsHttpCookiePtrOutput() ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput {
	return o
}

func (o ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput) ToConsistentHashLoadBalancerSettingsHttpCookiePtrOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput {
	return o
}

func (o ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput) Elem() ConsistentHashLoadBalancerSettingsHttpCookieOutput {
	return o.ApplyT(func(v *ConsistentHashLoadBalancerSettingsHttpCookie) ConsistentHashLoadBalancerSettingsHttpCookie {
		return *v
	}).(ConsistentHashLoadBalancerSettingsHttpCookieOutput)
}

// Name of the cookie.
func (o ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsistentHashLoadBalancerSettingsHttpCookie) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Path to set for the cookie.
func (o ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsistentHashLoadBalancerSettingsHttpCookie) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Lifetime of the cookie.
func (o ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput) Ttl() DurationPtrOutput {
	return o.ApplyT(func(v *ConsistentHashLoadBalancerSettingsHttpCookie) *Duration {
		if v == nil {
			return nil
		}
		return v.Ttl
	}).(DurationPtrOutput)
}

// The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash.
type ConsistentHashLoadBalancerSettingsHttpCookieResponse struct {
	// Name of the cookie.
	Name string `pulumi:"name"`
	// Path to set for the cookie.
	Path string `pulumi:"path"`
	// Lifetime of the cookie.
	Ttl DurationResponse `pulumi:"ttl"`
}

// ConsistentHashLoadBalancerSettingsHttpCookieResponseInput is an input type that accepts ConsistentHashLoadBalancerSettingsHttpCookieResponseArgs and ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput values.
// You can construct a concrete instance of `ConsistentHashLoadBalancerSettingsHttpCookieResponseInput` via:
//
//          ConsistentHashLoadBalancerSettingsHttpCookieResponseArgs{...}
type ConsistentHashLoadBalancerSettingsHttpCookieResponseInput interface {
	pulumi.Input

	ToConsistentHashLoadBalancerSettingsHttpCookieResponseOutput() ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput
	ToConsistentHashLoadBalancerSettingsHttpCookieResponseOutputWithContext(context.Context) ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput
}

// The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash.
type ConsistentHashLoadBalancerSettingsHttpCookieResponseArgs struct {
	// Name of the cookie.
	Name pulumi.StringInput `pulumi:"name"`
	// Path to set for the cookie.
	Path pulumi.StringInput `pulumi:"path"`
	// Lifetime of the cookie.
	Ttl DurationResponseInput `pulumi:"ttl"`
}

func (ConsistentHashLoadBalancerSettingsHttpCookieResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsistentHashLoadBalancerSettingsHttpCookieResponse)(nil)).Elem()
}

func (i ConsistentHashLoadBalancerSettingsHttpCookieResponseArgs) ToConsistentHashLoadBalancerSettingsHttpCookieResponseOutput() ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput {
	return i.ToConsistentHashLoadBalancerSettingsHttpCookieResponseOutputWithContext(context.Background())
}

func (i ConsistentHashLoadBalancerSettingsHttpCookieResponseArgs) ToConsistentHashLoadBalancerSettingsHttpCookieResponseOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput)
}

func (i ConsistentHashLoadBalancerSettingsHttpCookieResponseArgs) ToConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput() ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput {
	return i.ToConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutputWithContext(context.Background())
}

func (i ConsistentHashLoadBalancerSettingsHttpCookieResponseArgs) ToConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput).ToConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutputWithContext(ctx)
}

// ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrInput is an input type that accepts ConsistentHashLoadBalancerSettingsHttpCookieResponseArgs, ConsistentHashLoadBalancerSettingsHttpCookieResponsePtr and ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput values.
// You can construct a concrete instance of `ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrInput` via:
//
//          ConsistentHashLoadBalancerSettingsHttpCookieResponseArgs{...}
//
//  or:
//
//          nil
type ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrInput interface {
	pulumi.Input

	ToConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput() ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput
	ToConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutputWithContext(context.Context) ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput
}

type consistentHashLoadBalancerSettingsHttpCookieResponsePtrType ConsistentHashLoadBalancerSettingsHttpCookieResponseArgs

func ConsistentHashLoadBalancerSettingsHttpCookieResponsePtr(v *ConsistentHashLoadBalancerSettingsHttpCookieResponseArgs) ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrInput {
	return (*consistentHashLoadBalancerSettingsHttpCookieResponsePtrType)(v)
}

func (*consistentHashLoadBalancerSettingsHttpCookieResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsistentHashLoadBalancerSettingsHttpCookieResponse)(nil)).Elem()
}

func (i *consistentHashLoadBalancerSettingsHttpCookieResponsePtrType) ToConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput() ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput {
	return i.ToConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutputWithContext(context.Background())
}

func (i *consistentHashLoadBalancerSettingsHttpCookieResponsePtrType) ToConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput)
}

// The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash.
type ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput struct{ *pulumi.OutputState }

func (ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsistentHashLoadBalancerSettingsHttpCookieResponse)(nil)).Elem()
}

func (o ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput) ToConsistentHashLoadBalancerSettingsHttpCookieResponseOutput() ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput {
	return o
}

func (o ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput) ToConsistentHashLoadBalancerSettingsHttpCookieResponseOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput {
	return o
}

func (o ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput) ToConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput() ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput {
	return o.ToConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutputWithContext(context.Background())
}

func (o ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput) ToConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput {
	return o.ApplyT(func(v ConsistentHashLoadBalancerSettingsHttpCookieResponse) *ConsistentHashLoadBalancerSettingsHttpCookieResponse {
		return &v
	}).(ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput)
}

// Name of the cookie.
func (o ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConsistentHashLoadBalancerSettingsHttpCookieResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Path to set for the cookie.
func (o ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ConsistentHashLoadBalancerSettingsHttpCookieResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Lifetime of the cookie.
func (o ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput) Ttl() DurationResponseOutput {
	return o.ApplyT(func(v ConsistentHashLoadBalancerSettingsHttpCookieResponse) DurationResponse { return v.Ttl }).(DurationResponseOutput)
}

type ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput struct{ *pulumi.OutputState }

func (ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsistentHashLoadBalancerSettingsHttpCookieResponse)(nil)).Elem()
}

func (o ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput) ToConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput() ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput {
	return o
}

func (o ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput) ToConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput {
	return o
}

func (o ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput) Elem() ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput {
	return o.ApplyT(func(v *ConsistentHashLoadBalancerSettingsHttpCookieResponse) ConsistentHashLoadBalancerSettingsHttpCookieResponse {
		return *v
	}).(ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput)
}

// Name of the cookie.
func (o ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsistentHashLoadBalancerSettingsHttpCookieResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Path to set for the cookie.
func (o ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsistentHashLoadBalancerSettingsHttpCookieResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// Lifetime of the cookie.
func (o ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput) Ttl() DurationResponsePtrOutput {
	return o.ApplyT(func(v *ConsistentHashLoadBalancerSettingsHttpCookieResponse) *DurationResponse {
		if v == nil {
			return nil
		}
		return &v.Ttl
	}).(DurationResponsePtrOutput)
}

// This message defines settings for a consistent hash style load balancer.
type ConsistentHashLoadBalancerSettingsResponse struct {
	// Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
	HttpCookie ConsistentHashLoadBalancerSettingsHttpCookieResponse `pulumi:"httpCookie"`
	// The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
	HttpHeaderName string `pulumi:"httpHeaderName"`
	// The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
	MinimumRingSize string `pulumi:"minimumRingSize"`
}

// ConsistentHashLoadBalancerSettingsResponseInput is an input type that accepts ConsistentHashLoadBalancerSettingsResponseArgs and ConsistentHashLoadBalancerSettingsResponseOutput values.
// You can construct a concrete instance of `ConsistentHashLoadBalancerSettingsResponseInput` via:
//
//          ConsistentHashLoadBalancerSettingsResponseArgs{...}
type ConsistentHashLoadBalancerSettingsResponseInput interface {
	pulumi.Input

	ToConsistentHashLoadBalancerSettingsResponseOutput() ConsistentHashLoadBalancerSettingsResponseOutput
	ToConsistentHashLoadBalancerSettingsResponseOutputWithContext(context.Context) ConsistentHashLoadBalancerSettingsResponseOutput
}

// This message defines settings for a consistent hash style load balancer.
type ConsistentHashLoadBalancerSettingsResponseArgs struct {
	// Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
	HttpCookie ConsistentHashLoadBalancerSettingsHttpCookieResponseInput `pulumi:"httpCookie"`
	// The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
	HttpHeaderName pulumi.StringInput `pulumi:"httpHeaderName"`
	// The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
	MinimumRingSize pulumi.StringInput `pulumi:"minimumRingSize"`
}

func (ConsistentHashLoadBalancerSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsistentHashLoadBalancerSettingsResponse)(nil)).Elem()
}

func (i ConsistentHashLoadBalancerSettingsResponseArgs) ToConsistentHashLoadBalancerSettingsResponseOutput() ConsistentHashLoadBalancerSettingsResponseOutput {
	return i.ToConsistentHashLoadBalancerSettingsResponseOutputWithContext(context.Background())
}

func (i ConsistentHashLoadBalancerSettingsResponseArgs) ToConsistentHashLoadBalancerSettingsResponseOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistentHashLoadBalancerSettingsResponseOutput)
}

func (i ConsistentHashLoadBalancerSettingsResponseArgs) ToConsistentHashLoadBalancerSettingsResponsePtrOutput() ConsistentHashLoadBalancerSettingsResponsePtrOutput {
	return i.ToConsistentHashLoadBalancerSettingsResponsePtrOutputWithContext(context.Background())
}

func (i ConsistentHashLoadBalancerSettingsResponseArgs) ToConsistentHashLoadBalancerSettingsResponsePtrOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistentHashLoadBalancerSettingsResponseOutput).ToConsistentHashLoadBalancerSettingsResponsePtrOutputWithContext(ctx)
}

// ConsistentHashLoadBalancerSettingsResponsePtrInput is an input type that accepts ConsistentHashLoadBalancerSettingsResponseArgs, ConsistentHashLoadBalancerSettingsResponsePtr and ConsistentHashLoadBalancerSettingsResponsePtrOutput values.
// You can construct a concrete instance of `ConsistentHashLoadBalancerSettingsResponsePtrInput` via:
//
//          ConsistentHashLoadBalancerSettingsResponseArgs{...}
//
//  or:
//
//          nil
type ConsistentHashLoadBalancerSettingsResponsePtrInput interface {
	pulumi.Input

	ToConsistentHashLoadBalancerSettingsResponsePtrOutput() ConsistentHashLoadBalancerSettingsResponsePtrOutput
	ToConsistentHashLoadBalancerSettingsResponsePtrOutputWithContext(context.Context) ConsistentHashLoadBalancerSettingsResponsePtrOutput
}

type consistentHashLoadBalancerSettingsResponsePtrType ConsistentHashLoadBalancerSettingsResponseArgs

func ConsistentHashLoadBalancerSettingsResponsePtr(v *ConsistentHashLoadBalancerSettingsResponseArgs) ConsistentHashLoadBalancerSettingsResponsePtrInput {
	return (*consistentHashLoadBalancerSettingsResponsePtrType)(v)
}

func (*consistentHashLoadBalancerSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsistentHashLoadBalancerSettingsResponse)(nil)).Elem()
}

func (i *consistentHashLoadBalancerSettingsResponsePtrType) ToConsistentHashLoadBalancerSettingsResponsePtrOutput() ConsistentHashLoadBalancerSettingsResponsePtrOutput {
	return i.ToConsistentHashLoadBalancerSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *consistentHashLoadBalancerSettingsResponsePtrType) ToConsistentHashLoadBalancerSettingsResponsePtrOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsistentHashLoadBalancerSettingsResponsePtrOutput)
}

// This message defines settings for a consistent hash style load balancer.
type ConsistentHashLoadBalancerSettingsResponseOutput struct{ *pulumi.OutputState }

func (ConsistentHashLoadBalancerSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsistentHashLoadBalancerSettingsResponse)(nil)).Elem()
}

func (o ConsistentHashLoadBalancerSettingsResponseOutput) ToConsistentHashLoadBalancerSettingsResponseOutput() ConsistentHashLoadBalancerSettingsResponseOutput {
	return o
}

func (o ConsistentHashLoadBalancerSettingsResponseOutput) ToConsistentHashLoadBalancerSettingsResponseOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsResponseOutput {
	return o
}

func (o ConsistentHashLoadBalancerSettingsResponseOutput) ToConsistentHashLoadBalancerSettingsResponsePtrOutput() ConsistentHashLoadBalancerSettingsResponsePtrOutput {
	return o.ToConsistentHashLoadBalancerSettingsResponsePtrOutputWithContext(context.Background())
}

func (o ConsistentHashLoadBalancerSettingsResponseOutput) ToConsistentHashLoadBalancerSettingsResponsePtrOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsResponsePtrOutput {
	return o.ApplyT(func(v ConsistentHashLoadBalancerSettingsResponse) *ConsistentHashLoadBalancerSettingsResponse {
		return &v
	}).(ConsistentHashLoadBalancerSettingsResponsePtrOutput)
}

// Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
func (o ConsistentHashLoadBalancerSettingsResponseOutput) HttpCookie() ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput {
	return o.ApplyT(func(v ConsistentHashLoadBalancerSettingsResponse) ConsistentHashLoadBalancerSettingsHttpCookieResponse {
		return v.HttpCookie
	}).(ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput)
}

// The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
func (o ConsistentHashLoadBalancerSettingsResponseOutput) HttpHeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v ConsistentHashLoadBalancerSettingsResponse) string { return v.HttpHeaderName }).(pulumi.StringOutput)
}

// The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
func (o ConsistentHashLoadBalancerSettingsResponseOutput) MinimumRingSize() pulumi.StringOutput {
	return o.ApplyT(func(v ConsistentHashLoadBalancerSettingsResponse) string { return v.MinimumRingSize }).(pulumi.StringOutput)
}

type ConsistentHashLoadBalancerSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ConsistentHashLoadBalancerSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsistentHashLoadBalancerSettingsResponse)(nil)).Elem()
}

func (o ConsistentHashLoadBalancerSettingsResponsePtrOutput) ToConsistentHashLoadBalancerSettingsResponsePtrOutput() ConsistentHashLoadBalancerSettingsResponsePtrOutput {
	return o
}

func (o ConsistentHashLoadBalancerSettingsResponsePtrOutput) ToConsistentHashLoadBalancerSettingsResponsePtrOutputWithContext(ctx context.Context) ConsistentHashLoadBalancerSettingsResponsePtrOutput {
	return o
}

func (o ConsistentHashLoadBalancerSettingsResponsePtrOutput) Elem() ConsistentHashLoadBalancerSettingsResponseOutput {
	return o.ApplyT(func(v *ConsistentHashLoadBalancerSettingsResponse) ConsistentHashLoadBalancerSettingsResponse {
		return *v
	}).(ConsistentHashLoadBalancerSettingsResponseOutput)
}

// Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
func (o ConsistentHashLoadBalancerSettingsResponsePtrOutput) HttpCookie() ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput {
	return o.ApplyT(func(v *ConsistentHashLoadBalancerSettingsResponse) *ConsistentHashLoadBalancerSettingsHttpCookieResponse {
		if v == nil {
			return nil
		}
		return &v.HttpCookie
	}).(ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput)
}

// The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
func (o ConsistentHashLoadBalancerSettingsResponsePtrOutput) HttpHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsistentHashLoadBalancerSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HttpHeaderName
	}).(pulumi.StringPtrOutput)
}

// The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
func (o ConsistentHashLoadBalancerSettingsResponsePtrOutput) MinimumRingSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConsistentHashLoadBalancerSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MinimumRingSize
	}).(pulumi.StringPtrOutput)
}

// The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing
type CorsPolicy struct {
	// In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default is false.
	AllowCredentials *bool `pulumi:"allowCredentials"`
	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods []string `pulumi:"allowMethods"`
	// Specifies the regualar expression patterns that match allowed origins. For regular expression grammar please see github.com/google/re2/wiki/Syntax An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
	AllowOriginRegexes []string `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
	AllowOrigins []string `pulumi:"allowOrigins"`
	// If true, specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect.
	Disabled *bool `pulumi:"disabled"`
	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies how long results of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
	MaxAge *int `pulumi:"maxAge"`
}

// CorsPolicyInput is an input type that accepts CorsPolicyArgs and CorsPolicyOutput values.
// You can construct a concrete instance of `CorsPolicyInput` via:
//
//          CorsPolicyArgs{...}
type CorsPolicyInput interface {
	pulumi.Input

	ToCorsPolicyOutput() CorsPolicyOutput
	ToCorsPolicyOutputWithContext(context.Context) CorsPolicyOutput
}

// The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing
type CorsPolicyArgs struct {
	// In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default is false.
	AllowCredentials pulumi.BoolPtrInput `pulumi:"allowCredentials"`
	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders pulumi.StringArrayInput `pulumi:"allowHeaders"`
	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods pulumi.StringArrayInput `pulumi:"allowMethods"`
	// Specifies the regualar expression patterns that match allowed origins. For regular expression grammar please see github.com/google/re2/wiki/Syntax An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
	AllowOriginRegexes pulumi.StringArrayInput `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
	AllowOrigins pulumi.StringArrayInput `pulumi:"allowOrigins"`
	// If true, specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	// Specifies how long results of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
	MaxAge pulumi.IntPtrInput `pulumi:"maxAge"`
}

func (CorsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CorsPolicy)(nil)).Elem()
}

func (i CorsPolicyArgs) ToCorsPolicyOutput() CorsPolicyOutput {
	return i.ToCorsPolicyOutputWithContext(context.Background())
}

func (i CorsPolicyArgs) ToCorsPolicyOutputWithContext(ctx context.Context) CorsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsPolicyOutput)
}

func (i CorsPolicyArgs) ToCorsPolicyPtrOutput() CorsPolicyPtrOutput {
	return i.ToCorsPolicyPtrOutputWithContext(context.Background())
}

func (i CorsPolicyArgs) ToCorsPolicyPtrOutputWithContext(ctx context.Context) CorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsPolicyOutput).ToCorsPolicyPtrOutputWithContext(ctx)
}

// CorsPolicyPtrInput is an input type that accepts CorsPolicyArgs, CorsPolicyPtr and CorsPolicyPtrOutput values.
// You can construct a concrete instance of `CorsPolicyPtrInput` via:
//
//          CorsPolicyArgs{...}
//
//  or:
//
//          nil
type CorsPolicyPtrInput interface {
	pulumi.Input

	ToCorsPolicyPtrOutput() CorsPolicyPtrOutput
	ToCorsPolicyPtrOutputWithContext(context.Context) CorsPolicyPtrOutput
}

type corsPolicyPtrType CorsPolicyArgs

func CorsPolicyPtr(v *CorsPolicyArgs) CorsPolicyPtrInput {
	return (*corsPolicyPtrType)(v)
}

func (*corsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CorsPolicy)(nil)).Elem()
}

func (i *corsPolicyPtrType) ToCorsPolicyPtrOutput() CorsPolicyPtrOutput {
	return i.ToCorsPolicyPtrOutputWithContext(context.Background())
}

func (i *corsPolicyPtrType) ToCorsPolicyPtrOutputWithContext(ctx context.Context) CorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsPolicyPtrOutput)
}

// The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing
type CorsPolicyOutput struct{ *pulumi.OutputState }

func (CorsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorsPolicy)(nil)).Elem()
}

func (o CorsPolicyOutput) ToCorsPolicyOutput() CorsPolicyOutput {
	return o
}

func (o CorsPolicyOutput) ToCorsPolicyOutputWithContext(ctx context.Context) CorsPolicyOutput {
	return o
}

func (o CorsPolicyOutput) ToCorsPolicyPtrOutput() CorsPolicyPtrOutput {
	return o.ToCorsPolicyPtrOutputWithContext(context.Background())
}

func (o CorsPolicyOutput) ToCorsPolicyPtrOutputWithContext(ctx context.Context) CorsPolicyPtrOutput {
	return o.ApplyT(func(v CorsPolicy) *CorsPolicy {
		return &v
	}).(CorsPolicyPtrOutput)
}

// In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default is false.
func (o CorsPolicyOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CorsPolicy) *bool { return v.AllowCredentials }).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers header.
func (o CorsPolicyOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicy) []string { return v.AllowHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the content for the Access-Control-Allow-Methods header.
func (o CorsPolicyOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicy) []string { return v.AllowMethods }).(pulumi.StringArrayOutput)
}

// Specifies the regualar expression patterns that match allowed origins. For regular expression grammar please see github.com/google/re2/wiki/Syntax An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
func (o CorsPolicyOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicy) []string { return v.AllowOriginRegexes }).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
func (o CorsPolicyOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicy) []string { return v.AllowOrigins }).(pulumi.StringArrayOutput)
}

// If true, specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect.
func (o CorsPolicyOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CorsPolicy) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Expose-Headers header.
func (o CorsPolicyOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicy) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

// Specifies how long results of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
func (o CorsPolicyOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CorsPolicy) *int { return v.MaxAge }).(pulumi.IntPtrOutput)
}

type CorsPolicyPtrOutput struct{ *pulumi.OutputState }

func (CorsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CorsPolicy)(nil)).Elem()
}

func (o CorsPolicyPtrOutput) ToCorsPolicyPtrOutput() CorsPolicyPtrOutput {
	return o
}

func (o CorsPolicyPtrOutput) ToCorsPolicyPtrOutputWithContext(ctx context.Context) CorsPolicyPtrOutput {
	return o
}

func (o CorsPolicyPtrOutput) Elem() CorsPolicyOutput {
	return o.ApplyT(func(v *CorsPolicy) CorsPolicy { return *v }).(CorsPolicyOutput)
}

// In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default is false.
func (o CorsPolicyPtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers header.
func (o CorsPolicyPtrOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the Access-Control-Allow-Methods header.
func (o CorsPolicyPtrOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowMethods
	}).(pulumi.StringArrayOutput)
}

// Specifies the regualar expression patterns that match allowed origins. For regular expression grammar please see github.com/google/re2/wiki/Syntax An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
func (o CorsPolicyPtrOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOriginRegexes
	}).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
func (o CorsPolicyPtrOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOrigins
	}).(pulumi.StringArrayOutput)
}

// If true, specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect.
func (o CorsPolicyPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Expose-Headers header.
func (o CorsPolicyPtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies how long results of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
func (o CorsPolicyPtrOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CorsPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxAge
	}).(pulumi.IntPtrOutput)
}

// The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing
type CorsPolicyResponse struct {
	// In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default is false.
	AllowCredentials bool `pulumi:"allowCredentials"`
	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods []string `pulumi:"allowMethods"`
	// Specifies the regualar expression patterns that match allowed origins. For regular expression grammar please see github.com/google/re2/wiki/Syntax An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
	AllowOriginRegexes []string `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
	AllowOrigins []string `pulumi:"allowOrigins"`
	// If true, specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect.
	Disabled bool `pulumi:"disabled"`
	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies how long results of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
	MaxAge int `pulumi:"maxAge"`
}

// CorsPolicyResponseInput is an input type that accepts CorsPolicyResponseArgs and CorsPolicyResponseOutput values.
// You can construct a concrete instance of `CorsPolicyResponseInput` via:
//
//          CorsPolicyResponseArgs{...}
type CorsPolicyResponseInput interface {
	pulumi.Input

	ToCorsPolicyResponseOutput() CorsPolicyResponseOutput
	ToCorsPolicyResponseOutputWithContext(context.Context) CorsPolicyResponseOutput
}

// The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing
type CorsPolicyResponseArgs struct {
	// In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default is false.
	AllowCredentials pulumi.BoolInput `pulumi:"allowCredentials"`
	// Specifies the content for the Access-Control-Allow-Headers header.
	AllowHeaders pulumi.StringArrayInput `pulumi:"allowHeaders"`
	// Specifies the content for the Access-Control-Allow-Methods header.
	AllowMethods pulumi.StringArrayInput `pulumi:"allowMethods"`
	// Specifies the regualar expression patterns that match allowed origins. For regular expression grammar please see github.com/google/re2/wiki/Syntax An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
	AllowOriginRegexes pulumi.StringArrayInput `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
	AllowOrigins pulumi.StringArrayInput `pulumi:"allowOrigins"`
	// If true, specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
	// Specifies the content for the Access-Control-Expose-Headers header.
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	// Specifies how long results of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
	MaxAge pulumi.IntInput `pulumi:"maxAge"`
}

func (CorsPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CorsPolicyResponse)(nil)).Elem()
}

func (i CorsPolicyResponseArgs) ToCorsPolicyResponseOutput() CorsPolicyResponseOutput {
	return i.ToCorsPolicyResponseOutputWithContext(context.Background())
}

func (i CorsPolicyResponseArgs) ToCorsPolicyResponseOutputWithContext(ctx context.Context) CorsPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsPolicyResponseOutput)
}

func (i CorsPolicyResponseArgs) ToCorsPolicyResponsePtrOutput() CorsPolicyResponsePtrOutput {
	return i.ToCorsPolicyResponsePtrOutputWithContext(context.Background())
}

func (i CorsPolicyResponseArgs) ToCorsPolicyResponsePtrOutputWithContext(ctx context.Context) CorsPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsPolicyResponseOutput).ToCorsPolicyResponsePtrOutputWithContext(ctx)
}

// CorsPolicyResponsePtrInput is an input type that accepts CorsPolicyResponseArgs, CorsPolicyResponsePtr and CorsPolicyResponsePtrOutput values.
// You can construct a concrete instance of `CorsPolicyResponsePtrInput` via:
//
//          CorsPolicyResponseArgs{...}
//
//  or:
//
//          nil
type CorsPolicyResponsePtrInput interface {
	pulumi.Input

	ToCorsPolicyResponsePtrOutput() CorsPolicyResponsePtrOutput
	ToCorsPolicyResponsePtrOutputWithContext(context.Context) CorsPolicyResponsePtrOutput
}

type corsPolicyResponsePtrType CorsPolicyResponseArgs

func CorsPolicyResponsePtr(v *CorsPolicyResponseArgs) CorsPolicyResponsePtrInput {
	return (*corsPolicyResponsePtrType)(v)
}

func (*corsPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CorsPolicyResponse)(nil)).Elem()
}

func (i *corsPolicyResponsePtrType) ToCorsPolicyResponsePtrOutput() CorsPolicyResponsePtrOutput {
	return i.ToCorsPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *corsPolicyResponsePtrType) ToCorsPolicyResponsePtrOutputWithContext(ctx context.Context) CorsPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsPolicyResponsePtrOutput)
}

// The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing
type CorsPolicyResponseOutput struct{ *pulumi.OutputState }

func (CorsPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorsPolicyResponse)(nil)).Elem()
}

func (o CorsPolicyResponseOutput) ToCorsPolicyResponseOutput() CorsPolicyResponseOutput {
	return o
}

func (o CorsPolicyResponseOutput) ToCorsPolicyResponseOutputWithContext(ctx context.Context) CorsPolicyResponseOutput {
	return o
}

func (o CorsPolicyResponseOutput) ToCorsPolicyResponsePtrOutput() CorsPolicyResponsePtrOutput {
	return o.ToCorsPolicyResponsePtrOutputWithContext(context.Background())
}

func (o CorsPolicyResponseOutput) ToCorsPolicyResponsePtrOutputWithContext(ctx context.Context) CorsPolicyResponsePtrOutput {
	return o.ApplyT(func(v CorsPolicyResponse) *CorsPolicyResponse {
		return &v
	}).(CorsPolicyResponsePtrOutput)
}

// In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default is false.
func (o CorsPolicyResponseOutput) AllowCredentials() pulumi.BoolOutput {
	return o.ApplyT(func(v CorsPolicyResponse) bool { return v.AllowCredentials }).(pulumi.BoolOutput)
}

// Specifies the content for the Access-Control-Allow-Headers header.
func (o CorsPolicyResponseOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicyResponse) []string { return v.AllowHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the content for the Access-Control-Allow-Methods header.
func (o CorsPolicyResponseOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicyResponse) []string { return v.AllowMethods }).(pulumi.StringArrayOutput)
}

// Specifies the regualar expression patterns that match allowed origins. For regular expression grammar please see github.com/google/re2/wiki/Syntax An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
func (o CorsPolicyResponseOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicyResponse) []string { return v.AllowOriginRegexes }).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
func (o CorsPolicyResponseOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicyResponse) []string { return v.AllowOrigins }).(pulumi.StringArrayOutput)
}

// If true, specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect.
func (o CorsPolicyResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v CorsPolicyResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// Specifies the content for the Access-Control-Expose-Headers header.
func (o CorsPolicyResponseOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicyResponse) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

// Specifies how long results of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
func (o CorsPolicyResponseOutput) MaxAge() pulumi.IntOutput {
	return o.ApplyT(func(v CorsPolicyResponse) int { return v.MaxAge }).(pulumi.IntOutput)
}

type CorsPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (CorsPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CorsPolicyResponse)(nil)).Elem()
}

func (o CorsPolicyResponsePtrOutput) ToCorsPolicyResponsePtrOutput() CorsPolicyResponsePtrOutput {
	return o
}

func (o CorsPolicyResponsePtrOutput) ToCorsPolicyResponsePtrOutputWithContext(ctx context.Context) CorsPolicyResponsePtrOutput {
	return o
}

func (o CorsPolicyResponsePtrOutput) Elem() CorsPolicyResponseOutput {
	return o.ApplyT(func(v *CorsPolicyResponse) CorsPolicyResponse { return *v }).(CorsPolicyResponseOutput)
}

// In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default is false.
func (o CorsPolicyResponsePtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CorsPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Allow-Headers header.
func (o CorsPolicyResponsePtrOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the Access-Control-Allow-Methods header.
func (o CorsPolicyResponsePtrOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowMethods
	}).(pulumi.StringArrayOutput)
}

// Specifies the regualar expression patterns that match allowed origins. For regular expression grammar please see github.com/google/re2/wiki/Syntax An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
func (o CorsPolicyResponsePtrOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowOriginRegexes
	}).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
func (o CorsPolicyResponsePtrOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowOrigins
	}).(pulumi.StringArrayOutput)
}

// If true, specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect.
func (o CorsPolicyResponsePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CorsPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the Access-Control-Expose-Headers header.
func (o CorsPolicyResponsePtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies how long results of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
func (o CorsPolicyResponsePtrOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CorsPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxAge
	}).(pulumi.IntPtrOutput)
}

type CustomerEncryptionKey struct {
	// The name of the encryption key that is stored in Google Cloud KMS.
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used.
	KmsKeyServiceAccount *string `pulumi:"kmsKeyServiceAccount"`
	// Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey *string `pulumi:"rawKey"`
}

// CustomerEncryptionKeyInput is an input type that accepts CustomerEncryptionKeyArgs and CustomerEncryptionKeyOutput values.
// You can construct a concrete instance of `CustomerEncryptionKeyInput` via:
//
//          CustomerEncryptionKeyArgs{...}
type CustomerEncryptionKeyInput interface {
	pulumi.Input

	ToCustomerEncryptionKeyOutput() CustomerEncryptionKeyOutput
	ToCustomerEncryptionKeyOutputWithContext(context.Context) CustomerEncryptionKeyOutput
}

type CustomerEncryptionKeyArgs struct {
	// The name of the encryption key that is stored in Google Cloud KMS.
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
	// The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used.
	KmsKeyServiceAccount pulumi.StringPtrInput `pulumi:"kmsKeyServiceAccount"`
	// Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey pulumi.StringPtrInput `pulumi:"rawKey"`
}

func (CustomerEncryptionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerEncryptionKey)(nil)).Elem()
}

func (i CustomerEncryptionKeyArgs) ToCustomerEncryptionKeyOutput() CustomerEncryptionKeyOutput {
	return i.ToCustomerEncryptionKeyOutputWithContext(context.Background())
}

func (i CustomerEncryptionKeyArgs) ToCustomerEncryptionKeyOutputWithContext(ctx context.Context) CustomerEncryptionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerEncryptionKeyOutput)
}

func (i CustomerEncryptionKeyArgs) ToCustomerEncryptionKeyPtrOutput() CustomerEncryptionKeyPtrOutput {
	return i.ToCustomerEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i CustomerEncryptionKeyArgs) ToCustomerEncryptionKeyPtrOutputWithContext(ctx context.Context) CustomerEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerEncryptionKeyOutput).ToCustomerEncryptionKeyPtrOutputWithContext(ctx)
}

// CustomerEncryptionKeyPtrInput is an input type that accepts CustomerEncryptionKeyArgs, CustomerEncryptionKeyPtr and CustomerEncryptionKeyPtrOutput values.
// You can construct a concrete instance of `CustomerEncryptionKeyPtrInput` via:
//
//          CustomerEncryptionKeyArgs{...}
//
//  or:
//
//          nil
type CustomerEncryptionKeyPtrInput interface {
	pulumi.Input

	ToCustomerEncryptionKeyPtrOutput() CustomerEncryptionKeyPtrOutput
	ToCustomerEncryptionKeyPtrOutputWithContext(context.Context) CustomerEncryptionKeyPtrOutput
}

type customerEncryptionKeyPtrType CustomerEncryptionKeyArgs

func CustomerEncryptionKeyPtr(v *CustomerEncryptionKeyArgs) CustomerEncryptionKeyPtrInput {
	return (*customerEncryptionKeyPtrType)(v)
}

func (*customerEncryptionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerEncryptionKey)(nil)).Elem()
}

func (i *customerEncryptionKeyPtrType) ToCustomerEncryptionKeyPtrOutput() CustomerEncryptionKeyPtrOutput {
	return i.ToCustomerEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i *customerEncryptionKeyPtrType) ToCustomerEncryptionKeyPtrOutputWithContext(ctx context.Context) CustomerEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerEncryptionKeyPtrOutput)
}

type CustomerEncryptionKeyOutput struct{ *pulumi.OutputState }

func (CustomerEncryptionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerEncryptionKey)(nil)).Elem()
}

func (o CustomerEncryptionKeyOutput) ToCustomerEncryptionKeyOutput() CustomerEncryptionKeyOutput {
	return o
}

func (o CustomerEncryptionKeyOutput) ToCustomerEncryptionKeyOutputWithContext(ctx context.Context) CustomerEncryptionKeyOutput {
	return o
}

func (o CustomerEncryptionKeyOutput) ToCustomerEncryptionKeyPtrOutput() CustomerEncryptionKeyPtrOutput {
	return o.ToCustomerEncryptionKeyPtrOutputWithContext(context.Background())
}

func (o CustomerEncryptionKeyOutput) ToCustomerEncryptionKeyPtrOutputWithContext(ctx context.Context) CustomerEncryptionKeyPtrOutput {
	return o.ApplyT(func(v CustomerEncryptionKey) *CustomerEncryptionKey {
		return &v
	}).(CustomerEncryptionKeyPtrOutput)
}

// The name of the encryption key that is stored in Google Cloud KMS.
func (o CustomerEncryptionKeyOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerEncryptionKey) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

// The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used.
func (o CustomerEncryptionKeyOutput) KmsKeyServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerEncryptionKey) *string { return v.KmsKeyServiceAccount }).(pulumi.StringPtrOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource.
func (o CustomerEncryptionKeyOutput) RawKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerEncryptionKey) *string { return v.RawKey }).(pulumi.StringPtrOutput)
}

type CustomerEncryptionKeyPtrOutput struct{ *pulumi.OutputState }

func (CustomerEncryptionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerEncryptionKey)(nil)).Elem()
}

func (o CustomerEncryptionKeyPtrOutput) ToCustomerEncryptionKeyPtrOutput() CustomerEncryptionKeyPtrOutput {
	return o
}

func (o CustomerEncryptionKeyPtrOutput) ToCustomerEncryptionKeyPtrOutputWithContext(ctx context.Context) CustomerEncryptionKeyPtrOutput {
	return o
}

func (o CustomerEncryptionKeyPtrOutput) Elem() CustomerEncryptionKeyOutput {
	return o.ApplyT(func(v *CustomerEncryptionKey) CustomerEncryptionKey { return *v }).(CustomerEncryptionKeyOutput)
}

// The name of the encryption key that is stored in Google Cloud KMS.
func (o CustomerEncryptionKeyPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used.
func (o CustomerEncryptionKeyPtrOutput) KmsKeyServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource.
func (o CustomerEncryptionKeyPtrOutput) RawKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.RawKey
	}).(pulumi.StringPtrOutput)
}

type CustomerEncryptionKeyResponse struct {
	// The name of the encryption key that is stored in Google Cloud KMS.
	KmsKeyName string `pulumi:"kmsKeyName"`
	// The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used.
	KmsKeyServiceAccount string `pulumi:"kmsKeyServiceAccount"`
	// Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey string `pulumi:"rawKey"`
	// [Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
	Sha256 string `pulumi:"sha256"`
}

// CustomerEncryptionKeyResponseInput is an input type that accepts CustomerEncryptionKeyResponseArgs and CustomerEncryptionKeyResponseOutput values.
// You can construct a concrete instance of `CustomerEncryptionKeyResponseInput` via:
//
//          CustomerEncryptionKeyResponseArgs{...}
type CustomerEncryptionKeyResponseInput interface {
	pulumi.Input

	ToCustomerEncryptionKeyResponseOutput() CustomerEncryptionKeyResponseOutput
	ToCustomerEncryptionKeyResponseOutputWithContext(context.Context) CustomerEncryptionKeyResponseOutput
}

type CustomerEncryptionKeyResponseArgs struct {
	// The name of the encryption key that is stored in Google Cloud KMS.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
	// The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used.
	KmsKeyServiceAccount pulumi.StringInput `pulumi:"kmsKeyServiceAccount"`
	// Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource.
	RawKey pulumi.StringInput `pulumi:"rawKey"`
	// [Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
	Sha256 pulumi.StringInput `pulumi:"sha256"`
}

func (CustomerEncryptionKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerEncryptionKeyResponse)(nil)).Elem()
}

func (i CustomerEncryptionKeyResponseArgs) ToCustomerEncryptionKeyResponseOutput() CustomerEncryptionKeyResponseOutput {
	return i.ToCustomerEncryptionKeyResponseOutputWithContext(context.Background())
}

func (i CustomerEncryptionKeyResponseArgs) ToCustomerEncryptionKeyResponseOutputWithContext(ctx context.Context) CustomerEncryptionKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerEncryptionKeyResponseOutput)
}

func (i CustomerEncryptionKeyResponseArgs) ToCustomerEncryptionKeyResponsePtrOutput() CustomerEncryptionKeyResponsePtrOutput {
	return i.ToCustomerEncryptionKeyResponsePtrOutputWithContext(context.Background())
}

func (i CustomerEncryptionKeyResponseArgs) ToCustomerEncryptionKeyResponsePtrOutputWithContext(ctx context.Context) CustomerEncryptionKeyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerEncryptionKeyResponseOutput).ToCustomerEncryptionKeyResponsePtrOutputWithContext(ctx)
}

// CustomerEncryptionKeyResponsePtrInput is an input type that accepts CustomerEncryptionKeyResponseArgs, CustomerEncryptionKeyResponsePtr and CustomerEncryptionKeyResponsePtrOutput values.
// You can construct a concrete instance of `CustomerEncryptionKeyResponsePtrInput` via:
//
//          CustomerEncryptionKeyResponseArgs{...}
//
//  or:
//
//          nil
type CustomerEncryptionKeyResponsePtrInput interface {
	pulumi.Input

	ToCustomerEncryptionKeyResponsePtrOutput() CustomerEncryptionKeyResponsePtrOutput
	ToCustomerEncryptionKeyResponsePtrOutputWithContext(context.Context) CustomerEncryptionKeyResponsePtrOutput
}

type customerEncryptionKeyResponsePtrType CustomerEncryptionKeyResponseArgs

func CustomerEncryptionKeyResponsePtr(v *CustomerEncryptionKeyResponseArgs) CustomerEncryptionKeyResponsePtrInput {
	return (*customerEncryptionKeyResponsePtrType)(v)
}

func (*customerEncryptionKeyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerEncryptionKeyResponse)(nil)).Elem()
}

func (i *customerEncryptionKeyResponsePtrType) ToCustomerEncryptionKeyResponsePtrOutput() CustomerEncryptionKeyResponsePtrOutput {
	return i.ToCustomerEncryptionKeyResponsePtrOutputWithContext(context.Background())
}

func (i *customerEncryptionKeyResponsePtrType) ToCustomerEncryptionKeyResponsePtrOutputWithContext(ctx context.Context) CustomerEncryptionKeyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerEncryptionKeyResponsePtrOutput)
}

type CustomerEncryptionKeyResponseOutput struct{ *pulumi.OutputState }

func (CustomerEncryptionKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerEncryptionKeyResponse)(nil)).Elem()
}

func (o CustomerEncryptionKeyResponseOutput) ToCustomerEncryptionKeyResponseOutput() CustomerEncryptionKeyResponseOutput {
	return o
}

func (o CustomerEncryptionKeyResponseOutput) ToCustomerEncryptionKeyResponseOutputWithContext(ctx context.Context) CustomerEncryptionKeyResponseOutput {
	return o
}

func (o CustomerEncryptionKeyResponseOutput) ToCustomerEncryptionKeyResponsePtrOutput() CustomerEncryptionKeyResponsePtrOutput {
	return o.ToCustomerEncryptionKeyResponsePtrOutputWithContext(context.Background())
}

func (o CustomerEncryptionKeyResponseOutput) ToCustomerEncryptionKeyResponsePtrOutputWithContext(ctx context.Context) CustomerEncryptionKeyResponsePtrOutput {
	return o.ApplyT(func(v CustomerEncryptionKeyResponse) *CustomerEncryptionKeyResponse {
		return &v
	}).(CustomerEncryptionKeyResponsePtrOutput)
}

// The name of the encryption key that is stored in Google Cloud KMS.
func (o CustomerEncryptionKeyResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerEncryptionKeyResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used.
func (o CustomerEncryptionKeyResponseOutput) KmsKeyServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerEncryptionKeyResponse) string { return v.KmsKeyServiceAccount }).(pulumi.StringOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource.
func (o CustomerEncryptionKeyResponseOutput) RawKey() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerEncryptionKeyResponse) string { return v.RawKey }).(pulumi.StringOutput)
}

// [Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
func (o CustomerEncryptionKeyResponseOutput) Sha256() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerEncryptionKeyResponse) string { return v.Sha256 }).(pulumi.StringOutput)
}

type CustomerEncryptionKeyResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomerEncryptionKeyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerEncryptionKeyResponse)(nil)).Elem()
}

func (o CustomerEncryptionKeyResponsePtrOutput) ToCustomerEncryptionKeyResponsePtrOutput() CustomerEncryptionKeyResponsePtrOutput {
	return o
}

func (o CustomerEncryptionKeyResponsePtrOutput) ToCustomerEncryptionKeyResponsePtrOutputWithContext(ctx context.Context) CustomerEncryptionKeyResponsePtrOutput {
	return o
}

func (o CustomerEncryptionKeyResponsePtrOutput) Elem() CustomerEncryptionKeyResponseOutput {
	return o.ApplyT(func(v *CustomerEncryptionKeyResponse) CustomerEncryptionKeyResponse { return *v }).(CustomerEncryptionKeyResponseOutput)
}

// The name of the encryption key that is stored in Google Cloud KMS.
func (o CustomerEncryptionKeyResponsePtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerEncryptionKeyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used.
func (o CustomerEncryptionKeyResponsePtrOutput) KmsKeyServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerEncryptionKeyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource.
func (o CustomerEncryptionKeyResponsePtrOutput) RawKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerEncryptionKeyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RawKey
	}).(pulumi.StringPtrOutput)
}

// [Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
func (o CustomerEncryptionKeyResponsePtrOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerEncryptionKeyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Sha256
	}).(pulumi.StringPtrOutput)
}

// Deprecation status for a public resource.
type DeprecationStatus struct {
	// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
	Deleted *string `pulumi:"deleted"`
	// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
	Deprecated *string `pulumi:"deprecated"`
	// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
	Obsolete *string `pulumi:"obsolete"`
	// The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
	Replacement *string `pulumi:"replacement"`
	// The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
	State *string `pulumi:"state"`
}

// DeprecationStatusInput is an input type that accepts DeprecationStatusArgs and DeprecationStatusOutput values.
// You can construct a concrete instance of `DeprecationStatusInput` via:
//
//          DeprecationStatusArgs{...}
type DeprecationStatusInput interface {
	pulumi.Input

	ToDeprecationStatusOutput() DeprecationStatusOutput
	ToDeprecationStatusOutputWithContext(context.Context) DeprecationStatusOutput
}

// Deprecation status for a public resource.
type DeprecationStatusArgs struct {
	// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
	Deleted pulumi.StringPtrInput `pulumi:"deleted"`
	// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
	Deprecated pulumi.StringPtrInput `pulumi:"deprecated"`
	// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
	Obsolete pulumi.StringPtrInput `pulumi:"obsolete"`
	// The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
	Replacement pulumi.StringPtrInput `pulumi:"replacement"`
	// The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
	State *DeprecationStatusState `pulumi:"state"`
}

func (DeprecationStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeprecationStatus)(nil)).Elem()
}

func (i DeprecationStatusArgs) ToDeprecationStatusOutput() DeprecationStatusOutput {
	return i.ToDeprecationStatusOutputWithContext(context.Background())
}

func (i DeprecationStatusArgs) ToDeprecationStatusOutputWithContext(ctx context.Context) DeprecationStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeprecationStatusOutput)
}

func (i DeprecationStatusArgs) ToDeprecationStatusPtrOutput() DeprecationStatusPtrOutput {
	return i.ToDeprecationStatusPtrOutputWithContext(context.Background())
}

func (i DeprecationStatusArgs) ToDeprecationStatusPtrOutputWithContext(ctx context.Context) DeprecationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeprecationStatusOutput).ToDeprecationStatusPtrOutputWithContext(ctx)
}

// DeprecationStatusPtrInput is an input type that accepts DeprecationStatusArgs, DeprecationStatusPtr and DeprecationStatusPtrOutput values.
// You can construct a concrete instance of `DeprecationStatusPtrInput` via:
//
//          DeprecationStatusArgs{...}
//
//  or:
//
//          nil
type DeprecationStatusPtrInput interface {
	pulumi.Input

	ToDeprecationStatusPtrOutput() DeprecationStatusPtrOutput
	ToDeprecationStatusPtrOutputWithContext(context.Context) DeprecationStatusPtrOutput
}

type deprecationStatusPtrType DeprecationStatusArgs

func DeprecationStatusPtr(v *DeprecationStatusArgs) DeprecationStatusPtrInput {
	return (*deprecationStatusPtrType)(v)
}

func (*deprecationStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeprecationStatus)(nil)).Elem()
}

func (i *deprecationStatusPtrType) ToDeprecationStatusPtrOutput() DeprecationStatusPtrOutput {
	return i.ToDeprecationStatusPtrOutputWithContext(context.Background())
}

func (i *deprecationStatusPtrType) ToDeprecationStatusPtrOutputWithContext(ctx context.Context) DeprecationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeprecationStatusPtrOutput)
}

// Deprecation status for a public resource.
type DeprecationStatusOutput struct{ *pulumi.OutputState }

func (DeprecationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeprecationStatus)(nil)).Elem()
}

func (o DeprecationStatusOutput) ToDeprecationStatusOutput() DeprecationStatusOutput {
	return o
}

func (o DeprecationStatusOutput) ToDeprecationStatusOutputWithContext(ctx context.Context) DeprecationStatusOutput {
	return o
}

func (o DeprecationStatusOutput) ToDeprecationStatusPtrOutput() DeprecationStatusPtrOutput {
	return o.ToDeprecationStatusPtrOutputWithContext(context.Background())
}

func (o DeprecationStatusOutput) ToDeprecationStatusPtrOutputWithContext(ctx context.Context) DeprecationStatusPtrOutput {
	return o.ApplyT(func(v DeprecationStatus) *DeprecationStatus {
		return &v
	}).(DeprecationStatusPtrOutput)
}

// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
func (o DeprecationStatusOutput) Deleted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeprecationStatus) *string { return v.Deleted }).(pulumi.StringPtrOutput)
}

// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
func (o DeprecationStatusOutput) Deprecated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeprecationStatus) *string { return v.Deprecated }).(pulumi.StringPtrOutput)
}

// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
func (o DeprecationStatusOutput) Obsolete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeprecationStatus) *string { return v.Obsolete }).(pulumi.StringPtrOutput)
}

// The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
func (o DeprecationStatusOutput) Replacement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeprecationStatus) *string { return v.Replacement }).(pulumi.StringPtrOutput)
}

// The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
func (o DeprecationStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeprecationStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type DeprecationStatusPtrOutput struct{ *pulumi.OutputState }

func (DeprecationStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeprecationStatus)(nil)).Elem()
}

func (o DeprecationStatusPtrOutput) ToDeprecationStatusPtrOutput() DeprecationStatusPtrOutput {
	return o
}

func (o DeprecationStatusPtrOutput) ToDeprecationStatusPtrOutputWithContext(ctx context.Context) DeprecationStatusPtrOutput {
	return o
}

func (o DeprecationStatusPtrOutput) Elem() DeprecationStatusOutput {
	return o.ApplyT(func(v *DeprecationStatus) DeprecationStatus { return *v }).(DeprecationStatusOutput)
}

// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
func (o DeprecationStatusPtrOutput) Deleted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeprecationStatus) *string {
		if v == nil {
			return nil
		}
		return v.Deleted
	}).(pulumi.StringPtrOutput)
}

// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
func (o DeprecationStatusPtrOutput) Deprecated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeprecationStatus) *string {
		if v == nil {
			return nil
		}
		return v.Deprecated
	}).(pulumi.StringPtrOutput)
}

// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
func (o DeprecationStatusPtrOutput) Obsolete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeprecationStatus) *string {
		if v == nil {
			return nil
		}
		return v.Obsolete
	}).(pulumi.StringPtrOutput)
}

// The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
func (o DeprecationStatusPtrOutput) Replacement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeprecationStatus) *string {
		if v == nil {
			return nil
		}
		return v.Replacement
	}).(pulumi.StringPtrOutput)
}

// The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
func (o DeprecationStatusPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeprecationStatus) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Deprecation status for a public resource.
type DeprecationStatusResponse struct {
	// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
	Deleted string `pulumi:"deleted"`
	// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
	Deprecated string `pulumi:"deprecated"`
	// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
	Obsolete string `pulumi:"obsolete"`
	// The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
	Replacement string `pulumi:"replacement"`
	// The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
	State string `pulumi:"state"`
}

// DeprecationStatusResponseInput is an input type that accepts DeprecationStatusResponseArgs and DeprecationStatusResponseOutput values.
// You can construct a concrete instance of `DeprecationStatusResponseInput` via:
//
//          DeprecationStatusResponseArgs{...}
type DeprecationStatusResponseInput interface {
	pulumi.Input

	ToDeprecationStatusResponseOutput() DeprecationStatusResponseOutput
	ToDeprecationStatusResponseOutputWithContext(context.Context) DeprecationStatusResponseOutput
}

// Deprecation status for a public resource.
type DeprecationStatusResponseArgs struct {
	// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
	Deleted pulumi.StringInput `pulumi:"deleted"`
	// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
	Deprecated pulumi.StringInput `pulumi:"deprecated"`
	// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
	Obsolete pulumi.StringInput `pulumi:"obsolete"`
	// The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
	Replacement pulumi.StringInput `pulumi:"replacement"`
	// The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
	State pulumi.StringInput `pulumi:"state"`
}

func (DeprecationStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeprecationStatusResponse)(nil)).Elem()
}

func (i DeprecationStatusResponseArgs) ToDeprecationStatusResponseOutput() DeprecationStatusResponseOutput {
	return i.ToDeprecationStatusResponseOutputWithContext(context.Background())
}

func (i DeprecationStatusResponseArgs) ToDeprecationStatusResponseOutputWithContext(ctx context.Context) DeprecationStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeprecationStatusResponseOutput)
}

func (i DeprecationStatusResponseArgs) ToDeprecationStatusResponsePtrOutput() DeprecationStatusResponsePtrOutput {
	return i.ToDeprecationStatusResponsePtrOutputWithContext(context.Background())
}

func (i DeprecationStatusResponseArgs) ToDeprecationStatusResponsePtrOutputWithContext(ctx context.Context) DeprecationStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeprecationStatusResponseOutput).ToDeprecationStatusResponsePtrOutputWithContext(ctx)
}

// DeprecationStatusResponsePtrInput is an input type that accepts DeprecationStatusResponseArgs, DeprecationStatusResponsePtr and DeprecationStatusResponsePtrOutput values.
// You can construct a concrete instance of `DeprecationStatusResponsePtrInput` via:
//
//          DeprecationStatusResponseArgs{...}
//
//  or:
//
//          nil
type DeprecationStatusResponsePtrInput interface {
	pulumi.Input

	ToDeprecationStatusResponsePtrOutput() DeprecationStatusResponsePtrOutput
	ToDeprecationStatusResponsePtrOutputWithContext(context.Context) DeprecationStatusResponsePtrOutput
}

type deprecationStatusResponsePtrType DeprecationStatusResponseArgs

func DeprecationStatusResponsePtr(v *DeprecationStatusResponseArgs) DeprecationStatusResponsePtrInput {
	return (*deprecationStatusResponsePtrType)(v)
}

func (*deprecationStatusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeprecationStatusResponse)(nil)).Elem()
}

func (i *deprecationStatusResponsePtrType) ToDeprecationStatusResponsePtrOutput() DeprecationStatusResponsePtrOutput {
	return i.ToDeprecationStatusResponsePtrOutputWithContext(context.Background())
}

func (i *deprecationStatusResponsePtrType) ToDeprecationStatusResponsePtrOutputWithContext(ctx context.Context) DeprecationStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeprecationStatusResponsePtrOutput)
}

// Deprecation status for a public resource.
type DeprecationStatusResponseOutput struct{ *pulumi.OutputState }

func (DeprecationStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeprecationStatusResponse)(nil)).Elem()
}

func (o DeprecationStatusResponseOutput) ToDeprecationStatusResponseOutput() DeprecationStatusResponseOutput {
	return o
}

func (o DeprecationStatusResponseOutput) ToDeprecationStatusResponseOutputWithContext(ctx context.Context) DeprecationStatusResponseOutput {
	return o
}

func (o DeprecationStatusResponseOutput) ToDeprecationStatusResponsePtrOutput() DeprecationStatusResponsePtrOutput {
	return o.ToDeprecationStatusResponsePtrOutputWithContext(context.Background())
}

func (o DeprecationStatusResponseOutput) ToDeprecationStatusResponsePtrOutputWithContext(ctx context.Context) DeprecationStatusResponsePtrOutput {
	return o.ApplyT(func(v DeprecationStatusResponse) *DeprecationStatusResponse {
		return &v
	}).(DeprecationStatusResponsePtrOutput)
}

// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
func (o DeprecationStatusResponseOutput) Deleted() pulumi.StringOutput {
	return o.ApplyT(func(v DeprecationStatusResponse) string { return v.Deleted }).(pulumi.StringOutput)
}

// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
func (o DeprecationStatusResponseOutput) Deprecated() pulumi.StringOutput {
	return o.ApplyT(func(v DeprecationStatusResponse) string { return v.Deprecated }).(pulumi.StringOutput)
}

// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
func (o DeprecationStatusResponseOutput) Obsolete() pulumi.StringOutput {
	return o.ApplyT(func(v DeprecationStatusResponse) string { return v.Obsolete }).(pulumi.StringOutput)
}

// The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
func (o DeprecationStatusResponseOutput) Replacement() pulumi.StringOutput {
	return o.ApplyT(func(v DeprecationStatusResponse) string { return v.Replacement }).(pulumi.StringOutput)
}

// The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
func (o DeprecationStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v DeprecationStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

type DeprecationStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (DeprecationStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeprecationStatusResponse)(nil)).Elem()
}

func (o DeprecationStatusResponsePtrOutput) ToDeprecationStatusResponsePtrOutput() DeprecationStatusResponsePtrOutput {
	return o
}

func (o DeprecationStatusResponsePtrOutput) ToDeprecationStatusResponsePtrOutputWithContext(ctx context.Context) DeprecationStatusResponsePtrOutput {
	return o
}

func (o DeprecationStatusResponsePtrOutput) Elem() DeprecationStatusResponseOutput {
	return o.ApplyT(func(v *DeprecationStatusResponse) DeprecationStatusResponse { return *v }).(DeprecationStatusResponseOutput)
}

// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
func (o DeprecationStatusResponsePtrOutput) Deleted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeprecationStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Deleted
	}).(pulumi.StringPtrOutput)
}

// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
func (o DeprecationStatusResponsePtrOutput) Deprecated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeprecationStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Deprecated
	}).(pulumi.StringPtrOutput)
}

// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
func (o DeprecationStatusResponsePtrOutput) Obsolete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeprecationStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Obsolete
	}).(pulumi.StringPtrOutput)
}

// The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
func (o DeprecationStatusResponsePtrOutput) Replacement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeprecationStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Replacement
	}).(pulumi.StringPtrOutput)
}

// The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
func (o DeprecationStatusResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeprecationStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// A specification of the desired way to instantiate a disk in the instance template when its created from a source instance.
type DiskInstantiationConfig struct {
	// Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
	AutoDelete *bool `pulumi:"autoDelete"`
	// The custom source image to be used to restore this disk when instantiating this instance template.
	CustomImage *string `pulumi:"customImage"`
	// Specifies the device name of the disk to which the configurations apply to.
	DeviceName *string `pulumi:"deviceName"`
	// Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks.
	InstantiateFrom *string `pulumi:"instantiateFrom"`
}

// DiskInstantiationConfigInput is an input type that accepts DiskInstantiationConfigArgs and DiskInstantiationConfigOutput values.
// You can construct a concrete instance of `DiskInstantiationConfigInput` via:
//
//          DiskInstantiationConfigArgs{...}
type DiskInstantiationConfigInput interface {
	pulumi.Input

	ToDiskInstantiationConfigOutput() DiskInstantiationConfigOutput
	ToDiskInstantiationConfigOutputWithContext(context.Context) DiskInstantiationConfigOutput
}

// A specification of the desired way to instantiate a disk in the instance template when its created from a source instance.
type DiskInstantiationConfigArgs struct {
	// Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
	AutoDelete pulumi.BoolPtrInput `pulumi:"autoDelete"`
	// The custom source image to be used to restore this disk when instantiating this instance template.
	CustomImage pulumi.StringPtrInput `pulumi:"customImage"`
	// Specifies the device name of the disk to which the configurations apply to.
	DeviceName pulumi.StringPtrInput `pulumi:"deviceName"`
	// Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks.
	InstantiateFrom *DiskInstantiationConfigInstantiateFrom `pulumi:"instantiateFrom"`
}

func (DiskInstantiationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskInstantiationConfig)(nil)).Elem()
}

func (i DiskInstantiationConfigArgs) ToDiskInstantiationConfigOutput() DiskInstantiationConfigOutput {
	return i.ToDiskInstantiationConfigOutputWithContext(context.Background())
}

func (i DiskInstantiationConfigArgs) ToDiskInstantiationConfigOutputWithContext(ctx context.Context) DiskInstantiationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskInstantiationConfigOutput)
}

// DiskInstantiationConfigArrayInput is an input type that accepts DiskInstantiationConfigArray and DiskInstantiationConfigArrayOutput values.
// You can construct a concrete instance of `DiskInstantiationConfigArrayInput` via:
//
//          DiskInstantiationConfigArray{ DiskInstantiationConfigArgs{...} }
type DiskInstantiationConfigArrayInput interface {
	pulumi.Input

	ToDiskInstantiationConfigArrayOutput() DiskInstantiationConfigArrayOutput
	ToDiskInstantiationConfigArrayOutputWithContext(context.Context) DiskInstantiationConfigArrayOutput
}

type DiskInstantiationConfigArray []DiskInstantiationConfigInput

func (DiskInstantiationConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskInstantiationConfig)(nil)).Elem()
}

func (i DiskInstantiationConfigArray) ToDiskInstantiationConfigArrayOutput() DiskInstantiationConfigArrayOutput {
	return i.ToDiskInstantiationConfigArrayOutputWithContext(context.Background())
}

func (i DiskInstantiationConfigArray) ToDiskInstantiationConfigArrayOutputWithContext(ctx context.Context) DiskInstantiationConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskInstantiationConfigArrayOutput)
}

// A specification of the desired way to instantiate a disk in the instance template when its created from a source instance.
type DiskInstantiationConfigOutput struct{ *pulumi.OutputState }

func (DiskInstantiationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskInstantiationConfig)(nil)).Elem()
}

func (o DiskInstantiationConfigOutput) ToDiskInstantiationConfigOutput() DiskInstantiationConfigOutput {
	return o
}

func (o DiskInstantiationConfigOutput) ToDiskInstantiationConfigOutputWithContext(ctx context.Context) DiskInstantiationConfigOutput {
	return o
}

// Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
func (o DiskInstantiationConfigOutput) AutoDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DiskInstantiationConfig) *bool { return v.AutoDelete }).(pulumi.BoolPtrOutput)
}

// The custom source image to be used to restore this disk when instantiating this instance template.
func (o DiskInstantiationConfigOutput) CustomImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskInstantiationConfig) *string { return v.CustomImage }).(pulumi.StringPtrOutput)
}

// Specifies the device name of the disk to which the configurations apply to.
func (o DiskInstantiationConfigOutput) DeviceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskInstantiationConfig) *string { return v.DeviceName }).(pulumi.StringPtrOutput)
}

// Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks.
func (o DiskInstantiationConfigOutput) InstantiateFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskInstantiationConfig) *string { return v.InstantiateFrom }).(pulumi.StringPtrOutput)
}

type DiskInstantiationConfigArrayOutput struct{ *pulumi.OutputState }

func (DiskInstantiationConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskInstantiationConfig)(nil)).Elem()
}

func (o DiskInstantiationConfigArrayOutput) ToDiskInstantiationConfigArrayOutput() DiskInstantiationConfigArrayOutput {
	return o
}

func (o DiskInstantiationConfigArrayOutput) ToDiskInstantiationConfigArrayOutputWithContext(ctx context.Context) DiskInstantiationConfigArrayOutput {
	return o
}

func (o DiskInstantiationConfigArrayOutput) Index(i pulumi.IntInput) DiskInstantiationConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskInstantiationConfig {
		return vs[0].([]DiskInstantiationConfig)[vs[1].(int)]
	}).(DiskInstantiationConfigOutput)
}

// A specification of the desired way to instantiate a disk in the instance template when its created from a source instance.
type DiskInstantiationConfigResponse struct {
	// Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
	AutoDelete bool `pulumi:"autoDelete"`
	// The custom source image to be used to restore this disk when instantiating this instance template.
	CustomImage string `pulumi:"customImage"`
	// Specifies the device name of the disk to which the configurations apply to.
	DeviceName string `pulumi:"deviceName"`
	// Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks.
	InstantiateFrom string `pulumi:"instantiateFrom"`
}

// DiskInstantiationConfigResponseInput is an input type that accepts DiskInstantiationConfigResponseArgs and DiskInstantiationConfigResponseOutput values.
// You can construct a concrete instance of `DiskInstantiationConfigResponseInput` via:
//
//          DiskInstantiationConfigResponseArgs{...}
type DiskInstantiationConfigResponseInput interface {
	pulumi.Input

	ToDiskInstantiationConfigResponseOutput() DiskInstantiationConfigResponseOutput
	ToDiskInstantiationConfigResponseOutputWithContext(context.Context) DiskInstantiationConfigResponseOutput
}

// A specification of the desired way to instantiate a disk in the instance template when its created from a source instance.
type DiskInstantiationConfigResponseArgs struct {
	// Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
	AutoDelete pulumi.BoolInput `pulumi:"autoDelete"`
	// The custom source image to be used to restore this disk when instantiating this instance template.
	CustomImage pulumi.StringInput `pulumi:"customImage"`
	// Specifies the device name of the disk to which the configurations apply to.
	DeviceName pulumi.StringInput `pulumi:"deviceName"`
	// Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks.
	InstantiateFrom pulumi.StringInput `pulumi:"instantiateFrom"`
}

func (DiskInstantiationConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskInstantiationConfigResponse)(nil)).Elem()
}

func (i DiskInstantiationConfigResponseArgs) ToDiskInstantiationConfigResponseOutput() DiskInstantiationConfigResponseOutput {
	return i.ToDiskInstantiationConfigResponseOutputWithContext(context.Background())
}

func (i DiskInstantiationConfigResponseArgs) ToDiskInstantiationConfigResponseOutputWithContext(ctx context.Context) DiskInstantiationConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskInstantiationConfigResponseOutput)
}

// DiskInstantiationConfigResponseArrayInput is an input type that accepts DiskInstantiationConfigResponseArray and DiskInstantiationConfigResponseArrayOutput values.
// You can construct a concrete instance of `DiskInstantiationConfigResponseArrayInput` via:
//
//          DiskInstantiationConfigResponseArray{ DiskInstantiationConfigResponseArgs{...} }
type DiskInstantiationConfigResponseArrayInput interface {
	pulumi.Input

	ToDiskInstantiationConfigResponseArrayOutput() DiskInstantiationConfigResponseArrayOutput
	ToDiskInstantiationConfigResponseArrayOutputWithContext(context.Context) DiskInstantiationConfigResponseArrayOutput
}

type DiskInstantiationConfigResponseArray []DiskInstantiationConfigResponseInput

func (DiskInstantiationConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskInstantiationConfigResponse)(nil)).Elem()
}

func (i DiskInstantiationConfigResponseArray) ToDiskInstantiationConfigResponseArrayOutput() DiskInstantiationConfigResponseArrayOutput {
	return i.ToDiskInstantiationConfigResponseArrayOutputWithContext(context.Background())
}

func (i DiskInstantiationConfigResponseArray) ToDiskInstantiationConfigResponseArrayOutputWithContext(ctx context.Context) DiskInstantiationConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskInstantiationConfigResponseArrayOutput)
}

// A specification of the desired way to instantiate a disk in the instance template when its created from a source instance.
type DiskInstantiationConfigResponseOutput struct{ *pulumi.OutputState }

func (DiskInstantiationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskInstantiationConfigResponse)(nil)).Elem()
}

func (o DiskInstantiationConfigResponseOutput) ToDiskInstantiationConfigResponseOutput() DiskInstantiationConfigResponseOutput {
	return o
}

func (o DiskInstantiationConfigResponseOutput) ToDiskInstantiationConfigResponseOutputWithContext(ctx context.Context) DiskInstantiationConfigResponseOutput {
	return o
}

// Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
func (o DiskInstantiationConfigResponseOutput) AutoDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v DiskInstantiationConfigResponse) bool { return v.AutoDelete }).(pulumi.BoolOutput)
}

// The custom source image to be used to restore this disk when instantiating this instance template.
func (o DiskInstantiationConfigResponseOutput) CustomImage() pulumi.StringOutput {
	return o.ApplyT(func(v DiskInstantiationConfigResponse) string { return v.CustomImage }).(pulumi.StringOutput)
}

// Specifies the device name of the disk to which the configurations apply to.
func (o DiskInstantiationConfigResponseOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v DiskInstantiationConfigResponse) string { return v.DeviceName }).(pulumi.StringOutput)
}

// Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance's corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks.
func (o DiskInstantiationConfigResponseOutput) InstantiateFrom() pulumi.StringOutput {
	return o.ApplyT(func(v DiskInstantiationConfigResponse) string { return v.InstantiateFrom }).(pulumi.StringOutput)
}

type DiskInstantiationConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (DiskInstantiationConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskInstantiationConfigResponse)(nil)).Elem()
}

func (o DiskInstantiationConfigResponseArrayOutput) ToDiskInstantiationConfigResponseArrayOutput() DiskInstantiationConfigResponseArrayOutput {
	return o
}

func (o DiskInstantiationConfigResponseArrayOutput) ToDiskInstantiationConfigResponseArrayOutputWithContext(ctx context.Context) DiskInstantiationConfigResponseArrayOutput {
	return o
}

func (o DiskInstantiationConfigResponseArrayOutput) Index(i pulumi.IntInput) DiskInstantiationConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskInstantiationConfigResponse {
		return vs[0].([]DiskInstantiationConfigResponse)[vs[1].(int)]
	}).(DiskInstantiationConfigResponseOutput)
}

// A set of Display Device options
type DisplayDevice struct {
	// Defines whether the instance has Display enabled.
	EnableDisplay *bool `pulumi:"enableDisplay"`
}

// DisplayDeviceInput is an input type that accepts DisplayDeviceArgs and DisplayDeviceOutput values.
// You can construct a concrete instance of `DisplayDeviceInput` via:
//
//          DisplayDeviceArgs{...}
type DisplayDeviceInput interface {
	pulumi.Input

	ToDisplayDeviceOutput() DisplayDeviceOutput
	ToDisplayDeviceOutputWithContext(context.Context) DisplayDeviceOutput
}

// A set of Display Device options
type DisplayDeviceArgs struct {
	// Defines whether the instance has Display enabled.
	EnableDisplay pulumi.BoolPtrInput `pulumi:"enableDisplay"`
}

func (DisplayDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DisplayDevice)(nil)).Elem()
}

func (i DisplayDeviceArgs) ToDisplayDeviceOutput() DisplayDeviceOutput {
	return i.ToDisplayDeviceOutputWithContext(context.Background())
}

func (i DisplayDeviceArgs) ToDisplayDeviceOutputWithContext(ctx context.Context) DisplayDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisplayDeviceOutput)
}

func (i DisplayDeviceArgs) ToDisplayDevicePtrOutput() DisplayDevicePtrOutput {
	return i.ToDisplayDevicePtrOutputWithContext(context.Background())
}

func (i DisplayDeviceArgs) ToDisplayDevicePtrOutputWithContext(ctx context.Context) DisplayDevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisplayDeviceOutput).ToDisplayDevicePtrOutputWithContext(ctx)
}

// DisplayDevicePtrInput is an input type that accepts DisplayDeviceArgs, DisplayDevicePtr and DisplayDevicePtrOutput values.
// You can construct a concrete instance of `DisplayDevicePtrInput` via:
//
//          DisplayDeviceArgs{...}
//
//  or:
//
//          nil
type DisplayDevicePtrInput interface {
	pulumi.Input

	ToDisplayDevicePtrOutput() DisplayDevicePtrOutput
	ToDisplayDevicePtrOutputWithContext(context.Context) DisplayDevicePtrOutput
}

type displayDevicePtrType DisplayDeviceArgs

func DisplayDevicePtr(v *DisplayDeviceArgs) DisplayDevicePtrInput {
	return (*displayDevicePtrType)(v)
}

func (*displayDevicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DisplayDevice)(nil)).Elem()
}

func (i *displayDevicePtrType) ToDisplayDevicePtrOutput() DisplayDevicePtrOutput {
	return i.ToDisplayDevicePtrOutputWithContext(context.Background())
}

func (i *displayDevicePtrType) ToDisplayDevicePtrOutputWithContext(ctx context.Context) DisplayDevicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisplayDevicePtrOutput)
}

// A set of Display Device options
type DisplayDeviceOutput struct{ *pulumi.OutputState }

func (DisplayDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DisplayDevice)(nil)).Elem()
}

func (o DisplayDeviceOutput) ToDisplayDeviceOutput() DisplayDeviceOutput {
	return o
}

func (o DisplayDeviceOutput) ToDisplayDeviceOutputWithContext(ctx context.Context) DisplayDeviceOutput {
	return o
}

func (o DisplayDeviceOutput) ToDisplayDevicePtrOutput() DisplayDevicePtrOutput {
	return o.ToDisplayDevicePtrOutputWithContext(context.Background())
}

func (o DisplayDeviceOutput) ToDisplayDevicePtrOutputWithContext(ctx context.Context) DisplayDevicePtrOutput {
	return o.ApplyT(func(v DisplayDevice) *DisplayDevice {
		return &v
	}).(DisplayDevicePtrOutput)
}

// Defines whether the instance has Display enabled.
func (o DisplayDeviceOutput) EnableDisplay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DisplayDevice) *bool { return v.EnableDisplay }).(pulumi.BoolPtrOutput)
}

type DisplayDevicePtrOutput struct{ *pulumi.OutputState }

func (DisplayDevicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DisplayDevice)(nil)).Elem()
}

func (o DisplayDevicePtrOutput) ToDisplayDevicePtrOutput() DisplayDevicePtrOutput {
	return o
}

func (o DisplayDevicePtrOutput) ToDisplayDevicePtrOutputWithContext(ctx context.Context) DisplayDevicePtrOutput {
	return o
}

func (o DisplayDevicePtrOutput) Elem() DisplayDeviceOutput {
	return o.ApplyT(func(v *DisplayDevice) DisplayDevice { return *v }).(DisplayDeviceOutput)
}

// Defines whether the instance has Display enabled.
func (o DisplayDevicePtrOutput) EnableDisplay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DisplayDevice) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDisplay
	}).(pulumi.BoolPtrOutput)
}

// A set of Display Device options
type DisplayDeviceResponse struct {
	// Defines whether the instance has Display enabled.
	EnableDisplay bool `pulumi:"enableDisplay"`
}

// DisplayDeviceResponseInput is an input type that accepts DisplayDeviceResponseArgs and DisplayDeviceResponseOutput values.
// You can construct a concrete instance of `DisplayDeviceResponseInput` via:
//
//          DisplayDeviceResponseArgs{...}
type DisplayDeviceResponseInput interface {
	pulumi.Input

	ToDisplayDeviceResponseOutput() DisplayDeviceResponseOutput
	ToDisplayDeviceResponseOutputWithContext(context.Context) DisplayDeviceResponseOutput
}

// A set of Display Device options
type DisplayDeviceResponseArgs struct {
	// Defines whether the instance has Display enabled.
	EnableDisplay pulumi.BoolInput `pulumi:"enableDisplay"`
}

func (DisplayDeviceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DisplayDeviceResponse)(nil)).Elem()
}

func (i DisplayDeviceResponseArgs) ToDisplayDeviceResponseOutput() DisplayDeviceResponseOutput {
	return i.ToDisplayDeviceResponseOutputWithContext(context.Background())
}

func (i DisplayDeviceResponseArgs) ToDisplayDeviceResponseOutputWithContext(ctx context.Context) DisplayDeviceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisplayDeviceResponseOutput)
}

func (i DisplayDeviceResponseArgs) ToDisplayDeviceResponsePtrOutput() DisplayDeviceResponsePtrOutput {
	return i.ToDisplayDeviceResponsePtrOutputWithContext(context.Background())
}

func (i DisplayDeviceResponseArgs) ToDisplayDeviceResponsePtrOutputWithContext(ctx context.Context) DisplayDeviceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisplayDeviceResponseOutput).ToDisplayDeviceResponsePtrOutputWithContext(ctx)
}

// DisplayDeviceResponsePtrInput is an input type that accepts DisplayDeviceResponseArgs, DisplayDeviceResponsePtr and DisplayDeviceResponsePtrOutput values.
// You can construct a concrete instance of `DisplayDeviceResponsePtrInput` via:
//
//          DisplayDeviceResponseArgs{...}
//
//  or:
//
//          nil
type DisplayDeviceResponsePtrInput interface {
	pulumi.Input

	ToDisplayDeviceResponsePtrOutput() DisplayDeviceResponsePtrOutput
	ToDisplayDeviceResponsePtrOutputWithContext(context.Context) DisplayDeviceResponsePtrOutput
}

type displayDeviceResponsePtrType DisplayDeviceResponseArgs

func DisplayDeviceResponsePtr(v *DisplayDeviceResponseArgs) DisplayDeviceResponsePtrInput {
	return (*displayDeviceResponsePtrType)(v)
}

func (*displayDeviceResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DisplayDeviceResponse)(nil)).Elem()
}

func (i *displayDeviceResponsePtrType) ToDisplayDeviceResponsePtrOutput() DisplayDeviceResponsePtrOutput {
	return i.ToDisplayDeviceResponsePtrOutputWithContext(context.Background())
}

func (i *displayDeviceResponsePtrType) ToDisplayDeviceResponsePtrOutputWithContext(ctx context.Context) DisplayDeviceResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisplayDeviceResponsePtrOutput)
}

// A set of Display Device options
type DisplayDeviceResponseOutput struct{ *pulumi.OutputState }

func (DisplayDeviceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DisplayDeviceResponse)(nil)).Elem()
}

func (o DisplayDeviceResponseOutput) ToDisplayDeviceResponseOutput() DisplayDeviceResponseOutput {
	return o
}

func (o DisplayDeviceResponseOutput) ToDisplayDeviceResponseOutputWithContext(ctx context.Context) DisplayDeviceResponseOutput {
	return o
}

func (o DisplayDeviceResponseOutput) ToDisplayDeviceResponsePtrOutput() DisplayDeviceResponsePtrOutput {
	return o.ToDisplayDeviceResponsePtrOutputWithContext(context.Background())
}

func (o DisplayDeviceResponseOutput) ToDisplayDeviceResponsePtrOutputWithContext(ctx context.Context) DisplayDeviceResponsePtrOutput {
	return o.ApplyT(func(v DisplayDeviceResponse) *DisplayDeviceResponse {
		return &v
	}).(DisplayDeviceResponsePtrOutput)
}

// Defines whether the instance has Display enabled.
func (o DisplayDeviceResponseOutput) EnableDisplay() pulumi.BoolOutput {
	return o.ApplyT(func(v DisplayDeviceResponse) bool { return v.EnableDisplay }).(pulumi.BoolOutput)
}

type DisplayDeviceResponsePtrOutput struct{ *pulumi.OutputState }

func (DisplayDeviceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DisplayDeviceResponse)(nil)).Elem()
}

func (o DisplayDeviceResponsePtrOutput) ToDisplayDeviceResponsePtrOutput() DisplayDeviceResponsePtrOutput {
	return o
}

func (o DisplayDeviceResponsePtrOutput) ToDisplayDeviceResponsePtrOutputWithContext(ctx context.Context) DisplayDeviceResponsePtrOutput {
	return o
}

func (o DisplayDeviceResponsePtrOutput) Elem() DisplayDeviceResponseOutput {
	return o.ApplyT(func(v *DisplayDeviceResponse) DisplayDeviceResponse { return *v }).(DisplayDeviceResponseOutput)
}

// Defines whether the instance has Display enabled.
func (o DisplayDeviceResponsePtrOutput) EnableDisplay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DisplayDeviceResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableDisplay
	}).(pulumi.BoolPtrOutput)
}

type DistributionPolicy struct {
	// The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).
	TargetShape *string `pulumi:"targetShape"`
	// Zones where the regional managed instance group will create and manage its instances.
	Zones []DistributionPolicyZoneConfiguration `pulumi:"zones"`
}

// DistributionPolicyInput is an input type that accepts DistributionPolicyArgs and DistributionPolicyOutput values.
// You can construct a concrete instance of `DistributionPolicyInput` via:
//
//          DistributionPolicyArgs{...}
type DistributionPolicyInput interface {
	pulumi.Input

	ToDistributionPolicyOutput() DistributionPolicyOutput
	ToDistributionPolicyOutputWithContext(context.Context) DistributionPolicyOutput
}

type DistributionPolicyArgs struct {
	// The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).
	TargetShape *DistributionPolicyTargetShape `pulumi:"targetShape"`
	// Zones where the regional managed instance group will create and manage its instances.
	Zones DistributionPolicyZoneConfigurationArrayInput `pulumi:"zones"`
}

func (DistributionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionPolicy)(nil)).Elem()
}

func (i DistributionPolicyArgs) ToDistributionPolicyOutput() DistributionPolicyOutput {
	return i.ToDistributionPolicyOutputWithContext(context.Background())
}

func (i DistributionPolicyArgs) ToDistributionPolicyOutputWithContext(ctx context.Context) DistributionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionPolicyOutput)
}

func (i DistributionPolicyArgs) ToDistributionPolicyPtrOutput() DistributionPolicyPtrOutput {
	return i.ToDistributionPolicyPtrOutputWithContext(context.Background())
}

func (i DistributionPolicyArgs) ToDistributionPolicyPtrOutputWithContext(ctx context.Context) DistributionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionPolicyOutput).ToDistributionPolicyPtrOutputWithContext(ctx)
}

// DistributionPolicyPtrInput is an input type that accepts DistributionPolicyArgs, DistributionPolicyPtr and DistributionPolicyPtrOutput values.
// You can construct a concrete instance of `DistributionPolicyPtrInput` via:
//
//          DistributionPolicyArgs{...}
//
//  or:
//
//          nil
type DistributionPolicyPtrInput interface {
	pulumi.Input

	ToDistributionPolicyPtrOutput() DistributionPolicyPtrOutput
	ToDistributionPolicyPtrOutputWithContext(context.Context) DistributionPolicyPtrOutput
}

type distributionPolicyPtrType DistributionPolicyArgs

func DistributionPolicyPtr(v *DistributionPolicyArgs) DistributionPolicyPtrInput {
	return (*distributionPolicyPtrType)(v)
}

func (*distributionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionPolicy)(nil)).Elem()
}

func (i *distributionPolicyPtrType) ToDistributionPolicyPtrOutput() DistributionPolicyPtrOutput {
	return i.ToDistributionPolicyPtrOutputWithContext(context.Background())
}

func (i *distributionPolicyPtrType) ToDistributionPolicyPtrOutputWithContext(ctx context.Context) DistributionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionPolicyPtrOutput)
}

type DistributionPolicyOutput struct{ *pulumi.OutputState }

func (DistributionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionPolicy)(nil)).Elem()
}

func (o DistributionPolicyOutput) ToDistributionPolicyOutput() DistributionPolicyOutput {
	return o
}

func (o DistributionPolicyOutput) ToDistributionPolicyOutputWithContext(ctx context.Context) DistributionPolicyOutput {
	return o
}

func (o DistributionPolicyOutput) ToDistributionPolicyPtrOutput() DistributionPolicyPtrOutput {
	return o.ToDistributionPolicyPtrOutputWithContext(context.Background())
}

func (o DistributionPolicyOutput) ToDistributionPolicyPtrOutputWithContext(ctx context.Context) DistributionPolicyPtrOutput {
	return o.ApplyT(func(v DistributionPolicy) *DistributionPolicy {
		return &v
	}).(DistributionPolicyPtrOutput)
}

// The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).
func (o DistributionPolicyOutput) TargetShape() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionPolicy) *string { return v.TargetShape }).(pulumi.StringPtrOutput)
}

// Zones where the regional managed instance group will create and manage its instances.
func (o DistributionPolicyOutput) Zones() DistributionPolicyZoneConfigurationArrayOutput {
	return o.ApplyT(func(v DistributionPolicy) []DistributionPolicyZoneConfiguration { return v.Zones }).(DistributionPolicyZoneConfigurationArrayOutput)
}

type DistributionPolicyPtrOutput struct{ *pulumi.OutputState }

func (DistributionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionPolicy)(nil)).Elem()
}

func (o DistributionPolicyPtrOutput) ToDistributionPolicyPtrOutput() DistributionPolicyPtrOutput {
	return o
}

func (o DistributionPolicyPtrOutput) ToDistributionPolicyPtrOutputWithContext(ctx context.Context) DistributionPolicyPtrOutput {
	return o
}

func (o DistributionPolicyPtrOutput) Elem() DistributionPolicyOutput {
	return o.ApplyT(func(v *DistributionPolicy) DistributionPolicy { return *v }).(DistributionPolicyOutput)
}

// The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).
func (o DistributionPolicyPtrOutput) TargetShape() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.TargetShape
	}).(pulumi.StringPtrOutput)
}

// Zones where the regional managed instance group will create and manage its instances.
func (o DistributionPolicyPtrOutput) Zones() DistributionPolicyZoneConfigurationArrayOutput {
	return o.ApplyT(func(v *DistributionPolicy) []DistributionPolicyZoneConfiguration {
		if v == nil {
			return nil
		}
		return v.Zones
	}).(DistributionPolicyZoneConfigurationArrayOutput)
}

type DistributionPolicyResponse struct {
	// The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).
	TargetShape string `pulumi:"targetShape"`
	// Zones where the regional managed instance group will create and manage its instances.
	Zones []DistributionPolicyZoneConfigurationResponse `pulumi:"zones"`
}

// DistributionPolicyResponseInput is an input type that accepts DistributionPolicyResponseArgs and DistributionPolicyResponseOutput values.
// You can construct a concrete instance of `DistributionPolicyResponseInput` via:
//
//          DistributionPolicyResponseArgs{...}
type DistributionPolicyResponseInput interface {
	pulumi.Input

	ToDistributionPolicyResponseOutput() DistributionPolicyResponseOutput
	ToDistributionPolicyResponseOutputWithContext(context.Context) DistributionPolicyResponseOutput
}

type DistributionPolicyResponseArgs struct {
	// The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).
	TargetShape pulumi.StringInput `pulumi:"targetShape"`
	// Zones where the regional managed instance group will create and manage its instances.
	Zones DistributionPolicyZoneConfigurationResponseArrayInput `pulumi:"zones"`
}

func (DistributionPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionPolicyResponse)(nil)).Elem()
}

func (i DistributionPolicyResponseArgs) ToDistributionPolicyResponseOutput() DistributionPolicyResponseOutput {
	return i.ToDistributionPolicyResponseOutputWithContext(context.Background())
}

func (i DistributionPolicyResponseArgs) ToDistributionPolicyResponseOutputWithContext(ctx context.Context) DistributionPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionPolicyResponseOutput)
}

func (i DistributionPolicyResponseArgs) ToDistributionPolicyResponsePtrOutput() DistributionPolicyResponsePtrOutput {
	return i.ToDistributionPolicyResponsePtrOutputWithContext(context.Background())
}

func (i DistributionPolicyResponseArgs) ToDistributionPolicyResponsePtrOutputWithContext(ctx context.Context) DistributionPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionPolicyResponseOutput).ToDistributionPolicyResponsePtrOutputWithContext(ctx)
}

// DistributionPolicyResponsePtrInput is an input type that accepts DistributionPolicyResponseArgs, DistributionPolicyResponsePtr and DistributionPolicyResponsePtrOutput values.
// You can construct a concrete instance of `DistributionPolicyResponsePtrInput` via:
//
//          DistributionPolicyResponseArgs{...}
//
//  or:
//
//          nil
type DistributionPolicyResponsePtrInput interface {
	pulumi.Input

	ToDistributionPolicyResponsePtrOutput() DistributionPolicyResponsePtrOutput
	ToDistributionPolicyResponsePtrOutputWithContext(context.Context) DistributionPolicyResponsePtrOutput
}

type distributionPolicyResponsePtrType DistributionPolicyResponseArgs

func DistributionPolicyResponsePtr(v *DistributionPolicyResponseArgs) DistributionPolicyResponsePtrInput {
	return (*distributionPolicyResponsePtrType)(v)
}

func (*distributionPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionPolicyResponse)(nil)).Elem()
}

func (i *distributionPolicyResponsePtrType) ToDistributionPolicyResponsePtrOutput() DistributionPolicyResponsePtrOutput {
	return i.ToDistributionPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *distributionPolicyResponsePtrType) ToDistributionPolicyResponsePtrOutputWithContext(ctx context.Context) DistributionPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionPolicyResponsePtrOutput)
}

type DistributionPolicyResponseOutput struct{ *pulumi.OutputState }

func (DistributionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionPolicyResponse)(nil)).Elem()
}

func (o DistributionPolicyResponseOutput) ToDistributionPolicyResponseOutput() DistributionPolicyResponseOutput {
	return o
}

func (o DistributionPolicyResponseOutput) ToDistributionPolicyResponseOutputWithContext(ctx context.Context) DistributionPolicyResponseOutput {
	return o
}

func (o DistributionPolicyResponseOutput) ToDistributionPolicyResponsePtrOutput() DistributionPolicyResponsePtrOutput {
	return o.ToDistributionPolicyResponsePtrOutputWithContext(context.Background())
}

func (o DistributionPolicyResponseOutput) ToDistributionPolicyResponsePtrOutputWithContext(ctx context.Context) DistributionPolicyResponsePtrOutput {
	return o.ApplyT(func(v DistributionPolicyResponse) *DistributionPolicyResponse {
		return &v
	}).(DistributionPolicyResponsePtrOutput)
}

// The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).
func (o DistributionPolicyResponseOutput) TargetShape() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionPolicyResponse) string { return v.TargetShape }).(pulumi.StringOutput)
}

// Zones where the regional managed instance group will create and manage its instances.
func (o DistributionPolicyResponseOutput) Zones() DistributionPolicyZoneConfigurationResponseArrayOutput {
	return o.ApplyT(func(v DistributionPolicyResponse) []DistributionPolicyZoneConfigurationResponse { return v.Zones }).(DistributionPolicyZoneConfigurationResponseArrayOutput)
}

type DistributionPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (DistributionPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DistributionPolicyResponse)(nil)).Elem()
}

func (o DistributionPolicyResponsePtrOutput) ToDistributionPolicyResponsePtrOutput() DistributionPolicyResponsePtrOutput {
	return o
}

func (o DistributionPolicyResponsePtrOutput) ToDistributionPolicyResponsePtrOutputWithContext(ctx context.Context) DistributionPolicyResponsePtrOutput {
	return o
}

func (o DistributionPolicyResponsePtrOutput) Elem() DistributionPolicyResponseOutput {
	return o.ApplyT(func(v *DistributionPolicyResponse) DistributionPolicyResponse { return *v }).(DistributionPolicyResponseOutput)
}

// The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).
func (o DistributionPolicyResponsePtrOutput) TargetShape() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DistributionPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TargetShape
	}).(pulumi.StringPtrOutput)
}

// Zones where the regional managed instance group will create and manage its instances.
func (o DistributionPolicyResponsePtrOutput) Zones() DistributionPolicyZoneConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *DistributionPolicyResponse) []DistributionPolicyZoneConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Zones
	}).(DistributionPolicyZoneConfigurationResponseArrayOutput)
}

type DistributionPolicyZoneConfiguration struct {
	// The URL of the zone. The zone must exist in the region where the managed instance group is located.
	Zone *string `pulumi:"zone"`
}

// DistributionPolicyZoneConfigurationInput is an input type that accepts DistributionPolicyZoneConfigurationArgs and DistributionPolicyZoneConfigurationOutput values.
// You can construct a concrete instance of `DistributionPolicyZoneConfigurationInput` via:
//
//          DistributionPolicyZoneConfigurationArgs{...}
type DistributionPolicyZoneConfigurationInput interface {
	pulumi.Input

	ToDistributionPolicyZoneConfigurationOutput() DistributionPolicyZoneConfigurationOutput
	ToDistributionPolicyZoneConfigurationOutputWithContext(context.Context) DistributionPolicyZoneConfigurationOutput
}

type DistributionPolicyZoneConfigurationArgs struct {
	// The URL of the zone. The zone must exist in the region where the managed instance group is located.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (DistributionPolicyZoneConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionPolicyZoneConfiguration)(nil)).Elem()
}

func (i DistributionPolicyZoneConfigurationArgs) ToDistributionPolicyZoneConfigurationOutput() DistributionPolicyZoneConfigurationOutput {
	return i.ToDistributionPolicyZoneConfigurationOutputWithContext(context.Background())
}

func (i DistributionPolicyZoneConfigurationArgs) ToDistributionPolicyZoneConfigurationOutputWithContext(ctx context.Context) DistributionPolicyZoneConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionPolicyZoneConfigurationOutput)
}

// DistributionPolicyZoneConfigurationArrayInput is an input type that accepts DistributionPolicyZoneConfigurationArray and DistributionPolicyZoneConfigurationArrayOutput values.
// You can construct a concrete instance of `DistributionPolicyZoneConfigurationArrayInput` via:
//
//          DistributionPolicyZoneConfigurationArray{ DistributionPolicyZoneConfigurationArgs{...} }
type DistributionPolicyZoneConfigurationArrayInput interface {
	pulumi.Input

	ToDistributionPolicyZoneConfigurationArrayOutput() DistributionPolicyZoneConfigurationArrayOutput
	ToDistributionPolicyZoneConfigurationArrayOutputWithContext(context.Context) DistributionPolicyZoneConfigurationArrayOutput
}

type DistributionPolicyZoneConfigurationArray []DistributionPolicyZoneConfigurationInput

func (DistributionPolicyZoneConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionPolicyZoneConfiguration)(nil)).Elem()
}

func (i DistributionPolicyZoneConfigurationArray) ToDistributionPolicyZoneConfigurationArrayOutput() DistributionPolicyZoneConfigurationArrayOutput {
	return i.ToDistributionPolicyZoneConfigurationArrayOutputWithContext(context.Background())
}

func (i DistributionPolicyZoneConfigurationArray) ToDistributionPolicyZoneConfigurationArrayOutputWithContext(ctx context.Context) DistributionPolicyZoneConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionPolicyZoneConfigurationArrayOutput)
}

type DistributionPolicyZoneConfigurationOutput struct{ *pulumi.OutputState }

func (DistributionPolicyZoneConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionPolicyZoneConfiguration)(nil)).Elem()
}

func (o DistributionPolicyZoneConfigurationOutput) ToDistributionPolicyZoneConfigurationOutput() DistributionPolicyZoneConfigurationOutput {
	return o
}

func (o DistributionPolicyZoneConfigurationOutput) ToDistributionPolicyZoneConfigurationOutputWithContext(ctx context.Context) DistributionPolicyZoneConfigurationOutput {
	return o
}

// The URL of the zone. The zone must exist in the region where the managed instance group is located.
func (o DistributionPolicyZoneConfigurationOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DistributionPolicyZoneConfiguration) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type DistributionPolicyZoneConfigurationArrayOutput struct{ *pulumi.OutputState }

func (DistributionPolicyZoneConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionPolicyZoneConfiguration)(nil)).Elem()
}

func (o DistributionPolicyZoneConfigurationArrayOutput) ToDistributionPolicyZoneConfigurationArrayOutput() DistributionPolicyZoneConfigurationArrayOutput {
	return o
}

func (o DistributionPolicyZoneConfigurationArrayOutput) ToDistributionPolicyZoneConfigurationArrayOutputWithContext(ctx context.Context) DistributionPolicyZoneConfigurationArrayOutput {
	return o
}

func (o DistributionPolicyZoneConfigurationArrayOutput) Index(i pulumi.IntInput) DistributionPolicyZoneConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DistributionPolicyZoneConfiguration {
		return vs[0].([]DistributionPolicyZoneConfiguration)[vs[1].(int)]
	}).(DistributionPolicyZoneConfigurationOutput)
}

type DistributionPolicyZoneConfigurationResponse struct {
	// The URL of the zone. The zone must exist in the region where the managed instance group is located.
	Zone string `pulumi:"zone"`
}

// DistributionPolicyZoneConfigurationResponseInput is an input type that accepts DistributionPolicyZoneConfigurationResponseArgs and DistributionPolicyZoneConfigurationResponseOutput values.
// You can construct a concrete instance of `DistributionPolicyZoneConfigurationResponseInput` via:
//
//          DistributionPolicyZoneConfigurationResponseArgs{...}
type DistributionPolicyZoneConfigurationResponseInput interface {
	pulumi.Input

	ToDistributionPolicyZoneConfigurationResponseOutput() DistributionPolicyZoneConfigurationResponseOutput
	ToDistributionPolicyZoneConfigurationResponseOutputWithContext(context.Context) DistributionPolicyZoneConfigurationResponseOutput
}

type DistributionPolicyZoneConfigurationResponseArgs struct {
	// The URL of the zone. The zone must exist in the region where the managed instance group is located.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (DistributionPolicyZoneConfigurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionPolicyZoneConfigurationResponse)(nil)).Elem()
}

func (i DistributionPolicyZoneConfigurationResponseArgs) ToDistributionPolicyZoneConfigurationResponseOutput() DistributionPolicyZoneConfigurationResponseOutput {
	return i.ToDistributionPolicyZoneConfigurationResponseOutputWithContext(context.Background())
}

func (i DistributionPolicyZoneConfigurationResponseArgs) ToDistributionPolicyZoneConfigurationResponseOutputWithContext(ctx context.Context) DistributionPolicyZoneConfigurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionPolicyZoneConfigurationResponseOutput)
}

// DistributionPolicyZoneConfigurationResponseArrayInput is an input type that accepts DistributionPolicyZoneConfigurationResponseArray and DistributionPolicyZoneConfigurationResponseArrayOutput values.
// You can construct a concrete instance of `DistributionPolicyZoneConfigurationResponseArrayInput` via:
//
//          DistributionPolicyZoneConfigurationResponseArray{ DistributionPolicyZoneConfigurationResponseArgs{...} }
type DistributionPolicyZoneConfigurationResponseArrayInput interface {
	pulumi.Input

	ToDistributionPolicyZoneConfigurationResponseArrayOutput() DistributionPolicyZoneConfigurationResponseArrayOutput
	ToDistributionPolicyZoneConfigurationResponseArrayOutputWithContext(context.Context) DistributionPolicyZoneConfigurationResponseArrayOutput
}

type DistributionPolicyZoneConfigurationResponseArray []DistributionPolicyZoneConfigurationResponseInput

func (DistributionPolicyZoneConfigurationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionPolicyZoneConfigurationResponse)(nil)).Elem()
}

func (i DistributionPolicyZoneConfigurationResponseArray) ToDistributionPolicyZoneConfigurationResponseArrayOutput() DistributionPolicyZoneConfigurationResponseArrayOutput {
	return i.ToDistributionPolicyZoneConfigurationResponseArrayOutputWithContext(context.Background())
}

func (i DistributionPolicyZoneConfigurationResponseArray) ToDistributionPolicyZoneConfigurationResponseArrayOutputWithContext(ctx context.Context) DistributionPolicyZoneConfigurationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DistributionPolicyZoneConfigurationResponseArrayOutput)
}

type DistributionPolicyZoneConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DistributionPolicyZoneConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistributionPolicyZoneConfigurationResponse)(nil)).Elem()
}

func (o DistributionPolicyZoneConfigurationResponseOutput) ToDistributionPolicyZoneConfigurationResponseOutput() DistributionPolicyZoneConfigurationResponseOutput {
	return o
}

func (o DistributionPolicyZoneConfigurationResponseOutput) ToDistributionPolicyZoneConfigurationResponseOutputWithContext(ctx context.Context) DistributionPolicyZoneConfigurationResponseOutput {
	return o
}

// The URL of the zone. The zone must exist in the region where the managed instance group is located.
func (o DistributionPolicyZoneConfigurationResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v DistributionPolicyZoneConfigurationResponse) string { return v.Zone }).(pulumi.StringOutput)
}

type DistributionPolicyZoneConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (DistributionPolicyZoneConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DistributionPolicyZoneConfigurationResponse)(nil)).Elem()
}

func (o DistributionPolicyZoneConfigurationResponseArrayOutput) ToDistributionPolicyZoneConfigurationResponseArrayOutput() DistributionPolicyZoneConfigurationResponseArrayOutput {
	return o
}

func (o DistributionPolicyZoneConfigurationResponseArrayOutput) ToDistributionPolicyZoneConfigurationResponseArrayOutputWithContext(ctx context.Context) DistributionPolicyZoneConfigurationResponseArrayOutput {
	return o
}

func (o DistributionPolicyZoneConfigurationResponseArrayOutput) Index(i pulumi.IntInput) DistributionPolicyZoneConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DistributionPolicyZoneConfigurationResponse {
		return vs[0].([]DistributionPolicyZoneConfigurationResponse)[vs[1].(int)]
	}).(DistributionPolicyZoneConfigurationResponseOutput)
}

// A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years.
type Duration struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos *int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
	Seconds *string `pulumi:"seconds"`
}

// DurationInput is an input type that accepts DurationArgs and DurationOutput values.
// You can construct a concrete instance of `DurationInput` via:
//
//          DurationArgs{...}
type DurationInput interface {
	pulumi.Input

	ToDurationOutput() DurationOutput
	ToDurationOutputWithContext(context.Context) DurationOutput
}

// A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years.
type DurationArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
	Seconds pulumi.StringPtrInput `pulumi:"seconds"`
}

func (DurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Duration)(nil)).Elem()
}

func (i DurationArgs) ToDurationOutput() DurationOutput {
	return i.ToDurationOutputWithContext(context.Background())
}

func (i DurationArgs) ToDurationOutputWithContext(ctx context.Context) DurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DurationOutput)
}

func (i DurationArgs) ToDurationPtrOutput() DurationPtrOutput {
	return i.ToDurationPtrOutputWithContext(context.Background())
}

func (i DurationArgs) ToDurationPtrOutputWithContext(ctx context.Context) DurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DurationOutput).ToDurationPtrOutputWithContext(ctx)
}

// DurationPtrInput is an input type that accepts DurationArgs, DurationPtr and DurationPtrOutput values.
// You can construct a concrete instance of `DurationPtrInput` via:
//
//          DurationArgs{...}
//
//  or:
//
//          nil
type DurationPtrInput interface {
	pulumi.Input

	ToDurationPtrOutput() DurationPtrOutput
	ToDurationPtrOutputWithContext(context.Context) DurationPtrOutput
}

type durationPtrType DurationArgs

func DurationPtr(v *DurationArgs) DurationPtrInput {
	return (*durationPtrType)(v)
}

func (*durationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Duration)(nil)).Elem()
}

func (i *durationPtrType) ToDurationPtrOutput() DurationPtrOutput {
	return i.ToDurationPtrOutputWithContext(context.Background())
}

func (i *durationPtrType) ToDurationPtrOutputWithContext(ctx context.Context) DurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DurationPtrOutput)
}

// A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years.
type DurationOutput struct{ *pulumi.OutputState }

func (DurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Duration)(nil)).Elem()
}

func (o DurationOutput) ToDurationOutput() DurationOutput {
	return o
}

func (o DurationOutput) ToDurationOutputWithContext(ctx context.Context) DurationOutput {
	return o
}

func (o DurationOutput) ToDurationPtrOutput() DurationPtrOutput {
	return o.ToDurationPtrOutputWithContext(context.Background())
}

func (o DurationOutput) ToDurationPtrOutputWithContext(ctx context.Context) DurationPtrOutput {
	return o.ApplyT(func(v Duration) *Duration {
		return &v
	}).(DurationPtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o DurationOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Duration) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
func (o DurationOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Duration) *string { return v.Seconds }).(pulumi.StringPtrOutput)
}

type DurationPtrOutput struct{ *pulumi.OutputState }

func (DurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Duration)(nil)).Elem()
}

func (o DurationPtrOutput) ToDurationPtrOutput() DurationPtrOutput {
	return o
}

func (o DurationPtrOutput) ToDurationPtrOutputWithContext(ctx context.Context) DurationPtrOutput {
	return o
}

func (o DurationPtrOutput) Elem() DurationOutput {
	return o.ApplyT(func(v *Duration) Duration { return *v }).(DurationOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o DurationPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Duration) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
func (o DurationPtrOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Duration) *string {
		if v == nil {
			return nil
		}
		return v.Seconds
	}).(pulumi.StringPtrOutput)
}

// A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years.
type DurationResponse struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos int `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
	Seconds string `pulumi:"seconds"`
}

// DurationResponseInput is an input type that accepts DurationResponseArgs and DurationResponseOutput values.
// You can construct a concrete instance of `DurationResponseInput` via:
//
//          DurationResponseArgs{...}
type DurationResponseInput interface {
	pulumi.Input

	ToDurationResponseOutput() DurationResponseOutput
	ToDurationResponseOutputWithContext(context.Context) DurationResponseOutput
}

// A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years.
type DurationResponseArgs struct {
	// Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.
	Nanos pulumi.IntInput `pulumi:"nanos"`
	// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
	Seconds pulumi.StringInput `pulumi:"seconds"`
}

func (DurationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DurationResponse)(nil)).Elem()
}

func (i DurationResponseArgs) ToDurationResponseOutput() DurationResponseOutput {
	return i.ToDurationResponseOutputWithContext(context.Background())
}

func (i DurationResponseArgs) ToDurationResponseOutputWithContext(ctx context.Context) DurationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DurationResponseOutput)
}

func (i DurationResponseArgs) ToDurationResponsePtrOutput() DurationResponsePtrOutput {
	return i.ToDurationResponsePtrOutputWithContext(context.Background())
}

func (i DurationResponseArgs) ToDurationResponsePtrOutputWithContext(ctx context.Context) DurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DurationResponseOutput).ToDurationResponsePtrOutputWithContext(ctx)
}

// DurationResponsePtrInput is an input type that accepts DurationResponseArgs, DurationResponsePtr and DurationResponsePtrOutput values.
// You can construct a concrete instance of `DurationResponsePtrInput` via:
//
//          DurationResponseArgs{...}
//
//  or:
//
//          nil
type DurationResponsePtrInput interface {
	pulumi.Input

	ToDurationResponsePtrOutput() DurationResponsePtrOutput
	ToDurationResponsePtrOutputWithContext(context.Context) DurationResponsePtrOutput
}

type durationResponsePtrType DurationResponseArgs

func DurationResponsePtr(v *DurationResponseArgs) DurationResponsePtrInput {
	return (*durationResponsePtrType)(v)
}

func (*durationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DurationResponse)(nil)).Elem()
}

func (i *durationResponsePtrType) ToDurationResponsePtrOutput() DurationResponsePtrOutput {
	return i.ToDurationResponsePtrOutputWithContext(context.Background())
}

func (i *durationResponsePtrType) ToDurationResponsePtrOutputWithContext(ctx context.Context) DurationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DurationResponsePtrOutput)
}

// A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". Range is approximately 10,000 years.
type DurationResponseOutput struct{ *pulumi.OutputState }

func (DurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DurationResponse)(nil)).Elem()
}

func (o DurationResponseOutput) ToDurationResponseOutput() DurationResponseOutput {
	return o
}

func (o DurationResponseOutput) ToDurationResponseOutputWithContext(ctx context.Context) DurationResponseOutput {
	return o
}

func (o DurationResponseOutput) ToDurationResponsePtrOutput() DurationResponsePtrOutput {
	return o.ToDurationResponsePtrOutputWithContext(context.Background())
}

func (o DurationResponseOutput) ToDurationResponsePtrOutputWithContext(ctx context.Context) DurationResponsePtrOutput {
	return o.ApplyT(func(v DurationResponse) *DurationResponse {
		return &v
	}).(DurationResponsePtrOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o DurationResponseOutput) Nanos() pulumi.IntOutput {
	return o.ApplyT(func(v DurationResponse) int { return v.Nanos }).(pulumi.IntOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
func (o DurationResponseOutput) Seconds() pulumi.StringOutput {
	return o.ApplyT(func(v DurationResponse) string { return v.Seconds }).(pulumi.StringOutput)
}

type DurationResponsePtrOutput struct{ *pulumi.OutputState }

func (DurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DurationResponse)(nil)).Elem()
}

func (o DurationResponsePtrOutput) ToDurationResponsePtrOutput() DurationResponsePtrOutput {
	return o
}

func (o DurationResponsePtrOutput) ToDurationResponsePtrOutputWithContext(ctx context.Context) DurationResponsePtrOutput {
	return o
}

func (o DurationResponsePtrOutput) Elem() DurationResponseOutput {
	return o.ApplyT(func(v *DurationResponse) DurationResponse { return *v }).(DurationResponseOutput)
}

// Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.
func (o DurationResponsePtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DurationResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Nanos
	}).(pulumi.IntPtrOutput)
}

// Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
func (o DurationResponsePtrOutput) Seconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Seconds
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// ExprResponseInput is an input type that accepts ExprResponseArgs and ExprResponseOutput values.
// You can construct a concrete instance of `ExprResponseInput` via:
//
//          ExprResponseArgs{...}
type ExprResponseInput interface {
	pulumi.Input

	ToExprResponseOutput() ExprResponseOutput
	ToExprResponseOutputWithContext(context.Context) ExprResponseOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringInput `pulumi:"title"`
}

func (ExprResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (i ExprResponseArgs) ToExprResponseOutput() ExprResponseOutput {
	return i.ToExprResponseOutputWithContext(context.Background())
}

func (i ExprResponseArgs) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// The interface for the external VPN gateway.
type ExternalVpnGatewayInterface struct {
	// The numeric ID of this interface. The allowed input values for this id for different redundancy types of external VPN gateway: - SINGLE_IP_INTERNALLY_REDUNDANT - 0 - TWO_IPS_REDUNDANCY - 0, 1 - FOUR_IPS_REDUNDANCY - 0, 1, 2, 3
	Id *int `pulumi:"id"`
	// IP address of the interface in the external VPN gateway. Only IPv4 is supported. This IP address can be either from your on-premise gateway or another Cloud provider's VPN gateway, it cannot be an IP address from Google Compute Engine.
	IpAddress *string `pulumi:"ipAddress"`
}

// ExternalVpnGatewayInterfaceInput is an input type that accepts ExternalVpnGatewayInterfaceArgs and ExternalVpnGatewayInterfaceOutput values.
// You can construct a concrete instance of `ExternalVpnGatewayInterfaceInput` via:
//
//          ExternalVpnGatewayInterfaceArgs{...}
type ExternalVpnGatewayInterfaceInput interface {
	pulumi.Input

	ToExternalVpnGatewayInterfaceOutput() ExternalVpnGatewayInterfaceOutput
	ToExternalVpnGatewayInterfaceOutputWithContext(context.Context) ExternalVpnGatewayInterfaceOutput
}

// The interface for the external VPN gateway.
type ExternalVpnGatewayInterfaceArgs struct {
	// The numeric ID of this interface. The allowed input values for this id for different redundancy types of external VPN gateway: - SINGLE_IP_INTERNALLY_REDUNDANT - 0 - TWO_IPS_REDUNDANCY - 0, 1 - FOUR_IPS_REDUNDANCY - 0, 1, 2, 3
	Id pulumi.IntPtrInput `pulumi:"id"`
	// IP address of the interface in the external VPN gateway. Only IPv4 is supported. This IP address can be either from your on-premise gateway or another Cloud provider's VPN gateway, it cannot be an IP address from Google Compute Engine.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
}

func (ExternalVpnGatewayInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVpnGatewayInterface)(nil)).Elem()
}

func (i ExternalVpnGatewayInterfaceArgs) ToExternalVpnGatewayInterfaceOutput() ExternalVpnGatewayInterfaceOutput {
	return i.ToExternalVpnGatewayInterfaceOutputWithContext(context.Background())
}

func (i ExternalVpnGatewayInterfaceArgs) ToExternalVpnGatewayInterfaceOutputWithContext(ctx context.Context) ExternalVpnGatewayInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVpnGatewayInterfaceOutput)
}

// ExternalVpnGatewayInterfaceArrayInput is an input type that accepts ExternalVpnGatewayInterfaceArray and ExternalVpnGatewayInterfaceArrayOutput values.
// You can construct a concrete instance of `ExternalVpnGatewayInterfaceArrayInput` via:
//
//          ExternalVpnGatewayInterfaceArray{ ExternalVpnGatewayInterfaceArgs{...} }
type ExternalVpnGatewayInterfaceArrayInput interface {
	pulumi.Input

	ToExternalVpnGatewayInterfaceArrayOutput() ExternalVpnGatewayInterfaceArrayOutput
	ToExternalVpnGatewayInterfaceArrayOutputWithContext(context.Context) ExternalVpnGatewayInterfaceArrayOutput
}

type ExternalVpnGatewayInterfaceArray []ExternalVpnGatewayInterfaceInput

func (ExternalVpnGatewayInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalVpnGatewayInterface)(nil)).Elem()
}

func (i ExternalVpnGatewayInterfaceArray) ToExternalVpnGatewayInterfaceArrayOutput() ExternalVpnGatewayInterfaceArrayOutput {
	return i.ToExternalVpnGatewayInterfaceArrayOutputWithContext(context.Background())
}

func (i ExternalVpnGatewayInterfaceArray) ToExternalVpnGatewayInterfaceArrayOutputWithContext(ctx context.Context) ExternalVpnGatewayInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVpnGatewayInterfaceArrayOutput)
}

// The interface for the external VPN gateway.
type ExternalVpnGatewayInterfaceOutput struct{ *pulumi.OutputState }

func (ExternalVpnGatewayInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVpnGatewayInterface)(nil)).Elem()
}

func (o ExternalVpnGatewayInterfaceOutput) ToExternalVpnGatewayInterfaceOutput() ExternalVpnGatewayInterfaceOutput {
	return o
}

func (o ExternalVpnGatewayInterfaceOutput) ToExternalVpnGatewayInterfaceOutputWithContext(ctx context.Context) ExternalVpnGatewayInterfaceOutput {
	return o
}

// The numeric ID of this interface. The allowed input values for this id for different redundancy types of external VPN gateway: - SINGLE_IP_INTERNALLY_REDUNDANT - 0 - TWO_IPS_REDUNDANCY - 0, 1 - FOUR_IPS_REDUNDANCY - 0, 1, 2, 3
func (o ExternalVpnGatewayInterfaceOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExternalVpnGatewayInterface) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// IP address of the interface in the external VPN gateway. Only IPv4 is supported. This IP address can be either from your on-premise gateway or another Cloud provider's VPN gateway, it cannot be an IP address from Google Compute Engine.
func (o ExternalVpnGatewayInterfaceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalVpnGatewayInterface) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

type ExternalVpnGatewayInterfaceArrayOutput struct{ *pulumi.OutputState }

func (ExternalVpnGatewayInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalVpnGatewayInterface)(nil)).Elem()
}

func (o ExternalVpnGatewayInterfaceArrayOutput) ToExternalVpnGatewayInterfaceArrayOutput() ExternalVpnGatewayInterfaceArrayOutput {
	return o
}

func (o ExternalVpnGatewayInterfaceArrayOutput) ToExternalVpnGatewayInterfaceArrayOutputWithContext(ctx context.Context) ExternalVpnGatewayInterfaceArrayOutput {
	return o
}

func (o ExternalVpnGatewayInterfaceArrayOutput) Index(i pulumi.IntInput) ExternalVpnGatewayInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalVpnGatewayInterface {
		return vs[0].([]ExternalVpnGatewayInterface)[vs[1].(int)]
	}).(ExternalVpnGatewayInterfaceOutput)
}

// The interface for the external VPN gateway.
type ExternalVpnGatewayInterfaceResponse struct {
	// IP address of the interface in the external VPN gateway. Only IPv4 is supported. This IP address can be either from your on-premise gateway or another Cloud provider's VPN gateway, it cannot be an IP address from Google Compute Engine.
	IpAddress string `pulumi:"ipAddress"`
}

// ExternalVpnGatewayInterfaceResponseInput is an input type that accepts ExternalVpnGatewayInterfaceResponseArgs and ExternalVpnGatewayInterfaceResponseOutput values.
// You can construct a concrete instance of `ExternalVpnGatewayInterfaceResponseInput` via:
//
//          ExternalVpnGatewayInterfaceResponseArgs{...}
type ExternalVpnGatewayInterfaceResponseInput interface {
	pulumi.Input

	ToExternalVpnGatewayInterfaceResponseOutput() ExternalVpnGatewayInterfaceResponseOutput
	ToExternalVpnGatewayInterfaceResponseOutputWithContext(context.Context) ExternalVpnGatewayInterfaceResponseOutput
}

// The interface for the external VPN gateway.
type ExternalVpnGatewayInterfaceResponseArgs struct {
	// IP address of the interface in the external VPN gateway. Only IPv4 is supported. This IP address can be either from your on-premise gateway or another Cloud provider's VPN gateway, it cannot be an IP address from Google Compute Engine.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
}

func (ExternalVpnGatewayInterfaceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVpnGatewayInterfaceResponse)(nil)).Elem()
}

func (i ExternalVpnGatewayInterfaceResponseArgs) ToExternalVpnGatewayInterfaceResponseOutput() ExternalVpnGatewayInterfaceResponseOutput {
	return i.ToExternalVpnGatewayInterfaceResponseOutputWithContext(context.Background())
}

func (i ExternalVpnGatewayInterfaceResponseArgs) ToExternalVpnGatewayInterfaceResponseOutputWithContext(ctx context.Context) ExternalVpnGatewayInterfaceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVpnGatewayInterfaceResponseOutput)
}

// ExternalVpnGatewayInterfaceResponseArrayInput is an input type that accepts ExternalVpnGatewayInterfaceResponseArray and ExternalVpnGatewayInterfaceResponseArrayOutput values.
// You can construct a concrete instance of `ExternalVpnGatewayInterfaceResponseArrayInput` via:
//
//          ExternalVpnGatewayInterfaceResponseArray{ ExternalVpnGatewayInterfaceResponseArgs{...} }
type ExternalVpnGatewayInterfaceResponseArrayInput interface {
	pulumi.Input

	ToExternalVpnGatewayInterfaceResponseArrayOutput() ExternalVpnGatewayInterfaceResponseArrayOutput
	ToExternalVpnGatewayInterfaceResponseArrayOutputWithContext(context.Context) ExternalVpnGatewayInterfaceResponseArrayOutput
}

type ExternalVpnGatewayInterfaceResponseArray []ExternalVpnGatewayInterfaceResponseInput

func (ExternalVpnGatewayInterfaceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalVpnGatewayInterfaceResponse)(nil)).Elem()
}

func (i ExternalVpnGatewayInterfaceResponseArray) ToExternalVpnGatewayInterfaceResponseArrayOutput() ExternalVpnGatewayInterfaceResponseArrayOutput {
	return i.ToExternalVpnGatewayInterfaceResponseArrayOutputWithContext(context.Background())
}

func (i ExternalVpnGatewayInterfaceResponseArray) ToExternalVpnGatewayInterfaceResponseArrayOutputWithContext(ctx context.Context) ExternalVpnGatewayInterfaceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalVpnGatewayInterfaceResponseArrayOutput)
}

// The interface for the external VPN gateway.
type ExternalVpnGatewayInterfaceResponseOutput struct{ *pulumi.OutputState }

func (ExternalVpnGatewayInterfaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalVpnGatewayInterfaceResponse)(nil)).Elem()
}

func (o ExternalVpnGatewayInterfaceResponseOutput) ToExternalVpnGatewayInterfaceResponseOutput() ExternalVpnGatewayInterfaceResponseOutput {
	return o
}

func (o ExternalVpnGatewayInterfaceResponseOutput) ToExternalVpnGatewayInterfaceResponseOutputWithContext(ctx context.Context) ExternalVpnGatewayInterfaceResponseOutput {
	return o
}

// IP address of the interface in the external VPN gateway. Only IPv4 is supported. This IP address can be either from your on-premise gateway or another Cloud provider's VPN gateway, it cannot be an IP address from Google Compute Engine.
func (o ExternalVpnGatewayInterfaceResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalVpnGatewayInterfaceResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

type ExternalVpnGatewayInterfaceResponseArrayOutput struct{ *pulumi.OutputState }

func (ExternalVpnGatewayInterfaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalVpnGatewayInterfaceResponse)(nil)).Elem()
}

func (o ExternalVpnGatewayInterfaceResponseArrayOutput) ToExternalVpnGatewayInterfaceResponseArrayOutput() ExternalVpnGatewayInterfaceResponseArrayOutput {
	return o
}

func (o ExternalVpnGatewayInterfaceResponseArrayOutput) ToExternalVpnGatewayInterfaceResponseArrayOutputWithContext(ctx context.Context) ExternalVpnGatewayInterfaceResponseArrayOutput {
	return o
}

func (o ExternalVpnGatewayInterfaceResponseArrayOutput) Index(i pulumi.IntInput) ExternalVpnGatewayInterfaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalVpnGatewayInterfaceResponse {
		return vs[0].([]ExternalVpnGatewayInterfaceResponse)[vs[1].(int)]
	}).(ExternalVpnGatewayInterfaceResponseOutput)
}

type FileContentBuffer struct {
	// The raw content in the secure keys file.
	Content *string `pulumi:"content"`
	// The file type of source file.
	FileType *string `pulumi:"fileType"`
}

// FileContentBufferInput is an input type that accepts FileContentBufferArgs and FileContentBufferOutput values.
// You can construct a concrete instance of `FileContentBufferInput` via:
//
//          FileContentBufferArgs{...}
type FileContentBufferInput interface {
	pulumi.Input

	ToFileContentBufferOutput() FileContentBufferOutput
	ToFileContentBufferOutputWithContext(context.Context) FileContentBufferOutput
}

type FileContentBufferArgs struct {
	// The raw content in the secure keys file.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// The file type of source file.
	FileType *FileContentBufferFileType `pulumi:"fileType"`
}

func (FileContentBufferArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileContentBuffer)(nil)).Elem()
}

func (i FileContentBufferArgs) ToFileContentBufferOutput() FileContentBufferOutput {
	return i.ToFileContentBufferOutputWithContext(context.Background())
}

func (i FileContentBufferArgs) ToFileContentBufferOutputWithContext(ctx context.Context) FileContentBufferOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileContentBufferOutput)
}

func (i FileContentBufferArgs) ToFileContentBufferPtrOutput() FileContentBufferPtrOutput {
	return i.ToFileContentBufferPtrOutputWithContext(context.Background())
}

func (i FileContentBufferArgs) ToFileContentBufferPtrOutputWithContext(ctx context.Context) FileContentBufferPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileContentBufferOutput).ToFileContentBufferPtrOutputWithContext(ctx)
}

// FileContentBufferPtrInput is an input type that accepts FileContentBufferArgs, FileContentBufferPtr and FileContentBufferPtrOutput values.
// You can construct a concrete instance of `FileContentBufferPtrInput` via:
//
//          FileContentBufferArgs{...}
//
//  or:
//
//          nil
type FileContentBufferPtrInput interface {
	pulumi.Input

	ToFileContentBufferPtrOutput() FileContentBufferPtrOutput
	ToFileContentBufferPtrOutputWithContext(context.Context) FileContentBufferPtrOutput
}

type fileContentBufferPtrType FileContentBufferArgs

func FileContentBufferPtr(v *FileContentBufferArgs) FileContentBufferPtrInput {
	return (*fileContentBufferPtrType)(v)
}

func (*fileContentBufferPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileContentBuffer)(nil)).Elem()
}

func (i *fileContentBufferPtrType) ToFileContentBufferPtrOutput() FileContentBufferPtrOutput {
	return i.ToFileContentBufferPtrOutputWithContext(context.Background())
}

func (i *fileContentBufferPtrType) ToFileContentBufferPtrOutputWithContext(ctx context.Context) FileContentBufferPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileContentBufferPtrOutput)
}

// FileContentBufferArrayInput is an input type that accepts FileContentBufferArray and FileContentBufferArrayOutput values.
// You can construct a concrete instance of `FileContentBufferArrayInput` via:
//
//          FileContentBufferArray{ FileContentBufferArgs{...} }
type FileContentBufferArrayInput interface {
	pulumi.Input

	ToFileContentBufferArrayOutput() FileContentBufferArrayOutput
	ToFileContentBufferArrayOutputWithContext(context.Context) FileContentBufferArrayOutput
}

type FileContentBufferArray []FileContentBufferInput

func (FileContentBufferArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileContentBuffer)(nil)).Elem()
}

func (i FileContentBufferArray) ToFileContentBufferArrayOutput() FileContentBufferArrayOutput {
	return i.ToFileContentBufferArrayOutputWithContext(context.Background())
}

func (i FileContentBufferArray) ToFileContentBufferArrayOutputWithContext(ctx context.Context) FileContentBufferArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileContentBufferArrayOutput)
}

type FileContentBufferOutput struct{ *pulumi.OutputState }

func (FileContentBufferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileContentBuffer)(nil)).Elem()
}

func (o FileContentBufferOutput) ToFileContentBufferOutput() FileContentBufferOutput {
	return o
}

func (o FileContentBufferOutput) ToFileContentBufferOutputWithContext(ctx context.Context) FileContentBufferOutput {
	return o
}

func (o FileContentBufferOutput) ToFileContentBufferPtrOutput() FileContentBufferPtrOutput {
	return o.ToFileContentBufferPtrOutputWithContext(context.Background())
}

func (o FileContentBufferOutput) ToFileContentBufferPtrOutputWithContext(ctx context.Context) FileContentBufferPtrOutput {
	return o.ApplyT(func(v FileContentBuffer) *FileContentBuffer {
		return &v
	}).(FileContentBufferPtrOutput)
}

// The raw content in the secure keys file.
func (o FileContentBufferOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileContentBuffer) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// The file type of source file.
func (o FileContentBufferOutput) FileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileContentBuffer) *string { return v.FileType }).(pulumi.StringPtrOutput)
}

type FileContentBufferPtrOutput struct{ *pulumi.OutputState }

func (FileContentBufferPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileContentBuffer)(nil)).Elem()
}

func (o FileContentBufferPtrOutput) ToFileContentBufferPtrOutput() FileContentBufferPtrOutput {
	return o
}

func (o FileContentBufferPtrOutput) ToFileContentBufferPtrOutputWithContext(ctx context.Context) FileContentBufferPtrOutput {
	return o
}

func (o FileContentBufferPtrOutput) Elem() FileContentBufferOutput {
	return o.ApplyT(func(v *FileContentBuffer) FileContentBuffer { return *v }).(FileContentBufferOutput)
}

// The raw content in the secure keys file.
func (o FileContentBufferPtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileContentBuffer) *string {
		if v == nil {
			return nil
		}
		return v.Content
	}).(pulumi.StringPtrOutput)
}

// The file type of source file.
func (o FileContentBufferPtrOutput) FileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileContentBuffer) *string {
		if v == nil {
			return nil
		}
		return v.FileType
	}).(pulumi.StringPtrOutput)
}

type FileContentBufferArrayOutput struct{ *pulumi.OutputState }

func (FileContentBufferArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileContentBuffer)(nil)).Elem()
}

func (o FileContentBufferArrayOutput) ToFileContentBufferArrayOutput() FileContentBufferArrayOutput {
	return o
}

func (o FileContentBufferArrayOutput) ToFileContentBufferArrayOutputWithContext(ctx context.Context) FileContentBufferArrayOutput {
	return o
}

func (o FileContentBufferArrayOutput) Index(i pulumi.IntInput) FileContentBufferOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileContentBuffer {
		return vs[0].([]FileContentBuffer)[vs[1].(int)]
	}).(FileContentBufferOutput)
}

type FileContentBufferResponse struct {
	// The raw content in the secure keys file.
	Content string `pulumi:"content"`
	// The file type of source file.
	FileType string `pulumi:"fileType"`
}

// FileContentBufferResponseInput is an input type that accepts FileContentBufferResponseArgs and FileContentBufferResponseOutput values.
// You can construct a concrete instance of `FileContentBufferResponseInput` via:
//
//          FileContentBufferResponseArgs{...}
type FileContentBufferResponseInput interface {
	pulumi.Input

	ToFileContentBufferResponseOutput() FileContentBufferResponseOutput
	ToFileContentBufferResponseOutputWithContext(context.Context) FileContentBufferResponseOutput
}

type FileContentBufferResponseArgs struct {
	// The raw content in the secure keys file.
	Content pulumi.StringInput `pulumi:"content"`
	// The file type of source file.
	FileType pulumi.StringInput `pulumi:"fileType"`
}

func (FileContentBufferResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileContentBufferResponse)(nil)).Elem()
}

func (i FileContentBufferResponseArgs) ToFileContentBufferResponseOutput() FileContentBufferResponseOutput {
	return i.ToFileContentBufferResponseOutputWithContext(context.Background())
}

func (i FileContentBufferResponseArgs) ToFileContentBufferResponseOutputWithContext(ctx context.Context) FileContentBufferResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileContentBufferResponseOutput)
}

func (i FileContentBufferResponseArgs) ToFileContentBufferResponsePtrOutput() FileContentBufferResponsePtrOutput {
	return i.ToFileContentBufferResponsePtrOutputWithContext(context.Background())
}

func (i FileContentBufferResponseArgs) ToFileContentBufferResponsePtrOutputWithContext(ctx context.Context) FileContentBufferResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileContentBufferResponseOutput).ToFileContentBufferResponsePtrOutputWithContext(ctx)
}

// FileContentBufferResponsePtrInput is an input type that accepts FileContentBufferResponseArgs, FileContentBufferResponsePtr and FileContentBufferResponsePtrOutput values.
// You can construct a concrete instance of `FileContentBufferResponsePtrInput` via:
//
//          FileContentBufferResponseArgs{...}
//
//  or:
//
//          nil
type FileContentBufferResponsePtrInput interface {
	pulumi.Input

	ToFileContentBufferResponsePtrOutput() FileContentBufferResponsePtrOutput
	ToFileContentBufferResponsePtrOutputWithContext(context.Context) FileContentBufferResponsePtrOutput
}

type fileContentBufferResponsePtrType FileContentBufferResponseArgs

func FileContentBufferResponsePtr(v *FileContentBufferResponseArgs) FileContentBufferResponsePtrInput {
	return (*fileContentBufferResponsePtrType)(v)
}

func (*fileContentBufferResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileContentBufferResponse)(nil)).Elem()
}

func (i *fileContentBufferResponsePtrType) ToFileContentBufferResponsePtrOutput() FileContentBufferResponsePtrOutput {
	return i.ToFileContentBufferResponsePtrOutputWithContext(context.Background())
}

func (i *fileContentBufferResponsePtrType) ToFileContentBufferResponsePtrOutputWithContext(ctx context.Context) FileContentBufferResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileContentBufferResponsePtrOutput)
}

// FileContentBufferResponseArrayInput is an input type that accepts FileContentBufferResponseArray and FileContentBufferResponseArrayOutput values.
// You can construct a concrete instance of `FileContentBufferResponseArrayInput` via:
//
//          FileContentBufferResponseArray{ FileContentBufferResponseArgs{...} }
type FileContentBufferResponseArrayInput interface {
	pulumi.Input

	ToFileContentBufferResponseArrayOutput() FileContentBufferResponseArrayOutput
	ToFileContentBufferResponseArrayOutputWithContext(context.Context) FileContentBufferResponseArrayOutput
}

type FileContentBufferResponseArray []FileContentBufferResponseInput

func (FileContentBufferResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileContentBufferResponse)(nil)).Elem()
}

func (i FileContentBufferResponseArray) ToFileContentBufferResponseArrayOutput() FileContentBufferResponseArrayOutput {
	return i.ToFileContentBufferResponseArrayOutputWithContext(context.Background())
}

func (i FileContentBufferResponseArray) ToFileContentBufferResponseArrayOutputWithContext(ctx context.Context) FileContentBufferResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileContentBufferResponseArrayOutput)
}

type FileContentBufferResponseOutput struct{ *pulumi.OutputState }

func (FileContentBufferResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileContentBufferResponse)(nil)).Elem()
}

func (o FileContentBufferResponseOutput) ToFileContentBufferResponseOutput() FileContentBufferResponseOutput {
	return o
}

func (o FileContentBufferResponseOutput) ToFileContentBufferResponseOutputWithContext(ctx context.Context) FileContentBufferResponseOutput {
	return o
}

func (o FileContentBufferResponseOutput) ToFileContentBufferResponsePtrOutput() FileContentBufferResponsePtrOutput {
	return o.ToFileContentBufferResponsePtrOutputWithContext(context.Background())
}

func (o FileContentBufferResponseOutput) ToFileContentBufferResponsePtrOutputWithContext(ctx context.Context) FileContentBufferResponsePtrOutput {
	return o.ApplyT(func(v FileContentBufferResponse) *FileContentBufferResponse {
		return &v
	}).(FileContentBufferResponsePtrOutput)
}

// The raw content in the secure keys file.
func (o FileContentBufferResponseOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v FileContentBufferResponse) string { return v.Content }).(pulumi.StringOutput)
}

// The file type of source file.
func (o FileContentBufferResponseOutput) FileType() pulumi.StringOutput {
	return o.ApplyT(func(v FileContentBufferResponse) string { return v.FileType }).(pulumi.StringOutput)
}

type FileContentBufferResponsePtrOutput struct{ *pulumi.OutputState }

func (FileContentBufferResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileContentBufferResponse)(nil)).Elem()
}

func (o FileContentBufferResponsePtrOutput) ToFileContentBufferResponsePtrOutput() FileContentBufferResponsePtrOutput {
	return o
}

func (o FileContentBufferResponsePtrOutput) ToFileContentBufferResponsePtrOutputWithContext(ctx context.Context) FileContentBufferResponsePtrOutput {
	return o
}

func (o FileContentBufferResponsePtrOutput) Elem() FileContentBufferResponseOutput {
	return o.ApplyT(func(v *FileContentBufferResponse) FileContentBufferResponse { return *v }).(FileContentBufferResponseOutput)
}

// The raw content in the secure keys file.
func (o FileContentBufferResponsePtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileContentBufferResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Content
	}).(pulumi.StringPtrOutput)
}

// The file type of source file.
func (o FileContentBufferResponsePtrOutput) FileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileContentBufferResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FileType
	}).(pulumi.StringPtrOutput)
}

type FileContentBufferResponseArrayOutput struct{ *pulumi.OutputState }

func (FileContentBufferResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileContentBufferResponse)(nil)).Elem()
}

func (o FileContentBufferResponseArrayOutput) ToFileContentBufferResponseArrayOutput() FileContentBufferResponseArrayOutput {
	return o
}

func (o FileContentBufferResponseArrayOutput) ToFileContentBufferResponseArrayOutputWithContext(ctx context.Context) FileContentBufferResponseArrayOutput {
	return o
}

func (o FileContentBufferResponseArrayOutput) Index(i pulumi.IntInput) FileContentBufferResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileContentBufferResponse {
		return vs[0].([]FileContentBufferResponse)[vs[1].(int)]
	}).(FileContentBufferResponseOutput)
}

type FirewallAllowedItem struct {
	// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
	IpProtocol *string `pulumi:"ipProtocol"`
	// An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
	Ports []string `pulumi:"ports"`
}

// FirewallAllowedItemInput is an input type that accepts FirewallAllowedItemArgs and FirewallAllowedItemOutput values.
// You can construct a concrete instance of `FirewallAllowedItemInput` via:
//
//          FirewallAllowedItemArgs{...}
type FirewallAllowedItemInput interface {
	pulumi.Input

	ToFirewallAllowedItemOutput() FirewallAllowedItemOutput
	ToFirewallAllowedItemOutputWithContext(context.Context) FirewallAllowedItemOutput
}

type FirewallAllowedItemArgs struct {
	// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
	IpProtocol pulumi.StringPtrInput `pulumi:"ipProtocol"`
	// An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
	Ports pulumi.StringArrayInput `pulumi:"ports"`
}

func (FirewallAllowedItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallAllowedItem)(nil)).Elem()
}

func (i FirewallAllowedItemArgs) ToFirewallAllowedItemOutput() FirewallAllowedItemOutput {
	return i.ToFirewallAllowedItemOutputWithContext(context.Background())
}

func (i FirewallAllowedItemArgs) ToFirewallAllowedItemOutputWithContext(ctx context.Context) FirewallAllowedItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallAllowedItemOutput)
}

// FirewallAllowedItemArrayInput is an input type that accepts FirewallAllowedItemArray and FirewallAllowedItemArrayOutput values.
// You can construct a concrete instance of `FirewallAllowedItemArrayInput` via:
//
//          FirewallAllowedItemArray{ FirewallAllowedItemArgs{...} }
type FirewallAllowedItemArrayInput interface {
	pulumi.Input

	ToFirewallAllowedItemArrayOutput() FirewallAllowedItemArrayOutput
	ToFirewallAllowedItemArrayOutputWithContext(context.Context) FirewallAllowedItemArrayOutput
}

type FirewallAllowedItemArray []FirewallAllowedItemInput

func (FirewallAllowedItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallAllowedItem)(nil)).Elem()
}

func (i FirewallAllowedItemArray) ToFirewallAllowedItemArrayOutput() FirewallAllowedItemArrayOutput {
	return i.ToFirewallAllowedItemArrayOutputWithContext(context.Background())
}

func (i FirewallAllowedItemArray) ToFirewallAllowedItemArrayOutputWithContext(ctx context.Context) FirewallAllowedItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallAllowedItemArrayOutput)
}

type FirewallAllowedItemOutput struct{ *pulumi.OutputState }

func (FirewallAllowedItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallAllowedItem)(nil)).Elem()
}

func (o FirewallAllowedItemOutput) ToFirewallAllowedItemOutput() FirewallAllowedItemOutput {
	return o
}

func (o FirewallAllowedItemOutput) ToFirewallAllowedItemOutputWithContext(ctx context.Context) FirewallAllowedItemOutput {
	return o
}

// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
func (o FirewallAllowedItemOutput) IpProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallAllowedItem) *string { return v.IpProtocol }).(pulumi.StringPtrOutput)
}

// An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
func (o FirewallAllowedItemOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallAllowedItem) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

type FirewallAllowedItemArrayOutput struct{ *pulumi.OutputState }

func (FirewallAllowedItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallAllowedItem)(nil)).Elem()
}

func (o FirewallAllowedItemArrayOutput) ToFirewallAllowedItemArrayOutput() FirewallAllowedItemArrayOutput {
	return o
}

func (o FirewallAllowedItemArrayOutput) ToFirewallAllowedItemArrayOutputWithContext(ctx context.Context) FirewallAllowedItemArrayOutput {
	return o
}

func (o FirewallAllowedItemArrayOutput) Index(i pulumi.IntInput) FirewallAllowedItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallAllowedItem {
		return vs[0].([]FirewallAllowedItem)[vs[1].(int)]
	}).(FirewallAllowedItemOutput)
}

type FirewallAllowedItemResponse struct {
	// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
	IpProtocol string `pulumi:"ipProtocol"`
	// An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
	Ports []string `pulumi:"ports"`
}

// FirewallAllowedItemResponseInput is an input type that accepts FirewallAllowedItemResponseArgs and FirewallAllowedItemResponseOutput values.
// You can construct a concrete instance of `FirewallAllowedItemResponseInput` via:
//
//          FirewallAllowedItemResponseArgs{...}
type FirewallAllowedItemResponseInput interface {
	pulumi.Input

	ToFirewallAllowedItemResponseOutput() FirewallAllowedItemResponseOutput
	ToFirewallAllowedItemResponseOutputWithContext(context.Context) FirewallAllowedItemResponseOutput
}

type FirewallAllowedItemResponseArgs struct {
	// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
	IpProtocol pulumi.StringInput `pulumi:"ipProtocol"`
	// An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
	Ports pulumi.StringArrayInput `pulumi:"ports"`
}

func (FirewallAllowedItemResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallAllowedItemResponse)(nil)).Elem()
}

func (i FirewallAllowedItemResponseArgs) ToFirewallAllowedItemResponseOutput() FirewallAllowedItemResponseOutput {
	return i.ToFirewallAllowedItemResponseOutputWithContext(context.Background())
}

func (i FirewallAllowedItemResponseArgs) ToFirewallAllowedItemResponseOutputWithContext(ctx context.Context) FirewallAllowedItemResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallAllowedItemResponseOutput)
}

// FirewallAllowedItemResponseArrayInput is an input type that accepts FirewallAllowedItemResponseArray and FirewallAllowedItemResponseArrayOutput values.
// You can construct a concrete instance of `FirewallAllowedItemResponseArrayInput` via:
//
//          FirewallAllowedItemResponseArray{ FirewallAllowedItemResponseArgs{...} }
type FirewallAllowedItemResponseArrayInput interface {
	pulumi.Input

	ToFirewallAllowedItemResponseArrayOutput() FirewallAllowedItemResponseArrayOutput
	ToFirewallAllowedItemResponseArrayOutputWithContext(context.Context) FirewallAllowedItemResponseArrayOutput
}

type FirewallAllowedItemResponseArray []FirewallAllowedItemResponseInput

func (FirewallAllowedItemResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallAllowedItemResponse)(nil)).Elem()
}

func (i FirewallAllowedItemResponseArray) ToFirewallAllowedItemResponseArrayOutput() FirewallAllowedItemResponseArrayOutput {
	return i.ToFirewallAllowedItemResponseArrayOutputWithContext(context.Background())
}

func (i FirewallAllowedItemResponseArray) ToFirewallAllowedItemResponseArrayOutputWithContext(ctx context.Context) FirewallAllowedItemResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallAllowedItemResponseArrayOutput)
}

type FirewallAllowedItemResponseOutput struct{ *pulumi.OutputState }

func (FirewallAllowedItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallAllowedItemResponse)(nil)).Elem()
}

func (o FirewallAllowedItemResponseOutput) ToFirewallAllowedItemResponseOutput() FirewallAllowedItemResponseOutput {
	return o
}

func (o FirewallAllowedItemResponseOutput) ToFirewallAllowedItemResponseOutputWithContext(ctx context.Context) FirewallAllowedItemResponseOutput {
	return o
}

// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
func (o FirewallAllowedItemResponseOutput) IpProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallAllowedItemResponse) string { return v.IpProtocol }).(pulumi.StringOutput)
}

// An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
func (o FirewallAllowedItemResponseOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallAllowedItemResponse) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

type FirewallAllowedItemResponseArrayOutput struct{ *pulumi.OutputState }

func (FirewallAllowedItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallAllowedItemResponse)(nil)).Elem()
}

func (o FirewallAllowedItemResponseArrayOutput) ToFirewallAllowedItemResponseArrayOutput() FirewallAllowedItemResponseArrayOutput {
	return o
}

func (o FirewallAllowedItemResponseArrayOutput) ToFirewallAllowedItemResponseArrayOutputWithContext(ctx context.Context) FirewallAllowedItemResponseArrayOutput {
	return o
}

func (o FirewallAllowedItemResponseArrayOutput) Index(i pulumi.IntInput) FirewallAllowedItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallAllowedItemResponse {
		return vs[0].([]FirewallAllowedItemResponse)[vs[1].(int)]
	}).(FirewallAllowedItemResponseOutput)
}

type FirewallDeniedItem struct {
	// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
	IpProtocol *string `pulumi:"ipProtocol"`
	// An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
	Ports []string `pulumi:"ports"`
}

// FirewallDeniedItemInput is an input type that accepts FirewallDeniedItemArgs and FirewallDeniedItemOutput values.
// You can construct a concrete instance of `FirewallDeniedItemInput` via:
//
//          FirewallDeniedItemArgs{...}
type FirewallDeniedItemInput interface {
	pulumi.Input

	ToFirewallDeniedItemOutput() FirewallDeniedItemOutput
	ToFirewallDeniedItemOutputWithContext(context.Context) FirewallDeniedItemOutput
}

type FirewallDeniedItemArgs struct {
	// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
	IpProtocol pulumi.StringPtrInput `pulumi:"ipProtocol"`
	// An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
	Ports pulumi.StringArrayInput `pulumi:"ports"`
}

func (FirewallDeniedItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallDeniedItem)(nil)).Elem()
}

func (i FirewallDeniedItemArgs) ToFirewallDeniedItemOutput() FirewallDeniedItemOutput {
	return i.ToFirewallDeniedItemOutputWithContext(context.Background())
}

func (i FirewallDeniedItemArgs) ToFirewallDeniedItemOutputWithContext(ctx context.Context) FirewallDeniedItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallDeniedItemOutput)
}

// FirewallDeniedItemArrayInput is an input type that accepts FirewallDeniedItemArray and FirewallDeniedItemArrayOutput values.
// You can construct a concrete instance of `FirewallDeniedItemArrayInput` via:
//
//          FirewallDeniedItemArray{ FirewallDeniedItemArgs{...} }
type FirewallDeniedItemArrayInput interface {
	pulumi.Input

	ToFirewallDeniedItemArrayOutput() FirewallDeniedItemArrayOutput
	ToFirewallDeniedItemArrayOutputWithContext(context.Context) FirewallDeniedItemArrayOutput
}

type FirewallDeniedItemArray []FirewallDeniedItemInput

func (FirewallDeniedItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallDeniedItem)(nil)).Elem()
}

func (i FirewallDeniedItemArray) ToFirewallDeniedItemArrayOutput() FirewallDeniedItemArrayOutput {
	return i.ToFirewallDeniedItemArrayOutputWithContext(context.Background())
}

func (i FirewallDeniedItemArray) ToFirewallDeniedItemArrayOutputWithContext(ctx context.Context) FirewallDeniedItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallDeniedItemArrayOutput)
}

type FirewallDeniedItemOutput struct{ *pulumi.OutputState }

func (FirewallDeniedItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallDeniedItem)(nil)).Elem()
}

func (o FirewallDeniedItemOutput) ToFirewallDeniedItemOutput() FirewallDeniedItemOutput {
	return o
}

func (o FirewallDeniedItemOutput) ToFirewallDeniedItemOutputWithContext(ctx context.Context) FirewallDeniedItemOutput {
	return o
}

// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
func (o FirewallDeniedItemOutput) IpProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallDeniedItem) *string { return v.IpProtocol }).(pulumi.StringPtrOutput)
}

// An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
func (o FirewallDeniedItemOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallDeniedItem) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

type FirewallDeniedItemArrayOutput struct{ *pulumi.OutputState }

func (FirewallDeniedItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallDeniedItem)(nil)).Elem()
}

func (o FirewallDeniedItemArrayOutput) ToFirewallDeniedItemArrayOutput() FirewallDeniedItemArrayOutput {
	return o
}

func (o FirewallDeniedItemArrayOutput) ToFirewallDeniedItemArrayOutputWithContext(ctx context.Context) FirewallDeniedItemArrayOutput {
	return o
}

func (o FirewallDeniedItemArrayOutput) Index(i pulumi.IntInput) FirewallDeniedItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallDeniedItem {
		return vs[0].([]FirewallDeniedItem)[vs[1].(int)]
	}).(FirewallDeniedItemOutput)
}

type FirewallDeniedItemResponse struct {
	// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
	IpProtocol string `pulumi:"ipProtocol"`
	// An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
	Ports []string `pulumi:"ports"`
}

// FirewallDeniedItemResponseInput is an input type that accepts FirewallDeniedItemResponseArgs and FirewallDeniedItemResponseOutput values.
// You can construct a concrete instance of `FirewallDeniedItemResponseInput` via:
//
//          FirewallDeniedItemResponseArgs{...}
type FirewallDeniedItemResponseInput interface {
	pulumi.Input

	ToFirewallDeniedItemResponseOutput() FirewallDeniedItemResponseOutput
	ToFirewallDeniedItemResponseOutputWithContext(context.Context) FirewallDeniedItemResponseOutput
}

type FirewallDeniedItemResponseArgs struct {
	// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
	IpProtocol pulumi.StringInput `pulumi:"ipProtocol"`
	// An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
	Ports pulumi.StringArrayInput `pulumi:"ports"`
}

func (FirewallDeniedItemResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallDeniedItemResponse)(nil)).Elem()
}

func (i FirewallDeniedItemResponseArgs) ToFirewallDeniedItemResponseOutput() FirewallDeniedItemResponseOutput {
	return i.ToFirewallDeniedItemResponseOutputWithContext(context.Background())
}

func (i FirewallDeniedItemResponseArgs) ToFirewallDeniedItemResponseOutputWithContext(ctx context.Context) FirewallDeniedItemResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallDeniedItemResponseOutput)
}

// FirewallDeniedItemResponseArrayInput is an input type that accepts FirewallDeniedItemResponseArray and FirewallDeniedItemResponseArrayOutput values.
// You can construct a concrete instance of `FirewallDeniedItemResponseArrayInput` via:
//
//          FirewallDeniedItemResponseArray{ FirewallDeniedItemResponseArgs{...} }
type FirewallDeniedItemResponseArrayInput interface {
	pulumi.Input

	ToFirewallDeniedItemResponseArrayOutput() FirewallDeniedItemResponseArrayOutput
	ToFirewallDeniedItemResponseArrayOutputWithContext(context.Context) FirewallDeniedItemResponseArrayOutput
}

type FirewallDeniedItemResponseArray []FirewallDeniedItemResponseInput

func (FirewallDeniedItemResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallDeniedItemResponse)(nil)).Elem()
}

func (i FirewallDeniedItemResponseArray) ToFirewallDeniedItemResponseArrayOutput() FirewallDeniedItemResponseArrayOutput {
	return i.ToFirewallDeniedItemResponseArrayOutputWithContext(context.Background())
}

func (i FirewallDeniedItemResponseArray) ToFirewallDeniedItemResponseArrayOutputWithContext(ctx context.Context) FirewallDeniedItemResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallDeniedItemResponseArrayOutput)
}

type FirewallDeniedItemResponseOutput struct{ *pulumi.OutputState }

func (FirewallDeniedItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallDeniedItemResponse)(nil)).Elem()
}

func (o FirewallDeniedItemResponseOutput) ToFirewallDeniedItemResponseOutput() FirewallDeniedItemResponseOutput {
	return o
}

func (o FirewallDeniedItemResponseOutput) ToFirewallDeniedItemResponseOutputWithContext(ctx context.Context) FirewallDeniedItemResponseOutput {
	return o
}

// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
func (o FirewallDeniedItemResponseOutput) IpProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallDeniedItemResponse) string { return v.IpProtocol }).(pulumi.StringOutput)
}

// An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
func (o FirewallDeniedItemResponseOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallDeniedItemResponse) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

type FirewallDeniedItemResponseArrayOutput struct{ *pulumi.OutputState }

func (FirewallDeniedItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallDeniedItemResponse)(nil)).Elem()
}

func (o FirewallDeniedItemResponseArrayOutput) ToFirewallDeniedItemResponseArrayOutput() FirewallDeniedItemResponseArrayOutput {
	return o
}

func (o FirewallDeniedItemResponseArrayOutput) ToFirewallDeniedItemResponseArrayOutputWithContext(ctx context.Context) FirewallDeniedItemResponseArrayOutput {
	return o
}

func (o FirewallDeniedItemResponseArrayOutput) Index(i pulumi.IntInput) FirewallDeniedItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallDeniedItemResponse {
		return vs[0].([]FirewallDeniedItemResponse)[vs[1].(int)]
	}).(FirewallDeniedItemResponseOutput)
}

// The available logging options for a firewall rule.
type FirewallLogConfig struct {
	// This field denotes whether to enable logging for a particular firewall rule.
	Enable *bool `pulumi:"enable"`
	// This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs.
	Metadata *string `pulumi:"metadata"`
}

// FirewallLogConfigInput is an input type that accepts FirewallLogConfigArgs and FirewallLogConfigOutput values.
// You can construct a concrete instance of `FirewallLogConfigInput` via:
//
//          FirewallLogConfigArgs{...}
type FirewallLogConfigInput interface {
	pulumi.Input

	ToFirewallLogConfigOutput() FirewallLogConfigOutput
	ToFirewallLogConfigOutputWithContext(context.Context) FirewallLogConfigOutput
}

// The available logging options for a firewall rule.
type FirewallLogConfigArgs struct {
	// This field denotes whether to enable logging for a particular firewall rule.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs.
	Metadata *FirewallLogConfigMetadata `pulumi:"metadata"`
}

func (FirewallLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallLogConfig)(nil)).Elem()
}

func (i FirewallLogConfigArgs) ToFirewallLogConfigOutput() FirewallLogConfigOutput {
	return i.ToFirewallLogConfigOutputWithContext(context.Background())
}

func (i FirewallLogConfigArgs) ToFirewallLogConfigOutputWithContext(ctx context.Context) FirewallLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallLogConfigOutput)
}

func (i FirewallLogConfigArgs) ToFirewallLogConfigPtrOutput() FirewallLogConfigPtrOutput {
	return i.ToFirewallLogConfigPtrOutputWithContext(context.Background())
}

func (i FirewallLogConfigArgs) ToFirewallLogConfigPtrOutputWithContext(ctx context.Context) FirewallLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallLogConfigOutput).ToFirewallLogConfigPtrOutputWithContext(ctx)
}

// FirewallLogConfigPtrInput is an input type that accepts FirewallLogConfigArgs, FirewallLogConfigPtr and FirewallLogConfigPtrOutput values.
// You can construct a concrete instance of `FirewallLogConfigPtrInput` via:
//
//          FirewallLogConfigArgs{...}
//
//  or:
//
//          nil
type FirewallLogConfigPtrInput interface {
	pulumi.Input

	ToFirewallLogConfigPtrOutput() FirewallLogConfigPtrOutput
	ToFirewallLogConfigPtrOutputWithContext(context.Context) FirewallLogConfigPtrOutput
}

type firewallLogConfigPtrType FirewallLogConfigArgs

func FirewallLogConfigPtr(v *FirewallLogConfigArgs) FirewallLogConfigPtrInput {
	return (*firewallLogConfigPtrType)(v)
}

func (*firewallLogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallLogConfig)(nil)).Elem()
}

func (i *firewallLogConfigPtrType) ToFirewallLogConfigPtrOutput() FirewallLogConfigPtrOutput {
	return i.ToFirewallLogConfigPtrOutputWithContext(context.Background())
}

func (i *firewallLogConfigPtrType) ToFirewallLogConfigPtrOutputWithContext(ctx context.Context) FirewallLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallLogConfigPtrOutput)
}

// The available logging options for a firewall rule.
type FirewallLogConfigOutput struct{ *pulumi.OutputState }

func (FirewallLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallLogConfig)(nil)).Elem()
}

func (o FirewallLogConfigOutput) ToFirewallLogConfigOutput() FirewallLogConfigOutput {
	return o
}

func (o FirewallLogConfigOutput) ToFirewallLogConfigOutputWithContext(ctx context.Context) FirewallLogConfigOutput {
	return o
}

func (o FirewallLogConfigOutput) ToFirewallLogConfigPtrOutput() FirewallLogConfigPtrOutput {
	return o.ToFirewallLogConfigPtrOutputWithContext(context.Background())
}

func (o FirewallLogConfigOutput) ToFirewallLogConfigPtrOutputWithContext(ctx context.Context) FirewallLogConfigPtrOutput {
	return o.ApplyT(func(v FirewallLogConfig) *FirewallLogConfig {
		return &v
	}).(FirewallLogConfigPtrOutput)
}

// This field denotes whether to enable logging for a particular firewall rule.
func (o FirewallLogConfigOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallLogConfig) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs.
func (o FirewallLogConfigOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallLogConfig) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

type FirewallLogConfigPtrOutput struct{ *pulumi.OutputState }

func (FirewallLogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallLogConfig)(nil)).Elem()
}

func (o FirewallLogConfigPtrOutput) ToFirewallLogConfigPtrOutput() FirewallLogConfigPtrOutput {
	return o
}

func (o FirewallLogConfigPtrOutput) ToFirewallLogConfigPtrOutputWithContext(ctx context.Context) FirewallLogConfigPtrOutput {
	return o
}

func (o FirewallLogConfigPtrOutput) Elem() FirewallLogConfigOutput {
	return o.ApplyT(func(v *FirewallLogConfig) FirewallLogConfig { return *v }).(FirewallLogConfigOutput)
}

// This field denotes whether to enable logging for a particular firewall rule.
func (o FirewallLogConfigPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallLogConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs.
func (o FirewallLogConfigPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallLogConfig) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

// The available logging options for a firewall rule.
type FirewallLogConfigResponse struct {
	// This field denotes whether to enable logging for a particular firewall rule.
	Enable bool `pulumi:"enable"`
	// This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs.
	Metadata string `pulumi:"metadata"`
}

// FirewallLogConfigResponseInput is an input type that accepts FirewallLogConfigResponseArgs and FirewallLogConfigResponseOutput values.
// You can construct a concrete instance of `FirewallLogConfigResponseInput` via:
//
//          FirewallLogConfigResponseArgs{...}
type FirewallLogConfigResponseInput interface {
	pulumi.Input

	ToFirewallLogConfigResponseOutput() FirewallLogConfigResponseOutput
	ToFirewallLogConfigResponseOutputWithContext(context.Context) FirewallLogConfigResponseOutput
}

// The available logging options for a firewall rule.
type FirewallLogConfigResponseArgs struct {
	// This field denotes whether to enable logging for a particular firewall rule.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs.
	Metadata pulumi.StringInput `pulumi:"metadata"`
}

func (FirewallLogConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallLogConfigResponse)(nil)).Elem()
}

func (i FirewallLogConfigResponseArgs) ToFirewallLogConfigResponseOutput() FirewallLogConfigResponseOutput {
	return i.ToFirewallLogConfigResponseOutputWithContext(context.Background())
}

func (i FirewallLogConfigResponseArgs) ToFirewallLogConfigResponseOutputWithContext(ctx context.Context) FirewallLogConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallLogConfigResponseOutput)
}

func (i FirewallLogConfigResponseArgs) ToFirewallLogConfigResponsePtrOutput() FirewallLogConfigResponsePtrOutput {
	return i.ToFirewallLogConfigResponsePtrOutputWithContext(context.Background())
}

func (i FirewallLogConfigResponseArgs) ToFirewallLogConfigResponsePtrOutputWithContext(ctx context.Context) FirewallLogConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallLogConfigResponseOutput).ToFirewallLogConfigResponsePtrOutputWithContext(ctx)
}

// FirewallLogConfigResponsePtrInput is an input type that accepts FirewallLogConfigResponseArgs, FirewallLogConfigResponsePtr and FirewallLogConfigResponsePtrOutput values.
// You can construct a concrete instance of `FirewallLogConfigResponsePtrInput` via:
//
//          FirewallLogConfigResponseArgs{...}
//
//  or:
//
//          nil
type FirewallLogConfigResponsePtrInput interface {
	pulumi.Input

	ToFirewallLogConfigResponsePtrOutput() FirewallLogConfigResponsePtrOutput
	ToFirewallLogConfigResponsePtrOutputWithContext(context.Context) FirewallLogConfigResponsePtrOutput
}

type firewallLogConfigResponsePtrType FirewallLogConfigResponseArgs

func FirewallLogConfigResponsePtr(v *FirewallLogConfigResponseArgs) FirewallLogConfigResponsePtrInput {
	return (*firewallLogConfigResponsePtrType)(v)
}

func (*firewallLogConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallLogConfigResponse)(nil)).Elem()
}

func (i *firewallLogConfigResponsePtrType) ToFirewallLogConfigResponsePtrOutput() FirewallLogConfigResponsePtrOutput {
	return i.ToFirewallLogConfigResponsePtrOutputWithContext(context.Background())
}

func (i *firewallLogConfigResponsePtrType) ToFirewallLogConfigResponsePtrOutputWithContext(ctx context.Context) FirewallLogConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallLogConfigResponsePtrOutput)
}

// The available logging options for a firewall rule.
type FirewallLogConfigResponseOutput struct{ *pulumi.OutputState }

func (FirewallLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallLogConfigResponse)(nil)).Elem()
}

func (o FirewallLogConfigResponseOutput) ToFirewallLogConfigResponseOutput() FirewallLogConfigResponseOutput {
	return o
}

func (o FirewallLogConfigResponseOutput) ToFirewallLogConfigResponseOutputWithContext(ctx context.Context) FirewallLogConfigResponseOutput {
	return o
}

func (o FirewallLogConfigResponseOutput) ToFirewallLogConfigResponsePtrOutput() FirewallLogConfigResponsePtrOutput {
	return o.ToFirewallLogConfigResponsePtrOutputWithContext(context.Background())
}

func (o FirewallLogConfigResponseOutput) ToFirewallLogConfigResponsePtrOutputWithContext(ctx context.Context) FirewallLogConfigResponsePtrOutput {
	return o.ApplyT(func(v FirewallLogConfigResponse) *FirewallLogConfigResponse {
		return &v
	}).(FirewallLogConfigResponsePtrOutput)
}

// This field denotes whether to enable logging for a particular firewall rule.
func (o FirewallLogConfigResponseOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v FirewallLogConfigResponse) bool { return v.Enable }).(pulumi.BoolOutput)
}

// This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs.
func (o FirewallLogConfigResponseOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallLogConfigResponse) string { return v.Metadata }).(pulumi.StringOutput)
}

type FirewallLogConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (FirewallLogConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallLogConfigResponse)(nil)).Elem()
}

func (o FirewallLogConfigResponsePtrOutput) ToFirewallLogConfigResponsePtrOutput() FirewallLogConfigResponsePtrOutput {
	return o
}

func (o FirewallLogConfigResponsePtrOutput) ToFirewallLogConfigResponsePtrOutputWithContext(ctx context.Context) FirewallLogConfigResponsePtrOutput {
	return o
}

func (o FirewallLogConfigResponsePtrOutput) Elem() FirewallLogConfigResponseOutput {
	return o.ApplyT(func(v *FirewallLogConfigResponse) FirewallLogConfigResponse { return *v }).(FirewallLogConfigResponseOutput)
}

// This field denotes whether to enable logging for a particular firewall rule.
func (o FirewallLogConfigResponsePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallLogConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enable
	}).(pulumi.BoolPtrOutput)
}

// This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs.
func (o FirewallLogConfigResponsePtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallLogConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Metadata
	}).(pulumi.StringPtrOutput)
}

type FirewallPolicyAssociation struct {
	// The target that the firewall policy is attached to.
	AttachmentTarget *string `pulumi:"attachmentTarget"`
	// The name for an association.
	Name *string `pulumi:"name"`
}

// FirewallPolicyAssociationInput is an input type that accepts FirewallPolicyAssociationArgs and FirewallPolicyAssociationOutput values.
// You can construct a concrete instance of `FirewallPolicyAssociationInput` via:
//
//          FirewallPolicyAssociationArgs{...}
type FirewallPolicyAssociationInput interface {
	pulumi.Input

	ToFirewallPolicyAssociationOutput() FirewallPolicyAssociationOutput
	ToFirewallPolicyAssociationOutputWithContext(context.Context) FirewallPolicyAssociationOutput
}

type FirewallPolicyAssociationArgs struct {
	// The target that the firewall policy is attached to.
	AttachmentTarget pulumi.StringPtrInput `pulumi:"attachmentTarget"`
	// The name for an association.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (FirewallPolicyAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyAssociation)(nil)).Elem()
}

func (i FirewallPolicyAssociationArgs) ToFirewallPolicyAssociationOutput() FirewallPolicyAssociationOutput {
	return i.ToFirewallPolicyAssociationOutputWithContext(context.Background())
}

func (i FirewallPolicyAssociationArgs) ToFirewallPolicyAssociationOutputWithContext(ctx context.Context) FirewallPolicyAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyAssociationOutput)
}

// FirewallPolicyAssociationArrayInput is an input type that accepts FirewallPolicyAssociationArray and FirewallPolicyAssociationArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyAssociationArrayInput` via:
//
//          FirewallPolicyAssociationArray{ FirewallPolicyAssociationArgs{...} }
type FirewallPolicyAssociationArrayInput interface {
	pulumi.Input

	ToFirewallPolicyAssociationArrayOutput() FirewallPolicyAssociationArrayOutput
	ToFirewallPolicyAssociationArrayOutputWithContext(context.Context) FirewallPolicyAssociationArrayOutput
}

type FirewallPolicyAssociationArray []FirewallPolicyAssociationInput

func (FirewallPolicyAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyAssociation)(nil)).Elem()
}

func (i FirewallPolicyAssociationArray) ToFirewallPolicyAssociationArrayOutput() FirewallPolicyAssociationArrayOutput {
	return i.ToFirewallPolicyAssociationArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyAssociationArray) ToFirewallPolicyAssociationArrayOutputWithContext(ctx context.Context) FirewallPolicyAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyAssociationArrayOutput)
}

type FirewallPolicyAssociationOutput struct{ *pulumi.OutputState }

func (FirewallPolicyAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyAssociation)(nil)).Elem()
}

func (o FirewallPolicyAssociationOutput) ToFirewallPolicyAssociationOutput() FirewallPolicyAssociationOutput {
	return o
}

func (o FirewallPolicyAssociationOutput) ToFirewallPolicyAssociationOutputWithContext(ctx context.Context) FirewallPolicyAssociationOutput {
	return o
}

// The target that the firewall policy is attached to.
func (o FirewallPolicyAssociationOutput) AttachmentTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyAssociation) *string { return v.AttachmentTarget }).(pulumi.StringPtrOutput)
}

// The name for an association.
func (o FirewallPolicyAssociationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyAssociation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type FirewallPolicyAssociationArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyAssociation)(nil)).Elem()
}

func (o FirewallPolicyAssociationArrayOutput) ToFirewallPolicyAssociationArrayOutput() FirewallPolicyAssociationArrayOutput {
	return o
}

func (o FirewallPolicyAssociationArrayOutput) ToFirewallPolicyAssociationArrayOutputWithContext(ctx context.Context) FirewallPolicyAssociationArrayOutput {
	return o
}

func (o FirewallPolicyAssociationArrayOutput) Index(i pulumi.IntInput) FirewallPolicyAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyAssociation {
		return vs[0].([]FirewallPolicyAssociation)[vs[1].(int)]
	}).(FirewallPolicyAssociationOutput)
}

type FirewallPolicyAssociationResponse struct {
	// The target that the firewall policy is attached to.
	AttachmentTarget string `pulumi:"attachmentTarget"`
	// Deprecated, please use short name instead. The display name of the firewall policy of the association.
	DisplayName string `pulumi:"displayName"`
	// The firewall policy ID of the association.
	FirewallPolicyId string `pulumi:"firewallPolicyId"`
	// The name for an association.
	Name string `pulumi:"name"`
	// The short name of the firewall policy of the association.
	ShortName string `pulumi:"shortName"`
}

// FirewallPolicyAssociationResponseInput is an input type that accepts FirewallPolicyAssociationResponseArgs and FirewallPolicyAssociationResponseOutput values.
// You can construct a concrete instance of `FirewallPolicyAssociationResponseInput` via:
//
//          FirewallPolicyAssociationResponseArgs{...}
type FirewallPolicyAssociationResponseInput interface {
	pulumi.Input

	ToFirewallPolicyAssociationResponseOutput() FirewallPolicyAssociationResponseOutput
	ToFirewallPolicyAssociationResponseOutputWithContext(context.Context) FirewallPolicyAssociationResponseOutput
}

type FirewallPolicyAssociationResponseArgs struct {
	// The target that the firewall policy is attached to.
	AttachmentTarget pulumi.StringInput `pulumi:"attachmentTarget"`
	// Deprecated, please use short name instead. The display name of the firewall policy of the association.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The firewall policy ID of the association.
	FirewallPolicyId pulumi.StringInput `pulumi:"firewallPolicyId"`
	// The name for an association.
	Name pulumi.StringInput `pulumi:"name"`
	// The short name of the firewall policy of the association.
	ShortName pulumi.StringInput `pulumi:"shortName"`
}

func (FirewallPolicyAssociationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyAssociationResponse)(nil)).Elem()
}

func (i FirewallPolicyAssociationResponseArgs) ToFirewallPolicyAssociationResponseOutput() FirewallPolicyAssociationResponseOutput {
	return i.ToFirewallPolicyAssociationResponseOutputWithContext(context.Background())
}

func (i FirewallPolicyAssociationResponseArgs) ToFirewallPolicyAssociationResponseOutputWithContext(ctx context.Context) FirewallPolicyAssociationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyAssociationResponseOutput)
}

// FirewallPolicyAssociationResponseArrayInput is an input type that accepts FirewallPolicyAssociationResponseArray and FirewallPolicyAssociationResponseArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyAssociationResponseArrayInput` via:
//
//          FirewallPolicyAssociationResponseArray{ FirewallPolicyAssociationResponseArgs{...} }
type FirewallPolicyAssociationResponseArrayInput interface {
	pulumi.Input

	ToFirewallPolicyAssociationResponseArrayOutput() FirewallPolicyAssociationResponseArrayOutput
	ToFirewallPolicyAssociationResponseArrayOutputWithContext(context.Context) FirewallPolicyAssociationResponseArrayOutput
}

type FirewallPolicyAssociationResponseArray []FirewallPolicyAssociationResponseInput

func (FirewallPolicyAssociationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyAssociationResponse)(nil)).Elem()
}

func (i FirewallPolicyAssociationResponseArray) ToFirewallPolicyAssociationResponseArrayOutput() FirewallPolicyAssociationResponseArrayOutput {
	return i.ToFirewallPolicyAssociationResponseArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyAssociationResponseArray) ToFirewallPolicyAssociationResponseArrayOutputWithContext(ctx context.Context) FirewallPolicyAssociationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyAssociationResponseArrayOutput)
}

type FirewallPolicyAssociationResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicyAssociationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyAssociationResponse)(nil)).Elem()
}

func (o FirewallPolicyAssociationResponseOutput) ToFirewallPolicyAssociationResponseOutput() FirewallPolicyAssociationResponseOutput {
	return o
}

func (o FirewallPolicyAssociationResponseOutput) ToFirewallPolicyAssociationResponseOutputWithContext(ctx context.Context) FirewallPolicyAssociationResponseOutput {
	return o
}

// The target that the firewall policy is attached to.
func (o FirewallPolicyAssociationResponseOutput) AttachmentTarget() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyAssociationResponse) string { return v.AttachmentTarget }).(pulumi.StringOutput)
}

// Deprecated, please use short name instead. The display name of the firewall policy of the association.
func (o FirewallPolicyAssociationResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyAssociationResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The firewall policy ID of the association.
func (o FirewallPolicyAssociationResponseOutput) FirewallPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyAssociationResponse) string { return v.FirewallPolicyId }).(pulumi.StringOutput)
}

// The name for an association.
func (o FirewallPolicyAssociationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyAssociationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The short name of the firewall policy of the association.
func (o FirewallPolicyAssociationResponseOutput) ShortName() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyAssociationResponse) string { return v.ShortName }).(pulumi.StringOutput)
}

type FirewallPolicyAssociationResponseArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyAssociationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyAssociationResponse)(nil)).Elem()
}

func (o FirewallPolicyAssociationResponseArrayOutput) ToFirewallPolicyAssociationResponseArrayOutput() FirewallPolicyAssociationResponseArrayOutput {
	return o
}

func (o FirewallPolicyAssociationResponseArrayOutput) ToFirewallPolicyAssociationResponseArrayOutputWithContext(ctx context.Context) FirewallPolicyAssociationResponseArrayOutput {
	return o
}

func (o FirewallPolicyAssociationResponseArrayOutput) Index(i pulumi.IntInput) FirewallPolicyAssociationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyAssociationResponse {
		return vs[0].([]FirewallPolicyAssociationResponse)[vs[1].(int)]
	}).(FirewallPolicyAssociationResponseOutput)
}

// Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
type FirewallPolicyRule struct {
	// The Action to perform when the client connection triggers the rule. Can currently be either "allow" or "deny()" where valid values for status are 403, 404, and 502.
	Action *string `pulumi:"action"`
	// An optional description for this resource.
	Description *string `pulumi:"description"`
	// The direction in which this rule applies.
	Direction *string `pulumi:"direction"`
	// Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
	Disabled *bool `pulumi:"disabled"`
	// Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "goto_next" rules.
	EnableLogging *bool `pulumi:"enableLogging"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	Match *FirewallPolicyRuleMatcher `pulumi:"match"`
	// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
	Priority *int `pulumi:"priority"`
	// A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.
	TargetResources []string `pulumi:"targetResources"`
	// A list of service accounts indicating the sets of instances that are applied with this rule.
	TargetServiceAccounts []string `pulumi:"targetServiceAccounts"`
}

// FirewallPolicyRuleInput is an input type that accepts FirewallPolicyRuleArgs and FirewallPolicyRuleOutput values.
// You can construct a concrete instance of `FirewallPolicyRuleInput` via:
//
//          FirewallPolicyRuleArgs{...}
type FirewallPolicyRuleInput interface {
	pulumi.Input

	ToFirewallPolicyRuleOutput() FirewallPolicyRuleOutput
	ToFirewallPolicyRuleOutputWithContext(context.Context) FirewallPolicyRuleOutput
}

// Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
type FirewallPolicyRuleArgs struct {
	// The Action to perform when the client connection triggers the rule. Can currently be either "allow" or "deny()" where valid values for status are 403, 404, and 502.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// An optional description for this resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The direction in which this rule applies.
	Direction *FirewallPolicyRuleDirection `pulumi:"direction"`
	// Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "goto_next" rules.
	EnableLogging pulumi.BoolPtrInput `pulumi:"enableLogging"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	Match FirewallPolicyRuleMatcherPtrInput `pulumi:"match"`
	// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.
	TargetResources pulumi.StringArrayInput `pulumi:"targetResources"`
	// A list of service accounts indicating the sets of instances that are applied with this rule.
	TargetServiceAccounts pulumi.StringArrayInput `pulumi:"targetServiceAccounts"`
}

func (FirewallPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyRule)(nil)).Elem()
}

func (i FirewallPolicyRuleArgs) ToFirewallPolicyRuleOutput() FirewallPolicyRuleOutput {
	return i.ToFirewallPolicyRuleOutputWithContext(context.Background())
}

func (i FirewallPolicyRuleArgs) ToFirewallPolicyRuleOutputWithContext(ctx context.Context) FirewallPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyRuleOutput)
}

// FirewallPolicyRuleArrayInput is an input type that accepts FirewallPolicyRuleArray and FirewallPolicyRuleArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyRuleArrayInput` via:
//
//          FirewallPolicyRuleArray{ FirewallPolicyRuleArgs{...} }
type FirewallPolicyRuleArrayInput interface {
	pulumi.Input

	ToFirewallPolicyRuleArrayOutput() FirewallPolicyRuleArrayOutput
	ToFirewallPolicyRuleArrayOutputWithContext(context.Context) FirewallPolicyRuleArrayOutput
}

type FirewallPolicyRuleArray []FirewallPolicyRuleInput

func (FirewallPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyRule)(nil)).Elem()
}

func (i FirewallPolicyRuleArray) ToFirewallPolicyRuleArrayOutput() FirewallPolicyRuleArrayOutput {
	return i.ToFirewallPolicyRuleArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyRuleArray) ToFirewallPolicyRuleArrayOutputWithContext(ctx context.Context) FirewallPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyRuleArrayOutput)
}

// Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
type FirewallPolicyRuleOutput struct{ *pulumi.OutputState }

func (FirewallPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyRule)(nil)).Elem()
}

func (o FirewallPolicyRuleOutput) ToFirewallPolicyRuleOutput() FirewallPolicyRuleOutput {
	return o
}

func (o FirewallPolicyRuleOutput) ToFirewallPolicyRuleOutputWithContext(ctx context.Context) FirewallPolicyRuleOutput {
	return o
}

// The Action to perform when the client connection triggers the rule. Can currently be either "allow" or "deny()" where valid values for status are 403, 404, and 502.
func (o FirewallPolicyRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// An optional description for this resource.
func (o FirewallPolicyRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The direction in which this rule applies.
func (o FirewallPolicyRuleOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyRule) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
func (o FirewallPolicyRuleOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallPolicyRule) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "goto_next" rules.
func (o FirewallPolicyRuleOutput) EnableLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FirewallPolicyRule) *bool { return v.EnableLogging }).(pulumi.BoolPtrOutput)
}

// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
func (o FirewallPolicyRuleOutput) Match() FirewallPolicyRuleMatcherPtrOutput {
	return o.ApplyT(func(v FirewallPolicyRule) *FirewallPolicyRuleMatcher { return v.Match }).(FirewallPolicyRuleMatcherPtrOutput)
}

// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
func (o FirewallPolicyRuleOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallPolicyRule) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.
func (o FirewallPolicyRuleOutput) TargetResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyRule) []string { return v.TargetResources }).(pulumi.StringArrayOutput)
}

// A list of service accounts indicating the sets of instances that are applied with this rule.
func (o FirewallPolicyRuleOutput) TargetServiceAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyRule) []string { return v.TargetServiceAccounts }).(pulumi.StringArrayOutput)
}

type FirewallPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyRule)(nil)).Elem()
}

func (o FirewallPolicyRuleArrayOutput) ToFirewallPolicyRuleArrayOutput() FirewallPolicyRuleArrayOutput {
	return o
}

func (o FirewallPolicyRuleArrayOutput) ToFirewallPolicyRuleArrayOutputWithContext(ctx context.Context) FirewallPolicyRuleArrayOutput {
	return o
}

func (o FirewallPolicyRuleArrayOutput) Index(i pulumi.IntInput) FirewallPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyRule {
		return vs[0].([]FirewallPolicyRule)[vs[1].(int)]
	}).(FirewallPolicyRuleOutput)
}

// Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
type FirewallPolicyRuleMatcher struct {
	// CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 256.
	DestIpRanges []string `pulumi:"destIpRanges"`
	// Pairs of IP protocols and ports that the rule should match.
	Layer4Configs []FirewallPolicyRuleMatcherLayer4Config `pulumi:"layer4Configs"`
	// CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 256.
	SrcIpRanges []string `pulumi:"srcIpRanges"`
}

// FirewallPolicyRuleMatcherInput is an input type that accepts FirewallPolicyRuleMatcherArgs and FirewallPolicyRuleMatcherOutput values.
// You can construct a concrete instance of `FirewallPolicyRuleMatcherInput` via:
//
//          FirewallPolicyRuleMatcherArgs{...}
type FirewallPolicyRuleMatcherInput interface {
	pulumi.Input

	ToFirewallPolicyRuleMatcherOutput() FirewallPolicyRuleMatcherOutput
	ToFirewallPolicyRuleMatcherOutputWithContext(context.Context) FirewallPolicyRuleMatcherOutput
}

// Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
type FirewallPolicyRuleMatcherArgs struct {
	// CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 256.
	DestIpRanges pulumi.StringArrayInput `pulumi:"destIpRanges"`
	// Pairs of IP protocols and ports that the rule should match.
	Layer4Configs FirewallPolicyRuleMatcherLayer4ConfigArrayInput `pulumi:"layer4Configs"`
	// CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 256.
	SrcIpRanges pulumi.StringArrayInput `pulumi:"srcIpRanges"`
}

func (FirewallPolicyRuleMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyRuleMatcher)(nil)).Elem()
}

func (i FirewallPolicyRuleMatcherArgs) ToFirewallPolicyRuleMatcherOutput() FirewallPolicyRuleMatcherOutput {
	return i.ToFirewallPolicyRuleMatcherOutputWithContext(context.Background())
}

func (i FirewallPolicyRuleMatcherArgs) ToFirewallPolicyRuleMatcherOutputWithContext(ctx context.Context) FirewallPolicyRuleMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyRuleMatcherOutput)
}

func (i FirewallPolicyRuleMatcherArgs) ToFirewallPolicyRuleMatcherPtrOutput() FirewallPolicyRuleMatcherPtrOutput {
	return i.ToFirewallPolicyRuleMatcherPtrOutputWithContext(context.Background())
}

func (i FirewallPolicyRuleMatcherArgs) ToFirewallPolicyRuleMatcherPtrOutputWithContext(ctx context.Context) FirewallPolicyRuleMatcherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyRuleMatcherOutput).ToFirewallPolicyRuleMatcherPtrOutputWithContext(ctx)
}

// FirewallPolicyRuleMatcherPtrInput is an input type that accepts FirewallPolicyRuleMatcherArgs, FirewallPolicyRuleMatcherPtr and FirewallPolicyRuleMatcherPtrOutput values.
// You can construct a concrete instance of `FirewallPolicyRuleMatcherPtrInput` via:
//
//          FirewallPolicyRuleMatcherArgs{...}
//
//  or:
//
//          nil
type FirewallPolicyRuleMatcherPtrInput interface {
	pulumi.Input

	ToFirewallPolicyRuleMatcherPtrOutput() FirewallPolicyRuleMatcherPtrOutput
	ToFirewallPolicyRuleMatcherPtrOutputWithContext(context.Context) FirewallPolicyRuleMatcherPtrOutput
}

type firewallPolicyRuleMatcherPtrType FirewallPolicyRuleMatcherArgs

func FirewallPolicyRuleMatcherPtr(v *FirewallPolicyRuleMatcherArgs) FirewallPolicyRuleMatcherPtrInput {
	return (*firewallPolicyRuleMatcherPtrType)(v)
}

func (*firewallPolicyRuleMatcherPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyRuleMatcher)(nil)).Elem()
}

func (i *firewallPolicyRuleMatcherPtrType) ToFirewallPolicyRuleMatcherPtrOutput() FirewallPolicyRuleMatcherPtrOutput {
	return i.ToFirewallPolicyRuleMatcherPtrOutputWithContext(context.Background())
}

func (i *firewallPolicyRuleMatcherPtrType) ToFirewallPolicyRuleMatcherPtrOutputWithContext(ctx context.Context) FirewallPolicyRuleMatcherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyRuleMatcherPtrOutput)
}

// Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
type FirewallPolicyRuleMatcherOutput struct{ *pulumi.OutputState }

func (FirewallPolicyRuleMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyRuleMatcher)(nil)).Elem()
}

func (o FirewallPolicyRuleMatcherOutput) ToFirewallPolicyRuleMatcherOutput() FirewallPolicyRuleMatcherOutput {
	return o
}

func (o FirewallPolicyRuleMatcherOutput) ToFirewallPolicyRuleMatcherOutputWithContext(ctx context.Context) FirewallPolicyRuleMatcherOutput {
	return o
}

func (o FirewallPolicyRuleMatcherOutput) ToFirewallPolicyRuleMatcherPtrOutput() FirewallPolicyRuleMatcherPtrOutput {
	return o.ToFirewallPolicyRuleMatcherPtrOutputWithContext(context.Background())
}

func (o FirewallPolicyRuleMatcherOutput) ToFirewallPolicyRuleMatcherPtrOutputWithContext(ctx context.Context) FirewallPolicyRuleMatcherPtrOutput {
	return o.ApplyT(func(v FirewallPolicyRuleMatcher) *FirewallPolicyRuleMatcher {
		return &v
	}).(FirewallPolicyRuleMatcherPtrOutput)
}

// CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 256.
func (o FirewallPolicyRuleMatcherOutput) DestIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyRuleMatcher) []string { return v.DestIpRanges }).(pulumi.StringArrayOutput)
}

// Pairs of IP protocols and ports that the rule should match.
func (o FirewallPolicyRuleMatcherOutput) Layer4Configs() FirewallPolicyRuleMatcherLayer4ConfigArrayOutput {
	return o.ApplyT(func(v FirewallPolicyRuleMatcher) []FirewallPolicyRuleMatcherLayer4Config { return v.Layer4Configs }).(FirewallPolicyRuleMatcherLayer4ConfigArrayOutput)
}

// CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 256.
func (o FirewallPolicyRuleMatcherOutput) SrcIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyRuleMatcher) []string { return v.SrcIpRanges }).(pulumi.StringArrayOutput)
}

type FirewallPolicyRuleMatcherPtrOutput struct{ *pulumi.OutputState }

func (FirewallPolicyRuleMatcherPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallPolicyRuleMatcher)(nil)).Elem()
}

func (o FirewallPolicyRuleMatcherPtrOutput) ToFirewallPolicyRuleMatcherPtrOutput() FirewallPolicyRuleMatcherPtrOutput {
	return o
}

func (o FirewallPolicyRuleMatcherPtrOutput) ToFirewallPolicyRuleMatcherPtrOutputWithContext(ctx context.Context) FirewallPolicyRuleMatcherPtrOutput {
	return o
}

func (o FirewallPolicyRuleMatcherPtrOutput) Elem() FirewallPolicyRuleMatcherOutput {
	return o.ApplyT(func(v *FirewallPolicyRuleMatcher) FirewallPolicyRuleMatcher { return *v }).(FirewallPolicyRuleMatcherOutput)
}

// CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 256.
func (o FirewallPolicyRuleMatcherPtrOutput) DestIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallPolicyRuleMatcher) []string {
		if v == nil {
			return nil
		}
		return v.DestIpRanges
	}).(pulumi.StringArrayOutput)
}

// Pairs of IP protocols and ports that the rule should match.
func (o FirewallPolicyRuleMatcherPtrOutput) Layer4Configs() FirewallPolicyRuleMatcherLayer4ConfigArrayOutput {
	return o.ApplyT(func(v *FirewallPolicyRuleMatcher) []FirewallPolicyRuleMatcherLayer4Config {
		if v == nil {
			return nil
		}
		return v.Layer4Configs
	}).(FirewallPolicyRuleMatcherLayer4ConfigArrayOutput)
}

// CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 256.
func (o FirewallPolicyRuleMatcherPtrOutput) SrcIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallPolicyRuleMatcher) []string {
		if v == nil {
			return nil
		}
		return v.SrcIpRanges
	}).(pulumi.StringArrayOutput)
}

type FirewallPolicyRuleMatcherLayer4Config struct {
	// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number.
	IpProtocol *string `pulumi:"ipProtocol"`
	// An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
	Ports []string `pulumi:"ports"`
}

// FirewallPolicyRuleMatcherLayer4ConfigInput is an input type that accepts FirewallPolicyRuleMatcherLayer4ConfigArgs and FirewallPolicyRuleMatcherLayer4ConfigOutput values.
// You can construct a concrete instance of `FirewallPolicyRuleMatcherLayer4ConfigInput` via:
//
//          FirewallPolicyRuleMatcherLayer4ConfigArgs{...}
type FirewallPolicyRuleMatcherLayer4ConfigInput interface {
	pulumi.Input

	ToFirewallPolicyRuleMatcherLayer4ConfigOutput() FirewallPolicyRuleMatcherLayer4ConfigOutput
	ToFirewallPolicyRuleMatcherLayer4ConfigOutputWithContext(context.Context) FirewallPolicyRuleMatcherLayer4ConfigOutput
}

type FirewallPolicyRuleMatcherLayer4ConfigArgs struct {
	// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number.
	IpProtocol pulumi.StringPtrInput `pulumi:"ipProtocol"`
	// An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
	Ports pulumi.StringArrayInput `pulumi:"ports"`
}

func (FirewallPolicyRuleMatcherLayer4ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyRuleMatcherLayer4Config)(nil)).Elem()
}

func (i FirewallPolicyRuleMatcherLayer4ConfigArgs) ToFirewallPolicyRuleMatcherLayer4ConfigOutput() FirewallPolicyRuleMatcherLayer4ConfigOutput {
	return i.ToFirewallPolicyRuleMatcherLayer4ConfigOutputWithContext(context.Background())
}

func (i FirewallPolicyRuleMatcherLayer4ConfigArgs) ToFirewallPolicyRuleMatcherLayer4ConfigOutputWithContext(ctx context.Context) FirewallPolicyRuleMatcherLayer4ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyRuleMatcherLayer4ConfigOutput)
}

// FirewallPolicyRuleMatcherLayer4ConfigArrayInput is an input type that accepts FirewallPolicyRuleMatcherLayer4ConfigArray and FirewallPolicyRuleMatcherLayer4ConfigArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyRuleMatcherLayer4ConfigArrayInput` via:
//
//          FirewallPolicyRuleMatcherLayer4ConfigArray{ FirewallPolicyRuleMatcherLayer4ConfigArgs{...} }
type FirewallPolicyRuleMatcherLayer4ConfigArrayInput interface {
	pulumi.Input

	ToFirewallPolicyRuleMatcherLayer4ConfigArrayOutput() FirewallPolicyRuleMatcherLayer4ConfigArrayOutput
	ToFirewallPolicyRuleMatcherLayer4ConfigArrayOutputWithContext(context.Context) FirewallPolicyRuleMatcherLayer4ConfigArrayOutput
}

type FirewallPolicyRuleMatcherLayer4ConfigArray []FirewallPolicyRuleMatcherLayer4ConfigInput

func (FirewallPolicyRuleMatcherLayer4ConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyRuleMatcherLayer4Config)(nil)).Elem()
}

func (i FirewallPolicyRuleMatcherLayer4ConfigArray) ToFirewallPolicyRuleMatcherLayer4ConfigArrayOutput() FirewallPolicyRuleMatcherLayer4ConfigArrayOutput {
	return i.ToFirewallPolicyRuleMatcherLayer4ConfigArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyRuleMatcherLayer4ConfigArray) ToFirewallPolicyRuleMatcherLayer4ConfigArrayOutputWithContext(ctx context.Context) FirewallPolicyRuleMatcherLayer4ConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyRuleMatcherLayer4ConfigArrayOutput)
}

type FirewallPolicyRuleMatcherLayer4ConfigOutput struct{ *pulumi.OutputState }

func (FirewallPolicyRuleMatcherLayer4ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyRuleMatcherLayer4Config)(nil)).Elem()
}

func (o FirewallPolicyRuleMatcherLayer4ConfigOutput) ToFirewallPolicyRuleMatcherLayer4ConfigOutput() FirewallPolicyRuleMatcherLayer4ConfigOutput {
	return o
}

func (o FirewallPolicyRuleMatcherLayer4ConfigOutput) ToFirewallPolicyRuleMatcherLayer4ConfigOutputWithContext(ctx context.Context) FirewallPolicyRuleMatcherLayer4ConfigOutput {
	return o
}

// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number.
func (o FirewallPolicyRuleMatcherLayer4ConfigOutput) IpProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallPolicyRuleMatcherLayer4Config) *string { return v.IpProtocol }).(pulumi.StringPtrOutput)
}

// An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
func (o FirewallPolicyRuleMatcherLayer4ConfigOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyRuleMatcherLayer4Config) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

type FirewallPolicyRuleMatcherLayer4ConfigArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyRuleMatcherLayer4ConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyRuleMatcherLayer4Config)(nil)).Elem()
}

func (o FirewallPolicyRuleMatcherLayer4ConfigArrayOutput) ToFirewallPolicyRuleMatcherLayer4ConfigArrayOutput() FirewallPolicyRuleMatcherLayer4ConfigArrayOutput {
	return o
}

func (o FirewallPolicyRuleMatcherLayer4ConfigArrayOutput) ToFirewallPolicyRuleMatcherLayer4ConfigArrayOutputWithContext(ctx context.Context) FirewallPolicyRuleMatcherLayer4ConfigArrayOutput {
	return o
}

func (o FirewallPolicyRuleMatcherLayer4ConfigArrayOutput) Index(i pulumi.IntInput) FirewallPolicyRuleMatcherLayer4ConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyRuleMatcherLayer4Config {
		return vs[0].([]FirewallPolicyRuleMatcherLayer4Config)[vs[1].(int)]
	}).(FirewallPolicyRuleMatcherLayer4ConfigOutput)
}

type FirewallPolicyRuleMatcherLayer4ConfigResponse struct {
	// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number.
	IpProtocol string `pulumi:"ipProtocol"`
	// An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
	Ports []string `pulumi:"ports"`
}

// FirewallPolicyRuleMatcherLayer4ConfigResponseInput is an input type that accepts FirewallPolicyRuleMatcherLayer4ConfigResponseArgs and FirewallPolicyRuleMatcherLayer4ConfigResponseOutput values.
// You can construct a concrete instance of `FirewallPolicyRuleMatcherLayer4ConfigResponseInput` via:
//
//          FirewallPolicyRuleMatcherLayer4ConfigResponseArgs{...}
type FirewallPolicyRuleMatcherLayer4ConfigResponseInput interface {
	pulumi.Input

	ToFirewallPolicyRuleMatcherLayer4ConfigResponseOutput() FirewallPolicyRuleMatcherLayer4ConfigResponseOutput
	ToFirewallPolicyRuleMatcherLayer4ConfigResponseOutputWithContext(context.Context) FirewallPolicyRuleMatcherLayer4ConfigResponseOutput
}

type FirewallPolicyRuleMatcherLayer4ConfigResponseArgs struct {
	// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number.
	IpProtocol pulumi.StringInput `pulumi:"ipProtocol"`
	// An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
	Ports pulumi.StringArrayInput `pulumi:"ports"`
}

func (FirewallPolicyRuleMatcherLayer4ConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyRuleMatcherLayer4ConfigResponse)(nil)).Elem()
}

func (i FirewallPolicyRuleMatcherLayer4ConfigResponseArgs) ToFirewallPolicyRuleMatcherLayer4ConfigResponseOutput() FirewallPolicyRuleMatcherLayer4ConfigResponseOutput {
	return i.ToFirewallPolicyRuleMatcherLayer4ConfigResponseOutputWithContext(context.Background())
}

func (i FirewallPolicyRuleMatcherLayer4ConfigResponseArgs) ToFirewallPolicyRuleMatcherLayer4ConfigResponseOutputWithContext(ctx context.Context) FirewallPolicyRuleMatcherLayer4ConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyRuleMatcherLayer4ConfigResponseOutput)
}

// FirewallPolicyRuleMatcherLayer4ConfigResponseArrayInput is an input type that accepts FirewallPolicyRuleMatcherLayer4ConfigResponseArray and FirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyRuleMatcherLayer4ConfigResponseArrayInput` via:
//
//          FirewallPolicyRuleMatcherLayer4ConfigResponseArray{ FirewallPolicyRuleMatcherLayer4ConfigResponseArgs{...} }
type FirewallPolicyRuleMatcherLayer4ConfigResponseArrayInput interface {
	pulumi.Input

	ToFirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput() FirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput
	ToFirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutputWithContext(context.Context) FirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput
}

type FirewallPolicyRuleMatcherLayer4ConfigResponseArray []FirewallPolicyRuleMatcherLayer4ConfigResponseInput

func (FirewallPolicyRuleMatcherLayer4ConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyRuleMatcherLayer4ConfigResponse)(nil)).Elem()
}

func (i FirewallPolicyRuleMatcherLayer4ConfigResponseArray) ToFirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput() FirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput {
	return i.ToFirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyRuleMatcherLayer4ConfigResponseArray) ToFirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutputWithContext(ctx context.Context) FirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput)
}

type FirewallPolicyRuleMatcherLayer4ConfigResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicyRuleMatcherLayer4ConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyRuleMatcherLayer4ConfigResponse)(nil)).Elem()
}

func (o FirewallPolicyRuleMatcherLayer4ConfigResponseOutput) ToFirewallPolicyRuleMatcherLayer4ConfigResponseOutput() FirewallPolicyRuleMatcherLayer4ConfigResponseOutput {
	return o
}

func (o FirewallPolicyRuleMatcherLayer4ConfigResponseOutput) ToFirewallPolicyRuleMatcherLayer4ConfigResponseOutputWithContext(ctx context.Context) FirewallPolicyRuleMatcherLayer4ConfigResponseOutput {
	return o
}

// The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number.
func (o FirewallPolicyRuleMatcherLayer4ConfigResponseOutput) IpProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyRuleMatcherLayer4ConfigResponse) string { return v.IpProtocol }).(pulumi.StringOutput)
}

// An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
func (o FirewallPolicyRuleMatcherLayer4ConfigResponseOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyRuleMatcherLayer4ConfigResponse) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

type FirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyRuleMatcherLayer4ConfigResponse)(nil)).Elem()
}

func (o FirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput) ToFirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput() FirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput {
	return o
}

func (o FirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput) ToFirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutputWithContext(ctx context.Context) FirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput {
	return o
}

func (o FirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput) Index(i pulumi.IntInput) FirewallPolicyRuleMatcherLayer4ConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyRuleMatcherLayer4ConfigResponse {
		return vs[0].([]FirewallPolicyRuleMatcherLayer4ConfigResponse)[vs[1].(int)]
	}).(FirewallPolicyRuleMatcherLayer4ConfigResponseOutput)
}

// Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
type FirewallPolicyRuleMatcherResponse struct {
	// CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 256.
	DestIpRanges []string `pulumi:"destIpRanges"`
	// Pairs of IP protocols and ports that the rule should match.
	Layer4Configs []FirewallPolicyRuleMatcherLayer4ConfigResponse `pulumi:"layer4Configs"`
	// CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 256.
	SrcIpRanges []string `pulumi:"srcIpRanges"`
}

// FirewallPolicyRuleMatcherResponseInput is an input type that accepts FirewallPolicyRuleMatcherResponseArgs and FirewallPolicyRuleMatcherResponseOutput values.
// You can construct a concrete instance of `FirewallPolicyRuleMatcherResponseInput` via:
//
//          FirewallPolicyRuleMatcherResponseArgs{...}
type FirewallPolicyRuleMatcherResponseInput interface {
	pulumi.Input

	ToFirewallPolicyRuleMatcherResponseOutput() FirewallPolicyRuleMatcherResponseOutput
	ToFirewallPolicyRuleMatcherResponseOutputWithContext(context.Context) FirewallPolicyRuleMatcherResponseOutput
}

// Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
type FirewallPolicyRuleMatcherResponseArgs struct {
	// CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 256.
	DestIpRanges pulumi.StringArrayInput `pulumi:"destIpRanges"`
	// Pairs of IP protocols and ports that the rule should match.
	Layer4Configs FirewallPolicyRuleMatcherLayer4ConfigResponseArrayInput `pulumi:"layer4Configs"`
	// CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 256.
	SrcIpRanges pulumi.StringArrayInput `pulumi:"srcIpRanges"`
}

func (FirewallPolicyRuleMatcherResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyRuleMatcherResponse)(nil)).Elem()
}

func (i FirewallPolicyRuleMatcherResponseArgs) ToFirewallPolicyRuleMatcherResponseOutput() FirewallPolicyRuleMatcherResponseOutput {
	return i.ToFirewallPolicyRuleMatcherResponseOutputWithContext(context.Background())
}

func (i FirewallPolicyRuleMatcherResponseArgs) ToFirewallPolicyRuleMatcherResponseOutputWithContext(ctx context.Context) FirewallPolicyRuleMatcherResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyRuleMatcherResponseOutput)
}

// Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
type FirewallPolicyRuleMatcherResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicyRuleMatcherResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyRuleMatcherResponse)(nil)).Elem()
}

func (o FirewallPolicyRuleMatcherResponseOutput) ToFirewallPolicyRuleMatcherResponseOutput() FirewallPolicyRuleMatcherResponseOutput {
	return o
}

func (o FirewallPolicyRuleMatcherResponseOutput) ToFirewallPolicyRuleMatcherResponseOutputWithContext(ctx context.Context) FirewallPolicyRuleMatcherResponseOutput {
	return o
}

// CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 256.
func (o FirewallPolicyRuleMatcherResponseOutput) DestIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyRuleMatcherResponse) []string { return v.DestIpRanges }).(pulumi.StringArrayOutput)
}

// Pairs of IP protocols and ports that the rule should match.
func (o FirewallPolicyRuleMatcherResponseOutput) Layer4Configs() FirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput {
	return o.ApplyT(func(v FirewallPolicyRuleMatcherResponse) []FirewallPolicyRuleMatcherLayer4ConfigResponse {
		return v.Layer4Configs
	}).(FirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput)
}

// CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 256.
func (o FirewallPolicyRuleMatcherResponseOutput) SrcIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyRuleMatcherResponse) []string { return v.SrcIpRanges }).(pulumi.StringArrayOutput)
}

// Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
type FirewallPolicyRuleResponse struct {
	// The Action to perform when the client connection triggers the rule. Can currently be either "allow" or "deny()" where valid values for status are 403, 404, and 502.
	Action string `pulumi:"action"`
	// An optional description for this resource.
	Description string `pulumi:"description"`
	// The direction in which this rule applies.
	Direction string `pulumi:"direction"`
	// Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
	Disabled bool `pulumi:"disabled"`
	// Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "goto_next" rules.
	EnableLogging bool `pulumi:"enableLogging"`
	// [Output only] Type of the resource. Always compute#firewallPolicyRule for firewall policy rules
	Kind string `pulumi:"kind"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	Match FirewallPolicyRuleMatcherResponse `pulumi:"match"`
	// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
	Priority int `pulumi:"priority"`
	// Calculation of the complexity of a single firewall policy rule.
	RuleTupleCount int `pulumi:"ruleTupleCount"`
	// A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.
	TargetResources []string `pulumi:"targetResources"`
	// A list of service accounts indicating the sets of instances that are applied with this rule.
	TargetServiceAccounts []string `pulumi:"targetServiceAccounts"`
}

// FirewallPolicyRuleResponseInput is an input type that accepts FirewallPolicyRuleResponseArgs and FirewallPolicyRuleResponseOutput values.
// You can construct a concrete instance of `FirewallPolicyRuleResponseInput` via:
//
//          FirewallPolicyRuleResponseArgs{...}
type FirewallPolicyRuleResponseInput interface {
	pulumi.Input

	ToFirewallPolicyRuleResponseOutput() FirewallPolicyRuleResponseOutput
	ToFirewallPolicyRuleResponseOutputWithContext(context.Context) FirewallPolicyRuleResponseOutput
}

// Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
type FirewallPolicyRuleResponseArgs struct {
	// The Action to perform when the client connection triggers the rule. Can currently be either "allow" or "deny()" where valid values for status are 403, 404, and 502.
	Action pulumi.StringInput `pulumi:"action"`
	// An optional description for this resource.
	Description pulumi.StringInput `pulumi:"description"`
	// The direction in which this rule applies.
	Direction pulumi.StringInput `pulumi:"direction"`
	// Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
	Disabled pulumi.BoolInput `pulumi:"disabled"`
	// Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "goto_next" rules.
	EnableLogging pulumi.BoolInput `pulumi:"enableLogging"`
	// [Output only] Type of the resource. Always compute#firewallPolicyRule for firewall policy rules
	Kind pulumi.StringInput `pulumi:"kind"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	Match FirewallPolicyRuleMatcherResponseInput `pulumi:"match"`
	// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
	Priority pulumi.IntInput `pulumi:"priority"`
	// Calculation of the complexity of a single firewall policy rule.
	RuleTupleCount pulumi.IntInput `pulumi:"ruleTupleCount"`
	// A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.
	TargetResources pulumi.StringArrayInput `pulumi:"targetResources"`
	// A list of service accounts indicating the sets of instances that are applied with this rule.
	TargetServiceAccounts pulumi.StringArrayInput `pulumi:"targetServiceAccounts"`
}

func (FirewallPolicyRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyRuleResponse)(nil)).Elem()
}

func (i FirewallPolicyRuleResponseArgs) ToFirewallPolicyRuleResponseOutput() FirewallPolicyRuleResponseOutput {
	return i.ToFirewallPolicyRuleResponseOutputWithContext(context.Background())
}

func (i FirewallPolicyRuleResponseArgs) ToFirewallPolicyRuleResponseOutputWithContext(ctx context.Context) FirewallPolicyRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyRuleResponseOutput)
}

// FirewallPolicyRuleResponseArrayInput is an input type that accepts FirewallPolicyRuleResponseArray and FirewallPolicyRuleResponseArrayOutput values.
// You can construct a concrete instance of `FirewallPolicyRuleResponseArrayInput` via:
//
//          FirewallPolicyRuleResponseArray{ FirewallPolicyRuleResponseArgs{...} }
type FirewallPolicyRuleResponseArrayInput interface {
	pulumi.Input

	ToFirewallPolicyRuleResponseArrayOutput() FirewallPolicyRuleResponseArrayOutput
	ToFirewallPolicyRuleResponseArrayOutputWithContext(context.Context) FirewallPolicyRuleResponseArrayOutput
}

type FirewallPolicyRuleResponseArray []FirewallPolicyRuleResponseInput

func (FirewallPolicyRuleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyRuleResponse)(nil)).Elem()
}

func (i FirewallPolicyRuleResponseArray) ToFirewallPolicyRuleResponseArrayOutput() FirewallPolicyRuleResponseArrayOutput {
	return i.ToFirewallPolicyRuleResponseArrayOutputWithContext(context.Background())
}

func (i FirewallPolicyRuleResponseArray) ToFirewallPolicyRuleResponseArrayOutputWithContext(ctx context.Context) FirewallPolicyRuleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallPolicyRuleResponseArrayOutput)
}

// Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
type FirewallPolicyRuleResponseOutput struct{ *pulumi.OutputState }

func (FirewallPolicyRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallPolicyRuleResponse)(nil)).Elem()
}

func (o FirewallPolicyRuleResponseOutput) ToFirewallPolicyRuleResponseOutput() FirewallPolicyRuleResponseOutput {
	return o
}

func (o FirewallPolicyRuleResponseOutput) ToFirewallPolicyRuleResponseOutputWithContext(ctx context.Context) FirewallPolicyRuleResponseOutput {
	return o
}

// The Action to perform when the client connection triggers the rule. Can currently be either "allow" or "deny()" where valid values for status are 403, 404, and 502.
func (o FirewallPolicyRuleResponseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyRuleResponse) string { return v.Action }).(pulumi.StringOutput)
}

// An optional description for this resource.
func (o FirewallPolicyRuleResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyRuleResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The direction in which this rule applies.
func (o FirewallPolicyRuleResponseOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyRuleResponse) string { return v.Direction }).(pulumi.StringOutput)
}

// Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
func (o FirewallPolicyRuleResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FirewallPolicyRuleResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub/Sub. Note: you cannot enable logging on "goto_next" rules.
func (o FirewallPolicyRuleResponseOutput) EnableLogging() pulumi.BoolOutput {
	return o.ApplyT(func(v FirewallPolicyRuleResponse) bool { return v.EnableLogging }).(pulumi.BoolOutput)
}

// [Output only] Type of the resource. Always compute#firewallPolicyRule for firewall policy rules
func (o FirewallPolicyRuleResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallPolicyRuleResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
func (o FirewallPolicyRuleResponseOutput) Match() FirewallPolicyRuleMatcherResponseOutput {
	return o.ApplyT(func(v FirewallPolicyRuleResponse) FirewallPolicyRuleMatcherResponse { return v.Match }).(FirewallPolicyRuleMatcherResponseOutput)
}

// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
func (o FirewallPolicyRuleResponseOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v FirewallPolicyRuleResponse) int { return v.Priority }).(pulumi.IntOutput)
}

// Calculation of the complexity of a single firewall policy rule.
func (o FirewallPolicyRuleResponseOutput) RuleTupleCount() pulumi.IntOutput {
	return o.ApplyT(func(v FirewallPolicyRuleResponse) int { return v.RuleTupleCount }).(pulumi.IntOutput)
}

// A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.
func (o FirewallPolicyRuleResponseOutput) TargetResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyRuleResponse) []string { return v.TargetResources }).(pulumi.StringArrayOutput)
}

// A list of service accounts indicating the sets of instances that are applied with this rule.
func (o FirewallPolicyRuleResponseOutput) TargetServiceAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallPolicyRuleResponse) []string { return v.TargetServiceAccounts }).(pulumi.StringArrayOutput)
}

type FirewallPolicyRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (FirewallPolicyRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallPolicyRuleResponse)(nil)).Elem()
}

func (o FirewallPolicyRuleResponseArrayOutput) ToFirewallPolicyRuleResponseArrayOutput() FirewallPolicyRuleResponseArrayOutput {
	return o
}

func (o FirewallPolicyRuleResponseArrayOutput) ToFirewallPolicyRuleResponseArrayOutputWithContext(ctx context.Context) FirewallPolicyRuleResponseArrayOutput {
	return o
}

func (o FirewallPolicyRuleResponseArrayOutput) Index(i pulumi.IntInput) FirewallPolicyRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallPolicyRuleResponse {
		return vs[0].([]FirewallPolicyRuleResponse)[vs[1].(int)]
	}).(FirewallPolicyRuleResponseOutput)
}

// Encapsulates numeric value that can be either absolute or relative.
type FixedOrPercent struct {
	// Specifies a fixed number of VM instances. This must be a positive integer.
	Fixed *int `pulumi:"fixed"`
	// Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
	Percent *int `pulumi:"percent"`
}

// FixedOrPercentInput is an input type that accepts FixedOrPercentArgs and FixedOrPercentOutput values.
// You can construct a concrete instance of `FixedOrPercentInput` via:
//
//          FixedOrPercentArgs{...}
type FixedOrPercentInput interface {
	pulumi.Input

	ToFixedOrPercentOutput() FixedOrPercentOutput
	ToFixedOrPercentOutputWithContext(context.Context) FixedOrPercentOutput
}

// Encapsulates numeric value that can be either absolute or relative.
type FixedOrPercentArgs struct {
	// Specifies a fixed number of VM instances. This must be a positive integer.
	Fixed pulumi.IntPtrInput `pulumi:"fixed"`
	// Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
	Percent pulumi.IntPtrInput `pulumi:"percent"`
}

func (FixedOrPercentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedOrPercent)(nil)).Elem()
}

func (i FixedOrPercentArgs) ToFixedOrPercentOutput() FixedOrPercentOutput {
	return i.ToFixedOrPercentOutputWithContext(context.Background())
}

func (i FixedOrPercentArgs) ToFixedOrPercentOutputWithContext(ctx context.Context) FixedOrPercentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentOutput)
}

func (i FixedOrPercentArgs) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return i.ToFixedOrPercentPtrOutputWithContext(context.Background())
}

func (i FixedOrPercentArgs) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentOutput).ToFixedOrPercentPtrOutputWithContext(ctx)
}

// FixedOrPercentPtrInput is an input type that accepts FixedOrPercentArgs, FixedOrPercentPtr and FixedOrPercentPtrOutput values.
// You can construct a concrete instance of `FixedOrPercentPtrInput` via:
//
//          FixedOrPercentArgs{...}
//
//  or:
//
//          nil
type FixedOrPercentPtrInput interface {
	pulumi.Input

	ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput
	ToFixedOrPercentPtrOutputWithContext(context.Context) FixedOrPercentPtrOutput
}

type fixedOrPercentPtrType FixedOrPercentArgs

func FixedOrPercentPtr(v *FixedOrPercentArgs) FixedOrPercentPtrInput {
	return (*fixedOrPercentPtrType)(v)
}

func (*fixedOrPercentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedOrPercent)(nil)).Elem()
}

func (i *fixedOrPercentPtrType) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return i.ToFixedOrPercentPtrOutputWithContext(context.Background())
}

func (i *fixedOrPercentPtrType) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentPtrOutput)
}

// Encapsulates numeric value that can be either absolute or relative.
type FixedOrPercentOutput struct{ *pulumi.OutputState }

func (FixedOrPercentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedOrPercent)(nil)).Elem()
}

func (o FixedOrPercentOutput) ToFixedOrPercentOutput() FixedOrPercentOutput {
	return o
}

func (o FixedOrPercentOutput) ToFixedOrPercentOutputWithContext(ctx context.Context) FixedOrPercentOutput {
	return o
}

func (o FixedOrPercentOutput) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return o.ToFixedOrPercentPtrOutputWithContext(context.Background())
}

func (o FixedOrPercentOutput) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return o.ApplyT(func(v FixedOrPercent) *FixedOrPercent {
		return &v
	}).(FixedOrPercentPtrOutput)
}

// Specifies a fixed number of VM instances. This must be a positive integer.
func (o FixedOrPercentOutput) Fixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FixedOrPercent) *int { return v.Fixed }).(pulumi.IntPtrOutput)
}

// Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
func (o FixedOrPercentOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FixedOrPercent) *int { return v.Percent }).(pulumi.IntPtrOutput)
}

type FixedOrPercentPtrOutput struct{ *pulumi.OutputState }

func (FixedOrPercentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedOrPercent)(nil)).Elem()
}

func (o FixedOrPercentPtrOutput) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return o
}

func (o FixedOrPercentPtrOutput) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return o
}

func (o FixedOrPercentPtrOutput) Elem() FixedOrPercentOutput {
	return o.ApplyT(func(v *FixedOrPercent) FixedOrPercent { return *v }).(FixedOrPercentOutput)
}

// Specifies a fixed number of VM instances. This must be a positive integer.
func (o FixedOrPercentPtrOutput) Fixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedOrPercent) *int {
		if v == nil {
			return nil
		}
		return v.Fixed
	}).(pulumi.IntPtrOutput)
}

// Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
func (o FixedOrPercentPtrOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedOrPercent) *int {
		if v == nil {
			return nil
		}
		return v.Percent
	}).(pulumi.IntPtrOutput)
}

// Encapsulates numeric value that can be either absolute or relative.
type FixedOrPercentResponse struct {
	// Absolute value of VM instances calculated based on the specific mode. - If the value is fixed, then the calculated value is equal to the fixed value. - If the value is a percent, then the calculated value is percent/100 * targetSize. For example, the calculated value of a 80% of a managed instance group with 150 instances would be (80/100 * 150) = 120 VM instances. If there is a remainder, the number is rounded.
	Calculated int `pulumi:"calculated"`
	// Specifies a fixed number of VM instances. This must be a positive integer.
	Fixed int `pulumi:"fixed"`
	// Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
	Percent int `pulumi:"percent"`
}

// FixedOrPercentResponseInput is an input type that accepts FixedOrPercentResponseArgs and FixedOrPercentResponseOutput values.
// You can construct a concrete instance of `FixedOrPercentResponseInput` via:
//
//          FixedOrPercentResponseArgs{...}
type FixedOrPercentResponseInput interface {
	pulumi.Input

	ToFixedOrPercentResponseOutput() FixedOrPercentResponseOutput
	ToFixedOrPercentResponseOutputWithContext(context.Context) FixedOrPercentResponseOutput
}

// Encapsulates numeric value that can be either absolute or relative.
type FixedOrPercentResponseArgs struct {
	// Absolute value of VM instances calculated based on the specific mode. - If the value is fixed, then the calculated value is equal to the fixed value. - If the value is a percent, then the calculated value is percent/100 * targetSize. For example, the calculated value of a 80% of a managed instance group with 150 instances would be (80/100 * 150) = 120 VM instances. If there is a remainder, the number is rounded.
	Calculated pulumi.IntInput `pulumi:"calculated"`
	// Specifies a fixed number of VM instances. This must be a positive integer.
	Fixed pulumi.IntInput `pulumi:"fixed"`
	// Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
	Percent pulumi.IntInput `pulumi:"percent"`
}

func (FixedOrPercentResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedOrPercentResponse)(nil)).Elem()
}

func (i FixedOrPercentResponseArgs) ToFixedOrPercentResponseOutput() FixedOrPercentResponseOutput {
	return i.ToFixedOrPercentResponseOutputWithContext(context.Background())
}

func (i FixedOrPercentResponseArgs) ToFixedOrPercentResponseOutputWithContext(ctx context.Context) FixedOrPercentResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentResponseOutput)
}

func (i FixedOrPercentResponseArgs) ToFixedOrPercentResponsePtrOutput() FixedOrPercentResponsePtrOutput {
	return i.ToFixedOrPercentResponsePtrOutputWithContext(context.Background())
}

func (i FixedOrPercentResponseArgs) ToFixedOrPercentResponsePtrOutputWithContext(ctx context.Context) FixedOrPercentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentResponseOutput).ToFixedOrPercentResponsePtrOutputWithContext(ctx)
}

// FixedOrPercentResponsePtrInput is an input type that accepts FixedOrPercentResponseArgs, FixedOrPercentResponsePtr and FixedOrPercentResponsePtrOutput values.
// You can construct a concrete instance of `FixedOrPercentResponsePtrInput` via:
//
//          FixedOrPercentResponseArgs{...}
//
//  or:
//
//          nil
type FixedOrPercentResponsePtrInput interface {
	pulumi.Input

	ToFixedOrPercentResponsePtrOutput() FixedOrPercentResponsePtrOutput
	ToFixedOrPercentResponsePtrOutputWithContext(context.Context) FixedOrPercentResponsePtrOutput
}

type fixedOrPercentResponsePtrType FixedOrPercentResponseArgs

func FixedOrPercentResponsePtr(v *FixedOrPercentResponseArgs) FixedOrPercentResponsePtrInput {
	return (*fixedOrPercentResponsePtrType)(v)
}

func (*fixedOrPercentResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedOrPercentResponse)(nil)).Elem()
}

func (i *fixedOrPercentResponsePtrType) ToFixedOrPercentResponsePtrOutput() FixedOrPercentResponsePtrOutput {
	return i.ToFixedOrPercentResponsePtrOutputWithContext(context.Background())
}

func (i *fixedOrPercentResponsePtrType) ToFixedOrPercentResponsePtrOutputWithContext(ctx context.Context) FixedOrPercentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentResponsePtrOutput)
}

// Encapsulates numeric value that can be either absolute or relative.
type FixedOrPercentResponseOutput struct{ *pulumi.OutputState }

func (FixedOrPercentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedOrPercentResponse)(nil)).Elem()
}

func (o FixedOrPercentResponseOutput) ToFixedOrPercentResponseOutput() FixedOrPercentResponseOutput {
	return o
}

func (o FixedOrPercentResponseOutput) ToFixedOrPercentResponseOutputWithContext(ctx context.Context) FixedOrPercentResponseOutput {
	return o
}

func (o FixedOrPercentResponseOutput) ToFixedOrPercentResponsePtrOutput() FixedOrPercentResponsePtrOutput {
	return o.ToFixedOrPercentResponsePtrOutputWithContext(context.Background())
}

func (o FixedOrPercentResponseOutput) ToFixedOrPercentResponsePtrOutputWithContext(ctx context.Context) FixedOrPercentResponsePtrOutput {
	return o.ApplyT(func(v FixedOrPercentResponse) *FixedOrPercentResponse {
		return &v
	}).(FixedOrPercentResponsePtrOutput)
}

// Absolute value of VM instances calculated based on the specific mode. - If the value is fixed, then the calculated value is equal to the fixed value. - If the value is a percent, then the calculated value is percent/100 * targetSize. For example, the calculated value of a 80% of a managed instance group with 150 instances would be (80/100 * 150) = 120 VM instances. If there is a remainder, the number is rounded.
func (o FixedOrPercentResponseOutput) Calculated() pulumi.IntOutput {
	return o.ApplyT(func(v FixedOrPercentResponse) int { return v.Calculated }).(pulumi.IntOutput)
}

// Specifies a fixed number of VM instances. This must be a positive integer.
func (o FixedOrPercentResponseOutput) Fixed() pulumi.IntOutput {
	return o.ApplyT(func(v FixedOrPercentResponse) int { return v.Fixed }).(pulumi.IntOutput)
}

// Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
func (o FixedOrPercentResponseOutput) Percent() pulumi.IntOutput {
	return o.ApplyT(func(v FixedOrPercentResponse) int { return v.Percent }).(pulumi.IntOutput)
}

type FixedOrPercentResponsePtrOutput struct{ *pulumi.OutputState }

func (FixedOrPercentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedOrPercentResponse)(nil)).Elem()
}

func (o FixedOrPercentResponsePtrOutput) ToFixedOrPercentResponsePtrOutput() FixedOrPercentResponsePtrOutput {
	return o
}

func (o FixedOrPercentResponsePtrOutput) ToFixedOrPercentResponsePtrOutputWithContext(ctx context.Context) FixedOrPercentResponsePtrOutput {
	return o
}

func (o FixedOrPercentResponsePtrOutput) Elem() FixedOrPercentResponseOutput {
	return o.ApplyT(func(v *FixedOrPercentResponse) FixedOrPercentResponse { return *v }).(FixedOrPercentResponseOutput)
}

// Absolute value of VM instances calculated based on the specific mode. - If the value is fixed, then the calculated value is equal to the fixed value. - If the value is a percent, then the calculated value is percent/100 * targetSize. For example, the calculated value of a 80% of a managed instance group with 150 instances would be (80/100 * 150) = 120 VM instances. If there is a remainder, the number is rounded.
func (o FixedOrPercentResponsePtrOutput) Calculated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedOrPercentResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Calculated
	}).(pulumi.IntPtrOutput)
}

// Specifies a fixed number of VM instances. This must be a positive integer.
func (o FixedOrPercentResponsePtrOutput) Fixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedOrPercentResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Fixed
	}).(pulumi.IntPtrOutput)
}

// Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
func (o FixedOrPercentResponsePtrOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedOrPercentResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Percent
	}).(pulumi.IntPtrOutput)
}

// Describes the auto-registration of the Forwarding Rule to Service Directory. The region and project of the Service Directory resource generated from this registration will be the same as this Forwarding Rule.
type ForwardingRuleServiceDirectoryRegistration struct {
	// Service Directory namespace to register the forwarding rule under.
	Namespace *string `pulumi:"namespace"`
	// Service Directory service to register the forwarding rule under.
	Service *string `pulumi:"service"`
	// [Optional] Service Directory region to register this global forwarding rule under. Default to "us-central1". Only used for PSC for Google APIs. All PSC for Google APIs Forwarding Rules on the same network should use the same Service Directory region.
	ServiceDirectoryRegion *string `pulumi:"serviceDirectoryRegion"`
}

// ForwardingRuleServiceDirectoryRegistrationInput is an input type that accepts ForwardingRuleServiceDirectoryRegistrationArgs and ForwardingRuleServiceDirectoryRegistrationOutput values.
// You can construct a concrete instance of `ForwardingRuleServiceDirectoryRegistrationInput` via:
//
//          ForwardingRuleServiceDirectoryRegistrationArgs{...}
type ForwardingRuleServiceDirectoryRegistrationInput interface {
	pulumi.Input

	ToForwardingRuleServiceDirectoryRegistrationOutput() ForwardingRuleServiceDirectoryRegistrationOutput
	ToForwardingRuleServiceDirectoryRegistrationOutputWithContext(context.Context) ForwardingRuleServiceDirectoryRegistrationOutput
}

// Describes the auto-registration of the Forwarding Rule to Service Directory. The region and project of the Service Directory resource generated from this registration will be the same as this Forwarding Rule.
type ForwardingRuleServiceDirectoryRegistrationArgs struct {
	// Service Directory namespace to register the forwarding rule under.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Service Directory service to register the forwarding rule under.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// [Optional] Service Directory region to register this global forwarding rule under. Default to "us-central1". Only used for PSC for Google APIs. All PSC for Google APIs Forwarding Rules on the same network should use the same Service Directory region.
	ServiceDirectoryRegion pulumi.StringPtrInput `pulumi:"serviceDirectoryRegion"`
}

func (ForwardingRuleServiceDirectoryRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardingRuleServiceDirectoryRegistration)(nil)).Elem()
}

func (i ForwardingRuleServiceDirectoryRegistrationArgs) ToForwardingRuleServiceDirectoryRegistrationOutput() ForwardingRuleServiceDirectoryRegistrationOutput {
	return i.ToForwardingRuleServiceDirectoryRegistrationOutputWithContext(context.Background())
}

func (i ForwardingRuleServiceDirectoryRegistrationArgs) ToForwardingRuleServiceDirectoryRegistrationOutputWithContext(ctx context.Context) ForwardingRuleServiceDirectoryRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingRuleServiceDirectoryRegistrationOutput)
}

// ForwardingRuleServiceDirectoryRegistrationArrayInput is an input type that accepts ForwardingRuleServiceDirectoryRegistrationArray and ForwardingRuleServiceDirectoryRegistrationArrayOutput values.
// You can construct a concrete instance of `ForwardingRuleServiceDirectoryRegistrationArrayInput` via:
//
//          ForwardingRuleServiceDirectoryRegistrationArray{ ForwardingRuleServiceDirectoryRegistrationArgs{...} }
type ForwardingRuleServiceDirectoryRegistrationArrayInput interface {
	pulumi.Input

	ToForwardingRuleServiceDirectoryRegistrationArrayOutput() ForwardingRuleServiceDirectoryRegistrationArrayOutput
	ToForwardingRuleServiceDirectoryRegistrationArrayOutputWithContext(context.Context) ForwardingRuleServiceDirectoryRegistrationArrayOutput
}

type ForwardingRuleServiceDirectoryRegistrationArray []ForwardingRuleServiceDirectoryRegistrationInput

func (ForwardingRuleServiceDirectoryRegistrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ForwardingRuleServiceDirectoryRegistration)(nil)).Elem()
}

func (i ForwardingRuleServiceDirectoryRegistrationArray) ToForwardingRuleServiceDirectoryRegistrationArrayOutput() ForwardingRuleServiceDirectoryRegistrationArrayOutput {
	return i.ToForwardingRuleServiceDirectoryRegistrationArrayOutputWithContext(context.Background())
}

func (i ForwardingRuleServiceDirectoryRegistrationArray) ToForwardingRuleServiceDirectoryRegistrationArrayOutputWithContext(ctx context.Context) ForwardingRuleServiceDirectoryRegistrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingRuleServiceDirectoryRegistrationArrayOutput)
}

// Describes the auto-registration of the Forwarding Rule to Service Directory. The region and project of the Service Directory resource generated from this registration will be the same as this Forwarding Rule.
type ForwardingRuleServiceDirectoryRegistrationOutput struct{ *pulumi.OutputState }

func (ForwardingRuleServiceDirectoryRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardingRuleServiceDirectoryRegistration)(nil)).Elem()
}

func (o ForwardingRuleServiceDirectoryRegistrationOutput) ToForwardingRuleServiceDirectoryRegistrationOutput() ForwardingRuleServiceDirectoryRegistrationOutput {
	return o
}

func (o ForwardingRuleServiceDirectoryRegistrationOutput) ToForwardingRuleServiceDirectoryRegistrationOutputWithContext(ctx context.Context) ForwardingRuleServiceDirectoryRegistrationOutput {
	return o
}

// Service Directory namespace to register the forwarding rule under.
func (o ForwardingRuleServiceDirectoryRegistrationOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleServiceDirectoryRegistration) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Service Directory service to register the forwarding rule under.
func (o ForwardingRuleServiceDirectoryRegistrationOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleServiceDirectoryRegistration) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// [Optional] Service Directory region to register this global forwarding rule under. Default to "us-central1". Only used for PSC for Google APIs. All PSC for Google APIs Forwarding Rules on the same network should use the same Service Directory region.
func (o ForwardingRuleServiceDirectoryRegistrationOutput) ServiceDirectoryRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardingRuleServiceDirectoryRegistration) *string { return v.ServiceDirectoryRegion }).(pulumi.StringPtrOutput)
}

type ForwardingRuleServiceDirectoryRegistrationArrayOutput struct{ *pulumi.OutputState }

func (ForwardingRuleServiceDirectoryRegistrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ForwardingRuleServiceDirectoryRegistration)(nil)).Elem()
}

func (o ForwardingRuleServiceDirectoryRegistrationArrayOutput) ToForwardingRuleServiceDirectoryRegistrationArrayOutput() ForwardingRuleServiceDirectoryRegistrationArrayOutput {
	return o
}

func (o ForwardingRuleServiceDirectoryRegistrationArrayOutput) ToForwardingRuleServiceDirectoryRegistrationArrayOutputWithContext(ctx context.Context) ForwardingRuleServiceDirectoryRegistrationArrayOutput {
	return o
}

func (o ForwardingRuleServiceDirectoryRegistrationArrayOutput) Index(i pulumi.IntInput) ForwardingRuleServiceDirectoryRegistrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ForwardingRuleServiceDirectoryRegistration {
		return vs[0].([]ForwardingRuleServiceDirectoryRegistration)[vs[1].(int)]
	}).(ForwardingRuleServiceDirectoryRegistrationOutput)
}

// Describes the auto-registration of the Forwarding Rule to Service Directory. The region and project of the Service Directory resource generated from this registration will be the same as this Forwarding Rule.
type ForwardingRuleServiceDirectoryRegistrationResponse struct {
	// Service Directory namespace to register the forwarding rule under.
	Namespace string `pulumi:"namespace"`
	// Service Directory service to register the forwarding rule under.
	Service string `pulumi:"service"`
	// [Optional] Service Directory region to register this global forwarding rule under. Default to "us-central1". Only used for PSC for Google APIs. All PSC for Google APIs Forwarding Rules on the same network should use the same Service Directory region.
	ServiceDirectoryRegion string `pulumi:"serviceDirectoryRegion"`
}

// ForwardingRuleServiceDirectoryRegistrationResponseInput is an input type that accepts ForwardingRuleServiceDirectoryRegistrationResponseArgs and ForwardingRuleServiceDirectoryRegistrationResponseOutput values.
// You can construct a concrete instance of `ForwardingRuleServiceDirectoryRegistrationResponseInput` via:
//
//          ForwardingRuleServiceDirectoryRegistrationResponseArgs{...}
type ForwardingRuleServiceDirectoryRegistrationResponseInput interface {
	pulumi.Input

	ToForwardingRuleServiceDirectoryRegistrationResponseOutput() ForwardingRuleServiceDirectoryRegistrationResponseOutput
	ToForwardingRuleServiceDirectoryRegistrationResponseOutputWithContext(context.Context) ForwardingRuleServiceDirectoryRegistrationResponseOutput
}

// Describes the auto-registration of the Forwarding Rule to Service Directory. The region and project of the Service Directory resource generated from this registration will be the same as this Forwarding Rule.
type ForwardingRuleServiceDirectoryRegistrationResponseArgs struct {
	// Service Directory namespace to register the forwarding rule under.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// Service Directory service to register the forwarding rule under.
	Service pulumi.StringInput `pulumi:"service"`
	// [Optional] Service Directory region to register this global forwarding rule under. Default to "us-central1". Only used for PSC for Google APIs. All PSC for Google APIs Forwarding Rules on the same network should use the same Service Directory region.
	ServiceDirectoryRegion pulumi.StringInput `pulumi:"serviceDirectoryRegion"`
}

func (ForwardingRuleServiceDirectoryRegistrationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardingRuleServiceDirectoryRegistrationResponse)(nil)).Elem()
}

func (i ForwardingRuleServiceDirectoryRegistrationResponseArgs) ToForwardingRuleServiceDirectoryRegistrationResponseOutput() ForwardingRuleServiceDirectoryRegistrationResponseOutput {
	return i.ToForwardingRuleServiceDirectoryRegistrationResponseOutputWithContext(context.Background())
}

func (i ForwardingRuleServiceDirectoryRegistrationResponseArgs) ToForwardingRuleServiceDirectoryRegistrationResponseOutputWithContext(ctx context.Context) ForwardingRuleServiceDirectoryRegistrationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingRuleServiceDirectoryRegistrationResponseOutput)
}

// ForwardingRuleServiceDirectoryRegistrationResponseArrayInput is an input type that accepts ForwardingRuleServiceDirectoryRegistrationResponseArray and ForwardingRuleServiceDirectoryRegistrationResponseArrayOutput values.
// You can construct a concrete instance of `ForwardingRuleServiceDirectoryRegistrationResponseArrayInput` via:
//
//          ForwardingRuleServiceDirectoryRegistrationResponseArray{ ForwardingRuleServiceDirectoryRegistrationResponseArgs{...} }
type ForwardingRuleServiceDirectoryRegistrationResponseArrayInput interface {
	pulumi.Input

	ToForwardingRuleServiceDirectoryRegistrationResponseArrayOutput() ForwardingRuleServiceDirectoryRegistrationResponseArrayOutput
	ToForwardingRuleServiceDirectoryRegistrationResponseArrayOutputWithContext(context.Context) ForwardingRuleServiceDirectoryRegistrationResponseArrayOutput
}

type ForwardingRuleServiceDirectoryRegistrationResponseArray []ForwardingRuleServiceDirectoryRegistrationResponseInput

func (ForwardingRuleServiceDirectoryRegistrationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ForwardingRuleServiceDirectoryRegistrationResponse)(nil)).Elem()
}

func (i ForwardingRuleServiceDirectoryRegistrationResponseArray) ToForwardingRuleServiceDirectoryRegistrationResponseArrayOutput() ForwardingRuleServiceDirectoryRegistrationResponseArrayOutput {
	return i.ToForwardingRuleServiceDirectoryRegistrationResponseArrayOutputWithContext(context.Background())
}

func (i ForwardingRuleServiceDirectoryRegistrationResponseArray) ToForwardingRuleServiceDirectoryRegistrationResponseArrayOutputWithContext(ctx context.Context) ForwardingRuleServiceDirectoryRegistrationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingRuleServiceDirectoryRegistrationResponseArrayOutput)
}

// Describes the auto-registration of the Forwarding Rule to Service Directory. The region and project of the Service Directory resource generated from this registration will be the same as this Forwarding Rule.
type ForwardingRuleServiceDirectoryRegistrationResponseOutput struct{ *pulumi.OutputState }

func (ForwardingRuleServiceDirectoryRegistrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardingRuleServiceDirectoryRegistrationResponse)(nil)).Elem()
}

func (o ForwardingRuleServiceDirectoryRegistrationResponseOutput) ToForwardingRuleServiceDirectoryRegistrationResponseOutput() ForwardingRuleServiceDirectoryRegistrationResponseOutput {
	return o
}

func (o ForwardingRuleServiceDirectoryRegistrationResponseOutput) ToForwardingRuleServiceDirectoryRegistrationResponseOutputWithContext(ctx context.Context) ForwardingRuleServiceDirectoryRegistrationResponseOutput {
	return o
}

// Service Directory namespace to register the forwarding rule under.
func (o ForwardingRuleServiceDirectoryRegistrationResponseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardingRuleServiceDirectoryRegistrationResponse) string { return v.Namespace }).(pulumi.StringOutput)
}

// Service Directory service to register the forwarding rule under.
func (o ForwardingRuleServiceDirectoryRegistrationResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardingRuleServiceDirectoryRegistrationResponse) string { return v.Service }).(pulumi.StringOutput)
}

// [Optional] Service Directory region to register this global forwarding rule under. Default to "us-central1". Only used for PSC for Google APIs. All PSC for Google APIs Forwarding Rules on the same network should use the same Service Directory region.
func (o ForwardingRuleServiceDirectoryRegistrationResponseOutput) ServiceDirectoryRegion() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardingRuleServiceDirectoryRegistrationResponse) string { return v.ServiceDirectoryRegion }).(pulumi.StringOutput)
}

type ForwardingRuleServiceDirectoryRegistrationResponseArrayOutput struct{ *pulumi.OutputState }

func (ForwardingRuleServiceDirectoryRegistrationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ForwardingRuleServiceDirectoryRegistrationResponse)(nil)).Elem()
}

func (o ForwardingRuleServiceDirectoryRegistrationResponseArrayOutput) ToForwardingRuleServiceDirectoryRegistrationResponseArrayOutput() ForwardingRuleServiceDirectoryRegistrationResponseArrayOutput {
	return o
}

func (o ForwardingRuleServiceDirectoryRegistrationResponseArrayOutput) ToForwardingRuleServiceDirectoryRegistrationResponseArrayOutputWithContext(ctx context.Context) ForwardingRuleServiceDirectoryRegistrationResponseArrayOutput {
	return o
}

func (o ForwardingRuleServiceDirectoryRegistrationResponseArrayOutput) Index(i pulumi.IntInput) ForwardingRuleServiceDirectoryRegistrationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ForwardingRuleServiceDirectoryRegistrationResponse {
		return vs[0].([]ForwardingRuleServiceDirectoryRegistrationResponse)[vs[1].(int)]
	}).(ForwardingRuleServiceDirectoryRegistrationResponseOutput)
}

type GRPCHealthCheck struct {
	// The gRPC service name for the health check. This field is optional. The value of grpc_service_name has the following meanings by convention: - Empty service_name means the overall status of all services at the backend. - Non-empty service_name means the health of that gRPC service, as defined by the owner of the service. The grpc_service_name can only be ASCII.
	GrpcServiceName *string `pulumi:"grpcServiceName"`
	// The port number for the health check request. Must be specified if port_name and port_specification are not set or if port_specification is USE_FIXED_PORT. Valid values are 1 through 65535.
	Port *int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence. The port_name should conform to RFC1035.
	PortName *string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, gRPC health check follows behavior specified in port and portName fields.
	PortSpecification *string `pulumi:"portSpecification"`
}

// GRPCHealthCheckInput is an input type that accepts GRPCHealthCheckArgs and GRPCHealthCheckOutput values.
// You can construct a concrete instance of `GRPCHealthCheckInput` via:
//
//          GRPCHealthCheckArgs{...}
type GRPCHealthCheckInput interface {
	pulumi.Input

	ToGRPCHealthCheckOutput() GRPCHealthCheckOutput
	ToGRPCHealthCheckOutputWithContext(context.Context) GRPCHealthCheckOutput
}

type GRPCHealthCheckArgs struct {
	// The gRPC service name for the health check. This field is optional. The value of grpc_service_name has the following meanings by convention: - Empty service_name means the overall status of all services at the backend. - Non-empty service_name means the health of that gRPC service, as defined by the owner of the service. The grpc_service_name can only be ASCII.
	GrpcServiceName pulumi.StringPtrInput `pulumi:"grpcServiceName"`
	// The port number for the health check request. Must be specified if port_name and port_specification are not set or if port_specification is USE_FIXED_PORT. Valid values are 1 through 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence. The port_name should conform to RFC1035.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, gRPC health check follows behavior specified in port and portName fields.
	PortSpecification *GRPCHealthCheckPortSpecification `pulumi:"portSpecification"`
}

func (GRPCHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCHealthCheck)(nil)).Elem()
}

func (i GRPCHealthCheckArgs) ToGRPCHealthCheckOutput() GRPCHealthCheckOutput {
	return i.ToGRPCHealthCheckOutputWithContext(context.Background())
}

func (i GRPCHealthCheckArgs) ToGRPCHealthCheckOutputWithContext(ctx context.Context) GRPCHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCHealthCheckOutput)
}

func (i GRPCHealthCheckArgs) ToGRPCHealthCheckPtrOutput() GRPCHealthCheckPtrOutput {
	return i.ToGRPCHealthCheckPtrOutputWithContext(context.Background())
}

func (i GRPCHealthCheckArgs) ToGRPCHealthCheckPtrOutputWithContext(ctx context.Context) GRPCHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCHealthCheckOutput).ToGRPCHealthCheckPtrOutputWithContext(ctx)
}

// GRPCHealthCheckPtrInput is an input type that accepts GRPCHealthCheckArgs, GRPCHealthCheckPtr and GRPCHealthCheckPtrOutput values.
// You can construct a concrete instance of `GRPCHealthCheckPtrInput` via:
//
//          GRPCHealthCheckArgs{...}
//
//  or:
//
//          nil
type GRPCHealthCheckPtrInput interface {
	pulumi.Input

	ToGRPCHealthCheckPtrOutput() GRPCHealthCheckPtrOutput
	ToGRPCHealthCheckPtrOutputWithContext(context.Context) GRPCHealthCheckPtrOutput
}

type grpchealthCheckPtrType GRPCHealthCheckArgs

func GRPCHealthCheckPtr(v *GRPCHealthCheckArgs) GRPCHealthCheckPtrInput {
	return (*grpchealthCheckPtrType)(v)
}

func (*grpchealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCHealthCheck)(nil)).Elem()
}

func (i *grpchealthCheckPtrType) ToGRPCHealthCheckPtrOutput() GRPCHealthCheckPtrOutput {
	return i.ToGRPCHealthCheckPtrOutputWithContext(context.Background())
}

func (i *grpchealthCheckPtrType) ToGRPCHealthCheckPtrOutputWithContext(ctx context.Context) GRPCHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCHealthCheckPtrOutput)
}

type GRPCHealthCheckOutput struct{ *pulumi.OutputState }

func (GRPCHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCHealthCheck)(nil)).Elem()
}

func (o GRPCHealthCheckOutput) ToGRPCHealthCheckOutput() GRPCHealthCheckOutput {
	return o
}

func (o GRPCHealthCheckOutput) ToGRPCHealthCheckOutputWithContext(ctx context.Context) GRPCHealthCheckOutput {
	return o
}

func (o GRPCHealthCheckOutput) ToGRPCHealthCheckPtrOutput() GRPCHealthCheckPtrOutput {
	return o.ToGRPCHealthCheckPtrOutputWithContext(context.Background())
}

func (o GRPCHealthCheckOutput) ToGRPCHealthCheckPtrOutputWithContext(ctx context.Context) GRPCHealthCheckPtrOutput {
	return o.ApplyT(func(v GRPCHealthCheck) *GRPCHealthCheck {
		return &v
	}).(GRPCHealthCheckPtrOutput)
}

// The gRPC service name for the health check. This field is optional. The value of grpc_service_name has the following meanings by convention: - Empty service_name means the overall status of all services at the backend. - Non-empty service_name means the health of that gRPC service, as defined by the owner of the service. The grpc_service_name can only be ASCII.
func (o GRPCHealthCheckOutput) GrpcServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCHealthCheck) *string { return v.GrpcServiceName }).(pulumi.StringPtrOutput)
}

// The port number for the health check request. Must be specified if port_name and port_specification are not set or if port_specification is USE_FIXED_PORT. Valid values are 1 through 65535.
func (o GRPCHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence. The port_name should conform to RFC1035.
func (o GRPCHealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCHealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, gRPC health check follows behavior specified in port and portName fields.
func (o GRPCHealthCheckOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCHealthCheck) *string { return v.PortSpecification }).(pulumi.StringPtrOutput)
}

type GRPCHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (GRPCHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCHealthCheck)(nil)).Elem()
}

func (o GRPCHealthCheckPtrOutput) ToGRPCHealthCheckPtrOutput() GRPCHealthCheckPtrOutput {
	return o
}

func (o GRPCHealthCheckPtrOutput) ToGRPCHealthCheckPtrOutputWithContext(ctx context.Context) GRPCHealthCheckPtrOutput {
	return o
}

func (o GRPCHealthCheckPtrOutput) Elem() GRPCHealthCheckOutput {
	return o.ApplyT(func(v *GRPCHealthCheck) GRPCHealthCheck { return *v }).(GRPCHealthCheckOutput)
}

// The gRPC service name for the health check. This field is optional. The value of grpc_service_name has the following meanings by convention: - Empty service_name means the overall status of all services at the backend. - Non-empty service_name means the health of that gRPC service, as defined by the owner of the service. The grpc_service_name can only be ASCII.
func (o GRPCHealthCheckPtrOutput) GrpcServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.GrpcServiceName
	}).(pulumi.StringPtrOutput)
}

// The port number for the health check request. Must be specified if port_name and port_specification are not set or if port_specification is USE_FIXED_PORT. Valid values are 1 through 65535.
func (o GRPCHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GRPCHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence. The port_name should conform to RFC1035.
func (o GRPCHealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, gRPC health check follows behavior specified in port and portName fields.
func (o GRPCHealthCheckPtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

type GRPCHealthCheckResponse struct {
	// The gRPC service name for the health check. This field is optional. The value of grpc_service_name has the following meanings by convention: - Empty service_name means the overall status of all services at the backend. - Non-empty service_name means the health of that gRPC service, as defined by the owner of the service. The grpc_service_name can only be ASCII.
	GrpcServiceName string `pulumi:"grpcServiceName"`
	// The port number for the health check request. Must be specified if port_name and port_specification are not set or if port_specification is USE_FIXED_PORT. Valid values are 1 through 65535.
	Port int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence. The port_name should conform to RFC1035.
	PortName string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, gRPC health check follows behavior specified in port and portName fields.
	PortSpecification string `pulumi:"portSpecification"`
}

// GRPCHealthCheckResponseInput is an input type that accepts GRPCHealthCheckResponseArgs and GRPCHealthCheckResponseOutput values.
// You can construct a concrete instance of `GRPCHealthCheckResponseInput` via:
//
//          GRPCHealthCheckResponseArgs{...}
type GRPCHealthCheckResponseInput interface {
	pulumi.Input

	ToGRPCHealthCheckResponseOutput() GRPCHealthCheckResponseOutput
	ToGRPCHealthCheckResponseOutputWithContext(context.Context) GRPCHealthCheckResponseOutput
}

type GRPCHealthCheckResponseArgs struct {
	// The gRPC service name for the health check. This field is optional. The value of grpc_service_name has the following meanings by convention: - Empty service_name means the overall status of all services at the backend. - Non-empty service_name means the health of that gRPC service, as defined by the owner of the service. The grpc_service_name can only be ASCII.
	GrpcServiceName pulumi.StringInput `pulumi:"grpcServiceName"`
	// The port number for the health check request. Must be specified if port_name and port_specification are not set or if port_specification is USE_FIXED_PORT. Valid values are 1 through 65535.
	Port pulumi.IntInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence. The port_name should conform to RFC1035.
	PortName pulumi.StringInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, gRPC health check follows behavior specified in port and portName fields.
	PortSpecification pulumi.StringInput `pulumi:"portSpecification"`
}

func (GRPCHealthCheckResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCHealthCheckResponse)(nil)).Elem()
}

func (i GRPCHealthCheckResponseArgs) ToGRPCHealthCheckResponseOutput() GRPCHealthCheckResponseOutput {
	return i.ToGRPCHealthCheckResponseOutputWithContext(context.Background())
}

func (i GRPCHealthCheckResponseArgs) ToGRPCHealthCheckResponseOutputWithContext(ctx context.Context) GRPCHealthCheckResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCHealthCheckResponseOutput)
}

func (i GRPCHealthCheckResponseArgs) ToGRPCHealthCheckResponsePtrOutput() GRPCHealthCheckResponsePtrOutput {
	return i.ToGRPCHealthCheckResponsePtrOutputWithContext(context.Background())
}

func (i GRPCHealthCheckResponseArgs) ToGRPCHealthCheckResponsePtrOutputWithContext(ctx context.Context) GRPCHealthCheckResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCHealthCheckResponseOutput).ToGRPCHealthCheckResponsePtrOutputWithContext(ctx)
}

// GRPCHealthCheckResponsePtrInput is an input type that accepts GRPCHealthCheckResponseArgs, GRPCHealthCheckResponsePtr and GRPCHealthCheckResponsePtrOutput values.
// You can construct a concrete instance of `GRPCHealthCheckResponsePtrInput` via:
//
//          GRPCHealthCheckResponseArgs{...}
//
//  or:
//
//          nil
type GRPCHealthCheckResponsePtrInput interface {
	pulumi.Input

	ToGRPCHealthCheckResponsePtrOutput() GRPCHealthCheckResponsePtrOutput
	ToGRPCHealthCheckResponsePtrOutputWithContext(context.Context) GRPCHealthCheckResponsePtrOutput
}

type grpchealthCheckResponsePtrType GRPCHealthCheckResponseArgs

func GRPCHealthCheckResponsePtr(v *GRPCHealthCheckResponseArgs) GRPCHealthCheckResponsePtrInput {
	return (*grpchealthCheckResponsePtrType)(v)
}

func (*grpchealthCheckResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCHealthCheckResponse)(nil)).Elem()
}

func (i *grpchealthCheckResponsePtrType) ToGRPCHealthCheckResponsePtrOutput() GRPCHealthCheckResponsePtrOutput {
	return i.ToGRPCHealthCheckResponsePtrOutputWithContext(context.Background())
}

func (i *grpchealthCheckResponsePtrType) ToGRPCHealthCheckResponsePtrOutputWithContext(ctx context.Context) GRPCHealthCheckResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCHealthCheckResponsePtrOutput)
}

type GRPCHealthCheckResponseOutput struct{ *pulumi.OutputState }

func (GRPCHealthCheckResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCHealthCheckResponse)(nil)).Elem()
}

func (o GRPCHealthCheckResponseOutput) ToGRPCHealthCheckResponseOutput() GRPCHealthCheckResponseOutput {
	return o
}

func (o GRPCHealthCheckResponseOutput) ToGRPCHealthCheckResponseOutputWithContext(ctx context.Context) GRPCHealthCheckResponseOutput {
	return o
}

func (o GRPCHealthCheckResponseOutput) ToGRPCHealthCheckResponsePtrOutput() GRPCHealthCheckResponsePtrOutput {
	return o.ToGRPCHealthCheckResponsePtrOutputWithContext(context.Background())
}

func (o GRPCHealthCheckResponseOutput) ToGRPCHealthCheckResponsePtrOutputWithContext(ctx context.Context) GRPCHealthCheckResponsePtrOutput {
	return o.ApplyT(func(v GRPCHealthCheckResponse) *GRPCHealthCheckResponse {
		return &v
	}).(GRPCHealthCheckResponsePtrOutput)
}

// The gRPC service name for the health check. This field is optional. The value of grpc_service_name has the following meanings by convention: - Empty service_name means the overall status of all services at the backend. - Non-empty service_name means the health of that gRPC service, as defined by the owner of the service. The grpc_service_name can only be ASCII.
func (o GRPCHealthCheckResponseOutput) GrpcServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCHealthCheckResponse) string { return v.GrpcServiceName }).(pulumi.StringOutput)
}

// The port number for the health check request. Must be specified if port_name and port_specification are not set or if port_specification is USE_FIXED_PORT. Valid values are 1 through 65535.
func (o GRPCHealthCheckResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GRPCHealthCheckResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence. The port_name should conform to RFC1035.
func (o GRPCHealthCheckResponseOutput) PortName() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCHealthCheckResponse) string { return v.PortName }).(pulumi.StringOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, gRPC health check follows behavior specified in port and portName fields.
func (o GRPCHealthCheckResponseOutput) PortSpecification() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCHealthCheckResponse) string { return v.PortSpecification }).(pulumi.StringOutput)
}

type GRPCHealthCheckResponsePtrOutput struct{ *pulumi.OutputState }

func (GRPCHealthCheckResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCHealthCheckResponse)(nil)).Elem()
}

func (o GRPCHealthCheckResponsePtrOutput) ToGRPCHealthCheckResponsePtrOutput() GRPCHealthCheckResponsePtrOutput {
	return o
}

func (o GRPCHealthCheckResponsePtrOutput) ToGRPCHealthCheckResponsePtrOutputWithContext(ctx context.Context) GRPCHealthCheckResponsePtrOutput {
	return o
}

func (o GRPCHealthCheckResponsePtrOutput) Elem() GRPCHealthCheckResponseOutput {
	return o.ApplyT(func(v *GRPCHealthCheckResponse) GRPCHealthCheckResponse { return *v }).(GRPCHealthCheckResponseOutput)
}

// The gRPC service name for the health check. This field is optional. The value of grpc_service_name has the following meanings by convention: - Empty service_name means the overall status of all services at the backend. - Non-empty service_name means the health of that gRPC service, as defined by the owner of the service. The grpc_service_name can only be ASCII.
func (o GRPCHealthCheckResponsePtrOutput) GrpcServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.GrpcServiceName
	}).(pulumi.StringPtrOutput)
}

// The port number for the health check request. Must be specified if port_name and port_specification are not set or if port_specification is USE_FIXED_PORT. Valid values are 1 through 65535.
func (o GRPCHealthCheckResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GRPCHealthCheckResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence. The port_name should conform to RFC1035.
func (o GRPCHealthCheckResponsePtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, gRPC health check follows behavior specified in port and portName fields.
func (o GRPCHealthCheckResponsePtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Guest OS features.
type GuestOsFeature struct {
	// The ID of a supported feature. Read Enabling guest operating system features to see a list of available options.
	Type *string `pulumi:"type"`
}

// GuestOsFeatureInput is an input type that accepts GuestOsFeatureArgs and GuestOsFeatureOutput values.
// You can construct a concrete instance of `GuestOsFeatureInput` via:
//
//          GuestOsFeatureArgs{...}
type GuestOsFeatureInput interface {
	pulumi.Input

	ToGuestOsFeatureOutput() GuestOsFeatureOutput
	ToGuestOsFeatureOutputWithContext(context.Context) GuestOsFeatureOutput
}

// Guest OS features.
type GuestOsFeatureArgs struct {
	// The ID of a supported feature. Read Enabling guest operating system features to see a list of available options.
	Type *GuestOsFeatureType `pulumi:"type"`
}

func (GuestOsFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestOsFeature)(nil)).Elem()
}

func (i GuestOsFeatureArgs) ToGuestOsFeatureOutput() GuestOsFeatureOutput {
	return i.ToGuestOsFeatureOutputWithContext(context.Background())
}

func (i GuestOsFeatureArgs) ToGuestOsFeatureOutputWithContext(ctx context.Context) GuestOsFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestOsFeatureOutput)
}

// GuestOsFeatureArrayInput is an input type that accepts GuestOsFeatureArray and GuestOsFeatureArrayOutput values.
// You can construct a concrete instance of `GuestOsFeatureArrayInput` via:
//
//          GuestOsFeatureArray{ GuestOsFeatureArgs{...} }
type GuestOsFeatureArrayInput interface {
	pulumi.Input

	ToGuestOsFeatureArrayOutput() GuestOsFeatureArrayOutput
	ToGuestOsFeatureArrayOutputWithContext(context.Context) GuestOsFeatureArrayOutput
}

type GuestOsFeatureArray []GuestOsFeatureInput

func (GuestOsFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GuestOsFeature)(nil)).Elem()
}

func (i GuestOsFeatureArray) ToGuestOsFeatureArrayOutput() GuestOsFeatureArrayOutput {
	return i.ToGuestOsFeatureArrayOutputWithContext(context.Background())
}

func (i GuestOsFeatureArray) ToGuestOsFeatureArrayOutputWithContext(ctx context.Context) GuestOsFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestOsFeatureArrayOutput)
}

// Guest OS features.
type GuestOsFeatureOutput struct{ *pulumi.OutputState }

func (GuestOsFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestOsFeature)(nil)).Elem()
}

func (o GuestOsFeatureOutput) ToGuestOsFeatureOutput() GuestOsFeatureOutput {
	return o
}

func (o GuestOsFeatureOutput) ToGuestOsFeatureOutputWithContext(ctx context.Context) GuestOsFeatureOutput {
	return o
}

// The ID of a supported feature. Read Enabling guest operating system features to see a list of available options.
func (o GuestOsFeatureOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GuestOsFeature) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GuestOsFeatureArrayOutput struct{ *pulumi.OutputState }

func (GuestOsFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GuestOsFeature)(nil)).Elem()
}

func (o GuestOsFeatureArrayOutput) ToGuestOsFeatureArrayOutput() GuestOsFeatureArrayOutput {
	return o
}

func (o GuestOsFeatureArrayOutput) ToGuestOsFeatureArrayOutputWithContext(ctx context.Context) GuestOsFeatureArrayOutput {
	return o
}

func (o GuestOsFeatureArrayOutput) Index(i pulumi.IntInput) GuestOsFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GuestOsFeature {
		return vs[0].([]GuestOsFeature)[vs[1].(int)]
	}).(GuestOsFeatureOutput)
}

// Guest OS features.
type GuestOsFeatureResponse struct {
	// The ID of a supported feature. Read Enabling guest operating system features to see a list of available options.
	Type string `pulumi:"type"`
}

// GuestOsFeatureResponseInput is an input type that accepts GuestOsFeatureResponseArgs and GuestOsFeatureResponseOutput values.
// You can construct a concrete instance of `GuestOsFeatureResponseInput` via:
//
//          GuestOsFeatureResponseArgs{...}
type GuestOsFeatureResponseInput interface {
	pulumi.Input

	ToGuestOsFeatureResponseOutput() GuestOsFeatureResponseOutput
	ToGuestOsFeatureResponseOutputWithContext(context.Context) GuestOsFeatureResponseOutput
}

// Guest OS features.
type GuestOsFeatureResponseArgs struct {
	// The ID of a supported feature. Read Enabling guest operating system features to see a list of available options.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GuestOsFeatureResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestOsFeatureResponse)(nil)).Elem()
}

func (i GuestOsFeatureResponseArgs) ToGuestOsFeatureResponseOutput() GuestOsFeatureResponseOutput {
	return i.ToGuestOsFeatureResponseOutputWithContext(context.Background())
}

func (i GuestOsFeatureResponseArgs) ToGuestOsFeatureResponseOutputWithContext(ctx context.Context) GuestOsFeatureResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestOsFeatureResponseOutput)
}

// GuestOsFeatureResponseArrayInput is an input type that accepts GuestOsFeatureResponseArray and GuestOsFeatureResponseArrayOutput values.
// You can construct a concrete instance of `GuestOsFeatureResponseArrayInput` via:
//
//          GuestOsFeatureResponseArray{ GuestOsFeatureResponseArgs{...} }
type GuestOsFeatureResponseArrayInput interface {
	pulumi.Input

	ToGuestOsFeatureResponseArrayOutput() GuestOsFeatureResponseArrayOutput
	ToGuestOsFeatureResponseArrayOutputWithContext(context.Context) GuestOsFeatureResponseArrayOutput
}

type GuestOsFeatureResponseArray []GuestOsFeatureResponseInput

func (GuestOsFeatureResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GuestOsFeatureResponse)(nil)).Elem()
}

func (i GuestOsFeatureResponseArray) ToGuestOsFeatureResponseArrayOutput() GuestOsFeatureResponseArrayOutput {
	return i.ToGuestOsFeatureResponseArrayOutputWithContext(context.Background())
}

func (i GuestOsFeatureResponseArray) ToGuestOsFeatureResponseArrayOutputWithContext(ctx context.Context) GuestOsFeatureResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestOsFeatureResponseArrayOutput)
}

// Guest OS features.
type GuestOsFeatureResponseOutput struct{ *pulumi.OutputState }

func (GuestOsFeatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestOsFeatureResponse)(nil)).Elem()
}

func (o GuestOsFeatureResponseOutput) ToGuestOsFeatureResponseOutput() GuestOsFeatureResponseOutput {
	return o
}

func (o GuestOsFeatureResponseOutput) ToGuestOsFeatureResponseOutputWithContext(ctx context.Context) GuestOsFeatureResponseOutput {
	return o
}

// The ID of a supported feature. Read Enabling guest operating system features to see a list of available options.
func (o GuestOsFeatureResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GuestOsFeatureResponse) string { return v.Type }).(pulumi.StringOutput)
}

type GuestOsFeatureResponseArrayOutput struct{ *pulumi.OutputState }

func (GuestOsFeatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GuestOsFeatureResponse)(nil)).Elem()
}

func (o GuestOsFeatureResponseArrayOutput) ToGuestOsFeatureResponseArrayOutput() GuestOsFeatureResponseArrayOutput {
	return o
}

func (o GuestOsFeatureResponseArrayOutput) ToGuestOsFeatureResponseArrayOutputWithContext(ctx context.Context) GuestOsFeatureResponseArrayOutput {
	return o
}

func (o GuestOsFeatureResponseArrayOutput) Index(i pulumi.IntInput) GuestOsFeatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GuestOsFeatureResponse {
		return vs[0].([]GuestOsFeatureResponse)[vs[1].(int)]
	}).(GuestOsFeatureResponseOutput)
}

type HTTP2HealthCheck struct {
	// The value of the host header in the HTTP/2 health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
	Host *string `pulumi:"host"`
	// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
	Port *int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName *string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTP2 health check follows behavior specified in port and portName fields.
	PortSpecification *string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *string `pulumi:"proxyHeader"`
	// The request path of the HTTP/2 health check request. The default value is /.
	RequestPath *string `pulumi:"requestPath"`
	// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
	Response *string `pulumi:"response"`
}

// HTTP2HealthCheckInput is an input type that accepts HTTP2HealthCheckArgs and HTTP2HealthCheckOutput values.
// You can construct a concrete instance of `HTTP2HealthCheckInput` via:
//
//          HTTP2HealthCheckArgs{...}
type HTTP2HealthCheckInput interface {
	pulumi.Input

	ToHTTP2HealthCheckOutput() HTTP2HealthCheckOutput
	ToHTTP2HealthCheckOutputWithContext(context.Context) HTTP2HealthCheckOutput
}

type HTTP2HealthCheckArgs struct {
	// The value of the host header in the HTTP/2 health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTP2 health check follows behavior specified in port and portName fields.
	PortSpecification *HTTP2HealthCheckPortSpecification `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *HTTP2HealthCheckProxyHeader `pulumi:"proxyHeader"`
	// The request path of the HTTP/2 health check request. The default value is /.
	RequestPath pulumi.StringPtrInput `pulumi:"requestPath"`
	// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (HTTP2HealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTP2HealthCheck)(nil)).Elem()
}

func (i HTTP2HealthCheckArgs) ToHTTP2HealthCheckOutput() HTTP2HealthCheckOutput {
	return i.ToHTTP2HealthCheckOutputWithContext(context.Background())
}

func (i HTTP2HealthCheckArgs) ToHTTP2HealthCheckOutputWithContext(ctx context.Context) HTTP2HealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTP2HealthCheckOutput)
}

func (i HTTP2HealthCheckArgs) ToHTTP2HealthCheckPtrOutput() HTTP2HealthCheckPtrOutput {
	return i.ToHTTP2HealthCheckPtrOutputWithContext(context.Background())
}

func (i HTTP2HealthCheckArgs) ToHTTP2HealthCheckPtrOutputWithContext(ctx context.Context) HTTP2HealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTP2HealthCheckOutput).ToHTTP2HealthCheckPtrOutputWithContext(ctx)
}

// HTTP2HealthCheckPtrInput is an input type that accepts HTTP2HealthCheckArgs, HTTP2HealthCheckPtr and HTTP2HealthCheckPtrOutput values.
// You can construct a concrete instance of `HTTP2HealthCheckPtrInput` via:
//
//          HTTP2HealthCheckArgs{...}
//
//  or:
//
//          nil
type HTTP2HealthCheckPtrInput interface {
	pulumi.Input

	ToHTTP2HealthCheckPtrOutput() HTTP2HealthCheckPtrOutput
	ToHTTP2HealthCheckPtrOutputWithContext(context.Context) HTTP2HealthCheckPtrOutput
}

type http2healthCheckPtrType HTTP2HealthCheckArgs

func HTTP2HealthCheckPtr(v *HTTP2HealthCheckArgs) HTTP2HealthCheckPtrInput {
	return (*http2healthCheckPtrType)(v)
}

func (*http2healthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTP2HealthCheck)(nil)).Elem()
}

func (i *http2healthCheckPtrType) ToHTTP2HealthCheckPtrOutput() HTTP2HealthCheckPtrOutput {
	return i.ToHTTP2HealthCheckPtrOutputWithContext(context.Background())
}

func (i *http2healthCheckPtrType) ToHTTP2HealthCheckPtrOutputWithContext(ctx context.Context) HTTP2HealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTP2HealthCheckPtrOutput)
}

type HTTP2HealthCheckOutput struct{ *pulumi.OutputState }

func (HTTP2HealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTP2HealthCheck)(nil)).Elem()
}

func (o HTTP2HealthCheckOutput) ToHTTP2HealthCheckOutput() HTTP2HealthCheckOutput {
	return o
}

func (o HTTP2HealthCheckOutput) ToHTTP2HealthCheckOutputWithContext(ctx context.Context) HTTP2HealthCheckOutput {
	return o
}

func (o HTTP2HealthCheckOutput) ToHTTP2HealthCheckPtrOutput() HTTP2HealthCheckPtrOutput {
	return o.ToHTTP2HealthCheckPtrOutputWithContext(context.Background())
}

func (o HTTP2HealthCheckOutput) ToHTTP2HealthCheckPtrOutputWithContext(ctx context.Context) HTTP2HealthCheckPtrOutput {
	return o.ApplyT(func(v HTTP2HealthCheck) *HTTP2HealthCheck {
		return &v
	}).(HTTP2HealthCheckPtrOutput)
}

// The value of the host header in the HTTP/2 health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
func (o HTTP2HealthCheckOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTP2HealthCheck) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
func (o HTTP2HealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HTTP2HealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o HTTP2HealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTP2HealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTP2 health check follows behavior specified in port and portName fields.
func (o HTTP2HealthCheckOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTP2HealthCheck) *string { return v.PortSpecification }).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o HTTP2HealthCheckOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTP2HealthCheck) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

// The request path of the HTTP/2 health check request. The default value is /.
func (o HTTP2HealthCheckOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTP2HealthCheck) *string { return v.RequestPath }).(pulumi.StringPtrOutput)
}

// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
func (o HTTP2HealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTP2HealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type HTTP2HealthCheckPtrOutput struct{ *pulumi.OutputState }

func (HTTP2HealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTP2HealthCheck)(nil)).Elem()
}

func (o HTTP2HealthCheckPtrOutput) ToHTTP2HealthCheckPtrOutput() HTTP2HealthCheckPtrOutput {
	return o
}

func (o HTTP2HealthCheckPtrOutput) ToHTTP2HealthCheckPtrOutputWithContext(ctx context.Context) HTTP2HealthCheckPtrOutput {
	return o
}

func (o HTTP2HealthCheckPtrOutput) Elem() HTTP2HealthCheckOutput {
	return o.ApplyT(func(v *HTTP2HealthCheck) HTTP2HealthCheck { return *v }).(HTTP2HealthCheckOutput)
}

// The value of the host header in the HTTP/2 health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
func (o HTTP2HealthCheckPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTP2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
func (o HTTP2HealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HTTP2HealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o HTTP2HealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTP2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTP2 health check follows behavior specified in port and portName fields.
func (o HTTP2HealthCheckPtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTP2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o HTTP2HealthCheckPtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTP2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The request path of the HTTP/2 health check request. The default value is /.
func (o HTTP2HealthCheckPtrOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTP2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.RequestPath
	}).(pulumi.StringPtrOutput)
}

// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
func (o HTTP2HealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTP2HealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type HTTP2HealthCheckResponse struct {
	// The value of the host header in the HTTP/2 health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
	Host string `pulumi:"host"`
	// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
	Port int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTP2 health check follows behavior specified in port and portName fields.
	PortSpecification string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader string `pulumi:"proxyHeader"`
	// The request path of the HTTP/2 health check request. The default value is /.
	RequestPath string `pulumi:"requestPath"`
	// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
	Response string `pulumi:"response"`
}

// HTTP2HealthCheckResponseInput is an input type that accepts HTTP2HealthCheckResponseArgs and HTTP2HealthCheckResponseOutput values.
// You can construct a concrete instance of `HTTP2HealthCheckResponseInput` via:
//
//          HTTP2HealthCheckResponseArgs{...}
type HTTP2HealthCheckResponseInput interface {
	pulumi.Input

	ToHTTP2HealthCheckResponseOutput() HTTP2HealthCheckResponseOutput
	ToHTTP2HealthCheckResponseOutputWithContext(context.Context) HTTP2HealthCheckResponseOutput
}

type HTTP2HealthCheckResponseArgs struct {
	// The value of the host header in the HTTP/2 health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
	Host pulumi.StringInput `pulumi:"host"`
	// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
	Port pulumi.IntInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName pulumi.StringInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTP2 health check follows behavior specified in port and portName fields.
	PortSpecification pulumi.StringInput `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader pulumi.StringInput `pulumi:"proxyHeader"`
	// The request path of the HTTP/2 health check request. The default value is /.
	RequestPath pulumi.StringInput `pulumi:"requestPath"`
	// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
	Response pulumi.StringInput `pulumi:"response"`
}

func (HTTP2HealthCheckResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTP2HealthCheckResponse)(nil)).Elem()
}

func (i HTTP2HealthCheckResponseArgs) ToHTTP2HealthCheckResponseOutput() HTTP2HealthCheckResponseOutput {
	return i.ToHTTP2HealthCheckResponseOutputWithContext(context.Background())
}

func (i HTTP2HealthCheckResponseArgs) ToHTTP2HealthCheckResponseOutputWithContext(ctx context.Context) HTTP2HealthCheckResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTP2HealthCheckResponseOutput)
}

func (i HTTP2HealthCheckResponseArgs) ToHTTP2HealthCheckResponsePtrOutput() HTTP2HealthCheckResponsePtrOutput {
	return i.ToHTTP2HealthCheckResponsePtrOutputWithContext(context.Background())
}

func (i HTTP2HealthCheckResponseArgs) ToHTTP2HealthCheckResponsePtrOutputWithContext(ctx context.Context) HTTP2HealthCheckResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTP2HealthCheckResponseOutput).ToHTTP2HealthCheckResponsePtrOutputWithContext(ctx)
}

// HTTP2HealthCheckResponsePtrInput is an input type that accepts HTTP2HealthCheckResponseArgs, HTTP2HealthCheckResponsePtr and HTTP2HealthCheckResponsePtrOutput values.
// You can construct a concrete instance of `HTTP2HealthCheckResponsePtrInput` via:
//
//          HTTP2HealthCheckResponseArgs{...}
//
//  or:
//
//          nil
type HTTP2HealthCheckResponsePtrInput interface {
	pulumi.Input

	ToHTTP2HealthCheckResponsePtrOutput() HTTP2HealthCheckResponsePtrOutput
	ToHTTP2HealthCheckResponsePtrOutputWithContext(context.Context) HTTP2HealthCheckResponsePtrOutput
}

type http2healthCheckResponsePtrType HTTP2HealthCheckResponseArgs

func HTTP2HealthCheckResponsePtr(v *HTTP2HealthCheckResponseArgs) HTTP2HealthCheckResponsePtrInput {
	return (*http2healthCheckResponsePtrType)(v)
}

func (*http2healthCheckResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTP2HealthCheckResponse)(nil)).Elem()
}

func (i *http2healthCheckResponsePtrType) ToHTTP2HealthCheckResponsePtrOutput() HTTP2HealthCheckResponsePtrOutput {
	return i.ToHTTP2HealthCheckResponsePtrOutputWithContext(context.Background())
}

func (i *http2healthCheckResponsePtrType) ToHTTP2HealthCheckResponsePtrOutputWithContext(ctx context.Context) HTTP2HealthCheckResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTP2HealthCheckResponsePtrOutput)
}

type HTTP2HealthCheckResponseOutput struct{ *pulumi.OutputState }

func (HTTP2HealthCheckResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTP2HealthCheckResponse)(nil)).Elem()
}

func (o HTTP2HealthCheckResponseOutput) ToHTTP2HealthCheckResponseOutput() HTTP2HealthCheckResponseOutput {
	return o
}

func (o HTTP2HealthCheckResponseOutput) ToHTTP2HealthCheckResponseOutputWithContext(ctx context.Context) HTTP2HealthCheckResponseOutput {
	return o
}

func (o HTTP2HealthCheckResponseOutput) ToHTTP2HealthCheckResponsePtrOutput() HTTP2HealthCheckResponsePtrOutput {
	return o.ToHTTP2HealthCheckResponsePtrOutputWithContext(context.Background())
}

func (o HTTP2HealthCheckResponseOutput) ToHTTP2HealthCheckResponsePtrOutputWithContext(ctx context.Context) HTTP2HealthCheckResponsePtrOutput {
	return o.ApplyT(func(v HTTP2HealthCheckResponse) *HTTP2HealthCheckResponse {
		return &v
	}).(HTTP2HealthCheckResponsePtrOutput)
}

// The value of the host header in the HTTP/2 health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
func (o HTTP2HealthCheckResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v HTTP2HealthCheckResponse) string { return v.Host }).(pulumi.StringOutput)
}

// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
func (o HTTP2HealthCheckResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v HTTP2HealthCheckResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o HTTP2HealthCheckResponseOutput) PortName() pulumi.StringOutput {
	return o.ApplyT(func(v HTTP2HealthCheckResponse) string { return v.PortName }).(pulumi.StringOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTP2 health check follows behavior specified in port and portName fields.
func (o HTTP2HealthCheckResponseOutput) PortSpecification() pulumi.StringOutput {
	return o.ApplyT(func(v HTTP2HealthCheckResponse) string { return v.PortSpecification }).(pulumi.StringOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o HTTP2HealthCheckResponseOutput) ProxyHeader() pulumi.StringOutput {
	return o.ApplyT(func(v HTTP2HealthCheckResponse) string { return v.ProxyHeader }).(pulumi.StringOutput)
}

// The request path of the HTTP/2 health check request. The default value is /.
func (o HTTP2HealthCheckResponseOutput) RequestPath() pulumi.StringOutput {
	return o.ApplyT(func(v HTTP2HealthCheckResponse) string { return v.RequestPath }).(pulumi.StringOutput)
}

// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
func (o HTTP2HealthCheckResponseOutput) Response() pulumi.StringOutput {
	return o.ApplyT(func(v HTTP2HealthCheckResponse) string { return v.Response }).(pulumi.StringOutput)
}

type HTTP2HealthCheckResponsePtrOutput struct{ *pulumi.OutputState }

func (HTTP2HealthCheckResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTP2HealthCheckResponse)(nil)).Elem()
}

func (o HTTP2HealthCheckResponsePtrOutput) ToHTTP2HealthCheckResponsePtrOutput() HTTP2HealthCheckResponsePtrOutput {
	return o
}

func (o HTTP2HealthCheckResponsePtrOutput) ToHTTP2HealthCheckResponsePtrOutputWithContext(ctx context.Context) HTTP2HealthCheckResponsePtrOutput {
	return o
}

func (o HTTP2HealthCheckResponsePtrOutput) Elem() HTTP2HealthCheckResponseOutput {
	return o.ApplyT(func(v *HTTP2HealthCheckResponse) HTTP2HealthCheckResponse { return *v }).(HTTP2HealthCheckResponseOutput)
}

// The value of the host header in the HTTP/2 health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
func (o HTTP2HealthCheckResponsePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTP2HealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
func (o HTTP2HealthCheckResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HTTP2HealthCheckResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o HTTP2HealthCheckResponsePtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTP2HealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTP2 health check follows behavior specified in port and portName fields.
func (o HTTP2HealthCheckResponsePtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTP2HealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o HTTP2HealthCheckResponsePtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTP2HealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The request path of the HTTP/2 health check request. The default value is /.
func (o HTTP2HealthCheckResponsePtrOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTP2HealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RequestPath
	}).(pulumi.StringPtrOutput)
}

// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
func (o HTTP2HealthCheckResponsePtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTP2HealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Response
	}).(pulumi.StringPtrOutput)
}

type HTTPHealthCheck struct {
	// The value of the host header in the HTTP health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
	Host *string `pulumi:"host"`
	// The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
	Port *int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName *string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTP health check follows behavior specified in port and portName fields.
	PortSpecification *string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *string `pulumi:"proxyHeader"`
	// The request path of the HTTP health check request. The default value is /.
	RequestPath *string `pulumi:"requestPath"`
	// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
	Response *string `pulumi:"response"`
}

// HTTPHealthCheckInput is an input type that accepts HTTPHealthCheckArgs and HTTPHealthCheckOutput values.
// You can construct a concrete instance of `HTTPHealthCheckInput` via:
//
//          HTTPHealthCheckArgs{...}
type HTTPHealthCheckInput interface {
	pulumi.Input

	ToHTTPHealthCheckOutput() HTTPHealthCheckOutput
	ToHTTPHealthCheckOutputWithContext(context.Context) HTTPHealthCheckOutput
}

type HTTPHealthCheckArgs struct {
	// The value of the host header in the HTTP health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTP health check follows behavior specified in port and portName fields.
	PortSpecification *HTTPHealthCheckPortSpecification `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *HTTPHealthCheckProxyHeader `pulumi:"proxyHeader"`
	// The request path of the HTTP health check request. The default value is /.
	RequestPath pulumi.StringPtrInput `pulumi:"requestPath"`
	// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (HTTPHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPHealthCheck)(nil)).Elem()
}

func (i HTTPHealthCheckArgs) ToHTTPHealthCheckOutput() HTTPHealthCheckOutput {
	return i.ToHTTPHealthCheckOutputWithContext(context.Background())
}

func (i HTTPHealthCheckArgs) ToHTTPHealthCheckOutputWithContext(ctx context.Context) HTTPHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPHealthCheckOutput)
}

func (i HTTPHealthCheckArgs) ToHTTPHealthCheckPtrOutput() HTTPHealthCheckPtrOutput {
	return i.ToHTTPHealthCheckPtrOutputWithContext(context.Background())
}

func (i HTTPHealthCheckArgs) ToHTTPHealthCheckPtrOutputWithContext(ctx context.Context) HTTPHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPHealthCheckOutput).ToHTTPHealthCheckPtrOutputWithContext(ctx)
}

// HTTPHealthCheckPtrInput is an input type that accepts HTTPHealthCheckArgs, HTTPHealthCheckPtr and HTTPHealthCheckPtrOutput values.
// You can construct a concrete instance of `HTTPHealthCheckPtrInput` via:
//
//          HTTPHealthCheckArgs{...}
//
//  or:
//
//          nil
type HTTPHealthCheckPtrInput interface {
	pulumi.Input

	ToHTTPHealthCheckPtrOutput() HTTPHealthCheckPtrOutput
	ToHTTPHealthCheckPtrOutputWithContext(context.Context) HTTPHealthCheckPtrOutput
}

type httphealthCheckPtrType HTTPHealthCheckArgs

func HTTPHealthCheckPtr(v *HTTPHealthCheckArgs) HTTPHealthCheckPtrInput {
	return (*httphealthCheckPtrType)(v)
}

func (*httphealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPHealthCheck)(nil)).Elem()
}

func (i *httphealthCheckPtrType) ToHTTPHealthCheckPtrOutput() HTTPHealthCheckPtrOutput {
	return i.ToHTTPHealthCheckPtrOutputWithContext(context.Background())
}

func (i *httphealthCheckPtrType) ToHTTPHealthCheckPtrOutputWithContext(ctx context.Context) HTTPHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPHealthCheckPtrOutput)
}

type HTTPHealthCheckOutput struct{ *pulumi.OutputState }

func (HTTPHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPHealthCheck)(nil)).Elem()
}

func (o HTTPHealthCheckOutput) ToHTTPHealthCheckOutput() HTTPHealthCheckOutput {
	return o
}

func (o HTTPHealthCheckOutput) ToHTTPHealthCheckOutputWithContext(ctx context.Context) HTTPHealthCheckOutput {
	return o
}

func (o HTTPHealthCheckOutput) ToHTTPHealthCheckPtrOutput() HTTPHealthCheckPtrOutput {
	return o.ToHTTPHealthCheckPtrOutputWithContext(context.Background())
}

func (o HTTPHealthCheckOutput) ToHTTPHealthCheckPtrOutputWithContext(ctx context.Context) HTTPHealthCheckPtrOutput {
	return o.ApplyT(func(v HTTPHealthCheck) *HTTPHealthCheck {
		return &v
	}).(HTTPHealthCheckPtrOutput)
}

// The value of the host header in the HTTP health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
func (o HTTPHealthCheckOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPHealthCheck) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
func (o HTTPHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HTTPHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o HTTPHealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPHealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTP health check follows behavior specified in port and portName fields.
func (o HTTPHealthCheckOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPHealthCheck) *string { return v.PortSpecification }).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o HTTPHealthCheckOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPHealthCheck) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

// The request path of the HTTP health check request. The default value is /.
func (o HTTPHealthCheckOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPHealthCheck) *string { return v.RequestPath }).(pulumi.StringPtrOutput)
}

// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
func (o HTTPHealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPHealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type HTTPHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (HTTPHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPHealthCheck)(nil)).Elem()
}

func (o HTTPHealthCheckPtrOutput) ToHTTPHealthCheckPtrOutput() HTTPHealthCheckPtrOutput {
	return o
}

func (o HTTPHealthCheckPtrOutput) ToHTTPHealthCheckPtrOutputWithContext(ctx context.Context) HTTPHealthCheckPtrOutput {
	return o
}

func (o HTTPHealthCheckPtrOutput) Elem() HTTPHealthCheckOutput {
	return o.ApplyT(func(v *HTTPHealthCheck) HTTPHealthCheck { return *v }).(HTTPHealthCheckOutput)
}

// The value of the host header in the HTTP health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
func (o HTTPHealthCheckPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
func (o HTTPHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HTTPHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o HTTPHealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTP health check follows behavior specified in port and portName fields.
func (o HTTPHealthCheckPtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o HTTPHealthCheckPtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The request path of the HTTP health check request. The default value is /.
func (o HTTPHealthCheckPtrOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.RequestPath
	}).(pulumi.StringPtrOutput)
}

// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
func (o HTTPHealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type HTTPHealthCheckResponse struct {
	// The value of the host header in the HTTP health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
	Host string `pulumi:"host"`
	// The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
	Port int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTP health check follows behavior specified in port and portName fields.
	PortSpecification string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader string `pulumi:"proxyHeader"`
	// The request path of the HTTP health check request. The default value is /.
	RequestPath string `pulumi:"requestPath"`
	// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
	Response string `pulumi:"response"`
}

// HTTPHealthCheckResponseInput is an input type that accepts HTTPHealthCheckResponseArgs and HTTPHealthCheckResponseOutput values.
// You can construct a concrete instance of `HTTPHealthCheckResponseInput` via:
//
//          HTTPHealthCheckResponseArgs{...}
type HTTPHealthCheckResponseInput interface {
	pulumi.Input

	ToHTTPHealthCheckResponseOutput() HTTPHealthCheckResponseOutput
	ToHTTPHealthCheckResponseOutputWithContext(context.Context) HTTPHealthCheckResponseOutput
}

type HTTPHealthCheckResponseArgs struct {
	// The value of the host header in the HTTP health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
	Host pulumi.StringInput `pulumi:"host"`
	// The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
	Port pulumi.IntInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName pulumi.StringInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTP health check follows behavior specified in port and portName fields.
	PortSpecification pulumi.StringInput `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader pulumi.StringInput `pulumi:"proxyHeader"`
	// The request path of the HTTP health check request. The default value is /.
	RequestPath pulumi.StringInput `pulumi:"requestPath"`
	// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
	Response pulumi.StringInput `pulumi:"response"`
}

func (HTTPHealthCheckResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPHealthCheckResponse)(nil)).Elem()
}

func (i HTTPHealthCheckResponseArgs) ToHTTPHealthCheckResponseOutput() HTTPHealthCheckResponseOutput {
	return i.ToHTTPHealthCheckResponseOutputWithContext(context.Background())
}

func (i HTTPHealthCheckResponseArgs) ToHTTPHealthCheckResponseOutputWithContext(ctx context.Context) HTTPHealthCheckResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPHealthCheckResponseOutput)
}

func (i HTTPHealthCheckResponseArgs) ToHTTPHealthCheckResponsePtrOutput() HTTPHealthCheckResponsePtrOutput {
	return i.ToHTTPHealthCheckResponsePtrOutputWithContext(context.Background())
}

func (i HTTPHealthCheckResponseArgs) ToHTTPHealthCheckResponsePtrOutputWithContext(ctx context.Context) HTTPHealthCheckResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPHealthCheckResponseOutput).ToHTTPHealthCheckResponsePtrOutputWithContext(ctx)
}

// HTTPHealthCheckResponsePtrInput is an input type that accepts HTTPHealthCheckResponseArgs, HTTPHealthCheckResponsePtr and HTTPHealthCheckResponsePtrOutput values.
// You can construct a concrete instance of `HTTPHealthCheckResponsePtrInput` via:
//
//          HTTPHealthCheckResponseArgs{...}
//
//  or:
//
//          nil
type HTTPHealthCheckResponsePtrInput interface {
	pulumi.Input

	ToHTTPHealthCheckResponsePtrOutput() HTTPHealthCheckResponsePtrOutput
	ToHTTPHealthCheckResponsePtrOutputWithContext(context.Context) HTTPHealthCheckResponsePtrOutput
}

type httphealthCheckResponsePtrType HTTPHealthCheckResponseArgs

func HTTPHealthCheckResponsePtr(v *HTTPHealthCheckResponseArgs) HTTPHealthCheckResponsePtrInput {
	return (*httphealthCheckResponsePtrType)(v)
}

func (*httphealthCheckResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPHealthCheckResponse)(nil)).Elem()
}

func (i *httphealthCheckResponsePtrType) ToHTTPHealthCheckResponsePtrOutput() HTTPHealthCheckResponsePtrOutput {
	return i.ToHTTPHealthCheckResponsePtrOutputWithContext(context.Background())
}

func (i *httphealthCheckResponsePtrType) ToHTTPHealthCheckResponsePtrOutputWithContext(ctx context.Context) HTTPHealthCheckResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPHealthCheckResponsePtrOutput)
}

type HTTPHealthCheckResponseOutput struct{ *pulumi.OutputState }

func (HTTPHealthCheckResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPHealthCheckResponse)(nil)).Elem()
}

func (o HTTPHealthCheckResponseOutput) ToHTTPHealthCheckResponseOutput() HTTPHealthCheckResponseOutput {
	return o
}

func (o HTTPHealthCheckResponseOutput) ToHTTPHealthCheckResponseOutputWithContext(ctx context.Context) HTTPHealthCheckResponseOutput {
	return o
}

func (o HTTPHealthCheckResponseOutput) ToHTTPHealthCheckResponsePtrOutput() HTTPHealthCheckResponsePtrOutput {
	return o.ToHTTPHealthCheckResponsePtrOutputWithContext(context.Background())
}

func (o HTTPHealthCheckResponseOutput) ToHTTPHealthCheckResponsePtrOutputWithContext(ctx context.Context) HTTPHealthCheckResponsePtrOutput {
	return o.ApplyT(func(v HTTPHealthCheckResponse) *HTTPHealthCheckResponse {
		return &v
	}).(HTTPHealthCheckResponsePtrOutput)
}

// The value of the host header in the HTTP health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
func (o HTTPHealthCheckResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPHealthCheckResponse) string { return v.Host }).(pulumi.StringOutput)
}

// The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
func (o HTTPHealthCheckResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v HTTPHealthCheckResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o HTTPHealthCheckResponseOutput) PortName() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPHealthCheckResponse) string { return v.PortName }).(pulumi.StringOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTP health check follows behavior specified in port and portName fields.
func (o HTTPHealthCheckResponseOutput) PortSpecification() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPHealthCheckResponse) string { return v.PortSpecification }).(pulumi.StringOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o HTTPHealthCheckResponseOutput) ProxyHeader() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPHealthCheckResponse) string { return v.ProxyHeader }).(pulumi.StringOutput)
}

// The request path of the HTTP health check request. The default value is /.
func (o HTTPHealthCheckResponseOutput) RequestPath() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPHealthCheckResponse) string { return v.RequestPath }).(pulumi.StringOutput)
}

// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
func (o HTTPHealthCheckResponseOutput) Response() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPHealthCheckResponse) string { return v.Response }).(pulumi.StringOutput)
}

type HTTPHealthCheckResponsePtrOutput struct{ *pulumi.OutputState }

func (HTTPHealthCheckResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPHealthCheckResponse)(nil)).Elem()
}

func (o HTTPHealthCheckResponsePtrOutput) ToHTTPHealthCheckResponsePtrOutput() HTTPHealthCheckResponsePtrOutput {
	return o
}

func (o HTTPHealthCheckResponsePtrOutput) ToHTTPHealthCheckResponsePtrOutputWithContext(ctx context.Context) HTTPHealthCheckResponsePtrOutput {
	return o
}

func (o HTTPHealthCheckResponsePtrOutput) Elem() HTTPHealthCheckResponseOutput {
	return o.ApplyT(func(v *HTTPHealthCheckResponse) HTTPHealthCheckResponse { return *v }).(HTTPHealthCheckResponseOutput)
}

// The value of the host header in the HTTP health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
func (o HTTPHealthCheckResponsePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
func (o HTTPHealthCheckResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HTTPHealthCheckResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o HTTPHealthCheckResponsePtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTP health check follows behavior specified in port and portName fields.
func (o HTTPHealthCheckResponsePtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o HTTPHealthCheckResponsePtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The request path of the HTTP health check request. The default value is /.
func (o HTTPHealthCheckResponsePtrOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RequestPath
	}).(pulumi.StringPtrOutput)
}

// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
func (o HTTPHealthCheckResponsePtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Response
	}).(pulumi.StringPtrOutput)
}

type HTTPSHealthCheck struct {
	// The value of the host header in the HTTPS health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
	Host *string `pulumi:"host"`
	// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
	Port *int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName *string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTPS health check follows behavior specified in port and portName fields.
	PortSpecification *string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *string `pulumi:"proxyHeader"`
	// The request path of the HTTPS health check request. The default value is /.
	RequestPath *string `pulumi:"requestPath"`
	// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
	Response *string `pulumi:"response"`
}

// HTTPSHealthCheckInput is an input type that accepts HTTPSHealthCheckArgs and HTTPSHealthCheckOutput values.
// You can construct a concrete instance of `HTTPSHealthCheckInput` via:
//
//          HTTPSHealthCheckArgs{...}
type HTTPSHealthCheckInput interface {
	pulumi.Input

	ToHTTPSHealthCheckOutput() HTTPSHealthCheckOutput
	ToHTTPSHealthCheckOutputWithContext(context.Context) HTTPSHealthCheckOutput
}

type HTTPSHealthCheckArgs struct {
	// The value of the host header in the HTTPS health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTPS health check follows behavior specified in port and portName fields.
	PortSpecification *HTTPSHealthCheckPortSpecification `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *HTTPSHealthCheckProxyHeader `pulumi:"proxyHeader"`
	// The request path of the HTTPS health check request. The default value is /.
	RequestPath pulumi.StringPtrInput `pulumi:"requestPath"`
	// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (HTTPSHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPSHealthCheck)(nil)).Elem()
}

func (i HTTPSHealthCheckArgs) ToHTTPSHealthCheckOutput() HTTPSHealthCheckOutput {
	return i.ToHTTPSHealthCheckOutputWithContext(context.Background())
}

func (i HTTPSHealthCheckArgs) ToHTTPSHealthCheckOutputWithContext(ctx context.Context) HTTPSHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPSHealthCheckOutput)
}

func (i HTTPSHealthCheckArgs) ToHTTPSHealthCheckPtrOutput() HTTPSHealthCheckPtrOutput {
	return i.ToHTTPSHealthCheckPtrOutputWithContext(context.Background())
}

func (i HTTPSHealthCheckArgs) ToHTTPSHealthCheckPtrOutputWithContext(ctx context.Context) HTTPSHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPSHealthCheckOutput).ToHTTPSHealthCheckPtrOutputWithContext(ctx)
}

// HTTPSHealthCheckPtrInput is an input type that accepts HTTPSHealthCheckArgs, HTTPSHealthCheckPtr and HTTPSHealthCheckPtrOutput values.
// You can construct a concrete instance of `HTTPSHealthCheckPtrInput` via:
//
//          HTTPSHealthCheckArgs{...}
//
//  or:
//
//          nil
type HTTPSHealthCheckPtrInput interface {
	pulumi.Input

	ToHTTPSHealthCheckPtrOutput() HTTPSHealthCheckPtrOutput
	ToHTTPSHealthCheckPtrOutputWithContext(context.Context) HTTPSHealthCheckPtrOutput
}

type httpshealthCheckPtrType HTTPSHealthCheckArgs

func HTTPSHealthCheckPtr(v *HTTPSHealthCheckArgs) HTTPSHealthCheckPtrInput {
	return (*httpshealthCheckPtrType)(v)
}

func (*httpshealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPSHealthCheck)(nil)).Elem()
}

func (i *httpshealthCheckPtrType) ToHTTPSHealthCheckPtrOutput() HTTPSHealthCheckPtrOutput {
	return i.ToHTTPSHealthCheckPtrOutputWithContext(context.Background())
}

func (i *httpshealthCheckPtrType) ToHTTPSHealthCheckPtrOutputWithContext(ctx context.Context) HTTPSHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPSHealthCheckPtrOutput)
}

type HTTPSHealthCheckOutput struct{ *pulumi.OutputState }

func (HTTPSHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPSHealthCheck)(nil)).Elem()
}

func (o HTTPSHealthCheckOutput) ToHTTPSHealthCheckOutput() HTTPSHealthCheckOutput {
	return o
}

func (o HTTPSHealthCheckOutput) ToHTTPSHealthCheckOutputWithContext(ctx context.Context) HTTPSHealthCheckOutput {
	return o
}

func (o HTTPSHealthCheckOutput) ToHTTPSHealthCheckPtrOutput() HTTPSHealthCheckPtrOutput {
	return o.ToHTTPSHealthCheckPtrOutputWithContext(context.Background())
}

func (o HTTPSHealthCheckOutput) ToHTTPSHealthCheckPtrOutputWithContext(ctx context.Context) HTTPSHealthCheckPtrOutput {
	return o.ApplyT(func(v HTTPSHealthCheck) *HTTPSHealthCheck {
		return &v
	}).(HTTPSHealthCheckPtrOutput)
}

// The value of the host header in the HTTPS health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
func (o HTTPSHealthCheckOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPSHealthCheck) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
func (o HTTPSHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HTTPSHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o HTTPSHealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPSHealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTPS health check follows behavior specified in port and portName fields.
func (o HTTPSHealthCheckOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPSHealthCheck) *string { return v.PortSpecification }).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o HTTPSHealthCheckOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPSHealthCheck) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

// The request path of the HTTPS health check request. The default value is /.
func (o HTTPSHealthCheckOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPSHealthCheck) *string { return v.RequestPath }).(pulumi.StringPtrOutput)
}

// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
func (o HTTPSHealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HTTPSHealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type HTTPSHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (HTTPSHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPSHealthCheck)(nil)).Elem()
}

func (o HTTPSHealthCheckPtrOutput) ToHTTPSHealthCheckPtrOutput() HTTPSHealthCheckPtrOutput {
	return o
}

func (o HTTPSHealthCheckPtrOutput) ToHTTPSHealthCheckPtrOutputWithContext(ctx context.Context) HTTPSHealthCheckPtrOutput {
	return o
}

func (o HTTPSHealthCheckPtrOutput) Elem() HTTPSHealthCheckOutput {
	return o.ApplyT(func(v *HTTPSHealthCheck) HTTPSHealthCheck { return *v }).(HTTPSHealthCheckOutput)
}

// The value of the host header in the HTTPS health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
func (o HTTPSHealthCheckPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPSHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
func (o HTTPSHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HTTPSHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o HTTPSHealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPSHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTPS health check follows behavior specified in port and portName fields.
func (o HTTPSHealthCheckPtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPSHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o HTTPSHealthCheckPtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPSHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The request path of the HTTPS health check request. The default value is /.
func (o HTTPSHealthCheckPtrOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPSHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.RequestPath
	}).(pulumi.StringPtrOutput)
}

// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
func (o HTTPSHealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPSHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type HTTPSHealthCheckResponse struct {
	// The value of the host header in the HTTPS health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
	Host string `pulumi:"host"`
	// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
	Port int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTPS health check follows behavior specified in port and portName fields.
	PortSpecification string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader string `pulumi:"proxyHeader"`
	// The request path of the HTTPS health check request. The default value is /.
	RequestPath string `pulumi:"requestPath"`
	// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
	Response string `pulumi:"response"`
}

// HTTPSHealthCheckResponseInput is an input type that accepts HTTPSHealthCheckResponseArgs and HTTPSHealthCheckResponseOutput values.
// You can construct a concrete instance of `HTTPSHealthCheckResponseInput` via:
//
//          HTTPSHealthCheckResponseArgs{...}
type HTTPSHealthCheckResponseInput interface {
	pulumi.Input

	ToHTTPSHealthCheckResponseOutput() HTTPSHealthCheckResponseOutput
	ToHTTPSHealthCheckResponseOutputWithContext(context.Context) HTTPSHealthCheckResponseOutput
}

type HTTPSHealthCheckResponseArgs struct {
	// The value of the host header in the HTTPS health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
	Host pulumi.StringInput `pulumi:"host"`
	// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
	Port pulumi.IntInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName pulumi.StringInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTPS health check follows behavior specified in port and portName fields.
	PortSpecification pulumi.StringInput `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader pulumi.StringInput `pulumi:"proxyHeader"`
	// The request path of the HTTPS health check request. The default value is /.
	RequestPath pulumi.StringInput `pulumi:"requestPath"`
	// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
	Response pulumi.StringInput `pulumi:"response"`
}

func (HTTPSHealthCheckResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPSHealthCheckResponse)(nil)).Elem()
}

func (i HTTPSHealthCheckResponseArgs) ToHTTPSHealthCheckResponseOutput() HTTPSHealthCheckResponseOutput {
	return i.ToHTTPSHealthCheckResponseOutputWithContext(context.Background())
}

func (i HTTPSHealthCheckResponseArgs) ToHTTPSHealthCheckResponseOutputWithContext(ctx context.Context) HTTPSHealthCheckResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPSHealthCheckResponseOutput)
}

func (i HTTPSHealthCheckResponseArgs) ToHTTPSHealthCheckResponsePtrOutput() HTTPSHealthCheckResponsePtrOutput {
	return i.ToHTTPSHealthCheckResponsePtrOutputWithContext(context.Background())
}

func (i HTTPSHealthCheckResponseArgs) ToHTTPSHealthCheckResponsePtrOutputWithContext(ctx context.Context) HTTPSHealthCheckResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPSHealthCheckResponseOutput).ToHTTPSHealthCheckResponsePtrOutputWithContext(ctx)
}

// HTTPSHealthCheckResponsePtrInput is an input type that accepts HTTPSHealthCheckResponseArgs, HTTPSHealthCheckResponsePtr and HTTPSHealthCheckResponsePtrOutput values.
// You can construct a concrete instance of `HTTPSHealthCheckResponsePtrInput` via:
//
//          HTTPSHealthCheckResponseArgs{...}
//
//  or:
//
//          nil
type HTTPSHealthCheckResponsePtrInput interface {
	pulumi.Input

	ToHTTPSHealthCheckResponsePtrOutput() HTTPSHealthCheckResponsePtrOutput
	ToHTTPSHealthCheckResponsePtrOutputWithContext(context.Context) HTTPSHealthCheckResponsePtrOutput
}

type httpshealthCheckResponsePtrType HTTPSHealthCheckResponseArgs

func HTTPSHealthCheckResponsePtr(v *HTTPSHealthCheckResponseArgs) HTTPSHealthCheckResponsePtrInput {
	return (*httpshealthCheckResponsePtrType)(v)
}

func (*httpshealthCheckResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPSHealthCheckResponse)(nil)).Elem()
}

func (i *httpshealthCheckResponsePtrType) ToHTTPSHealthCheckResponsePtrOutput() HTTPSHealthCheckResponsePtrOutput {
	return i.ToHTTPSHealthCheckResponsePtrOutputWithContext(context.Background())
}

func (i *httpshealthCheckResponsePtrType) ToHTTPSHealthCheckResponsePtrOutputWithContext(ctx context.Context) HTTPSHealthCheckResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPSHealthCheckResponsePtrOutput)
}

type HTTPSHealthCheckResponseOutput struct{ *pulumi.OutputState }

func (HTTPSHealthCheckResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HTTPSHealthCheckResponse)(nil)).Elem()
}

func (o HTTPSHealthCheckResponseOutput) ToHTTPSHealthCheckResponseOutput() HTTPSHealthCheckResponseOutput {
	return o
}

func (o HTTPSHealthCheckResponseOutput) ToHTTPSHealthCheckResponseOutputWithContext(ctx context.Context) HTTPSHealthCheckResponseOutput {
	return o
}

func (o HTTPSHealthCheckResponseOutput) ToHTTPSHealthCheckResponsePtrOutput() HTTPSHealthCheckResponsePtrOutput {
	return o.ToHTTPSHealthCheckResponsePtrOutputWithContext(context.Background())
}

func (o HTTPSHealthCheckResponseOutput) ToHTTPSHealthCheckResponsePtrOutputWithContext(ctx context.Context) HTTPSHealthCheckResponsePtrOutput {
	return o.ApplyT(func(v HTTPSHealthCheckResponse) *HTTPSHealthCheckResponse {
		return &v
	}).(HTTPSHealthCheckResponsePtrOutput)
}

// The value of the host header in the HTTPS health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
func (o HTTPSHealthCheckResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPSHealthCheckResponse) string { return v.Host }).(pulumi.StringOutput)
}

// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
func (o HTTPSHealthCheckResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v HTTPSHealthCheckResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o HTTPSHealthCheckResponseOutput) PortName() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPSHealthCheckResponse) string { return v.PortName }).(pulumi.StringOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTPS health check follows behavior specified in port and portName fields.
func (o HTTPSHealthCheckResponseOutput) PortSpecification() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPSHealthCheckResponse) string { return v.PortSpecification }).(pulumi.StringOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o HTTPSHealthCheckResponseOutput) ProxyHeader() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPSHealthCheckResponse) string { return v.ProxyHeader }).(pulumi.StringOutput)
}

// The request path of the HTTPS health check request. The default value is /.
func (o HTTPSHealthCheckResponseOutput) RequestPath() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPSHealthCheckResponse) string { return v.RequestPath }).(pulumi.StringOutput)
}

// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
func (o HTTPSHealthCheckResponseOutput) Response() pulumi.StringOutput {
	return o.ApplyT(func(v HTTPSHealthCheckResponse) string { return v.Response }).(pulumi.StringOutput)
}

type HTTPSHealthCheckResponsePtrOutput struct{ *pulumi.OutputState }

func (HTTPSHealthCheckResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPSHealthCheckResponse)(nil)).Elem()
}

func (o HTTPSHealthCheckResponsePtrOutput) ToHTTPSHealthCheckResponsePtrOutput() HTTPSHealthCheckResponsePtrOutput {
	return o
}

func (o HTTPSHealthCheckResponsePtrOutput) ToHTTPSHealthCheckResponsePtrOutputWithContext(ctx context.Context) HTTPSHealthCheckResponsePtrOutput {
	return o
}

func (o HTTPSHealthCheckResponsePtrOutput) Elem() HTTPSHealthCheckResponseOutput {
	return o.ApplyT(func(v *HTTPSHealthCheckResponse) HTTPSHealthCheckResponse { return *v }).(HTTPSHealthCheckResponseOutput)
}

// The value of the host header in the HTTPS health check request. If left empty (default value), the IP on behalf of which this health check is performed will be used.
func (o HTTPSHealthCheckResponsePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPSHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
func (o HTTPSHealthCheckResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HTTPSHealthCheckResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o HTTPSHealthCheckResponsePtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPSHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, HTTPS health check follows behavior specified in port and portName fields.
func (o HTTPSHealthCheckResponsePtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPSHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o HTTPSHealthCheckResponsePtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPSHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The request path of the HTTPS health check request. The default value is /.
func (o HTTPSHealthCheckResponsePtrOutput) RequestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPSHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RequestPath
	}).(pulumi.StringPtrOutput)
}

// The string to match anywhere in the first 1024 bytes of the response body. If left empty (the default value), the status code determines health. The response data can only be ASCII.
func (o HTTPSHealthCheckResponsePtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPSHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Response
	}).(pulumi.StringPtrOutput)
}

// Configuration of logging on a health check. If logging is enabled, logs will be exported to Stackdriver.
type HealthCheckLogConfig struct {
	// Indicates whether or not to export logs. This is false by default, which means no health check logging will be done.
	Enable *bool `pulumi:"enable"`
}

// HealthCheckLogConfigInput is an input type that accepts HealthCheckLogConfigArgs and HealthCheckLogConfigOutput values.
// You can construct a concrete instance of `HealthCheckLogConfigInput` via:
//
//          HealthCheckLogConfigArgs{...}
type HealthCheckLogConfigInput interface {
	pulumi.Input

	ToHealthCheckLogConfigOutput() HealthCheckLogConfigOutput
	ToHealthCheckLogConfigOutputWithContext(context.Context) HealthCheckLogConfigOutput
}

// Configuration of logging on a health check. If logging is enabled, logs will be exported to Stackdriver.
type HealthCheckLogConfigArgs struct {
	// Indicates whether or not to export logs. This is false by default, which means no health check logging will be done.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
}

func (HealthCheckLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckLogConfig)(nil)).Elem()
}

func (i HealthCheckLogConfigArgs) ToHealthCheckLogConfigOutput() HealthCheckLogConfigOutput {
	return i.ToHealthCheckLogConfigOutputWithContext(context.Background())
}

func (i HealthCheckLogConfigArgs) ToHealthCheckLogConfigOutputWithContext(ctx context.Context) HealthCheckLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckLogConfigOutput)
}

func (i HealthCheckLogConfigArgs) ToHealthCheckLogConfigPtrOutput() HealthCheckLogConfigPtrOutput {
	return i.ToHealthCheckLogConfigPtrOutputWithContext(context.Background())
}

func (i HealthCheckLogConfigArgs) ToHealthCheckLogConfigPtrOutputWithContext(ctx context.Context) HealthCheckLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckLogConfigOutput).ToHealthCheckLogConfigPtrOutputWithContext(ctx)
}

// HealthCheckLogConfigPtrInput is an input type that accepts HealthCheckLogConfigArgs, HealthCheckLogConfigPtr and HealthCheckLogConfigPtrOutput values.
// You can construct a concrete instance of `HealthCheckLogConfigPtrInput` via:
//
//          HealthCheckLogConfigArgs{...}
//
//  or:
//
//          nil
type HealthCheckLogConfigPtrInput interface {
	pulumi.Input

	ToHealthCheckLogConfigPtrOutput() HealthCheckLogConfigPtrOutput
	ToHealthCheckLogConfigPtrOutputWithContext(context.Context) HealthCheckLogConfigPtrOutput
}

type healthCheckLogConfigPtrType HealthCheckLogConfigArgs

func HealthCheckLogConfigPtr(v *HealthCheckLogConfigArgs) HealthCheckLogConfigPtrInput {
	return (*healthCheckLogConfigPtrType)(v)
}

func (*healthCheckLogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckLogConfig)(nil)).Elem()
}

func (i *healthCheckLogConfigPtrType) ToHealthCheckLogConfigPtrOutput() HealthCheckLogConfigPtrOutput {
	return i.ToHealthCheckLogConfigPtrOutputWithContext(context.Background())
}

func (i *healthCheckLogConfigPtrType) ToHealthCheckLogConfigPtrOutputWithContext(ctx context.Context) HealthCheckLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckLogConfigPtrOutput)
}

// Configuration of logging on a health check. If logging is enabled, logs will be exported to Stackdriver.
type HealthCheckLogConfigOutput struct{ *pulumi.OutputState }

func (HealthCheckLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckLogConfig)(nil)).Elem()
}

func (o HealthCheckLogConfigOutput) ToHealthCheckLogConfigOutput() HealthCheckLogConfigOutput {
	return o
}

func (o HealthCheckLogConfigOutput) ToHealthCheckLogConfigOutputWithContext(ctx context.Context) HealthCheckLogConfigOutput {
	return o
}

func (o HealthCheckLogConfigOutput) ToHealthCheckLogConfigPtrOutput() HealthCheckLogConfigPtrOutput {
	return o.ToHealthCheckLogConfigPtrOutputWithContext(context.Background())
}

func (o HealthCheckLogConfigOutput) ToHealthCheckLogConfigPtrOutputWithContext(ctx context.Context) HealthCheckLogConfigPtrOutput {
	return o.ApplyT(func(v HealthCheckLogConfig) *HealthCheckLogConfig {
		return &v
	}).(HealthCheckLogConfigPtrOutput)
}

// Indicates whether or not to export logs. This is false by default, which means no health check logging will be done.
func (o HealthCheckLogConfigOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HealthCheckLogConfig) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

type HealthCheckLogConfigPtrOutput struct{ *pulumi.OutputState }

func (HealthCheckLogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckLogConfig)(nil)).Elem()
}

func (o HealthCheckLogConfigPtrOutput) ToHealthCheckLogConfigPtrOutput() HealthCheckLogConfigPtrOutput {
	return o
}

func (o HealthCheckLogConfigPtrOutput) ToHealthCheckLogConfigPtrOutputWithContext(ctx context.Context) HealthCheckLogConfigPtrOutput {
	return o
}

func (o HealthCheckLogConfigPtrOutput) Elem() HealthCheckLogConfigOutput {
	return o.ApplyT(func(v *HealthCheckLogConfig) HealthCheckLogConfig { return *v }).(HealthCheckLogConfigOutput)
}

// Indicates whether or not to export logs. This is false by default, which means no health check logging will be done.
func (o HealthCheckLogConfigPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HealthCheckLogConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Configuration of logging on a health check. If logging is enabled, logs will be exported to Stackdriver.
type HealthCheckLogConfigResponse struct {
	// Indicates whether or not to export logs. This is false by default, which means no health check logging will be done.
	Enable bool `pulumi:"enable"`
}

// HealthCheckLogConfigResponseInput is an input type that accepts HealthCheckLogConfigResponseArgs and HealthCheckLogConfigResponseOutput values.
// You can construct a concrete instance of `HealthCheckLogConfigResponseInput` via:
//
//          HealthCheckLogConfigResponseArgs{...}
type HealthCheckLogConfigResponseInput interface {
	pulumi.Input

	ToHealthCheckLogConfigResponseOutput() HealthCheckLogConfigResponseOutput
	ToHealthCheckLogConfigResponseOutputWithContext(context.Context) HealthCheckLogConfigResponseOutput
}

// Configuration of logging on a health check. If logging is enabled, logs will be exported to Stackdriver.
type HealthCheckLogConfigResponseArgs struct {
	// Indicates whether or not to export logs. This is false by default, which means no health check logging will be done.
	Enable pulumi.BoolInput `pulumi:"enable"`
}

func (HealthCheckLogConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckLogConfigResponse)(nil)).Elem()
}

func (i HealthCheckLogConfigResponseArgs) ToHealthCheckLogConfigResponseOutput() HealthCheckLogConfigResponseOutput {
	return i.ToHealthCheckLogConfigResponseOutputWithContext(context.Background())
}

func (i HealthCheckLogConfigResponseArgs) ToHealthCheckLogConfigResponseOutputWithContext(ctx context.Context) HealthCheckLogConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckLogConfigResponseOutput)
}

func (i HealthCheckLogConfigResponseArgs) ToHealthCheckLogConfigResponsePtrOutput() HealthCheckLogConfigResponsePtrOutput {
	return i.ToHealthCheckLogConfigResponsePtrOutputWithContext(context.Background())
}

func (i HealthCheckLogConfigResponseArgs) ToHealthCheckLogConfigResponsePtrOutputWithContext(ctx context.Context) HealthCheckLogConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckLogConfigResponseOutput).ToHealthCheckLogConfigResponsePtrOutputWithContext(ctx)
}

// HealthCheckLogConfigResponsePtrInput is an input type that accepts HealthCheckLogConfigResponseArgs, HealthCheckLogConfigResponsePtr and HealthCheckLogConfigResponsePtrOutput values.
// You can construct a concrete instance of `HealthCheckLogConfigResponsePtrInput` via:
//
//          HealthCheckLogConfigResponseArgs{...}
//
//  or:
//
//          nil
type HealthCheckLogConfigResponsePtrInput interface {
	pulumi.Input

	ToHealthCheckLogConfigResponsePtrOutput() HealthCheckLogConfigResponsePtrOutput
	ToHealthCheckLogConfigResponsePtrOutputWithContext(context.Context) HealthCheckLogConfigResponsePtrOutput
}

type healthCheckLogConfigResponsePtrType HealthCheckLogConfigResponseArgs

func HealthCheckLogConfigResponsePtr(v *HealthCheckLogConfigResponseArgs) HealthCheckLogConfigResponsePtrInput {
	return (*healthCheckLogConfigResponsePtrType)(v)
}

func (*healthCheckLogConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckLogConfigResponse)(nil)).Elem()
}

func (i *healthCheckLogConfigResponsePtrType) ToHealthCheckLogConfigResponsePtrOutput() HealthCheckLogConfigResponsePtrOutput {
	return i.ToHealthCheckLogConfigResponsePtrOutputWithContext(context.Background())
}

func (i *healthCheckLogConfigResponsePtrType) ToHealthCheckLogConfigResponsePtrOutputWithContext(ctx context.Context) HealthCheckLogConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthCheckLogConfigResponsePtrOutput)
}

// Configuration of logging on a health check. If logging is enabled, logs will be exported to Stackdriver.
type HealthCheckLogConfigResponseOutput struct{ *pulumi.OutputState }

func (HealthCheckLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthCheckLogConfigResponse)(nil)).Elem()
}

func (o HealthCheckLogConfigResponseOutput) ToHealthCheckLogConfigResponseOutput() HealthCheckLogConfigResponseOutput {
	return o
}

func (o HealthCheckLogConfigResponseOutput) ToHealthCheckLogConfigResponseOutputWithContext(ctx context.Context) HealthCheckLogConfigResponseOutput {
	return o
}

func (o HealthCheckLogConfigResponseOutput) ToHealthCheckLogConfigResponsePtrOutput() HealthCheckLogConfigResponsePtrOutput {
	return o.ToHealthCheckLogConfigResponsePtrOutputWithContext(context.Background())
}

func (o HealthCheckLogConfigResponseOutput) ToHealthCheckLogConfigResponsePtrOutputWithContext(ctx context.Context) HealthCheckLogConfigResponsePtrOutput {
	return o.ApplyT(func(v HealthCheckLogConfigResponse) *HealthCheckLogConfigResponse {
		return &v
	}).(HealthCheckLogConfigResponsePtrOutput)
}

// Indicates whether or not to export logs. This is false by default, which means no health check logging will be done.
func (o HealthCheckLogConfigResponseOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v HealthCheckLogConfigResponse) bool { return v.Enable }).(pulumi.BoolOutput)
}

type HealthCheckLogConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (HealthCheckLogConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthCheckLogConfigResponse)(nil)).Elem()
}

func (o HealthCheckLogConfigResponsePtrOutput) ToHealthCheckLogConfigResponsePtrOutput() HealthCheckLogConfigResponsePtrOutput {
	return o
}

func (o HealthCheckLogConfigResponsePtrOutput) ToHealthCheckLogConfigResponsePtrOutputWithContext(ctx context.Context) HealthCheckLogConfigResponsePtrOutput {
	return o
}

func (o HealthCheckLogConfigResponsePtrOutput) Elem() HealthCheckLogConfigResponseOutput {
	return o.ApplyT(func(v *HealthCheckLogConfigResponse) HealthCheckLogConfigResponse { return *v }).(HealthCheckLogConfigResponseOutput)
}

// Indicates whether or not to export logs. This is false by default, which means no health check logging will be done.
func (o HealthCheckLogConfigResponsePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HealthCheckLogConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enable
	}).(pulumi.BoolPtrOutput)
}

// UrlMaps A host-matching rule for a URL. If matched, will use the named PathMatcher to select the BackendService.
type HostRule struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// The list of host patterns to match. They must be valid hostnames with optional port numbers in the format host:port. * matches any string of ([a-z0-9-.]*). In that case, * must be the first character and must be followed in the pattern by either - or .. * based matching is not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	Hosts []string `pulumi:"hosts"`
	// The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL's host portion.
	PathMatcher *string `pulumi:"pathMatcher"`
}

// HostRuleInput is an input type that accepts HostRuleArgs and HostRuleOutput values.
// You can construct a concrete instance of `HostRuleInput` via:
//
//          HostRuleArgs{...}
type HostRuleInput interface {
	pulumi.Input

	ToHostRuleOutput() HostRuleOutput
	ToHostRuleOutputWithContext(context.Context) HostRuleOutput
}

// UrlMaps A host-matching rule for a URL. If matched, will use the named PathMatcher to select the BackendService.
type HostRuleArgs struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The list of host patterns to match. They must be valid hostnames with optional port numbers in the format host:port. * matches any string of ([a-z0-9-.]*). In that case, * must be the first character and must be followed in the pattern by either - or .. * based matching is not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL's host portion.
	PathMatcher pulumi.StringPtrInput `pulumi:"pathMatcher"`
}

func (HostRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostRule)(nil)).Elem()
}

func (i HostRuleArgs) ToHostRuleOutput() HostRuleOutput {
	return i.ToHostRuleOutputWithContext(context.Background())
}

func (i HostRuleArgs) ToHostRuleOutputWithContext(ctx context.Context) HostRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostRuleOutput)
}

// HostRuleArrayInput is an input type that accepts HostRuleArray and HostRuleArrayOutput values.
// You can construct a concrete instance of `HostRuleArrayInput` via:
//
//          HostRuleArray{ HostRuleArgs{...} }
type HostRuleArrayInput interface {
	pulumi.Input

	ToHostRuleArrayOutput() HostRuleArrayOutput
	ToHostRuleArrayOutputWithContext(context.Context) HostRuleArrayOutput
}

type HostRuleArray []HostRuleInput

func (HostRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostRule)(nil)).Elem()
}

func (i HostRuleArray) ToHostRuleArrayOutput() HostRuleArrayOutput {
	return i.ToHostRuleArrayOutputWithContext(context.Background())
}

func (i HostRuleArray) ToHostRuleArrayOutputWithContext(ctx context.Context) HostRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostRuleArrayOutput)
}

// UrlMaps A host-matching rule for a URL. If matched, will use the named PathMatcher to select the BackendService.
type HostRuleOutput struct{ *pulumi.OutputState }

func (HostRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostRule)(nil)).Elem()
}

func (o HostRuleOutput) ToHostRuleOutput() HostRuleOutput {
	return o
}

func (o HostRuleOutput) ToHostRuleOutputWithContext(ctx context.Context) HostRuleOutput {
	return o
}

// An optional description of this resource. Provide this property when you create the resource.
func (o HostRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The list of host patterns to match. They must be valid hostnames with optional port numbers in the format host:port. * matches any string of ([a-z0-9-.]*). In that case, * must be the first character and must be followed in the pattern by either - or .. * based matching is not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HostRuleOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HostRule) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL's host portion.
func (o HostRuleOutput) PathMatcher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostRule) *string { return v.PathMatcher }).(pulumi.StringPtrOutput)
}

type HostRuleArrayOutput struct{ *pulumi.OutputState }

func (HostRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostRule)(nil)).Elem()
}

func (o HostRuleArrayOutput) ToHostRuleArrayOutput() HostRuleArrayOutput {
	return o
}

func (o HostRuleArrayOutput) ToHostRuleArrayOutputWithContext(ctx context.Context) HostRuleArrayOutput {
	return o
}

func (o HostRuleArrayOutput) Index(i pulumi.IntInput) HostRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HostRule {
		return vs[0].([]HostRule)[vs[1].(int)]
	}).(HostRuleOutput)
}

// UrlMaps A host-matching rule for a URL. If matched, will use the named PathMatcher to select the BackendService.
type HostRuleResponse struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description string `pulumi:"description"`
	// The list of host patterns to match. They must be valid hostnames with optional port numbers in the format host:port. * matches any string of ([a-z0-9-.]*). In that case, * must be the first character and must be followed in the pattern by either - or .. * based matching is not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	Hosts []string `pulumi:"hosts"`
	// The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL's host portion.
	PathMatcher string `pulumi:"pathMatcher"`
}

// HostRuleResponseInput is an input type that accepts HostRuleResponseArgs and HostRuleResponseOutput values.
// You can construct a concrete instance of `HostRuleResponseInput` via:
//
//          HostRuleResponseArgs{...}
type HostRuleResponseInput interface {
	pulumi.Input

	ToHostRuleResponseOutput() HostRuleResponseOutput
	ToHostRuleResponseOutputWithContext(context.Context) HostRuleResponseOutput
}

// UrlMaps A host-matching rule for a URL. If matched, will use the named PathMatcher to select the BackendService.
type HostRuleResponseArgs struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringInput `pulumi:"description"`
	// The list of host patterns to match. They must be valid hostnames with optional port numbers in the format host:port. * matches any string of ([a-z0-9-.]*). In that case, * must be the first character and must be followed in the pattern by either - or .. * based matching is not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL's host portion.
	PathMatcher pulumi.StringInput `pulumi:"pathMatcher"`
}

func (HostRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostRuleResponse)(nil)).Elem()
}

func (i HostRuleResponseArgs) ToHostRuleResponseOutput() HostRuleResponseOutput {
	return i.ToHostRuleResponseOutputWithContext(context.Background())
}

func (i HostRuleResponseArgs) ToHostRuleResponseOutputWithContext(ctx context.Context) HostRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostRuleResponseOutput)
}

// HostRuleResponseArrayInput is an input type that accepts HostRuleResponseArray and HostRuleResponseArrayOutput values.
// You can construct a concrete instance of `HostRuleResponseArrayInput` via:
//
//          HostRuleResponseArray{ HostRuleResponseArgs{...} }
type HostRuleResponseArrayInput interface {
	pulumi.Input

	ToHostRuleResponseArrayOutput() HostRuleResponseArrayOutput
	ToHostRuleResponseArrayOutputWithContext(context.Context) HostRuleResponseArrayOutput
}

type HostRuleResponseArray []HostRuleResponseInput

func (HostRuleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostRuleResponse)(nil)).Elem()
}

func (i HostRuleResponseArray) ToHostRuleResponseArrayOutput() HostRuleResponseArrayOutput {
	return i.ToHostRuleResponseArrayOutputWithContext(context.Background())
}

func (i HostRuleResponseArray) ToHostRuleResponseArrayOutputWithContext(ctx context.Context) HostRuleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostRuleResponseArrayOutput)
}

// UrlMaps A host-matching rule for a URL. If matched, will use the named PathMatcher to select the BackendService.
type HostRuleResponseOutput struct{ *pulumi.OutputState }

func (HostRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostRuleResponse)(nil)).Elem()
}

func (o HostRuleResponseOutput) ToHostRuleResponseOutput() HostRuleResponseOutput {
	return o
}

func (o HostRuleResponseOutput) ToHostRuleResponseOutputWithContext(ctx context.Context) HostRuleResponseOutput {
	return o
}

// An optional description of this resource. Provide this property when you create the resource.
func (o HostRuleResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v HostRuleResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The list of host patterns to match. They must be valid hostnames with optional port numbers in the format host:port. * matches any string of ([a-z0-9-.]*). In that case, * must be the first character and must be followed in the pattern by either - or .. * based matching is not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HostRuleResponseOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HostRuleResponse) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL's host portion.
func (o HostRuleResponseOutput) PathMatcher() pulumi.StringOutput {
	return o.ApplyT(func(v HostRuleResponse) string { return v.PathMatcher }).(pulumi.StringOutput)
}

type HostRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (HostRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostRuleResponse)(nil)).Elem()
}

func (o HostRuleResponseArrayOutput) ToHostRuleResponseArrayOutput() HostRuleResponseArrayOutput {
	return o
}

func (o HostRuleResponseArrayOutput) ToHostRuleResponseArrayOutputWithContext(ctx context.Context) HostRuleResponseArrayOutput {
	return o
}

func (o HostRuleResponseArrayOutput) Index(i pulumi.IntInput) HostRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HostRuleResponse {
		return vs[0].([]HostRuleResponse)[vs[1].(int)]
	}).(HostRuleResponseOutput)
}

// Specification for how requests are aborted as part of fault injection.
type HttpFaultAbort struct {
	// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive. For gRPC protocol, the gRPC status code is mapped to HTTP status code according to this mapping table. HTTP status 200 is mapped to gRPC status UNKNOWN. Injecting an OK status is currently not supported by Traffic Director.
	HttpStatus *int `pulumi:"httpStatus"`
	// The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
	Percentage *float64 `pulumi:"percentage"`
}

// HttpFaultAbortInput is an input type that accepts HttpFaultAbortArgs and HttpFaultAbortOutput values.
// You can construct a concrete instance of `HttpFaultAbortInput` via:
//
//          HttpFaultAbortArgs{...}
type HttpFaultAbortInput interface {
	pulumi.Input

	ToHttpFaultAbortOutput() HttpFaultAbortOutput
	ToHttpFaultAbortOutputWithContext(context.Context) HttpFaultAbortOutput
}

// Specification for how requests are aborted as part of fault injection.
type HttpFaultAbortArgs struct {
	// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive. For gRPC protocol, the gRPC status code is mapped to HTTP status code according to this mapping table. HTTP status 200 is mapped to gRPC status UNKNOWN. Injecting an OK status is currently not supported by Traffic Director.
	HttpStatus pulumi.IntPtrInput `pulumi:"httpStatus"`
	// The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
	Percentage pulumi.Float64PtrInput `pulumi:"percentage"`
}

func (HttpFaultAbortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpFaultAbort)(nil)).Elem()
}

func (i HttpFaultAbortArgs) ToHttpFaultAbortOutput() HttpFaultAbortOutput {
	return i.ToHttpFaultAbortOutputWithContext(context.Background())
}

func (i HttpFaultAbortArgs) ToHttpFaultAbortOutputWithContext(ctx context.Context) HttpFaultAbortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultAbortOutput)
}

func (i HttpFaultAbortArgs) ToHttpFaultAbortPtrOutput() HttpFaultAbortPtrOutput {
	return i.ToHttpFaultAbortPtrOutputWithContext(context.Background())
}

func (i HttpFaultAbortArgs) ToHttpFaultAbortPtrOutputWithContext(ctx context.Context) HttpFaultAbortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultAbortOutput).ToHttpFaultAbortPtrOutputWithContext(ctx)
}

// HttpFaultAbortPtrInput is an input type that accepts HttpFaultAbortArgs, HttpFaultAbortPtr and HttpFaultAbortPtrOutput values.
// You can construct a concrete instance of `HttpFaultAbortPtrInput` via:
//
//          HttpFaultAbortArgs{...}
//
//  or:
//
//          nil
type HttpFaultAbortPtrInput interface {
	pulumi.Input

	ToHttpFaultAbortPtrOutput() HttpFaultAbortPtrOutput
	ToHttpFaultAbortPtrOutputWithContext(context.Context) HttpFaultAbortPtrOutput
}

type httpFaultAbortPtrType HttpFaultAbortArgs

func HttpFaultAbortPtr(v *HttpFaultAbortArgs) HttpFaultAbortPtrInput {
	return (*httpFaultAbortPtrType)(v)
}

func (*httpFaultAbortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpFaultAbort)(nil)).Elem()
}

func (i *httpFaultAbortPtrType) ToHttpFaultAbortPtrOutput() HttpFaultAbortPtrOutput {
	return i.ToHttpFaultAbortPtrOutputWithContext(context.Background())
}

func (i *httpFaultAbortPtrType) ToHttpFaultAbortPtrOutputWithContext(ctx context.Context) HttpFaultAbortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultAbortPtrOutput)
}

// Specification for how requests are aborted as part of fault injection.
type HttpFaultAbortOutput struct{ *pulumi.OutputState }

func (HttpFaultAbortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpFaultAbort)(nil)).Elem()
}

func (o HttpFaultAbortOutput) ToHttpFaultAbortOutput() HttpFaultAbortOutput {
	return o
}

func (o HttpFaultAbortOutput) ToHttpFaultAbortOutputWithContext(ctx context.Context) HttpFaultAbortOutput {
	return o
}

func (o HttpFaultAbortOutput) ToHttpFaultAbortPtrOutput() HttpFaultAbortPtrOutput {
	return o.ToHttpFaultAbortPtrOutputWithContext(context.Background())
}

func (o HttpFaultAbortOutput) ToHttpFaultAbortPtrOutputWithContext(ctx context.Context) HttpFaultAbortPtrOutput {
	return o.ApplyT(func(v HttpFaultAbort) *HttpFaultAbort {
		return &v
	}).(HttpFaultAbortPtrOutput)
}

// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive. For gRPC protocol, the gRPC status code is mapped to HTTP status code according to this mapping table. HTTP status 200 is mapped to gRPC status UNKNOWN. Injecting an OK status is currently not supported by Traffic Director.
func (o HttpFaultAbortOutput) HttpStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpFaultAbort) *int { return v.HttpStatus }).(pulumi.IntPtrOutput)
}

// The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
func (o HttpFaultAbortOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HttpFaultAbort) *float64 { return v.Percentage }).(pulumi.Float64PtrOutput)
}

type HttpFaultAbortPtrOutput struct{ *pulumi.OutputState }

func (HttpFaultAbortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpFaultAbort)(nil)).Elem()
}

func (o HttpFaultAbortPtrOutput) ToHttpFaultAbortPtrOutput() HttpFaultAbortPtrOutput {
	return o
}

func (o HttpFaultAbortPtrOutput) ToHttpFaultAbortPtrOutputWithContext(ctx context.Context) HttpFaultAbortPtrOutput {
	return o
}

func (o HttpFaultAbortPtrOutput) Elem() HttpFaultAbortOutput {
	return o.ApplyT(func(v *HttpFaultAbort) HttpFaultAbort { return *v }).(HttpFaultAbortOutput)
}

// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive. For gRPC protocol, the gRPC status code is mapped to HTTP status code according to this mapping table. HTTP status 200 is mapped to gRPC status UNKNOWN. Injecting an OK status is currently not supported by Traffic Director.
func (o HttpFaultAbortPtrOutput) HttpStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpFaultAbort) *int {
		if v == nil {
			return nil
		}
		return v.HttpStatus
	}).(pulumi.IntPtrOutput)
}

// The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
func (o HttpFaultAbortPtrOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HttpFaultAbort) *float64 {
		if v == nil {
			return nil
		}
		return v.Percentage
	}).(pulumi.Float64PtrOutput)
}

// Specification for how requests are aborted as part of fault injection.
type HttpFaultAbortResponse struct {
	// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive. For gRPC protocol, the gRPC status code is mapped to HTTP status code according to this mapping table. HTTP status 200 is mapped to gRPC status UNKNOWN. Injecting an OK status is currently not supported by Traffic Director.
	HttpStatus int `pulumi:"httpStatus"`
	// The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
	Percentage float64 `pulumi:"percentage"`
}

// HttpFaultAbortResponseInput is an input type that accepts HttpFaultAbortResponseArgs and HttpFaultAbortResponseOutput values.
// You can construct a concrete instance of `HttpFaultAbortResponseInput` via:
//
//          HttpFaultAbortResponseArgs{...}
type HttpFaultAbortResponseInput interface {
	pulumi.Input

	ToHttpFaultAbortResponseOutput() HttpFaultAbortResponseOutput
	ToHttpFaultAbortResponseOutputWithContext(context.Context) HttpFaultAbortResponseOutput
}

// Specification for how requests are aborted as part of fault injection.
type HttpFaultAbortResponseArgs struct {
	// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive. For gRPC protocol, the gRPC status code is mapped to HTTP status code according to this mapping table. HTTP status 200 is mapped to gRPC status UNKNOWN. Injecting an OK status is currently not supported by Traffic Director.
	HttpStatus pulumi.IntInput `pulumi:"httpStatus"`
	// The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
	Percentage pulumi.Float64Input `pulumi:"percentage"`
}

func (HttpFaultAbortResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpFaultAbortResponse)(nil)).Elem()
}

func (i HttpFaultAbortResponseArgs) ToHttpFaultAbortResponseOutput() HttpFaultAbortResponseOutput {
	return i.ToHttpFaultAbortResponseOutputWithContext(context.Background())
}

func (i HttpFaultAbortResponseArgs) ToHttpFaultAbortResponseOutputWithContext(ctx context.Context) HttpFaultAbortResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultAbortResponseOutput)
}

func (i HttpFaultAbortResponseArgs) ToHttpFaultAbortResponsePtrOutput() HttpFaultAbortResponsePtrOutput {
	return i.ToHttpFaultAbortResponsePtrOutputWithContext(context.Background())
}

func (i HttpFaultAbortResponseArgs) ToHttpFaultAbortResponsePtrOutputWithContext(ctx context.Context) HttpFaultAbortResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultAbortResponseOutput).ToHttpFaultAbortResponsePtrOutputWithContext(ctx)
}

// HttpFaultAbortResponsePtrInput is an input type that accepts HttpFaultAbortResponseArgs, HttpFaultAbortResponsePtr and HttpFaultAbortResponsePtrOutput values.
// You can construct a concrete instance of `HttpFaultAbortResponsePtrInput` via:
//
//          HttpFaultAbortResponseArgs{...}
//
//  or:
//
//          nil
type HttpFaultAbortResponsePtrInput interface {
	pulumi.Input

	ToHttpFaultAbortResponsePtrOutput() HttpFaultAbortResponsePtrOutput
	ToHttpFaultAbortResponsePtrOutputWithContext(context.Context) HttpFaultAbortResponsePtrOutput
}

type httpFaultAbortResponsePtrType HttpFaultAbortResponseArgs

func HttpFaultAbortResponsePtr(v *HttpFaultAbortResponseArgs) HttpFaultAbortResponsePtrInput {
	return (*httpFaultAbortResponsePtrType)(v)
}

func (*httpFaultAbortResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpFaultAbortResponse)(nil)).Elem()
}

func (i *httpFaultAbortResponsePtrType) ToHttpFaultAbortResponsePtrOutput() HttpFaultAbortResponsePtrOutput {
	return i.ToHttpFaultAbortResponsePtrOutputWithContext(context.Background())
}

func (i *httpFaultAbortResponsePtrType) ToHttpFaultAbortResponsePtrOutputWithContext(ctx context.Context) HttpFaultAbortResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultAbortResponsePtrOutput)
}

// Specification for how requests are aborted as part of fault injection.
type HttpFaultAbortResponseOutput struct{ *pulumi.OutputState }

func (HttpFaultAbortResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpFaultAbortResponse)(nil)).Elem()
}

func (o HttpFaultAbortResponseOutput) ToHttpFaultAbortResponseOutput() HttpFaultAbortResponseOutput {
	return o
}

func (o HttpFaultAbortResponseOutput) ToHttpFaultAbortResponseOutputWithContext(ctx context.Context) HttpFaultAbortResponseOutput {
	return o
}

func (o HttpFaultAbortResponseOutput) ToHttpFaultAbortResponsePtrOutput() HttpFaultAbortResponsePtrOutput {
	return o.ToHttpFaultAbortResponsePtrOutputWithContext(context.Background())
}

func (o HttpFaultAbortResponseOutput) ToHttpFaultAbortResponsePtrOutputWithContext(ctx context.Context) HttpFaultAbortResponsePtrOutput {
	return o.ApplyT(func(v HttpFaultAbortResponse) *HttpFaultAbortResponse {
		return &v
	}).(HttpFaultAbortResponsePtrOutput)
}

// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive. For gRPC protocol, the gRPC status code is mapped to HTTP status code according to this mapping table. HTTP status 200 is mapped to gRPC status UNKNOWN. Injecting an OK status is currently not supported by Traffic Director.
func (o HttpFaultAbortResponseOutput) HttpStatus() pulumi.IntOutput {
	return o.ApplyT(func(v HttpFaultAbortResponse) int { return v.HttpStatus }).(pulumi.IntOutput)
}

// The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
func (o HttpFaultAbortResponseOutput) Percentage() pulumi.Float64Output {
	return o.ApplyT(func(v HttpFaultAbortResponse) float64 { return v.Percentage }).(pulumi.Float64Output)
}

type HttpFaultAbortResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpFaultAbortResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpFaultAbortResponse)(nil)).Elem()
}

func (o HttpFaultAbortResponsePtrOutput) ToHttpFaultAbortResponsePtrOutput() HttpFaultAbortResponsePtrOutput {
	return o
}

func (o HttpFaultAbortResponsePtrOutput) ToHttpFaultAbortResponsePtrOutputWithContext(ctx context.Context) HttpFaultAbortResponsePtrOutput {
	return o
}

func (o HttpFaultAbortResponsePtrOutput) Elem() HttpFaultAbortResponseOutput {
	return o.ApplyT(func(v *HttpFaultAbortResponse) HttpFaultAbortResponse { return *v }).(HttpFaultAbortResponseOutput)
}

// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive. For gRPC protocol, the gRPC status code is mapped to HTTP status code according to this mapping table. HTTP status 200 is mapped to gRPC status UNKNOWN. Injecting an OK status is currently not supported by Traffic Director.
func (o HttpFaultAbortResponsePtrOutput) HttpStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpFaultAbortResponse) *int {
		if v == nil {
			return nil
		}
		return &v.HttpStatus
	}).(pulumi.IntPtrOutput)
}

// The percentage of traffic (connections/operations/requests) which will be aborted as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
func (o HttpFaultAbortResponsePtrOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HttpFaultAbortResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Percentage
	}).(pulumi.Float64PtrOutput)
}

// Specifies the delay introduced by Loadbalancer before forwarding the request to the backend service as part of fault injection.
type HttpFaultDelay struct {
	// Specifies the value of the fixed delay interval.
	FixedDelay *Duration `pulumi:"fixedDelay"`
	// The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
	Percentage *float64 `pulumi:"percentage"`
}

// HttpFaultDelayInput is an input type that accepts HttpFaultDelayArgs and HttpFaultDelayOutput values.
// You can construct a concrete instance of `HttpFaultDelayInput` via:
//
//          HttpFaultDelayArgs{...}
type HttpFaultDelayInput interface {
	pulumi.Input

	ToHttpFaultDelayOutput() HttpFaultDelayOutput
	ToHttpFaultDelayOutputWithContext(context.Context) HttpFaultDelayOutput
}

// Specifies the delay introduced by Loadbalancer before forwarding the request to the backend service as part of fault injection.
type HttpFaultDelayArgs struct {
	// Specifies the value of the fixed delay interval.
	FixedDelay DurationPtrInput `pulumi:"fixedDelay"`
	// The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
	Percentage pulumi.Float64PtrInput `pulumi:"percentage"`
}

func (HttpFaultDelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpFaultDelay)(nil)).Elem()
}

func (i HttpFaultDelayArgs) ToHttpFaultDelayOutput() HttpFaultDelayOutput {
	return i.ToHttpFaultDelayOutputWithContext(context.Background())
}

func (i HttpFaultDelayArgs) ToHttpFaultDelayOutputWithContext(ctx context.Context) HttpFaultDelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultDelayOutput)
}

func (i HttpFaultDelayArgs) ToHttpFaultDelayPtrOutput() HttpFaultDelayPtrOutput {
	return i.ToHttpFaultDelayPtrOutputWithContext(context.Background())
}

func (i HttpFaultDelayArgs) ToHttpFaultDelayPtrOutputWithContext(ctx context.Context) HttpFaultDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultDelayOutput).ToHttpFaultDelayPtrOutputWithContext(ctx)
}

// HttpFaultDelayPtrInput is an input type that accepts HttpFaultDelayArgs, HttpFaultDelayPtr and HttpFaultDelayPtrOutput values.
// You can construct a concrete instance of `HttpFaultDelayPtrInput` via:
//
//          HttpFaultDelayArgs{...}
//
//  or:
//
//          nil
type HttpFaultDelayPtrInput interface {
	pulumi.Input

	ToHttpFaultDelayPtrOutput() HttpFaultDelayPtrOutput
	ToHttpFaultDelayPtrOutputWithContext(context.Context) HttpFaultDelayPtrOutput
}

type httpFaultDelayPtrType HttpFaultDelayArgs

func HttpFaultDelayPtr(v *HttpFaultDelayArgs) HttpFaultDelayPtrInput {
	return (*httpFaultDelayPtrType)(v)
}

func (*httpFaultDelayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpFaultDelay)(nil)).Elem()
}

func (i *httpFaultDelayPtrType) ToHttpFaultDelayPtrOutput() HttpFaultDelayPtrOutput {
	return i.ToHttpFaultDelayPtrOutputWithContext(context.Background())
}

func (i *httpFaultDelayPtrType) ToHttpFaultDelayPtrOutputWithContext(ctx context.Context) HttpFaultDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultDelayPtrOutput)
}

// Specifies the delay introduced by Loadbalancer before forwarding the request to the backend service as part of fault injection.
type HttpFaultDelayOutput struct{ *pulumi.OutputState }

func (HttpFaultDelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpFaultDelay)(nil)).Elem()
}

func (o HttpFaultDelayOutput) ToHttpFaultDelayOutput() HttpFaultDelayOutput {
	return o
}

func (o HttpFaultDelayOutput) ToHttpFaultDelayOutputWithContext(ctx context.Context) HttpFaultDelayOutput {
	return o
}

func (o HttpFaultDelayOutput) ToHttpFaultDelayPtrOutput() HttpFaultDelayPtrOutput {
	return o.ToHttpFaultDelayPtrOutputWithContext(context.Background())
}

func (o HttpFaultDelayOutput) ToHttpFaultDelayPtrOutputWithContext(ctx context.Context) HttpFaultDelayPtrOutput {
	return o.ApplyT(func(v HttpFaultDelay) *HttpFaultDelay {
		return &v
	}).(HttpFaultDelayPtrOutput)
}

// Specifies the value of the fixed delay interval.
func (o HttpFaultDelayOutput) FixedDelay() DurationPtrOutput {
	return o.ApplyT(func(v HttpFaultDelay) *Duration { return v.FixedDelay }).(DurationPtrOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
func (o HttpFaultDelayOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HttpFaultDelay) *float64 { return v.Percentage }).(pulumi.Float64PtrOutput)
}

type HttpFaultDelayPtrOutput struct{ *pulumi.OutputState }

func (HttpFaultDelayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpFaultDelay)(nil)).Elem()
}

func (o HttpFaultDelayPtrOutput) ToHttpFaultDelayPtrOutput() HttpFaultDelayPtrOutput {
	return o
}

func (o HttpFaultDelayPtrOutput) ToHttpFaultDelayPtrOutputWithContext(ctx context.Context) HttpFaultDelayPtrOutput {
	return o
}

func (o HttpFaultDelayPtrOutput) Elem() HttpFaultDelayOutput {
	return o.ApplyT(func(v *HttpFaultDelay) HttpFaultDelay { return *v }).(HttpFaultDelayOutput)
}

// Specifies the value of the fixed delay interval.
func (o HttpFaultDelayPtrOutput) FixedDelay() DurationPtrOutput {
	return o.ApplyT(func(v *HttpFaultDelay) *Duration {
		if v == nil {
			return nil
		}
		return v.FixedDelay
	}).(DurationPtrOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
func (o HttpFaultDelayPtrOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HttpFaultDelay) *float64 {
		if v == nil {
			return nil
		}
		return v.Percentage
	}).(pulumi.Float64PtrOutput)
}

// Specifies the delay introduced by Loadbalancer before forwarding the request to the backend service as part of fault injection.
type HttpFaultDelayResponse struct {
	// Specifies the value of the fixed delay interval.
	FixedDelay DurationResponse `pulumi:"fixedDelay"`
	// The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
	Percentage float64 `pulumi:"percentage"`
}

// HttpFaultDelayResponseInput is an input type that accepts HttpFaultDelayResponseArgs and HttpFaultDelayResponseOutput values.
// You can construct a concrete instance of `HttpFaultDelayResponseInput` via:
//
//          HttpFaultDelayResponseArgs{...}
type HttpFaultDelayResponseInput interface {
	pulumi.Input

	ToHttpFaultDelayResponseOutput() HttpFaultDelayResponseOutput
	ToHttpFaultDelayResponseOutputWithContext(context.Context) HttpFaultDelayResponseOutput
}

// Specifies the delay introduced by Loadbalancer before forwarding the request to the backend service as part of fault injection.
type HttpFaultDelayResponseArgs struct {
	// Specifies the value of the fixed delay interval.
	FixedDelay DurationResponseInput `pulumi:"fixedDelay"`
	// The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
	Percentage pulumi.Float64Input `pulumi:"percentage"`
}

func (HttpFaultDelayResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpFaultDelayResponse)(nil)).Elem()
}

func (i HttpFaultDelayResponseArgs) ToHttpFaultDelayResponseOutput() HttpFaultDelayResponseOutput {
	return i.ToHttpFaultDelayResponseOutputWithContext(context.Background())
}

func (i HttpFaultDelayResponseArgs) ToHttpFaultDelayResponseOutputWithContext(ctx context.Context) HttpFaultDelayResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultDelayResponseOutput)
}

func (i HttpFaultDelayResponseArgs) ToHttpFaultDelayResponsePtrOutput() HttpFaultDelayResponsePtrOutput {
	return i.ToHttpFaultDelayResponsePtrOutputWithContext(context.Background())
}

func (i HttpFaultDelayResponseArgs) ToHttpFaultDelayResponsePtrOutputWithContext(ctx context.Context) HttpFaultDelayResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultDelayResponseOutput).ToHttpFaultDelayResponsePtrOutputWithContext(ctx)
}

// HttpFaultDelayResponsePtrInput is an input type that accepts HttpFaultDelayResponseArgs, HttpFaultDelayResponsePtr and HttpFaultDelayResponsePtrOutput values.
// You can construct a concrete instance of `HttpFaultDelayResponsePtrInput` via:
//
//          HttpFaultDelayResponseArgs{...}
//
//  or:
//
//          nil
type HttpFaultDelayResponsePtrInput interface {
	pulumi.Input

	ToHttpFaultDelayResponsePtrOutput() HttpFaultDelayResponsePtrOutput
	ToHttpFaultDelayResponsePtrOutputWithContext(context.Context) HttpFaultDelayResponsePtrOutput
}

type httpFaultDelayResponsePtrType HttpFaultDelayResponseArgs

func HttpFaultDelayResponsePtr(v *HttpFaultDelayResponseArgs) HttpFaultDelayResponsePtrInput {
	return (*httpFaultDelayResponsePtrType)(v)
}

func (*httpFaultDelayResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpFaultDelayResponse)(nil)).Elem()
}

func (i *httpFaultDelayResponsePtrType) ToHttpFaultDelayResponsePtrOutput() HttpFaultDelayResponsePtrOutput {
	return i.ToHttpFaultDelayResponsePtrOutputWithContext(context.Background())
}

func (i *httpFaultDelayResponsePtrType) ToHttpFaultDelayResponsePtrOutputWithContext(ctx context.Context) HttpFaultDelayResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultDelayResponsePtrOutput)
}

// Specifies the delay introduced by Loadbalancer before forwarding the request to the backend service as part of fault injection.
type HttpFaultDelayResponseOutput struct{ *pulumi.OutputState }

func (HttpFaultDelayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpFaultDelayResponse)(nil)).Elem()
}

func (o HttpFaultDelayResponseOutput) ToHttpFaultDelayResponseOutput() HttpFaultDelayResponseOutput {
	return o
}

func (o HttpFaultDelayResponseOutput) ToHttpFaultDelayResponseOutputWithContext(ctx context.Context) HttpFaultDelayResponseOutput {
	return o
}

func (o HttpFaultDelayResponseOutput) ToHttpFaultDelayResponsePtrOutput() HttpFaultDelayResponsePtrOutput {
	return o.ToHttpFaultDelayResponsePtrOutputWithContext(context.Background())
}

func (o HttpFaultDelayResponseOutput) ToHttpFaultDelayResponsePtrOutputWithContext(ctx context.Context) HttpFaultDelayResponsePtrOutput {
	return o.ApplyT(func(v HttpFaultDelayResponse) *HttpFaultDelayResponse {
		return &v
	}).(HttpFaultDelayResponsePtrOutput)
}

// Specifies the value of the fixed delay interval.
func (o HttpFaultDelayResponseOutput) FixedDelay() DurationResponseOutput {
	return o.ApplyT(func(v HttpFaultDelayResponse) DurationResponse { return v.FixedDelay }).(DurationResponseOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
func (o HttpFaultDelayResponseOutput) Percentage() pulumi.Float64Output {
	return o.ApplyT(func(v HttpFaultDelayResponse) float64 { return v.Percentage }).(pulumi.Float64Output)
}

type HttpFaultDelayResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpFaultDelayResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpFaultDelayResponse)(nil)).Elem()
}

func (o HttpFaultDelayResponsePtrOutput) ToHttpFaultDelayResponsePtrOutput() HttpFaultDelayResponsePtrOutput {
	return o
}

func (o HttpFaultDelayResponsePtrOutput) ToHttpFaultDelayResponsePtrOutputWithContext(ctx context.Context) HttpFaultDelayResponsePtrOutput {
	return o
}

func (o HttpFaultDelayResponsePtrOutput) Elem() HttpFaultDelayResponseOutput {
	return o.ApplyT(func(v *HttpFaultDelayResponse) HttpFaultDelayResponse { return *v }).(HttpFaultDelayResponseOutput)
}

// Specifies the value of the fixed delay interval.
func (o HttpFaultDelayResponsePtrOutput) FixedDelay() DurationResponsePtrOutput {
	return o.ApplyT(func(v *HttpFaultDelayResponse) *DurationResponse {
		if v == nil {
			return nil
		}
		return &v.FixedDelay
	}).(DurationResponsePtrOutput)
}

// The percentage of traffic (connections/operations/requests) on which delay will be introduced as part of fault injection. The value must be between 0.0 and 100.0 inclusive.
func (o HttpFaultDelayResponsePtrOutput) Percentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HttpFaultDelayResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Percentage
	}).(pulumi.Float64PtrOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests.
type HttpFaultInjection struct {
	// The specification for how client requests are aborted as part of fault injection.
	Abort *HttpFaultAbort `pulumi:"abort"`
	// The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
	Delay *HttpFaultDelay `pulumi:"delay"`
}

// HttpFaultInjectionInput is an input type that accepts HttpFaultInjectionArgs and HttpFaultInjectionOutput values.
// You can construct a concrete instance of `HttpFaultInjectionInput` via:
//
//          HttpFaultInjectionArgs{...}
type HttpFaultInjectionInput interface {
	pulumi.Input

	ToHttpFaultInjectionOutput() HttpFaultInjectionOutput
	ToHttpFaultInjectionOutputWithContext(context.Context) HttpFaultInjectionOutput
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests.
type HttpFaultInjectionArgs struct {
	// The specification for how client requests are aborted as part of fault injection.
	Abort HttpFaultAbortPtrInput `pulumi:"abort"`
	// The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
	Delay HttpFaultDelayPtrInput `pulumi:"delay"`
}

func (HttpFaultInjectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpFaultInjection)(nil)).Elem()
}

func (i HttpFaultInjectionArgs) ToHttpFaultInjectionOutput() HttpFaultInjectionOutput {
	return i.ToHttpFaultInjectionOutputWithContext(context.Background())
}

func (i HttpFaultInjectionArgs) ToHttpFaultInjectionOutputWithContext(ctx context.Context) HttpFaultInjectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultInjectionOutput)
}

func (i HttpFaultInjectionArgs) ToHttpFaultInjectionPtrOutput() HttpFaultInjectionPtrOutput {
	return i.ToHttpFaultInjectionPtrOutputWithContext(context.Background())
}

func (i HttpFaultInjectionArgs) ToHttpFaultInjectionPtrOutputWithContext(ctx context.Context) HttpFaultInjectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultInjectionOutput).ToHttpFaultInjectionPtrOutputWithContext(ctx)
}

// HttpFaultInjectionPtrInput is an input type that accepts HttpFaultInjectionArgs, HttpFaultInjectionPtr and HttpFaultInjectionPtrOutput values.
// You can construct a concrete instance of `HttpFaultInjectionPtrInput` via:
//
//          HttpFaultInjectionArgs{...}
//
//  or:
//
//          nil
type HttpFaultInjectionPtrInput interface {
	pulumi.Input

	ToHttpFaultInjectionPtrOutput() HttpFaultInjectionPtrOutput
	ToHttpFaultInjectionPtrOutputWithContext(context.Context) HttpFaultInjectionPtrOutput
}

type httpFaultInjectionPtrType HttpFaultInjectionArgs

func HttpFaultInjectionPtr(v *HttpFaultInjectionArgs) HttpFaultInjectionPtrInput {
	return (*httpFaultInjectionPtrType)(v)
}

func (*httpFaultInjectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpFaultInjection)(nil)).Elem()
}

func (i *httpFaultInjectionPtrType) ToHttpFaultInjectionPtrOutput() HttpFaultInjectionPtrOutput {
	return i.ToHttpFaultInjectionPtrOutputWithContext(context.Background())
}

func (i *httpFaultInjectionPtrType) ToHttpFaultInjectionPtrOutputWithContext(ctx context.Context) HttpFaultInjectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultInjectionPtrOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests.
type HttpFaultInjectionOutput struct{ *pulumi.OutputState }

func (HttpFaultInjectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpFaultInjection)(nil)).Elem()
}

func (o HttpFaultInjectionOutput) ToHttpFaultInjectionOutput() HttpFaultInjectionOutput {
	return o
}

func (o HttpFaultInjectionOutput) ToHttpFaultInjectionOutputWithContext(ctx context.Context) HttpFaultInjectionOutput {
	return o
}

func (o HttpFaultInjectionOutput) ToHttpFaultInjectionPtrOutput() HttpFaultInjectionPtrOutput {
	return o.ToHttpFaultInjectionPtrOutputWithContext(context.Background())
}

func (o HttpFaultInjectionOutput) ToHttpFaultInjectionPtrOutputWithContext(ctx context.Context) HttpFaultInjectionPtrOutput {
	return o.ApplyT(func(v HttpFaultInjection) *HttpFaultInjection {
		return &v
	}).(HttpFaultInjectionPtrOutput)
}

// The specification for how client requests are aborted as part of fault injection.
func (o HttpFaultInjectionOutput) Abort() HttpFaultAbortPtrOutput {
	return o.ApplyT(func(v HttpFaultInjection) *HttpFaultAbort { return v.Abort }).(HttpFaultAbortPtrOutput)
}

// The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
func (o HttpFaultInjectionOutput) Delay() HttpFaultDelayPtrOutput {
	return o.ApplyT(func(v HttpFaultInjection) *HttpFaultDelay { return v.Delay }).(HttpFaultDelayPtrOutput)
}

type HttpFaultInjectionPtrOutput struct{ *pulumi.OutputState }

func (HttpFaultInjectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpFaultInjection)(nil)).Elem()
}

func (o HttpFaultInjectionPtrOutput) ToHttpFaultInjectionPtrOutput() HttpFaultInjectionPtrOutput {
	return o
}

func (o HttpFaultInjectionPtrOutput) ToHttpFaultInjectionPtrOutputWithContext(ctx context.Context) HttpFaultInjectionPtrOutput {
	return o
}

func (o HttpFaultInjectionPtrOutput) Elem() HttpFaultInjectionOutput {
	return o.ApplyT(func(v *HttpFaultInjection) HttpFaultInjection { return *v }).(HttpFaultInjectionOutput)
}

// The specification for how client requests are aborted as part of fault injection.
func (o HttpFaultInjectionPtrOutput) Abort() HttpFaultAbortPtrOutput {
	return o.ApplyT(func(v *HttpFaultInjection) *HttpFaultAbort {
		if v == nil {
			return nil
		}
		return v.Abort
	}).(HttpFaultAbortPtrOutput)
}

// The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
func (o HttpFaultInjectionPtrOutput) Delay() HttpFaultDelayPtrOutput {
	return o.ApplyT(func(v *HttpFaultInjection) *HttpFaultDelay {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(HttpFaultDelayPtrOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests.
type HttpFaultInjectionResponse struct {
	// The specification for how client requests are aborted as part of fault injection.
	Abort HttpFaultAbortResponse `pulumi:"abort"`
	// The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
	Delay HttpFaultDelayResponse `pulumi:"delay"`
}

// HttpFaultInjectionResponseInput is an input type that accepts HttpFaultInjectionResponseArgs and HttpFaultInjectionResponseOutput values.
// You can construct a concrete instance of `HttpFaultInjectionResponseInput` via:
//
//          HttpFaultInjectionResponseArgs{...}
type HttpFaultInjectionResponseInput interface {
	pulumi.Input

	ToHttpFaultInjectionResponseOutput() HttpFaultInjectionResponseOutput
	ToHttpFaultInjectionResponseOutputWithContext(context.Context) HttpFaultInjectionResponseOutput
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests.
type HttpFaultInjectionResponseArgs struct {
	// The specification for how client requests are aborted as part of fault injection.
	Abort HttpFaultAbortResponseInput `pulumi:"abort"`
	// The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
	Delay HttpFaultDelayResponseInput `pulumi:"delay"`
}

func (HttpFaultInjectionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpFaultInjectionResponse)(nil)).Elem()
}

func (i HttpFaultInjectionResponseArgs) ToHttpFaultInjectionResponseOutput() HttpFaultInjectionResponseOutput {
	return i.ToHttpFaultInjectionResponseOutputWithContext(context.Background())
}

func (i HttpFaultInjectionResponseArgs) ToHttpFaultInjectionResponseOutputWithContext(ctx context.Context) HttpFaultInjectionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultInjectionResponseOutput)
}

func (i HttpFaultInjectionResponseArgs) ToHttpFaultInjectionResponsePtrOutput() HttpFaultInjectionResponsePtrOutput {
	return i.ToHttpFaultInjectionResponsePtrOutputWithContext(context.Background())
}

func (i HttpFaultInjectionResponseArgs) ToHttpFaultInjectionResponsePtrOutputWithContext(ctx context.Context) HttpFaultInjectionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultInjectionResponseOutput).ToHttpFaultInjectionResponsePtrOutputWithContext(ctx)
}

// HttpFaultInjectionResponsePtrInput is an input type that accepts HttpFaultInjectionResponseArgs, HttpFaultInjectionResponsePtr and HttpFaultInjectionResponsePtrOutput values.
// You can construct a concrete instance of `HttpFaultInjectionResponsePtrInput` via:
//
//          HttpFaultInjectionResponseArgs{...}
//
//  or:
//
//          nil
type HttpFaultInjectionResponsePtrInput interface {
	pulumi.Input

	ToHttpFaultInjectionResponsePtrOutput() HttpFaultInjectionResponsePtrOutput
	ToHttpFaultInjectionResponsePtrOutputWithContext(context.Context) HttpFaultInjectionResponsePtrOutput
}

type httpFaultInjectionResponsePtrType HttpFaultInjectionResponseArgs

func HttpFaultInjectionResponsePtr(v *HttpFaultInjectionResponseArgs) HttpFaultInjectionResponsePtrInput {
	return (*httpFaultInjectionResponsePtrType)(v)
}

func (*httpFaultInjectionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpFaultInjectionResponse)(nil)).Elem()
}

func (i *httpFaultInjectionResponsePtrType) ToHttpFaultInjectionResponsePtrOutput() HttpFaultInjectionResponsePtrOutput {
	return i.ToHttpFaultInjectionResponsePtrOutputWithContext(context.Background())
}

func (i *httpFaultInjectionResponsePtrType) ToHttpFaultInjectionResponsePtrOutputWithContext(ctx context.Context) HttpFaultInjectionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFaultInjectionResponsePtrOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests.
type HttpFaultInjectionResponseOutput struct{ *pulumi.OutputState }

func (HttpFaultInjectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpFaultInjectionResponse)(nil)).Elem()
}

func (o HttpFaultInjectionResponseOutput) ToHttpFaultInjectionResponseOutput() HttpFaultInjectionResponseOutput {
	return o
}

func (o HttpFaultInjectionResponseOutput) ToHttpFaultInjectionResponseOutputWithContext(ctx context.Context) HttpFaultInjectionResponseOutput {
	return o
}

func (o HttpFaultInjectionResponseOutput) ToHttpFaultInjectionResponsePtrOutput() HttpFaultInjectionResponsePtrOutput {
	return o.ToHttpFaultInjectionResponsePtrOutputWithContext(context.Background())
}

func (o HttpFaultInjectionResponseOutput) ToHttpFaultInjectionResponsePtrOutputWithContext(ctx context.Context) HttpFaultInjectionResponsePtrOutput {
	return o.ApplyT(func(v HttpFaultInjectionResponse) *HttpFaultInjectionResponse {
		return &v
	}).(HttpFaultInjectionResponsePtrOutput)
}

// The specification for how client requests are aborted as part of fault injection.
func (o HttpFaultInjectionResponseOutput) Abort() HttpFaultAbortResponseOutput {
	return o.ApplyT(func(v HttpFaultInjectionResponse) HttpFaultAbortResponse { return v.Abort }).(HttpFaultAbortResponseOutput)
}

// The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
func (o HttpFaultInjectionResponseOutput) Delay() HttpFaultDelayResponseOutput {
	return o.ApplyT(func(v HttpFaultInjectionResponse) HttpFaultDelayResponse { return v.Delay }).(HttpFaultDelayResponseOutput)
}

type HttpFaultInjectionResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpFaultInjectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpFaultInjectionResponse)(nil)).Elem()
}

func (o HttpFaultInjectionResponsePtrOutput) ToHttpFaultInjectionResponsePtrOutput() HttpFaultInjectionResponsePtrOutput {
	return o
}

func (o HttpFaultInjectionResponsePtrOutput) ToHttpFaultInjectionResponsePtrOutputWithContext(ctx context.Context) HttpFaultInjectionResponsePtrOutput {
	return o
}

func (o HttpFaultInjectionResponsePtrOutput) Elem() HttpFaultInjectionResponseOutput {
	return o.ApplyT(func(v *HttpFaultInjectionResponse) HttpFaultInjectionResponse { return *v }).(HttpFaultInjectionResponseOutput)
}

// The specification for how client requests are aborted as part of fault injection.
func (o HttpFaultInjectionResponsePtrOutput) Abort() HttpFaultAbortResponsePtrOutput {
	return o.ApplyT(func(v *HttpFaultInjectionResponse) *HttpFaultAbortResponse {
		if v == nil {
			return nil
		}
		return &v.Abort
	}).(HttpFaultAbortResponsePtrOutput)
}

// The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
func (o HttpFaultInjectionResponsePtrOutput) Delay() HttpFaultDelayResponsePtrOutput {
	return o.ApplyT(func(v *HttpFaultInjectionResponse) *HttpFaultDelayResponse {
		if v == nil {
			return nil
		}
		return &v.Delay
	}).(HttpFaultDelayResponsePtrOutput)
}

// The request and response header transformations that take effect before the request is passed along to the selected backendService.
type HttpHeaderAction struct {
	// Headers to add to a matching request prior to forwarding the request to the backendService.
	RequestHeadersToAdd []HttpHeaderOption `pulumi:"requestHeadersToAdd"`
	// A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.
	RequestHeadersToRemove []string `pulumi:"requestHeadersToRemove"`
	// Headers to add the response prior to sending the response back to the client.
	ResponseHeadersToAdd []HttpHeaderOption `pulumi:"responseHeadersToAdd"`
	// A list of header names for headers that need to be removed from the response prior to sending the response back to the client.
	ResponseHeadersToRemove []string `pulumi:"responseHeadersToRemove"`
}

// HttpHeaderActionInput is an input type that accepts HttpHeaderActionArgs and HttpHeaderActionOutput values.
// You can construct a concrete instance of `HttpHeaderActionInput` via:
//
//          HttpHeaderActionArgs{...}
type HttpHeaderActionInput interface {
	pulumi.Input

	ToHttpHeaderActionOutput() HttpHeaderActionOutput
	ToHttpHeaderActionOutputWithContext(context.Context) HttpHeaderActionOutput
}

// The request and response header transformations that take effect before the request is passed along to the selected backendService.
type HttpHeaderActionArgs struct {
	// Headers to add to a matching request prior to forwarding the request to the backendService.
	RequestHeadersToAdd HttpHeaderOptionArrayInput `pulumi:"requestHeadersToAdd"`
	// A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.
	RequestHeadersToRemove pulumi.StringArrayInput `pulumi:"requestHeadersToRemove"`
	// Headers to add the response prior to sending the response back to the client.
	ResponseHeadersToAdd HttpHeaderOptionArrayInput `pulumi:"responseHeadersToAdd"`
	// A list of header names for headers that need to be removed from the response prior to sending the response back to the client.
	ResponseHeadersToRemove pulumi.StringArrayInput `pulumi:"responseHeadersToRemove"`
}

func (HttpHeaderActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeaderAction)(nil)).Elem()
}

func (i HttpHeaderActionArgs) ToHttpHeaderActionOutput() HttpHeaderActionOutput {
	return i.ToHttpHeaderActionOutputWithContext(context.Background())
}

func (i HttpHeaderActionArgs) ToHttpHeaderActionOutputWithContext(ctx context.Context) HttpHeaderActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderActionOutput)
}

func (i HttpHeaderActionArgs) ToHttpHeaderActionPtrOutput() HttpHeaderActionPtrOutput {
	return i.ToHttpHeaderActionPtrOutputWithContext(context.Background())
}

func (i HttpHeaderActionArgs) ToHttpHeaderActionPtrOutputWithContext(ctx context.Context) HttpHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderActionOutput).ToHttpHeaderActionPtrOutputWithContext(ctx)
}

// HttpHeaderActionPtrInput is an input type that accepts HttpHeaderActionArgs, HttpHeaderActionPtr and HttpHeaderActionPtrOutput values.
// You can construct a concrete instance of `HttpHeaderActionPtrInput` via:
//
//          HttpHeaderActionArgs{...}
//
//  or:
//
//          nil
type HttpHeaderActionPtrInput interface {
	pulumi.Input

	ToHttpHeaderActionPtrOutput() HttpHeaderActionPtrOutput
	ToHttpHeaderActionPtrOutputWithContext(context.Context) HttpHeaderActionPtrOutput
}

type httpHeaderActionPtrType HttpHeaderActionArgs

func HttpHeaderActionPtr(v *HttpHeaderActionArgs) HttpHeaderActionPtrInput {
	return (*httpHeaderActionPtrType)(v)
}

func (*httpHeaderActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpHeaderAction)(nil)).Elem()
}

func (i *httpHeaderActionPtrType) ToHttpHeaderActionPtrOutput() HttpHeaderActionPtrOutput {
	return i.ToHttpHeaderActionPtrOutputWithContext(context.Background())
}

func (i *httpHeaderActionPtrType) ToHttpHeaderActionPtrOutputWithContext(ctx context.Context) HttpHeaderActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderActionPtrOutput)
}

// The request and response header transformations that take effect before the request is passed along to the selected backendService.
type HttpHeaderActionOutput struct{ *pulumi.OutputState }

func (HttpHeaderActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeaderAction)(nil)).Elem()
}

func (o HttpHeaderActionOutput) ToHttpHeaderActionOutput() HttpHeaderActionOutput {
	return o
}

func (o HttpHeaderActionOutput) ToHttpHeaderActionOutputWithContext(ctx context.Context) HttpHeaderActionOutput {
	return o
}

func (o HttpHeaderActionOutput) ToHttpHeaderActionPtrOutput() HttpHeaderActionPtrOutput {
	return o.ToHttpHeaderActionPtrOutputWithContext(context.Background())
}

func (o HttpHeaderActionOutput) ToHttpHeaderActionPtrOutputWithContext(ctx context.Context) HttpHeaderActionPtrOutput {
	return o.ApplyT(func(v HttpHeaderAction) *HttpHeaderAction {
		return &v
	}).(HttpHeaderActionPtrOutput)
}

// Headers to add to a matching request prior to forwarding the request to the backendService.
func (o HttpHeaderActionOutput) RequestHeadersToAdd() HttpHeaderOptionArrayOutput {
	return o.ApplyT(func(v HttpHeaderAction) []HttpHeaderOption { return v.RequestHeadersToAdd }).(HttpHeaderOptionArrayOutput)
}

// A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.
func (o HttpHeaderActionOutput) RequestHeadersToRemove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpHeaderAction) []string { return v.RequestHeadersToRemove }).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.
func (o HttpHeaderActionOutput) ResponseHeadersToAdd() HttpHeaderOptionArrayOutput {
	return o.ApplyT(func(v HttpHeaderAction) []HttpHeaderOption { return v.ResponseHeadersToAdd }).(HttpHeaderOptionArrayOutput)
}

// A list of header names for headers that need to be removed from the response prior to sending the response back to the client.
func (o HttpHeaderActionOutput) ResponseHeadersToRemove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpHeaderAction) []string { return v.ResponseHeadersToRemove }).(pulumi.StringArrayOutput)
}

type HttpHeaderActionPtrOutput struct{ *pulumi.OutputState }

func (HttpHeaderActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpHeaderAction)(nil)).Elem()
}

func (o HttpHeaderActionPtrOutput) ToHttpHeaderActionPtrOutput() HttpHeaderActionPtrOutput {
	return o
}

func (o HttpHeaderActionPtrOutput) ToHttpHeaderActionPtrOutputWithContext(ctx context.Context) HttpHeaderActionPtrOutput {
	return o
}

func (o HttpHeaderActionPtrOutput) Elem() HttpHeaderActionOutput {
	return o.ApplyT(func(v *HttpHeaderAction) HttpHeaderAction { return *v }).(HttpHeaderActionOutput)
}

// Headers to add to a matching request prior to forwarding the request to the backendService.
func (o HttpHeaderActionPtrOutput) RequestHeadersToAdd() HttpHeaderOptionArrayOutput {
	return o.ApplyT(func(v *HttpHeaderAction) []HttpHeaderOption {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToAdd
	}).(HttpHeaderOptionArrayOutput)
}

// A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.
func (o HttpHeaderActionPtrOutput) RequestHeadersToRemove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToRemove
	}).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.
func (o HttpHeaderActionPtrOutput) ResponseHeadersToAdd() HttpHeaderOptionArrayOutput {
	return o.ApplyT(func(v *HttpHeaderAction) []HttpHeaderOption {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToAdd
	}).(HttpHeaderOptionArrayOutput)
}

// A list of header names for headers that need to be removed from the response prior to sending the response back to the client.
func (o HttpHeaderActionPtrOutput) ResponseHeadersToRemove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpHeaderAction) []string {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToRemove
	}).(pulumi.StringArrayOutput)
}

// The request and response header transformations that take effect before the request is passed along to the selected backendService.
type HttpHeaderActionResponse struct {
	// Headers to add to a matching request prior to forwarding the request to the backendService.
	RequestHeadersToAdd []HttpHeaderOptionResponse `pulumi:"requestHeadersToAdd"`
	// A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.
	RequestHeadersToRemove []string `pulumi:"requestHeadersToRemove"`
	// Headers to add the response prior to sending the response back to the client.
	ResponseHeadersToAdd []HttpHeaderOptionResponse `pulumi:"responseHeadersToAdd"`
	// A list of header names for headers that need to be removed from the response prior to sending the response back to the client.
	ResponseHeadersToRemove []string `pulumi:"responseHeadersToRemove"`
}

// HttpHeaderActionResponseInput is an input type that accepts HttpHeaderActionResponseArgs and HttpHeaderActionResponseOutput values.
// You can construct a concrete instance of `HttpHeaderActionResponseInput` via:
//
//          HttpHeaderActionResponseArgs{...}
type HttpHeaderActionResponseInput interface {
	pulumi.Input

	ToHttpHeaderActionResponseOutput() HttpHeaderActionResponseOutput
	ToHttpHeaderActionResponseOutputWithContext(context.Context) HttpHeaderActionResponseOutput
}

// The request and response header transformations that take effect before the request is passed along to the selected backendService.
type HttpHeaderActionResponseArgs struct {
	// Headers to add to a matching request prior to forwarding the request to the backendService.
	RequestHeadersToAdd HttpHeaderOptionResponseArrayInput `pulumi:"requestHeadersToAdd"`
	// A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.
	RequestHeadersToRemove pulumi.StringArrayInput `pulumi:"requestHeadersToRemove"`
	// Headers to add the response prior to sending the response back to the client.
	ResponseHeadersToAdd HttpHeaderOptionResponseArrayInput `pulumi:"responseHeadersToAdd"`
	// A list of header names for headers that need to be removed from the response prior to sending the response back to the client.
	ResponseHeadersToRemove pulumi.StringArrayInput `pulumi:"responseHeadersToRemove"`
}

func (HttpHeaderActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeaderActionResponse)(nil)).Elem()
}

func (i HttpHeaderActionResponseArgs) ToHttpHeaderActionResponseOutput() HttpHeaderActionResponseOutput {
	return i.ToHttpHeaderActionResponseOutputWithContext(context.Background())
}

func (i HttpHeaderActionResponseArgs) ToHttpHeaderActionResponseOutputWithContext(ctx context.Context) HttpHeaderActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderActionResponseOutput)
}

func (i HttpHeaderActionResponseArgs) ToHttpHeaderActionResponsePtrOutput() HttpHeaderActionResponsePtrOutput {
	return i.ToHttpHeaderActionResponsePtrOutputWithContext(context.Background())
}

func (i HttpHeaderActionResponseArgs) ToHttpHeaderActionResponsePtrOutputWithContext(ctx context.Context) HttpHeaderActionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderActionResponseOutput).ToHttpHeaderActionResponsePtrOutputWithContext(ctx)
}

// HttpHeaderActionResponsePtrInput is an input type that accepts HttpHeaderActionResponseArgs, HttpHeaderActionResponsePtr and HttpHeaderActionResponsePtrOutput values.
// You can construct a concrete instance of `HttpHeaderActionResponsePtrInput` via:
//
//          HttpHeaderActionResponseArgs{...}
//
//  or:
//
//          nil
type HttpHeaderActionResponsePtrInput interface {
	pulumi.Input

	ToHttpHeaderActionResponsePtrOutput() HttpHeaderActionResponsePtrOutput
	ToHttpHeaderActionResponsePtrOutputWithContext(context.Context) HttpHeaderActionResponsePtrOutput
}

type httpHeaderActionResponsePtrType HttpHeaderActionResponseArgs

func HttpHeaderActionResponsePtr(v *HttpHeaderActionResponseArgs) HttpHeaderActionResponsePtrInput {
	return (*httpHeaderActionResponsePtrType)(v)
}

func (*httpHeaderActionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpHeaderActionResponse)(nil)).Elem()
}

func (i *httpHeaderActionResponsePtrType) ToHttpHeaderActionResponsePtrOutput() HttpHeaderActionResponsePtrOutput {
	return i.ToHttpHeaderActionResponsePtrOutputWithContext(context.Background())
}

func (i *httpHeaderActionResponsePtrType) ToHttpHeaderActionResponsePtrOutputWithContext(ctx context.Context) HttpHeaderActionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderActionResponsePtrOutput)
}

// The request and response header transformations that take effect before the request is passed along to the selected backendService.
type HttpHeaderActionResponseOutput struct{ *pulumi.OutputState }

func (HttpHeaderActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeaderActionResponse)(nil)).Elem()
}

func (o HttpHeaderActionResponseOutput) ToHttpHeaderActionResponseOutput() HttpHeaderActionResponseOutput {
	return o
}

func (o HttpHeaderActionResponseOutput) ToHttpHeaderActionResponseOutputWithContext(ctx context.Context) HttpHeaderActionResponseOutput {
	return o
}

func (o HttpHeaderActionResponseOutput) ToHttpHeaderActionResponsePtrOutput() HttpHeaderActionResponsePtrOutput {
	return o.ToHttpHeaderActionResponsePtrOutputWithContext(context.Background())
}

func (o HttpHeaderActionResponseOutput) ToHttpHeaderActionResponsePtrOutputWithContext(ctx context.Context) HttpHeaderActionResponsePtrOutput {
	return o.ApplyT(func(v HttpHeaderActionResponse) *HttpHeaderActionResponse {
		return &v
	}).(HttpHeaderActionResponsePtrOutput)
}

// Headers to add to a matching request prior to forwarding the request to the backendService.
func (o HttpHeaderActionResponseOutput) RequestHeadersToAdd() HttpHeaderOptionResponseArrayOutput {
	return o.ApplyT(func(v HttpHeaderActionResponse) []HttpHeaderOptionResponse { return v.RequestHeadersToAdd }).(HttpHeaderOptionResponseArrayOutput)
}

// A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.
func (o HttpHeaderActionResponseOutput) RequestHeadersToRemove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpHeaderActionResponse) []string { return v.RequestHeadersToRemove }).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.
func (o HttpHeaderActionResponseOutput) ResponseHeadersToAdd() HttpHeaderOptionResponseArrayOutput {
	return o.ApplyT(func(v HttpHeaderActionResponse) []HttpHeaderOptionResponse { return v.ResponseHeadersToAdd }).(HttpHeaderOptionResponseArrayOutput)
}

// A list of header names for headers that need to be removed from the response prior to sending the response back to the client.
func (o HttpHeaderActionResponseOutput) ResponseHeadersToRemove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpHeaderActionResponse) []string { return v.ResponseHeadersToRemove }).(pulumi.StringArrayOutput)
}

type HttpHeaderActionResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpHeaderActionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpHeaderActionResponse)(nil)).Elem()
}

func (o HttpHeaderActionResponsePtrOutput) ToHttpHeaderActionResponsePtrOutput() HttpHeaderActionResponsePtrOutput {
	return o
}

func (o HttpHeaderActionResponsePtrOutput) ToHttpHeaderActionResponsePtrOutputWithContext(ctx context.Context) HttpHeaderActionResponsePtrOutput {
	return o
}

func (o HttpHeaderActionResponsePtrOutput) Elem() HttpHeaderActionResponseOutput {
	return o.ApplyT(func(v *HttpHeaderActionResponse) HttpHeaderActionResponse { return *v }).(HttpHeaderActionResponseOutput)
}

// Headers to add to a matching request prior to forwarding the request to the backendService.
func (o HttpHeaderActionResponsePtrOutput) RequestHeadersToAdd() HttpHeaderOptionResponseArrayOutput {
	return o.ApplyT(func(v *HttpHeaderActionResponse) []HttpHeaderOptionResponse {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToAdd
	}).(HttpHeaderOptionResponseArrayOutput)
}

// A list of header names for headers that need to be removed from the request prior to forwarding the request to the backendService.
func (o HttpHeaderActionResponsePtrOutput) RequestHeadersToRemove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpHeaderActionResponse) []string {
		if v == nil {
			return nil
		}
		return v.RequestHeadersToRemove
	}).(pulumi.StringArrayOutput)
}

// Headers to add the response prior to sending the response back to the client.
func (o HttpHeaderActionResponsePtrOutput) ResponseHeadersToAdd() HttpHeaderOptionResponseArrayOutput {
	return o.ApplyT(func(v *HttpHeaderActionResponse) []HttpHeaderOptionResponse {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToAdd
	}).(HttpHeaderOptionResponseArrayOutput)
}

// A list of header names for headers that need to be removed from the response prior to sending the response back to the client.
func (o HttpHeaderActionResponsePtrOutput) ResponseHeadersToRemove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpHeaderActionResponse) []string {
		if v == nil {
			return nil
		}
		return v.ResponseHeadersToRemove
	}).(pulumi.StringArrayOutput)
}

// matchRule criteria for request header matches.
type HttpHeaderMatch struct {
	// The value should exactly match contents of exactMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	ExactMatch *string `pulumi:"exactMatch"`
	// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method". When the URL map is bound to target gRPC proxy that has validateForProxyless field set to true, only non-binary user-specified custom metadata and the `content-type` header are supported. The following transport-level headers cannot be used in header matching rules: `:authority`, `:method`, `:path`, `:scheme`, `user-agent`, `accept-encoding`, `content-encoding`, `grpc-accept-encoding`, `grpc-encoding`, `grpc-previous-rpc-attempts`, `grpc-tags-bin`, `grpc-timeout` and `grpc-trace-bin.
	HeaderName *string `pulumi:"headerName"`
	// If set to false, the headerMatch is considered a match if the match criteria above are met. If set to true, the headerMatch is considered a match if the match criteria above are NOT met. The default setting is false.
	InvertMatch *bool `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	PrefixMatch *string `pulumi:"prefixMatch"`
	// A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	PresentMatch *bool `pulumi:"presentMatch"`
	// The header value must be an integer and its value must be in the range specified in rangeMatch. If the header does not contain an integer, number or is empty, the match fails. For example for a range [-5, 0] - -3 will match. - 0 will not match. - 0.25 will not match. - -3someString will not match. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Note that rangeMatch is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL.
	RangeMatch *Int64RangeMatch `pulumi:"rangeMatch"`
	// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: github.com/google/re2/wiki/Syntax For matching against a port specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header's port specifier. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Note that regexMatch only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	RegexMatch *string `pulumi:"regexMatch"`
	// The value of the header must end with the contents of suffixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	SuffixMatch *string `pulumi:"suffixMatch"`
}

// HttpHeaderMatchInput is an input type that accepts HttpHeaderMatchArgs and HttpHeaderMatchOutput values.
// You can construct a concrete instance of `HttpHeaderMatchInput` via:
//
//          HttpHeaderMatchArgs{...}
type HttpHeaderMatchInput interface {
	pulumi.Input

	ToHttpHeaderMatchOutput() HttpHeaderMatchOutput
	ToHttpHeaderMatchOutputWithContext(context.Context) HttpHeaderMatchOutput
}

// matchRule criteria for request header matches.
type HttpHeaderMatchArgs struct {
	// The value should exactly match contents of exactMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	ExactMatch pulumi.StringPtrInput `pulumi:"exactMatch"`
	// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method". When the URL map is bound to target gRPC proxy that has validateForProxyless field set to true, only non-binary user-specified custom metadata and the `content-type` header are supported. The following transport-level headers cannot be used in header matching rules: `:authority`, `:method`, `:path`, `:scheme`, `user-agent`, `accept-encoding`, `content-encoding`, `grpc-accept-encoding`, `grpc-encoding`, `grpc-previous-rpc-attempts`, `grpc-tags-bin`, `grpc-timeout` and `grpc-trace-bin.
	HeaderName pulumi.StringPtrInput `pulumi:"headerName"`
	// If set to false, the headerMatch is considered a match if the match criteria above are met. If set to true, the headerMatch is considered a match if the match criteria above are NOT met. The default setting is false.
	InvertMatch pulumi.BoolPtrInput `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	PrefixMatch pulumi.StringPtrInput `pulumi:"prefixMatch"`
	// A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	PresentMatch pulumi.BoolPtrInput `pulumi:"presentMatch"`
	// The header value must be an integer and its value must be in the range specified in rangeMatch. If the header does not contain an integer, number or is empty, the match fails. For example for a range [-5, 0] - -3 will match. - 0 will not match. - 0.25 will not match. - -3someString will not match. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Note that rangeMatch is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL.
	RangeMatch Int64RangeMatchPtrInput `pulumi:"rangeMatch"`
	// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: github.com/google/re2/wiki/Syntax For matching against a port specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header's port specifier. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Note that regexMatch only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	RegexMatch pulumi.StringPtrInput `pulumi:"regexMatch"`
	// The value of the header must end with the contents of suffixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	SuffixMatch pulumi.StringPtrInput `pulumi:"suffixMatch"`
}

func (HttpHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeaderMatch)(nil)).Elem()
}

func (i HttpHeaderMatchArgs) ToHttpHeaderMatchOutput() HttpHeaderMatchOutput {
	return i.ToHttpHeaderMatchOutputWithContext(context.Background())
}

func (i HttpHeaderMatchArgs) ToHttpHeaderMatchOutputWithContext(ctx context.Context) HttpHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderMatchOutput)
}

// HttpHeaderMatchArrayInput is an input type that accepts HttpHeaderMatchArray and HttpHeaderMatchArrayOutput values.
// You can construct a concrete instance of `HttpHeaderMatchArrayInput` via:
//
//          HttpHeaderMatchArray{ HttpHeaderMatchArgs{...} }
type HttpHeaderMatchArrayInput interface {
	pulumi.Input

	ToHttpHeaderMatchArrayOutput() HttpHeaderMatchArrayOutput
	ToHttpHeaderMatchArrayOutputWithContext(context.Context) HttpHeaderMatchArrayOutput
}

type HttpHeaderMatchArray []HttpHeaderMatchInput

func (HttpHeaderMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpHeaderMatch)(nil)).Elem()
}

func (i HttpHeaderMatchArray) ToHttpHeaderMatchArrayOutput() HttpHeaderMatchArrayOutput {
	return i.ToHttpHeaderMatchArrayOutputWithContext(context.Background())
}

func (i HttpHeaderMatchArray) ToHttpHeaderMatchArrayOutputWithContext(ctx context.Context) HttpHeaderMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderMatchArrayOutput)
}

// matchRule criteria for request header matches.
type HttpHeaderMatchOutput struct{ *pulumi.OutputState }

func (HttpHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeaderMatch)(nil)).Elem()
}

func (o HttpHeaderMatchOutput) ToHttpHeaderMatchOutput() HttpHeaderMatchOutput {
	return o
}

func (o HttpHeaderMatchOutput) ToHttpHeaderMatchOutputWithContext(ctx context.Context) HttpHeaderMatchOutput {
	return o
}

// The value should exactly match contents of exactMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
func (o HttpHeaderMatchOutput) ExactMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpHeaderMatch) *string { return v.ExactMatch }).(pulumi.StringPtrOutput)
}

// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method". When the URL map is bound to target gRPC proxy that has validateForProxyless field set to true, only non-binary user-specified custom metadata and the `content-type` header are supported. The following transport-level headers cannot be used in header matching rules: `:authority`, `:method`, `:path`, `:scheme`, `user-agent`, `accept-encoding`, `content-encoding`, `grpc-accept-encoding`, `grpc-encoding`, `grpc-previous-rpc-attempts`, `grpc-tags-bin`, `grpc-timeout` and `grpc-trace-bin.
func (o HttpHeaderMatchOutput) HeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpHeaderMatch) *string { return v.HeaderName }).(pulumi.StringPtrOutput)
}

// If set to false, the headerMatch is considered a match if the match criteria above are met. If set to true, the headerMatch is considered a match if the match criteria above are NOT met. The default setting is false.
func (o HttpHeaderMatchOutput) InvertMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpHeaderMatch) *bool { return v.InvertMatch }).(pulumi.BoolPtrOutput)
}

// The value of the header must start with the contents of prefixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
func (o HttpHeaderMatchOutput) PrefixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpHeaderMatch) *string { return v.PrefixMatch }).(pulumi.StringPtrOutput)
}

// A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
func (o HttpHeaderMatchOutput) PresentMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpHeaderMatch) *bool { return v.PresentMatch }).(pulumi.BoolPtrOutput)
}

// The header value must be an integer and its value must be in the range specified in rangeMatch. If the header does not contain an integer, number or is empty, the match fails. For example for a range [-5, 0] - -3 will match. - 0 will not match. - 0.25 will not match. - -3someString will not match. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Note that rangeMatch is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL.
func (o HttpHeaderMatchOutput) RangeMatch() Int64RangeMatchPtrOutput {
	return o.ApplyT(func(v HttpHeaderMatch) *Int64RangeMatch { return v.RangeMatch }).(Int64RangeMatchPtrOutput)
}

// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: github.com/google/re2/wiki/Syntax For matching against a port specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header's port specifier. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Note that regexMatch only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
func (o HttpHeaderMatchOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpHeaderMatch) *string { return v.RegexMatch }).(pulumi.StringPtrOutput)
}

// The value of the header must end with the contents of suffixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
func (o HttpHeaderMatchOutput) SuffixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpHeaderMatch) *string { return v.SuffixMatch }).(pulumi.StringPtrOutput)
}

type HttpHeaderMatchArrayOutput struct{ *pulumi.OutputState }

func (HttpHeaderMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpHeaderMatch)(nil)).Elem()
}

func (o HttpHeaderMatchArrayOutput) ToHttpHeaderMatchArrayOutput() HttpHeaderMatchArrayOutput {
	return o
}

func (o HttpHeaderMatchArrayOutput) ToHttpHeaderMatchArrayOutputWithContext(ctx context.Context) HttpHeaderMatchArrayOutput {
	return o
}

func (o HttpHeaderMatchArrayOutput) Index(i pulumi.IntInput) HttpHeaderMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpHeaderMatch {
		return vs[0].([]HttpHeaderMatch)[vs[1].(int)]
	}).(HttpHeaderMatchOutput)
}

// matchRule criteria for request header matches.
type HttpHeaderMatchResponse struct {
	// The value should exactly match contents of exactMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	ExactMatch string `pulumi:"exactMatch"`
	// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method". When the URL map is bound to target gRPC proxy that has validateForProxyless field set to true, only non-binary user-specified custom metadata and the `content-type` header are supported. The following transport-level headers cannot be used in header matching rules: `:authority`, `:method`, `:path`, `:scheme`, `user-agent`, `accept-encoding`, `content-encoding`, `grpc-accept-encoding`, `grpc-encoding`, `grpc-previous-rpc-attempts`, `grpc-tags-bin`, `grpc-timeout` and `grpc-trace-bin.
	HeaderName string `pulumi:"headerName"`
	// If set to false, the headerMatch is considered a match if the match criteria above are met. If set to true, the headerMatch is considered a match if the match criteria above are NOT met. The default setting is false.
	InvertMatch bool `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	PrefixMatch string `pulumi:"prefixMatch"`
	// A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	PresentMatch bool `pulumi:"presentMatch"`
	// The header value must be an integer and its value must be in the range specified in rangeMatch. If the header does not contain an integer, number or is empty, the match fails. For example for a range [-5, 0] - -3 will match. - 0 will not match. - 0.25 will not match. - -3someString will not match. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Note that rangeMatch is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL.
	RangeMatch Int64RangeMatchResponse `pulumi:"rangeMatch"`
	// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: github.com/google/re2/wiki/Syntax For matching against a port specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header's port specifier. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Note that regexMatch only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	RegexMatch string `pulumi:"regexMatch"`
	// The value of the header must end with the contents of suffixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	SuffixMatch string `pulumi:"suffixMatch"`
}

// HttpHeaderMatchResponseInput is an input type that accepts HttpHeaderMatchResponseArgs and HttpHeaderMatchResponseOutput values.
// You can construct a concrete instance of `HttpHeaderMatchResponseInput` via:
//
//          HttpHeaderMatchResponseArgs{...}
type HttpHeaderMatchResponseInput interface {
	pulumi.Input

	ToHttpHeaderMatchResponseOutput() HttpHeaderMatchResponseOutput
	ToHttpHeaderMatchResponseOutputWithContext(context.Context) HttpHeaderMatchResponseOutput
}

// matchRule criteria for request header matches.
type HttpHeaderMatchResponseArgs struct {
	// The value should exactly match contents of exactMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	ExactMatch pulumi.StringInput `pulumi:"exactMatch"`
	// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method". When the URL map is bound to target gRPC proxy that has validateForProxyless field set to true, only non-binary user-specified custom metadata and the `content-type` header are supported. The following transport-level headers cannot be used in header matching rules: `:authority`, `:method`, `:path`, `:scheme`, `user-agent`, `accept-encoding`, `content-encoding`, `grpc-accept-encoding`, `grpc-encoding`, `grpc-previous-rpc-attempts`, `grpc-tags-bin`, `grpc-timeout` and `grpc-trace-bin.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// If set to false, the headerMatch is considered a match if the match criteria above are met. If set to true, the headerMatch is considered a match if the match criteria above are NOT met. The default setting is false.
	InvertMatch pulumi.BoolInput `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	PrefixMatch pulumi.StringInput `pulumi:"prefixMatch"`
	// A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	PresentMatch pulumi.BoolInput `pulumi:"presentMatch"`
	// The header value must be an integer and its value must be in the range specified in rangeMatch. If the header does not contain an integer, number or is empty, the match fails. For example for a range [-5, 0] - -3 will match. - 0 will not match. - 0.25 will not match. - -3someString will not match. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Note that rangeMatch is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL.
	RangeMatch Int64RangeMatchResponseInput `pulumi:"rangeMatch"`
	// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: github.com/google/re2/wiki/Syntax For matching against a port specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header's port specifier. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Note that regexMatch only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	RegexMatch pulumi.StringInput `pulumi:"regexMatch"`
	// The value of the header must end with the contents of suffixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
	SuffixMatch pulumi.StringInput `pulumi:"suffixMatch"`
}

func (HttpHeaderMatchResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeaderMatchResponse)(nil)).Elem()
}

func (i HttpHeaderMatchResponseArgs) ToHttpHeaderMatchResponseOutput() HttpHeaderMatchResponseOutput {
	return i.ToHttpHeaderMatchResponseOutputWithContext(context.Background())
}

func (i HttpHeaderMatchResponseArgs) ToHttpHeaderMatchResponseOutputWithContext(ctx context.Context) HttpHeaderMatchResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderMatchResponseOutput)
}

// HttpHeaderMatchResponseArrayInput is an input type that accepts HttpHeaderMatchResponseArray and HttpHeaderMatchResponseArrayOutput values.
// You can construct a concrete instance of `HttpHeaderMatchResponseArrayInput` via:
//
//          HttpHeaderMatchResponseArray{ HttpHeaderMatchResponseArgs{...} }
type HttpHeaderMatchResponseArrayInput interface {
	pulumi.Input

	ToHttpHeaderMatchResponseArrayOutput() HttpHeaderMatchResponseArrayOutput
	ToHttpHeaderMatchResponseArrayOutputWithContext(context.Context) HttpHeaderMatchResponseArrayOutput
}

type HttpHeaderMatchResponseArray []HttpHeaderMatchResponseInput

func (HttpHeaderMatchResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpHeaderMatchResponse)(nil)).Elem()
}

func (i HttpHeaderMatchResponseArray) ToHttpHeaderMatchResponseArrayOutput() HttpHeaderMatchResponseArrayOutput {
	return i.ToHttpHeaderMatchResponseArrayOutputWithContext(context.Background())
}

func (i HttpHeaderMatchResponseArray) ToHttpHeaderMatchResponseArrayOutputWithContext(ctx context.Context) HttpHeaderMatchResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderMatchResponseArrayOutput)
}

// matchRule criteria for request header matches.
type HttpHeaderMatchResponseOutput struct{ *pulumi.OutputState }

func (HttpHeaderMatchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeaderMatchResponse)(nil)).Elem()
}

func (o HttpHeaderMatchResponseOutput) ToHttpHeaderMatchResponseOutput() HttpHeaderMatchResponseOutput {
	return o
}

func (o HttpHeaderMatchResponseOutput) ToHttpHeaderMatchResponseOutputWithContext(ctx context.Context) HttpHeaderMatchResponseOutput {
	return o
}

// The value should exactly match contents of exactMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
func (o HttpHeaderMatchResponseOutput) ExactMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpHeaderMatchResponse) string { return v.ExactMatch }).(pulumi.StringOutput)
}

// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method". When the URL map is bound to target gRPC proxy that has validateForProxyless field set to true, only non-binary user-specified custom metadata and the `content-type` header are supported. The following transport-level headers cannot be used in header matching rules: `:authority`, `:method`, `:path`, `:scheme`, `user-agent`, `accept-encoding`, `content-encoding`, `grpc-accept-encoding`, `grpc-encoding`, `grpc-previous-rpc-attempts`, `grpc-tags-bin`, `grpc-timeout` and `grpc-trace-bin.
func (o HttpHeaderMatchResponseOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v HttpHeaderMatchResponse) string { return v.HeaderName }).(pulumi.StringOutput)
}

// If set to false, the headerMatch is considered a match if the match criteria above are met. If set to true, the headerMatch is considered a match if the match criteria above are NOT met. The default setting is false.
func (o HttpHeaderMatchResponseOutput) InvertMatch() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpHeaderMatchResponse) bool { return v.InvertMatch }).(pulumi.BoolOutput)
}

// The value of the header must start with the contents of prefixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
func (o HttpHeaderMatchResponseOutput) PrefixMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpHeaderMatchResponse) string { return v.PrefixMatch }).(pulumi.StringOutput)
}

// A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
func (o HttpHeaderMatchResponseOutput) PresentMatch() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpHeaderMatchResponse) bool { return v.PresentMatch }).(pulumi.BoolOutput)
}

// The header value must be an integer and its value must be in the range specified in rangeMatch. If the header does not contain an integer, number or is empty, the match fails. For example for a range [-5, 0] - -3 will match. - 0 will not match. - 0.25 will not match. - -3someString will not match. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Note that rangeMatch is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL.
func (o HttpHeaderMatchResponseOutput) RangeMatch() Int64RangeMatchResponseOutput {
	return o.ApplyT(func(v HttpHeaderMatchResponse) Int64RangeMatchResponse { return v.RangeMatch }).(Int64RangeMatchResponseOutput)
}

// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: github.com/google/re2/wiki/Syntax For matching against a port specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header's port specifier. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Note that regexMatch only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
func (o HttpHeaderMatchResponseOutput) RegexMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpHeaderMatchResponse) string { return v.RegexMatch }).(pulumi.StringOutput)
}

// The value of the header must end with the contents of suffixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
func (o HttpHeaderMatchResponseOutput) SuffixMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpHeaderMatchResponse) string { return v.SuffixMatch }).(pulumi.StringOutput)
}

type HttpHeaderMatchResponseArrayOutput struct{ *pulumi.OutputState }

func (HttpHeaderMatchResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpHeaderMatchResponse)(nil)).Elem()
}

func (o HttpHeaderMatchResponseArrayOutput) ToHttpHeaderMatchResponseArrayOutput() HttpHeaderMatchResponseArrayOutput {
	return o
}

func (o HttpHeaderMatchResponseArrayOutput) ToHttpHeaderMatchResponseArrayOutputWithContext(ctx context.Context) HttpHeaderMatchResponseArrayOutput {
	return o
}

func (o HttpHeaderMatchResponseArrayOutput) Index(i pulumi.IntInput) HttpHeaderMatchResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpHeaderMatchResponse {
		return vs[0].([]HttpHeaderMatchResponse)[vs[1].(int)]
	}).(HttpHeaderMatchResponseOutput)
}

// Specification determining how headers are added to requests or responses.
type HttpHeaderOption struct {
	// The name of the header.
	HeaderName *string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue *string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header. The default value is false.
	Replace *bool `pulumi:"replace"`
}

// HttpHeaderOptionInput is an input type that accepts HttpHeaderOptionArgs and HttpHeaderOptionOutput values.
// You can construct a concrete instance of `HttpHeaderOptionInput` via:
//
//          HttpHeaderOptionArgs{...}
type HttpHeaderOptionInput interface {
	pulumi.Input

	ToHttpHeaderOptionOutput() HttpHeaderOptionOutput
	ToHttpHeaderOptionOutputWithContext(context.Context) HttpHeaderOptionOutput
}

// Specification determining how headers are added to requests or responses.
type HttpHeaderOptionArgs struct {
	// The name of the header.
	HeaderName pulumi.StringPtrInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringPtrInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header. The default value is false.
	Replace pulumi.BoolPtrInput `pulumi:"replace"`
}

func (HttpHeaderOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeaderOption)(nil)).Elem()
}

func (i HttpHeaderOptionArgs) ToHttpHeaderOptionOutput() HttpHeaderOptionOutput {
	return i.ToHttpHeaderOptionOutputWithContext(context.Background())
}

func (i HttpHeaderOptionArgs) ToHttpHeaderOptionOutputWithContext(ctx context.Context) HttpHeaderOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderOptionOutput)
}

// HttpHeaderOptionArrayInput is an input type that accepts HttpHeaderOptionArray and HttpHeaderOptionArrayOutput values.
// You can construct a concrete instance of `HttpHeaderOptionArrayInput` via:
//
//          HttpHeaderOptionArray{ HttpHeaderOptionArgs{...} }
type HttpHeaderOptionArrayInput interface {
	pulumi.Input

	ToHttpHeaderOptionArrayOutput() HttpHeaderOptionArrayOutput
	ToHttpHeaderOptionArrayOutputWithContext(context.Context) HttpHeaderOptionArrayOutput
}

type HttpHeaderOptionArray []HttpHeaderOptionInput

func (HttpHeaderOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpHeaderOption)(nil)).Elem()
}

func (i HttpHeaderOptionArray) ToHttpHeaderOptionArrayOutput() HttpHeaderOptionArrayOutput {
	return i.ToHttpHeaderOptionArrayOutputWithContext(context.Background())
}

func (i HttpHeaderOptionArray) ToHttpHeaderOptionArrayOutputWithContext(ctx context.Context) HttpHeaderOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderOptionArrayOutput)
}

// Specification determining how headers are added to requests or responses.
type HttpHeaderOptionOutput struct{ *pulumi.OutputState }

func (HttpHeaderOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeaderOption)(nil)).Elem()
}

func (o HttpHeaderOptionOutput) ToHttpHeaderOptionOutput() HttpHeaderOptionOutput {
	return o
}

func (o HttpHeaderOptionOutput) ToHttpHeaderOptionOutputWithContext(ctx context.Context) HttpHeaderOptionOutput {
	return o
}

// The name of the header.
func (o HttpHeaderOptionOutput) HeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpHeaderOption) *string { return v.HeaderName }).(pulumi.StringPtrOutput)
}

// The value of the header to add.
func (o HttpHeaderOptionOutput) HeaderValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpHeaderOption) *string { return v.HeaderValue }).(pulumi.StringPtrOutput)
}

// If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header. The default value is false.
func (o HttpHeaderOptionOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpHeaderOption) *bool { return v.Replace }).(pulumi.BoolPtrOutput)
}

type HttpHeaderOptionArrayOutput struct{ *pulumi.OutputState }

func (HttpHeaderOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpHeaderOption)(nil)).Elem()
}

func (o HttpHeaderOptionArrayOutput) ToHttpHeaderOptionArrayOutput() HttpHeaderOptionArrayOutput {
	return o
}

func (o HttpHeaderOptionArrayOutput) ToHttpHeaderOptionArrayOutputWithContext(ctx context.Context) HttpHeaderOptionArrayOutput {
	return o
}

func (o HttpHeaderOptionArrayOutput) Index(i pulumi.IntInput) HttpHeaderOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpHeaderOption {
		return vs[0].([]HttpHeaderOption)[vs[1].(int)]
	}).(HttpHeaderOptionOutput)
}

// Specification determining how headers are added to requests or responses.
type HttpHeaderOptionResponse struct {
	// The name of the header.
	HeaderName string `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue string `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header. The default value is false.
	Replace bool `pulumi:"replace"`
}

// HttpHeaderOptionResponseInput is an input type that accepts HttpHeaderOptionResponseArgs and HttpHeaderOptionResponseOutput values.
// You can construct a concrete instance of `HttpHeaderOptionResponseInput` via:
//
//          HttpHeaderOptionResponseArgs{...}
type HttpHeaderOptionResponseInput interface {
	pulumi.Input

	ToHttpHeaderOptionResponseOutput() HttpHeaderOptionResponseOutput
	ToHttpHeaderOptionResponseOutputWithContext(context.Context) HttpHeaderOptionResponseOutput
}

// Specification determining how headers are added to requests or responses.
type HttpHeaderOptionResponseArgs struct {
	// The name of the header.
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header to add.
	HeaderValue pulumi.StringInput `pulumi:"headerValue"`
	// If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header. The default value is false.
	Replace pulumi.BoolInput `pulumi:"replace"`
}

func (HttpHeaderOptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeaderOptionResponse)(nil)).Elem()
}

func (i HttpHeaderOptionResponseArgs) ToHttpHeaderOptionResponseOutput() HttpHeaderOptionResponseOutput {
	return i.ToHttpHeaderOptionResponseOutputWithContext(context.Background())
}

func (i HttpHeaderOptionResponseArgs) ToHttpHeaderOptionResponseOutputWithContext(ctx context.Context) HttpHeaderOptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderOptionResponseOutput)
}

// HttpHeaderOptionResponseArrayInput is an input type that accepts HttpHeaderOptionResponseArray and HttpHeaderOptionResponseArrayOutput values.
// You can construct a concrete instance of `HttpHeaderOptionResponseArrayInput` via:
//
//          HttpHeaderOptionResponseArray{ HttpHeaderOptionResponseArgs{...} }
type HttpHeaderOptionResponseArrayInput interface {
	pulumi.Input

	ToHttpHeaderOptionResponseArrayOutput() HttpHeaderOptionResponseArrayOutput
	ToHttpHeaderOptionResponseArrayOutputWithContext(context.Context) HttpHeaderOptionResponseArrayOutput
}

type HttpHeaderOptionResponseArray []HttpHeaderOptionResponseInput

func (HttpHeaderOptionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpHeaderOptionResponse)(nil)).Elem()
}

func (i HttpHeaderOptionResponseArray) ToHttpHeaderOptionResponseArrayOutput() HttpHeaderOptionResponseArrayOutput {
	return i.ToHttpHeaderOptionResponseArrayOutputWithContext(context.Background())
}

func (i HttpHeaderOptionResponseArray) ToHttpHeaderOptionResponseArrayOutputWithContext(ctx context.Context) HttpHeaderOptionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderOptionResponseArrayOutput)
}

// Specification determining how headers are added to requests or responses.
type HttpHeaderOptionResponseOutput struct{ *pulumi.OutputState }

func (HttpHeaderOptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeaderOptionResponse)(nil)).Elem()
}

func (o HttpHeaderOptionResponseOutput) ToHttpHeaderOptionResponseOutput() HttpHeaderOptionResponseOutput {
	return o
}

func (o HttpHeaderOptionResponseOutput) ToHttpHeaderOptionResponseOutputWithContext(ctx context.Context) HttpHeaderOptionResponseOutput {
	return o
}

// The name of the header.
func (o HttpHeaderOptionResponseOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v HttpHeaderOptionResponse) string { return v.HeaderName }).(pulumi.StringOutput)
}

// The value of the header to add.
func (o HttpHeaderOptionResponseOutput) HeaderValue() pulumi.StringOutput {
	return o.ApplyT(func(v HttpHeaderOptionResponse) string { return v.HeaderValue }).(pulumi.StringOutput)
}

// If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header. The default value is false.
func (o HttpHeaderOptionResponseOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpHeaderOptionResponse) bool { return v.Replace }).(pulumi.BoolOutput)
}

type HttpHeaderOptionResponseArrayOutput struct{ *pulumi.OutputState }

func (HttpHeaderOptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpHeaderOptionResponse)(nil)).Elem()
}

func (o HttpHeaderOptionResponseArrayOutput) ToHttpHeaderOptionResponseArrayOutput() HttpHeaderOptionResponseArrayOutput {
	return o
}

func (o HttpHeaderOptionResponseArrayOutput) ToHttpHeaderOptionResponseArrayOutputWithContext(ctx context.Context) HttpHeaderOptionResponseArrayOutput {
	return o
}

func (o HttpHeaderOptionResponseArrayOutput) Index(i pulumi.IntInput) HttpHeaderOptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpHeaderOptionResponse {
		return vs[0].([]HttpHeaderOptionResponse)[vs[1].(int)]
	}).(HttpHeaderOptionResponseOutput)
}

// HttpRouteRuleMatch criteria for a request's query parameter.
type HttpQueryParameterMatch struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch. Only one of presentMatch, exactMatch or regexMatch must be set.
	ExactMatch *string `pulumi:"exactMatch"`
	// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
	Name *string `pulumi:"name"`
	// Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not. Only one of presentMatch, exactMatch or regexMatch must be set.
	PresentMatch *bool `pulumi:"presentMatch"`
	// The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For the regular expression grammar, please see github.com/google/re2/wiki/Syntax Only one of presentMatch, exactMatch or regexMatch must be set. Note that regexMatch only applies when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
	RegexMatch *string `pulumi:"regexMatch"`
}

// HttpQueryParameterMatchInput is an input type that accepts HttpQueryParameterMatchArgs and HttpQueryParameterMatchOutput values.
// You can construct a concrete instance of `HttpQueryParameterMatchInput` via:
//
//          HttpQueryParameterMatchArgs{...}
type HttpQueryParameterMatchInput interface {
	pulumi.Input

	ToHttpQueryParameterMatchOutput() HttpQueryParameterMatchOutput
	ToHttpQueryParameterMatchOutputWithContext(context.Context) HttpQueryParameterMatchOutput
}

// HttpRouteRuleMatch criteria for a request's query parameter.
type HttpQueryParameterMatchArgs struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch. Only one of presentMatch, exactMatch or regexMatch must be set.
	ExactMatch pulumi.StringPtrInput `pulumi:"exactMatch"`
	// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not. Only one of presentMatch, exactMatch or regexMatch must be set.
	PresentMatch pulumi.BoolPtrInput `pulumi:"presentMatch"`
	// The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For the regular expression grammar, please see github.com/google/re2/wiki/Syntax Only one of presentMatch, exactMatch or regexMatch must be set. Note that regexMatch only applies when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
	RegexMatch pulumi.StringPtrInput `pulumi:"regexMatch"`
}

func (HttpQueryParameterMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpQueryParameterMatch)(nil)).Elem()
}

func (i HttpQueryParameterMatchArgs) ToHttpQueryParameterMatchOutput() HttpQueryParameterMatchOutput {
	return i.ToHttpQueryParameterMatchOutputWithContext(context.Background())
}

func (i HttpQueryParameterMatchArgs) ToHttpQueryParameterMatchOutputWithContext(ctx context.Context) HttpQueryParameterMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpQueryParameterMatchOutput)
}

// HttpQueryParameterMatchArrayInput is an input type that accepts HttpQueryParameterMatchArray and HttpQueryParameterMatchArrayOutput values.
// You can construct a concrete instance of `HttpQueryParameterMatchArrayInput` via:
//
//          HttpQueryParameterMatchArray{ HttpQueryParameterMatchArgs{...} }
type HttpQueryParameterMatchArrayInput interface {
	pulumi.Input

	ToHttpQueryParameterMatchArrayOutput() HttpQueryParameterMatchArrayOutput
	ToHttpQueryParameterMatchArrayOutputWithContext(context.Context) HttpQueryParameterMatchArrayOutput
}

type HttpQueryParameterMatchArray []HttpQueryParameterMatchInput

func (HttpQueryParameterMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpQueryParameterMatch)(nil)).Elem()
}

func (i HttpQueryParameterMatchArray) ToHttpQueryParameterMatchArrayOutput() HttpQueryParameterMatchArrayOutput {
	return i.ToHttpQueryParameterMatchArrayOutputWithContext(context.Background())
}

func (i HttpQueryParameterMatchArray) ToHttpQueryParameterMatchArrayOutputWithContext(ctx context.Context) HttpQueryParameterMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpQueryParameterMatchArrayOutput)
}

// HttpRouteRuleMatch criteria for a request's query parameter.
type HttpQueryParameterMatchOutput struct{ *pulumi.OutputState }

func (HttpQueryParameterMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpQueryParameterMatch)(nil)).Elem()
}

func (o HttpQueryParameterMatchOutput) ToHttpQueryParameterMatchOutput() HttpQueryParameterMatchOutput {
	return o
}

func (o HttpQueryParameterMatchOutput) ToHttpQueryParameterMatchOutputWithContext(ctx context.Context) HttpQueryParameterMatchOutput {
	return o
}

// The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch. Only one of presentMatch, exactMatch or regexMatch must be set.
func (o HttpQueryParameterMatchOutput) ExactMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpQueryParameterMatch) *string { return v.ExactMatch }).(pulumi.StringPtrOutput)
}

// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
func (o HttpQueryParameterMatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpQueryParameterMatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not. Only one of presentMatch, exactMatch or regexMatch must be set.
func (o HttpQueryParameterMatchOutput) PresentMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpQueryParameterMatch) *bool { return v.PresentMatch }).(pulumi.BoolPtrOutput)
}

// The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For the regular expression grammar, please see github.com/google/re2/wiki/Syntax Only one of presentMatch, exactMatch or regexMatch must be set. Note that regexMatch only applies when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
func (o HttpQueryParameterMatchOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpQueryParameterMatch) *string { return v.RegexMatch }).(pulumi.StringPtrOutput)
}

type HttpQueryParameterMatchArrayOutput struct{ *pulumi.OutputState }

func (HttpQueryParameterMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpQueryParameterMatch)(nil)).Elem()
}

func (o HttpQueryParameterMatchArrayOutput) ToHttpQueryParameterMatchArrayOutput() HttpQueryParameterMatchArrayOutput {
	return o
}

func (o HttpQueryParameterMatchArrayOutput) ToHttpQueryParameterMatchArrayOutputWithContext(ctx context.Context) HttpQueryParameterMatchArrayOutput {
	return o
}

func (o HttpQueryParameterMatchArrayOutput) Index(i pulumi.IntInput) HttpQueryParameterMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpQueryParameterMatch {
		return vs[0].([]HttpQueryParameterMatch)[vs[1].(int)]
	}).(HttpQueryParameterMatchOutput)
}

// HttpRouteRuleMatch criteria for a request's query parameter.
type HttpQueryParameterMatchResponse struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch. Only one of presentMatch, exactMatch or regexMatch must be set.
	ExactMatch string `pulumi:"exactMatch"`
	// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
	Name string `pulumi:"name"`
	// Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not. Only one of presentMatch, exactMatch or regexMatch must be set.
	PresentMatch bool `pulumi:"presentMatch"`
	// The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For the regular expression grammar, please see github.com/google/re2/wiki/Syntax Only one of presentMatch, exactMatch or regexMatch must be set. Note that regexMatch only applies when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
	RegexMatch string `pulumi:"regexMatch"`
}

// HttpQueryParameterMatchResponseInput is an input type that accepts HttpQueryParameterMatchResponseArgs and HttpQueryParameterMatchResponseOutput values.
// You can construct a concrete instance of `HttpQueryParameterMatchResponseInput` via:
//
//          HttpQueryParameterMatchResponseArgs{...}
type HttpQueryParameterMatchResponseInput interface {
	pulumi.Input

	ToHttpQueryParameterMatchResponseOutput() HttpQueryParameterMatchResponseOutput
	ToHttpQueryParameterMatchResponseOutputWithContext(context.Context) HttpQueryParameterMatchResponseOutput
}

// HttpRouteRuleMatch criteria for a request's query parameter.
type HttpQueryParameterMatchResponseArgs struct {
	// The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch. Only one of presentMatch, exactMatch or regexMatch must be set.
	ExactMatch pulumi.StringInput `pulumi:"exactMatch"`
	// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not. Only one of presentMatch, exactMatch or regexMatch must be set.
	PresentMatch pulumi.BoolInput `pulumi:"presentMatch"`
	// The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For the regular expression grammar, please see github.com/google/re2/wiki/Syntax Only one of presentMatch, exactMatch or regexMatch must be set. Note that regexMatch only applies when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
	RegexMatch pulumi.StringInput `pulumi:"regexMatch"`
}

func (HttpQueryParameterMatchResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpQueryParameterMatchResponse)(nil)).Elem()
}

func (i HttpQueryParameterMatchResponseArgs) ToHttpQueryParameterMatchResponseOutput() HttpQueryParameterMatchResponseOutput {
	return i.ToHttpQueryParameterMatchResponseOutputWithContext(context.Background())
}

func (i HttpQueryParameterMatchResponseArgs) ToHttpQueryParameterMatchResponseOutputWithContext(ctx context.Context) HttpQueryParameterMatchResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpQueryParameterMatchResponseOutput)
}

// HttpQueryParameterMatchResponseArrayInput is an input type that accepts HttpQueryParameterMatchResponseArray and HttpQueryParameterMatchResponseArrayOutput values.
// You can construct a concrete instance of `HttpQueryParameterMatchResponseArrayInput` via:
//
//          HttpQueryParameterMatchResponseArray{ HttpQueryParameterMatchResponseArgs{...} }
type HttpQueryParameterMatchResponseArrayInput interface {
	pulumi.Input

	ToHttpQueryParameterMatchResponseArrayOutput() HttpQueryParameterMatchResponseArrayOutput
	ToHttpQueryParameterMatchResponseArrayOutputWithContext(context.Context) HttpQueryParameterMatchResponseArrayOutput
}

type HttpQueryParameterMatchResponseArray []HttpQueryParameterMatchResponseInput

func (HttpQueryParameterMatchResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpQueryParameterMatchResponse)(nil)).Elem()
}

func (i HttpQueryParameterMatchResponseArray) ToHttpQueryParameterMatchResponseArrayOutput() HttpQueryParameterMatchResponseArrayOutput {
	return i.ToHttpQueryParameterMatchResponseArrayOutputWithContext(context.Background())
}

func (i HttpQueryParameterMatchResponseArray) ToHttpQueryParameterMatchResponseArrayOutputWithContext(ctx context.Context) HttpQueryParameterMatchResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpQueryParameterMatchResponseArrayOutput)
}

// HttpRouteRuleMatch criteria for a request's query parameter.
type HttpQueryParameterMatchResponseOutput struct{ *pulumi.OutputState }

func (HttpQueryParameterMatchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpQueryParameterMatchResponse)(nil)).Elem()
}

func (o HttpQueryParameterMatchResponseOutput) ToHttpQueryParameterMatchResponseOutput() HttpQueryParameterMatchResponseOutput {
	return o
}

func (o HttpQueryParameterMatchResponseOutput) ToHttpQueryParameterMatchResponseOutputWithContext(ctx context.Context) HttpQueryParameterMatchResponseOutput {
	return o
}

// The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch. Only one of presentMatch, exactMatch or regexMatch must be set.
func (o HttpQueryParameterMatchResponseOutput) ExactMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpQueryParameterMatchResponse) string { return v.ExactMatch }).(pulumi.StringOutput)
}

// The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
func (o HttpQueryParameterMatchResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HttpQueryParameterMatchResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not. Only one of presentMatch, exactMatch or regexMatch must be set.
func (o HttpQueryParameterMatchResponseOutput) PresentMatch() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpQueryParameterMatchResponse) bool { return v.PresentMatch }).(pulumi.BoolOutput)
}

// The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For the regular expression grammar, please see github.com/google/re2/wiki/Syntax Only one of presentMatch, exactMatch or regexMatch must be set. Note that regexMatch only applies when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
func (o HttpQueryParameterMatchResponseOutput) RegexMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpQueryParameterMatchResponse) string { return v.RegexMatch }).(pulumi.StringOutput)
}

type HttpQueryParameterMatchResponseArrayOutput struct{ *pulumi.OutputState }

func (HttpQueryParameterMatchResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpQueryParameterMatchResponse)(nil)).Elem()
}

func (o HttpQueryParameterMatchResponseArrayOutput) ToHttpQueryParameterMatchResponseArrayOutput() HttpQueryParameterMatchResponseArrayOutput {
	return o
}

func (o HttpQueryParameterMatchResponseArrayOutput) ToHttpQueryParameterMatchResponseArrayOutputWithContext(ctx context.Context) HttpQueryParameterMatchResponseArrayOutput {
	return o
}

func (o HttpQueryParameterMatchResponseArrayOutput) Index(i pulumi.IntInput) HttpQueryParameterMatchResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpQueryParameterMatchResponse {
		return vs[0].([]HttpQueryParameterMatchResponse)[vs[1].(int)]
	}).(HttpQueryParameterMatchResponseOutput)
}

// Specifies settings for an HTTP redirect.
type HttpRedirectAction struct {
	// The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.
	HostRedirect *string `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
	HttpsRedirect *bool `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.
	PathRedirect *string `pulumi:"pathRedirect"`
	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.
	PrefixRedirect *string `pulumi:"prefixRedirect"`
	// The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained.
	RedirectResponseCode *string `pulumi:"redirectResponseCode"`
	// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
	StripQuery *bool `pulumi:"stripQuery"`
}

// HttpRedirectActionInput is an input type that accepts HttpRedirectActionArgs and HttpRedirectActionOutput values.
// You can construct a concrete instance of `HttpRedirectActionInput` via:
//
//          HttpRedirectActionArgs{...}
type HttpRedirectActionInput interface {
	pulumi.Input

	ToHttpRedirectActionOutput() HttpRedirectActionOutput
	ToHttpRedirectActionOutputWithContext(context.Context) HttpRedirectActionOutput
}

// Specifies settings for an HTTP redirect.
type HttpRedirectActionArgs struct {
	// The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.
	HostRedirect pulumi.StringPtrInput `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
	HttpsRedirect pulumi.BoolPtrInput `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.
	PathRedirect pulumi.StringPtrInput `pulumi:"pathRedirect"`
	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.
	PrefixRedirect pulumi.StringPtrInput `pulumi:"prefixRedirect"`
	// The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained.
	RedirectResponseCode *HttpRedirectActionRedirectResponseCode `pulumi:"redirectResponseCode"`
	// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
	StripQuery pulumi.BoolPtrInput `pulumi:"stripQuery"`
}

func (HttpRedirectActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRedirectAction)(nil)).Elem()
}

func (i HttpRedirectActionArgs) ToHttpRedirectActionOutput() HttpRedirectActionOutput {
	return i.ToHttpRedirectActionOutputWithContext(context.Background())
}

func (i HttpRedirectActionArgs) ToHttpRedirectActionOutputWithContext(ctx context.Context) HttpRedirectActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRedirectActionOutput)
}

func (i HttpRedirectActionArgs) ToHttpRedirectActionPtrOutput() HttpRedirectActionPtrOutput {
	return i.ToHttpRedirectActionPtrOutputWithContext(context.Background())
}

func (i HttpRedirectActionArgs) ToHttpRedirectActionPtrOutputWithContext(ctx context.Context) HttpRedirectActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRedirectActionOutput).ToHttpRedirectActionPtrOutputWithContext(ctx)
}

// HttpRedirectActionPtrInput is an input type that accepts HttpRedirectActionArgs, HttpRedirectActionPtr and HttpRedirectActionPtrOutput values.
// You can construct a concrete instance of `HttpRedirectActionPtrInput` via:
//
//          HttpRedirectActionArgs{...}
//
//  or:
//
//          nil
type HttpRedirectActionPtrInput interface {
	pulumi.Input

	ToHttpRedirectActionPtrOutput() HttpRedirectActionPtrOutput
	ToHttpRedirectActionPtrOutputWithContext(context.Context) HttpRedirectActionPtrOutput
}

type httpRedirectActionPtrType HttpRedirectActionArgs

func HttpRedirectActionPtr(v *HttpRedirectActionArgs) HttpRedirectActionPtrInput {
	return (*httpRedirectActionPtrType)(v)
}

func (*httpRedirectActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRedirectAction)(nil)).Elem()
}

func (i *httpRedirectActionPtrType) ToHttpRedirectActionPtrOutput() HttpRedirectActionPtrOutput {
	return i.ToHttpRedirectActionPtrOutputWithContext(context.Background())
}

func (i *httpRedirectActionPtrType) ToHttpRedirectActionPtrOutputWithContext(ctx context.Context) HttpRedirectActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRedirectActionPtrOutput)
}

// Specifies settings for an HTTP redirect.
type HttpRedirectActionOutput struct{ *pulumi.OutputState }

func (HttpRedirectActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRedirectAction)(nil)).Elem()
}

func (o HttpRedirectActionOutput) ToHttpRedirectActionOutput() HttpRedirectActionOutput {
	return o
}

func (o HttpRedirectActionOutput) ToHttpRedirectActionOutputWithContext(ctx context.Context) HttpRedirectActionOutput {
	return o
}

func (o HttpRedirectActionOutput) ToHttpRedirectActionPtrOutput() HttpRedirectActionPtrOutput {
	return o.ToHttpRedirectActionPtrOutputWithContext(context.Background())
}

func (o HttpRedirectActionOutput) ToHttpRedirectActionPtrOutputWithContext(ctx context.Context) HttpRedirectActionPtrOutput {
	return o.ApplyT(func(v HttpRedirectAction) *HttpRedirectAction {
		return &v
	}).(HttpRedirectActionPtrOutput)
}

// The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.
func (o HttpRedirectActionOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRedirectAction) *string { return v.HostRedirect }).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
func (o HttpRedirectActionOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRedirectAction) *bool { return v.HttpsRedirect }).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.
func (o HttpRedirectActionOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRedirectAction) *string { return v.PathRedirect }).(pulumi.StringPtrOutput)
}

// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.
func (o HttpRedirectActionOutput) PrefixRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRedirectAction) *string { return v.PrefixRedirect }).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained.
func (o HttpRedirectActionOutput) RedirectResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRedirectAction) *string { return v.RedirectResponseCode }).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
func (o HttpRedirectActionOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRedirectAction) *bool { return v.StripQuery }).(pulumi.BoolPtrOutput)
}

type HttpRedirectActionPtrOutput struct{ *pulumi.OutputState }

func (HttpRedirectActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRedirectAction)(nil)).Elem()
}

func (o HttpRedirectActionPtrOutput) ToHttpRedirectActionPtrOutput() HttpRedirectActionPtrOutput {
	return o
}

func (o HttpRedirectActionPtrOutput) ToHttpRedirectActionPtrOutputWithContext(ctx context.Context) HttpRedirectActionPtrOutput {
	return o
}

func (o HttpRedirectActionPtrOutput) Elem() HttpRedirectActionOutput {
	return o.ApplyT(func(v *HttpRedirectAction) HttpRedirectAction { return *v }).(HttpRedirectActionOutput)
}

// The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.
func (o HttpRedirectActionPtrOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRedirectAction) *string {
		if v == nil {
			return nil
		}
		return v.HostRedirect
	}).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
func (o HttpRedirectActionPtrOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpRedirectAction) *bool {
		if v == nil {
			return nil
		}
		return v.HttpsRedirect
	}).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.
func (o HttpRedirectActionPtrOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRedirectAction) *string {
		if v == nil {
			return nil
		}
		return v.PathRedirect
	}).(pulumi.StringPtrOutput)
}

// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.
func (o HttpRedirectActionPtrOutput) PrefixRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRedirectAction) *string {
		if v == nil {
			return nil
		}
		return v.PrefixRedirect
	}).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained.
func (o HttpRedirectActionPtrOutput) RedirectResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRedirectAction) *string {
		if v == nil {
			return nil
		}
		return v.RedirectResponseCode
	}).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
func (o HttpRedirectActionPtrOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpRedirectAction) *bool {
		if v == nil {
			return nil
		}
		return v.StripQuery
	}).(pulumi.BoolPtrOutput)
}

// Specifies settings for an HTTP redirect.
type HttpRedirectActionResponse struct {
	// The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.
	HostRedirect string `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
	HttpsRedirect bool `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.
	PathRedirect string `pulumi:"pathRedirect"`
	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.
	PrefixRedirect string `pulumi:"prefixRedirect"`
	// The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained.
	RedirectResponseCode string `pulumi:"redirectResponseCode"`
	// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
	StripQuery bool `pulumi:"stripQuery"`
}

// HttpRedirectActionResponseInput is an input type that accepts HttpRedirectActionResponseArgs and HttpRedirectActionResponseOutput values.
// You can construct a concrete instance of `HttpRedirectActionResponseInput` via:
//
//          HttpRedirectActionResponseArgs{...}
type HttpRedirectActionResponseInput interface {
	pulumi.Input

	ToHttpRedirectActionResponseOutput() HttpRedirectActionResponseOutput
	ToHttpRedirectActionResponseOutputWithContext(context.Context) HttpRedirectActionResponseOutput
}

// Specifies settings for an HTTP redirect.
type HttpRedirectActionResponseArgs struct {
	// The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.
	HostRedirect pulumi.StringInput `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
	HttpsRedirect pulumi.BoolInput `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.
	PathRedirect pulumi.StringInput `pulumi:"pathRedirect"`
	// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.
	PrefixRedirect pulumi.StringInput `pulumi:"prefixRedirect"`
	// The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained.
	RedirectResponseCode pulumi.StringInput `pulumi:"redirectResponseCode"`
	// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
	StripQuery pulumi.BoolInput `pulumi:"stripQuery"`
}

func (HttpRedirectActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRedirectActionResponse)(nil)).Elem()
}

func (i HttpRedirectActionResponseArgs) ToHttpRedirectActionResponseOutput() HttpRedirectActionResponseOutput {
	return i.ToHttpRedirectActionResponseOutputWithContext(context.Background())
}

func (i HttpRedirectActionResponseArgs) ToHttpRedirectActionResponseOutputWithContext(ctx context.Context) HttpRedirectActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRedirectActionResponseOutput)
}

func (i HttpRedirectActionResponseArgs) ToHttpRedirectActionResponsePtrOutput() HttpRedirectActionResponsePtrOutput {
	return i.ToHttpRedirectActionResponsePtrOutputWithContext(context.Background())
}

func (i HttpRedirectActionResponseArgs) ToHttpRedirectActionResponsePtrOutputWithContext(ctx context.Context) HttpRedirectActionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRedirectActionResponseOutput).ToHttpRedirectActionResponsePtrOutputWithContext(ctx)
}

// HttpRedirectActionResponsePtrInput is an input type that accepts HttpRedirectActionResponseArgs, HttpRedirectActionResponsePtr and HttpRedirectActionResponsePtrOutput values.
// You can construct a concrete instance of `HttpRedirectActionResponsePtrInput` via:
//
//          HttpRedirectActionResponseArgs{...}
//
//  or:
//
//          nil
type HttpRedirectActionResponsePtrInput interface {
	pulumi.Input

	ToHttpRedirectActionResponsePtrOutput() HttpRedirectActionResponsePtrOutput
	ToHttpRedirectActionResponsePtrOutputWithContext(context.Context) HttpRedirectActionResponsePtrOutput
}

type httpRedirectActionResponsePtrType HttpRedirectActionResponseArgs

func HttpRedirectActionResponsePtr(v *HttpRedirectActionResponseArgs) HttpRedirectActionResponsePtrInput {
	return (*httpRedirectActionResponsePtrType)(v)
}

func (*httpRedirectActionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRedirectActionResponse)(nil)).Elem()
}

func (i *httpRedirectActionResponsePtrType) ToHttpRedirectActionResponsePtrOutput() HttpRedirectActionResponsePtrOutput {
	return i.ToHttpRedirectActionResponsePtrOutputWithContext(context.Background())
}

func (i *httpRedirectActionResponsePtrType) ToHttpRedirectActionResponsePtrOutputWithContext(ctx context.Context) HttpRedirectActionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRedirectActionResponsePtrOutput)
}

// Specifies settings for an HTTP redirect.
type HttpRedirectActionResponseOutput struct{ *pulumi.OutputState }

func (HttpRedirectActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRedirectActionResponse)(nil)).Elem()
}

func (o HttpRedirectActionResponseOutput) ToHttpRedirectActionResponseOutput() HttpRedirectActionResponseOutput {
	return o
}

func (o HttpRedirectActionResponseOutput) ToHttpRedirectActionResponseOutputWithContext(ctx context.Context) HttpRedirectActionResponseOutput {
	return o
}

func (o HttpRedirectActionResponseOutput) ToHttpRedirectActionResponsePtrOutput() HttpRedirectActionResponsePtrOutput {
	return o.ToHttpRedirectActionResponsePtrOutputWithContext(context.Background())
}

func (o HttpRedirectActionResponseOutput) ToHttpRedirectActionResponsePtrOutputWithContext(ctx context.Context) HttpRedirectActionResponsePtrOutput {
	return o.ApplyT(func(v HttpRedirectActionResponse) *HttpRedirectActionResponse {
		return &v
	}).(HttpRedirectActionResponsePtrOutput)
}

// The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.
func (o HttpRedirectActionResponseOutput) HostRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRedirectActionResponse) string { return v.HostRedirect }).(pulumi.StringOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
func (o HttpRedirectActionResponseOutput) HttpsRedirect() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpRedirectActionResponse) bool { return v.HttpsRedirect }).(pulumi.BoolOutput)
}

// The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.
func (o HttpRedirectActionResponseOutput) PathRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRedirectActionResponse) string { return v.PathRedirect }).(pulumi.StringOutput)
}

// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.
func (o HttpRedirectActionResponseOutput) PrefixRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRedirectActionResponse) string { return v.PrefixRedirect }).(pulumi.StringOutput)
}

// The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained.
func (o HttpRedirectActionResponseOutput) RedirectResponseCode() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRedirectActionResponse) string { return v.RedirectResponseCode }).(pulumi.StringOutput)
}

// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
func (o HttpRedirectActionResponseOutput) StripQuery() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpRedirectActionResponse) bool { return v.StripQuery }).(pulumi.BoolOutput)
}

type HttpRedirectActionResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpRedirectActionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRedirectActionResponse)(nil)).Elem()
}

func (o HttpRedirectActionResponsePtrOutput) ToHttpRedirectActionResponsePtrOutput() HttpRedirectActionResponsePtrOutput {
	return o
}

func (o HttpRedirectActionResponsePtrOutput) ToHttpRedirectActionResponsePtrOutputWithContext(ctx context.Context) HttpRedirectActionResponsePtrOutput {
	return o
}

func (o HttpRedirectActionResponsePtrOutput) Elem() HttpRedirectActionResponseOutput {
	return o.ApplyT(func(v *HttpRedirectActionResponse) HttpRedirectActionResponse { return *v }).(HttpRedirectActionResponseOutput)
}

// The host that will be used in the redirect response instead of the one that was supplied in the request. The value must be between 1 and 255 characters.
func (o HttpRedirectActionResponsePtrOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRedirectActionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HostRedirect
	}).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. This must only be set for UrlMaps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
func (o HttpRedirectActionResponsePtrOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpRedirectActionResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.HttpsRedirect
	}).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.
func (o HttpRedirectActionResponsePtrOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRedirectActionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PathRedirect
	}).(pulumi.StringPtrOutput)
}

// The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect. The value must be between 1 and 1024 characters.
func (o HttpRedirectActionResponsePtrOutput) PrefixRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRedirectActionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrefixRedirect
	}).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method will be retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method will be retained.
func (o HttpRedirectActionResponsePtrOutput) RedirectResponseCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRedirectActionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RedirectResponseCode
	}).(pulumi.StringPtrOutput)
}

// If set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
func (o HttpRedirectActionResponsePtrOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpRedirectActionResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.StripQuery
	}).(pulumi.BoolPtrOutput)
}

// The retry policy associates with HttpRouteRule
type HttpRetryPolicy struct {
	// Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
	NumRetries *int `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt. If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set, will use the largest timeout among all backend services associated with the route.
	PerTryTimeout *Duration `pulumi:"perTryTimeout"`
	// Specifies one or more conditions when this retry policy applies. Valid values are: - 5xx: Retry will be attempted if the instance or endpoint responds with any 5xx response code, or if the instance or endpoint does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. - - connect-failure: A retry will be attempted on failures connecting to the instance or endpoint, for example due to connection timeouts. - retriable-4xx: A retry will be attempted if the instance or endpoint responds with a retriable 4xx response code. Currently the only retriable error supported is 409. - refused-stream: A retry will be attempted if the instance or endpoint resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: A retry will be attempted if the gRPC status code in the response header is set to cancelled. - deadline-exceeded: A retry will be attempted if the gRPC status code in the response header is set to deadline-exceeded. - internal: A retry will be attempted if the gRPC status code in the response header is set to internal. - resource-exhausted: A retry will be attempted if the gRPC status code in the response header is set to resource-exhausted. - unavailable: A retry will be attempted if the gRPC status code in the response header is set to unavailable.
	RetryConditions []string `pulumi:"retryConditions"`
}

// HttpRetryPolicyInput is an input type that accepts HttpRetryPolicyArgs and HttpRetryPolicyOutput values.
// You can construct a concrete instance of `HttpRetryPolicyInput` via:
//
//          HttpRetryPolicyArgs{...}
type HttpRetryPolicyInput interface {
	pulumi.Input

	ToHttpRetryPolicyOutput() HttpRetryPolicyOutput
	ToHttpRetryPolicyOutputWithContext(context.Context) HttpRetryPolicyOutput
}

// The retry policy associates with HttpRouteRule
type HttpRetryPolicyArgs struct {
	// Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
	NumRetries pulumi.IntPtrInput `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt. If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set, will use the largest timeout among all backend services associated with the route.
	PerTryTimeout DurationPtrInput `pulumi:"perTryTimeout"`
	// Specifies one or more conditions when this retry policy applies. Valid values are: - 5xx: Retry will be attempted if the instance or endpoint responds with any 5xx response code, or if the instance or endpoint does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. - - connect-failure: A retry will be attempted on failures connecting to the instance or endpoint, for example due to connection timeouts. - retriable-4xx: A retry will be attempted if the instance or endpoint responds with a retriable 4xx response code. Currently the only retriable error supported is 409. - refused-stream: A retry will be attempted if the instance or endpoint resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: A retry will be attempted if the gRPC status code in the response header is set to cancelled. - deadline-exceeded: A retry will be attempted if the gRPC status code in the response header is set to deadline-exceeded. - internal: A retry will be attempted if the gRPC status code in the response header is set to internal. - resource-exhausted: A retry will be attempted if the gRPC status code in the response header is set to resource-exhausted. - unavailable: A retry will be attempted if the gRPC status code in the response header is set to unavailable.
	RetryConditions pulumi.StringArrayInput `pulumi:"retryConditions"`
}

func (HttpRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRetryPolicy)(nil)).Elem()
}

func (i HttpRetryPolicyArgs) ToHttpRetryPolicyOutput() HttpRetryPolicyOutput {
	return i.ToHttpRetryPolicyOutputWithContext(context.Background())
}

func (i HttpRetryPolicyArgs) ToHttpRetryPolicyOutputWithContext(ctx context.Context) HttpRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRetryPolicyOutput)
}

func (i HttpRetryPolicyArgs) ToHttpRetryPolicyPtrOutput() HttpRetryPolicyPtrOutput {
	return i.ToHttpRetryPolicyPtrOutputWithContext(context.Background())
}

func (i HttpRetryPolicyArgs) ToHttpRetryPolicyPtrOutputWithContext(ctx context.Context) HttpRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRetryPolicyOutput).ToHttpRetryPolicyPtrOutputWithContext(ctx)
}

// HttpRetryPolicyPtrInput is an input type that accepts HttpRetryPolicyArgs, HttpRetryPolicyPtr and HttpRetryPolicyPtrOutput values.
// You can construct a concrete instance of `HttpRetryPolicyPtrInput` via:
//
//          HttpRetryPolicyArgs{...}
//
//  or:
//
//          nil
type HttpRetryPolicyPtrInput interface {
	pulumi.Input

	ToHttpRetryPolicyPtrOutput() HttpRetryPolicyPtrOutput
	ToHttpRetryPolicyPtrOutputWithContext(context.Context) HttpRetryPolicyPtrOutput
}

type httpRetryPolicyPtrType HttpRetryPolicyArgs

func HttpRetryPolicyPtr(v *HttpRetryPolicyArgs) HttpRetryPolicyPtrInput {
	return (*httpRetryPolicyPtrType)(v)
}

func (*httpRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRetryPolicy)(nil)).Elem()
}

func (i *httpRetryPolicyPtrType) ToHttpRetryPolicyPtrOutput() HttpRetryPolicyPtrOutput {
	return i.ToHttpRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *httpRetryPolicyPtrType) ToHttpRetryPolicyPtrOutputWithContext(ctx context.Context) HttpRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRetryPolicyPtrOutput)
}

// The retry policy associates with HttpRouteRule
type HttpRetryPolicyOutput struct{ *pulumi.OutputState }

func (HttpRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRetryPolicy)(nil)).Elem()
}

func (o HttpRetryPolicyOutput) ToHttpRetryPolicyOutput() HttpRetryPolicyOutput {
	return o
}

func (o HttpRetryPolicyOutput) ToHttpRetryPolicyOutputWithContext(ctx context.Context) HttpRetryPolicyOutput {
	return o
}

func (o HttpRetryPolicyOutput) ToHttpRetryPolicyPtrOutput() HttpRetryPolicyPtrOutput {
	return o.ToHttpRetryPolicyPtrOutputWithContext(context.Background())
}

func (o HttpRetryPolicyOutput) ToHttpRetryPolicyPtrOutputWithContext(ctx context.Context) HttpRetryPolicyPtrOutput {
	return o.ApplyT(func(v HttpRetryPolicy) *HttpRetryPolicy {
		return &v
	}).(HttpRetryPolicyPtrOutput)
}

// Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
func (o HttpRetryPolicyOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRetryPolicy) *int { return v.NumRetries }).(pulumi.IntPtrOutput)
}

// Specifies a non-zero timeout per retry attempt. If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set, will use the largest timeout among all backend services associated with the route.
func (o HttpRetryPolicyOutput) PerTryTimeout() DurationPtrOutput {
	return o.ApplyT(func(v HttpRetryPolicy) *Duration { return v.PerTryTimeout }).(DurationPtrOutput)
}

// Specifies one or more conditions when this retry policy applies. Valid values are: - 5xx: Retry will be attempted if the instance or endpoint responds with any 5xx response code, or if the instance or endpoint does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. - - connect-failure: A retry will be attempted on failures connecting to the instance or endpoint, for example due to connection timeouts. - retriable-4xx: A retry will be attempted if the instance or endpoint responds with a retriable 4xx response code. Currently the only retriable error supported is 409. - refused-stream: A retry will be attempted if the instance or endpoint resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: A retry will be attempted if the gRPC status code in the response header is set to cancelled. - deadline-exceeded: A retry will be attempted if the gRPC status code in the response header is set to deadline-exceeded. - internal: A retry will be attempted if the gRPC status code in the response header is set to internal. - resource-exhausted: A retry will be attempted if the gRPC status code in the response header is set to resource-exhausted. - unavailable: A retry will be attempted if the gRPC status code in the response header is set to unavailable.
func (o HttpRetryPolicyOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRetryPolicy) []string { return v.RetryConditions }).(pulumi.StringArrayOutput)
}

type HttpRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (HttpRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRetryPolicy)(nil)).Elem()
}

func (o HttpRetryPolicyPtrOutput) ToHttpRetryPolicyPtrOutput() HttpRetryPolicyPtrOutput {
	return o
}

func (o HttpRetryPolicyPtrOutput) ToHttpRetryPolicyPtrOutputWithContext(ctx context.Context) HttpRetryPolicyPtrOutput {
	return o
}

func (o HttpRetryPolicyPtrOutput) Elem() HttpRetryPolicyOutput {
	return o.ApplyT(func(v *HttpRetryPolicy) HttpRetryPolicy { return *v }).(HttpRetryPolicyOutput)
}

// Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
func (o HttpRetryPolicyPtrOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.NumRetries
	}).(pulumi.IntPtrOutput)
}

// Specifies a non-zero timeout per retry attempt. If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set, will use the largest timeout among all backend services associated with the route.
func (o HttpRetryPolicyPtrOutput) PerTryTimeout() DurationPtrOutput {
	return o.ApplyT(func(v *HttpRetryPolicy) *Duration {
		if v == nil {
			return nil
		}
		return v.PerTryTimeout
	}).(DurationPtrOutput)
}

// Specifies one or more conditions when this retry policy applies. Valid values are: - 5xx: Retry will be attempted if the instance or endpoint responds with any 5xx response code, or if the instance or endpoint does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. - - connect-failure: A retry will be attempted on failures connecting to the instance or endpoint, for example due to connection timeouts. - retriable-4xx: A retry will be attempted if the instance or endpoint responds with a retriable 4xx response code. Currently the only retriable error supported is 409. - refused-stream: A retry will be attempted if the instance or endpoint resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: A retry will be attempted if the gRPC status code in the response header is set to cancelled. - deadline-exceeded: A retry will be attempted if the gRPC status code in the response header is set to deadline-exceeded. - internal: A retry will be attempted if the gRPC status code in the response header is set to internal. - resource-exhausted: A retry will be attempted if the gRPC status code in the response header is set to resource-exhausted. - unavailable: A retry will be attempted if the gRPC status code in the response header is set to unavailable.
func (o HttpRetryPolicyPtrOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRetryPolicy) []string {
		if v == nil {
			return nil
		}
		return v.RetryConditions
	}).(pulumi.StringArrayOutput)
}

// The retry policy associates with HttpRouteRule
type HttpRetryPolicyResponse struct {
	// Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
	NumRetries int `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt. If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set, will use the largest timeout among all backend services associated with the route.
	PerTryTimeout DurationResponse `pulumi:"perTryTimeout"`
	// Specifies one or more conditions when this retry policy applies. Valid values are: - 5xx: Retry will be attempted if the instance or endpoint responds with any 5xx response code, or if the instance or endpoint does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. - - connect-failure: A retry will be attempted on failures connecting to the instance or endpoint, for example due to connection timeouts. - retriable-4xx: A retry will be attempted if the instance or endpoint responds with a retriable 4xx response code. Currently the only retriable error supported is 409. - refused-stream: A retry will be attempted if the instance or endpoint resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: A retry will be attempted if the gRPC status code in the response header is set to cancelled. - deadline-exceeded: A retry will be attempted if the gRPC status code in the response header is set to deadline-exceeded. - internal: A retry will be attempted if the gRPC status code in the response header is set to internal. - resource-exhausted: A retry will be attempted if the gRPC status code in the response header is set to resource-exhausted. - unavailable: A retry will be attempted if the gRPC status code in the response header is set to unavailable.
	RetryConditions []string `pulumi:"retryConditions"`
}

// HttpRetryPolicyResponseInput is an input type that accepts HttpRetryPolicyResponseArgs and HttpRetryPolicyResponseOutput values.
// You can construct a concrete instance of `HttpRetryPolicyResponseInput` via:
//
//          HttpRetryPolicyResponseArgs{...}
type HttpRetryPolicyResponseInput interface {
	pulumi.Input

	ToHttpRetryPolicyResponseOutput() HttpRetryPolicyResponseOutput
	ToHttpRetryPolicyResponseOutputWithContext(context.Context) HttpRetryPolicyResponseOutput
}

// The retry policy associates with HttpRouteRule
type HttpRetryPolicyResponseArgs struct {
	// Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
	NumRetries pulumi.IntInput `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt. If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set, will use the largest timeout among all backend services associated with the route.
	PerTryTimeout DurationResponseInput `pulumi:"perTryTimeout"`
	// Specifies one or more conditions when this retry policy applies. Valid values are: - 5xx: Retry will be attempted if the instance or endpoint responds with any 5xx response code, or if the instance or endpoint does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. - - connect-failure: A retry will be attempted on failures connecting to the instance or endpoint, for example due to connection timeouts. - retriable-4xx: A retry will be attempted if the instance or endpoint responds with a retriable 4xx response code. Currently the only retriable error supported is 409. - refused-stream: A retry will be attempted if the instance or endpoint resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: A retry will be attempted if the gRPC status code in the response header is set to cancelled. - deadline-exceeded: A retry will be attempted if the gRPC status code in the response header is set to deadline-exceeded. - internal: A retry will be attempted if the gRPC status code in the response header is set to internal. - resource-exhausted: A retry will be attempted if the gRPC status code in the response header is set to resource-exhausted. - unavailable: A retry will be attempted if the gRPC status code in the response header is set to unavailable.
	RetryConditions pulumi.StringArrayInput `pulumi:"retryConditions"`
}

func (HttpRetryPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRetryPolicyResponse)(nil)).Elem()
}

func (i HttpRetryPolicyResponseArgs) ToHttpRetryPolicyResponseOutput() HttpRetryPolicyResponseOutput {
	return i.ToHttpRetryPolicyResponseOutputWithContext(context.Background())
}

func (i HttpRetryPolicyResponseArgs) ToHttpRetryPolicyResponseOutputWithContext(ctx context.Context) HttpRetryPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRetryPolicyResponseOutput)
}

func (i HttpRetryPolicyResponseArgs) ToHttpRetryPolicyResponsePtrOutput() HttpRetryPolicyResponsePtrOutput {
	return i.ToHttpRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (i HttpRetryPolicyResponseArgs) ToHttpRetryPolicyResponsePtrOutputWithContext(ctx context.Context) HttpRetryPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRetryPolicyResponseOutput).ToHttpRetryPolicyResponsePtrOutputWithContext(ctx)
}

// HttpRetryPolicyResponsePtrInput is an input type that accepts HttpRetryPolicyResponseArgs, HttpRetryPolicyResponsePtr and HttpRetryPolicyResponsePtrOutput values.
// You can construct a concrete instance of `HttpRetryPolicyResponsePtrInput` via:
//
//          HttpRetryPolicyResponseArgs{...}
//
//  or:
//
//          nil
type HttpRetryPolicyResponsePtrInput interface {
	pulumi.Input

	ToHttpRetryPolicyResponsePtrOutput() HttpRetryPolicyResponsePtrOutput
	ToHttpRetryPolicyResponsePtrOutputWithContext(context.Context) HttpRetryPolicyResponsePtrOutput
}

type httpRetryPolicyResponsePtrType HttpRetryPolicyResponseArgs

func HttpRetryPolicyResponsePtr(v *HttpRetryPolicyResponseArgs) HttpRetryPolicyResponsePtrInput {
	return (*httpRetryPolicyResponsePtrType)(v)
}

func (*httpRetryPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRetryPolicyResponse)(nil)).Elem()
}

func (i *httpRetryPolicyResponsePtrType) ToHttpRetryPolicyResponsePtrOutput() HttpRetryPolicyResponsePtrOutput {
	return i.ToHttpRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *httpRetryPolicyResponsePtrType) ToHttpRetryPolicyResponsePtrOutputWithContext(ctx context.Context) HttpRetryPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRetryPolicyResponsePtrOutput)
}

// The retry policy associates with HttpRouteRule
type HttpRetryPolicyResponseOutput struct{ *pulumi.OutputState }

func (HttpRetryPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRetryPolicyResponse)(nil)).Elem()
}

func (o HttpRetryPolicyResponseOutput) ToHttpRetryPolicyResponseOutput() HttpRetryPolicyResponseOutput {
	return o
}

func (o HttpRetryPolicyResponseOutput) ToHttpRetryPolicyResponseOutputWithContext(ctx context.Context) HttpRetryPolicyResponseOutput {
	return o
}

func (o HttpRetryPolicyResponseOutput) ToHttpRetryPolicyResponsePtrOutput() HttpRetryPolicyResponsePtrOutput {
	return o.ToHttpRetryPolicyResponsePtrOutputWithContext(context.Background())
}

func (o HttpRetryPolicyResponseOutput) ToHttpRetryPolicyResponsePtrOutputWithContext(ctx context.Context) HttpRetryPolicyResponsePtrOutput {
	return o.ApplyT(func(v HttpRetryPolicyResponse) *HttpRetryPolicyResponse {
		return &v
	}).(HttpRetryPolicyResponsePtrOutput)
}

// Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
func (o HttpRetryPolicyResponseOutput) NumRetries() pulumi.IntOutput {
	return o.ApplyT(func(v HttpRetryPolicyResponse) int { return v.NumRetries }).(pulumi.IntOutput)
}

// Specifies a non-zero timeout per retry attempt. If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set, will use the largest timeout among all backend services associated with the route.
func (o HttpRetryPolicyResponseOutput) PerTryTimeout() DurationResponseOutput {
	return o.ApplyT(func(v HttpRetryPolicyResponse) DurationResponse { return v.PerTryTimeout }).(DurationResponseOutput)
}

// Specifies one or more conditions when this retry policy applies. Valid values are: - 5xx: Retry will be attempted if the instance or endpoint responds with any 5xx response code, or if the instance or endpoint does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. - - connect-failure: A retry will be attempted on failures connecting to the instance or endpoint, for example due to connection timeouts. - retriable-4xx: A retry will be attempted if the instance or endpoint responds with a retriable 4xx response code. Currently the only retriable error supported is 409. - refused-stream: A retry will be attempted if the instance or endpoint resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: A retry will be attempted if the gRPC status code in the response header is set to cancelled. - deadline-exceeded: A retry will be attempted if the gRPC status code in the response header is set to deadline-exceeded. - internal: A retry will be attempted if the gRPC status code in the response header is set to internal. - resource-exhausted: A retry will be attempted if the gRPC status code in the response header is set to resource-exhausted. - unavailable: A retry will be attempted if the gRPC status code in the response header is set to unavailable.
func (o HttpRetryPolicyResponseOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRetryPolicyResponse) []string { return v.RetryConditions }).(pulumi.StringArrayOutput)
}

type HttpRetryPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpRetryPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRetryPolicyResponse)(nil)).Elem()
}

func (o HttpRetryPolicyResponsePtrOutput) ToHttpRetryPolicyResponsePtrOutput() HttpRetryPolicyResponsePtrOutput {
	return o
}

func (o HttpRetryPolicyResponsePtrOutput) ToHttpRetryPolicyResponsePtrOutputWithContext(ctx context.Context) HttpRetryPolicyResponsePtrOutput {
	return o
}

func (o HttpRetryPolicyResponsePtrOutput) Elem() HttpRetryPolicyResponseOutput {
	return o.ApplyT(func(v *HttpRetryPolicyResponse) HttpRetryPolicyResponse { return *v }).(HttpRetryPolicyResponseOutput)
}

// Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
func (o HttpRetryPolicyResponsePtrOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRetryPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.NumRetries
	}).(pulumi.IntPtrOutput)
}

// Specifies a non-zero timeout per retry attempt. If not specified, will use the timeout set in HttpRouteAction. If timeout in HttpRouteAction is not set, will use the largest timeout among all backend services associated with the route.
func (o HttpRetryPolicyResponsePtrOutput) PerTryTimeout() DurationResponsePtrOutput {
	return o.ApplyT(func(v *HttpRetryPolicyResponse) *DurationResponse {
		if v == nil {
			return nil
		}
		return &v.PerTryTimeout
	}).(DurationResponsePtrOutput)
}

// Specifies one or more conditions when this retry policy applies. Valid values are: - 5xx: Retry will be attempted if the instance or endpoint responds with any 5xx response code, or if the instance or endpoint does not respond at all, example: disconnects, reset, read timeout, connection failure, and refused streams. - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. - - connect-failure: A retry will be attempted on failures connecting to the instance or endpoint, for example due to connection timeouts. - retriable-4xx: A retry will be attempted if the instance or endpoint responds with a retriable 4xx response code. Currently the only retriable error supported is 409. - refused-stream: A retry will be attempted if the instance or endpoint resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: A retry will be attempted if the gRPC status code in the response header is set to cancelled. - deadline-exceeded: A retry will be attempted if the gRPC status code in the response header is set to deadline-exceeded. - internal: A retry will be attempted if the gRPC status code in the response header is set to internal. - resource-exhausted: A retry will be attempted if the gRPC status code in the response header is set to resource-exhausted. - unavailable: A retry will be attempted if the gRPC status code in the response header is set to unavailable.
func (o HttpRetryPolicyResponsePtrOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRetryPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.RetryConditions
	}).(pulumi.StringArrayOutput)
}

type HttpRouteAction struct {
	// The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing Not supported when the URL map is bound to target gRPC proxy.
	CorsPolicy *CorsPolicy `pulumi:"corsPolicy"`
	// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests. For the requests impacted by fault injection, timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy.
	FaultInjectionPolicy *HttpFaultInjection `pulumi:"faultInjectionPolicy"`
	// Specifies the maximum duration (timeout) for streams on the selected route. Unlike the timeout field where the timeout duration starts from the time the request has been fully processed (i.e. end-of-stream), the duration in this field is computed from the beginning of the stream until the response has been completely processed, including all retries. A stream that does not complete in this duration is closed. If not specified, will use the largest maxStreamDuration among all backend services associated with the route. This field is only allowed if the Url map is used with backend services with loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	MaxStreamDuration *Duration `pulumi:"maxStreamDuration"`
	// Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	RequestMirrorPolicy *RequestMirrorPolicy `pulumi:"requestMirrorPolicy"`
	// Specifies the retry policy associated with this route. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	RetryPolicy *HttpRetryPolicy `pulumi:"retryPolicy"`
	// Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries. If not specified, will use the largest timeout among all backend services associated with the route. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	Timeout *Duration `pulumi:"timeout"`
	// The spec to modify the URL of the request, prior to forwarding the request to the matched service. urlRewrite is the only action supported in UrlMaps for external HTTP(S) load balancers. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	UrlRewrite *UrlRewrite `pulumi:"urlRewrite"`
	// A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number. Once a backendService is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
	WeightedBackendServices []WeightedBackendService `pulumi:"weightedBackendServices"`
}

// HttpRouteActionInput is an input type that accepts HttpRouteActionArgs and HttpRouteActionOutput values.
// You can construct a concrete instance of `HttpRouteActionInput` via:
//
//          HttpRouteActionArgs{...}
type HttpRouteActionInput interface {
	pulumi.Input

	ToHttpRouteActionOutput() HttpRouteActionOutput
	ToHttpRouteActionOutputWithContext(context.Context) HttpRouteActionOutput
}

type HttpRouteActionArgs struct {
	// The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing Not supported when the URL map is bound to target gRPC proxy.
	CorsPolicy CorsPolicyPtrInput `pulumi:"corsPolicy"`
	// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests. For the requests impacted by fault injection, timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy.
	FaultInjectionPolicy HttpFaultInjectionPtrInput `pulumi:"faultInjectionPolicy"`
	// Specifies the maximum duration (timeout) for streams on the selected route. Unlike the timeout field where the timeout duration starts from the time the request has been fully processed (i.e. end-of-stream), the duration in this field is computed from the beginning of the stream until the response has been completely processed, including all retries. A stream that does not complete in this duration is closed. If not specified, will use the largest maxStreamDuration among all backend services associated with the route. This field is only allowed if the Url map is used with backend services with loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	MaxStreamDuration DurationPtrInput `pulumi:"maxStreamDuration"`
	// Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	RequestMirrorPolicy RequestMirrorPolicyPtrInput `pulumi:"requestMirrorPolicy"`
	// Specifies the retry policy associated with this route. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	RetryPolicy HttpRetryPolicyPtrInput `pulumi:"retryPolicy"`
	// Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries. If not specified, will use the largest timeout among all backend services associated with the route. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	Timeout DurationPtrInput `pulumi:"timeout"`
	// The spec to modify the URL of the request, prior to forwarding the request to the matched service. urlRewrite is the only action supported in UrlMaps for external HTTP(S) load balancers. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	UrlRewrite UrlRewritePtrInput `pulumi:"urlRewrite"`
	// A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number. Once a backendService is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
	WeightedBackendServices WeightedBackendServiceArrayInput `pulumi:"weightedBackendServices"`
}

func (HttpRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteAction)(nil)).Elem()
}

func (i HttpRouteActionArgs) ToHttpRouteActionOutput() HttpRouteActionOutput {
	return i.ToHttpRouteActionOutputWithContext(context.Background())
}

func (i HttpRouteActionArgs) ToHttpRouteActionOutputWithContext(ctx context.Context) HttpRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteActionOutput)
}

func (i HttpRouteActionArgs) ToHttpRouteActionPtrOutput() HttpRouteActionPtrOutput {
	return i.ToHttpRouteActionPtrOutputWithContext(context.Background())
}

func (i HttpRouteActionArgs) ToHttpRouteActionPtrOutputWithContext(ctx context.Context) HttpRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteActionOutput).ToHttpRouteActionPtrOutputWithContext(ctx)
}

// HttpRouteActionPtrInput is an input type that accepts HttpRouteActionArgs, HttpRouteActionPtr and HttpRouteActionPtrOutput values.
// You can construct a concrete instance of `HttpRouteActionPtrInput` via:
//
//          HttpRouteActionArgs{...}
//
//  or:
//
//          nil
type HttpRouteActionPtrInput interface {
	pulumi.Input

	ToHttpRouteActionPtrOutput() HttpRouteActionPtrOutput
	ToHttpRouteActionPtrOutputWithContext(context.Context) HttpRouteActionPtrOutput
}

type httpRouteActionPtrType HttpRouteActionArgs

func HttpRouteActionPtr(v *HttpRouteActionArgs) HttpRouteActionPtrInput {
	return (*httpRouteActionPtrType)(v)
}

func (*httpRouteActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteAction)(nil)).Elem()
}

func (i *httpRouteActionPtrType) ToHttpRouteActionPtrOutput() HttpRouteActionPtrOutput {
	return i.ToHttpRouteActionPtrOutputWithContext(context.Background())
}

func (i *httpRouteActionPtrType) ToHttpRouteActionPtrOutputWithContext(ctx context.Context) HttpRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteActionPtrOutput)
}

type HttpRouteActionOutput struct{ *pulumi.OutputState }

func (HttpRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteAction)(nil)).Elem()
}

func (o HttpRouteActionOutput) ToHttpRouteActionOutput() HttpRouteActionOutput {
	return o
}

func (o HttpRouteActionOutput) ToHttpRouteActionOutputWithContext(ctx context.Context) HttpRouteActionOutput {
	return o
}

func (o HttpRouteActionOutput) ToHttpRouteActionPtrOutput() HttpRouteActionPtrOutput {
	return o.ToHttpRouteActionPtrOutputWithContext(context.Background())
}

func (o HttpRouteActionOutput) ToHttpRouteActionPtrOutputWithContext(ctx context.Context) HttpRouteActionPtrOutput {
	return o.ApplyT(func(v HttpRouteAction) *HttpRouteAction {
		return &v
	}).(HttpRouteActionPtrOutput)
}

// The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing Not supported when the URL map is bound to target gRPC proxy.
func (o HttpRouteActionOutput) CorsPolicy() CorsPolicyPtrOutput {
	return o.ApplyT(func(v HttpRouteAction) *CorsPolicy { return v.CorsPolicy }).(CorsPolicyPtrOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests. For the requests impacted by fault injection, timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy.
func (o HttpRouteActionOutput) FaultInjectionPolicy() HttpFaultInjectionPtrOutput {
	return o.ApplyT(func(v HttpRouteAction) *HttpFaultInjection { return v.FaultInjectionPolicy }).(HttpFaultInjectionPtrOutput)
}

// Specifies the maximum duration (timeout) for streams on the selected route. Unlike the timeout field where the timeout duration starts from the time the request has been fully processed (i.e. end-of-stream), the duration in this field is computed from the beginning of the stream until the response has been completely processed, including all retries. A stream that does not complete in this duration is closed. If not specified, will use the largest maxStreamDuration among all backend services associated with the route. This field is only allowed if the Url map is used with backend services with loadBalancingScheme set to INTERNAL_SELF_MANAGED.
func (o HttpRouteActionOutput) MaxStreamDuration() DurationPtrOutput {
	return o.ApplyT(func(v HttpRouteAction) *Duration { return v.MaxStreamDuration }).(DurationPtrOutput)
}

// Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteActionOutput) RequestMirrorPolicy() RequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v HttpRouteAction) *RequestMirrorPolicy { return v.RequestMirrorPolicy }).(RequestMirrorPolicyPtrOutput)
}

// Specifies the retry policy associated with this route. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteActionOutput) RetryPolicy() HttpRetryPolicyPtrOutput {
	return o.ApplyT(func(v HttpRouteAction) *HttpRetryPolicy { return v.RetryPolicy }).(HttpRetryPolicyPtrOutput)
}

// Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries. If not specified, will use the largest timeout among all backend services associated with the route. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteActionOutput) Timeout() DurationPtrOutput {
	return o.ApplyT(func(v HttpRouteAction) *Duration { return v.Timeout }).(DurationPtrOutput)
}

// The spec to modify the URL of the request, prior to forwarding the request to the matched service. urlRewrite is the only action supported in UrlMaps for external HTTP(S) load balancers. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteActionOutput) UrlRewrite() UrlRewritePtrOutput {
	return o.ApplyT(func(v HttpRouteAction) *UrlRewrite { return v.UrlRewrite }).(UrlRewritePtrOutput)
}

// A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number. Once a backendService is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
func (o HttpRouteActionOutput) WeightedBackendServices() WeightedBackendServiceArrayOutput {
	return o.ApplyT(func(v HttpRouteAction) []WeightedBackendService { return v.WeightedBackendServices }).(WeightedBackendServiceArrayOutput)
}

type HttpRouteActionPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteAction)(nil)).Elem()
}

func (o HttpRouteActionPtrOutput) ToHttpRouteActionPtrOutput() HttpRouteActionPtrOutput {
	return o
}

func (o HttpRouteActionPtrOutput) ToHttpRouteActionPtrOutputWithContext(ctx context.Context) HttpRouteActionPtrOutput {
	return o
}

func (o HttpRouteActionPtrOutput) Elem() HttpRouteActionOutput {
	return o.ApplyT(func(v *HttpRouteAction) HttpRouteAction { return *v }).(HttpRouteActionOutput)
}

// The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing Not supported when the URL map is bound to target gRPC proxy.
func (o HttpRouteActionPtrOutput) CorsPolicy() CorsPolicyPtrOutput {
	return o.ApplyT(func(v *HttpRouteAction) *CorsPolicy {
		if v == nil {
			return nil
		}
		return v.CorsPolicy
	}).(CorsPolicyPtrOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests. For the requests impacted by fault injection, timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy.
func (o HttpRouteActionPtrOutput) FaultInjectionPolicy() HttpFaultInjectionPtrOutput {
	return o.ApplyT(func(v *HttpRouteAction) *HttpFaultInjection {
		if v == nil {
			return nil
		}
		return v.FaultInjectionPolicy
	}).(HttpFaultInjectionPtrOutput)
}

// Specifies the maximum duration (timeout) for streams on the selected route. Unlike the timeout field where the timeout duration starts from the time the request has been fully processed (i.e. end-of-stream), the duration in this field is computed from the beginning of the stream until the response has been completely processed, including all retries. A stream that does not complete in this duration is closed. If not specified, will use the largest maxStreamDuration among all backend services associated with the route. This field is only allowed if the Url map is used with backend services with loadBalancingScheme set to INTERNAL_SELF_MANAGED.
func (o HttpRouteActionPtrOutput) MaxStreamDuration() DurationPtrOutput {
	return o.ApplyT(func(v *HttpRouteAction) *Duration {
		if v == nil {
			return nil
		}
		return v.MaxStreamDuration
	}).(DurationPtrOutput)
}

// Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteActionPtrOutput) RequestMirrorPolicy() RequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v *HttpRouteAction) *RequestMirrorPolicy {
		if v == nil {
			return nil
		}
		return v.RequestMirrorPolicy
	}).(RequestMirrorPolicyPtrOutput)
}

// Specifies the retry policy associated with this route. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteActionPtrOutput) RetryPolicy() HttpRetryPolicyPtrOutput {
	return o.ApplyT(func(v *HttpRouteAction) *HttpRetryPolicy {
		if v == nil {
			return nil
		}
		return v.RetryPolicy
	}).(HttpRetryPolicyPtrOutput)
}

// Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries. If not specified, will use the largest timeout among all backend services associated with the route. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteActionPtrOutput) Timeout() DurationPtrOutput {
	return o.ApplyT(func(v *HttpRouteAction) *Duration {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(DurationPtrOutput)
}

// The spec to modify the URL of the request, prior to forwarding the request to the matched service. urlRewrite is the only action supported in UrlMaps for external HTTP(S) load balancers. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteActionPtrOutput) UrlRewrite() UrlRewritePtrOutput {
	return o.ApplyT(func(v *HttpRouteAction) *UrlRewrite {
		if v == nil {
			return nil
		}
		return v.UrlRewrite
	}).(UrlRewritePtrOutput)
}

// A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number. Once a backendService is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
func (o HttpRouteActionPtrOutput) WeightedBackendServices() WeightedBackendServiceArrayOutput {
	return o.ApplyT(func(v *HttpRouteAction) []WeightedBackendService {
		if v == nil {
			return nil
		}
		return v.WeightedBackendServices
	}).(WeightedBackendServiceArrayOutput)
}

type HttpRouteActionResponse struct {
	// The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing Not supported when the URL map is bound to target gRPC proxy.
	CorsPolicy CorsPolicyResponse `pulumi:"corsPolicy"`
	// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests. For the requests impacted by fault injection, timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy.
	FaultInjectionPolicy HttpFaultInjectionResponse `pulumi:"faultInjectionPolicy"`
	// Specifies the maximum duration (timeout) for streams on the selected route. Unlike the timeout field where the timeout duration starts from the time the request has been fully processed (i.e. end-of-stream), the duration in this field is computed from the beginning of the stream until the response has been completely processed, including all retries. A stream that does not complete in this duration is closed. If not specified, will use the largest maxStreamDuration among all backend services associated with the route. This field is only allowed if the Url map is used with backend services with loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	MaxStreamDuration DurationResponse `pulumi:"maxStreamDuration"`
	// Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	RequestMirrorPolicy RequestMirrorPolicyResponse `pulumi:"requestMirrorPolicy"`
	// Specifies the retry policy associated with this route. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	RetryPolicy HttpRetryPolicyResponse `pulumi:"retryPolicy"`
	// Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries. If not specified, will use the largest timeout among all backend services associated with the route. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	Timeout DurationResponse `pulumi:"timeout"`
	// The spec to modify the URL of the request, prior to forwarding the request to the matched service. urlRewrite is the only action supported in UrlMaps for external HTTP(S) load balancers. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	UrlRewrite UrlRewriteResponse `pulumi:"urlRewrite"`
	// A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number. Once a backendService is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
	WeightedBackendServices []WeightedBackendServiceResponse `pulumi:"weightedBackendServices"`
}

// HttpRouteActionResponseInput is an input type that accepts HttpRouteActionResponseArgs and HttpRouteActionResponseOutput values.
// You can construct a concrete instance of `HttpRouteActionResponseInput` via:
//
//          HttpRouteActionResponseArgs{...}
type HttpRouteActionResponseInput interface {
	pulumi.Input

	ToHttpRouteActionResponseOutput() HttpRouteActionResponseOutput
	ToHttpRouteActionResponseOutputWithContext(context.Context) HttpRouteActionResponseOutput
}

type HttpRouteActionResponseArgs struct {
	// The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing Not supported when the URL map is bound to target gRPC proxy.
	CorsPolicy CorsPolicyResponseInput `pulumi:"corsPolicy"`
	// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests. For the requests impacted by fault injection, timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy.
	FaultInjectionPolicy HttpFaultInjectionResponseInput `pulumi:"faultInjectionPolicy"`
	// Specifies the maximum duration (timeout) for streams on the selected route. Unlike the timeout field where the timeout duration starts from the time the request has been fully processed (i.e. end-of-stream), the duration in this field is computed from the beginning of the stream until the response has been completely processed, including all retries. A stream that does not complete in this duration is closed. If not specified, will use the largest maxStreamDuration among all backend services associated with the route. This field is only allowed if the Url map is used with backend services with loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	MaxStreamDuration DurationResponseInput `pulumi:"maxStreamDuration"`
	// Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	RequestMirrorPolicy RequestMirrorPolicyResponseInput `pulumi:"requestMirrorPolicy"`
	// Specifies the retry policy associated with this route. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	RetryPolicy HttpRetryPolicyResponseInput `pulumi:"retryPolicy"`
	// Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries. If not specified, will use the largest timeout among all backend services associated with the route. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	Timeout DurationResponseInput `pulumi:"timeout"`
	// The spec to modify the URL of the request, prior to forwarding the request to the matched service. urlRewrite is the only action supported in UrlMaps for external HTTP(S) load balancers. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	UrlRewrite UrlRewriteResponseInput `pulumi:"urlRewrite"`
	// A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number. Once a backendService is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
	WeightedBackendServices WeightedBackendServiceResponseArrayInput `pulumi:"weightedBackendServices"`
}

func (HttpRouteActionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteActionResponse)(nil)).Elem()
}

func (i HttpRouteActionResponseArgs) ToHttpRouteActionResponseOutput() HttpRouteActionResponseOutput {
	return i.ToHttpRouteActionResponseOutputWithContext(context.Background())
}

func (i HttpRouteActionResponseArgs) ToHttpRouteActionResponseOutputWithContext(ctx context.Context) HttpRouteActionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteActionResponseOutput)
}

func (i HttpRouteActionResponseArgs) ToHttpRouteActionResponsePtrOutput() HttpRouteActionResponsePtrOutput {
	return i.ToHttpRouteActionResponsePtrOutputWithContext(context.Background())
}

func (i HttpRouteActionResponseArgs) ToHttpRouteActionResponsePtrOutputWithContext(ctx context.Context) HttpRouteActionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteActionResponseOutput).ToHttpRouteActionResponsePtrOutputWithContext(ctx)
}

// HttpRouteActionResponsePtrInput is an input type that accepts HttpRouteActionResponseArgs, HttpRouteActionResponsePtr and HttpRouteActionResponsePtrOutput values.
// You can construct a concrete instance of `HttpRouteActionResponsePtrInput` via:
//
//          HttpRouteActionResponseArgs{...}
//
//  or:
//
//          nil
type HttpRouteActionResponsePtrInput interface {
	pulumi.Input

	ToHttpRouteActionResponsePtrOutput() HttpRouteActionResponsePtrOutput
	ToHttpRouteActionResponsePtrOutputWithContext(context.Context) HttpRouteActionResponsePtrOutput
}

type httpRouteActionResponsePtrType HttpRouteActionResponseArgs

func HttpRouteActionResponsePtr(v *HttpRouteActionResponseArgs) HttpRouteActionResponsePtrInput {
	return (*httpRouteActionResponsePtrType)(v)
}

func (*httpRouteActionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteActionResponse)(nil)).Elem()
}

func (i *httpRouteActionResponsePtrType) ToHttpRouteActionResponsePtrOutput() HttpRouteActionResponsePtrOutput {
	return i.ToHttpRouteActionResponsePtrOutputWithContext(context.Background())
}

func (i *httpRouteActionResponsePtrType) ToHttpRouteActionResponsePtrOutputWithContext(ctx context.Context) HttpRouteActionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteActionResponsePtrOutput)
}

type HttpRouteActionResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteActionResponse)(nil)).Elem()
}

func (o HttpRouteActionResponseOutput) ToHttpRouteActionResponseOutput() HttpRouteActionResponseOutput {
	return o
}

func (o HttpRouteActionResponseOutput) ToHttpRouteActionResponseOutputWithContext(ctx context.Context) HttpRouteActionResponseOutput {
	return o
}

func (o HttpRouteActionResponseOutput) ToHttpRouteActionResponsePtrOutput() HttpRouteActionResponsePtrOutput {
	return o.ToHttpRouteActionResponsePtrOutputWithContext(context.Background())
}

func (o HttpRouteActionResponseOutput) ToHttpRouteActionResponsePtrOutputWithContext(ctx context.Context) HttpRouteActionResponsePtrOutput {
	return o.ApplyT(func(v HttpRouteActionResponse) *HttpRouteActionResponse {
		return &v
	}).(HttpRouteActionResponsePtrOutput)
}

// The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing Not supported when the URL map is bound to target gRPC proxy.
func (o HttpRouteActionResponseOutput) CorsPolicy() CorsPolicyResponseOutput {
	return o.ApplyT(func(v HttpRouteActionResponse) CorsPolicyResponse { return v.CorsPolicy }).(CorsPolicyResponseOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests. For the requests impacted by fault injection, timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy.
func (o HttpRouteActionResponseOutput) FaultInjectionPolicy() HttpFaultInjectionResponseOutput {
	return o.ApplyT(func(v HttpRouteActionResponse) HttpFaultInjectionResponse { return v.FaultInjectionPolicy }).(HttpFaultInjectionResponseOutput)
}

// Specifies the maximum duration (timeout) for streams on the selected route. Unlike the timeout field where the timeout duration starts from the time the request has been fully processed (i.e. end-of-stream), the duration in this field is computed from the beginning of the stream until the response has been completely processed, including all retries. A stream that does not complete in this duration is closed. If not specified, will use the largest maxStreamDuration among all backend services associated with the route. This field is only allowed if the Url map is used with backend services with loadBalancingScheme set to INTERNAL_SELF_MANAGED.
func (o HttpRouteActionResponseOutput) MaxStreamDuration() DurationResponseOutput {
	return o.ApplyT(func(v HttpRouteActionResponse) DurationResponse { return v.MaxStreamDuration }).(DurationResponseOutput)
}

// Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteActionResponseOutput) RequestMirrorPolicy() RequestMirrorPolicyResponseOutput {
	return o.ApplyT(func(v HttpRouteActionResponse) RequestMirrorPolicyResponse { return v.RequestMirrorPolicy }).(RequestMirrorPolicyResponseOutput)
}

// Specifies the retry policy associated with this route. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteActionResponseOutput) RetryPolicy() HttpRetryPolicyResponseOutput {
	return o.ApplyT(func(v HttpRouteActionResponse) HttpRetryPolicyResponse { return v.RetryPolicy }).(HttpRetryPolicyResponseOutput)
}

// Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries. If not specified, will use the largest timeout among all backend services associated with the route. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteActionResponseOutput) Timeout() DurationResponseOutput {
	return o.ApplyT(func(v HttpRouteActionResponse) DurationResponse { return v.Timeout }).(DurationResponseOutput)
}

// The spec to modify the URL of the request, prior to forwarding the request to the matched service. urlRewrite is the only action supported in UrlMaps for external HTTP(S) load balancers. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteActionResponseOutput) UrlRewrite() UrlRewriteResponseOutput {
	return o.ApplyT(func(v HttpRouteActionResponse) UrlRewriteResponse { return v.UrlRewrite }).(UrlRewriteResponseOutput)
}

// A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number. Once a backendService is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
func (o HttpRouteActionResponseOutput) WeightedBackendServices() WeightedBackendServiceResponseArrayOutput {
	return o.ApplyT(func(v HttpRouteActionResponse) []WeightedBackendServiceResponse { return v.WeightedBackendServices }).(WeightedBackendServiceResponseArrayOutput)
}

type HttpRouteActionResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpRouteActionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteActionResponse)(nil)).Elem()
}

func (o HttpRouteActionResponsePtrOutput) ToHttpRouteActionResponsePtrOutput() HttpRouteActionResponsePtrOutput {
	return o
}

func (o HttpRouteActionResponsePtrOutput) ToHttpRouteActionResponsePtrOutputWithContext(ctx context.Context) HttpRouteActionResponsePtrOutput {
	return o
}

func (o HttpRouteActionResponsePtrOutput) Elem() HttpRouteActionResponseOutput {
	return o.ApplyT(func(v *HttpRouteActionResponse) HttpRouteActionResponse { return *v }).(HttpRouteActionResponseOutput)
}

// The specification for allowing client side cross-origin requests. Please see W3C Recommendation for Cross Origin Resource Sharing Not supported when the URL map is bound to target gRPC proxy.
func (o HttpRouteActionResponsePtrOutput) CorsPolicy() CorsPolicyResponsePtrOutput {
	return o.ApplyT(func(v *HttpRouteActionResponse) *CorsPolicyResponse {
		if v == nil {
			return nil
		}
		return &v.CorsPolicy
	}).(CorsPolicyResponsePtrOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by Loadbalancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the Loadbalancer for a percentage of requests. For the requests impacted by fault injection, timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy.
func (o HttpRouteActionResponsePtrOutput) FaultInjectionPolicy() HttpFaultInjectionResponsePtrOutput {
	return o.ApplyT(func(v *HttpRouteActionResponse) *HttpFaultInjectionResponse {
		if v == nil {
			return nil
		}
		return &v.FaultInjectionPolicy
	}).(HttpFaultInjectionResponsePtrOutput)
}

// Specifies the maximum duration (timeout) for streams on the selected route. Unlike the timeout field where the timeout duration starts from the time the request has been fully processed (i.e. end-of-stream), the duration in this field is computed from the beginning of the stream until the response has been completely processed, including all retries. A stream that does not complete in this duration is closed. If not specified, will use the largest maxStreamDuration among all backend services associated with the route. This field is only allowed if the Url map is used with backend services with loadBalancingScheme set to INTERNAL_SELF_MANAGED.
func (o HttpRouteActionResponsePtrOutput) MaxStreamDuration() DurationResponsePtrOutput {
	return o.ApplyT(func(v *HttpRouteActionResponse) *DurationResponse {
		if v == nil {
			return nil
		}
		return &v.MaxStreamDuration
	}).(DurationResponsePtrOutput)
}

// Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteActionResponsePtrOutput) RequestMirrorPolicy() RequestMirrorPolicyResponsePtrOutput {
	return o.ApplyT(func(v *HttpRouteActionResponse) *RequestMirrorPolicyResponse {
		if v == nil {
			return nil
		}
		return &v.RequestMirrorPolicy
	}).(RequestMirrorPolicyResponsePtrOutput)
}

// Specifies the retry policy associated with this route. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteActionResponsePtrOutput) RetryPolicy() HttpRetryPolicyResponsePtrOutput {
	return o.ApplyT(func(v *HttpRouteActionResponse) *HttpRetryPolicyResponse {
		if v == nil {
			return nil
		}
		return &v.RetryPolicy
	}).(HttpRetryPolicyResponsePtrOutput)
}

// Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (i.e. end-of-stream) up until the response has been completely processed. Timeout includes all retries. If not specified, will use the largest timeout among all backend services associated with the route. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteActionResponsePtrOutput) Timeout() DurationResponsePtrOutput {
	return o.ApplyT(func(v *HttpRouteActionResponse) *DurationResponse {
		if v == nil {
			return nil
		}
		return &v.Timeout
	}).(DurationResponsePtrOutput)
}

// The spec to modify the URL of the request, prior to forwarding the request to the matched service. urlRewrite is the only action supported in UrlMaps for external HTTP(S) load balancers. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteActionResponsePtrOutput) UrlRewrite() UrlRewriteResponsePtrOutput {
	return o.ApplyT(func(v *HttpRouteActionResponse) *UrlRewriteResponse {
		if v == nil {
			return nil
		}
		return &v.UrlRewrite
	}).(UrlRewriteResponsePtrOutput)
}

// A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number. Once a backendService is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
func (o HttpRouteActionResponsePtrOutput) WeightedBackendServices() WeightedBackendServiceResponseArrayOutput {
	return o.ApplyT(func(v *HttpRouteActionResponse) []WeightedBackendServiceResponse {
		if v == nil {
			return nil
		}
		return v.WeightedBackendServices
	}).(WeightedBackendServiceResponseArrayOutput)
}

// An HttpRouteRule specifies how to match an HTTP request and the corresponding routing action that load balancing proxies will perform.
type HttpRouteRule struct {
	// The short description conveying the intent of this routeRule. The description can have a maximum length of 1024 characters.
	Description *string `pulumi:"description"`
	// Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction specified here are applied before the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].routeAction.weightedBackendService.backendServiceWeightAction[].headerAction Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	HeaderAction *HttpHeaderAction `pulumi:"headerAction"`
	// The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
	MatchRules []HttpRouteRuleMatch `pulumi:"matchRules"`
	// For routeRules within a given pathMatcher, priority determines the order in which load balancer will interpret routeRules. RouteRules are evaluated in order of priority, from the lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied. You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 0 and 2147483647 inclusive. Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
	Priority *int `pulumi:"priority"`
	// In response to a matching matchRule, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of urlRedirect, service or routeAction.weightedBackendService must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a routeRule's routeAction.
	RouteAction *HttpRouteAction `pulumi:"routeAction"`
	// The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
	Service *string `pulumi:"service"`
	// When this rule is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
	UrlRedirect *HttpRedirectAction `pulumi:"urlRedirect"`
}

// HttpRouteRuleInput is an input type that accepts HttpRouteRuleArgs and HttpRouteRuleOutput values.
// You can construct a concrete instance of `HttpRouteRuleInput` via:
//
//          HttpRouteRuleArgs{...}
type HttpRouteRuleInput interface {
	pulumi.Input

	ToHttpRouteRuleOutput() HttpRouteRuleOutput
	ToHttpRouteRuleOutputWithContext(context.Context) HttpRouteRuleOutput
}

// An HttpRouteRule specifies how to match an HTTP request and the corresponding routing action that load balancing proxies will perform.
type HttpRouteRuleArgs struct {
	// The short description conveying the intent of this routeRule. The description can have a maximum length of 1024 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction specified here are applied before the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].routeAction.weightedBackendService.backendServiceWeightAction[].headerAction Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	HeaderAction HttpHeaderActionPtrInput `pulumi:"headerAction"`
	// The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
	MatchRules HttpRouteRuleMatchArrayInput `pulumi:"matchRules"`
	// For routeRules within a given pathMatcher, priority determines the order in which load balancer will interpret routeRules. RouteRules are evaluated in order of priority, from the lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied. You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 0 and 2147483647 inclusive. Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// In response to a matching matchRule, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of urlRedirect, service or routeAction.weightedBackendService must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a routeRule's routeAction.
	RouteAction HttpRouteActionPtrInput `pulumi:"routeAction"`
	// The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// When this rule is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
	UrlRedirect HttpRedirectActionPtrInput `pulumi:"urlRedirect"`
}

func (HttpRouteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRule)(nil)).Elem()
}

func (i HttpRouteRuleArgs) ToHttpRouteRuleOutput() HttpRouteRuleOutput {
	return i.ToHttpRouteRuleOutputWithContext(context.Background())
}

func (i HttpRouteRuleArgs) ToHttpRouteRuleOutputWithContext(ctx context.Context) HttpRouteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleOutput)
}

// HttpRouteRuleArrayInput is an input type that accepts HttpRouteRuleArray and HttpRouteRuleArrayOutput values.
// You can construct a concrete instance of `HttpRouteRuleArrayInput` via:
//
//          HttpRouteRuleArray{ HttpRouteRuleArgs{...} }
type HttpRouteRuleArrayInput interface {
	pulumi.Input

	ToHttpRouteRuleArrayOutput() HttpRouteRuleArrayOutput
	ToHttpRouteRuleArrayOutputWithContext(context.Context) HttpRouteRuleArrayOutput
}

type HttpRouteRuleArray []HttpRouteRuleInput

func (HttpRouteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRule)(nil)).Elem()
}

func (i HttpRouteRuleArray) ToHttpRouteRuleArrayOutput() HttpRouteRuleArrayOutput {
	return i.ToHttpRouteRuleArrayOutputWithContext(context.Background())
}

func (i HttpRouteRuleArray) ToHttpRouteRuleArrayOutputWithContext(ctx context.Context) HttpRouteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleArrayOutput)
}

// An HttpRouteRule specifies how to match an HTTP request and the corresponding routing action that load balancing proxies will perform.
type HttpRouteRuleOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRule)(nil)).Elem()
}

func (o HttpRouteRuleOutput) ToHttpRouteRuleOutput() HttpRouteRuleOutput {
	return o
}

func (o HttpRouteRuleOutput) ToHttpRouteRuleOutputWithContext(ctx context.Context) HttpRouteRuleOutput {
	return o
}

// The short description conveying the intent of this routeRule. The description can have a maximum length of 1024 characters.
func (o HttpRouteRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction specified here are applied before the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].routeAction.weightedBackendService.backendServiceWeightAction[].headerAction Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteRuleOutput) HeaderAction() HttpHeaderActionPtrOutput {
	return o.ApplyT(func(v HttpRouteRule) *HttpHeaderAction { return v.HeaderAction }).(HttpHeaderActionPtrOutput)
}

// The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
func (o HttpRouteRuleOutput) MatchRules() HttpRouteRuleMatchArrayOutput {
	return o.ApplyT(func(v HttpRouteRule) []HttpRouteRuleMatch { return v.MatchRules }).(HttpRouteRuleMatchArrayOutput)
}

// For routeRules within a given pathMatcher, priority determines the order in which load balancer will interpret routeRules. RouteRules are evaluated in order of priority, from the lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied. You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 0 and 2147483647 inclusive. Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
func (o HttpRouteRuleOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteRule) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// In response to a matching matchRule, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of urlRedirect, service or routeAction.weightedBackendService must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a routeRule's routeAction.
func (o HttpRouteRuleOutput) RouteAction() HttpRouteActionPtrOutput {
	return o.ApplyT(func(v HttpRouteRule) *HttpRouteAction { return v.RouteAction }).(HttpRouteActionPtrOutput)
}

// The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
func (o HttpRouteRuleOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRule) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// When this rule is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
func (o HttpRouteRuleOutput) UrlRedirect() HttpRedirectActionPtrOutput {
	return o.ApplyT(func(v HttpRouteRule) *HttpRedirectAction { return v.UrlRedirect }).(HttpRedirectActionPtrOutput)
}

type HttpRouteRuleArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRule)(nil)).Elem()
}

func (o HttpRouteRuleArrayOutput) ToHttpRouteRuleArrayOutput() HttpRouteRuleArrayOutput {
	return o
}

func (o HttpRouteRuleArrayOutput) ToHttpRouteRuleArrayOutputWithContext(ctx context.Context) HttpRouteRuleArrayOutput {
	return o
}

func (o HttpRouteRuleArrayOutput) Index(i pulumi.IntInput) HttpRouteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteRule {
		return vs[0].([]HttpRouteRule)[vs[1].(int)]
	}).(HttpRouteRuleOutput)
}

// HttpRouteRuleMatch specifies a set of criteria for matching requests to an HttpRouteRule. All specified criteria must be satisfied for a match to occur.
type HttpRouteRuleMatch struct {
	// For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL. fullPathMatch must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
	FullPathMatch *string `pulumi:"fullPathMatch"`
	// Specifies a list of header match criteria, all of which must match corresponding headers in the request.
	HeaderMatches []HttpHeaderMatch `pulumi:"headerMatches"`
	// Specifies that prefixMatch and fullPathMatch matches are case sensitive. The default value is false. ignoreCase must not be used with regexMatch. Not supported when the URL map is bound to target gRPC proxy.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. When there is a match, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. If multiple metadataFilters are specified, all of them need to be satisfied in order to be considered a match. metadataFilters specified here will be applied after those specified in ForwardingRule that refers to the UrlMap this HttpRouteRuleMatch belongs to. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	MetadataFilters []MetadataFilter `pulumi:"metadataFilters"`
	// For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /. The value must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
	PrefixMatch *string `pulumi:"prefixMatch"`
	// Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request. Not supported when the URL map is bound to target gRPC proxy.
	QueryParameterMatches []HttpQueryParameterMatch `pulumi:"queryParameterMatches"`
	// For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar please see github.com/google/re2/wiki/Syntax Only one of prefixMatch, fullPathMatch or regexMatch must be specified. Note that regexMatch only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	RegexMatch *string `pulumi:"regexMatch"`
}

// HttpRouteRuleMatchInput is an input type that accepts HttpRouteRuleMatchArgs and HttpRouteRuleMatchOutput values.
// You can construct a concrete instance of `HttpRouteRuleMatchInput` via:
//
//          HttpRouteRuleMatchArgs{...}
type HttpRouteRuleMatchInput interface {
	pulumi.Input

	ToHttpRouteRuleMatchOutput() HttpRouteRuleMatchOutput
	ToHttpRouteRuleMatchOutputWithContext(context.Context) HttpRouteRuleMatchOutput
}

// HttpRouteRuleMatch specifies a set of criteria for matching requests to an HttpRouteRule. All specified criteria must be satisfied for a match to occur.
type HttpRouteRuleMatchArgs struct {
	// For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL. fullPathMatch must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
	FullPathMatch pulumi.StringPtrInput `pulumi:"fullPathMatch"`
	// Specifies a list of header match criteria, all of which must match corresponding headers in the request.
	HeaderMatches HttpHeaderMatchArrayInput `pulumi:"headerMatches"`
	// Specifies that prefixMatch and fullPathMatch matches are case sensitive. The default value is false. ignoreCase must not be used with regexMatch. Not supported when the URL map is bound to target gRPC proxy.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. When there is a match, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. If multiple metadataFilters are specified, all of them need to be satisfied in order to be considered a match. metadataFilters specified here will be applied after those specified in ForwardingRule that refers to the UrlMap this HttpRouteRuleMatch belongs to. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	MetadataFilters MetadataFilterArrayInput `pulumi:"metadataFilters"`
	// For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /. The value must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
	PrefixMatch pulumi.StringPtrInput `pulumi:"prefixMatch"`
	// Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request. Not supported when the URL map is bound to target gRPC proxy.
	QueryParameterMatches HttpQueryParameterMatchArrayInput `pulumi:"queryParameterMatches"`
	// For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar please see github.com/google/re2/wiki/Syntax Only one of prefixMatch, fullPathMatch or regexMatch must be specified. Note that regexMatch only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	RegexMatch pulumi.StringPtrInput `pulumi:"regexMatch"`
}

func (HttpRouteRuleMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleMatch)(nil)).Elem()
}

func (i HttpRouteRuleMatchArgs) ToHttpRouteRuleMatchOutput() HttpRouteRuleMatchOutput {
	return i.ToHttpRouteRuleMatchOutputWithContext(context.Background())
}

func (i HttpRouteRuleMatchArgs) ToHttpRouteRuleMatchOutputWithContext(ctx context.Context) HttpRouteRuleMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleMatchOutput)
}

// HttpRouteRuleMatchArrayInput is an input type that accepts HttpRouteRuleMatchArray and HttpRouteRuleMatchArrayOutput values.
// You can construct a concrete instance of `HttpRouteRuleMatchArrayInput` via:
//
//          HttpRouteRuleMatchArray{ HttpRouteRuleMatchArgs{...} }
type HttpRouteRuleMatchArrayInput interface {
	pulumi.Input

	ToHttpRouteRuleMatchArrayOutput() HttpRouteRuleMatchArrayOutput
	ToHttpRouteRuleMatchArrayOutputWithContext(context.Context) HttpRouteRuleMatchArrayOutput
}

type HttpRouteRuleMatchArray []HttpRouteRuleMatchInput

func (HttpRouteRuleMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRuleMatch)(nil)).Elem()
}

func (i HttpRouteRuleMatchArray) ToHttpRouteRuleMatchArrayOutput() HttpRouteRuleMatchArrayOutput {
	return i.ToHttpRouteRuleMatchArrayOutputWithContext(context.Background())
}

func (i HttpRouteRuleMatchArray) ToHttpRouteRuleMatchArrayOutputWithContext(ctx context.Context) HttpRouteRuleMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleMatchArrayOutput)
}

// HttpRouteRuleMatch specifies a set of criteria for matching requests to an HttpRouteRule. All specified criteria must be satisfied for a match to occur.
type HttpRouteRuleMatchOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleMatch)(nil)).Elem()
}

func (o HttpRouteRuleMatchOutput) ToHttpRouteRuleMatchOutput() HttpRouteRuleMatchOutput {
	return o
}

func (o HttpRouteRuleMatchOutput) ToHttpRouteRuleMatchOutputWithContext(ctx context.Context) HttpRouteRuleMatchOutput {
	return o
}

// For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL. fullPathMatch must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
func (o HttpRouteRuleMatchOutput) FullPathMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatch) *string { return v.FullPathMatch }).(pulumi.StringPtrOutput)
}

// Specifies a list of header match criteria, all of which must match corresponding headers in the request.
func (o HttpRouteRuleMatchOutput) HeaderMatches() HttpHeaderMatchArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleMatch) []HttpHeaderMatch { return v.HeaderMatches }).(HttpHeaderMatchArrayOutput)
}

// Specifies that prefixMatch and fullPathMatch matches are case sensitive. The default value is false. ignoreCase must not be used with regexMatch. Not supported when the URL map is bound to target gRPC proxy.
func (o HttpRouteRuleMatchOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatch) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. When there is a match, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. If multiple metadataFilters are specified, all of them need to be satisfied in order to be considered a match. metadataFilters specified here will be applied after those specified in ForwardingRule that refers to the UrlMap this HttpRouteRuleMatch belongs to. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteRuleMatchOutput) MetadataFilters() MetadataFilterArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleMatch) []MetadataFilter { return v.MetadataFilters }).(MetadataFilterArrayOutput)
}

// For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /. The value must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
func (o HttpRouteRuleMatchOutput) PrefixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatch) *string { return v.PrefixMatch }).(pulumi.StringPtrOutput)
}

// Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request. Not supported when the URL map is bound to target gRPC proxy.
func (o HttpRouteRuleMatchOutput) QueryParameterMatches() HttpQueryParameterMatchArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleMatch) []HttpQueryParameterMatch { return v.QueryParameterMatches }).(HttpQueryParameterMatchArrayOutput)
}

// For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar please see github.com/google/re2/wiki/Syntax Only one of prefixMatch, fullPathMatch or regexMatch must be specified. Note that regexMatch only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
func (o HttpRouteRuleMatchOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleMatch) *string { return v.RegexMatch }).(pulumi.StringPtrOutput)
}

type HttpRouteRuleMatchArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRuleMatch)(nil)).Elem()
}

func (o HttpRouteRuleMatchArrayOutput) ToHttpRouteRuleMatchArrayOutput() HttpRouteRuleMatchArrayOutput {
	return o
}

func (o HttpRouteRuleMatchArrayOutput) ToHttpRouteRuleMatchArrayOutputWithContext(ctx context.Context) HttpRouteRuleMatchArrayOutput {
	return o
}

func (o HttpRouteRuleMatchArrayOutput) Index(i pulumi.IntInput) HttpRouteRuleMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteRuleMatch {
		return vs[0].([]HttpRouteRuleMatch)[vs[1].(int)]
	}).(HttpRouteRuleMatchOutput)
}

// HttpRouteRuleMatch specifies a set of criteria for matching requests to an HttpRouteRule. All specified criteria must be satisfied for a match to occur.
type HttpRouteRuleMatchResponse struct {
	// For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL. fullPathMatch must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
	FullPathMatch string `pulumi:"fullPathMatch"`
	// Specifies a list of header match criteria, all of which must match corresponding headers in the request.
	HeaderMatches []HttpHeaderMatchResponse `pulumi:"headerMatches"`
	// Specifies that prefixMatch and fullPathMatch matches are case sensitive. The default value is false. ignoreCase must not be used with regexMatch. Not supported when the URL map is bound to target gRPC proxy.
	IgnoreCase bool `pulumi:"ignoreCase"`
	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. When there is a match, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. If multiple metadataFilters are specified, all of them need to be satisfied in order to be considered a match. metadataFilters specified here will be applied after those specified in ForwardingRule that refers to the UrlMap this HttpRouteRuleMatch belongs to. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	MetadataFilters []MetadataFilterResponse `pulumi:"metadataFilters"`
	// For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /. The value must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
	PrefixMatch string `pulumi:"prefixMatch"`
	// Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request. Not supported when the URL map is bound to target gRPC proxy.
	QueryParameterMatches []HttpQueryParameterMatchResponse `pulumi:"queryParameterMatches"`
	// For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar please see github.com/google/re2/wiki/Syntax Only one of prefixMatch, fullPathMatch or regexMatch must be specified. Note that regexMatch only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	RegexMatch string `pulumi:"regexMatch"`
}

// HttpRouteRuleMatchResponseInput is an input type that accepts HttpRouteRuleMatchResponseArgs and HttpRouteRuleMatchResponseOutput values.
// You can construct a concrete instance of `HttpRouteRuleMatchResponseInput` via:
//
//          HttpRouteRuleMatchResponseArgs{...}
type HttpRouteRuleMatchResponseInput interface {
	pulumi.Input

	ToHttpRouteRuleMatchResponseOutput() HttpRouteRuleMatchResponseOutput
	ToHttpRouteRuleMatchResponseOutputWithContext(context.Context) HttpRouteRuleMatchResponseOutput
}

// HttpRouteRuleMatch specifies a set of criteria for matching requests to an HttpRouteRule. All specified criteria must be satisfied for a match to occur.
type HttpRouteRuleMatchResponseArgs struct {
	// For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL. fullPathMatch must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
	FullPathMatch pulumi.StringInput `pulumi:"fullPathMatch"`
	// Specifies a list of header match criteria, all of which must match corresponding headers in the request.
	HeaderMatches HttpHeaderMatchResponseArrayInput `pulumi:"headerMatches"`
	// Specifies that prefixMatch and fullPathMatch matches are case sensitive. The default value is false. ignoreCase must not be used with regexMatch. Not supported when the URL map is bound to target gRPC proxy.
	IgnoreCase pulumi.BoolInput `pulumi:"ignoreCase"`
	// Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. When there is a match, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. If multiple metadataFilters are specified, all of them need to be satisfied in order to be considered a match. metadataFilters specified here will be applied after those specified in ForwardingRule that refers to the UrlMap this HttpRouteRuleMatch belongs to. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	MetadataFilters MetadataFilterResponseArrayInput `pulumi:"metadataFilters"`
	// For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /. The value must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
	PrefixMatch pulumi.StringInput `pulumi:"prefixMatch"`
	// Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request. Not supported when the URL map is bound to target gRPC proxy.
	QueryParameterMatches HttpQueryParameterMatchResponseArrayInput `pulumi:"queryParameterMatches"`
	// For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar please see github.com/google/re2/wiki/Syntax Only one of prefixMatch, fullPathMatch or regexMatch must be specified. Note that regexMatch only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	RegexMatch pulumi.StringInput `pulumi:"regexMatch"`
}

func (HttpRouteRuleMatchResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleMatchResponse)(nil)).Elem()
}

func (i HttpRouteRuleMatchResponseArgs) ToHttpRouteRuleMatchResponseOutput() HttpRouteRuleMatchResponseOutput {
	return i.ToHttpRouteRuleMatchResponseOutputWithContext(context.Background())
}

func (i HttpRouteRuleMatchResponseArgs) ToHttpRouteRuleMatchResponseOutputWithContext(ctx context.Context) HttpRouteRuleMatchResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleMatchResponseOutput)
}

// HttpRouteRuleMatchResponseArrayInput is an input type that accepts HttpRouteRuleMatchResponseArray and HttpRouteRuleMatchResponseArrayOutput values.
// You can construct a concrete instance of `HttpRouteRuleMatchResponseArrayInput` via:
//
//          HttpRouteRuleMatchResponseArray{ HttpRouteRuleMatchResponseArgs{...} }
type HttpRouteRuleMatchResponseArrayInput interface {
	pulumi.Input

	ToHttpRouteRuleMatchResponseArrayOutput() HttpRouteRuleMatchResponseArrayOutput
	ToHttpRouteRuleMatchResponseArrayOutputWithContext(context.Context) HttpRouteRuleMatchResponseArrayOutput
}

type HttpRouteRuleMatchResponseArray []HttpRouteRuleMatchResponseInput

func (HttpRouteRuleMatchResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRuleMatchResponse)(nil)).Elem()
}

func (i HttpRouteRuleMatchResponseArray) ToHttpRouteRuleMatchResponseArrayOutput() HttpRouteRuleMatchResponseArrayOutput {
	return i.ToHttpRouteRuleMatchResponseArrayOutputWithContext(context.Background())
}

func (i HttpRouteRuleMatchResponseArray) ToHttpRouteRuleMatchResponseArrayOutputWithContext(ctx context.Context) HttpRouteRuleMatchResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleMatchResponseArrayOutput)
}

// HttpRouteRuleMatch specifies a set of criteria for matching requests to an HttpRouteRule. All specified criteria must be satisfied for a match to occur.
type HttpRouteRuleMatchResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleMatchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleMatchResponse)(nil)).Elem()
}

func (o HttpRouteRuleMatchResponseOutput) ToHttpRouteRuleMatchResponseOutput() HttpRouteRuleMatchResponseOutput {
	return o
}

func (o HttpRouteRuleMatchResponseOutput) ToHttpRouteRuleMatchResponseOutputWithContext(ctx context.Context) HttpRouteRuleMatchResponseOutput {
	return o
}

// For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL. fullPathMatch must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
func (o HttpRouteRuleMatchResponseOutput) FullPathMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchResponse) string { return v.FullPathMatch }).(pulumi.StringOutput)
}

// Specifies a list of header match criteria, all of which must match corresponding headers in the request.
func (o HttpRouteRuleMatchResponseOutput) HeaderMatches() HttpHeaderMatchResponseArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchResponse) []HttpHeaderMatchResponse { return v.HeaderMatches }).(HttpHeaderMatchResponseArrayOutput)
}

// Specifies that prefixMatch and fullPathMatch matches are case sensitive. The default value is false. ignoreCase must not be used with regexMatch. Not supported when the URL map is bound to target gRPC proxy.
func (o HttpRouteRuleMatchResponseOutput) IgnoreCase() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchResponse) bool { return v.IgnoreCase }).(pulumi.BoolOutput)
}

// Opaque filter criteria used by Loadbalancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to Loadbalancer, xDS clients present node metadata. When there is a match, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. If multiple metadataFilters are specified, all of them need to be satisfied in order to be considered a match. metadataFilters specified here will be applied after those specified in ForwardingRule that refers to the UrlMap this HttpRouteRuleMatch belongs to. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteRuleMatchResponseOutput) MetadataFilters() MetadataFilterResponseArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchResponse) []MetadataFilterResponse { return v.MetadataFilters }).(MetadataFilterResponseArrayOutput)
}

// For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /. The value must be between 1 and 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
func (o HttpRouteRuleMatchResponseOutput) PrefixMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchResponse) string { return v.PrefixMatch }).(pulumi.StringOutput)
}

// Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request. Not supported when the URL map is bound to target gRPC proxy.
func (o HttpRouteRuleMatchResponseOutput) QueryParameterMatches() HttpQueryParameterMatchResponseArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchResponse) []HttpQueryParameterMatchResponse { return v.QueryParameterMatches }).(HttpQueryParameterMatchResponseArrayOutput)
}

// For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For regular expression grammar please see github.com/google/re2/wiki/Syntax Only one of prefixMatch, fullPathMatch or regexMatch must be specified. Note that regexMatch only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
func (o HttpRouteRuleMatchResponseOutput) RegexMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteRuleMatchResponse) string { return v.RegexMatch }).(pulumi.StringOutput)
}

type HttpRouteRuleMatchResponseArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleMatchResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRuleMatchResponse)(nil)).Elem()
}

func (o HttpRouteRuleMatchResponseArrayOutput) ToHttpRouteRuleMatchResponseArrayOutput() HttpRouteRuleMatchResponseArrayOutput {
	return o
}

func (o HttpRouteRuleMatchResponseArrayOutput) ToHttpRouteRuleMatchResponseArrayOutputWithContext(ctx context.Context) HttpRouteRuleMatchResponseArrayOutput {
	return o
}

func (o HttpRouteRuleMatchResponseArrayOutput) Index(i pulumi.IntInput) HttpRouteRuleMatchResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteRuleMatchResponse {
		return vs[0].([]HttpRouteRuleMatchResponse)[vs[1].(int)]
	}).(HttpRouteRuleMatchResponseOutput)
}

// An HttpRouteRule specifies how to match an HTTP request and the corresponding routing action that load balancing proxies will perform.
type HttpRouteRuleResponse struct {
	// The short description conveying the intent of this routeRule. The description can have a maximum length of 1024 characters.
	Description string `pulumi:"description"`
	// Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction specified here are applied before the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].routeAction.weightedBackendService.backendServiceWeightAction[].headerAction Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	HeaderAction HttpHeaderActionResponse `pulumi:"headerAction"`
	// The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
	MatchRules []HttpRouteRuleMatchResponse `pulumi:"matchRules"`
	// For routeRules within a given pathMatcher, priority determines the order in which load balancer will interpret routeRules. RouteRules are evaluated in order of priority, from the lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied. You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 0 and 2147483647 inclusive. Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
	Priority int `pulumi:"priority"`
	// In response to a matching matchRule, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of urlRedirect, service or routeAction.weightedBackendService must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a routeRule's routeAction.
	RouteAction HttpRouteActionResponse `pulumi:"routeAction"`
	// The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
	Service string `pulumi:"service"`
	// When this rule is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
	UrlRedirect HttpRedirectActionResponse `pulumi:"urlRedirect"`
}

// HttpRouteRuleResponseInput is an input type that accepts HttpRouteRuleResponseArgs and HttpRouteRuleResponseOutput values.
// You can construct a concrete instance of `HttpRouteRuleResponseInput` via:
//
//          HttpRouteRuleResponseArgs{...}
type HttpRouteRuleResponseInput interface {
	pulumi.Input

	ToHttpRouteRuleResponseOutput() HttpRouteRuleResponseOutput
	ToHttpRouteRuleResponseOutputWithContext(context.Context) HttpRouteRuleResponseOutput
}

// An HttpRouteRule specifies how to match an HTTP request and the corresponding routing action that load balancing proxies will perform.
type HttpRouteRuleResponseArgs struct {
	// The short description conveying the intent of this routeRule. The description can have a maximum length of 1024 characters.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction specified here are applied before the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].routeAction.weightedBackendService.backendServiceWeightAction[].headerAction Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	HeaderAction HttpHeaderActionResponseInput `pulumi:"headerAction"`
	// The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
	MatchRules HttpRouteRuleMatchResponseArrayInput `pulumi:"matchRules"`
	// For routeRules within a given pathMatcher, priority determines the order in which load balancer will interpret routeRules. RouteRules are evaluated in order of priority, from the lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied. You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 0 and 2147483647 inclusive. Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
	Priority pulumi.IntInput `pulumi:"priority"`
	// In response to a matching matchRule, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of urlRedirect, service or routeAction.weightedBackendService must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a routeRule's routeAction.
	RouteAction HttpRouteActionResponseInput `pulumi:"routeAction"`
	// The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
	Service pulumi.StringInput `pulumi:"service"`
	// When this rule is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
	UrlRedirect HttpRedirectActionResponseInput `pulumi:"urlRedirect"`
}

func (HttpRouteRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleResponse)(nil)).Elem()
}

func (i HttpRouteRuleResponseArgs) ToHttpRouteRuleResponseOutput() HttpRouteRuleResponseOutput {
	return i.ToHttpRouteRuleResponseOutputWithContext(context.Background())
}

func (i HttpRouteRuleResponseArgs) ToHttpRouteRuleResponseOutputWithContext(ctx context.Context) HttpRouteRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleResponseOutput)
}

// HttpRouteRuleResponseArrayInput is an input type that accepts HttpRouteRuleResponseArray and HttpRouteRuleResponseArrayOutput values.
// You can construct a concrete instance of `HttpRouteRuleResponseArrayInput` via:
//
//          HttpRouteRuleResponseArray{ HttpRouteRuleResponseArgs{...} }
type HttpRouteRuleResponseArrayInput interface {
	pulumi.Input

	ToHttpRouteRuleResponseArrayOutput() HttpRouteRuleResponseArrayOutput
	ToHttpRouteRuleResponseArrayOutputWithContext(context.Context) HttpRouteRuleResponseArrayOutput
}

type HttpRouteRuleResponseArray []HttpRouteRuleResponseInput

func (HttpRouteRuleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRuleResponse)(nil)).Elem()
}

func (i HttpRouteRuleResponseArray) ToHttpRouteRuleResponseArrayOutput() HttpRouteRuleResponseArrayOutput {
	return i.ToHttpRouteRuleResponseArrayOutputWithContext(context.Background())
}

func (i HttpRouteRuleResponseArray) ToHttpRouteRuleResponseArrayOutputWithContext(ctx context.Context) HttpRouteRuleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleResponseArrayOutput)
}

// An HttpRouteRule specifies how to match an HTTP request and the corresponding routing action that load balancing proxies will perform.
type HttpRouteRuleResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleResponse)(nil)).Elem()
}

func (o HttpRouteRuleResponseOutput) ToHttpRouteRuleResponseOutput() HttpRouteRuleResponseOutput {
	return o
}

func (o HttpRouteRuleResponseOutput) ToHttpRouteRuleResponseOutputWithContext(ctx context.Context) HttpRouteRuleResponseOutput {
	return o
}

// The short description conveying the intent of this routeRule. The description can have a maximum length of 1024 characters.
func (o HttpRouteRuleResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteRuleResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction specified here are applied before the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].routeAction.weightedBackendService.backendServiceWeightAction[].headerAction Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o HttpRouteRuleResponseOutput) HeaderAction() HttpHeaderActionResponseOutput {
	return o.ApplyT(func(v HttpRouteRuleResponse) HttpHeaderActionResponse { return v.HeaderAction }).(HttpHeaderActionResponseOutput)
}

// The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
func (o HttpRouteRuleResponseOutput) MatchRules() HttpRouteRuleMatchResponseArrayOutput {
	return o.ApplyT(func(v HttpRouteRuleResponse) []HttpRouteRuleMatchResponse { return v.MatchRules }).(HttpRouteRuleMatchResponseArrayOutput)
}

// For routeRules within a given pathMatcher, priority determines the order in which load balancer will interpret routeRules. RouteRules are evaluated in order of priority, from the lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied. You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number between 0 and 2147483647 inclusive. Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
func (o HttpRouteRuleResponseOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v HttpRouteRuleResponse) int { return v.Priority }).(pulumi.IntOutput)
}

// In response to a matching matchRule, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of urlRedirect, service or routeAction.weightedBackendService must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a routeRule's routeAction.
func (o HttpRouteRuleResponseOutput) RouteAction() HttpRouteActionResponseOutput {
	return o.ApplyT(func(v HttpRouteRuleResponse) HttpRouteActionResponse { return v.RouteAction }).(HttpRouteActionResponseOutput)
}

// The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
func (o HttpRouteRuleResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteRuleResponse) string { return v.Service }).(pulumi.StringOutput)
}

// When this rule is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
func (o HttpRouteRuleResponseOutput) UrlRedirect() HttpRedirectActionResponseOutput {
	return o.ApplyT(func(v HttpRouteRuleResponse) HttpRedirectActionResponse { return v.UrlRedirect }).(HttpRedirectActionResponseOutput)
}

type HttpRouteRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRuleResponse)(nil)).Elem()
}

func (o HttpRouteRuleResponseArrayOutput) ToHttpRouteRuleResponseArrayOutput() HttpRouteRuleResponseArrayOutput {
	return o
}

func (o HttpRouteRuleResponseArrayOutput) ToHttpRouteRuleResponseArrayOutputWithContext(ctx context.Context) HttpRouteRuleResponseArrayOutput {
	return o
}

func (o HttpRouteRuleResponseArrayOutput) Index(i pulumi.IntInput) HttpRouteRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteRuleResponse {
		return vs[0].([]HttpRouteRuleResponse)[vs[1].(int)]
	}).(HttpRouteRuleResponseOutput)
}

// The parameters of the raw disk image.
type ImageRawDisk struct {
	// The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
	ContainerType *string `pulumi:"containerType"`
	// The full Google Cloud Storage URL where the disk image is stored. In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
	Source *string `pulumi:"source"`
}

// ImageRawDiskInput is an input type that accepts ImageRawDiskArgs and ImageRawDiskOutput values.
// You can construct a concrete instance of `ImageRawDiskInput` via:
//
//          ImageRawDiskArgs{...}
type ImageRawDiskInput interface {
	pulumi.Input

	ToImageRawDiskOutput() ImageRawDiskOutput
	ToImageRawDiskOutputWithContext(context.Context) ImageRawDiskOutput
}

// The parameters of the raw disk image.
type ImageRawDiskArgs struct {
	// The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
	ContainerType *ImageRawDiskContainerType `pulumi:"containerType"`
	// The full Google Cloud Storage URL where the disk image is stored. In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (ImageRawDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRawDisk)(nil)).Elem()
}

func (i ImageRawDiskArgs) ToImageRawDiskOutput() ImageRawDiskOutput {
	return i.ToImageRawDiskOutputWithContext(context.Background())
}

func (i ImageRawDiskArgs) ToImageRawDiskOutputWithContext(ctx context.Context) ImageRawDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRawDiskOutput)
}

func (i ImageRawDiskArgs) ToImageRawDiskPtrOutput() ImageRawDiskPtrOutput {
	return i.ToImageRawDiskPtrOutputWithContext(context.Background())
}

func (i ImageRawDiskArgs) ToImageRawDiskPtrOutputWithContext(ctx context.Context) ImageRawDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRawDiskOutput).ToImageRawDiskPtrOutputWithContext(ctx)
}

// ImageRawDiskPtrInput is an input type that accepts ImageRawDiskArgs, ImageRawDiskPtr and ImageRawDiskPtrOutput values.
// You can construct a concrete instance of `ImageRawDiskPtrInput` via:
//
//          ImageRawDiskArgs{...}
//
//  or:
//
//          nil
type ImageRawDiskPtrInput interface {
	pulumi.Input

	ToImageRawDiskPtrOutput() ImageRawDiskPtrOutput
	ToImageRawDiskPtrOutputWithContext(context.Context) ImageRawDiskPtrOutput
}

type imageRawDiskPtrType ImageRawDiskArgs

func ImageRawDiskPtr(v *ImageRawDiskArgs) ImageRawDiskPtrInput {
	return (*imageRawDiskPtrType)(v)
}

func (*imageRawDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRawDisk)(nil)).Elem()
}

func (i *imageRawDiskPtrType) ToImageRawDiskPtrOutput() ImageRawDiskPtrOutput {
	return i.ToImageRawDiskPtrOutputWithContext(context.Background())
}

func (i *imageRawDiskPtrType) ToImageRawDiskPtrOutputWithContext(ctx context.Context) ImageRawDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRawDiskPtrOutput)
}

// The parameters of the raw disk image.
type ImageRawDiskOutput struct{ *pulumi.OutputState }

func (ImageRawDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRawDisk)(nil)).Elem()
}

func (o ImageRawDiskOutput) ToImageRawDiskOutput() ImageRawDiskOutput {
	return o
}

func (o ImageRawDiskOutput) ToImageRawDiskOutputWithContext(ctx context.Context) ImageRawDiskOutput {
	return o
}

func (o ImageRawDiskOutput) ToImageRawDiskPtrOutput() ImageRawDiskPtrOutput {
	return o.ToImageRawDiskPtrOutputWithContext(context.Background())
}

func (o ImageRawDiskOutput) ToImageRawDiskPtrOutputWithContext(ctx context.Context) ImageRawDiskPtrOutput {
	return o.ApplyT(func(v ImageRawDisk) *ImageRawDisk {
		return &v
	}).(ImageRawDiskPtrOutput)
}

// The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
func (o ImageRawDiskOutput) ContainerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRawDisk) *string { return v.ContainerType }).(pulumi.StringPtrOutput)
}

// The full Google Cloud Storage URL where the disk image is stored. In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
func (o ImageRawDiskOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRawDisk) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type ImageRawDiskPtrOutput struct{ *pulumi.OutputState }

func (ImageRawDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRawDisk)(nil)).Elem()
}

func (o ImageRawDiskPtrOutput) ToImageRawDiskPtrOutput() ImageRawDiskPtrOutput {
	return o
}

func (o ImageRawDiskPtrOutput) ToImageRawDiskPtrOutputWithContext(ctx context.Context) ImageRawDiskPtrOutput {
	return o
}

func (o ImageRawDiskPtrOutput) Elem() ImageRawDiskOutput {
	return o.ApplyT(func(v *ImageRawDisk) ImageRawDisk { return *v }).(ImageRawDiskOutput)
}

// The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
func (o ImageRawDiskPtrOutput) ContainerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRawDisk) *string {
		if v == nil {
			return nil
		}
		return v.ContainerType
	}).(pulumi.StringPtrOutput)
}

// The full Google Cloud Storage URL where the disk image is stored. In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
func (o ImageRawDiskPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRawDisk) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

// The parameters of the raw disk image.
type ImageRawDiskResponse struct {
	// The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
	ContainerType string `pulumi:"containerType"`
	// The full Google Cloud Storage URL where the disk image is stored. In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
	Source string `pulumi:"source"`
}

// ImageRawDiskResponseInput is an input type that accepts ImageRawDiskResponseArgs and ImageRawDiskResponseOutput values.
// You can construct a concrete instance of `ImageRawDiskResponseInput` via:
//
//          ImageRawDiskResponseArgs{...}
type ImageRawDiskResponseInput interface {
	pulumi.Input

	ToImageRawDiskResponseOutput() ImageRawDiskResponseOutput
	ToImageRawDiskResponseOutputWithContext(context.Context) ImageRawDiskResponseOutput
}

// The parameters of the raw disk image.
type ImageRawDiskResponseArgs struct {
	// The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
	ContainerType pulumi.StringInput `pulumi:"containerType"`
	// The full Google Cloud Storage URL where the disk image is stored. In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
	Source pulumi.StringInput `pulumi:"source"`
}

func (ImageRawDiskResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRawDiskResponse)(nil)).Elem()
}

func (i ImageRawDiskResponseArgs) ToImageRawDiskResponseOutput() ImageRawDiskResponseOutput {
	return i.ToImageRawDiskResponseOutputWithContext(context.Background())
}

func (i ImageRawDiskResponseArgs) ToImageRawDiskResponseOutputWithContext(ctx context.Context) ImageRawDiskResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRawDiskResponseOutput)
}

func (i ImageRawDiskResponseArgs) ToImageRawDiskResponsePtrOutput() ImageRawDiskResponsePtrOutput {
	return i.ToImageRawDiskResponsePtrOutputWithContext(context.Background())
}

func (i ImageRawDiskResponseArgs) ToImageRawDiskResponsePtrOutputWithContext(ctx context.Context) ImageRawDiskResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRawDiskResponseOutput).ToImageRawDiskResponsePtrOutputWithContext(ctx)
}

// ImageRawDiskResponsePtrInput is an input type that accepts ImageRawDiskResponseArgs, ImageRawDiskResponsePtr and ImageRawDiskResponsePtrOutput values.
// You can construct a concrete instance of `ImageRawDiskResponsePtrInput` via:
//
//          ImageRawDiskResponseArgs{...}
//
//  or:
//
//          nil
type ImageRawDiskResponsePtrInput interface {
	pulumi.Input

	ToImageRawDiskResponsePtrOutput() ImageRawDiskResponsePtrOutput
	ToImageRawDiskResponsePtrOutputWithContext(context.Context) ImageRawDiskResponsePtrOutput
}

type imageRawDiskResponsePtrType ImageRawDiskResponseArgs

func ImageRawDiskResponsePtr(v *ImageRawDiskResponseArgs) ImageRawDiskResponsePtrInput {
	return (*imageRawDiskResponsePtrType)(v)
}

func (*imageRawDiskResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRawDiskResponse)(nil)).Elem()
}

func (i *imageRawDiskResponsePtrType) ToImageRawDiskResponsePtrOutput() ImageRawDiskResponsePtrOutput {
	return i.ToImageRawDiskResponsePtrOutputWithContext(context.Background())
}

func (i *imageRawDiskResponsePtrType) ToImageRawDiskResponsePtrOutputWithContext(ctx context.Context) ImageRawDiskResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRawDiskResponsePtrOutput)
}

// The parameters of the raw disk image.
type ImageRawDiskResponseOutput struct{ *pulumi.OutputState }

func (ImageRawDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRawDiskResponse)(nil)).Elem()
}

func (o ImageRawDiskResponseOutput) ToImageRawDiskResponseOutput() ImageRawDiskResponseOutput {
	return o
}

func (o ImageRawDiskResponseOutput) ToImageRawDiskResponseOutputWithContext(ctx context.Context) ImageRawDiskResponseOutput {
	return o
}

func (o ImageRawDiskResponseOutput) ToImageRawDiskResponsePtrOutput() ImageRawDiskResponsePtrOutput {
	return o.ToImageRawDiskResponsePtrOutputWithContext(context.Background())
}

func (o ImageRawDiskResponseOutput) ToImageRawDiskResponsePtrOutputWithContext(ctx context.Context) ImageRawDiskResponsePtrOutput {
	return o.ApplyT(func(v ImageRawDiskResponse) *ImageRawDiskResponse {
		return &v
	}).(ImageRawDiskResponsePtrOutput)
}

// The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
func (o ImageRawDiskResponseOutput) ContainerType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRawDiskResponse) string { return v.ContainerType }).(pulumi.StringOutput)
}

// The full Google Cloud Storage URL where the disk image is stored. In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
func (o ImageRawDiskResponseOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRawDiskResponse) string { return v.Source }).(pulumi.StringOutput)
}

type ImageRawDiskResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageRawDiskResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRawDiskResponse)(nil)).Elem()
}

func (o ImageRawDiskResponsePtrOutput) ToImageRawDiskResponsePtrOutput() ImageRawDiskResponsePtrOutput {
	return o
}

func (o ImageRawDiskResponsePtrOutput) ToImageRawDiskResponsePtrOutputWithContext(ctx context.Context) ImageRawDiskResponsePtrOutput {
	return o
}

func (o ImageRawDiskResponsePtrOutput) Elem() ImageRawDiskResponseOutput {
	return o.ApplyT(func(v *ImageRawDiskResponse) ImageRawDiskResponse { return *v }).(ImageRawDiskResponseOutput)
}

// The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
func (o ImageRawDiskResponsePtrOutput) ContainerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRawDiskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ContainerType
	}).(pulumi.StringPtrOutput)
}

// The full Google Cloud Storage URL where the disk image is stored. In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
func (o ImageRawDiskResponsePtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRawDiskResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(pulumi.StringPtrOutput)
}

// Initial State for shielded instance, these are public keys which are safe to store in public
type InitialStateConfig struct {
	// The Key Database (db).
	Dbs []FileContentBuffer `pulumi:"dbs"`
	// The forbidden key database (dbx).
	Dbxs []FileContentBuffer `pulumi:"dbxs"`
	// The Key Exchange Key (KEK).
	Keks []FileContentBuffer `pulumi:"keks"`
	// The Platform Key (PK).
	Pk *FileContentBuffer `pulumi:"pk"`
}

// InitialStateConfigInput is an input type that accepts InitialStateConfigArgs and InitialStateConfigOutput values.
// You can construct a concrete instance of `InitialStateConfigInput` via:
//
//          InitialStateConfigArgs{...}
type InitialStateConfigInput interface {
	pulumi.Input

	ToInitialStateConfigOutput() InitialStateConfigOutput
	ToInitialStateConfigOutputWithContext(context.Context) InitialStateConfigOutput
}

// Initial State for shielded instance, these are public keys which are safe to store in public
type InitialStateConfigArgs struct {
	// The Key Database (db).
	Dbs FileContentBufferArrayInput `pulumi:"dbs"`
	// The forbidden key database (dbx).
	Dbxs FileContentBufferArrayInput `pulumi:"dbxs"`
	// The Key Exchange Key (KEK).
	Keks FileContentBufferArrayInput `pulumi:"keks"`
	// The Platform Key (PK).
	Pk FileContentBufferPtrInput `pulumi:"pk"`
}

func (InitialStateConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InitialStateConfig)(nil)).Elem()
}

func (i InitialStateConfigArgs) ToInitialStateConfigOutput() InitialStateConfigOutput {
	return i.ToInitialStateConfigOutputWithContext(context.Background())
}

func (i InitialStateConfigArgs) ToInitialStateConfigOutputWithContext(ctx context.Context) InitialStateConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InitialStateConfigOutput)
}

func (i InitialStateConfigArgs) ToInitialStateConfigPtrOutput() InitialStateConfigPtrOutput {
	return i.ToInitialStateConfigPtrOutputWithContext(context.Background())
}

func (i InitialStateConfigArgs) ToInitialStateConfigPtrOutputWithContext(ctx context.Context) InitialStateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InitialStateConfigOutput).ToInitialStateConfigPtrOutputWithContext(ctx)
}

// InitialStateConfigPtrInput is an input type that accepts InitialStateConfigArgs, InitialStateConfigPtr and InitialStateConfigPtrOutput values.
// You can construct a concrete instance of `InitialStateConfigPtrInput` via:
//
//          InitialStateConfigArgs{...}
//
//  or:
//
//          nil
type InitialStateConfigPtrInput interface {
	pulumi.Input

	ToInitialStateConfigPtrOutput() InitialStateConfigPtrOutput
	ToInitialStateConfigPtrOutputWithContext(context.Context) InitialStateConfigPtrOutput
}

type initialStateConfigPtrType InitialStateConfigArgs

func InitialStateConfigPtr(v *InitialStateConfigArgs) InitialStateConfigPtrInput {
	return (*initialStateConfigPtrType)(v)
}

func (*initialStateConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InitialStateConfig)(nil)).Elem()
}

func (i *initialStateConfigPtrType) ToInitialStateConfigPtrOutput() InitialStateConfigPtrOutput {
	return i.ToInitialStateConfigPtrOutputWithContext(context.Background())
}

func (i *initialStateConfigPtrType) ToInitialStateConfigPtrOutputWithContext(ctx context.Context) InitialStateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InitialStateConfigPtrOutput)
}

// Initial State for shielded instance, these are public keys which are safe to store in public
type InitialStateConfigOutput struct{ *pulumi.OutputState }

func (InitialStateConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InitialStateConfig)(nil)).Elem()
}

func (o InitialStateConfigOutput) ToInitialStateConfigOutput() InitialStateConfigOutput {
	return o
}

func (o InitialStateConfigOutput) ToInitialStateConfigOutputWithContext(ctx context.Context) InitialStateConfigOutput {
	return o
}

func (o InitialStateConfigOutput) ToInitialStateConfigPtrOutput() InitialStateConfigPtrOutput {
	return o.ToInitialStateConfigPtrOutputWithContext(context.Background())
}

func (o InitialStateConfigOutput) ToInitialStateConfigPtrOutputWithContext(ctx context.Context) InitialStateConfigPtrOutput {
	return o.ApplyT(func(v InitialStateConfig) *InitialStateConfig {
		return &v
	}).(InitialStateConfigPtrOutput)
}

// The Key Database (db).
func (o InitialStateConfigOutput) Dbs() FileContentBufferArrayOutput {
	return o.ApplyT(func(v InitialStateConfig) []FileContentBuffer { return v.Dbs }).(FileContentBufferArrayOutput)
}

// The forbidden key database (dbx).
func (o InitialStateConfigOutput) Dbxs() FileContentBufferArrayOutput {
	return o.ApplyT(func(v InitialStateConfig) []FileContentBuffer { return v.Dbxs }).(FileContentBufferArrayOutput)
}

// The Key Exchange Key (KEK).
func (o InitialStateConfigOutput) Keks() FileContentBufferArrayOutput {
	return o.ApplyT(func(v InitialStateConfig) []FileContentBuffer { return v.Keks }).(FileContentBufferArrayOutput)
}

// The Platform Key (PK).
func (o InitialStateConfigOutput) Pk() FileContentBufferPtrOutput {
	return o.ApplyT(func(v InitialStateConfig) *FileContentBuffer { return v.Pk }).(FileContentBufferPtrOutput)
}

type InitialStateConfigPtrOutput struct{ *pulumi.OutputState }

func (InitialStateConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InitialStateConfig)(nil)).Elem()
}

func (o InitialStateConfigPtrOutput) ToInitialStateConfigPtrOutput() InitialStateConfigPtrOutput {
	return o
}

func (o InitialStateConfigPtrOutput) ToInitialStateConfigPtrOutputWithContext(ctx context.Context) InitialStateConfigPtrOutput {
	return o
}

func (o InitialStateConfigPtrOutput) Elem() InitialStateConfigOutput {
	return o.ApplyT(func(v *InitialStateConfig) InitialStateConfig { return *v }).(InitialStateConfigOutput)
}

// The Key Database (db).
func (o InitialStateConfigPtrOutput) Dbs() FileContentBufferArrayOutput {
	return o.ApplyT(func(v *InitialStateConfig) []FileContentBuffer {
		if v == nil {
			return nil
		}
		return v.Dbs
	}).(FileContentBufferArrayOutput)
}

// The forbidden key database (dbx).
func (o InitialStateConfigPtrOutput) Dbxs() FileContentBufferArrayOutput {
	return o.ApplyT(func(v *InitialStateConfig) []FileContentBuffer {
		if v == nil {
			return nil
		}
		return v.Dbxs
	}).(FileContentBufferArrayOutput)
}

// The Key Exchange Key (KEK).
func (o InitialStateConfigPtrOutput) Keks() FileContentBufferArrayOutput {
	return o.ApplyT(func(v *InitialStateConfig) []FileContentBuffer {
		if v == nil {
			return nil
		}
		return v.Keks
	}).(FileContentBufferArrayOutput)
}

// The Platform Key (PK).
func (o InitialStateConfigPtrOutput) Pk() FileContentBufferPtrOutput {
	return o.ApplyT(func(v *InitialStateConfig) *FileContentBuffer {
		if v == nil {
			return nil
		}
		return v.Pk
	}).(FileContentBufferPtrOutput)
}

// Initial State for shielded instance, these are public keys which are safe to store in public
type InitialStateConfigResponse struct {
	// The Key Database (db).
	Dbs []FileContentBufferResponse `pulumi:"dbs"`
	// The forbidden key database (dbx).
	Dbxs []FileContentBufferResponse `pulumi:"dbxs"`
	// The Key Exchange Key (KEK).
	Keks []FileContentBufferResponse `pulumi:"keks"`
	// The Platform Key (PK).
	Pk FileContentBufferResponse `pulumi:"pk"`
}

// InitialStateConfigResponseInput is an input type that accepts InitialStateConfigResponseArgs and InitialStateConfigResponseOutput values.
// You can construct a concrete instance of `InitialStateConfigResponseInput` via:
//
//          InitialStateConfigResponseArgs{...}
type InitialStateConfigResponseInput interface {
	pulumi.Input

	ToInitialStateConfigResponseOutput() InitialStateConfigResponseOutput
	ToInitialStateConfigResponseOutputWithContext(context.Context) InitialStateConfigResponseOutput
}

// Initial State for shielded instance, these are public keys which are safe to store in public
type InitialStateConfigResponseArgs struct {
	// The Key Database (db).
	Dbs FileContentBufferResponseArrayInput `pulumi:"dbs"`
	// The forbidden key database (dbx).
	Dbxs FileContentBufferResponseArrayInput `pulumi:"dbxs"`
	// The Key Exchange Key (KEK).
	Keks FileContentBufferResponseArrayInput `pulumi:"keks"`
	// The Platform Key (PK).
	Pk FileContentBufferResponseInput `pulumi:"pk"`
}

func (InitialStateConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InitialStateConfigResponse)(nil)).Elem()
}

func (i InitialStateConfigResponseArgs) ToInitialStateConfigResponseOutput() InitialStateConfigResponseOutput {
	return i.ToInitialStateConfigResponseOutputWithContext(context.Background())
}

func (i InitialStateConfigResponseArgs) ToInitialStateConfigResponseOutputWithContext(ctx context.Context) InitialStateConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InitialStateConfigResponseOutput)
}

func (i InitialStateConfigResponseArgs) ToInitialStateConfigResponsePtrOutput() InitialStateConfigResponsePtrOutput {
	return i.ToInitialStateConfigResponsePtrOutputWithContext(context.Background())
}

func (i InitialStateConfigResponseArgs) ToInitialStateConfigResponsePtrOutputWithContext(ctx context.Context) InitialStateConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InitialStateConfigResponseOutput).ToInitialStateConfigResponsePtrOutputWithContext(ctx)
}

// InitialStateConfigResponsePtrInput is an input type that accepts InitialStateConfigResponseArgs, InitialStateConfigResponsePtr and InitialStateConfigResponsePtrOutput values.
// You can construct a concrete instance of `InitialStateConfigResponsePtrInput` via:
//
//          InitialStateConfigResponseArgs{...}
//
//  or:
//
//          nil
type InitialStateConfigResponsePtrInput interface {
	pulumi.Input

	ToInitialStateConfigResponsePtrOutput() InitialStateConfigResponsePtrOutput
	ToInitialStateConfigResponsePtrOutputWithContext(context.Context) InitialStateConfigResponsePtrOutput
}

type initialStateConfigResponsePtrType InitialStateConfigResponseArgs

func InitialStateConfigResponsePtr(v *InitialStateConfigResponseArgs) InitialStateConfigResponsePtrInput {
	return (*initialStateConfigResponsePtrType)(v)
}

func (*initialStateConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InitialStateConfigResponse)(nil)).Elem()
}

func (i *initialStateConfigResponsePtrType) ToInitialStateConfigResponsePtrOutput() InitialStateConfigResponsePtrOutput {
	return i.ToInitialStateConfigResponsePtrOutputWithContext(context.Background())
}

func (i *initialStateConfigResponsePtrType) ToInitialStateConfigResponsePtrOutputWithContext(ctx context.Context) InitialStateConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InitialStateConfigResponsePtrOutput)
}

// Initial State for shielded instance, these are public keys which are safe to store in public
type InitialStateConfigResponseOutput struct{ *pulumi.OutputState }

func (InitialStateConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InitialStateConfigResponse)(nil)).Elem()
}

func (o InitialStateConfigResponseOutput) ToInitialStateConfigResponseOutput() InitialStateConfigResponseOutput {
	return o
}

func (o InitialStateConfigResponseOutput) ToInitialStateConfigResponseOutputWithContext(ctx context.Context) InitialStateConfigResponseOutput {
	return o
}

func (o InitialStateConfigResponseOutput) ToInitialStateConfigResponsePtrOutput() InitialStateConfigResponsePtrOutput {
	return o.ToInitialStateConfigResponsePtrOutputWithContext(context.Background())
}

func (o InitialStateConfigResponseOutput) ToInitialStateConfigResponsePtrOutputWithContext(ctx context.Context) InitialStateConfigResponsePtrOutput {
	return o.ApplyT(func(v InitialStateConfigResponse) *InitialStateConfigResponse {
		return &v
	}).(InitialStateConfigResponsePtrOutput)
}

// The Key Database (db).
func (o InitialStateConfigResponseOutput) Dbs() FileContentBufferResponseArrayOutput {
	return o.ApplyT(func(v InitialStateConfigResponse) []FileContentBufferResponse { return v.Dbs }).(FileContentBufferResponseArrayOutput)
}

// The forbidden key database (dbx).
func (o InitialStateConfigResponseOutput) Dbxs() FileContentBufferResponseArrayOutput {
	return o.ApplyT(func(v InitialStateConfigResponse) []FileContentBufferResponse { return v.Dbxs }).(FileContentBufferResponseArrayOutput)
}

// The Key Exchange Key (KEK).
func (o InitialStateConfigResponseOutput) Keks() FileContentBufferResponseArrayOutput {
	return o.ApplyT(func(v InitialStateConfigResponse) []FileContentBufferResponse { return v.Keks }).(FileContentBufferResponseArrayOutput)
}

// The Platform Key (PK).
func (o InitialStateConfigResponseOutput) Pk() FileContentBufferResponseOutput {
	return o.ApplyT(func(v InitialStateConfigResponse) FileContentBufferResponse { return v.Pk }).(FileContentBufferResponseOutput)
}

type InitialStateConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (InitialStateConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InitialStateConfigResponse)(nil)).Elem()
}

func (o InitialStateConfigResponsePtrOutput) ToInitialStateConfigResponsePtrOutput() InitialStateConfigResponsePtrOutput {
	return o
}

func (o InitialStateConfigResponsePtrOutput) ToInitialStateConfigResponsePtrOutputWithContext(ctx context.Context) InitialStateConfigResponsePtrOutput {
	return o
}

func (o InitialStateConfigResponsePtrOutput) Elem() InitialStateConfigResponseOutput {
	return o.ApplyT(func(v *InitialStateConfigResponse) InitialStateConfigResponse { return *v }).(InitialStateConfigResponseOutput)
}

// The Key Database (db).
func (o InitialStateConfigResponsePtrOutput) Dbs() FileContentBufferResponseArrayOutput {
	return o.ApplyT(func(v *InitialStateConfigResponse) []FileContentBufferResponse {
		if v == nil {
			return nil
		}
		return v.Dbs
	}).(FileContentBufferResponseArrayOutput)
}

// The forbidden key database (dbx).
func (o InitialStateConfigResponsePtrOutput) Dbxs() FileContentBufferResponseArrayOutput {
	return o.ApplyT(func(v *InitialStateConfigResponse) []FileContentBufferResponse {
		if v == nil {
			return nil
		}
		return v.Dbxs
	}).(FileContentBufferResponseArrayOutput)
}

// The Key Exchange Key (KEK).
func (o InitialStateConfigResponsePtrOutput) Keks() FileContentBufferResponseArrayOutput {
	return o.ApplyT(func(v *InitialStateConfigResponse) []FileContentBufferResponse {
		if v == nil {
			return nil
		}
		return v.Keks
	}).(FileContentBufferResponseArrayOutput)
}

// The Platform Key (PK).
func (o InitialStateConfigResponsePtrOutput) Pk() FileContentBufferResponsePtrOutput {
	return o.ApplyT(func(v *InitialStateConfigResponse) *FileContentBufferResponse {
		if v == nil {
			return nil
		}
		return &v.Pk
	}).(FileContentBufferResponsePtrOutput)
}

type InstanceGroupManagerActionsSummaryResponse struct {
	// The total number of instances in the managed instance group that are scheduled to be abandoned. Abandoning an instance removes it from the managed instance group without deleting it.
	Abandoning int `pulumi:"abandoning"`
	// The number of instances in the managed instance group that are scheduled to be created or are currently being created. If the group fails to create any of these instances, it tries again until it creates the instance successfully. If you have disabled creation retries, this field will not be populated; instead, the creatingWithoutRetries field will be populated.
	Creating int `pulumi:"creating"`
	// The number of instances that the managed instance group will attempt to create. The group attempts to create each instance only once. If the group fails to create any of these instances, it decreases the group's targetSize value accordingly.
	CreatingWithoutRetries int `pulumi:"creatingWithoutRetries"`
	// The number of instances in the managed instance group that are scheduled to be deleted or are currently being deleted.
	Deleting int `pulumi:"deleting"`
	// The number of instances in the managed instance group that are running and have no scheduled actions.
	None int `pulumi:"none"`
	// The number of instances in the managed instance group that are scheduled to be recreated or are currently being being recreated. Recreating an instance deletes the existing root persistent disk and creates a new disk from the image that is defined in the instance template.
	Recreating int `pulumi:"recreating"`
	// The number of instances in the managed instance group that are being reconfigured with properties that do not require a restart or a recreate action. For example, setting or removing target pools for the instance.
	Refreshing int `pulumi:"refreshing"`
	// The number of instances in the managed instance group that are scheduled to be restarted or are currently being restarted.
	Restarting int `pulumi:"restarting"`
	// The number of instances in the managed instance group that are being verified. See the managedInstances[].currentAction property in the listManagedInstances method documentation.
	Verifying int `pulumi:"verifying"`
}

// InstanceGroupManagerActionsSummaryResponseInput is an input type that accepts InstanceGroupManagerActionsSummaryResponseArgs and InstanceGroupManagerActionsSummaryResponseOutput values.
// You can construct a concrete instance of `InstanceGroupManagerActionsSummaryResponseInput` via:
//
//          InstanceGroupManagerActionsSummaryResponseArgs{...}
type InstanceGroupManagerActionsSummaryResponseInput interface {
	pulumi.Input

	ToInstanceGroupManagerActionsSummaryResponseOutput() InstanceGroupManagerActionsSummaryResponseOutput
	ToInstanceGroupManagerActionsSummaryResponseOutputWithContext(context.Context) InstanceGroupManagerActionsSummaryResponseOutput
}

type InstanceGroupManagerActionsSummaryResponseArgs struct {
	// The total number of instances in the managed instance group that are scheduled to be abandoned. Abandoning an instance removes it from the managed instance group without deleting it.
	Abandoning pulumi.IntInput `pulumi:"abandoning"`
	// The number of instances in the managed instance group that are scheduled to be created or are currently being created. If the group fails to create any of these instances, it tries again until it creates the instance successfully. If you have disabled creation retries, this field will not be populated; instead, the creatingWithoutRetries field will be populated.
	Creating pulumi.IntInput `pulumi:"creating"`
	// The number of instances that the managed instance group will attempt to create. The group attempts to create each instance only once. If the group fails to create any of these instances, it decreases the group's targetSize value accordingly.
	CreatingWithoutRetries pulumi.IntInput `pulumi:"creatingWithoutRetries"`
	// The number of instances in the managed instance group that are scheduled to be deleted or are currently being deleted.
	Deleting pulumi.IntInput `pulumi:"deleting"`
	// The number of instances in the managed instance group that are running and have no scheduled actions.
	None pulumi.IntInput `pulumi:"none"`
	// The number of instances in the managed instance group that are scheduled to be recreated or are currently being being recreated. Recreating an instance deletes the existing root persistent disk and creates a new disk from the image that is defined in the instance template.
	Recreating pulumi.IntInput `pulumi:"recreating"`
	// The number of instances in the managed instance group that are being reconfigured with properties that do not require a restart or a recreate action. For example, setting or removing target pools for the instance.
	Refreshing pulumi.IntInput `pulumi:"refreshing"`
	// The number of instances in the managed instance group that are scheduled to be restarted or are currently being restarted.
	Restarting pulumi.IntInput `pulumi:"restarting"`
	// The number of instances in the managed instance group that are being verified. See the managedInstances[].currentAction property in the listManagedInstances method documentation.
	Verifying pulumi.IntInput `pulumi:"verifying"`
}

func (InstanceGroupManagerActionsSummaryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerActionsSummaryResponse)(nil)).Elem()
}

func (i InstanceGroupManagerActionsSummaryResponseArgs) ToInstanceGroupManagerActionsSummaryResponseOutput() InstanceGroupManagerActionsSummaryResponseOutput {
	return i.ToInstanceGroupManagerActionsSummaryResponseOutputWithContext(context.Background())
}

func (i InstanceGroupManagerActionsSummaryResponseArgs) ToInstanceGroupManagerActionsSummaryResponseOutputWithContext(ctx context.Context) InstanceGroupManagerActionsSummaryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerActionsSummaryResponseOutput)
}

func (i InstanceGroupManagerActionsSummaryResponseArgs) ToInstanceGroupManagerActionsSummaryResponsePtrOutput() InstanceGroupManagerActionsSummaryResponsePtrOutput {
	return i.ToInstanceGroupManagerActionsSummaryResponsePtrOutputWithContext(context.Background())
}

func (i InstanceGroupManagerActionsSummaryResponseArgs) ToInstanceGroupManagerActionsSummaryResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerActionsSummaryResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerActionsSummaryResponseOutput).ToInstanceGroupManagerActionsSummaryResponsePtrOutputWithContext(ctx)
}

// InstanceGroupManagerActionsSummaryResponsePtrInput is an input type that accepts InstanceGroupManagerActionsSummaryResponseArgs, InstanceGroupManagerActionsSummaryResponsePtr and InstanceGroupManagerActionsSummaryResponsePtrOutput values.
// You can construct a concrete instance of `InstanceGroupManagerActionsSummaryResponsePtrInput` via:
//
//          InstanceGroupManagerActionsSummaryResponseArgs{...}
//
//  or:
//
//          nil
type InstanceGroupManagerActionsSummaryResponsePtrInput interface {
	pulumi.Input

	ToInstanceGroupManagerActionsSummaryResponsePtrOutput() InstanceGroupManagerActionsSummaryResponsePtrOutput
	ToInstanceGroupManagerActionsSummaryResponsePtrOutputWithContext(context.Context) InstanceGroupManagerActionsSummaryResponsePtrOutput
}

type instanceGroupManagerActionsSummaryResponsePtrType InstanceGroupManagerActionsSummaryResponseArgs

func InstanceGroupManagerActionsSummaryResponsePtr(v *InstanceGroupManagerActionsSummaryResponseArgs) InstanceGroupManagerActionsSummaryResponsePtrInput {
	return (*instanceGroupManagerActionsSummaryResponsePtrType)(v)
}

func (*instanceGroupManagerActionsSummaryResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerActionsSummaryResponse)(nil)).Elem()
}

func (i *instanceGroupManagerActionsSummaryResponsePtrType) ToInstanceGroupManagerActionsSummaryResponsePtrOutput() InstanceGroupManagerActionsSummaryResponsePtrOutput {
	return i.ToInstanceGroupManagerActionsSummaryResponsePtrOutputWithContext(context.Background())
}

func (i *instanceGroupManagerActionsSummaryResponsePtrType) ToInstanceGroupManagerActionsSummaryResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerActionsSummaryResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerActionsSummaryResponsePtrOutput)
}

type InstanceGroupManagerActionsSummaryResponseOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerActionsSummaryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerActionsSummaryResponse)(nil)).Elem()
}

func (o InstanceGroupManagerActionsSummaryResponseOutput) ToInstanceGroupManagerActionsSummaryResponseOutput() InstanceGroupManagerActionsSummaryResponseOutput {
	return o
}

func (o InstanceGroupManagerActionsSummaryResponseOutput) ToInstanceGroupManagerActionsSummaryResponseOutputWithContext(ctx context.Context) InstanceGroupManagerActionsSummaryResponseOutput {
	return o
}

func (o InstanceGroupManagerActionsSummaryResponseOutput) ToInstanceGroupManagerActionsSummaryResponsePtrOutput() InstanceGroupManagerActionsSummaryResponsePtrOutput {
	return o.ToInstanceGroupManagerActionsSummaryResponsePtrOutputWithContext(context.Background())
}

func (o InstanceGroupManagerActionsSummaryResponseOutput) ToInstanceGroupManagerActionsSummaryResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerActionsSummaryResponsePtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerActionsSummaryResponse) *InstanceGroupManagerActionsSummaryResponse {
		return &v
	}).(InstanceGroupManagerActionsSummaryResponsePtrOutput)
}

// The total number of instances in the managed instance group that are scheduled to be abandoned. Abandoning an instance removes it from the managed instance group without deleting it.
func (o InstanceGroupManagerActionsSummaryResponseOutput) Abandoning() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceGroupManagerActionsSummaryResponse) int { return v.Abandoning }).(pulumi.IntOutput)
}

// The number of instances in the managed instance group that are scheduled to be created or are currently being created. If the group fails to create any of these instances, it tries again until it creates the instance successfully. If you have disabled creation retries, this field will not be populated; instead, the creatingWithoutRetries field will be populated.
func (o InstanceGroupManagerActionsSummaryResponseOutput) Creating() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceGroupManagerActionsSummaryResponse) int { return v.Creating }).(pulumi.IntOutput)
}

// The number of instances that the managed instance group will attempt to create. The group attempts to create each instance only once. If the group fails to create any of these instances, it decreases the group's targetSize value accordingly.
func (o InstanceGroupManagerActionsSummaryResponseOutput) CreatingWithoutRetries() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceGroupManagerActionsSummaryResponse) int { return v.CreatingWithoutRetries }).(pulumi.IntOutput)
}

// The number of instances in the managed instance group that are scheduled to be deleted or are currently being deleted.
func (o InstanceGroupManagerActionsSummaryResponseOutput) Deleting() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceGroupManagerActionsSummaryResponse) int { return v.Deleting }).(pulumi.IntOutput)
}

// The number of instances in the managed instance group that are running and have no scheduled actions.
func (o InstanceGroupManagerActionsSummaryResponseOutput) None() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceGroupManagerActionsSummaryResponse) int { return v.None }).(pulumi.IntOutput)
}

// The number of instances in the managed instance group that are scheduled to be recreated or are currently being being recreated. Recreating an instance deletes the existing root persistent disk and creates a new disk from the image that is defined in the instance template.
func (o InstanceGroupManagerActionsSummaryResponseOutput) Recreating() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceGroupManagerActionsSummaryResponse) int { return v.Recreating }).(pulumi.IntOutput)
}

// The number of instances in the managed instance group that are being reconfigured with properties that do not require a restart or a recreate action. For example, setting or removing target pools for the instance.
func (o InstanceGroupManagerActionsSummaryResponseOutput) Refreshing() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceGroupManagerActionsSummaryResponse) int { return v.Refreshing }).(pulumi.IntOutput)
}

// The number of instances in the managed instance group that are scheduled to be restarted or are currently being restarted.
func (o InstanceGroupManagerActionsSummaryResponseOutput) Restarting() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceGroupManagerActionsSummaryResponse) int { return v.Restarting }).(pulumi.IntOutput)
}

// The number of instances in the managed instance group that are being verified. See the managedInstances[].currentAction property in the listManagedInstances method documentation.
func (o InstanceGroupManagerActionsSummaryResponseOutput) Verifying() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceGroupManagerActionsSummaryResponse) int { return v.Verifying }).(pulumi.IntOutput)
}

type InstanceGroupManagerActionsSummaryResponsePtrOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerActionsSummaryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerActionsSummaryResponse)(nil)).Elem()
}

func (o InstanceGroupManagerActionsSummaryResponsePtrOutput) ToInstanceGroupManagerActionsSummaryResponsePtrOutput() InstanceGroupManagerActionsSummaryResponsePtrOutput {
	return o
}

func (o InstanceGroupManagerActionsSummaryResponsePtrOutput) ToInstanceGroupManagerActionsSummaryResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerActionsSummaryResponsePtrOutput {
	return o
}

func (o InstanceGroupManagerActionsSummaryResponsePtrOutput) Elem() InstanceGroupManagerActionsSummaryResponseOutput {
	return o.ApplyT(func(v *InstanceGroupManagerActionsSummaryResponse) InstanceGroupManagerActionsSummaryResponse {
		return *v
	}).(InstanceGroupManagerActionsSummaryResponseOutput)
}

// The total number of instances in the managed instance group that are scheduled to be abandoned. Abandoning an instance removes it from the managed instance group without deleting it.
func (o InstanceGroupManagerActionsSummaryResponsePtrOutput) Abandoning() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerActionsSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Abandoning
	}).(pulumi.IntPtrOutput)
}

// The number of instances in the managed instance group that are scheduled to be created or are currently being created. If the group fails to create any of these instances, it tries again until it creates the instance successfully. If you have disabled creation retries, this field will not be populated; instead, the creatingWithoutRetries field will be populated.
func (o InstanceGroupManagerActionsSummaryResponsePtrOutput) Creating() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerActionsSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Creating
	}).(pulumi.IntPtrOutput)
}

// The number of instances that the managed instance group will attempt to create. The group attempts to create each instance only once. If the group fails to create any of these instances, it decreases the group's targetSize value accordingly.
func (o InstanceGroupManagerActionsSummaryResponsePtrOutput) CreatingWithoutRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerActionsSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.CreatingWithoutRetries
	}).(pulumi.IntPtrOutput)
}

// The number of instances in the managed instance group that are scheduled to be deleted or are currently being deleted.
func (o InstanceGroupManagerActionsSummaryResponsePtrOutput) Deleting() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerActionsSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Deleting
	}).(pulumi.IntPtrOutput)
}

// The number of instances in the managed instance group that are running and have no scheduled actions.
func (o InstanceGroupManagerActionsSummaryResponsePtrOutput) None() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerActionsSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.None
	}).(pulumi.IntPtrOutput)
}

// The number of instances in the managed instance group that are scheduled to be recreated or are currently being being recreated. Recreating an instance deletes the existing root persistent disk and creates a new disk from the image that is defined in the instance template.
func (o InstanceGroupManagerActionsSummaryResponsePtrOutput) Recreating() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerActionsSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Recreating
	}).(pulumi.IntPtrOutput)
}

// The number of instances in the managed instance group that are being reconfigured with properties that do not require a restart or a recreate action. For example, setting or removing target pools for the instance.
func (o InstanceGroupManagerActionsSummaryResponsePtrOutput) Refreshing() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerActionsSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Refreshing
	}).(pulumi.IntPtrOutput)
}

// The number of instances in the managed instance group that are scheduled to be restarted or are currently being restarted.
func (o InstanceGroupManagerActionsSummaryResponsePtrOutput) Restarting() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerActionsSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Restarting
	}).(pulumi.IntPtrOutput)
}

// The number of instances in the managed instance group that are being verified. See the managedInstances[].currentAction property in the listManagedInstances method documentation.
func (o InstanceGroupManagerActionsSummaryResponsePtrOutput) Verifying() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerActionsSummaryResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Verifying
	}).(pulumi.IntPtrOutput)
}

type InstanceGroupManagerAutoHealingPolicy struct {
	// The URL for the health check that signals autohealing.
	HealthCheck *string `pulumi:"healthCheck"`
	// The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600].
	InitialDelaySec *int `pulumi:"initialDelaySec"`
}

// InstanceGroupManagerAutoHealingPolicyInput is an input type that accepts InstanceGroupManagerAutoHealingPolicyArgs and InstanceGroupManagerAutoHealingPolicyOutput values.
// You can construct a concrete instance of `InstanceGroupManagerAutoHealingPolicyInput` via:
//
//          InstanceGroupManagerAutoHealingPolicyArgs{...}
type InstanceGroupManagerAutoHealingPolicyInput interface {
	pulumi.Input

	ToInstanceGroupManagerAutoHealingPolicyOutput() InstanceGroupManagerAutoHealingPolicyOutput
	ToInstanceGroupManagerAutoHealingPolicyOutputWithContext(context.Context) InstanceGroupManagerAutoHealingPolicyOutput
}

type InstanceGroupManagerAutoHealingPolicyArgs struct {
	// The URL for the health check that signals autohealing.
	HealthCheck pulumi.StringPtrInput `pulumi:"healthCheck"`
	// The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600].
	InitialDelaySec pulumi.IntPtrInput `pulumi:"initialDelaySec"`
}

func (InstanceGroupManagerAutoHealingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerAutoHealingPolicy)(nil)).Elem()
}

func (i InstanceGroupManagerAutoHealingPolicyArgs) ToInstanceGroupManagerAutoHealingPolicyOutput() InstanceGroupManagerAutoHealingPolicyOutput {
	return i.ToInstanceGroupManagerAutoHealingPolicyOutputWithContext(context.Background())
}

func (i InstanceGroupManagerAutoHealingPolicyArgs) ToInstanceGroupManagerAutoHealingPolicyOutputWithContext(ctx context.Context) InstanceGroupManagerAutoHealingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerAutoHealingPolicyOutput)
}

// InstanceGroupManagerAutoHealingPolicyArrayInput is an input type that accepts InstanceGroupManagerAutoHealingPolicyArray and InstanceGroupManagerAutoHealingPolicyArrayOutput values.
// You can construct a concrete instance of `InstanceGroupManagerAutoHealingPolicyArrayInput` via:
//
//          InstanceGroupManagerAutoHealingPolicyArray{ InstanceGroupManagerAutoHealingPolicyArgs{...} }
type InstanceGroupManagerAutoHealingPolicyArrayInput interface {
	pulumi.Input

	ToInstanceGroupManagerAutoHealingPolicyArrayOutput() InstanceGroupManagerAutoHealingPolicyArrayOutput
	ToInstanceGroupManagerAutoHealingPolicyArrayOutputWithContext(context.Context) InstanceGroupManagerAutoHealingPolicyArrayOutput
}

type InstanceGroupManagerAutoHealingPolicyArray []InstanceGroupManagerAutoHealingPolicyInput

func (InstanceGroupManagerAutoHealingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupManagerAutoHealingPolicy)(nil)).Elem()
}

func (i InstanceGroupManagerAutoHealingPolicyArray) ToInstanceGroupManagerAutoHealingPolicyArrayOutput() InstanceGroupManagerAutoHealingPolicyArrayOutput {
	return i.ToInstanceGroupManagerAutoHealingPolicyArrayOutputWithContext(context.Background())
}

func (i InstanceGroupManagerAutoHealingPolicyArray) ToInstanceGroupManagerAutoHealingPolicyArrayOutputWithContext(ctx context.Context) InstanceGroupManagerAutoHealingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerAutoHealingPolicyArrayOutput)
}

type InstanceGroupManagerAutoHealingPolicyOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerAutoHealingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerAutoHealingPolicy)(nil)).Elem()
}

func (o InstanceGroupManagerAutoHealingPolicyOutput) ToInstanceGroupManagerAutoHealingPolicyOutput() InstanceGroupManagerAutoHealingPolicyOutput {
	return o
}

func (o InstanceGroupManagerAutoHealingPolicyOutput) ToInstanceGroupManagerAutoHealingPolicyOutputWithContext(ctx context.Context) InstanceGroupManagerAutoHealingPolicyOutput {
	return o
}

// The URL for the health check that signals autohealing.
func (o InstanceGroupManagerAutoHealingPolicyOutput) HealthCheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerAutoHealingPolicy) *string { return v.HealthCheck }).(pulumi.StringPtrOutput)
}

// The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600].
func (o InstanceGroupManagerAutoHealingPolicyOutput) InitialDelaySec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerAutoHealingPolicy) *int { return v.InitialDelaySec }).(pulumi.IntPtrOutput)
}

type InstanceGroupManagerAutoHealingPolicyArrayOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerAutoHealingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupManagerAutoHealingPolicy)(nil)).Elem()
}

func (o InstanceGroupManagerAutoHealingPolicyArrayOutput) ToInstanceGroupManagerAutoHealingPolicyArrayOutput() InstanceGroupManagerAutoHealingPolicyArrayOutput {
	return o
}

func (o InstanceGroupManagerAutoHealingPolicyArrayOutput) ToInstanceGroupManagerAutoHealingPolicyArrayOutputWithContext(ctx context.Context) InstanceGroupManagerAutoHealingPolicyArrayOutput {
	return o
}

func (o InstanceGroupManagerAutoHealingPolicyArrayOutput) Index(i pulumi.IntInput) InstanceGroupManagerAutoHealingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceGroupManagerAutoHealingPolicy {
		return vs[0].([]InstanceGroupManagerAutoHealingPolicy)[vs[1].(int)]
	}).(InstanceGroupManagerAutoHealingPolicyOutput)
}

type InstanceGroupManagerAutoHealingPolicyResponse struct {
	// The URL for the health check that signals autohealing.
	HealthCheck string `pulumi:"healthCheck"`
	// The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600].
	InitialDelaySec int `pulumi:"initialDelaySec"`
}

// InstanceGroupManagerAutoHealingPolicyResponseInput is an input type that accepts InstanceGroupManagerAutoHealingPolicyResponseArgs and InstanceGroupManagerAutoHealingPolicyResponseOutput values.
// You can construct a concrete instance of `InstanceGroupManagerAutoHealingPolicyResponseInput` via:
//
//          InstanceGroupManagerAutoHealingPolicyResponseArgs{...}
type InstanceGroupManagerAutoHealingPolicyResponseInput interface {
	pulumi.Input

	ToInstanceGroupManagerAutoHealingPolicyResponseOutput() InstanceGroupManagerAutoHealingPolicyResponseOutput
	ToInstanceGroupManagerAutoHealingPolicyResponseOutputWithContext(context.Context) InstanceGroupManagerAutoHealingPolicyResponseOutput
}

type InstanceGroupManagerAutoHealingPolicyResponseArgs struct {
	// The URL for the health check that signals autohealing.
	HealthCheck pulumi.StringInput `pulumi:"healthCheck"`
	// The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600].
	InitialDelaySec pulumi.IntInput `pulumi:"initialDelaySec"`
}

func (InstanceGroupManagerAutoHealingPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerAutoHealingPolicyResponse)(nil)).Elem()
}

func (i InstanceGroupManagerAutoHealingPolicyResponseArgs) ToInstanceGroupManagerAutoHealingPolicyResponseOutput() InstanceGroupManagerAutoHealingPolicyResponseOutput {
	return i.ToInstanceGroupManagerAutoHealingPolicyResponseOutputWithContext(context.Background())
}

func (i InstanceGroupManagerAutoHealingPolicyResponseArgs) ToInstanceGroupManagerAutoHealingPolicyResponseOutputWithContext(ctx context.Context) InstanceGroupManagerAutoHealingPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerAutoHealingPolicyResponseOutput)
}

// InstanceGroupManagerAutoHealingPolicyResponseArrayInput is an input type that accepts InstanceGroupManagerAutoHealingPolicyResponseArray and InstanceGroupManagerAutoHealingPolicyResponseArrayOutput values.
// You can construct a concrete instance of `InstanceGroupManagerAutoHealingPolicyResponseArrayInput` via:
//
//          InstanceGroupManagerAutoHealingPolicyResponseArray{ InstanceGroupManagerAutoHealingPolicyResponseArgs{...} }
type InstanceGroupManagerAutoHealingPolicyResponseArrayInput interface {
	pulumi.Input

	ToInstanceGroupManagerAutoHealingPolicyResponseArrayOutput() InstanceGroupManagerAutoHealingPolicyResponseArrayOutput
	ToInstanceGroupManagerAutoHealingPolicyResponseArrayOutputWithContext(context.Context) InstanceGroupManagerAutoHealingPolicyResponseArrayOutput
}

type InstanceGroupManagerAutoHealingPolicyResponseArray []InstanceGroupManagerAutoHealingPolicyResponseInput

func (InstanceGroupManagerAutoHealingPolicyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupManagerAutoHealingPolicyResponse)(nil)).Elem()
}

func (i InstanceGroupManagerAutoHealingPolicyResponseArray) ToInstanceGroupManagerAutoHealingPolicyResponseArrayOutput() InstanceGroupManagerAutoHealingPolicyResponseArrayOutput {
	return i.ToInstanceGroupManagerAutoHealingPolicyResponseArrayOutputWithContext(context.Background())
}

func (i InstanceGroupManagerAutoHealingPolicyResponseArray) ToInstanceGroupManagerAutoHealingPolicyResponseArrayOutputWithContext(ctx context.Context) InstanceGroupManagerAutoHealingPolicyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerAutoHealingPolicyResponseArrayOutput)
}

type InstanceGroupManagerAutoHealingPolicyResponseOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerAutoHealingPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerAutoHealingPolicyResponse)(nil)).Elem()
}

func (o InstanceGroupManagerAutoHealingPolicyResponseOutput) ToInstanceGroupManagerAutoHealingPolicyResponseOutput() InstanceGroupManagerAutoHealingPolicyResponseOutput {
	return o
}

func (o InstanceGroupManagerAutoHealingPolicyResponseOutput) ToInstanceGroupManagerAutoHealingPolicyResponseOutputWithContext(ctx context.Context) InstanceGroupManagerAutoHealingPolicyResponseOutput {
	return o
}

// The URL for the health check that signals autohealing.
func (o InstanceGroupManagerAutoHealingPolicyResponseOutput) HealthCheck() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceGroupManagerAutoHealingPolicyResponse) string { return v.HealthCheck }).(pulumi.StringOutput)
}

// The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600].
func (o InstanceGroupManagerAutoHealingPolicyResponseOutput) InitialDelaySec() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceGroupManagerAutoHealingPolicyResponse) int { return v.InitialDelaySec }).(pulumi.IntOutput)
}

type InstanceGroupManagerAutoHealingPolicyResponseArrayOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerAutoHealingPolicyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupManagerAutoHealingPolicyResponse)(nil)).Elem()
}

func (o InstanceGroupManagerAutoHealingPolicyResponseArrayOutput) ToInstanceGroupManagerAutoHealingPolicyResponseArrayOutput() InstanceGroupManagerAutoHealingPolicyResponseArrayOutput {
	return o
}

func (o InstanceGroupManagerAutoHealingPolicyResponseArrayOutput) ToInstanceGroupManagerAutoHealingPolicyResponseArrayOutputWithContext(ctx context.Context) InstanceGroupManagerAutoHealingPolicyResponseArrayOutput {
	return o
}

func (o InstanceGroupManagerAutoHealingPolicyResponseArrayOutput) Index(i pulumi.IntInput) InstanceGroupManagerAutoHealingPolicyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceGroupManagerAutoHealingPolicyResponse {
		return vs[0].([]InstanceGroupManagerAutoHealingPolicyResponse)[vs[1].(int)]
	}).(InstanceGroupManagerAutoHealingPolicyResponseOutput)
}

type InstanceGroupManagerStatusResponse struct {
	// The URL of the Autoscaler that targets this instance group manager.
	Autoscaler string `pulumi:"autoscaler"`
	// A bit indicating whether the managed instance group is in a stable state. A stable state means that: none of the instances in the managed instance group is currently undergoing any type of change (for example, creation, restart, or deletion); no future changes are scheduled for instances in the managed instance group; and the managed instance group itself is not being modified.
	IsStable bool `pulumi:"isStable"`
	// Stateful status of the given Instance Group Manager.
	Stateful InstanceGroupManagerStatusStatefulResponse `pulumi:"stateful"`
	// A status of consistency of Instances' versions with their target version specified by version field on Instance Group Manager.
	VersionTarget InstanceGroupManagerStatusVersionTargetResponse `pulumi:"versionTarget"`
}

// InstanceGroupManagerStatusResponseInput is an input type that accepts InstanceGroupManagerStatusResponseArgs and InstanceGroupManagerStatusResponseOutput values.
// You can construct a concrete instance of `InstanceGroupManagerStatusResponseInput` via:
//
//          InstanceGroupManagerStatusResponseArgs{...}
type InstanceGroupManagerStatusResponseInput interface {
	pulumi.Input

	ToInstanceGroupManagerStatusResponseOutput() InstanceGroupManagerStatusResponseOutput
	ToInstanceGroupManagerStatusResponseOutputWithContext(context.Context) InstanceGroupManagerStatusResponseOutput
}

type InstanceGroupManagerStatusResponseArgs struct {
	// The URL of the Autoscaler that targets this instance group manager.
	Autoscaler pulumi.StringInput `pulumi:"autoscaler"`
	// A bit indicating whether the managed instance group is in a stable state. A stable state means that: none of the instances in the managed instance group is currently undergoing any type of change (for example, creation, restart, or deletion); no future changes are scheduled for instances in the managed instance group; and the managed instance group itself is not being modified.
	IsStable pulumi.BoolInput `pulumi:"isStable"`
	// Stateful status of the given Instance Group Manager.
	Stateful InstanceGroupManagerStatusStatefulResponseInput `pulumi:"stateful"`
	// A status of consistency of Instances' versions with their target version specified by version field on Instance Group Manager.
	VersionTarget InstanceGroupManagerStatusVersionTargetResponseInput `pulumi:"versionTarget"`
}

func (InstanceGroupManagerStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerStatusResponse)(nil)).Elem()
}

func (i InstanceGroupManagerStatusResponseArgs) ToInstanceGroupManagerStatusResponseOutput() InstanceGroupManagerStatusResponseOutput {
	return i.ToInstanceGroupManagerStatusResponseOutputWithContext(context.Background())
}

func (i InstanceGroupManagerStatusResponseArgs) ToInstanceGroupManagerStatusResponseOutputWithContext(ctx context.Context) InstanceGroupManagerStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerStatusResponseOutput)
}

func (i InstanceGroupManagerStatusResponseArgs) ToInstanceGroupManagerStatusResponsePtrOutput() InstanceGroupManagerStatusResponsePtrOutput {
	return i.ToInstanceGroupManagerStatusResponsePtrOutputWithContext(context.Background())
}

func (i InstanceGroupManagerStatusResponseArgs) ToInstanceGroupManagerStatusResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerStatusResponseOutput).ToInstanceGroupManagerStatusResponsePtrOutputWithContext(ctx)
}

// InstanceGroupManagerStatusResponsePtrInput is an input type that accepts InstanceGroupManagerStatusResponseArgs, InstanceGroupManagerStatusResponsePtr and InstanceGroupManagerStatusResponsePtrOutput values.
// You can construct a concrete instance of `InstanceGroupManagerStatusResponsePtrInput` via:
//
//          InstanceGroupManagerStatusResponseArgs{...}
//
//  or:
//
//          nil
type InstanceGroupManagerStatusResponsePtrInput interface {
	pulumi.Input

	ToInstanceGroupManagerStatusResponsePtrOutput() InstanceGroupManagerStatusResponsePtrOutput
	ToInstanceGroupManagerStatusResponsePtrOutputWithContext(context.Context) InstanceGroupManagerStatusResponsePtrOutput
}

type instanceGroupManagerStatusResponsePtrType InstanceGroupManagerStatusResponseArgs

func InstanceGroupManagerStatusResponsePtr(v *InstanceGroupManagerStatusResponseArgs) InstanceGroupManagerStatusResponsePtrInput {
	return (*instanceGroupManagerStatusResponsePtrType)(v)
}

func (*instanceGroupManagerStatusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerStatusResponse)(nil)).Elem()
}

func (i *instanceGroupManagerStatusResponsePtrType) ToInstanceGroupManagerStatusResponsePtrOutput() InstanceGroupManagerStatusResponsePtrOutput {
	return i.ToInstanceGroupManagerStatusResponsePtrOutputWithContext(context.Background())
}

func (i *instanceGroupManagerStatusResponsePtrType) ToInstanceGroupManagerStatusResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerStatusResponsePtrOutput)
}

type InstanceGroupManagerStatusResponseOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerStatusResponse)(nil)).Elem()
}

func (o InstanceGroupManagerStatusResponseOutput) ToInstanceGroupManagerStatusResponseOutput() InstanceGroupManagerStatusResponseOutput {
	return o
}

func (o InstanceGroupManagerStatusResponseOutput) ToInstanceGroupManagerStatusResponseOutputWithContext(ctx context.Context) InstanceGroupManagerStatusResponseOutput {
	return o
}

func (o InstanceGroupManagerStatusResponseOutput) ToInstanceGroupManagerStatusResponsePtrOutput() InstanceGroupManagerStatusResponsePtrOutput {
	return o.ToInstanceGroupManagerStatusResponsePtrOutputWithContext(context.Background())
}

func (o InstanceGroupManagerStatusResponseOutput) ToInstanceGroupManagerStatusResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerStatusResponsePtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerStatusResponse) *InstanceGroupManagerStatusResponse {
		return &v
	}).(InstanceGroupManagerStatusResponsePtrOutput)
}

// The URL of the Autoscaler that targets this instance group manager.
func (o InstanceGroupManagerStatusResponseOutput) Autoscaler() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceGroupManagerStatusResponse) string { return v.Autoscaler }).(pulumi.StringOutput)
}

// A bit indicating whether the managed instance group is in a stable state. A stable state means that: none of the instances in the managed instance group is currently undergoing any type of change (for example, creation, restart, or deletion); no future changes are scheduled for instances in the managed instance group; and the managed instance group itself is not being modified.
func (o InstanceGroupManagerStatusResponseOutput) IsStable() pulumi.BoolOutput {
	return o.ApplyT(func(v InstanceGroupManagerStatusResponse) bool { return v.IsStable }).(pulumi.BoolOutput)
}

// Stateful status of the given Instance Group Manager.
func (o InstanceGroupManagerStatusResponseOutput) Stateful() InstanceGroupManagerStatusStatefulResponseOutput {
	return o.ApplyT(func(v InstanceGroupManagerStatusResponse) InstanceGroupManagerStatusStatefulResponse {
		return v.Stateful
	}).(InstanceGroupManagerStatusStatefulResponseOutput)
}

// A status of consistency of Instances' versions with their target version specified by version field on Instance Group Manager.
func (o InstanceGroupManagerStatusResponseOutput) VersionTarget() InstanceGroupManagerStatusVersionTargetResponseOutput {
	return o.ApplyT(func(v InstanceGroupManagerStatusResponse) InstanceGroupManagerStatusVersionTargetResponse {
		return v.VersionTarget
	}).(InstanceGroupManagerStatusVersionTargetResponseOutput)
}

type InstanceGroupManagerStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerStatusResponse)(nil)).Elem()
}

func (o InstanceGroupManagerStatusResponsePtrOutput) ToInstanceGroupManagerStatusResponsePtrOutput() InstanceGroupManagerStatusResponsePtrOutput {
	return o
}

func (o InstanceGroupManagerStatusResponsePtrOutput) ToInstanceGroupManagerStatusResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerStatusResponsePtrOutput {
	return o
}

func (o InstanceGroupManagerStatusResponsePtrOutput) Elem() InstanceGroupManagerStatusResponseOutput {
	return o.ApplyT(func(v *InstanceGroupManagerStatusResponse) InstanceGroupManagerStatusResponse { return *v }).(InstanceGroupManagerStatusResponseOutput)
}

// The URL of the Autoscaler that targets this instance group manager.
func (o InstanceGroupManagerStatusResponsePtrOutput) Autoscaler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Autoscaler
	}).(pulumi.StringPtrOutput)
}

// A bit indicating whether the managed instance group is in a stable state. A stable state means that: none of the instances in the managed instance group is currently undergoing any type of change (for example, creation, restart, or deletion); no future changes are scheduled for instances in the managed instance group; and the managed instance group itself is not being modified.
func (o InstanceGroupManagerStatusResponsePtrOutput) IsStable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerStatusResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsStable
	}).(pulumi.BoolPtrOutput)
}

// Stateful status of the given Instance Group Manager.
func (o InstanceGroupManagerStatusResponsePtrOutput) Stateful() InstanceGroupManagerStatusStatefulResponsePtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerStatusResponse) *InstanceGroupManagerStatusStatefulResponse {
		if v == nil {
			return nil
		}
		return &v.Stateful
	}).(InstanceGroupManagerStatusStatefulResponsePtrOutput)
}

// A status of consistency of Instances' versions with their target version specified by version field on Instance Group Manager.
func (o InstanceGroupManagerStatusResponsePtrOutput) VersionTarget() InstanceGroupManagerStatusVersionTargetResponsePtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerStatusResponse) *InstanceGroupManagerStatusVersionTargetResponse {
		if v == nil {
			return nil
		}
		return &v.VersionTarget
	}).(InstanceGroupManagerStatusVersionTargetResponsePtrOutput)
}

type InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse struct {
	// A bit indicating if all of the group's per-instance configs (listed in the output of a listPerInstanceConfigs API call) have status EFFECTIVE or there are no per-instance-configs.
	AllEffective bool `pulumi:"allEffective"`
}

// InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseInput is an input type that accepts InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseArgs and InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput values.
// You can construct a concrete instance of `InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseInput` via:
//
//          InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseArgs{...}
type InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseInput interface {
	pulumi.Input

	ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput() InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput
	ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutputWithContext(context.Context) InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput
}

type InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseArgs struct {
	// A bit indicating if all of the group's per-instance configs (listed in the output of a listPerInstanceConfigs API call) have status EFFECTIVE or there are no per-instance-configs.
	AllEffective pulumi.BoolInput `pulumi:"allEffective"`
}

func (InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse)(nil)).Elem()
}

func (i InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseArgs) ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput() InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput {
	return i.ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutputWithContext(context.Background())
}

func (i InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseArgs) ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutputWithContext(ctx context.Context) InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput)
}

func (i InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseArgs) ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput() InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput {
	return i.ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutputWithContext(context.Background())
}

func (i InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseArgs) ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput).ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutputWithContext(ctx)
}

// InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrInput is an input type that accepts InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseArgs, InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtr and InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput values.
// You can construct a concrete instance of `InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrInput` via:
//
//          InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseArgs{...}
//
//  or:
//
//          nil
type InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrInput interface {
	pulumi.Input

	ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput() InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput
	ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutputWithContext(context.Context) InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput
}

type instanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrType InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseArgs

func InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtr(v *InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseArgs) InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrInput {
	return (*instanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrType)(v)
}

func (*instanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse)(nil)).Elem()
}

func (i *instanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrType) ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput() InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput {
	return i.ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutputWithContext(context.Background())
}

func (i *instanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrType) ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput)
}

type InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse)(nil)).Elem()
}

func (o InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput) ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput() InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput {
	return o
}

func (o InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput) ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutputWithContext(ctx context.Context) InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput {
	return o
}

func (o InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput) ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput() InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput {
	return o.ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutputWithContext(context.Background())
}

func (o InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput) ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse) *InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse {
		return &v
	}).(InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput)
}

// A bit indicating if all of the group's per-instance configs (listed in the output of a listPerInstanceConfigs API call) have status EFFECTIVE or there are no per-instance-configs.
func (o InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput) AllEffective() pulumi.BoolOutput {
	return o.ApplyT(func(v InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse) bool { return v.AllEffective }).(pulumi.BoolOutput)
}

type InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse)(nil)).Elem()
}

func (o InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput) ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput() InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput {
	return o
}

func (o InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput) ToInstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput {
	return o
}

func (o InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput) Elem() InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput {
	return o.ApplyT(func(v *InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse) InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse {
		return *v
	}).(InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput)
}

// A bit indicating if all of the group's per-instance configs (listed in the output of a listPerInstanceConfigs API call) have status EFFECTIVE or there are no per-instance-configs.
func (o InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput) AllEffective() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.AllEffective
	}).(pulumi.BoolPtrOutput)
}

type InstanceGroupManagerStatusStatefulResponse struct {
	// A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful config even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions.
	HasStatefulConfig bool `pulumi:"hasStatefulConfig"`
	// Status of per-instance configs on the instance.
	PerInstanceConfigs InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse `pulumi:"perInstanceConfigs"`
}

// InstanceGroupManagerStatusStatefulResponseInput is an input type that accepts InstanceGroupManagerStatusStatefulResponseArgs and InstanceGroupManagerStatusStatefulResponseOutput values.
// You can construct a concrete instance of `InstanceGroupManagerStatusStatefulResponseInput` via:
//
//          InstanceGroupManagerStatusStatefulResponseArgs{...}
type InstanceGroupManagerStatusStatefulResponseInput interface {
	pulumi.Input

	ToInstanceGroupManagerStatusStatefulResponseOutput() InstanceGroupManagerStatusStatefulResponseOutput
	ToInstanceGroupManagerStatusStatefulResponseOutputWithContext(context.Context) InstanceGroupManagerStatusStatefulResponseOutput
}

type InstanceGroupManagerStatusStatefulResponseArgs struct {
	// A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful config even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions.
	HasStatefulConfig pulumi.BoolInput `pulumi:"hasStatefulConfig"`
	// Status of per-instance configs on the instance.
	PerInstanceConfigs InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseInput `pulumi:"perInstanceConfigs"`
}

func (InstanceGroupManagerStatusStatefulResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerStatusStatefulResponse)(nil)).Elem()
}

func (i InstanceGroupManagerStatusStatefulResponseArgs) ToInstanceGroupManagerStatusStatefulResponseOutput() InstanceGroupManagerStatusStatefulResponseOutput {
	return i.ToInstanceGroupManagerStatusStatefulResponseOutputWithContext(context.Background())
}

func (i InstanceGroupManagerStatusStatefulResponseArgs) ToInstanceGroupManagerStatusStatefulResponseOutputWithContext(ctx context.Context) InstanceGroupManagerStatusStatefulResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerStatusStatefulResponseOutput)
}

func (i InstanceGroupManagerStatusStatefulResponseArgs) ToInstanceGroupManagerStatusStatefulResponsePtrOutput() InstanceGroupManagerStatusStatefulResponsePtrOutput {
	return i.ToInstanceGroupManagerStatusStatefulResponsePtrOutputWithContext(context.Background())
}

func (i InstanceGroupManagerStatusStatefulResponseArgs) ToInstanceGroupManagerStatusStatefulResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerStatusStatefulResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerStatusStatefulResponseOutput).ToInstanceGroupManagerStatusStatefulResponsePtrOutputWithContext(ctx)
}

// InstanceGroupManagerStatusStatefulResponsePtrInput is an input type that accepts InstanceGroupManagerStatusStatefulResponseArgs, InstanceGroupManagerStatusStatefulResponsePtr and InstanceGroupManagerStatusStatefulResponsePtrOutput values.
// You can construct a concrete instance of `InstanceGroupManagerStatusStatefulResponsePtrInput` via:
//
//          InstanceGroupManagerStatusStatefulResponseArgs{...}
//
//  or:
//
//          nil
type InstanceGroupManagerStatusStatefulResponsePtrInput interface {
	pulumi.Input

	ToInstanceGroupManagerStatusStatefulResponsePtrOutput() InstanceGroupManagerStatusStatefulResponsePtrOutput
	ToInstanceGroupManagerStatusStatefulResponsePtrOutputWithContext(context.Context) InstanceGroupManagerStatusStatefulResponsePtrOutput
}

type instanceGroupManagerStatusStatefulResponsePtrType InstanceGroupManagerStatusStatefulResponseArgs

func InstanceGroupManagerStatusStatefulResponsePtr(v *InstanceGroupManagerStatusStatefulResponseArgs) InstanceGroupManagerStatusStatefulResponsePtrInput {
	return (*instanceGroupManagerStatusStatefulResponsePtrType)(v)
}

func (*instanceGroupManagerStatusStatefulResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerStatusStatefulResponse)(nil)).Elem()
}

func (i *instanceGroupManagerStatusStatefulResponsePtrType) ToInstanceGroupManagerStatusStatefulResponsePtrOutput() InstanceGroupManagerStatusStatefulResponsePtrOutput {
	return i.ToInstanceGroupManagerStatusStatefulResponsePtrOutputWithContext(context.Background())
}

func (i *instanceGroupManagerStatusStatefulResponsePtrType) ToInstanceGroupManagerStatusStatefulResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerStatusStatefulResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerStatusStatefulResponsePtrOutput)
}

type InstanceGroupManagerStatusStatefulResponseOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerStatusStatefulResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerStatusStatefulResponse)(nil)).Elem()
}

func (o InstanceGroupManagerStatusStatefulResponseOutput) ToInstanceGroupManagerStatusStatefulResponseOutput() InstanceGroupManagerStatusStatefulResponseOutput {
	return o
}

func (o InstanceGroupManagerStatusStatefulResponseOutput) ToInstanceGroupManagerStatusStatefulResponseOutputWithContext(ctx context.Context) InstanceGroupManagerStatusStatefulResponseOutput {
	return o
}

func (o InstanceGroupManagerStatusStatefulResponseOutput) ToInstanceGroupManagerStatusStatefulResponsePtrOutput() InstanceGroupManagerStatusStatefulResponsePtrOutput {
	return o.ToInstanceGroupManagerStatusStatefulResponsePtrOutputWithContext(context.Background())
}

func (o InstanceGroupManagerStatusStatefulResponseOutput) ToInstanceGroupManagerStatusStatefulResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerStatusStatefulResponsePtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerStatusStatefulResponse) *InstanceGroupManagerStatusStatefulResponse {
		return &v
	}).(InstanceGroupManagerStatusStatefulResponsePtrOutput)
}

// A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful config even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions.
func (o InstanceGroupManagerStatusStatefulResponseOutput) HasStatefulConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v InstanceGroupManagerStatusStatefulResponse) bool { return v.HasStatefulConfig }).(pulumi.BoolOutput)
}

// Status of per-instance configs on the instance.
func (o InstanceGroupManagerStatusStatefulResponseOutput) PerInstanceConfigs() InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput {
	return o.ApplyT(func(v InstanceGroupManagerStatusStatefulResponse) InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse {
		return v.PerInstanceConfigs
	}).(InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput)
}

type InstanceGroupManagerStatusStatefulResponsePtrOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerStatusStatefulResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerStatusStatefulResponse)(nil)).Elem()
}

func (o InstanceGroupManagerStatusStatefulResponsePtrOutput) ToInstanceGroupManagerStatusStatefulResponsePtrOutput() InstanceGroupManagerStatusStatefulResponsePtrOutput {
	return o
}

func (o InstanceGroupManagerStatusStatefulResponsePtrOutput) ToInstanceGroupManagerStatusStatefulResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerStatusStatefulResponsePtrOutput {
	return o
}

func (o InstanceGroupManagerStatusStatefulResponsePtrOutput) Elem() InstanceGroupManagerStatusStatefulResponseOutput {
	return o.ApplyT(func(v *InstanceGroupManagerStatusStatefulResponse) InstanceGroupManagerStatusStatefulResponse {
		return *v
	}).(InstanceGroupManagerStatusStatefulResponseOutput)
}

// A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful config even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions.
func (o InstanceGroupManagerStatusStatefulResponsePtrOutput) HasStatefulConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerStatusStatefulResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.HasStatefulConfig
	}).(pulumi.BoolPtrOutput)
}

// Status of per-instance configs on the instance.
func (o InstanceGroupManagerStatusStatefulResponsePtrOutput) PerInstanceConfigs() InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerStatusStatefulResponse) *InstanceGroupManagerStatusStatefulPerInstanceConfigsResponse {
		if v == nil {
			return nil
		}
		return &v.PerInstanceConfigs
	}).(InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput)
}

type InstanceGroupManagerStatusVersionTargetResponse struct {
	// A bit indicating whether version target has been reached in this managed instance group, i.e. all instances are in their target version. Instances' target version are specified by version field on Instance Group Manager.
	IsReached bool `pulumi:"isReached"`
}

// InstanceGroupManagerStatusVersionTargetResponseInput is an input type that accepts InstanceGroupManagerStatusVersionTargetResponseArgs and InstanceGroupManagerStatusVersionTargetResponseOutput values.
// You can construct a concrete instance of `InstanceGroupManagerStatusVersionTargetResponseInput` via:
//
//          InstanceGroupManagerStatusVersionTargetResponseArgs{...}
type InstanceGroupManagerStatusVersionTargetResponseInput interface {
	pulumi.Input

	ToInstanceGroupManagerStatusVersionTargetResponseOutput() InstanceGroupManagerStatusVersionTargetResponseOutput
	ToInstanceGroupManagerStatusVersionTargetResponseOutputWithContext(context.Context) InstanceGroupManagerStatusVersionTargetResponseOutput
}

type InstanceGroupManagerStatusVersionTargetResponseArgs struct {
	// A bit indicating whether version target has been reached in this managed instance group, i.e. all instances are in their target version. Instances' target version are specified by version field on Instance Group Manager.
	IsReached pulumi.BoolInput `pulumi:"isReached"`
}

func (InstanceGroupManagerStatusVersionTargetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerStatusVersionTargetResponse)(nil)).Elem()
}

func (i InstanceGroupManagerStatusVersionTargetResponseArgs) ToInstanceGroupManagerStatusVersionTargetResponseOutput() InstanceGroupManagerStatusVersionTargetResponseOutput {
	return i.ToInstanceGroupManagerStatusVersionTargetResponseOutputWithContext(context.Background())
}

func (i InstanceGroupManagerStatusVersionTargetResponseArgs) ToInstanceGroupManagerStatusVersionTargetResponseOutputWithContext(ctx context.Context) InstanceGroupManagerStatusVersionTargetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerStatusVersionTargetResponseOutput)
}

func (i InstanceGroupManagerStatusVersionTargetResponseArgs) ToInstanceGroupManagerStatusVersionTargetResponsePtrOutput() InstanceGroupManagerStatusVersionTargetResponsePtrOutput {
	return i.ToInstanceGroupManagerStatusVersionTargetResponsePtrOutputWithContext(context.Background())
}

func (i InstanceGroupManagerStatusVersionTargetResponseArgs) ToInstanceGroupManagerStatusVersionTargetResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerStatusVersionTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerStatusVersionTargetResponseOutput).ToInstanceGroupManagerStatusVersionTargetResponsePtrOutputWithContext(ctx)
}

// InstanceGroupManagerStatusVersionTargetResponsePtrInput is an input type that accepts InstanceGroupManagerStatusVersionTargetResponseArgs, InstanceGroupManagerStatusVersionTargetResponsePtr and InstanceGroupManagerStatusVersionTargetResponsePtrOutput values.
// You can construct a concrete instance of `InstanceGroupManagerStatusVersionTargetResponsePtrInput` via:
//
//          InstanceGroupManagerStatusVersionTargetResponseArgs{...}
//
//  or:
//
//          nil
type InstanceGroupManagerStatusVersionTargetResponsePtrInput interface {
	pulumi.Input

	ToInstanceGroupManagerStatusVersionTargetResponsePtrOutput() InstanceGroupManagerStatusVersionTargetResponsePtrOutput
	ToInstanceGroupManagerStatusVersionTargetResponsePtrOutputWithContext(context.Context) InstanceGroupManagerStatusVersionTargetResponsePtrOutput
}

type instanceGroupManagerStatusVersionTargetResponsePtrType InstanceGroupManagerStatusVersionTargetResponseArgs

func InstanceGroupManagerStatusVersionTargetResponsePtr(v *InstanceGroupManagerStatusVersionTargetResponseArgs) InstanceGroupManagerStatusVersionTargetResponsePtrInput {
	return (*instanceGroupManagerStatusVersionTargetResponsePtrType)(v)
}

func (*instanceGroupManagerStatusVersionTargetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerStatusVersionTargetResponse)(nil)).Elem()
}

func (i *instanceGroupManagerStatusVersionTargetResponsePtrType) ToInstanceGroupManagerStatusVersionTargetResponsePtrOutput() InstanceGroupManagerStatusVersionTargetResponsePtrOutput {
	return i.ToInstanceGroupManagerStatusVersionTargetResponsePtrOutputWithContext(context.Background())
}

func (i *instanceGroupManagerStatusVersionTargetResponsePtrType) ToInstanceGroupManagerStatusVersionTargetResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerStatusVersionTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerStatusVersionTargetResponsePtrOutput)
}

type InstanceGroupManagerStatusVersionTargetResponseOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerStatusVersionTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerStatusVersionTargetResponse)(nil)).Elem()
}

func (o InstanceGroupManagerStatusVersionTargetResponseOutput) ToInstanceGroupManagerStatusVersionTargetResponseOutput() InstanceGroupManagerStatusVersionTargetResponseOutput {
	return o
}

func (o InstanceGroupManagerStatusVersionTargetResponseOutput) ToInstanceGroupManagerStatusVersionTargetResponseOutputWithContext(ctx context.Context) InstanceGroupManagerStatusVersionTargetResponseOutput {
	return o
}

func (o InstanceGroupManagerStatusVersionTargetResponseOutput) ToInstanceGroupManagerStatusVersionTargetResponsePtrOutput() InstanceGroupManagerStatusVersionTargetResponsePtrOutput {
	return o.ToInstanceGroupManagerStatusVersionTargetResponsePtrOutputWithContext(context.Background())
}

func (o InstanceGroupManagerStatusVersionTargetResponseOutput) ToInstanceGroupManagerStatusVersionTargetResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerStatusVersionTargetResponsePtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerStatusVersionTargetResponse) *InstanceGroupManagerStatusVersionTargetResponse {
		return &v
	}).(InstanceGroupManagerStatusVersionTargetResponsePtrOutput)
}

// A bit indicating whether version target has been reached in this managed instance group, i.e. all instances are in their target version. Instances' target version are specified by version field on Instance Group Manager.
func (o InstanceGroupManagerStatusVersionTargetResponseOutput) IsReached() pulumi.BoolOutput {
	return o.ApplyT(func(v InstanceGroupManagerStatusVersionTargetResponse) bool { return v.IsReached }).(pulumi.BoolOutput)
}

type InstanceGroupManagerStatusVersionTargetResponsePtrOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerStatusVersionTargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerStatusVersionTargetResponse)(nil)).Elem()
}

func (o InstanceGroupManagerStatusVersionTargetResponsePtrOutput) ToInstanceGroupManagerStatusVersionTargetResponsePtrOutput() InstanceGroupManagerStatusVersionTargetResponsePtrOutput {
	return o
}

func (o InstanceGroupManagerStatusVersionTargetResponsePtrOutput) ToInstanceGroupManagerStatusVersionTargetResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerStatusVersionTargetResponsePtrOutput {
	return o
}

func (o InstanceGroupManagerStatusVersionTargetResponsePtrOutput) Elem() InstanceGroupManagerStatusVersionTargetResponseOutput {
	return o.ApplyT(func(v *InstanceGroupManagerStatusVersionTargetResponse) InstanceGroupManagerStatusVersionTargetResponse {
		return *v
	}).(InstanceGroupManagerStatusVersionTargetResponseOutput)
}

// A bit indicating whether version target has been reached in this managed instance group, i.e. all instances are in their target version. Instances' target version are specified by version field on Instance Group Manager.
func (o InstanceGroupManagerStatusVersionTargetResponsePtrOutput) IsReached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerStatusVersionTargetResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsReached
	}).(pulumi.BoolPtrOutput)
}

type InstanceGroupManagerUpdatePolicy struct {
	// The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled.
	InstanceRedistributionType *string `pulumi:"instanceRedistributionType"`
	// The maximum number of instances that can be created above the specified targetSize during the update process. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxSurge is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxSurge.
	MaxSurge *FixedOrPercent `pulumi:"maxSurge"`
	// The maximum number of instances that can be unavailable during the update process. An instance is considered available if all of the following conditions are satisfied: - The instance's status is RUNNING. - If there is a health check on the instance group, the instance's health check status must be HEALTHY at least once. If there is no health check on the group, then the instance only needs to have a status of RUNNING to be considered available. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxUnavailable is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxUnavailable.
	MaxUnavailable *FixedOrPercent `pulumi:"maxUnavailable"`
	// Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
	MinimalAction *string `pulumi:"minimalAction"`
	// What action should be used to replace instances. See minimal_action.REPLACE
	ReplacementMethod *string `pulumi:"replacementMethod"`
	// The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
	Type *string `pulumi:"type"`
}

// InstanceGroupManagerUpdatePolicyInput is an input type that accepts InstanceGroupManagerUpdatePolicyArgs and InstanceGroupManagerUpdatePolicyOutput values.
// You can construct a concrete instance of `InstanceGroupManagerUpdatePolicyInput` via:
//
//          InstanceGroupManagerUpdatePolicyArgs{...}
type InstanceGroupManagerUpdatePolicyInput interface {
	pulumi.Input

	ToInstanceGroupManagerUpdatePolicyOutput() InstanceGroupManagerUpdatePolicyOutput
	ToInstanceGroupManagerUpdatePolicyOutputWithContext(context.Context) InstanceGroupManagerUpdatePolicyOutput
}

type InstanceGroupManagerUpdatePolicyArgs struct {
	// The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled.
	InstanceRedistributionType *InstanceGroupManagerUpdatePolicyInstanceRedistributionType `pulumi:"instanceRedistributionType"`
	// The maximum number of instances that can be created above the specified targetSize during the update process. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxSurge is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxSurge.
	MaxSurge FixedOrPercentPtrInput `pulumi:"maxSurge"`
	// The maximum number of instances that can be unavailable during the update process. An instance is considered available if all of the following conditions are satisfied: - The instance's status is RUNNING. - If there is a health check on the instance group, the instance's health check status must be HEALTHY at least once. If there is no health check on the group, then the instance only needs to have a status of RUNNING to be considered available. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxUnavailable is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxUnavailable.
	MaxUnavailable FixedOrPercentPtrInput `pulumi:"maxUnavailable"`
	// Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
	MinimalAction *InstanceGroupManagerUpdatePolicyMinimalAction `pulumi:"minimalAction"`
	// What action should be used to replace instances. See minimal_action.REPLACE
	ReplacementMethod *InstanceGroupManagerUpdatePolicyReplacementMethod `pulumi:"replacementMethod"`
	// The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
	Type *InstanceGroupManagerUpdatePolicyType `pulumi:"type"`
}

func (InstanceGroupManagerUpdatePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerUpdatePolicy)(nil)).Elem()
}

func (i InstanceGroupManagerUpdatePolicyArgs) ToInstanceGroupManagerUpdatePolicyOutput() InstanceGroupManagerUpdatePolicyOutput {
	return i.ToInstanceGroupManagerUpdatePolicyOutputWithContext(context.Background())
}

func (i InstanceGroupManagerUpdatePolicyArgs) ToInstanceGroupManagerUpdatePolicyOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerUpdatePolicyOutput)
}

func (i InstanceGroupManagerUpdatePolicyArgs) ToInstanceGroupManagerUpdatePolicyPtrOutput() InstanceGroupManagerUpdatePolicyPtrOutput {
	return i.ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(context.Background())
}

func (i InstanceGroupManagerUpdatePolicyArgs) ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerUpdatePolicyOutput).ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(ctx)
}

// InstanceGroupManagerUpdatePolicyPtrInput is an input type that accepts InstanceGroupManagerUpdatePolicyArgs, InstanceGroupManagerUpdatePolicyPtr and InstanceGroupManagerUpdatePolicyPtrOutput values.
// You can construct a concrete instance of `InstanceGroupManagerUpdatePolicyPtrInput` via:
//
//          InstanceGroupManagerUpdatePolicyArgs{...}
//
//  or:
//
//          nil
type InstanceGroupManagerUpdatePolicyPtrInput interface {
	pulumi.Input

	ToInstanceGroupManagerUpdatePolicyPtrOutput() InstanceGroupManagerUpdatePolicyPtrOutput
	ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(context.Context) InstanceGroupManagerUpdatePolicyPtrOutput
}

type instanceGroupManagerUpdatePolicyPtrType InstanceGroupManagerUpdatePolicyArgs

func InstanceGroupManagerUpdatePolicyPtr(v *InstanceGroupManagerUpdatePolicyArgs) InstanceGroupManagerUpdatePolicyPtrInput {
	return (*instanceGroupManagerUpdatePolicyPtrType)(v)
}

func (*instanceGroupManagerUpdatePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerUpdatePolicy)(nil)).Elem()
}

func (i *instanceGroupManagerUpdatePolicyPtrType) ToInstanceGroupManagerUpdatePolicyPtrOutput() InstanceGroupManagerUpdatePolicyPtrOutput {
	return i.ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(context.Background())
}

func (i *instanceGroupManagerUpdatePolicyPtrType) ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerUpdatePolicyPtrOutput)
}

type InstanceGroupManagerUpdatePolicyOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerUpdatePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerUpdatePolicy)(nil)).Elem()
}

func (o InstanceGroupManagerUpdatePolicyOutput) ToInstanceGroupManagerUpdatePolicyOutput() InstanceGroupManagerUpdatePolicyOutput {
	return o
}

func (o InstanceGroupManagerUpdatePolicyOutput) ToInstanceGroupManagerUpdatePolicyOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyOutput {
	return o
}

func (o InstanceGroupManagerUpdatePolicyOutput) ToInstanceGroupManagerUpdatePolicyPtrOutput() InstanceGroupManagerUpdatePolicyPtrOutput {
	return o.ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(context.Background())
}

func (o InstanceGroupManagerUpdatePolicyOutput) ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicy) *InstanceGroupManagerUpdatePolicy {
		return &v
	}).(InstanceGroupManagerUpdatePolicyPtrOutput)
}

// The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled.
func (o InstanceGroupManagerUpdatePolicyOutput) InstanceRedistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicy) *string { return v.InstanceRedistributionType }).(pulumi.StringPtrOutput)
}

// The maximum number of instances that can be created above the specified targetSize during the update process. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxSurge is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxSurge.
func (o InstanceGroupManagerUpdatePolicyOutput) MaxSurge() FixedOrPercentPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicy) *FixedOrPercent { return v.MaxSurge }).(FixedOrPercentPtrOutput)
}

// The maximum number of instances that can be unavailable during the update process. An instance is considered available if all of the following conditions are satisfied: - The instance's status is RUNNING. - If there is a health check on the instance group, the instance's health check status must be HEALTHY at least once. If there is no health check on the group, then the instance only needs to have a status of RUNNING to be considered available. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxUnavailable is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxUnavailable.
func (o InstanceGroupManagerUpdatePolicyOutput) MaxUnavailable() FixedOrPercentPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicy) *FixedOrPercent { return v.MaxUnavailable }).(FixedOrPercentPtrOutput)
}

// Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
func (o InstanceGroupManagerUpdatePolicyOutput) MinimalAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicy) *string { return v.MinimalAction }).(pulumi.StringPtrOutput)
}

// What action should be used to replace instances. See minimal_action.REPLACE
func (o InstanceGroupManagerUpdatePolicyOutput) ReplacementMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicy) *string { return v.ReplacementMethod }).(pulumi.StringPtrOutput)
}

// The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
func (o InstanceGroupManagerUpdatePolicyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicy) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InstanceGroupManagerUpdatePolicyPtrOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerUpdatePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerUpdatePolicy)(nil)).Elem()
}

func (o InstanceGroupManagerUpdatePolicyPtrOutput) ToInstanceGroupManagerUpdatePolicyPtrOutput() InstanceGroupManagerUpdatePolicyPtrOutput {
	return o
}

func (o InstanceGroupManagerUpdatePolicyPtrOutput) ToInstanceGroupManagerUpdatePolicyPtrOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyPtrOutput {
	return o
}

func (o InstanceGroupManagerUpdatePolicyPtrOutput) Elem() InstanceGroupManagerUpdatePolicyOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicy) InstanceGroupManagerUpdatePolicy { return *v }).(InstanceGroupManagerUpdatePolicyOutput)
}

// The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled.
func (o InstanceGroupManagerUpdatePolicyPtrOutput) InstanceRedistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicy) *string {
		if v == nil {
			return nil
		}
		return v.InstanceRedistributionType
	}).(pulumi.StringPtrOutput)
}

// The maximum number of instances that can be created above the specified targetSize during the update process. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxSurge is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxSurge.
func (o InstanceGroupManagerUpdatePolicyPtrOutput) MaxSurge() FixedOrPercentPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicy) *FixedOrPercent {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(FixedOrPercentPtrOutput)
}

// The maximum number of instances that can be unavailable during the update process. An instance is considered available if all of the following conditions are satisfied: - The instance's status is RUNNING. - If there is a health check on the instance group, the instance's health check status must be HEALTHY at least once. If there is no health check on the group, then the instance only needs to have a status of RUNNING to be considered available. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxUnavailable is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxUnavailable.
func (o InstanceGroupManagerUpdatePolicyPtrOutput) MaxUnavailable() FixedOrPercentPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicy) *FixedOrPercent {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(FixedOrPercentPtrOutput)
}

// Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
func (o InstanceGroupManagerUpdatePolicyPtrOutput) MinimalAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicy) *string {
		if v == nil {
			return nil
		}
		return v.MinimalAction
	}).(pulumi.StringPtrOutput)
}

// What action should be used to replace instances. See minimal_action.REPLACE
func (o InstanceGroupManagerUpdatePolicyPtrOutput) ReplacementMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicy) *string {
		if v == nil {
			return nil
		}
		return v.ReplacementMethod
	}).(pulumi.StringPtrOutput)
}

// The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
func (o InstanceGroupManagerUpdatePolicyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicy) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type InstanceGroupManagerUpdatePolicyResponse struct {
	// The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled.
	InstanceRedistributionType string `pulumi:"instanceRedistributionType"`
	// The maximum number of instances that can be created above the specified targetSize during the update process. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxSurge is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxSurge.
	MaxSurge FixedOrPercentResponse `pulumi:"maxSurge"`
	// The maximum number of instances that can be unavailable during the update process. An instance is considered available if all of the following conditions are satisfied: - The instance's status is RUNNING. - If there is a health check on the instance group, the instance's health check status must be HEALTHY at least once. If there is no health check on the group, then the instance only needs to have a status of RUNNING to be considered available. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxUnavailable is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxUnavailable.
	MaxUnavailable FixedOrPercentResponse `pulumi:"maxUnavailable"`
	// Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
	MinimalAction string `pulumi:"minimalAction"`
	// What action should be used to replace instances. See minimal_action.REPLACE
	ReplacementMethod string `pulumi:"replacementMethod"`
	// The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
	Type string `pulumi:"type"`
}

// InstanceGroupManagerUpdatePolicyResponseInput is an input type that accepts InstanceGroupManagerUpdatePolicyResponseArgs and InstanceGroupManagerUpdatePolicyResponseOutput values.
// You can construct a concrete instance of `InstanceGroupManagerUpdatePolicyResponseInput` via:
//
//          InstanceGroupManagerUpdatePolicyResponseArgs{...}
type InstanceGroupManagerUpdatePolicyResponseInput interface {
	pulumi.Input

	ToInstanceGroupManagerUpdatePolicyResponseOutput() InstanceGroupManagerUpdatePolicyResponseOutput
	ToInstanceGroupManagerUpdatePolicyResponseOutputWithContext(context.Context) InstanceGroupManagerUpdatePolicyResponseOutput
}

type InstanceGroupManagerUpdatePolicyResponseArgs struct {
	// The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled.
	InstanceRedistributionType pulumi.StringInput `pulumi:"instanceRedistributionType"`
	// The maximum number of instances that can be created above the specified targetSize during the update process. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxSurge is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxSurge.
	MaxSurge FixedOrPercentResponseInput `pulumi:"maxSurge"`
	// The maximum number of instances that can be unavailable during the update process. An instance is considered available if all of the following conditions are satisfied: - The instance's status is RUNNING. - If there is a health check on the instance group, the instance's health check status must be HEALTHY at least once. If there is no health check on the group, then the instance only needs to have a status of RUNNING to be considered available. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxUnavailable is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxUnavailable.
	MaxUnavailable FixedOrPercentResponseInput `pulumi:"maxUnavailable"`
	// Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
	MinimalAction pulumi.StringInput `pulumi:"minimalAction"`
	// What action should be used to replace instances. See minimal_action.REPLACE
	ReplacementMethod pulumi.StringInput `pulumi:"replacementMethod"`
	// The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
	Type pulumi.StringInput `pulumi:"type"`
}

func (InstanceGroupManagerUpdatePolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerUpdatePolicyResponse)(nil)).Elem()
}

func (i InstanceGroupManagerUpdatePolicyResponseArgs) ToInstanceGroupManagerUpdatePolicyResponseOutput() InstanceGroupManagerUpdatePolicyResponseOutput {
	return i.ToInstanceGroupManagerUpdatePolicyResponseOutputWithContext(context.Background())
}

func (i InstanceGroupManagerUpdatePolicyResponseArgs) ToInstanceGroupManagerUpdatePolicyResponseOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerUpdatePolicyResponseOutput)
}

func (i InstanceGroupManagerUpdatePolicyResponseArgs) ToInstanceGroupManagerUpdatePolicyResponsePtrOutput() InstanceGroupManagerUpdatePolicyResponsePtrOutput {
	return i.ToInstanceGroupManagerUpdatePolicyResponsePtrOutputWithContext(context.Background())
}

func (i InstanceGroupManagerUpdatePolicyResponseArgs) ToInstanceGroupManagerUpdatePolicyResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerUpdatePolicyResponseOutput).ToInstanceGroupManagerUpdatePolicyResponsePtrOutputWithContext(ctx)
}

// InstanceGroupManagerUpdatePolicyResponsePtrInput is an input type that accepts InstanceGroupManagerUpdatePolicyResponseArgs, InstanceGroupManagerUpdatePolicyResponsePtr and InstanceGroupManagerUpdatePolicyResponsePtrOutput values.
// You can construct a concrete instance of `InstanceGroupManagerUpdatePolicyResponsePtrInput` via:
//
//          InstanceGroupManagerUpdatePolicyResponseArgs{...}
//
//  or:
//
//          nil
type InstanceGroupManagerUpdatePolicyResponsePtrInput interface {
	pulumi.Input

	ToInstanceGroupManagerUpdatePolicyResponsePtrOutput() InstanceGroupManagerUpdatePolicyResponsePtrOutput
	ToInstanceGroupManagerUpdatePolicyResponsePtrOutputWithContext(context.Context) InstanceGroupManagerUpdatePolicyResponsePtrOutput
}

type instanceGroupManagerUpdatePolicyResponsePtrType InstanceGroupManagerUpdatePolicyResponseArgs

func InstanceGroupManagerUpdatePolicyResponsePtr(v *InstanceGroupManagerUpdatePolicyResponseArgs) InstanceGroupManagerUpdatePolicyResponsePtrInput {
	return (*instanceGroupManagerUpdatePolicyResponsePtrType)(v)
}

func (*instanceGroupManagerUpdatePolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerUpdatePolicyResponse)(nil)).Elem()
}

func (i *instanceGroupManagerUpdatePolicyResponsePtrType) ToInstanceGroupManagerUpdatePolicyResponsePtrOutput() InstanceGroupManagerUpdatePolicyResponsePtrOutput {
	return i.ToInstanceGroupManagerUpdatePolicyResponsePtrOutputWithContext(context.Background())
}

func (i *instanceGroupManagerUpdatePolicyResponsePtrType) ToInstanceGroupManagerUpdatePolicyResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerUpdatePolicyResponsePtrOutput)
}

type InstanceGroupManagerUpdatePolicyResponseOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerUpdatePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerUpdatePolicyResponse)(nil)).Elem()
}

func (o InstanceGroupManagerUpdatePolicyResponseOutput) ToInstanceGroupManagerUpdatePolicyResponseOutput() InstanceGroupManagerUpdatePolicyResponseOutput {
	return o
}

func (o InstanceGroupManagerUpdatePolicyResponseOutput) ToInstanceGroupManagerUpdatePolicyResponseOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyResponseOutput {
	return o
}

func (o InstanceGroupManagerUpdatePolicyResponseOutput) ToInstanceGroupManagerUpdatePolicyResponsePtrOutput() InstanceGroupManagerUpdatePolicyResponsePtrOutput {
	return o.ToInstanceGroupManagerUpdatePolicyResponsePtrOutputWithContext(context.Background())
}

func (o InstanceGroupManagerUpdatePolicyResponseOutput) ToInstanceGroupManagerUpdatePolicyResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyResponsePtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicyResponse) *InstanceGroupManagerUpdatePolicyResponse {
		return &v
	}).(InstanceGroupManagerUpdatePolicyResponsePtrOutput)
}

// The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled.
func (o InstanceGroupManagerUpdatePolicyResponseOutput) InstanceRedistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicyResponse) string { return v.InstanceRedistributionType }).(pulumi.StringOutput)
}

// The maximum number of instances that can be created above the specified targetSize during the update process. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxSurge is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxSurge.
func (o InstanceGroupManagerUpdatePolicyResponseOutput) MaxSurge() FixedOrPercentResponseOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicyResponse) FixedOrPercentResponse { return v.MaxSurge }).(FixedOrPercentResponseOutput)
}

// The maximum number of instances that can be unavailable during the update process. An instance is considered available if all of the following conditions are satisfied: - The instance's status is RUNNING. - If there is a health check on the instance group, the instance's health check status must be HEALTHY at least once. If there is no health check on the group, then the instance only needs to have a status of RUNNING to be considered available. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxUnavailable is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxUnavailable.
func (o InstanceGroupManagerUpdatePolicyResponseOutput) MaxUnavailable() FixedOrPercentResponseOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicyResponse) FixedOrPercentResponse { return v.MaxUnavailable }).(FixedOrPercentResponseOutput)
}

// Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
func (o InstanceGroupManagerUpdatePolicyResponseOutput) MinimalAction() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicyResponse) string { return v.MinimalAction }).(pulumi.StringOutput)
}

// What action should be used to replace instances. See minimal_action.REPLACE
func (o InstanceGroupManagerUpdatePolicyResponseOutput) ReplacementMethod() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicyResponse) string { return v.ReplacementMethod }).(pulumi.StringOutput)
}

// The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
func (o InstanceGroupManagerUpdatePolicyResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceGroupManagerUpdatePolicyResponse) string { return v.Type }).(pulumi.StringOutput)
}

type InstanceGroupManagerUpdatePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerUpdatePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceGroupManagerUpdatePolicyResponse)(nil)).Elem()
}

func (o InstanceGroupManagerUpdatePolicyResponsePtrOutput) ToInstanceGroupManagerUpdatePolicyResponsePtrOutput() InstanceGroupManagerUpdatePolicyResponsePtrOutput {
	return o
}

func (o InstanceGroupManagerUpdatePolicyResponsePtrOutput) ToInstanceGroupManagerUpdatePolicyResponsePtrOutputWithContext(ctx context.Context) InstanceGroupManagerUpdatePolicyResponsePtrOutput {
	return o
}

func (o InstanceGroupManagerUpdatePolicyResponsePtrOutput) Elem() InstanceGroupManagerUpdatePolicyResponseOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicyResponse) InstanceGroupManagerUpdatePolicyResponse { return *v }).(InstanceGroupManagerUpdatePolicyResponseOutput)
}

// The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled.
func (o InstanceGroupManagerUpdatePolicyResponsePtrOutput) InstanceRedistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InstanceRedistributionType
	}).(pulumi.StringPtrOutput)
}

// The maximum number of instances that can be created above the specified targetSize during the update process. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxSurge is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxSurge.
func (o InstanceGroupManagerUpdatePolicyResponsePtrOutput) MaxSurge() FixedOrPercentResponsePtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicyResponse) *FixedOrPercentResponse {
		if v == nil {
			return nil
		}
		return &v.MaxSurge
	}).(FixedOrPercentResponsePtrOutput)
}

// The maximum number of instances that can be unavailable during the update process. An instance is considered available if all of the following conditions are satisfied: - The instance's status is RUNNING. - If there is a health check on the instance group, the instance's health check status must be HEALTHY at least once. If there is no health check on the group, then the instance only needs to have a status of RUNNING to be considered available. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxUnavailable is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxUnavailable.
func (o InstanceGroupManagerUpdatePolicyResponsePtrOutput) MaxUnavailable() FixedOrPercentResponsePtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicyResponse) *FixedOrPercentResponse {
		if v == nil {
			return nil
		}
		return &v.MaxUnavailable
	}).(FixedOrPercentResponsePtrOutput)
}

// Minimal action to be taken on an instance. You can specify either RESTART to restart existing instances or REPLACE to delete and create new instances from the target template. If you specify a RESTART, the Updater will attempt to perform that action only. However, if the Updater determines that the minimal action you specify is not enough to perform the update, it might perform a more disruptive action.
func (o InstanceGroupManagerUpdatePolicyResponsePtrOutput) MinimalAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MinimalAction
	}).(pulumi.StringPtrOutput)
}

// What action should be used to replace instances. See minimal_action.REPLACE
func (o InstanceGroupManagerUpdatePolicyResponsePtrOutput) ReplacementMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReplacementMethod
	}).(pulumi.StringPtrOutput)
}

// The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
func (o InstanceGroupManagerUpdatePolicyResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceGroupManagerUpdatePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type InstanceGroupManagerVersion struct {
	// The URL of the instance template that is specified for this managed instance group. The group uses this template to create new instances in the managed instance group until the `targetSize` for this version is reached. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE; in those cases, existing instances are updated until the `targetSize` for this version is reached.
	InstanceTemplate *string `pulumi:"instanceTemplate"`
	// Name of the version. Unique among all versions in the scope of this managed instance group.
	Name *string `pulumi:"name"`
	// Specifies the intended number of instances to be created from the instanceTemplate. The final number of instances created from the template will be equal to: - If expressed as a fixed number, the minimum of either targetSize.fixed or instanceGroupManager.targetSize is used. - if expressed as a percent, the targetSize would be (targetSize.percent/100 * InstanceGroupManager.targetSize) If there is a remainder, the number is rounded. If unset, this version will update any remaining instances not updated by another version. Read Starting a canary update for more information.
	TargetSize *FixedOrPercent `pulumi:"targetSize"`
}

// InstanceGroupManagerVersionInput is an input type that accepts InstanceGroupManagerVersionArgs and InstanceGroupManagerVersionOutput values.
// You can construct a concrete instance of `InstanceGroupManagerVersionInput` via:
//
//          InstanceGroupManagerVersionArgs{...}
type InstanceGroupManagerVersionInput interface {
	pulumi.Input

	ToInstanceGroupManagerVersionOutput() InstanceGroupManagerVersionOutput
	ToInstanceGroupManagerVersionOutputWithContext(context.Context) InstanceGroupManagerVersionOutput
}

type InstanceGroupManagerVersionArgs struct {
	// The URL of the instance template that is specified for this managed instance group. The group uses this template to create new instances in the managed instance group until the `targetSize` for this version is reached. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE; in those cases, existing instances are updated until the `targetSize` for this version is reached.
	InstanceTemplate pulumi.StringPtrInput `pulumi:"instanceTemplate"`
	// Name of the version. Unique among all versions in the scope of this managed instance group.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the intended number of instances to be created from the instanceTemplate. The final number of instances created from the template will be equal to: - If expressed as a fixed number, the minimum of either targetSize.fixed or instanceGroupManager.targetSize is used. - if expressed as a percent, the targetSize would be (targetSize.percent/100 * InstanceGroupManager.targetSize) If there is a remainder, the number is rounded. If unset, this version will update any remaining instances not updated by another version. Read Starting a canary update for more information.
	TargetSize FixedOrPercentPtrInput `pulumi:"targetSize"`
}

func (InstanceGroupManagerVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerVersion)(nil)).Elem()
}

func (i InstanceGroupManagerVersionArgs) ToInstanceGroupManagerVersionOutput() InstanceGroupManagerVersionOutput {
	return i.ToInstanceGroupManagerVersionOutputWithContext(context.Background())
}

func (i InstanceGroupManagerVersionArgs) ToInstanceGroupManagerVersionOutputWithContext(ctx context.Context) InstanceGroupManagerVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerVersionOutput)
}

// InstanceGroupManagerVersionArrayInput is an input type that accepts InstanceGroupManagerVersionArray and InstanceGroupManagerVersionArrayOutput values.
// You can construct a concrete instance of `InstanceGroupManagerVersionArrayInput` via:
//
//          InstanceGroupManagerVersionArray{ InstanceGroupManagerVersionArgs{...} }
type InstanceGroupManagerVersionArrayInput interface {
	pulumi.Input

	ToInstanceGroupManagerVersionArrayOutput() InstanceGroupManagerVersionArrayOutput
	ToInstanceGroupManagerVersionArrayOutputWithContext(context.Context) InstanceGroupManagerVersionArrayOutput
}

type InstanceGroupManagerVersionArray []InstanceGroupManagerVersionInput

func (InstanceGroupManagerVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupManagerVersion)(nil)).Elem()
}

func (i InstanceGroupManagerVersionArray) ToInstanceGroupManagerVersionArrayOutput() InstanceGroupManagerVersionArrayOutput {
	return i.ToInstanceGroupManagerVersionArrayOutputWithContext(context.Background())
}

func (i InstanceGroupManagerVersionArray) ToInstanceGroupManagerVersionArrayOutputWithContext(ctx context.Context) InstanceGroupManagerVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerVersionArrayOutput)
}

type InstanceGroupManagerVersionOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerVersion)(nil)).Elem()
}

func (o InstanceGroupManagerVersionOutput) ToInstanceGroupManagerVersionOutput() InstanceGroupManagerVersionOutput {
	return o
}

func (o InstanceGroupManagerVersionOutput) ToInstanceGroupManagerVersionOutputWithContext(ctx context.Context) InstanceGroupManagerVersionOutput {
	return o
}

// The URL of the instance template that is specified for this managed instance group. The group uses this template to create new instances in the managed instance group until the `targetSize` for this version is reached. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE; in those cases, existing instances are updated until the `targetSize` for this version is reached.
func (o InstanceGroupManagerVersionOutput) InstanceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerVersion) *string { return v.InstanceTemplate }).(pulumi.StringPtrOutput)
}

// Name of the version. Unique among all versions in the scope of this managed instance group.
func (o InstanceGroupManagerVersionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerVersion) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the intended number of instances to be created from the instanceTemplate. The final number of instances created from the template will be equal to: - If expressed as a fixed number, the minimum of either targetSize.fixed or instanceGroupManager.targetSize is used. - if expressed as a percent, the targetSize would be (targetSize.percent/100 * InstanceGroupManager.targetSize) If there is a remainder, the number is rounded. If unset, this version will update any remaining instances not updated by another version. Read Starting a canary update for more information.
func (o InstanceGroupManagerVersionOutput) TargetSize() FixedOrPercentPtrOutput {
	return o.ApplyT(func(v InstanceGroupManagerVersion) *FixedOrPercent { return v.TargetSize }).(FixedOrPercentPtrOutput)
}

type InstanceGroupManagerVersionArrayOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupManagerVersion)(nil)).Elem()
}

func (o InstanceGroupManagerVersionArrayOutput) ToInstanceGroupManagerVersionArrayOutput() InstanceGroupManagerVersionArrayOutput {
	return o
}

func (o InstanceGroupManagerVersionArrayOutput) ToInstanceGroupManagerVersionArrayOutputWithContext(ctx context.Context) InstanceGroupManagerVersionArrayOutput {
	return o
}

func (o InstanceGroupManagerVersionArrayOutput) Index(i pulumi.IntInput) InstanceGroupManagerVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceGroupManagerVersion {
		return vs[0].([]InstanceGroupManagerVersion)[vs[1].(int)]
	}).(InstanceGroupManagerVersionOutput)
}

type InstanceGroupManagerVersionResponse struct {
	// The URL of the instance template that is specified for this managed instance group. The group uses this template to create new instances in the managed instance group until the `targetSize` for this version is reached. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE; in those cases, existing instances are updated until the `targetSize` for this version is reached.
	InstanceTemplate string `pulumi:"instanceTemplate"`
	// Name of the version. Unique among all versions in the scope of this managed instance group.
	Name string `pulumi:"name"`
	// Specifies the intended number of instances to be created from the instanceTemplate. The final number of instances created from the template will be equal to: - If expressed as a fixed number, the minimum of either targetSize.fixed or instanceGroupManager.targetSize is used. - if expressed as a percent, the targetSize would be (targetSize.percent/100 * InstanceGroupManager.targetSize) If there is a remainder, the number is rounded. If unset, this version will update any remaining instances not updated by another version. Read Starting a canary update for more information.
	TargetSize FixedOrPercentResponse `pulumi:"targetSize"`
}

// InstanceGroupManagerVersionResponseInput is an input type that accepts InstanceGroupManagerVersionResponseArgs and InstanceGroupManagerVersionResponseOutput values.
// You can construct a concrete instance of `InstanceGroupManagerVersionResponseInput` via:
//
//          InstanceGroupManagerVersionResponseArgs{...}
type InstanceGroupManagerVersionResponseInput interface {
	pulumi.Input

	ToInstanceGroupManagerVersionResponseOutput() InstanceGroupManagerVersionResponseOutput
	ToInstanceGroupManagerVersionResponseOutputWithContext(context.Context) InstanceGroupManagerVersionResponseOutput
}

type InstanceGroupManagerVersionResponseArgs struct {
	// The URL of the instance template that is specified for this managed instance group. The group uses this template to create new instances in the managed instance group until the `targetSize` for this version is reached. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE; in those cases, existing instances are updated until the `targetSize` for this version is reached.
	InstanceTemplate pulumi.StringInput `pulumi:"instanceTemplate"`
	// Name of the version. Unique among all versions in the scope of this managed instance group.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the intended number of instances to be created from the instanceTemplate. The final number of instances created from the template will be equal to: - If expressed as a fixed number, the minimum of either targetSize.fixed or instanceGroupManager.targetSize is used. - if expressed as a percent, the targetSize would be (targetSize.percent/100 * InstanceGroupManager.targetSize) If there is a remainder, the number is rounded. If unset, this version will update any remaining instances not updated by another version. Read Starting a canary update for more information.
	TargetSize FixedOrPercentResponseInput `pulumi:"targetSize"`
}

func (InstanceGroupManagerVersionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerVersionResponse)(nil)).Elem()
}

func (i InstanceGroupManagerVersionResponseArgs) ToInstanceGroupManagerVersionResponseOutput() InstanceGroupManagerVersionResponseOutput {
	return i.ToInstanceGroupManagerVersionResponseOutputWithContext(context.Background())
}

func (i InstanceGroupManagerVersionResponseArgs) ToInstanceGroupManagerVersionResponseOutputWithContext(ctx context.Context) InstanceGroupManagerVersionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerVersionResponseOutput)
}

// InstanceGroupManagerVersionResponseArrayInput is an input type that accepts InstanceGroupManagerVersionResponseArray and InstanceGroupManagerVersionResponseArrayOutput values.
// You can construct a concrete instance of `InstanceGroupManagerVersionResponseArrayInput` via:
//
//          InstanceGroupManagerVersionResponseArray{ InstanceGroupManagerVersionResponseArgs{...} }
type InstanceGroupManagerVersionResponseArrayInput interface {
	pulumi.Input

	ToInstanceGroupManagerVersionResponseArrayOutput() InstanceGroupManagerVersionResponseArrayOutput
	ToInstanceGroupManagerVersionResponseArrayOutputWithContext(context.Context) InstanceGroupManagerVersionResponseArrayOutput
}

type InstanceGroupManagerVersionResponseArray []InstanceGroupManagerVersionResponseInput

func (InstanceGroupManagerVersionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupManagerVersionResponse)(nil)).Elem()
}

func (i InstanceGroupManagerVersionResponseArray) ToInstanceGroupManagerVersionResponseArrayOutput() InstanceGroupManagerVersionResponseArrayOutput {
	return i.ToInstanceGroupManagerVersionResponseArrayOutputWithContext(context.Background())
}

func (i InstanceGroupManagerVersionResponseArray) ToInstanceGroupManagerVersionResponseArrayOutputWithContext(ctx context.Context) InstanceGroupManagerVersionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupManagerVersionResponseArrayOutput)
}

type InstanceGroupManagerVersionResponseOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupManagerVersionResponse)(nil)).Elem()
}

func (o InstanceGroupManagerVersionResponseOutput) ToInstanceGroupManagerVersionResponseOutput() InstanceGroupManagerVersionResponseOutput {
	return o
}

func (o InstanceGroupManagerVersionResponseOutput) ToInstanceGroupManagerVersionResponseOutputWithContext(ctx context.Context) InstanceGroupManagerVersionResponseOutput {
	return o
}

// The URL of the instance template that is specified for this managed instance group. The group uses this template to create new instances in the managed instance group until the `targetSize` for this version is reached. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE; in those cases, existing instances are updated until the `targetSize` for this version is reached.
func (o InstanceGroupManagerVersionResponseOutput) InstanceTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceGroupManagerVersionResponse) string { return v.InstanceTemplate }).(pulumi.StringOutput)
}

// Name of the version. Unique among all versions in the scope of this managed instance group.
func (o InstanceGroupManagerVersionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceGroupManagerVersionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the intended number of instances to be created from the instanceTemplate. The final number of instances created from the template will be equal to: - If expressed as a fixed number, the minimum of either targetSize.fixed or instanceGroupManager.targetSize is used. - if expressed as a percent, the targetSize would be (targetSize.percent/100 * InstanceGroupManager.targetSize) If there is a remainder, the number is rounded. If unset, this version will update any remaining instances not updated by another version. Read Starting a canary update for more information.
func (o InstanceGroupManagerVersionResponseOutput) TargetSize() FixedOrPercentResponseOutput {
	return o.ApplyT(func(v InstanceGroupManagerVersionResponse) FixedOrPercentResponse { return v.TargetSize }).(FixedOrPercentResponseOutput)
}

type InstanceGroupManagerVersionResponseArrayOutput struct{ *pulumi.OutputState }

func (InstanceGroupManagerVersionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupManagerVersionResponse)(nil)).Elem()
}

func (o InstanceGroupManagerVersionResponseArrayOutput) ToInstanceGroupManagerVersionResponseArrayOutput() InstanceGroupManagerVersionResponseArrayOutput {
	return o
}

func (o InstanceGroupManagerVersionResponseArrayOutput) ToInstanceGroupManagerVersionResponseArrayOutputWithContext(ctx context.Context) InstanceGroupManagerVersionResponseArrayOutput {
	return o
}

func (o InstanceGroupManagerVersionResponseArrayOutput) Index(i pulumi.IntInput) InstanceGroupManagerVersionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceGroupManagerVersionResponse {
		return vs[0].([]InstanceGroupManagerVersionResponse)[vs[1].(int)]
	}).(InstanceGroupManagerVersionResponseOutput)
}

type InstanceProperties struct {
	// Controls for advanced machine-related behavior features.
	AdvancedMachineFeatures *AdvancedMachineFeatures `pulumi:"advancedMachineFeatures"`
	// Enables instances created based on these properties to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
	CanIpForward *bool `pulumi:"canIpForward"`
	// Specifies the Confidential Instance options.
	ConfidentialInstanceConfig *ConfidentialInstanceConfig `pulumi:"confidentialInstanceConfig"`
	// An optional text description for the instances that are created from these properties.
	Description *string `pulumi:"description"`
	// An array of disks that are associated with the instances that are created from these properties.
	Disks []AttachedDisk `pulumi:"disks"`
	// A list of guest accelerator cards' type and count to use for instances created from these properties.
	GuestAccelerators []AcceleratorConfig `pulumi:"guestAccelerators"`
	// Labels to apply to instances that are created from these properties.
	Labels map[string]string `pulumi:"labels"`
	// The machine type to use for instances that are created from these properties.
	MachineType *string `pulumi:"machineType"`
	// The metadata key/value pairs to assign to instances that are created from these properties. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
	Metadata *Metadata `pulumi:"metadata"`
	// Minimum cpu/platform to be used by instances. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform.
	MinCpuPlatform *string `pulumi:"minCpuPlatform"`
	// An array of network access configurations for this interface.
	NetworkInterfaces []NetworkInterface `pulumi:"networkInterfaces"`
	// The private IPv6 google access type for VMs. If not specified, use INHERIT_FROM_SUBNETWORK as default.
	PrivateIpv6GoogleAccess *string `pulumi:"privateIpv6GoogleAccess"`
	// Specifies the reservations that instances can consume from.
	ReservationAffinity *ReservationAffinity `pulumi:"reservationAffinity"`
	// Resource policies (names, not ULRs) applied to instances created from these properties.
	ResourcePolicies []string `pulumi:"resourcePolicies"`
	// Specifies the scheduling options for the instances that are created from these properties.
	Scheduling *Scheduling `pulumi:"scheduling"`
	// A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from these properties. Use metadata queries to obtain the access tokens for these instances.
	ServiceAccounts        []ServiceAccount        `pulumi:"serviceAccounts"`
	ShieldedInstanceConfig *ShieldedInstanceConfig `pulumi:"shieldedInstanceConfig"`
	// A list of tags to apply to the instances that are created from these properties. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
	Tags *Tags `pulumi:"tags"`
}

// InstancePropertiesInput is an input type that accepts InstancePropertiesArgs and InstancePropertiesOutput values.
// You can construct a concrete instance of `InstancePropertiesInput` via:
//
//          InstancePropertiesArgs{...}
type InstancePropertiesInput interface {
	pulumi.Input

	ToInstancePropertiesOutput() InstancePropertiesOutput
	ToInstancePropertiesOutputWithContext(context.Context) InstancePropertiesOutput
}

type InstancePropertiesArgs struct {
	// Controls for advanced machine-related behavior features.
	AdvancedMachineFeatures AdvancedMachineFeaturesPtrInput `pulumi:"advancedMachineFeatures"`
	// Enables instances created based on these properties to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
	CanIpForward pulumi.BoolPtrInput `pulumi:"canIpForward"`
	// Specifies the Confidential Instance options.
	ConfidentialInstanceConfig ConfidentialInstanceConfigPtrInput `pulumi:"confidentialInstanceConfig"`
	// An optional text description for the instances that are created from these properties.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// An array of disks that are associated with the instances that are created from these properties.
	Disks AttachedDiskArrayInput `pulumi:"disks"`
	// A list of guest accelerator cards' type and count to use for instances created from these properties.
	GuestAccelerators AcceleratorConfigArrayInput `pulumi:"guestAccelerators"`
	// Labels to apply to instances that are created from these properties.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The machine type to use for instances that are created from these properties.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// The metadata key/value pairs to assign to instances that are created from these properties. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
	Metadata MetadataPtrInput `pulumi:"metadata"`
	// Minimum cpu/platform to be used by instances. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform.
	MinCpuPlatform pulumi.StringPtrInput `pulumi:"minCpuPlatform"`
	// An array of network access configurations for this interface.
	NetworkInterfaces NetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	// The private IPv6 google access type for VMs. If not specified, use INHERIT_FROM_SUBNETWORK as default.
	PrivateIpv6GoogleAccess *InstancePropertiesPrivateIpv6GoogleAccess `pulumi:"privateIpv6GoogleAccess"`
	// Specifies the reservations that instances can consume from.
	ReservationAffinity ReservationAffinityPtrInput `pulumi:"reservationAffinity"`
	// Resource policies (names, not ULRs) applied to instances created from these properties.
	ResourcePolicies pulumi.StringArrayInput `pulumi:"resourcePolicies"`
	// Specifies the scheduling options for the instances that are created from these properties.
	Scheduling SchedulingPtrInput `pulumi:"scheduling"`
	// A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from these properties. Use metadata queries to obtain the access tokens for these instances.
	ServiceAccounts        ServiceAccountArrayInput       `pulumi:"serviceAccounts"`
	ShieldedInstanceConfig ShieldedInstanceConfigPtrInput `pulumi:"shieldedInstanceConfig"`
	// A list of tags to apply to the instances that are created from these properties. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
	Tags TagsPtrInput `pulumi:"tags"`
}

func (InstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceProperties)(nil)).Elem()
}

func (i InstancePropertiesArgs) ToInstancePropertiesOutput() InstancePropertiesOutput {
	return i.ToInstancePropertiesOutputWithContext(context.Background())
}

func (i InstancePropertiesArgs) ToInstancePropertiesOutputWithContext(ctx context.Context) InstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePropertiesOutput)
}

func (i InstancePropertiesArgs) ToInstancePropertiesPtrOutput() InstancePropertiesPtrOutput {
	return i.ToInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i InstancePropertiesArgs) ToInstancePropertiesPtrOutputWithContext(ctx context.Context) InstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePropertiesOutput).ToInstancePropertiesPtrOutputWithContext(ctx)
}

// InstancePropertiesPtrInput is an input type that accepts InstancePropertiesArgs, InstancePropertiesPtr and InstancePropertiesPtrOutput values.
// You can construct a concrete instance of `InstancePropertiesPtrInput` via:
//
//          InstancePropertiesArgs{...}
//
//  or:
//
//          nil
type InstancePropertiesPtrInput interface {
	pulumi.Input

	ToInstancePropertiesPtrOutput() InstancePropertiesPtrOutput
	ToInstancePropertiesPtrOutputWithContext(context.Context) InstancePropertiesPtrOutput
}

type instancePropertiesPtrType InstancePropertiesArgs

func InstancePropertiesPtr(v *InstancePropertiesArgs) InstancePropertiesPtrInput {
	return (*instancePropertiesPtrType)(v)
}

func (*instancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceProperties)(nil)).Elem()
}

func (i *instancePropertiesPtrType) ToInstancePropertiesPtrOutput() InstancePropertiesPtrOutput {
	return i.ToInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *instancePropertiesPtrType) ToInstancePropertiesPtrOutputWithContext(ctx context.Context) InstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePropertiesPtrOutput)
}

type InstancePropertiesOutput struct{ *pulumi.OutputState }

func (InstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceProperties)(nil)).Elem()
}

func (o InstancePropertiesOutput) ToInstancePropertiesOutput() InstancePropertiesOutput {
	return o
}

func (o InstancePropertiesOutput) ToInstancePropertiesOutputWithContext(ctx context.Context) InstancePropertiesOutput {
	return o
}

func (o InstancePropertiesOutput) ToInstancePropertiesPtrOutput() InstancePropertiesPtrOutput {
	return o.ToInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o InstancePropertiesOutput) ToInstancePropertiesPtrOutputWithContext(ctx context.Context) InstancePropertiesPtrOutput {
	return o.ApplyT(func(v InstanceProperties) *InstanceProperties {
		return &v
	}).(InstancePropertiesPtrOutput)
}

// Controls for advanced machine-related behavior features.
func (o InstancePropertiesOutput) AdvancedMachineFeatures() AdvancedMachineFeaturesPtrOutput {
	return o.ApplyT(func(v InstanceProperties) *AdvancedMachineFeatures { return v.AdvancedMachineFeatures }).(AdvancedMachineFeaturesPtrOutput)
}

// Enables instances created based on these properties to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
func (o InstancePropertiesOutput) CanIpForward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceProperties) *bool { return v.CanIpForward }).(pulumi.BoolPtrOutput)
}

// Specifies the Confidential Instance options.
func (o InstancePropertiesOutput) ConfidentialInstanceConfig() ConfidentialInstanceConfigPtrOutput {
	return o.ApplyT(func(v InstanceProperties) *ConfidentialInstanceConfig { return v.ConfidentialInstanceConfig }).(ConfidentialInstanceConfigPtrOutput)
}

// An optional text description for the instances that are created from these properties.
func (o InstancePropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// An array of disks that are associated with the instances that are created from these properties.
func (o InstancePropertiesOutput) Disks() AttachedDiskArrayOutput {
	return o.ApplyT(func(v InstanceProperties) []AttachedDisk { return v.Disks }).(AttachedDiskArrayOutput)
}

// A list of guest accelerator cards' type and count to use for instances created from these properties.
func (o InstancePropertiesOutput) GuestAccelerators() AcceleratorConfigArrayOutput {
	return o.ApplyT(func(v InstanceProperties) []AcceleratorConfig { return v.GuestAccelerators }).(AcceleratorConfigArrayOutput)
}

// Labels to apply to instances that are created from these properties.
func (o InstancePropertiesOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceProperties) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The machine type to use for instances that are created from these properties.
func (o InstancePropertiesOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceProperties) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// The metadata key/value pairs to assign to instances that are created from these properties. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
func (o InstancePropertiesOutput) Metadata() MetadataPtrOutput {
	return o.ApplyT(func(v InstanceProperties) *Metadata { return v.Metadata }).(MetadataPtrOutput)
}

// Minimum cpu/platform to be used by instances. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform.
func (o InstancePropertiesOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceProperties) *string { return v.MinCpuPlatform }).(pulumi.StringPtrOutput)
}

// An array of network access configurations for this interface.
func (o InstancePropertiesOutput) NetworkInterfaces() NetworkInterfaceArrayOutput {
	return o.ApplyT(func(v InstanceProperties) []NetworkInterface { return v.NetworkInterfaces }).(NetworkInterfaceArrayOutput)
}

// The private IPv6 google access type for VMs. If not specified, use INHERIT_FROM_SUBNETWORK as default.
func (o InstancePropertiesOutput) PrivateIpv6GoogleAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceProperties) *string { return v.PrivateIpv6GoogleAccess }).(pulumi.StringPtrOutput)
}

// Specifies the reservations that instances can consume from.
func (o InstancePropertiesOutput) ReservationAffinity() ReservationAffinityPtrOutput {
	return o.ApplyT(func(v InstanceProperties) *ReservationAffinity { return v.ReservationAffinity }).(ReservationAffinityPtrOutput)
}

// Resource policies (names, not ULRs) applied to instances created from these properties.
func (o InstancePropertiesOutput) ResourcePolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceProperties) []string { return v.ResourcePolicies }).(pulumi.StringArrayOutput)
}

// Specifies the scheduling options for the instances that are created from these properties.
func (o InstancePropertiesOutput) Scheduling() SchedulingPtrOutput {
	return o.ApplyT(func(v InstanceProperties) *Scheduling { return v.Scheduling }).(SchedulingPtrOutput)
}

// A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from these properties. Use metadata queries to obtain the access tokens for these instances.
func (o InstancePropertiesOutput) ServiceAccounts() ServiceAccountArrayOutput {
	return o.ApplyT(func(v InstanceProperties) []ServiceAccount { return v.ServiceAccounts }).(ServiceAccountArrayOutput)
}

func (o InstancePropertiesOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v InstanceProperties) *ShieldedInstanceConfig { return v.ShieldedInstanceConfig }).(ShieldedInstanceConfigPtrOutput)
}

// A list of tags to apply to the instances that are created from these properties. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
func (o InstancePropertiesOutput) Tags() TagsPtrOutput {
	return o.ApplyT(func(v InstanceProperties) *Tags { return v.Tags }).(TagsPtrOutput)
}

type InstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (InstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceProperties)(nil)).Elem()
}

func (o InstancePropertiesPtrOutput) ToInstancePropertiesPtrOutput() InstancePropertiesPtrOutput {
	return o
}

func (o InstancePropertiesPtrOutput) ToInstancePropertiesPtrOutputWithContext(ctx context.Context) InstancePropertiesPtrOutput {
	return o
}

func (o InstancePropertiesPtrOutput) Elem() InstancePropertiesOutput {
	return o.ApplyT(func(v *InstanceProperties) InstanceProperties { return *v }).(InstancePropertiesOutput)
}

// Controls for advanced machine-related behavior features.
func (o InstancePropertiesPtrOutput) AdvancedMachineFeatures() AdvancedMachineFeaturesPtrOutput {
	return o.ApplyT(func(v *InstanceProperties) *AdvancedMachineFeatures {
		if v == nil {
			return nil
		}
		return v.AdvancedMachineFeatures
	}).(AdvancedMachineFeaturesPtrOutput)
}

// Enables instances created based on these properties to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
func (o InstancePropertiesPtrOutput) CanIpForward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceProperties) *bool {
		if v == nil {
			return nil
		}
		return v.CanIpForward
	}).(pulumi.BoolPtrOutput)
}

// Specifies the Confidential Instance options.
func (o InstancePropertiesPtrOutput) ConfidentialInstanceConfig() ConfidentialInstanceConfigPtrOutput {
	return o.ApplyT(func(v *InstanceProperties) *ConfidentialInstanceConfig {
		if v == nil {
			return nil
		}
		return v.ConfidentialInstanceConfig
	}).(ConfidentialInstanceConfigPtrOutput)
}

// An optional text description for the instances that are created from these properties.
func (o InstancePropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// An array of disks that are associated with the instances that are created from these properties.
func (o InstancePropertiesPtrOutput) Disks() AttachedDiskArrayOutput {
	return o.ApplyT(func(v *InstanceProperties) []AttachedDisk {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(AttachedDiskArrayOutput)
}

// A list of guest accelerator cards' type and count to use for instances created from these properties.
func (o InstancePropertiesPtrOutput) GuestAccelerators() AcceleratorConfigArrayOutput {
	return o.ApplyT(func(v *InstanceProperties) []AcceleratorConfig {
		if v == nil {
			return nil
		}
		return v.GuestAccelerators
	}).(AcceleratorConfigArrayOutput)
}

// Labels to apply to instances that are created from these properties.
func (o InstancePropertiesPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The machine type to use for instances that are created from these properties.
func (o InstancePropertiesPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// The metadata key/value pairs to assign to instances that are created from these properties. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
func (o InstancePropertiesPtrOutput) Metadata() MetadataPtrOutput {
	return o.ApplyT(func(v *InstanceProperties) *Metadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(MetadataPtrOutput)
}

// Minimum cpu/platform to be used by instances. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform.
func (o InstancePropertiesPtrOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.MinCpuPlatform
	}).(pulumi.StringPtrOutput)
}

// An array of network access configurations for this interface.
func (o InstancePropertiesPtrOutput) NetworkInterfaces() NetworkInterfaceArrayOutput {
	return o.ApplyT(func(v *InstanceProperties) []NetworkInterface {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaces
	}).(NetworkInterfaceArrayOutput)
}

// The private IPv6 google access type for VMs. If not specified, use INHERIT_FROM_SUBNETWORK as default.
func (o InstancePropertiesPtrOutput) PrivateIpv6GoogleAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrivateIpv6GoogleAccess
	}).(pulumi.StringPtrOutput)
}

// Specifies the reservations that instances can consume from.
func (o InstancePropertiesPtrOutput) ReservationAffinity() ReservationAffinityPtrOutput {
	return o.ApplyT(func(v *InstanceProperties) *ReservationAffinity {
		if v == nil {
			return nil
		}
		return v.ReservationAffinity
	}).(ReservationAffinityPtrOutput)
}

// Resource policies (names, not ULRs) applied to instances created from these properties.
func (o InstancePropertiesPtrOutput) ResourcePolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceProperties) []string {
		if v == nil {
			return nil
		}
		return v.ResourcePolicies
	}).(pulumi.StringArrayOutput)
}

// Specifies the scheduling options for the instances that are created from these properties.
func (o InstancePropertiesPtrOutput) Scheduling() SchedulingPtrOutput {
	return o.ApplyT(func(v *InstanceProperties) *Scheduling {
		if v == nil {
			return nil
		}
		return v.Scheduling
	}).(SchedulingPtrOutput)
}

// A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from these properties. Use metadata queries to obtain the access tokens for these instances.
func (o InstancePropertiesPtrOutput) ServiceAccounts() ServiceAccountArrayOutput {
	return o.ApplyT(func(v *InstanceProperties) []ServiceAccount {
		if v == nil {
			return nil
		}
		return v.ServiceAccounts
	}).(ServiceAccountArrayOutput)
}

func (o InstancePropertiesPtrOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v *InstanceProperties) *ShieldedInstanceConfig {
		if v == nil {
			return nil
		}
		return v.ShieldedInstanceConfig
	}).(ShieldedInstanceConfigPtrOutput)
}

// A list of tags to apply to the instances that are created from these properties. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
func (o InstancePropertiesPtrOutput) Tags() TagsPtrOutput {
	return o.ApplyT(func(v *InstanceProperties) *Tags {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(TagsPtrOutput)
}

type InstancePropertiesResponse struct {
	// Controls for advanced machine-related behavior features.
	AdvancedMachineFeatures AdvancedMachineFeaturesResponse `pulumi:"advancedMachineFeatures"`
	// Enables instances created based on these properties to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
	CanIpForward bool `pulumi:"canIpForward"`
	// Specifies the Confidential Instance options.
	ConfidentialInstanceConfig ConfidentialInstanceConfigResponse `pulumi:"confidentialInstanceConfig"`
	// An optional text description for the instances that are created from these properties.
	Description string `pulumi:"description"`
	// An array of disks that are associated with the instances that are created from these properties.
	Disks []AttachedDiskResponse `pulumi:"disks"`
	// A list of guest accelerator cards' type and count to use for instances created from these properties.
	GuestAccelerators []AcceleratorConfigResponse `pulumi:"guestAccelerators"`
	// Labels to apply to instances that are created from these properties.
	Labels map[string]string `pulumi:"labels"`
	// The machine type to use for instances that are created from these properties.
	MachineType string `pulumi:"machineType"`
	// The metadata key/value pairs to assign to instances that are created from these properties. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
	Metadata MetadataResponse `pulumi:"metadata"`
	// Minimum cpu/platform to be used by instances. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform.
	MinCpuPlatform string `pulumi:"minCpuPlatform"`
	// An array of network access configurations for this interface.
	NetworkInterfaces []NetworkInterfaceResponse `pulumi:"networkInterfaces"`
	// The private IPv6 google access type for VMs. If not specified, use INHERIT_FROM_SUBNETWORK as default.
	PrivateIpv6GoogleAccess string `pulumi:"privateIpv6GoogleAccess"`
	// Specifies the reservations that instances can consume from.
	ReservationAffinity ReservationAffinityResponse `pulumi:"reservationAffinity"`
	// Resource policies (names, not ULRs) applied to instances created from these properties.
	ResourcePolicies []string `pulumi:"resourcePolicies"`
	// Specifies the scheduling options for the instances that are created from these properties.
	Scheduling SchedulingResponse `pulumi:"scheduling"`
	// A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from these properties. Use metadata queries to obtain the access tokens for these instances.
	ServiceAccounts        []ServiceAccountResponse       `pulumi:"serviceAccounts"`
	ShieldedInstanceConfig ShieldedInstanceConfigResponse `pulumi:"shieldedInstanceConfig"`
	// A list of tags to apply to the instances that are created from these properties. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
	Tags TagsResponse `pulumi:"tags"`
}

// InstancePropertiesResponseInput is an input type that accepts InstancePropertiesResponseArgs and InstancePropertiesResponseOutput values.
// You can construct a concrete instance of `InstancePropertiesResponseInput` via:
//
//          InstancePropertiesResponseArgs{...}
type InstancePropertiesResponseInput interface {
	pulumi.Input

	ToInstancePropertiesResponseOutput() InstancePropertiesResponseOutput
	ToInstancePropertiesResponseOutputWithContext(context.Context) InstancePropertiesResponseOutput
}

type InstancePropertiesResponseArgs struct {
	// Controls for advanced machine-related behavior features.
	AdvancedMachineFeatures AdvancedMachineFeaturesResponseInput `pulumi:"advancedMachineFeatures"`
	// Enables instances created based on these properties to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
	CanIpForward pulumi.BoolInput `pulumi:"canIpForward"`
	// Specifies the Confidential Instance options.
	ConfidentialInstanceConfig ConfidentialInstanceConfigResponseInput `pulumi:"confidentialInstanceConfig"`
	// An optional text description for the instances that are created from these properties.
	Description pulumi.StringInput `pulumi:"description"`
	// An array of disks that are associated with the instances that are created from these properties.
	Disks AttachedDiskResponseArrayInput `pulumi:"disks"`
	// A list of guest accelerator cards' type and count to use for instances created from these properties.
	GuestAccelerators AcceleratorConfigResponseArrayInput `pulumi:"guestAccelerators"`
	// Labels to apply to instances that are created from these properties.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The machine type to use for instances that are created from these properties.
	MachineType pulumi.StringInput `pulumi:"machineType"`
	// The metadata key/value pairs to assign to instances that are created from these properties. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
	Metadata MetadataResponseInput `pulumi:"metadata"`
	// Minimum cpu/platform to be used by instances. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform.
	MinCpuPlatform pulumi.StringInput `pulumi:"minCpuPlatform"`
	// An array of network access configurations for this interface.
	NetworkInterfaces NetworkInterfaceResponseArrayInput `pulumi:"networkInterfaces"`
	// The private IPv6 google access type for VMs. If not specified, use INHERIT_FROM_SUBNETWORK as default.
	PrivateIpv6GoogleAccess pulumi.StringInput `pulumi:"privateIpv6GoogleAccess"`
	// Specifies the reservations that instances can consume from.
	ReservationAffinity ReservationAffinityResponseInput `pulumi:"reservationAffinity"`
	// Resource policies (names, not ULRs) applied to instances created from these properties.
	ResourcePolicies pulumi.StringArrayInput `pulumi:"resourcePolicies"`
	// Specifies the scheduling options for the instances that are created from these properties.
	Scheduling SchedulingResponseInput `pulumi:"scheduling"`
	// A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from these properties. Use metadata queries to obtain the access tokens for these instances.
	ServiceAccounts        ServiceAccountResponseArrayInput    `pulumi:"serviceAccounts"`
	ShieldedInstanceConfig ShieldedInstanceConfigResponseInput `pulumi:"shieldedInstanceConfig"`
	// A list of tags to apply to the instances that are created from these properties. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
	Tags TagsResponseInput `pulumi:"tags"`
}

func (InstancePropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePropertiesResponse)(nil)).Elem()
}

func (i InstancePropertiesResponseArgs) ToInstancePropertiesResponseOutput() InstancePropertiesResponseOutput {
	return i.ToInstancePropertiesResponseOutputWithContext(context.Background())
}

func (i InstancePropertiesResponseArgs) ToInstancePropertiesResponseOutputWithContext(ctx context.Context) InstancePropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePropertiesResponseOutput)
}

func (i InstancePropertiesResponseArgs) ToInstancePropertiesResponsePtrOutput() InstancePropertiesResponsePtrOutput {
	return i.ToInstancePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i InstancePropertiesResponseArgs) ToInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) InstancePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePropertiesResponseOutput).ToInstancePropertiesResponsePtrOutputWithContext(ctx)
}

// InstancePropertiesResponsePtrInput is an input type that accepts InstancePropertiesResponseArgs, InstancePropertiesResponsePtr and InstancePropertiesResponsePtrOutput values.
// You can construct a concrete instance of `InstancePropertiesResponsePtrInput` via:
//
//          InstancePropertiesResponseArgs{...}
//
//  or:
//
//          nil
type InstancePropertiesResponsePtrInput interface {
	pulumi.Input

	ToInstancePropertiesResponsePtrOutput() InstancePropertiesResponsePtrOutput
	ToInstancePropertiesResponsePtrOutputWithContext(context.Context) InstancePropertiesResponsePtrOutput
}

type instancePropertiesResponsePtrType InstancePropertiesResponseArgs

func InstancePropertiesResponsePtr(v *InstancePropertiesResponseArgs) InstancePropertiesResponsePtrInput {
	return (*instancePropertiesResponsePtrType)(v)
}

func (*instancePropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstancePropertiesResponse)(nil)).Elem()
}

func (i *instancePropertiesResponsePtrType) ToInstancePropertiesResponsePtrOutput() InstancePropertiesResponsePtrOutput {
	return i.ToInstancePropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *instancePropertiesResponsePtrType) ToInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) InstancePropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePropertiesResponsePtrOutput)
}

type InstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (InstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePropertiesResponse)(nil)).Elem()
}

func (o InstancePropertiesResponseOutput) ToInstancePropertiesResponseOutput() InstancePropertiesResponseOutput {
	return o
}

func (o InstancePropertiesResponseOutput) ToInstancePropertiesResponseOutputWithContext(ctx context.Context) InstancePropertiesResponseOutput {
	return o
}

func (o InstancePropertiesResponseOutput) ToInstancePropertiesResponsePtrOutput() InstancePropertiesResponsePtrOutput {
	return o.ToInstancePropertiesResponsePtrOutputWithContext(context.Background())
}

func (o InstancePropertiesResponseOutput) ToInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) InstancePropertiesResponsePtrOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) *InstancePropertiesResponse {
		return &v
	}).(InstancePropertiesResponsePtrOutput)
}

// Controls for advanced machine-related behavior features.
func (o InstancePropertiesResponseOutput) AdvancedMachineFeatures() AdvancedMachineFeaturesResponseOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) AdvancedMachineFeaturesResponse { return v.AdvancedMachineFeatures }).(AdvancedMachineFeaturesResponseOutput)
}

// Enables instances created based on these properties to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
func (o InstancePropertiesResponseOutput) CanIpForward() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) bool { return v.CanIpForward }).(pulumi.BoolOutput)
}

// Specifies the Confidential Instance options.
func (o InstancePropertiesResponseOutput) ConfidentialInstanceConfig() ConfidentialInstanceConfigResponseOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) ConfidentialInstanceConfigResponse {
		return v.ConfidentialInstanceConfig
	}).(ConfidentialInstanceConfigResponseOutput)
}

// An optional text description for the instances that are created from these properties.
func (o InstancePropertiesResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) string { return v.Description }).(pulumi.StringOutput)
}

// An array of disks that are associated with the instances that are created from these properties.
func (o InstancePropertiesResponseOutput) Disks() AttachedDiskResponseArrayOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) []AttachedDiskResponse { return v.Disks }).(AttachedDiskResponseArrayOutput)
}

// A list of guest accelerator cards' type and count to use for instances created from these properties.
func (o InstancePropertiesResponseOutput) GuestAccelerators() AcceleratorConfigResponseArrayOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) []AcceleratorConfigResponse { return v.GuestAccelerators }).(AcceleratorConfigResponseArrayOutput)
}

// Labels to apply to instances that are created from these properties.
func (o InstancePropertiesResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The machine type to use for instances that are created from these properties.
func (o InstancePropertiesResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// The metadata key/value pairs to assign to instances that are created from these properties. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
func (o InstancePropertiesResponseOutput) Metadata() MetadataResponseOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) MetadataResponse { return v.Metadata }).(MetadataResponseOutput)
}

// Minimum cpu/platform to be used by instances. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform.
func (o InstancePropertiesResponseOutput) MinCpuPlatform() pulumi.StringOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) string { return v.MinCpuPlatform }).(pulumi.StringOutput)
}

// An array of network access configurations for this interface.
func (o InstancePropertiesResponseOutput) NetworkInterfaces() NetworkInterfaceResponseArrayOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) []NetworkInterfaceResponse { return v.NetworkInterfaces }).(NetworkInterfaceResponseArrayOutput)
}

// The private IPv6 google access type for VMs. If not specified, use INHERIT_FROM_SUBNETWORK as default.
func (o InstancePropertiesResponseOutput) PrivateIpv6GoogleAccess() pulumi.StringOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) string { return v.PrivateIpv6GoogleAccess }).(pulumi.StringOutput)
}

// Specifies the reservations that instances can consume from.
func (o InstancePropertiesResponseOutput) ReservationAffinity() ReservationAffinityResponseOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) ReservationAffinityResponse { return v.ReservationAffinity }).(ReservationAffinityResponseOutput)
}

// Resource policies (names, not ULRs) applied to instances created from these properties.
func (o InstancePropertiesResponseOutput) ResourcePolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) []string { return v.ResourcePolicies }).(pulumi.StringArrayOutput)
}

// Specifies the scheduling options for the instances that are created from these properties.
func (o InstancePropertiesResponseOutput) Scheduling() SchedulingResponseOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) SchedulingResponse { return v.Scheduling }).(SchedulingResponseOutput)
}

// A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from these properties. Use metadata queries to obtain the access tokens for these instances.
func (o InstancePropertiesResponseOutput) ServiceAccounts() ServiceAccountResponseArrayOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) []ServiceAccountResponse { return v.ServiceAccounts }).(ServiceAccountResponseArrayOutput)
}

func (o InstancePropertiesResponseOutput) ShieldedInstanceConfig() ShieldedInstanceConfigResponseOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) ShieldedInstanceConfigResponse { return v.ShieldedInstanceConfig }).(ShieldedInstanceConfigResponseOutput)
}

// A list of tags to apply to the instances that are created from these properties. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
func (o InstancePropertiesResponseOutput) Tags() TagsResponseOutput {
	return o.ApplyT(func(v InstancePropertiesResponse) TagsResponse { return v.Tags }).(TagsResponseOutput)
}

type InstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (InstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstancePropertiesResponse)(nil)).Elem()
}

func (o InstancePropertiesResponsePtrOutput) ToInstancePropertiesResponsePtrOutput() InstancePropertiesResponsePtrOutput {
	return o
}

func (o InstancePropertiesResponsePtrOutput) ToInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) InstancePropertiesResponsePtrOutput {
	return o
}

func (o InstancePropertiesResponsePtrOutput) Elem() InstancePropertiesResponseOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) InstancePropertiesResponse { return *v }).(InstancePropertiesResponseOutput)
}

// Controls for advanced machine-related behavior features.
func (o InstancePropertiesResponsePtrOutput) AdvancedMachineFeatures() AdvancedMachineFeaturesResponsePtrOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) *AdvancedMachineFeaturesResponse {
		if v == nil {
			return nil
		}
		return &v.AdvancedMachineFeatures
	}).(AdvancedMachineFeaturesResponsePtrOutput)
}

// Enables instances created based on these properties to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
func (o InstancePropertiesResponsePtrOutput) CanIpForward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CanIpForward
	}).(pulumi.BoolPtrOutput)
}

// Specifies the Confidential Instance options.
func (o InstancePropertiesResponsePtrOutput) ConfidentialInstanceConfig() ConfidentialInstanceConfigResponsePtrOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) *ConfidentialInstanceConfigResponse {
		if v == nil {
			return nil
		}
		return &v.ConfidentialInstanceConfig
	}).(ConfidentialInstanceConfigResponsePtrOutput)
}

// An optional text description for the instances that are created from these properties.
func (o InstancePropertiesResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// An array of disks that are associated with the instances that are created from these properties.
func (o InstancePropertiesResponsePtrOutput) Disks() AttachedDiskResponseArrayOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) []AttachedDiskResponse {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(AttachedDiskResponseArrayOutput)
}

// A list of guest accelerator cards' type and count to use for instances created from these properties.
func (o InstancePropertiesResponsePtrOutput) GuestAccelerators() AcceleratorConfigResponseArrayOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) []AcceleratorConfigResponse {
		if v == nil {
			return nil
		}
		return v.GuestAccelerators
	}).(AcceleratorConfigResponseArrayOutput)
}

// Labels to apply to instances that are created from these properties.
func (o InstancePropertiesResponsePtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The machine type to use for instances that are created from these properties.
func (o InstancePropertiesResponsePtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MachineType
	}).(pulumi.StringPtrOutput)
}

// The metadata key/value pairs to assign to instances that are created from these properties. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
func (o InstancePropertiesResponsePtrOutput) Metadata() MetadataResponsePtrOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) *MetadataResponse {
		if v == nil {
			return nil
		}
		return &v.Metadata
	}).(MetadataResponsePtrOutput)
}

// Minimum cpu/platform to be used by instances. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform.
func (o InstancePropertiesResponsePtrOutput) MinCpuPlatform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MinCpuPlatform
	}).(pulumi.StringPtrOutput)
}

// An array of network access configurations for this interface.
func (o InstancePropertiesResponsePtrOutput) NetworkInterfaces() NetworkInterfaceResponseArrayOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) []NetworkInterfaceResponse {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaces
	}).(NetworkInterfaceResponseArrayOutput)
}

// The private IPv6 google access type for VMs. If not specified, use INHERIT_FROM_SUBNETWORK as default.
func (o InstancePropertiesResponsePtrOutput) PrivateIpv6GoogleAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateIpv6GoogleAccess
	}).(pulumi.StringPtrOutput)
}

// Specifies the reservations that instances can consume from.
func (o InstancePropertiesResponsePtrOutput) ReservationAffinity() ReservationAffinityResponsePtrOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) *ReservationAffinityResponse {
		if v == nil {
			return nil
		}
		return &v.ReservationAffinity
	}).(ReservationAffinityResponsePtrOutput)
}

// Resource policies (names, not ULRs) applied to instances created from these properties.
func (o InstancePropertiesResponsePtrOutput) ResourcePolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.ResourcePolicies
	}).(pulumi.StringArrayOutput)
}

// Specifies the scheduling options for the instances that are created from these properties.
func (o InstancePropertiesResponsePtrOutput) Scheduling() SchedulingResponsePtrOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) *SchedulingResponse {
		if v == nil {
			return nil
		}
		return &v.Scheduling
	}).(SchedulingResponsePtrOutput)
}

// A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from these properties. Use metadata queries to obtain the access tokens for these instances.
func (o InstancePropertiesResponsePtrOutput) ServiceAccounts() ServiceAccountResponseArrayOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) []ServiceAccountResponse {
		if v == nil {
			return nil
		}
		return v.ServiceAccounts
	}).(ServiceAccountResponseArrayOutput)
}

func (o InstancePropertiesResponsePtrOutput) ShieldedInstanceConfig() ShieldedInstanceConfigResponsePtrOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) *ShieldedInstanceConfigResponse {
		if v == nil {
			return nil
		}
		return &v.ShieldedInstanceConfig
	}).(ShieldedInstanceConfigResponsePtrOutput)
}

// A list of tags to apply to the instances that are created from these properties. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
func (o InstancePropertiesResponsePtrOutput) Tags() TagsResponsePtrOutput {
	return o.ApplyT(func(v *InstancePropertiesResponse) *TagsResponse {
		if v == nil {
			return nil
		}
		return &v.Tags
	}).(TagsResponsePtrOutput)
}

// HttpRouteRuleMatch criteria for field values that must stay within the specified integer range.
type Int64RangeMatch struct {
	// The end of the range (exclusive) in signed long integer format.
	RangeEnd *string `pulumi:"rangeEnd"`
	// The start of the range (inclusive) in signed long integer format.
	RangeStart *string `pulumi:"rangeStart"`
}

// Int64RangeMatchInput is an input type that accepts Int64RangeMatchArgs and Int64RangeMatchOutput values.
// You can construct a concrete instance of `Int64RangeMatchInput` via:
//
//          Int64RangeMatchArgs{...}
type Int64RangeMatchInput interface {
	pulumi.Input

	ToInt64RangeMatchOutput() Int64RangeMatchOutput
	ToInt64RangeMatchOutputWithContext(context.Context) Int64RangeMatchOutput
}

// HttpRouteRuleMatch criteria for field values that must stay within the specified integer range.
type Int64RangeMatchArgs struct {
	// The end of the range (exclusive) in signed long integer format.
	RangeEnd pulumi.StringPtrInput `pulumi:"rangeEnd"`
	// The start of the range (inclusive) in signed long integer format.
	RangeStart pulumi.StringPtrInput `pulumi:"rangeStart"`
}

func (Int64RangeMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Int64RangeMatch)(nil)).Elem()
}

func (i Int64RangeMatchArgs) ToInt64RangeMatchOutput() Int64RangeMatchOutput {
	return i.ToInt64RangeMatchOutputWithContext(context.Background())
}

func (i Int64RangeMatchArgs) ToInt64RangeMatchOutputWithContext(ctx context.Context) Int64RangeMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Int64RangeMatchOutput)
}

func (i Int64RangeMatchArgs) ToInt64RangeMatchPtrOutput() Int64RangeMatchPtrOutput {
	return i.ToInt64RangeMatchPtrOutputWithContext(context.Background())
}

func (i Int64RangeMatchArgs) ToInt64RangeMatchPtrOutputWithContext(ctx context.Context) Int64RangeMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Int64RangeMatchOutput).ToInt64RangeMatchPtrOutputWithContext(ctx)
}

// Int64RangeMatchPtrInput is an input type that accepts Int64RangeMatchArgs, Int64RangeMatchPtr and Int64RangeMatchPtrOutput values.
// You can construct a concrete instance of `Int64RangeMatchPtrInput` via:
//
//          Int64RangeMatchArgs{...}
//
//  or:
//
//          nil
type Int64RangeMatchPtrInput interface {
	pulumi.Input

	ToInt64RangeMatchPtrOutput() Int64RangeMatchPtrOutput
	ToInt64RangeMatchPtrOutputWithContext(context.Context) Int64RangeMatchPtrOutput
}

type int64RangeMatchPtrType Int64RangeMatchArgs

func Int64RangeMatchPtr(v *Int64RangeMatchArgs) Int64RangeMatchPtrInput {
	return (*int64RangeMatchPtrType)(v)
}

func (*int64RangeMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Int64RangeMatch)(nil)).Elem()
}

func (i *int64RangeMatchPtrType) ToInt64RangeMatchPtrOutput() Int64RangeMatchPtrOutput {
	return i.ToInt64RangeMatchPtrOutputWithContext(context.Background())
}

func (i *int64RangeMatchPtrType) ToInt64RangeMatchPtrOutputWithContext(ctx context.Context) Int64RangeMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Int64RangeMatchPtrOutput)
}

// HttpRouteRuleMatch criteria for field values that must stay within the specified integer range.
type Int64RangeMatchOutput struct{ *pulumi.OutputState }

func (Int64RangeMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Int64RangeMatch)(nil)).Elem()
}

func (o Int64RangeMatchOutput) ToInt64RangeMatchOutput() Int64RangeMatchOutput {
	return o
}

func (o Int64RangeMatchOutput) ToInt64RangeMatchOutputWithContext(ctx context.Context) Int64RangeMatchOutput {
	return o
}

func (o Int64RangeMatchOutput) ToInt64RangeMatchPtrOutput() Int64RangeMatchPtrOutput {
	return o.ToInt64RangeMatchPtrOutputWithContext(context.Background())
}

func (o Int64RangeMatchOutput) ToInt64RangeMatchPtrOutputWithContext(ctx context.Context) Int64RangeMatchPtrOutput {
	return o.ApplyT(func(v Int64RangeMatch) *Int64RangeMatch {
		return &v
	}).(Int64RangeMatchPtrOutput)
}

// The end of the range (exclusive) in signed long integer format.
func (o Int64RangeMatchOutput) RangeEnd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Int64RangeMatch) *string { return v.RangeEnd }).(pulumi.StringPtrOutput)
}

// The start of the range (inclusive) in signed long integer format.
func (o Int64RangeMatchOutput) RangeStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Int64RangeMatch) *string { return v.RangeStart }).(pulumi.StringPtrOutput)
}

type Int64RangeMatchPtrOutput struct{ *pulumi.OutputState }

func (Int64RangeMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Int64RangeMatch)(nil)).Elem()
}

func (o Int64RangeMatchPtrOutput) ToInt64RangeMatchPtrOutput() Int64RangeMatchPtrOutput {
	return o
}

func (o Int64RangeMatchPtrOutput) ToInt64RangeMatchPtrOutputWithContext(ctx context.Context) Int64RangeMatchPtrOutput {
	return o
}

func (o Int64RangeMatchPtrOutput) Elem() Int64RangeMatchOutput {
	return o.ApplyT(func(v *Int64RangeMatch) Int64RangeMatch { return *v }).(Int64RangeMatchOutput)
}

// The end of the range (exclusive) in signed long integer format.
func (o Int64RangeMatchPtrOutput) RangeEnd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Int64RangeMatch) *string {
		if v == nil {
			return nil
		}
		return v.RangeEnd
	}).(pulumi.StringPtrOutput)
}

// The start of the range (inclusive) in signed long integer format.
func (o Int64RangeMatchPtrOutput) RangeStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Int64RangeMatch) *string {
		if v == nil {
			return nil
		}
		return v.RangeStart
	}).(pulumi.StringPtrOutput)
}

// HttpRouteRuleMatch criteria for field values that must stay within the specified integer range.
type Int64RangeMatchResponse struct {
	// The end of the range (exclusive) in signed long integer format.
	RangeEnd string `pulumi:"rangeEnd"`
	// The start of the range (inclusive) in signed long integer format.
	RangeStart string `pulumi:"rangeStart"`
}

// Int64RangeMatchResponseInput is an input type that accepts Int64RangeMatchResponseArgs and Int64RangeMatchResponseOutput values.
// You can construct a concrete instance of `Int64RangeMatchResponseInput` via:
//
//          Int64RangeMatchResponseArgs{...}
type Int64RangeMatchResponseInput interface {
	pulumi.Input

	ToInt64RangeMatchResponseOutput() Int64RangeMatchResponseOutput
	ToInt64RangeMatchResponseOutputWithContext(context.Context) Int64RangeMatchResponseOutput
}

// HttpRouteRuleMatch criteria for field values that must stay within the specified integer range.
type Int64RangeMatchResponseArgs struct {
	// The end of the range (exclusive) in signed long integer format.
	RangeEnd pulumi.StringInput `pulumi:"rangeEnd"`
	// The start of the range (inclusive) in signed long integer format.
	RangeStart pulumi.StringInput `pulumi:"rangeStart"`
}

func (Int64RangeMatchResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Int64RangeMatchResponse)(nil)).Elem()
}

func (i Int64RangeMatchResponseArgs) ToInt64RangeMatchResponseOutput() Int64RangeMatchResponseOutput {
	return i.ToInt64RangeMatchResponseOutputWithContext(context.Background())
}

func (i Int64RangeMatchResponseArgs) ToInt64RangeMatchResponseOutputWithContext(ctx context.Context) Int64RangeMatchResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Int64RangeMatchResponseOutput)
}

// HttpRouteRuleMatch criteria for field values that must stay within the specified integer range.
type Int64RangeMatchResponseOutput struct{ *pulumi.OutputState }

func (Int64RangeMatchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Int64RangeMatchResponse)(nil)).Elem()
}

func (o Int64RangeMatchResponseOutput) ToInt64RangeMatchResponseOutput() Int64RangeMatchResponseOutput {
	return o
}

func (o Int64RangeMatchResponseOutput) ToInt64RangeMatchResponseOutputWithContext(ctx context.Context) Int64RangeMatchResponseOutput {
	return o
}

// The end of the range (exclusive) in signed long integer format.
func (o Int64RangeMatchResponseOutput) RangeEnd() pulumi.StringOutput {
	return o.ApplyT(func(v Int64RangeMatchResponse) string { return v.RangeEnd }).(pulumi.StringOutput)
}

// The start of the range (inclusive) in signed long integer format.
func (o Int64RangeMatchResponseOutput) RangeStart() pulumi.StringOutput {
	return o.ApplyT(func(v Int64RangeMatchResponse) string { return v.RangeStart }).(pulumi.StringOutput)
}

// Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments.
type InterconnectAttachmentPartnerMetadata struct {
	// Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner's portal. For instance "Chicago 1". This value may be validated to match approved Partner values.
	InterconnectName *string `pulumi:"interconnectName"`
	// Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values.
	PartnerName *string `pulumi:"partnerName"`
	// URL of the Partner's portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match approved Partner values.
	PortalUrl *string `pulumi:"portalUrl"`
}

// InterconnectAttachmentPartnerMetadataInput is an input type that accepts InterconnectAttachmentPartnerMetadataArgs and InterconnectAttachmentPartnerMetadataOutput values.
// You can construct a concrete instance of `InterconnectAttachmentPartnerMetadataInput` via:
//
//          InterconnectAttachmentPartnerMetadataArgs{...}
type InterconnectAttachmentPartnerMetadataInput interface {
	pulumi.Input

	ToInterconnectAttachmentPartnerMetadataOutput() InterconnectAttachmentPartnerMetadataOutput
	ToInterconnectAttachmentPartnerMetadataOutputWithContext(context.Context) InterconnectAttachmentPartnerMetadataOutput
}

// Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments.
type InterconnectAttachmentPartnerMetadataArgs struct {
	// Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner's portal. For instance "Chicago 1". This value may be validated to match approved Partner values.
	InterconnectName pulumi.StringPtrInput `pulumi:"interconnectName"`
	// Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values.
	PartnerName pulumi.StringPtrInput `pulumi:"partnerName"`
	// URL of the Partner's portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match approved Partner values.
	PortalUrl pulumi.StringPtrInput `pulumi:"portalUrl"`
}

func (InterconnectAttachmentPartnerMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterconnectAttachmentPartnerMetadata)(nil)).Elem()
}

func (i InterconnectAttachmentPartnerMetadataArgs) ToInterconnectAttachmentPartnerMetadataOutput() InterconnectAttachmentPartnerMetadataOutput {
	return i.ToInterconnectAttachmentPartnerMetadataOutputWithContext(context.Background())
}

func (i InterconnectAttachmentPartnerMetadataArgs) ToInterconnectAttachmentPartnerMetadataOutputWithContext(ctx context.Context) InterconnectAttachmentPartnerMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentPartnerMetadataOutput)
}

func (i InterconnectAttachmentPartnerMetadataArgs) ToInterconnectAttachmentPartnerMetadataPtrOutput() InterconnectAttachmentPartnerMetadataPtrOutput {
	return i.ToInterconnectAttachmentPartnerMetadataPtrOutputWithContext(context.Background())
}

func (i InterconnectAttachmentPartnerMetadataArgs) ToInterconnectAttachmentPartnerMetadataPtrOutputWithContext(ctx context.Context) InterconnectAttachmentPartnerMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentPartnerMetadataOutput).ToInterconnectAttachmentPartnerMetadataPtrOutputWithContext(ctx)
}

// InterconnectAttachmentPartnerMetadataPtrInput is an input type that accepts InterconnectAttachmentPartnerMetadataArgs, InterconnectAttachmentPartnerMetadataPtr and InterconnectAttachmentPartnerMetadataPtrOutput values.
// You can construct a concrete instance of `InterconnectAttachmentPartnerMetadataPtrInput` via:
//
//          InterconnectAttachmentPartnerMetadataArgs{...}
//
//  or:
//
//          nil
type InterconnectAttachmentPartnerMetadataPtrInput interface {
	pulumi.Input

	ToInterconnectAttachmentPartnerMetadataPtrOutput() InterconnectAttachmentPartnerMetadataPtrOutput
	ToInterconnectAttachmentPartnerMetadataPtrOutputWithContext(context.Context) InterconnectAttachmentPartnerMetadataPtrOutput
}

type interconnectAttachmentPartnerMetadataPtrType InterconnectAttachmentPartnerMetadataArgs

func InterconnectAttachmentPartnerMetadataPtr(v *InterconnectAttachmentPartnerMetadataArgs) InterconnectAttachmentPartnerMetadataPtrInput {
	return (*interconnectAttachmentPartnerMetadataPtrType)(v)
}

func (*interconnectAttachmentPartnerMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InterconnectAttachmentPartnerMetadata)(nil)).Elem()
}

func (i *interconnectAttachmentPartnerMetadataPtrType) ToInterconnectAttachmentPartnerMetadataPtrOutput() InterconnectAttachmentPartnerMetadataPtrOutput {
	return i.ToInterconnectAttachmentPartnerMetadataPtrOutputWithContext(context.Background())
}

func (i *interconnectAttachmentPartnerMetadataPtrType) ToInterconnectAttachmentPartnerMetadataPtrOutputWithContext(ctx context.Context) InterconnectAttachmentPartnerMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentPartnerMetadataPtrOutput)
}

// Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments.
type InterconnectAttachmentPartnerMetadataOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentPartnerMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterconnectAttachmentPartnerMetadata)(nil)).Elem()
}

func (o InterconnectAttachmentPartnerMetadataOutput) ToInterconnectAttachmentPartnerMetadataOutput() InterconnectAttachmentPartnerMetadataOutput {
	return o
}

func (o InterconnectAttachmentPartnerMetadataOutput) ToInterconnectAttachmentPartnerMetadataOutputWithContext(ctx context.Context) InterconnectAttachmentPartnerMetadataOutput {
	return o
}

func (o InterconnectAttachmentPartnerMetadataOutput) ToInterconnectAttachmentPartnerMetadataPtrOutput() InterconnectAttachmentPartnerMetadataPtrOutput {
	return o.ToInterconnectAttachmentPartnerMetadataPtrOutputWithContext(context.Background())
}

func (o InterconnectAttachmentPartnerMetadataOutput) ToInterconnectAttachmentPartnerMetadataPtrOutputWithContext(ctx context.Context) InterconnectAttachmentPartnerMetadataPtrOutput {
	return o.ApplyT(func(v InterconnectAttachmentPartnerMetadata) *InterconnectAttachmentPartnerMetadata {
		return &v
	}).(InterconnectAttachmentPartnerMetadataPtrOutput)
}

// Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner's portal. For instance "Chicago 1". This value may be validated to match approved Partner values.
func (o InterconnectAttachmentPartnerMetadataOutput) InterconnectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterconnectAttachmentPartnerMetadata) *string { return v.InterconnectName }).(pulumi.StringPtrOutput)
}

// Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values.
func (o InterconnectAttachmentPartnerMetadataOutput) PartnerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterconnectAttachmentPartnerMetadata) *string { return v.PartnerName }).(pulumi.StringPtrOutput)
}

// URL of the Partner's portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match approved Partner values.
func (o InterconnectAttachmentPartnerMetadataOutput) PortalUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterconnectAttachmentPartnerMetadata) *string { return v.PortalUrl }).(pulumi.StringPtrOutput)
}

type InterconnectAttachmentPartnerMetadataPtrOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentPartnerMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterconnectAttachmentPartnerMetadata)(nil)).Elem()
}

func (o InterconnectAttachmentPartnerMetadataPtrOutput) ToInterconnectAttachmentPartnerMetadataPtrOutput() InterconnectAttachmentPartnerMetadataPtrOutput {
	return o
}

func (o InterconnectAttachmentPartnerMetadataPtrOutput) ToInterconnectAttachmentPartnerMetadataPtrOutputWithContext(ctx context.Context) InterconnectAttachmentPartnerMetadataPtrOutput {
	return o
}

func (o InterconnectAttachmentPartnerMetadataPtrOutput) Elem() InterconnectAttachmentPartnerMetadataOutput {
	return o.ApplyT(func(v *InterconnectAttachmentPartnerMetadata) InterconnectAttachmentPartnerMetadata { return *v }).(InterconnectAttachmentPartnerMetadataOutput)
}

// Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner's portal. For instance "Chicago 1". This value may be validated to match approved Partner values.
func (o InterconnectAttachmentPartnerMetadataPtrOutput) InterconnectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterconnectAttachmentPartnerMetadata) *string {
		if v == nil {
			return nil
		}
		return v.InterconnectName
	}).(pulumi.StringPtrOutput)
}

// Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values.
func (o InterconnectAttachmentPartnerMetadataPtrOutput) PartnerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterconnectAttachmentPartnerMetadata) *string {
		if v == nil {
			return nil
		}
		return v.PartnerName
	}).(pulumi.StringPtrOutput)
}

// URL of the Partner's portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match approved Partner values.
func (o InterconnectAttachmentPartnerMetadataPtrOutput) PortalUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterconnectAttachmentPartnerMetadata) *string {
		if v == nil {
			return nil
		}
		return v.PortalUrl
	}).(pulumi.StringPtrOutput)
}

// Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments.
type InterconnectAttachmentPartnerMetadataResponse struct {
	// Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner's portal. For instance "Chicago 1". This value may be validated to match approved Partner values.
	InterconnectName string `pulumi:"interconnectName"`
	// Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values.
	PartnerName string `pulumi:"partnerName"`
	// URL of the Partner's portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match approved Partner values.
	PortalUrl string `pulumi:"portalUrl"`
}

// InterconnectAttachmentPartnerMetadataResponseInput is an input type that accepts InterconnectAttachmentPartnerMetadataResponseArgs and InterconnectAttachmentPartnerMetadataResponseOutput values.
// You can construct a concrete instance of `InterconnectAttachmentPartnerMetadataResponseInput` via:
//
//          InterconnectAttachmentPartnerMetadataResponseArgs{...}
type InterconnectAttachmentPartnerMetadataResponseInput interface {
	pulumi.Input

	ToInterconnectAttachmentPartnerMetadataResponseOutput() InterconnectAttachmentPartnerMetadataResponseOutput
	ToInterconnectAttachmentPartnerMetadataResponseOutputWithContext(context.Context) InterconnectAttachmentPartnerMetadataResponseOutput
}

// Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments.
type InterconnectAttachmentPartnerMetadataResponseArgs struct {
	// Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner's portal. For instance "Chicago 1". This value may be validated to match approved Partner values.
	InterconnectName pulumi.StringInput `pulumi:"interconnectName"`
	// Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values.
	PartnerName pulumi.StringInput `pulumi:"partnerName"`
	// URL of the Partner's portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match approved Partner values.
	PortalUrl pulumi.StringInput `pulumi:"portalUrl"`
}

func (InterconnectAttachmentPartnerMetadataResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterconnectAttachmentPartnerMetadataResponse)(nil)).Elem()
}

func (i InterconnectAttachmentPartnerMetadataResponseArgs) ToInterconnectAttachmentPartnerMetadataResponseOutput() InterconnectAttachmentPartnerMetadataResponseOutput {
	return i.ToInterconnectAttachmentPartnerMetadataResponseOutputWithContext(context.Background())
}

func (i InterconnectAttachmentPartnerMetadataResponseArgs) ToInterconnectAttachmentPartnerMetadataResponseOutputWithContext(ctx context.Context) InterconnectAttachmentPartnerMetadataResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentPartnerMetadataResponseOutput)
}

func (i InterconnectAttachmentPartnerMetadataResponseArgs) ToInterconnectAttachmentPartnerMetadataResponsePtrOutput() InterconnectAttachmentPartnerMetadataResponsePtrOutput {
	return i.ToInterconnectAttachmentPartnerMetadataResponsePtrOutputWithContext(context.Background())
}

func (i InterconnectAttachmentPartnerMetadataResponseArgs) ToInterconnectAttachmentPartnerMetadataResponsePtrOutputWithContext(ctx context.Context) InterconnectAttachmentPartnerMetadataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentPartnerMetadataResponseOutput).ToInterconnectAttachmentPartnerMetadataResponsePtrOutputWithContext(ctx)
}

// InterconnectAttachmentPartnerMetadataResponsePtrInput is an input type that accepts InterconnectAttachmentPartnerMetadataResponseArgs, InterconnectAttachmentPartnerMetadataResponsePtr and InterconnectAttachmentPartnerMetadataResponsePtrOutput values.
// You can construct a concrete instance of `InterconnectAttachmentPartnerMetadataResponsePtrInput` via:
//
//          InterconnectAttachmentPartnerMetadataResponseArgs{...}
//
//  or:
//
//          nil
type InterconnectAttachmentPartnerMetadataResponsePtrInput interface {
	pulumi.Input

	ToInterconnectAttachmentPartnerMetadataResponsePtrOutput() InterconnectAttachmentPartnerMetadataResponsePtrOutput
	ToInterconnectAttachmentPartnerMetadataResponsePtrOutputWithContext(context.Context) InterconnectAttachmentPartnerMetadataResponsePtrOutput
}

type interconnectAttachmentPartnerMetadataResponsePtrType InterconnectAttachmentPartnerMetadataResponseArgs

func InterconnectAttachmentPartnerMetadataResponsePtr(v *InterconnectAttachmentPartnerMetadataResponseArgs) InterconnectAttachmentPartnerMetadataResponsePtrInput {
	return (*interconnectAttachmentPartnerMetadataResponsePtrType)(v)
}

func (*interconnectAttachmentPartnerMetadataResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InterconnectAttachmentPartnerMetadataResponse)(nil)).Elem()
}

func (i *interconnectAttachmentPartnerMetadataResponsePtrType) ToInterconnectAttachmentPartnerMetadataResponsePtrOutput() InterconnectAttachmentPartnerMetadataResponsePtrOutput {
	return i.ToInterconnectAttachmentPartnerMetadataResponsePtrOutputWithContext(context.Background())
}

func (i *interconnectAttachmentPartnerMetadataResponsePtrType) ToInterconnectAttachmentPartnerMetadataResponsePtrOutputWithContext(ctx context.Context) InterconnectAttachmentPartnerMetadataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentPartnerMetadataResponsePtrOutput)
}

// Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments.
type InterconnectAttachmentPartnerMetadataResponseOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentPartnerMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterconnectAttachmentPartnerMetadataResponse)(nil)).Elem()
}

func (o InterconnectAttachmentPartnerMetadataResponseOutput) ToInterconnectAttachmentPartnerMetadataResponseOutput() InterconnectAttachmentPartnerMetadataResponseOutput {
	return o
}

func (o InterconnectAttachmentPartnerMetadataResponseOutput) ToInterconnectAttachmentPartnerMetadataResponseOutputWithContext(ctx context.Context) InterconnectAttachmentPartnerMetadataResponseOutput {
	return o
}

func (o InterconnectAttachmentPartnerMetadataResponseOutput) ToInterconnectAttachmentPartnerMetadataResponsePtrOutput() InterconnectAttachmentPartnerMetadataResponsePtrOutput {
	return o.ToInterconnectAttachmentPartnerMetadataResponsePtrOutputWithContext(context.Background())
}

func (o InterconnectAttachmentPartnerMetadataResponseOutput) ToInterconnectAttachmentPartnerMetadataResponsePtrOutputWithContext(ctx context.Context) InterconnectAttachmentPartnerMetadataResponsePtrOutput {
	return o.ApplyT(func(v InterconnectAttachmentPartnerMetadataResponse) *InterconnectAttachmentPartnerMetadataResponse {
		return &v
	}).(InterconnectAttachmentPartnerMetadataResponsePtrOutput)
}

// Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner's portal. For instance "Chicago 1". This value may be validated to match approved Partner values.
func (o InterconnectAttachmentPartnerMetadataResponseOutput) InterconnectName() pulumi.StringOutput {
	return o.ApplyT(func(v InterconnectAttachmentPartnerMetadataResponse) string { return v.InterconnectName }).(pulumi.StringOutput)
}

// Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values.
func (o InterconnectAttachmentPartnerMetadataResponseOutput) PartnerName() pulumi.StringOutput {
	return o.ApplyT(func(v InterconnectAttachmentPartnerMetadataResponse) string { return v.PartnerName }).(pulumi.StringOutput)
}

// URL of the Partner's portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match approved Partner values.
func (o InterconnectAttachmentPartnerMetadataResponseOutput) PortalUrl() pulumi.StringOutput {
	return o.ApplyT(func(v InterconnectAttachmentPartnerMetadataResponse) string { return v.PortalUrl }).(pulumi.StringOutput)
}

type InterconnectAttachmentPartnerMetadataResponsePtrOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentPartnerMetadataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterconnectAttachmentPartnerMetadataResponse)(nil)).Elem()
}

func (o InterconnectAttachmentPartnerMetadataResponsePtrOutput) ToInterconnectAttachmentPartnerMetadataResponsePtrOutput() InterconnectAttachmentPartnerMetadataResponsePtrOutput {
	return o
}

func (o InterconnectAttachmentPartnerMetadataResponsePtrOutput) ToInterconnectAttachmentPartnerMetadataResponsePtrOutputWithContext(ctx context.Context) InterconnectAttachmentPartnerMetadataResponsePtrOutput {
	return o
}

func (o InterconnectAttachmentPartnerMetadataResponsePtrOutput) Elem() InterconnectAttachmentPartnerMetadataResponseOutput {
	return o.ApplyT(func(v *InterconnectAttachmentPartnerMetadataResponse) InterconnectAttachmentPartnerMetadataResponse {
		return *v
	}).(InterconnectAttachmentPartnerMetadataResponseOutput)
}

// Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner's portal. For instance "Chicago 1". This value may be validated to match approved Partner values.
func (o InterconnectAttachmentPartnerMetadataResponsePtrOutput) InterconnectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterconnectAttachmentPartnerMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InterconnectName
	}).(pulumi.StringPtrOutput)
}

// Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values.
func (o InterconnectAttachmentPartnerMetadataResponsePtrOutput) PartnerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterconnectAttachmentPartnerMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PartnerName
	}).(pulumi.StringPtrOutput)
}

// URL of the Partner's portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match approved Partner values.
func (o InterconnectAttachmentPartnerMetadataResponsePtrOutput) PortalUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterconnectAttachmentPartnerMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PortalUrl
	}).(pulumi.StringPtrOutput)
}

// Information for an interconnect attachment when this belongs to an interconnect of type DEDICATED.
type InterconnectAttachmentPrivateInfoResponse struct {
	// 802.1q encapsulation tag to be used for traffic between Google and the customer, going to and from this network and region.
	Tag8021q int `pulumi:"tag8021q"`
}

// InterconnectAttachmentPrivateInfoResponseInput is an input type that accepts InterconnectAttachmentPrivateInfoResponseArgs and InterconnectAttachmentPrivateInfoResponseOutput values.
// You can construct a concrete instance of `InterconnectAttachmentPrivateInfoResponseInput` via:
//
//          InterconnectAttachmentPrivateInfoResponseArgs{...}
type InterconnectAttachmentPrivateInfoResponseInput interface {
	pulumi.Input

	ToInterconnectAttachmentPrivateInfoResponseOutput() InterconnectAttachmentPrivateInfoResponseOutput
	ToInterconnectAttachmentPrivateInfoResponseOutputWithContext(context.Context) InterconnectAttachmentPrivateInfoResponseOutput
}

// Information for an interconnect attachment when this belongs to an interconnect of type DEDICATED.
type InterconnectAttachmentPrivateInfoResponseArgs struct {
	// 802.1q encapsulation tag to be used for traffic between Google and the customer, going to and from this network and region.
	Tag8021q pulumi.IntInput `pulumi:"tag8021q"`
}

func (InterconnectAttachmentPrivateInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterconnectAttachmentPrivateInfoResponse)(nil)).Elem()
}

func (i InterconnectAttachmentPrivateInfoResponseArgs) ToInterconnectAttachmentPrivateInfoResponseOutput() InterconnectAttachmentPrivateInfoResponseOutput {
	return i.ToInterconnectAttachmentPrivateInfoResponseOutputWithContext(context.Background())
}

func (i InterconnectAttachmentPrivateInfoResponseArgs) ToInterconnectAttachmentPrivateInfoResponseOutputWithContext(ctx context.Context) InterconnectAttachmentPrivateInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentPrivateInfoResponseOutput)
}

func (i InterconnectAttachmentPrivateInfoResponseArgs) ToInterconnectAttachmentPrivateInfoResponsePtrOutput() InterconnectAttachmentPrivateInfoResponsePtrOutput {
	return i.ToInterconnectAttachmentPrivateInfoResponsePtrOutputWithContext(context.Background())
}

func (i InterconnectAttachmentPrivateInfoResponseArgs) ToInterconnectAttachmentPrivateInfoResponsePtrOutputWithContext(ctx context.Context) InterconnectAttachmentPrivateInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentPrivateInfoResponseOutput).ToInterconnectAttachmentPrivateInfoResponsePtrOutputWithContext(ctx)
}

// InterconnectAttachmentPrivateInfoResponsePtrInput is an input type that accepts InterconnectAttachmentPrivateInfoResponseArgs, InterconnectAttachmentPrivateInfoResponsePtr and InterconnectAttachmentPrivateInfoResponsePtrOutput values.
// You can construct a concrete instance of `InterconnectAttachmentPrivateInfoResponsePtrInput` via:
//
//          InterconnectAttachmentPrivateInfoResponseArgs{...}
//
//  or:
//
//          nil
type InterconnectAttachmentPrivateInfoResponsePtrInput interface {
	pulumi.Input

	ToInterconnectAttachmentPrivateInfoResponsePtrOutput() InterconnectAttachmentPrivateInfoResponsePtrOutput
	ToInterconnectAttachmentPrivateInfoResponsePtrOutputWithContext(context.Context) InterconnectAttachmentPrivateInfoResponsePtrOutput
}

type interconnectAttachmentPrivateInfoResponsePtrType InterconnectAttachmentPrivateInfoResponseArgs

func InterconnectAttachmentPrivateInfoResponsePtr(v *InterconnectAttachmentPrivateInfoResponseArgs) InterconnectAttachmentPrivateInfoResponsePtrInput {
	return (*interconnectAttachmentPrivateInfoResponsePtrType)(v)
}

func (*interconnectAttachmentPrivateInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InterconnectAttachmentPrivateInfoResponse)(nil)).Elem()
}

func (i *interconnectAttachmentPrivateInfoResponsePtrType) ToInterconnectAttachmentPrivateInfoResponsePtrOutput() InterconnectAttachmentPrivateInfoResponsePtrOutput {
	return i.ToInterconnectAttachmentPrivateInfoResponsePtrOutputWithContext(context.Background())
}

func (i *interconnectAttachmentPrivateInfoResponsePtrType) ToInterconnectAttachmentPrivateInfoResponsePtrOutputWithContext(ctx context.Context) InterconnectAttachmentPrivateInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentPrivateInfoResponsePtrOutput)
}

// Information for an interconnect attachment when this belongs to an interconnect of type DEDICATED.
type InterconnectAttachmentPrivateInfoResponseOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentPrivateInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterconnectAttachmentPrivateInfoResponse)(nil)).Elem()
}

func (o InterconnectAttachmentPrivateInfoResponseOutput) ToInterconnectAttachmentPrivateInfoResponseOutput() InterconnectAttachmentPrivateInfoResponseOutput {
	return o
}

func (o InterconnectAttachmentPrivateInfoResponseOutput) ToInterconnectAttachmentPrivateInfoResponseOutputWithContext(ctx context.Context) InterconnectAttachmentPrivateInfoResponseOutput {
	return o
}

func (o InterconnectAttachmentPrivateInfoResponseOutput) ToInterconnectAttachmentPrivateInfoResponsePtrOutput() InterconnectAttachmentPrivateInfoResponsePtrOutput {
	return o.ToInterconnectAttachmentPrivateInfoResponsePtrOutputWithContext(context.Background())
}

func (o InterconnectAttachmentPrivateInfoResponseOutput) ToInterconnectAttachmentPrivateInfoResponsePtrOutputWithContext(ctx context.Context) InterconnectAttachmentPrivateInfoResponsePtrOutput {
	return o.ApplyT(func(v InterconnectAttachmentPrivateInfoResponse) *InterconnectAttachmentPrivateInfoResponse {
		return &v
	}).(InterconnectAttachmentPrivateInfoResponsePtrOutput)
}

// 802.1q encapsulation tag to be used for traffic between Google and the customer, going to and from this network and region.
func (o InterconnectAttachmentPrivateInfoResponseOutput) Tag8021q() pulumi.IntOutput {
	return o.ApplyT(func(v InterconnectAttachmentPrivateInfoResponse) int { return v.Tag8021q }).(pulumi.IntOutput)
}

type InterconnectAttachmentPrivateInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentPrivateInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterconnectAttachmentPrivateInfoResponse)(nil)).Elem()
}

func (o InterconnectAttachmentPrivateInfoResponsePtrOutput) ToInterconnectAttachmentPrivateInfoResponsePtrOutput() InterconnectAttachmentPrivateInfoResponsePtrOutput {
	return o
}

func (o InterconnectAttachmentPrivateInfoResponsePtrOutput) ToInterconnectAttachmentPrivateInfoResponsePtrOutputWithContext(ctx context.Context) InterconnectAttachmentPrivateInfoResponsePtrOutput {
	return o
}

func (o InterconnectAttachmentPrivateInfoResponsePtrOutput) Elem() InterconnectAttachmentPrivateInfoResponseOutput {
	return o.ApplyT(func(v *InterconnectAttachmentPrivateInfoResponse) InterconnectAttachmentPrivateInfoResponse {
		return *v
	}).(InterconnectAttachmentPrivateInfoResponseOutput)
}

// 802.1q encapsulation tag to be used for traffic between Google and the customer, going to and from this network and region.
func (o InterconnectAttachmentPrivateInfoResponsePtrOutput) Tag8021q() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterconnectAttachmentPrivateInfoResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Tag8021q
	}).(pulumi.IntPtrOutput)
}

// Describes a single physical circuit between the Customer and Google. CircuitInfo objects are created by Google, so all fields are output only.
type InterconnectCircuitInfoResponse struct {
	// Customer-side demarc ID for this circuit.
	CustomerDemarcId string `pulumi:"customerDemarcId"`
	// Google-assigned unique ID for this circuit. Assigned at circuit turn-up.
	GoogleCircuitId string `pulumi:"googleCircuitId"`
	// Google-side demarc ID for this circuit. Assigned at circuit turn-up and provided by Google to the customer in the LOA.
	GoogleDemarcId string `pulumi:"googleDemarcId"`
}

// InterconnectCircuitInfoResponseInput is an input type that accepts InterconnectCircuitInfoResponseArgs and InterconnectCircuitInfoResponseOutput values.
// You can construct a concrete instance of `InterconnectCircuitInfoResponseInput` via:
//
//          InterconnectCircuitInfoResponseArgs{...}
type InterconnectCircuitInfoResponseInput interface {
	pulumi.Input

	ToInterconnectCircuitInfoResponseOutput() InterconnectCircuitInfoResponseOutput
	ToInterconnectCircuitInfoResponseOutputWithContext(context.Context) InterconnectCircuitInfoResponseOutput
}

// Describes a single physical circuit between the Customer and Google. CircuitInfo objects are created by Google, so all fields are output only.
type InterconnectCircuitInfoResponseArgs struct {
	// Customer-side demarc ID for this circuit.
	CustomerDemarcId pulumi.StringInput `pulumi:"customerDemarcId"`
	// Google-assigned unique ID for this circuit. Assigned at circuit turn-up.
	GoogleCircuitId pulumi.StringInput `pulumi:"googleCircuitId"`
	// Google-side demarc ID for this circuit. Assigned at circuit turn-up and provided by Google to the customer in the LOA.
	GoogleDemarcId pulumi.StringInput `pulumi:"googleDemarcId"`
}

func (InterconnectCircuitInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterconnectCircuitInfoResponse)(nil)).Elem()
}

func (i InterconnectCircuitInfoResponseArgs) ToInterconnectCircuitInfoResponseOutput() InterconnectCircuitInfoResponseOutput {
	return i.ToInterconnectCircuitInfoResponseOutputWithContext(context.Background())
}

func (i InterconnectCircuitInfoResponseArgs) ToInterconnectCircuitInfoResponseOutputWithContext(ctx context.Context) InterconnectCircuitInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectCircuitInfoResponseOutput)
}

// InterconnectCircuitInfoResponseArrayInput is an input type that accepts InterconnectCircuitInfoResponseArray and InterconnectCircuitInfoResponseArrayOutput values.
// You can construct a concrete instance of `InterconnectCircuitInfoResponseArrayInput` via:
//
//          InterconnectCircuitInfoResponseArray{ InterconnectCircuitInfoResponseArgs{...} }
type InterconnectCircuitInfoResponseArrayInput interface {
	pulumi.Input

	ToInterconnectCircuitInfoResponseArrayOutput() InterconnectCircuitInfoResponseArrayOutput
	ToInterconnectCircuitInfoResponseArrayOutputWithContext(context.Context) InterconnectCircuitInfoResponseArrayOutput
}

type InterconnectCircuitInfoResponseArray []InterconnectCircuitInfoResponseInput

func (InterconnectCircuitInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterconnectCircuitInfoResponse)(nil)).Elem()
}

func (i InterconnectCircuitInfoResponseArray) ToInterconnectCircuitInfoResponseArrayOutput() InterconnectCircuitInfoResponseArrayOutput {
	return i.ToInterconnectCircuitInfoResponseArrayOutputWithContext(context.Background())
}

func (i InterconnectCircuitInfoResponseArray) ToInterconnectCircuitInfoResponseArrayOutputWithContext(ctx context.Context) InterconnectCircuitInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectCircuitInfoResponseArrayOutput)
}

// Describes a single physical circuit between the Customer and Google. CircuitInfo objects are created by Google, so all fields are output only.
type InterconnectCircuitInfoResponseOutput struct{ *pulumi.OutputState }

func (InterconnectCircuitInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterconnectCircuitInfoResponse)(nil)).Elem()
}

func (o InterconnectCircuitInfoResponseOutput) ToInterconnectCircuitInfoResponseOutput() InterconnectCircuitInfoResponseOutput {
	return o
}

func (o InterconnectCircuitInfoResponseOutput) ToInterconnectCircuitInfoResponseOutputWithContext(ctx context.Context) InterconnectCircuitInfoResponseOutput {
	return o
}

// Customer-side demarc ID for this circuit.
func (o InterconnectCircuitInfoResponseOutput) CustomerDemarcId() pulumi.StringOutput {
	return o.ApplyT(func(v InterconnectCircuitInfoResponse) string { return v.CustomerDemarcId }).(pulumi.StringOutput)
}

// Google-assigned unique ID for this circuit. Assigned at circuit turn-up.
func (o InterconnectCircuitInfoResponseOutput) GoogleCircuitId() pulumi.StringOutput {
	return o.ApplyT(func(v InterconnectCircuitInfoResponse) string { return v.GoogleCircuitId }).(pulumi.StringOutput)
}

// Google-side demarc ID for this circuit. Assigned at circuit turn-up and provided by Google to the customer in the LOA.
func (o InterconnectCircuitInfoResponseOutput) GoogleDemarcId() pulumi.StringOutput {
	return o.ApplyT(func(v InterconnectCircuitInfoResponse) string { return v.GoogleDemarcId }).(pulumi.StringOutput)
}

type InterconnectCircuitInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (InterconnectCircuitInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterconnectCircuitInfoResponse)(nil)).Elem()
}

func (o InterconnectCircuitInfoResponseArrayOutput) ToInterconnectCircuitInfoResponseArrayOutput() InterconnectCircuitInfoResponseArrayOutput {
	return o
}

func (o InterconnectCircuitInfoResponseArrayOutput) ToInterconnectCircuitInfoResponseArrayOutputWithContext(ctx context.Context) InterconnectCircuitInfoResponseArrayOutput {
	return o
}

func (o InterconnectCircuitInfoResponseArrayOutput) Index(i pulumi.IntInput) InterconnectCircuitInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterconnectCircuitInfoResponse {
		return vs[0].([]InterconnectCircuitInfoResponse)[vs[1].(int)]
	}).(InterconnectCircuitInfoResponseOutput)
}

// Description of a planned outage on this Interconnect.
type InterconnectOutageNotificationResponse struct {
	// If issue_type is IT_PARTIAL_OUTAGE, a list of the Google-side circuit IDs that will be affected.
	AffectedCircuits []string `pulumi:"affectedCircuits"`
	// A description about the purpose of the outage.
	Description string `pulumi:"description"`
	// Scheduled end time for the outage (milliseconds since Unix epoch).
	EndTime string `pulumi:"endTime"`
	// Form this outage is expected to take, which can take one of the following values: - OUTAGE: The Interconnect may be completely out of service for some or all of the specified window. - PARTIAL_OUTAGE: Some circuits comprising the Interconnect as a whole should remain up, but with reduced bandwidth. Note that the versions of this enum prefixed with "IT_" have been deprecated in favor of the unprefixed values.
	IssueType string `pulumi:"issueType"`
	// Unique identifier for this outage notification.
	Name string `pulumi:"name"`
	// The party that generated this notification, which can take the following value: - GOOGLE: this notification as generated by Google. Note that the value of NSRC_GOOGLE has been deprecated in favor of GOOGLE.
	Source string `pulumi:"source"`
	// Scheduled start time for the outage (milliseconds since Unix epoch).
	StartTime string `pulumi:"startTime"`
	// State of this notification, which can take one of the following values: - ACTIVE: This outage notification is active. The event could be in the past, present, or future. See start_time and end_time for scheduling. - CANCELLED: The outage associated with this notification was cancelled before the outage was due to start. - COMPLETED: The outage associated with this notification is complete. Note that the versions of this enum prefixed with "NS_" have been deprecated in favor of the unprefixed values.
	State string `pulumi:"state"`
}

// InterconnectOutageNotificationResponseInput is an input type that accepts InterconnectOutageNotificationResponseArgs and InterconnectOutageNotificationResponseOutput values.
// You can construct a concrete instance of `InterconnectOutageNotificationResponseInput` via:
//
//          InterconnectOutageNotificationResponseArgs{...}
type InterconnectOutageNotificationResponseInput interface {
	pulumi.Input

	ToInterconnectOutageNotificationResponseOutput() InterconnectOutageNotificationResponseOutput
	ToInterconnectOutageNotificationResponseOutputWithContext(context.Context) InterconnectOutageNotificationResponseOutput
}

// Description of a planned outage on this Interconnect.
type InterconnectOutageNotificationResponseArgs struct {
	// If issue_type is IT_PARTIAL_OUTAGE, a list of the Google-side circuit IDs that will be affected.
	AffectedCircuits pulumi.StringArrayInput `pulumi:"affectedCircuits"`
	// A description about the purpose of the outage.
	Description pulumi.StringInput `pulumi:"description"`
	// Scheduled end time for the outage (milliseconds since Unix epoch).
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// Form this outage is expected to take, which can take one of the following values: - OUTAGE: The Interconnect may be completely out of service for some or all of the specified window. - PARTIAL_OUTAGE: Some circuits comprising the Interconnect as a whole should remain up, but with reduced bandwidth. Note that the versions of this enum prefixed with "IT_" have been deprecated in favor of the unprefixed values.
	IssueType pulumi.StringInput `pulumi:"issueType"`
	// Unique identifier for this outage notification.
	Name pulumi.StringInput `pulumi:"name"`
	// The party that generated this notification, which can take the following value: - GOOGLE: this notification as generated by Google. Note that the value of NSRC_GOOGLE has been deprecated in favor of GOOGLE.
	Source pulumi.StringInput `pulumi:"source"`
	// Scheduled start time for the outage (milliseconds since Unix epoch).
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// State of this notification, which can take one of the following values: - ACTIVE: This outage notification is active. The event could be in the past, present, or future. See start_time and end_time for scheduling. - CANCELLED: The outage associated with this notification was cancelled before the outage was due to start. - COMPLETED: The outage associated with this notification is complete. Note that the versions of this enum prefixed with "NS_" have been deprecated in favor of the unprefixed values.
	State pulumi.StringInput `pulumi:"state"`
}

func (InterconnectOutageNotificationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterconnectOutageNotificationResponse)(nil)).Elem()
}

func (i InterconnectOutageNotificationResponseArgs) ToInterconnectOutageNotificationResponseOutput() InterconnectOutageNotificationResponseOutput {
	return i.ToInterconnectOutageNotificationResponseOutputWithContext(context.Background())
}

func (i InterconnectOutageNotificationResponseArgs) ToInterconnectOutageNotificationResponseOutputWithContext(ctx context.Context) InterconnectOutageNotificationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectOutageNotificationResponseOutput)
}

// InterconnectOutageNotificationResponseArrayInput is an input type that accepts InterconnectOutageNotificationResponseArray and InterconnectOutageNotificationResponseArrayOutput values.
// You can construct a concrete instance of `InterconnectOutageNotificationResponseArrayInput` via:
//
//          InterconnectOutageNotificationResponseArray{ InterconnectOutageNotificationResponseArgs{...} }
type InterconnectOutageNotificationResponseArrayInput interface {
	pulumi.Input

	ToInterconnectOutageNotificationResponseArrayOutput() InterconnectOutageNotificationResponseArrayOutput
	ToInterconnectOutageNotificationResponseArrayOutputWithContext(context.Context) InterconnectOutageNotificationResponseArrayOutput
}

type InterconnectOutageNotificationResponseArray []InterconnectOutageNotificationResponseInput

func (InterconnectOutageNotificationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterconnectOutageNotificationResponse)(nil)).Elem()
}

func (i InterconnectOutageNotificationResponseArray) ToInterconnectOutageNotificationResponseArrayOutput() InterconnectOutageNotificationResponseArrayOutput {
	return i.ToInterconnectOutageNotificationResponseArrayOutputWithContext(context.Background())
}

func (i InterconnectOutageNotificationResponseArray) ToInterconnectOutageNotificationResponseArrayOutputWithContext(ctx context.Context) InterconnectOutageNotificationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectOutageNotificationResponseArrayOutput)
}

// Description of a planned outage on this Interconnect.
type InterconnectOutageNotificationResponseOutput struct{ *pulumi.OutputState }

func (InterconnectOutageNotificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterconnectOutageNotificationResponse)(nil)).Elem()
}

func (o InterconnectOutageNotificationResponseOutput) ToInterconnectOutageNotificationResponseOutput() InterconnectOutageNotificationResponseOutput {
	return o
}

func (o InterconnectOutageNotificationResponseOutput) ToInterconnectOutageNotificationResponseOutputWithContext(ctx context.Context) InterconnectOutageNotificationResponseOutput {
	return o
}

// If issue_type is IT_PARTIAL_OUTAGE, a list of the Google-side circuit IDs that will be affected.
func (o InterconnectOutageNotificationResponseOutput) AffectedCircuits() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InterconnectOutageNotificationResponse) []string { return v.AffectedCircuits }).(pulumi.StringArrayOutput)
}

// A description about the purpose of the outage.
func (o InterconnectOutageNotificationResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v InterconnectOutageNotificationResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Scheduled end time for the outage (milliseconds since Unix epoch).
func (o InterconnectOutageNotificationResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v InterconnectOutageNotificationResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Form this outage is expected to take, which can take one of the following values: - OUTAGE: The Interconnect may be completely out of service for some or all of the specified window. - PARTIAL_OUTAGE: Some circuits comprising the Interconnect as a whole should remain up, but with reduced bandwidth. Note that the versions of this enum prefixed with "IT_" have been deprecated in favor of the unprefixed values.
func (o InterconnectOutageNotificationResponseOutput) IssueType() pulumi.StringOutput {
	return o.ApplyT(func(v InterconnectOutageNotificationResponse) string { return v.IssueType }).(pulumi.StringOutput)
}

// Unique identifier for this outage notification.
func (o InterconnectOutageNotificationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InterconnectOutageNotificationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The party that generated this notification, which can take the following value: - GOOGLE: this notification as generated by Google. Note that the value of NSRC_GOOGLE has been deprecated in favor of GOOGLE.
func (o InterconnectOutageNotificationResponseOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v InterconnectOutageNotificationResponse) string { return v.Source }).(pulumi.StringOutput)
}

// Scheduled start time for the outage (milliseconds since Unix epoch).
func (o InterconnectOutageNotificationResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InterconnectOutageNotificationResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// State of this notification, which can take one of the following values: - ACTIVE: This outage notification is active. The event could be in the past, present, or future. See start_time and end_time for scheduling. - CANCELLED: The outage associated with this notification was cancelled before the outage was due to start. - COMPLETED: The outage associated with this notification is complete. Note that the versions of this enum prefixed with "NS_" have been deprecated in favor of the unprefixed values.
func (o InterconnectOutageNotificationResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v InterconnectOutageNotificationResponse) string { return v.State }).(pulumi.StringOutput)
}

type InterconnectOutageNotificationResponseArrayOutput struct{ *pulumi.OutputState }

func (InterconnectOutageNotificationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterconnectOutageNotificationResponse)(nil)).Elem()
}

func (o InterconnectOutageNotificationResponseArrayOutput) ToInterconnectOutageNotificationResponseArrayOutput() InterconnectOutageNotificationResponseArrayOutput {
	return o
}

func (o InterconnectOutageNotificationResponseArrayOutput) ToInterconnectOutageNotificationResponseArrayOutputWithContext(ctx context.Context) InterconnectOutageNotificationResponseArrayOutput {
	return o
}

func (o InterconnectOutageNotificationResponseArrayOutput) Index(i pulumi.IntInput) InterconnectOutageNotificationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterconnectOutageNotificationResponse {
		return vs[0].([]InterconnectOutageNotificationResponse)[vs[1].(int)]
	}).(InterconnectOutageNotificationResponseOutput)
}

// Commitment for a particular license resource.
type LicenseResourceCommitment struct {
	// The number of licenses purchased.
	Amount *string `pulumi:"amount"`
	// Specifies the core range of the instance for which this license applies.
	CoresPerLicense *string `pulumi:"coresPerLicense"`
	// Any applicable license URI.
	License *string `pulumi:"license"`
}

// LicenseResourceCommitmentInput is an input type that accepts LicenseResourceCommitmentArgs and LicenseResourceCommitmentOutput values.
// You can construct a concrete instance of `LicenseResourceCommitmentInput` via:
//
//          LicenseResourceCommitmentArgs{...}
type LicenseResourceCommitmentInput interface {
	pulumi.Input

	ToLicenseResourceCommitmentOutput() LicenseResourceCommitmentOutput
	ToLicenseResourceCommitmentOutputWithContext(context.Context) LicenseResourceCommitmentOutput
}

// Commitment for a particular license resource.
type LicenseResourceCommitmentArgs struct {
	// The number of licenses purchased.
	Amount pulumi.StringPtrInput `pulumi:"amount"`
	// Specifies the core range of the instance for which this license applies.
	CoresPerLicense pulumi.StringPtrInput `pulumi:"coresPerLicense"`
	// Any applicable license URI.
	License pulumi.StringPtrInput `pulumi:"license"`
}

func (LicenseResourceCommitmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseResourceCommitment)(nil)).Elem()
}

func (i LicenseResourceCommitmentArgs) ToLicenseResourceCommitmentOutput() LicenseResourceCommitmentOutput {
	return i.ToLicenseResourceCommitmentOutputWithContext(context.Background())
}

func (i LicenseResourceCommitmentArgs) ToLicenseResourceCommitmentOutputWithContext(ctx context.Context) LicenseResourceCommitmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseResourceCommitmentOutput)
}

func (i LicenseResourceCommitmentArgs) ToLicenseResourceCommitmentPtrOutput() LicenseResourceCommitmentPtrOutput {
	return i.ToLicenseResourceCommitmentPtrOutputWithContext(context.Background())
}

func (i LicenseResourceCommitmentArgs) ToLicenseResourceCommitmentPtrOutputWithContext(ctx context.Context) LicenseResourceCommitmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseResourceCommitmentOutput).ToLicenseResourceCommitmentPtrOutputWithContext(ctx)
}

// LicenseResourceCommitmentPtrInput is an input type that accepts LicenseResourceCommitmentArgs, LicenseResourceCommitmentPtr and LicenseResourceCommitmentPtrOutput values.
// You can construct a concrete instance of `LicenseResourceCommitmentPtrInput` via:
//
//          LicenseResourceCommitmentArgs{...}
//
//  or:
//
//          nil
type LicenseResourceCommitmentPtrInput interface {
	pulumi.Input

	ToLicenseResourceCommitmentPtrOutput() LicenseResourceCommitmentPtrOutput
	ToLicenseResourceCommitmentPtrOutputWithContext(context.Context) LicenseResourceCommitmentPtrOutput
}

type licenseResourceCommitmentPtrType LicenseResourceCommitmentArgs

func LicenseResourceCommitmentPtr(v *LicenseResourceCommitmentArgs) LicenseResourceCommitmentPtrInput {
	return (*licenseResourceCommitmentPtrType)(v)
}

func (*licenseResourceCommitmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseResourceCommitment)(nil)).Elem()
}

func (i *licenseResourceCommitmentPtrType) ToLicenseResourceCommitmentPtrOutput() LicenseResourceCommitmentPtrOutput {
	return i.ToLicenseResourceCommitmentPtrOutputWithContext(context.Background())
}

func (i *licenseResourceCommitmentPtrType) ToLicenseResourceCommitmentPtrOutputWithContext(ctx context.Context) LicenseResourceCommitmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseResourceCommitmentPtrOutput)
}

// Commitment for a particular license resource.
type LicenseResourceCommitmentOutput struct{ *pulumi.OutputState }

func (LicenseResourceCommitmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseResourceCommitment)(nil)).Elem()
}

func (o LicenseResourceCommitmentOutput) ToLicenseResourceCommitmentOutput() LicenseResourceCommitmentOutput {
	return o
}

func (o LicenseResourceCommitmentOutput) ToLicenseResourceCommitmentOutputWithContext(ctx context.Context) LicenseResourceCommitmentOutput {
	return o
}

func (o LicenseResourceCommitmentOutput) ToLicenseResourceCommitmentPtrOutput() LicenseResourceCommitmentPtrOutput {
	return o.ToLicenseResourceCommitmentPtrOutputWithContext(context.Background())
}

func (o LicenseResourceCommitmentOutput) ToLicenseResourceCommitmentPtrOutputWithContext(ctx context.Context) LicenseResourceCommitmentPtrOutput {
	return o.ApplyT(func(v LicenseResourceCommitment) *LicenseResourceCommitment {
		return &v
	}).(LicenseResourceCommitmentPtrOutput)
}

// The number of licenses purchased.
func (o LicenseResourceCommitmentOutput) Amount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LicenseResourceCommitment) *string { return v.Amount }).(pulumi.StringPtrOutput)
}

// Specifies the core range of the instance for which this license applies.
func (o LicenseResourceCommitmentOutput) CoresPerLicense() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LicenseResourceCommitment) *string { return v.CoresPerLicense }).(pulumi.StringPtrOutput)
}

// Any applicable license URI.
func (o LicenseResourceCommitmentOutput) License() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LicenseResourceCommitment) *string { return v.License }).(pulumi.StringPtrOutput)
}

type LicenseResourceCommitmentPtrOutput struct{ *pulumi.OutputState }

func (LicenseResourceCommitmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseResourceCommitment)(nil)).Elem()
}

func (o LicenseResourceCommitmentPtrOutput) ToLicenseResourceCommitmentPtrOutput() LicenseResourceCommitmentPtrOutput {
	return o
}

func (o LicenseResourceCommitmentPtrOutput) ToLicenseResourceCommitmentPtrOutputWithContext(ctx context.Context) LicenseResourceCommitmentPtrOutput {
	return o
}

func (o LicenseResourceCommitmentPtrOutput) Elem() LicenseResourceCommitmentOutput {
	return o.ApplyT(func(v *LicenseResourceCommitment) LicenseResourceCommitment { return *v }).(LicenseResourceCommitmentOutput)
}

// The number of licenses purchased.
func (o LicenseResourceCommitmentPtrOutput) Amount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LicenseResourceCommitment) *string {
		if v == nil {
			return nil
		}
		return v.Amount
	}).(pulumi.StringPtrOutput)
}

// Specifies the core range of the instance for which this license applies.
func (o LicenseResourceCommitmentPtrOutput) CoresPerLicense() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LicenseResourceCommitment) *string {
		if v == nil {
			return nil
		}
		return v.CoresPerLicense
	}).(pulumi.StringPtrOutput)
}

// Any applicable license URI.
func (o LicenseResourceCommitmentPtrOutput) License() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LicenseResourceCommitment) *string {
		if v == nil {
			return nil
		}
		return v.License
	}).(pulumi.StringPtrOutput)
}

// Commitment for a particular license resource.
type LicenseResourceCommitmentResponse struct {
	// The number of licenses purchased.
	Amount string `pulumi:"amount"`
	// Specifies the core range of the instance for which this license applies.
	CoresPerLicense string `pulumi:"coresPerLicense"`
	// Any applicable license URI.
	License string `pulumi:"license"`
}

// LicenseResourceCommitmentResponseInput is an input type that accepts LicenseResourceCommitmentResponseArgs and LicenseResourceCommitmentResponseOutput values.
// You can construct a concrete instance of `LicenseResourceCommitmentResponseInput` via:
//
//          LicenseResourceCommitmentResponseArgs{...}
type LicenseResourceCommitmentResponseInput interface {
	pulumi.Input

	ToLicenseResourceCommitmentResponseOutput() LicenseResourceCommitmentResponseOutput
	ToLicenseResourceCommitmentResponseOutputWithContext(context.Context) LicenseResourceCommitmentResponseOutput
}

// Commitment for a particular license resource.
type LicenseResourceCommitmentResponseArgs struct {
	// The number of licenses purchased.
	Amount pulumi.StringInput `pulumi:"amount"`
	// Specifies the core range of the instance for which this license applies.
	CoresPerLicense pulumi.StringInput `pulumi:"coresPerLicense"`
	// Any applicable license URI.
	License pulumi.StringInput `pulumi:"license"`
}

func (LicenseResourceCommitmentResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseResourceCommitmentResponse)(nil)).Elem()
}

func (i LicenseResourceCommitmentResponseArgs) ToLicenseResourceCommitmentResponseOutput() LicenseResourceCommitmentResponseOutput {
	return i.ToLicenseResourceCommitmentResponseOutputWithContext(context.Background())
}

func (i LicenseResourceCommitmentResponseArgs) ToLicenseResourceCommitmentResponseOutputWithContext(ctx context.Context) LicenseResourceCommitmentResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseResourceCommitmentResponseOutput)
}

func (i LicenseResourceCommitmentResponseArgs) ToLicenseResourceCommitmentResponsePtrOutput() LicenseResourceCommitmentResponsePtrOutput {
	return i.ToLicenseResourceCommitmentResponsePtrOutputWithContext(context.Background())
}

func (i LicenseResourceCommitmentResponseArgs) ToLicenseResourceCommitmentResponsePtrOutputWithContext(ctx context.Context) LicenseResourceCommitmentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseResourceCommitmentResponseOutput).ToLicenseResourceCommitmentResponsePtrOutputWithContext(ctx)
}

// LicenseResourceCommitmentResponsePtrInput is an input type that accepts LicenseResourceCommitmentResponseArgs, LicenseResourceCommitmentResponsePtr and LicenseResourceCommitmentResponsePtrOutput values.
// You can construct a concrete instance of `LicenseResourceCommitmentResponsePtrInput` via:
//
//          LicenseResourceCommitmentResponseArgs{...}
//
//  or:
//
//          nil
type LicenseResourceCommitmentResponsePtrInput interface {
	pulumi.Input

	ToLicenseResourceCommitmentResponsePtrOutput() LicenseResourceCommitmentResponsePtrOutput
	ToLicenseResourceCommitmentResponsePtrOutputWithContext(context.Context) LicenseResourceCommitmentResponsePtrOutput
}

type licenseResourceCommitmentResponsePtrType LicenseResourceCommitmentResponseArgs

func LicenseResourceCommitmentResponsePtr(v *LicenseResourceCommitmentResponseArgs) LicenseResourceCommitmentResponsePtrInput {
	return (*licenseResourceCommitmentResponsePtrType)(v)
}

func (*licenseResourceCommitmentResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseResourceCommitmentResponse)(nil)).Elem()
}

func (i *licenseResourceCommitmentResponsePtrType) ToLicenseResourceCommitmentResponsePtrOutput() LicenseResourceCommitmentResponsePtrOutput {
	return i.ToLicenseResourceCommitmentResponsePtrOutputWithContext(context.Background())
}

func (i *licenseResourceCommitmentResponsePtrType) ToLicenseResourceCommitmentResponsePtrOutputWithContext(ctx context.Context) LicenseResourceCommitmentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseResourceCommitmentResponsePtrOutput)
}

// Commitment for a particular license resource.
type LicenseResourceCommitmentResponseOutput struct{ *pulumi.OutputState }

func (LicenseResourceCommitmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseResourceCommitmentResponse)(nil)).Elem()
}

func (o LicenseResourceCommitmentResponseOutput) ToLicenseResourceCommitmentResponseOutput() LicenseResourceCommitmentResponseOutput {
	return o
}

func (o LicenseResourceCommitmentResponseOutput) ToLicenseResourceCommitmentResponseOutputWithContext(ctx context.Context) LicenseResourceCommitmentResponseOutput {
	return o
}

func (o LicenseResourceCommitmentResponseOutput) ToLicenseResourceCommitmentResponsePtrOutput() LicenseResourceCommitmentResponsePtrOutput {
	return o.ToLicenseResourceCommitmentResponsePtrOutputWithContext(context.Background())
}

func (o LicenseResourceCommitmentResponseOutput) ToLicenseResourceCommitmentResponsePtrOutputWithContext(ctx context.Context) LicenseResourceCommitmentResponsePtrOutput {
	return o.ApplyT(func(v LicenseResourceCommitmentResponse) *LicenseResourceCommitmentResponse {
		return &v
	}).(LicenseResourceCommitmentResponsePtrOutput)
}

// The number of licenses purchased.
func (o LicenseResourceCommitmentResponseOutput) Amount() pulumi.StringOutput {
	return o.ApplyT(func(v LicenseResourceCommitmentResponse) string { return v.Amount }).(pulumi.StringOutput)
}

// Specifies the core range of the instance for which this license applies.
func (o LicenseResourceCommitmentResponseOutput) CoresPerLicense() pulumi.StringOutput {
	return o.ApplyT(func(v LicenseResourceCommitmentResponse) string { return v.CoresPerLicense }).(pulumi.StringOutput)
}

// Any applicable license URI.
func (o LicenseResourceCommitmentResponseOutput) License() pulumi.StringOutput {
	return o.ApplyT(func(v LicenseResourceCommitmentResponse) string { return v.License }).(pulumi.StringOutput)
}

type LicenseResourceCommitmentResponsePtrOutput struct{ *pulumi.OutputState }

func (LicenseResourceCommitmentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseResourceCommitmentResponse)(nil)).Elem()
}

func (o LicenseResourceCommitmentResponsePtrOutput) ToLicenseResourceCommitmentResponsePtrOutput() LicenseResourceCommitmentResponsePtrOutput {
	return o
}

func (o LicenseResourceCommitmentResponsePtrOutput) ToLicenseResourceCommitmentResponsePtrOutputWithContext(ctx context.Context) LicenseResourceCommitmentResponsePtrOutput {
	return o
}

func (o LicenseResourceCommitmentResponsePtrOutput) Elem() LicenseResourceCommitmentResponseOutput {
	return o.ApplyT(func(v *LicenseResourceCommitmentResponse) LicenseResourceCommitmentResponse { return *v }).(LicenseResourceCommitmentResponseOutput)
}

// The number of licenses purchased.
func (o LicenseResourceCommitmentResponsePtrOutput) Amount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LicenseResourceCommitmentResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Amount
	}).(pulumi.StringPtrOutput)
}

// Specifies the core range of the instance for which this license applies.
func (o LicenseResourceCommitmentResponsePtrOutput) CoresPerLicense() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LicenseResourceCommitmentResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CoresPerLicense
	}).(pulumi.StringPtrOutput)
}

// Any applicable license URI.
func (o LicenseResourceCommitmentResponsePtrOutput) License() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LicenseResourceCommitmentResponse) *string {
		if v == nil {
			return nil
		}
		return &v.License
	}).(pulumi.StringPtrOutput)
}

type LicenseResourceRequirements struct {
	// Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start.
	MinGuestCpuCount *int `pulumi:"minGuestCpuCount"`
	// Minimum memory required to use the Instance. Enforced at Instance creation and Instance start.
	MinMemoryMb *int `pulumi:"minMemoryMb"`
}

// LicenseResourceRequirementsInput is an input type that accepts LicenseResourceRequirementsArgs and LicenseResourceRequirementsOutput values.
// You can construct a concrete instance of `LicenseResourceRequirementsInput` via:
//
//          LicenseResourceRequirementsArgs{...}
type LicenseResourceRequirementsInput interface {
	pulumi.Input

	ToLicenseResourceRequirementsOutput() LicenseResourceRequirementsOutput
	ToLicenseResourceRequirementsOutputWithContext(context.Context) LicenseResourceRequirementsOutput
}

type LicenseResourceRequirementsArgs struct {
	// Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start.
	MinGuestCpuCount pulumi.IntPtrInput `pulumi:"minGuestCpuCount"`
	// Minimum memory required to use the Instance. Enforced at Instance creation and Instance start.
	MinMemoryMb pulumi.IntPtrInput `pulumi:"minMemoryMb"`
}

func (LicenseResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseResourceRequirements)(nil)).Elem()
}

func (i LicenseResourceRequirementsArgs) ToLicenseResourceRequirementsOutput() LicenseResourceRequirementsOutput {
	return i.ToLicenseResourceRequirementsOutputWithContext(context.Background())
}

func (i LicenseResourceRequirementsArgs) ToLicenseResourceRequirementsOutputWithContext(ctx context.Context) LicenseResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseResourceRequirementsOutput)
}

func (i LicenseResourceRequirementsArgs) ToLicenseResourceRequirementsPtrOutput() LicenseResourceRequirementsPtrOutput {
	return i.ToLicenseResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i LicenseResourceRequirementsArgs) ToLicenseResourceRequirementsPtrOutputWithContext(ctx context.Context) LicenseResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseResourceRequirementsOutput).ToLicenseResourceRequirementsPtrOutputWithContext(ctx)
}

// LicenseResourceRequirementsPtrInput is an input type that accepts LicenseResourceRequirementsArgs, LicenseResourceRequirementsPtr and LicenseResourceRequirementsPtrOutput values.
// You can construct a concrete instance of `LicenseResourceRequirementsPtrInput` via:
//
//          LicenseResourceRequirementsArgs{...}
//
//  or:
//
//          nil
type LicenseResourceRequirementsPtrInput interface {
	pulumi.Input

	ToLicenseResourceRequirementsPtrOutput() LicenseResourceRequirementsPtrOutput
	ToLicenseResourceRequirementsPtrOutputWithContext(context.Context) LicenseResourceRequirementsPtrOutput
}

type licenseResourceRequirementsPtrType LicenseResourceRequirementsArgs

func LicenseResourceRequirementsPtr(v *LicenseResourceRequirementsArgs) LicenseResourceRequirementsPtrInput {
	return (*licenseResourceRequirementsPtrType)(v)
}

func (*licenseResourceRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseResourceRequirements)(nil)).Elem()
}

func (i *licenseResourceRequirementsPtrType) ToLicenseResourceRequirementsPtrOutput() LicenseResourceRequirementsPtrOutput {
	return i.ToLicenseResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i *licenseResourceRequirementsPtrType) ToLicenseResourceRequirementsPtrOutputWithContext(ctx context.Context) LicenseResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseResourceRequirementsPtrOutput)
}

type LicenseResourceRequirementsOutput struct{ *pulumi.OutputState }

func (LicenseResourceRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseResourceRequirements)(nil)).Elem()
}

func (o LicenseResourceRequirementsOutput) ToLicenseResourceRequirementsOutput() LicenseResourceRequirementsOutput {
	return o
}

func (o LicenseResourceRequirementsOutput) ToLicenseResourceRequirementsOutputWithContext(ctx context.Context) LicenseResourceRequirementsOutput {
	return o
}

func (o LicenseResourceRequirementsOutput) ToLicenseResourceRequirementsPtrOutput() LicenseResourceRequirementsPtrOutput {
	return o.ToLicenseResourceRequirementsPtrOutputWithContext(context.Background())
}

func (o LicenseResourceRequirementsOutput) ToLicenseResourceRequirementsPtrOutputWithContext(ctx context.Context) LicenseResourceRequirementsPtrOutput {
	return o.ApplyT(func(v LicenseResourceRequirements) *LicenseResourceRequirements {
		return &v
	}).(LicenseResourceRequirementsPtrOutput)
}

// Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start.
func (o LicenseResourceRequirementsOutput) MinGuestCpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LicenseResourceRequirements) *int { return v.MinGuestCpuCount }).(pulumi.IntPtrOutput)
}

// Minimum memory required to use the Instance. Enforced at Instance creation and Instance start.
func (o LicenseResourceRequirementsOutput) MinMemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LicenseResourceRequirements) *int { return v.MinMemoryMb }).(pulumi.IntPtrOutput)
}

type LicenseResourceRequirementsPtrOutput struct{ *pulumi.OutputState }

func (LicenseResourceRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseResourceRequirements)(nil)).Elem()
}

func (o LicenseResourceRequirementsPtrOutput) ToLicenseResourceRequirementsPtrOutput() LicenseResourceRequirementsPtrOutput {
	return o
}

func (o LicenseResourceRequirementsPtrOutput) ToLicenseResourceRequirementsPtrOutputWithContext(ctx context.Context) LicenseResourceRequirementsPtrOutput {
	return o
}

func (o LicenseResourceRequirementsPtrOutput) Elem() LicenseResourceRequirementsOutput {
	return o.ApplyT(func(v *LicenseResourceRequirements) LicenseResourceRequirements { return *v }).(LicenseResourceRequirementsOutput)
}

// Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start.
func (o LicenseResourceRequirementsPtrOutput) MinGuestCpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LicenseResourceRequirements) *int {
		if v == nil {
			return nil
		}
		return v.MinGuestCpuCount
	}).(pulumi.IntPtrOutput)
}

// Minimum memory required to use the Instance. Enforced at Instance creation and Instance start.
func (o LicenseResourceRequirementsPtrOutput) MinMemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LicenseResourceRequirements) *int {
		if v == nil {
			return nil
		}
		return v.MinMemoryMb
	}).(pulumi.IntPtrOutput)
}

type LicenseResourceRequirementsResponse struct {
	// Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start.
	MinGuestCpuCount int `pulumi:"minGuestCpuCount"`
	// Minimum memory required to use the Instance. Enforced at Instance creation and Instance start.
	MinMemoryMb int `pulumi:"minMemoryMb"`
}

// LicenseResourceRequirementsResponseInput is an input type that accepts LicenseResourceRequirementsResponseArgs and LicenseResourceRequirementsResponseOutput values.
// You can construct a concrete instance of `LicenseResourceRequirementsResponseInput` via:
//
//          LicenseResourceRequirementsResponseArgs{...}
type LicenseResourceRequirementsResponseInput interface {
	pulumi.Input

	ToLicenseResourceRequirementsResponseOutput() LicenseResourceRequirementsResponseOutput
	ToLicenseResourceRequirementsResponseOutputWithContext(context.Context) LicenseResourceRequirementsResponseOutput
}

type LicenseResourceRequirementsResponseArgs struct {
	// Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start.
	MinGuestCpuCount pulumi.IntInput `pulumi:"minGuestCpuCount"`
	// Minimum memory required to use the Instance. Enforced at Instance creation and Instance start.
	MinMemoryMb pulumi.IntInput `pulumi:"minMemoryMb"`
}

func (LicenseResourceRequirementsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseResourceRequirementsResponse)(nil)).Elem()
}

func (i LicenseResourceRequirementsResponseArgs) ToLicenseResourceRequirementsResponseOutput() LicenseResourceRequirementsResponseOutput {
	return i.ToLicenseResourceRequirementsResponseOutputWithContext(context.Background())
}

func (i LicenseResourceRequirementsResponseArgs) ToLicenseResourceRequirementsResponseOutputWithContext(ctx context.Context) LicenseResourceRequirementsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseResourceRequirementsResponseOutput)
}

func (i LicenseResourceRequirementsResponseArgs) ToLicenseResourceRequirementsResponsePtrOutput() LicenseResourceRequirementsResponsePtrOutput {
	return i.ToLicenseResourceRequirementsResponsePtrOutputWithContext(context.Background())
}

func (i LicenseResourceRequirementsResponseArgs) ToLicenseResourceRequirementsResponsePtrOutputWithContext(ctx context.Context) LicenseResourceRequirementsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseResourceRequirementsResponseOutput).ToLicenseResourceRequirementsResponsePtrOutputWithContext(ctx)
}

// LicenseResourceRequirementsResponsePtrInput is an input type that accepts LicenseResourceRequirementsResponseArgs, LicenseResourceRequirementsResponsePtr and LicenseResourceRequirementsResponsePtrOutput values.
// You can construct a concrete instance of `LicenseResourceRequirementsResponsePtrInput` via:
//
//          LicenseResourceRequirementsResponseArgs{...}
//
//  or:
//
//          nil
type LicenseResourceRequirementsResponsePtrInput interface {
	pulumi.Input

	ToLicenseResourceRequirementsResponsePtrOutput() LicenseResourceRequirementsResponsePtrOutput
	ToLicenseResourceRequirementsResponsePtrOutputWithContext(context.Context) LicenseResourceRequirementsResponsePtrOutput
}

type licenseResourceRequirementsResponsePtrType LicenseResourceRequirementsResponseArgs

func LicenseResourceRequirementsResponsePtr(v *LicenseResourceRequirementsResponseArgs) LicenseResourceRequirementsResponsePtrInput {
	return (*licenseResourceRequirementsResponsePtrType)(v)
}

func (*licenseResourceRequirementsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseResourceRequirementsResponse)(nil)).Elem()
}

func (i *licenseResourceRequirementsResponsePtrType) ToLicenseResourceRequirementsResponsePtrOutput() LicenseResourceRequirementsResponsePtrOutput {
	return i.ToLicenseResourceRequirementsResponsePtrOutputWithContext(context.Background())
}

func (i *licenseResourceRequirementsResponsePtrType) ToLicenseResourceRequirementsResponsePtrOutputWithContext(ctx context.Context) LicenseResourceRequirementsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseResourceRequirementsResponsePtrOutput)
}

type LicenseResourceRequirementsResponseOutput struct{ *pulumi.OutputState }

func (LicenseResourceRequirementsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseResourceRequirementsResponse)(nil)).Elem()
}

func (o LicenseResourceRequirementsResponseOutput) ToLicenseResourceRequirementsResponseOutput() LicenseResourceRequirementsResponseOutput {
	return o
}

func (o LicenseResourceRequirementsResponseOutput) ToLicenseResourceRequirementsResponseOutputWithContext(ctx context.Context) LicenseResourceRequirementsResponseOutput {
	return o
}

func (o LicenseResourceRequirementsResponseOutput) ToLicenseResourceRequirementsResponsePtrOutput() LicenseResourceRequirementsResponsePtrOutput {
	return o.ToLicenseResourceRequirementsResponsePtrOutputWithContext(context.Background())
}

func (o LicenseResourceRequirementsResponseOutput) ToLicenseResourceRequirementsResponsePtrOutputWithContext(ctx context.Context) LicenseResourceRequirementsResponsePtrOutput {
	return o.ApplyT(func(v LicenseResourceRequirementsResponse) *LicenseResourceRequirementsResponse {
		return &v
	}).(LicenseResourceRequirementsResponsePtrOutput)
}

// Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start.
func (o LicenseResourceRequirementsResponseOutput) MinGuestCpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v LicenseResourceRequirementsResponse) int { return v.MinGuestCpuCount }).(pulumi.IntOutput)
}

// Minimum memory required to use the Instance. Enforced at Instance creation and Instance start.
func (o LicenseResourceRequirementsResponseOutput) MinMemoryMb() pulumi.IntOutput {
	return o.ApplyT(func(v LicenseResourceRequirementsResponse) int { return v.MinMemoryMb }).(pulumi.IntOutput)
}

type LicenseResourceRequirementsResponsePtrOutput struct{ *pulumi.OutputState }

func (LicenseResourceRequirementsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseResourceRequirementsResponse)(nil)).Elem()
}

func (o LicenseResourceRequirementsResponsePtrOutput) ToLicenseResourceRequirementsResponsePtrOutput() LicenseResourceRequirementsResponsePtrOutput {
	return o
}

func (o LicenseResourceRequirementsResponsePtrOutput) ToLicenseResourceRequirementsResponsePtrOutputWithContext(ctx context.Context) LicenseResourceRequirementsResponsePtrOutput {
	return o
}

func (o LicenseResourceRequirementsResponsePtrOutput) Elem() LicenseResourceRequirementsResponseOutput {
	return o.ApplyT(func(v *LicenseResourceRequirementsResponse) LicenseResourceRequirementsResponse { return *v }).(LicenseResourceRequirementsResponseOutput)
}

// Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start.
func (o LicenseResourceRequirementsResponsePtrOutput) MinGuestCpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LicenseResourceRequirementsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MinGuestCpuCount
	}).(pulumi.IntPtrOutput)
}

// Minimum memory required to use the Instance. Enforced at Instance creation and Instance start.
func (o LicenseResourceRequirementsResponsePtrOutput) MinMemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LicenseResourceRequirementsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MinMemoryMb
	}).(pulumi.IntPtrOutput)
}

type LocalDisk struct {
	// Specifies the number of such disks.
	DiskCount *int `pulumi:"diskCount"`
	// Specifies the size of the disk in base-2 GB.
	DiskSizeGb *int `pulumi:"diskSizeGb"`
	// Specifies the desired disk type on the node. This disk type must be a local storage type (e.g.: local-ssd). Note that for nodeTemplates, this should be the name of the disk type and not its URL.
	DiskType *string `pulumi:"diskType"`
}

// LocalDiskInput is an input type that accepts LocalDiskArgs and LocalDiskOutput values.
// You can construct a concrete instance of `LocalDiskInput` via:
//
//          LocalDiskArgs{...}
type LocalDiskInput interface {
	pulumi.Input

	ToLocalDiskOutput() LocalDiskOutput
	ToLocalDiskOutputWithContext(context.Context) LocalDiskOutput
}

type LocalDiskArgs struct {
	// Specifies the number of such disks.
	DiskCount pulumi.IntPtrInput `pulumi:"diskCount"`
	// Specifies the size of the disk in base-2 GB.
	DiskSizeGb pulumi.IntPtrInput `pulumi:"diskSizeGb"`
	// Specifies the desired disk type on the node. This disk type must be a local storage type (e.g.: local-ssd). Note that for nodeTemplates, this should be the name of the disk type and not its URL.
	DiskType pulumi.StringPtrInput `pulumi:"diskType"`
}

func (LocalDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalDisk)(nil)).Elem()
}

func (i LocalDiskArgs) ToLocalDiskOutput() LocalDiskOutput {
	return i.ToLocalDiskOutputWithContext(context.Background())
}

func (i LocalDiskArgs) ToLocalDiskOutputWithContext(ctx context.Context) LocalDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalDiskOutput)
}

// LocalDiskArrayInput is an input type that accepts LocalDiskArray and LocalDiskArrayOutput values.
// You can construct a concrete instance of `LocalDiskArrayInput` via:
//
//          LocalDiskArray{ LocalDiskArgs{...} }
type LocalDiskArrayInput interface {
	pulumi.Input

	ToLocalDiskArrayOutput() LocalDiskArrayOutput
	ToLocalDiskArrayOutputWithContext(context.Context) LocalDiskArrayOutput
}

type LocalDiskArray []LocalDiskInput

func (LocalDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocalDisk)(nil)).Elem()
}

func (i LocalDiskArray) ToLocalDiskArrayOutput() LocalDiskArrayOutput {
	return i.ToLocalDiskArrayOutputWithContext(context.Background())
}

func (i LocalDiskArray) ToLocalDiskArrayOutputWithContext(ctx context.Context) LocalDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalDiskArrayOutput)
}

type LocalDiskOutput struct{ *pulumi.OutputState }

func (LocalDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalDisk)(nil)).Elem()
}

func (o LocalDiskOutput) ToLocalDiskOutput() LocalDiskOutput {
	return o
}

func (o LocalDiskOutput) ToLocalDiskOutputWithContext(ctx context.Context) LocalDiskOutput {
	return o
}

// Specifies the number of such disks.
func (o LocalDiskOutput) DiskCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LocalDisk) *int { return v.DiskCount }).(pulumi.IntPtrOutput)
}

// Specifies the size of the disk in base-2 GB.
func (o LocalDiskOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LocalDisk) *int { return v.DiskSizeGb }).(pulumi.IntPtrOutput)
}

// Specifies the desired disk type on the node. This disk type must be a local storage type (e.g.: local-ssd). Note that for nodeTemplates, this should be the name of the disk type and not its URL.
func (o LocalDiskOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalDisk) *string { return v.DiskType }).(pulumi.StringPtrOutput)
}

type LocalDiskArrayOutput struct{ *pulumi.OutputState }

func (LocalDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocalDisk)(nil)).Elem()
}

func (o LocalDiskArrayOutput) ToLocalDiskArrayOutput() LocalDiskArrayOutput {
	return o
}

func (o LocalDiskArrayOutput) ToLocalDiskArrayOutputWithContext(ctx context.Context) LocalDiskArrayOutput {
	return o
}

func (o LocalDiskArrayOutput) Index(i pulumi.IntInput) LocalDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocalDisk {
		return vs[0].([]LocalDisk)[vs[1].(int)]
	}).(LocalDiskOutput)
}

type LocalDiskResponse struct {
	// Specifies the number of such disks.
	DiskCount int `pulumi:"diskCount"`
	// Specifies the size of the disk in base-2 GB.
	DiskSizeGb int `pulumi:"diskSizeGb"`
	// Specifies the desired disk type on the node. This disk type must be a local storage type (e.g.: local-ssd). Note that for nodeTemplates, this should be the name of the disk type and not its URL.
	DiskType string `pulumi:"diskType"`
}

// LocalDiskResponseInput is an input type that accepts LocalDiskResponseArgs and LocalDiskResponseOutput values.
// You can construct a concrete instance of `LocalDiskResponseInput` via:
//
//          LocalDiskResponseArgs{...}
type LocalDiskResponseInput interface {
	pulumi.Input

	ToLocalDiskResponseOutput() LocalDiskResponseOutput
	ToLocalDiskResponseOutputWithContext(context.Context) LocalDiskResponseOutput
}

type LocalDiskResponseArgs struct {
	// Specifies the number of such disks.
	DiskCount pulumi.IntInput `pulumi:"diskCount"`
	// Specifies the size of the disk in base-2 GB.
	DiskSizeGb pulumi.IntInput `pulumi:"diskSizeGb"`
	// Specifies the desired disk type on the node. This disk type must be a local storage type (e.g.: local-ssd). Note that for nodeTemplates, this should be the name of the disk type and not its URL.
	DiskType pulumi.StringInput `pulumi:"diskType"`
}

func (LocalDiskResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalDiskResponse)(nil)).Elem()
}

func (i LocalDiskResponseArgs) ToLocalDiskResponseOutput() LocalDiskResponseOutput {
	return i.ToLocalDiskResponseOutputWithContext(context.Background())
}

func (i LocalDiskResponseArgs) ToLocalDiskResponseOutputWithContext(ctx context.Context) LocalDiskResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalDiskResponseOutput)
}

// LocalDiskResponseArrayInput is an input type that accepts LocalDiskResponseArray and LocalDiskResponseArrayOutput values.
// You can construct a concrete instance of `LocalDiskResponseArrayInput` via:
//
//          LocalDiskResponseArray{ LocalDiskResponseArgs{...} }
type LocalDiskResponseArrayInput interface {
	pulumi.Input

	ToLocalDiskResponseArrayOutput() LocalDiskResponseArrayOutput
	ToLocalDiskResponseArrayOutputWithContext(context.Context) LocalDiskResponseArrayOutput
}

type LocalDiskResponseArray []LocalDiskResponseInput

func (LocalDiskResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocalDiskResponse)(nil)).Elem()
}

func (i LocalDiskResponseArray) ToLocalDiskResponseArrayOutput() LocalDiskResponseArrayOutput {
	return i.ToLocalDiskResponseArrayOutputWithContext(context.Background())
}

func (i LocalDiskResponseArray) ToLocalDiskResponseArrayOutputWithContext(ctx context.Context) LocalDiskResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalDiskResponseArrayOutput)
}

type LocalDiskResponseOutput struct{ *pulumi.OutputState }

func (LocalDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalDiskResponse)(nil)).Elem()
}

func (o LocalDiskResponseOutput) ToLocalDiskResponseOutput() LocalDiskResponseOutput {
	return o
}

func (o LocalDiskResponseOutput) ToLocalDiskResponseOutputWithContext(ctx context.Context) LocalDiskResponseOutput {
	return o
}

// Specifies the number of such disks.
func (o LocalDiskResponseOutput) DiskCount() pulumi.IntOutput {
	return o.ApplyT(func(v LocalDiskResponse) int { return v.DiskCount }).(pulumi.IntOutput)
}

// Specifies the size of the disk in base-2 GB.
func (o LocalDiskResponseOutput) DiskSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v LocalDiskResponse) int { return v.DiskSizeGb }).(pulumi.IntOutput)
}

// Specifies the desired disk type on the node. This disk type must be a local storage type (e.g.: local-ssd). Note that for nodeTemplates, this should be the name of the disk type and not its URL.
func (o LocalDiskResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v LocalDiskResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

type LocalDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (LocalDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocalDiskResponse)(nil)).Elem()
}

func (o LocalDiskResponseArrayOutput) ToLocalDiskResponseArrayOutput() LocalDiskResponseArrayOutput {
	return o
}

func (o LocalDiskResponseArrayOutput) ToLocalDiskResponseArrayOutputWithContext(ctx context.Context) LocalDiskResponseArrayOutput {
	return o
}

func (o LocalDiskResponseArrayOutput) Index(i pulumi.IntInput) LocalDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocalDiskResponse {
		return vs[0].([]LocalDiskResponse)[vs[1].(int)]
	}).(LocalDiskResponseOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfig struct {
	// This is deprecated and has no effect. Do not use.
	CloudAudit *LogConfigCloudAuditOptions `pulumi:"cloudAudit"`
	// This is deprecated and has no effect. Do not use.
	Counter *LogConfigCounterOptions `pulumi:"counter"`
	// This is deprecated and has no effect. Do not use.
	DataAccess *LogConfigDataAccessOptions `pulumi:"dataAccess"`
}

// LogConfigInput is an input type that accepts LogConfigArgs and LogConfigOutput values.
// You can construct a concrete instance of `LogConfigInput` via:
//
//          LogConfigArgs{...}
type LogConfigInput interface {
	pulumi.Input

	ToLogConfigOutput() LogConfigOutput
	ToLogConfigOutputWithContext(context.Context) LogConfigOutput
}

// This is deprecated and has no effect. Do not use.
type LogConfigArgs struct {
	// This is deprecated and has no effect. Do not use.
	CloudAudit LogConfigCloudAuditOptionsPtrInput `pulumi:"cloudAudit"`
	// This is deprecated and has no effect. Do not use.
	Counter LogConfigCounterOptionsPtrInput `pulumi:"counter"`
	// This is deprecated and has no effect. Do not use.
	DataAccess LogConfigDataAccessOptionsPtrInput `pulumi:"dataAccess"`
}

func (LogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfig)(nil)).Elem()
}

func (i LogConfigArgs) ToLogConfigOutput() LogConfigOutput {
	return i.ToLogConfigOutputWithContext(context.Background())
}

func (i LogConfigArgs) ToLogConfigOutputWithContext(ctx context.Context) LogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigOutput)
}

// LogConfigArrayInput is an input type that accepts LogConfigArray and LogConfigArrayOutput values.
// You can construct a concrete instance of `LogConfigArrayInput` via:
//
//          LogConfigArray{ LogConfigArgs{...} }
type LogConfigArrayInput interface {
	pulumi.Input

	ToLogConfigArrayOutput() LogConfigArrayOutput
	ToLogConfigArrayOutputWithContext(context.Context) LogConfigArrayOutput
}

type LogConfigArray []LogConfigInput

func (LogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogConfig)(nil)).Elem()
}

func (i LogConfigArray) ToLogConfigArrayOutput() LogConfigArrayOutput {
	return i.ToLogConfigArrayOutputWithContext(context.Background())
}

func (i LogConfigArray) ToLogConfigArrayOutputWithContext(ctx context.Context) LogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigArrayOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigOutput struct{ *pulumi.OutputState }

func (LogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfig)(nil)).Elem()
}

func (o LogConfigOutput) ToLogConfigOutput() LogConfigOutput {
	return o
}

func (o LogConfigOutput) ToLogConfigOutputWithContext(ctx context.Context) LogConfigOutput {
	return o
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigOutput) CloudAudit() LogConfigCloudAuditOptionsPtrOutput {
	return o.ApplyT(func(v LogConfig) *LogConfigCloudAuditOptions { return v.CloudAudit }).(LogConfigCloudAuditOptionsPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigOutput) Counter() LogConfigCounterOptionsPtrOutput {
	return o.ApplyT(func(v LogConfig) *LogConfigCounterOptions { return v.Counter }).(LogConfigCounterOptionsPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigOutput) DataAccess() LogConfigDataAccessOptionsPtrOutput {
	return o.ApplyT(func(v LogConfig) *LogConfigDataAccessOptions { return v.DataAccess }).(LogConfigDataAccessOptionsPtrOutput)
}

type LogConfigArrayOutput struct{ *pulumi.OutputState }

func (LogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogConfig)(nil)).Elem()
}

func (o LogConfigArrayOutput) ToLogConfigArrayOutput() LogConfigArrayOutput {
	return o
}

func (o LogConfigArrayOutput) ToLogConfigArrayOutputWithContext(ctx context.Context) LogConfigArrayOutput {
	return o
}

func (o LogConfigArrayOutput) Index(i pulumi.IntInput) LogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogConfig {
		return vs[0].([]LogConfig)[vs[1].(int)]
	}).(LogConfigOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigCloudAuditOptions struct {
	// This is deprecated and has no effect. Do not use.
	AuthorizationLoggingOptions *AuthorizationLoggingOptions `pulumi:"authorizationLoggingOptions"`
	// This is deprecated and has no effect. Do not use.
	LogName *string `pulumi:"logName"`
}

// LogConfigCloudAuditOptionsInput is an input type that accepts LogConfigCloudAuditOptionsArgs and LogConfigCloudAuditOptionsOutput values.
// You can construct a concrete instance of `LogConfigCloudAuditOptionsInput` via:
//
//          LogConfigCloudAuditOptionsArgs{...}
type LogConfigCloudAuditOptionsInput interface {
	pulumi.Input

	ToLogConfigCloudAuditOptionsOutput() LogConfigCloudAuditOptionsOutput
	ToLogConfigCloudAuditOptionsOutputWithContext(context.Context) LogConfigCloudAuditOptionsOutput
}

// This is deprecated and has no effect. Do not use.
type LogConfigCloudAuditOptionsArgs struct {
	// This is deprecated and has no effect. Do not use.
	AuthorizationLoggingOptions AuthorizationLoggingOptionsPtrInput `pulumi:"authorizationLoggingOptions"`
	// This is deprecated and has no effect. Do not use.
	LogName *LogConfigCloudAuditOptionsLogName `pulumi:"logName"`
}

func (LogConfigCloudAuditOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigCloudAuditOptions)(nil)).Elem()
}

func (i LogConfigCloudAuditOptionsArgs) ToLogConfigCloudAuditOptionsOutput() LogConfigCloudAuditOptionsOutput {
	return i.ToLogConfigCloudAuditOptionsOutputWithContext(context.Background())
}

func (i LogConfigCloudAuditOptionsArgs) ToLogConfigCloudAuditOptionsOutputWithContext(ctx context.Context) LogConfigCloudAuditOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigCloudAuditOptionsOutput)
}

func (i LogConfigCloudAuditOptionsArgs) ToLogConfigCloudAuditOptionsPtrOutput() LogConfigCloudAuditOptionsPtrOutput {
	return i.ToLogConfigCloudAuditOptionsPtrOutputWithContext(context.Background())
}

func (i LogConfigCloudAuditOptionsArgs) ToLogConfigCloudAuditOptionsPtrOutputWithContext(ctx context.Context) LogConfigCloudAuditOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigCloudAuditOptionsOutput).ToLogConfigCloudAuditOptionsPtrOutputWithContext(ctx)
}

// LogConfigCloudAuditOptionsPtrInput is an input type that accepts LogConfigCloudAuditOptionsArgs, LogConfigCloudAuditOptionsPtr and LogConfigCloudAuditOptionsPtrOutput values.
// You can construct a concrete instance of `LogConfigCloudAuditOptionsPtrInput` via:
//
//          LogConfigCloudAuditOptionsArgs{...}
//
//  or:
//
//          nil
type LogConfigCloudAuditOptionsPtrInput interface {
	pulumi.Input

	ToLogConfigCloudAuditOptionsPtrOutput() LogConfigCloudAuditOptionsPtrOutput
	ToLogConfigCloudAuditOptionsPtrOutputWithContext(context.Context) LogConfigCloudAuditOptionsPtrOutput
}

type logConfigCloudAuditOptionsPtrType LogConfigCloudAuditOptionsArgs

func LogConfigCloudAuditOptionsPtr(v *LogConfigCloudAuditOptionsArgs) LogConfigCloudAuditOptionsPtrInput {
	return (*logConfigCloudAuditOptionsPtrType)(v)
}

func (*logConfigCloudAuditOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogConfigCloudAuditOptions)(nil)).Elem()
}

func (i *logConfigCloudAuditOptionsPtrType) ToLogConfigCloudAuditOptionsPtrOutput() LogConfigCloudAuditOptionsPtrOutput {
	return i.ToLogConfigCloudAuditOptionsPtrOutputWithContext(context.Background())
}

func (i *logConfigCloudAuditOptionsPtrType) ToLogConfigCloudAuditOptionsPtrOutputWithContext(ctx context.Context) LogConfigCloudAuditOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigCloudAuditOptionsPtrOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigCloudAuditOptionsOutput struct{ *pulumi.OutputState }

func (LogConfigCloudAuditOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigCloudAuditOptions)(nil)).Elem()
}

func (o LogConfigCloudAuditOptionsOutput) ToLogConfigCloudAuditOptionsOutput() LogConfigCloudAuditOptionsOutput {
	return o
}

func (o LogConfigCloudAuditOptionsOutput) ToLogConfigCloudAuditOptionsOutputWithContext(ctx context.Context) LogConfigCloudAuditOptionsOutput {
	return o
}

func (o LogConfigCloudAuditOptionsOutput) ToLogConfigCloudAuditOptionsPtrOutput() LogConfigCloudAuditOptionsPtrOutput {
	return o.ToLogConfigCloudAuditOptionsPtrOutputWithContext(context.Background())
}

func (o LogConfigCloudAuditOptionsOutput) ToLogConfigCloudAuditOptionsPtrOutputWithContext(ctx context.Context) LogConfigCloudAuditOptionsPtrOutput {
	return o.ApplyT(func(v LogConfigCloudAuditOptions) *LogConfigCloudAuditOptions {
		return &v
	}).(LogConfigCloudAuditOptionsPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCloudAuditOptionsOutput) AuthorizationLoggingOptions() AuthorizationLoggingOptionsPtrOutput {
	return o.ApplyT(func(v LogConfigCloudAuditOptions) *AuthorizationLoggingOptions { return v.AuthorizationLoggingOptions }).(AuthorizationLoggingOptionsPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCloudAuditOptionsOutput) LogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogConfigCloudAuditOptions) *string { return v.LogName }).(pulumi.StringPtrOutput)
}

type LogConfigCloudAuditOptionsPtrOutput struct{ *pulumi.OutputState }

func (LogConfigCloudAuditOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogConfigCloudAuditOptions)(nil)).Elem()
}

func (o LogConfigCloudAuditOptionsPtrOutput) ToLogConfigCloudAuditOptionsPtrOutput() LogConfigCloudAuditOptionsPtrOutput {
	return o
}

func (o LogConfigCloudAuditOptionsPtrOutput) ToLogConfigCloudAuditOptionsPtrOutputWithContext(ctx context.Context) LogConfigCloudAuditOptionsPtrOutput {
	return o
}

func (o LogConfigCloudAuditOptionsPtrOutput) Elem() LogConfigCloudAuditOptionsOutput {
	return o.ApplyT(func(v *LogConfigCloudAuditOptions) LogConfigCloudAuditOptions { return *v }).(LogConfigCloudAuditOptionsOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCloudAuditOptionsPtrOutput) AuthorizationLoggingOptions() AuthorizationLoggingOptionsPtrOutput {
	return o.ApplyT(func(v *LogConfigCloudAuditOptions) *AuthorizationLoggingOptions {
		if v == nil {
			return nil
		}
		return v.AuthorizationLoggingOptions
	}).(AuthorizationLoggingOptionsPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCloudAuditOptionsPtrOutput) LogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogConfigCloudAuditOptions) *string {
		if v == nil {
			return nil
		}
		return v.LogName
	}).(pulumi.StringPtrOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigCloudAuditOptionsResponse struct {
	// This is deprecated and has no effect. Do not use.
	AuthorizationLoggingOptions AuthorizationLoggingOptionsResponse `pulumi:"authorizationLoggingOptions"`
	// This is deprecated and has no effect. Do not use.
	LogName string `pulumi:"logName"`
}

// LogConfigCloudAuditOptionsResponseInput is an input type that accepts LogConfigCloudAuditOptionsResponseArgs and LogConfigCloudAuditOptionsResponseOutput values.
// You can construct a concrete instance of `LogConfigCloudAuditOptionsResponseInput` via:
//
//          LogConfigCloudAuditOptionsResponseArgs{...}
type LogConfigCloudAuditOptionsResponseInput interface {
	pulumi.Input

	ToLogConfigCloudAuditOptionsResponseOutput() LogConfigCloudAuditOptionsResponseOutput
	ToLogConfigCloudAuditOptionsResponseOutputWithContext(context.Context) LogConfigCloudAuditOptionsResponseOutput
}

// This is deprecated and has no effect. Do not use.
type LogConfigCloudAuditOptionsResponseArgs struct {
	// This is deprecated and has no effect. Do not use.
	AuthorizationLoggingOptions AuthorizationLoggingOptionsResponseInput `pulumi:"authorizationLoggingOptions"`
	// This is deprecated and has no effect. Do not use.
	LogName pulumi.StringInput `pulumi:"logName"`
}

func (LogConfigCloudAuditOptionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigCloudAuditOptionsResponse)(nil)).Elem()
}

func (i LogConfigCloudAuditOptionsResponseArgs) ToLogConfigCloudAuditOptionsResponseOutput() LogConfigCloudAuditOptionsResponseOutput {
	return i.ToLogConfigCloudAuditOptionsResponseOutputWithContext(context.Background())
}

func (i LogConfigCloudAuditOptionsResponseArgs) ToLogConfigCloudAuditOptionsResponseOutputWithContext(ctx context.Context) LogConfigCloudAuditOptionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigCloudAuditOptionsResponseOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigCloudAuditOptionsResponseOutput struct{ *pulumi.OutputState }

func (LogConfigCloudAuditOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigCloudAuditOptionsResponse)(nil)).Elem()
}

func (o LogConfigCloudAuditOptionsResponseOutput) ToLogConfigCloudAuditOptionsResponseOutput() LogConfigCloudAuditOptionsResponseOutput {
	return o
}

func (o LogConfigCloudAuditOptionsResponseOutput) ToLogConfigCloudAuditOptionsResponseOutputWithContext(ctx context.Context) LogConfigCloudAuditOptionsResponseOutput {
	return o
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCloudAuditOptionsResponseOutput) AuthorizationLoggingOptions() AuthorizationLoggingOptionsResponseOutput {
	return o.ApplyT(func(v LogConfigCloudAuditOptionsResponse) AuthorizationLoggingOptionsResponse {
		return v.AuthorizationLoggingOptions
	}).(AuthorizationLoggingOptionsResponseOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCloudAuditOptionsResponseOutput) LogName() pulumi.StringOutput {
	return o.ApplyT(func(v LogConfigCloudAuditOptionsResponse) string { return v.LogName }).(pulumi.StringOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigCounterOptions struct {
	// This is deprecated and has no effect. Do not use.
	CustomFields []LogConfigCounterOptionsCustomField `pulumi:"customFields"`
	// This is deprecated and has no effect. Do not use.
	Field *string `pulumi:"field"`
	// This is deprecated and has no effect. Do not use.
	Metric *string `pulumi:"metric"`
}

// LogConfigCounterOptionsInput is an input type that accepts LogConfigCounterOptionsArgs and LogConfigCounterOptionsOutput values.
// You can construct a concrete instance of `LogConfigCounterOptionsInput` via:
//
//          LogConfigCounterOptionsArgs{...}
type LogConfigCounterOptionsInput interface {
	pulumi.Input

	ToLogConfigCounterOptionsOutput() LogConfigCounterOptionsOutput
	ToLogConfigCounterOptionsOutputWithContext(context.Context) LogConfigCounterOptionsOutput
}

// This is deprecated and has no effect. Do not use.
type LogConfigCounterOptionsArgs struct {
	// This is deprecated and has no effect. Do not use.
	CustomFields LogConfigCounterOptionsCustomFieldArrayInput `pulumi:"customFields"`
	// This is deprecated and has no effect. Do not use.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// This is deprecated and has no effect. Do not use.
	Metric pulumi.StringPtrInput `pulumi:"metric"`
}

func (LogConfigCounterOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigCounterOptions)(nil)).Elem()
}

func (i LogConfigCounterOptionsArgs) ToLogConfigCounterOptionsOutput() LogConfigCounterOptionsOutput {
	return i.ToLogConfigCounterOptionsOutputWithContext(context.Background())
}

func (i LogConfigCounterOptionsArgs) ToLogConfigCounterOptionsOutputWithContext(ctx context.Context) LogConfigCounterOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigCounterOptionsOutput)
}

func (i LogConfigCounterOptionsArgs) ToLogConfigCounterOptionsPtrOutput() LogConfigCounterOptionsPtrOutput {
	return i.ToLogConfigCounterOptionsPtrOutputWithContext(context.Background())
}

func (i LogConfigCounterOptionsArgs) ToLogConfigCounterOptionsPtrOutputWithContext(ctx context.Context) LogConfigCounterOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigCounterOptionsOutput).ToLogConfigCounterOptionsPtrOutputWithContext(ctx)
}

// LogConfigCounterOptionsPtrInput is an input type that accepts LogConfigCounterOptionsArgs, LogConfigCounterOptionsPtr and LogConfigCounterOptionsPtrOutput values.
// You can construct a concrete instance of `LogConfigCounterOptionsPtrInput` via:
//
//          LogConfigCounterOptionsArgs{...}
//
//  or:
//
//          nil
type LogConfigCounterOptionsPtrInput interface {
	pulumi.Input

	ToLogConfigCounterOptionsPtrOutput() LogConfigCounterOptionsPtrOutput
	ToLogConfigCounterOptionsPtrOutputWithContext(context.Context) LogConfigCounterOptionsPtrOutput
}

type logConfigCounterOptionsPtrType LogConfigCounterOptionsArgs

func LogConfigCounterOptionsPtr(v *LogConfigCounterOptionsArgs) LogConfigCounterOptionsPtrInput {
	return (*logConfigCounterOptionsPtrType)(v)
}

func (*logConfigCounterOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogConfigCounterOptions)(nil)).Elem()
}

func (i *logConfigCounterOptionsPtrType) ToLogConfigCounterOptionsPtrOutput() LogConfigCounterOptionsPtrOutput {
	return i.ToLogConfigCounterOptionsPtrOutputWithContext(context.Background())
}

func (i *logConfigCounterOptionsPtrType) ToLogConfigCounterOptionsPtrOutputWithContext(ctx context.Context) LogConfigCounterOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigCounterOptionsPtrOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigCounterOptionsOutput struct{ *pulumi.OutputState }

func (LogConfigCounterOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigCounterOptions)(nil)).Elem()
}

func (o LogConfigCounterOptionsOutput) ToLogConfigCounterOptionsOutput() LogConfigCounterOptionsOutput {
	return o
}

func (o LogConfigCounterOptionsOutput) ToLogConfigCounterOptionsOutputWithContext(ctx context.Context) LogConfigCounterOptionsOutput {
	return o
}

func (o LogConfigCounterOptionsOutput) ToLogConfigCounterOptionsPtrOutput() LogConfigCounterOptionsPtrOutput {
	return o.ToLogConfigCounterOptionsPtrOutputWithContext(context.Background())
}

func (o LogConfigCounterOptionsOutput) ToLogConfigCounterOptionsPtrOutputWithContext(ctx context.Context) LogConfigCounterOptionsPtrOutput {
	return o.ApplyT(func(v LogConfigCounterOptions) *LogConfigCounterOptions {
		return &v
	}).(LogConfigCounterOptionsPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCounterOptionsOutput) CustomFields() LogConfigCounterOptionsCustomFieldArrayOutput {
	return o.ApplyT(func(v LogConfigCounterOptions) []LogConfigCounterOptionsCustomField { return v.CustomFields }).(LogConfigCounterOptionsCustomFieldArrayOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCounterOptionsOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogConfigCounterOptions) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCounterOptionsOutput) Metric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogConfigCounterOptions) *string { return v.Metric }).(pulumi.StringPtrOutput)
}

type LogConfigCounterOptionsPtrOutput struct{ *pulumi.OutputState }

func (LogConfigCounterOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogConfigCounterOptions)(nil)).Elem()
}

func (o LogConfigCounterOptionsPtrOutput) ToLogConfigCounterOptionsPtrOutput() LogConfigCounterOptionsPtrOutput {
	return o
}

func (o LogConfigCounterOptionsPtrOutput) ToLogConfigCounterOptionsPtrOutputWithContext(ctx context.Context) LogConfigCounterOptionsPtrOutput {
	return o
}

func (o LogConfigCounterOptionsPtrOutput) Elem() LogConfigCounterOptionsOutput {
	return o.ApplyT(func(v *LogConfigCounterOptions) LogConfigCounterOptions { return *v }).(LogConfigCounterOptionsOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCounterOptionsPtrOutput) CustomFields() LogConfigCounterOptionsCustomFieldArrayOutput {
	return o.ApplyT(func(v *LogConfigCounterOptions) []LogConfigCounterOptionsCustomField {
		if v == nil {
			return nil
		}
		return v.CustomFields
	}).(LogConfigCounterOptionsCustomFieldArrayOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCounterOptionsPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogConfigCounterOptions) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCounterOptionsPtrOutput) Metric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogConfigCounterOptions) *string {
		if v == nil {
			return nil
		}
		return v.Metric
	}).(pulumi.StringPtrOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigCounterOptionsCustomField struct {
	// This is deprecated and has no effect. Do not use.
	Name *string `pulumi:"name"`
	// This is deprecated and has no effect. Do not use.
	Value *string `pulumi:"value"`
}

// LogConfigCounterOptionsCustomFieldInput is an input type that accepts LogConfigCounterOptionsCustomFieldArgs and LogConfigCounterOptionsCustomFieldOutput values.
// You can construct a concrete instance of `LogConfigCounterOptionsCustomFieldInput` via:
//
//          LogConfigCounterOptionsCustomFieldArgs{...}
type LogConfigCounterOptionsCustomFieldInput interface {
	pulumi.Input

	ToLogConfigCounterOptionsCustomFieldOutput() LogConfigCounterOptionsCustomFieldOutput
	ToLogConfigCounterOptionsCustomFieldOutputWithContext(context.Context) LogConfigCounterOptionsCustomFieldOutput
}

// This is deprecated and has no effect. Do not use.
type LogConfigCounterOptionsCustomFieldArgs struct {
	// This is deprecated and has no effect. Do not use.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// This is deprecated and has no effect. Do not use.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (LogConfigCounterOptionsCustomFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigCounterOptionsCustomField)(nil)).Elem()
}

func (i LogConfigCounterOptionsCustomFieldArgs) ToLogConfigCounterOptionsCustomFieldOutput() LogConfigCounterOptionsCustomFieldOutput {
	return i.ToLogConfigCounterOptionsCustomFieldOutputWithContext(context.Background())
}

func (i LogConfigCounterOptionsCustomFieldArgs) ToLogConfigCounterOptionsCustomFieldOutputWithContext(ctx context.Context) LogConfigCounterOptionsCustomFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigCounterOptionsCustomFieldOutput)
}

// LogConfigCounterOptionsCustomFieldArrayInput is an input type that accepts LogConfigCounterOptionsCustomFieldArray and LogConfigCounterOptionsCustomFieldArrayOutput values.
// You can construct a concrete instance of `LogConfigCounterOptionsCustomFieldArrayInput` via:
//
//          LogConfigCounterOptionsCustomFieldArray{ LogConfigCounterOptionsCustomFieldArgs{...} }
type LogConfigCounterOptionsCustomFieldArrayInput interface {
	pulumi.Input

	ToLogConfigCounterOptionsCustomFieldArrayOutput() LogConfigCounterOptionsCustomFieldArrayOutput
	ToLogConfigCounterOptionsCustomFieldArrayOutputWithContext(context.Context) LogConfigCounterOptionsCustomFieldArrayOutput
}

type LogConfigCounterOptionsCustomFieldArray []LogConfigCounterOptionsCustomFieldInput

func (LogConfigCounterOptionsCustomFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogConfigCounterOptionsCustomField)(nil)).Elem()
}

func (i LogConfigCounterOptionsCustomFieldArray) ToLogConfigCounterOptionsCustomFieldArrayOutput() LogConfigCounterOptionsCustomFieldArrayOutput {
	return i.ToLogConfigCounterOptionsCustomFieldArrayOutputWithContext(context.Background())
}

func (i LogConfigCounterOptionsCustomFieldArray) ToLogConfigCounterOptionsCustomFieldArrayOutputWithContext(ctx context.Context) LogConfigCounterOptionsCustomFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigCounterOptionsCustomFieldArrayOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigCounterOptionsCustomFieldOutput struct{ *pulumi.OutputState }

func (LogConfigCounterOptionsCustomFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigCounterOptionsCustomField)(nil)).Elem()
}

func (o LogConfigCounterOptionsCustomFieldOutput) ToLogConfigCounterOptionsCustomFieldOutput() LogConfigCounterOptionsCustomFieldOutput {
	return o
}

func (o LogConfigCounterOptionsCustomFieldOutput) ToLogConfigCounterOptionsCustomFieldOutputWithContext(ctx context.Context) LogConfigCounterOptionsCustomFieldOutput {
	return o
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCounterOptionsCustomFieldOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogConfigCounterOptionsCustomField) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCounterOptionsCustomFieldOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogConfigCounterOptionsCustomField) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type LogConfigCounterOptionsCustomFieldArrayOutput struct{ *pulumi.OutputState }

func (LogConfigCounterOptionsCustomFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogConfigCounterOptionsCustomField)(nil)).Elem()
}

func (o LogConfigCounterOptionsCustomFieldArrayOutput) ToLogConfigCounterOptionsCustomFieldArrayOutput() LogConfigCounterOptionsCustomFieldArrayOutput {
	return o
}

func (o LogConfigCounterOptionsCustomFieldArrayOutput) ToLogConfigCounterOptionsCustomFieldArrayOutputWithContext(ctx context.Context) LogConfigCounterOptionsCustomFieldArrayOutput {
	return o
}

func (o LogConfigCounterOptionsCustomFieldArrayOutput) Index(i pulumi.IntInput) LogConfigCounterOptionsCustomFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogConfigCounterOptionsCustomField {
		return vs[0].([]LogConfigCounterOptionsCustomField)[vs[1].(int)]
	}).(LogConfigCounterOptionsCustomFieldOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigCounterOptionsCustomFieldResponse struct {
	// This is deprecated and has no effect. Do not use.
	Name string `pulumi:"name"`
	// This is deprecated and has no effect. Do not use.
	Value string `pulumi:"value"`
}

// LogConfigCounterOptionsCustomFieldResponseInput is an input type that accepts LogConfigCounterOptionsCustomFieldResponseArgs and LogConfigCounterOptionsCustomFieldResponseOutput values.
// You can construct a concrete instance of `LogConfigCounterOptionsCustomFieldResponseInput` via:
//
//          LogConfigCounterOptionsCustomFieldResponseArgs{...}
type LogConfigCounterOptionsCustomFieldResponseInput interface {
	pulumi.Input

	ToLogConfigCounterOptionsCustomFieldResponseOutput() LogConfigCounterOptionsCustomFieldResponseOutput
	ToLogConfigCounterOptionsCustomFieldResponseOutputWithContext(context.Context) LogConfigCounterOptionsCustomFieldResponseOutput
}

// This is deprecated and has no effect. Do not use.
type LogConfigCounterOptionsCustomFieldResponseArgs struct {
	// This is deprecated and has no effect. Do not use.
	Name pulumi.StringInput `pulumi:"name"`
	// This is deprecated and has no effect. Do not use.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LogConfigCounterOptionsCustomFieldResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigCounterOptionsCustomFieldResponse)(nil)).Elem()
}

func (i LogConfigCounterOptionsCustomFieldResponseArgs) ToLogConfigCounterOptionsCustomFieldResponseOutput() LogConfigCounterOptionsCustomFieldResponseOutput {
	return i.ToLogConfigCounterOptionsCustomFieldResponseOutputWithContext(context.Background())
}

func (i LogConfigCounterOptionsCustomFieldResponseArgs) ToLogConfigCounterOptionsCustomFieldResponseOutputWithContext(ctx context.Context) LogConfigCounterOptionsCustomFieldResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigCounterOptionsCustomFieldResponseOutput)
}

// LogConfigCounterOptionsCustomFieldResponseArrayInput is an input type that accepts LogConfigCounterOptionsCustomFieldResponseArray and LogConfigCounterOptionsCustomFieldResponseArrayOutput values.
// You can construct a concrete instance of `LogConfigCounterOptionsCustomFieldResponseArrayInput` via:
//
//          LogConfigCounterOptionsCustomFieldResponseArray{ LogConfigCounterOptionsCustomFieldResponseArgs{...} }
type LogConfigCounterOptionsCustomFieldResponseArrayInput interface {
	pulumi.Input

	ToLogConfigCounterOptionsCustomFieldResponseArrayOutput() LogConfigCounterOptionsCustomFieldResponseArrayOutput
	ToLogConfigCounterOptionsCustomFieldResponseArrayOutputWithContext(context.Context) LogConfigCounterOptionsCustomFieldResponseArrayOutput
}

type LogConfigCounterOptionsCustomFieldResponseArray []LogConfigCounterOptionsCustomFieldResponseInput

func (LogConfigCounterOptionsCustomFieldResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogConfigCounterOptionsCustomFieldResponse)(nil)).Elem()
}

func (i LogConfigCounterOptionsCustomFieldResponseArray) ToLogConfigCounterOptionsCustomFieldResponseArrayOutput() LogConfigCounterOptionsCustomFieldResponseArrayOutput {
	return i.ToLogConfigCounterOptionsCustomFieldResponseArrayOutputWithContext(context.Background())
}

func (i LogConfigCounterOptionsCustomFieldResponseArray) ToLogConfigCounterOptionsCustomFieldResponseArrayOutputWithContext(ctx context.Context) LogConfigCounterOptionsCustomFieldResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigCounterOptionsCustomFieldResponseArrayOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigCounterOptionsCustomFieldResponseOutput struct{ *pulumi.OutputState }

func (LogConfigCounterOptionsCustomFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigCounterOptionsCustomFieldResponse)(nil)).Elem()
}

func (o LogConfigCounterOptionsCustomFieldResponseOutput) ToLogConfigCounterOptionsCustomFieldResponseOutput() LogConfigCounterOptionsCustomFieldResponseOutput {
	return o
}

func (o LogConfigCounterOptionsCustomFieldResponseOutput) ToLogConfigCounterOptionsCustomFieldResponseOutputWithContext(ctx context.Context) LogConfigCounterOptionsCustomFieldResponseOutput {
	return o
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCounterOptionsCustomFieldResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogConfigCounterOptionsCustomFieldResponse) string { return v.Name }).(pulumi.StringOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCounterOptionsCustomFieldResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LogConfigCounterOptionsCustomFieldResponse) string { return v.Value }).(pulumi.StringOutput)
}

type LogConfigCounterOptionsCustomFieldResponseArrayOutput struct{ *pulumi.OutputState }

func (LogConfigCounterOptionsCustomFieldResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogConfigCounterOptionsCustomFieldResponse)(nil)).Elem()
}

func (o LogConfigCounterOptionsCustomFieldResponseArrayOutput) ToLogConfigCounterOptionsCustomFieldResponseArrayOutput() LogConfigCounterOptionsCustomFieldResponseArrayOutput {
	return o
}

func (o LogConfigCounterOptionsCustomFieldResponseArrayOutput) ToLogConfigCounterOptionsCustomFieldResponseArrayOutputWithContext(ctx context.Context) LogConfigCounterOptionsCustomFieldResponseArrayOutput {
	return o
}

func (o LogConfigCounterOptionsCustomFieldResponseArrayOutput) Index(i pulumi.IntInput) LogConfigCounterOptionsCustomFieldResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogConfigCounterOptionsCustomFieldResponse {
		return vs[0].([]LogConfigCounterOptionsCustomFieldResponse)[vs[1].(int)]
	}).(LogConfigCounterOptionsCustomFieldResponseOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigCounterOptionsResponse struct {
	// This is deprecated and has no effect. Do not use.
	CustomFields []LogConfigCounterOptionsCustomFieldResponse `pulumi:"customFields"`
	// This is deprecated and has no effect. Do not use.
	Field string `pulumi:"field"`
	// This is deprecated and has no effect. Do not use.
	Metric string `pulumi:"metric"`
}

// LogConfigCounterOptionsResponseInput is an input type that accepts LogConfigCounterOptionsResponseArgs and LogConfigCounterOptionsResponseOutput values.
// You can construct a concrete instance of `LogConfigCounterOptionsResponseInput` via:
//
//          LogConfigCounterOptionsResponseArgs{...}
type LogConfigCounterOptionsResponseInput interface {
	pulumi.Input

	ToLogConfigCounterOptionsResponseOutput() LogConfigCounterOptionsResponseOutput
	ToLogConfigCounterOptionsResponseOutputWithContext(context.Context) LogConfigCounterOptionsResponseOutput
}

// This is deprecated and has no effect. Do not use.
type LogConfigCounterOptionsResponseArgs struct {
	// This is deprecated and has no effect. Do not use.
	CustomFields LogConfigCounterOptionsCustomFieldResponseArrayInput `pulumi:"customFields"`
	// This is deprecated and has no effect. Do not use.
	Field pulumi.StringInput `pulumi:"field"`
	// This is deprecated and has no effect. Do not use.
	Metric pulumi.StringInput `pulumi:"metric"`
}

func (LogConfigCounterOptionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigCounterOptionsResponse)(nil)).Elem()
}

func (i LogConfigCounterOptionsResponseArgs) ToLogConfigCounterOptionsResponseOutput() LogConfigCounterOptionsResponseOutput {
	return i.ToLogConfigCounterOptionsResponseOutputWithContext(context.Background())
}

func (i LogConfigCounterOptionsResponseArgs) ToLogConfigCounterOptionsResponseOutputWithContext(ctx context.Context) LogConfigCounterOptionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigCounterOptionsResponseOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigCounterOptionsResponseOutput struct{ *pulumi.OutputState }

func (LogConfigCounterOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigCounterOptionsResponse)(nil)).Elem()
}

func (o LogConfigCounterOptionsResponseOutput) ToLogConfigCounterOptionsResponseOutput() LogConfigCounterOptionsResponseOutput {
	return o
}

func (o LogConfigCounterOptionsResponseOutput) ToLogConfigCounterOptionsResponseOutputWithContext(ctx context.Context) LogConfigCounterOptionsResponseOutput {
	return o
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCounterOptionsResponseOutput) CustomFields() LogConfigCounterOptionsCustomFieldResponseArrayOutput {
	return o.ApplyT(func(v LogConfigCounterOptionsResponse) []LogConfigCounterOptionsCustomFieldResponse {
		return v.CustomFields
	}).(LogConfigCounterOptionsCustomFieldResponseArrayOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCounterOptionsResponseOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v LogConfigCounterOptionsResponse) string { return v.Field }).(pulumi.StringOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigCounterOptionsResponseOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v LogConfigCounterOptionsResponse) string { return v.Metric }).(pulumi.StringOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigDataAccessOptions struct {
	// This is deprecated and has no effect. Do not use.
	LogMode *string `pulumi:"logMode"`
}

// LogConfigDataAccessOptionsInput is an input type that accepts LogConfigDataAccessOptionsArgs and LogConfigDataAccessOptionsOutput values.
// You can construct a concrete instance of `LogConfigDataAccessOptionsInput` via:
//
//          LogConfigDataAccessOptionsArgs{...}
type LogConfigDataAccessOptionsInput interface {
	pulumi.Input

	ToLogConfigDataAccessOptionsOutput() LogConfigDataAccessOptionsOutput
	ToLogConfigDataAccessOptionsOutputWithContext(context.Context) LogConfigDataAccessOptionsOutput
}

// This is deprecated and has no effect. Do not use.
type LogConfigDataAccessOptionsArgs struct {
	// This is deprecated and has no effect. Do not use.
	LogMode *LogConfigDataAccessOptionsLogMode `pulumi:"logMode"`
}

func (LogConfigDataAccessOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigDataAccessOptions)(nil)).Elem()
}

func (i LogConfigDataAccessOptionsArgs) ToLogConfigDataAccessOptionsOutput() LogConfigDataAccessOptionsOutput {
	return i.ToLogConfigDataAccessOptionsOutputWithContext(context.Background())
}

func (i LogConfigDataAccessOptionsArgs) ToLogConfigDataAccessOptionsOutputWithContext(ctx context.Context) LogConfigDataAccessOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigDataAccessOptionsOutput)
}

func (i LogConfigDataAccessOptionsArgs) ToLogConfigDataAccessOptionsPtrOutput() LogConfigDataAccessOptionsPtrOutput {
	return i.ToLogConfigDataAccessOptionsPtrOutputWithContext(context.Background())
}

func (i LogConfigDataAccessOptionsArgs) ToLogConfigDataAccessOptionsPtrOutputWithContext(ctx context.Context) LogConfigDataAccessOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigDataAccessOptionsOutput).ToLogConfigDataAccessOptionsPtrOutputWithContext(ctx)
}

// LogConfigDataAccessOptionsPtrInput is an input type that accepts LogConfigDataAccessOptionsArgs, LogConfigDataAccessOptionsPtr and LogConfigDataAccessOptionsPtrOutput values.
// You can construct a concrete instance of `LogConfigDataAccessOptionsPtrInput` via:
//
//          LogConfigDataAccessOptionsArgs{...}
//
//  or:
//
//          nil
type LogConfigDataAccessOptionsPtrInput interface {
	pulumi.Input

	ToLogConfigDataAccessOptionsPtrOutput() LogConfigDataAccessOptionsPtrOutput
	ToLogConfigDataAccessOptionsPtrOutputWithContext(context.Context) LogConfigDataAccessOptionsPtrOutput
}

type logConfigDataAccessOptionsPtrType LogConfigDataAccessOptionsArgs

func LogConfigDataAccessOptionsPtr(v *LogConfigDataAccessOptionsArgs) LogConfigDataAccessOptionsPtrInput {
	return (*logConfigDataAccessOptionsPtrType)(v)
}

func (*logConfigDataAccessOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogConfigDataAccessOptions)(nil)).Elem()
}

func (i *logConfigDataAccessOptionsPtrType) ToLogConfigDataAccessOptionsPtrOutput() LogConfigDataAccessOptionsPtrOutput {
	return i.ToLogConfigDataAccessOptionsPtrOutputWithContext(context.Background())
}

func (i *logConfigDataAccessOptionsPtrType) ToLogConfigDataAccessOptionsPtrOutputWithContext(ctx context.Context) LogConfigDataAccessOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigDataAccessOptionsPtrOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigDataAccessOptionsOutput struct{ *pulumi.OutputState }

func (LogConfigDataAccessOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigDataAccessOptions)(nil)).Elem()
}

func (o LogConfigDataAccessOptionsOutput) ToLogConfigDataAccessOptionsOutput() LogConfigDataAccessOptionsOutput {
	return o
}

func (o LogConfigDataAccessOptionsOutput) ToLogConfigDataAccessOptionsOutputWithContext(ctx context.Context) LogConfigDataAccessOptionsOutput {
	return o
}

func (o LogConfigDataAccessOptionsOutput) ToLogConfigDataAccessOptionsPtrOutput() LogConfigDataAccessOptionsPtrOutput {
	return o.ToLogConfigDataAccessOptionsPtrOutputWithContext(context.Background())
}

func (o LogConfigDataAccessOptionsOutput) ToLogConfigDataAccessOptionsPtrOutputWithContext(ctx context.Context) LogConfigDataAccessOptionsPtrOutput {
	return o.ApplyT(func(v LogConfigDataAccessOptions) *LogConfigDataAccessOptions {
		return &v
	}).(LogConfigDataAccessOptionsPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigDataAccessOptionsOutput) LogMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogConfigDataAccessOptions) *string { return v.LogMode }).(pulumi.StringPtrOutput)
}

type LogConfigDataAccessOptionsPtrOutput struct{ *pulumi.OutputState }

func (LogConfigDataAccessOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogConfigDataAccessOptions)(nil)).Elem()
}

func (o LogConfigDataAccessOptionsPtrOutput) ToLogConfigDataAccessOptionsPtrOutput() LogConfigDataAccessOptionsPtrOutput {
	return o
}

func (o LogConfigDataAccessOptionsPtrOutput) ToLogConfigDataAccessOptionsPtrOutputWithContext(ctx context.Context) LogConfigDataAccessOptionsPtrOutput {
	return o
}

func (o LogConfigDataAccessOptionsPtrOutput) Elem() LogConfigDataAccessOptionsOutput {
	return o.ApplyT(func(v *LogConfigDataAccessOptions) LogConfigDataAccessOptions { return *v }).(LogConfigDataAccessOptionsOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigDataAccessOptionsPtrOutput) LogMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogConfigDataAccessOptions) *string {
		if v == nil {
			return nil
		}
		return v.LogMode
	}).(pulumi.StringPtrOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigDataAccessOptionsResponse struct {
	// This is deprecated and has no effect. Do not use.
	LogMode string `pulumi:"logMode"`
}

// LogConfigDataAccessOptionsResponseInput is an input type that accepts LogConfigDataAccessOptionsResponseArgs and LogConfigDataAccessOptionsResponseOutput values.
// You can construct a concrete instance of `LogConfigDataAccessOptionsResponseInput` via:
//
//          LogConfigDataAccessOptionsResponseArgs{...}
type LogConfigDataAccessOptionsResponseInput interface {
	pulumi.Input

	ToLogConfigDataAccessOptionsResponseOutput() LogConfigDataAccessOptionsResponseOutput
	ToLogConfigDataAccessOptionsResponseOutputWithContext(context.Context) LogConfigDataAccessOptionsResponseOutput
}

// This is deprecated and has no effect. Do not use.
type LogConfigDataAccessOptionsResponseArgs struct {
	// This is deprecated and has no effect. Do not use.
	LogMode pulumi.StringInput `pulumi:"logMode"`
}

func (LogConfigDataAccessOptionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigDataAccessOptionsResponse)(nil)).Elem()
}

func (i LogConfigDataAccessOptionsResponseArgs) ToLogConfigDataAccessOptionsResponseOutput() LogConfigDataAccessOptionsResponseOutput {
	return i.ToLogConfigDataAccessOptionsResponseOutputWithContext(context.Background())
}

func (i LogConfigDataAccessOptionsResponseArgs) ToLogConfigDataAccessOptionsResponseOutputWithContext(ctx context.Context) LogConfigDataAccessOptionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigDataAccessOptionsResponseOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigDataAccessOptionsResponseOutput struct{ *pulumi.OutputState }

func (LogConfigDataAccessOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigDataAccessOptionsResponse)(nil)).Elem()
}

func (o LogConfigDataAccessOptionsResponseOutput) ToLogConfigDataAccessOptionsResponseOutput() LogConfigDataAccessOptionsResponseOutput {
	return o
}

func (o LogConfigDataAccessOptionsResponseOutput) ToLogConfigDataAccessOptionsResponseOutputWithContext(ctx context.Context) LogConfigDataAccessOptionsResponseOutput {
	return o
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigDataAccessOptionsResponseOutput) LogMode() pulumi.StringOutput {
	return o.ApplyT(func(v LogConfigDataAccessOptionsResponse) string { return v.LogMode }).(pulumi.StringOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigResponse struct {
	// This is deprecated and has no effect. Do not use.
	CloudAudit LogConfigCloudAuditOptionsResponse `pulumi:"cloudAudit"`
	// This is deprecated and has no effect. Do not use.
	Counter LogConfigCounterOptionsResponse `pulumi:"counter"`
	// This is deprecated and has no effect. Do not use.
	DataAccess LogConfigDataAccessOptionsResponse `pulumi:"dataAccess"`
}

// LogConfigResponseInput is an input type that accepts LogConfigResponseArgs and LogConfigResponseOutput values.
// You can construct a concrete instance of `LogConfigResponseInput` via:
//
//          LogConfigResponseArgs{...}
type LogConfigResponseInput interface {
	pulumi.Input

	ToLogConfigResponseOutput() LogConfigResponseOutput
	ToLogConfigResponseOutputWithContext(context.Context) LogConfigResponseOutput
}

// This is deprecated and has no effect. Do not use.
type LogConfigResponseArgs struct {
	// This is deprecated and has no effect. Do not use.
	CloudAudit LogConfigCloudAuditOptionsResponseInput `pulumi:"cloudAudit"`
	// This is deprecated and has no effect. Do not use.
	Counter LogConfigCounterOptionsResponseInput `pulumi:"counter"`
	// This is deprecated and has no effect. Do not use.
	DataAccess LogConfigDataAccessOptionsResponseInput `pulumi:"dataAccess"`
}

func (LogConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigResponse)(nil)).Elem()
}

func (i LogConfigResponseArgs) ToLogConfigResponseOutput() LogConfigResponseOutput {
	return i.ToLogConfigResponseOutputWithContext(context.Background())
}

func (i LogConfigResponseArgs) ToLogConfigResponseOutputWithContext(ctx context.Context) LogConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigResponseOutput)
}

// LogConfigResponseArrayInput is an input type that accepts LogConfigResponseArray and LogConfigResponseArrayOutput values.
// You can construct a concrete instance of `LogConfigResponseArrayInput` via:
//
//          LogConfigResponseArray{ LogConfigResponseArgs{...} }
type LogConfigResponseArrayInput interface {
	pulumi.Input

	ToLogConfigResponseArrayOutput() LogConfigResponseArrayOutput
	ToLogConfigResponseArrayOutputWithContext(context.Context) LogConfigResponseArrayOutput
}

type LogConfigResponseArray []LogConfigResponseInput

func (LogConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogConfigResponse)(nil)).Elem()
}

func (i LogConfigResponseArray) ToLogConfigResponseArrayOutput() LogConfigResponseArrayOutput {
	return i.ToLogConfigResponseArrayOutputWithContext(context.Background())
}

func (i LogConfigResponseArray) ToLogConfigResponseArrayOutputWithContext(ctx context.Context) LogConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigResponseArrayOutput)
}

// This is deprecated and has no effect. Do not use.
type LogConfigResponseOutput struct{ *pulumi.OutputState }

func (LogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogConfigResponse)(nil)).Elem()
}

func (o LogConfigResponseOutput) ToLogConfigResponseOutput() LogConfigResponseOutput {
	return o
}

func (o LogConfigResponseOutput) ToLogConfigResponseOutputWithContext(ctx context.Context) LogConfigResponseOutput {
	return o
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigResponseOutput) CloudAudit() LogConfigCloudAuditOptionsResponseOutput {
	return o.ApplyT(func(v LogConfigResponse) LogConfigCloudAuditOptionsResponse { return v.CloudAudit }).(LogConfigCloudAuditOptionsResponseOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigResponseOutput) Counter() LogConfigCounterOptionsResponseOutput {
	return o.ApplyT(func(v LogConfigResponse) LogConfigCounterOptionsResponse { return v.Counter }).(LogConfigCounterOptionsResponseOutput)
}

// This is deprecated and has no effect. Do not use.
func (o LogConfigResponseOutput) DataAccess() LogConfigDataAccessOptionsResponseOutput {
	return o.ApplyT(func(v LogConfigResponse) LogConfigDataAccessOptionsResponse { return v.DataAccess }).(LogConfigDataAccessOptionsResponseOutput)
}

type LogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (LogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogConfigResponse)(nil)).Elem()
}

func (o LogConfigResponseArrayOutput) ToLogConfigResponseArrayOutput() LogConfigResponseArrayOutput {
	return o
}

func (o LogConfigResponseArrayOutput) ToLogConfigResponseArrayOutputWithContext(ctx context.Context) LogConfigResponseArrayOutput {
	return o
}

func (o LogConfigResponseArrayOutput) Index(i pulumi.IntInput) LogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogConfigResponse {
		return vs[0].([]LogConfigResponse)[vs[1].(int)]
	}).(LogConfigResponseOutput)
}

// A metadata key/value entry.
type Metadata struct {
	// Array of key/value pairs. The total size of all keys and values must be less than 512 KB.
	Items []MetadataItemsItem `pulumi:"items"`
}

// MetadataInput is an input type that accepts MetadataArgs and MetadataOutput values.
// You can construct a concrete instance of `MetadataInput` via:
//
//          MetadataArgs{...}
type MetadataInput interface {
	pulumi.Input

	ToMetadataOutput() MetadataOutput
	ToMetadataOutputWithContext(context.Context) MetadataOutput
}

// A metadata key/value entry.
type MetadataArgs struct {
	// Array of key/value pairs. The total size of all keys and values must be less than 512 KB.
	Items MetadataItemsItemArrayInput `pulumi:"items"`
}

func (MetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Metadata)(nil)).Elem()
}

func (i MetadataArgs) ToMetadataOutput() MetadataOutput {
	return i.ToMetadataOutputWithContext(context.Background())
}

func (i MetadataArgs) ToMetadataOutputWithContext(ctx context.Context) MetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataOutput)
}

func (i MetadataArgs) ToMetadataPtrOutput() MetadataPtrOutput {
	return i.ToMetadataPtrOutputWithContext(context.Background())
}

func (i MetadataArgs) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataOutput).ToMetadataPtrOutputWithContext(ctx)
}

// MetadataPtrInput is an input type that accepts MetadataArgs, MetadataPtr and MetadataPtrOutput values.
// You can construct a concrete instance of `MetadataPtrInput` via:
//
//          MetadataArgs{...}
//
//  or:
//
//          nil
type MetadataPtrInput interface {
	pulumi.Input

	ToMetadataPtrOutput() MetadataPtrOutput
	ToMetadataPtrOutputWithContext(context.Context) MetadataPtrOutput
}

type metadataPtrType MetadataArgs

func MetadataPtr(v *MetadataArgs) MetadataPtrInput {
	return (*metadataPtrType)(v)
}

func (*metadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Metadata)(nil)).Elem()
}

func (i *metadataPtrType) ToMetadataPtrOutput() MetadataPtrOutput {
	return i.ToMetadataPtrOutputWithContext(context.Background())
}

func (i *metadataPtrType) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataPtrOutput)
}

// A metadata key/value entry.
type MetadataOutput struct{ *pulumi.OutputState }

func (MetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Metadata)(nil)).Elem()
}

func (o MetadataOutput) ToMetadataOutput() MetadataOutput {
	return o
}

func (o MetadataOutput) ToMetadataOutputWithContext(ctx context.Context) MetadataOutput {
	return o
}

func (o MetadataOutput) ToMetadataPtrOutput() MetadataPtrOutput {
	return o.ToMetadataPtrOutputWithContext(context.Background())
}

func (o MetadataOutput) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return o.ApplyT(func(v Metadata) *Metadata {
		return &v
	}).(MetadataPtrOutput)
}

// Array of key/value pairs. The total size of all keys and values must be less than 512 KB.
func (o MetadataOutput) Items() MetadataItemsItemArrayOutput {
	return o.ApplyT(func(v Metadata) []MetadataItemsItem { return v.Items }).(MetadataItemsItemArrayOutput)
}

type MetadataPtrOutput struct{ *pulumi.OutputState }

func (MetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Metadata)(nil)).Elem()
}

func (o MetadataPtrOutput) ToMetadataPtrOutput() MetadataPtrOutput {
	return o
}

func (o MetadataPtrOutput) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return o
}

func (o MetadataPtrOutput) Elem() MetadataOutput {
	return o.ApplyT(func(v *Metadata) Metadata { return *v }).(MetadataOutput)
}

// Array of key/value pairs. The total size of all keys and values must be less than 512 KB.
func (o MetadataPtrOutput) Items() MetadataItemsItemArrayOutput {
	return o.ApplyT(func(v *Metadata) []MetadataItemsItem {
		if v == nil {
			return nil
		}
		return v.Items
	}).(MetadataItemsItemArrayOutput)
}

// Opaque filter criteria used by loadbalancers to restrict routing configuration to a limited set of loadbalancing proxies. Proxies and sidecars involved in loadbalancing would typically present metadata to the loadbalancers which need to match criteria specified here. If a match takes place, the relevant configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. An example for using metadataFilters would be: if loadbalancing involves Envoys, they will only receive routing configuration when values in metadataFilters match values supplied in of their XDS requests to loadbalancers.
type MetadataFilter struct {
	// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list must not be empty and can have at the most 64 entries.
	FilterLabels []MetadataFilterLabelMatch `pulumi:"filterLabels"`
	// Specifies how individual filterLabel matches within the list of filterLabels contribute towards the overall metadataFilter match. Supported values are: - MATCH_ANY: At least one of the filterLabels must have a matching label in the provided metadata. - MATCH_ALL: All filterLabels must have matching labels in the provided metadata.
	FilterMatchCriteria *string `pulumi:"filterMatchCriteria"`
}

// MetadataFilterInput is an input type that accepts MetadataFilterArgs and MetadataFilterOutput values.
// You can construct a concrete instance of `MetadataFilterInput` via:
//
//          MetadataFilterArgs{...}
type MetadataFilterInput interface {
	pulumi.Input

	ToMetadataFilterOutput() MetadataFilterOutput
	ToMetadataFilterOutputWithContext(context.Context) MetadataFilterOutput
}

// Opaque filter criteria used by loadbalancers to restrict routing configuration to a limited set of loadbalancing proxies. Proxies and sidecars involved in loadbalancing would typically present metadata to the loadbalancers which need to match criteria specified here. If a match takes place, the relevant configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. An example for using metadataFilters would be: if loadbalancing involves Envoys, they will only receive routing configuration when values in metadataFilters match values supplied in of their XDS requests to loadbalancers.
type MetadataFilterArgs struct {
	// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list must not be empty and can have at the most 64 entries.
	FilterLabels MetadataFilterLabelMatchArrayInput `pulumi:"filterLabels"`
	// Specifies how individual filterLabel matches within the list of filterLabels contribute towards the overall metadataFilter match. Supported values are: - MATCH_ANY: At least one of the filterLabels must have a matching label in the provided metadata. - MATCH_ALL: All filterLabels must have matching labels in the provided metadata.
	FilterMatchCriteria *MetadataFilterFilterMatchCriteria `pulumi:"filterMatchCriteria"`
}

func (MetadataFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataFilter)(nil)).Elem()
}

func (i MetadataFilterArgs) ToMetadataFilterOutput() MetadataFilterOutput {
	return i.ToMetadataFilterOutputWithContext(context.Background())
}

func (i MetadataFilterArgs) ToMetadataFilterOutputWithContext(ctx context.Context) MetadataFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataFilterOutput)
}

// MetadataFilterArrayInput is an input type that accepts MetadataFilterArray and MetadataFilterArrayOutput values.
// You can construct a concrete instance of `MetadataFilterArrayInput` via:
//
//          MetadataFilterArray{ MetadataFilterArgs{...} }
type MetadataFilterArrayInput interface {
	pulumi.Input

	ToMetadataFilterArrayOutput() MetadataFilterArrayOutput
	ToMetadataFilterArrayOutputWithContext(context.Context) MetadataFilterArrayOutput
}

type MetadataFilterArray []MetadataFilterInput

func (MetadataFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataFilter)(nil)).Elem()
}

func (i MetadataFilterArray) ToMetadataFilterArrayOutput() MetadataFilterArrayOutput {
	return i.ToMetadataFilterArrayOutputWithContext(context.Background())
}

func (i MetadataFilterArray) ToMetadataFilterArrayOutputWithContext(ctx context.Context) MetadataFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataFilterArrayOutput)
}

// Opaque filter criteria used by loadbalancers to restrict routing configuration to a limited set of loadbalancing proxies. Proxies and sidecars involved in loadbalancing would typically present metadata to the loadbalancers which need to match criteria specified here. If a match takes place, the relevant configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. An example for using metadataFilters would be: if loadbalancing involves Envoys, they will only receive routing configuration when values in metadataFilters match values supplied in of their XDS requests to loadbalancers.
type MetadataFilterOutput struct{ *pulumi.OutputState }

func (MetadataFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataFilter)(nil)).Elem()
}

func (o MetadataFilterOutput) ToMetadataFilterOutput() MetadataFilterOutput {
	return o
}

func (o MetadataFilterOutput) ToMetadataFilterOutputWithContext(ctx context.Context) MetadataFilterOutput {
	return o
}

// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list must not be empty and can have at the most 64 entries.
func (o MetadataFilterOutput) FilterLabels() MetadataFilterLabelMatchArrayOutput {
	return o.ApplyT(func(v MetadataFilter) []MetadataFilterLabelMatch { return v.FilterLabels }).(MetadataFilterLabelMatchArrayOutput)
}

// Specifies how individual filterLabel matches within the list of filterLabels contribute towards the overall metadataFilter match. Supported values are: - MATCH_ANY: At least one of the filterLabels must have a matching label in the provided metadata. - MATCH_ALL: All filterLabels must have matching labels in the provided metadata.
func (o MetadataFilterOutput) FilterMatchCriteria() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataFilter) *string { return v.FilterMatchCriteria }).(pulumi.StringPtrOutput)
}

type MetadataFilterArrayOutput struct{ *pulumi.OutputState }

func (MetadataFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataFilter)(nil)).Elem()
}

func (o MetadataFilterArrayOutput) ToMetadataFilterArrayOutput() MetadataFilterArrayOutput {
	return o
}

func (o MetadataFilterArrayOutput) ToMetadataFilterArrayOutputWithContext(ctx context.Context) MetadataFilterArrayOutput {
	return o
}

func (o MetadataFilterArrayOutput) Index(i pulumi.IntInput) MetadataFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataFilter {
		return vs[0].([]MetadataFilter)[vs[1].(int)]
	}).(MetadataFilterOutput)
}

// MetadataFilter label name value pairs that are expected to match corresponding labels presented as metadata to the loadbalancer.
type MetadataFilterLabelMatch struct {
	// Name of metadata label. The name can have a maximum length of 1024 characters and must be at least 1 character long.
	Name *string `pulumi:"name"`
	// The value of the label must match the specified value. value can have a maximum length of 1024 characters.
	Value *string `pulumi:"value"`
}

// MetadataFilterLabelMatchInput is an input type that accepts MetadataFilterLabelMatchArgs and MetadataFilterLabelMatchOutput values.
// You can construct a concrete instance of `MetadataFilterLabelMatchInput` via:
//
//          MetadataFilterLabelMatchArgs{...}
type MetadataFilterLabelMatchInput interface {
	pulumi.Input

	ToMetadataFilterLabelMatchOutput() MetadataFilterLabelMatchOutput
	ToMetadataFilterLabelMatchOutputWithContext(context.Context) MetadataFilterLabelMatchOutput
}

// MetadataFilter label name value pairs that are expected to match corresponding labels presented as metadata to the loadbalancer.
type MetadataFilterLabelMatchArgs struct {
	// Name of metadata label. The name can have a maximum length of 1024 characters and must be at least 1 character long.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the label must match the specified value. value can have a maximum length of 1024 characters.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (MetadataFilterLabelMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataFilterLabelMatch)(nil)).Elem()
}

func (i MetadataFilterLabelMatchArgs) ToMetadataFilterLabelMatchOutput() MetadataFilterLabelMatchOutput {
	return i.ToMetadataFilterLabelMatchOutputWithContext(context.Background())
}

func (i MetadataFilterLabelMatchArgs) ToMetadataFilterLabelMatchOutputWithContext(ctx context.Context) MetadataFilterLabelMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataFilterLabelMatchOutput)
}

// MetadataFilterLabelMatchArrayInput is an input type that accepts MetadataFilterLabelMatchArray and MetadataFilterLabelMatchArrayOutput values.
// You can construct a concrete instance of `MetadataFilterLabelMatchArrayInput` via:
//
//          MetadataFilterLabelMatchArray{ MetadataFilterLabelMatchArgs{...} }
type MetadataFilterLabelMatchArrayInput interface {
	pulumi.Input

	ToMetadataFilterLabelMatchArrayOutput() MetadataFilterLabelMatchArrayOutput
	ToMetadataFilterLabelMatchArrayOutputWithContext(context.Context) MetadataFilterLabelMatchArrayOutput
}

type MetadataFilterLabelMatchArray []MetadataFilterLabelMatchInput

func (MetadataFilterLabelMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataFilterLabelMatch)(nil)).Elem()
}

func (i MetadataFilterLabelMatchArray) ToMetadataFilterLabelMatchArrayOutput() MetadataFilterLabelMatchArrayOutput {
	return i.ToMetadataFilterLabelMatchArrayOutputWithContext(context.Background())
}

func (i MetadataFilterLabelMatchArray) ToMetadataFilterLabelMatchArrayOutputWithContext(ctx context.Context) MetadataFilterLabelMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataFilterLabelMatchArrayOutput)
}

// MetadataFilter label name value pairs that are expected to match corresponding labels presented as metadata to the loadbalancer.
type MetadataFilterLabelMatchOutput struct{ *pulumi.OutputState }

func (MetadataFilterLabelMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataFilterLabelMatch)(nil)).Elem()
}

func (o MetadataFilterLabelMatchOutput) ToMetadataFilterLabelMatchOutput() MetadataFilterLabelMatchOutput {
	return o
}

func (o MetadataFilterLabelMatchOutput) ToMetadataFilterLabelMatchOutputWithContext(ctx context.Context) MetadataFilterLabelMatchOutput {
	return o
}

// Name of metadata label. The name can have a maximum length of 1024 characters and must be at least 1 character long.
func (o MetadataFilterLabelMatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataFilterLabelMatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the label must match the specified value. value can have a maximum length of 1024 characters.
func (o MetadataFilterLabelMatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataFilterLabelMatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type MetadataFilterLabelMatchArrayOutput struct{ *pulumi.OutputState }

func (MetadataFilterLabelMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataFilterLabelMatch)(nil)).Elem()
}

func (o MetadataFilterLabelMatchArrayOutput) ToMetadataFilterLabelMatchArrayOutput() MetadataFilterLabelMatchArrayOutput {
	return o
}

func (o MetadataFilterLabelMatchArrayOutput) ToMetadataFilterLabelMatchArrayOutputWithContext(ctx context.Context) MetadataFilterLabelMatchArrayOutput {
	return o
}

func (o MetadataFilterLabelMatchArrayOutput) Index(i pulumi.IntInput) MetadataFilterLabelMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataFilterLabelMatch {
		return vs[0].([]MetadataFilterLabelMatch)[vs[1].(int)]
	}).(MetadataFilterLabelMatchOutput)
}

// MetadataFilter label name value pairs that are expected to match corresponding labels presented as metadata to the loadbalancer.
type MetadataFilterLabelMatchResponse struct {
	// Name of metadata label. The name can have a maximum length of 1024 characters and must be at least 1 character long.
	Name string `pulumi:"name"`
	// The value of the label must match the specified value. value can have a maximum length of 1024 characters.
	Value string `pulumi:"value"`
}

// MetadataFilterLabelMatchResponseInput is an input type that accepts MetadataFilterLabelMatchResponseArgs and MetadataFilterLabelMatchResponseOutput values.
// You can construct a concrete instance of `MetadataFilterLabelMatchResponseInput` via:
//
//          MetadataFilterLabelMatchResponseArgs{...}
type MetadataFilterLabelMatchResponseInput interface {
	pulumi.Input

	ToMetadataFilterLabelMatchResponseOutput() MetadataFilterLabelMatchResponseOutput
	ToMetadataFilterLabelMatchResponseOutputWithContext(context.Context) MetadataFilterLabelMatchResponseOutput
}

// MetadataFilter label name value pairs that are expected to match corresponding labels presented as metadata to the loadbalancer.
type MetadataFilterLabelMatchResponseArgs struct {
	// Name of metadata label. The name can have a maximum length of 1024 characters and must be at least 1 character long.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the label must match the specified value. value can have a maximum length of 1024 characters.
	Value pulumi.StringInput `pulumi:"value"`
}

func (MetadataFilterLabelMatchResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataFilterLabelMatchResponse)(nil)).Elem()
}

func (i MetadataFilterLabelMatchResponseArgs) ToMetadataFilterLabelMatchResponseOutput() MetadataFilterLabelMatchResponseOutput {
	return i.ToMetadataFilterLabelMatchResponseOutputWithContext(context.Background())
}

func (i MetadataFilterLabelMatchResponseArgs) ToMetadataFilterLabelMatchResponseOutputWithContext(ctx context.Context) MetadataFilterLabelMatchResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataFilterLabelMatchResponseOutput)
}

// MetadataFilterLabelMatchResponseArrayInput is an input type that accepts MetadataFilterLabelMatchResponseArray and MetadataFilterLabelMatchResponseArrayOutput values.
// You can construct a concrete instance of `MetadataFilterLabelMatchResponseArrayInput` via:
//
//          MetadataFilterLabelMatchResponseArray{ MetadataFilterLabelMatchResponseArgs{...} }
type MetadataFilterLabelMatchResponseArrayInput interface {
	pulumi.Input

	ToMetadataFilterLabelMatchResponseArrayOutput() MetadataFilterLabelMatchResponseArrayOutput
	ToMetadataFilterLabelMatchResponseArrayOutputWithContext(context.Context) MetadataFilterLabelMatchResponseArrayOutput
}

type MetadataFilterLabelMatchResponseArray []MetadataFilterLabelMatchResponseInput

func (MetadataFilterLabelMatchResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataFilterLabelMatchResponse)(nil)).Elem()
}

func (i MetadataFilterLabelMatchResponseArray) ToMetadataFilterLabelMatchResponseArrayOutput() MetadataFilterLabelMatchResponseArrayOutput {
	return i.ToMetadataFilterLabelMatchResponseArrayOutputWithContext(context.Background())
}

func (i MetadataFilterLabelMatchResponseArray) ToMetadataFilterLabelMatchResponseArrayOutputWithContext(ctx context.Context) MetadataFilterLabelMatchResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataFilterLabelMatchResponseArrayOutput)
}

// MetadataFilter label name value pairs that are expected to match corresponding labels presented as metadata to the loadbalancer.
type MetadataFilterLabelMatchResponseOutput struct{ *pulumi.OutputState }

func (MetadataFilterLabelMatchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataFilterLabelMatchResponse)(nil)).Elem()
}

func (o MetadataFilterLabelMatchResponseOutput) ToMetadataFilterLabelMatchResponseOutput() MetadataFilterLabelMatchResponseOutput {
	return o
}

func (o MetadataFilterLabelMatchResponseOutput) ToMetadataFilterLabelMatchResponseOutputWithContext(ctx context.Context) MetadataFilterLabelMatchResponseOutput {
	return o
}

// Name of metadata label. The name can have a maximum length of 1024 characters and must be at least 1 character long.
func (o MetadataFilterLabelMatchResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataFilterLabelMatchResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the label must match the specified value. value can have a maximum length of 1024 characters.
func (o MetadataFilterLabelMatchResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataFilterLabelMatchResponse) string { return v.Value }).(pulumi.StringOutput)
}

type MetadataFilterLabelMatchResponseArrayOutput struct{ *pulumi.OutputState }

func (MetadataFilterLabelMatchResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataFilterLabelMatchResponse)(nil)).Elem()
}

func (o MetadataFilterLabelMatchResponseArrayOutput) ToMetadataFilterLabelMatchResponseArrayOutput() MetadataFilterLabelMatchResponseArrayOutput {
	return o
}

func (o MetadataFilterLabelMatchResponseArrayOutput) ToMetadataFilterLabelMatchResponseArrayOutputWithContext(ctx context.Context) MetadataFilterLabelMatchResponseArrayOutput {
	return o
}

func (o MetadataFilterLabelMatchResponseArrayOutput) Index(i pulumi.IntInput) MetadataFilterLabelMatchResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataFilterLabelMatchResponse {
		return vs[0].([]MetadataFilterLabelMatchResponse)[vs[1].(int)]
	}).(MetadataFilterLabelMatchResponseOutput)
}

// Opaque filter criteria used by loadbalancers to restrict routing configuration to a limited set of loadbalancing proxies. Proxies and sidecars involved in loadbalancing would typically present metadata to the loadbalancers which need to match criteria specified here. If a match takes place, the relevant configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. An example for using metadataFilters would be: if loadbalancing involves Envoys, they will only receive routing configuration when values in metadataFilters match values supplied in of their XDS requests to loadbalancers.
type MetadataFilterResponse struct {
	// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list must not be empty and can have at the most 64 entries.
	FilterLabels []MetadataFilterLabelMatchResponse `pulumi:"filterLabels"`
	// Specifies how individual filterLabel matches within the list of filterLabels contribute towards the overall metadataFilter match. Supported values are: - MATCH_ANY: At least one of the filterLabels must have a matching label in the provided metadata. - MATCH_ALL: All filterLabels must have matching labels in the provided metadata.
	FilterMatchCriteria string `pulumi:"filterMatchCriteria"`
}

// MetadataFilterResponseInput is an input type that accepts MetadataFilterResponseArgs and MetadataFilterResponseOutput values.
// You can construct a concrete instance of `MetadataFilterResponseInput` via:
//
//          MetadataFilterResponseArgs{...}
type MetadataFilterResponseInput interface {
	pulumi.Input

	ToMetadataFilterResponseOutput() MetadataFilterResponseOutput
	ToMetadataFilterResponseOutputWithContext(context.Context) MetadataFilterResponseOutput
}

// Opaque filter criteria used by loadbalancers to restrict routing configuration to a limited set of loadbalancing proxies. Proxies and sidecars involved in loadbalancing would typically present metadata to the loadbalancers which need to match criteria specified here. If a match takes place, the relevant configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. An example for using metadataFilters would be: if loadbalancing involves Envoys, they will only receive routing configuration when values in metadataFilters match values supplied in of their XDS requests to loadbalancers.
type MetadataFilterResponseArgs struct {
	// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list must not be empty and can have at the most 64 entries.
	FilterLabels MetadataFilterLabelMatchResponseArrayInput `pulumi:"filterLabels"`
	// Specifies how individual filterLabel matches within the list of filterLabels contribute towards the overall metadataFilter match. Supported values are: - MATCH_ANY: At least one of the filterLabels must have a matching label in the provided metadata. - MATCH_ALL: All filterLabels must have matching labels in the provided metadata.
	FilterMatchCriteria pulumi.StringInput `pulumi:"filterMatchCriteria"`
}

func (MetadataFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataFilterResponse)(nil)).Elem()
}

func (i MetadataFilterResponseArgs) ToMetadataFilterResponseOutput() MetadataFilterResponseOutput {
	return i.ToMetadataFilterResponseOutputWithContext(context.Background())
}

func (i MetadataFilterResponseArgs) ToMetadataFilterResponseOutputWithContext(ctx context.Context) MetadataFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataFilterResponseOutput)
}

// MetadataFilterResponseArrayInput is an input type that accepts MetadataFilterResponseArray and MetadataFilterResponseArrayOutput values.
// You can construct a concrete instance of `MetadataFilterResponseArrayInput` via:
//
//          MetadataFilterResponseArray{ MetadataFilterResponseArgs{...} }
type MetadataFilterResponseArrayInput interface {
	pulumi.Input

	ToMetadataFilterResponseArrayOutput() MetadataFilterResponseArrayOutput
	ToMetadataFilterResponseArrayOutputWithContext(context.Context) MetadataFilterResponseArrayOutput
}

type MetadataFilterResponseArray []MetadataFilterResponseInput

func (MetadataFilterResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataFilterResponse)(nil)).Elem()
}

func (i MetadataFilterResponseArray) ToMetadataFilterResponseArrayOutput() MetadataFilterResponseArrayOutput {
	return i.ToMetadataFilterResponseArrayOutputWithContext(context.Background())
}

func (i MetadataFilterResponseArray) ToMetadataFilterResponseArrayOutputWithContext(ctx context.Context) MetadataFilterResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataFilterResponseArrayOutput)
}

// Opaque filter criteria used by loadbalancers to restrict routing configuration to a limited set of loadbalancing proxies. Proxies and sidecars involved in loadbalancing would typically present metadata to the loadbalancers which need to match criteria specified here. If a match takes place, the relevant configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. An example for using metadataFilters would be: if loadbalancing involves Envoys, they will only receive routing configuration when values in metadataFilters match values supplied in of their XDS requests to loadbalancers.
type MetadataFilterResponseOutput struct{ *pulumi.OutputState }

func (MetadataFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataFilterResponse)(nil)).Elem()
}

func (o MetadataFilterResponseOutput) ToMetadataFilterResponseOutput() MetadataFilterResponseOutput {
	return o
}

func (o MetadataFilterResponseOutput) ToMetadataFilterResponseOutputWithContext(ctx context.Context) MetadataFilterResponseOutput {
	return o
}

// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list must not be empty and can have at the most 64 entries.
func (o MetadataFilterResponseOutput) FilterLabels() MetadataFilterLabelMatchResponseArrayOutput {
	return o.ApplyT(func(v MetadataFilterResponse) []MetadataFilterLabelMatchResponse { return v.FilterLabels }).(MetadataFilterLabelMatchResponseArrayOutput)
}

// Specifies how individual filterLabel matches within the list of filterLabels contribute towards the overall metadataFilter match. Supported values are: - MATCH_ANY: At least one of the filterLabels must have a matching label in the provided metadata. - MATCH_ALL: All filterLabels must have matching labels in the provided metadata.
func (o MetadataFilterResponseOutput) FilterMatchCriteria() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataFilterResponse) string { return v.FilterMatchCriteria }).(pulumi.StringOutput)
}

type MetadataFilterResponseArrayOutput struct{ *pulumi.OutputState }

func (MetadataFilterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataFilterResponse)(nil)).Elem()
}

func (o MetadataFilterResponseArrayOutput) ToMetadataFilterResponseArrayOutput() MetadataFilterResponseArrayOutput {
	return o
}

func (o MetadataFilterResponseArrayOutput) ToMetadataFilterResponseArrayOutputWithContext(ctx context.Context) MetadataFilterResponseArrayOutput {
	return o
}

func (o MetadataFilterResponseArrayOutput) Index(i pulumi.IntInput) MetadataFilterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataFilterResponse {
		return vs[0].([]MetadataFilterResponse)[vs[1].(int)]
	}).(MetadataFilterResponseOutput)
}

// Metadata
type MetadataItemsItem struct {
	// Key for the metadata entry. Keys must conform to the following regexp: [a-zA-Z0-9-_]+, and be less than 128 bytes in length. This is reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project.
	Key *string `pulumi:"key"`
	// Value for the metadata entry. These are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on values is that their size must be less than or equal to 262144 bytes (256 KiB).
	Value *string `pulumi:"value"`
}

// MetadataItemsItemInput is an input type that accepts MetadataItemsItemArgs and MetadataItemsItemOutput values.
// You can construct a concrete instance of `MetadataItemsItemInput` via:
//
//          MetadataItemsItemArgs{...}
type MetadataItemsItemInput interface {
	pulumi.Input

	ToMetadataItemsItemOutput() MetadataItemsItemOutput
	ToMetadataItemsItemOutputWithContext(context.Context) MetadataItemsItemOutput
}

// Metadata
type MetadataItemsItemArgs struct {
	// Key for the metadata entry. Keys must conform to the following regexp: [a-zA-Z0-9-_]+, and be less than 128 bytes in length. This is reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Value for the metadata entry. These are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on values is that their size must be less than or equal to 262144 bytes (256 KiB).
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (MetadataItemsItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataItemsItem)(nil)).Elem()
}

func (i MetadataItemsItemArgs) ToMetadataItemsItemOutput() MetadataItemsItemOutput {
	return i.ToMetadataItemsItemOutputWithContext(context.Background())
}

func (i MetadataItemsItemArgs) ToMetadataItemsItemOutputWithContext(ctx context.Context) MetadataItemsItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataItemsItemOutput)
}

// MetadataItemsItemArrayInput is an input type that accepts MetadataItemsItemArray and MetadataItemsItemArrayOutput values.
// You can construct a concrete instance of `MetadataItemsItemArrayInput` via:
//
//          MetadataItemsItemArray{ MetadataItemsItemArgs{...} }
type MetadataItemsItemArrayInput interface {
	pulumi.Input

	ToMetadataItemsItemArrayOutput() MetadataItemsItemArrayOutput
	ToMetadataItemsItemArrayOutputWithContext(context.Context) MetadataItemsItemArrayOutput
}

type MetadataItemsItemArray []MetadataItemsItemInput

func (MetadataItemsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataItemsItem)(nil)).Elem()
}

func (i MetadataItemsItemArray) ToMetadataItemsItemArrayOutput() MetadataItemsItemArrayOutput {
	return i.ToMetadataItemsItemArrayOutputWithContext(context.Background())
}

func (i MetadataItemsItemArray) ToMetadataItemsItemArrayOutputWithContext(ctx context.Context) MetadataItemsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataItemsItemArrayOutput)
}

// Metadata
type MetadataItemsItemOutput struct{ *pulumi.OutputState }

func (MetadataItemsItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataItemsItem)(nil)).Elem()
}

func (o MetadataItemsItemOutput) ToMetadataItemsItemOutput() MetadataItemsItemOutput {
	return o
}

func (o MetadataItemsItemOutput) ToMetadataItemsItemOutputWithContext(ctx context.Context) MetadataItemsItemOutput {
	return o
}

// Key for the metadata entry. Keys must conform to the following regexp: [a-zA-Z0-9-_]+, and be less than 128 bytes in length. This is reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project.
func (o MetadataItemsItemOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataItemsItem) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value for the metadata entry. These are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on values is that their size must be less than or equal to 262144 bytes (256 KiB).
func (o MetadataItemsItemOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataItemsItem) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type MetadataItemsItemArrayOutput struct{ *pulumi.OutputState }

func (MetadataItemsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataItemsItem)(nil)).Elem()
}

func (o MetadataItemsItemArrayOutput) ToMetadataItemsItemArrayOutput() MetadataItemsItemArrayOutput {
	return o
}

func (o MetadataItemsItemArrayOutput) ToMetadataItemsItemArrayOutputWithContext(ctx context.Context) MetadataItemsItemArrayOutput {
	return o
}

func (o MetadataItemsItemArrayOutput) Index(i pulumi.IntInput) MetadataItemsItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataItemsItem {
		return vs[0].([]MetadataItemsItem)[vs[1].(int)]
	}).(MetadataItemsItemOutput)
}

// Metadata
type MetadataItemsItemResponse struct {
	// Key for the metadata entry. Keys must conform to the following regexp: [a-zA-Z0-9-_]+, and be less than 128 bytes in length. This is reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project.
	Key string `pulumi:"key"`
	// Value for the metadata entry. These are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on values is that their size must be less than or equal to 262144 bytes (256 KiB).
	Value string `pulumi:"value"`
}

// MetadataItemsItemResponseInput is an input type that accepts MetadataItemsItemResponseArgs and MetadataItemsItemResponseOutput values.
// You can construct a concrete instance of `MetadataItemsItemResponseInput` via:
//
//          MetadataItemsItemResponseArgs{...}
type MetadataItemsItemResponseInput interface {
	pulumi.Input

	ToMetadataItemsItemResponseOutput() MetadataItemsItemResponseOutput
	ToMetadataItemsItemResponseOutputWithContext(context.Context) MetadataItemsItemResponseOutput
}

// Metadata
type MetadataItemsItemResponseArgs struct {
	// Key for the metadata entry. Keys must conform to the following regexp: [a-zA-Z0-9-_]+, and be less than 128 bytes in length. This is reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project.
	Key pulumi.StringInput `pulumi:"key"`
	// Value for the metadata entry. These are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on values is that their size must be less than or equal to 262144 bytes (256 KiB).
	Value pulumi.StringInput `pulumi:"value"`
}

func (MetadataItemsItemResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataItemsItemResponse)(nil)).Elem()
}

func (i MetadataItemsItemResponseArgs) ToMetadataItemsItemResponseOutput() MetadataItemsItemResponseOutput {
	return i.ToMetadataItemsItemResponseOutputWithContext(context.Background())
}

func (i MetadataItemsItemResponseArgs) ToMetadataItemsItemResponseOutputWithContext(ctx context.Context) MetadataItemsItemResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataItemsItemResponseOutput)
}

// MetadataItemsItemResponseArrayInput is an input type that accepts MetadataItemsItemResponseArray and MetadataItemsItemResponseArrayOutput values.
// You can construct a concrete instance of `MetadataItemsItemResponseArrayInput` via:
//
//          MetadataItemsItemResponseArray{ MetadataItemsItemResponseArgs{...} }
type MetadataItemsItemResponseArrayInput interface {
	pulumi.Input

	ToMetadataItemsItemResponseArrayOutput() MetadataItemsItemResponseArrayOutput
	ToMetadataItemsItemResponseArrayOutputWithContext(context.Context) MetadataItemsItemResponseArrayOutput
}

type MetadataItemsItemResponseArray []MetadataItemsItemResponseInput

func (MetadataItemsItemResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataItemsItemResponse)(nil)).Elem()
}

func (i MetadataItemsItemResponseArray) ToMetadataItemsItemResponseArrayOutput() MetadataItemsItemResponseArrayOutput {
	return i.ToMetadataItemsItemResponseArrayOutputWithContext(context.Background())
}

func (i MetadataItemsItemResponseArray) ToMetadataItemsItemResponseArrayOutputWithContext(ctx context.Context) MetadataItemsItemResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataItemsItemResponseArrayOutput)
}

// Metadata
type MetadataItemsItemResponseOutput struct{ *pulumi.OutputState }

func (MetadataItemsItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataItemsItemResponse)(nil)).Elem()
}

func (o MetadataItemsItemResponseOutput) ToMetadataItemsItemResponseOutput() MetadataItemsItemResponseOutput {
	return o
}

func (o MetadataItemsItemResponseOutput) ToMetadataItemsItemResponseOutputWithContext(ctx context.Context) MetadataItemsItemResponseOutput {
	return o
}

// Key for the metadata entry. Keys must conform to the following regexp: [a-zA-Z0-9-_]+, and be less than 128 bytes in length. This is reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project.
func (o MetadataItemsItemResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataItemsItemResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Value for the metadata entry. These are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on values is that their size must be less than or equal to 262144 bytes (256 KiB).
func (o MetadataItemsItemResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataItemsItemResponse) string { return v.Value }).(pulumi.StringOutput)
}

type MetadataItemsItemResponseArrayOutput struct{ *pulumi.OutputState }

func (MetadataItemsItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataItemsItemResponse)(nil)).Elem()
}

func (o MetadataItemsItemResponseArrayOutput) ToMetadataItemsItemResponseArrayOutput() MetadataItemsItemResponseArrayOutput {
	return o
}

func (o MetadataItemsItemResponseArrayOutput) ToMetadataItemsItemResponseArrayOutputWithContext(ctx context.Context) MetadataItemsItemResponseArrayOutput {
	return o
}

func (o MetadataItemsItemResponseArrayOutput) Index(i pulumi.IntInput) MetadataItemsItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataItemsItemResponse {
		return vs[0].([]MetadataItemsItemResponse)[vs[1].(int)]
	}).(MetadataItemsItemResponseOutput)
}

// A metadata key/value entry.
type MetadataResponse struct {
	// Specifies a fingerprint for this request, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the resource.
	Fingerprint string `pulumi:"fingerprint"`
	// Array of key/value pairs. The total size of all keys and values must be less than 512 KB.
	Items []MetadataItemsItemResponse `pulumi:"items"`
	// Type of the resource. Always compute#metadata for metadata.
	Kind string `pulumi:"kind"`
}

// MetadataResponseInput is an input type that accepts MetadataResponseArgs and MetadataResponseOutput values.
// You can construct a concrete instance of `MetadataResponseInput` via:
//
//          MetadataResponseArgs{...}
type MetadataResponseInput interface {
	pulumi.Input

	ToMetadataResponseOutput() MetadataResponseOutput
	ToMetadataResponseOutputWithContext(context.Context) MetadataResponseOutput
}

// A metadata key/value entry.
type MetadataResponseArgs struct {
	// Specifies a fingerprint for this request, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the resource.
	Fingerprint pulumi.StringInput `pulumi:"fingerprint"`
	// Array of key/value pairs. The total size of all keys and values must be less than 512 KB.
	Items MetadataItemsItemResponseArrayInput `pulumi:"items"`
	// Type of the resource. Always compute#metadata for metadata.
	Kind pulumi.StringInput `pulumi:"kind"`
}

func (MetadataResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataResponse)(nil)).Elem()
}

func (i MetadataResponseArgs) ToMetadataResponseOutput() MetadataResponseOutput {
	return i.ToMetadataResponseOutputWithContext(context.Background())
}

func (i MetadataResponseArgs) ToMetadataResponseOutputWithContext(ctx context.Context) MetadataResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataResponseOutput)
}

func (i MetadataResponseArgs) ToMetadataResponsePtrOutput() MetadataResponsePtrOutput {
	return i.ToMetadataResponsePtrOutputWithContext(context.Background())
}

func (i MetadataResponseArgs) ToMetadataResponsePtrOutputWithContext(ctx context.Context) MetadataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataResponseOutput).ToMetadataResponsePtrOutputWithContext(ctx)
}

// MetadataResponsePtrInput is an input type that accepts MetadataResponseArgs, MetadataResponsePtr and MetadataResponsePtrOutput values.
// You can construct a concrete instance of `MetadataResponsePtrInput` via:
//
//          MetadataResponseArgs{...}
//
//  or:
//
//          nil
type MetadataResponsePtrInput interface {
	pulumi.Input

	ToMetadataResponsePtrOutput() MetadataResponsePtrOutput
	ToMetadataResponsePtrOutputWithContext(context.Context) MetadataResponsePtrOutput
}

type metadataResponsePtrType MetadataResponseArgs

func MetadataResponsePtr(v *MetadataResponseArgs) MetadataResponsePtrInput {
	return (*metadataResponsePtrType)(v)
}

func (*metadataResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataResponse)(nil)).Elem()
}

func (i *metadataResponsePtrType) ToMetadataResponsePtrOutput() MetadataResponsePtrOutput {
	return i.ToMetadataResponsePtrOutputWithContext(context.Background())
}

func (i *metadataResponsePtrType) ToMetadataResponsePtrOutputWithContext(ctx context.Context) MetadataResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataResponsePtrOutput)
}

// A metadata key/value entry.
type MetadataResponseOutput struct{ *pulumi.OutputState }

func (MetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataResponse)(nil)).Elem()
}

func (o MetadataResponseOutput) ToMetadataResponseOutput() MetadataResponseOutput {
	return o
}

func (o MetadataResponseOutput) ToMetadataResponseOutputWithContext(ctx context.Context) MetadataResponseOutput {
	return o
}

func (o MetadataResponseOutput) ToMetadataResponsePtrOutput() MetadataResponsePtrOutput {
	return o.ToMetadataResponsePtrOutputWithContext(context.Background())
}

func (o MetadataResponseOutput) ToMetadataResponsePtrOutputWithContext(ctx context.Context) MetadataResponsePtrOutput {
	return o.ApplyT(func(v MetadataResponse) *MetadataResponse {
		return &v
	}).(MetadataResponsePtrOutput)
}

// Specifies a fingerprint for this request, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the resource.
func (o MetadataResponseOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataResponse) string { return v.Fingerprint }).(pulumi.StringOutput)
}

// Array of key/value pairs. The total size of all keys and values must be less than 512 KB.
func (o MetadataResponseOutput) Items() MetadataItemsItemResponseArrayOutput {
	return o.ApplyT(func(v MetadataResponse) []MetadataItemsItemResponse { return v.Items }).(MetadataItemsItemResponseArrayOutput)
}

// Type of the resource. Always compute#metadata for metadata.
func (o MetadataResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type MetadataResponsePtrOutput struct{ *pulumi.OutputState }

func (MetadataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataResponse)(nil)).Elem()
}

func (o MetadataResponsePtrOutput) ToMetadataResponsePtrOutput() MetadataResponsePtrOutput {
	return o
}

func (o MetadataResponsePtrOutput) ToMetadataResponsePtrOutputWithContext(ctx context.Context) MetadataResponsePtrOutput {
	return o
}

func (o MetadataResponsePtrOutput) Elem() MetadataResponseOutput {
	return o.ApplyT(func(v *MetadataResponse) MetadataResponse { return *v }).(MetadataResponseOutput)
}

// Specifies a fingerprint for this request, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the resource.
func (o MetadataResponsePtrOutput) Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Fingerprint
	}).(pulumi.StringPtrOutput)
}

// Array of key/value pairs. The total size of all keys and values must be less than 512 KB.
func (o MetadataResponsePtrOutput) Items() MetadataItemsItemResponseArrayOutput {
	return o.ApplyT(func(v *MetadataResponse) []MetadataItemsItemResponse {
		if v == nil {
			return nil
		}
		return v.Items
	}).(MetadataItemsItemResponseArrayOutput)
}

// Type of the resource. Always compute#metadata for metadata.
func (o MetadataResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// The named port. For example: <"http", 80>.
type NamedPort struct {
	// The name for this named port. The name must be 1-63 characters long, and comply with RFC1035.
	Name *string `pulumi:"name"`
	// The port number, which can be a value between 1 and 65535.
	Port *int `pulumi:"port"`
}

// NamedPortInput is an input type that accepts NamedPortArgs and NamedPortOutput values.
// You can construct a concrete instance of `NamedPortInput` via:
//
//          NamedPortArgs{...}
type NamedPortInput interface {
	pulumi.Input

	ToNamedPortOutput() NamedPortOutput
	ToNamedPortOutputWithContext(context.Context) NamedPortOutput
}

// The named port. For example: <"http", 80>.
type NamedPortArgs struct {
	// The name for this named port. The name must be 1-63 characters long, and comply with RFC1035.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port number, which can be a value between 1 and 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (NamedPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedPort)(nil)).Elem()
}

func (i NamedPortArgs) ToNamedPortOutput() NamedPortOutput {
	return i.ToNamedPortOutputWithContext(context.Background())
}

func (i NamedPortArgs) ToNamedPortOutputWithContext(ctx context.Context) NamedPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedPortOutput)
}

// NamedPortArrayInput is an input type that accepts NamedPortArray and NamedPortArrayOutput values.
// You can construct a concrete instance of `NamedPortArrayInput` via:
//
//          NamedPortArray{ NamedPortArgs{...} }
type NamedPortArrayInput interface {
	pulumi.Input

	ToNamedPortArrayOutput() NamedPortArrayOutput
	ToNamedPortArrayOutputWithContext(context.Context) NamedPortArrayOutput
}

type NamedPortArray []NamedPortInput

func (NamedPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedPort)(nil)).Elem()
}

func (i NamedPortArray) ToNamedPortArrayOutput() NamedPortArrayOutput {
	return i.ToNamedPortArrayOutputWithContext(context.Background())
}

func (i NamedPortArray) ToNamedPortArrayOutputWithContext(ctx context.Context) NamedPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedPortArrayOutput)
}

// The named port. For example: <"http", 80>.
type NamedPortOutput struct{ *pulumi.OutputState }

func (NamedPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedPort)(nil)).Elem()
}

func (o NamedPortOutput) ToNamedPortOutput() NamedPortOutput {
	return o
}

func (o NamedPortOutput) ToNamedPortOutputWithContext(ctx context.Context) NamedPortOutput {
	return o
}

// The name for this named port. The name must be 1-63 characters long, and comply with RFC1035.
func (o NamedPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NamedPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port number, which can be a value between 1 and 65535.
func (o NamedPortOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NamedPort) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type NamedPortArrayOutput struct{ *pulumi.OutputState }

func (NamedPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedPort)(nil)).Elem()
}

func (o NamedPortArrayOutput) ToNamedPortArrayOutput() NamedPortArrayOutput {
	return o
}

func (o NamedPortArrayOutput) ToNamedPortArrayOutputWithContext(ctx context.Context) NamedPortArrayOutput {
	return o
}

func (o NamedPortArrayOutput) Index(i pulumi.IntInput) NamedPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamedPort {
		return vs[0].([]NamedPort)[vs[1].(int)]
	}).(NamedPortOutput)
}

// The named port. For example: <"http", 80>.
type NamedPortResponse struct {
	// The name for this named port. The name must be 1-63 characters long, and comply with RFC1035.
	Name string `pulumi:"name"`
	// The port number, which can be a value between 1 and 65535.
	Port int `pulumi:"port"`
}

// NamedPortResponseInput is an input type that accepts NamedPortResponseArgs and NamedPortResponseOutput values.
// You can construct a concrete instance of `NamedPortResponseInput` via:
//
//          NamedPortResponseArgs{...}
type NamedPortResponseInput interface {
	pulumi.Input

	ToNamedPortResponseOutput() NamedPortResponseOutput
	ToNamedPortResponseOutputWithContext(context.Context) NamedPortResponseOutput
}

// The named port. For example: <"http", 80>.
type NamedPortResponseArgs struct {
	// The name for this named port. The name must be 1-63 characters long, and comply with RFC1035.
	Name pulumi.StringInput `pulumi:"name"`
	// The port number, which can be a value between 1 and 65535.
	Port pulumi.IntInput `pulumi:"port"`
}

func (NamedPortResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedPortResponse)(nil)).Elem()
}

func (i NamedPortResponseArgs) ToNamedPortResponseOutput() NamedPortResponseOutput {
	return i.ToNamedPortResponseOutputWithContext(context.Background())
}

func (i NamedPortResponseArgs) ToNamedPortResponseOutputWithContext(ctx context.Context) NamedPortResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedPortResponseOutput)
}

// NamedPortResponseArrayInput is an input type that accepts NamedPortResponseArray and NamedPortResponseArrayOutput values.
// You can construct a concrete instance of `NamedPortResponseArrayInput` via:
//
//          NamedPortResponseArray{ NamedPortResponseArgs{...} }
type NamedPortResponseArrayInput interface {
	pulumi.Input

	ToNamedPortResponseArrayOutput() NamedPortResponseArrayOutput
	ToNamedPortResponseArrayOutputWithContext(context.Context) NamedPortResponseArrayOutput
}

type NamedPortResponseArray []NamedPortResponseInput

func (NamedPortResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedPortResponse)(nil)).Elem()
}

func (i NamedPortResponseArray) ToNamedPortResponseArrayOutput() NamedPortResponseArrayOutput {
	return i.ToNamedPortResponseArrayOutputWithContext(context.Background())
}

func (i NamedPortResponseArray) ToNamedPortResponseArrayOutputWithContext(ctx context.Context) NamedPortResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamedPortResponseArrayOutput)
}

// The named port. For example: <"http", 80>.
type NamedPortResponseOutput struct{ *pulumi.OutputState }

func (NamedPortResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamedPortResponse)(nil)).Elem()
}

func (o NamedPortResponseOutput) ToNamedPortResponseOutput() NamedPortResponseOutput {
	return o
}

func (o NamedPortResponseOutput) ToNamedPortResponseOutputWithContext(ctx context.Context) NamedPortResponseOutput {
	return o
}

// The name for this named port. The name must be 1-63 characters long, and comply with RFC1035.
func (o NamedPortResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamedPortResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The port number, which can be a value between 1 and 65535.
func (o NamedPortResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v NamedPortResponse) int { return v.Port }).(pulumi.IntOutput)
}

type NamedPortResponseArrayOutput struct{ *pulumi.OutputState }

func (NamedPortResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamedPortResponse)(nil)).Elem()
}

func (o NamedPortResponseArrayOutput) ToNamedPortResponseArrayOutput() NamedPortResponseArrayOutput {
	return o
}

func (o NamedPortResponseArrayOutput) ToNamedPortResponseArrayOutputWithContext(ctx context.Context) NamedPortResponseArrayOutput {
	return o
}

func (o NamedPortResponseArrayOutput) Index(i pulumi.IntInput) NamedPortResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamedPortResponse {
		return vs[0].([]NamedPortResponse)[vs[1].(int)]
	}).(NamedPortResponseOutput)
}

// Configuration for an App Engine network endpoint group (NEG). The service is optional, may be provided explicitly or in the URL mask. The version is optional and can only be provided explicitly or in the URL mask when service is present. Note: App Engine service must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupAppEngine struct {
	// Optional serving service. The service name is case-sensitive and must be 1-63 characters long. Example value: "default", "my-service".
	Service *string `pulumi:"service"`
	// A template to parse service and version fields from a request URL. URL mask allows for routing to multiple App Engine services without having to create multiple Network Endpoint Groups and backend services. For example, the request URLs "foo1-dot-appname.appspot.com/v1" and "foo1-dot-appname.appspot.com/v2" can be backed by the same Serverless NEG with URL mask "-dot-appname.appspot.com/". The URL mask will parse them to { service = "foo1", version = "v1" } and { service = "foo1", version = "v2" } respectively.
	UrlMask *string `pulumi:"urlMask"`
	// Optional serving version. The version name is case-sensitive and must be 1-100 characters long. Example value: "v1", "v2".
	Version *string `pulumi:"version"`
}

// NetworkEndpointGroupAppEngineInput is an input type that accepts NetworkEndpointGroupAppEngineArgs and NetworkEndpointGroupAppEngineOutput values.
// You can construct a concrete instance of `NetworkEndpointGroupAppEngineInput` via:
//
//          NetworkEndpointGroupAppEngineArgs{...}
type NetworkEndpointGroupAppEngineInput interface {
	pulumi.Input

	ToNetworkEndpointGroupAppEngineOutput() NetworkEndpointGroupAppEngineOutput
	ToNetworkEndpointGroupAppEngineOutputWithContext(context.Context) NetworkEndpointGroupAppEngineOutput
}

// Configuration for an App Engine network endpoint group (NEG). The service is optional, may be provided explicitly or in the URL mask. The version is optional and can only be provided explicitly or in the URL mask when service is present. Note: App Engine service must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupAppEngineArgs struct {
	// Optional serving service. The service name is case-sensitive and must be 1-63 characters long. Example value: "default", "my-service".
	Service pulumi.StringPtrInput `pulumi:"service"`
	// A template to parse service and version fields from a request URL. URL mask allows for routing to multiple App Engine services without having to create multiple Network Endpoint Groups and backend services. For example, the request URLs "foo1-dot-appname.appspot.com/v1" and "foo1-dot-appname.appspot.com/v2" can be backed by the same Serverless NEG with URL mask "-dot-appname.appspot.com/". The URL mask will parse them to { service = "foo1", version = "v1" } and { service = "foo1", version = "v2" } respectively.
	UrlMask pulumi.StringPtrInput `pulumi:"urlMask"`
	// Optional serving version. The version name is case-sensitive and must be 1-100 characters long. Example value: "v1", "v2".
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (NetworkEndpointGroupAppEngineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpointGroupAppEngine)(nil)).Elem()
}

func (i NetworkEndpointGroupAppEngineArgs) ToNetworkEndpointGroupAppEngineOutput() NetworkEndpointGroupAppEngineOutput {
	return i.ToNetworkEndpointGroupAppEngineOutputWithContext(context.Background())
}

func (i NetworkEndpointGroupAppEngineArgs) ToNetworkEndpointGroupAppEngineOutputWithContext(ctx context.Context) NetworkEndpointGroupAppEngineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupAppEngineOutput)
}

func (i NetworkEndpointGroupAppEngineArgs) ToNetworkEndpointGroupAppEnginePtrOutput() NetworkEndpointGroupAppEnginePtrOutput {
	return i.ToNetworkEndpointGroupAppEnginePtrOutputWithContext(context.Background())
}

func (i NetworkEndpointGroupAppEngineArgs) ToNetworkEndpointGroupAppEnginePtrOutputWithContext(ctx context.Context) NetworkEndpointGroupAppEnginePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupAppEngineOutput).ToNetworkEndpointGroupAppEnginePtrOutputWithContext(ctx)
}

// NetworkEndpointGroupAppEnginePtrInput is an input type that accepts NetworkEndpointGroupAppEngineArgs, NetworkEndpointGroupAppEnginePtr and NetworkEndpointGroupAppEnginePtrOutput values.
// You can construct a concrete instance of `NetworkEndpointGroupAppEnginePtrInput` via:
//
//          NetworkEndpointGroupAppEngineArgs{...}
//
//  or:
//
//          nil
type NetworkEndpointGroupAppEnginePtrInput interface {
	pulumi.Input

	ToNetworkEndpointGroupAppEnginePtrOutput() NetworkEndpointGroupAppEnginePtrOutput
	ToNetworkEndpointGroupAppEnginePtrOutputWithContext(context.Context) NetworkEndpointGroupAppEnginePtrOutput
}

type networkEndpointGroupAppEnginePtrType NetworkEndpointGroupAppEngineArgs

func NetworkEndpointGroupAppEnginePtr(v *NetworkEndpointGroupAppEngineArgs) NetworkEndpointGroupAppEnginePtrInput {
	return (*networkEndpointGroupAppEnginePtrType)(v)
}

func (*networkEndpointGroupAppEnginePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkEndpointGroupAppEngine)(nil)).Elem()
}

func (i *networkEndpointGroupAppEnginePtrType) ToNetworkEndpointGroupAppEnginePtrOutput() NetworkEndpointGroupAppEnginePtrOutput {
	return i.ToNetworkEndpointGroupAppEnginePtrOutputWithContext(context.Background())
}

func (i *networkEndpointGroupAppEnginePtrType) ToNetworkEndpointGroupAppEnginePtrOutputWithContext(ctx context.Context) NetworkEndpointGroupAppEnginePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupAppEnginePtrOutput)
}

// Configuration for an App Engine network endpoint group (NEG). The service is optional, may be provided explicitly or in the URL mask. The version is optional and can only be provided explicitly or in the URL mask when service is present. Note: App Engine service must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupAppEngineOutput struct{ *pulumi.OutputState }

func (NetworkEndpointGroupAppEngineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpointGroupAppEngine)(nil)).Elem()
}

func (o NetworkEndpointGroupAppEngineOutput) ToNetworkEndpointGroupAppEngineOutput() NetworkEndpointGroupAppEngineOutput {
	return o
}

func (o NetworkEndpointGroupAppEngineOutput) ToNetworkEndpointGroupAppEngineOutputWithContext(ctx context.Context) NetworkEndpointGroupAppEngineOutput {
	return o
}

func (o NetworkEndpointGroupAppEngineOutput) ToNetworkEndpointGroupAppEnginePtrOutput() NetworkEndpointGroupAppEnginePtrOutput {
	return o.ToNetworkEndpointGroupAppEnginePtrOutputWithContext(context.Background())
}

func (o NetworkEndpointGroupAppEngineOutput) ToNetworkEndpointGroupAppEnginePtrOutputWithContext(ctx context.Context) NetworkEndpointGroupAppEnginePtrOutput {
	return o.ApplyT(func(v NetworkEndpointGroupAppEngine) *NetworkEndpointGroupAppEngine {
		return &v
	}).(NetworkEndpointGroupAppEnginePtrOutput)
}

// Optional serving service. The service name is case-sensitive and must be 1-63 characters long. Example value: "default", "my-service".
func (o NetworkEndpointGroupAppEngineOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkEndpointGroupAppEngine) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// A template to parse service and version fields from a request URL. URL mask allows for routing to multiple App Engine services without having to create multiple Network Endpoint Groups and backend services. For example, the request URLs "foo1-dot-appname.appspot.com/v1" and "foo1-dot-appname.appspot.com/v2" can be backed by the same Serverless NEG with URL mask "-dot-appname.appspot.com/". The URL mask will parse them to { service = "foo1", version = "v1" } and { service = "foo1", version = "v2" } respectively.
func (o NetworkEndpointGroupAppEngineOutput) UrlMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkEndpointGroupAppEngine) *string { return v.UrlMask }).(pulumi.StringPtrOutput)
}

// Optional serving version. The version name is case-sensitive and must be 1-100 characters long. Example value: "v1", "v2".
func (o NetworkEndpointGroupAppEngineOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkEndpointGroupAppEngine) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type NetworkEndpointGroupAppEnginePtrOutput struct{ *pulumi.OutputState }

func (NetworkEndpointGroupAppEnginePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkEndpointGroupAppEngine)(nil)).Elem()
}

func (o NetworkEndpointGroupAppEnginePtrOutput) ToNetworkEndpointGroupAppEnginePtrOutput() NetworkEndpointGroupAppEnginePtrOutput {
	return o
}

func (o NetworkEndpointGroupAppEnginePtrOutput) ToNetworkEndpointGroupAppEnginePtrOutputWithContext(ctx context.Context) NetworkEndpointGroupAppEnginePtrOutput {
	return o
}

func (o NetworkEndpointGroupAppEnginePtrOutput) Elem() NetworkEndpointGroupAppEngineOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupAppEngine) NetworkEndpointGroupAppEngine { return *v }).(NetworkEndpointGroupAppEngineOutput)
}

// Optional serving service. The service name is case-sensitive and must be 1-63 characters long. Example value: "default", "my-service".
func (o NetworkEndpointGroupAppEnginePtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupAppEngine) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// A template to parse service and version fields from a request URL. URL mask allows for routing to multiple App Engine services without having to create multiple Network Endpoint Groups and backend services. For example, the request URLs "foo1-dot-appname.appspot.com/v1" and "foo1-dot-appname.appspot.com/v2" can be backed by the same Serverless NEG with URL mask "-dot-appname.appspot.com/". The URL mask will parse them to { service = "foo1", version = "v1" } and { service = "foo1", version = "v2" } respectively.
func (o NetworkEndpointGroupAppEnginePtrOutput) UrlMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupAppEngine) *string {
		if v == nil {
			return nil
		}
		return v.UrlMask
	}).(pulumi.StringPtrOutput)
}

// Optional serving version. The version name is case-sensitive and must be 1-100 characters long. Example value: "v1", "v2".
func (o NetworkEndpointGroupAppEnginePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupAppEngine) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Configuration for an App Engine network endpoint group (NEG). The service is optional, may be provided explicitly or in the URL mask. The version is optional and can only be provided explicitly or in the URL mask when service is present. Note: App Engine service must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupAppEngineResponse struct {
	// Optional serving service. The service name is case-sensitive and must be 1-63 characters long. Example value: "default", "my-service".
	Service string `pulumi:"service"`
	// A template to parse service and version fields from a request URL. URL mask allows for routing to multiple App Engine services without having to create multiple Network Endpoint Groups and backend services. For example, the request URLs "foo1-dot-appname.appspot.com/v1" and "foo1-dot-appname.appspot.com/v2" can be backed by the same Serverless NEG with URL mask "-dot-appname.appspot.com/". The URL mask will parse them to { service = "foo1", version = "v1" } and { service = "foo1", version = "v2" } respectively.
	UrlMask string `pulumi:"urlMask"`
	// Optional serving version. The version name is case-sensitive and must be 1-100 characters long. Example value: "v1", "v2".
	Version string `pulumi:"version"`
}

// NetworkEndpointGroupAppEngineResponseInput is an input type that accepts NetworkEndpointGroupAppEngineResponseArgs and NetworkEndpointGroupAppEngineResponseOutput values.
// You can construct a concrete instance of `NetworkEndpointGroupAppEngineResponseInput` via:
//
//          NetworkEndpointGroupAppEngineResponseArgs{...}
type NetworkEndpointGroupAppEngineResponseInput interface {
	pulumi.Input

	ToNetworkEndpointGroupAppEngineResponseOutput() NetworkEndpointGroupAppEngineResponseOutput
	ToNetworkEndpointGroupAppEngineResponseOutputWithContext(context.Context) NetworkEndpointGroupAppEngineResponseOutput
}

// Configuration for an App Engine network endpoint group (NEG). The service is optional, may be provided explicitly or in the URL mask. The version is optional and can only be provided explicitly or in the URL mask when service is present. Note: App Engine service must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupAppEngineResponseArgs struct {
	// Optional serving service. The service name is case-sensitive and must be 1-63 characters long. Example value: "default", "my-service".
	Service pulumi.StringInput `pulumi:"service"`
	// A template to parse service and version fields from a request URL. URL mask allows for routing to multiple App Engine services without having to create multiple Network Endpoint Groups and backend services. For example, the request URLs "foo1-dot-appname.appspot.com/v1" and "foo1-dot-appname.appspot.com/v2" can be backed by the same Serverless NEG with URL mask "-dot-appname.appspot.com/". The URL mask will parse them to { service = "foo1", version = "v1" } and { service = "foo1", version = "v2" } respectively.
	UrlMask pulumi.StringInput `pulumi:"urlMask"`
	// Optional serving version. The version name is case-sensitive and must be 1-100 characters long. Example value: "v1", "v2".
	Version pulumi.StringInput `pulumi:"version"`
}

func (NetworkEndpointGroupAppEngineResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpointGroupAppEngineResponse)(nil)).Elem()
}

func (i NetworkEndpointGroupAppEngineResponseArgs) ToNetworkEndpointGroupAppEngineResponseOutput() NetworkEndpointGroupAppEngineResponseOutput {
	return i.ToNetworkEndpointGroupAppEngineResponseOutputWithContext(context.Background())
}

func (i NetworkEndpointGroupAppEngineResponseArgs) ToNetworkEndpointGroupAppEngineResponseOutputWithContext(ctx context.Context) NetworkEndpointGroupAppEngineResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupAppEngineResponseOutput)
}

func (i NetworkEndpointGroupAppEngineResponseArgs) ToNetworkEndpointGroupAppEngineResponsePtrOutput() NetworkEndpointGroupAppEngineResponsePtrOutput {
	return i.ToNetworkEndpointGroupAppEngineResponsePtrOutputWithContext(context.Background())
}

func (i NetworkEndpointGroupAppEngineResponseArgs) ToNetworkEndpointGroupAppEngineResponsePtrOutputWithContext(ctx context.Context) NetworkEndpointGroupAppEngineResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupAppEngineResponseOutput).ToNetworkEndpointGroupAppEngineResponsePtrOutputWithContext(ctx)
}

// NetworkEndpointGroupAppEngineResponsePtrInput is an input type that accepts NetworkEndpointGroupAppEngineResponseArgs, NetworkEndpointGroupAppEngineResponsePtr and NetworkEndpointGroupAppEngineResponsePtrOutput values.
// You can construct a concrete instance of `NetworkEndpointGroupAppEngineResponsePtrInput` via:
//
//          NetworkEndpointGroupAppEngineResponseArgs{...}
//
//  or:
//
//          nil
type NetworkEndpointGroupAppEngineResponsePtrInput interface {
	pulumi.Input

	ToNetworkEndpointGroupAppEngineResponsePtrOutput() NetworkEndpointGroupAppEngineResponsePtrOutput
	ToNetworkEndpointGroupAppEngineResponsePtrOutputWithContext(context.Context) NetworkEndpointGroupAppEngineResponsePtrOutput
}

type networkEndpointGroupAppEngineResponsePtrType NetworkEndpointGroupAppEngineResponseArgs

func NetworkEndpointGroupAppEngineResponsePtr(v *NetworkEndpointGroupAppEngineResponseArgs) NetworkEndpointGroupAppEngineResponsePtrInput {
	return (*networkEndpointGroupAppEngineResponsePtrType)(v)
}

func (*networkEndpointGroupAppEngineResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkEndpointGroupAppEngineResponse)(nil)).Elem()
}

func (i *networkEndpointGroupAppEngineResponsePtrType) ToNetworkEndpointGroupAppEngineResponsePtrOutput() NetworkEndpointGroupAppEngineResponsePtrOutput {
	return i.ToNetworkEndpointGroupAppEngineResponsePtrOutputWithContext(context.Background())
}

func (i *networkEndpointGroupAppEngineResponsePtrType) ToNetworkEndpointGroupAppEngineResponsePtrOutputWithContext(ctx context.Context) NetworkEndpointGroupAppEngineResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupAppEngineResponsePtrOutput)
}

// Configuration for an App Engine network endpoint group (NEG). The service is optional, may be provided explicitly or in the URL mask. The version is optional and can only be provided explicitly or in the URL mask when service is present. Note: App Engine service must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupAppEngineResponseOutput struct{ *pulumi.OutputState }

func (NetworkEndpointGroupAppEngineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpointGroupAppEngineResponse)(nil)).Elem()
}

func (o NetworkEndpointGroupAppEngineResponseOutput) ToNetworkEndpointGroupAppEngineResponseOutput() NetworkEndpointGroupAppEngineResponseOutput {
	return o
}

func (o NetworkEndpointGroupAppEngineResponseOutput) ToNetworkEndpointGroupAppEngineResponseOutputWithContext(ctx context.Context) NetworkEndpointGroupAppEngineResponseOutput {
	return o
}

func (o NetworkEndpointGroupAppEngineResponseOutput) ToNetworkEndpointGroupAppEngineResponsePtrOutput() NetworkEndpointGroupAppEngineResponsePtrOutput {
	return o.ToNetworkEndpointGroupAppEngineResponsePtrOutputWithContext(context.Background())
}

func (o NetworkEndpointGroupAppEngineResponseOutput) ToNetworkEndpointGroupAppEngineResponsePtrOutputWithContext(ctx context.Context) NetworkEndpointGroupAppEngineResponsePtrOutput {
	return o.ApplyT(func(v NetworkEndpointGroupAppEngineResponse) *NetworkEndpointGroupAppEngineResponse {
		return &v
	}).(NetworkEndpointGroupAppEngineResponsePtrOutput)
}

// Optional serving service. The service name is case-sensitive and must be 1-63 characters long. Example value: "default", "my-service".
func (o NetworkEndpointGroupAppEngineResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkEndpointGroupAppEngineResponse) string { return v.Service }).(pulumi.StringOutput)
}

// A template to parse service and version fields from a request URL. URL mask allows for routing to multiple App Engine services without having to create multiple Network Endpoint Groups and backend services. For example, the request URLs "foo1-dot-appname.appspot.com/v1" and "foo1-dot-appname.appspot.com/v2" can be backed by the same Serverless NEG with URL mask "-dot-appname.appspot.com/". The URL mask will parse them to { service = "foo1", version = "v1" } and { service = "foo1", version = "v2" } respectively.
func (o NetworkEndpointGroupAppEngineResponseOutput) UrlMask() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkEndpointGroupAppEngineResponse) string { return v.UrlMask }).(pulumi.StringOutput)
}

// Optional serving version. The version name is case-sensitive and must be 1-100 characters long. Example value: "v1", "v2".
func (o NetworkEndpointGroupAppEngineResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkEndpointGroupAppEngineResponse) string { return v.Version }).(pulumi.StringOutput)
}

type NetworkEndpointGroupAppEngineResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkEndpointGroupAppEngineResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkEndpointGroupAppEngineResponse)(nil)).Elem()
}

func (o NetworkEndpointGroupAppEngineResponsePtrOutput) ToNetworkEndpointGroupAppEngineResponsePtrOutput() NetworkEndpointGroupAppEngineResponsePtrOutput {
	return o
}

func (o NetworkEndpointGroupAppEngineResponsePtrOutput) ToNetworkEndpointGroupAppEngineResponsePtrOutputWithContext(ctx context.Context) NetworkEndpointGroupAppEngineResponsePtrOutput {
	return o
}

func (o NetworkEndpointGroupAppEngineResponsePtrOutput) Elem() NetworkEndpointGroupAppEngineResponseOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupAppEngineResponse) NetworkEndpointGroupAppEngineResponse { return *v }).(NetworkEndpointGroupAppEngineResponseOutput)
}

// Optional serving service. The service name is case-sensitive and must be 1-63 characters long. Example value: "default", "my-service".
func (o NetworkEndpointGroupAppEngineResponsePtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupAppEngineResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

// A template to parse service and version fields from a request URL. URL mask allows for routing to multiple App Engine services without having to create multiple Network Endpoint Groups and backend services. For example, the request URLs "foo1-dot-appname.appspot.com/v1" and "foo1-dot-appname.appspot.com/v2" can be backed by the same Serverless NEG with URL mask "-dot-appname.appspot.com/". The URL mask will parse them to { service = "foo1", version = "v1" } and { service = "foo1", version = "v2" } respectively.
func (o NetworkEndpointGroupAppEngineResponsePtrOutput) UrlMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupAppEngineResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UrlMask
	}).(pulumi.StringPtrOutput)
}

// Optional serving version. The version name is case-sensitive and must be 1-100 characters long. Example value: "v1", "v2".
func (o NetworkEndpointGroupAppEngineResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupAppEngineResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Configuration for a Cloud Function network endpoint group (NEG). The function must be provided explicitly or in the URL mask. Note: Cloud Function must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupCloudFunction struct {
	// A user-defined name of the Cloud Function. The function name is case-sensitive and must be 1-63 characters long. Example value: "func1".
	Function *string `pulumi:"function"`
	// A template to parse function field from a request URL. URL mask allows for routing to multiple Cloud Functions without having to create multiple Network Endpoint Groups and backend services. For example, request URLs " mydomain.com/function1" and "mydomain.com/function2" can be backed by the same Serverless NEG with URL mask "/". The URL mask will parse them to { function = "function1" } and { function = "function2" } respectively.
	UrlMask *string `pulumi:"urlMask"`
}

// NetworkEndpointGroupCloudFunctionInput is an input type that accepts NetworkEndpointGroupCloudFunctionArgs and NetworkEndpointGroupCloudFunctionOutput values.
// You can construct a concrete instance of `NetworkEndpointGroupCloudFunctionInput` via:
//
//          NetworkEndpointGroupCloudFunctionArgs{...}
type NetworkEndpointGroupCloudFunctionInput interface {
	pulumi.Input

	ToNetworkEndpointGroupCloudFunctionOutput() NetworkEndpointGroupCloudFunctionOutput
	ToNetworkEndpointGroupCloudFunctionOutputWithContext(context.Context) NetworkEndpointGroupCloudFunctionOutput
}

// Configuration for a Cloud Function network endpoint group (NEG). The function must be provided explicitly or in the URL mask. Note: Cloud Function must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupCloudFunctionArgs struct {
	// A user-defined name of the Cloud Function. The function name is case-sensitive and must be 1-63 characters long. Example value: "func1".
	Function pulumi.StringPtrInput `pulumi:"function"`
	// A template to parse function field from a request URL. URL mask allows for routing to multiple Cloud Functions without having to create multiple Network Endpoint Groups and backend services. For example, request URLs " mydomain.com/function1" and "mydomain.com/function2" can be backed by the same Serverless NEG with URL mask "/". The URL mask will parse them to { function = "function1" } and { function = "function2" } respectively.
	UrlMask pulumi.StringPtrInput `pulumi:"urlMask"`
}

func (NetworkEndpointGroupCloudFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpointGroupCloudFunction)(nil)).Elem()
}

func (i NetworkEndpointGroupCloudFunctionArgs) ToNetworkEndpointGroupCloudFunctionOutput() NetworkEndpointGroupCloudFunctionOutput {
	return i.ToNetworkEndpointGroupCloudFunctionOutputWithContext(context.Background())
}

func (i NetworkEndpointGroupCloudFunctionArgs) ToNetworkEndpointGroupCloudFunctionOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupCloudFunctionOutput)
}

func (i NetworkEndpointGroupCloudFunctionArgs) ToNetworkEndpointGroupCloudFunctionPtrOutput() NetworkEndpointGroupCloudFunctionPtrOutput {
	return i.ToNetworkEndpointGroupCloudFunctionPtrOutputWithContext(context.Background())
}

func (i NetworkEndpointGroupCloudFunctionArgs) ToNetworkEndpointGroupCloudFunctionPtrOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudFunctionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupCloudFunctionOutput).ToNetworkEndpointGroupCloudFunctionPtrOutputWithContext(ctx)
}

// NetworkEndpointGroupCloudFunctionPtrInput is an input type that accepts NetworkEndpointGroupCloudFunctionArgs, NetworkEndpointGroupCloudFunctionPtr and NetworkEndpointGroupCloudFunctionPtrOutput values.
// You can construct a concrete instance of `NetworkEndpointGroupCloudFunctionPtrInput` via:
//
//          NetworkEndpointGroupCloudFunctionArgs{...}
//
//  or:
//
//          nil
type NetworkEndpointGroupCloudFunctionPtrInput interface {
	pulumi.Input

	ToNetworkEndpointGroupCloudFunctionPtrOutput() NetworkEndpointGroupCloudFunctionPtrOutput
	ToNetworkEndpointGroupCloudFunctionPtrOutputWithContext(context.Context) NetworkEndpointGroupCloudFunctionPtrOutput
}

type networkEndpointGroupCloudFunctionPtrType NetworkEndpointGroupCloudFunctionArgs

func NetworkEndpointGroupCloudFunctionPtr(v *NetworkEndpointGroupCloudFunctionArgs) NetworkEndpointGroupCloudFunctionPtrInput {
	return (*networkEndpointGroupCloudFunctionPtrType)(v)
}

func (*networkEndpointGroupCloudFunctionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkEndpointGroupCloudFunction)(nil)).Elem()
}

func (i *networkEndpointGroupCloudFunctionPtrType) ToNetworkEndpointGroupCloudFunctionPtrOutput() NetworkEndpointGroupCloudFunctionPtrOutput {
	return i.ToNetworkEndpointGroupCloudFunctionPtrOutputWithContext(context.Background())
}

func (i *networkEndpointGroupCloudFunctionPtrType) ToNetworkEndpointGroupCloudFunctionPtrOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudFunctionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupCloudFunctionPtrOutput)
}

// Configuration for a Cloud Function network endpoint group (NEG). The function must be provided explicitly or in the URL mask. Note: Cloud Function must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupCloudFunctionOutput struct{ *pulumi.OutputState }

func (NetworkEndpointGroupCloudFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpointGroupCloudFunction)(nil)).Elem()
}

func (o NetworkEndpointGroupCloudFunctionOutput) ToNetworkEndpointGroupCloudFunctionOutput() NetworkEndpointGroupCloudFunctionOutput {
	return o
}

func (o NetworkEndpointGroupCloudFunctionOutput) ToNetworkEndpointGroupCloudFunctionOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudFunctionOutput {
	return o
}

func (o NetworkEndpointGroupCloudFunctionOutput) ToNetworkEndpointGroupCloudFunctionPtrOutput() NetworkEndpointGroupCloudFunctionPtrOutput {
	return o.ToNetworkEndpointGroupCloudFunctionPtrOutputWithContext(context.Background())
}

func (o NetworkEndpointGroupCloudFunctionOutput) ToNetworkEndpointGroupCloudFunctionPtrOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudFunctionPtrOutput {
	return o.ApplyT(func(v NetworkEndpointGroupCloudFunction) *NetworkEndpointGroupCloudFunction {
		return &v
	}).(NetworkEndpointGroupCloudFunctionPtrOutput)
}

// A user-defined name of the Cloud Function. The function name is case-sensitive and must be 1-63 characters long. Example value: "func1".
func (o NetworkEndpointGroupCloudFunctionOutput) Function() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkEndpointGroupCloudFunction) *string { return v.Function }).(pulumi.StringPtrOutput)
}

// A template to parse function field from a request URL. URL mask allows for routing to multiple Cloud Functions without having to create multiple Network Endpoint Groups and backend services. For example, request URLs " mydomain.com/function1" and "mydomain.com/function2" can be backed by the same Serverless NEG with URL mask "/". The URL mask will parse them to { function = "function1" } and { function = "function2" } respectively.
func (o NetworkEndpointGroupCloudFunctionOutput) UrlMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkEndpointGroupCloudFunction) *string { return v.UrlMask }).(pulumi.StringPtrOutput)
}

type NetworkEndpointGroupCloudFunctionPtrOutput struct{ *pulumi.OutputState }

func (NetworkEndpointGroupCloudFunctionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkEndpointGroupCloudFunction)(nil)).Elem()
}

func (o NetworkEndpointGroupCloudFunctionPtrOutput) ToNetworkEndpointGroupCloudFunctionPtrOutput() NetworkEndpointGroupCloudFunctionPtrOutput {
	return o
}

func (o NetworkEndpointGroupCloudFunctionPtrOutput) ToNetworkEndpointGroupCloudFunctionPtrOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudFunctionPtrOutput {
	return o
}

func (o NetworkEndpointGroupCloudFunctionPtrOutput) Elem() NetworkEndpointGroupCloudFunctionOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupCloudFunction) NetworkEndpointGroupCloudFunction { return *v }).(NetworkEndpointGroupCloudFunctionOutput)
}

// A user-defined name of the Cloud Function. The function name is case-sensitive and must be 1-63 characters long. Example value: "func1".
func (o NetworkEndpointGroupCloudFunctionPtrOutput) Function() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupCloudFunction) *string {
		if v == nil {
			return nil
		}
		return v.Function
	}).(pulumi.StringPtrOutput)
}

// A template to parse function field from a request URL. URL mask allows for routing to multiple Cloud Functions without having to create multiple Network Endpoint Groups and backend services. For example, request URLs " mydomain.com/function1" and "mydomain.com/function2" can be backed by the same Serverless NEG with URL mask "/". The URL mask will parse them to { function = "function1" } and { function = "function2" } respectively.
func (o NetworkEndpointGroupCloudFunctionPtrOutput) UrlMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupCloudFunction) *string {
		if v == nil {
			return nil
		}
		return v.UrlMask
	}).(pulumi.StringPtrOutput)
}

// Configuration for a Cloud Function network endpoint group (NEG). The function must be provided explicitly or in the URL mask. Note: Cloud Function must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupCloudFunctionResponse struct {
	// A user-defined name of the Cloud Function. The function name is case-sensitive and must be 1-63 characters long. Example value: "func1".
	Function string `pulumi:"function"`
	// A template to parse function field from a request URL. URL mask allows for routing to multiple Cloud Functions without having to create multiple Network Endpoint Groups and backend services. For example, request URLs " mydomain.com/function1" and "mydomain.com/function2" can be backed by the same Serverless NEG with URL mask "/". The URL mask will parse them to { function = "function1" } and { function = "function2" } respectively.
	UrlMask string `pulumi:"urlMask"`
}

// NetworkEndpointGroupCloudFunctionResponseInput is an input type that accepts NetworkEndpointGroupCloudFunctionResponseArgs and NetworkEndpointGroupCloudFunctionResponseOutput values.
// You can construct a concrete instance of `NetworkEndpointGroupCloudFunctionResponseInput` via:
//
//          NetworkEndpointGroupCloudFunctionResponseArgs{...}
type NetworkEndpointGroupCloudFunctionResponseInput interface {
	pulumi.Input

	ToNetworkEndpointGroupCloudFunctionResponseOutput() NetworkEndpointGroupCloudFunctionResponseOutput
	ToNetworkEndpointGroupCloudFunctionResponseOutputWithContext(context.Context) NetworkEndpointGroupCloudFunctionResponseOutput
}

// Configuration for a Cloud Function network endpoint group (NEG). The function must be provided explicitly or in the URL mask. Note: Cloud Function must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupCloudFunctionResponseArgs struct {
	// A user-defined name of the Cloud Function. The function name is case-sensitive and must be 1-63 characters long. Example value: "func1".
	Function pulumi.StringInput `pulumi:"function"`
	// A template to parse function field from a request URL. URL mask allows for routing to multiple Cloud Functions without having to create multiple Network Endpoint Groups and backend services. For example, request URLs " mydomain.com/function1" and "mydomain.com/function2" can be backed by the same Serverless NEG with URL mask "/". The URL mask will parse them to { function = "function1" } and { function = "function2" } respectively.
	UrlMask pulumi.StringInput `pulumi:"urlMask"`
}

func (NetworkEndpointGroupCloudFunctionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpointGroupCloudFunctionResponse)(nil)).Elem()
}

func (i NetworkEndpointGroupCloudFunctionResponseArgs) ToNetworkEndpointGroupCloudFunctionResponseOutput() NetworkEndpointGroupCloudFunctionResponseOutput {
	return i.ToNetworkEndpointGroupCloudFunctionResponseOutputWithContext(context.Background())
}

func (i NetworkEndpointGroupCloudFunctionResponseArgs) ToNetworkEndpointGroupCloudFunctionResponseOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudFunctionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupCloudFunctionResponseOutput)
}

func (i NetworkEndpointGroupCloudFunctionResponseArgs) ToNetworkEndpointGroupCloudFunctionResponsePtrOutput() NetworkEndpointGroupCloudFunctionResponsePtrOutput {
	return i.ToNetworkEndpointGroupCloudFunctionResponsePtrOutputWithContext(context.Background())
}

func (i NetworkEndpointGroupCloudFunctionResponseArgs) ToNetworkEndpointGroupCloudFunctionResponsePtrOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudFunctionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupCloudFunctionResponseOutput).ToNetworkEndpointGroupCloudFunctionResponsePtrOutputWithContext(ctx)
}

// NetworkEndpointGroupCloudFunctionResponsePtrInput is an input type that accepts NetworkEndpointGroupCloudFunctionResponseArgs, NetworkEndpointGroupCloudFunctionResponsePtr and NetworkEndpointGroupCloudFunctionResponsePtrOutput values.
// You can construct a concrete instance of `NetworkEndpointGroupCloudFunctionResponsePtrInput` via:
//
//          NetworkEndpointGroupCloudFunctionResponseArgs{...}
//
//  or:
//
//          nil
type NetworkEndpointGroupCloudFunctionResponsePtrInput interface {
	pulumi.Input

	ToNetworkEndpointGroupCloudFunctionResponsePtrOutput() NetworkEndpointGroupCloudFunctionResponsePtrOutput
	ToNetworkEndpointGroupCloudFunctionResponsePtrOutputWithContext(context.Context) NetworkEndpointGroupCloudFunctionResponsePtrOutput
}

type networkEndpointGroupCloudFunctionResponsePtrType NetworkEndpointGroupCloudFunctionResponseArgs

func NetworkEndpointGroupCloudFunctionResponsePtr(v *NetworkEndpointGroupCloudFunctionResponseArgs) NetworkEndpointGroupCloudFunctionResponsePtrInput {
	return (*networkEndpointGroupCloudFunctionResponsePtrType)(v)
}

func (*networkEndpointGroupCloudFunctionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkEndpointGroupCloudFunctionResponse)(nil)).Elem()
}

func (i *networkEndpointGroupCloudFunctionResponsePtrType) ToNetworkEndpointGroupCloudFunctionResponsePtrOutput() NetworkEndpointGroupCloudFunctionResponsePtrOutput {
	return i.ToNetworkEndpointGroupCloudFunctionResponsePtrOutputWithContext(context.Background())
}

func (i *networkEndpointGroupCloudFunctionResponsePtrType) ToNetworkEndpointGroupCloudFunctionResponsePtrOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudFunctionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupCloudFunctionResponsePtrOutput)
}

// Configuration for a Cloud Function network endpoint group (NEG). The function must be provided explicitly or in the URL mask. Note: Cloud Function must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupCloudFunctionResponseOutput struct{ *pulumi.OutputState }

func (NetworkEndpointGroupCloudFunctionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpointGroupCloudFunctionResponse)(nil)).Elem()
}

func (o NetworkEndpointGroupCloudFunctionResponseOutput) ToNetworkEndpointGroupCloudFunctionResponseOutput() NetworkEndpointGroupCloudFunctionResponseOutput {
	return o
}

func (o NetworkEndpointGroupCloudFunctionResponseOutput) ToNetworkEndpointGroupCloudFunctionResponseOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudFunctionResponseOutput {
	return o
}

func (o NetworkEndpointGroupCloudFunctionResponseOutput) ToNetworkEndpointGroupCloudFunctionResponsePtrOutput() NetworkEndpointGroupCloudFunctionResponsePtrOutput {
	return o.ToNetworkEndpointGroupCloudFunctionResponsePtrOutputWithContext(context.Background())
}

func (o NetworkEndpointGroupCloudFunctionResponseOutput) ToNetworkEndpointGroupCloudFunctionResponsePtrOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudFunctionResponsePtrOutput {
	return o.ApplyT(func(v NetworkEndpointGroupCloudFunctionResponse) *NetworkEndpointGroupCloudFunctionResponse {
		return &v
	}).(NetworkEndpointGroupCloudFunctionResponsePtrOutput)
}

// A user-defined name of the Cloud Function. The function name is case-sensitive and must be 1-63 characters long. Example value: "func1".
func (o NetworkEndpointGroupCloudFunctionResponseOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkEndpointGroupCloudFunctionResponse) string { return v.Function }).(pulumi.StringOutput)
}

// A template to parse function field from a request URL. URL mask allows for routing to multiple Cloud Functions without having to create multiple Network Endpoint Groups and backend services. For example, request URLs " mydomain.com/function1" and "mydomain.com/function2" can be backed by the same Serverless NEG with URL mask "/". The URL mask will parse them to { function = "function1" } and { function = "function2" } respectively.
func (o NetworkEndpointGroupCloudFunctionResponseOutput) UrlMask() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkEndpointGroupCloudFunctionResponse) string { return v.UrlMask }).(pulumi.StringOutput)
}

type NetworkEndpointGroupCloudFunctionResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkEndpointGroupCloudFunctionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkEndpointGroupCloudFunctionResponse)(nil)).Elem()
}

func (o NetworkEndpointGroupCloudFunctionResponsePtrOutput) ToNetworkEndpointGroupCloudFunctionResponsePtrOutput() NetworkEndpointGroupCloudFunctionResponsePtrOutput {
	return o
}

func (o NetworkEndpointGroupCloudFunctionResponsePtrOutput) ToNetworkEndpointGroupCloudFunctionResponsePtrOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudFunctionResponsePtrOutput {
	return o
}

func (o NetworkEndpointGroupCloudFunctionResponsePtrOutput) Elem() NetworkEndpointGroupCloudFunctionResponseOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupCloudFunctionResponse) NetworkEndpointGroupCloudFunctionResponse {
		return *v
	}).(NetworkEndpointGroupCloudFunctionResponseOutput)
}

// A user-defined name of the Cloud Function. The function name is case-sensitive and must be 1-63 characters long. Example value: "func1".
func (o NetworkEndpointGroupCloudFunctionResponsePtrOutput) Function() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupCloudFunctionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Function
	}).(pulumi.StringPtrOutput)
}

// A template to parse function field from a request URL. URL mask allows for routing to multiple Cloud Functions without having to create multiple Network Endpoint Groups and backend services. For example, request URLs " mydomain.com/function1" and "mydomain.com/function2" can be backed by the same Serverless NEG with URL mask "/". The URL mask will parse them to { function = "function1" } and { function = "function2" } respectively.
func (o NetworkEndpointGroupCloudFunctionResponsePtrOutput) UrlMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupCloudFunctionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UrlMask
	}).(pulumi.StringPtrOutput)
}

// Configuration for a Cloud Run network endpoint group (NEG). The service must be provided explicitly or in the URL mask. The tag is optional, may be provided explicitly or in the URL mask. Note: Cloud Run service must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupCloudRun struct {
	// Cloud Run service is the main resource of Cloud Run. The service must be 1-63 characters long, and comply with RFC1035. Example value: "run-service".
	Service *string `pulumi:"service"`
	// Optional Cloud Run tag represents the "named-revision" to provide additional fine-grained traffic routing information. The tag must be 1-63 characters long, and comply with RFC1035. Example value: "revision-0010".
	Tag *string `pulumi:"tag"`
	// A template to parse service and tag fields from a request URL. URL mask allows for routing to multiple Run services without having to create multiple network endpoint groups and backend services. For example, request URLs "foo1.domain.com/bar1" and "foo1.domain.com/bar2" can be backed by the same Serverless Network Endpoint Group (NEG) with URL mask ".domain.com/". The URL mask will parse them to { service="bar1", tag="foo1" } and { service="bar2", tag="foo2" } respectively.
	UrlMask *string `pulumi:"urlMask"`
}

// NetworkEndpointGroupCloudRunInput is an input type that accepts NetworkEndpointGroupCloudRunArgs and NetworkEndpointGroupCloudRunOutput values.
// You can construct a concrete instance of `NetworkEndpointGroupCloudRunInput` via:
//
//          NetworkEndpointGroupCloudRunArgs{...}
type NetworkEndpointGroupCloudRunInput interface {
	pulumi.Input

	ToNetworkEndpointGroupCloudRunOutput() NetworkEndpointGroupCloudRunOutput
	ToNetworkEndpointGroupCloudRunOutputWithContext(context.Context) NetworkEndpointGroupCloudRunOutput
}

// Configuration for a Cloud Run network endpoint group (NEG). The service must be provided explicitly or in the URL mask. The tag is optional, may be provided explicitly or in the URL mask. Note: Cloud Run service must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupCloudRunArgs struct {
	// Cloud Run service is the main resource of Cloud Run. The service must be 1-63 characters long, and comply with RFC1035. Example value: "run-service".
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Optional Cloud Run tag represents the "named-revision" to provide additional fine-grained traffic routing information. The tag must be 1-63 characters long, and comply with RFC1035. Example value: "revision-0010".
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// A template to parse service and tag fields from a request URL. URL mask allows for routing to multiple Run services without having to create multiple network endpoint groups and backend services. For example, request URLs "foo1.domain.com/bar1" and "foo1.domain.com/bar2" can be backed by the same Serverless Network Endpoint Group (NEG) with URL mask ".domain.com/". The URL mask will parse them to { service="bar1", tag="foo1" } and { service="bar2", tag="foo2" } respectively.
	UrlMask pulumi.StringPtrInput `pulumi:"urlMask"`
}

func (NetworkEndpointGroupCloudRunArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpointGroupCloudRun)(nil)).Elem()
}

func (i NetworkEndpointGroupCloudRunArgs) ToNetworkEndpointGroupCloudRunOutput() NetworkEndpointGroupCloudRunOutput {
	return i.ToNetworkEndpointGroupCloudRunOutputWithContext(context.Background())
}

func (i NetworkEndpointGroupCloudRunArgs) ToNetworkEndpointGroupCloudRunOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudRunOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupCloudRunOutput)
}

func (i NetworkEndpointGroupCloudRunArgs) ToNetworkEndpointGroupCloudRunPtrOutput() NetworkEndpointGroupCloudRunPtrOutput {
	return i.ToNetworkEndpointGroupCloudRunPtrOutputWithContext(context.Background())
}

func (i NetworkEndpointGroupCloudRunArgs) ToNetworkEndpointGroupCloudRunPtrOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudRunPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupCloudRunOutput).ToNetworkEndpointGroupCloudRunPtrOutputWithContext(ctx)
}

// NetworkEndpointGroupCloudRunPtrInput is an input type that accepts NetworkEndpointGroupCloudRunArgs, NetworkEndpointGroupCloudRunPtr and NetworkEndpointGroupCloudRunPtrOutput values.
// You can construct a concrete instance of `NetworkEndpointGroupCloudRunPtrInput` via:
//
//          NetworkEndpointGroupCloudRunArgs{...}
//
//  or:
//
//          nil
type NetworkEndpointGroupCloudRunPtrInput interface {
	pulumi.Input

	ToNetworkEndpointGroupCloudRunPtrOutput() NetworkEndpointGroupCloudRunPtrOutput
	ToNetworkEndpointGroupCloudRunPtrOutputWithContext(context.Context) NetworkEndpointGroupCloudRunPtrOutput
}

type networkEndpointGroupCloudRunPtrType NetworkEndpointGroupCloudRunArgs

func NetworkEndpointGroupCloudRunPtr(v *NetworkEndpointGroupCloudRunArgs) NetworkEndpointGroupCloudRunPtrInput {
	return (*networkEndpointGroupCloudRunPtrType)(v)
}

func (*networkEndpointGroupCloudRunPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkEndpointGroupCloudRun)(nil)).Elem()
}

func (i *networkEndpointGroupCloudRunPtrType) ToNetworkEndpointGroupCloudRunPtrOutput() NetworkEndpointGroupCloudRunPtrOutput {
	return i.ToNetworkEndpointGroupCloudRunPtrOutputWithContext(context.Background())
}

func (i *networkEndpointGroupCloudRunPtrType) ToNetworkEndpointGroupCloudRunPtrOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudRunPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupCloudRunPtrOutput)
}

// Configuration for a Cloud Run network endpoint group (NEG). The service must be provided explicitly or in the URL mask. The tag is optional, may be provided explicitly or in the URL mask. Note: Cloud Run service must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupCloudRunOutput struct{ *pulumi.OutputState }

func (NetworkEndpointGroupCloudRunOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpointGroupCloudRun)(nil)).Elem()
}

func (o NetworkEndpointGroupCloudRunOutput) ToNetworkEndpointGroupCloudRunOutput() NetworkEndpointGroupCloudRunOutput {
	return o
}

func (o NetworkEndpointGroupCloudRunOutput) ToNetworkEndpointGroupCloudRunOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudRunOutput {
	return o
}

func (o NetworkEndpointGroupCloudRunOutput) ToNetworkEndpointGroupCloudRunPtrOutput() NetworkEndpointGroupCloudRunPtrOutput {
	return o.ToNetworkEndpointGroupCloudRunPtrOutputWithContext(context.Background())
}

func (o NetworkEndpointGroupCloudRunOutput) ToNetworkEndpointGroupCloudRunPtrOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudRunPtrOutput {
	return o.ApplyT(func(v NetworkEndpointGroupCloudRun) *NetworkEndpointGroupCloudRun {
		return &v
	}).(NetworkEndpointGroupCloudRunPtrOutput)
}

// Cloud Run service is the main resource of Cloud Run. The service must be 1-63 characters long, and comply with RFC1035. Example value: "run-service".
func (o NetworkEndpointGroupCloudRunOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkEndpointGroupCloudRun) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Optional Cloud Run tag represents the "named-revision" to provide additional fine-grained traffic routing information. The tag must be 1-63 characters long, and comply with RFC1035. Example value: "revision-0010".
func (o NetworkEndpointGroupCloudRunOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkEndpointGroupCloudRun) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// A template to parse service and tag fields from a request URL. URL mask allows for routing to multiple Run services without having to create multiple network endpoint groups and backend services. For example, request URLs "foo1.domain.com/bar1" and "foo1.domain.com/bar2" can be backed by the same Serverless Network Endpoint Group (NEG) with URL mask ".domain.com/". The URL mask will parse them to { service="bar1", tag="foo1" } and { service="bar2", tag="foo2" } respectively.
func (o NetworkEndpointGroupCloudRunOutput) UrlMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkEndpointGroupCloudRun) *string { return v.UrlMask }).(pulumi.StringPtrOutput)
}

type NetworkEndpointGroupCloudRunPtrOutput struct{ *pulumi.OutputState }

func (NetworkEndpointGroupCloudRunPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkEndpointGroupCloudRun)(nil)).Elem()
}

func (o NetworkEndpointGroupCloudRunPtrOutput) ToNetworkEndpointGroupCloudRunPtrOutput() NetworkEndpointGroupCloudRunPtrOutput {
	return o
}

func (o NetworkEndpointGroupCloudRunPtrOutput) ToNetworkEndpointGroupCloudRunPtrOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudRunPtrOutput {
	return o
}

func (o NetworkEndpointGroupCloudRunPtrOutput) Elem() NetworkEndpointGroupCloudRunOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupCloudRun) NetworkEndpointGroupCloudRun { return *v }).(NetworkEndpointGroupCloudRunOutput)
}

// Cloud Run service is the main resource of Cloud Run. The service must be 1-63 characters long, and comply with RFC1035. Example value: "run-service".
func (o NetworkEndpointGroupCloudRunPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupCloudRun) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Optional Cloud Run tag represents the "named-revision" to provide additional fine-grained traffic routing information. The tag must be 1-63 characters long, and comply with RFC1035. Example value: "revision-0010".
func (o NetworkEndpointGroupCloudRunPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupCloudRun) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// A template to parse service and tag fields from a request URL. URL mask allows for routing to multiple Run services without having to create multiple network endpoint groups and backend services. For example, request URLs "foo1.domain.com/bar1" and "foo1.domain.com/bar2" can be backed by the same Serverless Network Endpoint Group (NEG) with URL mask ".domain.com/". The URL mask will parse them to { service="bar1", tag="foo1" } and { service="bar2", tag="foo2" } respectively.
func (o NetworkEndpointGroupCloudRunPtrOutput) UrlMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupCloudRun) *string {
		if v == nil {
			return nil
		}
		return v.UrlMask
	}).(pulumi.StringPtrOutput)
}

// Configuration for a Cloud Run network endpoint group (NEG). The service must be provided explicitly or in the URL mask. The tag is optional, may be provided explicitly or in the URL mask. Note: Cloud Run service must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupCloudRunResponse struct {
	// Cloud Run service is the main resource of Cloud Run. The service must be 1-63 characters long, and comply with RFC1035. Example value: "run-service".
	Service string `pulumi:"service"`
	// Optional Cloud Run tag represents the "named-revision" to provide additional fine-grained traffic routing information. The tag must be 1-63 characters long, and comply with RFC1035. Example value: "revision-0010".
	Tag string `pulumi:"tag"`
	// A template to parse service and tag fields from a request URL. URL mask allows for routing to multiple Run services without having to create multiple network endpoint groups and backend services. For example, request URLs "foo1.domain.com/bar1" and "foo1.domain.com/bar2" can be backed by the same Serverless Network Endpoint Group (NEG) with URL mask ".domain.com/". The URL mask will parse them to { service="bar1", tag="foo1" } and { service="bar2", tag="foo2" } respectively.
	UrlMask string `pulumi:"urlMask"`
}

// NetworkEndpointGroupCloudRunResponseInput is an input type that accepts NetworkEndpointGroupCloudRunResponseArgs and NetworkEndpointGroupCloudRunResponseOutput values.
// You can construct a concrete instance of `NetworkEndpointGroupCloudRunResponseInput` via:
//
//          NetworkEndpointGroupCloudRunResponseArgs{...}
type NetworkEndpointGroupCloudRunResponseInput interface {
	pulumi.Input

	ToNetworkEndpointGroupCloudRunResponseOutput() NetworkEndpointGroupCloudRunResponseOutput
	ToNetworkEndpointGroupCloudRunResponseOutputWithContext(context.Context) NetworkEndpointGroupCloudRunResponseOutput
}

// Configuration for a Cloud Run network endpoint group (NEG). The service must be provided explicitly or in the URL mask. The tag is optional, may be provided explicitly or in the URL mask. Note: Cloud Run service must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupCloudRunResponseArgs struct {
	// Cloud Run service is the main resource of Cloud Run. The service must be 1-63 characters long, and comply with RFC1035. Example value: "run-service".
	Service pulumi.StringInput `pulumi:"service"`
	// Optional Cloud Run tag represents the "named-revision" to provide additional fine-grained traffic routing information. The tag must be 1-63 characters long, and comply with RFC1035. Example value: "revision-0010".
	Tag pulumi.StringInput `pulumi:"tag"`
	// A template to parse service and tag fields from a request URL. URL mask allows for routing to multiple Run services without having to create multiple network endpoint groups and backend services. For example, request URLs "foo1.domain.com/bar1" and "foo1.domain.com/bar2" can be backed by the same Serverless Network Endpoint Group (NEG) with URL mask ".domain.com/". The URL mask will parse them to { service="bar1", tag="foo1" } and { service="bar2", tag="foo2" } respectively.
	UrlMask pulumi.StringInput `pulumi:"urlMask"`
}

func (NetworkEndpointGroupCloudRunResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpointGroupCloudRunResponse)(nil)).Elem()
}

func (i NetworkEndpointGroupCloudRunResponseArgs) ToNetworkEndpointGroupCloudRunResponseOutput() NetworkEndpointGroupCloudRunResponseOutput {
	return i.ToNetworkEndpointGroupCloudRunResponseOutputWithContext(context.Background())
}

func (i NetworkEndpointGroupCloudRunResponseArgs) ToNetworkEndpointGroupCloudRunResponseOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudRunResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupCloudRunResponseOutput)
}

func (i NetworkEndpointGroupCloudRunResponseArgs) ToNetworkEndpointGroupCloudRunResponsePtrOutput() NetworkEndpointGroupCloudRunResponsePtrOutput {
	return i.ToNetworkEndpointGroupCloudRunResponsePtrOutputWithContext(context.Background())
}

func (i NetworkEndpointGroupCloudRunResponseArgs) ToNetworkEndpointGroupCloudRunResponsePtrOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudRunResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupCloudRunResponseOutput).ToNetworkEndpointGroupCloudRunResponsePtrOutputWithContext(ctx)
}

// NetworkEndpointGroupCloudRunResponsePtrInput is an input type that accepts NetworkEndpointGroupCloudRunResponseArgs, NetworkEndpointGroupCloudRunResponsePtr and NetworkEndpointGroupCloudRunResponsePtrOutput values.
// You can construct a concrete instance of `NetworkEndpointGroupCloudRunResponsePtrInput` via:
//
//          NetworkEndpointGroupCloudRunResponseArgs{...}
//
//  or:
//
//          nil
type NetworkEndpointGroupCloudRunResponsePtrInput interface {
	pulumi.Input

	ToNetworkEndpointGroupCloudRunResponsePtrOutput() NetworkEndpointGroupCloudRunResponsePtrOutput
	ToNetworkEndpointGroupCloudRunResponsePtrOutputWithContext(context.Context) NetworkEndpointGroupCloudRunResponsePtrOutput
}

type networkEndpointGroupCloudRunResponsePtrType NetworkEndpointGroupCloudRunResponseArgs

func NetworkEndpointGroupCloudRunResponsePtr(v *NetworkEndpointGroupCloudRunResponseArgs) NetworkEndpointGroupCloudRunResponsePtrInput {
	return (*networkEndpointGroupCloudRunResponsePtrType)(v)
}

func (*networkEndpointGroupCloudRunResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkEndpointGroupCloudRunResponse)(nil)).Elem()
}

func (i *networkEndpointGroupCloudRunResponsePtrType) ToNetworkEndpointGroupCloudRunResponsePtrOutput() NetworkEndpointGroupCloudRunResponsePtrOutput {
	return i.ToNetworkEndpointGroupCloudRunResponsePtrOutputWithContext(context.Background())
}

func (i *networkEndpointGroupCloudRunResponsePtrType) ToNetworkEndpointGroupCloudRunResponsePtrOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudRunResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointGroupCloudRunResponsePtrOutput)
}

// Configuration for a Cloud Run network endpoint group (NEG). The service must be provided explicitly or in the URL mask. The tag is optional, may be provided explicitly or in the URL mask. Note: Cloud Run service must be in the same project and located in the same region as the Serverless NEG.
type NetworkEndpointGroupCloudRunResponseOutput struct{ *pulumi.OutputState }

func (NetworkEndpointGroupCloudRunResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpointGroupCloudRunResponse)(nil)).Elem()
}

func (o NetworkEndpointGroupCloudRunResponseOutput) ToNetworkEndpointGroupCloudRunResponseOutput() NetworkEndpointGroupCloudRunResponseOutput {
	return o
}

func (o NetworkEndpointGroupCloudRunResponseOutput) ToNetworkEndpointGroupCloudRunResponseOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudRunResponseOutput {
	return o
}

func (o NetworkEndpointGroupCloudRunResponseOutput) ToNetworkEndpointGroupCloudRunResponsePtrOutput() NetworkEndpointGroupCloudRunResponsePtrOutput {
	return o.ToNetworkEndpointGroupCloudRunResponsePtrOutputWithContext(context.Background())
}

func (o NetworkEndpointGroupCloudRunResponseOutput) ToNetworkEndpointGroupCloudRunResponsePtrOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudRunResponsePtrOutput {
	return o.ApplyT(func(v NetworkEndpointGroupCloudRunResponse) *NetworkEndpointGroupCloudRunResponse {
		return &v
	}).(NetworkEndpointGroupCloudRunResponsePtrOutput)
}

// Cloud Run service is the main resource of Cloud Run. The service must be 1-63 characters long, and comply with RFC1035. Example value: "run-service".
func (o NetworkEndpointGroupCloudRunResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkEndpointGroupCloudRunResponse) string { return v.Service }).(pulumi.StringOutput)
}

// Optional Cloud Run tag represents the "named-revision" to provide additional fine-grained traffic routing information. The tag must be 1-63 characters long, and comply with RFC1035. Example value: "revision-0010".
func (o NetworkEndpointGroupCloudRunResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkEndpointGroupCloudRunResponse) string { return v.Tag }).(pulumi.StringOutput)
}

// A template to parse service and tag fields from a request URL. URL mask allows for routing to multiple Run services without having to create multiple network endpoint groups and backend services. For example, request URLs "foo1.domain.com/bar1" and "foo1.domain.com/bar2" can be backed by the same Serverless Network Endpoint Group (NEG) with URL mask ".domain.com/". The URL mask will parse them to { service="bar1", tag="foo1" } and { service="bar2", tag="foo2" } respectively.
func (o NetworkEndpointGroupCloudRunResponseOutput) UrlMask() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkEndpointGroupCloudRunResponse) string { return v.UrlMask }).(pulumi.StringOutput)
}

type NetworkEndpointGroupCloudRunResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkEndpointGroupCloudRunResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkEndpointGroupCloudRunResponse)(nil)).Elem()
}

func (o NetworkEndpointGroupCloudRunResponsePtrOutput) ToNetworkEndpointGroupCloudRunResponsePtrOutput() NetworkEndpointGroupCloudRunResponsePtrOutput {
	return o
}

func (o NetworkEndpointGroupCloudRunResponsePtrOutput) ToNetworkEndpointGroupCloudRunResponsePtrOutputWithContext(ctx context.Context) NetworkEndpointGroupCloudRunResponsePtrOutput {
	return o
}

func (o NetworkEndpointGroupCloudRunResponsePtrOutput) Elem() NetworkEndpointGroupCloudRunResponseOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupCloudRunResponse) NetworkEndpointGroupCloudRunResponse { return *v }).(NetworkEndpointGroupCloudRunResponseOutput)
}

// Cloud Run service is the main resource of Cloud Run. The service must be 1-63 characters long, and comply with RFC1035. Example value: "run-service".
func (o NetworkEndpointGroupCloudRunResponsePtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupCloudRunResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

// Optional Cloud Run tag represents the "named-revision" to provide additional fine-grained traffic routing information. The tag must be 1-63 characters long, and comply with RFC1035. Example value: "revision-0010".
func (o NetworkEndpointGroupCloudRunResponsePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupCloudRunResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tag
	}).(pulumi.StringPtrOutput)
}

// A template to parse service and tag fields from a request URL. URL mask allows for routing to multiple Run services without having to create multiple network endpoint groups and backend services. For example, request URLs "foo1.domain.com/bar1" and "foo1.domain.com/bar2" can be backed by the same Serverless Network Endpoint Group (NEG) with URL mask ".domain.com/". The URL mask will parse them to { service="bar1", tag="foo1" } and { service="bar2", tag="foo2" } respectively.
func (o NetworkEndpointGroupCloudRunResponsePtrOutput) UrlMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkEndpointGroupCloudRunResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UrlMask
	}).(pulumi.StringPtrOutput)
}

// A network interface resource attached to an instance.
type NetworkInterface struct {
	// An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.
	AccessConfigs []AccessConfig `pulumi:"accessConfigs"`
	// An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.
	AliasIpRanges []AliasIpRange `pulumi:"aliasIpRanges"`
	// An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
	Ipv6AccessConfigs []AccessConfig `pulumi:"ipv6AccessConfigs"`
	// URL of the network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used; if the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network - global/networks/default
	Network *string `pulumi:"network"`
	// An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system.
	NetworkIP *string `pulumi:"networkIP"`
	// The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
	NicType *string `pulumi:"nicType"`
	// The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at instance creation and update network interface operations.
	StackType *string `pulumi:"stackType"`
	// The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork
	Subnetwork *string `pulumi:"subnetwork"`
}

// NetworkInterfaceInput is an input type that accepts NetworkInterfaceArgs and NetworkInterfaceOutput values.
// You can construct a concrete instance of `NetworkInterfaceInput` via:
//
//          NetworkInterfaceArgs{...}
type NetworkInterfaceInput interface {
	pulumi.Input

	ToNetworkInterfaceOutput() NetworkInterfaceOutput
	ToNetworkInterfaceOutputWithContext(context.Context) NetworkInterfaceOutput
}

// A network interface resource attached to an instance.
type NetworkInterfaceArgs struct {
	// An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.
	AccessConfigs AccessConfigArrayInput `pulumi:"accessConfigs"`
	// An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.
	AliasIpRanges AliasIpRangeArrayInput `pulumi:"aliasIpRanges"`
	// An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
	Ipv6AccessConfigs AccessConfigArrayInput `pulumi:"ipv6AccessConfigs"`
	// URL of the network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used; if the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network - global/networks/default
	Network pulumi.StringPtrInput `pulumi:"network"`
	// An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system.
	NetworkIP pulumi.StringPtrInput `pulumi:"networkIP"`
	// The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
	NicType *NetworkInterfaceNicType `pulumi:"nicType"`
	// The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at instance creation and update network interface operations.
	StackType *NetworkInterfaceStackType `pulumi:"stackType"`
	// The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
}

func (NetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterface)(nil)).Elem()
}

func (i NetworkInterfaceArgs) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return i.ToNetworkInterfaceOutputWithContext(context.Background())
}

func (i NetworkInterfaceArgs) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceOutput)
}

// NetworkInterfaceArrayInput is an input type that accepts NetworkInterfaceArray and NetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceArrayInput` via:
//
//          NetworkInterfaceArray{ NetworkInterfaceArgs{...} }
type NetworkInterfaceArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput
	ToNetworkInterfaceArrayOutputWithContext(context.Context) NetworkInterfaceArrayOutput
}

type NetworkInterfaceArray []NetworkInterfaceInput

func (NetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterface)(nil)).Elem()
}

func (i NetworkInterfaceArray) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return i.ToNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceArray) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceArrayOutput)
}

// A network interface resource attached to an instance.
type NetworkInterfaceOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return o
}

// An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.
func (o NetworkInterfaceOutput) AccessConfigs() AccessConfigArrayOutput {
	return o.ApplyT(func(v NetworkInterface) []AccessConfig { return v.AccessConfigs }).(AccessConfigArrayOutput)
}

// An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.
func (o NetworkInterfaceOutput) AliasIpRanges() AliasIpRangeArrayOutput {
	return o.ApplyT(func(v NetworkInterface) []AliasIpRange { return v.AliasIpRanges }).(AliasIpRangeArrayOutput)
}

// An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
func (o NetworkInterfaceOutput) Ipv6AccessConfigs() AccessConfigArrayOutput {
	return o.ApplyT(func(v NetworkInterface) []AccessConfig { return v.Ipv6AccessConfigs }).(AccessConfigArrayOutput)
}

// URL of the network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used; if the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network - global/networks/default
func (o NetworkInterfaceOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system.
func (o NetworkInterfaceOutput) NetworkIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.NetworkIP }).(pulumi.StringPtrOutput)
}

// The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
func (o NetworkInterfaceOutput) NicType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.NicType }).(pulumi.StringPtrOutput)
}

// The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at instance creation and update network interface operations.
func (o NetworkInterfaceOutput) StackType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.StackType }).(pulumi.StringPtrOutput)
}

// The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork
func (o NetworkInterfaceOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

type NetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterface {
		return vs[0].([]NetworkInterface)[vs[1].(int)]
	}).(NetworkInterfaceOutput)
}

// A network interface resource attached to an instance.
type NetworkInterfaceResponse struct {
	// An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.
	AccessConfigs []AccessConfigResponse `pulumi:"accessConfigs"`
	// An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.
	AliasIpRanges []AliasIpRangeResponse `pulumi:"aliasIpRanges"`
	// Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface. The request will fail with error 400 Bad Request if the fingerprint is not provided, or 412 Precondition Failed if the fingerprint is out of date.
	Fingerprint string `pulumi:"fingerprint"`
	// An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
	Ipv6AccessConfigs []AccessConfigResponse `pulumi:"ipv6AccessConfigs"`
	// One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is IPV4_IPV6.
	Ipv6AccessType string `pulumi:"ipv6AccessType"`
	// An IPv6 internal network address for this network interface.
	Ipv6Address string `pulumi:"ipv6Address"`
	// Type of the resource. Always compute#networkInterface for network interfaces.
	Kind string `pulumi:"kind"`
	// The name of the network interface, which is generated by the server. For network devices, these are eth0, eth1, etc.
	Name string `pulumi:"name"`
	// URL of the network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used; if the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network - global/networks/default
	Network string `pulumi:"network"`
	// An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system.
	NetworkIP string `pulumi:"networkIP"`
	// The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
	NicType string `pulumi:"nicType"`
	// The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at instance creation and update network interface operations.
	StackType string `pulumi:"stackType"`
	// The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork
	Subnetwork string `pulumi:"subnetwork"`
}

// NetworkInterfaceResponseInput is an input type that accepts NetworkInterfaceResponseArgs and NetworkInterfaceResponseOutput values.
// You can construct a concrete instance of `NetworkInterfaceResponseInput` via:
//
//          NetworkInterfaceResponseArgs{...}
type NetworkInterfaceResponseInput interface {
	pulumi.Input

	ToNetworkInterfaceResponseOutput() NetworkInterfaceResponseOutput
	ToNetworkInterfaceResponseOutputWithContext(context.Context) NetworkInterfaceResponseOutput
}

// A network interface resource attached to an instance.
type NetworkInterfaceResponseArgs struct {
	// An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.
	AccessConfigs AccessConfigResponseArrayInput `pulumi:"accessConfigs"`
	// An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.
	AliasIpRanges AliasIpRangeResponseArrayInput `pulumi:"aliasIpRanges"`
	// Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface. The request will fail with error 400 Bad Request if the fingerprint is not provided, or 412 Precondition Failed if the fingerprint is out of date.
	Fingerprint pulumi.StringInput `pulumi:"fingerprint"`
	// An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
	Ipv6AccessConfigs AccessConfigResponseArrayInput `pulumi:"ipv6AccessConfigs"`
	// One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is IPV4_IPV6.
	Ipv6AccessType pulumi.StringInput `pulumi:"ipv6AccessType"`
	// An IPv6 internal network address for this network interface.
	Ipv6Address pulumi.StringInput `pulumi:"ipv6Address"`
	// Type of the resource. Always compute#networkInterface for network interfaces.
	Kind pulumi.StringInput `pulumi:"kind"`
	// The name of the network interface, which is generated by the server. For network devices, these are eth0, eth1, etc.
	Name pulumi.StringInput `pulumi:"name"`
	// URL of the network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used; if the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network - global/networks/default
	Network pulumi.StringInput `pulumi:"network"`
	// An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system.
	NetworkIP pulumi.StringInput `pulumi:"networkIP"`
	// The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
	NicType pulumi.StringInput `pulumi:"nicType"`
	// The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at instance creation and update network interface operations.
	StackType pulumi.StringInput `pulumi:"stackType"`
	// The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork
	Subnetwork pulumi.StringInput `pulumi:"subnetwork"`
}

func (NetworkInterfaceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceResponse)(nil)).Elem()
}

func (i NetworkInterfaceResponseArgs) ToNetworkInterfaceResponseOutput() NetworkInterfaceResponseOutput {
	return i.ToNetworkInterfaceResponseOutputWithContext(context.Background())
}

func (i NetworkInterfaceResponseArgs) ToNetworkInterfaceResponseOutputWithContext(ctx context.Context) NetworkInterfaceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceResponseOutput)
}

// NetworkInterfaceResponseArrayInput is an input type that accepts NetworkInterfaceResponseArray and NetworkInterfaceResponseArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceResponseArrayInput` via:
//
//          NetworkInterfaceResponseArray{ NetworkInterfaceResponseArgs{...} }
type NetworkInterfaceResponseArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceResponseArrayOutput() NetworkInterfaceResponseArrayOutput
	ToNetworkInterfaceResponseArrayOutputWithContext(context.Context) NetworkInterfaceResponseArrayOutput
}

type NetworkInterfaceResponseArray []NetworkInterfaceResponseInput

func (NetworkInterfaceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceResponse)(nil)).Elem()
}

func (i NetworkInterfaceResponseArray) ToNetworkInterfaceResponseArrayOutput() NetworkInterfaceResponseArrayOutput {
	return i.ToNetworkInterfaceResponseArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceResponseArray) ToNetworkInterfaceResponseArrayOutputWithContext(ctx context.Context) NetworkInterfaceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceResponseArrayOutput)
}

// A network interface resource attached to an instance.
type NetworkInterfaceResponseOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceResponse)(nil)).Elem()
}

func (o NetworkInterfaceResponseOutput) ToNetworkInterfaceResponseOutput() NetworkInterfaceResponseOutput {
	return o
}

func (o NetworkInterfaceResponseOutput) ToNetworkInterfaceResponseOutputWithContext(ctx context.Context) NetworkInterfaceResponseOutput {
	return o
}

// An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.
func (o NetworkInterfaceResponseOutput) AccessConfigs() AccessConfigResponseArrayOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) []AccessConfigResponse { return v.AccessConfigs }).(AccessConfigResponseArrayOutput)
}

// An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.
func (o NetworkInterfaceResponseOutput) AliasIpRanges() AliasIpRangeResponseArrayOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) []AliasIpRangeResponse { return v.AliasIpRanges }).(AliasIpRangeResponseArrayOutput)
}

// Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface. The request will fail with error 400 Bad Request if the fingerprint is not provided, or 412 Precondition Failed if the fingerprint is out of date.
func (o NetworkInterfaceResponseOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.Fingerprint }).(pulumi.StringOutput)
}

// An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
func (o NetworkInterfaceResponseOutput) Ipv6AccessConfigs() AccessConfigResponseArrayOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) []AccessConfigResponse { return v.Ipv6AccessConfigs }).(AccessConfigResponseArrayOutput)
}

// One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is IPV4_IPV6.
func (o NetworkInterfaceResponseOutput) Ipv6AccessType() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.Ipv6AccessType }).(pulumi.StringOutput)
}

// An IPv6 internal network address for this network interface.
func (o NetworkInterfaceResponseOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

// Type of the resource. Always compute#networkInterface for network interfaces.
func (o NetworkInterfaceResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The name of the network interface, which is generated by the server. For network devices, these are eth0, eth1, etc.
func (o NetworkInterfaceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// URL of the network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used; if the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network - global/networks/default
func (o NetworkInterfaceResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.Network }).(pulumi.StringOutput)
}

// An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system.
func (o NetworkInterfaceResponseOutput) NetworkIP() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.NetworkIP }).(pulumi.StringOutput)
}

// The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
func (o NetworkInterfaceResponseOutput) NicType() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.NicType }).(pulumi.StringOutput)
}

// The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at instance creation and update network interface operations.
func (o NetworkInterfaceResponseOutput) StackType() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.StackType }).(pulumi.StringOutput)
}

// The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork
func (o NetworkInterfaceResponseOutput) Subnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.Subnetwork }).(pulumi.StringOutput)
}

type NetworkInterfaceResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceResponse)(nil)).Elem()
}

func (o NetworkInterfaceResponseArrayOutput) ToNetworkInterfaceResponseArrayOutput() NetworkInterfaceResponseArrayOutput {
	return o
}

func (o NetworkInterfaceResponseArrayOutput) ToNetworkInterfaceResponseArrayOutputWithContext(ctx context.Context) NetworkInterfaceResponseArrayOutput {
	return o
}

func (o NetworkInterfaceResponseArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterfaceResponse {
		return vs[0].([]NetworkInterfaceResponse)[vs[1].(int)]
	}).(NetworkInterfaceResponseOutput)
}

// A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering.
type NetworkPeeringResponse struct {
	// This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
	AutoCreateRoutes bool `pulumi:"autoCreateRoutes"`
	// Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
	ExchangeSubnetRoutes bool `pulumi:"exchangeSubnetRoutes"`
	// Whether to export the custom routes to peer network.
	ExportCustomRoutes bool `pulumi:"exportCustomRoutes"`
	// Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
	ExportSubnetRoutesWithPublicIp bool `pulumi:"exportSubnetRoutesWithPublicIp"`
	// Whether to import the custom routes from peer network.
	ImportCustomRoutes bool `pulumi:"importCustomRoutes"`
	// Whether subnet routes with public IP range are imported. The default value is false. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported from peers and are not controlled by this field.
	ImportSubnetRoutesWithPublicIp bool `pulumi:"importSubnetRoutesWithPublicIp"`
	// Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name string `pulumi:"name"`
	// The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
	Network string `pulumi:"network"`
	// Maximum Transmission Unit in bytes.
	PeerMtu int `pulumi:"peerMtu"`
	// State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network.
	State string `pulumi:"state"`
	// Details about the current state of the peering.
	StateDetails string `pulumi:"stateDetails"`
}

// NetworkPeeringResponseInput is an input type that accepts NetworkPeeringResponseArgs and NetworkPeeringResponseOutput values.
// You can construct a concrete instance of `NetworkPeeringResponseInput` via:
//
//          NetworkPeeringResponseArgs{...}
type NetworkPeeringResponseInput interface {
	pulumi.Input

	ToNetworkPeeringResponseOutput() NetworkPeeringResponseOutput
	ToNetworkPeeringResponseOutputWithContext(context.Context) NetworkPeeringResponseOutput
}

// A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering.
type NetworkPeeringResponseArgs struct {
	// This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
	AutoCreateRoutes pulumi.BoolInput `pulumi:"autoCreateRoutes"`
	// Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
	ExchangeSubnetRoutes pulumi.BoolInput `pulumi:"exchangeSubnetRoutes"`
	// Whether to export the custom routes to peer network.
	ExportCustomRoutes pulumi.BoolInput `pulumi:"exportCustomRoutes"`
	// Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
	ExportSubnetRoutesWithPublicIp pulumi.BoolInput `pulumi:"exportSubnetRoutesWithPublicIp"`
	// Whether to import the custom routes from peer network.
	ImportCustomRoutes pulumi.BoolInput `pulumi:"importCustomRoutes"`
	// Whether subnet routes with public IP range are imported. The default value is false. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported from peers and are not controlled by this field.
	ImportSubnetRoutesWithPublicIp pulumi.BoolInput `pulumi:"importSubnetRoutesWithPublicIp"`
	// Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringInput `pulumi:"name"`
	// The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
	Network pulumi.StringInput `pulumi:"network"`
	// Maximum Transmission Unit in bytes.
	PeerMtu pulumi.IntInput `pulumi:"peerMtu"`
	// State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network.
	State pulumi.StringInput `pulumi:"state"`
	// Details about the current state of the peering.
	StateDetails pulumi.StringInput `pulumi:"stateDetails"`
}

func (NetworkPeeringResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPeeringResponse)(nil)).Elem()
}

func (i NetworkPeeringResponseArgs) ToNetworkPeeringResponseOutput() NetworkPeeringResponseOutput {
	return i.ToNetworkPeeringResponseOutputWithContext(context.Background())
}

func (i NetworkPeeringResponseArgs) ToNetworkPeeringResponseOutputWithContext(ctx context.Context) NetworkPeeringResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPeeringResponseOutput)
}

// NetworkPeeringResponseArrayInput is an input type that accepts NetworkPeeringResponseArray and NetworkPeeringResponseArrayOutput values.
// You can construct a concrete instance of `NetworkPeeringResponseArrayInput` via:
//
//          NetworkPeeringResponseArray{ NetworkPeeringResponseArgs{...} }
type NetworkPeeringResponseArrayInput interface {
	pulumi.Input

	ToNetworkPeeringResponseArrayOutput() NetworkPeeringResponseArrayOutput
	ToNetworkPeeringResponseArrayOutputWithContext(context.Context) NetworkPeeringResponseArrayOutput
}

type NetworkPeeringResponseArray []NetworkPeeringResponseInput

func (NetworkPeeringResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPeeringResponse)(nil)).Elem()
}

func (i NetworkPeeringResponseArray) ToNetworkPeeringResponseArrayOutput() NetworkPeeringResponseArrayOutput {
	return i.ToNetworkPeeringResponseArrayOutputWithContext(context.Background())
}

func (i NetworkPeeringResponseArray) ToNetworkPeeringResponseArrayOutputWithContext(ctx context.Context) NetworkPeeringResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPeeringResponseArrayOutput)
}

// A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering.
type NetworkPeeringResponseOutput struct{ *pulumi.OutputState }

func (NetworkPeeringResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPeeringResponse)(nil)).Elem()
}

func (o NetworkPeeringResponseOutput) ToNetworkPeeringResponseOutput() NetworkPeeringResponseOutput {
	return o
}

func (o NetworkPeeringResponseOutput) ToNetworkPeeringResponseOutputWithContext(ctx context.Context) NetworkPeeringResponseOutput {
	return o
}

// This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
func (o NetworkPeeringResponseOutput) AutoCreateRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkPeeringResponse) bool { return v.AutoCreateRoutes }).(pulumi.BoolOutput)
}

// Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
func (o NetworkPeeringResponseOutput) ExchangeSubnetRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkPeeringResponse) bool { return v.ExchangeSubnetRoutes }).(pulumi.BoolOutput)
}

// Whether to export the custom routes to peer network.
func (o NetworkPeeringResponseOutput) ExportCustomRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkPeeringResponse) bool { return v.ExportCustomRoutes }).(pulumi.BoolOutput)
}

// Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.
func (o NetworkPeeringResponseOutput) ExportSubnetRoutesWithPublicIp() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkPeeringResponse) bool { return v.ExportSubnetRoutesWithPublicIp }).(pulumi.BoolOutput)
}

// Whether to import the custom routes from peer network.
func (o NetworkPeeringResponseOutput) ImportCustomRoutes() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkPeeringResponse) bool { return v.ImportCustomRoutes }).(pulumi.BoolOutput)
}

// Whether subnet routes with public IP range are imported. The default value is false. The IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported from peers and are not controlled by this field.
func (o NetworkPeeringResponseOutput) ImportSubnetRoutesWithPublicIp() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkPeeringResponse) bool { return v.ImportSubnetRoutesWithPublicIp }).(pulumi.BoolOutput)
}

// Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o NetworkPeeringResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkPeeringResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
func (o NetworkPeeringResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkPeeringResponse) string { return v.Network }).(pulumi.StringOutput)
}

// Maximum Transmission Unit in bytes.
func (o NetworkPeeringResponseOutput) PeerMtu() pulumi.IntOutput {
	return o.ApplyT(func(v NetworkPeeringResponse) int { return v.PeerMtu }).(pulumi.IntOutput)
}

// State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network.
func (o NetworkPeeringResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkPeeringResponse) string { return v.State }).(pulumi.StringOutput)
}

// Details about the current state of the peering.
func (o NetworkPeeringResponseOutput) StateDetails() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkPeeringResponse) string { return v.StateDetails }).(pulumi.StringOutput)
}

type NetworkPeeringResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkPeeringResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkPeeringResponse)(nil)).Elem()
}

func (o NetworkPeeringResponseArrayOutput) ToNetworkPeeringResponseArrayOutput() NetworkPeeringResponseArrayOutput {
	return o
}

func (o NetworkPeeringResponseArrayOutput) ToNetworkPeeringResponseArrayOutputWithContext(ctx context.Context) NetworkPeeringResponseArrayOutput {
	return o
}

func (o NetworkPeeringResponseArrayOutput) Index(i pulumi.IntInput) NetworkPeeringResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkPeeringResponse {
		return vs[0].([]NetworkPeeringResponse)[vs[1].(int)]
	}).(NetworkPeeringResponseOutput)
}

// A routing configuration attached to a network resource. The message includes the list of routers associated with the network, and a flag indicating the type of routing behavior to enforce network-wide.
type NetworkRoutingConfig struct {
	// The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions.
	RoutingMode *string `pulumi:"routingMode"`
}

// NetworkRoutingConfigInput is an input type that accepts NetworkRoutingConfigArgs and NetworkRoutingConfigOutput values.
// You can construct a concrete instance of `NetworkRoutingConfigInput` via:
//
//          NetworkRoutingConfigArgs{...}
type NetworkRoutingConfigInput interface {
	pulumi.Input

	ToNetworkRoutingConfigOutput() NetworkRoutingConfigOutput
	ToNetworkRoutingConfigOutputWithContext(context.Context) NetworkRoutingConfigOutput
}

// A routing configuration attached to a network resource. The message includes the list of routers associated with the network, and a flag indicating the type of routing behavior to enforce network-wide.
type NetworkRoutingConfigArgs struct {
	// The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions.
	RoutingMode *NetworkRoutingConfigRoutingMode `pulumi:"routingMode"`
}

func (NetworkRoutingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkRoutingConfig)(nil)).Elem()
}

func (i NetworkRoutingConfigArgs) ToNetworkRoutingConfigOutput() NetworkRoutingConfigOutput {
	return i.ToNetworkRoutingConfigOutputWithContext(context.Background())
}

func (i NetworkRoutingConfigArgs) ToNetworkRoutingConfigOutputWithContext(ctx context.Context) NetworkRoutingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRoutingConfigOutput)
}

func (i NetworkRoutingConfigArgs) ToNetworkRoutingConfigPtrOutput() NetworkRoutingConfigPtrOutput {
	return i.ToNetworkRoutingConfigPtrOutputWithContext(context.Background())
}

func (i NetworkRoutingConfigArgs) ToNetworkRoutingConfigPtrOutputWithContext(ctx context.Context) NetworkRoutingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRoutingConfigOutput).ToNetworkRoutingConfigPtrOutputWithContext(ctx)
}

// NetworkRoutingConfigPtrInput is an input type that accepts NetworkRoutingConfigArgs, NetworkRoutingConfigPtr and NetworkRoutingConfigPtrOutput values.
// You can construct a concrete instance of `NetworkRoutingConfigPtrInput` via:
//
//          NetworkRoutingConfigArgs{...}
//
//  or:
//
//          nil
type NetworkRoutingConfigPtrInput interface {
	pulumi.Input

	ToNetworkRoutingConfigPtrOutput() NetworkRoutingConfigPtrOutput
	ToNetworkRoutingConfigPtrOutputWithContext(context.Context) NetworkRoutingConfigPtrOutput
}

type networkRoutingConfigPtrType NetworkRoutingConfigArgs

func NetworkRoutingConfigPtr(v *NetworkRoutingConfigArgs) NetworkRoutingConfigPtrInput {
	return (*networkRoutingConfigPtrType)(v)
}

func (*networkRoutingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkRoutingConfig)(nil)).Elem()
}

func (i *networkRoutingConfigPtrType) ToNetworkRoutingConfigPtrOutput() NetworkRoutingConfigPtrOutput {
	return i.ToNetworkRoutingConfigPtrOutputWithContext(context.Background())
}

func (i *networkRoutingConfigPtrType) ToNetworkRoutingConfigPtrOutputWithContext(ctx context.Context) NetworkRoutingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRoutingConfigPtrOutput)
}

// A routing configuration attached to a network resource. The message includes the list of routers associated with the network, and a flag indicating the type of routing behavior to enforce network-wide.
type NetworkRoutingConfigOutput struct{ *pulumi.OutputState }

func (NetworkRoutingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkRoutingConfig)(nil)).Elem()
}

func (o NetworkRoutingConfigOutput) ToNetworkRoutingConfigOutput() NetworkRoutingConfigOutput {
	return o
}

func (o NetworkRoutingConfigOutput) ToNetworkRoutingConfigOutputWithContext(ctx context.Context) NetworkRoutingConfigOutput {
	return o
}

func (o NetworkRoutingConfigOutput) ToNetworkRoutingConfigPtrOutput() NetworkRoutingConfigPtrOutput {
	return o.ToNetworkRoutingConfigPtrOutputWithContext(context.Background())
}

func (o NetworkRoutingConfigOutput) ToNetworkRoutingConfigPtrOutputWithContext(ctx context.Context) NetworkRoutingConfigPtrOutput {
	return o.ApplyT(func(v NetworkRoutingConfig) *NetworkRoutingConfig {
		return &v
	}).(NetworkRoutingConfigPtrOutput)
}

// The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions.
func (o NetworkRoutingConfigOutput) RoutingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkRoutingConfig) *string { return v.RoutingMode }).(pulumi.StringPtrOutput)
}

type NetworkRoutingConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworkRoutingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkRoutingConfig)(nil)).Elem()
}

func (o NetworkRoutingConfigPtrOutput) ToNetworkRoutingConfigPtrOutput() NetworkRoutingConfigPtrOutput {
	return o
}

func (o NetworkRoutingConfigPtrOutput) ToNetworkRoutingConfigPtrOutputWithContext(ctx context.Context) NetworkRoutingConfigPtrOutput {
	return o
}

func (o NetworkRoutingConfigPtrOutput) Elem() NetworkRoutingConfigOutput {
	return o.ApplyT(func(v *NetworkRoutingConfig) NetworkRoutingConfig { return *v }).(NetworkRoutingConfigOutput)
}

// The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions.
func (o NetworkRoutingConfigPtrOutput) RoutingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkRoutingConfig) *string {
		if v == nil {
			return nil
		}
		return v.RoutingMode
	}).(pulumi.StringPtrOutput)
}

// A routing configuration attached to a network resource. The message includes the list of routers associated with the network, and a flag indicating the type of routing behavior to enforce network-wide.
type NetworkRoutingConfigResponse struct {
	// The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions.
	RoutingMode string `pulumi:"routingMode"`
}

// NetworkRoutingConfigResponseInput is an input type that accepts NetworkRoutingConfigResponseArgs and NetworkRoutingConfigResponseOutput values.
// You can construct a concrete instance of `NetworkRoutingConfigResponseInput` via:
//
//          NetworkRoutingConfigResponseArgs{...}
type NetworkRoutingConfigResponseInput interface {
	pulumi.Input

	ToNetworkRoutingConfigResponseOutput() NetworkRoutingConfigResponseOutput
	ToNetworkRoutingConfigResponseOutputWithContext(context.Context) NetworkRoutingConfigResponseOutput
}

// A routing configuration attached to a network resource. The message includes the list of routers associated with the network, and a flag indicating the type of routing behavior to enforce network-wide.
type NetworkRoutingConfigResponseArgs struct {
	// The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions.
	RoutingMode pulumi.StringInput `pulumi:"routingMode"`
}

func (NetworkRoutingConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkRoutingConfigResponse)(nil)).Elem()
}

func (i NetworkRoutingConfigResponseArgs) ToNetworkRoutingConfigResponseOutput() NetworkRoutingConfigResponseOutput {
	return i.ToNetworkRoutingConfigResponseOutputWithContext(context.Background())
}

func (i NetworkRoutingConfigResponseArgs) ToNetworkRoutingConfigResponseOutputWithContext(ctx context.Context) NetworkRoutingConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRoutingConfigResponseOutput)
}

func (i NetworkRoutingConfigResponseArgs) ToNetworkRoutingConfigResponsePtrOutput() NetworkRoutingConfigResponsePtrOutput {
	return i.ToNetworkRoutingConfigResponsePtrOutputWithContext(context.Background())
}

func (i NetworkRoutingConfigResponseArgs) ToNetworkRoutingConfigResponsePtrOutputWithContext(ctx context.Context) NetworkRoutingConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRoutingConfigResponseOutput).ToNetworkRoutingConfigResponsePtrOutputWithContext(ctx)
}

// NetworkRoutingConfigResponsePtrInput is an input type that accepts NetworkRoutingConfigResponseArgs, NetworkRoutingConfigResponsePtr and NetworkRoutingConfigResponsePtrOutput values.
// You can construct a concrete instance of `NetworkRoutingConfigResponsePtrInput` via:
//
//          NetworkRoutingConfigResponseArgs{...}
//
//  or:
//
//          nil
type NetworkRoutingConfigResponsePtrInput interface {
	pulumi.Input

	ToNetworkRoutingConfigResponsePtrOutput() NetworkRoutingConfigResponsePtrOutput
	ToNetworkRoutingConfigResponsePtrOutputWithContext(context.Context) NetworkRoutingConfigResponsePtrOutput
}

type networkRoutingConfigResponsePtrType NetworkRoutingConfigResponseArgs

func NetworkRoutingConfigResponsePtr(v *NetworkRoutingConfigResponseArgs) NetworkRoutingConfigResponsePtrInput {
	return (*networkRoutingConfigResponsePtrType)(v)
}

func (*networkRoutingConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkRoutingConfigResponse)(nil)).Elem()
}

func (i *networkRoutingConfigResponsePtrType) ToNetworkRoutingConfigResponsePtrOutput() NetworkRoutingConfigResponsePtrOutput {
	return i.ToNetworkRoutingConfigResponsePtrOutputWithContext(context.Background())
}

func (i *networkRoutingConfigResponsePtrType) ToNetworkRoutingConfigResponsePtrOutputWithContext(ctx context.Context) NetworkRoutingConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRoutingConfigResponsePtrOutput)
}

// A routing configuration attached to a network resource. The message includes the list of routers associated with the network, and a flag indicating the type of routing behavior to enforce network-wide.
type NetworkRoutingConfigResponseOutput struct{ *pulumi.OutputState }

func (NetworkRoutingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkRoutingConfigResponse)(nil)).Elem()
}

func (o NetworkRoutingConfigResponseOutput) ToNetworkRoutingConfigResponseOutput() NetworkRoutingConfigResponseOutput {
	return o
}

func (o NetworkRoutingConfigResponseOutput) ToNetworkRoutingConfigResponseOutputWithContext(ctx context.Context) NetworkRoutingConfigResponseOutput {
	return o
}

func (o NetworkRoutingConfigResponseOutput) ToNetworkRoutingConfigResponsePtrOutput() NetworkRoutingConfigResponsePtrOutput {
	return o.ToNetworkRoutingConfigResponsePtrOutputWithContext(context.Background())
}

func (o NetworkRoutingConfigResponseOutput) ToNetworkRoutingConfigResponsePtrOutputWithContext(ctx context.Context) NetworkRoutingConfigResponsePtrOutput {
	return o.ApplyT(func(v NetworkRoutingConfigResponse) *NetworkRoutingConfigResponse {
		return &v
	}).(NetworkRoutingConfigResponsePtrOutput)
}

// The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions.
func (o NetworkRoutingConfigResponseOutput) RoutingMode() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkRoutingConfigResponse) string { return v.RoutingMode }).(pulumi.StringOutput)
}

type NetworkRoutingConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkRoutingConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkRoutingConfigResponse)(nil)).Elem()
}

func (o NetworkRoutingConfigResponsePtrOutput) ToNetworkRoutingConfigResponsePtrOutput() NetworkRoutingConfigResponsePtrOutput {
	return o
}

func (o NetworkRoutingConfigResponsePtrOutput) ToNetworkRoutingConfigResponsePtrOutputWithContext(ctx context.Context) NetworkRoutingConfigResponsePtrOutput {
	return o
}

func (o NetworkRoutingConfigResponsePtrOutput) Elem() NetworkRoutingConfigResponseOutput {
	return o.ApplyT(func(v *NetworkRoutingConfigResponse) NetworkRoutingConfigResponse { return *v }).(NetworkRoutingConfigResponseOutput)
}

// The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions.
func (o NetworkRoutingConfigResponsePtrOutput) RoutingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkRoutingConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RoutingMode
	}).(pulumi.StringPtrOutput)
}

type NodeGroupAutoscalingPolicy struct {
	// The maximum number of nodes that the group should have. Must be set if autoscaling is enabled. Maximum value allowed is 100.
	MaxNodes *int `pulumi:"maxNodes"`
	// The minimum number of nodes that the group should have.
	MinNodes *int `pulumi:"minNodes"`
	// The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see Autoscaler modes.
	Mode *string `pulumi:"mode"`
}

// NodeGroupAutoscalingPolicyInput is an input type that accepts NodeGroupAutoscalingPolicyArgs and NodeGroupAutoscalingPolicyOutput values.
// You can construct a concrete instance of `NodeGroupAutoscalingPolicyInput` via:
//
//          NodeGroupAutoscalingPolicyArgs{...}
type NodeGroupAutoscalingPolicyInput interface {
	pulumi.Input

	ToNodeGroupAutoscalingPolicyOutput() NodeGroupAutoscalingPolicyOutput
	ToNodeGroupAutoscalingPolicyOutputWithContext(context.Context) NodeGroupAutoscalingPolicyOutput
}

type NodeGroupAutoscalingPolicyArgs struct {
	// The maximum number of nodes that the group should have. Must be set if autoscaling is enabled. Maximum value allowed is 100.
	MaxNodes pulumi.IntPtrInput `pulumi:"maxNodes"`
	// The minimum number of nodes that the group should have.
	MinNodes pulumi.IntPtrInput `pulumi:"minNodes"`
	// The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see Autoscaler modes.
	Mode *NodeGroupAutoscalingPolicyMode `pulumi:"mode"`
}

func (NodeGroupAutoscalingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupAutoscalingPolicy)(nil)).Elem()
}

func (i NodeGroupAutoscalingPolicyArgs) ToNodeGroupAutoscalingPolicyOutput() NodeGroupAutoscalingPolicyOutput {
	return i.ToNodeGroupAutoscalingPolicyOutputWithContext(context.Background())
}

func (i NodeGroupAutoscalingPolicyArgs) ToNodeGroupAutoscalingPolicyOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupAutoscalingPolicyOutput)
}

func (i NodeGroupAutoscalingPolicyArgs) ToNodeGroupAutoscalingPolicyPtrOutput() NodeGroupAutoscalingPolicyPtrOutput {
	return i.ToNodeGroupAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (i NodeGroupAutoscalingPolicyArgs) ToNodeGroupAutoscalingPolicyPtrOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupAutoscalingPolicyOutput).ToNodeGroupAutoscalingPolicyPtrOutputWithContext(ctx)
}

// NodeGroupAutoscalingPolicyPtrInput is an input type that accepts NodeGroupAutoscalingPolicyArgs, NodeGroupAutoscalingPolicyPtr and NodeGroupAutoscalingPolicyPtrOutput values.
// You can construct a concrete instance of `NodeGroupAutoscalingPolicyPtrInput` via:
//
//          NodeGroupAutoscalingPolicyArgs{...}
//
//  or:
//
//          nil
type NodeGroupAutoscalingPolicyPtrInput interface {
	pulumi.Input

	ToNodeGroupAutoscalingPolicyPtrOutput() NodeGroupAutoscalingPolicyPtrOutput
	ToNodeGroupAutoscalingPolicyPtrOutputWithContext(context.Context) NodeGroupAutoscalingPolicyPtrOutput
}

type nodeGroupAutoscalingPolicyPtrType NodeGroupAutoscalingPolicyArgs

func NodeGroupAutoscalingPolicyPtr(v *NodeGroupAutoscalingPolicyArgs) NodeGroupAutoscalingPolicyPtrInput {
	return (*nodeGroupAutoscalingPolicyPtrType)(v)
}

func (*nodeGroupAutoscalingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupAutoscalingPolicy)(nil)).Elem()
}

func (i *nodeGroupAutoscalingPolicyPtrType) ToNodeGroupAutoscalingPolicyPtrOutput() NodeGroupAutoscalingPolicyPtrOutput {
	return i.ToNodeGroupAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (i *nodeGroupAutoscalingPolicyPtrType) ToNodeGroupAutoscalingPolicyPtrOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupAutoscalingPolicyPtrOutput)
}

type NodeGroupAutoscalingPolicyOutput struct{ *pulumi.OutputState }

func (NodeGroupAutoscalingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupAutoscalingPolicy)(nil)).Elem()
}

func (o NodeGroupAutoscalingPolicyOutput) ToNodeGroupAutoscalingPolicyOutput() NodeGroupAutoscalingPolicyOutput {
	return o
}

func (o NodeGroupAutoscalingPolicyOutput) ToNodeGroupAutoscalingPolicyOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyOutput {
	return o
}

func (o NodeGroupAutoscalingPolicyOutput) ToNodeGroupAutoscalingPolicyPtrOutput() NodeGroupAutoscalingPolicyPtrOutput {
	return o.ToNodeGroupAutoscalingPolicyPtrOutputWithContext(context.Background())
}

func (o NodeGroupAutoscalingPolicyOutput) ToNodeGroupAutoscalingPolicyPtrOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyPtrOutput {
	return o.ApplyT(func(v NodeGroupAutoscalingPolicy) *NodeGroupAutoscalingPolicy {
		return &v
	}).(NodeGroupAutoscalingPolicyPtrOutput)
}

// The maximum number of nodes that the group should have. Must be set if autoscaling is enabled. Maximum value allowed is 100.
func (o NodeGroupAutoscalingPolicyOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeGroupAutoscalingPolicy) *int { return v.MaxNodes }).(pulumi.IntPtrOutput)
}

// The minimum number of nodes that the group should have.
func (o NodeGroupAutoscalingPolicyOutput) MinNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeGroupAutoscalingPolicy) *int { return v.MinNodes }).(pulumi.IntPtrOutput)
}

// The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see Autoscaler modes.
func (o NodeGroupAutoscalingPolicyOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGroupAutoscalingPolicy) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type NodeGroupAutoscalingPolicyPtrOutput struct{ *pulumi.OutputState }

func (NodeGroupAutoscalingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupAutoscalingPolicy)(nil)).Elem()
}

func (o NodeGroupAutoscalingPolicyPtrOutput) ToNodeGroupAutoscalingPolicyPtrOutput() NodeGroupAutoscalingPolicyPtrOutput {
	return o
}

func (o NodeGroupAutoscalingPolicyPtrOutput) ToNodeGroupAutoscalingPolicyPtrOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyPtrOutput {
	return o
}

func (o NodeGroupAutoscalingPolicyPtrOutput) Elem() NodeGroupAutoscalingPolicyOutput {
	return o.ApplyT(func(v *NodeGroupAutoscalingPolicy) NodeGroupAutoscalingPolicy { return *v }).(NodeGroupAutoscalingPolicyOutput)
}

// The maximum number of nodes that the group should have. Must be set if autoscaling is enabled. Maximum value allowed is 100.
func (o NodeGroupAutoscalingPolicyPtrOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeGroupAutoscalingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodes
	}).(pulumi.IntPtrOutput)
}

// The minimum number of nodes that the group should have.
func (o NodeGroupAutoscalingPolicyPtrOutput) MinNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeGroupAutoscalingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MinNodes
	}).(pulumi.IntPtrOutput)
}

// The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see Autoscaler modes.
func (o NodeGroupAutoscalingPolicyPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroupAutoscalingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

type NodeGroupAutoscalingPolicyResponse struct {
	// The maximum number of nodes that the group should have. Must be set if autoscaling is enabled. Maximum value allowed is 100.
	MaxNodes int `pulumi:"maxNodes"`
	// The minimum number of nodes that the group should have.
	MinNodes int `pulumi:"minNodes"`
	// The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see Autoscaler modes.
	Mode string `pulumi:"mode"`
}

// NodeGroupAutoscalingPolicyResponseInput is an input type that accepts NodeGroupAutoscalingPolicyResponseArgs and NodeGroupAutoscalingPolicyResponseOutput values.
// You can construct a concrete instance of `NodeGroupAutoscalingPolicyResponseInput` via:
//
//          NodeGroupAutoscalingPolicyResponseArgs{...}
type NodeGroupAutoscalingPolicyResponseInput interface {
	pulumi.Input

	ToNodeGroupAutoscalingPolicyResponseOutput() NodeGroupAutoscalingPolicyResponseOutput
	ToNodeGroupAutoscalingPolicyResponseOutputWithContext(context.Context) NodeGroupAutoscalingPolicyResponseOutput
}

type NodeGroupAutoscalingPolicyResponseArgs struct {
	// The maximum number of nodes that the group should have. Must be set if autoscaling is enabled. Maximum value allowed is 100.
	MaxNodes pulumi.IntInput `pulumi:"maxNodes"`
	// The minimum number of nodes that the group should have.
	MinNodes pulumi.IntInput `pulumi:"minNodes"`
	// The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see Autoscaler modes.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (NodeGroupAutoscalingPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupAutoscalingPolicyResponse)(nil)).Elem()
}

func (i NodeGroupAutoscalingPolicyResponseArgs) ToNodeGroupAutoscalingPolicyResponseOutput() NodeGroupAutoscalingPolicyResponseOutput {
	return i.ToNodeGroupAutoscalingPolicyResponseOutputWithContext(context.Background())
}

func (i NodeGroupAutoscalingPolicyResponseArgs) ToNodeGroupAutoscalingPolicyResponseOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupAutoscalingPolicyResponseOutput)
}

func (i NodeGroupAutoscalingPolicyResponseArgs) ToNodeGroupAutoscalingPolicyResponsePtrOutput() NodeGroupAutoscalingPolicyResponsePtrOutput {
	return i.ToNodeGroupAutoscalingPolicyResponsePtrOutputWithContext(context.Background())
}

func (i NodeGroupAutoscalingPolicyResponseArgs) ToNodeGroupAutoscalingPolicyResponsePtrOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupAutoscalingPolicyResponseOutput).ToNodeGroupAutoscalingPolicyResponsePtrOutputWithContext(ctx)
}

// NodeGroupAutoscalingPolicyResponsePtrInput is an input type that accepts NodeGroupAutoscalingPolicyResponseArgs, NodeGroupAutoscalingPolicyResponsePtr and NodeGroupAutoscalingPolicyResponsePtrOutput values.
// You can construct a concrete instance of `NodeGroupAutoscalingPolicyResponsePtrInput` via:
//
//          NodeGroupAutoscalingPolicyResponseArgs{...}
//
//  or:
//
//          nil
type NodeGroupAutoscalingPolicyResponsePtrInput interface {
	pulumi.Input

	ToNodeGroupAutoscalingPolicyResponsePtrOutput() NodeGroupAutoscalingPolicyResponsePtrOutput
	ToNodeGroupAutoscalingPolicyResponsePtrOutputWithContext(context.Context) NodeGroupAutoscalingPolicyResponsePtrOutput
}

type nodeGroupAutoscalingPolicyResponsePtrType NodeGroupAutoscalingPolicyResponseArgs

func NodeGroupAutoscalingPolicyResponsePtr(v *NodeGroupAutoscalingPolicyResponseArgs) NodeGroupAutoscalingPolicyResponsePtrInput {
	return (*nodeGroupAutoscalingPolicyResponsePtrType)(v)
}

func (*nodeGroupAutoscalingPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupAutoscalingPolicyResponse)(nil)).Elem()
}

func (i *nodeGroupAutoscalingPolicyResponsePtrType) ToNodeGroupAutoscalingPolicyResponsePtrOutput() NodeGroupAutoscalingPolicyResponsePtrOutput {
	return i.ToNodeGroupAutoscalingPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *nodeGroupAutoscalingPolicyResponsePtrType) ToNodeGroupAutoscalingPolicyResponsePtrOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupAutoscalingPolicyResponsePtrOutput)
}

type NodeGroupAutoscalingPolicyResponseOutput struct{ *pulumi.OutputState }

func (NodeGroupAutoscalingPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupAutoscalingPolicyResponse)(nil)).Elem()
}

func (o NodeGroupAutoscalingPolicyResponseOutput) ToNodeGroupAutoscalingPolicyResponseOutput() NodeGroupAutoscalingPolicyResponseOutput {
	return o
}

func (o NodeGroupAutoscalingPolicyResponseOutput) ToNodeGroupAutoscalingPolicyResponseOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyResponseOutput {
	return o
}

func (o NodeGroupAutoscalingPolicyResponseOutput) ToNodeGroupAutoscalingPolicyResponsePtrOutput() NodeGroupAutoscalingPolicyResponsePtrOutput {
	return o.ToNodeGroupAutoscalingPolicyResponsePtrOutputWithContext(context.Background())
}

func (o NodeGroupAutoscalingPolicyResponseOutput) ToNodeGroupAutoscalingPolicyResponsePtrOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyResponsePtrOutput {
	return o.ApplyT(func(v NodeGroupAutoscalingPolicyResponse) *NodeGroupAutoscalingPolicyResponse {
		return &v
	}).(NodeGroupAutoscalingPolicyResponsePtrOutput)
}

// The maximum number of nodes that the group should have. Must be set if autoscaling is enabled. Maximum value allowed is 100.
func (o NodeGroupAutoscalingPolicyResponseOutput) MaxNodes() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupAutoscalingPolicyResponse) int { return v.MaxNodes }).(pulumi.IntOutput)
}

// The minimum number of nodes that the group should have.
func (o NodeGroupAutoscalingPolicyResponseOutput) MinNodes() pulumi.IntOutput {
	return o.ApplyT(func(v NodeGroupAutoscalingPolicyResponse) int { return v.MinNodes }).(pulumi.IntOutput)
}

// The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see Autoscaler modes.
func (o NodeGroupAutoscalingPolicyResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v NodeGroupAutoscalingPolicyResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type NodeGroupAutoscalingPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (NodeGroupAutoscalingPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupAutoscalingPolicyResponse)(nil)).Elem()
}

func (o NodeGroupAutoscalingPolicyResponsePtrOutput) ToNodeGroupAutoscalingPolicyResponsePtrOutput() NodeGroupAutoscalingPolicyResponsePtrOutput {
	return o
}

func (o NodeGroupAutoscalingPolicyResponsePtrOutput) ToNodeGroupAutoscalingPolicyResponsePtrOutputWithContext(ctx context.Context) NodeGroupAutoscalingPolicyResponsePtrOutput {
	return o
}

func (o NodeGroupAutoscalingPolicyResponsePtrOutput) Elem() NodeGroupAutoscalingPolicyResponseOutput {
	return o.ApplyT(func(v *NodeGroupAutoscalingPolicyResponse) NodeGroupAutoscalingPolicyResponse { return *v }).(NodeGroupAutoscalingPolicyResponseOutput)
}

// The maximum number of nodes that the group should have. Must be set if autoscaling is enabled. Maximum value allowed is 100.
func (o NodeGroupAutoscalingPolicyResponsePtrOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeGroupAutoscalingPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxNodes
	}).(pulumi.IntPtrOutput)
}

// The minimum number of nodes that the group should have.
func (o NodeGroupAutoscalingPolicyResponsePtrOutput) MinNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeGroupAutoscalingPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MinNodes
	}).(pulumi.IntPtrOutput)
}

// The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see Autoscaler modes.
func (o NodeGroupAutoscalingPolicyResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroupAutoscalingPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Time window specified for daily maintenance operations. GCE's internal maintenance will be performed within this window.
type NodeGroupMaintenanceWindow struct {
	// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
	StartTime *string `pulumi:"startTime"`
}

// NodeGroupMaintenanceWindowInput is an input type that accepts NodeGroupMaintenanceWindowArgs and NodeGroupMaintenanceWindowOutput values.
// You can construct a concrete instance of `NodeGroupMaintenanceWindowInput` via:
//
//          NodeGroupMaintenanceWindowArgs{...}
type NodeGroupMaintenanceWindowInput interface {
	pulumi.Input

	ToNodeGroupMaintenanceWindowOutput() NodeGroupMaintenanceWindowOutput
	ToNodeGroupMaintenanceWindowOutputWithContext(context.Context) NodeGroupMaintenanceWindowOutput
}

// Time window specified for daily maintenance operations. GCE's internal maintenance will be performed within this window.
type NodeGroupMaintenanceWindowArgs struct {
	// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (NodeGroupMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupMaintenanceWindow)(nil)).Elem()
}

func (i NodeGroupMaintenanceWindowArgs) ToNodeGroupMaintenanceWindowOutput() NodeGroupMaintenanceWindowOutput {
	return i.ToNodeGroupMaintenanceWindowOutputWithContext(context.Background())
}

func (i NodeGroupMaintenanceWindowArgs) ToNodeGroupMaintenanceWindowOutputWithContext(ctx context.Context) NodeGroupMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupMaintenanceWindowOutput)
}

func (i NodeGroupMaintenanceWindowArgs) ToNodeGroupMaintenanceWindowPtrOutput() NodeGroupMaintenanceWindowPtrOutput {
	return i.ToNodeGroupMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i NodeGroupMaintenanceWindowArgs) ToNodeGroupMaintenanceWindowPtrOutputWithContext(ctx context.Context) NodeGroupMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupMaintenanceWindowOutput).ToNodeGroupMaintenanceWindowPtrOutputWithContext(ctx)
}

// NodeGroupMaintenanceWindowPtrInput is an input type that accepts NodeGroupMaintenanceWindowArgs, NodeGroupMaintenanceWindowPtr and NodeGroupMaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `NodeGroupMaintenanceWindowPtrInput` via:
//
//          NodeGroupMaintenanceWindowArgs{...}
//
//  or:
//
//          nil
type NodeGroupMaintenanceWindowPtrInput interface {
	pulumi.Input

	ToNodeGroupMaintenanceWindowPtrOutput() NodeGroupMaintenanceWindowPtrOutput
	ToNodeGroupMaintenanceWindowPtrOutputWithContext(context.Context) NodeGroupMaintenanceWindowPtrOutput
}

type nodeGroupMaintenanceWindowPtrType NodeGroupMaintenanceWindowArgs

func NodeGroupMaintenanceWindowPtr(v *NodeGroupMaintenanceWindowArgs) NodeGroupMaintenanceWindowPtrInput {
	return (*nodeGroupMaintenanceWindowPtrType)(v)
}

func (*nodeGroupMaintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupMaintenanceWindow)(nil)).Elem()
}

func (i *nodeGroupMaintenanceWindowPtrType) ToNodeGroupMaintenanceWindowPtrOutput() NodeGroupMaintenanceWindowPtrOutput {
	return i.ToNodeGroupMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *nodeGroupMaintenanceWindowPtrType) ToNodeGroupMaintenanceWindowPtrOutputWithContext(ctx context.Context) NodeGroupMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupMaintenanceWindowPtrOutput)
}

// Time window specified for daily maintenance operations. GCE's internal maintenance will be performed within this window.
type NodeGroupMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (NodeGroupMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupMaintenanceWindow)(nil)).Elem()
}

func (o NodeGroupMaintenanceWindowOutput) ToNodeGroupMaintenanceWindowOutput() NodeGroupMaintenanceWindowOutput {
	return o
}

func (o NodeGroupMaintenanceWindowOutput) ToNodeGroupMaintenanceWindowOutputWithContext(ctx context.Context) NodeGroupMaintenanceWindowOutput {
	return o
}

func (o NodeGroupMaintenanceWindowOutput) ToNodeGroupMaintenanceWindowPtrOutput() NodeGroupMaintenanceWindowPtrOutput {
	return o.ToNodeGroupMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o NodeGroupMaintenanceWindowOutput) ToNodeGroupMaintenanceWindowPtrOutputWithContext(ctx context.Context) NodeGroupMaintenanceWindowPtrOutput {
	return o.ApplyT(func(v NodeGroupMaintenanceWindow) *NodeGroupMaintenanceWindow {
		return &v
	}).(NodeGroupMaintenanceWindowPtrOutput)
}

// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
func (o NodeGroupMaintenanceWindowOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGroupMaintenanceWindow) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type NodeGroupMaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (NodeGroupMaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupMaintenanceWindow)(nil)).Elem()
}

func (o NodeGroupMaintenanceWindowPtrOutput) ToNodeGroupMaintenanceWindowPtrOutput() NodeGroupMaintenanceWindowPtrOutput {
	return o
}

func (o NodeGroupMaintenanceWindowPtrOutput) ToNodeGroupMaintenanceWindowPtrOutputWithContext(ctx context.Context) NodeGroupMaintenanceWindowPtrOutput {
	return o
}

func (o NodeGroupMaintenanceWindowPtrOutput) Elem() NodeGroupMaintenanceWindowOutput {
	return o.ApplyT(func(v *NodeGroupMaintenanceWindow) NodeGroupMaintenanceWindow { return *v }).(NodeGroupMaintenanceWindowOutput)
}

// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
func (o NodeGroupMaintenanceWindowPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroupMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Time window specified for daily maintenance operations. GCE's internal maintenance will be performed within this window.
type NodeGroupMaintenanceWindowResponse struct {
	// [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario.
	MaintenanceDuration DurationResponse `pulumi:"maintenanceDuration"`
	// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
	StartTime string `pulumi:"startTime"`
}

// NodeGroupMaintenanceWindowResponseInput is an input type that accepts NodeGroupMaintenanceWindowResponseArgs and NodeGroupMaintenanceWindowResponseOutput values.
// You can construct a concrete instance of `NodeGroupMaintenanceWindowResponseInput` via:
//
//          NodeGroupMaintenanceWindowResponseArgs{...}
type NodeGroupMaintenanceWindowResponseInput interface {
	pulumi.Input

	ToNodeGroupMaintenanceWindowResponseOutput() NodeGroupMaintenanceWindowResponseOutput
	ToNodeGroupMaintenanceWindowResponseOutputWithContext(context.Context) NodeGroupMaintenanceWindowResponseOutput
}

// Time window specified for daily maintenance operations. GCE's internal maintenance will be performed within this window.
type NodeGroupMaintenanceWindowResponseArgs struct {
	// [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario.
	MaintenanceDuration DurationResponseInput `pulumi:"maintenanceDuration"`
	// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (NodeGroupMaintenanceWindowResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupMaintenanceWindowResponse)(nil)).Elem()
}

func (i NodeGroupMaintenanceWindowResponseArgs) ToNodeGroupMaintenanceWindowResponseOutput() NodeGroupMaintenanceWindowResponseOutput {
	return i.ToNodeGroupMaintenanceWindowResponseOutputWithContext(context.Background())
}

func (i NodeGroupMaintenanceWindowResponseArgs) ToNodeGroupMaintenanceWindowResponseOutputWithContext(ctx context.Context) NodeGroupMaintenanceWindowResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupMaintenanceWindowResponseOutput)
}

func (i NodeGroupMaintenanceWindowResponseArgs) ToNodeGroupMaintenanceWindowResponsePtrOutput() NodeGroupMaintenanceWindowResponsePtrOutput {
	return i.ToNodeGroupMaintenanceWindowResponsePtrOutputWithContext(context.Background())
}

func (i NodeGroupMaintenanceWindowResponseArgs) ToNodeGroupMaintenanceWindowResponsePtrOutputWithContext(ctx context.Context) NodeGroupMaintenanceWindowResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupMaintenanceWindowResponseOutput).ToNodeGroupMaintenanceWindowResponsePtrOutputWithContext(ctx)
}

// NodeGroupMaintenanceWindowResponsePtrInput is an input type that accepts NodeGroupMaintenanceWindowResponseArgs, NodeGroupMaintenanceWindowResponsePtr and NodeGroupMaintenanceWindowResponsePtrOutput values.
// You can construct a concrete instance of `NodeGroupMaintenanceWindowResponsePtrInput` via:
//
//          NodeGroupMaintenanceWindowResponseArgs{...}
//
//  or:
//
//          nil
type NodeGroupMaintenanceWindowResponsePtrInput interface {
	pulumi.Input

	ToNodeGroupMaintenanceWindowResponsePtrOutput() NodeGroupMaintenanceWindowResponsePtrOutput
	ToNodeGroupMaintenanceWindowResponsePtrOutputWithContext(context.Context) NodeGroupMaintenanceWindowResponsePtrOutput
}

type nodeGroupMaintenanceWindowResponsePtrType NodeGroupMaintenanceWindowResponseArgs

func NodeGroupMaintenanceWindowResponsePtr(v *NodeGroupMaintenanceWindowResponseArgs) NodeGroupMaintenanceWindowResponsePtrInput {
	return (*nodeGroupMaintenanceWindowResponsePtrType)(v)
}

func (*nodeGroupMaintenanceWindowResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupMaintenanceWindowResponse)(nil)).Elem()
}

func (i *nodeGroupMaintenanceWindowResponsePtrType) ToNodeGroupMaintenanceWindowResponsePtrOutput() NodeGroupMaintenanceWindowResponsePtrOutput {
	return i.ToNodeGroupMaintenanceWindowResponsePtrOutputWithContext(context.Background())
}

func (i *nodeGroupMaintenanceWindowResponsePtrType) ToNodeGroupMaintenanceWindowResponsePtrOutputWithContext(ctx context.Context) NodeGroupMaintenanceWindowResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGroupMaintenanceWindowResponsePtrOutput)
}

// Time window specified for daily maintenance operations. GCE's internal maintenance will be performed within this window.
type NodeGroupMaintenanceWindowResponseOutput struct{ *pulumi.OutputState }

func (NodeGroupMaintenanceWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGroupMaintenanceWindowResponse)(nil)).Elem()
}

func (o NodeGroupMaintenanceWindowResponseOutput) ToNodeGroupMaintenanceWindowResponseOutput() NodeGroupMaintenanceWindowResponseOutput {
	return o
}

func (o NodeGroupMaintenanceWindowResponseOutput) ToNodeGroupMaintenanceWindowResponseOutputWithContext(ctx context.Context) NodeGroupMaintenanceWindowResponseOutput {
	return o
}

func (o NodeGroupMaintenanceWindowResponseOutput) ToNodeGroupMaintenanceWindowResponsePtrOutput() NodeGroupMaintenanceWindowResponsePtrOutput {
	return o.ToNodeGroupMaintenanceWindowResponsePtrOutputWithContext(context.Background())
}

func (o NodeGroupMaintenanceWindowResponseOutput) ToNodeGroupMaintenanceWindowResponsePtrOutputWithContext(ctx context.Context) NodeGroupMaintenanceWindowResponsePtrOutput {
	return o.ApplyT(func(v NodeGroupMaintenanceWindowResponse) *NodeGroupMaintenanceWindowResponse {
		return &v
	}).(NodeGroupMaintenanceWindowResponsePtrOutput)
}

// [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario.
func (o NodeGroupMaintenanceWindowResponseOutput) MaintenanceDuration() DurationResponseOutput {
	return o.ApplyT(func(v NodeGroupMaintenanceWindowResponse) DurationResponse { return v.MaintenanceDuration }).(DurationResponseOutput)
}

// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
func (o NodeGroupMaintenanceWindowResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v NodeGroupMaintenanceWindowResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

type NodeGroupMaintenanceWindowResponsePtrOutput struct{ *pulumi.OutputState }

func (NodeGroupMaintenanceWindowResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGroupMaintenanceWindowResponse)(nil)).Elem()
}

func (o NodeGroupMaintenanceWindowResponsePtrOutput) ToNodeGroupMaintenanceWindowResponsePtrOutput() NodeGroupMaintenanceWindowResponsePtrOutput {
	return o
}

func (o NodeGroupMaintenanceWindowResponsePtrOutput) ToNodeGroupMaintenanceWindowResponsePtrOutputWithContext(ctx context.Context) NodeGroupMaintenanceWindowResponsePtrOutput {
	return o
}

func (o NodeGroupMaintenanceWindowResponsePtrOutput) Elem() NodeGroupMaintenanceWindowResponseOutput {
	return o.ApplyT(func(v *NodeGroupMaintenanceWindowResponse) NodeGroupMaintenanceWindowResponse { return *v }).(NodeGroupMaintenanceWindowResponseOutput)
}

// [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario.
func (o NodeGroupMaintenanceWindowResponsePtrOutput) MaintenanceDuration() DurationResponsePtrOutput {
	return o.ApplyT(func(v *NodeGroupMaintenanceWindowResponse) *DurationResponse {
		if v == nil {
			return nil
		}
		return &v.MaintenanceDuration
	}).(DurationResponsePtrOutput)
}

// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
func (o NodeGroupMaintenanceWindowResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGroupMaintenanceWindowResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

type NodeTemplateNodeTypeFlexibility struct {
	Cpus     *string `pulumi:"cpus"`
	LocalSsd *string `pulumi:"localSsd"`
	Memory   *string `pulumi:"memory"`
}

// NodeTemplateNodeTypeFlexibilityInput is an input type that accepts NodeTemplateNodeTypeFlexibilityArgs and NodeTemplateNodeTypeFlexibilityOutput values.
// You can construct a concrete instance of `NodeTemplateNodeTypeFlexibilityInput` via:
//
//          NodeTemplateNodeTypeFlexibilityArgs{...}
type NodeTemplateNodeTypeFlexibilityInput interface {
	pulumi.Input

	ToNodeTemplateNodeTypeFlexibilityOutput() NodeTemplateNodeTypeFlexibilityOutput
	ToNodeTemplateNodeTypeFlexibilityOutputWithContext(context.Context) NodeTemplateNodeTypeFlexibilityOutput
}

type NodeTemplateNodeTypeFlexibilityArgs struct {
	Cpus     pulumi.StringPtrInput `pulumi:"cpus"`
	LocalSsd pulumi.StringPtrInput `pulumi:"localSsd"`
	Memory   pulumi.StringPtrInput `pulumi:"memory"`
}

func (NodeTemplateNodeTypeFlexibilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTemplateNodeTypeFlexibility)(nil)).Elem()
}

func (i NodeTemplateNodeTypeFlexibilityArgs) ToNodeTemplateNodeTypeFlexibilityOutput() NodeTemplateNodeTypeFlexibilityOutput {
	return i.ToNodeTemplateNodeTypeFlexibilityOutputWithContext(context.Background())
}

func (i NodeTemplateNodeTypeFlexibilityArgs) ToNodeTemplateNodeTypeFlexibilityOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTemplateNodeTypeFlexibilityOutput)
}

func (i NodeTemplateNodeTypeFlexibilityArgs) ToNodeTemplateNodeTypeFlexibilityPtrOutput() NodeTemplateNodeTypeFlexibilityPtrOutput {
	return i.ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(context.Background())
}

func (i NodeTemplateNodeTypeFlexibilityArgs) ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTemplateNodeTypeFlexibilityOutput).ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(ctx)
}

// NodeTemplateNodeTypeFlexibilityPtrInput is an input type that accepts NodeTemplateNodeTypeFlexibilityArgs, NodeTemplateNodeTypeFlexibilityPtr and NodeTemplateNodeTypeFlexibilityPtrOutput values.
// You can construct a concrete instance of `NodeTemplateNodeTypeFlexibilityPtrInput` via:
//
//          NodeTemplateNodeTypeFlexibilityArgs{...}
//
//  or:
//
//          nil
type NodeTemplateNodeTypeFlexibilityPtrInput interface {
	pulumi.Input

	ToNodeTemplateNodeTypeFlexibilityPtrOutput() NodeTemplateNodeTypeFlexibilityPtrOutput
	ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(context.Context) NodeTemplateNodeTypeFlexibilityPtrOutput
}

type nodeTemplateNodeTypeFlexibilityPtrType NodeTemplateNodeTypeFlexibilityArgs

func NodeTemplateNodeTypeFlexibilityPtr(v *NodeTemplateNodeTypeFlexibilityArgs) NodeTemplateNodeTypeFlexibilityPtrInput {
	return (*nodeTemplateNodeTypeFlexibilityPtrType)(v)
}

func (*nodeTemplateNodeTypeFlexibilityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeTemplateNodeTypeFlexibility)(nil)).Elem()
}

func (i *nodeTemplateNodeTypeFlexibilityPtrType) ToNodeTemplateNodeTypeFlexibilityPtrOutput() NodeTemplateNodeTypeFlexibilityPtrOutput {
	return i.ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(context.Background())
}

func (i *nodeTemplateNodeTypeFlexibilityPtrType) ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTemplateNodeTypeFlexibilityPtrOutput)
}

type NodeTemplateNodeTypeFlexibilityOutput struct{ *pulumi.OutputState }

func (NodeTemplateNodeTypeFlexibilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTemplateNodeTypeFlexibility)(nil)).Elem()
}

func (o NodeTemplateNodeTypeFlexibilityOutput) ToNodeTemplateNodeTypeFlexibilityOutput() NodeTemplateNodeTypeFlexibilityOutput {
	return o
}

func (o NodeTemplateNodeTypeFlexibilityOutput) ToNodeTemplateNodeTypeFlexibilityOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityOutput {
	return o
}

func (o NodeTemplateNodeTypeFlexibilityOutput) ToNodeTemplateNodeTypeFlexibilityPtrOutput() NodeTemplateNodeTypeFlexibilityPtrOutput {
	return o.ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(context.Background())
}

func (o NodeTemplateNodeTypeFlexibilityOutput) ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityPtrOutput {
	return o.ApplyT(func(v NodeTemplateNodeTypeFlexibility) *NodeTemplateNodeTypeFlexibility {
		return &v
	}).(NodeTemplateNodeTypeFlexibilityPtrOutput)
}
func (o NodeTemplateNodeTypeFlexibilityOutput) Cpus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTemplateNodeTypeFlexibility) *string { return v.Cpus }).(pulumi.StringPtrOutput)
}

func (o NodeTemplateNodeTypeFlexibilityOutput) LocalSsd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTemplateNodeTypeFlexibility) *string { return v.LocalSsd }).(pulumi.StringPtrOutput)
}

func (o NodeTemplateNodeTypeFlexibilityOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTemplateNodeTypeFlexibility) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

type NodeTemplateNodeTypeFlexibilityPtrOutput struct{ *pulumi.OutputState }

func (NodeTemplateNodeTypeFlexibilityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeTemplateNodeTypeFlexibility)(nil)).Elem()
}

func (o NodeTemplateNodeTypeFlexibilityPtrOutput) ToNodeTemplateNodeTypeFlexibilityPtrOutput() NodeTemplateNodeTypeFlexibilityPtrOutput {
	return o
}

func (o NodeTemplateNodeTypeFlexibilityPtrOutput) ToNodeTemplateNodeTypeFlexibilityPtrOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityPtrOutput {
	return o
}

func (o NodeTemplateNodeTypeFlexibilityPtrOutput) Elem() NodeTemplateNodeTypeFlexibilityOutput {
	return o.ApplyT(func(v *NodeTemplateNodeTypeFlexibility) NodeTemplateNodeTypeFlexibility { return *v }).(NodeTemplateNodeTypeFlexibilityOutput)
}

func (o NodeTemplateNodeTypeFlexibilityPtrOutput) Cpus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTemplateNodeTypeFlexibility) *string {
		if v == nil {
			return nil
		}
		return v.Cpus
	}).(pulumi.StringPtrOutput)
}

func (o NodeTemplateNodeTypeFlexibilityPtrOutput) LocalSsd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTemplateNodeTypeFlexibility) *string {
		if v == nil {
			return nil
		}
		return v.LocalSsd
	}).(pulumi.StringPtrOutput)
}

func (o NodeTemplateNodeTypeFlexibilityPtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTemplateNodeTypeFlexibility) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

type NodeTemplateNodeTypeFlexibilityResponse struct {
	Cpus     string `pulumi:"cpus"`
	LocalSsd string `pulumi:"localSsd"`
	Memory   string `pulumi:"memory"`
}

// NodeTemplateNodeTypeFlexibilityResponseInput is an input type that accepts NodeTemplateNodeTypeFlexibilityResponseArgs and NodeTemplateNodeTypeFlexibilityResponseOutput values.
// You can construct a concrete instance of `NodeTemplateNodeTypeFlexibilityResponseInput` via:
//
//          NodeTemplateNodeTypeFlexibilityResponseArgs{...}
type NodeTemplateNodeTypeFlexibilityResponseInput interface {
	pulumi.Input

	ToNodeTemplateNodeTypeFlexibilityResponseOutput() NodeTemplateNodeTypeFlexibilityResponseOutput
	ToNodeTemplateNodeTypeFlexibilityResponseOutputWithContext(context.Context) NodeTemplateNodeTypeFlexibilityResponseOutput
}

type NodeTemplateNodeTypeFlexibilityResponseArgs struct {
	Cpus     pulumi.StringInput `pulumi:"cpus"`
	LocalSsd pulumi.StringInput `pulumi:"localSsd"`
	Memory   pulumi.StringInput `pulumi:"memory"`
}

func (NodeTemplateNodeTypeFlexibilityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTemplateNodeTypeFlexibilityResponse)(nil)).Elem()
}

func (i NodeTemplateNodeTypeFlexibilityResponseArgs) ToNodeTemplateNodeTypeFlexibilityResponseOutput() NodeTemplateNodeTypeFlexibilityResponseOutput {
	return i.ToNodeTemplateNodeTypeFlexibilityResponseOutputWithContext(context.Background())
}

func (i NodeTemplateNodeTypeFlexibilityResponseArgs) ToNodeTemplateNodeTypeFlexibilityResponseOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTemplateNodeTypeFlexibilityResponseOutput)
}

func (i NodeTemplateNodeTypeFlexibilityResponseArgs) ToNodeTemplateNodeTypeFlexibilityResponsePtrOutput() NodeTemplateNodeTypeFlexibilityResponsePtrOutput {
	return i.ToNodeTemplateNodeTypeFlexibilityResponsePtrOutputWithContext(context.Background())
}

func (i NodeTemplateNodeTypeFlexibilityResponseArgs) ToNodeTemplateNodeTypeFlexibilityResponsePtrOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTemplateNodeTypeFlexibilityResponseOutput).ToNodeTemplateNodeTypeFlexibilityResponsePtrOutputWithContext(ctx)
}

// NodeTemplateNodeTypeFlexibilityResponsePtrInput is an input type that accepts NodeTemplateNodeTypeFlexibilityResponseArgs, NodeTemplateNodeTypeFlexibilityResponsePtr and NodeTemplateNodeTypeFlexibilityResponsePtrOutput values.
// You can construct a concrete instance of `NodeTemplateNodeTypeFlexibilityResponsePtrInput` via:
//
//          NodeTemplateNodeTypeFlexibilityResponseArgs{...}
//
//  or:
//
//          nil
type NodeTemplateNodeTypeFlexibilityResponsePtrInput interface {
	pulumi.Input

	ToNodeTemplateNodeTypeFlexibilityResponsePtrOutput() NodeTemplateNodeTypeFlexibilityResponsePtrOutput
	ToNodeTemplateNodeTypeFlexibilityResponsePtrOutputWithContext(context.Context) NodeTemplateNodeTypeFlexibilityResponsePtrOutput
}

type nodeTemplateNodeTypeFlexibilityResponsePtrType NodeTemplateNodeTypeFlexibilityResponseArgs

func NodeTemplateNodeTypeFlexibilityResponsePtr(v *NodeTemplateNodeTypeFlexibilityResponseArgs) NodeTemplateNodeTypeFlexibilityResponsePtrInput {
	return (*nodeTemplateNodeTypeFlexibilityResponsePtrType)(v)
}

func (*nodeTemplateNodeTypeFlexibilityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeTemplateNodeTypeFlexibilityResponse)(nil)).Elem()
}

func (i *nodeTemplateNodeTypeFlexibilityResponsePtrType) ToNodeTemplateNodeTypeFlexibilityResponsePtrOutput() NodeTemplateNodeTypeFlexibilityResponsePtrOutput {
	return i.ToNodeTemplateNodeTypeFlexibilityResponsePtrOutputWithContext(context.Background())
}

func (i *nodeTemplateNodeTypeFlexibilityResponsePtrType) ToNodeTemplateNodeTypeFlexibilityResponsePtrOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTemplateNodeTypeFlexibilityResponsePtrOutput)
}

type NodeTemplateNodeTypeFlexibilityResponseOutput struct{ *pulumi.OutputState }

func (NodeTemplateNodeTypeFlexibilityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTemplateNodeTypeFlexibilityResponse)(nil)).Elem()
}

func (o NodeTemplateNodeTypeFlexibilityResponseOutput) ToNodeTemplateNodeTypeFlexibilityResponseOutput() NodeTemplateNodeTypeFlexibilityResponseOutput {
	return o
}

func (o NodeTemplateNodeTypeFlexibilityResponseOutput) ToNodeTemplateNodeTypeFlexibilityResponseOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityResponseOutput {
	return o
}

func (o NodeTemplateNodeTypeFlexibilityResponseOutput) ToNodeTemplateNodeTypeFlexibilityResponsePtrOutput() NodeTemplateNodeTypeFlexibilityResponsePtrOutput {
	return o.ToNodeTemplateNodeTypeFlexibilityResponsePtrOutputWithContext(context.Background())
}

func (o NodeTemplateNodeTypeFlexibilityResponseOutput) ToNodeTemplateNodeTypeFlexibilityResponsePtrOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityResponsePtrOutput {
	return o.ApplyT(func(v NodeTemplateNodeTypeFlexibilityResponse) *NodeTemplateNodeTypeFlexibilityResponse {
		return &v
	}).(NodeTemplateNodeTypeFlexibilityResponsePtrOutput)
}
func (o NodeTemplateNodeTypeFlexibilityResponseOutput) Cpus() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTemplateNodeTypeFlexibilityResponse) string { return v.Cpus }).(pulumi.StringOutput)
}

func (o NodeTemplateNodeTypeFlexibilityResponseOutput) LocalSsd() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTemplateNodeTypeFlexibilityResponse) string { return v.LocalSsd }).(pulumi.StringOutput)
}

func (o NodeTemplateNodeTypeFlexibilityResponseOutput) Memory() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTemplateNodeTypeFlexibilityResponse) string { return v.Memory }).(pulumi.StringOutput)
}

type NodeTemplateNodeTypeFlexibilityResponsePtrOutput struct{ *pulumi.OutputState }

func (NodeTemplateNodeTypeFlexibilityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeTemplateNodeTypeFlexibilityResponse)(nil)).Elem()
}

func (o NodeTemplateNodeTypeFlexibilityResponsePtrOutput) ToNodeTemplateNodeTypeFlexibilityResponsePtrOutput() NodeTemplateNodeTypeFlexibilityResponsePtrOutput {
	return o
}

func (o NodeTemplateNodeTypeFlexibilityResponsePtrOutput) ToNodeTemplateNodeTypeFlexibilityResponsePtrOutputWithContext(ctx context.Context) NodeTemplateNodeTypeFlexibilityResponsePtrOutput {
	return o
}

func (o NodeTemplateNodeTypeFlexibilityResponsePtrOutput) Elem() NodeTemplateNodeTypeFlexibilityResponseOutput {
	return o.ApplyT(func(v *NodeTemplateNodeTypeFlexibilityResponse) NodeTemplateNodeTypeFlexibilityResponse { return *v }).(NodeTemplateNodeTypeFlexibilityResponseOutput)
}

func (o NodeTemplateNodeTypeFlexibilityResponsePtrOutput) Cpus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTemplateNodeTypeFlexibilityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Cpus
	}).(pulumi.StringPtrOutput)
}

func (o NodeTemplateNodeTypeFlexibilityResponsePtrOutput) LocalSsd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTemplateNodeTypeFlexibilityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LocalSsd
	}).(pulumi.StringPtrOutput)
}

func (o NodeTemplateNodeTypeFlexibilityResponsePtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTemplateNodeTypeFlexibilityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Memory
	}).(pulumi.StringPtrOutput)
}

// Represents a gRPC setting that describes one gRPC notification endpoint and the retry duration attempting to send notification to this endpoint.
type NotificationEndpointGrpcSettings struct {
	// Optional. If specified, this field is used to set the authority header by the sender of notifications. See https://tools.ietf.org/html/rfc7540#section-8.1.2.3
	Authority *string `pulumi:"authority"`
	// Endpoint to which gRPC notifications are sent. This must be a valid gRPCLB DNS name.
	Endpoint *string `pulumi:"endpoint"`
	// Optional. If specified, this field is used to populate the "name" field in gRPC requests.
	PayloadName *string `pulumi:"payloadName"`
	// Optional. This field is used to configure how often to send a full update of all non-healthy backends. If unspecified, full updates are not sent. If specified, must be in the range between 600 seconds to 3600 seconds. Nanos are disallowed.
	ResendInterval *Duration `pulumi:"resendInterval"`
	// How much time (in seconds) is spent attempting notification retries until a successful response is received. Default is 30s. Limit is 20m (1200s). Must be a positive number.
	RetryDurationSec *int `pulumi:"retryDurationSec"`
}

// NotificationEndpointGrpcSettingsInput is an input type that accepts NotificationEndpointGrpcSettingsArgs and NotificationEndpointGrpcSettingsOutput values.
// You can construct a concrete instance of `NotificationEndpointGrpcSettingsInput` via:
//
//          NotificationEndpointGrpcSettingsArgs{...}
type NotificationEndpointGrpcSettingsInput interface {
	pulumi.Input

	ToNotificationEndpointGrpcSettingsOutput() NotificationEndpointGrpcSettingsOutput
	ToNotificationEndpointGrpcSettingsOutputWithContext(context.Context) NotificationEndpointGrpcSettingsOutput
}

// Represents a gRPC setting that describes one gRPC notification endpoint and the retry duration attempting to send notification to this endpoint.
type NotificationEndpointGrpcSettingsArgs struct {
	// Optional. If specified, this field is used to set the authority header by the sender of notifications. See https://tools.ietf.org/html/rfc7540#section-8.1.2.3
	Authority pulumi.StringPtrInput `pulumi:"authority"`
	// Endpoint to which gRPC notifications are sent. This must be a valid gRPCLB DNS name.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Optional. If specified, this field is used to populate the "name" field in gRPC requests.
	PayloadName pulumi.StringPtrInput `pulumi:"payloadName"`
	// Optional. This field is used to configure how often to send a full update of all non-healthy backends. If unspecified, full updates are not sent. If specified, must be in the range between 600 seconds to 3600 seconds. Nanos are disallowed.
	ResendInterval DurationPtrInput `pulumi:"resendInterval"`
	// How much time (in seconds) is spent attempting notification retries until a successful response is received. Default is 30s. Limit is 20m (1200s). Must be a positive number.
	RetryDurationSec pulumi.IntPtrInput `pulumi:"retryDurationSec"`
}

func (NotificationEndpointGrpcSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationEndpointGrpcSettings)(nil)).Elem()
}

func (i NotificationEndpointGrpcSettingsArgs) ToNotificationEndpointGrpcSettingsOutput() NotificationEndpointGrpcSettingsOutput {
	return i.ToNotificationEndpointGrpcSettingsOutputWithContext(context.Background())
}

func (i NotificationEndpointGrpcSettingsArgs) ToNotificationEndpointGrpcSettingsOutputWithContext(ctx context.Context) NotificationEndpointGrpcSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationEndpointGrpcSettingsOutput)
}

func (i NotificationEndpointGrpcSettingsArgs) ToNotificationEndpointGrpcSettingsPtrOutput() NotificationEndpointGrpcSettingsPtrOutput {
	return i.ToNotificationEndpointGrpcSettingsPtrOutputWithContext(context.Background())
}

func (i NotificationEndpointGrpcSettingsArgs) ToNotificationEndpointGrpcSettingsPtrOutputWithContext(ctx context.Context) NotificationEndpointGrpcSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationEndpointGrpcSettingsOutput).ToNotificationEndpointGrpcSettingsPtrOutputWithContext(ctx)
}

// NotificationEndpointGrpcSettingsPtrInput is an input type that accepts NotificationEndpointGrpcSettingsArgs, NotificationEndpointGrpcSettingsPtr and NotificationEndpointGrpcSettingsPtrOutput values.
// You can construct a concrete instance of `NotificationEndpointGrpcSettingsPtrInput` via:
//
//          NotificationEndpointGrpcSettingsArgs{...}
//
//  or:
//
//          nil
type NotificationEndpointGrpcSettingsPtrInput interface {
	pulumi.Input

	ToNotificationEndpointGrpcSettingsPtrOutput() NotificationEndpointGrpcSettingsPtrOutput
	ToNotificationEndpointGrpcSettingsPtrOutputWithContext(context.Context) NotificationEndpointGrpcSettingsPtrOutput
}

type notificationEndpointGrpcSettingsPtrType NotificationEndpointGrpcSettingsArgs

func NotificationEndpointGrpcSettingsPtr(v *NotificationEndpointGrpcSettingsArgs) NotificationEndpointGrpcSettingsPtrInput {
	return (*notificationEndpointGrpcSettingsPtrType)(v)
}

func (*notificationEndpointGrpcSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationEndpointGrpcSettings)(nil)).Elem()
}

func (i *notificationEndpointGrpcSettingsPtrType) ToNotificationEndpointGrpcSettingsPtrOutput() NotificationEndpointGrpcSettingsPtrOutput {
	return i.ToNotificationEndpointGrpcSettingsPtrOutputWithContext(context.Background())
}

func (i *notificationEndpointGrpcSettingsPtrType) ToNotificationEndpointGrpcSettingsPtrOutputWithContext(ctx context.Context) NotificationEndpointGrpcSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationEndpointGrpcSettingsPtrOutput)
}

// Represents a gRPC setting that describes one gRPC notification endpoint and the retry duration attempting to send notification to this endpoint.
type NotificationEndpointGrpcSettingsOutput struct{ *pulumi.OutputState }

func (NotificationEndpointGrpcSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationEndpointGrpcSettings)(nil)).Elem()
}

func (o NotificationEndpointGrpcSettingsOutput) ToNotificationEndpointGrpcSettingsOutput() NotificationEndpointGrpcSettingsOutput {
	return o
}

func (o NotificationEndpointGrpcSettingsOutput) ToNotificationEndpointGrpcSettingsOutputWithContext(ctx context.Context) NotificationEndpointGrpcSettingsOutput {
	return o
}

func (o NotificationEndpointGrpcSettingsOutput) ToNotificationEndpointGrpcSettingsPtrOutput() NotificationEndpointGrpcSettingsPtrOutput {
	return o.ToNotificationEndpointGrpcSettingsPtrOutputWithContext(context.Background())
}

func (o NotificationEndpointGrpcSettingsOutput) ToNotificationEndpointGrpcSettingsPtrOutputWithContext(ctx context.Context) NotificationEndpointGrpcSettingsPtrOutput {
	return o.ApplyT(func(v NotificationEndpointGrpcSettings) *NotificationEndpointGrpcSettings {
		return &v
	}).(NotificationEndpointGrpcSettingsPtrOutput)
}

// Optional. If specified, this field is used to set the authority header by the sender of notifications. See https://tools.ietf.org/html/rfc7540#section-8.1.2.3
func (o NotificationEndpointGrpcSettingsOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationEndpointGrpcSettings) *string { return v.Authority }).(pulumi.StringPtrOutput)
}

// Endpoint to which gRPC notifications are sent. This must be a valid gRPCLB DNS name.
func (o NotificationEndpointGrpcSettingsOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationEndpointGrpcSettings) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Optional. If specified, this field is used to populate the "name" field in gRPC requests.
func (o NotificationEndpointGrpcSettingsOutput) PayloadName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationEndpointGrpcSettings) *string { return v.PayloadName }).(pulumi.StringPtrOutput)
}

// Optional. This field is used to configure how often to send a full update of all non-healthy backends. If unspecified, full updates are not sent. If specified, must be in the range between 600 seconds to 3600 seconds. Nanos are disallowed.
func (o NotificationEndpointGrpcSettingsOutput) ResendInterval() DurationPtrOutput {
	return o.ApplyT(func(v NotificationEndpointGrpcSettings) *Duration { return v.ResendInterval }).(DurationPtrOutput)
}

// How much time (in seconds) is spent attempting notification retries until a successful response is received. Default is 30s. Limit is 20m (1200s). Must be a positive number.
func (o NotificationEndpointGrpcSettingsOutput) RetryDurationSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NotificationEndpointGrpcSettings) *int { return v.RetryDurationSec }).(pulumi.IntPtrOutput)
}

type NotificationEndpointGrpcSettingsPtrOutput struct{ *pulumi.OutputState }

func (NotificationEndpointGrpcSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationEndpointGrpcSettings)(nil)).Elem()
}

func (o NotificationEndpointGrpcSettingsPtrOutput) ToNotificationEndpointGrpcSettingsPtrOutput() NotificationEndpointGrpcSettingsPtrOutput {
	return o
}

func (o NotificationEndpointGrpcSettingsPtrOutput) ToNotificationEndpointGrpcSettingsPtrOutputWithContext(ctx context.Context) NotificationEndpointGrpcSettingsPtrOutput {
	return o
}

func (o NotificationEndpointGrpcSettingsPtrOutput) Elem() NotificationEndpointGrpcSettingsOutput {
	return o.ApplyT(func(v *NotificationEndpointGrpcSettings) NotificationEndpointGrpcSettings { return *v }).(NotificationEndpointGrpcSettingsOutput)
}

// Optional. If specified, this field is used to set the authority header by the sender of notifications. See https://tools.ietf.org/html/rfc7540#section-8.1.2.3
func (o NotificationEndpointGrpcSettingsPtrOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationEndpointGrpcSettings) *string {
		if v == nil {
			return nil
		}
		return v.Authority
	}).(pulumi.StringPtrOutput)
}

// Endpoint to which gRPC notifications are sent. This must be a valid gRPCLB DNS name.
func (o NotificationEndpointGrpcSettingsPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationEndpointGrpcSettings) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Optional. If specified, this field is used to populate the "name" field in gRPC requests.
func (o NotificationEndpointGrpcSettingsPtrOutput) PayloadName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationEndpointGrpcSettings) *string {
		if v == nil {
			return nil
		}
		return v.PayloadName
	}).(pulumi.StringPtrOutput)
}

// Optional. This field is used to configure how often to send a full update of all non-healthy backends. If unspecified, full updates are not sent. If specified, must be in the range between 600 seconds to 3600 seconds. Nanos are disallowed.
func (o NotificationEndpointGrpcSettingsPtrOutput) ResendInterval() DurationPtrOutput {
	return o.ApplyT(func(v *NotificationEndpointGrpcSettings) *Duration {
		if v == nil {
			return nil
		}
		return v.ResendInterval
	}).(DurationPtrOutput)
}

// How much time (in seconds) is spent attempting notification retries until a successful response is received. Default is 30s. Limit is 20m (1200s). Must be a positive number.
func (o NotificationEndpointGrpcSettingsPtrOutput) RetryDurationSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NotificationEndpointGrpcSettings) *int {
		if v == nil {
			return nil
		}
		return v.RetryDurationSec
	}).(pulumi.IntPtrOutput)
}

// Represents a gRPC setting that describes one gRPC notification endpoint and the retry duration attempting to send notification to this endpoint.
type NotificationEndpointGrpcSettingsResponse struct {
	// Optional. If specified, this field is used to set the authority header by the sender of notifications. See https://tools.ietf.org/html/rfc7540#section-8.1.2.3
	Authority string `pulumi:"authority"`
	// Endpoint to which gRPC notifications are sent. This must be a valid gRPCLB DNS name.
	Endpoint string `pulumi:"endpoint"`
	// Optional. If specified, this field is used to populate the "name" field in gRPC requests.
	PayloadName string `pulumi:"payloadName"`
	// Optional. This field is used to configure how often to send a full update of all non-healthy backends. If unspecified, full updates are not sent. If specified, must be in the range between 600 seconds to 3600 seconds. Nanos are disallowed.
	ResendInterval DurationResponse `pulumi:"resendInterval"`
	// How much time (in seconds) is spent attempting notification retries until a successful response is received. Default is 30s. Limit is 20m (1200s). Must be a positive number.
	RetryDurationSec int `pulumi:"retryDurationSec"`
}

// NotificationEndpointGrpcSettingsResponseInput is an input type that accepts NotificationEndpointGrpcSettingsResponseArgs and NotificationEndpointGrpcSettingsResponseOutput values.
// You can construct a concrete instance of `NotificationEndpointGrpcSettingsResponseInput` via:
//
//          NotificationEndpointGrpcSettingsResponseArgs{...}
type NotificationEndpointGrpcSettingsResponseInput interface {
	pulumi.Input

	ToNotificationEndpointGrpcSettingsResponseOutput() NotificationEndpointGrpcSettingsResponseOutput
	ToNotificationEndpointGrpcSettingsResponseOutputWithContext(context.Context) NotificationEndpointGrpcSettingsResponseOutput
}

// Represents a gRPC setting that describes one gRPC notification endpoint and the retry duration attempting to send notification to this endpoint.
type NotificationEndpointGrpcSettingsResponseArgs struct {
	// Optional. If specified, this field is used to set the authority header by the sender of notifications. See https://tools.ietf.org/html/rfc7540#section-8.1.2.3
	Authority pulumi.StringInput `pulumi:"authority"`
	// Endpoint to which gRPC notifications are sent. This must be a valid gRPCLB DNS name.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Optional. If specified, this field is used to populate the "name" field in gRPC requests.
	PayloadName pulumi.StringInput `pulumi:"payloadName"`
	// Optional. This field is used to configure how often to send a full update of all non-healthy backends. If unspecified, full updates are not sent. If specified, must be in the range between 600 seconds to 3600 seconds. Nanos are disallowed.
	ResendInterval DurationResponseInput `pulumi:"resendInterval"`
	// How much time (in seconds) is spent attempting notification retries until a successful response is received. Default is 30s. Limit is 20m (1200s). Must be a positive number.
	RetryDurationSec pulumi.IntInput `pulumi:"retryDurationSec"`
}

func (NotificationEndpointGrpcSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationEndpointGrpcSettingsResponse)(nil)).Elem()
}

func (i NotificationEndpointGrpcSettingsResponseArgs) ToNotificationEndpointGrpcSettingsResponseOutput() NotificationEndpointGrpcSettingsResponseOutput {
	return i.ToNotificationEndpointGrpcSettingsResponseOutputWithContext(context.Background())
}

func (i NotificationEndpointGrpcSettingsResponseArgs) ToNotificationEndpointGrpcSettingsResponseOutputWithContext(ctx context.Context) NotificationEndpointGrpcSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationEndpointGrpcSettingsResponseOutput)
}

func (i NotificationEndpointGrpcSettingsResponseArgs) ToNotificationEndpointGrpcSettingsResponsePtrOutput() NotificationEndpointGrpcSettingsResponsePtrOutput {
	return i.ToNotificationEndpointGrpcSettingsResponsePtrOutputWithContext(context.Background())
}

func (i NotificationEndpointGrpcSettingsResponseArgs) ToNotificationEndpointGrpcSettingsResponsePtrOutputWithContext(ctx context.Context) NotificationEndpointGrpcSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationEndpointGrpcSettingsResponseOutput).ToNotificationEndpointGrpcSettingsResponsePtrOutputWithContext(ctx)
}

// NotificationEndpointGrpcSettingsResponsePtrInput is an input type that accepts NotificationEndpointGrpcSettingsResponseArgs, NotificationEndpointGrpcSettingsResponsePtr and NotificationEndpointGrpcSettingsResponsePtrOutput values.
// You can construct a concrete instance of `NotificationEndpointGrpcSettingsResponsePtrInput` via:
//
//          NotificationEndpointGrpcSettingsResponseArgs{...}
//
//  or:
//
//          nil
type NotificationEndpointGrpcSettingsResponsePtrInput interface {
	pulumi.Input

	ToNotificationEndpointGrpcSettingsResponsePtrOutput() NotificationEndpointGrpcSettingsResponsePtrOutput
	ToNotificationEndpointGrpcSettingsResponsePtrOutputWithContext(context.Context) NotificationEndpointGrpcSettingsResponsePtrOutput
}

type notificationEndpointGrpcSettingsResponsePtrType NotificationEndpointGrpcSettingsResponseArgs

func NotificationEndpointGrpcSettingsResponsePtr(v *NotificationEndpointGrpcSettingsResponseArgs) NotificationEndpointGrpcSettingsResponsePtrInput {
	return (*notificationEndpointGrpcSettingsResponsePtrType)(v)
}

func (*notificationEndpointGrpcSettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationEndpointGrpcSettingsResponse)(nil)).Elem()
}

func (i *notificationEndpointGrpcSettingsResponsePtrType) ToNotificationEndpointGrpcSettingsResponsePtrOutput() NotificationEndpointGrpcSettingsResponsePtrOutput {
	return i.ToNotificationEndpointGrpcSettingsResponsePtrOutputWithContext(context.Background())
}

func (i *notificationEndpointGrpcSettingsResponsePtrType) ToNotificationEndpointGrpcSettingsResponsePtrOutputWithContext(ctx context.Context) NotificationEndpointGrpcSettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationEndpointGrpcSettingsResponsePtrOutput)
}

// Represents a gRPC setting that describes one gRPC notification endpoint and the retry duration attempting to send notification to this endpoint.
type NotificationEndpointGrpcSettingsResponseOutput struct{ *pulumi.OutputState }

func (NotificationEndpointGrpcSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationEndpointGrpcSettingsResponse)(nil)).Elem()
}

func (o NotificationEndpointGrpcSettingsResponseOutput) ToNotificationEndpointGrpcSettingsResponseOutput() NotificationEndpointGrpcSettingsResponseOutput {
	return o
}

func (o NotificationEndpointGrpcSettingsResponseOutput) ToNotificationEndpointGrpcSettingsResponseOutputWithContext(ctx context.Context) NotificationEndpointGrpcSettingsResponseOutput {
	return o
}

func (o NotificationEndpointGrpcSettingsResponseOutput) ToNotificationEndpointGrpcSettingsResponsePtrOutput() NotificationEndpointGrpcSettingsResponsePtrOutput {
	return o.ToNotificationEndpointGrpcSettingsResponsePtrOutputWithContext(context.Background())
}

func (o NotificationEndpointGrpcSettingsResponseOutput) ToNotificationEndpointGrpcSettingsResponsePtrOutputWithContext(ctx context.Context) NotificationEndpointGrpcSettingsResponsePtrOutput {
	return o.ApplyT(func(v NotificationEndpointGrpcSettingsResponse) *NotificationEndpointGrpcSettingsResponse {
		return &v
	}).(NotificationEndpointGrpcSettingsResponsePtrOutput)
}

// Optional. If specified, this field is used to set the authority header by the sender of notifications. See https://tools.ietf.org/html/rfc7540#section-8.1.2.3
func (o NotificationEndpointGrpcSettingsResponseOutput) Authority() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationEndpointGrpcSettingsResponse) string { return v.Authority }).(pulumi.StringOutput)
}

// Endpoint to which gRPC notifications are sent. This must be a valid gRPCLB DNS name.
func (o NotificationEndpointGrpcSettingsResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationEndpointGrpcSettingsResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Optional. If specified, this field is used to populate the "name" field in gRPC requests.
func (o NotificationEndpointGrpcSettingsResponseOutput) PayloadName() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationEndpointGrpcSettingsResponse) string { return v.PayloadName }).(pulumi.StringOutput)
}

// Optional. This field is used to configure how often to send a full update of all non-healthy backends. If unspecified, full updates are not sent. If specified, must be in the range between 600 seconds to 3600 seconds. Nanos are disallowed.
func (o NotificationEndpointGrpcSettingsResponseOutput) ResendInterval() DurationResponseOutput {
	return o.ApplyT(func(v NotificationEndpointGrpcSettingsResponse) DurationResponse { return v.ResendInterval }).(DurationResponseOutput)
}

// How much time (in seconds) is spent attempting notification retries until a successful response is received. Default is 30s. Limit is 20m (1200s). Must be a positive number.
func (o NotificationEndpointGrpcSettingsResponseOutput) RetryDurationSec() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationEndpointGrpcSettingsResponse) int { return v.RetryDurationSec }).(pulumi.IntOutput)
}

type NotificationEndpointGrpcSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (NotificationEndpointGrpcSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationEndpointGrpcSettingsResponse)(nil)).Elem()
}

func (o NotificationEndpointGrpcSettingsResponsePtrOutput) ToNotificationEndpointGrpcSettingsResponsePtrOutput() NotificationEndpointGrpcSettingsResponsePtrOutput {
	return o
}

func (o NotificationEndpointGrpcSettingsResponsePtrOutput) ToNotificationEndpointGrpcSettingsResponsePtrOutputWithContext(ctx context.Context) NotificationEndpointGrpcSettingsResponsePtrOutput {
	return o
}

func (o NotificationEndpointGrpcSettingsResponsePtrOutput) Elem() NotificationEndpointGrpcSettingsResponseOutput {
	return o.ApplyT(func(v *NotificationEndpointGrpcSettingsResponse) NotificationEndpointGrpcSettingsResponse { return *v }).(NotificationEndpointGrpcSettingsResponseOutput)
}

// Optional. If specified, this field is used to set the authority header by the sender of notifications. See https://tools.ietf.org/html/rfc7540#section-8.1.2.3
func (o NotificationEndpointGrpcSettingsResponsePtrOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationEndpointGrpcSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Authority
	}).(pulumi.StringPtrOutput)
}

// Endpoint to which gRPC notifications are sent. This must be a valid gRPCLB DNS name.
func (o NotificationEndpointGrpcSettingsResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationEndpointGrpcSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Optional. If specified, this field is used to populate the "name" field in gRPC requests.
func (o NotificationEndpointGrpcSettingsResponsePtrOutput) PayloadName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationEndpointGrpcSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PayloadName
	}).(pulumi.StringPtrOutput)
}

// Optional. This field is used to configure how often to send a full update of all non-healthy backends. If unspecified, full updates are not sent. If specified, must be in the range between 600 seconds to 3600 seconds. Nanos are disallowed.
func (o NotificationEndpointGrpcSettingsResponsePtrOutput) ResendInterval() DurationResponsePtrOutput {
	return o.ApplyT(func(v *NotificationEndpointGrpcSettingsResponse) *DurationResponse {
		if v == nil {
			return nil
		}
		return &v.ResendInterval
	}).(DurationResponsePtrOutput)
}

// How much time (in seconds) is spent attempting notification retries until a successful response is received. Default is 30s. Limit is 20m (1200s). Must be a positive number.
func (o NotificationEndpointGrpcSettingsResponsePtrOutput) RetryDurationSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NotificationEndpointGrpcSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.RetryDurationSec
	}).(pulumi.IntPtrOutput)
}

// Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service.
type OutlierDetection struct {
	// The base time that a host is ejected for. The real ejection time is equal to the base ejection time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s.
	BaseEjectionTime *Duration `pulumi:"baseEjectionTime"`
	// Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.
	ConsecutiveErrors *int `pulumi:"consecutiveErrors"`
	// The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3.
	ConsecutiveGatewayFailure *int `pulumi:"consecutiveGatewayFailure"`
	// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.
	EnforcingConsecutiveErrors *int `pulumi:"enforcingConsecutiveErrors"`
	// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
	EnforcingConsecutiveGatewayFailure *int `pulumi:"enforcingConsecutiveGatewayFailure"`
	// The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
	EnforcingSuccessRate *int `pulumi:"enforcingSuccessRate"`
	// Time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service. Defaults to 1 second.
	Interval *Duration `pulumi:"interval"`
	// Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%.
	MaxEjectionPercent *int `pulumi:"maxEjectionPercent"`
	// The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.
	SuccessRateMinimumHosts *int `pulumi:"successRateMinimumHosts"`
	// The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.
	SuccessRateRequestVolume *int `pulumi:"successRateRequestVolume"`
	// This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.
	SuccessRateStdevFactor *int `pulumi:"successRateStdevFactor"`
}

// OutlierDetectionInput is an input type that accepts OutlierDetectionArgs and OutlierDetectionOutput values.
// You can construct a concrete instance of `OutlierDetectionInput` via:
//
//          OutlierDetectionArgs{...}
type OutlierDetectionInput interface {
	pulumi.Input

	ToOutlierDetectionOutput() OutlierDetectionOutput
	ToOutlierDetectionOutputWithContext(context.Context) OutlierDetectionOutput
}

// Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service.
type OutlierDetectionArgs struct {
	// The base time that a host is ejected for. The real ejection time is equal to the base ejection time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s.
	BaseEjectionTime DurationPtrInput `pulumi:"baseEjectionTime"`
	// Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.
	ConsecutiveErrors pulumi.IntPtrInput `pulumi:"consecutiveErrors"`
	// The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3.
	ConsecutiveGatewayFailure pulumi.IntPtrInput `pulumi:"consecutiveGatewayFailure"`
	// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.
	EnforcingConsecutiveErrors pulumi.IntPtrInput `pulumi:"enforcingConsecutiveErrors"`
	// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
	EnforcingConsecutiveGatewayFailure pulumi.IntPtrInput `pulumi:"enforcingConsecutiveGatewayFailure"`
	// The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
	EnforcingSuccessRate pulumi.IntPtrInput `pulumi:"enforcingSuccessRate"`
	// Time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service. Defaults to 1 second.
	Interval DurationPtrInput `pulumi:"interval"`
	// Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%.
	MaxEjectionPercent pulumi.IntPtrInput `pulumi:"maxEjectionPercent"`
	// The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.
	SuccessRateMinimumHosts pulumi.IntPtrInput `pulumi:"successRateMinimumHosts"`
	// The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.
	SuccessRateRequestVolume pulumi.IntPtrInput `pulumi:"successRateRequestVolume"`
	// This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.
	SuccessRateStdevFactor pulumi.IntPtrInput `pulumi:"successRateStdevFactor"`
}

func (OutlierDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutlierDetection)(nil)).Elem()
}

func (i OutlierDetectionArgs) ToOutlierDetectionOutput() OutlierDetectionOutput {
	return i.ToOutlierDetectionOutputWithContext(context.Background())
}

func (i OutlierDetectionArgs) ToOutlierDetectionOutputWithContext(ctx context.Context) OutlierDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutlierDetectionOutput)
}

func (i OutlierDetectionArgs) ToOutlierDetectionPtrOutput() OutlierDetectionPtrOutput {
	return i.ToOutlierDetectionPtrOutputWithContext(context.Background())
}

func (i OutlierDetectionArgs) ToOutlierDetectionPtrOutputWithContext(ctx context.Context) OutlierDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutlierDetectionOutput).ToOutlierDetectionPtrOutputWithContext(ctx)
}

// OutlierDetectionPtrInput is an input type that accepts OutlierDetectionArgs, OutlierDetectionPtr and OutlierDetectionPtrOutput values.
// You can construct a concrete instance of `OutlierDetectionPtrInput` via:
//
//          OutlierDetectionArgs{...}
//
//  or:
//
//          nil
type OutlierDetectionPtrInput interface {
	pulumi.Input

	ToOutlierDetectionPtrOutput() OutlierDetectionPtrOutput
	ToOutlierDetectionPtrOutputWithContext(context.Context) OutlierDetectionPtrOutput
}

type outlierDetectionPtrType OutlierDetectionArgs

func OutlierDetectionPtr(v *OutlierDetectionArgs) OutlierDetectionPtrInput {
	return (*outlierDetectionPtrType)(v)
}

func (*outlierDetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OutlierDetection)(nil)).Elem()
}

func (i *outlierDetectionPtrType) ToOutlierDetectionPtrOutput() OutlierDetectionPtrOutput {
	return i.ToOutlierDetectionPtrOutputWithContext(context.Background())
}

func (i *outlierDetectionPtrType) ToOutlierDetectionPtrOutputWithContext(ctx context.Context) OutlierDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutlierDetectionPtrOutput)
}

// Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service.
type OutlierDetectionOutput struct{ *pulumi.OutputState }

func (OutlierDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutlierDetection)(nil)).Elem()
}

func (o OutlierDetectionOutput) ToOutlierDetectionOutput() OutlierDetectionOutput {
	return o
}

func (o OutlierDetectionOutput) ToOutlierDetectionOutputWithContext(ctx context.Context) OutlierDetectionOutput {
	return o
}

func (o OutlierDetectionOutput) ToOutlierDetectionPtrOutput() OutlierDetectionPtrOutput {
	return o.ToOutlierDetectionPtrOutputWithContext(context.Background())
}

func (o OutlierDetectionOutput) ToOutlierDetectionPtrOutputWithContext(ctx context.Context) OutlierDetectionPtrOutput {
	return o.ApplyT(func(v OutlierDetection) *OutlierDetection {
		return &v
	}).(OutlierDetectionPtrOutput)
}

// The base time that a host is ejected for. The real ejection time is equal to the base ejection time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s.
func (o OutlierDetectionOutput) BaseEjectionTime() DurationPtrOutput {
	return o.ApplyT(func(v OutlierDetection) *Duration { return v.BaseEjectionTime }).(DurationPtrOutput)
}

// Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.
func (o OutlierDetectionOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OutlierDetection) *int { return v.ConsecutiveErrors }).(pulumi.IntPtrOutput)
}

// The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3.
func (o OutlierDetectionOutput) ConsecutiveGatewayFailure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OutlierDetection) *int { return v.ConsecutiveGatewayFailure }).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.
func (o OutlierDetectionOutput) EnforcingConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OutlierDetection) *int { return v.EnforcingConsecutiveErrors }).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
func (o OutlierDetectionOutput) EnforcingConsecutiveGatewayFailure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OutlierDetection) *int { return v.EnforcingConsecutiveGatewayFailure }).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
func (o OutlierDetectionOutput) EnforcingSuccessRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OutlierDetection) *int { return v.EnforcingSuccessRate }).(pulumi.IntPtrOutput)
}

// Time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service. Defaults to 1 second.
func (o OutlierDetectionOutput) Interval() DurationPtrOutput {
	return o.ApplyT(func(v OutlierDetection) *Duration { return v.Interval }).(DurationPtrOutput)
}

// Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%.
func (o OutlierDetectionOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OutlierDetection) *int { return v.MaxEjectionPercent }).(pulumi.IntPtrOutput)
}

// The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.
func (o OutlierDetectionOutput) SuccessRateMinimumHosts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OutlierDetection) *int { return v.SuccessRateMinimumHosts }).(pulumi.IntPtrOutput)
}

// The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.
func (o OutlierDetectionOutput) SuccessRateRequestVolume() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OutlierDetection) *int { return v.SuccessRateRequestVolume }).(pulumi.IntPtrOutput)
}

// This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.
func (o OutlierDetectionOutput) SuccessRateStdevFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OutlierDetection) *int { return v.SuccessRateStdevFactor }).(pulumi.IntPtrOutput)
}

type OutlierDetectionPtrOutput struct{ *pulumi.OutputState }

func (OutlierDetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutlierDetection)(nil)).Elem()
}

func (o OutlierDetectionPtrOutput) ToOutlierDetectionPtrOutput() OutlierDetectionPtrOutput {
	return o
}

func (o OutlierDetectionPtrOutput) ToOutlierDetectionPtrOutputWithContext(ctx context.Context) OutlierDetectionPtrOutput {
	return o
}

func (o OutlierDetectionPtrOutput) Elem() OutlierDetectionOutput {
	return o.ApplyT(func(v *OutlierDetection) OutlierDetection { return *v }).(OutlierDetectionOutput)
}

// The base time that a host is ejected for. The real ejection time is equal to the base ejection time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s.
func (o OutlierDetectionPtrOutput) BaseEjectionTime() DurationPtrOutput {
	return o.ApplyT(func(v *OutlierDetection) *Duration {
		if v == nil {
			return nil
		}
		return v.BaseEjectionTime
	}).(DurationPtrOutput)
}

// Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.
func (o OutlierDetectionPtrOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3.
func (o OutlierDetectionPtrOutput) ConsecutiveGatewayFailure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveGatewayFailure
	}).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.
func (o OutlierDetectionPtrOutput) EnforcingConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.EnforcingConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
func (o OutlierDetectionPtrOutput) EnforcingConsecutiveGatewayFailure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.EnforcingConsecutiveGatewayFailure
	}).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
func (o OutlierDetectionPtrOutput) EnforcingSuccessRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.EnforcingSuccessRate
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service. Defaults to 1 second.
func (o OutlierDetectionPtrOutput) Interval() DurationPtrOutput {
	return o.ApplyT(func(v *OutlierDetection) *Duration {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(DurationPtrOutput)
}

// Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%.
func (o OutlierDetectionPtrOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.MaxEjectionPercent
	}).(pulumi.IntPtrOutput)
}

// The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.
func (o OutlierDetectionPtrOutput) SuccessRateMinimumHosts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.SuccessRateMinimumHosts
	}).(pulumi.IntPtrOutput)
}

// The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.
func (o OutlierDetectionPtrOutput) SuccessRateRequestVolume() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.SuccessRateRequestVolume
	}).(pulumi.IntPtrOutput)
}

// This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.
func (o OutlierDetectionPtrOutput) SuccessRateStdevFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.SuccessRateStdevFactor
	}).(pulumi.IntPtrOutput)
}

// Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service.
type OutlierDetectionResponse struct {
	// The base time that a host is ejected for. The real ejection time is equal to the base ejection time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s.
	BaseEjectionTime DurationResponse `pulumi:"baseEjectionTime"`
	// Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.
	ConsecutiveErrors int `pulumi:"consecutiveErrors"`
	// The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3.
	ConsecutiveGatewayFailure int `pulumi:"consecutiveGatewayFailure"`
	// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.
	EnforcingConsecutiveErrors int `pulumi:"enforcingConsecutiveErrors"`
	// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
	EnforcingConsecutiveGatewayFailure int `pulumi:"enforcingConsecutiveGatewayFailure"`
	// The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
	EnforcingSuccessRate int `pulumi:"enforcingSuccessRate"`
	// Time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service. Defaults to 1 second.
	Interval DurationResponse `pulumi:"interval"`
	// Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%.
	MaxEjectionPercent int `pulumi:"maxEjectionPercent"`
	// The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.
	SuccessRateMinimumHosts int `pulumi:"successRateMinimumHosts"`
	// The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.
	SuccessRateRequestVolume int `pulumi:"successRateRequestVolume"`
	// This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.
	SuccessRateStdevFactor int `pulumi:"successRateStdevFactor"`
}

// OutlierDetectionResponseInput is an input type that accepts OutlierDetectionResponseArgs and OutlierDetectionResponseOutput values.
// You can construct a concrete instance of `OutlierDetectionResponseInput` via:
//
//          OutlierDetectionResponseArgs{...}
type OutlierDetectionResponseInput interface {
	pulumi.Input

	ToOutlierDetectionResponseOutput() OutlierDetectionResponseOutput
	ToOutlierDetectionResponseOutputWithContext(context.Context) OutlierDetectionResponseOutput
}

// Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service.
type OutlierDetectionResponseArgs struct {
	// The base time that a host is ejected for. The real ejection time is equal to the base ejection time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s.
	BaseEjectionTime DurationResponseInput `pulumi:"baseEjectionTime"`
	// Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.
	ConsecutiveErrors pulumi.IntInput `pulumi:"consecutiveErrors"`
	// The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3.
	ConsecutiveGatewayFailure pulumi.IntInput `pulumi:"consecutiveGatewayFailure"`
	// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.
	EnforcingConsecutiveErrors pulumi.IntInput `pulumi:"enforcingConsecutiveErrors"`
	// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
	EnforcingConsecutiveGatewayFailure pulumi.IntInput `pulumi:"enforcingConsecutiveGatewayFailure"`
	// The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
	EnforcingSuccessRate pulumi.IntInput `pulumi:"enforcingSuccessRate"`
	// Time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service. Defaults to 1 second.
	Interval DurationResponseInput `pulumi:"interval"`
	// Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%.
	MaxEjectionPercent pulumi.IntInput `pulumi:"maxEjectionPercent"`
	// The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.
	SuccessRateMinimumHosts pulumi.IntInput `pulumi:"successRateMinimumHosts"`
	// The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.
	SuccessRateRequestVolume pulumi.IntInput `pulumi:"successRateRequestVolume"`
	// This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.
	SuccessRateStdevFactor pulumi.IntInput `pulumi:"successRateStdevFactor"`
}

func (OutlierDetectionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutlierDetectionResponse)(nil)).Elem()
}

func (i OutlierDetectionResponseArgs) ToOutlierDetectionResponseOutput() OutlierDetectionResponseOutput {
	return i.ToOutlierDetectionResponseOutputWithContext(context.Background())
}

func (i OutlierDetectionResponseArgs) ToOutlierDetectionResponseOutputWithContext(ctx context.Context) OutlierDetectionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutlierDetectionResponseOutput)
}

func (i OutlierDetectionResponseArgs) ToOutlierDetectionResponsePtrOutput() OutlierDetectionResponsePtrOutput {
	return i.ToOutlierDetectionResponsePtrOutputWithContext(context.Background())
}

func (i OutlierDetectionResponseArgs) ToOutlierDetectionResponsePtrOutputWithContext(ctx context.Context) OutlierDetectionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutlierDetectionResponseOutput).ToOutlierDetectionResponsePtrOutputWithContext(ctx)
}

// OutlierDetectionResponsePtrInput is an input type that accepts OutlierDetectionResponseArgs, OutlierDetectionResponsePtr and OutlierDetectionResponsePtrOutput values.
// You can construct a concrete instance of `OutlierDetectionResponsePtrInput` via:
//
//          OutlierDetectionResponseArgs{...}
//
//  or:
//
//          nil
type OutlierDetectionResponsePtrInput interface {
	pulumi.Input

	ToOutlierDetectionResponsePtrOutput() OutlierDetectionResponsePtrOutput
	ToOutlierDetectionResponsePtrOutputWithContext(context.Context) OutlierDetectionResponsePtrOutput
}

type outlierDetectionResponsePtrType OutlierDetectionResponseArgs

func OutlierDetectionResponsePtr(v *OutlierDetectionResponseArgs) OutlierDetectionResponsePtrInput {
	return (*outlierDetectionResponsePtrType)(v)
}

func (*outlierDetectionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OutlierDetectionResponse)(nil)).Elem()
}

func (i *outlierDetectionResponsePtrType) ToOutlierDetectionResponsePtrOutput() OutlierDetectionResponsePtrOutput {
	return i.ToOutlierDetectionResponsePtrOutputWithContext(context.Background())
}

func (i *outlierDetectionResponsePtrType) ToOutlierDetectionResponsePtrOutputWithContext(ctx context.Context) OutlierDetectionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutlierDetectionResponsePtrOutput)
}

// Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service.
type OutlierDetectionResponseOutput struct{ *pulumi.OutputState }

func (OutlierDetectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutlierDetectionResponse)(nil)).Elem()
}

func (o OutlierDetectionResponseOutput) ToOutlierDetectionResponseOutput() OutlierDetectionResponseOutput {
	return o
}

func (o OutlierDetectionResponseOutput) ToOutlierDetectionResponseOutputWithContext(ctx context.Context) OutlierDetectionResponseOutput {
	return o
}

func (o OutlierDetectionResponseOutput) ToOutlierDetectionResponsePtrOutput() OutlierDetectionResponsePtrOutput {
	return o.ToOutlierDetectionResponsePtrOutputWithContext(context.Background())
}

func (o OutlierDetectionResponseOutput) ToOutlierDetectionResponsePtrOutputWithContext(ctx context.Context) OutlierDetectionResponsePtrOutput {
	return o.ApplyT(func(v OutlierDetectionResponse) *OutlierDetectionResponse {
		return &v
	}).(OutlierDetectionResponsePtrOutput)
}

// The base time that a host is ejected for. The real ejection time is equal to the base ejection time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s.
func (o OutlierDetectionResponseOutput) BaseEjectionTime() DurationResponseOutput {
	return o.ApplyT(func(v OutlierDetectionResponse) DurationResponse { return v.BaseEjectionTime }).(DurationResponseOutput)
}

// Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.
func (o OutlierDetectionResponseOutput) ConsecutiveErrors() pulumi.IntOutput {
	return o.ApplyT(func(v OutlierDetectionResponse) int { return v.ConsecutiveErrors }).(pulumi.IntOutput)
}

// The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3.
func (o OutlierDetectionResponseOutput) ConsecutiveGatewayFailure() pulumi.IntOutput {
	return o.ApplyT(func(v OutlierDetectionResponse) int { return v.ConsecutiveGatewayFailure }).(pulumi.IntOutput)
}

// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.
func (o OutlierDetectionResponseOutput) EnforcingConsecutiveErrors() pulumi.IntOutput {
	return o.ApplyT(func(v OutlierDetectionResponse) int { return v.EnforcingConsecutiveErrors }).(pulumi.IntOutput)
}

// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
func (o OutlierDetectionResponseOutput) EnforcingConsecutiveGatewayFailure() pulumi.IntOutput {
	return o.ApplyT(func(v OutlierDetectionResponse) int { return v.EnforcingConsecutiveGatewayFailure }).(pulumi.IntOutput)
}

// The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
func (o OutlierDetectionResponseOutput) EnforcingSuccessRate() pulumi.IntOutput {
	return o.ApplyT(func(v OutlierDetectionResponse) int { return v.EnforcingSuccessRate }).(pulumi.IntOutput)
}

// Time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service. Defaults to 1 second.
func (o OutlierDetectionResponseOutput) Interval() DurationResponseOutput {
	return o.ApplyT(func(v OutlierDetectionResponse) DurationResponse { return v.Interval }).(DurationResponseOutput)
}

// Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%.
func (o OutlierDetectionResponseOutput) MaxEjectionPercent() pulumi.IntOutput {
	return o.ApplyT(func(v OutlierDetectionResponse) int { return v.MaxEjectionPercent }).(pulumi.IntOutput)
}

// The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.
func (o OutlierDetectionResponseOutput) SuccessRateMinimumHosts() pulumi.IntOutput {
	return o.ApplyT(func(v OutlierDetectionResponse) int { return v.SuccessRateMinimumHosts }).(pulumi.IntOutput)
}

// The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.
func (o OutlierDetectionResponseOutput) SuccessRateRequestVolume() pulumi.IntOutput {
	return o.ApplyT(func(v OutlierDetectionResponse) int { return v.SuccessRateRequestVolume }).(pulumi.IntOutput)
}

// This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.
func (o OutlierDetectionResponseOutput) SuccessRateStdevFactor() pulumi.IntOutput {
	return o.ApplyT(func(v OutlierDetectionResponse) int { return v.SuccessRateStdevFactor }).(pulumi.IntOutput)
}

type OutlierDetectionResponsePtrOutput struct{ *pulumi.OutputState }

func (OutlierDetectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutlierDetectionResponse)(nil)).Elem()
}

func (o OutlierDetectionResponsePtrOutput) ToOutlierDetectionResponsePtrOutput() OutlierDetectionResponsePtrOutput {
	return o
}

func (o OutlierDetectionResponsePtrOutput) ToOutlierDetectionResponsePtrOutputWithContext(ctx context.Context) OutlierDetectionResponsePtrOutput {
	return o
}

func (o OutlierDetectionResponsePtrOutput) Elem() OutlierDetectionResponseOutput {
	return o.ApplyT(func(v *OutlierDetectionResponse) OutlierDetectionResponse { return *v }).(OutlierDetectionResponseOutput)
}

// The base time that a host is ejected for. The real ejection time is equal to the base ejection time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s.
func (o OutlierDetectionResponsePtrOutput) BaseEjectionTime() DurationResponsePtrOutput {
	return o.ApplyT(func(v *OutlierDetectionResponse) *DurationResponse {
		if v == nil {
			return nil
		}
		return &v.BaseEjectionTime
	}).(DurationResponsePtrOutput)
}

// Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.
func (o OutlierDetectionResponsePtrOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3.
func (o OutlierDetectionResponsePtrOutput) ConsecutiveGatewayFailure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ConsecutiveGatewayFailure
	}).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.
func (o OutlierDetectionResponsePtrOutput) EnforcingConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return &v.EnforcingConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
func (o OutlierDetectionResponsePtrOutput) EnforcingConsecutiveGatewayFailure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return &v.EnforcingConsecutiveGatewayFailure
	}).(pulumi.IntPtrOutput)
}

// The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
func (o OutlierDetectionResponsePtrOutput) EnforcingSuccessRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return &v.EnforcingSuccessRate
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service. Defaults to 1 second.
func (o OutlierDetectionResponsePtrOutput) Interval() DurationResponsePtrOutput {
	return o.ApplyT(func(v *OutlierDetectionResponse) *DurationResponse {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(DurationResponsePtrOutput)
}

// Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%.
func (o OutlierDetectionResponsePtrOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxEjectionPercent
	}).(pulumi.IntPtrOutput)
}

// The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.
func (o OutlierDetectionResponsePtrOutput) SuccessRateMinimumHosts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return &v.SuccessRateMinimumHosts
	}).(pulumi.IntPtrOutput)
}

// The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.
func (o OutlierDetectionResponsePtrOutput) SuccessRateRequestVolume() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return &v.SuccessRateRequestVolume
	}).(pulumi.IntPtrOutput)
}

// This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.
func (o OutlierDetectionResponsePtrOutput) SuccessRateStdevFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return &v.SuccessRateStdevFactor
	}).(pulumi.IntPtrOutput)
}

type PacketMirroringFilter struct {
	// IP CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported. If no ranges are specified, all traffic that matches the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
	CidrRanges []string `pulumi:"cidrRanges"`
	// Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH.
	Direction *string `pulumi:"direction"`
	// Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
	IpProtocols []string `pulumi:"ipProtocols"`
}

// PacketMirroringFilterInput is an input type that accepts PacketMirroringFilterArgs and PacketMirroringFilterOutput values.
// You can construct a concrete instance of `PacketMirroringFilterInput` via:
//
//          PacketMirroringFilterArgs{...}
type PacketMirroringFilterInput interface {
	pulumi.Input

	ToPacketMirroringFilterOutput() PacketMirroringFilterOutput
	ToPacketMirroringFilterOutputWithContext(context.Context) PacketMirroringFilterOutput
}

type PacketMirroringFilterArgs struct {
	// IP CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported. If no ranges are specified, all traffic that matches the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
	CidrRanges pulumi.StringArrayInput `pulumi:"cidrRanges"`
	// Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH.
	Direction *PacketMirroringFilterDirection `pulumi:"direction"`
	// Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
	IpProtocols pulumi.StringArrayInput `pulumi:"ipProtocols"`
}

func (PacketMirroringFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringFilter)(nil)).Elem()
}

func (i PacketMirroringFilterArgs) ToPacketMirroringFilterOutput() PacketMirroringFilterOutput {
	return i.ToPacketMirroringFilterOutputWithContext(context.Background())
}

func (i PacketMirroringFilterArgs) ToPacketMirroringFilterOutputWithContext(ctx context.Context) PacketMirroringFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringFilterOutput)
}

func (i PacketMirroringFilterArgs) ToPacketMirroringFilterPtrOutput() PacketMirroringFilterPtrOutput {
	return i.ToPacketMirroringFilterPtrOutputWithContext(context.Background())
}

func (i PacketMirroringFilterArgs) ToPacketMirroringFilterPtrOutputWithContext(ctx context.Context) PacketMirroringFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringFilterOutput).ToPacketMirroringFilterPtrOutputWithContext(ctx)
}

// PacketMirroringFilterPtrInput is an input type that accepts PacketMirroringFilterArgs, PacketMirroringFilterPtr and PacketMirroringFilterPtrOutput values.
// You can construct a concrete instance of `PacketMirroringFilterPtrInput` via:
//
//          PacketMirroringFilterArgs{...}
//
//  or:
//
//          nil
type PacketMirroringFilterPtrInput interface {
	pulumi.Input

	ToPacketMirroringFilterPtrOutput() PacketMirroringFilterPtrOutput
	ToPacketMirroringFilterPtrOutputWithContext(context.Context) PacketMirroringFilterPtrOutput
}

type packetMirroringFilterPtrType PacketMirroringFilterArgs

func PacketMirroringFilterPtr(v *PacketMirroringFilterArgs) PacketMirroringFilterPtrInput {
	return (*packetMirroringFilterPtrType)(v)
}

func (*packetMirroringFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringFilter)(nil)).Elem()
}

func (i *packetMirroringFilterPtrType) ToPacketMirroringFilterPtrOutput() PacketMirroringFilterPtrOutput {
	return i.ToPacketMirroringFilterPtrOutputWithContext(context.Background())
}

func (i *packetMirroringFilterPtrType) ToPacketMirroringFilterPtrOutputWithContext(ctx context.Context) PacketMirroringFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringFilterPtrOutput)
}

type PacketMirroringFilterOutput struct{ *pulumi.OutputState }

func (PacketMirroringFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringFilter)(nil)).Elem()
}

func (o PacketMirroringFilterOutput) ToPacketMirroringFilterOutput() PacketMirroringFilterOutput {
	return o
}

func (o PacketMirroringFilterOutput) ToPacketMirroringFilterOutputWithContext(ctx context.Context) PacketMirroringFilterOutput {
	return o
}

func (o PacketMirroringFilterOutput) ToPacketMirroringFilterPtrOutput() PacketMirroringFilterPtrOutput {
	return o.ToPacketMirroringFilterPtrOutputWithContext(context.Background())
}

func (o PacketMirroringFilterOutput) ToPacketMirroringFilterPtrOutputWithContext(ctx context.Context) PacketMirroringFilterPtrOutput {
	return o.ApplyT(func(v PacketMirroringFilter) *PacketMirroringFilter {
		return &v
	}).(PacketMirroringFilterPtrOutput)
}

// IP CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported. If no ranges are specified, all traffic that matches the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
func (o PacketMirroringFilterOutput) CidrRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PacketMirroringFilter) []string { return v.CidrRanges }).(pulumi.StringArrayOutput)
}

// Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH.
func (o PacketMirroringFilterOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PacketMirroringFilter) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
func (o PacketMirroringFilterOutput) IpProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PacketMirroringFilter) []string { return v.IpProtocols }).(pulumi.StringArrayOutput)
}

type PacketMirroringFilterPtrOutput struct{ *pulumi.OutputState }

func (PacketMirroringFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringFilter)(nil)).Elem()
}

func (o PacketMirroringFilterPtrOutput) ToPacketMirroringFilterPtrOutput() PacketMirroringFilterPtrOutput {
	return o
}

func (o PacketMirroringFilterPtrOutput) ToPacketMirroringFilterPtrOutputWithContext(ctx context.Context) PacketMirroringFilterPtrOutput {
	return o
}

func (o PacketMirroringFilterPtrOutput) Elem() PacketMirroringFilterOutput {
	return o.ApplyT(func(v *PacketMirroringFilter) PacketMirroringFilter { return *v }).(PacketMirroringFilterOutput)
}

// IP CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported. If no ranges are specified, all traffic that matches the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
func (o PacketMirroringFilterPtrOutput) CidrRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PacketMirroringFilter) []string {
		if v == nil {
			return nil
		}
		return v.CidrRanges
	}).(pulumi.StringArrayOutput)
}

// Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH.
func (o PacketMirroringFilterPtrOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PacketMirroringFilter) *string {
		if v == nil {
			return nil
		}
		return v.Direction
	}).(pulumi.StringPtrOutput)
}

// Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
func (o PacketMirroringFilterPtrOutput) IpProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PacketMirroringFilter) []string {
		if v == nil {
			return nil
		}
		return v.IpProtocols
	}).(pulumi.StringArrayOutput)
}

type PacketMirroringFilterResponse struct {
	// IP CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported. If no ranges are specified, all traffic that matches the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
	CidrRanges []string `pulumi:"cidrRanges"`
	// Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH.
	Direction string `pulumi:"direction"`
	// Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
	IpProtocols []string `pulumi:"ipProtocols"`
}

// PacketMirroringFilterResponseInput is an input type that accepts PacketMirroringFilterResponseArgs and PacketMirroringFilterResponseOutput values.
// You can construct a concrete instance of `PacketMirroringFilterResponseInput` via:
//
//          PacketMirroringFilterResponseArgs{...}
type PacketMirroringFilterResponseInput interface {
	pulumi.Input

	ToPacketMirroringFilterResponseOutput() PacketMirroringFilterResponseOutput
	ToPacketMirroringFilterResponseOutputWithContext(context.Context) PacketMirroringFilterResponseOutput
}

type PacketMirroringFilterResponseArgs struct {
	// IP CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported. If no ranges are specified, all traffic that matches the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
	CidrRanges pulumi.StringArrayInput `pulumi:"cidrRanges"`
	// Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH.
	Direction pulumi.StringInput `pulumi:"direction"`
	// Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
	IpProtocols pulumi.StringArrayInput `pulumi:"ipProtocols"`
}

func (PacketMirroringFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringFilterResponse)(nil)).Elem()
}

func (i PacketMirroringFilterResponseArgs) ToPacketMirroringFilterResponseOutput() PacketMirroringFilterResponseOutput {
	return i.ToPacketMirroringFilterResponseOutputWithContext(context.Background())
}

func (i PacketMirroringFilterResponseArgs) ToPacketMirroringFilterResponseOutputWithContext(ctx context.Context) PacketMirroringFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringFilterResponseOutput)
}

func (i PacketMirroringFilterResponseArgs) ToPacketMirroringFilterResponsePtrOutput() PacketMirroringFilterResponsePtrOutput {
	return i.ToPacketMirroringFilterResponsePtrOutputWithContext(context.Background())
}

func (i PacketMirroringFilterResponseArgs) ToPacketMirroringFilterResponsePtrOutputWithContext(ctx context.Context) PacketMirroringFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringFilterResponseOutput).ToPacketMirroringFilterResponsePtrOutputWithContext(ctx)
}

// PacketMirroringFilterResponsePtrInput is an input type that accepts PacketMirroringFilterResponseArgs, PacketMirroringFilterResponsePtr and PacketMirroringFilterResponsePtrOutput values.
// You can construct a concrete instance of `PacketMirroringFilterResponsePtrInput` via:
//
//          PacketMirroringFilterResponseArgs{...}
//
//  or:
//
//          nil
type PacketMirroringFilterResponsePtrInput interface {
	pulumi.Input

	ToPacketMirroringFilterResponsePtrOutput() PacketMirroringFilterResponsePtrOutput
	ToPacketMirroringFilterResponsePtrOutputWithContext(context.Context) PacketMirroringFilterResponsePtrOutput
}

type packetMirroringFilterResponsePtrType PacketMirroringFilterResponseArgs

func PacketMirroringFilterResponsePtr(v *PacketMirroringFilterResponseArgs) PacketMirroringFilterResponsePtrInput {
	return (*packetMirroringFilterResponsePtrType)(v)
}

func (*packetMirroringFilterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringFilterResponse)(nil)).Elem()
}

func (i *packetMirroringFilterResponsePtrType) ToPacketMirroringFilterResponsePtrOutput() PacketMirroringFilterResponsePtrOutput {
	return i.ToPacketMirroringFilterResponsePtrOutputWithContext(context.Background())
}

func (i *packetMirroringFilterResponsePtrType) ToPacketMirroringFilterResponsePtrOutputWithContext(ctx context.Context) PacketMirroringFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringFilterResponsePtrOutput)
}

type PacketMirroringFilterResponseOutput struct{ *pulumi.OutputState }

func (PacketMirroringFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringFilterResponse)(nil)).Elem()
}

func (o PacketMirroringFilterResponseOutput) ToPacketMirroringFilterResponseOutput() PacketMirroringFilterResponseOutput {
	return o
}

func (o PacketMirroringFilterResponseOutput) ToPacketMirroringFilterResponseOutputWithContext(ctx context.Context) PacketMirroringFilterResponseOutput {
	return o
}

func (o PacketMirroringFilterResponseOutput) ToPacketMirroringFilterResponsePtrOutput() PacketMirroringFilterResponsePtrOutput {
	return o.ToPacketMirroringFilterResponsePtrOutputWithContext(context.Background())
}

func (o PacketMirroringFilterResponseOutput) ToPacketMirroringFilterResponsePtrOutputWithContext(ctx context.Context) PacketMirroringFilterResponsePtrOutput {
	return o.ApplyT(func(v PacketMirroringFilterResponse) *PacketMirroringFilterResponse {
		return &v
	}).(PacketMirroringFilterResponsePtrOutput)
}

// IP CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported. If no ranges are specified, all traffic that matches the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
func (o PacketMirroringFilterResponseOutput) CidrRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PacketMirroringFilterResponse) []string { return v.CidrRanges }).(pulumi.StringArrayOutput)
}

// Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH.
func (o PacketMirroringFilterResponseOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v PacketMirroringFilterResponse) string { return v.Direction }).(pulumi.StringOutput)
}

// Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
func (o PacketMirroringFilterResponseOutput) IpProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PacketMirroringFilterResponse) []string { return v.IpProtocols }).(pulumi.StringArrayOutput)
}

type PacketMirroringFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (PacketMirroringFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringFilterResponse)(nil)).Elem()
}

func (o PacketMirroringFilterResponsePtrOutput) ToPacketMirroringFilterResponsePtrOutput() PacketMirroringFilterResponsePtrOutput {
	return o
}

func (o PacketMirroringFilterResponsePtrOutput) ToPacketMirroringFilterResponsePtrOutputWithContext(ctx context.Context) PacketMirroringFilterResponsePtrOutput {
	return o
}

func (o PacketMirroringFilterResponsePtrOutput) Elem() PacketMirroringFilterResponseOutput {
	return o.ApplyT(func(v *PacketMirroringFilterResponse) PacketMirroringFilterResponse { return *v }).(PacketMirroringFilterResponseOutput)
}

// IP CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported. If no ranges are specified, all traffic that matches the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
func (o PacketMirroringFilterResponsePtrOutput) CidrRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PacketMirroringFilterResponse) []string {
		if v == nil {
			return nil
		}
		return v.CidrRanges
	}).(pulumi.StringArrayOutput)
}

// Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH.
func (o PacketMirroringFilterResponsePtrOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PacketMirroringFilterResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Direction
	}).(pulumi.StringPtrOutput)
}

// Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
func (o PacketMirroringFilterResponsePtrOutput) IpProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PacketMirroringFilterResponse) []string {
		if v == nil {
			return nil
		}
		return v.IpProtocols
	}).(pulumi.StringArrayOutput)
}

type PacketMirroringForwardingRuleInfo struct {
	// Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic.
	Url *string `pulumi:"url"`
}

// PacketMirroringForwardingRuleInfoInput is an input type that accepts PacketMirroringForwardingRuleInfoArgs and PacketMirroringForwardingRuleInfoOutput values.
// You can construct a concrete instance of `PacketMirroringForwardingRuleInfoInput` via:
//
//          PacketMirroringForwardingRuleInfoArgs{...}
type PacketMirroringForwardingRuleInfoInput interface {
	pulumi.Input

	ToPacketMirroringForwardingRuleInfoOutput() PacketMirroringForwardingRuleInfoOutput
	ToPacketMirroringForwardingRuleInfoOutputWithContext(context.Context) PacketMirroringForwardingRuleInfoOutput
}

type PacketMirroringForwardingRuleInfoArgs struct {
	// Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (PacketMirroringForwardingRuleInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringForwardingRuleInfo)(nil)).Elem()
}

func (i PacketMirroringForwardingRuleInfoArgs) ToPacketMirroringForwardingRuleInfoOutput() PacketMirroringForwardingRuleInfoOutput {
	return i.ToPacketMirroringForwardingRuleInfoOutputWithContext(context.Background())
}

func (i PacketMirroringForwardingRuleInfoArgs) ToPacketMirroringForwardingRuleInfoOutputWithContext(ctx context.Context) PacketMirroringForwardingRuleInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringForwardingRuleInfoOutput)
}

func (i PacketMirroringForwardingRuleInfoArgs) ToPacketMirroringForwardingRuleInfoPtrOutput() PacketMirroringForwardingRuleInfoPtrOutput {
	return i.ToPacketMirroringForwardingRuleInfoPtrOutputWithContext(context.Background())
}

func (i PacketMirroringForwardingRuleInfoArgs) ToPacketMirroringForwardingRuleInfoPtrOutputWithContext(ctx context.Context) PacketMirroringForwardingRuleInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringForwardingRuleInfoOutput).ToPacketMirroringForwardingRuleInfoPtrOutputWithContext(ctx)
}

// PacketMirroringForwardingRuleInfoPtrInput is an input type that accepts PacketMirroringForwardingRuleInfoArgs, PacketMirroringForwardingRuleInfoPtr and PacketMirroringForwardingRuleInfoPtrOutput values.
// You can construct a concrete instance of `PacketMirroringForwardingRuleInfoPtrInput` via:
//
//          PacketMirroringForwardingRuleInfoArgs{...}
//
//  or:
//
//          nil
type PacketMirroringForwardingRuleInfoPtrInput interface {
	pulumi.Input

	ToPacketMirroringForwardingRuleInfoPtrOutput() PacketMirroringForwardingRuleInfoPtrOutput
	ToPacketMirroringForwardingRuleInfoPtrOutputWithContext(context.Context) PacketMirroringForwardingRuleInfoPtrOutput
}

type packetMirroringForwardingRuleInfoPtrType PacketMirroringForwardingRuleInfoArgs

func PacketMirroringForwardingRuleInfoPtr(v *PacketMirroringForwardingRuleInfoArgs) PacketMirroringForwardingRuleInfoPtrInput {
	return (*packetMirroringForwardingRuleInfoPtrType)(v)
}

func (*packetMirroringForwardingRuleInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringForwardingRuleInfo)(nil)).Elem()
}

func (i *packetMirroringForwardingRuleInfoPtrType) ToPacketMirroringForwardingRuleInfoPtrOutput() PacketMirroringForwardingRuleInfoPtrOutput {
	return i.ToPacketMirroringForwardingRuleInfoPtrOutputWithContext(context.Background())
}

func (i *packetMirroringForwardingRuleInfoPtrType) ToPacketMirroringForwardingRuleInfoPtrOutputWithContext(ctx context.Context) PacketMirroringForwardingRuleInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringForwardingRuleInfoPtrOutput)
}

type PacketMirroringForwardingRuleInfoOutput struct{ *pulumi.OutputState }

func (PacketMirroringForwardingRuleInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringForwardingRuleInfo)(nil)).Elem()
}

func (o PacketMirroringForwardingRuleInfoOutput) ToPacketMirroringForwardingRuleInfoOutput() PacketMirroringForwardingRuleInfoOutput {
	return o
}

func (o PacketMirroringForwardingRuleInfoOutput) ToPacketMirroringForwardingRuleInfoOutputWithContext(ctx context.Context) PacketMirroringForwardingRuleInfoOutput {
	return o
}

func (o PacketMirroringForwardingRuleInfoOutput) ToPacketMirroringForwardingRuleInfoPtrOutput() PacketMirroringForwardingRuleInfoPtrOutput {
	return o.ToPacketMirroringForwardingRuleInfoPtrOutputWithContext(context.Background())
}

func (o PacketMirroringForwardingRuleInfoOutput) ToPacketMirroringForwardingRuleInfoPtrOutputWithContext(ctx context.Context) PacketMirroringForwardingRuleInfoPtrOutput {
	return o.ApplyT(func(v PacketMirroringForwardingRuleInfo) *PacketMirroringForwardingRuleInfo {
		return &v
	}).(PacketMirroringForwardingRuleInfoPtrOutput)
}

// Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic.
func (o PacketMirroringForwardingRuleInfoOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PacketMirroringForwardingRuleInfo) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type PacketMirroringForwardingRuleInfoPtrOutput struct{ *pulumi.OutputState }

func (PacketMirroringForwardingRuleInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringForwardingRuleInfo)(nil)).Elem()
}

func (o PacketMirroringForwardingRuleInfoPtrOutput) ToPacketMirroringForwardingRuleInfoPtrOutput() PacketMirroringForwardingRuleInfoPtrOutput {
	return o
}

func (o PacketMirroringForwardingRuleInfoPtrOutput) ToPacketMirroringForwardingRuleInfoPtrOutputWithContext(ctx context.Context) PacketMirroringForwardingRuleInfoPtrOutput {
	return o
}

func (o PacketMirroringForwardingRuleInfoPtrOutput) Elem() PacketMirroringForwardingRuleInfoOutput {
	return o.ApplyT(func(v *PacketMirroringForwardingRuleInfo) PacketMirroringForwardingRuleInfo { return *v }).(PacketMirroringForwardingRuleInfoOutput)
}

// Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic.
func (o PacketMirroringForwardingRuleInfoPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PacketMirroringForwardingRuleInfo) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type PacketMirroringForwardingRuleInfoResponse struct {
	// Unique identifier for the forwarding rule; defined by the server.
	CanonicalUrl string `pulumi:"canonicalUrl"`
	// Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic.
	Url string `pulumi:"url"`
}

// PacketMirroringForwardingRuleInfoResponseInput is an input type that accepts PacketMirroringForwardingRuleInfoResponseArgs and PacketMirroringForwardingRuleInfoResponseOutput values.
// You can construct a concrete instance of `PacketMirroringForwardingRuleInfoResponseInput` via:
//
//          PacketMirroringForwardingRuleInfoResponseArgs{...}
type PacketMirroringForwardingRuleInfoResponseInput interface {
	pulumi.Input

	ToPacketMirroringForwardingRuleInfoResponseOutput() PacketMirroringForwardingRuleInfoResponseOutput
	ToPacketMirroringForwardingRuleInfoResponseOutputWithContext(context.Context) PacketMirroringForwardingRuleInfoResponseOutput
}

type PacketMirroringForwardingRuleInfoResponseArgs struct {
	// Unique identifier for the forwarding rule; defined by the server.
	CanonicalUrl pulumi.StringInput `pulumi:"canonicalUrl"`
	// Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic.
	Url pulumi.StringInput `pulumi:"url"`
}

func (PacketMirroringForwardingRuleInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringForwardingRuleInfoResponse)(nil)).Elem()
}

func (i PacketMirroringForwardingRuleInfoResponseArgs) ToPacketMirroringForwardingRuleInfoResponseOutput() PacketMirroringForwardingRuleInfoResponseOutput {
	return i.ToPacketMirroringForwardingRuleInfoResponseOutputWithContext(context.Background())
}

func (i PacketMirroringForwardingRuleInfoResponseArgs) ToPacketMirroringForwardingRuleInfoResponseOutputWithContext(ctx context.Context) PacketMirroringForwardingRuleInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringForwardingRuleInfoResponseOutput)
}

func (i PacketMirroringForwardingRuleInfoResponseArgs) ToPacketMirroringForwardingRuleInfoResponsePtrOutput() PacketMirroringForwardingRuleInfoResponsePtrOutput {
	return i.ToPacketMirroringForwardingRuleInfoResponsePtrOutputWithContext(context.Background())
}

func (i PacketMirroringForwardingRuleInfoResponseArgs) ToPacketMirroringForwardingRuleInfoResponsePtrOutputWithContext(ctx context.Context) PacketMirroringForwardingRuleInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringForwardingRuleInfoResponseOutput).ToPacketMirroringForwardingRuleInfoResponsePtrOutputWithContext(ctx)
}

// PacketMirroringForwardingRuleInfoResponsePtrInput is an input type that accepts PacketMirroringForwardingRuleInfoResponseArgs, PacketMirroringForwardingRuleInfoResponsePtr and PacketMirroringForwardingRuleInfoResponsePtrOutput values.
// You can construct a concrete instance of `PacketMirroringForwardingRuleInfoResponsePtrInput` via:
//
//          PacketMirroringForwardingRuleInfoResponseArgs{...}
//
//  or:
//
//          nil
type PacketMirroringForwardingRuleInfoResponsePtrInput interface {
	pulumi.Input

	ToPacketMirroringForwardingRuleInfoResponsePtrOutput() PacketMirroringForwardingRuleInfoResponsePtrOutput
	ToPacketMirroringForwardingRuleInfoResponsePtrOutputWithContext(context.Context) PacketMirroringForwardingRuleInfoResponsePtrOutput
}

type packetMirroringForwardingRuleInfoResponsePtrType PacketMirroringForwardingRuleInfoResponseArgs

func PacketMirroringForwardingRuleInfoResponsePtr(v *PacketMirroringForwardingRuleInfoResponseArgs) PacketMirroringForwardingRuleInfoResponsePtrInput {
	return (*packetMirroringForwardingRuleInfoResponsePtrType)(v)
}

func (*packetMirroringForwardingRuleInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringForwardingRuleInfoResponse)(nil)).Elem()
}

func (i *packetMirroringForwardingRuleInfoResponsePtrType) ToPacketMirroringForwardingRuleInfoResponsePtrOutput() PacketMirroringForwardingRuleInfoResponsePtrOutput {
	return i.ToPacketMirroringForwardingRuleInfoResponsePtrOutputWithContext(context.Background())
}

func (i *packetMirroringForwardingRuleInfoResponsePtrType) ToPacketMirroringForwardingRuleInfoResponsePtrOutputWithContext(ctx context.Context) PacketMirroringForwardingRuleInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringForwardingRuleInfoResponsePtrOutput)
}

type PacketMirroringForwardingRuleInfoResponseOutput struct{ *pulumi.OutputState }

func (PacketMirroringForwardingRuleInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringForwardingRuleInfoResponse)(nil)).Elem()
}

func (o PacketMirroringForwardingRuleInfoResponseOutput) ToPacketMirroringForwardingRuleInfoResponseOutput() PacketMirroringForwardingRuleInfoResponseOutput {
	return o
}

func (o PacketMirroringForwardingRuleInfoResponseOutput) ToPacketMirroringForwardingRuleInfoResponseOutputWithContext(ctx context.Context) PacketMirroringForwardingRuleInfoResponseOutput {
	return o
}

func (o PacketMirroringForwardingRuleInfoResponseOutput) ToPacketMirroringForwardingRuleInfoResponsePtrOutput() PacketMirroringForwardingRuleInfoResponsePtrOutput {
	return o.ToPacketMirroringForwardingRuleInfoResponsePtrOutputWithContext(context.Background())
}

func (o PacketMirroringForwardingRuleInfoResponseOutput) ToPacketMirroringForwardingRuleInfoResponsePtrOutputWithContext(ctx context.Context) PacketMirroringForwardingRuleInfoResponsePtrOutput {
	return o.ApplyT(func(v PacketMirroringForwardingRuleInfoResponse) *PacketMirroringForwardingRuleInfoResponse {
		return &v
	}).(PacketMirroringForwardingRuleInfoResponsePtrOutput)
}

// Unique identifier for the forwarding rule; defined by the server.
func (o PacketMirroringForwardingRuleInfoResponseOutput) CanonicalUrl() pulumi.StringOutput {
	return o.ApplyT(func(v PacketMirroringForwardingRuleInfoResponse) string { return v.CanonicalUrl }).(pulumi.StringOutput)
}

// Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic.
func (o PacketMirroringForwardingRuleInfoResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v PacketMirroringForwardingRuleInfoResponse) string { return v.Url }).(pulumi.StringOutput)
}

type PacketMirroringForwardingRuleInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (PacketMirroringForwardingRuleInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringForwardingRuleInfoResponse)(nil)).Elem()
}

func (o PacketMirroringForwardingRuleInfoResponsePtrOutput) ToPacketMirroringForwardingRuleInfoResponsePtrOutput() PacketMirroringForwardingRuleInfoResponsePtrOutput {
	return o
}

func (o PacketMirroringForwardingRuleInfoResponsePtrOutput) ToPacketMirroringForwardingRuleInfoResponsePtrOutputWithContext(ctx context.Context) PacketMirroringForwardingRuleInfoResponsePtrOutput {
	return o
}

func (o PacketMirroringForwardingRuleInfoResponsePtrOutput) Elem() PacketMirroringForwardingRuleInfoResponseOutput {
	return o.ApplyT(func(v *PacketMirroringForwardingRuleInfoResponse) PacketMirroringForwardingRuleInfoResponse {
		return *v
	}).(PacketMirroringForwardingRuleInfoResponseOutput)
}

// Unique identifier for the forwarding rule; defined by the server.
func (o PacketMirroringForwardingRuleInfoResponsePtrOutput) CanonicalUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PacketMirroringForwardingRuleInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CanonicalUrl
	}).(pulumi.StringPtrOutput)
}

// Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic.
func (o PacketMirroringForwardingRuleInfoResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PacketMirroringForwardingRuleInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type PacketMirroringMirroredResourceInfo struct {
	// A set of virtual machine instances that are being mirrored. They must live in zones contained in the same region as this packetMirroring. Note that this config will apply only to those network interfaces of the Instances that belong to the network specified in this packetMirroring. You may specify a maximum of 50 Instances.
	Instances []PacketMirroringMirroredResourceInfoInstanceInfo `pulumi:"instances"`
	// A set of subnetworks for which traffic from/to all VM instances will be mirrored. They must live in the same region as this packetMirroring. You may specify a maximum of 5 subnetworks.
	Subnetworks []PacketMirroringMirroredResourceInfoSubnetInfo `pulumi:"subnetworks"`
	// A set of mirrored tags. Traffic from/to all VM instances that have one or more of these tags will be mirrored.
	Tags []string `pulumi:"tags"`
}

// PacketMirroringMirroredResourceInfoInput is an input type that accepts PacketMirroringMirroredResourceInfoArgs and PacketMirroringMirroredResourceInfoOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourceInfoInput` via:
//
//          PacketMirroringMirroredResourceInfoArgs{...}
type PacketMirroringMirroredResourceInfoInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourceInfoOutput() PacketMirroringMirroredResourceInfoOutput
	ToPacketMirroringMirroredResourceInfoOutputWithContext(context.Context) PacketMirroringMirroredResourceInfoOutput
}

type PacketMirroringMirroredResourceInfoArgs struct {
	// A set of virtual machine instances that are being mirrored. They must live in zones contained in the same region as this packetMirroring. Note that this config will apply only to those network interfaces of the Instances that belong to the network specified in this packetMirroring. You may specify a maximum of 50 Instances.
	Instances PacketMirroringMirroredResourceInfoInstanceInfoArrayInput `pulumi:"instances"`
	// A set of subnetworks for which traffic from/to all VM instances will be mirrored. They must live in the same region as this packetMirroring. You may specify a maximum of 5 subnetworks.
	Subnetworks PacketMirroringMirroredResourceInfoSubnetInfoArrayInput `pulumi:"subnetworks"`
	// A set of mirrored tags. Traffic from/to all VM instances that have one or more of these tags will be mirrored.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (PacketMirroringMirroredResourceInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResourceInfo)(nil)).Elem()
}

func (i PacketMirroringMirroredResourceInfoArgs) ToPacketMirroringMirroredResourceInfoOutput() PacketMirroringMirroredResourceInfoOutput {
	return i.ToPacketMirroringMirroredResourceInfoOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourceInfoArgs) ToPacketMirroringMirroredResourceInfoOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourceInfoOutput)
}

func (i PacketMirroringMirroredResourceInfoArgs) ToPacketMirroringMirroredResourceInfoPtrOutput() PacketMirroringMirroredResourceInfoPtrOutput {
	return i.ToPacketMirroringMirroredResourceInfoPtrOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourceInfoArgs) ToPacketMirroringMirroredResourceInfoPtrOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourceInfoOutput).ToPacketMirroringMirroredResourceInfoPtrOutputWithContext(ctx)
}

// PacketMirroringMirroredResourceInfoPtrInput is an input type that accepts PacketMirroringMirroredResourceInfoArgs, PacketMirroringMirroredResourceInfoPtr and PacketMirroringMirroredResourceInfoPtrOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourceInfoPtrInput` via:
//
//          PacketMirroringMirroredResourceInfoArgs{...}
//
//  or:
//
//          nil
type PacketMirroringMirroredResourceInfoPtrInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourceInfoPtrOutput() PacketMirroringMirroredResourceInfoPtrOutput
	ToPacketMirroringMirroredResourceInfoPtrOutputWithContext(context.Context) PacketMirroringMirroredResourceInfoPtrOutput
}

type packetMirroringMirroredResourceInfoPtrType PacketMirroringMirroredResourceInfoArgs

func PacketMirroringMirroredResourceInfoPtr(v *PacketMirroringMirroredResourceInfoArgs) PacketMirroringMirroredResourceInfoPtrInput {
	return (*packetMirroringMirroredResourceInfoPtrType)(v)
}

func (*packetMirroringMirroredResourceInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringMirroredResourceInfo)(nil)).Elem()
}

func (i *packetMirroringMirroredResourceInfoPtrType) ToPacketMirroringMirroredResourceInfoPtrOutput() PacketMirroringMirroredResourceInfoPtrOutput {
	return i.ToPacketMirroringMirroredResourceInfoPtrOutputWithContext(context.Background())
}

func (i *packetMirroringMirroredResourceInfoPtrType) ToPacketMirroringMirroredResourceInfoPtrOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourceInfoPtrOutput)
}

type PacketMirroringMirroredResourceInfoOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourceInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResourceInfo)(nil)).Elem()
}

func (o PacketMirroringMirroredResourceInfoOutput) ToPacketMirroringMirroredResourceInfoOutput() PacketMirroringMirroredResourceInfoOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoOutput) ToPacketMirroringMirroredResourceInfoOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoOutput) ToPacketMirroringMirroredResourceInfoPtrOutput() PacketMirroringMirroredResourceInfoPtrOutput {
	return o.ToPacketMirroringMirroredResourceInfoPtrOutputWithContext(context.Background())
}

func (o PacketMirroringMirroredResourceInfoOutput) ToPacketMirroringMirroredResourceInfoPtrOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoPtrOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResourceInfo) *PacketMirroringMirroredResourceInfo {
		return &v
	}).(PacketMirroringMirroredResourceInfoPtrOutput)
}

// A set of virtual machine instances that are being mirrored. They must live in zones contained in the same region as this packetMirroring. Note that this config will apply only to those network interfaces of the Instances that belong to the network specified in this packetMirroring. You may specify a maximum of 50 Instances.
func (o PacketMirroringMirroredResourceInfoOutput) Instances() PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResourceInfo) []PacketMirroringMirroredResourceInfoInstanceInfo {
		return v.Instances
	}).(PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput)
}

// A set of subnetworks for which traffic from/to all VM instances will be mirrored. They must live in the same region as this packetMirroring. You may specify a maximum of 5 subnetworks.
func (o PacketMirroringMirroredResourceInfoOutput) Subnetworks() PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResourceInfo) []PacketMirroringMirroredResourceInfoSubnetInfo {
		return v.Subnetworks
	}).(PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput)
}

// A set of mirrored tags. Traffic from/to all VM instances that have one or more of these tags will be mirrored.
func (o PacketMirroringMirroredResourceInfoOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResourceInfo) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type PacketMirroringMirroredResourceInfoPtrOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourceInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringMirroredResourceInfo)(nil)).Elem()
}

func (o PacketMirroringMirroredResourceInfoPtrOutput) ToPacketMirroringMirroredResourceInfoPtrOutput() PacketMirroringMirroredResourceInfoPtrOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoPtrOutput) ToPacketMirroringMirroredResourceInfoPtrOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoPtrOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoPtrOutput) Elem() PacketMirroringMirroredResourceInfoOutput {
	return o.ApplyT(func(v *PacketMirroringMirroredResourceInfo) PacketMirroringMirroredResourceInfo { return *v }).(PacketMirroringMirroredResourceInfoOutput)
}

// A set of virtual machine instances that are being mirrored. They must live in zones contained in the same region as this packetMirroring. Note that this config will apply only to those network interfaces of the Instances that belong to the network specified in this packetMirroring. You may specify a maximum of 50 Instances.
func (o PacketMirroringMirroredResourceInfoPtrOutput) Instances() PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput {
	return o.ApplyT(func(v *PacketMirroringMirroredResourceInfo) []PacketMirroringMirroredResourceInfoInstanceInfo {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput)
}

// A set of subnetworks for which traffic from/to all VM instances will be mirrored. They must live in the same region as this packetMirroring. You may specify a maximum of 5 subnetworks.
func (o PacketMirroringMirroredResourceInfoPtrOutput) Subnetworks() PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput {
	return o.ApplyT(func(v *PacketMirroringMirroredResourceInfo) []PacketMirroringMirroredResourceInfoSubnetInfo {
		if v == nil {
			return nil
		}
		return v.Subnetworks
	}).(PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput)
}

// A set of mirrored tags. Traffic from/to all VM instances that have one or more of these tags will be mirrored.
func (o PacketMirroringMirroredResourceInfoPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PacketMirroringMirroredResourceInfo) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

type PacketMirroringMirroredResourceInfoInstanceInfo struct {
	// Resource URL to the virtual machine instance which is being mirrored.
	Url *string `pulumi:"url"`
}

// PacketMirroringMirroredResourceInfoInstanceInfoInput is an input type that accepts PacketMirroringMirroredResourceInfoInstanceInfoArgs and PacketMirroringMirroredResourceInfoInstanceInfoOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourceInfoInstanceInfoInput` via:
//
//          PacketMirroringMirroredResourceInfoInstanceInfoArgs{...}
type PacketMirroringMirroredResourceInfoInstanceInfoInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourceInfoInstanceInfoOutput() PacketMirroringMirroredResourceInfoInstanceInfoOutput
	ToPacketMirroringMirroredResourceInfoInstanceInfoOutputWithContext(context.Context) PacketMirroringMirroredResourceInfoInstanceInfoOutput
}

type PacketMirroringMirroredResourceInfoInstanceInfoArgs struct {
	// Resource URL to the virtual machine instance which is being mirrored.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (PacketMirroringMirroredResourceInfoInstanceInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResourceInfoInstanceInfo)(nil)).Elem()
}

func (i PacketMirroringMirroredResourceInfoInstanceInfoArgs) ToPacketMirroringMirroredResourceInfoInstanceInfoOutput() PacketMirroringMirroredResourceInfoInstanceInfoOutput {
	return i.ToPacketMirroringMirroredResourceInfoInstanceInfoOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourceInfoInstanceInfoArgs) ToPacketMirroringMirroredResourceInfoInstanceInfoOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoInstanceInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourceInfoInstanceInfoOutput)
}

// PacketMirroringMirroredResourceInfoInstanceInfoArrayInput is an input type that accepts PacketMirroringMirroredResourceInfoInstanceInfoArray and PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourceInfoInstanceInfoArrayInput` via:
//
//          PacketMirroringMirroredResourceInfoInstanceInfoArray{ PacketMirroringMirroredResourceInfoInstanceInfoArgs{...} }
type PacketMirroringMirroredResourceInfoInstanceInfoArrayInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourceInfoInstanceInfoArrayOutput() PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput
	ToPacketMirroringMirroredResourceInfoInstanceInfoArrayOutputWithContext(context.Context) PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput
}

type PacketMirroringMirroredResourceInfoInstanceInfoArray []PacketMirroringMirroredResourceInfoInstanceInfoInput

func (PacketMirroringMirroredResourceInfoInstanceInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PacketMirroringMirroredResourceInfoInstanceInfo)(nil)).Elem()
}

func (i PacketMirroringMirroredResourceInfoInstanceInfoArray) ToPacketMirroringMirroredResourceInfoInstanceInfoArrayOutput() PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput {
	return i.ToPacketMirroringMirroredResourceInfoInstanceInfoArrayOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourceInfoInstanceInfoArray) ToPacketMirroringMirroredResourceInfoInstanceInfoArrayOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput)
}

type PacketMirroringMirroredResourceInfoInstanceInfoOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourceInfoInstanceInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResourceInfoInstanceInfo)(nil)).Elem()
}

func (o PacketMirroringMirroredResourceInfoInstanceInfoOutput) ToPacketMirroringMirroredResourceInfoInstanceInfoOutput() PacketMirroringMirroredResourceInfoInstanceInfoOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoInstanceInfoOutput) ToPacketMirroringMirroredResourceInfoInstanceInfoOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoInstanceInfoOutput {
	return o
}

// Resource URL to the virtual machine instance which is being mirrored.
func (o PacketMirroringMirroredResourceInfoInstanceInfoOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResourceInfoInstanceInfo) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PacketMirroringMirroredResourceInfoInstanceInfo)(nil)).Elem()
}

func (o PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput) ToPacketMirroringMirroredResourceInfoInstanceInfoArrayOutput() PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput) ToPacketMirroringMirroredResourceInfoInstanceInfoArrayOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput) Index(i pulumi.IntInput) PacketMirroringMirroredResourceInfoInstanceInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PacketMirroringMirroredResourceInfoInstanceInfo {
		return vs[0].([]PacketMirroringMirroredResourceInfoInstanceInfo)[vs[1].(int)]
	}).(PacketMirroringMirroredResourceInfoInstanceInfoOutput)
}

type PacketMirroringMirroredResourceInfoInstanceInfoResponse struct {
	// Unique identifier for the instance; defined by the server.
	CanonicalUrl string `pulumi:"canonicalUrl"`
	// Resource URL to the virtual machine instance which is being mirrored.
	Url string `pulumi:"url"`
}

// PacketMirroringMirroredResourceInfoInstanceInfoResponseInput is an input type that accepts PacketMirroringMirroredResourceInfoInstanceInfoResponseArgs and PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourceInfoInstanceInfoResponseInput` via:
//
//          PacketMirroringMirroredResourceInfoInstanceInfoResponseArgs{...}
type PacketMirroringMirroredResourceInfoInstanceInfoResponseInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourceInfoInstanceInfoResponseOutput() PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput
	ToPacketMirroringMirroredResourceInfoInstanceInfoResponseOutputWithContext(context.Context) PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput
}

type PacketMirroringMirroredResourceInfoInstanceInfoResponseArgs struct {
	// Unique identifier for the instance; defined by the server.
	CanonicalUrl pulumi.StringInput `pulumi:"canonicalUrl"`
	// Resource URL to the virtual machine instance which is being mirrored.
	Url pulumi.StringInput `pulumi:"url"`
}

func (PacketMirroringMirroredResourceInfoInstanceInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResourceInfoInstanceInfoResponse)(nil)).Elem()
}

func (i PacketMirroringMirroredResourceInfoInstanceInfoResponseArgs) ToPacketMirroringMirroredResourceInfoInstanceInfoResponseOutput() PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput {
	return i.ToPacketMirroringMirroredResourceInfoInstanceInfoResponseOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourceInfoInstanceInfoResponseArgs) ToPacketMirroringMirroredResourceInfoInstanceInfoResponseOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput)
}

// PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayInput is an input type that accepts PacketMirroringMirroredResourceInfoInstanceInfoResponseArray and PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayInput` via:
//
//          PacketMirroringMirroredResourceInfoInstanceInfoResponseArray{ PacketMirroringMirroredResourceInfoInstanceInfoResponseArgs{...} }
type PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput() PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput
	ToPacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutputWithContext(context.Context) PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput
}

type PacketMirroringMirroredResourceInfoInstanceInfoResponseArray []PacketMirroringMirroredResourceInfoInstanceInfoResponseInput

func (PacketMirroringMirroredResourceInfoInstanceInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PacketMirroringMirroredResourceInfoInstanceInfoResponse)(nil)).Elem()
}

func (i PacketMirroringMirroredResourceInfoInstanceInfoResponseArray) ToPacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput() PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput {
	return i.ToPacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourceInfoInstanceInfoResponseArray) ToPacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput)
}

type PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResourceInfoInstanceInfoResponse)(nil)).Elem()
}

func (o PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput) ToPacketMirroringMirroredResourceInfoInstanceInfoResponseOutput() PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput) ToPacketMirroringMirroredResourceInfoInstanceInfoResponseOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput {
	return o
}

// Unique identifier for the instance; defined by the server.
func (o PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput) CanonicalUrl() pulumi.StringOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResourceInfoInstanceInfoResponse) string { return v.CanonicalUrl }).(pulumi.StringOutput)
}

// Resource URL to the virtual machine instance which is being mirrored.
func (o PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResourceInfoInstanceInfoResponse) string { return v.Url }).(pulumi.StringOutput)
}

type PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PacketMirroringMirroredResourceInfoInstanceInfoResponse)(nil)).Elem()
}

func (o PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput) ToPacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput() PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput) ToPacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput) Index(i pulumi.IntInput) PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PacketMirroringMirroredResourceInfoInstanceInfoResponse {
		return vs[0].([]PacketMirroringMirroredResourceInfoInstanceInfoResponse)[vs[1].(int)]
	}).(PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput)
}

type PacketMirroringMirroredResourceInfoResponse struct {
	// A set of virtual machine instances that are being mirrored. They must live in zones contained in the same region as this packetMirroring. Note that this config will apply only to those network interfaces of the Instances that belong to the network specified in this packetMirroring. You may specify a maximum of 50 Instances.
	Instances []PacketMirroringMirroredResourceInfoInstanceInfoResponse `pulumi:"instances"`
	// A set of subnetworks for which traffic from/to all VM instances will be mirrored. They must live in the same region as this packetMirroring. You may specify a maximum of 5 subnetworks.
	Subnetworks []PacketMirroringMirroredResourceInfoSubnetInfoResponse `pulumi:"subnetworks"`
	// A set of mirrored tags. Traffic from/to all VM instances that have one or more of these tags will be mirrored.
	Tags []string `pulumi:"tags"`
}

// PacketMirroringMirroredResourceInfoResponseInput is an input type that accepts PacketMirroringMirroredResourceInfoResponseArgs and PacketMirroringMirroredResourceInfoResponseOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourceInfoResponseInput` via:
//
//          PacketMirroringMirroredResourceInfoResponseArgs{...}
type PacketMirroringMirroredResourceInfoResponseInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourceInfoResponseOutput() PacketMirroringMirroredResourceInfoResponseOutput
	ToPacketMirroringMirroredResourceInfoResponseOutputWithContext(context.Context) PacketMirroringMirroredResourceInfoResponseOutput
}

type PacketMirroringMirroredResourceInfoResponseArgs struct {
	// A set of virtual machine instances that are being mirrored. They must live in zones contained in the same region as this packetMirroring. Note that this config will apply only to those network interfaces of the Instances that belong to the network specified in this packetMirroring. You may specify a maximum of 50 Instances.
	Instances PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayInput `pulumi:"instances"`
	// A set of subnetworks for which traffic from/to all VM instances will be mirrored. They must live in the same region as this packetMirroring. You may specify a maximum of 5 subnetworks.
	Subnetworks PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayInput `pulumi:"subnetworks"`
	// A set of mirrored tags. Traffic from/to all VM instances that have one or more of these tags will be mirrored.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (PacketMirroringMirroredResourceInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResourceInfoResponse)(nil)).Elem()
}

func (i PacketMirroringMirroredResourceInfoResponseArgs) ToPacketMirroringMirroredResourceInfoResponseOutput() PacketMirroringMirroredResourceInfoResponseOutput {
	return i.ToPacketMirroringMirroredResourceInfoResponseOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourceInfoResponseArgs) ToPacketMirroringMirroredResourceInfoResponseOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourceInfoResponseOutput)
}

func (i PacketMirroringMirroredResourceInfoResponseArgs) ToPacketMirroringMirroredResourceInfoResponsePtrOutput() PacketMirroringMirroredResourceInfoResponsePtrOutput {
	return i.ToPacketMirroringMirroredResourceInfoResponsePtrOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourceInfoResponseArgs) ToPacketMirroringMirroredResourceInfoResponsePtrOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourceInfoResponseOutput).ToPacketMirroringMirroredResourceInfoResponsePtrOutputWithContext(ctx)
}

// PacketMirroringMirroredResourceInfoResponsePtrInput is an input type that accepts PacketMirroringMirroredResourceInfoResponseArgs, PacketMirroringMirroredResourceInfoResponsePtr and PacketMirroringMirroredResourceInfoResponsePtrOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourceInfoResponsePtrInput` via:
//
//          PacketMirroringMirroredResourceInfoResponseArgs{...}
//
//  or:
//
//          nil
type PacketMirroringMirroredResourceInfoResponsePtrInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourceInfoResponsePtrOutput() PacketMirroringMirroredResourceInfoResponsePtrOutput
	ToPacketMirroringMirroredResourceInfoResponsePtrOutputWithContext(context.Context) PacketMirroringMirroredResourceInfoResponsePtrOutput
}

type packetMirroringMirroredResourceInfoResponsePtrType PacketMirroringMirroredResourceInfoResponseArgs

func PacketMirroringMirroredResourceInfoResponsePtr(v *PacketMirroringMirroredResourceInfoResponseArgs) PacketMirroringMirroredResourceInfoResponsePtrInput {
	return (*packetMirroringMirroredResourceInfoResponsePtrType)(v)
}

func (*packetMirroringMirroredResourceInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringMirroredResourceInfoResponse)(nil)).Elem()
}

func (i *packetMirroringMirroredResourceInfoResponsePtrType) ToPacketMirroringMirroredResourceInfoResponsePtrOutput() PacketMirroringMirroredResourceInfoResponsePtrOutput {
	return i.ToPacketMirroringMirroredResourceInfoResponsePtrOutputWithContext(context.Background())
}

func (i *packetMirroringMirroredResourceInfoResponsePtrType) ToPacketMirroringMirroredResourceInfoResponsePtrOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourceInfoResponsePtrOutput)
}

type PacketMirroringMirroredResourceInfoResponseOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourceInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResourceInfoResponse)(nil)).Elem()
}

func (o PacketMirroringMirroredResourceInfoResponseOutput) ToPacketMirroringMirroredResourceInfoResponseOutput() PacketMirroringMirroredResourceInfoResponseOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoResponseOutput) ToPacketMirroringMirroredResourceInfoResponseOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoResponseOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoResponseOutput) ToPacketMirroringMirroredResourceInfoResponsePtrOutput() PacketMirroringMirroredResourceInfoResponsePtrOutput {
	return o.ToPacketMirroringMirroredResourceInfoResponsePtrOutputWithContext(context.Background())
}

func (o PacketMirroringMirroredResourceInfoResponseOutput) ToPacketMirroringMirroredResourceInfoResponsePtrOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoResponsePtrOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResourceInfoResponse) *PacketMirroringMirroredResourceInfoResponse {
		return &v
	}).(PacketMirroringMirroredResourceInfoResponsePtrOutput)
}

// A set of virtual machine instances that are being mirrored. They must live in zones contained in the same region as this packetMirroring. Note that this config will apply only to those network interfaces of the Instances that belong to the network specified in this packetMirroring. You may specify a maximum of 50 Instances.
func (o PacketMirroringMirroredResourceInfoResponseOutput) Instances() PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResourceInfoResponse) []PacketMirroringMirroredResourceInfoInstanceInfoResponse {
		return v.Instances
	}).(PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput)
}

// A set of subnetworks for which traffic from/to all VM instances will be mirrored. They must live in the same region as this packetMirroring. You may specify a maximum of 5 subnetworks.
func (o PacketMirroringMirroredResourceInfoResponseOutput) Subnetworks() PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResourceInfoResponse) []PacketMirroringMirroredResourceInfoSubnetInfoResponse {
		return v.Subnetworks
	}).(PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput)
}

// A set of mirrored tags. Traffic from/to all VM instances that have one or more of these tags will be mirrored.
func (o PacketMirroringMirroredResourceInfoResponseOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResourceInfoResponse) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type PacketMirroringMirroredResourceInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourceInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringMirroredResourceInfoResponse)(nil)).Elem()
}

func (o PacketMirroringMirroredResourceInfoResponsePtrOutput) ToPacketMirroringMirroredResourceInfoResponsePtrOutput() PacketMirroringMirroredResourceInfoResponsePtrOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoResponsePtrOutput) ToPacketMirroringMirroredResourceInfoResponsePtrOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoResponsePtrOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoResponsePtrOutput) Elem() PacketMirroringMirroredResourceInfoResponseOutput {
	return o.ApplyT(func(v *PacketMirroringMirroredResourceInfoResponse) PacketMirroringMirroredResourceInfoResponse {
		return *v
	}).(PacketMirroringMirroredResourceInfoResponseOutput)
}

// A set of virtual machine instances that are being mirrored. They must live in zones contained in the same region as this packetMirroring. Note that this config will apply only to those network interfaces of the Instances that belong to the network specified in this packetMirroring. You may specify a maximum of 50 Instances.
func (o PacketMirroringMirroredResourceInfoResponsePtrOutput) Instances() PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput {
	return o.ApplyT(func(v *PacketMirroringMirroredResourceInfoResponse) []PacketMirroringMirroredResourceInfoInstanceInfoResponse {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput)
}

// A set of subnetworks for which traffic from/to all VM instances will be mirrored. They must live in the same region as this packetMirroring. You may specify a maximum of 5 subnetworks.
func (o PacketMirroringMirroredResourceInfoResponsePtrOutput) Subnetworks() PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput {
	return o.ApplyT(func(v *PacketMirroringMirroredResourceInfoResponse) []PacketMirroringMirroredResourceInfoSubnetInfoResponse {
		if v == nil {
			return nil
		}
		return v.Subnetworks
	}).(PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput)
}

// A set of mirrored tags. Traffic from/to all VM instances that have one or more of these tags will be mirrored.
func (o PacketMirroringMirroredResourceInfoResponsePtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PacketMirroringMirroredResourceInfoResponse) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

type PacketMirroringMirroredResourceInfoSubnetInfo struct {
	// Resource URL to the subnetwork for which traffic from/to all VM instances will be mirrored.
	Url *string `pulumi:"url"`
}

// PacketMirroringMirroredResourceInfoSubnetInfoInput is an input type that accepts PacketMirroringMirroredResourceInfoSubnetInfoArgs and PacketMirroringMirroredResourceInfoSubnetInfoOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourceInfoSubnetInfoInput` via:
//
//          PacketMirroringMirroredResourceInfoSubnetInfoArgs{...}
type PacketMirroringMirroredResourceInfoSubnetInfoInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourceInfoSubnetInfoOutput() PacketMirroringMirroredResourceInfoSubnetInfoOutput
	ToPacketMirroringMirroredResourceInfoSubnetInfoOutputWithContext(context.Context) PacketMirroringMirroredResourceInfoSubnetInfoOutput
}

type PacketMirroringMirroredResourceInfoSubnetInfoArgs struct {
	// Resource URL to the subnetwork for which traffic from/to all VM instances will be mirrored.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (PacketMirroringMirroredResourceInfoSubnetInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResourceInfoSubnetInfo)(nil)).Elem()
}

func (i PacketMirroringMirroredResourceInfoSubnetInfoArgs) ToPacketMirroringMirroredResourceInfoSubnetInfoOutput() PacketMirroringMirroredResourceInfoSubnetInfoOutput {
	return i.ToPacketMirroringMirroredResourceInfoSubnetInfoOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourceInfoSubnetInfoArgs) ToPacketMirroringMirroredResourceInfoSubnetInfoOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoSubnetInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourceInfoSubnetInfoOutput)
}

// PacketMirroringMirroredResourceInfoSubnetInfoArrayInput is an input type that accepts PacketMirroringMirroredResourceInfoSubnetInfoArray and PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourceInfoSubnetInfoArrayInput` via:
//
//          PacketMirroringMirroredResourceInfoSubnetInfoArray{ PacketMirroringMirroredResourceInfoSubnetInfoArgs{...} }
type PacketMirroringMirroredResourceInfoSubnetInfoArrayInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourceInfoSubnetInfoArrayOutput() PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput
	ToPacketMirroringMirroredResourceInfoSubnetInfoArrayOutputWithContext(context.Context) PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput
}

type PacketMirroringMirroredResourceInfoSubnetInfoArray []PacketMirroringMirroredResourceInfoSubnetInfoInput

func (PacketMirroringMirroredResourceInfoSubnetInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PacketMirroringMirroredResourceInfoSubnetInfo)(nil)).Elem()
}

func (i PacketMirroringMirroredResourceInfoSubnetInfoArray) ToPacketMirroringMirroredResourceInfoSubnetInfoArrayOutput() PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput {
	return i.ToPacketMirroringMirroredResourceInfoSubnetInfoArrayOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourceInfoSubnetInfoArray) ToPacketMirroringMirroredResourceInfoSubnetInfoArrayOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput)
}

type PacketMirroringMirroredResourceInfoSubnetInfoOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourceInfoSubnetInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResourceInfoSubnetInfo)(nil)).Elem()
}

func (o PacketMirroringMirroredResourceInfoSubnetInfoOutput) ToPacketMirroringMirroredResourceInfoSubnetInfoOutput() PacketMirroringMirroredResourceInfoSubnetInfoOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoSubnetInfoOutput) ToPacketMirroringMirroredResourceInfoSubnetInfoOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoSubnetInfoOutput {
	return o
}

// Resource URL to the subnetwork for which traffic from/to all VM instances will be mirrored.
func (o PacketMirroringMirroredResourceInfoSubnetInfoOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResourceInfoSubnetInfo) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PacketMirroringMirroredResourceInfoSubnetInfo)(nil)).Elem()
}

func (o PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput) ToPacketMirroringMirroredResourceInfoSubnetInfoArrayOutput() PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput) ToPacketMirroringMirroredResourceInfoSubnetInfoArrayOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput) Index(i pulumi.IntInput) PacketMirroringMirroredResourceInfoSubnetInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PacketMirroringMirroredResourceInfoSubnetInfo {
		return vs[0].([]PacketMirroringMirroredResourceInfoSubnetInfo)[vs[1].(int)]
	}).(PacketMirroringMirroredResourceInfoSubnetInfoOutput)
}

type PacketMirroringMirroredResourceInfoSubnetInfoResponse struct {
	// Unique identifier for the subnetwork; defined by the server.
	CanonicalUrl string `pulumi:"canonicalUrl"`
	// Resource URL to the subnetwork for which traffic from/to all VM instances will be mirrored.
	Url string `pulumi:"url"`
}

// PacketMirroringMirroredResourceInfoSubnetInfoResponseInput is an input type that accepts PacketMirroringMirroredResourceInfoSubnetInfoResponseArgs and PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourceInfoSubnetInfoResponseInput` via:
//
//          PacketMirroringMirroredResourceInfoSubnetInfoResponseArgs{...}
type PacketMirroringMirroredResourceInfoSubnetInfoResponseInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourceInfoSubnetInfoResponseOutput() PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput
	ToPacketMirroringMirroredResourceInfoSubnetInfoResponseOutputWithContext(context.Context) PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput
}

type PacketMirroringMirroredResourceInfoSubnetInfoResponseArgs struct {
	// Unique identifier for the subnetwork; defined by the server.
	CanonicalUrl pulumi.StringInput `pulumi:"canonicalUrl"`
	// Resource URL to the subnetwork for which traffic from/to all VM instances will be mirrored.
	Url pulumi.StringInput `pulumi:"url"`
}

func (PacketMirroringMirroredResourceInfoSubnetInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResourceInfoSubnetInfoResponse)(nil)).Elem()
}

func (i PacketMirroringMirroredResourceInfoSubnetInfoResponseArgs) ToPacketMirroringMirroredResourceInfoSubnetInfoResponseOutput() PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput {
	return i.ToPacketMirroringMirroredResourceInfoSubnetInfoResponseOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourceInfoSubnetInfoResponseArgs) ToPacketMirroringMirroredResourceInfoSubnetInfoResponseOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput)
}

// PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayInput is an input type that accepts PacketMirroringMirroredResourceInfoSubnetInfoResponseArray and PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput values.
// You can construct a concrete instance of `PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayInput` via:
//
//          PacketMirroringMirroredResourceInfoSubnetInfoResponseArray{ PacketMirroringMirroredResourceInfoSubnetInfoResponseArgs{...} }
type PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayInput interface {
	pulumi.Input

	ToPacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput() PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput
	ToPacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutputWithContext(context.Context) PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput
}

type PacketMirroringMirroredResourceInfoSubnetInfoResponseArray []PacketMirroringMirroredResourceInfoSubnetInfoResponseInput

func (PacketMirroringMirroredResourceInfoSubnetInfoResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PacketMirroringMirroredResourceInfoSubnetInfoResponse)(nil)).Elem()
}

func (i PacketMirroringMirroredResourceInfoSubnetInfoResponseArray) ToPacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput() PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput {
	return i.ToPacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutputWithContext(context.Background())
}

func (i PacketMirroringMirroredResourceInfoSubnetInfoResponseArray) ToPacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput)
}

type PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringMirroredResourceInfoSubnetInfoResponse)(nil)).Elem()
}

func (o PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput) ToPacketMirroringMirroredResourceInfoSubnetInfoResponseOutput() PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput) ToPacketMirroringMirroredResourceInfoSubnetInfoResponseOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput {
	return o
}

// Unique identifier for the subnetwork; defined by the server.
func (o PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput) CanonicalUrl() pulumi.StringOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResourceInfoSubnetInfoResponse) string { return v.CanonicalUrl }).(pulumi.StringOutput)
}

// Resource URL to the subnetwork for which traffic from/to all VM instances will be mirrored.
func (o PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v PacketMirroringMirroredResourceInfoSubnetInfoResponse) string { return v.Url }).(pulumi.StringOutput)
}

type PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PacketMirroringMirroredResourceInfoSubnetInfoResponse)(nil)).Elem()
}

func (o PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput) ToPacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput() PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput) ToPacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutputWithContext(ctx context.Context) PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput {
	return o
}

func (o PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput) Index(i pulumi.IntInput) PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PacketMirroringMirroredResourceInfoSubnetInfoResponse {
		return vs[0].([]PacketMirroringMirroredResourceInfoSubnetInfoResponse)[vs[1].(int)]
	}).(PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput)
}

type PacketMirroringNetworkInfo struct {
	// URL of the network resource.
	Url *string `pulumi:"url"`
}

// PacketMirroringNetworkInfoInput is an input type that accepts PacketMirroringNetworkInfoArgs and PacketMirroringNetworkInfoOutput values.
// You can construct a concrete instance of `PacketMirroringNetworkInfoInput` via:
//
//          PacketMirroringNetworkInfoArgs{...}
type PacketMirroringNetworkInfoInput interface {
	pulumi.Input

	ToPacketMirroringNetworkInfoOutput() PacketMirroringNetworkInfoOutput
	ToPacketMirroringNetworkInfoOutputWithContext(context.Context) PacketMirroringNetworkInfoOutput
}

type PacketMirroringNetworkInfoArgs struct {
	// URL of the network resource.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (PacketMirroringNetworkInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringNetworkInfo)(nil)).Elem()
}

func (i PacketMirroringNetworkInfoArgs) ToPacketMirroringNetworkInfoOutput() PacketMirroringNetworkInfoOutput {
	return i.ToPacketMirroringNetworkInfoOutputWithContext(context.Background())
}

func (i PacketMirroringNetworkInfoArgs) ToPacketMirroringNetworkInfoOutputWithContext(ctx context.Context) PacketMirroringNetworkInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringNetworkInfoOutput)
}

func (i PacketMirroringNetworkInfoArgs) ToPacketMirroringNetworkInfoPtrOutput() PacketMirroringNetworkInfoPtrOutput {
	return i.ToPacketMirroringNetworkInfoPtrOutputWithContext(context.Background())
}

func (i PacketMirroringNetworkInfoArgs) ToPacketMirroringNetworkInfoPtrOutputWithContext(ctx context.Context) PacketMirroringNetworkInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringNetworkInfoOutput).ToPacketMirroringNetworkInfoPtrOutputWithContext(ctx)
}

// PacketMirroringNetworkInfoPtrInput is an input type that accepts PacketMirroringNetworkInfoArgs, PacketMirroringNetworkInfoPtr and PacketMirroringNetworkInfoPtrOutput values.
// You can construct a concrete instance of `PacketMirroringNetworkInfoPtrInput` via:
//
//          PacketMirroringNetworkInfoArgs{...}
//
//  or:
//
//          nil
type PacketMirroringNetworkInfoPtrInput interface {
	pulumi.Input

	ToPacketMirroringNetworkInfoPtrOutput() PacketMirroringNetworkInfoPtrOutput
	ToPacketMirroringNetworkInfoPtrOutputWithContext(context.Context) PacketMirroringNetworkInfoPtrOutput
}

type packetMirroringNetworkInfoPtrType PacketMirroringNetworkInfoArgs

func PacketMirroringNetworkInfoPtr(v *PacketMirroringNetworkInfoArgs) PacketMirroringNetworkInfoPtrInput {
	return (*packetMirroringNetworkInfoPtrType)(v)
}

func (*packetMirroringNetworkInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringNetworkInfo)(nil)).Elem()
}

func (i *packetMirroringNetworkInfoPtrType) ToPacketMirroringNetworkInfoPtrOutput() PacketMirroringNetworkInfoPtrOutput {
	return i.ToPacketMirroringNetworkInfoPtrOutputWithContext(context.Background())
}

func (i *packetMirroringNetworkInfoPtrType) ToPacketMirroringNetworkInfoPtrOutputWithContext(ctx context.Context) PacketMirroringNetworkInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringNetworkInfoPtrOutput)
}

type PacketMirroringNetworkInfoOutput struct{ *pulumi.OutputState }

func (PacketMirroringNetworkInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringNetworkInfo)(nil)).Elem()
}

func (o PacketMirroringNetworkInfoOutput) ToPacketMirroringNetworkInfoOutput() PacketMirroringNetworkInfoOutput {
	return o
}

func (o PacketMirroringNetworkInfoOutput) ToPacketMirroringNetworkInfoOutputWithContext(ctx context.Context) PacketMirroringNetworkInfoOutput {
	return o
}

func (o PacketMirroringNetworkInfoOutput) ToPacketMirroringNetworkInfoPtrOutput() PacketMirroringNetworkInfoPtrOutput {
	return o.ToPacketMirroringNetworkInfoPtrOutputWithContext(context.Background())
}

func (o PacketMirroringNetworkInfoOutput) ToPacketMirroringNetworkInfoPtrOutputWithContext(ctx context.Context) PacketMirroringNetworkInfoPtrOutput {
	return o.ApplyT(func(v PacketMirroringNetworkInfo) *PacketMirroringNetworkInfo {
		return &v
	}).(PacketMirroringNetworkInfoPtrOutput)
}

// URL of the network resource.
func (o PacketMirroringNetworkInfoOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PacketMirroringNetworkInfo) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type PacketMirroringNetworkInfoPtrOutput struct{ *pulumi.OutputState }

func (PacketMirroringNetworkInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringNetworkInfo)(nil)).Elem()
}

func (o PacketMirroringNetworkInfoPtrOutput) ToPacketMirroringNetworkInfoPtrOutput() PacketMirroringNetworkInfoPtrOutput {
	return o
}

func (o PacketMirroringNetworkInfoPtrOutput) ToPacketMirroringNetworkInfoPtrOutputWithContext(ctx context.Context) PacketMirroringNetworkInfoPtrOutput {
	return o
}

func (o PacketMirroringNetworkInfoPtrOutput) Elem() PacketMirroringNetworkInfoOutput {
	return o.ApplyT(func(v *PacketMirroringNetworkInfo) PacketMirroringNetworkInfo { return *v }).(PacketMirroringNetworkInfoOutput)
}

// URL of the network resource.
func (o PacketMirroringNetworkInfoPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PacketMirroringNetworkInfo) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type PacketMirroringNetworkInfoResponse struct {
	// Unique identifier for the network; defined by the server.
	CanonicalUrl string `pulumi:"canonicalUrl"`
	// URL of the network resource.
	Url string `pulumi:"url"`
}

// PacketMirroringNetworkInfoResponseInput is an input type that accepts PacketMirroringNetworkInfoResponseArgs and PacketMirroringNetworkInfoResponseOutput values.
// You can construct a concrete instance of `PacketMirroringNetworkInfoResponseInput` via:
//
//          PacketMirroringNetworkInfoResponseArgs{...}
type PacketMirroringNetworkInfoResponseInput interface {
	pulumi.Input

	ToPacketMirroringNetworkInfoResponseOutput() PacketMirroringNetworkInfoResponseOutput
	ToPacketMirroringNetworkInfoResponseOutputWithContext(context.Context) PacketMirroringNetworkInfoResponseOutput
}

type PacketMirroringNetworkInfoResponseArgs struct {
	// Unique identifier for the network; defined by the server.
	CanonicalUrl pulumi.StringInput `pulumi:"canonicalUrl"`
	// URL of the network resource.
	Url pulumi.StringInput `pulumi:"url"`
}

func (PacketMirroringNetworkInfoResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringNetworkInfoResponse)(nil)).Elem()
}

func (i PacketMirroringNetworkInfoResponseArgs) ToPacketMirroringNetworkInfoResponseOutput() PacketMirroringNetworkInfoResponseOutput {
	return i.ToPacketMirroringNetworkInfoResponseOutputWithContext(context.Background())
}

func (i PacketMirroringNetworkInfoResponseArgs) ToPacketMirroringNetworkInfoResponseOutputWithContext(ctx context.Context) PacketMirroringNetworkInfoResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringNetworkInfoResponseOutput)
}

func (i PacketMirroringNetworkInfoResponseArgs) ToPacketMirroringNetworkInfoResponsePtrOutput() PacketMirroringNetworkInfoResponsePtrOutput {
	return i.ToPacketMirroringNetworkInfoResponsePtrOutputWithContext(context.Background())
}

func (i PacketMirroringNetworkInfoResponseArgs) ToPacketMirroringNetworkInfoResponsePtrOutputWithContext(ctx context.Context) PacketMirroringNetworkInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringNetworkInfoResponseOutput).ToPacketMirroringNetworkInfoResponsePtrOutputWithContext(ctx)
}

// PacketMirroringNetworkInfoResponsePtrInput is an input type that accepts PacketMirroringNetworkInfoResponseArgs, PacketMirroringNetworkInfoResponsePtr and PacketMirroringNetworkInfoResponsePtrOutput values.
// You can construct a concrete instance of `PacketMirroringNetworkInfoResponsePtrInput` via:
//
//          PacketMirroringNetworkInfoResponseArgs{...}
//
//  or:
//
//          nil
type PacketMirroringNetworkInfoResponsePtrInput interface {
	pulumi.Input

	ToPacketMirroringNetworkInfoResponsePtrOutput() PacketMirroringNetworkInfoResponsePtrOutput
	ToPacketMirroringNetworkInfoResponsePtrOutputWithContext(context.Context) PacketMirroringNetworkInfoResponsePtrOutput
}

type packetMirroringNetworkInfoResponsePtrType PacketMirroringNetworkInfoResponseArgs

func PacketMirroringNetworkInfoResponsePtr(v *PacketMirroringNetworkInfoResponseArgs) PacketMirroringNetworkInfoResponsePtrInput {
	return (*packetMirroringNetworkInfoResponsePtrType)(v)
}

func (*packetMirroringNetworkInfoResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringNetworkInfoResponse)(nil)).Elem()
}

func (i *packetMirroringNetworkInfoResponsePtrType) ToPacketMirroringNetworkInfoResponsePtrOutput() PacketMirroringNetworkInfoResponsePtrOutput {
	return i.ToPacketMirroringNetworkInfoResponsePtrOutputWithContext(context.Background())
}

func (i *packetMirroringNetworkInfoResponsePtrType) ToPacketMirroringNetworkInfoResponsePtrOutputWithContext(ctx context.Context) PacketMirroringNetworkInfoResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketMirroringNetworkInfoResponsePtrOutput)
}

type PacketMirroringNetworkInfoResponseOutput struct{ *pulumi.OutputState }

func (PacketMirroringNetworkInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketMirroringNetworkInfoResponse)(nil)).Elem()
}

func (o PacketMirroringNetworkInfoResponseOutput) ToPacketMirroringNetworkInfoResponseOutput() PacketMirroringNetworkInfoResponseOutput {
	return o
}

func (o PacketMirroringNetworkInfoResponseOutput) ToPacketMirroringNetworkInfoResponseOutputWithContext(ctx context.Context) PacketMirroringNetworkInfoResponseOutput {
	return o
}

func (o PacketMirroringNetworkInfoResponseOutput) ToPacketMirroringNetworkInfoResponsePtrOutput() PacketMirroringNetworkInfoResponsePtrOutput {
	return o.ToPacketMirroringNetworkInfoResponsePtrOutputWithContext(context.Background())
}

func (o PacketMirroringNetworkInfoResponseOutput) ToPacketMirroringNetworkInfoResponsePtrOutputWithContext(ctx context.Context) PacketMirroringNetworkInfoResponsePtrOutput {
	return o.ApplyT(func(v PacketMirroringNetworkInfoResponse) *PacketMirroringNetworkInfoResponse {
		return &v
	}).(PacketMirroringNetworkInfoResponsePtrOutput)
}

// Unique identifier for the network; defined by the server.
func (o PacketMirroringNetworkInfoResponseOutput) CanonicalUrl() pulumi.StringOutput {
	return o.ApplyT(func(v PacketMirroringNetworkInfoResponse) string { return v.CanonicalUrl }).(pulumi.StringOutput)
}

// URL of the network resource.
func (o PacketMirroringNetworkInfoResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v PacketMirroringNetworkInfoResponse) string { return v.Url }).(pulumi.StringOutput)
}

type PacketMirroringNetworkInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (PacketMirroringNetworkInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketMirroringNetworkInfoResponse)(nil)).Elem()
}

func (o PacketMirroringNetworkInfoResponsePtrOutput) ToPacketMirroringNetworkInfoResponsePtrOutput() PacketMirroringNetworkInfoResponsePtrOutput {
	return o
}

func (o PacketMirroringNetworkInfoResponsePtrOutput) ToPacketMirroringNetworkInfoResponsePtrOutputWithContext(ctx context.Context) PacketMirroringNetworkInfoResponsePtrOutput {
	return o
}

func (o PacketMirroringNetworkInfoResponsePtrOutput) Elem() PacketMirroringNetworkInfoResponseOutput {
	return o.ApplyT(func(v *PacketMirroringNetworkInfoResponse) PacketMirroringNetworkInfoResponse { return *v }).(PacketMirroringNetworkInfoResponseOutput)
}

// Unique identifier for the network; defined by the server.
func (o PacketMirroringNetworkInfoResponsePtrOutput) CanonicalUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PacketMirroringNetworkInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CanonicalUrl
	}).(pulumi.StringPtrOutput)
}

// URL of the network resource.
func (o PacketMirroringNetworkInfoResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PacketMirroringNetworkInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// A matcher for the path portion of the URL. The BackendService from the longest-matched rule will serve the URL. If no rule was matched, the default service will be used.
type PathMatcher struct {
	// defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices. Only one of defaultRouteAction or defaultUrlRedirect must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a pathMatcher's defaultRouteAction.
	DefaultRouteAction *HttpRouteAction `pulumi:"defaultRouteAction"`
	// The full or partial URL to the BackendService resource. This will be used if none of the pathRules or routeRules defined by this PathMatcher are matched. For example, the following are all valid URLs to a BackendService resource: - https://www.googleapis.com/compute/v1/projects/project /global/backendServices/backendService - compute/v1/projects/project/global/backendServices/backendService - global/backendServices/backendService If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if defaultRouteAction specifies any weightedBackendServices, defaultService must not be specified. Only one of defaultService, defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set. Authorization requires one or more of the following Google IAM permissions on the specified resource default_service: - compute.backendBuckets.use - compute.backendServices.use
	DefaultService *string `pulumi:"defaultService"`
	// When none of the specified pathRules or routeRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
	DefaultUrlRedirect *HttpRedirectAction `pulumi:"defaultUrlRedirect"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// Specifies changes to request and response headers that need to take effect for the selected backendService. HeaderAction specified here are applied after the matching HttpRouteRule HeaderAction and before the HeaderAction in the UrlMap Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	HeaderAction *HttpHeaderAction `pulumi:"headerAction"`
	// The name to which this PathMatcher is referred by the HostRule.
	Name *string `pulumi:"name"`
	// The list of path rules. Use this list instead of routeRules when routing based on simple path matching is all that's required. The order by which path rules are specified does not matter. Matches are always done on the longest-path-first basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/* irrespective of the order in which those paths appear in this list. Within a given pathMatcher, only one of pathRules or routeRules must be set.
	PathRules []PathRule `pulumi:"pathRules"`
	// The list of HTTP route rules. Use this list instead of pathRules when advanced route matching and routing actions are desired. routeRules are evaluated in order of priority, from the lowest to highest number. Within a given pathMatcher, you can set only one of pathRules or routeRules.
	RouteRules []HttpRouteRule `pulumi:"routeRules"`
}

// PathMatcherInput is an input type that accepts PathMatcherArgs and PathMatcherOutput values.
// You can construct a concrete instance of `PathMatcherInput` via:
//
//          PathMatcherArgs{...}
type PathMatcherInput interface {
	pulumi.Input

	ToPathMatcherOutput() PathMatcherOutput
	ToPathMatcherOutputWithContext(context.Context) PathMatcherOutput
}

// A matcher for the path portion of the URL. The BackendService from the longest-matched rule will serve the URL. If no rule was matched, the default service will be used.
type PathMatcherArgs struct {
	// defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices. Only one of defaultRouteAction or defaultUrlRedirect must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a pathMatcher's defaultRouteAction.
	DefaultRouteAction HttpRouteActionPtrInput `pulumi:"defaultRouteAction"`
	// The full or partial URL to the BackendService resource. This will be used if none of the pathRules or routeRules defined by this PathMatcher are matched. For example, the following are all valid URLs to a BackendService resource: - https://www.googleapis.com/compute/v1/projects/project /global/backendServices/backendService - compute/v1/projects/project/global/backendServices/backendService - global/backendServices/backendService If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if defaultRouteAction specifies any weightedBackendServices, defaultService must not be specified. Only one of defaultService, defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set. Authorization requires one or more of the following Google IAM permissions on the specified resource default_service: - compute.backendBuckets.use - compute.backendServices.use
	DefaultService pulumi.StringPtrInput `pulumi:"defaultService"`
	// When none of the specified pathRules or routeRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
	DefaultUrlRedirect HttpRedirectActionPtrInput `pulumi:"defaultUrlRedirect"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies changes to request and response headers that need to take effect for the selected backendService. HeaderAction specified here are applied after the matching HttpRouteRule HeaderAction and before the HeaderAction in the UrlMap Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	HeaderAction HttpHeaderActionPtrInput `pulumi:"headerAction"`
	// The name to which this PathMatcher is referred by the HostRule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The list of path rules. Use this list instead of routeRules when routing based on simple path matching is all that's required. The order by which path rules are specified does not matter. Matches are always done on the longest-path-first basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/* irrespective of the order in which those paths appear in this list. Within a given pathMatcher, only one of pathRules or routeRules must be set.
	PathRules PathRuleArrayInput `pulumi:"pathRules"`
	// The list of HTTP route rules. Use this list instead of pathRules when advanced route matching and routing actions are desired. routeRules are evaluated in order of priority, from the lowest to highest number. Within a given pathMatcher, you can set only one of pathRules or routeRules.
	RouteRules HttpRouteRuleArrayInput `pulumi:"routeRules"`
}

func (PathMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PathMatcher)(nil)).Elem()
}

func (i PathMatcherArgs) ToPathMatcherOutput() PathMatcherOutput {
	return i.ToPathMatcherOutputWithContext(context.Background())
}

func (i PathMatcherArgs) ToPathMatcherOutputWithContext(ctx context.Context) PathMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathMatcherOutput)
}

// PathMatcherArrayInput is an input type that accepts PathMatcherArray and PathMatcherArrayOutput values.
// You can construct a concrete instance of `PathMatcherArrayInput` via:
//
//          PathMatcherArray{ PathMatcherArgs{...} }
type PathMatcherArrayInput interface {
	pulumi.Input

	ToPathMatcherArrayOutput() PathMatcherArrayOutput
	ToPathMatcherArrayOutputWithContext(context.Context) PathMatcherArrayOutput
}

type PathMatcherArray []PathMatcherInput

func (PathMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PathMatcher)(nil)).Elem()
}

func (i PathMatcherArray) ToPathMatcherArrayOutput() PathMatcherArrayOutput {
	return i.ToPathMatcherArrayOutputWithContext(context.Background())
}

func (i PathMatcherArray) ToPathMatcherArrayOutputWithContext(ctx context.Context) PathMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathMatcherArrayOutput)
}

// A matcher for the path portion of the URL. The BackendService from the longest-matched rule will serve the URL. If no rule was matched, the default service will be used.
type PathMatcherOutput struct{ *pulumi.OutputState }

func (PathMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PathMatcher)(nil)).Elem()
}

func (o PathMatcherOutput) ToPathMatcherOutput() PathMatcherOutput {
	return o
}

func (o PathMatcherOutput) ToPathMatcherOutputWithContext(ctx context.Context) PathMatcherOutput {
	return o
}

// defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices. Only one of defaultRouteAction or defaultUrlRedirect must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a pathMatcher's defaultRouteAction.
func (o PathMatcherOutput) DefaultRouteAction() HttpRouteActionPtrOutput {
	return o.ApplyT(func(v PathMatcher) *HttpRouteAction { return v.DefaultRouteAction }).(HttpRouteActionPtrOutput)
}

// The full or partial URL to the BackendService resource. This will be used if none of the pathRules or routeRules defined by this PathMatcher are matched. For example, the following are all valid URLs to a BackendService resource: - https://www.googleapis.com/compute/v1/projects/project /global/backendServices/backendService - compute/v1/projects/project/global/backendServices/backendService - global/backendServices/backendService If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if defaultRouteAction specifies any weightedBackendServices, defaultService must not be specified. Only one of defaultService, defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set. Authorization requires one or more of the following Google IAM permissions on the specified resource default_service: - compute.backendBuckets.use - compute.backendServices.use
func (o PathMatcherOutput) DefaultService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathMatcher) *string { return v.DefaultService }).(pulumi.StringPtrOutput)
}

// When none of the specified pathRules or routeRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
func (o PathMatcherOutput) DefaultUrlRedirect() HttpRedirectActionPtrOutput {
	return o.ApplyT(func(v PathMatcher) *HttpRedirectAction { return v.DefaultUrlRedirect }).(HttpRedirectActionPtrOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o PathMatcherOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathMatcher) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies changes to request and response headers that need to take effect for the selected backendService. HeaderAction specified here are applied after the matching HttpRouteRule HeaderAction and before the HeaderAction in the UrlMap Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o PathMatcherOutput) HeaderAction() HttpHeaderActionPtrOutput {
	return o.ApplyT(func(v PathMatcher) *HttpHeaderAction { return v.HeaderAction }).(HttpHeaderActionPtrOutput)
}

// The name to which this PathMatcher is referred by the HostRule.
func (o PathMatcherOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathMatcher) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of path rules. Use this list instead of routeRules when routing based on simple path matching is all that's required. The order by which path rules are specified does not matter. Matches are always done on the longest-path-first basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/* irrespective of the order in which those paths appear in this list. Within a given pathMatcher, only one of pathRules or routeRules must be set.
func (o PathMatcherOutput) PathRules() PathRuleArrayOutput {
	return o.ApplyT(func(v PathMatcher) []PathRule { return v.PathRules }).(PathRuleArrayOutput)
}

// The list of HTTP route rules. Use this list instead of pathRules when advanced route matching and routing actions are desired. routeRules are evaluated in order of priority, from the lowest to highest number. Within a given pathMatcher, you can set only one of pathRules or routeRules.
func (o PathMatcherOutput) RouteRules() HttpRouteRuleArrayOutput {
	return o.ApplyT(func(v PathMatcher) []HttpRouteRule { return v.RouteRules }).(HttpRouteRuleArrayOutput)
}

type PathMatcherArrayOutput struct{ *pulumi.OutputState }

func (PathMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PathMatcher)(nil)).Elem()
}

func (o PathMatcherArrayOutput) ToPathMatcherArrayOutput() PathMatcherArrayOutput {
	return o
}

func (o PathMatcherArrayOutput) ToPathMatcherArrayOutputWithContext(ctx context.Context) PathMatcherArrayOutput {
	return o
}

func (o PathMatcherArrayOutput) Index(i pulumi.IntInput) PathMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PathMatcher {
		return vs[0].([]PathMatcher)[vs[1].(int)]
	}).(PathMatcherOutput)
}

// A matcher for the path portion of the URL. The BackendService from the longest-matched rule will serve the URL. If no rule was matched, the default service will be used.
type PathMatcherResponse struct {
	// defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices. Only one of defaultRouteAction or defaultUrlRedirect must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a pathMatcher's defaultRouteAction.
	DefaultRouteAction HttpRouteActionResponse `pulumi:"defaultRouteAction"`
	// The full or partial URL to the BackendService resource. This will be used if none of the pathRules or routeRules defined by this PathMatcher are matched. For example, the following are all valid URLs to a BackendService resource: - https://www.googleapis.com/compute/v1/projects/project /global/backendServices/backendService - compute/v1/projects/project/global/backendServices/backendService - global/backendServices/backendService If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if defaultRouteAction specifies any weightedBackendServices, defaultService must not be specified. Only one of defaultService, defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set. Authorization requires one or more of the following Google IAM permissions on the specified resource default_service: - compute.backendBuckets.use - compute.backendServices.use
	DefaultService string `pulumi:"defaultService"`
	// When none of the specified pathRules or routeRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
	DefaultUrlRedirect HttpRedirectActionResponse `pulumi:"defaultUrlRedirect"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description string `pulumi:"description"`
	// Specifies changes to request and response headers that need to take effect for the selected backendService. HeaderAction specified here are applied after the matching HttpRouteRule HeaderAction and before the HeaderAction in the UrlMap Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	HeaderAction HttpHeaderActionResponse `pulumi:"headerAction"`
	// The name to which this PathMatcher is referred by the HostRule.
	Name string `pulumi:"name"`
	// The list of path rules. Use this list instead of routeRules when routing based on simple path matching is all that's required. The order by which path rules are specified does not matter. Matches are always done on the longest-path-first basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/* irrespective of the order in which those paths appear in this list. Within a given pathMatcher, only one of pathRules or routeRules must be set.
	PathRules []PathRuleResponse `pulumi:"pathRules"`
	// The list of HTTP route rules. Use this list instead of pathRules when advanced route matching and routing actions are desired. routeRules are evaluated in order of priority, from the lowest to highest number. Within a given pathMatcher, you can set only one of pathRules or routeRules.
	RouteRules []HttpRouteRuleResponse `pulumi:"routeRules"`
}

// PathMatcherResponseInput is an input type that accepts PathMatcherResponseArgs and PathMatcherResponseOutput values.
// You can construct a concrete instance of `PathMatcherResponseInput` via:
//
//          PathMatcherResponseArgs{...}
type PathMatcherResponseInput interface {
	pulumi.Input

	ToPathMatcherResponseOutput() PathMatcherResponseOutput
	ToPathMatcherResponseOutputWithContext(context.Context) PathMatcherResponseOutput
}

// A matcher for the path portion of the URL. The BackendService from the longest-matched rule will serve the URL. If no rule was matched, the default service will be used.
type PathMatcherResponseArgs struct {
	// defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices. Only one of defaultRouteAction or defaultUrlRedirect must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a pathMatcher's defaultRouteAction.
	DefaultRouteAction HttpRouteActionResponseInput `pulumi:"defaultRouteAction"`
	// The full or partial URL to the BackendService resource. This will be used if none of the pathRules or routeRules defined by this PathMatcher are matched. For example, the following are all valid URLs to a BackendService resource: - https://www.googleapis.com/compute/v1/projects/project /global/backendServices/backendService - compute/v1/projects/project/global/backendServices/backendService - global/backendServices/backendService If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if defaultRouteAction specifies any weightedBackendServices, defaultService must not be specified. Only one of defaultService, defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set. Authorization requires one or more of the following Google IAM permissions on the specified resource default_service: - compute.backendBuckets.use - compute.backendServices.use
	DefaultService pulumi.StringInput `pulumi:"defaultService"`
	// When none of the specified pathRules or routeRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
	DefaultUrlRedirect HttpRedirectActionResponseInput `pulumi:"defaultUrlRedirect"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies changes to request and response headers that need to take effect for the selected backendService. HeaderAction specified here are applied after the matching HttpRouteRule HeaderAction and before the HeaderAction in the UrlMap Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	HeaderAction HttpHeaderActionResponseInput `pulumi:"headerAction"`
	// The name to which this PathMatcher is referred by the HostRule.
	Name pulumi.StringInput `pulumi:"name"`
	// The list of path rules. Use this list instead of routeRules when routing based on simple path matching is all that's required. The order by which path rules are specified does not matter. Matches are always done on the longest-path-first basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/* irrespective of the order in which those paths appear in this list. Within a given pathMatcher, only one of pathRules or routeRules must be set.
	PathRules PathRuleResponseArrayInput `pulumi:"pathRules"`
	// The list of HTTP route rules. Use this list instead of pathRules when advanced route matching and routing actions are desired. routeRules are evaluated in order of priority, from the lowest to highest number. Within a given pathMatcher, you can set only one of pathRules or routeRules.
	RouteRules HttpRouteRuleResponseArrayInput `pulumi:"routeRules"`
}

func (PathMatcherResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PathMatcherResponse)(nil)).Elem()
}

func (i PathMatcherResponseArgs) ToPathMatcherResponseOutput() PathMatcherResponseOutput {
	return i.ToPathMatcherResponseOutputWithContext(context.Background())
}

func (i PathMatcherResponseArgs) ToPathMatcherResponseOutputWithContext(ctx context.Context) PathMatcherResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathMatcherResponseOutput)
}

// PathMatcherResponseArrayInput is an input type that accepts PathMatcherResponseArray and PathMatcherResponseArrayOutput values.
// You can construct a concrete instance of `PathMatcherResponseArrayInput` via:
//
//          PathMatcherResponseArray{ PathMatcherResponseArgs{...} }
type PathMatcherResponseArrayInput interface {
	pulumi.Input

	ToPathMatcherResponseArrayOutput() PathMatcherResponseArrayOutput
	ToPathMatcherResponseArrayOutputWithContext(context.Context) PathMatcherResponseArrayOutput
}

type PathMatcherResponseArray []PathMatcherResponseInput

func (PathMatcherResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PathMatcherResponse)(nil)).Elem()
}

func (i PathMatcherResponseArray) ToPathMatcherResponseArrayOutput() PathMatcherResponseArrayOutput {
	return i.ToPathMatcherResponseArrayOutputWithContext(context.Background())
}

func (i PathMatcherResponseArray) ToPathMatcherResponseArrayOutputWithContext(ctx context.Context) PathMatcherResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathMatcherResponseArrayOutput)
}

// A matcher for the path portion of the URL. The BackendService from the longest-matched rule will serve the URL. If no rule was matched, the default service will be used.
type PathMatcherResponseOutput struct{ *pulumi.OutputState }

func (PathMatcherResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PathMatcherResponse)(nil)).Elem()
}

func (o PathMatcherResponseOutput) ToPathMatcherResponseOutput() PathMatcherResponseOutput {
	return o
}

func (o PathMatcherResponseOutput) ToPathMatcherResponseOutputWithContext(ctx context.Context) PathMatcherResponseOutput {
	return o
}

// defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices. Only one of defaultRouteAction or defaultUrlRedirect must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a pathMatcher's defaultRouteAction.
func (o PathMatcherResponseOutput) DefaultRouteAction() HttpRouteActionResponseOutput {
	return o.ApplyT(func(v PathMatcherResponse) HttpRouteActionResponse { return v.DefaultRouteAction }).(HttpRouteActionResponseOutput)
}

// The full or partial URL to the BackendService resource. This will be used if none of the pathRules or routeRules defined by this PathMatcher are matched. For example, the following are all valid URLs to a BackendService resource: - https://www.googleapis.com/compute/v1/projects/project /global/backendServices/backendService - compute/v1/projects/project/global/backendServices/backendService - global/backendServices/backendService If defaultRouteAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if defaultRouteAction specifies any weightedBackendServices, defaultService must not be specified. Only one of defaultService, defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set. Authorization requires one or more of the following Google IAM permissions on the specified resource default_service: - compute.backendBuckets.use - compute.backendServices.use
func (o PathMatcherResponseOutput) DefaultService() pulumi.StringOutput {
	return o.ApplyT(func(v PathMatcherResponse) string { return v.DefaultService }).(pulumi.StringOutput)
}

// When none of the specified pathRules or routeRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
func (o PathMatcherResponseOutput) DefaultUrlRedirect() HttpRedirectActionResponseOutput {
	return o.ApplyT(func(v PathMatcherResponse) HttpRedirectActionResponse { return v.DefaultUrlRedirect }).(HttpRedirectActionResponseOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o PathMatcherResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v PathMatcherResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Specifies changes to request and response headers that need to take effect for the selected backendService. HeaderAction specified here are applied after the matching HttpRouteRule HeaderAction and before the HeaderAction in the UrlMap Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o PathMatcherResponseOutput) HeaderAction() HttpHeaderActionResponseOutput {
	return o.ApplyT(func(v PathMatcherResponse) HttpHeaderActionResponse { return v.HeaderAction }).(HttpHeaderActionResponseOutput)
}

// The name to which this PathMatcher is referred by the HostRule.
func (o PathMatcherResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PathMatcherResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The list of path rules. Use this list instead of routeRules when routing based on simple path matching is all that's required. The order by which path rules are specified does not matter. Matches are always done on the longest-path-first basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/* irrespective of the order in which those paths appear in this list. Within a given pathMatcher, only one of pathRules or routeRules must be set.
func (o PathMatcherResponseOutput) PathRules() PathRuleResponseArrayOutput {
	return o.ApplyT(func(v PathMatcherResponse) []PathRuleResponse { return v.PathRules }).(PathRuleResponseArrayOutput)
}

// The list of HTTP route rules. Use this list instead of pathRules when advanced route matching and routing actions are desired. routeRules are evaluated in order of priority, from the lowest to highest number. Within a given pathMatcher, you can set only one of pathRules or routeRules.
func (o PathMatcherResponseOutput) RouteRules() HttpRouteRuleResponseArrayOutput {
	return o.ApplyT(func(v PathMatcherResponse) []HttpRouteRuleResponse { return v.RouteRules }).(HttpRouteRuleResponseArrayOutput)
}

type PathMatcherResponseArrayOutput struct{ *pulumi.OutputState }

func (PathMatcherResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PathMatcherResponse)(nil)).Elem()
}

func (o PathMatcherResponseArrayOutput) ToPathMatcherResponseArrayOutput() PathMatcherResponseArrayOutput {
	return o
}

func (o PathMatcherResponseArrayOutput) ToPathMatcherResponseArrayOutputWithContext(ctx context.Context) PathMatcherResponseArrayOutput {
	return o
}

func (o PathMatcherResponseArrayOutput) Index(i pulumi.IntInput) PathMatcherResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PathMatcherResponse {
		return vs[0].([]PathMatcherResponse)[vs[1].(int)]
	}).(PathMatcherResponseOutput)
}

// A path-matching rule for a URL. If matched, will use the specified BackendService to handle the traffic arriving at this URL.
type PathRule struct {
	// The list of path patterns to match. Each must start with / and the only place a * is allowed is at the end following a /. The string fed to the path matcher does not include any text after the first ? or #, and those chars are not allowed here.
	Paths []string `pulumi:"paths"`
	// In response to a matching path, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of routeAction or urlRedirect must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a pathRule's routeAction.
	RouteAction *HttpRouteAction `pulumi:"routeAction"`
	// The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
	Service *string `pulumi:"service"`
	// When a path pattern is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
	UrlRedirect *HttpRedirectAction `pulumi:"urlRedirect"`
}

// PathRuleInput is an input type that accepts PathRuleArgs and PathRuleOutput values.
// You can construct a concrete instance of `PathRuleInput` via:
//
//          PathRuleArgs{...}
type PathRuleInput interface {
	pulumi.Input

	ToPathRuleOutput() PathRuleOutput
	ToPathRuleOutputWithContext(context.Context) PathRuleOutput
}

// A path-matching rule for a URL. If matched, will use the specified BackendService to handle the traffic arriving at this URL.
type PathRuleArgs struct {
	// The list of path patterns to match. Each must start with / and the only place a * is allowed is at the end following a /. The string fed to the path matcher does not include any text after the first ? or #, and those chars are not allowed here.
	Paths pulumi.StringArrayInput `pulumi:"paths"`
	// In response to a matching path, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of routeAction or urlRedirect must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a pathRule's routeAction.
	RouteAction HttpRouteActionPtrInput `pulumi:"routeAction"`
	// The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// When a path pattern is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
	UrlRedirect HttpRedirectActionPtrInput `pulumi:"urlRedirect"`
}

func (PathRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PathRule)(nil)).Elem()
}

func (i PathRuleArgs) ToPathRuleOutput() PathRuleOutput {
	return i.ToPathRuleOutputWithContext(context.Background())
}

func (i PathRuleArgs) ToPathRuleOutputWithContext(ctx context.Context) PathRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathRuleOutput)
}

// PathRuleArrayInput is an input type that accepts PathRuleArray and PathRuleArrayOutput values.
// You can construct a concrete instance of `PathRuleArrayInput` via:
//
//          PathRuleArray{ PathRuleArgs{...} }
type PathRuleArrayInput interface {
	pulumi.Input

	ToPathRuleArrayOutput() PathRuleArrayOutput
	ToPathRuleArrayOutputWithContext(context.Context) PathRuleArrayOutput
}

type PathRuleArray []PathRuleInput

func (PathRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PathRule)(nil)).Elem()
}

func (i PathRuleArray) ToPathRuleArrayOutput() PathRuleArrayOutput {
	return i.ToPathRuleArrayOutputWithContext(context.Background())
}

func (i PathRuleArray) ToPathRuleArrayOutputWithContext(ctx context.Context) PathRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathRuleArrayOutput)
}

// A path-matching rule for a URL. If matched, will use the specified BackendService to handle the traffic arriving at this URL.
type PathRuleOutput struct{ *pulumi.OutputState }

func (PathRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PathRule)(nil)).Elem()
}

func (o PathRuleOutput) ToPathRuleOutput() PathRuleOutput {
	return o
}

func (o PathRuleOutput) ToPathRuleOutputWithContext(ctx context.Context) PathRuleOutput {
	return o
}

// The list of path patterns to match. Each must start with / and the only place a * is allowed is at the end following a /. The string fed to the path matcher does not include any text after the first ? or #, and those chars are not allowed here.
func (o PathRuleOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PathRule) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// In response to a matching path, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of routeAction or urlRedirect must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a pathRule's routeAction.
func (o PathRuleOutput) RouteAction() HttpRouteActionPtrOutput {
	return o.ApplyT(func(v PathRule) *HttpRouteAction { return v.RouteAction }).(HttpRouteActionPtrOutput)
}

// The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
func (o PathRuleOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PathRule) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// When a path pattern is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
func (o PathRuleOutput) UrlRedirect() HttpRedirectActionPtrOutput {
	return o.ApplyT(func(v PathRule) *HttpRedirectAction { return v.UrlRedirect }).(HttpRedirectActionPtrOutput)
}

type PathRuleArrayOutput struct{ *pulumi.OutputState }

func (PathRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PathRule)(nil)).Elem()
}

func (o PathRuleArrayOutput) ToPathRuleArrayOutput() PathRuleArrayOutput {
	return o
}

func (o PathRuleArrayOutput) ToPathRuleArrayOutputWithContext(ctx context.Context) PathRuleArrayOutput {
	return o
}

func (o PathRuleArrayOutput) Index(i pulumi.IntInput) PathRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PathRule {
		return vs[0].([]PathRule)[vs[1].(int)]
	}).(PathRuleOutput)
}

// A path-matching rule for a URL. If matched, will use the specified BackendService to handle the traffic arriving at this URL.
type PathRuleResponse struct {
	// The list of path patterns to match. Each must start with / and the only place a * is allowed is at the end following a /. The string fed to the path matcher does not include any text after the first ? or #, and those chars are not allowed here.
	Paths []string `pulumi:"paths"`
	// In response to a matching path, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of routeAction or urlRedirect must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a pathRule's routeAction.
	RouteAction HttpRouteActionResponse `pulumi:"routeAction"`
	// The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
	Service string `pulumi:"service"`
	// When a path pattern is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
	UrlRedirect HttpRedirectActionResponse `pulumi:"urlRedirect"`
}

// PathRuleResponseInput is an input type that accepts PathRuleResponseArgs and PathRuleResponseOutput values.
// You can construct a concrete instance of `PathRuleResponseInput` via:
//
//          PathRuleResponseArgs{...}
type PathRuleResponseInput interface {
	pulumi.Input

	ToPathRuleResponseOutput() PathRuleResponseOutput
	ToPathRuleResponseOutputWithContext(context.Context) PathRuleResponseOutput
}

// A path-matching rule for a URL. If matched, will use the specified BackendService to handle the traffic arriving at this URL.
type PathRuleResponseArgs struct {
	// The list of path patterns to match. Each must start with / and the only place a * is allowed is at the end following a /. The string fed to the path matcher does not include any text after the first ? or #, and those chars are not allowed here.
	Paths pulumi.StringArrayInput `pulumi:"paths"`
	// In response to a matching path, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of routeAction or urlRedirect must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a pathRule's routeAction.
	RouteAction HttpRouteActionResponseInput `pulumi:"routeAction"`
	// The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
	Service pulumi.StringInput `pulumi:"service"`
	// When a path pattern is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
	UrlRedirect HttpRedirectActionResponseInput `pulumi:"urlRedirect"`
}

func (PathRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PathRuleResponse)(nil)).Elem()
}

func (i PathRuleResponseArgs) ToPathRuleResponseOutput() PathRuleResponseOutput {
	return i.ToPathRuleResponseOutputWithContext(context.Background())
}

func (i PathRuleResponseArgs) ToPathRuleResponseOutputWithContext(ctx context.Context) PathRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathRuleResponseOutput)
}

// PathRuleResponseArrayInput is an input type that accepts PathRuleResponseArray and PathRuleResponseArrayOutput values.
// You can construct a concrete instance of `PathRuleResponseArrayInput` via:
//
//          PathRuleResponseArray{ PathRuleResponseArgs{...} }
type PathRuleResponseArrayInput interface {
	pulumi.Input

	ToPathRuleResponseArrayOutput() PathRuleResponseArrayOutput
	ToPathRuleResponseArrayOutputWithContext(context.Context) PathRuleResponseArrayOutput
}

type PathRuleResponseArray []PathRuleResponseInput

func (PathRuleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PathRuleResponse)(nil)).Elem()
}

func (i PathRuleResponseArray) ToPathRuleResponseArrayOutput() PathRuleResponseArrayOutput {
	return i.ToPathRuleResponseArrayOutputWithContext(context.Background())
}

func (i PathRuleResponseArray) ToPathRuleResponseArrayOutputWithContext(ctx context.Context) PathRuleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PathRuleResponseArrayOutput)
}

// A path-matching rule for a URL. If matched, will use the specified BackendService to handle the traffic arriving at this URL.
type PathRuleResponseOutput struct{ *pulumi.OutputState }

func (PathRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PathRuleResponse)(nil)).Elem()
}

func (o PathRuleResponseOutput) ToPathRuleResponseOutput() PathRuleResponseOutput {
	return o
}

func (o PathRuleResponseOutput) ToPathRuleResponseOutputWithContext(ctx context.Context) PathRuleResponseOutput {
	return o
}

// The list of path patterns to match. Each must start with / and the only place a * is allowed is at the end following a /. The string fed to the path matcher does not include any text after the first ? or #, and those chars are not allowed here.
func (o PathRuleResponseOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PathRuleResponse) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// In response to a matching path, the load balancer performs advanced routing actions like URL rewrites, header transformations, etc. prior to forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of routeAction or urlRedirect must be set. UrlMaps for external HTTP(S) load balancers support only the urlRewrite action within a pathRule's routeAction.
func (o PathRuleResponseOutput) RouteAction() HttpRouteActionResponseOutput {
	return o.ApplyT(func(v PathRuleResponse) HttpRouteActionResponse { return v.RouteAction }).(HttpRouteActionResponseOutput)
}

// The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is additionally specified, advanced routing actions like URL Rewrites, etc. take effect prior to sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendService s. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
func (o PathRuleResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v PathRuleResponse) string { return v.Service }).(pulumi.StringOutput)
}

// When a path pattern is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to target gRPC proxy.
func (o PathRuleResponseOutput) UrlRedirect() HttpRedirectActionResponseOutput {
	return o.ApplyT(func(v PathRuleResponse) HttpRedirectActionResponse { return v.UrlRedirect }).(HttpRedirectActionResponseOutput)
}

type PathRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (PathRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PathRuleResponse)(nil)).Elem()
}

func (o PathRuleResponseArrayOutput) ToPathRuleResponseArrayOutput() PathRuleResponseArrayOutput {
	return o
}

func (o PathRuleResponseArrayOutput) ToPathRuleResponseArrayOutputWithContext(ctx context.Context) PathRuleResponseArrayOutput {
	return o
}

func (o PathRuleResponseArrayOutput) Index(i pulumi.IntInput) PathRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PathRuleResponse {
		return vs[0].([]PathRuleResponse)[vs[1].(int)]
	}).(PathRuleResponseOutput)
}

// Represents a CIDR range which can be used to assign addresses.
type PublicAdvertisedPrefixPublicDelegatedPrefixResponse struct {
	// The IP address range of the public delegated prefix
	IpRange string `pulumi:"ipRange"`
	// The name of the public delegated prefix
	Name string `pulumi:"name"`
	// The project number of the public delegated prefix
	Project string `pulumi:"project"`
	// The region of the public delegated prefix if it is regional. If absent, the prefix is global.
	Region string `pulumi:"region"`
	// The status of the public delegated prefix. Possible values are: INITIALIZING: The public delegated prefix is being initialized and addresses cannot be created yet. ANNOUNCED: The public delegated prefix is active.
	Status string `pulumi:"status"`
}

// PublicAdvertisedPrefixPublicDelegatedPrefixResponseInput is an input type that accepts PublicAdvertisedPrefixPublicDelegatedPrefixResponseArgs and PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput values.
// You can construct a concrete instance of `PublicAdvertisedPrefixPublicDelegatedPrefixResponseInput` via:
//
//          PublicAdvertisedPrefixPublicDelegatedPrefixResponseArgs{...}
type PublicAdvertisedPrefixPublicDelegatedPrefixResponseInput interface {
	pulumi.Input

	ToPublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput() PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput
	ToPublicAdvertisedPrefixPublicDelegatedPrefixResponseOutputWithContext(context.Context) PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput
}

// Represents a CIDR range which can be used to assign addresses.
type PublicAdvertisedPrefixPublicDelegatedPrefixResponseArgs struct {
	// The IP address range of the public delegated prefix
	IpRange pulumi.StringInput `pulumi:"ipRange"`
	// The name of the public delegated prefix
	Name pulumi.StringInput `pulumi:"name"`
	// The project number of the public delegated prefix
	Project pulumi.StringInput `pulumi:"project"`
	// The region of the public delegated prefix if it is regional. If absent, the prefix is global.
	Region pulumi.StringInput `pulumi:"region"`
	// The status of the public delegated prefix. Possible values are: INITIALIZING: The public delegated prefix is being initialized and addresses cannot be created yet. ANNOUNCED: The public delegated prefix is active.
	Status pulumi.StringInput `pulumi:"status"`
}

func (PublicAdvertisedPrefixPublicDelegatedPrefixResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicAdvertisedPrefixPublicDelegatedPrefixResponse)(nil)).Elem()
}

func (i PublicAdvertisedPrefixPublicDelegatedPrefixResponseArgs) ToPublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput() PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput {
	return i.ToPublicAdvertisedPrefixPublicDelegatedPrefixResponseOutputWithContext(context.Background())
}

func (i PublicAdvertisedPrefixPublicDelegatedPrefixResponseArgs) ToPublicAdvertisedPrefixPublicDelegatedPrefixResponseOutputWithContext(ctx context.Context) PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput)
}

// PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayInput is an input type that accepts PublicAdvertisedPrefixPublicDelegatedPrefixResponseArray and PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput values.
// You can construct a concrete instance of `PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayInput` via:
//
//          PublicAdvertisedPrefixPublicDelegatedPrefixResponseArray{ PublicAdvertisedPrefixPublicDelegatedPrefixResponseArgs{...} }
type PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayInput interface {
	pulumi.Input

	ToPublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput() PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput
	ToPublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutputWithContext(context.Context) PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput
}

type PublicAdvertisedPrefixPublicDelegatedPrefixResponseArray []PublicAdvertisedPrefixPublicDelegatedPrefixResponseInput

func (PublicAdvertisedPrefixPublicDelegatedPrefixResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublicAdvertisedPrefixPublicDelegatedPrefixResponse)(nil)).Elem()
}

func (i PublicAdvertisedPrefixPublicDelegatedPrefixResponseArray) ToPublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput() PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput {
	return i.ToPublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutputWithContext(context.Background())
}

func (i PublicAdvertisedPrefixPublicDelegatedPrefixResponseArray) ToPublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutputWithContext(ctx context.Context) PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput)
}

// Represents a CIDR range which can be used to assign addresses.
type PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput struct{ *pulumi.OutputState }

func (PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicAdvertisedPrefixPublicDelegatedPrefixResponse)(nil)).Elem()
}

func (o PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput) ToPublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput() PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput {
	return o
}

func (o PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput) ToPublicAdvertisedPrefixPublicDelegatedPrefixResponseOutputWithContext(ctx context.Context) PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput {
	return o
}

// The IP address range of the public delegated prefix
func (o PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput) IpRange() pulumi.StringOutput {
	return o.ApplyT(func(v PublicAdvertisedPrefixPublicDelegatedPrefixResponse) string { return v.IpRange }).(pulumi.StringOutput)
}

// The name of the public delegated prefix
func (o PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PublicAdvertisedPrefixPublicDelegatedPrefixResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The project number of the public delegated prefix
func (o PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v PublicAdvertisedPrefixPublicDelegatedPrefixResponse) string { return v.Project }).(pulumi.StringOutput)
}

// The region of the public delegated prefix if it is regional. If absent, the prefix is global.
func (o PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v PublicAdvertisedPrefixPublicDelegatedPrefixResponse) string { return v.Region }).(pulumi.StringOutput)
}

// The status of the public delegated prefix. Possible values are: INITIALIZING: The public delegated prefix is being initialized and addresses cannot be created yet. ANNOUNCED: The public delegated prefix is active.
func (o PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PublicAdvertisedPrefixPublicDelegatedPrefixResponse) string { return v.Status }).(pulumi.StringOutput)
}

type PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput struct{ *pulumi.OutputState }

func (PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublicAdvertisedPrefixPublicDelegatedPrefixResponse)(nil)).Elem()
}

func (o PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput) ToPublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput() PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput {
	return o
}

func (o PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput) ToPublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutputWithContext(ctx context.Context) PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput {
	return o
}

func (o PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput) Index(i pulumi.IntInput) PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PublicAdvertisedPrefixPublicDelegatedPrefixResponse {
		return vs[0].([]PublicAdvertisedPrefixPublicDelegatedPrefixResponse)[vs[1].(int)]
	}).(PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput)
}

// Represents a sub PublicDelegatedPrefix.
type PublicDelegatedPrefixPublicDelegatedSubPrefix struct {
	// Name of the project scoping this PublicDelegatedSubPrefix.
	DelegateeProject *string `pulumi:"delegateeProject"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// The IPv4 address range, in CIDR format, represented by this sub public delegated prefix.
	IpCidrRange *string `pulumi:"ipCidrRange"`
	// Whether the sub prefix is delegated to create Address resources in the delegatee project.
	IsAddress *bool `pulumi:"isAddress"`
	// The name of the sub public delegated prefix.
	Name *string `pulumi:"name"`
}

// PublicDelegatedPrefixPublicDelegatedSubPrefixInput is an input type that accepts PublicDelegatedPrefixPublicDelegatedSubPrefixArgs and PublicDelegatedPrefixPublicDelegatedSubPrefixOutput values.
// You can construct a concrete instance of `PublicDelegatedPrefixPublicDelegatedSubPrefixInput` via:
//
//          PublicDelegatedPrefixPublicDelegatedSubPrefixArgs{...}
type PublicDelegatedPrefixPublicDelegatedSubPrefixInput interface {
	pulumi.Input

	ToPublicDelegatedPrefixPublicDelegatedSubPrefixOutput() PublicDelegatedPrefixPublicDelegatedSubPrefixOutput
	ToPublicDelegatedPrefixPublicDelegatedSubPrefixOutputWithContext(context.Context) PublicDelegatedPrefixPublicDelegatedSubPrefixOutput
}

// Represents a sub PublicDelegatedPrefix.
type PublicDelegatedPrefixPublicDelegatedSubPrefixArgs struct {
	// Name of the project scoping this PublicDelegatedSubPrefix.
	DelegateeProject pulumi.StringPtrInput `pulumi:"delegateeProject"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The IPv4 address range, in CIDR format, represented by this sub public delegated prefix.
	IpCidrRange pulumi.StringPtrInput `pulumi:"ipCidrRange"`
	// Whether the sub prefix is delegated to create Address resources in the delegatee project.
	IsAddress pulumi.BoolPtrInput `pulumi:"isAddress"`
	// The name of the sub public delegated prefix.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PublicDelegatedPrefixPublicDelegatedSubPrefixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicDelegatedPrefixPublicDelegatedSubPrefix)(nil)).Elem()
}

func (i PublicDelegatedPrefixPublicDelegatedSubPrefixArgs) ToPublicDelegatedPrefixPublicDelegatedSubPrefixOutput() PublicDelegatedPrefixPublicDelegatedSubPrefixOutput {
	return i.ToPublicDelegatedPrefixPublicDelegatedSubPrefixOutputWithContext(context.Background())
}

func (i PublicDelegatedPrefixPublicDelegatedSubPrefixArgs) ToPublicDelegatedPrefixPublicDelegatedSubPrefixOutputWithContext(ctx context.Context) PublicDelegatedPrefixPublicDelegatedSubPrefixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicDelegatedPrefixPublicDelegatedSubPrefixOutput)
}

// PublicDelegatedPrefixPublicDelegatedSubPrefixArrayInput is an input type that accepts PublicDelegatedPrefixPublicDelegatedSubPrefixArray and PublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput values.
// You can construct a concrete instance of `PublicDelegatedPrefixPublicDelegatedSubPrefixArrayInput` via:
//
//          PublicDelegatedPrefixPublicDelegatedSubPrefixArray{ PublicDelegatedPrefixPublicDelegatedSubPrefixArgs{...} }
type PublicDelegatedPrefixPublicDelegatedSubPrefixArrayInput interface {
	pulumi.Input

	ToPublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput() PublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput
	ToPublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutputWithContext(context.Context) PublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput
}

type PublicDelegatedPrefixPublicDelegatedSubPrefixArray []PublicDelegatedPrefixPublicDelegatedSubPrefixInput

func (PublicDelegatedPrefixPublicDelegatedSubPrefixArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublicDelegatedPrefixPublicDelegatedSubPrefix)(nil)).Elem()
}

func (i PublicDelegatedPrefixPublicDelegatedSubPrefixArray) ToPublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput() PublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput {
	return i.ToPublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutputWithContext(context.Background())
}

func (i PublicDelegatedPrefixPublicDelegatedSubPrefixArray) ToPublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutputWithContext(ctx context.Context) PublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput)
}

// Represents a sub PublicDelegatedPrefix.
type PublicDelegatedPrefixPublicDelegatedSubPrefixOutput struct{ *pulumi.OutputState }

func (PublicDelegatedPrefixPublicDelegatedSubPrefixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicDelegatedPrefixPublicDelegatedSubPrefix)(nil)).Elem()
}

func (o PublicDelegatedPrefixPublicDelegatedSubPrefixOutput) ToPublicDelegatedPrefixPublicDelegatedSubPrefixOutput() PublicDelegatedPrefixPublicDelegatedSubPrefixOutput {
	return o
}

func (o PublicDelegatedPrefixPublicDelegatedSubPrefixOutput) ToPublicDelegatedPrefixPublicDelegatedSubPrefixOutputWithContext(ctx context.Context) PublicDelegatedPrefixPublicDelegatedSubPrefixOutput {
	return o
}

// Name of the project scoping this PublicDelegatedSubPrefix.
func (o PublicDelegatedPrefixPublicDelegatedSubPrefixOutput) DelegateeProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicDelegatedPrefixPublicDelegatedSubPrefix) *string { return v.DelegateeProject }).(pulumi.StringPtrOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o PublicDelegatedPrefixPublicDelegatedSubPrefixOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicDelegatedPrefixPublicDelegatedSubPrefix) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The IPv4 address range, in CIDR format, represented by this sub public delegated prefix.
func (o PublicDelegatedPrefixPublicDelegatedSubPrefixOutput) IpCidrRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicDelegatedPrefixPublicDelegatedSubPrefix) *string { return v.IpCidrRange }).(pulumi.StringPtrOutput)
}

// Whether the sub prefix is delegated to create Address resources in the delegatee project.
func (o PublicDelegatedPrefixPublicDelegatedSubPrefixOutput) IsAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PublicDelegatedPrefixPublicDelegatedSubPrefix) *bool { return v.IsAddress }).(pulumi.BoolPtrOutput)
}

// The name of the sub public delegated prefix.
func (o PublicDelegatedPrefixPublicDelegatedSubPrefixOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicDelegatedPrefixPublicDelegatedSubPrefix) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput struct{ *pulumi.OutputState }

func (PublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublicDelegatedPrefixPublicDelegatedSubPrefix)(nil)).Elem()
}

func (o PublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput) ToPublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput() PublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput {
	return o
}

func (o PublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput) ToPublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutputWithContext(ctx context.Context) PublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput {
	return o
}

func (o PublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput) Index(i pulumi.IntInput) PublicDelegatedPrefixPublicDelegatedSubPrefixOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PublicDelegatedPrefixPublicDelegatedSubPrefix {
		return vs[0].([]PublicDelegatedPrefixPublicDelegatedSubPrefix)[vs[1].(int)]
	}).(PublicDelegatedPrefixPublicDelegatedSubPrefixOutput)
}

// Represents a sub PublicDelegatedPrefix.
type PublicDelegatedPrefixPublicDelegatedSubPrefixResponse struct {
	// Name of the project scoping this PublicDelegatedSubPrefix.
	DelegateeProject string `pulumi:"delegateeProject"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description string `pulumi:"description"`
	// The IPv4 address range, in CIDR format, represented by this sub public delegated prefix.
	IpCidrRange string `pulumi:"ipCidrRange"`
	// Whether the sub prefix is delegated to create Address resources in the delegatee project.
	IsAddress bool `pulumi:"isAddress"`
	// The name of the sub public delegated prefix.
	Name string `pulumi:"name"`
	// The region of the sub public delegated prefix if it is regional. If absent, the sub prefix is global.
	Region string `pulumi:"region"`
	// The status of the sub public delegated prefix.
	Status string `pulumi:"status"`
}

// PublicDelegatedPrefixPublicDelegatedSubPrefixResponseInput is an input type that accepts PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArgs and PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput values.
// You can construct a concrete instance of `PublicDelegatedPrefixPublicDelegatedSubPrefixResponseInput` via:
//
//          PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArgs{...}
type PublicDelegatedPrefixPublicDelegatedSubPrefixResponseInput interface {
	pulumi.Input

	ToPublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput() PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput
	ToPublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutputWithContext(context.Context) PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput
}

// Represents a sub PublicDelegatedPrefix.
type PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArgs struct {
	// Name of the project scoping this PublicDelegatedSubPrefix.
	DelegateeProject pulumi.StringInput `pulumi:"delegateeProject"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringInput `pulumi:"description"`
	// The IPv4 address range, in CIDR format, represented by this sub public delegated prefix.
	IpCidrRange pulumi.StringInput `pulumi:"ipCidrRange"`
	// Whether the sub prefix is delegated to create Address resources in the delegatee project.
	IsAddress pulumi.BoolInput `pulumi:"isAddress"`
	// The name of the sub public delegated prefix.
	Name pulumi.StringInput `pulumi:"name"`
	// The region of the sub public delegated prefix if it is regional. If absent, the sub prefix is global.
	Region pulumi.StringInput `pulumi:"region"`
	// The status of the sub public delegated prefix.
	Status pulumi.StringInput `pulumi:"status"`
}

func (PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicDelegatedPrefixPublicDelegatedSubPrefixResponse)(nil)).Elem()
}

func (i PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArgs) ToPublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput() PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput {
	return i.ToPublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutputWithContext(context.Background())
}

func (i PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArgs) ToPublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutputWithContext(ctx context.Context) PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput)
}

// PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayInput is an input type that accepts PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArray and PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput values.
// You can construct a concrete instance of `PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayInput` via:
//
//          PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArray{ PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArgs{...} }
type PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayInput interface {
	pulumi.Input

	ToPublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput() PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput
	ToPublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutputWithContext(context.Context) PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput
}

type PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArray []PublicDelegatedPrefixPublicDelegatedSubPrefixResponseInput

func (PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublicDelegatedPrefixPublicDelegatedSubPrefixResponse)(nil)).Elem()
}

func (i PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArray) ToPublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput() PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput {
	return i.ToPublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutputWithContext(context.Background())
}

func (i PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArray) ToPublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutputWithContext(ctx context.Context) PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput)
}

// Represents a sub PublicDelegatedPrefix.
type PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput struct{ *pulumi.OutputState }

func (PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicDelegatedPrefixPublicDelegatedSubPrefixResponse)(nil)).Elem()
}

func (o PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput) ToPublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput() PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput {
	return o
}

func (o PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput) ToPublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutputWithContext(ctx context.Context) PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput {
	return o
}

// Name of the project scoping this PublicDelegatedSubPrefix.
func (o PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput) DelegateeProject() pulumi.StringOutput {
	return o.ApplyT(func(v PublicDelegatedPrefixPublicDelegatedSubPrefixResponse) string { return v.DelegateeProject }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v PublicDelegatedPrefixPublicDelegatedSubPrefixResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The IPv4 address range, in CIDR format, represented by this sub public delegated prefix.
func (o PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput) IpCidrRange() pulumi.StringOutput {
	return o.ApplyT(func(v PublicDelegatedPrefixPublicDelegatedSubPrefixResponse) string { return v.IpCidrRange }).(pulumi.StringOutput)
}

// Whether the sub prefix is delegated to create Address resources in the delegatee project.
func (o PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput) IsAddress() pulumi.BoolOutput {
	return o.ApplyT(func(v PublicDelegatedPrefixPublicDelegatedSubPrefixResponse) bool { return v.IsAddress }).(pulumi.BoolOutput)
}

// The name of the sub public delegated prefix.
func (o PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PublicDelegatedPrefixPublicDelegatedSubPrefixResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The region of the sub public delegated prefix if it is regional. If absent, the sub prefix is global.
func (o PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v PublicDelegatedPrefixPublicDelegatedSubPrefixResponse) string { return v.Region }).(pulumi.StringOutput)
}

// The status of the sub public delegated prefix.
func (o PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PublicDelegatedPrefixPublicDelegatedSubPrefixResponse) string { return v.Status }).(pulumi.StringOutput)
}

type PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput struct{ *pulumi.OutputState }

func (PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PublicDelegatedPrefixPublicDelegatedSubPrefixResponse)(nil)).Elem()
}

func (o PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput) ToPublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput() PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput {
	return o
}

func (o PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput) ToPublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutputWithContext(ctx context.Context) PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput {
	return o
}

func (o PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput) Index(i pulumi.IntInput) PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PublicDelegatedPrefixPublicDelegatedSubPrefixResponse {
		return vs[0].([]PublicDelegatedPrefixPublicDelegatedSubPrefixResponse)[vs[1].(int)]
	}).(PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput)
}

// A policy that specifies how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow.
type RequestMirrorPolicy struct {
	// The full or partial URL to the BackendService resource being mirrored to.
	BackendService *string `pulumi:"backendService"`
}

// RequestMirrorPolicyInput is an input type that accepts RequestMirrorPolicyArgs and RequestMirrorPolicyOutput values.
// You can construct a concrete instance of `RequestMirrorPolicyInput` via:
//
//          RequestMirrorPolicyArgs{...}
type RequestMirrorPolicyInput interface {
	pulumi.Input

	ToRequestMirrorPolicyOutput() RequestMirrorPolicyOutput
	ToRequestMirrorPolicyOutputWithContext(context.Context) RequestMirrorPolicyOutput
}

// A policy that specifies how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow.
type RequestMirrorPolicyArgs struct {
	// The full or partial URL to the BackendService resource being mirrored to.
	BackendService pulumi.StringPtrInput `pulumi:"backendService"`
}

func (RequestMirrorPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestMirrorPolicy)(nil)).Elem()
}

func (i RequestMirrorPolicyArgs) ToRequestMirrorPolicyOutput() RequestMirrorPolicyOutput {
	return i.ToRequestMirrorPolicyOutputWithContext(context.Background())
}

func (i RequestMirrorPolicyArgs) ToRequestMirrorPolicyOutputWithContext(ctx context.Context) RequestMirrorPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestMirrorPolicyOutput)
}

func (i RequestMirrorPolicyArgs) ToRequestMirrorPolicyPtrOutput() RequestMirrorPolicyPtrOutput {
	return i.ToRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (i RequestMirrorPolicyArgs) ToRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) RequestMirrorPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestMirrorPolicyOutput).ToRequestMirrorPolicyPtrOutputWithContext(ctx)
}

// RequestMirrorPolicyPtrInput is an input type that accepts RequestMirrorPolicyArgs, RequestMirrorPolicyPtr and RequestMirrorPolicyPtrOutput values.
// You can construct a concrete instance of `RequestMirrorPolicyPtrInput` via:
//
//          RequestMirrorPolicyArgs{...}
//
//  or:
//
//          nil
type RequestMirrorPolicyPtrInput interface {
	pulumi.Input

	ToRequestMirrorPolicyPtrOutput() RequestMirrorPolicyPtrOutput
	ToRequestMirrorPolicyPtrOutputWithContext(context.Context) RequestMirrorPolicyPtrOutput
}

type requestMirrorPolicyPtrType RequestMirrorPolicyArgs

func RequestMirrorPolicyPtr(v *RequestMirrorPolicyArgs) RequestMirrorPolicyPtrInput {
	return (*requestMirrorPolicyPtrType)(v)
}

func (*requestMirrorPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestMirrorPolicy)(nil)).Elem()
}

func (i *requestMirrorPolicyPtrType) ToRequestMirrorPolicyPtrOutput() RequestMirrorPolicyPtrOutput {
	return i.ToRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (i *requestMirrorPolicyPtrType) ToRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) RequestMirrorPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestMirrorPolicyPtrOutput)
}

// A policy that specifies how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow.
type RequestMirrorPolicyOutput struct{ *pulumi.OutputState }

func (RequestMirrorPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestMirrorPolicy)(nil)).Elem()
}

func (o RequestMirrorPolicyOutput) ToRequestMirrorPolicyOutput() RequestMirrorPolicyOutput {
	return o
}

func (o RequestMirrorPolicyOutput) ToRequestMirrorPolicyOutputWithContext(ctx context.Context) RequestMirrorPolicyOutput {
	return o
}

func (o RequestMirrorPolicyOutput) ToRequestMirrorPolicyPtrOutput() RequestMirrorPolicyPtrOutput {
	return o.ToRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (o RequestMirrorPolicyOutput) ToRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) RequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v RequestMirrorPolicy) *RequestMirrorPolicy {
		return &v
	}).(RequestMirrorPolicyPtrOutput)
}

// The full or partial URL to the BackendService resource being mirrored to.
func (o RequestMirrorPolicyOutput) BackendService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RequestMirrorPolicy) *string { return v.BackendService }).(pulumi.StringPtrOutput)
}

type RequestMirrorPolicyPtrOutput struct{ *pulumi.OutputState }

func (RequestMirrorPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestMirrorPolicy)(nil)).Elem()
}

func (o RequestMirrorPolicyPtrOutput) ToRequestMirrorPolicyPtrOutput() RequestMirrorPolicyPtrOutput {
	return o
}

func (o RequestMirrorPolicyPtrOutput) ToRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) RequestMirrorPolicyPtrOutput {
	return o
}

func (o RequestMirrorPolicyPtrOutput) Elem() RequestMirrorPolicyOutput {
	return o.ApplyT(func(v *RequestMirrorPolicy) RequestMirrorPolicy { return *v }).(RequestMirrorPolicyOutput)
}

// The full or partial URL to the BackendService resource being mirrored to.
func (o RequestMirrorPolicyPtrOutput) BackendService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestMirrorPolicy) *string {
		if v == nil {
			return nil
		}
		return v.BackendService
	}).(pulumi.StringPtrOutput)
}

// A policy that specifies how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow.
type RequestMirrorPolicyResponse struct {
	// The full or partial URL to the BackendService resource being mirrored to.
	BackendService string `pulumi:"backendService"`
}

// RequestMirrorPolicyResponseInput is an input type that accepts RequestMirrorPolicyResponseArgs and RequestMirrorPolicyResponseOutput values.
// You can construct a concrete instance of `RequestMirrorPolicyResponseInput` via:
//
//          RequestMirrorPolicyResponseArgs{...}
type RequestMirrorPolicyResponseInput interface {
	pulumi.Input

	ToRequestMirrorPolicyResponseOutput() RequestMirrorPolicyResponseOutput
	ToRequestMirrorPolicyResponseOutputWithContext(context.Context) RequestMirrorPolicyResponseOutput
}

// A policy that specifies how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow.
type RequestMirrorPolicyResponseArgs struct {
	// The full or partial URL to the BackendService resource being mirrored to.
	BackendService pulumi.StringInput `pulumi:"backendService"`
}

func (RequestMirrorPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestMirrorPolicyResponse)(nil)).Elem()
}

func (i RequestMirrorPolicyResponseArgs) ToRequestMirrorPolicyResponseOutput() RequestMirrorPolicyResponseOutput {
	return i.ToRequestMirrorPolicyResponseOutputWithContext(context.Background())
}

func (i RequestMirrorPolicyResponseArgs) ToRequestMirrorPolicyResponseOutputWithContext(ctx context.Context) RequestMirrorPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestMirrorPolicyResponseOutput)
}

func (i RequestMirrorPolicyResponseArgs) ToRequestMirrorPolicyResponsePtrOutput() RequestMirrorPolicyResponsePtrOutput {
	return i.ToRequestMirrorPolicyResponsePtrOutputWithContext(context.Background())
}

func (i RequestMirrorPolicyResponseArgs) ToRequestMirrorPolicyResponsePtrOutputWithContext(ctx context.Context) RequestMirrorPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestMirrorPolicyResponseOutput).ToRequestMirrorPolicyResponsePtrOutputWithContext(ctx)
}

// RequestMirrorPolicyResponsePtrInput is an input type that accepts RequestMirrorPolicyResponseArgs, RequestMirrorPolicyResponsePtr and RequestMirrorPolicyResponsePtrOutput values.
// You can construct a concrete instance of `RequestMirrorPolicyResponsePtrInput` via:
//
//          RequestMirrorPolicyResponseArgs{...}
//
//  or:
//
//          nil
type RequestMirrorPolicyResponsePtrInput interface {
	pulumi.Input

	ToRequestMirrorPolicyResponsePtrOutput() RequestMirrorPolicyResponsePtrOutput
	ToRequestMirrorPolicyResponsePtrOutputWithContext(context.Context) RequestMirrorPolicyResponsePtrOutput
}

type requestMirrorPolicyResponsePtrType RequestMirrorPolicyResponseArgs

func RequestMirrorPolicyResponsePtr(v *RequestMirrorPolicyResponseArgs) RequestMirrorPolicyResponsePtrInput {
	return (*requestMirrorPolicyResponsePtrType)(v)
}

func (*requestMirrorPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestMirrorPolicyResponse)(nil)).Elem()
}

func (i *requestMirrorPolicyResponsePtrType) ToRequestMirrorPolicyResponsePtrOutput() RequestMirrorPolicyResponsePtrOutput {
	return i.ToRequestMirrorPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *requestMirrorPolicyResponsePtrType) ToRequestMirrorPolicyResponsePtrOutputWithContext(ctx context.Context) RequestMirrorPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestMirrorPolicyResponsePtrOutput)
}

// A policy that specifies how requests intended for the route's backends are shadowed to a separate mirrored backend service. Loadbalancer does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host / authority header is suffixed with -shadow.
type RequestMirrorPolicyResponseOutput struct{ *pulumi.OutputState }

func (RequestMirrorPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestMirrorPolicyResponse)(nil)).Elem()
}

func (o RequestMirrorPolicyResponseOutput) ToRequestMirrorPolicyResponseOutput() RequestMirrorPolicyResponseOutput {
	return o
}

func (o RequestMirrorPolicyResponseOutput) ToRequestMirrorPolicyResponseOutputWithContext(ctx context.Context) RequestMirrorPolicyResponseOutput {
	return o
}

func (o RequestMirrorPolicyResponseOutput) ToRequestMirrorPolicyResponsePtrOutput() RequestMirrorPolicyResponsePtrOutput {
	return o.ToRequestMirrorPolicyResponsePtrOutputWithContext(context.Background())
}

func (o RequestMirrorPolicyResponseOutput) ToRequestMirrorPolicyResponsePtrOutputWithContext(ctx context.Context) RequestMirrorPolicyResponsePtrOutput {
	return o.ApplyT(func(v RequestMirrorPolicyResponse) *RequestMirrorPolicyResponse {
		return &v
	}).(RequestMirrorPolicyResponsePtrOutput)
}

// The full or partial URL to the BackendService resource being mirrored to.
func (o RequestMirrorPolicyResponseOutput) BackendService() pulumi.StringOutput {
	return o.ApplyT(func(v RequestMirrorPolicyResponse) string { return v.BackendService }).(pulumi.StringOutput)
}

type RequestMirrorPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RequestMirrorPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestMirrorPolicyResponse)(nil)).Elem()
}

func (o RequestMirrorPolicyResponsePtrOutput) ToRequestMirrorPolicyResponsePtrOutput() RequestMirrorPolicyResponsePtrOutput {
	return o
}

func (o RequestMirrorPolicyResponsePtrOutput) ToRequestMirrorPolicyResponsePtrOutputWithContext(ctx context.Context) RequestMirrorPolicyResponsePtrOutput {
	return o
}

func (o RequestMirrorPolicyResponsePtrOutput) Elem() RequestMirrorPolicyResponseOutput {
	return o.ApplyT(func(v *RequestMirrorPolicyResponse) RequestMirrorPolicyResponse { return *v }).(RequestMirrorPolicyResponseOutput)
}

// The full or partial URL to the BackendService resource being mirrored to.
func (o RequestMirrorPolicyResponsePtrOutput) BackendService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestMirrorPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BackendService
	}).(pulumi.StringPtrOutput)
}

// Represents a reservation resource. A reservation ensures that capacity is held in a specific zone even if the reserved VMs are not running. For more information, read Reserving zonal resources.
type ReservationType struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// Reservation for instances with specific machine shapes.
	SpecificReservation *AllocationSpecificSKUReservation `pulumi:"specificReservation"`
	// Indicates whether the reservation can be consumed by VMs with affinity for "any" reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation.
	SpecificReservationRequired *bool `pulumi:"specificReservationRequired"`
	// Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment.
	Zone *string `pulumi:"zone"`
}

// ReservationTypeInput is an input type that accepts ReservationTypeArgs and ReservationTypeOutput values.
// You can construct a concrete instance of `ReservationTypeInput` via:
//
//          ReservationTypeArgs{...}
type ReservationTypeInput interface {
	pulumi.Input

	ToReservationTypeOutput() ReservationTypeOutput
	ToReservationTypeOutputWithContext(context.Context) ReservationTypeOutput
}

// Represents a reservation resource. A reservation ensures that capacity is held in a specific zone even if the reserved VMs are not running. For more information, read Reserving zonal resources.
type ReservationTypeArgs struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Reservation for instances with specific machine shapes.
	SpecificReservation AllocationSpecificSKUReservationPtrInput `pulumi:"specificReservation"`
	// Indicates whether the reservation can be consumed by VMs with affinity for "any" reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation.
	SpecificReservationRequired pulumi.BoolPtrInput `pulumi:"specificReservationRequired"`
	// Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (ReservationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationType)(nil)).Elem()
}

func (i ReservationTypeArgs) ToReservationTypeOutput() ReservationTypeOutput {
	return i.ToReservationTypeOutputWithContext(context.Background())
}

func (i ReservationTypeArgs) ToReservationTypeOutputWithContext(ctx context.Context) ReservationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationTypeOutput)
}

// ReservationTypeArrayInput is an input type that accepts ReservationTypeArray and ReservationTypeArrayOutput values.
// You can construct a concrete instance of `ReservationTypeArrayInput` via:
//
//          ReservationTypeArray{ ReservationTypeArgs{...} }
type ReservationTypeArrayInput interface {
	pulumi.Input

	ToReservationTypeArrayOutput() ReservationTypeArrayOutput
	ToReservationTypeArrayOutputWithContext(context.Context) ReservationTypeArrayOutput
}

type ReservationTypeArray []ReservationTypeInput

func (ReservationTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReservationType)(nil)).Elem()
}

func (i ReservationTypeArray) ToReservationTypeArrayOutput() ReservationTypeArrayOutput {
	return i.ToReservationTypeArrayOutputWithContext(context.Background())
}

func (i ReservationTypeArray) ToReservationTypeArrayOutputWithContext(ctx context.Context) ReservationTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationTypeArrayOutput)
}

// Represents a reservation resource. A reservation ensures that capacity is held in a specific zone even if the reserved VMs are not running. For more information, read Reserving zonal resources.
type ReservationTypeOutput struct{ *pulumi.OutputState }

func (ReservationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationType)(nil)).Elem()
}

func (o ReservationTypeOutput) ToReservationTypeOutput() ReservationTypeOutput {
	return o
}

func (o ReservationTypeOutput) ToReservationTypeOutputWithContext(ctx context.Context) ReservationTypeOutput {
	return o
}

// An optional description of this resource. Provide this property when you create the resource.
func (o ReservationTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservationType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o ReservationTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservationType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Reservation for instances with specific machine shapes.
func (o ReservationTypeOutput) SpecificReservation() AllocationSpecificSKUReservationPtrOutput {
	return o.ApplyT(func(v ReservationType) *AllocationSpecificSKUReservation { return v.SpecificReservation }).(AllocationSpecificSKUReservationPtrOutput)
}

// Indicates whether the reservation can be consumed by VMs with affinity for "any" reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation.
func (o ReservationTypeOutput) SpecificReservationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReservationType) *bool { return v.SpecificReservationRequired }).(pulumi.BoolPtrOutput)
}

// Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment.
func (o ReservationTypeOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservationType) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type ReservationTypeArrayOutput struct{ *pulumi.OutputState }

func (ReservationTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReservationType)(nil)).Elem()
}

func (o ReservationTypeArrayOutput) ToReservationTypeArrayOutput() ReservationTypeArrayOutput {
	return o
}

func (o ReservationTypeArrayOutput) ToReservationTypeArrayOutputWithContext(ctx context.Context) ReservationTypeArrayOutput {
	return o
}

func (o ReservationTypeArrayOutput) Index(i pulumi.IntInput) ReservationTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReservationType {
		return vs[0].([]ReservationType)[vs[1].(int)]
	}).(ReservationTypeOutput)
}

// Specifies the reservations that this instance can consume from.
type ReservationAffinity struct {
	// Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See Consuming reserved instances for examples.
	ConsumeReservationType *string `pulumi:"consumeReservationType"`
	// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your reservation as its value.
	Key *string `pulumi:"key"`
	// Corresponds to the label values of a reservation resource. This can be either a name to a reservation in the same project or "projects/different-project/reservations/some-reservation-name" to target a shared reservation in the same zone but in a different project.
	Values []string `pulumi:"values"`
}

// ReservationAffinityInput is an input type that accepts ReservationAffinityArgs and ReservationAffinityOutput values.
// You can construct a concrete instance of `ReservationAffinityInput` via:
//
//          ReservationAffinityArgs{...}
type ReservationAffinityInput interface {
	pulumi.Input

	ToReservationAffinityOutput() ReservationAffinityOutput
	ToReservationAffinityOutputWithContext(context.Context) ReservationAffinityOutput
}

// Specifies the reservations that this instance can consume from.
type ReservationAffinityArgs struct {
	// Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See Consuming reserved instances for examples.
	ConsumeReservationType *ReservationAffinityConsumeReservationType `pulumi:"consumeReservationType"`
	// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your reservation as its value.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Corresponds to the label values of a reservation resource. This can be either a name to a reservation in the same project or "projects/different-project/reservations/some-reservation-name" to target a shared reservation in the same zone but in a different project.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ReservationAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAffinity)(nil)).Elem()
}

func (i ReservationAffinityArgs) ToReservationAffinityOutput() ReservationAffinityOutput {
	return i.ToReservationAffinityOutputWithContext(context.Background())
}

func (i ReservationAffinityArgs) ToReservationAffinityOutputWithContext(ctx context.Context) ReservationAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityOutput)
}

func (i ReservationAffinityArgs) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return i.ToReservationAffinityPtrOutputWithContext(context.Background())
}

func (i ReservationAffinityArgs) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityOutput).ToReservationAffinityPtrOutputWithContext(ctx)
}

// ReservationAffinityPtrInput is an input type that accepts ReservationAffinityArgs, ReservationAffinityPtr and ReservationAffinityPtrOutput values.
// You can construct a concrete instance of `ReservationAffinityPtrInput` via:
//
//          ReservationAffinityArgs{...}
//
//  or:
//
//          nil
type ReservationAffinityPtrInput interface {
	pulumi.Input

	ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput
	ToReservationAffinityPtrOutputWithContext(context.Context) ReservationAffinityPtrOutput
}

type reservationAffinityPtrType ReservationAffinityArgs

func ReservationAffinityPtr(v *ReservationAffinityArgs) ReservationAffinityPtrInput {
	return (*reservationAffinityPtrType)(v)
}

func (*reservationAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationAffinity)(nil)).Elem()
}

func (i *reservationAffinityPtrType) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return i.ToReservationAffinityPtrOutputWithContext(context.Background())
}

func (i *reservationAffinityPtrType) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityPtrOutput)
}

// Specifies the reservations that this instance can consume from.
type ReservationAffinityOutput struct{ *pulumi.OutputState }

func (ReservationAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAffinity)(nil)).Elem()
}

func (o ReservationAffinityOutput) ToReservationAffinityOutput() ReservationAffinityOutput {
	return o
}

func (o ReservationAffinityOutput) ToReservationAffinityOutputWithContext(ctx context.Context) ReservationAffinityOutput {
	return o
}

func (o ReservationAffinityOutput) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return o.ToReservationAffinityPtrOutputWithContext(context.Background())
}

func (o ReservationAffinityOutput) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return o.ApplyT(func(v ReservationAffinity) *ReservationAffinity {
		return &v
	}).(ReservationAffinityPtrOutput)
}

// Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See Consuming reserved instances for examples.
func (o ReservationAffinityOutput) ConsumeReservationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservationAffinity) *string { return v.ConsumeReservationType }).(pulumi.StringPtrOutput)
}

// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your reservation as its value.
func (o ReservationAffinityOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservationAffinity) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Corresponds to the label values of a reservation resource. This can be either a name to a reservation in the same project or "projects/different-project/reservations/some-reservation-name" to target a shared reservation in the same zone but in a different project.
func (o ReservationAffinityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReservationAffinity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ReservationAffinityPtrOutput struct{ *pulumi.OutputState }

func (ReservationAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationAffinity)(nil)).Elem()
}

func (o ReservationAffinityPtrOutput) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return o
}

func (o ReservationAffinityPtrOutput) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return o
}

func (o ReservationAffinityPtrOutput) Elem() ReservationAffinityOutput {
	return o.ApplyT(func(v *ReservationAffinity) ReservationAffinity { return *v }).(ReservationAffinityOutput)
}

// Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See Consuming reserved instances for examples.
func (o ReservationAffinityPtrOutput) ConsumeReservationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservationAffinity) *string {
		if v == nil {
			return nil
		}
		return v.ConsumeReservationType
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your reservation as its value.
func (o ReservationAffinityPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservationAffinity) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the label values of a reservation resource. This can be either a name to a reservation in the same project or "projects/different-project/reservations/some-reservation-name" to target a shared reservation in the same zone but in a different project.
func (o ReservationAffinityPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReservationAffinity) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Specifies the reservations that this instance can consume from.
type ReservationAffinityResponse struct {
	// Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See Consuming reserved instances for examples.
	ConsumeReservationType string `pulumi:"consumeReservationType"`
	// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your reservation as its value.
	Key string `pulumi:"key"`
	// Corresponds to the label values of a reservation resource. This can be either a name to a reservation in the same project or "projects/different-project/reservations/some-reservation-name" to target a shared reservation in the same zone but in a different project.
	Values []string `pulumi:"values"`
}

// ReservationAffinityResponseInput is an input type that accepts ReservationAffinityResponseArgs and ReservationAffinityResponseOutput values.
// You can construct a concrete instance of `ReservationAffinityResponseInput` via:
//
//          ReservationAffinityResponseArgs{...}
type ReservationAffinityResponseInput interface {
	pulumi.Input

	ToReservationAffinityResponseOutput() ReservationAffinityResponseOutput
	ToReservationAffinityResponseOutputWithContext(context.Context) ReservationAffinityResponseOutput
}

// Specifies the reservations that this instance can consume from.
type ReservationAffinityResponseArgs struct {
	// Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See Consuming reserved instances for examples.
	ConsumeReservationType pulumi.StringInput `pulumi:"consumeReservationType"`
	// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your reservation as its value.
	Key pulumi.StringInput `pulumi:"key"`
	// Corresponds to the label values of a reservation resource. This can be either a name to a reservation in the same project or "projects/different-project/reservations/some-reservation-name" to target a shared reservation in the same zone but in a different project.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ReservationAffinityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAffinityResponse)(nil)).Elem()
}

func (i ReservationAffinityResponseArgs) ToReservationAffinityResponseOutput() ReservationAffinityResponseOutput {
	return i.ToReservationAffinityResponseOutputWithContext(context.Background())
}

func (i ReservationAffinityResponseArgs) ToReservationAffinityResponseOutputWithContext(ctx context.Context) ReservationAffinityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityResponseOutput)
}

func (i ReservationAffinityResponseArgs) ToReservationAffinityResponsePtrOutput() ReservationAffinityResponsePtrOutput {
	return i.ToReservationAffinityResponsePtrOutputWithContext(context.Background())
}

func (i ReservationAffinityResponseArgs) ToReservationAffinityResponsePtrOutputWithContext(ctx context.Context) ReservationAffinityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityResponseOutput).ToReservationAffinityResponsePtrOutputWithContext(ctx)
}

// ReservationAffinityResponsePtrInput is an input type that accepts ReservationAffinityResponseArgs, ReservationAffinityResponsePtr and ReservationAffinityResponsePtrOutput values.
// You can construct a concrete instance of `ReservationAffinityResponsePtrInput` via:
//
//          ReservationAffinityResponseArgs{...}
//
//  or:
//
//          nil
type ReservationAffinityResponsePtrInput interface {
	pulumi.Input

	ToReservationAffinityResponsePtrOutput() ReservationAffinityResponsePtrOutput
	ToReservationAffinityResponsePtrOutputWithContext(context.Context) ReservationAffinityResponsePtrOutput
}

type reservationAffinityResponsePtrType ReservationAffinityResponseArgs

func ReservationAffinityResponsePtr(v *ReservationAffinityResponseArgs) ReservationAffinityResponsePtrInput {
	return (*reservationAffinityResponsePtrType)(v)
}

func (*reservationAffinityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationAffinityResponse)(nil)).Elem()
}

func (i *reservationAffinityResponsePtrType) ToReservationAffinityResponsePtrOutput() ReservationAffinityResponsePtrOutput {
	return i.ToReservationAffinityResponsePtrOutputWithContext(context.Background())
}

func (i *reservationAffinityResponsePtrType) ToReservationAffinityResponsePtrOutputWithContext(ctx context.Context) ReservationAffinityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityResponsePtrOutput)
}

// Specifies the reservations that this instance can consume from.
type ReservationAffinityResponseOutput struct{ *pulumi.OutputState }

func (ReservationAffinityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAffinityResponse)(nil)).Elem()
}

func (o ReservationAffinityResponseOutput) ToReservationAffinityResponseOutput() ReservationAffinityResponseOutput {
	return o
}

func (o ReservationAffinityResponseOutput) ToReservationAffinityResponseOutputWithContext(ctx context.Context) ReservationAffinityResponseOutput {
	return o
}

func (o ReservationAffinityResponseOutput) ToReservationAffinityResponsePtrOutput() ReservationAffinityResponsePtrOutput {
	return o.ToReservationAffinityResponsePtrOutputWithContext(context.Background())
}

func (o ReservationAffinityResponseOutput) ToReservationAffinityResponsePtrOutputWithContext(ctx context.Context) ReservationAffinityResponsePtrOutput {
	return o.ApplyT(func(v ReservationAffinityResponse) *ReservationAffinityResponse {
		return &v
	}).(ReservationAffinityResponsePtrOutput)
}

// Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See Consuming reserved instances for examples.
func (o ReservationAffinityResponseOutput) ConsumeReservationType() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationAffinityResponse) string { return v.ConsumeReservationType }).(pulumi.StringOutput)
}

// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your reservation as its value.
func (o ReservationAffinityResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationAffinityResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Corresponds to the label values of a reservation resource. This can be either a name to a reservation in the same project or "projects/different-project/reservations/some-reservation-name" to target a shared reservation in the same zone but in a different project.
func (o ReservationAffinityResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReservationAffinityResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ReservationAffinityResponsePtrOutput struct{ *pulumi.OutputState }

func (ReservationAffinityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationAffinityResponse)(nil)).Elem()
}

func (o ReservationAffinityResponsePtrOutput) ToReservationAffinityResponsePtrOutput() ReservationAffinityResponsePtrOutput {
	return o
}

func (o ReservationAffinityResponsePtrOutput) ToReservationAffinityResponsePtrOutputWithContext(ctx context.Context) ReservationAffinityResponsePtrOutput {
	return o
}

func (o ReservationAffinityResponsePtrOutput) Elem() ReservationAffinityResponseOutput {
	return o.ApplyT(func(v *ReservationAffinityResponse) ReservationAffinityResponse { return *v }).(ReservationAffinityResponseOutput)
}

// Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See Consuming reserved instances for examples.
func (o ReservationAffinityResponsePtrOutput) ConsumeReservationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservationAffinityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ConsumeReservationType
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your reservation as its value.
func (o ReservationAffinityResponsePtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservationAffinityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Corresponds to the label values of a reservation resource. This can be either a name to a reservation in the same project or "projects/different-project/reservations/some-reservation-name" to target a shared reservation in the same zone but in a different project.
func (o ReservationAffinityResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReservationAffinityResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Represents a reservation resource. A reservation ensures that capacity is held in a specific zone even if the reserved VMs are not running. For more information, read Reserving zonal resources.
type ReservationResponse struct {
	// Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment.
	Commitment string `pulumi:"commitment"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp string `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description string `pulumi:"description"`
	// Type of the resource. Always compute#reservations for reservations.
	Kind string `pulumi:"kind"`
	// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name string `pulumi:"name"`
	// Reserved for future use.
	SatisfiesPzs bool `pulumi:"satisfiesPzs"`
	// Server-defined fully-qualified URL for this resource.
	SelfLink string `pulumi:"selfLink"`
	// Reservation for instances with specific machine shapes.
	SpecificReservation AllocationSpecificSKUReservationResponse `pulumi:"specificReservation"`
	// Indicates whether the reservation can be consumed by VMs with affinity for "any" reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation.
	SpecificReservationRequired bool `pulumi:"specificReservationRequired"`
	// The status of the reservation.
	Status string `pulumi:"status"`
	// Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment.
	Zone string `pulumi:"zone"`
}

// ReservationResponseInput is an input type that accepts ReservationResponseArgs and ReservationResponseOutput values.
// You can construct a concrete instance of `ReservationResponseInput` via:
//
//          ReservationResponseArgs{...}
type ReservationResponseInput interface {
	pulumi.Input

	ToReservationResponseOutput() ReservationResponseOutput
	ToReservationResponseOutputWithContext(context.Context) ReservationResponseOutput
}

// Represents a reservation resource. A reservation ensures that capacity is held in a specific zone even if the reserved VMs are not running. For more information, read Reserving zonal resources.
type ReservationResponseArgs struct {
	// Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment.
	Commitment pulumi.StringInput `pulumi:"commitment"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringInput `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringInput `pulumi:"description"`
	// Type of the resource. Always compute#reservations for reservations.
	Kind pulumi.StringInput `pulumi:"kind"`
	// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringInput `pulumi:"name"`
	// Reserved for future use.
	SatisfiesPzs pulumi.BoolInput `pulumi:"satisfiesPzs"`
	// Server-defined fully-qualified URL for this resource.
	SelfLink pulumi.StringInput `pulumi:"selfLink"`
	// Reservation for instances with specific machine shapes.
	SpecificReservation AllocationSpecificSKUReservationResponseInput `pulumi:"specificReservation"`
	// Indicates whether the reservation can be consumed by VMs with affinity for "any" reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation.
	SpecificReservationRequired pulumi.BoolInput `pulumi:"specificReservationRequired"`
	// The status of the reservation.
	Status pulumi.StringInput `pulumi:"status"`
	// Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment.
	Zone pulumi.StringInput `pulumi:"zone"`
}

func (ReservationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationResponse)(nil)).Elem()
}

func (i ReservationResponseArgs) ToReservationResponseOutput() ReservationResponseOutput {
	return i.ToReservationResponseOutputWithContext(context.Background())
}

func (i ReservationResponseArgs) ToReservationResponseOutputWithContext(ctx context.Context) ReservationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationResponseOutput)
}

// ReservationResponseArrayInput is an input type that accepts ReservationResponseArray and ReservationResponseArrayOutput values.
// You can construct a concrete instance of `ReservationResponseArrayInput` via:
//
//          ReservationResponseArray{ ReservationResponseArgs{...} }
type ReservationResponseArrayInput interface {
	pulumi.Input

	ToReservationResponseArrayOutput() ReservationResponseArrayOutput
	ToReservationResponseArrayOutputWithContext(context.Context) ReservationResponseArrayOutput
}

type ReservationResponseArray []ReservationResponseInput

func (ReservationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReservationResponse)(nil)).Elem()
}

func (i ReservationResponseArray) ToReservationResponseArrayOutput() ReservationResponseArrayOutput {
	return i.ToReservationResponseArrayOutputWithContext(context.Background())
}

func (i ReservationResponseArray) ToReservationResponseArrayOutputWithContext(ctx context.Context) ReservationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationResponseArrayOutput)
}

// Represents a reservation resource. A reservation ensures that capacity is held in a specific zone even if the reserved VMs are not running. For more information, read Reserving zonal resources.
type ReservationResponseOutput struct{ *pulumi.OutputState }

func (ReservationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationResponse)(nil)).Elem()
}

func (o ReservationResponseOutput) ToReservationResponseOutput() ReservationResponseOutput {
	return o
}

func (o ReservationResponseOutput) ToReservationResponseOutputWithContext(ctx context.Context) ReservationResponseOutput {
	return o
}

// Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment.
func (o ReservationResponseOutput) Commitment() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationResponse) string { return v.Commitment }).(pulumi.StringOutput)
}

// Creation timestamp in RFC3339 text format.
func (o ReservationResponseOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationResponse) string { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o ReservationResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Type of the resource. Always compute#reservations for reservations.
func (o ReservationResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o ReservationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Reserved for future use.
func (o ReservationResponseOutput) SatisfiesPzs() pulumi.BoolOutput {
	return o.ApplyT(func(v ReservationResponse) bool { return v.SatisfiesPzs }).(pulumi.BoolOutput)
}

// Server-defined fully-qualified URL for this resource.
func (o ReservationResponseOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationResponse) string { return v.SelfLink }).(pulumi.StringOutput)
}

// Reservation for instances with specific machine shapes.
func (o ReservationResponseOutput) SpecificReservation() AllocationSpecificSKUReservationResponseOutput {
	return o.ApplyT(func(v ReservationResponse) AllocationSpecificSKUReservationResponse { return v.SpecificReservation }).(AllocationSpecificSKUReservationResponseOutput)
}

// Indicates whether the reservation can be consumed by VMs with affinity for "any" reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation.
func (o ReservationResponseOutput) SpecificReservationRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v ReservationResponse) bool { return v.SpecificReservationRequired }).(pulumi.BoolOutput)
}

// The status of the reservation.
func (o ReservationResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment.
func (o ReservationResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationResponse) string { return v.Zone }).(pulumi.StringOutput)
}

type ReservationResponseArrayOutput struct{ *pulumi.OutputState }

func (ReservationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReservationResponse)(nil)).Elem()
}

func (o ReservationResponseArrayOutput) ToReservationResponseArrayOutput() ReservationResponseArrayOutput {
	return o
}

func (o ReservationResponseArrayOutput) ToReservationResponseArrayOutputWithContext(ctx context.Context) ReservationResponseArrayOutput {
	return o
}

func (o ReservationResponseArrayOutput) Index(i pulumi.IntInput) ReservationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReservationResponse {
		return vs[0].([]ReservationResponse)[vs[1].(int)]
	}).(ReservationResponseOutput)
}

// Commitment for a particular resource (a Commitment is composed of one or more of these).
type ResourceCommitment struct {
	// Name of the accelerator type resource. Applicable only when the type is ACCELERATOR.
	AcceleratorType *string `pulumi:"acceleratorType"`
	// The amount of the resource purchased (in a type-dependent unit, such as bytes). For vCPUs, this can just be an integer. For memory, this must be provided in MB. Memory must be a multiple of 256 MB, with up to 6.5GB of memory per every vCPU.
	Amount *string `pulumi:"amount"`
	// Type of resource for which this commitment applies. Possible values are VCPU and MEMORY
	Type *string `pulumi:"type"`
}

// ResourceCommitmentInput is an input type that accepts ResourceCommitmentArgs and ResourceCommitmentOutput values.
// You can construct a concrete instance of `ResourceCommitmentInput` via:
//
//          ResourceCommitmentArgs{...}
type ResourceCommitmentInput interface {
	pulumi.Input

	ToResourceCommitmentOutput() ResourceCommitmentOutput
	ToResourceCommitmentOutputWithContext(context.Context) ResourceCommitmentOutput
}

// Commitment for a particular resource (a Commitment is composed of one or more of these).
type ResourceCommitmentArgs struct {
	// Name of the accelerator type resource. Applicable only when the type is ACCELERATOR.
	AcceleratorType pulumi.StringPtrInput `pulumi:"acceleratorType"`
	// The amount of the resource purchased (in a type-dependent unit, such as bytes). For vCPUs, this can just be an integer. For memory, this must be provided in MB. Memory must be a multiple of 256 MB, with up to 6.5GB of memory per every vCPU.
	Amount pulumi.StringPtrInput `pulumi:"amount"`
	// Type of resource for which this commitment applies. Possible values are VCPU and MEMORY
	Type *ResourceCommitmentType `pulumi:"type"`
}

func (ResourceCommitmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceCommitment)(nil)).Elem()
}

func (i ResourceCommitmentArgs) ToResourceCommitmentOutput() ResourceCommitmentOutput {
	return i.ToResourceCommitmentOutputWithContext(context.Background())
}

func (i ResourceCommitmentArgs) ToResourceCommitmentOutputWithContext(ctx context.Context) ResourceCommitmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCommitmentOutput)
}

// ResourceCommitmentArrayInput is an input type that accepts ResourceCommitmentArray and ResourceCommitmentArrayOutput values.
// You can construct a concrete instance of `ResourceCommitmentArrayInput` via:
//
//          ResourceCommitmentArray{ ResourceCommitmentArgs{...} }
type ResourceCommitmentArrayInput interface {
	pulumi.Input

	ToResourceCommitmentArrayOutput() ResourceCommitmentArrayOutput
	ToResourceCommitmentArrayOutputWithContext(context.Context) ResourceCommitmentArrayOutput
}

type ResourceCommitmentArray []ResourceCommitmentInput

func (ResourceCommitmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceCommitment)(nil)).Elem()
}

func (i ResourceCommitmentArray) ToResourceCommitmentArrayOutput() ResourceCommitmentArrayOutput {
	return i.ToResourceCommitmentArrayOutputWithContext(context.Background())
}

func (i ResourceCommitmentArray) ToResourceCommitmentArrayOutputWithContext(ctx context.Context) ResourceCommitmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCommitmentArrayOutput)
}

// Commitment for a particular resource (a Commitment is composed of one or more of these).
type ResourceCommitmentOutput struct{ *pulumi.OutputState }

func (ResourceCommitmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceCommitment)(nil)).Elem()
}

func (o ResourceCommitmentOutput) ToResourceCommitmentOutput() ResourceCommitmentOutput {
	return o
}

func (o ResourceCommitmentOutput) ToResourceCommitmentOutputWithContext(ctx context.Context) ResourceCommitmentOutput {
	return o
}

// Name of the accelerator type resource. Applicable only when the type is ACCELERATOR.
func (o ResourceCommitmentOutput) AcceleratorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCommitment) *string { return v.AcceleratorType }).(pulumi.StringPtrOutput)
}

// The amount of the resource purchased (in a type-dependent unit, such as bytes). For vCPUs, this can just be an integer. For memory, this must be provided in MB. Memory must be a multiple of 256 MB, with up to 6.5GB of memory per every vCPU.
func (o ResourceCommitmentOutput) Amount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCommitment) *string { return v.Amount }).(pulumi.StringPtrOutput)
}

// Type of resource for which this commitment applies. Possible values are VCPU and MEMORY
func (o ResourceCommitmentOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCommitment) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ResourceCommitmentArrayOutput struct{ *pulumi.OutputState }

func (ResourceCommitmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceCommitment)(nil)).Elem()
}

func (o ResourceCommitmentArrayOutput) ToResourceCommitmentArrayOutput() ResourceCommitmentArrayOutput {
	return o
}

func (o ResourceCommitmentArrayOutput) ToResourceCommitmentArrayOutputWithContext(ctx context.Context) ResourceCommitmentArrayOutput {
	return o
}

func (o ResourceCommitmentArrayOutput) Index(i pulumi.IntInput) ResourceCommitmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceCommitment {
		return vs[0].([]ResourceCommitment)[vs[1].(int)]
	}).(ResourceCommitmentOutput)
}

// Commitment for a particular resource (a Commitment is composed of one or more of these).
type ResourceCommitmentResponse struct {
	// Name of the accelerator type resource. Applicable only when the type is ACCELERATOR.
	AcceleratorType string `pulumi:"acceleratorType"`
	// The amount of the resource purchased (in a type-dependent unit, such as bytes). For vCPUs, this can just be an integer. For memory, this must be provided in MB. Memory must be a multiple of 256 MB, with up to 6.5GB of memory per every vCPU.
	Amount string `pulumi:"amount"`
	// Type of resource for which this commitment applies. Possible values are VCPU and MEMORY
	Type string `pulumi:"type"`
}

// ResourceCommitmentResponseInput is an input type that accepts ResourceCommitmentResponseArgs and ResourceCommitmentResponseOutput values.
// You can construct a concrete instance of `ResourceCommitmentResponseInput` via:
//
//          ResourceCommitmentResponseArgs{...}
type ResourceCommitmentResponseInput interface {
	pulumi.Input

	ToResourceCommitmentResponseOutput() ResourceCommitmentResponseOutput
	ToResourceCommitmentResponseOutputWithContext(context.Context) ResourceCommitmentResponseOutput
}

// Commitment for a particular resource (a Commitment is composed of one or more of these).
type ResourceCommitmentResponseArgs struct {
	// Name of the accelerator type resource. Applicable only when the type is ACCELERATOR.
	AcceleratorType pulumi.StringInput `pulumi:"acceleratorType"`
	// The amount of the resource purchased (in a type-dependent unit, such as bytes). For vCPUs, this can just be an integer. For memory, this must be provided in MB. Memory must be a multiple of 256 MB, with up to 6.5GB of memory per every vCPU.
	Amount pulumi.StringInput `pulumi:"amount"`
	// Type of resource for which this commitment applies. Possible values are VCPU and MEMORY
	Type pulumi.StringInput `pulumi:"type"`
}

func (ResourceCommitmentResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceCommitmentResponse)(nil)).Elem()
}

func (i ResourceCommitmentResponseArgs) ToResourceCommitmentResponseOutput() ResourceCommitmentResponseOutput {
	return i.ToResourceCommitmentResponseOutputWithContext(context.Background())
}

func (i ResourceCommitmentResponseArgs) ToResourceCommitmentResponseOutputWithContext(ctx context.Context) ResourceCommitmentResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCommitmentResponseOutput)
}

// ResourceCommitmentResponseArrayInput is an input type that accepts ResourceCommitmentResponseArray and ResourceCommitmentResponseArrayOutput values.
// You can construct a concrete instance of `ResourceCommitmentResponseArrayInput` via:
//
//          ResourceCommitmentResponseArray{ ResourceCommitmentResponseArgs{...} }
type ResourceCommitmentResponseArrayInput interface {
	pulumi.Input

	ToResourceCommitmentResponseArrayOutput() ResourceCommitmentResponseArrayOutput
	ToResourceCommitmentResponseArrayOutputWithContext(context.Context) ResourceCommitmentResponseArrayOutput
}

type ResourceCommitmentResponseArray []ResourceCommitmentResponseInput

func (ResourceCommitmentResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceCommitmentResponse)(nil)).Elem()
}

func (i ResourceCommitmentResponseArray) ToResourceCommitmentResponseArrayOutput() ResourceCommitmentResponseArrayOutput {
	return i.ToResourceCommitmentResponseArrayOutputWithContext(context.Background())
}

func (i ResourceCommitmentResponseArray) ToResourceCommitmentResponseArrayOutputWithContext(ctx context.Context) ResourceCommitmentResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCommitmentResponseArrayOutput)
}

// Commitment for a particular resource (a Commitment is composed of one or more of these).
type ResourceCommitmentResponseOutput struct{ *pulumi.OutputState }

func (ResourceCommitmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceCommitmentResponse)(nil)).Elem()
}

func (o ResourceCommitmentResponseOutput) ToResourceCommitmentResponseOutput() ResourceCommitmentResponseOutput {
	return o
}

func (o ResourceCommitmentResponseOutput) ToResourceCommitmentResponseOutputWithContext(ctx context.Context) ResourceCommitmentResponseOutput {
	return o
}

// Name of the accelerator type resource. Applicable only when the type is ACCELERATOR.
func (o ResourceCommitmentResponseOutput) AcceleratorType() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceCommitmentResponse) string { return v.AcceleratorType }).(pulumi.StringOutput)
}

// The amount of the resource purchased (in a type-dependent unit, such as bytes). For vCPUs, this can just be an integer. For memory, this must be provided in MB. Memory must be a multiple of 256 MB, with up to 6.5GB of memory per every vCPU.
func (o ResourceCommitmentResponseOutput) Amount() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceCommitmentResponse) string { return v.Amount }).(pulumi.StringOutput)
}

// Type of resource for which this commitment applies. Possible values are VCPU and MEMORY
func (o ResourceCommitmentResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceCommitmentResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ResourceCommitmentResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceCommitmentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceCommitmentResponse)(nil)).Elem()
}

func (o ResourceCommitmentResponseArrayOutput) ToResourceCommitmentResponseArrayOutput() ResourceCommitmentResponseArrayOutput {
	return o
}

func (o ResourceCommitmentResponseArrayOutput) ToResourceCommitmentResponseArrayOutputWithContext(ctx context.Context) ResourceCommitmentResponseArrayOutput {
	return o
}

func (o ResourceCommitmentResponseArrayOutput) Index(i pulumi.IntInput) ResourceCommitmentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceCommitmentResponse {
		return vs[0].([]ResourceCommitmentResponse)[vs[1].(int)]
	}).(ResourceCommitmentResponseOutput)
}

// Time window specified for daily operations.
type ResourcePolicyDailyCycle struct {
	// Defines a schedule with units measured in months. The value determines how many months pass between the start of each cycle.
	DaysInCycle *int `pulumi:"daysInCycle"`
	// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
	StartTime *string `pulumi:"startTime"`
}

// ResourcePolicyDailyCycleInput is an input type that accepts ResourcePolicyDailyCycleArgs and ResourcePolicyDailyCycleOutput values.
// You can construct a concrete instance of `ResourcePolicyDailyCycleInput` via:
//
//          ResourcePolicyDailyCycleArgs{...}
type ResourcePolicyDailyCycleInput interface {
	pulumi.Input

	ToResourcePolicyDailyCycleOutput() ResourcePolicyDailyCycleOutput
	ToResourcePolicyDailyCycleOutputWithContext(context.Context) ResourcePolicyDailyCycleOutput
}

// Time window specified for daily operations.
type ResourcePolicyDailyCycleArgs struct {
	// Defines a schedule with units measured in months. The value determines how many months pass between the start of each cycle.
	DaysInCycle pulumi.IntPtrInput `pulumi:"daysInCycle"`
	// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (ResourcePolicyDailyCycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyDailyCycle)(nil)).Elem()
}

func (i ResourcePolicyDailyCycleArgs) ToResourcePolicyDailyCycleOutput() ResourcePolicyDailyCycleOutput {
	return i.ToResourcePolicyDailyCycleOutputWithContext(context.Background())
}

func (i ResourcePolicyDailyCycleArgs) ToResourcePolicyDailyCycleOutputWithContext(ctx context.Context) ResourcePolicyDailyCycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyDailyCycleOutput)
}

func (i ResourcePolicyDailyCycleArgs) ToResourcePolicyDailyCyclePtrOutput() ResourcePolicyDailyCyclePtrOutput {
	return i.ToResourcePolicyDailyCyclePtrOutputWithContext(context.Background())
}

func (i ResourcePolicyDailyCycleArgs) ToResourcePolicyDailyCyclePtrOutputWithContext(ctx context.Context) ResourcePolicyDailyCyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyDailyCycleOutput).ToResourcePolicyDailyCyclePtrOutputWithContext(ctx)
}

// ResourcePolicyDailyCyclePtrInput is an input type that accepts ResourcePolicyDailyCycleArgs, ResourcePolicyDailyCyclePtr and ResourcePolicyDailyCyclePtrOutput values.
// You can construct a concrete instance of `ResourcePolicyDailyCyclePtrInput` via:
//
//          ResourcePolicyDailyCycleArgs{...}
//
//  or:
//
//          nil
type ResourcePolicyDailyCyclePtrInput interface {
	pulumi.Input

	ToResourcePolicyDailyCyclePtrOutput() ResourcePolicyDailyCyclePtrOutput
	ToResourcePolicyDailyCyclePtrOutputWithContext(context.Context) ResourcePolicyDailyCyclePtrOutput
}

type resourcePolicyDailyCyclePtrType ResourcePolicyDailyCycleArgs

func ResourcePolicyDailyCyclePtr(v *ResourcePolicyDailyCycleArgs) ResourcePolicyDailyCyclePtrInput {
	return (*resourcePolicyDailyCyclePtrType)(v)
}

func (*resourcePolicyDailyCyclePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyDailyCycle)(nil)).Elem()
}

func (i *resourcePolicyDailyCyclePtrType) ToResourcePolicyDailyCyclePtrOutput() ResourcePolicyDailyCyclePtrOutput {
	return i.ToResourcePolicyDailyCyclePtrOutputWithContext(context.Background())
}

func (i *resourcePolicyDailyCyclePtrType) ToResourcePolicyDailyCyclePtrOutputWithContext(ctx context.Context) ResourcePolicyDailyCyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyDailyCyclePtrOutput)
}

// Time window specified for daily operations.
type ResourcePolicyDailyCycleOutput struct{ *pulumi.OutputState }

func (ResourcePolicyDailyCycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyDailyCycle)(nil)).Elem()
}

func (o ResourcePolicyDailyCycleOutput) ToResourcePolicyDailyCycleOutput() ResourcePolicyDailyCycleOutput {
	return o
}

func (o ResourcePolicyDailyCycleOutput) ToResourcePolicyDailyCycleOutputWithContext(ctx context.Context) ResourcePolicyDailyCycleOutput {
	return o
}

func (o ResourcePolicyDailyCycleOutput) ToResourcePolicyDailyCyclePtrOutput() ResourcePolicyDailyCyclePtrOutput {
	return o.ToResourcePolicyDailyCyclePtrOutputWithContext(context.Background())
}

func (o ResourcePolicyDailyCycleOutput) ToResourcePolicyDailyCyclePtrOutputWithContext(ctx context.Context) ResourcePolicyDailyCyclePtrOutput {
	return o.ApplyT(func(v ResourcePolicyDailyCycle) *ResourcePolicyDailyCycle {
		return &v
	}).(ResourcePolicyDailyCyclePtrOutput)
}

// Defines a schedule with units measured in months. The value determines how many months pass between the start of each cycle.
func (o ResourcePolicyDailyCycleOutput) DaysInCycle() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourcePolicyDailyCycle) *int { return v.DaysInCycle }).(pulumi.IntPtrOutput)
}

// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
func (o ResourcePolicyDailyCycleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePolicyDailyCycle) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type ResourcePolicyDailyCyclePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicyDailyCyclePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyDailyCycle)(nil)).Elem()
}

func (o ResourcePolicyDailyCyclePtrOutput) ToResourcePolicyDailyCyclePtrOutput() ResourcePolicyDailyCyclePtrOutput {
	return o
}

func (o ResourcePolicyDailyCyclePtrOutput) ToResourcePolicyDailyCyclePtrOutputWithContext(ctx context.Context) ResourcePolicyDailyCyclePtrOutput {
	return o
}

func (o ResourcePolicyDailyCyclePtrOutput) Elem() ResourcePolicyDailyCycleOutput {
	return o.ApplyT(func(v *ResourcePolicyDailyCycle) ResourcePolicyDailyCycle { return *v }).(ResourcePolicyDailyCycleOutput)
}

// Defines a schedule with units measured in months. The value determines how many months pass between the start of each cycle.
func (o ResourcePolicyDailyCyclePtrOutput) DaysInCycle() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyDailyCycle) *int {
		if v == nil {
			return nil
		}
		return v.DaysInCycle
	}).(pulumi.IntPtrOutput)
}

// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
func (o ResourcePolicyDailyCyclePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyDailyCycle) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Time window specified for daily operations.
type ResourcePolicyDailyCycleResponse struct {
	// Defines a schedule with units measured in months. The value determines how many months pass between the start of each cycle.
	DaysInCycle int `pulumi:"daysInCycle"`
	// [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario.
	Duration string `pulumi:"duration"`
	// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
	StartTime string `pulumi:"startTime"`
}

// ResourcePolicyDailyCycleResponseInput is an input type that accepts ResourcePolicyDailyCycleResponseArgs and ResourcePolicyDailyCycleResponseOutput values.
// You can construct a concrete instance of `ResourcePolicyDailyCycleResponseInput` via:
//
//          ResourcePolicyDailyCycleResponseArgs{...}
type ResourcePolicyDailyCycleResponseInput interface {
	pulumi.Input

	ToResourcePolicyDailyCycleResponseOutput() ResourcePolicyDailyCycleResponseOutput
	ToResourcePolicyDailyCycleResponseOutputWithContext(context.Context) ResourcePolicyDailyCycleResponseOutput
}

// Time window specified for daily operations.
type ResourcePolicyDailyCycleResponseArgs struct {
	// Defines a schedule with units measured in months. The value determines how many months pass between the start of each cycle.
	DaysInCycle pulumi.IntInput `pulumi:"daysInCycle"`
	// [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario.
	Duration pulumi.StringInput `pulumi:"duration"`
	// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (ResourcePolicyDailyCycleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyDailyCycleResponse)(nil)).Elem()
}

func (i ResourcePolicyDailyCycleResponseArgs) ToResourcePolicyDailyCycleResponseOutput() ResourcePolicyDailyCycleResponseOutput {
	return i.ToResourcePolicyDailyCycleResponseOutputWithContext(context.Background())
}

func (i ResourcePolicyDailyCycleResponseArgs) ToResourcePolicyDailyCycleResponseOutputWithContext(ctx context.Context) ResourcePolicyDailyCycleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyDailyCycleResponseOutput)
}

func (i ResourcePolicyDailyCycleResponseArgs) ToResourcePolicyDailyCycleResponsePtrOutput() ResourcePolicyDailyCycleResponsePtrOutput {
	return i.ToResourcePolicyDailyCycleResponsePtrOutputWithContext(context.Background())
}

func (i ResourcePolicyDailyCycleResponseArgs) ToResourcePolicyDailyCycleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyDailyCycleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyDailyCycleResponseOutput).ToResourcePolicyDailyCycleResponsePtrOutputWithContext(ctx)
}

// ResourcePolicyDailyCycleResponsePtrInput is an input type that accepts ResourcePolicyDailyCycleResponseArgs, ResourcePolicyDailyCycleResponsePtr and ResourcePolicyDailyCycleResponsePtrOutput values.
// You can construct a concrete instance of `ResourcePolicyDailyCycleResponsePtrInput` via:
//
//          ResourcePolicyDailyCycleResponseArgs{...}
//
//  or:
//
//          nil
type ResourcePolicyDailyCycleResponsePtrInput interface {
	pulumi.Input

	ToResourcePolicyDailyCycleResponsePtrOutput() ResourcePolicyDailyCycleResponsePtrOutput
	ToResourcePolicyDailyCycleResponsePtrOutputWithContext(context.Context) ResourcePolicyDailyCycleResponsePtrOutput
}

type resourcePolicyDailyCycleResponsePtrType ResourcePolicyDailyCycleResponseArgs

func ResourcePolicyDailyCycleResponsePtr(v *ResourcePolicyDailyCycleResponseArgs) ResourcePolicyDailyCycleResponsePtrInput {
	return (*resourcePolicyDailyCycleResponsePtrType)(v)
}

func (*resourcePolicyDailyCycleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyDailyCycleResponse)(nil)).Elem()
}

func (i *resourcePolicyDailyCycleResponsePtrType) ToResourcePolicyDailyCycleResponsePtrOutput() ResourcePolicyDailyCycleResponsePtrOutput {
	return i.ToResourcePolicyDailyCycleResponsePtrOutputWithContext(context.Background())
}

func (i *resourcePolicyDailyCycleResponsePtrType) ToResourcePolicyDailyCycleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyDailyCycleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyDailyCycleResponsePtrOutput)
}

// Time window specified for daily operations.
type ResourcePolicyDailyCycleResponseOutput struct{ *pulumi.OutputState }

func (ResourcePolicyDailyCycleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyDailyCycleResponse)(nil)).Elem()
}

func (o ResourcePolicyDailyCycleResponseOutput) ToResourcePolicyDailyCycleResponseOutput() ResourcePolicyDailyCycleResponseOutput {
	return o
}

func (o ResourcePolicyDailyCycleResponseOutput) ToResourcePolicyDailyCycleResponseOutputWithContext(ctx context.Context) ResourcePolicyDailyCycleResponseOutput {
	return o
}

func (o ResourcePolicyDailyCycleResponseOutput) ToResourcePolicyDailyCycleResponsePtrOutput() ResourcePolicyDailyCycleResponsePtrOutput {
	return o.ToResourcePolicyDailyCycleResponsePtrOutputWithContext(context.Background())
}

func (o ResourcePolicyDailyCycleResponseOutput) ToResourcePolicyDailyCycleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyDailyCycleResponsePtrOutput {
	return o.ApplyT(func(v ResourcePolicyDailyCycleResponse) *ResourcePolicyDailyCycleResponse {
		return &v
	}).(ResourcePolicyDailyCycleResponsePtrOutput)
}

// Defines a schedule with units measured in months. The value determines how many months pass between the start of each cycle.
func (o ResourcePolicyDailyCycleResponseOutput) DaysInCycle() pulumi.IntOutput {
	return o.ApplyT(func(v ResourcePolicyDailyCycleResponse) int { return v.DaysInCycle }).(pulumi.IntOutput)
}

// [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario.
func (o ResourcePolicyDailyCycleResponseOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicyDailyCycleResponse) string { return v.Duration }).(pulumi.StringOutput)
}

// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
func (o ResourcePolicyDailyCycleResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicyDailyCycleResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

type ResourcePolicyDailyCycleResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicyDailyCycleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyDailyCycleResponse)(nil)).Elem()
}

func (o ResourcePolicyDailyCycleResponsePtrOutput) ToResourcePolicyDailyCycleResponsePtrOutput() ResourcePolicyDailyCycleResponsePtrOutput {
	return o
}

func (o ResourcePolicyDailyCycleResponsePtrOutput) ToResourcePolicyDailyCycleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyDailyCycleResponsePtrOutput {
	return o
}

func (o ResourcePolicyDailyCycleResponsePtrOutput) Elem() ResourcePolicyDailyCycleResponseOutput {
	return o.ApplyT(func(v *ResourcePolicyDailyCycleResponse) ResourcePolicyDailyCycleResponse { return *v }).(ResourcePolicyDailyCycleResponseOutput)
}

// Defines a schedule with units measured in months. The value determines how many months pass between the start of each cycle.
func (o ResourcePolicyDailyCycleResponsePtrOutput) DaysInCycle() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyDailyCycleResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DaysInCycle
	}).(pulumi.IntPtrOutput)
}

// [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario.
func (o ResourcePolicyDailyCycleResponsePtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyDailyCycleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.StringPtrOutput)
}

// Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
func (o ResourcePolicyDailyCycleResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyDailyCycleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality
type ResourcePolicyGroupPlacementPolicy struct {
	// The number of availability domains instances will be spread across. If two instances are in different availability domain, they will not be put in the same low latency network
	AvailabilityDomainCount *int `pulumi:"availabilityDomainCount"`
	// Specifies network collocation
	Collocation *string `pulumi:"collocation"`
	// Number of vms in this placement group
	VmCount *int `pulumi:"vmCount"`
}

// ResourcePolicyGroupPlacementPolicyInput is an input type that accepts ResourcePolicyGroupPlacementPolicyArgs and ResourcePolicyGroupPlacementPolicyOutput values.
// You can construct a concrete instance of `ResourcePolicyGroupPlacementPolicyInput` via:
//
//          ResourcePolicyGroupPlacementPolicyArgs{...}
type ResourcePolicyGroupPlacementPolicyInput interface {
	pulumi.Input

	ToResourcePolicyGroupPlacementPolicyOutput() ResourcePolicyGroupPlacementPolicyOutput
	ToResourcePolicyGroupPlacementPolicyOutputWithContext(context.Context) ResourcePolicyGroupPlacementPolicyOutput
}

// A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality
type ResourcePolicyGroupPlacementPolicyArgs struct {
	// The number of availability domains instances will be spread across. If two instances are in different availability domain, they will not be put in the same low latency network
	AvailabilityDomainCount pulumi.IntPtrInput `pulumi:"availabilityDomainCount"`
	// Specifies network collocation
	Collocation *ResourcePolicyGroupPlacementPolicyCollocation `pulumi:"collocation"`
	// Number of vms in this placement group
	VmCount pulumi.IntPtrInput `pulumi:"vmCount"`
}

func (ResourcePolicyGroupPlacementPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyGroupPlacementPolicy)(nil)).Elem()
}

func (i ResourcePolicyGroupPlacementPolicyArgs) ToResourcePolicyGroupPlacementPolicyOutput() ResourcePolicyGroupPlacementPolicyOutput {
	return i.ToResourcePolicyGroupPlacementPolicyOutputWithContext(context.Background())
}

func (i ResourcePolicyGroupPlacementPolicyArgs) ToResourcePolicyGroupPlacementPolicyOutputWithContext(ctx context.Context) ResourcePolicyGroupPlacementPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyGroupPlacementPolicyOutput)
}

func (i ResourcePolicyGroupPlacementPolicyArgs) ToResourcePolicyGroupPlacementPolicyPtrOutput() ResourcePolicyGroupPlacementPolicyPtrOutput {
	return i.ToResourcePolicyGroupPlacementPolicyPtrOutputWithContext(context.Background())
}

func (i ResourcePolicyGroupPlacementPolicyArgs) ToResourcePolicyGroupPlacementPolicyPtrOutputWithContext(ctx context.Context) ResourcePolicyGroupPlacementPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyGroupPlacementPolicyOutput).ToResourcePolicyGroupPlacementPolicyPtrOutputWithContext(ctx)
}

// ResourcePolicyGroupPlacementPolicyPtrInput is an input type that accepts ResourcePolicyGroupPlacementPolicyArgs, ResourcePolicyGroupPlacementPolicyPtr and ResourcePolicyGroupPlacementPolicyPtrOutput values.
// You can construct a concrete instance of `ResourcePolicyGroupPlacementPolicyPtrInput` via:
//
//          ResourcePolicyGroupPlacementPolicyArgs{...}
//
//  or:
//
//          nil
type ResourcePolicyGroupPlacementPolicyPtrInput interface {
	pulumi.Input

	ToResourcePolicyGroupPlacementPolicyPtrOutput() ResourcePolicyGroupPlacementPolicyPtrOutput
	ToResourcePolicyGroupPlacementPolicyPtrOutputWithContext(context.Context) ResourcePolicyGroupPlacementPolicyPtrOutput
}

type resourcePolicyGroupPlacementPolicyPtrType ResourcePolicyGroupPlacementPolicyArgs

func ResourcePolicyGroupPlacementPolicyPtr(v *ResourcePolicyGroupPlacementPolicyArgs) ResourcePolicyGroupPlacementPolicyPtrInput {
	return (*resourcePolicyGroupPlacementPolicyPtrType)(v)
}

func (*resourcePolicyGroupPlacementPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyGroupPlacementPolicy)(nil)).Elem()
}

func (i *resourcePolicyGroupPlacementPolicyPtrType) ToResourcePolicyGroupPlacementPolicyPtrOutput() ResourcePolicyGroupPlacementPolicyPtrOutput {
	return i.ToResourcePolicyGroupPlacementPolicyPtrOutputWithContext(context.Background())
}

func (i *resourcePolicyGroupPlacementPolicyPtrType) ToResourcePolicyGroupPlacementPolicyPtrOutputWithContext(ctx context.Context) ResourcePolicyGroupPlacementPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyGroupPlacementPolicyPtrOutput)
}

// A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality
type ResourcePolicyGroupPlacementPolicyOutput struct{ *pulumi.OutputState }

func (ResourcePolicyGroupPlacementPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyGroupPlacementPolicy)(nil)).Elem()
}

func (o ResourcePolicyGroupPlacementPolicyOutput) ToResourcePolicyGroupPlacementPolicyOutput() ResourcePolicyGroupPlacementPolicyOutput {
	return o
}

func (o ResourcePolicyGroupPlacementPolicyOutput) ToResourcePolicyGroupPlacementPolicyOutputWithContext(ctx context.Context) ResourcePolicyGroupPlacementPolicyOutput {
	return o
}

func (o ResourcePolicyGroupPlacementPolicyOutput) ToResourcePolicyGroupPlacementPolicyPtrOutput() ResourcePolicyGroupPlacementPolicyPtrOutput {
	return o.ToResourcePolicyGroupPlacementPolicyPtrOutputWithContext(context.Background())
}

func (o ResourcePolicyGroupPlacementPolicyOutput) ToResourcePolicyGroupPlacementPolicyPtrOutputWithContext(ctx context.Context) ResourcePolicyGroupPlacementPolicyPtrOutput {
	return o.ApplyT(func(v ResourcePolicyGroupPlacementPolicy) *ResourcePolicyGroupPlacementPolicy {
		return &v
	}).(ResourcePolicyGroupPlacementPolicyPtrOutput)
}

// The number of availability domains instances will be spread across. If two instances are in different availability domain, they will not be put in the same low latency network
func (o ResourcePolicyGroupPlacementPolicyOutput) AvailabilityDomainCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourcePolicyGroupPlacementPolicy) *int { return v.AvailabilityDomainCount }).(pulumi.IntPtrOutput)
}

// Specifies network collocation
func (o ResourcePolicyGroupPlacementPolicyOutput) Collocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePolicyGroupPlacementPolicy) *string { return v.Collocation }).(pulumi.StringPtrOutput)
}

// Number of vms in this placement group
func (o ResourcePolicyGroupPlacementPolicyOutput) VmCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourcePolicyGroupPlacementPolicy) *int { return v.VmCount }).(pulumi.IntPtrOutput)
}

type ResourcePolicyGroupPlacementPolicyPtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicyGroupPlacementPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyGroupPlacementPolicy)(nil)).Elem()
}

func (o ResourcePolicyGroupPlacementPolicyPtrOutput) ToResourcePolicyGroupPlacementPolicyPtrOutput() ResourcePolicyGroupPlacementPolicyPtrOutput {
	return o
}

func (o ResourcePolicyGroupPlacementPolicyPtrOutput) ToResourcePolicyGroupPlacementPolicyPtrOutputWithContext(ctx context.Context) ResourcePolicyGroupPlacementPolicyPtrOutput {
	return o
}

func (o ResourcePolicyGroupPlacementPolicyPtrOutput) Elem() ResourcePolicyGroupPlacementPolicyOutput {
	return o.ApplyT(func(v *ResourcePolicyGroupPlacementPolicy) ResourcePolicyGroupPlacementPolicy { return *v }).(ResourcePolicyGroupPlacementPolicyOutput)
}

// The number of availability domains instances will be spread across. If two instances are in different availability domain, they will not be put in the same low latency network
func (o ResourcePolicyGroupPlacementPolicyPtrOutput) AvailabilityDomainCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyGroupPlacementPolicy) *int {
		if v == nil {
			return nil
		}
		return v.AvailabilityDomainCount
	}).(pulumi.IntPtrOutput)
}

// Specifies network collocation
func (o ResourcePolicyGroupPlacementPolicyPtrOutput) Collocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyGroupPlacementPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Collocation
	}).(pulumi.StringPtrOutput)
}

// Number of vms in this placement group
func (o ResourcePolicyGroupPlacementPolicyPtrOutput) VmCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyGroupPlacementPolicy) *int {
		if v == nil {
			return nil
		}
		return v.VmCount
	}).(pulumi.IntPtrOutput)
}

// A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality
type ResourcePolicyGroupPlacementPolicyResponse struct {
	// The number of availability domains instances will be spread across. If two instances are in different availability domain, they will not be put in the same low latency network
	AvailabilityDomainCount int `pulumi:"availabilityDomainCount"`
	// Specifies network collocation
	Collocation string `pulumi:"collocation"`
	// Number of vms in this placement group
	VmCount int `pulumi:"vmCount"`
}

// ResourcePolicyGroupPlacementPolicyResponseInput is an input type that accepts ResourcePolicyGroupPlacementPolicyResponseArgs and ResourcePolicyGroupPlacementPolicyResponseOutput values.
// You can construct a concrete instance of `ResourcePolicyGroupPlacementPolicyResponseInput` via:
//
//          ResourcePolicyGroupPlacementPolicyResponseArgs{...}
type ResourcePolicyGroupPlacementPolicyResponseInput interface {
	pulumi.Input

	ToResourcePolicyGroupPlacementPolicyResponseOutput() ResourcePolicyGroupPlacementPolicyResponseOutput
	ToResourcePolicyGroupPlacementPolicyResponseOutputWithContext(context.Context) ResourcePolicyGroupPlacementPolicyResponseOutput
}

// A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality
type ResourcePolicyGroupPlacementPolicyResponseArgs struct {
	// The number of availability domains instances will be spread across. If two instances are in different availability domain, they will not be put in the same low latency network
	AvailabilityDomainCount pulumi.IntInput `pulumi:"availabilityDomainCount"`
	// Specifies network collocation
	Collocation pulumi.StringInput `pulumi:"collocation"`
	// Number of vms in this placement group
	VmCount pulumi.IntInput `pulumi:"vmCount"`
}

func (ResourcePolicyGroupPlacementPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyGroupPlacementPolicyResponse)(nil)).Elem()
}

func (i ResourcePolicyGroupPlacementPolicyResponseArgs) ToResourcePolicyGroupPlacementPolicyResponseOutput() ResourcePolicyGroupPlacementPolicyResponseOutput {
	return i.ToResourcePolicyGroupPlacementPolicyResponseOutputWithContext(context.Background())
}

func (i ResourcePolicyGroupPlacementPolicyResponseArgs) ToResourcePolicyGroupPlacementPolicyResponseOutputWithContext(ctx context.Context) ResourcePolicyGroupPlacementPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyGroupPlacementPolicyResponseOutput)
}

func (i ResourcePolicyGroupPlacementPolicyResponseArgs) ToResourcePolicyGroupPlacementPolicyResponsePtrOutput() ResourcePolicyGroupPlacementPolicyResponsePtrOutput {
	return i.ToResourcePolicyGroupPlacementPolicyResponsePtrOutputWithContext(context.Background())
}

func (i ResourcePolicyGroupPlacementPolicyResponseArgs) ToResourcePolicyGroupPlacementPolicyResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyGroupPlacementPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyGroupPlacementPolicyResponseOutput).ToResourcePolicyGroupPlacementPolicyResponsePtrOutputWithContext(ctx)
}

// ResourcePolicyGroupPlacementPolicyResponsePtrInput is an input type that accepts ResourcePolicyGroupPlacementPolicyResponseArgs, ResourcePolicyGroupPlacementPolicyResponsePtr and ResourcePolicyGroupPlacementPolicyResponsePtrOutput values.
// You can construct a concrete instance of `ResourcePolicyGroupPlacementPolicyResponsePtrInput` via:
//
//          ResourcePolicyGroupPlacementPolicyResponseArgs{...}
//
//  or:
//
//          nil
type ResourcePolicyGroupPlacementPolicyResponsePtrInput interface {
	pulumi.Input

	ToResourcePolicyGroupPlacementPolicyResponsePtrOutput() ResourcePolicyGroupPlacementPolicyResponsePtrOutput
	ToResourcePolicyGroupPlacementPolicyResponsePtrOutputWithContext(context.Context) ResourcePolicyGroupPlacementPolicyResponsePtrOutput
}

type resourcePolicyGroupPlacementPolicyResponsePtrType ResourcePolicyGroupPlacementPolicyResponseArgs

func ResourcePolicyGroupPlacementPolicyResponsePtr(v *ResourcePolicyGroupPlacementPolicyResponseArgs) ResourcePolicyGroupPlacementPolicyResponsePtrInput {
	return (*resourcePolicyGroupPlacementPolicyResponsePtrType)(v)
}

func (*resourcePolicyGroupPlacementPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyGroupPlacementPolicyResponse)(nil)).Elem()
}

func (i *resourcePolicyGroupPlacementPolicyResponsePtrType) ToResourcePolicyGroupPlacementPolicyResponsePtrOutput() ResourcePolicyGroupPlacementPolicyResponsePtrOutput {
	return i.ToResourcePolicyGroupPlacementPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *resourcePolicyGroupPlacementPolicyResponsePtrType) ToResourcePolicyGroupPlacementPolicyResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyGroupPlacementPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyGroupPlacementPolicyResponsePtrOutput)
}

// A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality
type ResourcePolicyGroupPlacementPolicyResponseOutput struct{ *pulumi.OutputState }

func (ResourcePolicyGroupPlacementPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyGroupPlacementPolicyResponse)(nil)).Elem()
}

func (o ResourcePolicyGroupPlacementPolicyResponseOutput) ToResourcePolicyGroupPlacementPolicyResponseOutput() ResourcePolicyGroupPlacementPolicyResponseOutput {
	return o
}

func (o ResourcePolicyGroupPlacementPolicyResponseOutput) ToResourcePolicyGroupPlacementPolicyResponseOutputWithContext(ctx context.Context) ResourcePolicyGroupPlacementPolicyResponseOutput {
	return o
}

func (o ResourcePolicyGroupPlacementPolicyResponseOutput) ToResourcePolicyGroupPlacementPolicyResponsePtrOutput() ResourcePolicyGroupPlacementPolicyResponsePtrOutput {
	return o.ToResourcePolicyGroupPlacementPolicyResponsePtrOutputWithContext(context.Background())
}

func (o ResourcePolicyGroupPlacementPolicyResponseOutput) ToResourcePolicyGroupPlacementPolicyResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyGroupPlacementPolicyResponsePtrOutput {
	return o.ApplyT(func(v ResourcePolicyGroupPlacementPolicyResponse) *ResourcePolicyGroupPlacementPolicyResponse {
		return &v
	}).(ResourcePolicyGroupPlacementPolicyResponsePtrOutput)
}

// The number of availability domains instances will be spread across. If two instances are in different availability domain, they will not be put in the same low latency network
func (o ResourcePolicyGroupPlacementPolicyResponseOutput) AvailabilityDomainCount() pulumi.IntOutput {
	return o.ApplyT(func(v ResourcePolicyGroupPlacementPolicyResponse) int { return v.AvailabilityDomainCount }).(pulumi.IntOutput)
}

// Specifies network collocation
func (o ResourcePolicyGroupPlacementPolicyResponseOutput) Collocation() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicyGroupPlacementPolicyResponse) string { return v.Collocation }).(pulumi.StringOutput)
}

// Number of vms in this placement group
func (o ResourcePolicyGroupPlacementPolicyResponseOutput) VmCount() pulumi.IntOutput {
	return o.ApplyT(func(v ResourcePolicyGroupPlacementPolicyResponse) int { return v.VmCount }).(pulumi.IntOutput)
}

type ResourcePolicyGroupPlacementPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicyGroupPlacementPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyGroupPlacementPolicyResponse)(nil)).Elem()
}

func (o ResourcePolicyGroupPlacementPolicyResponsePtrOutput) ToResourcePolicyGroupPlacementPolicyResponsePtrOutput() ResourcePolicyGroupPlacementPolicyResponsePtrOutput {
	return o
}

func (o ResourcePolicyGroupPlacementPolicyResponsePtrOutput) ToResourcePolicyGroupPlacementPolicyResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyGroupPlacementPolicyResponsePtrOutput {
	return o
}

func (o ResourcePolicyGroupPlacementPolicyResponsePtrOutput) Elem() ResourcePolicyGroupPlacementPolicyResponseOutput {
	return o.ApplyT(func(v *ResourcePolicyGroupPlacementPolicyResponse) ResourcePolicyGroupPlacementPolicyResponse {
		return *v
	}).(ResourcePolicyGroupPlacementPolicyResponseOutput)
}

// The number of availability domains instances will be spread across. If two instances are in different availability domain, they will not be put in the same low latency network
func (o ResourcePolicyGroupPlacementPolicyResponsePtrOutput) AvailabilityDomainCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyGroupPlacementPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.AvailabilityDomainCount
	}).(pulumi.IntPtrOutput)
}

// Specifies network collocation
func (o ResourcePolicyGroupPlacementPolicyResponsePtrOutput) Collocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyGroupPlacementPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Collocation
	}).(pulumi.StringPtrOutput)
}

// Number of vms in this placement group
func (o ResourcePolicyGroupPlacementPolicyResponsePtrOutput) VmCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyGroupPlacementPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.VmCount
	}).(pulumi.IntPtrOutput)
}

// Time window specified for hourly operations.
type ResourcePolicyHourlyCycle struct {
	// Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
	HoursInCycle *int `pulumi:"hoursInCycle"`
	// Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
	StartTime *string `pulumi:"startTime"`
}

// ResourcePolicyHourlyCycleInput is an input type that accepts ResourcePolicyHourlyCycleArgs and ResourcePolicyHourlyCycleOutput values.
// You can construct a concrete instance of `ResourcePolicyHourlyCycleInput` via:
//
//          ResourcePolicyHourlyCycleArgs{...}
type ResourcePolicyHourlyCycleInput interface {
	pulumi.Input

	ToResourcePolicyHourlyCycleOutput() ResourcePolicyHourlyCycleOutput
	ToResourcePolicyHourlyCycleOutputWithContext(context.Context) ResourcePolicyHourlyCycleOutput
}

// Time window specified for hourly operations.
type ResourcePolicyHourlyCycleArgs struct {
	// Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
	HoursInCycle pulumi.IntPtrInput `pulumi:"hoursInCycle"`
	// Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (ResourcePolicyHourlyCycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyHourlyCycle)(nil)).Elem()
}

func (i ResourcePolicyHourlyCycleArgs) ToResourcePolicyHourlyCycleOutput() ResourcePolicyHourlyCycleOutput {
	return i.ToResourcePolicyHourlyCycleOutputWithContext(context.Background())
}

func (i ResourcePolicyHourlyCycleArgs) ToResourcePolicyHourlyCycleOutputWithContext(ctx context.Context) ResourcePolicyHourlyCycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyHourlyCycleOutput)
}

func (i ResourcePolicyHourlyCycleArgs) ToResourcePolicyHourlyCyclePtrOutput() ResourcePolicyHourlyCyclePtrOutput {
	return i.ToResourcePolicyHourlyCyclePtrOutputWithContext(context.Background())
}

func (i ResourcePolicyHourlyCycleArgs) ToResourcePolicyHourlyCyclePtrOutputWithContext(ctx context.Context) ResourcePolicyHourlyCyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyHourlyCycleOutput).ToResourcePolicyHourlyCyclePtrOutputWithContext(ctx)
}

// ResourcePolicyHourlyCyclePtrInput is an input type that accepts ResourcePolicyHourlyCycleArgs, ResourcePolicyHourlyCyclePtr and ResourcePolicyHourlyCyclePtrOutput values.
// You can construct a concrete instance of `ResourcePolicyHourlyCyclePtrInput` via:
//
//          ResourcePolicyHourlyCycleArgs{...}
//
//  or:
//
//          nil
type ResourcePolicyHourlyCyclePtrInput interface {
	pulumi.Input

	ToResourcePolicyHourlyCyclePtrOutput() ResourcePolicyHourlyCyclePtrOutput
	ToResourcePolicyHourlyCyclePtrOutputWithContext(context.Context) ResourcePolicyHourlyCyclePtrOutput
}

type resourcePolicyHourlyCyclePtrType ResourcePolicyHourlyCycleArgs

func ResourcePolicyHourlyCyclePtr(v *ResourcePolicyHourlyCycleArgs) ResourcePolicyHourlyCyclePtrInput {
	return (*resourcePolicyHourlyCyclePtrType)(v)
}

func (*resourcePolicyHourlyCyclePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyHourlyCycle)(nil)).Elem()
}

func (i *resourcePolicyHourlyCyclePtrType) ToResourcePolicyHourlyCyclePtrOutput() ResourcePolicyHourlyCyclePtrOutput {
	return i.ToResourcePolicyHourlyCyclePtrOutputWithContext(context.Background())
}

func (i *resourcePolicyHourlyCyclePtrType) ToResourcePolicyHourlyCyclePtrOutputWithContext(ctx context.Context) ResourcePolicyHourlyCyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyHourlyCyclePtrOutput)
}

// Time window specified for hourly operations.
type ResourcePolicyHourlyCycleOutput struct{ *pulumi.OutputState }

func (ResourcePolicyHourlyCycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyHourlyCycle)(nil)).Elem()
}

func (o ResourcePolicyHourlyCycleOutput) ToResourcePolicyHourlyCycleOutput() ResourcePolicyHourlyCycleOutput {
	return o
}

func (o ResourcePolicyHourlyCycleOutput) ToResourcePolicyHourlyCycleOutputWithContext(ctx context.Context) ResourcePolicyHourlyCycleOutput {
	return o
}

func (o ResourcePolicyHourlyCycleOutput) ToResourcePolicyHourlyCyclePtrOutput() ResourcePolicyHourlyCyclePtrOutput {
	return o.ToResourcePolicyHourlyCyclePtrOutputWithContext(context.Background())
}

func (o ResourcePolicyHourlyCycleOutput) ToResourcePolicyHourlyCyclePtrOutputWithContext(ctx context.Context) ResourcePolicyHourlyCyclePtrOutput {
	return o.ApplyT(func(v ResourcePolicyHourlyCycle) *ResourcePolicyHourlyCycle {
		return &v
	}).(ResourcePolicyHourlyCyclePtrOutput)
}

// Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
func (o ResourcePolicyHourlyCycleOutput) HoursInCycle() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourcePolicyHourlyCycle) *int { return v.HoursInCycle }).(pulumi.IntPtrOutput)
}

// Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
func (o ResourcePolicyHourlyCycleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePolicyHourlyCycle) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type ResourcePolicyHourlyCyclePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicyHourlyCyclePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyHourlyCycle)(nil)).Elem()
}

func (o ResourcePolicyHourlyCyclePtrOutput) ToResourcePolicyHourlyCyclePtrOutput() ResourcePolicyHourlyCyclePtrOutput {
	return o
}

func (o ResourcePolicyHourlyCyclePtrOutput) ToResourcePolicyHourlyCyclePtrOutputWithContext(ctx context.Context) ResourcePolicyHourlyCyclePtrOutput {
	return o
}

func (o ResourcePolicyHourlyCyclePtrOutput) Elem() ResourcePolicyHourlyCycleOutput {
	return o.ApplyT(func(v *ResourcePolicyHourlyCycle) ResourcePolicyHourlyCycle { return *v }).(ResourcePolicyHourlyCycleOutput)
}

// Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
func (o ResourcePolicyHourlyCyclePtrOutput) HoursInCycle() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyHourlyCycle) *int {
		if v == nil {
			return nil
		}
		return v.HoursInCycle
	}).(pulumi.IntPtrOutput)
}

// Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
func (o ResourcePolicyHourlyCyclePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyHourlyCycle) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Time window specified for hourly operations.
type ResourcePolicyHourlyCycleResponse struct {
	// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
	Duration string `pulumi:"duration"`
	// Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
	HoursInCycle int `pulumi:"hoursInCycle"`
	// Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
	StartTime string `pulumi:"startTime"`
}

// ResourcePolicyHourlyCycleResponseInput is an input type that accepts ResourcePolicyHourlyCycleResponseArgs and ResourcePolicyHourlyCycleResponseOutput values.
// You can construct a concrete instance of `ResourcePolicyHourlyCycleResponseInput` via:
//
//          ResourcePolicyHourlyCycleResponseArgs{...}
type ResourcePolicyHourlyCycleResponseInput interface {
	pulumi.Input

	ToResourcePolicyHourlyCycleResponseOutput() ResourcePolicyHourlyCycleResponseOutput
	ToResourcePolicyHourlyCycleResponseOutputWithContext(context.Context) ResourcePolicyHourlyCycleResponseOutput
}

// Time window specified for hourly operations.
type ResourcePolicyHourlyCycleResponseArgs struct {
	// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
	Duration pulumi.StringInput `pulumi:"duration"`
	// Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
	HoursInCycle pulumi.IntInput `pulumi:"hoursInCycle"`
	// Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (ResourcePolicyHourlyCycleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyHourlyCycleResponse)(nil)).Elem()
}

func (i ResourcePolicyHourlyCycleResponseArgs) ToResourcePolicyHourlyCycleResponseOutput() ResourcePolicyHourlyCycleResponseOutput {
	return i.ToResourcePolicyHourlyCycleResponseOutputWithContext(context.Background())
}

func (i ResourcePolicyHourlyCycleResponseArgs) ToResourcePolicyHourlyCycleResponseOutputWithContext(ctx context.Context) ResourcePolicyHourlyCycleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyHourlyCycleResponseOutput)
}

func (i ResourcePolicyHourlyCycleResponseArgs) ToResourcePolicyHourlyCycleResponsePtrOutput() ResourcePolicyHourlyCycleResponsePtrOutput {
	return i.ToResourcePolicyHourlyCycleResponsePtrOutputWithContext(context.Background())
}

func (i ResourcePolicyHourlyCycleResponseArgs) ToResourcePolicyHourlyCycleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyHourlyCycleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyHourlyCycleResponseOutput).ToResourcePolicyHourlyCycleResponsePtrOutputWithContext(ctx)
}

// ResourcePolicyHourlyCycleResponsePtrInput is an input type that accepts ResourcePolicyHourlyCycleResponseArgs, ResourcePolicyHourlyCycleResponsePtr and ResourcePolicyHourlyCycleResponsePtrOutput values.
// You can construct a concrete instance of `ResourcePolicyHourlyCycleResponsePtrInput` via:
//
//          ResourcePolicyHourlyCycleResponseArgs{...}
//
//  or:
//
//          nil
type ResourcePolicyHourlyCycleResponsePtrInput interface {
	pulumi.Input

	ToResourcePolicyHourlyCycleResponsePtrOutput() ResourcePolicyHourlyCycleResponsePtrOutput
	ToResourcePolicyHourlyCycleResponsePtrOutputWithContext(context.Context) ResourcePolicyHourlyCycleResponsePtrOutput
}

type resourcePolicyHourlyCycleResponsePtrType ResourcePolicyHourlyCycleResponseArgs

func ResourcePolicyHourlyCycleResponsePtr(v *ResourcePolicyHourlyCycleResponseArgs) ResourcePolicyHourlyCycleResponsePtrInput {
	return (*resourcePolicyHourlyCycleResponsePtrType)(v)
}

func (*resourcePolicyHourlyCycleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyHourlyCycleResponse)(nil)).Elem()
}

func (i *resourcePolicyHourlyCycleResponsePtrType) ToResourcePolicyHourlyCycleResponsePtrOutput() ResourcePolicyHourlyCycleResponsePtrOutput {
	return i.ToResourcePolicyHourlyCycleResponsePtrOutputWithContext(context.Background())
}

func (i *resourcePolicyHourlyCycleResponsePtrType) ToResourcePolicyHourlyCycleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyHourlyCycleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyHourlyCycleResponsePtrOutput)
}

// Time window specified for hourly operations.
type ResourcePolicyHourlyCycleResponseOutput struct{ *pulumi.OutputState }

func (ResourcePolicyHourlyCycleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyHourlyCycleResponse)(nil)).Elem()
}

func (o ResourcePolicyHourlyCycleResponseOutput) ToResourcePolicyHourlyCycleResponseOutput() ResourcePolicyHourlyCycleResponseOutput {
	return o
}

func (o ResourcePolicyHourlyCycleResponseOutput) ToResourcePolicyHourlyCycleResponseOutputWithContext(ctx context.Context) ResourcePolicyHourlyCycleResponseOutput {
	return o
}

func (o ResourcePolicyHourlyCycleResponseOutput) ToResourcePolicyHourlyCycleResponsePtrOutput() ResourcePolicyHourlyCycleResponsePtrOutput {
	return o.ToResourcePolicyHourlyCycleResponsePtrOutputWithContext(context.Background())
}

func (o ResourcePolicyHourlyCycleResponseOutput) ToResourcePolicyHourlyCycleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyHourlyCycleResponsePtrOutput {
	return o.ApplyT(func(v ResourcePolicyHourlyCycleResponse) *ResourcePolicyHourlyCycleResponse {
		return &v
	}).(ResourcePolicyHourlyCycleResponsePtrOutput)
}

// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
func (o ResourcePolicyHourlyCycleResponseOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicyHourlyCycleResponse) string { return v.Duration }).(pulumi.StringOutput)
}

// Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
func (o ResourcePolicyHourlyCycleResponseOutput) HoursInCycle() pulumi.IntOutput {
	return o.ApplyT(func(v ResourcePolicyHourlyCycleResponse) int { return v.HoursInCycle }).(pulumi.IntOutput)
}

// Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
func (o ResourcePolicyHourlyCycleResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicyHourlyCycleResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

type ResourcePolicyHourlyCycleResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicyHourlyCycleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyHourlyCycleResponse)(nil)).Elem()
}

func (o ResourcePolicyHourlyCycleResponsePtrOutput) ToResourcePolicyHourlyCycleResponsePtrOutput() ResourcePolicyHourlyCycleResponsePtrOutput {
	return o
}

func (o ResourcePolicyHourlyCycleResponsePtrOutput) ToResourcePolicyHourlyCycleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyHourlyCycleResponsePtrOutput {
	return o
}

func (o ResourcePolicyHourlyCycleResponsePtrOutput) Elem() ResourcePolicyHourlyCycleResponseOutput {
	return o.ApplyT(func(v *ResourcePolicyHourlyCycleResponse) ResourcePolicyHourlyCycleResponse { return *v }).(ResourcePolicyHourlyCycleResponseOutput)
}

// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
func (o ResourcePolicyHourlyCycleResponsePtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyHourlyCycleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.StringPtrOutput)
}

// Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
func (o ResourcePolicyHourlyCycleResponsePtrOutput) HoursInCycle() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyHourlyCycleResponse) *int {
		if v == nil {
			return nil
		}
		return &v.HoursInCycle
	}).(pulumi.IntPtrOutput)
}

// Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
func (o ResourcePolicyHourlyCycleResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyHourlyCycleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// An InstanceSchedulePolicy specifies when and how frequent certain operations are performed on the instance.
type ResourcePolicyInstanceSchedulePolicy struct {
	// The expiration time of the schedule. The timestamp is an RFC3339 string.
	ExpirationTime *string `pulumi:"expirationTime"`
	// The start time of the schedule. The timestamp is an RFC3339 string.
	StartTime *string `pulumi:"startTime"`
	// Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database.
	TimeZone *string `pulumi:"timeZone"`
	// Specifies the schedule for starting instances.
	VmStartSchedule *ResourcePolicyInstanceSchedulePolicySchedule `pulumi:"vmStartSchedule"`
	// Specifies the schedule for stopping instances.
	VmStopSchedule *ResourcePolicyInstanceSchedulePolicySchedule `pulumi:"vmStopSchedule"`
}

// ResourcePolicyInstanceSchedulePolicyInput is an input type that accepts ResourcePolicyInstanceSchedulePolicyArgs and ResourcePolicyInstanceSchedulePolicyOutput values.
// You can construct a concrete instance of `ResourcePolicyInstanceSchedulePolicyInput` via:
//
//          ResourcePolicyInstanceSchedulePolicyArgs{...}
type ResourcePolicyInstanceSchedulePolicyInput interface {
	pulumi.Input

	ToResourcePolicyInstanceSchedulePolicyOutput() ResourcePolicyInstanceSchedulePolicyOutput
	ToResourcePolicyInstanceSchedulePolicyOutputWithContext(context.Context) ResourcePolicyInstanceSchedulePolicyOutput
}

// An InstanceSchedulePolicy specifies when and how frequent certain operations are performed on the instance.
type ResourcePolicyInstanceSchedulePolicyArgs struct {
	// The expiration time of the schedule. The timestamp is an RFC3339 string.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// The start time of the schedule. The timestamp is an RFC3339 string.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database.
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
	// Specifies the schedule for starting instances.
	VmStartSchedule ResourcePolicyInstanceSchedulePolicySchedulePtrInput `pulumi:"vmStartSchedule"`
	// Specifies the schedule for stopping instances.
	VmStopSchedule ResourcePolicyInstanceSchedulePolicySchedulePtrInput `pulumi:"vmStopSchedule"`
}

func (ResourcePolicyInstanceSchedulePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyInstanceSchedulePolicy)(nil)).Elem()
}

func (i ResourcePolicyInstanceSchedulePolicyArgs) ToResourcePolicyInstanceSchedulePolicyOutput() ResourcePolicyInstanceSchedulePolicyOutput {
	return i.ToResourcePolicyInstanceSchedulePolicyOutputWithContext(context.Background())
}

func (i ResourcePolicyInstanceSchedulePolicyArgs) ToResourcePolicyInstanceSchedulePolicyOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyInstanceSchedulePolicyOutput)
}

func (i ResourcePolicyInstanceSchedulePolicyArgs) ToResourcePolicyInstanceSchedulePolicyPtrOutput() ResourcePolicyInstanceSchedulePolicyPtrOutput {
	return i.ToResourcePolicyInstanceSchedulePolicyPtrOutputWithContext(context.Background())
}

func (i ResourcePolicyInstanceSchedulePolicyArgs) ToResourcePolicyInstanceSchedulePolicyPtrOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyInstanceSchedulePolicyOutput).ToResourcePolicyInstanceSchedulePolicyPtrOutputWithContext(ctx)
}

// ResourcePolicyInstanceSchedulePolicyPtrInput is an input type that accepts ResourcePolicyInstanceSchedulePolicyArgs, ResourcePolicyInstanceSchedulePolicyPtr and ResourcePolicyInstanceSchedulePolicyPtrOutput values.
// You can construct a concrete instance of `ResourcePolicyInstanceSchedulePolicyPtrInput` via:
//
//          ResourcePolicyInstanceSchedulePolicyArgs{...}
//
//  or:
//
//          nil
type ResourcePolicyInstanceSchedulePolicyPtrInput interface {
	pulumi.Input

	ToResourcePolicyInstanceSchedulePolicyPtrOutput() ResourcePolicyInstanceSchedulePolicyPtrOutput
	ToResourcePolicyInstanceSchedulePolicyPtrOutputWithContext(context.Context) ResourcePolicyInstanceSchedulePolicyPtrOutput
}

type resourcePolicyInstanceSchedulePolicyPtrType ResourcePolicyInstanceSchedulePolicyArgs

func ResourcePolicyInstanceSchedulePolicyPtr(v *ResourcePolicyInstanceSchedulePolicyArgs) ResourcePolicyInstanceSchedulePolicyPtrInput {
	return (*resourcePolicyInstanceSchedulePolicyPtrType)(v)
}

func (*resourcePolicyInstanceSchedulePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyInstanceSchedulePolicy)(nil)).Elem()
}

func (i *resourcePolicyInstanceSchedulePolicyPtrType) ToResourcePolicyInstanceSchedulePolicyPtrOutput() ResourcePolicyInstanceSchedulePolicyPtrOutput {
	return i.ToResourcePolicyInstanceSchedulePolicyPtrOutputWithContext(context.Background())
}

func (i *resourcePolicyInstanceSchedulePolicyPtrType) ToResourcePolicyInstanceSchedulePolicyPtrOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyInstanceSchedulePolicyPtrOutput)
}

// An InstanceSchedulePolicy specifies when and how frequent certain operations are performed on the instance.
type ResourcePolicyInstanceSchedulePolicyOutput struct{ *pulumi.OutputState }

func (ResourcePolicyInstanceSchedulePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyInstanceSchedulePolicy)(nil)).Elem()
}

func (o ResourcePolicyInstanceSchedulePolicyOutput) ToResourcePolicyInstanceSchedulePolicyOutput() ResourcePolicyInstanceSchedulePolicyOutput {
	return o
}

func (o ResourcePolicyInstanceSchedulePolicyOutput) ToResourcePolicyInstanceSchedulePolicyOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyOutput {
	return o
}

func (o ResourcePolicyInstanceSchedulePolicyOutput) ToResourcePolicyInstanceSchedulePolicyPtrOutput() ResourcePolicyInstanceSchedulePolicyPtrOutput {
	return o.ToResourcePolicyInstanceSchedulePolicyPtrOutputWithContext(context.Background())
}

func (o ResourcePolicyInstanceSchedulePolicyOutput) ToResourcePolicyInstanceSchedulePolicyPtrOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyPtrOutput {
	return o.ApplyT(func(v ResourcePolicyInstanceSchedulePolicy) *ResourcePolicyInstanceSchedulePolicy {
		return &v
	}).(ResourcePolicyInstanceSchedulePolicyPtrOutput)
}

// The expiration time of the schedule. The timestamp is an RFC3339 string.
func (o ResourcePolicyInstanceSchedulePolicyOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePolicyInstanceSchedulePolicy) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// The start time of the schedule. The timestamp is an RFC3339 string.
func (o ResourcePolicyInstanceSchedulePolicyOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePolicyInstanceSchedulePolicy) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database.
func (o ResourcePolicyInstanceSchedulePolicyOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePolicyInstanceSchedulePolicy) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Specifies the schedule for starting instances.
func (o ResourcePolicyInstanceSchedulePolicyOutput) VmStartSchedule() ResourcePolicyInstanceSchedulePolicySchedulePtrOutput {
	return o.ApplyT(func(v ResourcePolicyInstanceSchedulePolicy) *ResourcePolicyInstanceSchedulePolicySchedule {
		return v.VmStartSchedule
	}).(ResourcePolicyInstanceSchedulePolicySchedulePtrOutput)
}

// Specifies the schedule for stopping instances.
func (o ResourcePolicyInstanceSchedulePolicyOutput) VmStopSchedule() ResourcePolicyInstanceSchedulePolicySchedulePtrOutput {
	return o.ApplyT(func(v ResourcePolicyInstanceSchedulePolicy) *ResourcePolicyInstanceSchedulePolicySchedule {
		return v.VmStopSchedule
	}).(ResourcePolicyInstanceSchedulePolicySchedulePtrOutput)
}

type ResourcePolicyInstanceSchedulePolicyPtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicyInstanceSchedulePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyInstanceSchedulePolicy)(nil)).Elem()
}

func (o ResourcePolicyInstanceSchedulePolicyPtrOutput) ToResourcePolicyInstanceSchedulePolicyPtrOutput() ResourcePolicyInstanceSchedulePolicyPtrOutput {
	return o
}

func (o ResourcePolicyInstanceSchedulePolicyPtrOutput) ToResourcePolicyInstanceSchedulePolicyPtrOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyPtrOutput {
	return o
}

func (o ResourcePolicyInstanceSchedulePolicyPtrOutput) Elem() ResourcePolicyInstanceSchedulePolicyOutput {
	return o.ApplyT(func(v *ResourcePolicyInstanceSchedulePolicy) ResourcePolicyInstanceSchedulePolicy { return *v }).(ResourcePolicyInstanceSchedulePolicyOutput)
}

// The expiration time of the schedule. The timestamp is an RFC3339 string.
func (o ResourcePolicyInstanceSchedulePolicyPtrOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyInstanceSchedulePolicy) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTime
	}).(pulumi.StringPtrOutput)
}

// The start time of the schedule. The timestamp is an RFC3339 string.
func (o ResourcePolicyInstanceSchedulePolicyPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyInstanceSchedulePolicy) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database.
func (o ResourcePolicyInstanceSchedulePolicyPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyInstanceSchedulePolicy) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Specifies the schedule for starting instances.
func (o ResourcePolicyInstanceSchedulePolicyPtrOutput) VmStartSchedule() ResourcePolicyInstanceSchedulePolicySchedulePtrOutput {
	return o.ApplyT(func(v *ResourcePolicyInstanceSchedulePolicy) *ResourcePolicyInstanceSchedulePolicySchedule {
		if v == nil {
			return nil
		}
		return v.VmStartSchedule
	}).(ResourcePolicyInstanceSchedulePolicySchedulePtrOutput)
}

// Specifies the schedule for stopping instances.
func (o ResourcePolicyInstanceSchedulePolicyPtrOutput) VmStopSchedule() ResourcePolicyInstanceSchedulePolicySchedulePtrOutput {
	return o.ApplyT(func(v *ResourcePolicyInstanceSchedulePolicy) *ResourcePolicyInstanceSchedulePolicySchedule {
		if v == nil {
			return nil
		}
		return v.VmStopSchedule
	}).(ResourcePolicyInstanceSchedulePolicySchedulePtrOutput)
}

// An InstanceSchedulePolicy specifies when and how frequent certain operations are performed on the instance.
type ResourcePolicyInstanceSchedulePolicyResponse struct {
	// The expiration time of the schedule. The timestamp is an RFC3339 string.
	ExpirationTime string `pulumi:"expirationTime"`
	// The start time of the schedule. The timestamp is an RFC3339 string.
	StartTime string `pulumi:"startTime"`
	// Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database.
	TimeZone string `pulumi:"timeZone"`
	// Specifies the schedule for starting instances.
	VmStartSchedule ResourcePolicyInstanceSchedulePolicyScheduleResponse `pulumi:"vmStartSchedule"`
	// Specifies the schedule for stopping instances.
	VmStopSchedule ResourcePolicyInstanceSchedulePolicyScheduleResponse `pulumi:"vmStopSchedule"`
}

// ResourcePolicyInstanceSchedulePolicyResponseInput is an input type that accepts ResourcePolicyInstanceSchedulePolicyResponseArgs and ResourcePolicyInstanceSchedulePolicyResponseOutput values.
// You can construct a concrete instance of `ResourcePolicyInstanceSchedulePolicyResponseInput` via:
//
//          ResourcePolicyInstanceSchedulePolicyResponseArgs{...}
type ResourcePolicyInstanceSchedulePolicyResponseInput interface {
	pulumi.Input

	ToResourcePolicyInstanceSchedulePolicyResponseOutput() ResourcePolicyInstanceSchedulePolicyResponseOutput
	ToResourcePolicyInstanceSchedulePolicyResponseOutputWithContext(context.Context) ResourcePolicyInstanceSchedulePolicyResponseOutput
}

// An InstanceSchedulePolicy specifies when and how frequent certain operations are performed on the instance.
type ResourcePolicyInstanceSchedulePolicyResponseArgs struct {
	// The expiration time of the schedule. The timestamp is an RFC3339 string.
	ExpirationTime pulumi.StringInput `pulumi:"expirationTime"`
	// The start time of the schedule. The timestamp is an RFC3339 string.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database.
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
	// Specifies the schedule for starting instances.
	VmStartSchedule ResourcePolicyInstanceSchedulePolicyScheduleResponseInput `pulumi:"vmStartSchedule"`
	// Specifies the schedule for stopping instances.
	VmStopSchedule ResourcePolicyInstanceSchedulePolicyScheduleResponseInput `pulumi:"vmStopSchedule"`
}

func (ResourcePolicyInstanceSchedulePolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyInstanceSchedulePolicyResponse)(nil)).Elem()
}

func (i ResourcePolicyInstanceSchedulePolicyResponseArgs) ToResourcePolicyInstanceSchedulePolicyResponseOutput() ResourcePolicyInstanceSchedulePolicyResponseOutput {
	return i.ToResourcePolicyInstanceSchedulePolicyResponseOutputWithContext(context.Background())
}

func (i ResourcePolicyInstanceSchedulePolicyResponseArgs) ToResourcePolicyInstanceSchedulePolicyResponseOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyInstanceSchedulePolicyResponseOutput)
}

func (i ResourcePolicyInstanceSchedulePolicyResponseArgs) ToResourcePolicyInstanceSchedulePolicyResponsePtrOutput() ResourcePolicyInstanceSchedulePolicyResponsePtrOutput {
	return i.ToResourcePolicyInstanceSchedulePolicyResponsePtrOutputWithContext(context.Background())
}

func (i ResourcePolicyInstanceSchedulePolicyResponseArgs) ToResourcePolicyInstanceSchedulePolicyResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyInstanceSchedulePolicyResponseOutput).ToResourcePolicyInstanceSchedulePolicyResponsePtrOutputWithContext(ctx)
}

// ResourcePolicyInstanceSchedulePolicyResponsePtrInput is an input type that accepts ResourcePolicyInstanceSchedulePolicyResponseArgs, ResourcePolicyInstanceSchedulePolicyResponsePtr and ResourcePolicyInstanceSchedulePolicyResponsePtrOutput values.
// You can construct a concrete instance of `ResourcePolicyInstanceSchedulePolicyResponsePtrInput` via:
//
//          ResourcePolicyInstanceSchedulePolicyResponseArgs{...}
//
//  or:
//
//          nil
type ResourcePolicyInstanceSchedulePolicyResponsePtrInput interface {
	pulumi.Input

	ToResourcePolicyInstanceSchedulePolicyResponsePtrOutput() ResourcePolicyInstanceSchedulePolicyResponsePtrOutput
	ToResourcePolicyInstanceSchedulePolicyResponsePtrOutputWithContext(context.Context) ResourcePolicyInstanceSchedulePolicyResponsePtrOutput
}

type resourcePolicyInstanceSchedulePolicyResponsePtrType ResourcePolicyInstanceSchedulePolicyResponseArgs

func ResourcePolicyInstanceSchedulePolicyResponsePtr(v *ResourcePolicyInstanceSchedulePolicyResponseArgs) ResourcePolicyInstanceSchedulePolicyResponsePtrInput {
	return (*resourcePolicyInstanceSchedulePolicyResponsePtrType)(v)
}

func (*resourcePolicyInstanceSchedulePolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyInstanceSchedulePolicyResponse)(nil)).Elem()
}

func (i *resourcePolicyInstanceSchedulePolicyResponsePtrType) ToResourcePolicyInstanceSchedulePolicyResponsePtrOutput() ResourcePolicyInstanceSchedulePolicyResponsePtrOutput {
	return i.ToResourcePolicyInstanceSchedulePolicyResponsePtrOutputWithContext(context.Background())
}

func (i *resourcePolicyInstanceSchedulePolicyResponsePtrType) ToResourcePolicyInstanceSchedulePolicyResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyInstanceSchedulePolicyResponsePtrOutput)
}

// An InstanceSchedulePolicy specifies when and how frequent certain operations are performed on the instance.
type ResourcePolicyInstanceSchedulePolicyResponseOutput struct{ *pulumi.OutputState }

func (ResourcePolicyInstanceSchedulePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyInstanceSchedulePolicyResponse)(nil)).Elem()
}

func (o ResourcePolicyInstanceSchedulePolicyResponseOutput) ToResourcePolicyInstanceSchedulePolicyResponseOutput() ResourcePolicyInstanceSchedulePolicyResponseOutput {
	return o
}

func (o ResourcePolicyInstanceSchedulePolicyResponseOutput) ToResourcePolicyInstanceSchedulePolicyResponseOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyResponseOutput {
	return o
}

func (o ResourcePolicyInstanceSchedulePolicyResponseOutput) ToResourcePolicyInstanceSchedulePolicyResponsePtrOutput() ResourcePolicyInstanceSchedulePolicyResponsePtrOutput {
	return o.ToResourcePolicyInstanceSchedulePolicyResponsePtrOutputWithContext(context.Background())
}

func (o ResourcePolicyInstanceSchedulePolicyResponseOutput) ToResourcePolicyInstanceSchedulePolicyResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyResponsePtrOutput {
	return o.ApplyT(func(v ResourcePolicyInstanceSchedulePolicyResponse) *ResourcePolicyInstanceSchedulePolicyResponse {
		return &v
	}).(ResourcePolicyInstanceSchedulePolicyResponsePtrOutput)
}

// The expiration time of the schedule. The timestamp is an RFC3339 string.
func (o ResourcePolicyInstanceSchedulePolicyResponseOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicyInstanceSchedulePolicyResponse) string { return v.ExpirationTime }).(pulumi.StringOutput)
}

// The start time of the schedule. The timestamp is an RFC3339 string.
func (o ResourcePolicyInstanceSchedulePolicyResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicyInstanceSchedulePolicyResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database.
func (o ResourcePolicyInstanceSchedulePolicyResponseOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicyInstanceSchedulePolicyResponse) string { return v.TimeZone }).(pulumi.StringOutput)
}

// Specifies the schedule for starting instances.
func (o ResourcePolicyInstanceSchedulePolicyResponseOutput) VmStartSchedule() ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput {
	return o.ApplyT(func(v ResourcePolicyInstanceSchedulePolicyResponse) ResourcePolicyInstanceSchedulePolicyScheduleResponse {
		return v.VmStartSchedule
	}).(ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput)
}

// Specifies the schedule for stopping instances.
func (o ResourcePolicyInstanceSchedulePolicyResponseOutput) VmStopSchedule() ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput {
	return o.ApplyT(func(v ResourcePolicyInstanceSchedulePolicyResponse) ResourcePolicyInstanceSchedulePolicyScheduleResponse {
		return v.VmStopSchedule
	}).(ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput)
}

type ResourcePolicyInstanceSchedulePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicyInstanceSchedulePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyInstanceSchedulePolicyResponse)(nil)).Elem()
}

func (o ResourcePolicyInstanceSchedulePolicyResponsePtrOutput) ToResourcePolicyInstanceSchedulePolicyResponsePtrOutput() ResourcePolicyInstanceSchedulePolicyResponsePtrOutput {
	return o
}

func (o ResourcePolicyInstanceSchedulePolicyResponsePtrOutput) ToResourcePolicyInstanceSchedulePolicyResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyResponsePtrOutput {
	return o
}

func (o ResourcePolicyInstanceSchedulePolicyResponsePtrOutput) Elem() ResourcePolicyInstanceSchedulePolicyResponseOutput {
	return o.ApplyT(func(v *ResourcePolicyInstanceSchedulePolicyResponse) ResourcePolicyInstanceSchedulePolicyResponse {
		return *v
	}).(ResourcePolicyInstanceSchedulePolicyResponseOutput)
}

// The expiration time of the schedule. The timestamp is an RFC3339 string.
func (o ResourcePolicyInstanceSchedulePolicyResponsePtrOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyInstanceSchedulePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ExpirationTime
	}).(pulumi.StringPtrOutput)
}

// The start time of the schedule. The timestamp is an RFC3339 string.
func (o ResourcePolicyInstanceSchedulePolicyResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyInstanceSchedulePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database.
func (o ResourcePolicyInstanceSchedulePolicyResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyInstanceSchedulePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Specifies the schedule for starting instances.
func (o ResourcePolicyInstanceSchedulePolicyResponsePtrOutput) VmStartSchedule() ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput {
	return o.ApplyT(func(v *ResourcePolicyInstanceSchedulePolicyResponse) *ResourcePolicyInstanceSchedulePolicyScheduleResponse {
		if v == nil {
			return nil
		}
		return &v.VmStartSchedule
	}).(ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput)
}

// Specifies the schedule for stopping instances.
func (o ResourcePolicyInstanceSchedulePolicyResponsePtrOutput) VmStopSchedule() ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput {
	return o.ApplyT(func(v *ResourcePolicyInstanceSchedulePolicyResponse) *ResourcePolicyInstanceSchedulePolicyScheduleResponse {
		if v == nil {
			return nil
		}
		return &v.VmStopSchedule
	}).(ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput)
}

// Schedule for an instance operation.
type ResourcePolicyInstanceSchedulePolicySchedule struct {
	// Specifies the frequency for the operation, using the unix-cron format.
	Schedule *string `pulumi:"schedule"`
}

// ResourcePolicyInstanceSchedulePolicyScheduleInput is an input type that accepts ResourcePolicyInstanceSchedulePolicyScheduleArgs and ResourcePolicyInstanceSchedulePolicyScheduleOutput values.
// You can construct a concrete instance of `ResourcePolicyInstanceSchedulePolicyScheduleInput` via:
//
//          ResourcePolicyInstanceSchedulePolicyScheduleArgs{...}
type ResourcePolicyInstanceSchedulePolicyScheduleInput interface {
	pulumi.Input

	ToResourcePolicyInstanceSchedulePolicyScheduleOutput() ResourcePolicyInstanceSchedulePolicyScheduleOutput
	ToResourcePolicyInstanceSchedulePolicyScheduleOutputWithContext(context.Context) ResourcePolicyInstanceSchedulePolicyScheduleOutput
}

// Schedule for an instance operation.
type ResourcePolicyInstanceSchedulePolicyScheduleArgs struct {
	// Specifies the frequency for the operation, using the unix-cron format.
	Schedule pulumi.StringPtrInput `pulumi:"schedule"`
}

func (ResourcePolicyInstanceSchedulePolicyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyInstanceSchedulePolicySchedule)(nil)).Elem()
}

func (i ResourcePolicyInstanceSchedulePolicyScheduleArgs) ToResourcePolicyInstanceSchedulePolicyScheduleOutput() ResourcePolicyInstanceSchedulePolicyScheduleOutput {
	return i.ToResourcePolicyInstanceSchedulePolicyScheduleOutputWithContext(context.Background())
}

func (i ResourcePolicyInstanceSchedulePolicyScheduleArgs) ToResourcePolicyInstanceSchedulePolicyScheduleOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyInstanceSchedulePolicyScheduleOutput)
}

func (i ResourcePolicyInstanceSchedulePolicyScheduleArgs) ToResourcePolicyInstanceSchedulePolicySchedulePtrOutput() ResourcePolicyInstanceSchedulePolicySchedulePtrOutput {
	return i.ToResourcePolicyInstanceSchedulePolicySchedulePtrOutputWithContext(context.Background())
}

func (i ResourcePolicyInstanceSchedulePolicyScheduleArgs) ToResourcePolicyInstanceSchedulePolicySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyInstanceSchedulePolicyScheduleOutput).ToResourcePolicyInstanceSchedulePolicySchedulePtrOutputWithContext(ctx)
}

// ResourcePolicyInstanceSchedulePolicySchedulePtrInput is an input type that accepts ResourcePolicyInstanceSchedulePolicyScheduleArgs, ResourcePolicyInstanceSchedulePolicySchedulePtr and ResourcePolicyInstanceSchedulePolicySchedulePtrOutput values.
// You can construct a concrete instance of `ResourcePolicyInstanceSchedulePolicySchedulePtrInput` via:
//
//          ResourcePolicyInstanceSchedulePolicyScheduleArgs{...}
//
//  or:
//
//          nil
type ResourcePolicyInstanceSchedulePolicySchedulePtrInput interface {
	pulumi.Input

	ToResourcePolicyInstanceSchedulePolicySchedulePtrOutput() ResourcePolicyInstanceSchedulePolicySchedulePtrOutput
	ToResourcePolicyInstanceSchedulePolicySchedulePtrOutputWithContext(context.Context) ResourcePolicyInstanceSchedulePolicySchedulePtrOutput
}

type resourcePolicyInstanceSchedulePolicySchedulePtrType ResourcePolicyInstanceSchedulePolicyScheduleArgs

func ResourcePolicyInstanceSchedulePolicySchedulePtr(v *ResourcePolicyInstanceSchedulePolicyScheduleArgs) ResourcePolicyInstanceSchedulePolicySchedulePtrInput {
	return (*resourcePolicyInstanceSchedulePolicySchedulePtrType)(v)
}

func (*resourcePolicyInstanceSchedulePolicySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyInstanceSchedulePolicySchedule)(nil)).Elem()
}

func (i *resourcePolicyInstanceSchedulePolicySchedulePtrType) ToResourcePolicyInstanceSchedulePolicySchedulePtrOutput() ResourcePolicyInstanceSchedulePolicySchedulePtrOutput {
	return i.ToResourcePolicyInstanceSchedulePolicySchedulePtrOutputWithContext(context.Background())
}

func (i *resourcePolicyInstanceSchedulePolicySchedulePtrType) ToResourcePolicyInstanceSchedulePolicySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyInstanceSchedulePolicySchedulePtrOutput)
}

// Schedule for an instance operation.
type ResourcePolicyInstanceSchedulePolicyScheduleOutput struct{ *pulumi.OutputState }

func (ResourcePolicyInstanceSchedulePolicyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyInstanceSchedulePolicySchedule)(nil)).Elem()
}

func (o ResourcePolicyInstanceSchedulePolicyScheduleOutput) ToResourcePolicyInstanceSchedulePolicyScheduleOutput() ResourcePolicyInstanceSchedulePolicyScheduleOutput {
	return o
}

func (o ResourcePolicyInstanceSchedulePolicyScheduleOutput) ToResourcePolicyInstanceSchedulePolicyScheduleOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyScheduleOutput {
	return o
}

func (o ResourcePolicyInstanceSchedulePolicyScheduleOutput) ToResourcePolicyInstanceSchedulePolicySchedulePtrOutput() ResourcePolicyInstanceSchedulePolicySchedulePtrOutput {
	return o.ToResourcePolicyInstanceSchedulePolicySchedulePtrOutputWithContext(context.Background())
}

func (o ResourcePolicyInstanceSchedulePolicyScheduleOutput) ToResourcePolicyInstanceSchedulePolicySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicySchedulePtrOutput {
	return o.ApplyT(func(v ResourcePolicyInstanceSchedulePolicySchedule) *ResourcePolicyInstanceSchedulePolicySchedule {
		return &v
	}).(ResourcePolicyInstanceSchedulePolicySchedulePtrOutput)
}

// Specifies the frequency for the operation, using the unix-cron format.
func (o ResourcePolicyInstanceSchedulePolicyScheduleOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePolicyInstanceSchedulePolicySchedule) *string { return v.Schedule }).(pulumi.StringPtrOutput)
}

type ResourcePolicyInstanceSchedulePolicySchedulePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicyInstanceSchedulePolicySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyInstanceSchedulePolicySchedule)(nil)).Elem()
}

func (o ResourcePolicyInstanceSchedulePolicySchedulePtrOutput) ToResourcePolicyInstanceSchedulePolicySchedulePtrOutput() ResourcePolicyInstanceSchedulePolicySchedulePtrOutput {
	return o
}

func (o ResourcePolicyInstanceSchedulePolicySchedulePtrOutput) ToResourcePolicyInstanceSchedulePolicySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicySchedulePtrOutput {
	return o
}

func (o ResourcePolicyInstanceSchedulePolicySchedulePtrOutput) Elem() ResourcePolicyInstanceSchedulePolicyScheduleOutput {
	return o.ApplyT(func(v *ResourcePolicyInstanceSchedulePolicySchedule) ResourcePolicyInstanceSchedulePolicySchedule {
		return *v
	}).(ResourcePolicyInstanceSchedulePolicyScheduleOutput)
}

// Specifies the frequency for the operation, using the unix-cron format.
func (o ResourcePolicyInstanceSchedulePolicySchedulePtrOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyInstanceSchedulePolicySchedule) *string {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(pulumi.StringPtrOutput)
}

// Schedule for an instance operation.
type ResourcePolicyInstanceSchedulePolicyScheduleResponse struct {
	// Specifies the frequency for the operation, using the unix-cron format.
	Schedule string `pulumi:"schedule"`
}

// ResourcePolicyInstanceSchedulePolicyScheduleResponseInput is an input type that accepts ResourcePolicyInstanceSchedulePolicyScheduleResponseArgs and ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput values.
// You can construct a concrete instance of `ResourcePolicyInstanceSchedulePolicyScheduleResponseInput` via:
//
//          ResourcePolicyInstanceSchedulePolicyScheduleResponseArgs{...}
type ResourcePolicyInstanceSchedulePolicyScheduleResponseInput interface {
	pulumi.Input

	ToResourcePolicyInstanceSchedulePolicyScheduleResponseOutput() ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput
	ToResourcePolicyInstanceSchedulePolicyScheduleResponseOutputWithContext(context.Context) ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput
}

// Schedule for an instance operation.
type ResourcePolicyInstanceSchedulePolicyScheduleResponseArgs struct {
	// Specifies the frequency for the operation, using the unix-cron format.
	Schedule pulumi.StringInput `pulumi:"schedule"`
}

func (ResourcePolicyInstanceSchedulePolicyScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyInstanceSchedulePolicyScheduleResponse)(nil)).Elem()
}

func (i ResourcePolicyInstanceSchedulePolicyScheduleResponseArgs) ToResourcePolicyInstanceSchedulePolicyScheduleResponseOutput() ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput {
	return i.ToResourcePolicyInstanceSchedulePolicyScheduleResponseOutputWithContext(context.Background())
}

func (i ResourcePolicyInstanceSchedulePolicyScheduleResponseArgs) ToResourcePolicyInstanceSchedulePolicyScheduleResponseOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput)
}

func (i ResourcePolicyInstanceSchedulePolicyScheduleResponseArgs) ToResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput() ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput {
	return i.ToResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutputWithContext(context.Background())
}

func (i ResourcePolicyInstanceSchedulePolicyScheduleResponseArgs) ToResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput).ToResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutputWithContext(ctx)
}

// ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrInput is an input type that accepts ResourcePolicyInstanceSchedulePolicyScheduleResponseArgs, ResourcePolicyInstanceSchedulePolicyScheduleResponsePtr and ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput values.
// You can construct a concrete instance of `ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrInput` via:
//
//          ResourcePolicyInstanceSchedulePolicyScheduleResponseArgs{...}
//
//  or:
//
//          nil
type ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrInput interface {
	pulumi.Input

	ToResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput() ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput
	ToResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutputWithContext(context.Context) ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput
}

type resourcePolicyInstanceSchedulePolicyScheduleResponsePtrType ResourcePolicyInstanceSchedulePolicyScheduleResponseArgs

func ResourcePolicyInstanceSchedulePolicyScheduleResponsePtr(v *ResourcePolicyInstanceSchedulePolicyScheduleResponseArgs) ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrInput {
	return (*resourcePolicyInstanceSchedulePolicyScheduleResponsePtrType)(v)
}

func (*resourcePolicyInstanceSchedulePolicyScheduleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyInstanceSchedulePolicyScheduleResponse)(nil)).Elem()
}

func (i *resourcePolicyInstanceSchedulePolicyScheduleResponsePtrType) ToResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput() ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput {
	return i.ToResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutputWithContext(context.Background())
}

func (i *resourcePolicyInstanceSchedulePolicyScheduleResponsePtrType) ToResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput)
}

// Schedule for an instance operation.
type ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput struct{ *pulumi.OutputState }

func (ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyInstanceSchedulePolicyScheduleResponse)(nil)).Elem()
}

func (o ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput) ToResourcePolicyInstanceSchedulePolicyScheduleResponseOutput() ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput {
	return o
}

func (o ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput) ToResourcePolicyInstanceSchedulePolicyScheduleResponseOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput {
	return o
}

func (o ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput) ToResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput() ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput {
	return o.ToResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutputWithContext(context.Background())
}

func (o ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput) ToResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput {
	return o.ApplyT(func(v ResourcePolicyInstanceSchedulePolicyScheduleResponse) *ResourcePolicyInstanceSchedulePolicyScheduleResponse {
		return &v
	}).(ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput)
}

// Specifies the frequency for the operation, using the unix-cron format.
func (o ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicyInstanceSchedulePolicyScheduleResponse) string { return v.Schedule }).(pulumi.StringOutput)
}

type ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyInstanceSchedulePolicyScheduleResponse)(nil)).Elem()
}

func (o ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput) ToResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput() ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput {
	return o
}

func (o ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput) ToResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput {
	return o
}

func (o ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput) Elem() ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput {
	return o.ApplyT(func(v *ResourcePolicyInstanceSchedulePolicyScheduleResponse) ResourcePolicyInstanceSchedulePolicyScheduleResponse {
		return *v
	}).(ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput)
}

// Specifies the frequency for the operation, using the unix-cron format.
func (o ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyInstanceSchedulePolicyScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Schedule
	}).(pulumi.StringPtrOutput)
}

type ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse struct {
	// The last time the schedule successfully ran. The timestamp is an RFC3339 string.
	LastRunStartTime string `pulumi:"lastRunStartTime"`
	// The next time the schedule is planned to run. The actual time might be slightly different. The timestamp is an RFC3339 string.
	NextRunStartTime string `pulumi:"nextRunStartTime"`
}

// ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseInput is an input type that accepts ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseArgs and ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput values.
// You can construct a concrete instance of `ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseInput` via:
//
//          ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseArgs{...}
type ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseInput interface {
	pulumi.Input

	ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput() ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput
	ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutputWithContext(context.Context) ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput
}

type ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseArgs struct {
	// The last time the schedule successfully ran. The timestamp is an RFC3339 string.
	LastRunStartTime pulumi.StringInput `pulumi:"lastRunStartTime"`
	// The next time the schedule is planned to run. The actual time might be slightly different. The timestamp is an RFC3339 string.
	NextRunStartTime pulumi.StringInput `pulumi:"nextRunStartTime"`
}

func (ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse)(nil)).Elem()
}

func (i ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseArgs) ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput() ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput {
	return i.ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutputWithContext(context.Background())
}

func (i ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseArgs) ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutputWithContext(ctx context.Context) ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput)
}

func (i ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseArgs) ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput() ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput {
	return i.ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutputWithContext(context.Background())
}

func (i ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseArgs) ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput).ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutputWithContext(ctx)
}

// ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrInput is an input type that accepts ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseArgs, ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtr and ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput values.
// You can construct a concrete instance of `ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrInput` via:
//
//          ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseArgs{...}
//
//  or:
//
//          nil
type ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrInput interface {
	pulumi.Input

	ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput() ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput
	ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutputWithContext(context.Context) ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput
}

type resourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrType ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseArgs

func ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtr(v *ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseArgs) ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrInput {
	return (*resourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrType)(v)
}

func (*resourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse)(nil)).Elem()
}

func (i *resourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrType) ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput() ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput {
	return i.ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutputWithContext(context.Background())
}

func (i *resourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrType) ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput)
}

type ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput struct{ *pulumi.OutputState }

func (ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse)(nil)).Elem()
}

func (o ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput) ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput() ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput {
	return o
}

func (o ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput) ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutputWithContext(ctx context.Context) ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput {
	return o
}

func (o ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput) ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput() ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput {
	return o.ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutputWithContext(context.Background())
}

func (o ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput) ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput {
	return o.ApplyT(func(v ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse) *ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse {
		return &v
	}).(ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput)
}

// The last time the schedule successfully ran. The timestamp is an RFC3339 string.
func (o ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput) LastRunStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse) string {
		return v.LastRunStartTime
	}).(pulumi.StringOutput)
}

// The next time the schedule is planned to run. The actual time might be slightly different. The timestamp is an RFC3339 string.
func (o ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput) NextRunStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse) string {
		return v.NextRunStartTime
	}).(pulumi.StringOutput)
}

type ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse)(nil)).Elem()
}

func (o ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput) ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput() ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput {
	return o
}

func (o ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput) ToResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput {
	return o
}

func (o ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput) Elem() ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput {
	return o.ApplyT(func(v *ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse) ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse {
		return *v
	}).(ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput)
}

// The last time the schedule successfully ran. The timestamp is an RFC3339 string.
func (o ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput) LastRunStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LastRunStartTime
	}).(pulumi.StringPtrOutput)
}

// The next time the schedule is planned to run. The actual time might be slightly different. The timestamp is an RFC3339 string.
func (o ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput) NextRunStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NextRunStartTime
	}).(pulumi.StringPtrOutput)
}

// Contains output only fields. Use this sub-message for all output fields set on ResourcePolicy. The internal structure of this "status" field should mimic the structure of ResourcePolicy proto specification.
type ResourcePolicyResourceStatusResponse struct {
	// Specifies a set of output values reffering to the instance_schedule_policy system status. This field should have the same name as corresponding policy field.
	InstanceSchedulePolicy ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse `pulumi:"instanceSchedulePolicy"`
}

// ResourcePolicyResourceStatusResponseInput is an input type that accepts ResourcePolicyResourceStatusResponseArgs and ResourcePolicyResourceStatusResponseOutput values.
// You can construct a concrete instance of `ResourcePolicyResourceStatusResponseInput` via:
//
//          ResourcePolicyResourceStatusResponseArgs{...}
type ResourcePolicyResourceStatusResponseInput interface {
	pulumi.Input

	ToResourcePolicyResourceStatusResponseOutput() ResourcePolicyResourceStatusResponseOutput
	ToResourcePolicyResourceStatusResponseOutputWithContext(context.Context) ResourcePolicyResourceStatusResponseOutput
}

// Contains output only fields. Use this sub-message for all output fields set on ResourcePolicy. The internal structure of this "status" field should mimic the structure of ResourcePolicy proto specification.
type ResourcePolicyResourceStatusResponseArgs struct {
	// Specifies a set of output values reffering to the instance_schedule_policy system status. This field should have the same name as corresponding policy field.
	InstanceSchedulePolicy ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseInput `pulumi:"instanceSchedulePolicy"`
}

func (ResourcePolicyResourceStatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyResourceStatusResponse)(nil)).Elem()
}

func (i ResourcePolicyResourceStatusResponseArgs) ToResourcePolicyResourceStatusResponseOutput() ResourcePolicyResourceStatusResponseOutput {
	return i.ToResourcePolicyResourceStatusResponseOutputWithContext(context.Background())
}

func (i ResourcePolicyResourceStatusResponseArgs) ToResourcePolicyResourceStatusResponseOutputWithContext(ctx context.Context) ResourcePolicyResourceStatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyResourceStatusResponseOutput)
}

func (i ResourcePolicyResourceStatusResponseArgs) ToResourcePolicyResourceStatusResponsePtrOutput() ResourcePolicyResourceStatusResponsePtrOutput {
	return i.ToResourcePolicyResourceStatusResponsePtrOutputWithContext(context.Background())
}

func (i ResourcePolicyResourceStatusResponseArgs) ToResourcePolicyResourceStatusResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyResourceStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyResourceStatusResponseOutput).ToResourcePolicyResourceStatusResponsePtrOutputWithContext(ctx)
}

// ResourcePolicyResourceStatusResponsePtrInput is an input type that accepts ResourcePolicyResourceStatusResponseArgs, ResourcePolicyResourceStatusResponsePtr and ResourcePolicyResourceStatusResponsePtrOutput values.
// You can construct a concrete instance of `ResourcePolicyResourceStatusResponsePtrInput` via:
//
//          ResourcePolicyResourceStatusResponseArgs{...}
//
//  or:
//
//          nil
type ResourcePolicyResourceStatusResponsePtrInput interface {
	pulumi.Input

	ToResourcePolicyResourceStatusResponsePtrOutput() ResourcePolicyResourceStatusResponsePtrOutput
	ToResourcePolicyResourceStatusResponsePtrOutputWithContext(context.Context) ResourcePolicyResourceStatusResponsePtrOutput
}

type resourcePolicyResourceStatusResponsePtrType ResourcePolicyResourceStatusResponseArgs

func ResourcePolicyResourceStatusResponsePtr(v *ResourcePolicyResourceStatusResponseArgs) ResourcePolicyResourceStatusResponsePtrInput {
	return (*resourcePolicyResourceStatusResponsePtrType)(v)
}

func (*resourcePolicyResourceStatusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyResourceStatusResponse)(nil)).Elem()
}

func (i *resourcePolicyResourceStatusResponsePtrType) ToResourcePolicyResourceStatusResponsePtrOutput() ResourcePolicyResourceStatusResponsePtrOutput {
	return i.ToResourcePolicyResourceStatusResponsePtrOutputWithContext(context.Background())
}

func (i *resourcePolicyResourceStatusResponsePtrType) ToResourcePolicyResourceStatusResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyResourceStatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyResourceStatusResponsePtrOutput)
}

// Contains output only fields. Use this sub-message for all output fields set on ResourcePolicy. The internal structure of this "status" field should mimic the structure of ResourcePolicy proto specification.
type ResourcePolicyResourceStatusResponseOutput struct{ *pulumi.OutputState }

func (ResourcePolicyResourceStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyResourceStatusResponse)(nil)).Elem()
}

func (o ResourcePolicyResourceStatusResponseOutput) ToResourcePolicyResourceStatusResponseOutput() ResourcePolicyResourceStatusResponseOutput {
	return o
}

func (o ResourcePolicyResourceStatusResponseOutput) ToResourcePolicyResourceStatusResponseOutputWithContext(ctx context.Context) ResourcePolicyResourceStatusResponseOutput {
	return o
}

func (o ResourcePolicyResourceStatusResponseOutput) ToResourcePolicyResourceStatusResponsePtrOutput() ResourcePolicyResourceStatusResponsePtrOutput {
	return o.ToResourcePolicyResourceStatusResponsePtrOutputWithContext(context.Background())
}

func (o ResourcePolicyResourceStatusResponseOutput) ToResourcePolicyResourceStatusResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyResourceStatusResponsePtrOutput {
	return o.ApplyT(func(v ResourcePolicyResourceStatusResponse) *ResourcePolicyResourceStatusResponse {
		return &v
	}).(ResourcePolicyResourceStatusResponsePtrOutput)
}

// Specifies a set of output values reffering to the instance_schedule_policy system status. This field should have the same name as corresponding policy field.
func (o ResourcePolicyResourceStatusResponseOutput) InstanceSchedulePolicy() ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput {
	return o.ApplyT(func(v ResourcePolicyResourceStatusResponse) ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse {
		return v.InstanceSchedulePolicy
	}).(ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput)
}

type ResourcePolicyResourceStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicyResourceStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyResourceStatusResponse)(nil)).Elem()
}

func (o ResourcePolicyResourceStatusResponsePtrOutput) ToResourcePolicyResourceStatusResponsePtrOutput() ResourcePolicyResourceStatusResponsePtrOutput {
	return o
}

func (o ResourcePolicyResourceStatusResponsePtrOutput) ToResourcePolicyResourceStatusResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyResourceStatusResponsePtrOutput {
	return o
}

func (o ResourcePolicyResourceStatusResponsePtrOutput) Elem() ResourcePolicyResourceStatusResponseOutput {
	return o.ApplyT(func(v *ResourcePolicyResourceStatusResponse) ResourcePolicyResourceStatusResponse { return *v }).(ResourcePolicyResourceStatusResponseOutput)
}

// Specifies a set of output values reffering to the instance_schedule_policy system status. This field should have the same name as corresponding policy field.
func (o ResourcePolicyResourceStatusResponsePtrOutput) InstanceSchedulePolicy() ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput {
	return o.ApplyT(func(v *ResourcePolicyResourceStatusResponse) *ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponse {
		if v == nil {
			return nil
		}
		return &v.InstanceSchedulePolicy
	}).(ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput)
}

// A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained.
type ResourcePolicySnapshotSchedulePolicy struct {
	// Retention policy applied to snapshots created by this resource policy.
	RetentionPolicy *ResourcePolicySnapshotSchedulePolicyRetentionPolicy `pulumi:"retentionPolicy"`
	// A Vm Maintenance Policy specifies what kind of infrastructure maintenance we are allowed to perform on this VM and when. Schedule that is applied to disks covered by this policy.
	Schedule *ResourcePolicySnapshotSchedulePolicySchedule `pulumi:"schedule"`
	// Properties with which snapshots are created such as labels, encryption keys.
	SnapshotProperties *ResourcePolicySnapshotSchedulePolicySnapshotProperties `pulumi:"snapshotProperties"`
}

// ResourcePolicySnapshotSchedulePolicyInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyArgs and ResourcePolicySnapshotSchedulePolicyOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyInput` via:
//
//          ResourcePolicySnapshotSchedulePolicyArgs{...}
type ResourcePolicySnapshotSchedulePolicyInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyOutput() ResourcePolicySnapshotSchedulePolicyOutput
	ToResourcePolicySnapshotSchedulePolicyOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyOutput
}

// A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained.
type ResourcePolicySnapshotSchedulePolicyArgs struct {
	// Retention policy applied to snapshots created by this resource policy.
	RetentionPolicy ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrInput `pulumi:"retentionPolicy"`
	// A Vm Maintenance Policy specifies what kind of infrastructure maintenance we are allowed to perform on this VM and when. Schedule that is applied to disks covered by this policy.
	Schedule ResourcePolicySnapshotSchedulePolicySchedulePtrInput `pulumi:"schedule"`
	// Properties with which snapshots are created such as labels, encryption keys.
	SnapshotProperties ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrInput `pulumi:"snapshotProperties"`
}

func (ResourcePolicySnapshotSchedulePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicy)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicyArgs) ToResourcePolicySnapshotSchedulePolicyOutput() ResourcePolicySnapshotSchedulePolicyOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyArgs) ToResourcePolicySnapshotSchedulePolicyOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyOutput)
}

func (i ResourcePolicySnapshotSchedulePolicyArgs) ToResourcePolicySnapshotSchedulePolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyPtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyArgs) ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyOutput).ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(ctx)
}

// ResourcePolicySnapshotSchedulePolicyPtrInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyArgs, ResourcePolicySnapshotSchedulePolicyPtr and ResourcePolicySnapshotSchedulePolicyPtrOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyPtrInput` via:
//
//          ResourcePolicySnapshotSchedulePolicyArgs{...}
//
//  or:
//
//          nil
type ResourcePolicySnapshotSchedulePolicyPtrInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyPtrOutput
	ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyPtrOutput
}

type resourcePolicySnapshotSchedulePolicyPtrType ResourcePolicySnapshotSchedulePolicyArgs

func ResourcePolicySnapshotSchedulePolicyPtr(v *ResourcePolicySnapshotSchedulePolicyArgs) ResourcePolicySnapshotSchedulePolicyPtrInput {
	return (*resourcePolicySnapshotSchedulePolicyPtrType)(v)
}

func (*resourcePolicySnapshotSchedulePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicy)(nil)).Elem()
}

func (i *resourcePolicySnapshotSchedulePolicyPtrType) ToResourcePolicySnapshotSchedulePolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyPtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(context.Background())
}

func (i *resourcePolicySnapshotSchedulePolicyPtrType) ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyPtrOutput)
}

// A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained.
type ResourcePolicySnapshotSchedulePolicyOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicy)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyOutput) ToResourcePolicySnapshotSchedulePolicyOutput() ResourcePolicySnapshotSchedulePolicyOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyOutput) ToResourcePolicySnapshotSchedulePolicyOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyOutput) ToResourcePolicySnapshotSchedulePolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyPtrOutput {
	return o.ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(context.Background())
}

func (o ResourcePolicySnapshotSchedulePolicyOutput) ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicy) *ResourcePolicySnapshotSchedulePolicy {
		return &v
	}).(ResourcePolicySnapshotSchedulePolicyPtrOutput)
}

// Retention policy applied to snapshots created by this resource policy.
func (o ResourcePolicySnapshotSchedulePolicyOutput) RetentionPolicy() ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicy) *ResourcePolicySnapshotSchedulePolicyRetentionPolicy {
		return v.RetentionPolicy
	}).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput)
}

// A Vm Maintenance Policy specifies what kind of infrastructure maintenance we are allowed to perform on this VM and when. Schedule that is applied to disks covered by this policy.
func (o ResourcePolicySnapshotSchedulePolicyOutput) Schedule() ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicy) *ResourcePolicySnapshotSchedulePolicySchedule {
		return v.Schedule
	}).(ResourcePolicySnapshotSchedulePolicySchedulePtrOutput)
}

// Properties with which snapshots are created such as labels, encryption keys.
func (o ResourcePolicySnapshotSchedulePolicyOutput) SnapshotProperties() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicy) *ResourcePolicySnapshotSchedulePolicySnapshotProperties {
		return v.SnapshotProperties
	}).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput)
}

type ResourcePolicySnapshotSchedulePolicyPtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicy)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyPtrOutput) ToResourcePolicySnapshotSchedulePolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyPtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyPtrOutput) ToResourcePolicySnapshotSchedulePolicyPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyPtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyPtrOutput) Elem() ResourcePolicySnapshotSchedulePolicyOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicy) ResourcePolicySnapshotSchedulePolicy { return *v }).(ResourcePolicySnapshotSchedulePolicyOutput)
}

// Retention policy applied to snapshots created by this resource policy.
func (o ResourcePolicySnapshotSchedulePolicyPtrOutput) RetentionPolicy() ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicy) *ResourcePolicySnapshotSchedulePolicyRetentionPolicy {
		if v == nil {
			return nil
		}
		return v.RetentionPolicy
	}).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput)
}

// A Vm Maintenance Policy specifies what kind of infrastructure maintenance we are allowed to perform on this VM and when. Schedule that is applied to disks covered by this policy.
func (o ResourcePolicySnapshotSchedulePolicyPtrOutput) Schedule() ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicy) *ResourcePolicySnapshotSchedulePolicySchedule {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(ResourcePolicySnapshotSchedulePolicySchedulePtrOutput)
}

// Properties with which snapshots are created such as labels, encryption keys.
func (o ResourcePolicySnapshotSchedulePolicyPtrOutput) SnapshotProperties() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicy) *ResourcePolicySnapshotSchedulePolicySnapshotProperties {
		if v == nil {
			return nil
		}
		return v.SnapshotProperties
	}).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput)
}

// A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained.
type ResourcePolicySnapshotSchedulePolicyResponse struct {
	// Retention policy applied to snapshots created by this resource policy.
	RetentionPolicy ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse `pulumi:"retentionPolicy"`
	// A Vm Maintenance Policy specifies what kind of infrastructure maintenance we are allowed to perform on this VM and when. Schedule that is applied to disks covered by this policy.
	Schedule ResourcePolicySnapshotSchedulePolicyScheduleResponse `pulumi:"schedule"`
	// Properties with which snapshots are created such as labels, encryption keys.
	SnapshotProperties ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse `pulumi:"snapshotProperties"`
}

// ResourcePolicySnapshotSchedulePolicyResponseInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyResponseArgs and ResourcePolicySnapshotSchedulePolicyResponseOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyResponseInput` via:
//
//          ResourcePolicySnapshotSchedulePolicyResponseArgs{...}
type ResourcePolicySnapshotSchedulePolicyResponseInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyResponseOutput() ResourcePolicySnapshotSchedulePolicyResponseOutput
	ToResourcePolicySnapshotSchedulePolicyResponseOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyResponseOutput
}

// A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained.
type ResourcePolicySnapshotSchedulePolicyResponseArgs struct {
	// Retention policy applied to snapshots created by this resource policy.
	RetentionPolicy ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseInput `pulumi:"retentionPolicy"`
	// A Vm Maintenance Policy specifies what kind of infrastructure maintenance we are allowed to perform on this VM and when. Schedule that is applied to disks covered by this policy.
	Schedule ResourcePolicySnapshotSchedulePolicyScheduleResponseInput `pulumi:"schedule"`
	// Properties with which snapshots are created such as labels, encryption keys.
	SnapshotProperties ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseInput `pulumi:"snapshotProperties"`
}

func (ResourcePolicySnapshotSchedulePolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyResponse)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicyResponseArgs) ToResourcePolicySnapshotSchedulePolicyResponseOutput() ResourcePolicySnapshotSchedulePolicyResponseOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyResponseOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyResponseArgs) ToResourcePolicySnapshotSchedulePolicyResponseOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyResponseOutput)
}

func (i ResourcePolicySnapshotSchedulePolicyResponseArgs) ToResourcePolicySnapshotSchedulePolicyResponsePtrOutput() ResourcePolicySnapshotSchedulePolicyResponsePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyResponsePtrOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyResponseArgs) ToResourcePolicySnapshotSchedulePolicyResponsePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyResponseOutput).ToResourcePolicySnapshotSchedulePolicyResponsePtrOutputWithContext(ctx)
}

// ResourcePolicySnapshotSchedulePolicyResponsePtrInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyResponseArgs, ResourcePolicySnapshotSchedulePolicyResponsePtr and ResourcePolicySnapshotSchedulePolicyResponsePtrOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyResponsePtrInput` via:
//
//          ResourcePolicySnapshotSchedulePolicyResponseArgs{...}
//
//  or:
//
//          nil
type ResourcePolicySnapshotSchedulePolicyResponsePtrInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyResponsePtrOutput() ResourcePolicySnapshotSchedulePolicyResponsePtrOutput
	ToResourcePolicySnapshotSchedulePolicyResponsePtrOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyResponsePtrOutput
}

type resourcePolicySnapshotSchedulePolicyResponsePtrType ResourcePolicySnapshotSchedulePolicyResponseArgs

func ResourcePolicySnapshotSchedulePolicyResponsePtr(v *ResourcePolicySnapshotSchedulePolicyResponseArgs) ResourcePolicySnapshotSchedulePolicyResponsePtrInput {
	return (*resourcePolicySnapshotSchedulePolicyResponsePtrType)(v)
}

func (*resourcePolicySnapshotSchedulePolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicyResponse)(nil)).Elem()
}

func (i *resourcePolicySnapshotSchedulePolicyResponsePtrType) ToResourcePolicySnapshotSchedulePolicyResponsePtrOutput() ResourcePolicySnapshotSchedulePolicyResponsePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyResponsePtrOutputWithContext(context.Background())
}

func (i *resourcePolicySnapshotSchedulePolicyResponsePtrType) ToResourcePolicySnapshotSchedulePolicyResponsePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyResponsePtrOutput)
}

// A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained.
type ResourcePolicySnapshotSchedulePolicyResponseOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyResponse)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyResponseOutput) ToResourcePolicySnapshotSchedulePolicyResponseOutput() ResourcePolicySnapshotSchedulePolicyResponseOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyResponseOutput) ToResourcePolicySnapshotSchedulePolicyResponseOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyResponseOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyResponseOutput) ToResourcePolicySnapshotSchedulePolicyResponsePtrOutput() ResourcePolicySnapshotSchedulePolicyResponsePtrOutput {
	return o.ToResourcePolicySnapshotSchedulePolicyResponsePtrOutputWithContext(context.Background())
}

func (o ResourcePolicySnapshotSchedulePolicyResponseOutput) ToResourcePolicySnapshotSchedulePolicyResponsePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyResponsePtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyResponse) *ResourcePolicySnapshotSchedulePolicyResponse {
		return &v
	}).(ResourcePolicySnapshotSchedulePolicyResponsePtrOutput)
}

// Retention policy applied to snapshots created by this resource policy.
func (o ResourcePolicySnapshotSchedulePolicyResponseOutput) RetentionPolicy() ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyResponse) ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse {
		return v.RetentionPolicy
	}).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput)
}

// A Vm Maintenance Policy specifies what kind of infrastructure maintenance we are allowed to perform on this VM and when. Schedule that is applied to disks covered by this policy.
func (o ResourcePolicySnapshotSchedulePolicyResponseOutput) Schedule() ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyResponse) ResourcePolicySnapshotSchedulePolicyScheduleResponse {
		return v.Schedule
	}).(ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput)
}

// Properties with which snapshots are created such as labels, encryption keys.
func (o ResourcePolicySnapshotSchedulePolicyResponseOutput) SnapshotProperties() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyResponse) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse {
		return v.SnapshotProperties
	}).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput)
}

type ResourcePolicySnapshotSchedulePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicyResponse)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyResponsePtrOutput) ToResourcePolicySnapshotSchedulePolicyResponsePtrOutput() ResourcePolicySnapshotSchedulePolicyResponsePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyResponsePtrOutput) ToResourcePolicySnapshotSchedulePolicyResponsePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyResponsePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyResponsePtrOutput) Elem() ResourcePolicySnapshotSchedulePolicyResponseOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyResponse) ResourcePolicySnapshotSchedulePolicyResponse {
		return *v
	}).(ResourcePolicySnapshotSchedulePolicyResponseOutput)
}

// Retention policy applied to snapshots created by this resource policy.
func (o ResourcePolicySnapshotSchedulePolicyResponsePtrOutput) RetentionPolicy() ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyResponse) *ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse {
		if v == nil {
			return nil
		}
		return &v.RetentionPolicy
	}).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput)
}

// A Vm Maintenance Policy specifies what kind of infrastructure maintenance we are allowed to perform on this VM and when. Schedule that is applied to disks covered by this policy.
func (o ResourcePolicySnapshotSchedulePolicyResponsePtrOutput) Schedule() ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyResponse) *ResourcePolicySnapshotSchedulePolicyScheduleResponse {
		if v == nil {
			return nil
		}
		return &v.Schedule
	}).(ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput)
}

// Properties with which snapshots are created such as labels, encryption keys.
func (o ResourcePolicySnapshotSchedulePolicyResponsePtrOutput) SnapshotProperties() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyResponse) *ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.SnapshotProperties
	}).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput)
}

// Policy for retention of scheduled snapshots.
type ResourcePolicySnapshotSchedulePolicyRetentionPolicy struct {
	// Maximum age of the snapshot that is allowed to be kept.
	MaxRetentionDays *int `pulumi:"maxRetentionDays"`
	// Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
	OnSourceDiskDelete *string `pulumi:"onSourceDiskDelete"`
}

// ResourcePolicySnapshotSchedulePolicyRetentionPolicyInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs and ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyRetentionPolicyInput` via:
//
//          ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs{...}
type ResourcePolicySnapshotSchedulePolicyRetentionPolicyInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput
	ToResourcePolicySnapshotSchedulePolicyRetentionPolicyOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput
}

// Policy for retention of scheduled snapshots.
type ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs struct {
	// Maximum age of the snapshot that is allowed to be kept.
	MaxRetentionDays pulumi.IntPtrInput `pulumi:"maxRetentionDays"`
	// Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
	OnSourceDiskDelete *ResourcePolicySnapshotSchedulePolicyRetentionPolicyOnSourceDiskDelete `pulumi:"onSourceDiskDelete"`
}

func (ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyRetentionPolicy)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyRetentionPolicyOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput)
}

func (i ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput).ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(ctx)
}

// ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs, ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtr and ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrInput` via:
//
//          ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs{...}
//
//  or:
//
//          nil
type ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput
	ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput
}

type resourcePolicySnapshotSchedulePolicyRetentionPolicyPtrType ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs

func ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtr(v *ResourcePolicySnapshotSchedulePolicyRetentionPolicyArgs) ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrInput {
	return (*resourcePolicySnapshotSchedulePolicyRetentionPolicyPtrType)(v)
}

func (*resourcePolicySnapshotSchedulePolicyRetentionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicyRetentionPolicy)(nil)).Elem()
}

func (i *resourcePolicySnapshotSchedulePolicyRetentionPolicyPtrType) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i *resourcePolicySnapshotSchedulePolicyRetentionPolicyPtrType) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput)
}

// Policy for retention of scheduled snapshots.
type ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyRetentionPolicy)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return o.ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(context.Background())
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyRetentionPolicy) *ResourcePolicySnapshotSchedulePolicyRetentionPolicy {
		return &v
	}).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput)
}

// Maximum age of the snapshot that is allowed to be kept.
func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput) MaxRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyRetentionPolicy) *int { return v.MaxRetentionDays }).(pulumi.IntPtrOutput)
}

// Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput) OnSourceDiskDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyRetentionPolicy) *string { return v.OnSourceDiskDelete }).(pulumi.StringPtrOutput)
}

type ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicyRetentionPolicy)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput) Elem() ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyRetentionPolicy) ResourcePolicySnapshotSchedulePolicyRetentionPolicy {
		return *v
	}).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput)
}

// Maximum age of the snapshot that is allowed to be kept.
func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput) MaxRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyRetentionPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetentionDays
	}).(pulumi.IntPtrOutput)
}

// Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput) OnSourceDiskDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyRetentionPolicy) *string {
		if v == nil {
			return nil
		}
		return v.OnSourceDiskDelete
	}).(pulumi.StringPtrOutput)
}

// Policy for retention of scheduled snapshots.
type ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse struct {
	// Maximum age of the snapshot that is allowed to be kept.
	MaxRetentionDays int `pulumi:"maxRetentionDays"`
	// Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
	OnSourceDiskDelete string `pulumi:"onSourceDiskDelete"`
}

// ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseArgs and ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseInput` via:
//
//          ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseArgs{...}
type ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput
	ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput
}

// Policy for retention of scheduled snapshots.
type ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseArgs struct {
	// Maximum age of the snapshot that is allowed to be kept.
	MaxRetentionDays pulumi.IntInput `pulumi:"maxRetentionDays"`
	// Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
	OnSourceDiskDelete pulumi.StringInput `pulumi:"onSourceDiskDelete"`
}

func (ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseArgs) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseArgs) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput)
}

func (i ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseArgs) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseArgs) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput).ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutputWithContext(ctx)
}

// ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseArgs, ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtr and ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrInput` via:
//
//          ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseArgs{...}
//
//  or:
//
//          nil
type ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput
	ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput
}

type resourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrType ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseArgs

func ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtr(v *ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseArgs) ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrInput {
	return (*resourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrType)(v)
}

func (*resourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse)(nil)).Elem()
}

func (i *resourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrType) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *resourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrType) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput)
}

// Policy for retention of scheduled snapshots.
type ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput {
	return o.ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutputWithContext(context.Background())
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse) *ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse {
		return &v
	}).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput)
}

// Maximum age of the snapshot that is allowed to be kept.
func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput) MaxRetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse) int { return v.MaxRetentionDays }).(pulumi.IntOutput)
}

// Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput) OnSourceDiskDelete() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse) string {
		return v.OnSourceDiskDelete
	}).(pulumi.StringOutput)
}

type ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput() ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput) ToResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput) Elem() ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse) ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse {
		return *v
	}).(ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput)
}

// Maximum age of the snapshot that is allowed to be kept.
func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput) MaxRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxRetentionDays
	}).(pulumi.IntPtrOutput)
}

// Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
func (o ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput) OnSourceDiskDelete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OnSourceDiskDelete
	}).(pulumi.StringPtrOutput)
}

// A schedule for disks where the schedueled operations are performed.
type ResourcePolicySnapshotSchedulePolicySchedule struct {
	DailySchedule  *ResourcePolicyDailyCycle  `pulumi:"dailySchedule"`
	HourlySchedule *ResourcePolicyHourlyCycle `pulumi:"hourlySchedule"`
	WeeklySchedule *ResourcePolicyWeeklyCycle `pulumi:"weeklySchedule"`
}

// ResourcePolicySnapshotSchedulePolicyScheduleInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyScheduleArgs and ResourcePolicySnapshotSchedulePolicyScheduleOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyScheduleInput` via:
//
//          ResourcePolicySnapshotSchedulePolicyScheduleArgs{...}
type ResourcePolicySnapshotSchedulePolicyScheduleInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyScheduleOutput() ResourcePolicySnapshotSchedulePolicyScheduleOutput
	ToResourcePolicySnapshotSchedulePolicyScheduleOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyScheduleOutput
}

// A schedule for disks where the schedueled operations are performed.
type ResourcePolicySnapshotSchedulePolicyScheduleArgs struct {
	DailySchedule  ResourcePolicyDailyCyclePtrInput  `pulumi:"dailySchedule"`
	HourlySchedule ResourcePolicyHourlyCyclePtrInput `pulumi:"hourlySchedule"`
	WeeklySchedule ResourcePolicyWeeklyCyclePtrInput `pulumi:"weeklySchedule"`
}

func (ResourcePolicySnapshotSchedulePolicyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicySchedule)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleArgs) ToResourcePolicySnapshotSchedulePolicyScheduleOutput() ResourcePolicySnapshotSchedulePolicyScheduleOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyScheduleOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleArgs) ToResourcePolicySnapshotSchedulePolicyScheduleOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleOutput)
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleArgs) ToResourcePolicySnapshotSchedulePolicySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleArgs) ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleOutput).ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(ctx)
}

// ResourcePolicySnapshotSchedulePolicySchedulePtrInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyScheduleArgs, ResourcePolicySnapshotSchedulePolicySchedulePtr and ResourcePolicySnapshotSchedulePolicySchedulePtrOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicySchedulePtrInput` via:
//
//          ResourcePolicySnapshotSchedulePolicyScheduleArgs{...}
//
//  or:
//
//          nil
type ResourcePolicySnapshotSchedulePolicySchedulePtrInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicySchedulePtrOutput
	ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicySchedulePtrOutput
}

type resourcePolicySnapshotSchedulePolicySchedulePtrType ResourcePolicySnapshotSchedulePolicyScheduleArgs

func ResourcePolicySnapshotSchedulePolicySchedulePtr(v *ResourcePolicySnapshotSchedulePolicyScheduleArgs) ResourcePolicySnapshotSchedulePolicySchedulePtrInput {
	return (*resourcePolicySnapshotSchedulePolicySchedulePtrType)(v)
}

func (*resourcePolicySnapshotSchedulePolicySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicySchedule)(nil)).Elem()
}

func (i *resourcePolicySnapshotSchedulePolicySchedulePtrType) ToResourcePolicySnapshotSchedulePolicySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(context.Background())
}

func (i *resourcePolicySnapshotSchedulePolicySchedulePtrType) ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicySchedulePtrOutput)
}

// A schedule for disks where the schedueled operations are performed.
type ResourcePolicySnapshotSchedulePolicyScheduleOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicySchedule)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleOutput) ToResourcePolicySnapshotSchedulePolicyScheduleOutput() ResourcePolicySnapshotSchedulePolicyScheduleOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleOutput) ToResourcePolicySnapshotSchedulePolicyScheduleOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleOutput) ToResourcePolicySnapshotSchedulePolicySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return o.ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(context.Background())
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleOutput) ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySchedule) *ResourcePolicySnapshotSchedulePolicySchedule {
		return &v
	}).(ResourcePolicySnapshotSchedulePolicySchedulePtrOutput)
}
func (o ResourcePolicySnapshotSchedulePolicyScheduleOutput) DailySchedule() ResourcePolicyDailyCyclePtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySchedule) *ResourcePolicyDailyCycle { return v.DailySchedule }).(ResourcePolicyDailyCyclePtrOutput)
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleOutput) HourlySchedule() ResourcePolicyHourlyCyclePtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySchedule) *ResourcePolicyHourlyCycle {
		return v.HourlySchedule
	}).(ResourcePolicyHourlyCyclePtrOutput)
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleOutput) WeeklySchedule() ResourcePolicyWeeklyCyclePtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySchedule) *ResourcePolicyWeeklyCycle {
		return v.WeeklySchedule
	}).(ResourcePolicyWeeklyCyclePtrOutput)
}

type ResourcePolicySnapshotSchedulePolicySchedulePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicySchedule)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicySchedulePtrOutput) ToResourcePolicySnapshotSchedulePolicySchedulePtrOutput() ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicySchedulePtrOutput) ToResourcePolicySnapshotSchedulePolicySchedulePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySchedulePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicySchedulePtrOutput) Elem() ResourcePolicySnapshotSchedulePolicyScheduleOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySchedule) ResourcePolicySnapshotSchedulePolicySchedule {
		return *v
	}).(ResourcePolicySnapshotSchedulePolicyScheduleOutput)
}

func (o ResourcePolicySnapshotSchedulePolicySchedulePtrOutput) DailySchedule() ResourcePolicyDailyCyclePtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySchedule) *ResourcePolicyDailyCycle {
		if v == nil {
			return nil
		}
		return v.DailySchedule
	}).(ResourcePolicyDailyCyclePtrOutput)
}

func (o ResourcePolicySnapshotSchedulePolicySchedulePtrOutput) HourlySchedule() ResourcePolicyHourlyCyclePtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySchedule) *ResourcePolicyHourlyCycle {
		if v == nil {
			return nil
		}
		return v.HourlySchedule
	}).(ResourcePolicyHourlyCyclePtrOutput)
}

func (o ResourcePolicySnapshotSchedulePolicySchedulePtrOutput) WeeklySchedule() ResourcePolicyWeeklyCyclePtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySchedule) *ResourcePolicyWeeklyCycle {
		if v == nil {
			return nil
		}
		return v.WeeklySchedule
	}).(ResourcePolicyWeeklyCyclePtrOutput)
}

// A schedule for disks where the schedueled operations are performed.
type ResourcePolicySnapshotSchedulePolicyScheduleResponse struct {
	DailySchedule  ResourcePolicyDailyCycleResponse  `pulumi:"dailySchedule"`
	HourlySchedule ResourcePolicyHourlyCycleResponse `pulumi:"hourlySchedule"`
	WeeklySchedule ResourcePolicyWeeklyCycleResponse `pulumi:"weeklySchedule"`
}

// ResourcePolicySnapshotSchedulePolicyScheduleResponseInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyScheduleResponseArgs and ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyScheduleResponseInput` via:
//
//          ResourcePolicySnapshotSchedulePolicyScheduleResponseArgs{...}
type ResourcePolicySnapshotSchedulePolicyScheduleResponseInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyScheduleResponseOutput() ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput
	ToResourcePolicySnapshotSchedulePolicyScheduleResponseOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput
}

// A schedule for disks where the schedueled operations are performed.
type ResourcePolicySnapshotSchedulePolicyScheduleResponseArgs struct {
	DailySchedule  ResourcePolicyDailyCycleResponseInput  `pulumi:"dailySchedule"`
	HourlySchedule ResourcePolicyHourlyCycleResponseInput `pulumi:"hourlySchedule"`
	WeeklySchedule ResourcePolicyWeeklyCycleResponseInput `pulumi:"weeklySchedule"`
}

func (ResourcePolicySnapshotSchedulePolicyScheduleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyScheduleResponse)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleResponseArgs) ToResourcePolicySnapshotSchedulePolicyScheduleResponseOutput() ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyScheduleResponseOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleResponseArgs) ToResourcePolicySnapshotSchedulePolicyScheduleResponseOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput)
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleResponseArgs) ToResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicyScheduleResponseArgs) ToResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput).ToResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutputWithContext(ctx)
}

// ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrInput is an input type that accepts ResourcePolicySnapshotSchedulePolicyScheduleResponseArgs, ResourcePolicySnapshotSchedulePolicyScheduleResponsePtr and ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrInput` via:
//
//          ResourcePolicySnapshotSchedulePolicyScheduleResponseArgs{...}
//
//  or:
//
//          nil
type ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput
	ToResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput
}

type resourcePolicySnapshotSchedulePolicyScheduleResponsePtrType ResourcePolicySnapshotSchedulePolicyScheduleResponseArgs

func ResourcePolicySnapshotSchedulePolicyScheduleResponsePtr(v *ResourcePolicySnapshotSchedulePolicyScheduleResponseArgs) ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrInput {
	return (*resourcePolicySnapshotSchedulePolicyScheduleResponsePtrType)(v)
}

func (*resourcePolicySnapshotSchedulePolicyScheduleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicyScheduleResponse)(nil)).Elem()
}

func (i *resourcePolicySnapshotSchedulePolicyScheduleResponsePtrType) ToResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutputWithContext(context.Background())
}

func (i *resourcePolicySnapshotSchedulePolicyScheduleResponsePtrType) ToResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput)
}

// A schedule for disks where the schedueled operations are performed.
type ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicyScheduleResponse)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput) ToResourcePolicySnapshotSchedulePolicyScheduleResponseOutput() ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput) ToResourcePolicySnapshotSchedulePolicyScheduleResponseOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput) ToResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput {
	return o.ToResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutputWithContext(context.Background())
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput) ToResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyScheduleResponse) *ResourcePolicySnapshotSchedulePolicyScheduleResponse {
		return &v
	}).(ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput)
}
func (o ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput) DailySchedule() ResourcePolicyDailyCycleResponseOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyScheduleResponse) ResourcePolicyDailyCycleResponse {
		return v.DailySchedule
	}).(ResourcePolicyDailyCycleResponseOutput)
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput) HourlySchedule() ResourcePolicyHourlyCycleResponseOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyScheduleResponse) ResourcePolicyHourlyCycleResponse {
		return v.HourlySchedule
	}).(ResourcePolicyHourlyCycleResponseOutput)
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput) WeeklySchedule() ResourcePolicyWeeklyCycleResponseOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicyScheduleResponse) ResourcePolicyWeeklyCycleResponse {
		return v.WeeklySchedule
	}).(ResourcePolicyWeeklyCycleResponseOutput)
}

type ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicyScheduleResponse)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput) ToResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput() ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput) ToResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput) Elem() ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyScheduleResponse) ResourcePolicySnapshotSchedulePolicyScheduleResponse {
		return *v
	}).(ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput)
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput) DailySchedule() ResourcePolicyDailyCycleResponsePtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyScheduleResponse) *ResourcePolicyDailyCycleResponse {
		if v == nil {
			return nil
		}
		return &v.DailySchedule
	}).(ResourcePolicyDailyCycleResponsePtrOutput)
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput) HourlySchedule() ResourcePolicyHourlyCycleResponsePtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyScheduleResponse) *ResourcePolicyHourlyCycleResponse {
		if v == nil {
			return nil
		}
		return &v.HourlySchedule
	}).(ResourcePolicyHourlyCycleResponsePtrOutput)
}

func (o ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput) WeeklySchedule() ResourcePolicyWeeklyCycleResponsePtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicyScheduleResponse) *ResourcePolicyWeeklyCycleResponse {
		if v == nil {
			return nil
		}
		return &v.WeeklySchedule
	}).(ResourcePolicyWeeklyCycleResponsePtrOutput)
}

// Specified snapshot properties for scheduled snapshots created by this policy.
type ResourcePolicySnapshotSchedulePolicySnapshotProperties struct {
	// Chain name that the snapshot is created in.
	ChainName *string `pulumi:"chainName"`
	// Indication to perform a 'guest aware' snapshot.
	GuestFlush *bool `pulumi:"guestFlush"`
	// Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty.
	Labels map[string]string `pulumi:"labels"`
	// Cloud Storage bucket storage location of the auto snapshot (regional or multi-regional).
	StorageLocations []string `pulumi:"storageLocations"`
}

// ResourcePolicySnapshotSchedulePolicySnapshotPropertiesInput is an input type that accepts ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs and ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicySnapshotPropertiesInput` via:
//
//          ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs{...}
type ResourcePolicySnapshotSchedulePolicySnapshotPropertiesInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput
	ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput
}

// Specified snapshot properties for scheduled snapshots created by this policy.
type ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs struct {
	// Chain name that the snapshot is created in.
	ChainName pulumi.StringPtrInput `pulumi:"chainName"`
	// Indication to perform a 'guest aware' snapshot.
	GuestFlush pulumi.BoolPtrInput `pulumi:"guestFlush"`
	// Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Cloud Storage bucket storage location of the auto snapshot (regional or multi-regional).
	StorageLocations pulumi.StringArrayInput `pulumi:"storageLocations"`
}

func (ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicySnapshotProperties)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput {
	return i.ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput)
}

func (i ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput).ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(ctx)
}

// ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrInput is an input type that accepts ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs, ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtr and ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrInput` via:
//
//          ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs{...}
//
//  or:
//
//          nil
type ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput
	ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput
}

type resourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrType ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs

func ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtr(v *ResourcePolicySnapshotSchedulePolicySnapshotPropertiesArgs) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrInput {
	return (*resourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrType)(v)
}

func (*resourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicySnapshotProperties)(nil)).Elem()
}

func (i *resourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrType) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(context.Background())
}

func (i *resourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrType) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput)
}

// Specified snapshot properties for scheduled snapshots created by this policy.
type ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicySnapshotProperties)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return o.ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(context.Background())
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySnapshotProperties) *ResourcePolicySnapshotSchedulePolicySnapshotProperties {
		return &v
	}).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput)
}

// Chain name that the snapshot is created in.
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) ChainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySnapshotProperties) *string { return v.ChainName }).(pulumi.StringPtrOutput)
}

// Indication to perform a 'guest aware' snapshot.
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) GuestFlush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySnapshotProperties) *bool { return v.GuestFlush }).(pulumi.BoolPtrOutput)
}

// Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty.
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySnapshotProperties) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Cloud Storage bucket storage location of the auto snapshot (regional or multi-regional).
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput) StorageLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySnapshotProperties) []string { return v.StorageLocations }).(pulumi.StringArrayOutput)
}

type ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicySnapshotProperties)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput) Elem() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySnapshotProperties) ResourcePolicySnapshotSchedulePolicySnapshotProperties {
		return *v
	}).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput)
}

// Chain name that the snapshot is created in.
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput) ChainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySnapshotProperties) *string {
		if v == nil {
			return nil
		}
		return v.ChainName
	}).(pulumi.StringPtrOutput)
}

// Indication to perform a 'guest aware' snapshot.
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput) GuestFlush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySnapshotProperties) *bool {
		if v == nil {
			return nil
		}
		return v.GuestFlush
	}).(pulumi.BoolPtrOutput)
}

// Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty.
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySnapshotProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Cloud Storage bucket storage location of the auto snapshot (regional or multi-regional).
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput) StorageLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySnapshotProperties) []string {
		if v == nil {
			return nil
		}
		return v.StorageLocations
	}).(pulumi.StringArrayOutput)
}

// Specified snapshot properties for scheduled snapshots created by this policy.
type ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse struct {
	// Chain name that the snapshot is created in.
	ChainName string `pulumi:"chainName"`
	// Indication to perform a 'guest aware' snapshot.
	GuestFlush bool `pulumi:"guestFlush"`
	// Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty.
	Labels map[string]string `pulumi:"labels"`
	// Cloud Storage bucket storage location of the auto snapshot (regional or multi-regional).
	StorageLocations []string `pulumi:"storageLocations"`
}

// ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseInput is an input type that accepts ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseArgs and ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseInput` via:
//
//          ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseArgs{...}
type ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput
	ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput
}

// Specified snapshot properties for scheduled snapshots created by this policy.
type ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseArgs struct {
	// Chain name that the snapshot is created in.
	ChainName pulumi.StringInput `pulumi:"chainName"`
	// Indication to perform a 'guest aware' snapshot.
	GuestFlush pulumi.BoolInput `pulumi:"guestFlush"`
	// Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Cloud Storage bucket storage location of the auto snapshot (regional or multi-regional).
	StorageLocations pulumi.StringArrayInput `pulumi:"storageLocations"`
}

func (ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse)(nil)).Elem()
}

func (i ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseArgs) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput {
	return i.ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseArgs) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput)
}

func (i ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseArgs) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseArgs) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput).ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutputWithContext(ctx)
}

// ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrInput is an input type that accepts ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseArgs, ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtr and ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput values.
// You can construct a concrete instance of `ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrInput` via:
//
//          ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseArgs{...}
//
//  or:
//
//          nil
type ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrInput interface {
	pulumi.Input

	ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput
	ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutputWithContext(context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput
}

type resourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrType ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseArgs

func ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtr(v *ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseArgs) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrInput {
	return (*resourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrType)(v)
}

func (*resourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse)(nil)).Elem()
}

func (i *resourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrType) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput {
	return i.ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutputWithContext(context.Background())
}

func (i *resourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrType) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput)
}

// Specified snapshot properties for scheduled snapshots created by this policy.
type ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput {
	return o.ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutputWithContext(context.Background())
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse) *ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse {
		return &v
	}).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput)
}

// Chain name that the snapshot is created in.
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput) ChainName() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse) string { return v.ChainName }).(pulumi.StringOutput)
}

// Indication to perform a 'guest aware' snapshot.
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput) GuestFlush() pulumi.BoolOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse) bool { return v.GuestFlush }).(pulumi.BoolOutput)
}

// Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty.
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse) map[string]string {
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Cloud Storage bucket storage location of the auto snapshot (regional or multi-regional).
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput) StorageLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse) []string {
		return v.StorageLocations
	}).(pulumi.StringArrayOutput)
}

type ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse)(nil)).Elem()
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput) ToResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutputWithContext(ctx context.Context) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput {
	return o
}

func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput) Elem() ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse) ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse {
		return *v
	}).(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput)
}

// Chain name that the snapshot is created in.
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput) ChainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ChainName
	}).(pulumi.StringPtrOutput)
}

// Indication to perform a 'guest aware' snapshot.
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput) GuestFlush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.GuestFlush
	}).(pulumi.BoolPtrOutput)
}

// Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty.
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Cloud Storage bucket storage location of the auto snapshot (regional or multi-regional).
func (o ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput) StorageLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.StorageLocations
	}).(pulumi.StringArrayOutput)
}

// Time window specified for weekly operations.
type ResourcePolicyWeeklyCycle struct {
	// Up to 7 intervals/windows, one for each day of the week.
	DayOfWeeks []ResourcePolicyWeeklyCycleDayOfWeek `pulumi:"dayOfWeeks"`
}

// ResourcePolicyWeeklyCycleInput is an input type that accepts ResourcePolicyWeeklyCycleArgs and ResourcePolicyWeeklyCycleOutput values.
// You can construct a concrete instance of `ResourcePolicyWeeklyCycleInput` via:
//
//          ResourcePolicyWeeklyCycleArgs{...}
type ResourcePolicyWeeklyCycleInput interface {
	pulumi.Input

	ToResourcePolicyWeeklyCycleOutput() ResourcePolicyWeeklyCycleOutput
	ToResourcePolicyWeeklyCycleOutputWithContext(context.Context) ResourcePolicyWeeklyCycleOutput
}

// Time window specified for weekly operations.
type ResourcePolicyWeeklyCycleArgs struct {
	// Up to 7 intervals/windows, one for each day of the week.
	DayOfWeeks ResourcePolicyWeeklyCycleDayOfWeekArrayInput `pulumi:"dayOfWeeks"`
}

func (ResourcePolicyWeeklyCycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyWeeklyCycle)(nil)).Elem()
}

func (i ResourcePolicyWeeklyCycleArgs) ToResourcePolicyWeeklyCycleOutput() ResourcePolicyWeeklyCycleOutput {
	return i.ToResourcePolicyWeeklyCycleOutputWithContext(context.Background())
}

func (i ResourcePolicyWeeklyCycleArgs) ToResourcePolicyWeeklyCycleOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyWeeklyCycleOutput)
}

func (i ResourcePolicyWeeklyCycleArgs) ToResourcePolicyWeeklyCyclePtrOutput() ResourcePolicyWeeklyCyclePtrOutput {
	return i.ToResourcePolicyWeeklyCyclePtrOutputWithContext(context.Background())
}

func (i ResourcePolicyWeeklyCycleArgs) ToResourcePolicyWeeklyCyclePtrOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyWeeklyCycleOutput).ToResourcePolicyWeeklyCyclePtrOutputWithContext(ctx)
}

// ResourcePolicyWeeklyCyclePtrInput is an input type that accepts ResourcePolicyWeeklyCycleArgs, ResourcePolicyWeeklyCyclePtr and ResourcePolicyWeeklyCyclePtrOutput values.
// You can construct a concrete instance of `ResourcePolicyWeeklyCyclePtrInput` via:
//
//          ResourcePolicyWeeklyCycleArgs{...}
//
//  or:
//
//          nil
type ResourcePolicyWeeklyCyclePtrInput interface {
	pulumi.Input

	ToResourcePolicyWeeklyCyclePtrOutput() ResourcePolicyWeeklyCyclePtrOutput
	ToResourcePolicyWeeklyCyclePtrOutputWithContext(context.Context) ResourcePolicyWeeklyCyclePtrOutput
}

type resourcePolicyWeeklyCyclePtrType ResourcePolicyWeeklyCycleArgs

func ResourcePolicyWeeklyCyclePtr(v *ResourcePolicyWeeklyCycleArgs) ResourcePolicyWeeklyCyclePtrInput {
	return (*resourcePolicyWeeklyCyclePtrType)(v)
}

func (*resourcePolicyWeeklyCyclePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyWeeklyCycle)(nil)).Elem()
}

func (i *resourcePolicyWeeklyCyclePtrType) ToResourcePolicyWeeklyCyclePtrOutput() ResourcePolicyWeeklyCyclePtrOutput {
	return i.ToResourcePolicyWeeklyCyclePtrOutputWithContext(context.Background())
}

func (i *resourcePolicyWeeklyCyclePtrType) ToResourcePolicyWeeklyCyclePtrOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyWeeklyCyclePtrOutput)
}

// Time window specified for weekly operations.
type ResourcePolicyWeeklyCycleOutput struct{ *pulumi.OutputState }

func (ResourcePolicyWeeklyCycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyWeeklyCycle)(nil)).Elem()
}

func (o ResourcePolicyWeeklyCycleOutput) ToResourcePolicyWeeklyCycleOutput() ResourcePolicyWeeklyCycleOutput {
	return o
}

func (o ResourcePolicyWeeklyCycleOutput) ToResourcePolicyWeeklyCycleOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCycleOutput {
	return o
}

func (o ResourcePolicyWeeklyCycleOutput) ToResourcePolicyWeeklyCyclePtrOutput() ResourcePolicyWeeklyCyclePtrOutput {
	return o.ToResourcePolicyWeeklyCyclePtrOutputWithContext(context.Background())
}

func (o ResourcePolicyWeeklyCycleOutput) ToResourcePolicyWeeklyCyclePtrOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCyclePtrOutput {
	return o.ApplyT(func(v ResourcePolicyWeeklyCycle) *ResourcePolicyWeeklyCycle {
		return &v
	}).(ResourcePolicyWeeklyCyclePtrOutput)
}

// Up to 7 intervals/windows, one for each day of the week.
func (o ResourcePolicyWeeklyCycleOutput) DayOfWeeks() ResourcePolicyWeeklyCycleDayOfWeekArrayOutput {
	return o.ApplyT(func(v ResourcePolicyWeeklyCycle) []ResourcePolicyWeeklyCycleDayOfWeek { return v.DayOfWeeks }).(ResourcePolicyWeeklyCycleDayOfWeekArrayOutput)
}

type ResourcePolicyWeeklyCyclePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicyWeeklyCyclePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyWeeklyCycle)(nil)).Elem()
}

func (o ResourcePolicyWeeklyCyclePtrOutput) ToResourcePolicyWeeklyCyclePtrOutput() ResourcePolicyWeeklyCyclePtrOutput {
	return o
}

func (o ResourcePolicyWeeklyCyclePtrOutput) ToResourcePolicyWeeklyCyclePtrOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCyclePtrOutput {
	return o
}

func (o ResourcePolicyWeeklyCyclePtrOutput) Elem() ResourcePolicyWeeklyCycleOutput {
	return o.ApplyT(func(v *ResourcePolicyWeeklyCycle) ResourcePolicyWeeklyCycle { return *v }).(ResourcePolicyWeeklyCycleOutput)
}

// Up to 7 intervals/windows, one for each day of the week.
func (o ResourcePolicyWeeklyCyclePtrOutput) DayOfWeeks() ResourcePolicyWeeklyCycleDayOfWeekArrayOutput {
	return o.ApplyT(func(v *ResourcePolicyWeeklyCycle) []ResourcePolicyWeeklyCycleDayOfWeek {
		if v == nil {
			return nil
		}
		return v.DayOfWeeks
	}).(ResourcePolicyWeeklyCycleDayOfWeekArrayOutput)
}

type ResourcePolicyWeeklyCycleDayOfWeek struct {
	// Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	Day *string `pulumi:"day"`
	// Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
	StartTime *string `pulumi:"startTime"`
}

// ResourcePolicyWeeklyCycleDayOfWeekInput is an input type that accepts ResourcePolicyWeeklyCycleDayOfWeekArgs and ResourcePolicyWeeklyCycleDayOfWeekOutput values.
// You can construct a concrete instance of `ResourcePolicyWeeklyCycleDayOfWeekInput` via:
//
//          ResourcePolicyWeeklyCycleDayOfWeekArgs{...}
type ResourcePolicyWeeklyCycleDayOfWeekInput interface {
	pulumi.Input

	ToResourcePolicyWeeklyCycleDayOfWeekOutput() ResourcePolicyWeeklyCycleDayOfWeekOutput
	ToResourcePolicyWeeklyCycleDayOfWeekOutputWithContext(context.Context) ResourcePolicyWeeklyCycleDayOfWeekOutput
}

type ResourcePolicyWeeklyCycleDayOfWeekArgs struct {
	// Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	Day *ResourcePolicyWeeklyCycleDayOfWeekDay `pulumi:"day"`
	// Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (ResourcePolicyWeeklyCycleDayOfWeekArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyWeeklyCycleDayOfWeek)(nil)).Elem()
}

func (i ResourcePolicyWeeklyCycleDayOfWeekArgs) ToResourcePolicyWeeklyCycleDayOfWeekOutput() ResourcePolicyWeeklyCycleDayOfWeekOutput {
	return i.ToResourcePolicyWeeklyCycleDayOfWeekOutputWithContext(context.Background())
}

func (i ResourcePolicyWeeklyCycleDayOfWeekArgs) ToResourcePolicyWeeklyCycleDayOfWeekOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCycleDayOfWeekOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyWeeklyCycleDayOfWeekOutput)
}

// ResourcePolicyWeeklyCycleDayOfWeekArrayInput is an input type that accepts ResourcePolicyWeeklyCycleDayOfWeekArray and ResourcePolicyWeeklyCycleDayOfWeekArrayOutput values.
// You can construct a concrete instance of `ResourcePolicyWeeklyCycleDayOfWeekArrayInput` via:
//
//          ResourcePolicyWeeklyCycleDayOfWeekArray{ ResourcePolicyWeeklyCycleDayOfWeekArgs{...} }
type ResourcePolicyWeeklyCycleDayOfWeekArrayInput interface {
	pulumi.Input

	ToResourcePolicyWeeklyCycleDayOfWeekArrayOutput() ResourcePolicyWeeklyCycleDayOfWeekArrayOutput
	ToResourcePolicyWeeklyCycleDayOfWeekArrayOutputWithContext(context.Context) ResourcePolicyWeeklyCycleDayOfWeekArrayOutput
}

type ResourcePolicyWeeklyCycleDayOfWeekArray []ResourcePolicyWeeklyCycleDayOfWeekInput

func (ResourcePolicyWeeklyCycleDayOfWeekArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourcePolicyWeeklyCycleDayOfWeek)(nil)).Elem()
}

func (i ResourcePolicyWeeklyCycleDayOfWeekArray) ToResourcePolicyWeeklyCycleDayOfWeekArrayOutput() ResourcePolicyWeeklyCycleDayOfWeekArrayOutput {
	return i.ToResourcePolicyWeeklyCycleDayOfWeekArrayOutputWithContext(context.Background())
}

func (i ResourcePolicyWeeklyCycleDayOfWeekArray) ToResourcePolicyWeeklyCycleDayOfWeekArrayOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCycleDayOfWeekArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyWeeklyCycleDayOfWeekArrayOutput)
}

type ResourcePolicyWeeklyCycleDayOfWeekOutput struct{ *pulumi.OutputState }

func (ResourcePolicyWeeklyCycleDayOfWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyWeeklyCycleDayOfWeek)(nil)).Elem()
}

func (o ResourcePolicyWeeklyCycleDayOfWeekOutput) ToResourcePolicyWeeklyCycleDayOfWeekOutput() ResourcePolicyWeeklyCycleDayOfWeekOutput {
	return o
}

func (o ResourcePolicyWeeklyCycleDayOfWeekOutput) ToResourcePolicyWeeklyCycleDayOfWeekOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCycleDayOfWeekOutput {
	return o
}

// Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
func (o ResourcePolicyWeeklyCycleDayOfWeekOutput) Day() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePolicyWeeklyCycleDayOfWeek) *string { return v.Day }).(pulumi.StringPtrOutput)
}

// Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
func (o ResourcePolicyWeeklyCycleDayOfWeekOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePolicyWeeklyCycleDayOfWeek) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type ResourcePolicyWeeklyCycleDayOfWeekArrayOutput struct{ *pulumi.OutputState }

func (ResourcePolicyWeeklyCycleDayOfWeekArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourcePolicyWeeklyCycleDayOfWeek)(nil)).Elem()
}

func (o ResourcePolicyWeeklyCycleDayOfWeekArrayOutput) ToResourcePolicyWeeklyCycleDayOfWeekArrayOutput() ResourcePolicyWeeklyCycleDayOfWeekArrayOutput {
	return o
}

func (o ResourcePolicyWeeklyCycleDayOfWeekArrayOutput) ToResourcePolicyWeeklyCycleDayOfWeekArrayOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCycleDayOfWeekArrayOutput {
	return o
}

func (o ResourcePolicyWeeklyCycleDayOfWeekArrayOutput) Index(i pulumi.IntInput) ResourcePolicyWeeklyCycleDayOfWeekOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourcePolicyWeeklyCycleDayOfWeek {
		return vs[0].([]ResourcePolicyWeeklyCycleDayOfWeek)[vs[1].(int)]
	}).(ResourcePolicyWeeklyCycleDayOfWeekOutput)
}

type ResourcePolicyWeeklyCycleDayOfWeekResponse struct {
	// Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	Day string `pulumi:"day"`
	// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
	Duration string `pulumi:"duration"`
	// Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
	StartTime string `pulumi:"startTime"`
}

// ResourcePolicyWeeklyCycleDayOfWeekResponseInput is an input type that accepts ResourcePolicyWeeklyCycleDayOfWeekResponseArgs and ResourcePolicyWeeklyCycleDayOfWeekResponseOutput values.
// You can construct a concrete instance of `ResourcePolicyWeeklyCycleDayOfWeekResponseInput` via:
//
//          ResourcePolicyWeeklyCycleDayOfWeekResponseArgs{...}
type ResourcePolicyWeeklyCycleDayOfWeekResponseInput interface {
	pulumi.Input

	ToResourcePolicyWeeklyCycleDayOfWeekResponseOutput() ResourcePolicyWeeklyCycleDayOfWeekResponseOutput
	ToResourcePolicyWeeklyCycleDayOfWeekResponseOutputWithContext(context.Context) ResourcePolicyWeeklyCycleDayOfWeekResponseOutput
}

type ResourcePolicyWeeklyCycleDayOfWeekResponseArgs struct {
	// Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
	Day pulumi.StringInput `pulumi:"day"`
	// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
	Duration pulumi.StringInput `pulumi:"duration"`
	// Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (ResourcePolicyWeeklyCycleDayOfWeekResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyWeeklyCycleDayOfWeekResponse)(nil)).Elem()
}

func (i ResourcePolicyWeeklyCycleDayOfWeekResponseArgs) ToResourcePolicyWeeklyCycleDayOfWeekResponseOutput() ResourcePolicyWeeklyCycleDayOfWeekResponseOutput {
	return i.ToResourcePolicyWeeklyCycleDayOfWeekResponseOutputWithContext(context.Background())
}

func (i ResourcePolicyWeeklyCycleDayOfWeekResponseArgs) ToResourcePolicyWeeklyCycleDayOfWeekResponseOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCycleDayOfWeekResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyWeeklyCycleDayOfWeekResponseOutput)
}

// ResourcePolicyWeeklyCycleDayOfWeekResponseArrayInput is an input type that accepts ResourcePolicyWeeklyCycleDayOfWeekResponseArray and ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput values.
// You can construct a concrete instance of `ResourcePolicyWeeklyCycleDayOfWeekResponseArrayInput` via:
//
//          ResourcePolicyWeeklyCycleDayOfWeekResponseArray{ ResourcePolicyWeeklyCycleDayOfWeekResponseArgs{...} }
type ResourcePolicyWeeklyCycleDayOfWeekResponseArrayInput interface {
	pulumi.Input

	ToResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput() ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput
	ToResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutputWithContext(context.Context) ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput
}

type ResourcePolicyWeeklyCycleDayOfWeekResponseArray []ResourcePolicyWeeklyCycleDayOfWeekResponseInput

func (ResourcePolicyWeeklyCycleDayOfWeekResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourcePolicyWeeklyCycleDayOfWeekResponse)(nil)).Elem()
}

func (i ResourcePolicyWeeklyCycleDayOfWeekResponseArray) ToResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput() ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput {
	return i.ToResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutputWithContext(context.Background())
}

func (i ResourcePolicyWeeklyCycleDayOfWeekResponseArray) ToResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput)
}

type ResourcePolicyWeeklyCycleDayOfWeekResponseOutput struct{ *pulumi.OutputState }

func (ResourcePolicyWeeklyCycleDayOfWeekResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyWeeklyCycleDayOfWeekResponse)(nil)).Elem()
}

func (o ResourcePolicyWeeklyCycleDayOfWeekResponseOutput) ToResourcePolicyWeeklyCycleDayOfWeekResponseOutput() ResourcePolicyWeeklyCycleDayOfWeekResponseOutput {
	return o
}

func (o ResourcePolicyWeeklyCycleDayOfWeekResponseOutput) ToResourcePolicyWeeklyCycleDayOfWeekResponseOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCycleDayOfWeekResponseOutput {
	return o
}

// Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
func (o ResourcePolicyWeeklyCycleDayOfWeekResponseOutput) Day() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicyWeeklyCycleDayOfWeekResponse) string { return v.Day }).(pulumi.StringOutput)
}

// [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
func (o ResourcePolicyWeeklyCycleDayOfWeekResponseOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicyWeeklyCycleDayOfWeekResponse) string { return v.Duration }).(pulumi.StringOutput)
}

// Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
func (o ResourcePolicyWeeklyCycleDayOfWeekResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePolicyWeeklyCycleDayOfWeekResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

type ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourcePolicyWeeklyCycleDayOfWeekResponse)(nil)).Elem()
}

func (o ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput) ToResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput() ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput {
	return o
}

func (o ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput) ToResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput {
	return o
}

func (o ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput) Index(i pulumi.IntInput) ResourcePolicyWeeklyCycleDayOfWeekResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourcePolicyWeeklyCycleDayOfWeekResponse {
		return vs[0].([]ResourcePolicyWeeklyCycleDayOfWeekResponse)[vs[1].(int)]
	}).(ResourcePolicyWeeklyCycleDayOfWeekResponseOutput)
}

// Time window specified for weekly operations.
type ResourcePolicyWeeklyCycleResponse struct {
	// Up to 7 intervals/windows, one for each day of the week.
	DayOfWeeks []ResourcePolicyWeeklyCycleDayOfWeekResponse `pulumi:"dayOfWeeks"`
}

// ResourcePolicyWeeklyCycleResponseInput is an input type that accepts ResourcePolicyWeeklyCycleResponseArgs and ResourcePolicyWeeklyCycleResponseOutput values.
// You can construct a concrete instance of `ResourcePolicyWeeklyCycleResponseInput` via:
//
//          ResourcePolicyWeeklyCycleResponseArgs{...}
type ResourcePolicyWeeklyCycleResponseInput interface {
	pulumi.Input

	ToResourcePolicyWeeklyCycleResponseOutput() ResourcePolicyWeeklyCycleResponseOutput
	ToResourcePolicyWeeklyCycleResponseOutputWithContext(context.Context) ResourcePolicyWeeklyCycleResponseOutput
}

// Time window specified for weekly operations.
type ResourcePolicyWeeklyCycleResponseArgs struct {
	// Up to 7 intervals/windows, one for each day of the week.
	DayOfWeeks ResourcePolicyWeeklyCycleDayOfWeekResponseArrayInput `pulumi:"dayOfWeeks"`
}

func (ResourcePolicyWeeklyCycleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyWeeklyCycleResponse)(nil)).Elem()
}

func (i ResourcePolicyWeeklyCycleResponseArgs) ToResourcePolicyWeeklyCycleResponseOutput() ResourcePolicyWeeklyCycleResponseOutput {
	return i.ToResourcePolicyWeeklyCycleResponseOutputWithContext(context.Background())
}

func (i ResourcePolicyWeeklyCycleResponseArgs) ToResourcePolicyWeeklyCycleResponseOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCycleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyWeeklyCycleResponseOutput)
}

func (i ResourcePolicyWeeklyCycleResponseArgs) ToResourcePolicyWeeklyCycleResponsePtrOutput() ResourcePolicyWeeklyCycleResponsePtrOutput {
	return i.ToResourcePolicyWeeklyCycleResponsePtrOutputWithContext(context.Background())
}

func (i ResourcePolicyWeeklyCycleResponseArgs) ToResourcePolicyWeeklyCycleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCycleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyWeeklyCycleResponseOutput).ToResourcePolicyWeeklyCycleResponsePtrOutputWithContext(ctx)
}

// ResourcePolicyWeeklyCycleResponsePtrInput is an input type that accepts ResourcePolicyWeeklyCycleResponseArgs, ResourcePolicyWeeklyCycleResponsePtr and ResourcePolicyWeeklyCycleResponsePtrOutput values.
// You can construct a concrete instance of `ResourcePolicyWeeklyCycleResponsePtrInput` via:
//
//          ResourcePolicyWeeklyCycleResponseArgs{...}
//
//  or:
//
//          nil
type ResourcePolicyWeeklyCycleResponsePtrInput interface {
	pulumi.Input

	ToResourcePolicyWeeklyCycleResponsePtrOutput() ResourcePolicyWeeklyCycleResponsePtrOutput
	ToResourcePolicyWeeklyCycleResponsePtrOutputWithContext(context.Context) ResourcePolicyWeeklyCycleResponsePtrOutput
}

type resourcePolicyWeeklyCycleResponsePtrType ResourcePolicyWeeklyCycleResponseArgs

func ResourcePolicyWeeklyCycleResponsePtr(v *ResourcePolicyWeeklyCycleResponseArgs) ResourcePolicyWeeklyCycleResponsePtrInput {
	return (*resourcePolicyWeeklyCycleResponsePtrType)(v)
}

func (*resourcePolicyWeeklyCycleResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyWeeklyCycleResponse)(nil)).Elem()
}

func (i *resourcePolicyWeeklyCycleResponsePtrType) ToResourcePolicyWeeklyCycleResponsePtrOutput() ResourcePolicyWeeklyCycleResponsePtrOutput {
	return i.ToResourcePolicyWeeklyCycleResponsePtrOutputWithContext(context.Background())
}

func (i *resourcePolicyWeeklyCycleResponsePtrType) ToResourcePolicyWeeklyCycleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCycleResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyWeeklyCycleResponsePtrOutput)
}

// Time window specified for weekly operations.
type ResourcePolicyWeeklyCycleResponseOutput struct{ *pulumi.OutputState }

func (ResourcePolicyWeeklyCycleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyWeeklyCycleResponse)(nil)).Elem()
}

func (o ResourcePolicyWeeklyCycleResponseOutput) ToResourcePolicyWeeklyCycleResponseOutput() ResourcePolicyWeeklyCycleResponseOutput {
	return o
}

func (o ResourcePolicyWeeklyCycleResponseOutput) ToResourcePolicyWeeklyCycleResponseOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCycleResponseOutput {
	return o
}

func (o ResourcePolicyWeeklyCycleResponseOutput) ToResourcePolicyWeeklyCycleResponsePtrOutput() ResourcePolicyWeeklyCycleResponsePtrOutput {
	return o.ToResourcePolicyWeeklyCycleResponsePtrOutputWithContext(context.Background())
}

func (o ResourcePolicyWeeklyCycleResponseOutput) ToResourcePolicyWeeklyCycleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCycleResponsePtrOutput {
	return o.ApplyT(func(v ResourcePolicyWeeklyCycleResponse) *ResourcePolicyWeeklyCycleResponse {
		return &v
	}).(ResourcePolicyWeeklyCycleResponsePtrOutput)
}

// Up to 7 intervals/windows, one for each day of the week.
func (o ResourcePolicyWeeklyCycleResponseOutput) DayOfWeeks() ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput {
	return o.ApplyT(func(v ResourcePolicyWeeklyCycleResponse) []ResourcePolicyWeeklyCycleDayOfWeekResponse {
		return v.DayOfWeeks
	}).(ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput)
}

type ResourcePolicyWeeklyCycleResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicyWeeklyCycleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyWeeklyCycleResponse)(nil)).Elem()
}

func (o ResourcePolicyWeeklyCycleResponsePtrOutput) ToResourcePolicyWeeklyCycleResponsePtrOutput() ResourcePolicyWeeklyCycleResponsePtrOutput {
	return o
}

func (o ResourcePolicyWeeklyCycleResponsePtrOutput) ToResourcePolicyWeeklyCycleResponsePtrOutputWithContext(ctx context.Context) ResourcePolicyWeeklyCycleResponsePtrOutput {
	return o
}

func (o ResourcePolicyWeeklyCycleResponsePtrOutput) Elem() ResourcePolicyWeeklyCycleResponseOutput {
	return o.ApplyT(func(v *ResourcePolicyWeeklyCycleResponse) ResourcePolicyWeeklyCycleResponse { return *v }).(ResourcePolicyWeeklyCycleResponseOutput)
}

// Up to 7 intervals/windows, one for each day of the week.
func (o ResourcePolicyWeeklyCycleResponsePtrOutput) DayOfWeeks() ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput {
	return o.ApplyT(func(v *ResourcePolicyWeeklyCycleResponse) []ResourcePolicyWeeklyCycleDayOfWeekResponse {
		if v == nil {
			return nil
		}
		return v.DayOfWeeks
	}).(ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput)
}

type RouteWarningsItemDataItemResponse struct {
	// A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
	Key string `pulumi:"key"`
	// A warning data value corresponding to the key.
	Value string `pulumi:"value"`
}

// RouteWarningsItemDataItemResponseInput is an input type that accepts RouteWarningsItemDataItemResponseArgs and RouteWarningsItemDataItemResponseOutput values.
// You can construct a concrete instance of `RouteWarningsItemDataItemResponseInput` via:
//
//          RouteWarningsItemDataItemResponseArgs{...}
type RouteWarningsItemDataItemResponseInput interface {
	pulumi.Input

	ToRouteWarningsItemDataItemResponseOutput() RouteWarningsItemDataItemResponseOutput
	ToRouteWarningsItemDataItemResponseOutputWithContext(context.Context) RouteWarningsItemDataItemResponseOutput
}

type RouteWarningsItemDataItemResponseArgs struct {
	// A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
	Key pulumi.StringInput `pulumi:"key"`
	// A warning data value corresponding to the key.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RouteWarningsItemDataItemResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteWarningsItemDataItemResponse)(nil)).Elem()
}

func (i RouteWarningsItemDataItemResponseArgs) ToRouteWarningsItemDataItemResponseOutput() RouteWarningsItemDataItemResponseOutput {
	return i.ToRouteWarningsItemDataItemResponseOutputWithContext(context.Background())
}

func (i RouteWarningsItemDataItemResponseArgs) ToRouteWarningsItemDataItemResponseOutputWithContext(ctx context.Context) RouteWarningsItemDataItemResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteWarningsItemDataItemResponseOutput)
}

// RouteWarningsItemDataItemResponseArrayInput is an input type that accepts RouteWarningsItemDataItemResponseArray and RouteWarningsItemDataItemResponseArrayOutput values.
// You can construct a concrete instance of `RouteWarningsItemDataItemResponseArrayInput` via:
//
//          RouteWarningsItemDataItemResponseArray{ RouteWarningsItemDataItemResponseArgs{...} }
type RouteWarningsItemDataItemResponseArrayInput interface {
	pulumi.Input

	ToRouteWarningsItemDataItemResponseArrayOutput() RouteWarningsItemDataItemResponseArrayOutput
	ToRouteWarningsItemDataItemResponseArrayOutputWithContext(context.Context) RouteWarningsItemDataItemResponseArrayOutput
}

type RouteWarningsItemDataItemResponseArray []RouteWarningsItemDataItemResponseInput

func (RouteWarningsItemDataItemResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteWarningsItemDataItemResponse)(nil)).Elem()
}

func (i RouteWarningsItemDataItemResponseArray) ToRouteWarningsItemDataItemResponseArrayOutput() RouteWarningsItemDataItemResponseArrayOutput {
	return i.ToRouteWarningsItemDataItemResponseArrayOutputWithContext(context.Background())
}

func (i RouteWarningsItemDataItemResponseArray) ToRouteWarningsItemDataItemResponseArrayOutputWithContext(ctx context.Context) RouteWarningsItemDataItemResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteWarningsItemDataItemResponseArrayOutput)
}

type RouteWarningsItemDataItemResponseOutput struct{ *pulumi.OutputState }

func (RouteWarningsItemDataItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteWarningsItemDataItemResponse)(nil)).Elem()
}

func (o RouteWarningsItemDataItemResponseOutput) ToRouteWarningsItemDataItemResponseOutput() RouteWarningsItemDataItemResponseOutput {
	return o
}

func (o RouteWarningsItemDataItemResponseOutput) ToRouteWarningsItemDataItemResponseOutputWithContext(ctx context.Context) RouteWarningsItemDataItemResponseOutput {
	return o
}

// A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
func (o RouteWarningsItemDataItemResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RouteWarningsItemDataItemResponse) string { return v.Key }).(pulumi.StringOutput)
}

// A warning data value corresponding to the key.
func (o RouteWarningsItemDataItemResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RouteWarningsItemDataItemResponse) string { return v.Value }).(pulumi.StringOutput)
}

type RouteWarningsItemDataItemResponseArrayOutput struct{ *pulumi.OutputState }

func (RouteWarningsItemDataItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteWarningsItemDataItemResponse)(nil)).Elem()
}

func (o RouteWarningsItemDataItemResponseArrayOutput) ToRouteWarningsItemDataItemResponseArrayOutput() RouteWarningsItemDataItemResponseArrayOutput {
	return o
}

func (o RouteWarningsItemDataItemResponseArrayOutput) ToRouteWarningsItemDataItemResponseArrayOutputWithContext(ctx context.Context) RouteWarningsItemDataItemResponseArrayOutput {
	return o
}

func (o RouteWarningsItemDataItemResponseArrayOutput) Index(i pulumi.IntInput) RouteWarningsItemDataItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteWarningsItemDataItemResponse {
		return vs[0].([]RouteWarningsItemDataItemResponse)[vs[1].(int)]
	}).(RouteWarningsItemDataItemResponseOutput)
}

type RouteWarningsItemResponse struct {
	// A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
	Code string `pulumi:"code"`
	// Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
	Data []RouteWarningsItemDataItemResponse `pulumi:"data"`
	// A human-readable description of the warning code.
	Message string `pulumi:"message"`
}

// RouteWarningsItemResponseInput is an input type that accepts RouteWarningsItemResponseArgs and RouteWarningsItemResponseOutput values.
// You can construct a concrete instance of `RouteWarningsItemResponseInput` via:
//
//          RouteWarningsItemResponseArgs{...}
type RouteWarningsItemResponseInput interface {
	pulumi.Input

	ToRouteWarningsItemResponseOutput() RouteWarningsItemResponseOutput
	ToRouteWarningsItemResponseOutputWithContext(context.Context) RouteWarningsItemResponseOutput
}

type RouteWarningsItemResponseArgs struct {
	// A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
	Code pulumi.StringInput `pulumi:"code"`
	// Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
	Data RouteWarningsItemDataItemResponseArrayInput `pulumi:"data"`
	// A human-readable description of the warning code.
	Message pulumi.StringInput `pulumi:"message"`
}

func (RouteWarningsItemResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteWarningsItemResponse)(nil)).Elem()
}

func (i RouteWarningsItemResponseArgs) ToRouteWarningsItemResponseOutput() RouteWarningsItemResponseOutput {
	return i.ToRouteWarningsItemResponseOutputWithContext(context.Background())
}

func (i RouteWarningsItemResponseArgs) ToRouteWarningsItemResponseOutputWithContext(ctx context.Context) RouteWarningsItemResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteWarningsItemResponseOutput)
}

// RouteWarningsItemResponseArrayInput is an input type that accepts RouteWarningsItemResponseArray and RouteWarningsItemResponseArrayOutput values.
// You can construct a concrete instance of `RouteWarningsItemResponseArrayInput` via:
//
//          RouteWarningsItemResponseArray{ RouteWarningsItemResponseArgs{...} }
type RouteWarningsItemResponseArrayInput interface {
	pulumi.Input

	ToRouteWarningsItemResponseArrayOutput() RouteWarningsItemResponseArrayOutput
	ToRouteWarningsItemResponseArrayOutputWithContext(context.Context) RouteWarningsItemResponseArrayOutput
}

type RouteWarningsItemResponseArray []RouteWarningsItemResponseInput

func (RouteWarningsItemResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteWarningsItemResponse)(nil)).Elem()
}

func (i RouteWarningsItemResponseArray) ToRouteWarningsItemResponseArrayOutput() RouteWarningsItemResponseArrayOutput {
	return i.ToRouteWarningsItemResponseArrayOutputWithContext(context.Background())
}

func (i RouteWarningsItemResponseArray) ToRouteWarningsItemResponseArrayOutputWithContext(ctx context.Context) RouteWarningsItemResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteWarningsItemResponseArrayOutput)
}

type RouteWarningsItemResponseOutput struct{ *pulumi.OutputState }

func (RouteWarningsItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteWarningsItemResponse)(nil)).Elem()
}

func (o RouteWarningsItemResponseOutput) ToRouteWarningsItemResponseOutput() RouteWarningsItemResponseOutput {
	return o
}

func (o RouteWarningsItemResponseOutput) ToRouteWarningsItemResponseOutputWithContext(ctx context.Context) RouteWarningsItemResponseOutput {
	return o
}

// A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
func (o RouteWarningsItemResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v RouteWarningsItemResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
func (o RouteWarningsItemResponseOutput) Data() RouteWarningsItemDataItemResponseArrayOutput {
	return o.ApplyT(func(v RouteWarningsItemResponse) []RouteWarningsItemDataItemResponse { return v.Data }).(RouteWarningsItemDataItemResponseArrayOutput)
}

// A human-readable description of the warning code.
func (o RouteWarningsItemResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v RouteWarningsItemResponse) string { return v.Message }).(pulumi.StringOutput)
}

type RouteWarningsItemResponseArrayOutput struct{ *pulumi.OutputState }

func (RouteWarningsItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteWarningsItemResponse)(nil)).Elem()
}

func (o RouteWarningsItemResponseArrayOutput) ToRouteWarningsItemResponseArrayOutput() RouteWarningsItemResponseArrayOutput {
	return o
}

func (o RouteWarningsItemResponseArrayOutput) ToRouteWarningsItemResponseArrayOutputWithContext(ctx context.Context) RouteWarningsItemResponseArrayOutput {
	return o
}

func (o RouteWarningsItemResponseArrayOutput) Index(i pulumi.IntInput) RouteWarningsItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteWarningsItemResponse {
		return vs[0].([]RouteWarningsItemResponse)[vs[1].(int)]
	}).(RouteWarningsItemResponseOutput)
}

// Description-tagged IP ranges for the router to advertise.
type RouterAdvertisedIpRange struct {
	// User-specified description for the IP range.
	Description *string `pulumi:"description"`
	// The IP range to advertise. The value must be a CIDR-formatted string.
	Range *string `pulumi:"range"`
}

// RouterAdvertisedIpRangeInput is an input type that accepts RouterAdvertisedIpRangeArgs and RouterAdvertisedIpRangeOutput values.
// You can construct a concrete instance of `RouterAdvertisedIpRangeInput` via:
//
//          RouterAdvertisedIpRangeArgs{...}
type RouterAdvertisedIpRangeInput interface {
	pulumi.Input

	ToRouterAdvertisedIpRangeOutput() RouterAdvertisedIpRangeOutput
	ToRouterAdvertisedIpRangeOutputWithContext(context.Context) RouterAdvertisedIpRangeOutput
}

// Description-tagged IP ranges for the router to advertise.
type RouterAdvertisedIpRangeArgs struct {
	// User-specified description for the IP range.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The IP range to advertise. The value must be a CIDR-formatted string.
	Range pulumi.StringPtrInput `pulumi:"range"`
}

func (RouterAdvertisedIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterAdvertisedIpRange)(nil)).Elem()
}

func (i RouterAdvertisedIpRangeArgs) ToRouterAdvertisedIpRangeOutput() RouterAdvertisedIpRangeOutput {
	return i.ToRouterAdvertisedIpRangeOutputWithContext(context.Background())
}

func (i RouterAdvertisedIpRangeArgs) ToRouterAdvertisedIpRangeOutputWithContext(ctx context.Context) RouterAdvertisedIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterAdvertisedIpRangeOutput)
}

// RouterAdvertisedIpRangeArrayInput is an input type that accepts RouterAdvertisedIpRangeArray and RouterAdvertisedIpRangeArrayOutput values.
// You can construct a concrete instance of `RouterAdvertisedIpRangeArrayInput` via:
//
//          RouterAdvertisedIpRangeArray{ RouterAdvertisedIpRangeArgs{...} }
type RouterAdvertisedIpRangeArrayInput interface {
	pulumi.Input

	ToRouterAdvertisedIpRangeArrayOutput() RouterAdvertisedIpRangeArrayOutput
	ToRouterAdvertisedIpRangeArrayOutputWithContext(context.Context) RouterAdvertisedIpRangeArrayOutput
}

type RouterAdvertisedIpRangeArray []RouterAdvertisedIpRangeInput

func (RouterAdvertisedIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterAdvertisedIpRange)(nil)).Elem()
}

func (i RouterAdvertisedIpRangeArray) ToRouterAdvertisedIpRangeArrayOutput() RouterAdvertisedIpRangeArrayOutput {
	return i.ToRouterAdvertisedIpRangeArrayOutputWithContext(context.Background())
}

func (i RouterAdvertisedIpRangeArray) ToRouterAdvertisedIpRangeArrayOutputWithContext(ctx context.Context) RouterAdvertisedIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterAdvertisedIpRangeArrayOutput)
}

// Description-tagged IP ranges for the router to advertise.
type RouterAdvertisedIpRangeOutput struct{ *pulumi.OutputState }

func (RouterAdvertisedIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterAdvertisedIpRange)(nil)).Elem()
}

func (o RouterAdvertisedIpRangeOutput) ToRouterAdvertisedIpRangeOutput() RouterAdvertisedIpRangeOutput {
	return o
}

func (o RouterAdvertisedIpRangeOutput) ToRouterAdvertisedIpRangeOutputWithContext(ctx context.Context) RouterAdvertisedIpRangeOutput {
	return o
}

// User-specified description for the IP range.
func (o RouterAdvertisedIpRangeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterAdvertisedIpRange) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The IP range to advertise. The value must be a CIDR-formatted string.
func (o RouterAdvertisedIpRangeOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterAdvertisedIpRange) *string { return v.Range }).(pulumi.StringPtrOutput)
}

type RouterAdvertisedIpRangeArrayOutput struct{ *pulumi.OutputState }

func (RouterAdvertisedIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterAdvertisedIpRange)(nil)).Elem()
}

func (o RouterAdvertisedIpRangeArrayOutput) ToRouterAdvertisedIpRangeArrayOutput() RouterAdvertisedIpRangeArrayOutput {
	return o
}

func (o RouterAdvertisedIpRangeArrayOutput) ToRouterAdvertisedIpRangeArrayOutputWithContext(ctx context.Context) RouterAdvertisedIpRangeArrayOutput {
	return o
}

func (o RouterAdvertisedIpRangeArrayOutput) Index(i pulumi.IntInput) RouterAdvertisedIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterAdvertisedIpRange {
		return vs[0].([]RouterAdvertisedIpRange)[vs[1].(int)]
	}).(RouterAdvertisedIpRangeOutput)
}

// Description-tagged IP ranges for the router to advertise.
type RouterAdvertisedIpRangeResponse struct {
	// User-specified description for the IP range.
	Description string `pulumi:"description"`
	// The IP range to advertise. The value must be a CIDR-formatted string.
	Range string `pulumi:"range"`
}

// RouterAdvertisedIpRangeResponseInput is an input type that accepts RouterAdvertisedIpRangeResponseArgs and RouterAdvertisedIpRangeResponseOutput values.
// You can construct a concrete instance of `RouterAdvertisedIpRangeResponseInput` via:
//
//          RouterAdvertisedIpRangeResponseArgs{...}
type RouterAdvertisedIpRangeResponseInput interface {
	pulumi.Input

	ToRouterAdvertisedIpRangeResponseOutput() RouterAdvertisedIpRangeResponseOutput
	ToRouterAdvertisedIpRangeResponseOutputWithContext(context.Context) RouterAdvertisedIpRangeResponseOutput
}

// Description-tagged IP ranges for the router to advertise.
type RouterAdvertisedIpRangeResponseArgs struct {
	// User-specified description for the IP range.
	Description pulumi.StringInput `pulumi:"description"`
	// The IP range to advertise. The value must be a CIDR-formatted string.
	Range pulumi.StringInput `pulumi:"range"`
}

func (RouterAdvertisedIpRangeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterAdvertisedIpRangeResponse)(nil)).Elem()
}

func (i RouterAdvertisedIpRangeResponseArgs) ToRouterAdvertisedIpRangeResponseOutput() RouterAdvertisedIpRangeResponseOutput {
	return i.ToRouterAdvertisedIpRangeResponseOutputWithContext(context.Background())
}

func (i RouterAdvertisedIpRangeResponseArgs) ToRouterAdvertisedIpRangeResponseOutputWithContext(ctx context.Context) RouterAdvertisedIpRangeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterAdvertisedIpRangeResponseOutput)
}

// RouterAdvertisedIpRangeResponseArrayInput is an input type that accepts RouterAdvertisedIpRangeResponseArray and RouterAdvertisedIpRangeResponseArrayOutput values.
// You can construct a concrete instance of `RouterAdvertisedIpRangeResponseArrayInput` via:
//
//          RouterAdvertisedIpRangeResponseArray{ RouterAdvertisedIpRangeResponseArgs{...} }
type RouterAdvertisedIpRangeResponseArrayInput interface {
	pulumi.Input

	ToRouterAdvertisedIpRangeResponseArrayOutput() RouterAdvertisedIpRangeResponseArrayOutput
	ToRouterAdvertisedIpRangeResponseArrayOutputWithContext(context.Context) RouterAdvertisedIpRangeResponseArrayOutput
}

type RouterAdvertisedIpRangeResponseArray []RouterAdvertisedIpRangeResponseInput

func (RouterAdvertisedIpRangeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterAdvertisedIpRangeResponse)(nil)).Elem()
}

func (i RouterAdvertisedIpRangeResponseArray) ToRouterAdvertisedIpRangeResponseArrayOutput() RouterAdvertisedIpRangeResponseArrayOutput {
	return i.ToRouterAdvertisedIpRangeResponseArrayOutputWithContext(context.Background())
}

func (i RouterAdvertisedIpRangeResponseArray) ToRouterAdvertisedIpRangeResponseArrayOutputWithContext(ctx context.Context) RouterAdvertisedIpRangeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterAdvertisedIpRangeResponseArrayOutput)
}

// Description-tagged IP ranges for the router to advertise.
type RouterAdvertisedIpRangeResponseOutput struct{ *pulumi.OutputState }

func (RouterAdvertisedIpRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterAdvertisedIpRangeResponse)(nil)).Elem()
}

func (o RouterAdvertisedIpRangeResponseOutput) ToRouterAdvertisedIpRangeResponseOutput() RouterAdvertisedIpRangeResponseOutput {
	return o
}

func (o RouterAdvertisedIpRangeResponseOutput) ToRouterAdvertisedIpRangeResponseOutputWithContext(ctx context.Context) RouterAdvertisedIpRangeResponseOutput {
	return o
}

// User-specified description for the IP range.
func (o RouterAdvertisedIpRangeResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v RouterAdvertisedIpRangeResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The IP range to advertise. The value must be a CIDR-formatted string.
func (o RouterAdvertisedIpRangeResponseOutput) Range() pulumi.StringOutput {
	return o.ApplyT(func(v RouterAdvertisedIpRangeResponse) string { return v.Range }).(pulumi.StringOutput)
}

type RouterAdvertisedIpRangeResponseArrayOutput struct{ *pulumi.OutputState }

func (RouterAdvertisedIpRangeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterAdvertisedIpRangeResponse)(nil)).Elem()
}

func (o RouterAdvertisedIpRangeResponseArrayOutput) ToRouterAdvertisedIpRangeResponseArrayOutput() RouterAdvertisedIpRangeResponseArrayOutput {
	return o
}

func (o RouterAdvertisedIpRangeResponseArrayOutput) ToRouterAdvertisedIpRangeResponseArrayOutputWithContext(ctx context.Context) RouterAdvertisedIpRangeResponseArrayOutput {
	return o
}

func (o RouterAdvertisedIpRangeResponseArrayOutput) Index(i pulumi.IntInput) RouterAdvertisedIpRangeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterAdvertisedIpRangeResponse {
		return vs[0].([]RouterAdvertisedIpRangeResponse)[vs[1].(int)]
	}).(RouterAdvertisedIpRangeResponseOutput)
}

type RouterBgp struct {
	// User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM.
	AdvertiseMode *string `pulumi:"advertiseMode"`
	// User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
	AdvertisedGroups []string `pulumi:"advertisedGroups"`
	// User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
	AdvertisedIpRanges []RouterAdvertisedIpRange `pulumi:"advertisedIpRanges"`
	// Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN.
	Asn *int `pulumi:"asn"`
	// The interval in seconds between BGP keepalive messages that are sent to the peer. Hold time is three times the interval at which keepalive messages are sent, and the hold time is the maximum number of seconds allowed to elapse between successive keepalive messages that BGP receives from a peer. BGP will use the smaller of either the local hold time value or the peer's hold time value as the hold time for the BGP connection between the two peers. If set, this value must be between 20 and 60. The default is 20.
	KeepaliveInterval *int `pulumi:"keepaliveInterval"`
}

// RouterBgpInput is an input type that accepts RouterBgpArgs and RouterBgpOutput values.
// You can construct a concrete instance of `RouterBgpInput` via:
//
//          RouterBgpArgs{...}
type RouterBgpInput interface {
	pulumi.Input

	ToRouterBgpOutput() RouterBgpOutput
	ToRouterBgpOutputWithContext(context.Context) RouterBgpOutput
}

type RouterBgpArgs struct {
	// User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM.
	AdvertiseMode *RouterBgpAdvertiseMode `pulumi:"advertiseMode"`
	// User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
	AdvertisedGroups RouterBgpAdvertisedGroupsItemArrayInput `pulumi:"advertisedGroups"`
	// User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
	AdvertisedIpRanges RouterAdvertisedIpRangeArrayInput `pulumi:"advertisedIpRanges"`
	// Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN.
	Asn pulumi.IntPtrInput `pulumi:"asn"`
	// The interval in seconds between BGP keepalive messages that are sent to the peer. Hold time is three times the interval at which keepalive messages are sent, and the hold time is the maximum number of seconds allowed to elapse between successive keepalive messages that BGP receives from a peer. BGP will use the smaller of either the local hold time value or the peer's hold time value as the hold time for the BGP connection between the two peers. If set, this value must be between 20 and 60. The default is 20.
	KeepaliveInterval pulumi.IntPtrInput `pulumi:"keepaliveInterval"`
}

func (RouterBgpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterBgp)(nil)).Elem()
}

func (i RouterBgpArgs) ToRouterBgpOutput() RouterBgpOutput {
	return i.ToRouterBgpOutputWithContext(context.Background())
}

func (i RouterBgpArgs) ToRouterBgpOutputWithContext(ctx context.Context) RouterBgpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpOutput)
}

func (i RouterBgpArgs) ToRouterBgpPtrOutput() RouterBgpPtrOutput {
	return i.ToRouterBgpPtrOutputWithContext(context.Background())
}

func (i RouterBgpArgs) ToRouterBgpPtrOutputWithContext(ctx context.Context) RouterBgpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpOutput).ToRouterBgpPtrOutputWithContext(ctx)
}

// RouterBgpPtrInput is an input type that accepts RouterBgpArgs, RouterBgpPtr and RouterBgpPtrOutput values.
// You can construct a concrete instance of `RouterBgpPtrInput` via:
//
//          RouterBgpArgs{...}
//
//  or:
//
//          nil
type RouterBgpPtrInput interface {
	pulumi.Input

	ToRouterBgpPtrOutput() RouterBgpPtrOutput
	ToRouterBgpPtrOutputWithContext(context.Context) RouterBgpPtrOutput
}

type routerBgpPtrType RouterBgpArgs

func RouterBgpPtr(v *RouterBgpArgs) RouterBgpPtrInput {
	return (*routerBgpPtrType)(v)
}

func (*routerBgpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterBgp)(nil)).Elem()
}

func (i *routerBgpPtrType) ToRouterBgpPtrOutput() RouterBgpPtrOutput {
	return i.ToRouterBgpPtrOutputWithContext(context.Background())
}

func (i *routerBgpPtrType) ToRouterBgpPtrOutputWithContext(ctx context.Context) RouterBgpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpPtrOutput)
}

type RouterBgpOutput struct{ *pulumi.OutputState }

func (RouterBgpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterBgp)(nil)).Elem()
}

func (o RouterBgpOutput) ToRouterBgpOutput() RouterBgpOutput {
	return o
}

func (o RouterBgpOutput) ToRouterBgpOutputWithContext(ctx context.Context) RouterBgpOutput {
	return o
}

func (o RouterBgpOutput) ToRouterBgpPtrOutput() RouterBgpPtrOutput {
	return o.ToRouterBgpPtrOutputWithContext(context.Background())
}

func (o RouterBgpOutput) ToRouterBgpPtrOutputWithContext(ctx context.Context) RouterBgpPtrOutput {
	return o.ApplyT(func(v RouterBgp) *RouterBgp {
		return &v
	}).(RouterBgpPtrOutput)
}

// User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM.
func (o RouterBgpOutput) AdvertiseMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterBgp) *string { return v.AdvertiseMode }).(pulumi.StringPtrOutput)
}

// User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
func (o RouterBgpOutput) AdvertisedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouterBgp) []string { return v.AdvertisedGroups }).(pulumi.StringArrayOutput)
}

// User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
func (o RouterBgpOutput) AdvertisedIpRanges() RouterAdvertisedIpRangeArrayOutput {
	return o.ApplyT(func(v RouterBgp) []RouterAdvertisedIpRange { return v.AdvertisedIpRanges }).(RouterAdvertisedIpRangeArrayOutput)
}

// Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN.
func (o RouterBgpOutput) Asn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouterBgp) *int { return v.Asn }).(pulumi.IntPtrOutput)
}

// The interval in seconds between BGP keepalive messages that are sent to the peer. Hold time is three times the interval at which keepalive messages are sent, and the hold time is the maximum number of seconds allowed to elapse between successive keepalive messages that BGP receives from a peer. BGP will use the smaller of either the local hold time value or the peer's hold time value as the hold time for the BGP connection between the two peers. If set, this value must be between 20 and 60. The default is 20.
func (o RouterBgpOutput) KeepaliveInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouterBgp) *int { return v.KeepaliveInterval }).(pulumi.IntPtrOutput)
}

type RouterBgpPtrOutput struct{ *pulumi.OutputState }

func (RouterBgpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterBgp)(nil)).Elem()
}

func (o RouterBgpPtrOutput) ToRouterBgpPtrOutput() RouterBgpPtrOutput {
	return o
}

func (o RouterBgpPtrOutput) ToRouterBgpPtrOutputWithContext(ctx context.Context) RouterBgpPtrOutput {
	return o
}

func (o RouterBgpPtrOutput) Elem() RouterBgpOutput {
	return o.ApplyT(func(v *RouterBgp) RouterBgp { return *v }).(RouterBgpOutput)
}

// User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM.
func (o RouterBgpPtrOutput) AdvertiseMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterBgp) *string {
		if v == nil {
			return nil
		}
		return v.AdvertiseMode
	}).(pulumi.StringPtrOutput)
}

// User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
func (o RouterBgpPtrOutput) AdvertisedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouterBgp) []string {
		if v == nil {
			return nil
		}
		return v.AdvertisedGroups
	}).(pulumi.StringArrayOutput)
}

// User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
func (o RouterBgpPtrOutput) AdvertisedIpRanges() RouterAdvertisedIpRangeArrayOutput {
	return o.ApplyT(func(v *RouterBgp) []RouterAdvertisedIpRange {
		if v == nil {
			return nil
		}
		return v.AdvertisedIpRanges
	}).(RouterAdvertisedIpRangeArrayOutput)
}

// Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN.
func (o RouterBgpPtrOutput) Asn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouterBgp) *int {
		if v == nil {
			return nil
		}
		return v.Asn
	}).(pulumi.IntPtrOutput)
}

// The interval in seconds between BGP keepalive messages that are sent to the peer. Hold time is three times the interval at which keepalive messages are sent, and the hold time is the maximum number of seconds allowed to elapse between successive keepalive messages that BGP receives from a peer. BGP will use the smaller of either the local hold time value or the peer's hold time value as the hold time for the BGP connection between the two peers. If set, this value must be between 20 and 60. The default is 20.
func (o RouterBgpPtrOutput) KeepaliveInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouterBgp) *int {
		if v == nil {
			return nil
		}
		return v.KeepaliveInterval
	}).(pulumi.IntPtrOutput)
}

type RouterBgpPeer struct {
	// User-specified flag to indicate which mode to use for advertisement.
	AdvertiseMode *string `pulumi:"advertiseMode"`
	// User-specified list of prefix groups to advertise in custom mode, which can take one of the following options: - ALL_SUBNETS: Advertises all available subnets, including peer VPC subnets. - ALL_VPC_SUBNETS: Advertises the router's own VPC subnets. Note that this field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
	AdvertisedGroups []string `pulumi:"advertisedGroups"`
	// User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These IP ranges are advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
	AdvertisedIpRanges []RouterAdvertisedIpRange `pulumi:"advertisedIpRanges"`
	// The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win.
	AdvertisedRoutePriority *int `pulumi:"advertisedRoutePriority"`
	// The status of the BGP peer connection. If set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE.
	Enable *string `pulumi:"enable"`
	// Name of the interface the BGP peer is associated with.
	InterfaceName *string `pulumi:"interfaceName"`
	// IP address of the interface inside Google Cloud Platform. Only IPv4 is supported.
	IpAddress *string `pulumi:"ipAddress"`
	// Name of this BGP peer. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value.
	PeerAsn *int `pulumi:"peerAsn"`
	// IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported.
	PeerIpAddress *string `pulumi:"peerIpAddress"`
}

// RouterBgpPeerInput is an input type that accepts RouterBgpPeerArgs and RouterBgpPeerOutput values.
// You can construct a concrete instance of `RouterBgpPeerInput` via:
//
//          RouterBgpPeerArgs{...}
type RouterBgpPeerInput interface {
	pulumi.Input

	ToRouterBgpPeerOutput() RouterBgpPeerOutput
	ToRouterBgpPeerOutputWithContext(context.Context) RouterBgpPeerOutput
}

type RouterBgpPeerArgs struct {
	// User-specified flag to indicate which mode to use for advertisement.
	AdvertiseMode *RouterBgpPeerAdvertiseMode `pulumi:"advertiseMode"`
	// User-specified list of prefix groups to advertise in custom mode, which can take one of the following options: - ALL_SUBNETS: Advertises all available subnets, including peer VPC subnets. - ALL_VPC_SUBNETS: Advertises the router's own VPC subnets. Note that this field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
	AdvertisedGroups RouterBgpPeerAdvertisedGroupsItemArrayInput `pulumi:"advertisedGroups"`
	// User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These IP ranges are advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
	AdvertisedIpRanges RouterAdvertisedIpRangeArrayInput `pulumi:"advertisedIpRanges"`
	// The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win.
	AdvertisedRoutePriority pulumi.IntPtrInput `pulumi:"advertisedRoutePriority"`
	// The status of the BGP peer connection. If set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE.
	Enable *RouterBgpPeerEnable `pulumi:"enable"`
	// Name of the interface the BGP peer is associated with.
	InterfaceName pulumi.StringPtrInput `pulumi:"interfaceName"`
	// IP address of the interface inside Google Cloud Platform. Only IPv4 is supported.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// Name of this BGP peer. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value.
	PeerAsn pulumi.IntPtrInput `pulumi:"peerAsn"`
	// IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported.
	PeerIpAddress pulumi.StringPtrInput `pulumi:"peerIpAddress"`
}

func (RouterBgpPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterBgpPeer)(nil)).Elem()
}

func (i RouterBgpPeerArgs) ToRouterBgpPeerOutput() RouterBgpPeerOutput {
	return i.ToRouterBgpPeerOutputWithContext(context.Background())
}

func (i RouterBgpPeerArgs) ToRouterBgpPeerOutputWithContext(ctx context.Context) RouterBgpPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpPeerOutput)
}

// RouterBgpPeerArrayInput is an input type that accepts RouterBgpPeerArray and RouterBgpPeerArrayOutput values.
// You can construct a concrete instance of `RouterBgpPeerArrayInput` via:
//
//          RouterBgpPeerArray{ RouterBgpPeerArgs{...} }
type RouterBgpPeerArrayInput interface {
	pulumi.Input

	ToRouterBgpPeerArrayOutput() RouterBgpPeerArrayOutput
	ToRouterBgpPeerArrayOutputWithContext(context.Context) RouterBgpPeerArrayOutput
}

type RouterBgpPeerArray []RouterBgpPeerInput

func (RouterBgpPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterBgpPeer)(nil)).Elem()
}

func (i RouterBgpPeerArray) ToRouterBgpPeerArrayOutput() RouterBgpPeerArrayOutput {
	return i.ToRouterBgpPeerArrayOutputWithContext(context.Background())
}

func (i RouterBgpPeerArray) ToRouterBgpPeerArrayOutputWithContext(ctx context.Context) RouterBgpPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpPeerArrayOutput)
}

type RouterBgpPeerOutput struct{ *pulumi.OutputState }

func (RouterBgpPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterBgpPeer)(nil)).Elem()
}

func (o RouterBgpPeerOutput) ToRouterBgpPeerOutput() RouterBgpPeerOutput {
	return o
}

func (o RouterBgpPeerOutput) ToRouterBgpPeerOutputWithContext(ctx context.Context) RouterBgpPeerOutput {
	return o
}

// User-specified flag to indicate which mode to use for advertisement.
func (o RouterBgpPeerOutput) AdvertiseMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterBgpPeer) *string { return v.AdvertiseMode }).(pulumi.StringPtrOutput)
}

// User-specified list of prefix groups to advertise in custom mode, which can take one of the following options: - ALL_SUBNETS: Advertises all available subnets, including peer VPC subnets. - ALL_VPC_SUBNETS: Advertises the router's own VPC subnets. Note that this field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
func (o RouterBgpPeerOutput) AdvertisedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouterBgpPeer) []string { return v.AdvertisedGroups }).(pulumi.StringArrayOutput)
}

// User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These IP ranges are advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
func (o RouterBgpPeerOutput) AdvertisedIpRanges() RouterAdvertisedIpRangeArrayOutput {
	return o.ApplyT(func(v RouterBgpPeer) []RouterAdvertisedIpRange { return v.AdvertisedIpRanges }).(RouterAdvertisedIpRangeArrayOutput)
}

// The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win.
func (o RouterBgpPeerOutput) AdvertisedRoutePriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouterBgpPeer) *int { return v.AdvertisedRoutePriority }).(pulumi.IntPtrOutput)
}

// The status of the BGP peer connection. If set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE.
func (o RouterBgpPeerOutput) Enable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterBgpPeer) *string { return v.Enable }).(pulumi.StringPtrOutput)
}

// Name of the interface the BGP peer is associated with.
func (o RouterBgpPeerOutput) InterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterBgpPeer) *string { return v.InterfaceName }).(pulumi.StringPtrOutput)
}

// IP address of the interface inside Google Cloud Platform. Only IPv4 is supported.
func (o RouterBgpPeerOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterBgpPeer) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Name of this BGP peer. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o RouterBgpPeerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterBgpPeer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value.
func (o RouterBgpPeerOutput) PeerAsn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouterBgpPeer) *int { return v.PeerAsn }).(pulumi.IntPtrOutput)
}

// IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported.
func (o RouterBgpPeerOutput) PeerIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterBgpPeer) *string { return v.PeerIpAddress }).(pulumi.StringPtrOutput)
}

type RouterBgpPeerArrayOutput struct{ *pulumi.OutputState }

func (RouterBgpPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterBgpPeer)(nil)).Elem()
}

func (o RouterBgpPeerArrayOutput) ToRouterBgpPeerArrayOutput() RouterBgpPeerArrayOutput {
	return o
}

func (o RouterBgpPeerArrayOutput) ToRouterBgpPeerArrayOutputWithContext(ctx context.Context) RouterBgpPeerArrayOutput {
	return o
}

func (o RouterBgpPeerArrayOutput) Index(i pulumi.IntInput) RouterBgpPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterBgpPeer {
		return vs[0].([]RouterBgpPeer)[vs[1].(int)]
	}).(RouterBgpPeerOutput)
}

type RouterBgpPeerResponse struct {
	// User-specified flag to indicate which mode to use for advertisement.
	AdvertiseMode string `pulumi:"advertiseMode"`
	// User-specified list of prefix groups to advertise in custom mode, which can take one of the following options: - ALL_SUBNETS: Advertises all available subnets, including peer VPC subnets. - ALL_VPC_SUBNETS: Advertises the router's own VPC subnets. Note that this field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
	AdvertisedGroups []string `pulumi:"advertisedGroups"`
	// User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These IP ranges are advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
	AdvertisedIpRanges []RouterAdvertisedIpRangeResponse `pulumi:"advertisedIpRanges"`
	// The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win.
	AdvertisedRoutePriority int `pulumi:"advertisedRoutePriority"`
	// The status of the BGP peer connection. If set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE.
	Enable string `pulumi:"enable"`
	// Name of the interface the BGP peer is associated with.
	InterfaceName string `pulumi:"interfaceName"`
	// IP address of the interface inside Google Cloud Platform. Only IPv4 is supported.
	IpAddress string `pulumi:"ipAddress"`
	// The resource that configures and manages this BGP peer. - MANAGED_BY_USER is the default value and can be managed by you or other users - MANAGED_BY_ATTACHMENT is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted.
	ManagementType string `pulumi:"managementType"`
	// Name of this BGP peer. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name string `pulumi:"name"`
	// Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value.
	PeerAsn int `pulumi:"peerAsn"`
	// IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported.
	PeerIpAddress string `pulumi:"peerIpAddress"`
}

// RouterBgpPeerResponseInput is an input type that accepts RouterBgpPeerResponseArgs and RouterBgpPeerResponseOutput values.
// You can construct a concrete instance of `RouterBgpPeerResponseInput` via:
//
//          RouterBgpPeerResponseArgs{...}
type RouterBgpPeerResponseInput interface {
	pulumi.Input

	ToRouterBgpPeerResponseOutput() RouterBgpPeerResponseOutput
	ToRouterBgpPeerResponseOutputWithContext(context.Context) RouterBgpPeerResponseOutput
}

type RouterBgpPeerResponseArgs struct {
	// User-specified flag to indicate which mode to use for advertisement.
	AdvertiseMode pulumi.StringInput `pulumi:"advertiseMode"`
	// User-specified list of prefix groups to advertise in custom mode, which can take one of the following options: - ALL_SUBNETS: Advertises all available subnets, including peer VPC subnets. - ALL_VPC_SUBNETS: Advertises the router's own VPC subnets. Note that this field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
	AdvertisedGroups pulumi.StringArrayInput `pulumi:"advertisedGroups"`
	// User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These IP ranges are advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
	AdvertisedIpRanges RouterAdvertisedIpRangeResponseArrayInput `pulumi:"advertisedIpRanges"`
	// The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win.
	AdvertisedRoutePriority pulumi.IntInput `pulumi:"advertisedRoutePriority"`
	// The status of the BGP peer connection. If set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE.
	Enable pulumi.StringInput `pulumi:"enable"`
	// Name of the interface the BGP peer is associated with.
	InterfaceName pulumi.StringInput `pulumi:"interfaceName"`
	// IP address of the interface inside Google Cloud Platform. Only IPv4 is supported.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The resource that configures and manages this BGP peer. - MANAGED_BY_USER is the default value and can be managed by you or other users - MANAGED_BY_ATTACHMENT is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted.
	ManagementType pulumi.StringInput `pulumi:"managementType"`
	// Name of this BGP peer. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringInput `pulumi:"name"`
	// Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value.
	PeerAsn pulumi.IntInput `pulumi:"peerAsn"`
	// IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported.
	PeerIpAddress pulumi.StringInput `pulumi:"peerIpAddress"`
}

func (RouterBgpPeerResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterBgpPeerResponse)(nil)).Elem()
}

func (i RouterBgpPeerResponseArgs) ToRouterBgpPeerResponseOutput() RouterBgpPeerResponseOutput {
	return i.ToRouterBgpPeerResponseOutputWithContext(context.Background())
}

func (i RouterBgpPeerResponseArgs) ToRouterBgpPeerResponseOutputWithContext(ctx context.Context) RouterBgpPeerResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpPeerResponseOutput)
}

// RouterBgpPeerResponseArrayInput is an input type that accepts RouterBgpPeerResponseArray and RouterBgpPeerResponseArrayOutput values.
// You can construct a concrete instance of `RouterBgpPeerResponseArrayInput` via:
//
//          RouterBgpPeerResponseArray{ RouterBgpPeerResponseArgs{...} }
type RouterBgpPeerResponseArrayInput interface {
	pulumi.Input

	ToRouterBgpPeerResponseArrayOutput() RouterBgpPeerResponseArrayOutput
	ToRouterBgpPeerResponseArrayOutputWithContext(context.Context) RouterBgpPeerResponseArrayOutput
}

type RouterBgpPeerResponseArray []RouterBgpPeerResponseInput

func (RouterBgpPeerResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterBgpPeerResponse)(nil)).Elem()
}

func (i RouterBgpPeerResponseArray) ToRouterBgpPeerResponseArrayOutput() RouterBgpPeerResponseArrayOutput {
	return i.ToRouterBgpPeerResponseArrayOutputWithContext(context.Background())
}

func (i RouterBgpPeerResponseArray) ToRouterBgpPeerResponseArrayOutputWithContext(ctx context.Context) RouterBgpPeerResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpPeerResponseArrayOutput)
}

type RouterBgpPeerResponseOutput struct{ *pulumi.OutputState }

func (RouterBgpPeerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterBgpPeerResponse)(nil)).Elem()
}

func (o RouterBgpPeerResponseOutput) ToRouterBgpPeerResponseOutput() RouterBgpPeerResponseOutput {
	return o
}

func (o RouterBgpPeerResponseOutput) ToRouterBgpPeerResponseOutputWithContext(ctx context.Context) RouterBgpPeerResponseOutput {
	return o
}

// User-specified flag to indicate which mode to use for advertisement.
func (o RouterBgpPeerResponseOutput) AdvertiseMode() pulumi.StringOutput {
	return o.ApplyT(func(v RouterBgpPeerResponse) string { return v.AdvertiseMode }).(pulumi.StringOutput)
}

// User-specified list of prefix groups to advertise in custom mode, which can take one of the following options: - ALL_SUBNETS: Advertises all available subnets, including peer VPC subnets. - ALL_VPC_SUBNETS: Advertises the router's own VPC subnets. Note that this field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
func (o RouterBgpPeerResponseOutput) AdvertisedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouterBgpPeerResponse) []string { return v.AdvertisedGroups }).(pulumi.StringArrayOutput)
}

// User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the "bgp" message). These IP ranges are advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
func (o RouterBgpPeerResponseOutput) AdvertisedIpRanges() RouterAdvertisedIpRangeResponseArrayOutput {
	return o.ApplyT(func(v RouterBgpPeerResponse) []RouterAdvertisedIpRangeResponse { return v.AdvertisedIpRanges }).(RouterAdvertisedIpRangeResponseArrayOutput)
}

// The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win.
func (o RouterBgpPeerResponseOutput) AdvertisedRoutePriority() pulumi.IntOutput {
	return o.ApplyT(func(v RouterBgpPeerResponse) int { return v.AdvertisedRoutePriority }).(pulumi.IntOutput)
}

// The status of the BGP peer connection. If set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE.
func (o RouterBgpPeerResponseOutput) Enable() pulumi.StringOutput {
	return o.ApplyT(func(v RouterBgpPeerResponse) string { return v.Enable }).(pulumi.StringOutput)
}

// Name of the interface the BGP peer is associated with.
func (o RouterBgpPeerResponseOutput) InterfaceName() pulumi.StringOutput {
	return o.ApplyT(func(v RouterBgpPeerResponse) string { return v.InterfaceName }).(pulumi.StringOutput)
}

// IP address of the interface inside Google Cloud Platform. Only IPv4 is supported.
func (o RouterBgpPeerResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v RouterBgpPeerResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The resource that configures and manages this BGP peer. - MANAGED_BY_USER is the default value and can be managed by you or other users - MANAGED_BY_ATTACHMENT is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted.
func (o RouterBgpPeerResponseOutput) ManagementType() pulumi.StringOutput {
	return o.ApplyT(func(v RouterBgpPeerResponse) string { return v.ManagementType }).(pulumi.StringOutput)
}

// Name of this BGP peer. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o RouterBgpPeerResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RouterBgpPeerResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value.
func (o RouterBgpPeerResponseOutput) PeerAsn() pulumi.IntOutput {
	return o.ApplyT(func(v RouterBgpPeerResponse) int { return v.PeerAsn }).(pulumi.IntOutput)
}

// IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported.
func (o RouterBgpPeerResponseOutput) PeerIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v RouterBgpPeerResponse) string { return v.PeerIpAddress }).(pulumi.StringOutput)
}

type RouterBgpPeerResponseArrayOutput struct{ *pulumi.OutputState }

func (RouterBgpPeerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterBgpPeerResponse)(nil)).Elem()
}

func (o RouterBgpPeerResponseArrayOutput) ToRouterBgpPeerResponseArrayOutput() RouterBgpPeerResponseArrayOutput {
	return o
}

func (o RouterBgpPeerResponseArrayOutput) ToRouterBgpPeerResponseArrayOutputWithContext(ctx context.Context) RouterBgpPeerResponseArrayOutput {
	return o
}

func (o RouterBgpPeerResponseArrayOutput) Index(i pulumi.IntInput) RouterBgpPeerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterBgpPeerResponse {
		return vs[0].([]RouterBgpPeerResponse)[vs[1].(int)]
	}).(RouterBgpPeerResponseOutput)
}

type RouterBgpResponse struct {
	// User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM.
	AdvertiseMode string `pulumi:"advertiseMode"`
	// User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
	AdvertisedGroups []string `pulumi:"advertisedGroups"`
	// User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
	AdvertisedIpRanges []RouterAdvertisedIpRangeResponse `pulumi:"advertisedIpRanges"`
	// Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN.
	Asn int `pulumi:"asn"`
	// The interval in seconds between BGP keepalive messages that are sent to the peer. Hold time is three times the interval at which keepalive messages are sent, and the hold time is the maximum number of seconds allowed to elapse between successive keepalive messages that BGP receives from a peer. BGP will use the smaller of either the local hold time value or the peer's hold time value as the hold time for the BGP connection between the two peers. If set, this value must be between 20 and 60. The default is 20.
	KeepaliveInterval int `pulumi:"keepaliveInterval"`
}

// RouterBgpResponseInput is an input type that accepts RouterBgpResponseArgs and RouterBgpResponseOutput values.
// You can construct a concrete instance of `RouterBgpResponseInput` via:
//
//          RouterBgpResponseArgs{...}
type RouterBgpResponseInput interface {
	pulumi.Input

	ToRouterBgpResponseOutput() RouterBgpResponseOutput
	ToRouterBgpResponseOutputWithContext(context.Context) RouterBgpResponseOutput
}

type RouterBgpResponseArgs struct {
	// User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM.
	AdvertiseMode pulumi.StringInput `pulumi:"advertiseMode"`
	// User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
	AdvertisedGroups pulumi.StringArrayInput `pulumi:"advertisedGroups"`
	// User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
	AdvertisedIpRanges RouterAdvertisedIpRangeResponseArrayInput `pulumi:"advertisedIpRanges"`
	// Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN.
	Asn pulumi.IntInput `pulumi:"asn"`
	// The interval in seconds between BGP keepalive messages that are sent to the peer. Hold time is three times the interval at which keepalive messages are sent, and the hold time is the maximum number of seconds allowed to elapse between successive keepalive messages that BGP receives from a peer. BGP will use the smaller of either the local hold time value or the peer's hold time value as the hold time for the BGP connection between the two peers. If set, this value must be between 20 and 60. The default is 20.
	KeepaliveInterval pulumi.IntInput `pulumi:"keepaliveInterval"`
}

func (RouterBgpResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterBgpResponse)(nil)).Elem()
}

func (i RouterBgpResponseArgs) ToRouterBgpResponseOutput() RouterBgpResponseOutput {
	return i.ToRouterBgpResponseOutputWithContext(context.Background())
}

func (i RouterBgpResponseArgs) ToRouterBgpResponseOutputWithContext(ctx context.Context) RouterBgpResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpResponseOutput)
}

func (i RouterBgpResponseArgs) ToRouterBgpResponsePtrOutput() RouterBgpResponsePtrOutput {
	return i.ToRouterBgpResponsePtrOutputWithContext(context.Background())
}

func (i RouterBgpResponseArgs) ToRouterBgpResponsePtrOutputWithContext(ctx context.Context) RouterBgpResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpResponseOutput).ToRouterBgpResponsePtrOutputWithContext(ctx)
}

// RouterBgpResponsePtrInput is an input type that accepts RouterBgpResponseArgs, RouterBgpResponsePtr and RouterBgpResponsePtrOutput values.
// You can construct a concrete instance of `RouterBgpResponsePtrInput` via:
//
//          RouterBgpResponseArgs{...}
//
//  or:
//
//          nil
type RouterBgpResponsePtrInput interface {
	pulumi.Input

	ToRouterBgpResponsePtrOutput() RouterBgpResponsePtrOutput
	ToRouterBgpResponsePtrOutputWithContext(context.Context) RouterBgpResponsePtrOutput
}

type routerBgpResponsePtrType RouterBgpResponseArgs

func RouterBgpResponsePtr(v *RouterBgpResponseArgs) RouterBgpResponsePtrInput {
	return (*routerBgpResponsePtrType)(v)
}

func (*routerBgpResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterBgpResponse)(nil)).Elem()
}

func (i *routerBgpResponsePtrType) ToRouterBgpResponsePtrOutput() RouterBgpResponsePtrOutput {
	return i.ToRouterBgpResponsePtrOutputWithContext(context.Background())
}

func (i *routerBgpResponsePtrType) ToRouterBgpResponsePtrOutputWithContext(ctx context.Context) RouterBgpResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterBgpResponsePtrOutput)
}

type RouterBgpResponseOutput struct{ *pulumi.OutputState }

func (RouterBgpResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterBgpResponse)(nil)).Elem()
}

func (o RouterBgpResponseOutput) ToRouterBgpResponseOutput() RouterBgpResponseOutput {
	return o
}

func (o RouterBgpResponseOutput) ToRouterBgpResponseOutputWithContext(ctx context.Context) RouterBgpResponseOutput {
	return o
}

func (o RouterBgpResponseOutput) ToRouterBgpResponsePtrOutput() RouterBgpResponsePtrOutput {
	return o.ToRouterBgpResponsePtrOutputWithContext(context.Background())
}

func (o RouterBgpResponseOutput) ToRouterBgpResponsePtrOutputWithContext(ctx context.Context) RouterBgpResponsePtrOutput {
	return o.ApplyT(func(v RouterBgpResponse) *RouterBgpResponse {
		return &v
	}).(RouterBgpResponsePtrOutput)
}

// User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM.
func (o RouterBgpResponseOutput) AdvertiseMode() pulumi.StringOutput {
	return o.ApplyT(func(v RouterBgpResponse) string { return v.AdvertiseMode }).(pulumi.StringOutput)
}

// User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
func (o RouterBgpResponseOutput) AdvertisedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouterBgpResponse) []string { return v.AdvertisedGroups }).(pulumi.StringArrayOutput)
}

// User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
func (o RouterBgpResponseOutput) AdvertisedIpRanges() RouterAdvertisedIpRangeResponseArrayOutput {
	return o.ApplyT(func(v RouterBgpResponse) []RouterAdvertisedIpRangeResponse { return v.AdvertisedIpRanges }).(RouterAdvertisedIpRangeResponseArrayOutput)
}

// Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN.
func (o RouterBgpResponseOutput) Asn() pulumi.IntOutput {
	return o.ApplyT(func(v RouterBgpResponse) int { return v.Asn }).(pulumi.IntOutput)
}

// The interval in seconds between BGP keepalive messages that are sent to the peer. Hold time is three times the interval at which keepalive messages are sent, and the hold time is the maximum number of seconds allowed to elapse between successive keepalive messages that BGP receives from a peer. BGP will use the smaller of either the local hold time value or the peer's hold time value as the hold time for the BGP connection between the two peers. If set, this value must be between 20 and 60. The default is 20.
func (o RouterBgpResponseOutput) KeepaliveInterval() pulumi.IntOutput {
	return o.ApplyT(func(v RouterBgpResponse) int { return v.KeepaliveInterval }).(pulumi.IntOutput)
}

type RouterBgpResponsePtrOutput struct{ *pulumi.OutputState }

func (RouterBgpResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterBgpResponse)(nil)).Elem()
}

func (o RouterBgpResponsePtrOutput) ToRouterBgpResponsePtrOutput() RouterBgpResponsePtrOutput {
	return o
}

func (o RouterBgpResponsePtrOutput) ToRouterBgpResponsePtrOutputWithContext(ctx context.Context) RouterBgpResponsePtrOutput {
	return o
}

func (o RouterBgpResponsePtrOutput) Elem() RouterBgpResponseOutput {
	return o.ApplyT(func(v *RouterBgpResponse) RouterBgpResponse { return *v }).(RouterBgpResponseOutput)
}

// User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM.
func (o RouterBgpResponsePtrOutput) AdvertiseMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterBgpResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AdvertiseMode
	}).(pulumi.StringPtrOutput)
}

// User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
func (o RouterBgpResponsePtrOutput) AdvertisedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouterBgpResponse) []string {
		if v == nil {
			return nil
		}
		return v.AdvertisedGroups
	}).(pulumi.StringArrayOutput)
}

// User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
func (o RouterBgpResponsePtrOutput) AdvertisedIpRanges() RouterAdvertisedIpRangeResponseArrayOutput {
	return o.ApplyT(func(v *RouterBgpResponse) []RouterAdvertisedIpRangeResponse {
		if v == nil {
			return nil
		}
		return v.AdvertisedIpRanges
	}).(RouterAdvertisedIpRangeResponseArrayOutput)
}

// Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN.
func (o RouterBgpResponsePtrOutput) Asn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouterBgpResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Asn
	}).(pulumi.IntPtrOutput)
}

// The interval in seconds between BGP keepalive messages that are sent to the peer. Hold time is three times the interval at which keepalive messages are sent, and the hold time is the maximum number of seconds allowed to elapse between successive keepalive messages that BGP receives from a peer. BGP will use the smaller of either the local hold time value or the peer's hold time value as the hold time for the BGP connection between the two peers. If set, this value must be between 20 and 60. The default is 20.
func (o RouterBgpResponsePtrOutput) KeepaliveInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouterBgpResponse) *int {
		if v == nil {
			return nil
		}
		return &v.KeepaliveInterval
	}).(pulumi.IntPtrOutput)
}

type RouterInterface struct {
	// IP address and range of the interface. The IP range must be in the RFC3927 link-local IP address space. The value must be a CIDR-formatted string, for example: 169.254.0.1/30. NOTE: Do not truncate the address as it represents the IP address of the interface.
	IpRange *string `pulumi:"ipRange"`
	// URI of the linked Interconnect attachment. It must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
	LinkedInterconnectAttachment *string `pulumi:"linkedInterconnectAttachment"`
	// URI of the linked VPN tunnel, which must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
	LinkedVpnTunnel *string `pulumi:"linkedVpnTunnel"`
	// Name of this interface entry. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
}

// RouterInterfaceInput is an input type that accepts RouterInterfaceArgs and RouterInterfaceOutput values.
// You can construct a concrete instance of `RouterInterfaceInput` via:
//
//          RouterInterfaceArgs{...}
type RouterInterfaceInput interface {
	pulumi.Input

	ToRouterInterfaceOutput() RouterInterfaceOutput
	ToRouterInterfaceOutputWithContext(context.Context) RouterInterfaceOutput
}

type RouterInterfaceArgs struct {
	// IP address and range of the interface. The IP range must be in the RFC3927 link-local IP address space. The value must be a CIDR-formatted string, for example: 169.254.0.1/30. NOTE: Do not truncate the address as it represents the IP address of the interface.
	IpRange pulumi.StringPtrInput `pulumi:"ipRange"`
	// URI of the linked Interconnect attachment. It must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
	LinkedInterconnectAttachment pulumi.StringPtrInput `pulumi:"linkedInterconnectAttachment"`
	// URI of the linked VPN tunnel, which must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
	LinkedVpnTunnel pulumi.StringPtrInput `pulumi:"linkedVpnTunnel"`
	// Name of this interface entry. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (RouterInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterInterface)(nil)).Elem()
}

func (i RouterInterfaceArgs) ToRouterInterfaceOutput() RouterInterfaceOutput {
	return i.ToRouterInterfaceOutputWithContext(context.Background())
}

func (i RouterInterfaceArgs) ToRouterInterfaceOutputWithContext(ctx context.Context) RouterInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterInterfaceOutput)
}

// RouterInterfaceArrayInput is an input type that accepts RouterInterfaceArray and RouterInterfaceArrayOutput values.
// You can construct a concrete instance of `RouterInterfaceArrayInput` via:
//
//          RouterInterfaceArray{ RouterInterfaceArgs{...} }
type RouterInterfaceArrayInput interface {
	pulumi.Input

	ToRouterInterfaceArrayOutput() RouterInterfaceArrayOutput
	ToRouterInterfaceArrayOutputWithContext(context.Context) RouterInterfaceArrayOutput
}

type RouterInterfaceArray []RouterInterfaceInput

func (RouterInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterInterface)(nil)).Elem()
}

func (i RouterInterfaceArray) ToRouterInterfaceArrayOutput() RouterInterfaceArrayOutput {
	return i.ToRouterInterfaceArrayOutputWithContext(context.Background())
}

func (i RouterInterfaceArray) ToRouterInterfaceArrayOutputWithContext(ctx context.Context) RouterInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterInterfaceArrayOutput)
}

type RouterInterfaceOutput struct{ *pulumi.OutputState }

func (RouterInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterInterface)(nil)).Elem()
}

func (o RouterInterfaceOutput) ToRouterInterfaceOutput() RouterInterfaceOutput {
	return o
}

func (o RouterInterfaceOutput) ToRouterInterfaceOutputWithContext(ctx context.Context) RouterInterfaceOutput {
	return o
}

// IP address and range of the interface. The IP range must be in the RFC3927 link-local IP address space. The value must be a CIDR-formatted string, for example: 169.254.0.1/30. NOTE: Do not truncate the address as it represents the IP address of the interface.
func (o RouterInterfaceOutput) IpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterInterface) *string { return v.IpRange }).(pulumi.StringPtrOutput)
}

// URI of the linked Interconnect attachment. It must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
func (o RouterInterfaceOutput) LinkedInterconnectAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterInterface) *string { return v.LinkedInterconnectAttachment }).(pulumi.StringPtrOutput)
}

// URI of the linked VPN tunnel, which must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
func (o RouterInterfaceOutput) LinkedVpnTunnel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterInterface) *string { return v.LinkedVpnTunnel }).(pulumi.StringPtrOutput)
}

// Name of this interface entry. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o RouterInterfaceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterInterface) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type RouterInterfaceArrayOutput struct{ *pulumi.OutputState }

func (RouterInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterInterface)(nil)).Elem()
}

func (o RouterInterfaceArrayOutput) ToRouterInterfaceArrayOutput() RouterInterfaceArrayOutput {
	return o
}

func (o RouterInterfaceArrayOutput) ToRouterInterfaceArrayOutputWithContext(ctx context.Context) RouterInterfaceArrayOutput {
	return o
}

func (o RouterInterfaceArrayOutput) Index(i pulumi.IntInput) RouterInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterInterface {
		return vs[0].([]RouterInterface)[vs[1].(int)]
	}).(RouterInterfaceOutput)
}

type RouterInterfaceResponse struct {
	// IP address and range of the interface. The IP range must be in the RFC3927 link-local IP address space. The value must be a CIDR-formatted string, for example: 169.254.0.1/30. NOTE: Do not truncate the address as it represents the IP address of the interface.
	IpRange string `pulumi:"ipRange"`
	// URI of the linked Interconnect attachment. It must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
	LinkedInterconnectAttachment string `pulumi:"linkedInterconnectAttachment"`
	// URI of the linked VPN tunnel, which must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
	LinkedVpnTunnel string `pulumi:"linkedVpnTunnel"`
	// The resource that configures and manages this interface. - MANAGED_BY_USER is the default value and can be managed directly by users. - MANAGED_BY_ATTACHMENT is an interface that is configured and managed by Cloud Interconnect, specifically, by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of interface when the PARTNER InterconnectAttachment is created, updated, or deleted.
	ManagementType string `pulumi:"managementType"`
	// Name of this interface entry. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name string `pulumi:"name"`
}

// RouterInterfaceResponseInput is an input type that accepts RouterInterfaceResponseArgs and RouterInterfaceResponseOutput values.
// You can construct a concrete instance of `RouterInterfaceResponseInput` via:
//
//          RouterInterfaceResponseArgs{...}
type RouterInterfaceResponseInput interface {
	pulumi.Input

	ToRouterInterfaceResponseOutput() RouterInterfaceResponseOutput
	ToRouterInterfaceResponseOutputWithContext(context.Context) RouterInterfaceResponseOutput
}

type RouterInterfaceResponseArgs struct {
	// IP address and range of the interface. The IP range must be in the RFC3927 link-local IP address space. The value must be a CIDR-formatted string, for example: 169.254.0.1/30. NOTE: Do not truncate the address as it represents the IP address of the interface.
	IpRange pulumi.StringInput `pulumi:"ipRange"`
	// URI of the linked Interconnect attachment. It must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
	LinkedInterconnectAttachment pulumi.StringInput `pulumi:"linkedInterconnectAttachment"`
	// URI of the linked VPN tunnel, which must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
	LinkedVpnTunnel pulumi.StringInput `pulumi:"linkedVpnTunnel"`
	// The resource that configures and manages this interface. - MANAGED_BY_USER is the default value and can be managed directly by users. - MANAGED_BY_ATTACHMENT is an interface that is configured and managed by Cloud Interconnect, specifically, by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of interface when the PARTNER InterconnectAttachment is created, updated, or deleted.
	ManagementType pulumi.StringInput `pulumi:"managementType"`
	// Name of this interface entry. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringInput `pulumi:"name"`
}

func (RouterInterfaceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterInterfaceResponse)(nil)).Elem()
}

func (i RouterInterfaceResponseArgs) ToRouterInterfaceResponseOutput() RouterInterfaceResponseOutput {
	return i.ToRouterInterfaceResponseOutputWithContext(context.Background())
}

func (i RouterInterfaceResponseArgs) ToRouterInterfaceResponseOutputWithContext(ctx context.Context) RouterInterfaceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterInterfaceResponseOutput)
}

// RouterInterfaceResponseArrayInput is an input type that accepts RouterInterfaceResponseArray and RouterInterfaceResponseArrayOutput values.
// You can construct a concrete instance of `RouterInterfaceResponseArrayInput` via:
//
//          RouterInterfaceResponseArray{ RouterInterfaceResponseArgs{...} }
type RouterInterfaceResponseArrayInput interface {
	pulumi.Input

	ToRouterInterfaceResponseArrayOutput() RouterInterfaceResponseArrayOutput
	ToRouterInterfaceResponseArrayOutputWithContext(context.Context) RouterInterfaceResponseArrayOutput
}

type RouterInterfaceResponseArray []RouterInterfaceResponseInput

func (RouterInterfaceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterInterfaceResponse)(nil)).Elem()
}

func (i RouterInterfaceResponseArray) ToRouterInterfaceResponseArrayOutput() RouterInterfaceResponseArrayOutput {
	return i.ToRouterInterfaceResponseArrayOutputWithContext(context.Background())
}

func (i RouterInterfaceResponseArray) ToRouterInterfaceResponseArrayOutputWithContext(ctx context.Context) RouterInterfaceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterInterfaceResponseArrayOutput)
}

type RouterInterfaceResponseOutput struct{ *pulumi.OutputState }

func (RouterInterfaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterInterfaceResponse)(nil)).Elem()
}

func (o RouterInterfaceResponseOutput) ToRouterInterfaceResponseOutput() RouterInterfaceResponseOutput {
	return o
}

func (o RouterInterfaceResponseOutput) ToRouterInterfaceResponseOutputWithContext(ctx context.Context) RouterInterfaceResponseOutput {
	return o
}

// IP address and range of the interface. The IP range must be in the RFC3927 link-local IP address space. The value must be a CIDR-formatted string, for example: 169.254.0.1/30. NOTE: Do not truncate the address as it represents the IP address of the interface.
func (o RouterInterfaceResponseOutput) IpRange() pulumi.StringOutput {
	return o.ApplyT(func(v RouterInterfaceResponse) string { return v.IpRange }).(pulumi.StringOutput)
}

// URI of the linked Interconnect attachment. It must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
func (o RouterInterfaceResponseOutput) LinkedInterconnectAttachment() pulumi.StringOutput {
	return o.ApplyT(func(v RouterInterfaceResponse) string { return v.LinkedInterconnectAttachment }).(pulumi.StringOutput)
}

// URI of the linked VPN tunnel, which must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
func (o RouterInterfaceResponseOutput) LinkedVpnTunnel() pulumi.StringOutput {
	return o.ApplyT(func(v RouterInterfaceResponse) string { return v.LinkedVpnTunnel }).(pulumi.StringOutput)
}

// The resource that configures and manages this interface. - MANAGED_BY_USER is the default value and can be managed directly by users. - MANAGED_BY_ATTACHMENT is an interface that is configured and managed by Cloud Interconnect, specifically, by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of interface when the PARTNER InterconnectAttachment is created, updated, or deleted.
func (o RouterInterfaceResponseOutput) ManagementType() pulumi.StringOutput {
	return o.ApplyT(func(v RouterInterfaceResponse) string { return v.ManagementType }).(pulumi.StringOutput)
}

// Name of this interface entry. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o RouterInterfaceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RouterInterfaceResponse) string { return v.Name }).(pulumi.StringOutput)
}

type RouterInterfaceResponseArrayOutput struct{ *pulumi.OutputState }

func (RouterInterfaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterInterfaceResponse)(nil)).Elem()
}

func (o RouterInterfaceResponseArrayOutput) ToRouterInterfaceResponseArrayOutput() RouterInterfaceResponseArrayOutput {
	return o
}

func (o RouterInterfaceResponseArrayOutput) ToRouterInterfaceResponseArrayOutputWithContext(ctx context.Context) RouterInterfaceResponseArrayOutput {
	return o
}

func (o RouterInterfaceResponseArrayOutput) Index(i pulumi.IntInput) RouterInterfaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterInterfaceResponse {
		return vs[0].([]RouterInterfaceResponse)[vs[1].(int)]
	}).(RouterInterfaceResponseOutput)
}

// Represents a Nat resource. It enables the VMs within the specified subnetworks to access Internet without external IP addresses. It specifies a list of subnetworks (and the ranges within) that want to use NAT. Customers can also provide the external IPs that would be used for NAT. GCP would auto-allocate ephemeral IPs if no external IPs are provided.
type RouterNat struct {
	// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT only.
	DrainNatIps                      []string `pulumi:"drainNatIps"`
	EnableEndpointIndependentMapping *bool    `pulumi:"enableEndpointIndependentMapping"`
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	IcmpIdleTimeoutSec *int `pulumi:"icmpIdleTimeoutSec"`
	// Configure logging on this NAT.
	LogConfig *RouterNatLogConfig `pulumi:"logConfig"`
	// Minimum number of ports allocated to a VM from this NAT config. If not set, a default number of ports is allocated to a VM. This is rounded up to the nearest power of 2. For example, if the value of this field is 50, at least 64 ports are allocated to a VM.
	MinPortsPerVm *int `pulumi:"minPortsPerVm"`
	// Unique name of this Nat service. The name must be 1-63 characters long and comply with RFC1035.
	Name *string `pulumi:"name"`
	// Specify the NatIpAllocateOption, which can take one of the following values: - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs. - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty.
	NatIpAllocateOption *string `pulumi:"natIpAllocateOption"`
	// A list of URLs of the IP resources used for this Nat service. These IP addresses must be valid static external IP addresses assigned to the project.
	NatIps []string `pulumi:"natIps"`
	// Specify the Nat option, which can take one of the following values: - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. - ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other Router.Nat section in any Router for this network in this region.
	SourceSubnetworkIpRangesToNat *string `pulumi:"sourceSubnetworkIpRangesToNat"`
	// A list of Subnetwork resources whose traffic should be translated by NAT Gateway. It is used only when LIST_OF_SUBNETWORKS is selected for the SubnetworkIpRangeToNatOption above.
	Subnetworks []RouterNatSubnetworkToNat `pulumi:"subnetworks"`
	// Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
	TcpEstablishedIdleTimeoutSec *int `pulumi:"tcpEstablishedIdleTimeoutSec"`
	// Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
	TcpTransitoryIdleTimeoutSec *int `pulumi:"tcpTransitoryIdleTimeoutSec"`
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	UdpIdleTimeoutSec *int `pulumi:"udpIdleTimeoutSec"`
}

// RouterNatInput is an input type that accepts RouterNatArgs and RouterNatOutput values.
// You can construct a concrete instance of `RouterNatInput` via:
//
//          RouterNatArgs{...}
type RouterNatInput interface {
	pulumi.Input

	ToRouterNatOutput() RouterNatOutput
	ToRouterNatOutputWithContext(context.Context) RouterNatOutput
}

// Represents a Nat resource. It enables the VMs within the specified subnetworks to access Internet without external IP addresses. It specifies a list of subnetworks (and the ranges within) that want to use NAT. Customers can also provide the external IPs that would be used for NAT. GCP would auto-allocate ephemeral IPs if no external IPs are provided.
type RouterNatArgs struct {
	// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT only.
	DrainNatIps                      pulumi.StringArrayInput `pulumi:"drainNatIps"`
	EnableEndpointIndependentMapping pulumi.BoolPtrInput     `pulumi:"enableEndpointIndependentMapping"`
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	IcmpIdleTimeoutSec pulumi.IntPtrInput `pulumi:"icmpIdleTimeoutSec"`
	// Configure logging on this NAT.
	LogConfig RouterNatLogConfigPtrInput `pulumi:"logConfig"`
	// Minimum number of ports allocated to a VM from this NAT config. If not set, a default number of ports is allocated to a VM. This is rounded up to the nearest power of 2. For example, if the value of this field is 50, at least 64 ports are allocated to a VM.
	MinPortsPerVm pulumi.IntPtrInput `pulumi:"minPortsPerVm"`
	// Unique name of this Nat service. The name must be 1-63 characters long and comply with RFC1035.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify the NatIpAllocateOption, which can take one of the following values: - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs. - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty.
	NatIpAllocateOption *RouterNatNatIpAllocateOption `pulumi:"natIpAllocateOption"`
	// A list of URLs of the IP resources used for this Nat service. These IP addresses must be valid static external IP addresses assigned to the project.
	NatIps pulumi.StringArrayInput `pulumi:"natIps"`
	// Specify the Nat option, which can take one of the following values: - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. - ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other Router.Nat section in any Router for this network in this region.
	SourceSubnetworkIpRangesToNat *RouterNatSourceSubnetworkIpRangesToNat `pulumi:"sourceSubnetworkIpRangesToNat"`
	// A list of Subnetwork resources whose traffic should be translated by NAT Gateway. It is used only when LIST_OF_SUBNETWORKS is selected for the SubnetworkIpRangeToNatOption above.
	Subnetworks RouterNatSubnetworkToNatArrayInput `pulumi:"subnetworks"`
	// Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
	TcpEstablishedIdleTimeoutSec pulumi.IntPtrInput `pulumi:"tcpEstablishedIdleTimeoutSec"`
	// Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
	TcpTransitoryIdleTimeoutSec pulumi.IntPtrInput `pulumi:"tcpTransitoryIdleTimeoutSec"`
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	UdpIdleTimeoutSec pulumi.IntPtrInput `pulumi:"udpIdleTimeoutSec"`
}

func (RouterNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterNat)(nil)).Elem()
}

func (i RouterNatArgs) ToRouterNatOutput() RouterNatOutput {
	return i.ToRouterNatOutputWithContext(context.Background())
}

func (i RouterNatArgs) ToRouterNatOutputWithContext(ctx context.Context) RouterNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatOutput)
}

// RouterNatArrayInput is an input type that accepts RouterNatArray and RouterNatArrayOutput values.
// You can construct a concrete instance of `RouterNatArrayInput` via:
//
//          RouterNatArray{ RouterNatArgs{...} }
type RouterNatArrayInput interface {
	pulumi.Input

	ToRouterNatArrayOutput() RouterNatArrayOutput
	ToRouterNatArrayOutputWithContext(context.Context) RouterNatArrayOutput
}

type RouterNatArray []RouterNatInput

func (RouterNatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterNat)(nil)).Elem()
}

func (i RouterNatArray) ToRouterNatArrayOutput() RouterNatArrayOutput {
	return i.ToRouterNatArrayOutputWithContext(context.Background())
}

func (i RouterNatArray) ToRouterNatArrayOutputWithContext(ctx context.Context) RouterNatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatArrayOutput)
}

// Represents a Nat resource. It enables the VMs within the specified subnetworks to access Internet without external IP addresses. It specifies a list of subnetworks (and the ranges within) that want to use NAT. Customers can also provide the external IPs that would be used for NAT. GCP would auto-allocate ephemeral IPs if no external IPs are provided.
type RouterNatOutput struct{ *pulumi.OutputState }

func (RouterNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterNat)(nil)).Elem()
}

func (o RouterNatOutput) ToRouterNatOutput() RouterNatOutput {
	return o
}

func (o RouterNatOutput) ToRouterNatOutputWithContext(ctx context.Context) RouterNatOutput {
	return o
}

// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT only.
func (o RouterNatOutput) DrainNatIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouterNat) []string { return v.DrainNatIps }).(pulumi.StringArrayOutput)
}

func (o RouterNatOutput) EnableEndpointIndependentMapping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouterNat) *bool { return v.EnableEndpointIndependentMapping }).(pulumi.BoolPtrOutput)
}

// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
func (o RouterNatOutput) IcmpIdleTimeoutSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouterNat) *int { return v.IcmpIdleTimeoutSec }).(pulumi.IntPtrOutput)
}

// Configure logging on this NAT.
func (o RouterNatOutput) LogConfig() RouterNatLogConfigPtrOutput {
	return o.ApplyT(func(v RouterNat) *RouterNatLogConfig { return v.LogConfig }).(RouterNatLogConfigPtrOutput)
}

// Minimum number of ports allocated to a VM from this NAT config. If not set, a default number of ports is allocated to a VM. This is rounded up to the nearest power of 2. For example, if the value of this field is 50, at least 64 ports are allocated to a VM.
func (o RouterNatOutput) MinPortsPerVm() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouterNat) *int { return v.MinPortsPerVm }).(pulumi.IntPtrOutput)
}

// Unique name of this Nat service. The name must be 1-63 characters long and comply with RFC1035.
func (o RouterNatOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterNat) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify the NatIpAllocateOption, which can take one of the following values: - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs. - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty.
func (o RouterNatOutput) NatIpAllocateOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterNat) *string { return v.NatIpAllocateOption }).(pulumi.StringPtrOutput)
}

// A list of URLs of the IP resources used for this Nat service. These IP addresses must be valid static external IP addresses assigned to the project.
func (o RouterNatOutput) NatIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouterNat) []string { return v.NatIps }).(pulumi.StringArrayOutput)
}

// Specify the Nat option, which can take one of the following values: - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. - ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other Router.Nat section in any Router for this network in this region.
func (o RouterNatOutput) SourceSubnetworkIpRangesToNat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterNat) *string { return v.SourceSubnetworkIpRangesToNat }).(pulumi.StringPtrOutput)
}

// A list of Subnetwork resources whose traffic should be translated by NAT Gateway. It is used only when LIST_OF_SUBNETWORKS is selected for the SubnetworkIpRangeToNatOption above.
func (o RouterNatOutput) Subnetworks() RouterNatSubnetworkToNatArrayOutput {
	return o.ApplyT(func(v RouterNat) []RouterNatSubnetworkToNat { return v.Subnetworks }).(RouterNatSubnetworkToNatArrayOutput)
}

// Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
func (o RouterNatOutput) TcpEstablishedIdleTimeoutSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouterNat) *int { return v.TcpEstablishedIdleTimeoutSec }).(pulumi.IntPtrOutput)
}

// Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
func (o RouterNatOutput) TcpTransitoryIdleTimeoutSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouterNat) *int { return v.TcpTransitoryIdleTimeoutSec }).(pulumi.IntPtrOutput)
}

// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
func (o RouterNatOutput) UdpIdleTimeoutSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouterNat) *int { return v.UdpIdleTimeoutSec }).(pulumi.IntPtrOutput)
}

type RouterNatArrayOutput struct{ *pulumi.OutputState }

func (RouterNatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterNat)(nil)).Elem()
}

func (o RouterNatArrayOutput) ToRouterNatArrayOutput() RouterNatArrayOutput {
	return o
}

func (o RouterNatArrayOutput) ToRouterNatArrayOutputWithContext(ctx context.Context) RouterNatArrayOutput {
	return o
}

func (o RouterNatArrayOutput) Index(i pulumi.IntInput) RouterNatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterNat {
		return vs[0].([]RouterNat)[vs[1].(int)]
	}).(RouterNatOutput)
}

// Configuration of logging on a NAT.
type RouterNatLogConfig struct {
	// Indicates whether or not to export logs. This is false by default.
	Enable *bool `pulumi:"enable"`
	// Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: - ERRORS_ONLY: Export logs only for connection failures. - TRANSLATIONS_ONLY: Export logs only for successful connections. - ALL: Export logs for all connections, successful and unsuccessful.
	Filter *string `pulumi:"filter"`
}

// RouterNatLogConfigInput is an input type that accepts RouterNatLogConfigArgs and RouterNatLogConfigOutput values.
// You can construct a concrete instance of `RouterNatLogConfigInput` via:
//
//          RouterNatLogConfigArgs{...}
type RouterNatLogConfigInput interface {
	pulumi.Input

	ToRouterNatLogConfigOutput() RouterNatLogConfigOutput
	ToRouterNatLogConfigOutputWithContext(context.Context) RouterNatLogConfigOutput
}

// Configuration of logging on a NAT.
type RouterNatLogConfigArgs struct {
	// Indicates whether or not to export logs. This is false by default.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: - ERRORS_ONLY: Export logs only for connection failures. - TRANSLATIONS_ONLY: Export logs only for successful connections. - ALL: Export logs for all connections, successful and unsuccessful.
	Filter *RouterNatLogConfigFilter `pulumi:"filter"`
}

func (RouterNatLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterNatLogConfig)(nil)).Elem()
}

func (i RouterNatLogConfigArgs) ToRouterNatLogConfigOutput() RouterNatLogConfigOutput {
	return i.ToRouterNatLogConfigOutputWithContext(context.Background())
}

func (i RouterNatLogConfigArgs) ToRouterNatLogConfigOutputWithContext(ctx context.Context) RouterNatLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatLogConfigOutput)
}

func (i RouterNatLogConfigArgs) ToRouterNatLogConfigPtrOutput() RouterNatLogConfigPtrOutput {
	return i.ToRouterNatLogConfigPtrOutputWithContext(context.Background())
}

func (i RouterNatLogConfigArgs) ToRouterNatLogConfigPtrOutputWithContext(ctx context.Context) RouterNatLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatLogConfigOutput).ToRouterNatLogConfigPtrOutputWithContext(ctx)
}

// RouterNatLogConfigPtrInput is an input type that accepts RouterNatLogConfigArgs, RouterNatLogConfigPtr and RouterNatLogConfigPtrOutput values.
// You can construct a concrete instance of `RouterNatLogConfigPtrInput` via:
//
//          RouterNatLogConfigArgs{...}
//
//  or:
//
//          nil
type RouterNatLogConfigPtrInput interface {
	pulumi.Input

	ToRouterNatLogConfigPtrOutput() RouterNatLogConfigPtrOutput
	ToRouterNatLogConfigPtrOutputWithContext(context.Context) RouterNatLogConfigPtrOutput
}

type routerNatLogConfigPtrType RouterNatLogConfigArgs

func RouterNatLogConfigPtr(v *RouterNatLogConfigArgs) RouterNatLogConfigPtrInput {
	return (*routerNatLogConfigPtrType)(v)
}

func (*routerNatLogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterNatLogConfig)(nil)).Elem()
}

func (i *routerNatLogConfigPtrType) ToRouterNatLogConfigPtrOutput() RouterNatLogConfigPtrOutput {
	return i.ToRouterNatLogConfigPtrOutputWithContext(context.Background())
}

func (i *routerNatLogConfigPtrType) ToRouterNatLogConfigPtrOutputWithContext(ctx context.Context) RouterNatLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatLogConfigPtrOutput)
}

// Configuration of logging on a NAT.
type RouterNatLogConfigOutput struct{ *pulumi.OutputState }

func (RouterNatLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterNatLogConfig)(nil)).Elem()
}

func (o RouterNatLogConfigOutput) ToRouterNatLogConfigOutput() RouterNatLogConfigOutput {
	return o
}

func (o RouterNatLogConfigOutput) ToRouterNatLogConfigOutputWithContext(ctx context.Context) RouterNatLogConfigOutput {
	return o
}

func (o RouterNatLogConfigOutput) ToRouterNatLogConfigPtrOutput() RouterNatLogConfigPtrOutput {
	return o.ToRouterNatLogConfigPtrOutputWithContext(context.Background())
}

func (o RouterNatLogConfigOutput) ToRouterNatLogConfigPtrOutputWithContext(ctx context.Context) RouterNatLogConfigPtrOutput {
	return o.ApplyT(func(v RouterNatLogConfig) *RouterNatLogConfig {
		return &v
	}).(RouterNatLogConfigPtrOutput)
}

// Indicates whether or not to export logs. This is false by default.
func (o RouterNatLogConfigOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouterNatLogConfig) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: - ERRORS_ONLY: Export logs only for connection failures. - TRANSLATIONS_ONLY: Export logs only for successful connections. - ALL: Export logs for all connections, successful and unsuccessful.
func (o RouterNatLogConfigOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterNatLogConfig) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

type RouterNatLogConfigPtrOutput struct{ *pulumi.OutputState }

func (RouterNatLogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouterNatLogConfig)(nil)).Elem()
}

func (o RouterNatLogConfigPtrOutput) ToRouterNatLogConfigPtrOutput() RouterNatLogConfigPtrOutput {
	return o
}

func (o RouterNatLogConfigPtrOutput) ToRouterNatLogConfigPtrOutputWithContext(ctx context.Context) RouterNatLogConfigPtrOutput {
	return o
}

func (o RouterNatLogConfigPtrOutput) Elem() RouterNatLogConfigOutput {
	return o.ApplyT(func(v *RouterNatLogConfig) RouterNatLogConfig { return *v }).(RouterNatLogConfigOutput)
}

// Indicates whether or not to export logs. This is false by default.
func (o RouterNatLogConfigPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RouterNatLogConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: - ERRORS_ONLY: Export logs only for connection failures. - TRANSLATIONS_ONLY: Export logs only for successful connections. - ALL: Export logs for all connections, successful and unsuccessful.
func (o RouterNatLogConfigPtrOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouterNatLogConfig) *string {
		if v == nil {
			return nil
		}
		return v.Filter
	}).(pulumi.StringPtrOutput)
}

// Configuration of logging on a NAT.
type RouterNatLogConfigResponse struct {
	// Indicates whether or not to export logs. This is false by default.
	Enable bool `pulumi:"enable"`
	// Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: - ERRORS_ONLY: Export logs only for connection failures. - TRANSLATIONS_ONLY: Export logs only for successful connections. - ALL: Export logs for all connections, successful and unsuccessful.
	Filter string `pulumi:"filter"`
}

// RouterNatLogConfigResponseInput is an input type that accepts RouterNatLogConfigResponseArgs and RouterNatLogConfigResponseOutput values.
// You can construct a concrete instance of `RouterNatLogConfigResponseInput` via:
//
//          RouterNatLogConfigResponseArgs{...}
type RouterNatLogConfigResponseInput interface {
	pulumi.Input

	ToRouterNatLogConfigResponseOutput() RouterNatLogConfigResponseOutput
	ToRouterNatLogConfigResponseOutputWithContext(context.Context) RouterNatLogConfigResponseOutput
}

// Configuration of logging on a NAT.
type RouterNatLogConfigResponseArgs struct {
	// Indicates whether or not to export logs. This is false by default.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: - ERRORS_ONLY: Export logs only for connection failures. - TRANSLATIONS_ONLY: Export logs only for successful connections. - ALL: Export logs for all connections, successful and unsuccessful.
	Filter pulumi.StringInput `pulumi:"filter"`
}

func (RouterNatLogConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterNatLogConfigResponse)(nil)).Elem()
}

func (i RouterNatLogConfigResponseArgs) ToRouterNatLogConfigResponseOutput() RouterNatLogConfigResponseOutput {
	return i.ToRouterNatLogConfigResponseOutputWithContext(context.Background())
}

func (i RouterNatLogConfigResponseArgs) ToRouterNatLogConfigResponseOutputWithContext(ctx context.Context) RouterNatLogConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatLogConfigResponseOutput)
}

// Configuration of logging on a NAT.
type RouterNatLogConfigResponseOutput struct{ *pulumi.OutputState }

func (RouterNatLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterNatLogConfigResponse)(nil)).Elem()
}

func (o RouterNatLogConfigResponseOutput) ToRouterNatLogConfigResponseOutput() RouterNatLogConfigResponseOutput {
	return o
}

func (o RouterNatLogConfigResponseOutput) ToRouterNatLogConfigResponseOutputWithContext(ctx context.Context) RouterNatLogConfigResponseOutput {
	return o
}

// Indicates whether or not to export logs. This is false by default.
func (o RouterNatLogConfigResponseOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v RouterNatLogConfigResponse) bool { return v.Enable }).(pulumi.BoolOutput)
}

// Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: - ERRORS_ONLY: Export logs only for connection failures. - TRANSLATIONS_ONLY: Export logs only for successful connections. - ALL: Export logs for all connections, successful and unsuccessful.
func (o RouterNatLogConfigResponseOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v RouterNatLogConfigResponse) string { return v.Filter }).(pulumi.StringOutput)
}

// Represents a Nat resource. It enables the VMs within the specified subnetworks to access Internet without external IP addresses. It specifies a list of subnetworks (and the ranges within) that want to use NAT. Customers can also provide the external IPs that would be used for NAT. GCP would auto-allocate ephemeral IPs if no external IPs are provided.
type RouterNatResponse struct {
	// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT only.
	DrainNatIps                      []string `pulumi:"drainNatIps"`
	EnableEndpointIndependentMapping bool     `pulumi:"enableEndpointIndependentMapping"`
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	IcmpIdleTimeoutSec int `pulumi:"icmpIdleTimeoutSec"`
	// Configure logging on this NAT.
	LogConfig RouterNatLogConfigResponse `pulumi:"logConfig"`
	// Minimum number of ports allocated to a VM from this NAT config. If not set, a default number of ports is allocated to a VM. This is rounded up to the nearest power of 2. For example, if the value of this field is 50, at least 64 ports are allocated to a VM.
	MinPortsPerVm int `pulumi:"minPortsPerVm"`
	// Unique name of this Nat service. The name must be 1-63 characters long and comply with RFC1035.
	Name string `pulumi:"name"`
	// Specify the NatIpAllocateOption, which can take one of the following values: - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs. - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty.
	NatIpAllocateOption string `pulumi:"natIpAllocateOption"`
	// A list of URLs of the IP resources used for this Nat service. These IP addresses must be valid static external IP addresses assigned to the project.
	NatIps []string `pulumi:"natIps"`
	// Specify the Nat option, which can take one of the following values: - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. - ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other Router.Nat section in any Router for this network in this region.
	SourceSubnetworkIpRangesToNat string `pulumi:"sourceSubnetworkIpRangesToNat"`
	// A list of Subnetwork resources whose traffic should be translated by NAT Gateway. It is used only when LIST_OF_SUBNETWORKS is selected for the SubnetworkIpRangeToNatOption above.
	Subnetworks []RouterNatSubnetworkToNatResponse `pulumi:"subnetworks"`
	// Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
	TcpEstablishedIdleTimeoutSec int `pulumi:"tcpEstablishedIdleTimeoutSec"`
	// Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
	TcpTransitoryIdleTimeoutSec int `pulumi:"tcpTransitoryIdleTimeoutSec"`
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	UdpIdleTimeoutSec int `pulumi:"udpIdleTimeoutSec"`
}

// RouterNatResponseInput is an input type that accepts RouterNatResponseArgs and RouterNatResponseOutput values.
// You can construct a concrete instance of `RouterNatResponseInput` via:
//
//          RouterNatResponseArgs{...}
type RouterNatResponseInput interface {
	pulumi.Input

	ToRouterNatResponseOutput() RouterNatResponseOutput
	ToRouterNatResponseOutputWithContext(context.Context) RouterNatResponseOutput
}

// Represents a Nat resource. It enables the VMs within the specified subnetworks to access Internet without external IP addresses. It specifies a list of subnetworks (and the ranges within) that want to use NAT. Customers can also provide the external IPs that would be used for NAT. GCP would auto-allocate ephemeral IPs if no external IPs are provided.
type RouterNatResponseArgs struct {
	// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT only.
	DrainNatIps                      pulumi.StringArrayInput `pulumi:"drainNatIps"`
	EnableEndpointIndependentMapping pulumi.BoolInput        `pulumi:"enableEndpointIndependentMapping"`
	// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
	IcmpIdleTimeoutSec pulumi.IntInput `pulumi:"icmpIdleTimeoutSec"`
	// Configure logging on this NAT.
	LogConfig RouterNatLogConfigResponseInput `pulumi:"logConfig"`
	// Minimum number of ports allocated to a VM from this NAT config. If not set, a default number of ports is allocated to a VM. This is rounded up to the nearest power of 2. For example, if the value of this field is 50, at least 64 ports are allocated to a VM.
	MinPortsPerVm pulumi.IntInput `pulumi:"minPortsPerVm"`
	// Unique name of this Nat service. The name must be 1-63 characters long and comply with RFC1035.
	Name pulumi.StringInput `pulumi:"name"`
	// Specify the NatIpAllocateOption, which can take one of the following values: - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs. - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty.
	NatIpAllocateOption pulumi.StringInput `pulumi:"natIpAllocateOption"`
	// A list of URLs of the IP resources used for this Nat service. These IP addresses must be valid static external IP addresses assigned to the project.
	NatIps pulumi.StringArrayInput `pulumi:"natIps"`
	// Specify the Nat option, which can take one of the following values: - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. - ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other Router.Nat section in any Router for this network in this region.
	SourceSubnetworkIpRangesToNat pulumi.StringInput `pulumi:"sourceSubnetworkIpRangesToNat"`
	// A list of Subnetwork resources whose traffic should be translated by NAT Gateway. It is used only when LIST_OF_SUBNETWORKS is selected for the SubnetworkIpRangeToNatOption above.
	Subnetworks RouterNatSubnetworkToNatResponseArrayInput `pulumi:"subnetworks"`
	// Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
	TcpEstablishedIdleTimeoutSec pulumi.IntInput `pulumi:"tcpEstablishedIdleTimeoutSec"`
	// Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
	TcpTransitoryIdleTimeoutSec pulumi.IntInput `pulumi:"tcpTransitoryIdleTimeoutSec"`
	// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
	UdpIdleTimeoutSec pulumi.IntInput `pulumi:"udpIdleTimeoutSec"`
}

func (RouterNatResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterNatResponse)(nil)).Elem()
}

func (i RouterNatResponseArgs) ToRouterNatResponseOutput() RouterNatResponseOutput {
	return i.ToRouterNatResponseOutputWithContext(context.Background())
}

func (i RouterNatResponseArgs) ToRouterNatResponseOutputWithContext(ctx context.Context) RouterNatResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatResponseOutput)
}

// RouterNatResponseArrayInput is an input type that accepts RouterNatResponseArray and RouterNatResponseArrayOutput values.
// You can construct a concrete instance of `RouterNatResponseArrayInput` via:
//
//          RouterNatResponseArray{ RouterNatResponseArgs{...} }
type RouterNatResponseArrayInput interface {
	pulumi.Input

	ToRouterNatResponseArrayOutput() RouterNatResponseArrayOutput
	ToRouterNatResponseArrayOutputWithContext(context.Context) RouterNatResponseArrayOutput
}

type RouterNatResponseArray []RouterNatResponseInput

func (RouterNatResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterNatResponse)(nil)).Elem()
}

func (i RouterNatResponseArray) ToRouterNatResponseArrayOutput() RouterNatResponseArrayOutput {
	return i.ToRouterNatResponseArrayOutputWithContext(context.Background())
}

func (i RouterNatResponseArray) ToRouterNatResponseArrayOutputWithContext(ctx context.Context) RouterNatResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatResponseArrayOutput)
}

// Represents a Nat resource. It enables the VMs within the specified subnetworks to access Internet without external IP addresses. It specifies a list of subnetworks (and the ranges within) that want to use NAT. Customers can also provide the external IPs that would be used for NAT. GCP would auto-allocate ephemeral IPs if no external IPs are provided.
type RouterNatResponseOutput struct{ *pulumi.OutputState }

func (RouterNatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterNatResponse)(nil)).Elem()
}

func (o RouterNatResponseOutput) ToRouterNatResponseOutput() RouterNatResponseOutput {
	return o
}

func (o RouterNatResponseOutput) ToRouterNatResponseOutputWithContext(ctx context.Context) RouterNatResponseOutput {
	return o
}

// A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a NAT only.
func (o RouterNatResponseOutput) DrainNatIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouterNatResponse) []string { return v.DrainNatIps }).(pulumi.StringArrayOutput)
}

func (o RouterNatResponseOutput) EnableEndpointIndependentMapping() pulumi.BoolOutput {
	return o.ApplyT(func(v RouterNatResponse) bool { return v.EnableEndpointIndependentMapping }).(pulumi.BoolOutput)
}

// Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
func (o RouterNatResponseOutput) IcmpIdleTimeoutSec() pulumi.IntOutput {
	return o.ApplyT(func(v RouterNatResponse) int { return v.IcmpIdleTimeoutSec }).(pulumi.IntOutput)
}

// Configure logging on this NAT.
func (o RouterNatResponseOutput) LogConfig() RouterNatLogConfigResponseOutput {
	return o.ApplyT(func(v RouterNatResponse) RouterNatLogConfigResponse { return v.LogConfig }).(RouterNatLogConfigResponseOutput)
}

// Minimum number of ports allocated to a VM from this NAT config. If not set, a default number of ports is allocated to a VM. This is rounded up to the nearest power of 2. For example, if the value of this field is 50, at least 64 ports are allocated to a VM.
func (o RouterNatResponseOutput) MinPortsPerVm() pulumi.IntOutput {
	return o.ApplyT(func(v RouterNatResponse) int { return v.MinPortsPerVm }).(pulumi.IntOutput)
}

// Unique name of this Nat service. The name must be 1-63 characters long and comply with RFC1035.
func (o RouterNatResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RouterNatResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Specify the NatIpAllocateOption, which can take one of the following values: - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs. - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should be empty.
func (o RouterNatResponseOutput) NatIpAllocateOption() pulumi.StringOutput {
	return o.ApplyT(func(v RouterNatResponse) string { return v.NatIpAllocateOption }).(pulumi.StringOutput)
}

// A list of URLs of the IP resources used for this Nat service. These IP addresses must be valid static external IP addresses assigned to the project.
func (o RouterNatResponseOutput) NatIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouterNatResponse) []string { return v.NatIps }).(pulumi.StringArrayOutput)
}

// Specify the Nat option, which can take one of the following values: - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. - ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other Router.Nat section in any Router for this network in this region.
func (o RouterNatResponseOutput) SourceSubnetworkIpRangesToNat() pulumi.StringOutput {
	return o.ApplyT(func(v RouterNatResponse) string { return v.SourceSubnetworkIpRangesToNat }).(pulumi.StringOutput)
}

// A list of Subnetwork resources whose traffic should be translated by NAT Gateway. It is used only when LIST_OF_SUBNETWORKS is selected for the SubnetworkIpRangeToNatOption above.
func (o RouterNatResponseOutput) Subnetworks() RouterNatSubnetworkToNatResponseArrayOutput {
	return o.ApplyT(func(v RouterNatResponse) []RouterNatSubnetworkToNatResponse { return v.Subnetworks }).(RouterNatSubnetworkToNatResponseArrayOutput)
}

// Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
func (o RouterNatResponseOutput) TcpEstablishedIdleTimeoutSec() pulumi.IntOutput {
	return o.ApplyT(func(v RouterNatResponse) int { return v.TcpEstablishedIdleTimeoutSec }).(pulumi.IntOutput)
}

// Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
func (o RouterNatResponseOutput) TcpTransitoryIdleTimeoutSec() pulumi.IntOutput {
	return o.ApplyT(func(v RouterNatResponse) int { return v.TcpTransitoryIdleTimeoutSec }).(pulumi.IntOutput)
}

// Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
func (o RouterNatResponseOutput) UdpIdleTimeoutSec() pulumi.IntOutput {
	return o.ApplyT(func(v RouterNatResponse) int { return v.UdpIdleTimeoutSec }).(pulumi.IntOutput)
}

type RouterNatResponseArrayOutput struct{ *pulumi.OutputState }

func (RouterNatResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterNatResponse)(nil)).Elem()
}

func (o RouterNatResponseArrayOutput) ToRouterNatResponseArrayOutput() RouterNatResponseArrayOutput {
	return o
}

func (o RouterNatResponseArrayOutput) ToRouterNatResponseArrayOutputWithContext(ctx context.Context) RouterNatResponseArrayOutput {
	return o
}

func (o RouterNatResponseArrayOutput) Index(i pulumi.IntInput) RouterNatResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterNatResponse {
		return vs[0].([]RouterNatResponse)[vs[1].(int)]
	}).(RouterNatResponseOutput)
}

// Defines the IP ranges that want to use NAT for a subnetwork.
type RouterNatSubnetworkToNat struct {
	// URL for the subnetwork resource that will use NAT.
	Name *string `pulumi:"name"`
	// A list of the secondary ranges of the Subnetwork that are allowed to use NAT. This can be populated only if "LIST_OF_SECONDARY_IP_RANGES" is one of the values in source_ip_ranges_to_nat.
	SecondaryIpRangeNames []string `pulumi:"secondaryIpRangeNames"`
	// Specify the options for NAT ranges in the Subnetwork. All options of a single value are valid except NAT_IP_RANGE_OPTION_UNSPECIFIED. The only valid option with multiple values is: ["PRIMARY_IP_RANGE", "LIST_OF_SECONDARY_IP_RANGES"] Default: [ALL_IP_RANGES]
	SourceIpRangesToNat []string `pulumi:"sourceIpRangesToNat"`
}

// RouterNatSubnetworkToNatInput is an input type that accepts RouterNatSubnetworkToNatArgs and RouterNatSubnetworkToNatOutput values.
// You can construct a concrete instance of `RouterNatSubnetworkToNatInput` via:
//
//          RouterNatSubnetworkToNatArgs{...}
type RouterNatSubnetworkToNatInput interface {
	pulumi.Input

	ToRouterNatSubnetworkToNatOutput() RouterNatSubnetworkToNatOutput
	ToRouterNatSubnetworkToNatOutputWithContext(context.Context) RouterNatSubnetworkToNatOutput
}

// Defines the IP ranges that want to use NAT for a subnetwork.
type RouterNatSubnetworkToNatArgs struct {
	// URL for the subnetwork resource that will use NAT.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A list of the secondary ranges of the Subnetwork that are allowed to use NAT. This can be populated only if "LIST_OF_SECONDARY_IP_RANGES" is one of the values in source_ip_ranges_to_nat.
	SecondaryIpRangeNames pulumi.StringArrayInput `pulumi:"secondaryIpRangeNames"`
	// Specify the options for NAT ranges in the Subnetwork. All options of a single value are valid except NAT_IP_RANGE_OPTION_UNSPECIFIED. The only valid option with multiple values is: ["PRIMARY_IP_RANGE", "LIST_OF_SECONDARY_IP_RANGES"] Default: [ALL_IP_RANGES]
	SourceIpRangesToNat RouterNatSubnetworkToNatSourceIpRangesToNatItemArrayInput `pulumi:"sourceIpRangesToNat"`
}

func (RouterNatSubnetworkToNatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterNatSubnetworkToNat)(nil)).Elem()
}

func (i RouterNatSubnetworkToNatArgs) ToRouterNatSubnetworkToNatOutput() RouterNatSubnetworkToNatOutput {
	return i.ToRouterNatSubnetworkToNatOutputWithContext(context.Background())
}

func (i RouterNatSubnetworkToNatArgs) ToRouterNatSubnetworkToNatOutputWithContext(ctx context.Context) RouterNatSubnetworkToNatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatSubnetworkToNatOutput)
}

// RouterNatSubnetworkToNatArrayInput is an input type that accepts RouterNatSubnetworkToNatArray and RouterNatSubnetworkToNatArrayOutput values.
// You can construct a concrete instance of `RouterNatSubnetworkToNatArrayInput` via:
//
//          RouterNatSubnetworkToNatArray{ RouterNatSubnetworkToNatArgs{...} }
type RouterNatSubnetworkToNatArrayInput interface {
	pulumi.Input

	ToRouterNatSubnetworkToNatArrayOutput() RouterNatSubnetworkToNatArrayOutput
	ToRouterNatSubnetworkToNatArrayOutputWithContext(context.Context) RouterNatSubnetworkToNatArrayOutput
}

type RouterNatSubnetworkToNatArray []RouterNatSubnetworkToNatInput

func (RouterNatSubnetworkToNatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterNatSubnetworkToNat)(nil)).Elem()
}

func (i RouterNatSubnetworkToNatArray) ToRouterNatSubnetworkToNatArrayOutput() RouterNatSubnetworkToNatArrayOutput {
	return i.ToRouterNatSubnetworkToNatArrayOutputWithContext(context.Background())
}

func (i RouterNatSubnetworkToNatArray) ToRouterNatSubnetworkToNatArrayOutputWithContext(ctx context.Context) RouterNatSubnetworkToNatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatSubnetworkToNatArrayOutput)
}

// Defines the IP ranges that want to use NAT for a subnetwork.
type RouterNatSubnetworkToNatOutput struct{ *pulumi.OutputState }

func (RouterNatSubnetworkToNatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterNatSubnetworkToNat)(nil)).Elem()
}

func (o RouterNatSubnetworkToNatOutput) ToRouterNatSubnetworkToNatOutput() RouterNatSubnetworkToNatOutput {
	return o
}

func (o RouterNatSubnetworkToNatOutput) ToRouterNatSubnetworkToNatOutputWithContext(ctx context.Context) RouterNatSubnetworkToNatOutput {
	return o
}

// URL for the subnetwork resource that will use NAT.
func (o RouterNatSubnetworkToNatOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterNatSubnetworkToNat) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A list of the secondary ranges of the Subnetwork that are allowed to use NAT. This can be populated only if "LIST_OF_SECONDARY_IP_RANGES" is one of the values in source_ip_ranges_to_nat.
func (o RouterNatSubnetworkToNatOutput) SecondaryIpRangeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouterNatSubnetworkToNat) []string { return v.SecondaryIpRangeNames }).(pulumi.StringArrayOutput)
}

// Specify the options for NAT ranges in the Subnetwork. All options of a single value are valid except NAT_IP_RANGE_OPTION_UNSPECIFIED. The only valid option with multiple values is: ["PRIMARY_IP_RANGE", "LIST_OF_SECONDARY_IP_RANGES"] Default: [ALL_IP_RANGES]
func (o RouterNatSubnetworkToNatOutput) SourceIpRangesToNat() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouterNatSubnetworkToNat) []string { return v.SourceIpRangesToNat }).(pulumi.StringArrayOutput)
}

type RouterNatSubnetworkToNatArrayOutput struct{ *pulumi.OutputState }

func (RouterNatSubnetworkToNatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterNatSubnetworkToNat)(nil)).Elem()
}

func (o RouterNatSubnetworkToNatArrayOutput) ToRouterNatSubnetworkToNatArrayOutput() RouterNatSubnetworkToNatArrayOutput {
	return o
}

func (o RouterNatSubnetworkToNatArrayOutput) ToRouterNatSubnetworkToNatArrayOutputWithContext(ctx context.Context) RouterNatSubnetworkToNatArrayOutput {
	return o
}

func (o RouterNatSubnetworkToNatArrayOutput) Index(i pulumi.IntInput) RouterNatSubnetworkToNatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterNatSubnetworkToNat {
		return vs[0].([]RouterNatSubnetworkToNat)[vs[1].(int)]
	}).(RouterNatSubnetworkToNatOutput)
}

// Defines the IP ranges that want to use NAT for a subnetwork.
type RouterNatSubnetworkToNatResponse struct {
	// URL for the subnetwork resource that will use NAT.
	Name string `pulumi:"name"`
	// A list of the secondary ranges of the Subnetwork that are allowed to use NAT. This can be populated only if "LIST_OF_SECONDARY_IP_RANGES" is one of the values in source_ip_ranges_to_nat.
	SecondaryIpRangeNames []string `pulumi:"secondaryIpRangeNames"`
	// Specify the options for NAT ranges in the Subnetwork. All options of a single value are valid except NAT_IP_RANGE_OPTION_UNSPECIFIED. The only valid option with multiple values is: ["PRIMARY_IP_RANGE", "LIST_OF_SECONDARY_IP_RANGES"] Default: [ALL_IP_RANGES]
	SourceIpRangesToNat []string `pulumi:"sourceIpRangesToNat"`
}

// RouterNatSubnetworkToNatResponseInput is an input type that accepts RouterNatSubnetworkToNatResponseArgs and RouterNatSubnetworkToNatResponseOutput values.
// You can construct a concrete instance of `RouterNatSubnetworkToNatResponseInput` via:
//
//          RouterNatSubnetworkToNatResponseArgs{...}
type RouterNatSubnetworkToNatResponseInput interface {
	pulumi.Input

	ToRouterNatSubnetworkToNatResponseOutput() RouterNatSubnetworkToNatResponseOutput
	ToRouterNatSubnetworkToNatResponseOutputWithContext(context.Context) RouterNatSubnetworkToNatResponseOutput
}

// Defines the IP ranges that want to use NAT for a subnetwork.
type RouterNatSubnetworkToNatResponseArgs struct {
	// URL for the subnetwork resource that will use NAT.
	Name pulumi.StringInput `pulumi:"name"`
	// A list of the secondary ranges of the Subnetwork that are allowed to use NAT. This can be populated only if "LIST_OF_SECONDARY_IP_RANGES" is one of the values in source_ip_ranges_to_nat.
	SecondaryIpRangeNames pulumi.StringArrayInput `pulumi:"secondaryIpRangeNames"`
	// Specify the options for NAT ranges in the Subnetwork. All options of a single value are valid except NAT_IP_RANGE_OPTION_UNSPECIFIED. The only valid option with multiple values is: ["PRIMARY_IP_RANGE", "LIST_OF_SECONDARY_IP_RANGES"] Default: [ALL_IP_RANGES]
	SourceIpRangesToNat pulumi.StringArrayInput `pulumi:"sourceIpRangesToNat"`
}

func (RouterNatSubnetworkToNatResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterNatSubnetworkToNatResponse)(nil)).Elem()
}

func (i RouterNatSubnetworkToNatResponseArgs) ToRouterNatSubnetworkToNatResponseOutput() RouterNatSubnetworkToNatResponseOutput {
	return i.ToRouterNatSubnetworkToNatResponseOutputWithContext(context.Background())
}

func (i RouterNatSubnetworkToNatResponseArgs) ToRouterNatSubnetworkToNatResponseOutputWithContext(ctx context.Context) RouterNatSubnetworkToNatResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatSubnetworkToNatResponseOutput)
}

// RouterNatSubnetworkToNatResponseArrayInput is an input type that accepts RouterNatSubnetworkToNatResponseArray and RouterNatSubnetworkToNatResponseArrayOutput values.
// You can construct a concrete instance of `RouterNatSubnetworkToNatResponseArrayInput` via:
//
//          RouterNatSubnetworkToNatResponseArray{ RouterNatSubnetworkToNatResponseArgs{...} }
type RouterNatSubnetworkToNatResponseArrayInput interface {
	pulumi.Input

	ToRouterNatSubnetworkToNatResponseArrayOutput() RouterNatSubnetworkToNatResponseArrayOutput
	ToRouterNatSubnetworkToNatResponseArrayOutputWithContext(context.Context) RouterNatSubnetworkToNatResponseArrayOutput
}

type RouterNatSubnetworkToNatResponseArray []RouterNatSubnetworkToNatResponseInput

func (RouterNatSubnetworkToNatResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterNatSubnetworkToNatResponse)(nil)).Elem()
}

func (i RouterNatSubnetworkToNatResponseArray) ToRouterNatSubnetworkToNatResponseArrayOutput() RouterNatSubnetworkToNatResponseArrayOutput {
	return i.ToRouterNatSubnetworkToNatResponseArrayOutputWithContext(context.Background())
}

func (i RouterNatSubnetworkToNatResponseArray) ToRouterNatSubnetworkToNatResponseArrayOutputWithContext(ctx context.Context) RouterNatSubnetworkToNatResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterNatSubnetworkToNatResponseArrayOutput)
}

// Defines the IP ranges that want to use NAT for a subnetwork.
type RouterNatSubnetworkToNatResponseOutput struct{ *pulumi.OutputState }

func (RouterNatSubnetworkToNatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterNatSubnetworkToNatResponse)(nil)).Elem()
}

func (o RouterNatSubnetworkToNatResponseOutput) ToRouterNatSubnetworkToNatResponseOutput() RouterNatSubnetworkToNatResponseOutput {
	return o
}

func (o RouterNatSubnetworkToNatResponseOutput) ToRouterNatSubnetworkToNatResponseOutputWithContext(ctx context.Context) RouterNatSubnetworkToNatResponseOutput {
	return o
}

// URL for the subnetwork resource that will use NAT.
func (o RouterNatSubnetworkToNatResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RouterNatSubnetworkToNatResponse) string { return v.Name }).(pulumi.StringOutput)
}

// A list of the secondary ranges of the Subnetwork that are allowed to use NAT. This can be populated only if "LIST_OF_SECONDARY_IP_RANGES" is one of the values in source_ip_ranges_to_nat.
func (o RouterNatSubnetworkToNatResponseOutput) SecondaryIpRangeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouterNatSubnetworkToNatResponse) []string { return v.SecondaryIpRangeNames }).(pulumi.StringArrayOutput)
}

// Specify the options for NAT ranges in the Subnetwork. All options of a single value are valid except NAT_IP_RANGE_OPTION_UNSPECIFIED. The only valid option with multiple values is: ["PRIMARY_IP_RANGE", "LIST_OF_SECONDARY_IP_RANGES"] Default: [ALL_IP_RANGES]
func (o RouterNatSubnetworkToNatResponseOutput) SourceIpRangesToNat() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouterNatSubnetworkToNatResponse) []string { return v.SourceIpRangesToNat }).(pulumi.StringArrayOutput)
}

type RouterNatSubnetworkToNatResponseArrayOutput struct{ *pulumi.OutputState }

func (RouterNatSubnetworkToNatResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterNatSubnetworkToNatResponse)(nil)).Elem()
}

func (o RouterNatSubnetworkToNatResponseArrayOutput) ToRouterNatSubnetworkToNatResponseArrayOutput() RouterNatSubnetworkToNatResponseArrayOutput {
	return o
}

func (o RouterNatSubnetworkToNatResponseArrayOutput) ToRouterNatSubnetworkToNatResponseArrayOutputWithContext(ctx context.Context) RouterNatSubnetworkToNatResponseArrayOutput {
	return o
}

func (o RouterNatSubnetworkToNatResponseArrayOutput) Index(i pulumi.IntInput) RouterNatSubnetworkToNatResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterNatSubnetworkToNatResponse {
		return vs[0].([]RouterNatSubnetworkToNatResponse)[vs[1].(int)]
	}).(RouterNatSubnetworkToNatResponseOutput)
}

// This is deprecated and has no effect. Do not use.
type Rule struct {
	// This is deprecated and has no effect. Do not use.
	Action *string `pulumi:"action"`
	// This is deprecated and has no effect. Do not use.
	Conditions []Condition `pulumi:"conditions"`
	// This is deprecated and has no effect. Do not use.
	Description *string `pulumi:"description"`
	// This is deprecated and has no effect. Do not use.
	Ins []string `pulumi:"ins"`
	// This is deprecated and has no effect. Do not use.
	LogConfigs []LogConfig `pulumi:"logConfigs"`
	// This is deprecated and has no effect. Do not use.
	NotIns []string `pulumi:"notIns"`
	// This is deprecated and has no effect. Do not use.
	Permissions []string `pulumi:"permissions"`
}

// RuleInput is an input type that accepts RuleArgs and RuleOutput values.
// You can construct a concrete instance of `RuleInput` via:
//
//          RuleArgs{...}
type RuleInput interface {
	pulumi.Input

	ToRuleOutput() RuleOutput
	ToRuleOutputWithContext(context.Context) RuleOutput
}

// This is deprecated and has no effect. Do not use.
type RuleArgs struct {
	// This is deprecated and has no effect. Do not use.
	Action *RuleAction `pulumi:"action"`
	// This is deprecated and has no effect. Do not use.
	Conditions ConditionArrayInput `pulumi:"conditions"`
	// This is deprecated and has no effect. Do not use.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// This is deprecated and has no effect. Do not use.
	Ins pulumi.StringArrayInput `pulumi:"ins"`
	// This is deprecated and has no effect. Do not use.
	LogConfigs LogConfigArrayInput `pulumi:"logConfigs"`
	// This is deprecated and has no effect. Do not use.
	NotIns pulumi.StringArrayInput `pulumi:"notIns"`
	// This is deprecated and has no effect. Do not use.
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Rule)(nil)).Elem()
}

func (i RuleArgs) ToRuleOutput() RuleOutput {
	return i.ToRuleOutputWithContext(context.Background())
}

func (i RuleArgs) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleOutput)
}

// RuleArrayInput is an input type that accepts RuleArray and RuleArrayOutput values.
// You can construct a concrete instance of `RuleArrayInput` via:
//
//          RuleArray{ RuleArgs{...} }
type RuleArrayInput interface {
	pulumi.Input

	ToRuleArrayOutput() RuleArrayOutput
	ToRuleArrayOutputWithContext(context.Context) RuleArrayOutput
}

type RuleArray []RuleInput

func (RuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Rule)(nil)).Elem()
}

func (i RuleArray) ToRuleArrayOutput() RuleArrayOutput {
	return i.ToRuleArrayOutputWithContext(context.Background())
}

func (i RuleArray) ToRuleArrayOutputWithContext(ctx context.Context) RuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleArrayOutput)
}

// This is deprecated and has no effect. Do not use.
type RuleOutput struct{ *pulumi.OutputState }

func (RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Rule)(nil)).Elem()
}

func (o RuleOutput) ToRuleOutput() RuleOutput {
	return o
}

func (o RuleOutput) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return o
}

// This is deprecated and has no effect. Do not use.
func (o RuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o RuleOutput) Conditions() ConditionArrayOutput {
	return o.ApplyT(func(v Rule) []Condition { return v.Conditions }).(ConditionArrayOutput)
}

// This is deprecated and has no effect. Do not use.
func (o RuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// This is deprecated and has no effect. Do not use.
func (o RuleOutput) Ins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Rule) []string { return v.Ins }).(pulumi.StringArrayOutput)
}

// This is deprecated and has no effect. Do not use.
func (o RuleOutput) LogConfigs() LogConfigArrayOutput {
	return o.ApplyT(func(v Rule) []LogConfig { return v.LogConfigs }).(LogConfigArrayOutput)
}

// This is deprecated and has no effect. Do not use.
func (o RuleOutput) NotIns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Rule) []string { return v.NotIns }).(pulumi.StringArrayOutput)
}

// This is deprecated and has no effect. Do not use.
func (o RuleOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Rule) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type RuleArrayOutput struct{ *pulumi.OutputState }

func (RuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Rule)(nil)).Elem()
}

func (o RuleArrayOutput) ToRuleArrayOutput() RuleArrayOutput {
	return o
}

func (o RuleArrayOutput) ToRuleArrayOutputWithContext(ctx context.Context) RuleArrayOutput {
	return o
}

func (o RuleArrayOutput) Index(i pulumi.IntInput) RuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Rule {
		return vs[0].([]Rule)[vs[1].(int)]
	}).(RuleOutput)
}

// This is deprecated and has no effect. Do not use.
type RuleResponse struct {
	// This is deprecated and has no effect. Do not use.
	Action string `pulumi:"action"`
	// This is deprecated and has no effect. Do not use.
	Conditions []ConditionResponse `pulumi:"conditions"`
	// This is deprecated and has no effect. Do not use.
	Description string `pulumi:"description"`
	// This is deprecated and has no effect. Do not use.
	Ins []string `pulumi:"ins"`
	// This is deprecated and has no effect. Do not use.
	LogConfigs []LogConfigResponse `pulumi:"logConfigs"`
	// This is deprecated and has no effect. Do not use.
	NotIns []string `pulumi:"notIns"`
	// This is deprecated and has no effect. Do not use.
	Permissions []string `pulumi:"permissions"`
}

// RuleResponseInput is an input type that accepts RuleResponseArgs and RuleResponseOutput values.
// You can construct a concrete instance of `RuleResponseInput` via:
//
//          RuleResponseArgs{...}
type RuleResponseInput interface {
	pulumi.Input

	ToRuleResponseOutput() RuleResponseOutput
	ToRuleResponseOutputWithContext(context.Context) RuleResponseOutput
}

// This is deprecated and has no effect. Do not use.
type RuleResponseArgs struct {
	// This is deprecated and has no effect. Do not use.
	Action pulumi.StringInput `pulumi:"action"`
	// This is deprecated and has no effect. Do not use.
	Conditions ConditionResponseArrayInput `pulumi:"conditions"`
	// This is deprecated and has no effect. Do not use.
	Description pulumi.StringInput `pulumi:"description"`
	// This is deprecated and has no effect. Do not use.
	Ins pulumi.StringArrayInput `pulumi:"ins"`
	// This is deprecated and has no effect. Do not use.
	LogConfigs LogConfigResponseArrayInput `pulumi:"logConfigs"`
	// This is deprecated and has no effect. Do not use.
	NotIns pulumi.StringArrayInput `pulumi:"notIns"`
	// This is deprecated and has no effect. Do not use.
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (RuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleResponse)(nil)).Elem()
}

func (i RuleResponseArgs) ToRuleResponseOutput() RuleResponseOutput {
	return i.ToRuleResponseOutputWithContext(context.Background())
}

func (i RuleResponseArgs) ToRuleResponseOutputWithContext(ctx context.Context) RuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleResponseOutput)
}

// RuleResponseArrayInput is an input type that accepts RuleResponseArray and RuleResponseArrayOutput values.
// You can construct a concrete instance of `RuleResponseArrayInput` via:
//
//          RuleResponseArray{ RuleResponseArgs{...} }
type RuleResponseArrayInput interface {
	pulumi.Input

	ToRuleResponseArrayOutput() RuleResponseArrayOutput
	ToRuleResponseArrayOutputWithContext(context.Context) RuleResponseArrayOutput
}

type RuleResponseArray []RuleResponseInput

func (RuleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleResponse)(nil)).Elem()
}

func (i RuleResponseArray) ToRuleResponseArrayOutput() RuleResponseArrayOutput {
	return i.ToRuleResponseArrayOutputWithContext(context.Background())
}

func (i RuleResponseArray) ToRuleResponseArrayOutputWithContext(ctx context.Context) RuleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleResponseArrayOutput)
}

// This is deprecated and has no effect. Do not use.
type RuleResponseOutput struct{ *pulumi.OutputState }

func (RuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleResponse)(nil)).Elem()
}

func (o RuleResponseOutput) ToRuleResponseOutput() RuleResponseOutput {
	return o
}

func (o RuleResponseOutput) ToRuleResponseOutputWithContext(ctx context.Context) RuleResponseOutput {
	return o
}

// This is deprecated and has no effect. Do not use.
func (o RuleResponseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v RuleResponse) string { return v.Action }).(pulumi.StringOutput)
}

// This is deprecated and has no effect. Do not use.
func (o RuleResponseOutput) Conditions() ConditionResponseArrayOutput {
	return o.ApplyT(func(v RuleResponse) []ConditionResponse { return v.Conditions }).(ConditionResponseArrayOutput)
}

// This is deprecated and has no effect. Do not use.
func (o RuleResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v RuleResponse) string { return v.Description }).(pulumi.StringOutput)
}

// This is deprecated and has no effect. Do not use.
func (o RuleResponseOutput) Ins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleResponse) []string { return v.Ins }).(pulumi.StringArrayOutput)
}

// This is deprecated and has no effect. Do not use.
func (o RuleResponseOutput) LogConfigs() LogConfigResponseArrayOutput {
	return o.ApplyT(func(v RuleResponse) []LogConfigResponse { return v.LogConfigs }).(LogConfigResponseArrayOutput)
}

// This is deprecated and has no effect. Do not use.
func (o RuleResponseOutput) NotIns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleResponse) []string { return v.NotIns }).(pulumi.StringArrayOutput)
}

// This is deprecated and has no effect. Do not use.
func (o RuleResponseOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleResponse) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type RuleResponseArrayOutput struct{ *pulumi.OutputState }

func (RuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleResponse)(nil)).Elem()
}

func (o RuleResponseArrayOutput) ToRuleResponseArrayOutput() RuleResponseArrayOutput {
	return o
}

func (o RuleResponseArrayOutput) ToRuleResponseArrayOutputWithContext(ctx context.Context) RuleResponseArrayOutput {
	return o
}

func (o RuleResponseArrayOutput) Index(i pulumi.IntInput) RuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleResponse {
		return vs[0].([]RuleResponse)[vs[1].(int)]
	}).(RuleResponseOutput)
}

type SSLHealthCheck struct {
	// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
	Port *int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName *string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, SSL health check follows behavior specified in port and portName fields.
	PortSpecification *string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *string `pulumi:"proxyHeader"`
	// The application data to send once the SSL connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
	Request *string `pulumi:"request"`
	// The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
	Response *string `pulumi:"response"`
}

// SSLHealthCheckInput is an input type that accepts SSLHealthCheckArgs and SSLHealthCheckOutput values.
// You can construct a concrete instance of `SSLHealthCheckInput` via:
//
//          SSLHealthCheckArgs{...}
type SSLHealthCheckInput interface {
	pulumi.Input

	ToSSLHealthCheckOutput() SSLHealthCheckOutput
	ToSSLHealthCheckOutputWithContext(context.Context) SSLHealthCheckOutput
}

type SSLHealthCheckArgs struct {
	// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, SSL health check follows behavior specified in port and portName fields.
	PortSpecification *SSLHealthCheckPortSpecification `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *SSLHealthCheckProxyHeader `pulumi:"proxyHeader"`
	// The application data to send once the SSL connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
	Request pulumi.StringPtrInput `pulumi:"request"`
	// The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (SSLHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SSLHealthCheck)(nil)).Elem()
}

func (i SSLHealthCheckArgs) ToSSLHealthCheckOutput() SSLHealthCheckOutput {
	return i.ToSSLHealthCheckOutputWithContext(context.Background())
}

func (i SSLHealthCheckArgs) ToSSLHealthCheckOutputWithContext(ctx context.Context) SSLHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSLHealthCheckOutput)
}

func (i SSLHealthCheckArgs) ToSSLHealthCheckPtrOutput() SSLHealthCheckPtrOutput {
	return i.ToSSLHealthCheckPtrOutputWithContext(context.Background())
}

func (i SSLHealthCheckArgs) ToSSLHealthCheckPtrOutputWithContext(ctx context.Context) SSLHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSLHealthCheckOutput).ToSSLHealthCheckPtrOutputWithContext(ctx)
}

// SSLHealthCheckPtrInput is an input type that accepts SSLHealthCheckArgs, SSLHealthCheckPtr and SSLHealthCheckPtrOutput values.
// You can construct a concrete instance of `SSLHealthCheckPtrInput` via:
//
//          SSLHealthCheckArgs{...}
//
//  or:
//
//          nil
type SSLHealthCheckPtrInput interface {
	pulumi.Input

	ToSSLHealthCheckPtrOutput() SSLHealthCheckPtrOutput
	ToSSLHealthCheckPtrOutputWithContext(context.Context) SSLHealthCheckPtrOutput
}

type sslhealthCheckPtrType SSLHealthCheckArgs

func SSLHealthCheckPtr(v *SSLHealthCheckArgs) SSLHealthCheckPtrInput {
	return (*sslhealthCheckPtrType)(v)
}

func (*sslhealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SSLHealthCheck)(nil)).Elem()
}

func (i *sslhealthCheckPtrType) ToSSLHealthCheckPtrOutput() SSLHealthCheckPtrOutput {
	return i.ToSSLHealthCheckPtrOutputWithContext(context.Background())
}

func (i *sslhealthCheckPtrType) ToSSLHealthCheckPtrOutputWithContext(ctx context.Context) SSLHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSLHealthCheckPtrOutput)
}

type SSLHealthCheckOutput struct{ *pulumi.OutputState }

func (SSLHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSLHealthCheck)(nil)).Elem()
}

func (o SSLHealthCheckOutput) ToSSLHealthCheckOutput() SSLHealthCheckOutput {
	return o
}

func (o SSLHealthCheckOutput) ToSSLHealthCheckOutputWithContext(ctx context.Context) SSLHealthCheckOutput {
	return o
}

func (o SSLHealthCheckOutput) ToSSLHealthCheckPtrOutput() SSLHealthCheckPtrOutput {
	return o.ToSSLHealthCheckPtrOutputWithContext(context.Background())
}

func (o SSLHealthCheckOutput) ToSSLHealthCheckPtrOutputWithContext(ctx context.Context) SSLHealthCheckPtrOutput {
	return o.ApplyT(func(v SSLHealthCheck) *SSLHealthCheck {
		return &v
	}).(SSLHealthCheckPtrOutput)
}

// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
func (o SSLHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SSLHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o SSLHealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSLHealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, SSL health check follows behavior specified in port and portName fields.
func (o SSLHealthCheckOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSLHealthCheck) *string { return v.PortSpecification }).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o SSLHealthCheckOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSLHealthCheck) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

// The application data to send once the SSL connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
func (o SSLHealthCheckOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSLHealthCheck) *string { return v.Request }).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
func (o SSLHealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSLHealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type SSLHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (SSLHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SSLHealthCheck)(nil)).Elem()
}

func (o SSLHealthCheckPtrOutput) ToSSLHealthCheckPtrOutput() SSLHealthCheckPtrOutput {
	return o
}

func (o SSLHealthCheckPtrOutput) ToSSLHealthCheckPtrOutputWithContext(ctx context.Context) SSLHealthCheckPtrOutput {
	return o
}

func (o SSLHealthCheckPtrOutput) Elem() SSLHealthCheckOutput {
	return o.ApplyT(func(v *SSLHealthCheck) SSLHealthCheck { return *v }).(SSLHealthCheckOutput)
}

// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
func (o SSLHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SSLHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o SSLHealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, SSL health check follows behavior specified in port and portName fields.
func (o SSLHealthCheckPtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o SSLHealthCheckPtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The application data to send once the SSL connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
func (o SSLHealthCheckPtrOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Request
	}).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
func (o SSLHealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type SSLHealthCheckResponse struct {
	// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
	Port int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, SSL health check follows behavior specified in port and portName fields.
	PortSpecification string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader string `pulumi:"proxyHeader"`
	// The application data to send once the SSL connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
	Request string `pulumi:"request"`
	// The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
	Response string `pulumi:"response"`
}

// SSLHealthCheckResponseInput is an input type that accepts SSLHealthCheckResponseArgs and SSLHealthCheckResponseOutput values.
// You can construct a concrete instance of `SSLHealthCheckResponseInput` via:
//
//          SSLHealthCheckResponseArgs{...}
type SSLHealthCheckResponseInput interface {
	pulumi.Input

	ToSSLHealthCheckResponseOutput() SSLHealthCheckResponseOutput
	ToSSLHealthCheckResponseOutputWithContext(context.Context) SSLHealthCheckResponseOutput
}

type SSLHealthCheckResponseArgs struct {
	// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
	Port pulumi.IntInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName pulumi.StringInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, SSL health check follows behavior specified in port and portName fields.
	PortSpecification pulumi.StringInput `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader pulumi.StringInput `pulumi:"proxyHeader"`
	// The application data to send once the SSL connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
	Request pulumi.StringInput `pulumi:"request"`
	// The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
	Response pulumi.StringInput `pulumi:"response"`
}

func (SSLHealthCheckResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SSLHealthCheckResponse)(nil)).Elem()
}

func (i SSLHealthCheckResponseArgs) ToSSLHealthCheckResponseOutput() SSLHealthCheckResponseOutput {
	return i.ToSSLHealthCheckResponseOutputWithContext(context.Background())
}

func (i SSLHealthCheckResponseArgs) ToSSLHealthCheckResponseOutputWithContext(ctx context.Context) SSLHealthCheckResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSLHealthCheckResponseOutput)
}

func (i SSLHealthCheckResponseArgs) ToSSLHealthCheckResponsePtrOutput() SSLHealthCheckResponsePtrOutput {
	return i.ToSSLHealthCheckResponsePtrOutputWithContext(context.Background())
}

func (i SSLHealthCheckResponseArgs) ToSSLHealthCheckResponsePtrOutputWithContext(ctx context.Context) SSLHealthCheckResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSLHealthCheckResponseOutput).ToSSLHealthCheckResponsePtrOutputWithContext(ctx)
}

// SSLHealthCheckResponsePtrInput is an input type that accepts SSLHealthCheckResponseArgs, SSLHealthCheckResponsePtr and SSLHealthCheckResponsePtrOutput values.
// You can construct a concrete instance of `SSLHealthCheckResponsePtrInput` via:
//
//          SSLHealthCheckResponseArgs{...}
//
//  or:
//
//          nil
type SSLHealthCheckResponsePtrInput interface {
	pulumi.Input

	ToSSLHealthCheckResponsePtrOutput() SSLHealthCheckResponsePtrOutput
	ToSSLHealthCheckResponsePtrOutputWithContext(context.Context) SSLHealthCheckResponsePtrOutput
}

type sslhealthCheckResponsePtrType SSLHealthCheckResponseArgs

func SSLHealthCheckResponsePtr(v *SSLHealthCheckResponseArgs) SSLHealthCheckResponsePtrInput {
	return (*sslhealthCheckResponsePtrType)(v)
}

func (*sslhealthCheckResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SSLHealthCheckResponse)(nil)).Elem()
}

func (i *sslhealthCheckResponsePtrType) ToSSLHealthCheckResponsePtrOutput() SSLHealthCheckResponsePtrOutput {
	return i.ToSSLHealthCheckResponsePtrOutputWithContext(context.Background())
}

func (i *sslhealthCheckResponsePtrType) ToSSLHealthCheckResponsePtrOutputWithContext(ctx context.Context) SSLHealthCheckResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSLHealthCheckResponsePtrOutput)
}

type SSLHealthCheckResponseOutput struct{ *pulumi.OutputState }

func (SSLHealthCheckResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSLHealthCheckResponse)(nil)).Elem()
}

func (o SSLHealthCheckResponseOutput) ToSSLHealthCheckResponseOutput() SSLHealthCheckResponseOutput {
	return o
}

func (o SSLHealthCheckResponseOutput) ToSSLHealthCheckResponseOutputWithContext(ctx context.Context) SSLHealthCheckResponseOutput {
	return o
}

func (o SSLHealthCheckResponseOutput) ToSSLHealthCheckResponsePtrOutput() SSLHealthCheckResponsePtrOutput {
	return o.ToSSLHealthCheckResponsePtrOutputWithContext(context.Background())
}

func (o SSLHealthCheckResponseOutput) ToSSLHealthCheckResponsePtrOutputWithContext(ctx context.Context) SSLHealthCheckResponsePtrOutput {
	return o.ApplyT(func(v SSLHealthCheckResponse) *SSLHealthCheckResponse {
		return &v
	}).(SSLHealthCheckResponsePtrOutput)
}

// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
func (o SSLHealthCheckResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v SSLHealthCheckResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o SSLHealthCheckResponseOutput) PortName() pulumi.StringOutput {
	return o.ApplyT(func(v SSLHealthCheckResponse) string { return v.PortName }).(pulumi.StringOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, SSL health check follows behavior specified in port and portName fields.
func (o SSLHealthCheckResponseOutput) PortSpecification() pulumi.StringOutput {
	return o.ApplyT(func(v SSLHealthCheckResponse) string { return v.PortSpecification }).(pulumi.StringOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o SSLHealthCheckResponseOutput) ProxyHeader() pulumi.StringOutput {
	return o.ApplyT(func(v SSLHealthCheckResponse) string { return v.ProxyHeader }).(pulumi.StringOutput)
}

// The application data to send once the SSL connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
func (o SSLHealthCheckResponseOutput) Request() pulumi.StringOutput {
	return o.ApplyT(func(v SSLHealthCheckResponse) string { return v.Request }).(pulumi.StringOutput)
}

// The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
func (o SSLHealthCheckResponseOutput) Response() pulumi.StringOutput {
	return o.ApplyT(func(v SSLHealthCheckResponse) string { return v.Response }).(pulumi.StringOutput)
}

type SSLHealthCheckResponsePtrOutput struct{ *pulumi.OutputState }

func (SSLHealthCheckResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SSLHealthCheckResponse)(nil)).Elem()
}

func (o SSLHealthCheckResponsePtrOutput) ToSSLHealthCheckResponsePtrOutput() SSLHealthCheckResponsePtrOutput {
	return o
}

func (o SSLHealthCheckResponsePtrOutput) ToSSLHealthCheckResponsePtrOutputWithContext(ctx context.Context) SSLHealthCheckResponsePtrOutput {
	return o
}

func (o SSLHealthCheckResponsePtrOutput) Elem() SSLHealthCheckResponseOutput {
	return o.ApplyT(func(v *SSLHealthCheckResponse) SSLHealthCheckResponse { return *v }).(SSLHealthCheckResponseOutput)
}

// The TCP port number for the health check request. The default value is 443. Valid values are 1 through 65535.
func (o SSLHealthCheckResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SSLHealthCheckResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o SSLHealthCheckResponsePtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, SSL health check follows behavior specified in port and portName fields.
func (o SSLHealthCheckResponsePtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o SSLHealthCheckResponsePtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The application data to send once the SSL connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
func (o SSLHealthCheckResponsePtrOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Request
	}).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
func (o SSLHealthCheckResponsePtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Response
	}).(pulumi.StringPtrOutput)
}

// Sets the scheduling options for an Instance. NextID: 21
type Scheduling struct {
	// Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
	AutomaticRestart *bool `pulumi:"automaticRestart"`
	// An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
	LocationHint *string `pulumi:"locationHint"`
	// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
	MinNodeCpus *int `pulumi:"minNodeCpus"`
	// A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
	NodeAffinities []SchedulingNodeAffinity `pulumi:"nodeAffinities"`
	// Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options.
	OnHostMaintenance *string `pulumi:"onHostMaintenance"`
	// Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
	Preemptible *bool `pulumi:"preemptible"`
}

// SchedulingInput is an input type that accepts SchedulingArgs and SchedulingOutput values.
// You can construct a concrete instance of `SchedulingInput` via:
//
//          SchedulingArgs{...}
type SchedulingInput interface {
	pulumi.Input

	ToSchedulingOutput() SchedulingOutput
	ToSchedulingOutputWithContext(context.Context) SchedulingOutput
}

// Sets the scheduling options for an Instance. NextID: 21
type SchedulingArgs struct {
	// Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
	AutomaticRestart pulumi.BoolPtrInput `pulumi:"automaticRestart"`
	// An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
	LocationHint pulumi.StringPtrInput `pulumi:"locationHint"`
	// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
	MinNodeCpus pulumi.IntPtrInput `pulumi:"minNodeCpus"`
	// A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
	NodeAffinities SchedulingNodeAffinityArrayInput `pulumi:"nodeAffinities"`
	// Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options.
	OnHostMaintenance *SchedulingOnHostMaintenance `pulumi:"onHostMaintenance"`
	// Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
	Preemptible pulumi.BoolPtrInput `pulumi:"preemptible"`
}

func (SchedulingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Scheduling)(nil)).Elem()
}

func (i SchedulingArgs) ToSchedulingOutput() SchedulingOutput {
	return i.ToSchedulingOutputWithContext(context.Background())
}

func (i SchedulingArgs) ToSchedulingOutputWithContext(ctx context.Context) SchedulingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingOutput)
}

func (i SchedulingArgs) ToSchedulingPtrOutput() SchedulingPtrOutput {
	return i.ToSchedulingPtrOutputWithContext(context.Background())
}

func (i SchedulingArgs) ToSchedulingPtrOutputWithContext(ctx context.Context) SchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingOutput).ToSchedulingPtrOutputWithContext(ctx)
}

// SchedulingPtrInput is an input type that accepts SchedulingArgs, SchedulingPtr and SchedulingPtrOutput values.
// You can construct a concrete instance of `SchedulingPtrInput` via:
//
//          SchedulingArgs{...}
//
//  or:
//
//          nil
type SchedulingPtrInput interface {
	pulumi.Input

	ToSchedulingPtrOutput() SchedulingPtrOutput
	ToSchedulingPtrOutputWithContext(context.Context) SchedulingPtrOutput
}

type schedulingPtrType SchedulingArgs

func SchedulingPtr(v *SchedulingArgs) SchedulingPtrInput {
	return (*schedulingPtrType)(v)
}

func (*schedulingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Scheduling)(nil)).Elem()
}

func (i *schedulingPtrType) ToSchedulingPtrOutput() SchedulingPtrOutput {
	return i.ToSchedulingPtrOutputWithContext(context.Background())
}

func (i *schedulingPtrType) ToSchedulingPtrOutputWithContext(ctx context.Context) SchedulingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingPtrOutput)
}

// Sets the scheduling options for an Instance. NextID: 21
type SchedulingOutput struct{ *pulumi.OutputState }

func (SchedulingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Scheduling)(nil)).Elem()
}

func (o SchedulingOutput) ToSchedulingOutput() SchedulingOutput {
	return o
}

func (o SchedulingOutput) ToSchedulingOutputWithContext(ctx context.Context) SchedulingOutput {
	return o
}

func (o SchedulingOutput) ToSchedulingPtrOutput() SchedulingPtrOutput {
	return o.ToSchedulingPtrOutputWithContext(context.Background())
}

func (o SchedulingOutput) ToSchedulingPtrOutputWithContext(ctx context.Context) SchedulingPtrOutput {
	return o.ApplyT(func(v Scheduling) *Scheduling {
		return &v
	}).(SchedulingPtrOutput)
}

// Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
func (o SchedulingOutput) AutomaticRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Scheduling) *bool { return v.AutomaticRestart }).(pulumi.BoolPtrOutput)
}

// An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
func (o SchedulingOutput) LocationHint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Scheduling) *string { return v.LocationHint }).(pulumi.StringPtrOutput)
}

// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
func (o SchedulingOutput) MinNodeCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Scheduling) *int { return v.MinNodeCpus }).(pulumi.IntPtrOutput)
}

// A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
func (o SchedulingOutput) NodeAffinities() SchedulingNodeAffinityArrayOutput {
	return o.ApplyT(func(v Scheduling) []SchedulingNodeAffinity { return v.NodeAffinities }).(SchedulingNodeAffinityArrayOutput)
}

// Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options.
func (o SchedulingOutput) OnHostMaintenance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Scheduling) *string { return v.OnHostMaintenance }).(pulumi.StringPtrOutput)
}

// Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
func (o SchedulingOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Scheduling) *bool { return v.Preemptible }).(pulumi.BoolPtrOutput)
}

type SchedulingPtrOutput struct{ *pulumi.OutputState }

func (SchedulingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Scheduling)(nil)).Elem()
}

func (o SchedulingPtrOutput) ToSchedulingPtrOutput() SchedulingPtrOutput {
	return o
}

func (o SchedulingPtrOutput) ToSchedulingPtrOutputWithContext(ctx context.Context) SchedulingPtrOutput {
	return o
}

func (o SchedulingPtrOutput) Elem() SchedulingOutput {
	return o.ApplyT(func(v *Scheduling) Scheduling { return *v }).(SchedulingOutput)
}

// Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
func (o SchedulingPtrOutput) AutomaticRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Scheduling) *bool {
		if v == nil {
			return nil
		}
		return v.AutomaticRestart
	}).(pulumi.BoolPtrOutput)
}

// An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
func (o SchedulingPtrOutput) LocationHint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Scheduling) *string {
		if v == nil {
			return nil
		}
		return v.LocationHint
	}).(pulumi.StringPtrOutput)
}

// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
func (o SchedulingPtrOutput) MinNodeCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Scheduling) *int {
		if v == nil {
			return nil
		}
		return v.MinNodeCpus
	}).(pulumi.IntPtrOutput)
}

// A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
func (o SchedulingPtrOutput) NodeAffinities() SchedulingNodeAffinityArrayOutput {
	return o.ApplyT(func(v *Scheduling) []SchedulingNodeAffinity {
		if v == nil {
			return nil
		}
		return v.NodeAffinities
	}).(SchedulingNodeAffinityArrayOutput)
}

// Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options.
func (o SchedulingPtrOutput) OnHostMaintenance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Scheduling) *string {
		if v == nil {
			return nil
		}
		return v.OnHostMaintenance
	}).(pulumi.StringPtrOutput)
}

// Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
func (o SchedulingPtrOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Scheduling) *bool {
		if v == nil {
			return nil
		}
		return v.Preemptible
	}).(pulumi.BoolPtrOutput)
}

// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled.
type SchedulingNodeAffinity struct {
	// Corresponds to the label key of Node resource.
	Key *string `pulumi:"key"`
	// Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity.
	Operator *string `pulumi:"operator"`
	// Corresponds to the label values of Node resource.
	Values []string `pulumi:"values"`
}

// SchedulingNodeAffinityInput is an input type that accepts SchedulingNodeAffinityArgs and SchedulingNodeAffinityOutput values.
// You can construct a concrete instance of `SchedulingNodeAffinityInput` via:
//
//          SchedulingNodeAffinityArgs{...}
type SchedulingNodeAffinityInput interface {
	pulumi.Input

	ToSchedulingNodeAffinityOutput() SchedulingNodeAffinityOutput
	ToSchedulingNodeAffinityOutputWithContext(context.Context) SchedulingNodeAffinityOutput
}

// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled.
type SchedulingNodeAffinityArgs struct {
	// Corresponds to the label key of Node resource.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity.
	Operator *SchedulingNodeAffinityOperator `pulumi:"operator"`
	// Corresponds to the label values of Node resource.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (SchedulingNodeAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingNodeAffinity)(nil)).Elem()
}

func (i SchedulingNodeAffinityArgs) ToSchedulingNodeAffinityOutput() SchedulingNodeAffinityOutput {
	return i.ToSchedulingNodeAffinityOutputWithContext(context.Background())
}

func (i SchedulingNodeAffinityArgs) ToSchedulingNodeAffinityOutputWithContext(ctx context.Context) SchedulingNodeAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingNodeAffinityOutput)
}

// SchedulingNodeAffinityArrayInput is an input type that accepts SchedulingNodeAffinityArray and SchedulingNodeAffinityArrayOutput values.
// You can construct a concrete instance of `SchedulingNodeAffinityArrayInput` via:
//
//          SchedulingNodeAffinityArray{ SchedulingNodeAffinityArgs{...} }
type SchedulingNodeAffinityArrayInput interface {
	pulumi.Input

	ToSchedulingNodeAffinityArrayOutput() SchedulingNodeAffinityArrayOutput
	ToSchedulingNodeAffinityArrayOutputWithContext(context.Context) SchedulingNodeAffinityArrayOutput
}

type SchedulingNodeAffinityArray []SchedulingNodeAffinityInput

func (SchedulingNodeAffinityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulingNodeAffinity)(nil)).Elem()
}

func (i SchedulingNodeAffinityArray) ToSchedulingNodeAffinityArrayOutput() SchedulingNodeAffinityArrayOutput {
	return i.ToSchedulingNodeAffinityArrayOutputWithContext(context.Background())
}

func (i SchedulingNodeAffinityArray) ToSchedulingNodeAffinityArrayOutputWithContext(ctx context.Context) SchedulingNodeAffinityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingNodeAffinityArrayOutput)
}

// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled.
type SchedulingNodeAffinityOutput struct{ *pulumi.OutputState }

func (SchedulingNodeAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingNodeAffinity)(nil)).Elem()
}

func (o SchedulingNodeAffinityOutput) ToSchedulingNodeAffinityOutput() SchedulingNodeAffinityOutput {
	return o
}

func (o SchedulingNodeAffinityOutput) ToSchedulingNodeAffinityOutputWithContext(ctx context.Context) SchedulingNodeAffinityOutput {
	return o
}

// Corresponds to the label key of Node resource.
func (o SchedulingNodeAffinityOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchedulingNodeAffinity) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity.
func (o SchedulingNodeAffinityOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchedulingNodeAffinity) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Corresponds to the label values of Node resource.
func (o SchedulingNodeAffinityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SchedulingNodeAffinity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SchedulingNodeAffinityArrayOutput struct{ *pulumi.OutputState }

func (SchedulingNodeAffinityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulingNodeAffinity)(nil)).Elem()
}

func (o SchedulingNodeAffinityArrayOutput) ToSchedulingNodeAffinityArrayOutput() SchedulingNodeAffinityArrayOutput {
	return o
}

func (o SchedulingNodeAffinityArrayOutput) ToSchedulingNodeAffinityArrayOutputWithContext(ctx context.Context) SchedulingNodeAffinityArrayOutput {
	return o
}

func (o SchedulingNodeAffinityArrayOutput) Index(i pulumi.IntInput) SchedulingNodeAffinityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchedulingNodeAffinity {
		return vs[0].([]SchedulingNodeAffinity)[vs[1].(int)]
	}).(SchedulingNodeAffinityOutput)
}

// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled.
type SchedulingNodeAffinityResponse struct {
	// Corresponds to the label key of Node resource.
	Key string `pulumi:"key"`
	// Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity.
	Operator string `pulumi:"operator"`
	// Corresponds to the label values of Node resource.
	Values []string `pulumi:"values"`
}

// SchedulingNodeAffinityResponseInput is an input type that accepts SchedulingNodeAffinityResponseArgs and SchedulingNodeAffinityResponseOutput values.
// You can construct a concrete instance of `SchedulingNodeAffinityResponseInput` via:
//
//          SchedulingNodeAffinityResponseArgs{...}
type SchedulingNodeAffinityResponseInput interface {
	pulumi.Input

	ToSchedulingNodeAffinityResponseOutput() SchedulingNodeAffinityResponseOutput
	ToSchedulingNodeAffinityResponseOutputWithContext(context.Context) SchedulingNodeAffinityResponseOutput
}

// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled.
type SchedulingNodeAffinityResponseArgs struct {
	// Corresponds to the label key of Node resource.
	Key pulumi.StringInput `pulumi:"key"`
	// Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Corresponds to the label values of Node resource.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (SchedulingNodeAffinityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingNodeAffinityResponse)(nil)).Elem()
}

func (i SchedulingNodeAffinityResponseArgs) ToSchedulingNodeAffinityResponseOutput() SchedulingNodeAffinityResponseOutput {
	return i.ToSchedulingNodeAffinityResponseOutputWithContext(context.Background())
}

func (i SchedulingNodeAffinityResponseArgs) ToSchedulingNodeAffinityResponseOutputWithContext(ctx context.Context) SchedulingNodeAffinityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingNodeAffinityResponseOutput)
}

// SchedulingNodeAffinityResponseArrayInput is an input type that accepts SchedulingNodeAffinityResponseArray and SchedulingNodeAffinityResponseArrayOutput values.
// You can construct a concrete instance of `SchedulingNodeAffinityResponseArrayInput` via:
//
//          SchedulingNodeAffinityResponseArray{ SchedulingNodeAffinityResponseArgs{...} }
type SchedulingNodeAffinityResponseArrayInput interface {
	pulumi.Input

	ToSchedulingNodeAffinityResponseArrayOutput() SchedulingNodeAffinityResponseArrayOutput
	ToSchedulingNodeAffinityResponseArrayOutputWithContext(context.Context) SchedulingNodeAffinityResponseArrayOutput
}

type SchedulingNodeAffinityResponseArray []SchedulingNodeAffinityResponseInput

func (SchedulingNodeAffinityResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulingNodeAffinityResponse)(nil)).Elem()
}

func (i SchedulingNodeAffinityResponseArray) ToSchedulingNodeAffinityResponseArrayOutput() SchedulingNodeAffinityResponseArrayOutput {
	return i.ToSchedulingNodeAffinityResponseArrayOutputWithContext(context.Background())
}

func (i SchedulingNodeAffinityResponseArray) ToSchedulingNodeAffinityResponseArrayOutputWithContext(ctx context.Context) SchedulingNodeAffinityResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingNodeAffinityResponseArrayOutput)
}

// Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled.
type SchedulingNodeAffinityResponseOutput struct{ *pulumi.OutputState }

func (SchedulingNodeAffinityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingNodeAffinityResponse)(nil)).Elem()
}

func (o SchedulingNodeAffinityResponseOutput) ToSchedulingNodeAffinityResponseOutput() SchedulingNodeAffinityResponseOutput {
	return o
}

func (o SchedulingNodeAffinityResponseOutput) ToSchedulingNodeAffinityResponseOutputWithContext(ctx context.Context) SchedulingNodeAffinityResponseOutput {
	return o
}

// Corresponds to the label key of Node resource.
func (o SchedulingNodeAffinityResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulingNodeAffinityResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity.
func (o SchedulingNodeAffinityResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulingNodeAffinityResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Corresponds to the label values of Node resource.
func (o SchedulingNodeAffinityResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SchedulingNodeAffinityResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SchedulingNodeAffinityResponseArrayOutput struct{ *pulumi.OutputState }

func (SchedulingNodeAffinityResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchedulingNodeAffinityResponse)(nil)).Elem()
}

func (o SchedulingNodeAffinityResponseArrayOutput) ToSchedulingNodeAffinityResponseArrayOutput() SchedulingNodeAffinityResponseArrayOutput {
	return o
}

func (o SchedulingNodeAffinityResponseArrayOutput) ToSchedulingNodeAffinityResponseArrayOutputWithContext(ctx context.Context) SchedulingNodeAffinityResponseArrayOutput {
	return o
}

func (o SchedulingNodeAffinityResponseArrayOutput) Index(i pulumi.IntInput) SchedulingNodeAffinityResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchedulingNodeAffinityResponse {
		return vs[0].([]SchedulingNodeAffinityResponse)[vs[1].(int)]
	}).(SchedulingNodeAffinityResponseOutput)
}

// Sets the scheduling options for an Instance. NextID: 21
type SchedulingResponse struct {
	// Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
	AutomaticRestart bool `pulumi:"automaticRestart"`
	// An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
	LocationHint string `pulumi:"locationHint"`
	// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
	MinNodeCpus int `pulumi:"minNodeCpus"`
	// A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
	NodeAffinities []SchedulingNodeAffinityResponse `pulumi:"nodeAffinities"`
	// Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options.
	OnHostMaintenance string `pulumi:"onHostMaintenance"`
	// Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
	Preemptible bool `pulumi:"preemptible"`
}

// SchedulingResponseInput is an input type that accepts SchedulingResponseArgs and SchedulingResponseOutput values.
// You can construct a concrete instance of `SchedulingResponseInput` via:
//
//          SchedulingResponseArgs{...}
type SchedulingResponseInput interface {
	pulumi.Input

	ToSchedulingResponseOutput() SchedulingResponseOutput
	ToSchedulingResponseOutputWithContext(context.Context) SchedulingResponseOutput
}

// Sets the scheduling options for an Instance. NextID: 21
type SchedulingResponseArgs struct {
	// Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
	AutomaticRestart pulumi.BoolInput `pulumi:"automaticRestart"`
	// An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
	LocationHint pulumi.StringInput `pulumi:"locationHint"`
	// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
	MinNodeCpus pulumi.IntInput `pulumi:"minNodeCpus"`
	// A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
	NodeAffinities SchedulingNodeAffinityResponseArrayInput `pulumi:"nodeAffinities"`
	// Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options.
	OnHostMaintenance pulumi.StringInput `pulumi:"onHostMaintenance"`
	// Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
	Preemptible pulumi.BoolInput `pulumi:"preemptible"`
}

func (SchedulingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingResponse)(nil)).Elem()
}

func (i SchedulingResponseArgs) ToSchedulingResponseOutput() SchedulingResponseOutput {
	return i.ToSchedulingResponseOutputWithContext(context.Background())
}

func (i SchedulingResponseArgs) ToSchedulingResponseOutputWithContext(ctx context.Context) SchedulingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingResponseOutput)
}

func (i SchedulingResponseArgs) ToSchedulingResponsePtrOutput() SchedulingResponsePtrOutput {
	return i.ToSchedulingResponsePtrOutputWithContext(context.Background())
}

func (i SchedulingResponseArgs) ToSchedulingResponsePtrOutputWithContext(ctx context.Context) SchedulingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingResponseOutput).ToSchedulingResponsePtrOutputWithContext(ctx)
}

// SchedulingResponsePtrInput is an input type that accepts SchedulingResponseArgs, SchedulingResponsePtr and SchedulingResponsePtrOutput values.
// You can construct a concrete instance of `SchedulingResponsePtrInput` via:
//
//          SchedulingResponseArgs{...}
//
//  or:
//
//          nil
type SchedulingResponsePtrInput interface {
	pulumi.Input

	ToSchedulingResponsePtrOutput() SchedulingResponsePtrOutput
	ToSchedulingResponsePtrOutputWithContext(context.Context) SchedulingResponsePtrOutput
}

type schedulingResponsePtrType SchedulingResponseArgs

func SchedulingResponsePtr(v *SchedulingResponseArgs) SchedulingResponsePtrInput {
	return (*schedulingResponsePtrType)(v)
}

func (*schedulingResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingResponse)(nil)).Elem()
}

func (i *schedulingResponsePtrType) ToSchedulingResponsePtrOutput() SchedulingResponsePtrOutput {
	return i.ToSchedulingResponsePtrOutputWithContext(context.Background())
}

func (i *schedulingResponsePtrType) ToSchedulingResponsePtrOutputWithContext(ctx context.Context) SchedulingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingResponsePtrOutput)
}

// Sets the scheduling options for an Instance. NextID: 21
type SchedulingResponseOutput struct{ *pulumi.OutputState }

func (SchedulingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingResponse)(nil)).Elem()
}

func (o SchedulingResponseOutput) ToSchedulingResponseOutput() SchedulingResponseOutput {
	return o
}

func (o SchedulingResponseOutput) ToSchedulingResponseOutputWithContext(ctx context.Context) SchedulingResponseOutput {
	return o
}

func (o SchedulingResponseOutput) ToSchedulingResponsePtrOutput() SchedulingResponsePtrOutput {
	return o.ToSchedulingResponsePtrOutputWithContext(context.Background())
}

func (o SchedulingResponseOutput) ToSchedulingResponsePtrOutputWithContext(ctx context.Context) SchedulingResponsePtrOutput {
	return o.ApplyT(func(v SchedulingResponse) *SchedulingResponse {
		return &v
	}).(SchedulingResponsePtrOutput)
}

// Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
func (o SchedulingResponseOutput) AutomaticRestart() pulumi.BoolOutput {
	return o.ApplyT(func(v SchedulingResponse) bool { return v.AutomaticRestart }).(pulumi.BoolOutput)
}

// An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
func (o SchedulingResponseOutput) LocationHint() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulingResponse) string { return v.LocationHint }).(pulumi.StringOutput)
}

// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
func (o SchedulingResponseOutput) MinNodeCpus() pulumi.IntOutput {
	return o.ApplyT(func(v SchedulingResponse) int { return v.MinNodeCpus }).(pulumi.IntOutput)
}

// A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
func (o SchedulingResponseOutput) NodeAffinities() SchedulingNodeAffinityResponseArrayOutput {
	return o.ApplyT(func(v SchedulingResponse) []SchedulingNodeAffinityResponse { return v.NodeAffinities }).(SchedulingNodeAffinityResponseArrayOutput)
}

// Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options.
func (o SchedulingResponseOutput) OnHostMaintenance() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulingResponse) string { return v.OnHostMaintenance }).(pulumi.StringOutput)
}

// Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
func (o SchedulingResponseOutput) Preemptible() pulumi.BoolOutput {
	return o.ApplyT(func(v SchedulingResponse) bool { return v.Preemptible }).(pulumi.BoolOutput)
}

type SchedulingResponsePtrOutput struct{ *pulumi.OutputState }

func (SchedulingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingResponse)(nil)).Elem()
}

func (o SchedulingResponsePtrOutput) ToSchedulingResponsePtrOutput() SchedulingResponsePtrOutput {
	return o
}

func (o SchedulingResponsePtrOutput) ToSchedulingResponsePtrOutputWithContext(ctx context.Context) SchedulingResponsePtrOutput {
	return o
}

func (o SchedulingResponsePtrOutput) Elem() SchedulingResponseOutput {
	return o.ApplyT(func(v *SchedulingResponse) SchedulingResponse { return *v }).(SchedulingResponseOutput)
}

// Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
func (o SchedulingResponsePtrOutput) AutomaticRestart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchedulingResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.AutomaticRestart
	}).(pulumi.BoolPtrOutput)
}

// An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
func (o SchedulingResponsePtrOutput) LocationHint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchedulingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LocationHint
	}).(pulumi.StringPtrOutput)
}

// The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
func (o SchedulingResponsePtrOutput) MinNodeCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SchedulingResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MinNodeCpus
	}).(pulumi.IntPtrOutput)
}

// A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
func (o SchedulingResponsePtrOutput) NodeAffinities() SchedulingNodeAffinityResponseArrayOutput {
	return o.ApplyT(func(v *SchedulingResponse) []SchedulingNodeAffinityResponse {
		if v == nil {
			return nil
		}
		return v.NodeAffinities
	}).(SchedulingNodeAffinityResponseArrayOutput)
}

// Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Setting Instance Scheduling Options.
func (o SchedulingResponsePtrOutput) OnHostMaintenance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchedulingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OnHostMaintenance
	}).(pulumi.StringPtrOutput)
}

// Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.
func (o SchedulingResponsePtrOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchedulingResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Preemptible
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for Cloud Armor Adaptive Protection (CAAP).
type SecurityPolicyAdaptiveProtectionConfig struct {
	// If set to true, enables Cloud Armor Machine Learning.
	Layer7DdosDefenseConfig *SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig `pulumi:"layer7DdosDefenseConfig"`
}

// SecurityPolicyAdaptiveProtectionConfigInput is an input type that accepts SecurityPolicyAdaptiveProtectionConfigArgs and SecurityPolicyAdaptiveProtectionConfigOutput values.
// You can construct a concrete instance of `SecurityPolicyAdaptiveProtectionConfigInput` via:
//
//          SecurityPolicyAdaptiveProtectionConfigArgs{...}
type SecurityPolicyAdaptiveProtectionConfigInput interface {
	pulumi.Input

	ToSecurityPolicyAdaptiveProtectionConfigOutput() SecurityPolicyAdaptiveProtectionConfigOutput
	ToSecurityPolicyAdaptiveProtectionConfigOutputWithContext(context.Context) SecurityPolicyAdaptiveProtectionConfigOutput
}

// Configuration options for Cloud Armor Adaptive Protection (CAAP).
type SecurityPolicyAdaptiveProtectionConfigArgs struct {
	// If set to true, enables Cloud Armor Machine Learning.
	Layer7DdosDefenseConfig SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrInput `pulumi:"layer7DdosDefenseConfig"`
}

func (SecurityPolicyAdaptiveProtectionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyAdaptiveProtectionConfig)(nil)).Elem()
}

func (i SecurityPolicyAdaptiveProtectionConfigArgs) ToSecurityPolicyAdaptiveProtectionConfigOutput() SecurityPolicyAdaptiveProtectionConfigOutput {
	return i.ToSecurityPolicyAdaptiveProtectionConfigOutputWithContext(context.Background())
}

func (i SecurityPolicyAdaptiveProtectionConfigArgs) ToSecurityPolicyAdaptiveProtectionConfigOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdaptiveProtectionConfigOutput)
}

func (i SecurityPolicyAdaptiveProtectionConfigArgs) ToSecurityPolicyAdaptiveProtectionConfigPtrOutput() SecurityPolicyAdaptiveProtectionConfigPtrOutput {
	return i.ToSecurityPolicyAdaptiveProtectionConfigPtrOutputWithContext(context.Background())
}

func (i SecurityPolicyAdaptiveProtectionConfigArgs) ToSecurityPolicyAdaptiveProtectionConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdaptiveProtectionConfigOutput).ToSecurityPolicyAdaptiveProtectionConfigPtrOutputWithContext(ctx)
}

// SecurityPolicyAdaptiveProtectionConfigPtrInput is an input type that accepts SecurityPolicyAdaptiveProtectionConfigArgs, SecurityPolicyAdaptiveProtectionConfigPtr and SecurityPolicyAdaptiveProtectionConfigPtrOutput values.
// You can construct a concrete instance of `SecurityPolicyAdaptiveProtectionConfigPtrInput` via:
//
//          SecurityPolicyAdaptiveProtectionConfigArgs{...}
//
//  or:
//
//          nil
type SecurityPolicyAdaptiveProtectionConfigPtrInput interface {
	pulumi.Input

	ToSecurityPolicyAdaptiveProtectionConfigPtrOutput() SecurityPolicyAdaptiveProtectionConfigPtrOutput
	ToSecurityPolicyAdaptiveProtectionConfigPtrOutputWithContext(context.Context) SecurityPolicyAdaptiveProtectionConfigPtrOutput
}

type securityPolicyAdaptiveProtectionConfigPtrType SecurityPolicyAdaptiveProtectionConfigArgs

func SecurityPolicyAdaptiveProtectionConfigPtr(v *SecurityPolicyAdaptiveProtectionConfigArgs) SecurityPolicyAdaptiveProtectionConfigPtrInput {
	return (*securityPolicyAdaptiveProtectionConfigPtrType)(v)
}

func (*securityPolicyAdaptiveProtectionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyAdaptiveProtectionConfig)(nil)).Elem()
}

func (i *securityPolicyAdaptiveProtectionConfigPtrType) ToSecurityPolicyAdaptiveProtectionConfigPtrOutput() SecurityPolicyAdaptiveProtectionConfigPtrOutput {
	return i.ToSecurityPolicyAdaptiveProtectionConfigPtrOutputWithContext(context.Background())
}

func (i *securityPolicyAdaptiveProtectionConfigPtrType) ToSecurityPolicyAdaptiveProtectionConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdaptiveProtectionConfigPtrOutput)
}

// Configuration options for Cloud Armor Adaptive Protection (CAAP).
type SecurityPolicyAdaptiveProtectionConfigOutput struct{ *pulumi.OutputState }

func (SecurityPolicyAdaptiveProtectionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyAdaptiveProtectionConfig)(nil)).Elem()
}

func (o SecurityPolicyAdaptiveProtectionConfigOutput) ToSecurityPolicyAdaptiveProtectionConfigOutput() SecurityPolicyAdaptiveProtectionConfigOutput {
	return o
}

func (o SecurityPolicyAdaptiveProtectionConfigOutput) ToSecurityPolicyAdaptiveProtectionConfigOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigOutput {
	return o
}

func (o SecurityPolicyAdaptiveProtectionConfigOutput) ToSecurityPolicyAdaptiveProtectionConfigPtrOutput() SecurityPolicyAdaptiveProtectionConfigPtrOutput {
	return o.ToSecurityPolicyAdaptiveProtectionConfigPtrOutputWithContext(context.Background())
}

func (o SecurityPolicyAdaptiveProtectionConfigOutput) ToSecurityPolicyAdaptiveProtectionConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigPtrOutput {
	return o.ApplyT(func(v SecurityPolicyAdaptiveProtectionConfig) *SecurityPolicyAdaptiveProtectionConfig {
		return &v
	}).(SecurityPolicyAdaptiveProtectionConfigPtrOutput)
}

// If set to true, enables Cloud Armor Machine Learning.
func (o SecurityPolicyAdaptiveProtectionConfigOutput) Layer7DdosDefenseConfig() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput {
	return o.ApplyT(func(v SecurityPolicyAdaptiveProtectionConfig) *SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig {
		return v.Layer7DdosDefenseConfig
	}).(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput)
}

type SecurityPolicyAdaptiveProtectionConfigPtrOutput struct{ *pulumi.OutputState }

func (SecurityPolicyAdaptiveProtectionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyAdaptiveProtectionConfig)(nil)).Elem()
}

func (o SecurityPolicyAdaptiveProtectionConfigPtrOutput) ToSecurityPolicyAdaptiveProtectionConfigPtrOutput() SecurityPolicyAdaptiveProtectionConfigPtrOutput {
	return o
}

func (o SecurityPolicyAdaptiveProtectionConfigPtrOutput) ToSecurityPolicyAdaptiveProtectionConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigPtrOutput {
	return o
}

func (o SecurityPolicyAdaptiveProtectionConfigPtrOutput) Elem() SecurityPolicyAdaptiveProtectionConfigOutput {
	return o.ApplyT(func(v *SecurityPolicyAdaptiveProtectionConfig) SecurityPolicyAdaptiveProtectionConfig { return *v }).(SecurityPolicyAdaptiveProtectionConfigOutput)
}

// If set to true, enables Cloud Armor Machine Learning.
func (o SecurityPolicyAdaptiveProtectionConfigPtrOutput) Layer7DdosDefenseConfig() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyAdaptiveProtectionConfig) *SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig {
		if v == nil {
			return nil
		}
		return v.Layer7DdosDefenseConfig
	}).(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput)
}

// Configuration options for L7 DDoS detection.
type SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig struct {
	// If set to true, enables CAAP for L7 DDoS detection.
	Enable *bool `pulumi:"enable"`
	// Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules.
	RuleVisibility *string `pulumi:"ruleVisibility"`
}

// SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigInput is an input type that accepts SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigArgs and SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput values.
// You can construct a concrete instance of `SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigInput` via:
//
//          SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigArgs{...}
type SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigInput interface {
	pulumi.Input

	ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput
	ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutputWithContext(context.Context) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput
}

// Configuration options for L7 DDoS detection.
type SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigArgs struct {
	// If set to true, enables CAAP for L7 DDoS detection.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules.
	RuleVisibility *SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigRuleVisibility `pulumi:"ruleVisibility"`
}

func (SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig)(nil)).Elem()
}

func (i SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigArgs) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput {
	return i.ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutputWithContext(context.Background())
}

func (i SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigArgs) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput)
}

func (i SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigArgs) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput {
	return i.ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutputWithContext(context.Background())
}

func (i SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigArgs) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput).ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutputWithContext(ctx)
}

// SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrInput is an input type that accepts SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigArgs, SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtr and SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput values.
// You can construct a concrete instance of `SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrInput` via:
//
//          SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigArgs{...}
//
//  or:
//
//          nil
type SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrInput interface {
	pulumi.Input

	ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput
	ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutputWithContext(context.Context) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput
}

type securityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrType SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigArgs

func SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtr(v *SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigArgs) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrInput {
	return (*securityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrType)(v)
}

func (*securityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig)(nil)).Elem()
}

func (i *securityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrType) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput {
	return i.ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutputWithContext(context.Background())
}

func (i *securityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrType) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput)
}

// Configuration options for L7 DDoS detection.
type SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput struct{ *pulumi.OutputState }

func (SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig)(nil)).Elem()
}

func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput {
	return o
}

func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput {
	return o
}

func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput {
	return o.ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutputWithContext(context.Background())
}

func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput {
	return o.ApplyT(func(v SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig) *SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig {
		return &v
	}).(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput)
}

// If set to true, enables CAAP for L7 DDoS detection.
func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules.
func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput) RuleVisibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig) *string { return v.RuleVisibility }).(pulumi.StringPtrOutput)
}

type SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput struct{ *pulumi.OutputState }

func (SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig)(nil)).Elem()
}

func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput {
	return o
}

func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput {
	return o
}

func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput) Elem() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput {
	return o.ApplyT(func(v *SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig {
		return *v
	}).(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput)
}

// If set to true, enables CAAP for L7 DDoS detection.
func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules.
func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput) RuleVisibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig) *string {
		if v == nil {
			return nil
		}
		return v.RuleVisibility
	}).(pulumi.StringPtrOutput)
}

// Configuration options for L7 DDoS detection.
type SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse struct {
	// If set to true, enables CAAP for L7 DDoS detection.
	Enable bool `pulumi:"enable"`
	// Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules.
	RuleVisibility string `pulumi:"ruleVisibility"`
}

// SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseInput is an input type that accepts SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseArgs and SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput values.
// You can construct a concrete instance of `SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseInput` via:
//
//          SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseArgs{...}
type SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseInput interface {
	pulumi.Input

	ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput
	ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutputWithContext(context.Context) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput
}

// Configuration options for L7 DDoS detection.
type SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseArgs struct {
	// If set to true, enables CAAP for L7 DDoS detection.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules.
	RuleVisibility pulumi.StringInput `pulumi:"ruleVisibility"`
}

func (SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse)(nil)).Elem()
}

func (i SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseArgs) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput {
	return i.ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutputWithContext(context.Background())
}

func (i SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseArgs) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput)
}

func (i SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseArgs) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput {
	return i.ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutputWithContext(context.Background())
}

func (i SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseArgs) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput).ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutputWithContext(ctx)
}

// SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrInput is an input type that accepts SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseArgs, SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtr and SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput values.
// You can construct a concrete instance of `SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrInput` via:
//
//          SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseArgs{...}
//
//  or:
//
//          nil
type SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrInput interface {
	pulumi.Input

	ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput
	ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutputWithContext(context.Context) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput
}

type securityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrType SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseArgs

func SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtr(v *SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseArgs) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrInput {
	return (*securityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrType)(v)
}

func (*securityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse)(nil)).Elem()
}

func (i *securityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrType) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput {
	return i.ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutputWithContext(context.Background())
}

func (i *securityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrType) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput)
}

// Configuration options for L7 DDoS detection.
type SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput struct{ *pulumi.OutputState }

func (SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse)(nil)).Elem()
}

func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput {
	return o
}

func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput {
	return o
}

func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput {
	return o.ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutputWithContext(context.Background())
}

func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput {
	return o.ApplyT(func(v SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse) *SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse {
		return &v
	}).(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput)
}

// If set to true, enables CAAP for L7 DDoS detection.
func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse) bool { return v.Enable }).(pulumi.BoolOutput)
}

// Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules.
func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput) RuleVisibility() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse) string {
		return v.RuleVisibility
	}).(pulumi.StringOutput)
}

type SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse)(nil)).Elem()
}

func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput {
	return o
}

func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput) ToSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput {
	return o
}

func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput) Elem() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput {
	return o.ApplyT(func(v *SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse {
		return *v
	}).(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput)
}

// If set to true, enables CAAP for L7 DDoS detection.
func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules.
func (o SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput) RuleVisibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RuleVisibility
	}).(pulumi.StringPtrOutput)
}

// Configuration options for Cloud Armor Adaptive Protection (CAAP).
type SecurityPolicyAdaptiveProtectionConfigResponse struct {
	// If set to true, enables Cloud Armor Machine Learning.
	Layer7DdosDefenseConfig SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse `pulumi:"layer7DdosDefenseConfig"`
}

// SecurityPolicyAdaptiveProtectionConfigResponseInput is an input type that accepts SecurityPolicyAdaptiveProtectionConfigResponseArgs and SecurityPolicyAdaptiveProtectionConfigResponseOutput values.
// You can construct a concrete instance of `SecurityPolicyAdaptiveProtectionConfigResponseInput` via:
//
//          SecurityPolicyAdaptiveProtectionConfigResponseArgs{...}
type SecurityPolicyAdaptiveProtectionConfigResponseInput interface {
	pulumi.Input

	ToSecurityPolicyAdaptiveProtectionConfigResponseOutput() SecurityPolicyAdaptiveProtectionConfigResponseOutput
	ToSecurityPolicyAdaptiveProtectionConfigResponseOutputWithContext(context.Context) SecurityPolicyAdaptiveProtectionConfigResponseOutput
}

// Configuration options for Cloud Armor Adaptive Protection (CAAP).
type SecurityPolicyAdaptiveProtectionConfigResponseArgs struct {
	// If set to true, enables Cloud Armor Machine Learning.
	Layer7DdosDefenseConfig SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseInput `pulumi:"layer7DdosDefenseConfig"`
}

func (SecurityPolicyAdaptiveProtectionConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyAdaptiveProtectionConfigResponse)(nil)).Elem()
}

func (i SecurityPolicyAdaptiveProtectionConfigResponseArgs) ToSecurityPolicyAdaptiveProtectionConfigResponseOutput() SecurityPolicyAdaptiveProtectionConfigResponseOutput {
	return i.ToSecurityPolicyAdaptiveProtectionConfigResponseOutputWithContext(context.Background())
}

func (i SecurityPolicyAdaptiveProtectionConfigResponseArgs) ToSecurityPolicyAdaptiveProtectionConfigResponseOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdaptiveProtectionConfigResponseOutput)
}

func (i SecurityPolicyAdaptiveProtectionConfigResponseArgs) ToSecurityPolicyAdaptiveProtectionConfigResponsePtrOutput() SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput {
	return i.ToSecurityPolicyAdaptiveProtectionConfigResponsePtrOutputWithContext(context.Background())
}

func (i SecurityPolicyAdaptiveProtectionConfigResponseArgs) ToSecurityPolicyAdaptiveProtectionConfigResponsePtrOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdaptiveProtectionConfigResponseOutput).ToSecurityPolicyAdaptiveProtectionConfigResponsePtrOutputWithContext(ctx)
}

// SecurityPolicyAdaptiveProtectionConfigResponsePtrInput is an input type that accepts SecurityPolicyAdaptiveProtectionConfigResponseArgs, SecurityPolicyAdaptiveProtectionConfigResponsePtr and SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput values.
// You can construct a concrete instance of `SecurityPolicyAdaptiveProtectionConfigResponsePtrInput` via:
//
//          SecurityPolicyAdaptiveProtectionConfigResponseArgs{...}
//
//  or:
//
//          nil
type SecurityPolicyAdaptiveProtectionConfigResponsePtrInput interface {
	pulumi.Input

	ToSecurityPolicyAdaptiveProtectionConfigResponsePtrOutput() SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput
	ToSecurityPolicyAdaptiveProtectionConfigResponsePtrOutputWithContext(context.Context) SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput
}

type securityPolicyAdaptiveProtectionConfigResponsePtrType SecurityPolicyAdaptiveProtectionConfigResponseArgs

func SecurityPolicyAdaptiveProtectionConfigResponsePtr(v *SecurityPolicyAdaptiveProtectionConfigResponseArgs) SecurityPolicyAdaptiveProtectionConfigResponsePtrInput {
	return (*securityPolicyAdaptiveProtectionConfigResponsePtrType)(v)
}

func (*securityPolicyAdaptiveProtectionConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyAdaptiveProtectionConfigResponse)(nil)).Elem()
}

func (i *securityPolicyAdaptiveProtectionConfigResponsePtrType) ToSecurityPolicyAdaptiveProtectionConfigResponsePtrOutput() SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput {
	return i.ToSecurityPolicyAdaptiveProtectionConfigResponsePtrOutputWithContext(context.Background())
}

func (i *securityPolicyAdaptiveProtectionConfigResponsePtrType) ToSecurityPolicyAdaptiveProtectionConfigResponsePtrOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput)
}

// Configuration options for Cloud Armor Adaptive Protection (CAAP).
type SecurityPolicyAdaptiveProtectionConfigResponseOutput struct{ *pulumi.OutputState }

func (SecurityPolicyAdaptiveProtectionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyAdaptiveProtectionConfigResponse)(nil)).Elem()
}

func (o SecurityPolicyAdaptiveProtectionConfigResponseOutput) ToSecurityPolicyAdaptiveProtectionConfigResponseOutput() SecurityPolicyAdaptiveProtectionConfigResponseOutput {
	return o
}

func (o SecurityPolicyAdaptiveProtectionConfigResponseOutput) ToSecurityPolicyAdaptiveProtectionConfigResponseOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigResponseOutput {
	return o
}

func (o SecurityPolicyAdaptiveProtectionConfigResponseOutput) ToSecurityPolicyAdaptiveProtectionConfigResponsePtrOutput() SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput {
	return o.ToSecurityPolicyAdaptiveProtectionConfigResponsePtrOutputWithContext(context.Background())
}

func (o SecurityPolicyAdaptiveProtectionConfigResponseOutput) ToSecurityPolicyAdaptiveProtectionConfigResponsePtrOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput {
	return o.ApplyT(func(v SecurityPolicyAdaptiveProtectionConfigResponse) *SecurityPolicyAdaptiveProtectionConfigResponse {
		return &v
	}).(SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput)
}

// If set to true, enables Cloud Armor Machine Learning.
func (o SecurityPolicyAdaptiveProtectionConfigResponseOutput) Layer7DdosDefenseConfig() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput {
	return o.ApplyT(func(v SecurityPolicyAdaptiveProtectionConfigResponse) SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse {
		return v.Layer7DdosDefenseConfig
	}).(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput)
}

type SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyAdaptiveProtectionConfigResponse)(nil)).Elem()
}

func (o SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput) ToSecurityPolicyAdaptiveProtectionConfigResponsePtrOutput() SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput {
	return o
}

func (o SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput) ToSecurityPolicyAdaptiveProtectionConfigResponsePtrOutputWithContext(ctx context.Context) SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput {
	return o
}

func (o SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput) Elem() SecurityPolicyAdaptiveProtectionConfigResponseOutput {
	return o.ApplyT(func(v *SecurityPolicyAdaptiveProtectionConfigResponse) SecurityPolicyAdaptiveProtectionConfigResponse {
		return *v
	}).(SecurityPolicyAdaptiveProtectionConfigResponseOutput)
}

// If set to true, enables Cloud Armor Machine Learning.
func (o SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput) Layer7DdosDefenseConfig() SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput {
	return o.ApplyT(func(v *SecurityPolicyAdaptiveProtectionConfigResponse) *SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponse {
		if v == nil {
			return nil
		}
		return &v.Layer7DdosDefenseConfig
	}).(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput)
}

type SecurityPolicyAdvancedOptionsConfig struct {
	JsonParsing *string `pulumi:"jsonParsing"`
	LogLevel    *string `pulumi:"logLevel"`
}

// SecurityPolicyAdvancedOptionsConfigInput is an input type that accepts SecurityPolicyAdvancedOptionsConfigArgs and SecurityPolicyAdvancedOptionsConfigOutput values.
// You can construct a concrete instance of `SecurityPolicyAdvancedOptionsConfigInput` via:
//
//          SecurityPolicyAdvancedOptionsConfigArgs{...}
type SecurityPolicyAdvancedOptionsConfigInput interface {
	pulumi.Input

	ToSecurityPolicyAdvancedOptionsConfigOutput() SecurityPolicyAdvancedOptionsConfigOutput
	ToSecurityPolicyAdvancedOptionsConfigOutputWithContext(context.Context) SecurityPolicyAdvancedOptionsConfigOutput
}

type SecurityPolicyAdvancedOptionsConfigArgs struct {
	JsonParsing *SecurityPolicyAdvancedOptionsConfigJsonParsing `pulumi:"jsonParsing"`
	LogLevel    *SecurityPolicyAdvancedOptionsConfigLogLevel    `pulumi:"logLevel"`
}

func (SecurityPolicyAdvancedOptionsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyAdvancedOptionsConfig)(nil)).Elem()
}

func (i SecurityPolicyAdvancedOptionsConfigArgs) ToSecurityPolicyAdvancedOptionsConfigOutput() SecurityPolicyAdvancedOptionsConfigOutput {
	return i.ToSecurityPolicyAdvancedOptionsConfigOutputWithContext(context.Background())
}

func (i SecurityPolicyAdvancedOptionsConfigArgs) ToSecurityPolicyAdvancedOptionsConfigOutputWithContext(ctx context.Context) SecurityPolicyAdvancedOptionsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdvancedOptionsConfigOutput)
}

func (i SecurityPolicyAdvancedOptionsConfigArgs) ToSecurityPolicyAdvancedOptionsConfigPtrOutput() SecurityPolicyAdvancedOptionsConfigPtrOutput {
	return i.ToSecurityPolicyAdvancedOptionsConfigPtrOutputWithContext(context.Background())
}

func (i SecurityPolicyAdvancedOptionsConfigArgs) ToSecurityPolicyAdvancedOptionsConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyAdvancedOptionsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdvancedOptionsConfigOutput).ToSecurityPolicyAdvancedOptionsConfigPtrOutputWithContext(ctx)
}

// SecurityPolicyAdvancedOptionsConfigPtrInput is an input type that accepts SecurityPolicyAdvancedOptionsConfigArgs, SecurityPolicyAdvancedOptionsConfigPtr and SecurityPolicyAdvancedOptionsConfigPtrOutput values.
// You can construct a concrete instance of `SecurityPolicyAdvancedOptionsConfigPtrInput` via:
//
//          SecurityPolicyAdvancedOptionsConfigArgs{...}
//
//  or:
//
//          nil
type SecurityPolicyAdvancedOptionsConfigPtrInput interface {
	pulumi.Input

	ToSecurityPolicyAdvancedOptionsConfigPtrOutput() SecurityPolicyAdvancedOptionsConfigPtrOutput
	ToSecurityPolicyAdvancedOptionsConfigPtrOutputWithContext(context.Context) SecurityPolicyAdvancedOptionsConfigPtrOutput
}

type securityPolicyAdvancedOptionsConfigPtrType SecurityPolicyAdvancedOptionsConfigArgs

func SecurityPolicyAdvancedOptionsConfigPtr(v *SecurityPolicyAdvancedOptionsConfigArgs) SecurityPolicyAdvancedOptionsConfigPtrInput {
	return (*securityPolicyAdvancedOptionsConfigPtrType)(v)
}

func (*securityPolicyAdvancedOptionsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyAdvancedOptionsConfig)(nil)).Elem()
}

func (i *securityPolicyAdvancedOptionsConfigPtrType) ToSecurityPolicyAdvancedOptionsConfigPtrOutput() SecurityPolicyAdvancedOptionsConfigPtrOutput {
	return i.ToSecurityPolicyAdvancedOptionsConfigPtrOutputWithContext(context.Background())
}

func (i *securityPolicyAdvancedOptionsConfigPtrType) ToSecurityPolicyAdvancedOptionsConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyAdvancedOptionsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdvancedOptionsConfigPtrOutput)
}

type SecurityPolicyAdvancedOptionsConfigOutput struct{ *pulumi.OutputState }

func (SecurityPolicyAdvancedOptionsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyAdvancedOptionsConfig)(nil)).Elem()
}

func (o SecurityPolicyAdvancedOptionsConfigOutput) ToSecurityPolicyAdvancedOptionsConfigOutput() SecurityPolicyAdvancedOptionsConfigOutput {
	return o
}

func (o SecurityPolicyAdvancedOptionsConfigOutput) ToSecurityPolicyAdvancedOptionsConfigOutputWithContext(ctx context.Context) SecurityPolicyAdvancedOptionsConfigOutput {
	return o
}

func (o SecurityPolicyAdvancedOptionsConfigOutput) ToSecurityPolicyAdvancedOptionsConfigPtrOutput() SecurityPolicyAdvancedOptionsConfigPtrOutput {
	return o.ToSecurityPolicyAdvancedOptionsConfigPtrOutputWithContext(context.Background())
}

func (o SecurityPolicyAdvancedOptionsConfigOutput) ToSecurityPolicyAdvancedOptionsConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyAdvancedOptionsConfigPtrOutput {
	return o.ApplyT(func(v SecurityPolicyAdvancedOptionsConfig) *SecurityPolicyAdvancedOptionsConfig {
		return &v
	}).(SecurityPolicyAdvancedOptionsConfigPtrOutput)
}
func (o SecurityPolicyAdvancedOptionsConfigOutput) JsonParsing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityPolicyAdvancedOptionsConfig) *string { return v.JsonParsing }).(pulumi.StringPtrOutput)
}

func (o SecurityPolicyAdvancedOptionsConfigOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityPolicyAdvancedOptionsConfig) *string { return v.LogLevel }).(pulumi.StringPtrOutput)
}

type SecurityPolicyAdvancedOptionsConfigPtrOutput struct{ *pulumi.OutputState }

func (SecurityPolicyAdvancedOptionsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyAdvancedOptionsConfig)(nil)).Elem()
}

func (o SecurityPolicyAdvancedOptionsConfigPtrOutput) ToSecurityPolicyAdvancedOptionsConfigPtrOutput() SecurityPolicyAdvancedOptionsConfigPtrOutput {
	return o
}

func (o SecurityPolicyAdvancedOptionsConfigPtrOutput) ToSecurityPolicyAdvancedOptionsConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyAdvancedOptionsConfigPtrOutput {
	return o
}

func (o SecurityPolicyAdvancedOptionsConfigPtrOutput) Elem() SecurityPolicyAdvancedOptionsConfigOutput {
	return o.ApplyT(func(v *SecurityPolicyAdvancedOptionsConfig) SecurityPolicyAdvancedOptionsConfig { return *v }).(SecurityPolicyAdvancedOptionsConfigOutput)
}

func (o SecurityPolicyAdvancedOptionsConfigPtrOutput) JsonParsing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyAdvancedOptionsConfig) *string {
		if v == nil {
			return nil
		}
		return v.JsonParsing
	}).(pulumi.StringPtrOutput)
}

func (o SecurityPolicyAdvancedOptionsConfigPtrOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyAdvancedOptionsConfig) *string {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(pulumi.StringPtrOutput)
}

type SecurityPolicyAdvancedOptionsConfigResponse struct {
	JsonParsing string `pulumi:"jsonParsing"`
	LogLevel    string `pulumi:"logLevel"`
}

// SecurityPolicyAdvancedOptionsConfigResponseInput is an input type that accepts SecurityPolicyAdvancedOptionsConfigResponseArgs and SecurityPolicyAdvancedOptionsConfigResponseOutput values.
// You can construct a concrete instance of `SecurityPolicyAdvancedOptionsConfigResponseInput` via:
//
//          SecurityPolicyAdvancedOptionsConfigResponseArgs{...}
type SecurityPolicyAdvancedOptionsConfigResponseInput interface {
	pulumi.Input

	ToSecurityPolicyAdvancedOptionsConfigResponseOutput() SecurityPolicyAdvancedOptionsConfigResponseOutput
	ToSecurityPolicyAdvancedOptionsConfigResponseOutputWithContext(context.Context) SecurityPolicyAdvancedOptionsConfigResponseOutput
}

type SecurityPolicyAdvancedOptionsConfigResponseArgs struct {
	JsonParsing pulumi.StringInput `pulumi:"jsonParsing"`
	LogLevel    pulumi.StringInput `pulumi:"logLevel"`
}

func (SecurityPolicyAdvancedOptionsConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyAdvancedOptionsConfigResponse)(nil)).Elem()
}

func (i SecurityPolicyAdvancedOptionsConfigResponseArgs) ToSecurityPolicyAdvancedOptionsConfigResponseOutput() SecurityPolicyAdvancedOptionsConfigResponseOutput {
	return i.ToSecurityPolicyAdvancedOptionsConfigResponseOutputWithContext(context.Background())
}

func (i SecurityPolicyAdvancedOptionsConfigResponseArgs) ToSecurityPolicyAdvancedOptionsConfigResponseOutputWithContext(ctx context.Context) SecurityPolicyAdvancedOptionsConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdvancedOptionsConfigResponseOutput)
}

func (i SecurityPolicyAdvancedOptionsConfigResponseArgs) ToSecurityPolicyAdvancedOptionsConfigResponsePtrOutput() SecurityPolicyAdvancedOptionsConfigResponsePtrOutput {
	return i.ToSecurityPolicyAdvancedOptionsConfigResponsePtrOutputWithContext(context.Background())
}

func (i SecurityPolicyAdvancedOptionsConfigResponseArgs) ToSecurityPolicyAdvancedOptionsConfigResponsePtrOutputWithContext(ctx context.Context) SecurityPolicyAdvancedOptionsConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdvancedOptionsConfigResponseOutput).ToSecurityPolicyAdvancedOptionsConfigResponsePtrOutputWithContext(ctx)
}

// SecurityPolicyAdvancedOptionsConfigResponsePtrInput is an input type that accepts SecurityPolicyAdvancedOptionsConfigResponseArgs, SecurityPolicyAdvancedOptionsConfigResponsePtr and SecurityPolicyAdvancedOptionsConfigResponsePtrOutput values.
// You can construct a concrete instance of `SecurityPolicyAdvancedOptionsConfigResponsePtrInput` via:
//
//          SecurityPolicyAdvancedOptionsConfigResponseArgs{...}
//
//  or:
//
//          nil
type SecurityPolicyAdvancedOptionsConfigResponsePtrInput interface {
	pulumi.Input

	ToSecurityPolicyAdvancedOptionsConfigResponsePtrOutput() SecurityPolicyAdvancedOptionsConfigResponsePtrOutput
	ToSecurityPolicyAdvancedOptionsConfigResponsePtrOutputWithContext(context.Context) SecurityPolicyAdvancedOptionsConfigResponsePtrOutput
}

type securityPolicyAdvancedOptionsConfigResponsePtrType SecurityPolicyAdvancedOptionsConfigResponseArgs

func SecurityPolicyAdvancedOptionsConfigResponsePtr(v *SecurityPolicyAdvancedOptionsConfigResponseArgs) SecurityPolicyAdvancedOptionsConfigResponsePtrInput {
	return (*securityPolicyAdvancedOptionsConfigResponsePtrType)(v)
}

func (*securityPolicyAdvancedOptionsConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyAdvancedOptionsConfigResponse)(nil)).Elem()
}

func (i *securityPolicyAdvancedOptionsConfigResponsePtrType) ToSecurityPolicyAdvancedOptionsConfigResponsePtrOutput() SecurityPolicyAdvancedOptionsConfigResponsePtrOutput {
	return i.ToSecurityPolicyAdvancedOptionsConfigResponsePtrOutputWithContext(context.Background())
}

func (i *securityPolicyAdvancedOptionsConfigResponsePtrType) ToSecurityPolicyAdvancedOptionsConfigResponsePtrOutputWithContext(ctx context.Context) SecurityPolicyAdvancedOptionsConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyAdvancedOptionsConfigResponsePtrOutput)
}

type SecurityPolicyAdvancedOptionsConfigResponseOutput struct{ *pulumi.OutputState }

func (SecurityPolicyAdvancedOptionsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyAdvancedOptionsConfigResponse)(nil)).Elem()
}

func (o SecurityPolicyAdvancedOptionsConfigResponseOutput) ToSecurityPolicyAdvancedOptionsConfigResponseOutput() SecurityPolicyAdvancedOptionsConfigResponseOutput {
	return o
}

func (o SecurityPolicyAdvancedOptionsConfigResponseOutput) ToSecurityPolicyAdvancedOptionsConfigResponseOutputWithContext(ctx context.Context) SecurityPolicyAdvancedOptionsConfigResponseOutput {
	return o
}

func (o SecurityPolicyAdvancedOptionsConfigResponseOutput) ToSecurityPolicyAdvancedOptionsConfigResponsePtrOutput() SecurityPolicyAdvancedOptionsConfigResponsePtrOutput {
	return o.ToSecurityPolicyAdvancedOptionsConfigResponsePtrOutputWithContext(context.Background())
}

func (o SecurityPolicyAdvancedOptionsConfigResponseOutput) ToSecurityPolicyAdvancedOptionsConfigResponsePtrOutputWithContext(ctx context.Context) SecurityPolicyAdvancedOptionsConfigResponsePtrOutput {
	return o.ApplyT(func(v SecurityPolicyAdvancedOptionsConfigResponse) *SecurityPolicyAdvancedOptionsConfigResponse {
		return &v
	}).(SecurityPolicyAdvancedOptionsConfigResponsePtrOutput)
}
func (o SecurityPolicyAdvancedOptionsConfigResponseOutput) JsonParsing() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPolicyAdvancedOptionsConfigResponse) string { return v.JsonParsing }).(pulumi.StringOutput)
}

func (o SecurityPolicyAdvancedOptionsConfigResponseOutput) LogLevel() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPolicyAdvancedOptionsConfigResponse) string { return v.LogLevel }).(pulumi.StringOutput)
}

type SecurityPolicyAdvancedOptionsConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (SecurityPolicyAdvancedOptionsConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyAdvancedOptionsConfigResponse)(nil)).Elem()
}

func (o SecurityPolicyAdvancedOptionsConfigResponsePtrOutput) ToSecurityPolicyAdvancedOptionsConfigResponsePtrOutput() SecurityPolicyAdvancedOptionsConfigResponsePtrOutput {
	return o
}

func (o SecurityPolicyAdvancedOptionsConfigResponsePtrOutput) ToSecurityPolicyAdvancedOptionsConfigResponsePtrOutputWithContext(ctx context.Context) SecurityPolicyAdvancedOptionsConfigResponsePtrOutput {
	return o
}

func (o SecurityPolicyAdvancedOptionsConfigResponsePtrOutput) Elem() SecurityPolicyAdvancedOptionsConfigResponseOutput {
	return o.ApplyT(func(v *SecurityPolicyAdvancedOptionsConfigResponse) SecurityPolicyAdvancedOptionsConfigResponse {
		return *v
	}).(SecurityPolicyAdvancedOptionsConfigResponseOutput)
}

func (o SecurityPolicyAdvancedOptionsConfigResponsePtrOutput) JsonParsing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyAdvancedOptionsConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JsonParsing
	}).(pulumi.StringPtrOutput)
}

func (o SecurityPolicyAdvancedOptionsConfigResponsePtrOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyAdvancedOptionsConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LogLevel
	}).(pulumi.StringPtrOutput)
}

// Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
type SecurityPolicyRule struct {
	// The Action to perform when the client connection triggers the rule. Can currently be either "allow" or "deny()" where valid values for status are 403, 404, and 502.
	Action *string `pulumi:"action"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	Match *SecurityPolicyRuleMatcher `pulumi:"match"`
	// If set to true, the specified action is not enforced.
	Preview *bool `pulumi:"preview"`
	// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
	Priority *int `pulumi:"priority"`
}

// SecurityPolicyRuleInput is an input type that accepts SecurityPolicyRuleArgs and SecurityPolicyRuleOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleInput` via:
//
//          SecurityPolicyRuleArgs{...}
type SecurityPolicyRuleInput interface {
	pulumi.Input

	ToSecurityPolicyRuleOutput() SecurityPolicyRuleOutput
	ToSecurityPolicyRuleOutputWithContext(context.Context) SecurityPolicyRuleOutput
}

// Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
type SecurityPolicyRuleArgs struct {
	// The Action to perform when the client connection triggers the rule. Can currently be either "allow" or "deny()" where valid values for status are 403, 404, and 502.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	Match SecurityPolicyRuleMatcherPtrInput `pulumi:"match"`
	// If set to true, the specified action is not enforced.
	Preview pulumi.BoolPtrInput `pulumi:"preview"`
	// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
}

func (SecurityPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRule)(nil)).Elem()
}

func (i SecurityPolicyRuleArgs) ToSecurityPolicyRuleOutput() SecurityPolicyRuleOutput {
	return i.ToSecurityPolicyRuleOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleArgs) ToSecurityPolicyRuleOutputWithContext(ctx context.Context) SecurityPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleOutput)
}

// SecurityPolicyRuleArrayInput is an input type that accepts SecurityPolicyRuleArray and SecurityPolicyRuleArrayOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleArrayInput` via:
//
//          SecurityPolicyRuleArray{ SecurityPolicyRuleArgs{...} }
type SecurityPolicyRuleArrayInput interface {
	pulumi.Input

	ToSecurityPolicyRuleArrayOutput() SecurityPolicyRuleArrayOutput
	ToSecurityPolicyRuleArrayOutputWithContext(context.Context) SecurityPolicyRuleArrayOutput
}

type SecurityPolicyRuleArray []SecurityPolicyRuleInput

func (SecurityPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityPolicyRule)(nil)).Elem()
}

func (i SecurityPolicyRuleArray) ToSecurityPolicyRuleArrayOutput() SecurityPolicyRuleArrayOutput {
	return i.ToSecurityPolicyRuleArrayOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleArray) ToSecurityPolicyRuleArrayOutputWithContext(ctx context.Context) SecurityPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleArrayOutput)
}

// Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
type SecurityPolicyRuleOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRule)(nil)).Elem()
}

func (o SecurityPolicyRuleOutput) ToSecurityPolicyRuleOutput() SecurityPolicyRuleOutput {
	return o
}

func (o SecurityPolicyRuleOutput) ToSecurityPolicyRuleOutputWithContext(ctx context.Context) SecurityPolicyRuleOutput {
	return o
}

// The Action to perform when the client connection triggers the rule. Can currently be either "allow" or "deny()" where valid values for status are 403, 404, and 502.
func (o SecurityPolicyRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o SecurityPolicyRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
func (o SecurityPolicyRuleOutput) Match() SecurityPolicyRuleMatcherPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRule) *SecurityPolicyRuleMatcher { return v.Match }).(SecurityPolicyRuleMatcherPtrOutput)
}

// If set to true, the specified action is not enforced.
func (o SecurityPolicyRuleOutput) Preview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRule) *bool { return v.Preview }).(pulumi.BoolPtrOutput)
}

// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
func (o SecurityPolicyRuleOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRule) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

type SecurityPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityPolicyRule)(nil)).Elem()
}

func (o SecurityPolicyRuleArrayOutput) ToSecurityPolicyRuleArrayOutput() SecurityPolicyRuleArrayOutput {
	return o
}

func (o SecurityPolicyRuleArrayOutput) ToSecurityPolicyRuleArrayOutputWithContext(ctx context.Context) SecurityPolicyRuleArrayOutput {
	return o
}

func (o SecurityPolicyRuleArrayOutput) Index(i pulumi.IntInput) SecurityPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityPolicyRule {
		return vs[0].([]SecurityPolicyRule)[vs[1].(int)]
	}).(SecurityPolicyRuleOutput)
}

// Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
type SecurityPolicyRuleMatcher struct {
	// The configuration options available when specifying versioned_expr. This field must be specified if versioned_expr is specified and cannot be specified if versioned_expr is not specified.
	Config *SecurityPolicyRuleMatcherConfig `pulumi:"config"`
	// User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
	Expr *Expr `pulumi:"expr"`
	// Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config.
	VersionedExpr *string `pulumi:"versionedExpr"`
}

// SecurityPolicyRuleMatcherInput is an input type that accepts SecurityPolicyRuleMatcherArgs and SecurityPolicyRuleMatcherOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleMatcherInput` via:
//
//          SecurityPolicyRuleMatcherArgs{...}
type SecurityPolicyRuleMatcherInput interface {
	pulumi.Input

	ToSecurityPolicyRuleMatcherOutput() SecurityPolicyRuleMatcherOutput
	ToSecurityPolicyRuleMatcherOutputWithContext(context.Context) SecurityPolicyRuleMatcherOutput
}

// Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
type SecurityPolicyRuleMatcherArgs struct {
	// The configuration options available when specifying versioned_expr. This field must be specified if versioned_expr is specified and cannot be specified if versioned_expr is not specified.
	Config SecurityPolicyRuleMatcherConfigPtrInput `pulumi:"config"`
	// User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
	Expr ExprPtrInput `pulumi:"expr"`
	// Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config.
	VersionedExpr *SecurityPolicyRuleMatcherVersionedExpr `pulumi:"versionedExpr"`
}

func (SecurityPolicyRuleMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRuleMatcher)(nil)).Elem()
}

func (i SecurityPolicyRuleMatcherArgs) ToSecurityPolicyRuleMatcherOutput() SecurityPolicyRuleMatcherOutput {
	return i.ToSecurityPolicyRuleMatcherOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleMatcherArgs) ToSecurityPolicyRuleMatcherOutputWithContext(ctx context.Context) SecurityPolicyRuleMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleMatcherOutput)
}

func (i SecurityPolicyRuleMatcherArgs) ToSecurityPolicyRuleMatcherPtrOutput() SecurityPolicyRuleMatcherPtrOutput {
	return i.ToSecurityPolicyRuleMatcherPtrOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleMatcherArgs) ToSecurityPolicyRuleMatcherPtrOutputWithContext(ctx context.Context) SecurityPolicyRuleMatcherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleMatcherOutput).ToSecurityPolicyRuleMatcherPtrOutputWithContext(ctx)
}

// SecurityPolicyRuleMatcherPtrInput is an input type that accepts SecurityPolicyRuleMatcherArgs, SecurityPolicyRuleMatcherPtr and SecurityPolicyRuleMatcherPtrOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleMatcherPtrInput` via:
//
//          SecurityPolicyRuleMatcherArgs{...}
//
//  or:
//
//          nil
type SecurityPolicyRuleMatcherPtrInput interface {
	pulumi.Input

	ToSecurityPolicyRuleMatcherPtrOutput() SecurityPolicyRuleMatcherPtrOutput
	ToSecurityPolicyRuleMatcherPtrOutputWithContext(context.Context) SecurityPolicyRuleMatcherPtrOutput
}

type securityPolicyRuleMatcherPtrType SecurityPolicyRuleMatcherArgs

func SecurityPolicyRuleMatcherPtr(v *SecurityPolicyRuleMatcherArgs) SecurityPolicyRuleMatcherPtrInput {
	return (*securityPolicyRuleMatcherPtrType)(v)
}

func (*securityPolicyRuleMatcherPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyRuleMatcher)(nil)).Elem()
}

func (i *securityPolicyRuleMatcherPtrType) ToSecurityPolicyRuleMatcherPtrOutput() SecurityPolicyRuleMatcherPtrOutput {
	return i.ToSecurityPolicyRuleMatcherPtrOutputWithContext(context.Background())
}

func (i *securityPolicyRuleMatcherPtrType) ToSecurityPolicyRuleMatcherPtrOutputWithContext(ctx context.Context) SecurityPolicyRuleMatcherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleMatcherPtrOutput)
}

// Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
type SecurityPolicyRuleMatcherOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRuleMatcher)(nil)).Elem()
}

func (o SecurityPolicyRuleMatcherOutput) ToSecurityPolicyRuleMatcherOutput() SecurityPolicyRuleMatcherOutput {
	return o
}

func (o SecurityPolicyRuleMatcherOutput) ToSecurityPolicyRuleMatcherOutputWithContext(ctx context.Context) SecurityPolicyRuleMatcherOutput {
	return o
}

func (o SecurityPolicyRuleMatcherOutput) ToSecurityPolicyRuleMatcherPtrOutput() SecurityPolicyRuleMatcherPtrOutput {
	return o.ToSecurityPolicyRuleMatcherPtrOutputWithContext(context.Background())
}

func (o SecurityPolicyRuleMatcherOutput) ToSecurityPolicyRuleMatcherPtrOutputWithContext(ctx context.Context) SecurityPolicyRuleMatcherPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatcher) *SecurityPolicyRuleMatcher {
		return &v
	}).(SecurityPolicyRuleMatcherPtrOutput)
}

// The configuration options available when specifying versioned_expr. This field must be specified if versioned_expr is specified and cannot be specified if versioned_expr is not specified.
func (o SecurityPolicyRuleMatcherOutput) Config() SecurityPolicyRuleMatcherConfigPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatcher) *SecurityPolicyRuleMatcherConfig { return v.Config }).(SecurityPolicyRuleMatcherConfigPtrOutput)
}

// User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
func (o SecurityPolicyRuleMatcherOutput) Expr() ExprPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatcher) *Expr { return v.Expr }).(ExprPtrOutput)
}

// Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config.
func (o SecurityPolicyRuleMatcherOutput) VersionedExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatcher) *string { return v.VersionedExpr }).(pulumi.StringPtrOutput)
}

type SecurityPolicyRuleMatcherPtrOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleMatcherPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyRuleMatcher)(nil)).Elem()
}

func (o SecurityPolicyRuleMatcherPtrOutput) ToSecurityPolicyRuleMatcherPtrOutput() SecurityPolicyRuleMatcherPtrOutput {
	return o
}

func (o SecurityPolicyRuleMatcherPtrOutput) ToSecurityPolicyRuleMatcherPtrOutputWithContext(ctx context.Context) SecurityPolicyRuleMatcherPtrOutput {
	return o
}

func (o SecurityPolicyRuleMatcherPtrOutput) Elem() SecurityPolicyRuleMatcherOutput {
	return o.ApplyT(func(v *SecurityPolicyRuleMatcher) SecurityPolicyRuleMatcher { return *v }).(SecurityPolicyRuleMatcherOutput)
}

// The configuration options available when specifying versioned_expr. This field must be specified if versioned_expr is specified and cannot be specified if versioned_expr is not specified.
func (o SecurityPolicyRuleMatcherPtrOutput) Config() SecurityPolicyRuleMatcherConfigPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyRuleMatcher) *SecurityPolicyRuleMatcherConfig {
		if v == nil {
			return nil
		}
		return v.Config
	}).(SecurityPolicyRuleMatcherConfigPtrOutput)
}

// User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
func (o SecurityPolicyRuleMatcherPtrOutput) Expr() ExprPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyRuleMatcher) *Expr {
		if v == nil {
			return nil
		}
		return v.Expr
	}).(ExprPtrOutput)
}

// Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config.
func (o SecurityPolicyRuleMatcherPtrOutput) VersionedExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicyRuleMatcher) *string {
		if v == nil {
			return nil
		}
		return v.VersionedExpr
	}).(pulumi.StringPtrOutput)
}

type SecurityPolicyRuleMatcherConfig struct {
	// CIDR IP address range. Maximum number of src_ip_ranges allowed is 10.
	SrcIpRanges []string `pulumi:"srcIpRanges"`
}

// SecurityPolicyRuleMatcherConfigInput is an input type that accepts SecurityPolicyRuleMatcherConfigArgs and SecurityPolicyRuleMatcherConfigOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleMatcherConfigInput` via:
//
//          SecurityPolicyRuleMatcherConfigArgs{...}
type SecurityPolicyRuleMatcherConfigInput interface {
	pulumi.Input

	ToSecurityPolicyRuleMatcherConfigOutput() SecurityPolicyRuleMatcherConfigOutput
	ToSecurityPolicyRuleMatcherConfigOutputWithContext(context.Context) SecurityPolicyRuleMatcherConfigOutput
}

type SecurityPolicyRuleMatcherConfigArgs struct {
	// CIDR IP address range. Maximum number of src_ip_ranges allowed is 10.
	SrcIpRanges pulumi.StringArrayInput `pulumi:"srcIpRanges"`
}

func (SecurityPolicyRuleMatcherConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRuleMatcherConfig)(nil)).Elem()
}

func (i SecurityPolicyRuleMatcherConfigArgs) ToSecurityPolicyRuleMatcherConfigOutput() SecurityPolicyRuleMatcherConfigOutput {
	return i.ToSecurityPolicyRuleMatcherConfigOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleMatcherConfigArgs) ToSecurityPolicyRuleMatcherConfigOutputWithContext(ctx context.Context) SecurityPolicyRuleMatcherConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleMatcherConfigOutput)
}

func (i SecurityPolicyRuleMatcherConfigArgs) ToSecurityPolicyRuleMatcherConfigPtrOutput() SecurityPolicyRuleMatcherConfigPtrOutput {
	return i.ToSecurityPolicyRuleMatcherConfigPtrOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleMatcherConfigArgs) ToSecurityPolicyRuleMatcherConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyRuleMatcherConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleMatcherConfigOutput).ToSecurityPolicyRuleMatcherConfigPtrOutputWithContext(ctx)
}

// SecurityPolicyRuleMatcherConfigPtrInput is an input type that accepts SecurityPolicyRuleMatcherConfigArgs, SecurityPolicyRuleMatcherConfigPtr and SecurityPolicyRuleMatcherConfigPtrOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleMatcherConfigPtrInput` via:
//
//          SecurityPolicyRuleMatcherConfigArgs{...}
//
//  or:
//
//          nil
type SecurityPolicyRuleMatcherConfigPtrInput interface {
	pulumi.Input

	ToSecurityPolicyRuleMatcherConfigPtrOutput() SecurityPolicyRuleMatcherConfigPtrOutput
	ToSecurityPolicyRuleMatcherConfigPtrOutputWithContext(context.Context) SecurityPolicyRuleMatcherConfigPtrOutput
}

type securityPolicyRuleMatcherConfigPtrType SecurityPolicyRuleMatcherConfigArgs

func SecurityPolicyRuleMatcherConfigPtr(v *SecurityPolicyRuleMatcherConfigArgs) SecurityPolicyRuleMatcherConfigPtrInput {
	return (*securityPolicyRuleMatcherConfigPtrType)(v)
}

func (*securityPolicyRuleMatcherConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyRuleMatcherConfig)(nil)).Elem()
}

func (i *securityPolicyRuleMatcherConfigPtrType) ToSecurityPolicyRuleMatcherConfigPtrOutput() SecurityPolicyRuleMatcherConfigPtrOutput {
	return i.ToSecurityPolicyRuleMatcherConfigPtrOutputWithContext(context.Background())
}

func (i *securityPolicyRuleMatcherConfigPtrType) ToSecurityPolicyRuleMatcherConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyRuleMatcherConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleMatcherConfigPtrOutput)
}

type SecurityPolicyRuleMatcherConfigOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleMatcherConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRuleMatcherConfig)(nil)).Elem()
}

func (o SecurityPolicyRuleMatcherConfigOutput) ToSecurityPolicyRuleMatcherConfigOutput() SecurityPolicyRuleMatcherConfigOutput {
	return o
}

func (o SecurityPolicyRuleMatcherConfigOutput) ToSecurityPolicyRuleMatcherConfigOutputWithContext(ctx context.Context) SecurityPolicyRuleMatcherConfigOutput {
	return o
}

func (o SecurityPolicyRuleMatcherConfigOutput) ToSecurityPolicyRuleMatcherConfigPtrOutput() SecurityPolicyRuleMatcherConfigPtrOutput {
	return o.ToSecurityPolicyRuleMatcherConfigPtrOutputWithContext(context.Background())
}

func (o SecurityPolicyRuleMatcherConfigOutput) ToSecurityPolicyRuleMatcherConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyRuleMatcherConfigPtrOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatcherConfig) *SecurityPolicyRuleMatcherConfig {
		return &v
	}).(SecurityPolicyRuleMatcherConfigPtrOutput)
}

// CIDR IP address range. Maximum number of src_ip_ranges allowed is 10.
func (o SecurityPolicyRuleMatcherConfigOutput) SrcIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatcherConfig) []string { return v.SrcIpRanges }).(pulumi.StringArrayOutput)
}

type SecurityPolicyRuleMatcherConfigPtrOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleMatcherConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicyRuleMatcherConfig)(nil)).Elem()
}

func (o SecurityPolicyRuleMatcherConfigPtrOutput) ToSecurityPolicyRuleMatcherConfigPtrOutput() SecurityPolicyRuleMatcherConfigPtrOutput {
	return o
}

func (o SecurityPolicyRuleMatcherConfigPtrOutput) ToSecurityPolicyRuleMatcherConfigPtrOutputWithContext(ctx context.Context) SecurityPolicyRuleMatcherConfigPtrOutput {
	return o
}

func (o SecurityPolicyRuleMatcherConfigPtrOutput) Elem() SecurityPolicyRuleMatcherConfigOutput {
	return o.ApplyT(func(v *SecurityPolicyRuleMatcherConfig) SecurityPolicyRuleMatcherConfig { return *v }).(SecurityPolicyRuleMatcherConfigOutput)
}

// CIDR IP address range. Maximum number of src_ip_ranges allowed is 10.
func (o SecurityPolicyRuleMatcherConfigPtrOutput) SrcIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityPolicyRuleMatcherConfig) []string {
		if v == nil {
			return nil
		}
		return v.SrcIpRanges
	}).(pulumi.StringArrayOutput)
}

type SecurityPolicyRuleMatcherConfigResponse struct {
	// CIDR IP address range. Maximum number of src_ip_ranges allowed is 10.
	SrcIpRanges []string `pulumi:"srcIpRanges"`
}

// SecurityPolicyRuleMatcherConfigResponseInput is an input type that accepts SecurityPolicyRuleMatcherConfigResponseArgs and SecurityPolicyRuleMatcherConfigResponseOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleMatcherConfigResponseInput` via:
//
//          SecurityPolicyRuleMatcherConfigResponseArgs{...}
type SecurityPolicyRuleMatcherConfigResponseInput interface {
	pulumi.Input

	ToSecurityPolicyRuleMatcherConfigResponseOutput() SecurityPolicyRuleMatcherConfigResponseOutput
	ToSecurityPolicyRuleMatcherConfigResponseOutputWithContext(context.Context) SecurityPolicyRuleMatcherConfigResponseOutput
}

type SecurityPolicyRuleMatcherConfigResponseArgs struct {
	// CIDR IP address range. Maximum number of src_ip_ranges allowed is 10.
	SrcIpRanges pulumi.StringArrayInput `pulumi:"srcIpRanges"`
}

func (SecurityPolicyRuleMatcherConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRuleMatcherConfigResponse)(nil)).Elem()
}

func (i SecurityPolicyRuleMatcherConfigResponseArgs) ToSecurityPolicyRuleMatcherConfigResponseOutput() SecurityPolicyRuleMatcherConfigResponseOutput {
	return i.ToSecurityPolicyRuleMatcherConfigResponseOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleMatcherConfigResponseArgs) ToSecurityPolicyRuleMatcherConfigResponseOutputWithContext(ctx context.Context) SecurityPolicyRuleMatcherConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleMatcherConfigResponseOutput)
}

type SecurityPolicyRuleMatcherConfigResponseOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleMatcherConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRuleMatcherConfigResponse)(nil)).Elem()
}

func (o SecurityPolicyRuleMatcherConfigResponseOutput) ToSecurityPolicyRuleMatcherConfigResponseOutput() SecurityPolicyRuleMatcherConfigResponseOutput {
	return o
}

func (o SecurityPolicyRuleMatcherConfigResponseOutput) ToSecurityPolicyRuleMatcherConfigResponseOutputWithContext(ctx context.Context) SecurityPolicyRuleMatcherConfigResponseOutput {
	return o
}

// CIDR IP address range. Maximum number of src_ip_ranges allowed is 10.
func (o SecurityPolicyRuleMatcherConfigResponseOutput) SrcIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatcherConfigResponse) []string { return v.SrcIpRanges }).(pulumi.StringArrayOutput)
}

// Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
type SecurityPolicyRuleMatcherResponse struct {
	// The configuration options available when specifying versioned_expr. This field must be specified if versioned_expr is specified and cannot be specified if versioned_expr is not specified.
	Config SecurityPolicyRuleMatcherConfigResponse `pulumi:"config"`
	// User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
	Expr ExprResponse `pulumi:"expr"`
	// Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config.
	VersionedExpr string `pulumi:"versionedExpr"`
}

// SecurityPolicyRuleMatcherResponseInput is an input type that accepts SecurityPolicyRuleMatcherResponseArgs and SecurityPolicyRuleMatcherResponseOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleMatcherResponseInput` via:
//
//          SecurityPolicyRuleMatcherResponseArgs{...}
type SecurityPolicyRuleMatcherResponseInput interface {
	pulumi.Input

	ToSecurityPolicyRuleMatcherResponseOutput() SecurityPolicyRuleMatcherResponseOutput
	ToSecurityPolicyRuleMatcherResponseOutputWithContext(context.Context) SecurityPolicyRuleMatcherResponseOutput
}

// Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
type SecurityPolicyRuleMatcherResponseArgs struct {
	// The configuration options available when specifying versioned_expr. This field must be specified if versioned_expr is specified and cannot be specified if versioned_expr is not specified.
	Config SecurityPolicyRuleMatcherConfigResponseInput `pulumi:"config"`
	// User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
	Expr ExprResponseInput `pulumi:"expr"`
	// Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config.
	VersionedExpr pulumi.StringInput `pulumi:"versionedExpr"`
}

func (SecurityPolicyRuleMatcherResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRuleMatcherResponse)(nil)).Elem()
}

func (i SecurityPolicyRuleMatcherResponseArgs) ToSecurityPolicyRuleMatcherResponseOutput() SecurityPolicyRuleMatcherResponseOutput {
	return i.ToSecurityPolicyRuleMatcherResponseOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleMatcherResponseArgs) ToSecurityPolicyRuleMatcherResponseOutputWithContext(ctx context.Context) SecurityPolicyRuleMatcherResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleMatcherResponseOutput)
}

// Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
type SecurityPolicyRuleMatcherResponseOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleMatcherResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRuleMatcherResponse)(nil)).Elem()
}

func (o SecurityPolicyRuleMatcherResponseOutput) ToSecurityPolicyRuleMatcherResponseOutput() SecurityPolicyRuleMatcherResponseOutput {
	return o
}

func (o SecurityPolicyRuleMatcherResponseOutput) ToSecurityPolicyRuleMatcherResponseOutputWithContext(ctx context.Context) SecurityPolicyRuleMatcherResponseOutput {
	return o
}

// The configuration options available when specifying versioned_expr. This field must be specified if versioned_expr is specified and cannot be specified if versioned_expr is not specified.
func (o SecurityPolicyRuleMatcherResponseOutput) Config() SecurityPolicyRuleMatcherConfigResponseOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatcherResponse) SecurityPolicyRuleMatcherConfigResponse { return v.Config }).(SecurityPolicyRuleMatcherConfigResponseOutput)
}

// User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
func (o SecurityPolicyRuleMatcherResponseOutput) Expr() ExprResponseOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatcherResponse) ExprResponse { return v.Expr }).(ExprResponseOutput)
}

// Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 - must specify the corresponding src_ip_range field in config.
func (o SecurityPolicyRuleMatcherResponseOutput) VersionedExpr() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPolicyRuleMatcherResponse) string { return v.VersionedExpr }).(pulumi.StringOutput)
}

// Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
type SecurityPolicyRuleResponse struct {
	// The Action to perform when the client connection triggers the rule. Can currently be either "allow" or "deny()" where valid values for status are 403, 404, and 502.
	Action string `pulumi:"action"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description string `pulumi:"description"`
	// [Output only] Type of the resource. Always compute#securityPolicyRule for security policy rules
	Kind string `pulumi:"kind"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	Match SecurityPolicyRuleMatcherResponse `pulumi:"match"`
	// If set to true, the specified action is not enforced.
	Preview bool `pulumi:"preview"`
	// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
	Priority int `pulumi:"priority"`
}

// SecurityPolicyRuleResponseInput is an input type that accepts SecurityPolicyRuleResponseArgs and SecurityPolicyRuleResponseOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleResponseInput` via:
//
//          SecurityPolicyRuleResponseArgs{...}
type SecurityPolicyRuleResponseInput interface {
	pulumi.Input

	ToSecurityPolicyRuleResponseOutput() SecurityPolicyRuleResponseOutput
	ToSecurityPolicyRuleResponseOutputWithContext(context.Context) SecurityPolicyRuleResponseOutput
}

// Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
type SecurityPolicyRuleResponseArgs struct {
	// The Action to perform when the client connection triggers the rule. Can currently be either "allow" or "deny()" where valid values for status are 403, 404, and 502.
	Action pulumi.StringInput `pulumi:"action"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringInput `pulumi:"description"`
	// [Output only] Type of the resource. Always compute#securityPolicyRule for security policy rules
	Kind pulumi.StringInput `pulumi:"kind"`
	// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
	Match SecurityPolicyRuleMatcherResponseInput `pulumi:"match"`
	// If set to true, the specified action is not enforced.
	Preview pulumi.BoolInput `pulumi:"preview"`
	// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
	Priority pulumi.IntInput `pulumi:"priority"`
}

func (SecurityPolicyRuleResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRuleResponse)(nil)).Elem()
}

func (i SecurityPolicyRuleResponseArgs) ToSecurityPolicyRuleResponseOutput() SecurityPolicyRuleResponseOutput {
	return i.ToSecurityPolicyRuleResponseOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleResponseArgs) ToSecurityPolicyRuleResponseOutputWithContext(ctx context.Context) SecurityPolicyRuleResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleResponseOutput)
}

// SecurityPolicyRuleResponseArrayInput is an input type that accepts SecurityPolicyRuleResponseArray and SecurityPolicyRuleResponseArrayOutput values.
// You can construct a concrete instance of `SecurityPolicyRuleResponseArrayInput` via:
//
//          SecurityPolicyRuleResponseArray{ SecurityPolicyRuleResponseArgs{...} }
type SecurityPolicyRuleResponseArrayInput interface {
	pulumi.Input

	ToSecurityPolicyRuleResponseArrayOutput() SecurityPolicyRuleResponseArrayOutput
	ToSecurityPolicyRuleResponseArrayOutputWithContext(context.Context) SecurityPolicyRuleResponseArrayOutput
}

type SecurityPolicyRuleResponseArray []SecurityPolicyRuleResponseInput

func (SecurityPolicyRuleResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityPolicyRuleResponse)(nil)).Elem()
}

func (i SecurityPolicyRuleResponseArray) ToSecurityPolicyRuleResponseArrayOutput() SecurityPolicyRuleResponseArrayOutput {
	return i.ToSecurityPolicyRuleResponseArrayOutputWithContext(context.Background())
}

func (i SecurityPolicyRuleResponseArray) ToSecurityPolicyRuleResponseArrayOutputWithContext(ctx context.Context) SecurityPolicyRuleResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyRuleResponseArrayOutput)
}

// Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
type SecurityPolicyRuleResponseOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyRuleResponse)(nil)).Elem()
}

func (o SecurityPolicyRuleResponseOutput) ToSecurityPolicyRuleResponseOutput() SecurityPolicyRuleResponseOutput {
	return o
}

func (o SecurityPolicyRuleResponseOutput) ToSecurityPolicyRuleResponseOutputWithContext(ctx context.Context) SecurityPolicyRuleResponseOutput {
	return o
}

// The Action to perform when the client connection triggers the rule. Can currently be either "allow" or "deny()" where valid values for status are 403, 404, and 502.
func (o SecurityPolicyRuleResponseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPolicyRuleResponse) string { return v.Action }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o SecurityPolicyRuleResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPolicyRuleResponse) string { return v.Description }).(pulumi.StringOutput)
}

// [Output only] Type of the resource. Always compute#securityPolicyRule for security policy rules
func (o SecurityPolicyRuleResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPolicyRuleResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced.
func (o SecurityPolicyRuleResponseOutput) Match() SecurityPolicyRuleMatcherResponseOutput {
	return o.ApplyT(func(v SecurityPolicyRuleResponse) SecurityPolicyRuleMatcherResponse { return v.Match }).(SecurityPolicyRuleMatcherResponseOutput)
}

// If set to true, the specified action is not enforced.
func (o SecurityPolicyRuleResponseOutput) Preview() pulumi.BoolOutput {
	return o.ApplyT(func(v SecurityPolicyRuleResponse) bool { return v.Preview }).(pulumi.BoolOutput)
}

// An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
func (o SecurityPolicyRuleResponseOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v SecurityPolicyRuleResponse) int { return v.Priority }).(pulumi.IntOutput)
}

type SecurityPolicyRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (SecurityPolicyRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityPolicyRuleResponse)(nil)).Elem()
}

func (o SecurityPolicyRuleResponseArrayOutput) ToSecurityPolicyRuleResponseArrayOutput() SecurityPolicyRuleResponseArrayOutput {
	return o
}

func (o SecurityPolicyRuleResponseArrayOutput) ToSecurityPolicyRuleResponseArrayOutputWithContext(ctx context.Context) SecurityPolicyRuleResponseArrayOutput {
	return o
}

func (o SecurityPolicyRuleResponseArrayOutput) Index(i pulumi.IntInput) SecurityPolicyRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityPolicyRuleResponse {
		return vs[0].([]SecurityPolicyRuleResponse)[vs[1].(int)]
	}).(SecurityPolicyRuleResponseOutput)
}

// The authentication and authorization settings for a BackendService.
type SecuritySettings struct {
	// Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
	ClientTlsPolicy *string `pulumi:"clientTlsPolicy"`
	// Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
	SubjectAltNames []string `pulumi:"subjectAltNames"`
}

// SecuritySettingsInput is an input type that accepts SecuritySettingsArgs and SecuritySettingsOutput values.
// You can construct a concrete instance of `SecuritySettingsInput` via:
//
//          SecuritySettingsArgs{...}
type SecuritySettingsInput interface {
	pulumi.Input

	ToSecuritySettingsOutput() SecuritySettingsOutput
	ToSecuritySettingsOutputWithContext(context.Context) SecuritySettingsOutput
}

// The authentication and authorization settings for a BackendService.
type SecuritySettingsArgs struct {
	// Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
	ClientTlsPolicy pulumi.StringPtrInput `pulumi:"clientTlsPolicy"`
	// Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
	SubjectAltNames pulumi.StringArrayInput `pulumi:"subjectAltNames"`
}

func (SecuritySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecuritySettings)(nil)).Elem()
}

func (i SecuritySettingsArgs) ToSecuritySettingsOutput() SecuritySettingsOutput {
	return i.ToSecuritySettingsOutputWithContext(context.Background())
}

func (i SecuritySettingsArgs) ToSecuritySettingsOutputWithContext(ctx context.Context) SecuritySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecuritySettingsOutput)
}

func (i SecuritySettingsArgs) ToSecuritySettingsPtrOutput() SecuritySettingsPtrOutput {
	return i.ToSecuritySettingsPtrOutputWithContext(context.Background())
}

func (i SecuritySettingsArgs) ToSecuritySettingsPtrOutputWithContext(ctx context.Context) SecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecuritySettingsOutput).ToSecuritySettingsPtrOutputWithContext(ctx)
}

// SecuritySettingsPtrInput is an input type that accepts SecuritySettingsArgs, SecuritySettingsPtr and SecuritySettingsPtrOutput values.
// You can construct a concrete instance of `SecuritySettingsPtrInput` via:
//
//          SecuritySettingsArgs{...}
//
//  or:
//
//          nil
type SecuritySettingsPtrInput interface {
	pulumi.Input

	ToSecuritySettingsPtrOutput() SecuritySettingsPtrOutput
	ToSecuritySettingsPtrOutputWithContext(context.Context) SecuritySettingsPtrOutput
}

type securitySettingsPtrType SecuritySettingsArgs

func SecuritySettingsPtr(v *SecuritySettingsArgs) SecuritySettingsPtrInput {
	return (*securitySettingsPtrType)(v)
}

func (*securitySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecuritySettings)(nil)).Elem()
}

func (i *securitySettingsPtrType) ToSecuritySettingsPtrOutput() SecuritySettingsPtrOutput {
	return i.ToSecuritySettingsPtrOutputWithContext(context.Background())
}

func (i *securitySettingsPtrType) ToSecuritySettingsPtrOutputWithContext(ctx context.Context) SecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecuritySettingsPtrOutput)
}

// The authentication and authorization settings for a BackendService.
type SecuritySettingsOutput struct{ *pulumi.OutputState }

func (SecuritySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecuritySettings)(nil)).Elem()
}

func (o SecuritySettingsOutput) ToSecuritySettingsOutput() SecuritySettingsOutput {
	return o
}

func (o SecuritySettingsOutput) ToSecuritySettingsOutputWithContext(ctx context.Context) SecuritySettingsOutput {
	return o
}

func (o SecuritySettingsOutput) ToSecuritySettingsPtrOutput() SecuritySettingsPtrOutput {
	return o.ToSecuritySettingsPtrOutputWithContext(context.Background())
}

func (o SecuritySettingsOutput) ToSecuritySettingsPtrOutputWithContext(ctx context.Context) SecuritySettingsPtrOutput {
	return o.ApplyT(func(v SecuritySettings) *SecuritySettings {
		return &v
	}).(SecuritySettingsPtrOutput)
}

// Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
func (o SecuritySettingsOutput) ClientTlsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecuritySettings) *string { return v.ClientTlsPolicy }).(pulumi.StringPtrOutput)
}

// Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
func (o SecuritySettingsOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecuritySettings) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

type SecuritySettingsPtrOutput struct{ *pulumi.OutputState }

func (SecuritySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecuritySettings)(nil)).Elem()
}

func (o SecuritySettingsPtrOutput) ToSecuritySettingsPtrOutput() SecuritySettingsPtrOutput {
	return o
}

func (o SecuritySettingsPtrOutput) ToSecuritySettingsPtrOutputWithContext(ctx context.Context) SecuritySettingsPtrOutput {
	return o
}

func (o SecuritySettingsPtrOutput) Elem() SecuritySettingsOutput {
	return o.ApplyT(func(v *SecuritySettings) SecuritySettings { return *v }).(SecuritySettingsOutput)
}

// Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
func (o SecuritySettingsPtrOutput) ClientTlsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecuritySettings) *string {
		if v == nil {
			return nil
		}
		return v.ClientTlsPolicy
	}).(pulumi.StringPtrOutput)
}

// Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
func (o SecuritySettingsPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecuritySettings) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

// The authentication and authorization settings for a BackendService.
type SecuritySettingsResponse struct {
	// Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
	ClientTlsPolicy string `pulumi:"clientTlsPolicy"`
	// Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
	SubjectAltNames []string `pulumi:"subjectAltNames"`
}

// SecuritySettingsResponseInput is an input type that accepts SecuritySettingsResponseArgs and SecuritySettingsResponseOutput values.
// You can construct a concrete instance of `SecuritySettingsResponseInput` via:
//
//          SecuritySettingsResponseArgs{...}
type SecuritySettingsResponseInput interface {
	pulumi.Input

	ToSecuritySettingsResponseOutput() SecuritySettingsResponseOutput
	ToSecuritySettingsResponseOutputWithContext(context.Context) SecuritySettingsResponseOutput
}

// The authentication and authorization settings for a BackendService.
type SecuritySettingsResponseArgs struct {
	// Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
	ClientTlsPolicy pulumi.StringInput `pulumi:"clientTlsPolicy"`
	// Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
	SubjectAltNames pulumi.StringArrayInput `pulumi:"subjectAltNames"`
}

func (SecuritySettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecuritySettingsResponse)(nil)).Elem()
}

func (i SecuritySettingsResponseArgs) ToSecuritySettingsResponseOutput() SecuritySettingsResponseOutput {
	return i.ToSecuritySettingsResponseOutputWithContext(context.Background())
}

func (i SecuritySettingsResponseArgs) ToSecuritySettingsResponseOutputWithContext(ctx context.Context) SecuritySettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecuritySettingsResponseOutput)
}

func (i SecuritySettingsResponseArgs) ToSecuritySettingsResponsePtrOutput() SecuritySettingsResponsePtrOutput {
	return i.ToSecuritySettingsResponsePtrOutputWithContext(context.Background())
}

func (i SecuritySettingsResponseArgs) ToSecuritySettingsResponsePtrOutputWithContext(ctx context.Context) SecuritySettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecuritySettingsResponseOutput).ToSecuritySettingsResponsePtrOutputWithContext(ctx)
}

// SecuritySettingsResponsePtrInput is an input type that accepts SecuritySettingsResponseArgs, SecuritySettingsResponsePtr and SecuritySettingsResponsePtrOutput values.
// You can construct a concrete instance of `SecuritySettingsResponsePtrInput` via:
//
//          SecuritySettingsResponseArgs{...}
//
//  or:
//
//          nil
type SecuritySettingsResponsePtrInput interface {
	pulumi.Input

	ToSecuritySettingsResponsePtrOutput() SecuritySettingsResponsePtrOutput
	ToSecuritySettingsResponsePtrOutputWithContext(context.Context) SecuritySettingsResponsePtrOutput
}

type securitySettingsResponsePtrType SecuritySettingsResponseArgs

func SecuritySettingsResponsePtr(v *SecuritySettingsResponseArgs) SecuritySettingsResponsePtrInput {
	return (*securitySettingsResponsePtrType)(v)
}

func (*securitySettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecuritySettingsResponse)(nil)).Elem()
}

func (i *securitySettingsResponsePtrType) ToSecuritySettingsResponsePtrOutput() SecuritySettingsResponsePtrOutput {
	return i.ToSecuritySettingsResponsePtrOutputWithContext(context.Background())
}

func (i *securitySettingsResponsePtrType) ToSecuritySettingsResponsePtrOutputWithContext(ctx context.Context) SecuritySettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecuritySettingsResponsePtrOutput)
}

// The authentication and authorization settings for a BackendService.
type SecuritySettingsResponseOutput struct{ *pulumi.OutputState }

func (SecuritySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecuritySettingsResponse)(nil)).Elem()
}

func (o SecuritySettingsResponseOutput) ToSecuritySettingsResponseOutput() SecuritySettingsResponseOutput {
	return o
}

func (o SecuritySettingsResponseOutput) ToSecuritySettingsResponseOutputWithContext(ctx context.Context) SecuritySettingsResponseOutput {
	return o
}

func (o SecuritySettingsResponseOutput) ToSecuritySettingsResponsePtrOutput() SecuritySettingsResponsePtrOutput {
	return o.ToSecuritySettingsResponsePtrOutputWithContext(context.Background())
}

func (o SecuritySettingsResponseOutput) ToSecuritySettingsResponsePtrOutputWithContext(ctx context.Context) SecuritySettingsResponsePtrOutput {
	return o.ApplyT(func(v SecuritySettingsResponse) *SecuritySettingsResponse {
		return &v
	}).(SecuritySettingsResponsePtrOutput)
}

// Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
func (o SecuritySettingsResponseOutput) ClientTlsPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v SecuritySettingsResponse) string { return v.ClientTlsPolicy }).(pulumi.StringOutput)
}

// Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
func (o SecuritySettingsResponseOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecuritySettingsResponse) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

type SecuritySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (SecuritySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecuritySettingsResponse)(nil)).Elem()
}

func (o SecuritySettingsResponsePtrOutput) ToSecuritySettingsResponsePtrOutput() SecuritySettingsResponsePtrOutput {
	return o
}

func (o SecuritySettingsResponsePtrOutput) ToSecuritySettingsResponsePtrOutputWithContext(ctx context.Context) SecuritySettingsResponsePtrOutput {
	return o
}

func (o SecuritySettingsResponsePtrOutput) Elem() SecuritySettingsResponseOutput {
	return o.ApplyT(func(v *SecuritySettingsResponse) SecuritySettingsResponse { return *v }).(SecuritySettingsResponseOutput)
}

// Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
func (o SecuritySettingsResponsePtrOutput) ClientTlsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecuritySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClientTlsPolicy
	}).(pulumi.StringPtrOutput)
}

// Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
func (o SecuritySettingsResponsePtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecuritySettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

type ServerBinding struct {
	Type *string `pulumi:"type"`
}

// ServerBindingInput is an input type that accepts ServerBindingArgs and ServerBindingOutput values.
// You can construct a concrete instance of `ServerBindingInput` via:
//
//          ServerBindingArgs{...}
type ServerBindingInput interface {
	pulumi.Input

	ToServerBindingOutput() ServerBindingOutput
	ToServerBindingOutputWithContext(context.Context) ServerBindingOutput
}

type ServerBindingArgs struct {
	Type *ServerBindingType `pulumi:"type"`
}

func (ServerBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerBinding)(nil)).Elem()
}

func (i ServerBindingArgs) ToServerBindingOutput() ServerBindingOutput {
	return i.ToServerBindingOutputWithContext(context.Background())
}

func (i ServerBindingArgs) ToServerBindingOutputWithContext(ctx context.Context) ServerBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBindingOutput)
}

func (i ServerBindingArgs) ToServerBindingPtrOutput() ServerBindingPtrOutput {
	return i.ToServerBindingPtrOutputWithContext(context.Background())
}

func (i ServerBindingArgs) ToServerBindingPtrOutputWithContext(ctx context.Context) ServerBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBindingOutput).ToServerBindingPtrOutputWithContext(ctx)
}

// ServerBindingPtrInput is an input type that accepts ServerBindingArgs, ServerBindingPtr and ServerBindingPtrOutput values.
// You can construct a concrete instance of `ServerBindingPtrInput` via:
//
//          ServerBindingArgs{...}
//
//  or:
//
//          nil
type ServerBindingPtrInput interface {
	pulumi.Input

	ToServerBindingPtrOutput() ServerBindingPtrOutput
	ToServerBindingPtrOutputWithContext(context.Context) ServerBindingPtrOutput
}

type serverBindingPtrType ServerBindingArgs

func ServerBindingPtr(v *ServerBindingArgs) ServerBindingPtrInput {
	return (*serverBindingPtrType)(v)
}

func (*serverBindingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerBinding)(nil)).Elem()
}

func (i *serverBindingPtrType) ToServerBindingPtrOutput() ServerBindingPtrOutput {
	return i.ToServerBindingPtrOutputWithContext(context.Background())
}

func (i *serverBindingPtrType) ToServerBindingPtrOutputWithContext(ctx context.Context) ServerBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBindingPtrOutput)
}

type ServerBindingOutput struct{ *pulumi.OutputState }

func (ServerBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerBinding)(nil)).Elem()
}

func (o ServerBindingOutput) ToServerBindingOutput() ServerBindingOutput {
	return o
}

func (o ServerBindingOutput) ToServerBindingOutputWithContext(ctx context.Context) ServerBindingOutput {
	return o
}

func (o ServerBindingOutput) ToServerBindingPtrOutput() ServerBindingPtrOutput {
	return o.ToServerBindingPtrOutputWithContext(context.Background())
}

func (o ServerBindingOutput) ToServerBindingPtrOutputWithContext(ctx context.Context) ServerBindingPtrOutput {
	return o.ApplyT(func(v ServerBinding) *ServerBinding {
		return &v
	}).(ServerBindingPtrOutput)
}
func (o ServerBindingOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerBinding) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ServerBindingPtrOutput struct{ *pulumi.OutputState }

func (ServerBindingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerBinding)(nil)).Elem()
}

func (o ServerBindingPtrOutput) ToServerBindingPtrOutput() ServerBindingPtrOutput {
	return o
}

func (o ServerBindingPtrOutput) ToServerBindingPtrOutputWithContext(ctx context.Context) ServerBindingPtrOutput {
	return o
}

func (o ServerBindingPtrOutput) Elem() ServerBindingOutput {
	return o.ApplyT(func(v *ServerBinding) ServerBinding { return *v }).(ServerBindingOutput)
}

func (o ServerBindingPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerBinding) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ServerBindingResponse struct {
	Type string `pulumi:"type"`
}

// ServerBindingResponseInput is an input type that accepts ServerBindingResponseArgs and ServerBindingResponseOutput values.
// You can construct a concrete instance of `ServerBindingResponseInput` via:
//
//          ServerBindingResponseArgs{...}
type ServerBindingResponseInput interface {
	pulumi.Input

	ToServerBindingResponseOutput() ServerBindingResponseOutput
	ToServerBindingResponseOutputWithContext(context.Context) ServerBindingResponseOutput
}

type ServerBindingResponseArgs struct {
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServerBindingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerBindingResponse)(nil)).Elem()
}

func (i ServerBindingResponseArgs) ToServerBindingResponseOutput() ServerBindingResponseOutput {
	return i.ToServerBindingResponseOutputWithContext(context.Background())
}

func (i ServerBindingResponseArgs) ToServerBindingResponseOutputWithContext(ctx context.Context) ServerBindingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBindingResponseOutput)
}

func (i ServerBindingResponseArgs) ToServerBindingResponsePtrOutput() ServerBindingResponsePtrOutput {
	return i.ToServerBindingResponsePtrOutputWithContext(context.Background())
}

func (i ServerBindingResponseArgs) ToServerBindingResponsePtrOutputWithContext(ctx context.Context) ServerBindingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBindingResponseOutput).ToServerBindingResponsePtrOutputWithContext(ctx)
}

// ServerBindingResponsePtrInput is an input type that accepts ServerBindingResponseArgs, ServerBindingResponsePtr and ServerBindingResponsePtrOutput values.
// You can construct a concrete instance of `ServerBindingResponsePtrInput` via:
//
//          ServerBindingResponseArgs{...}
//
//  or:
//
//          nil
type ServerBindingResponsePtrInput interface {
	pulumi.Input

	ToServerBindingResponsePtrOutput() ServerBindingResponsePtrOutput
	ToServerBindingResponsePtrOutputWithContext(context.Context) ServerBindingResponsePtrOutput
}

type serverBindingResponsePtrType ServerBindingResponseArgs

func ServerBindingResponsePtr(v *ServerBindingResponseArgs) ServerBindingResponsePtrInput {
	return (*serverBindingResponsePtrType)(v)
}

func (*serverBindingResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerBindingResponse)(nil)).Elem()
}

func (i *serverBindingResponsePtrType) ToServerBindingResponsePtrOutput() ServerBindingResponsePtrOutput {
	return i.ToServerBindingResponsePtrOutputWithContext(context.Background())
}

func (i *serverBindingResponsePtrType) ToServerBindingResponsePtrOutputWithContext(ctx context.Context) ServerBindingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBindingResponsePtrOutput)
}

type ServerBindingResponseOutput struct{ *pulumi.OutputState }

func (ServerBindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerBindingResponse)(nil)).Elem()
}

func (o ServerBindingResponseOutput) ToServerBindingResponseOutput() ServerBindingResponseOutput {
	return o
}

func (o ServerBindingResponseOutput) ToServerBindingResponseOutputWithContext(ctx context.Context) ServerBindingResponseOutput {
	return o
}

func (o ServerBindingResponseOutput) ToServerBindingResponsePtrOutput() ServerBindingResponsePtrOutput {
	return o.ToServerBindingResponsePtrOutputWithContext(context.Background())
}

func (o ServerBindingResponseOutput) ToServerBindingResponsePtrOutputWithContext(ctx context.Context) ServerBindingResponsePtrOutput {
	return o.ApplyT(func(v ServerBindingResponse) *ServerBindingResponse {
		return &v
	}).(ServerBindingResponsePtrOutput)
}
func (o ServerBindingResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServerBindingResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ServerBindingResponsePtrOutput struct{ *pulumi.OutputState }

func (ServerBindingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerBindingResponse)(nil)).Elem()
}

func (o ServerBindingResponsePtrOutput) ToServerBindingResponsePtrOutput() ServerBindingResponsePtrOutput {
	return o
}

func (o ServerBindingResponsePtrOutput) ToServerBindingResponsePtrOutputWithContext(ctx context.Context) ServerBindingResponsePtrOutput {
	return o
}

func (o ServerBindingResponsePtrOutput) Elem() ServerBindingResponseOutput {
	return o.ApplyT(func(v *ServerBindingResponse) ServerBindingResponse { return *v }).(ServerBindingResponseOutput)
}

func (o ServerBindingResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerBindingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// A service account.
type ServiceAccount struct {
	// Email address of the service account.
	Email *string `pulumi:"email"`
	// The list of scopes to be made available for this service account.
	Scopes []string `pulumi:"scopes"`
}

// ServiceAccountInput is an input type that accepts ServiceAccountArgs and ServiceAccountOutput values.
// You can construct a concrete instance of `ServiceAccountInput` via:
//
//          ServiceAccountArgs{...}
type ServiceAccountInput interface {
	pulumi.Input

	ToServiceAccountOutput() ServiceAccountOutput
	ToServiceAccountOutputWithContext(context.Context) ServiceAccountOutput
}

// A service account.
type ServiceAccountArgs struct {
	// Email address of the service account.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// The list of scopes to be made available for this service account.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (ServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccount)(nil)).Elem()
}

func (i ServiceAccountArgs) ToServiceAccountOutput() ServiceAccountOutput {
	return i.ToServiceAccountOutputWithContext(context.Background())
}

func (i ServiceAccountArgs) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountOutput)
}

// ServiceAccountArrayInput is an input type that accepts ServiceAccountArray and ServiceAccountArrayOutput values.
// You can construct a concrete instance of `ServiceAccountArrayInput` via:
//
//          ServiceAccountArray{ ServiceAccountArgs{...} }
type ServiceAccountArrayInput interface {
	pulumi.Input

	ToServiceAccountArrayOutput() ServiceAccountArrayOutput
	ToServiceAccountArrayOutputWithContext(context.Context) ServiceAccountArrayOutput
}

type ServiceAccountArray []ServiceAccountInput

func (ServiceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccount)(nil)).Elem()
}

func (i ServiceAccountArray) ToServiceAccountArrayOutput() ServiceAccountArrayOutput {
	return i.ToServiceAccountArrayOutputWithContext(context.Background())
}

func (i ServiceAccountArray) ToServiceAccountArrayOutputWithContext(ctx context.Context) ServiceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountArrayOutput)
}

// A service account.
type ServiceAccountOutput struct{ *pulumi.OutputState }

func (ServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountOutput) ToServiceAccountOutput() ServiceAccountOutput {
	return o
}

func (o ServiceAccountOutput) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return o
}

// Email address of the service account.
func (o ServiceAccountOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccount) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The list of scopes to be made available for this service account.
func (o ServiceAccountOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAccount) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type ServiceAccountArrayOutput struct{ *pulumi.OutputState }

func (ServiceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountArrayOutput) ToServiceAccountArrayOutput() ServiceAccountArrayOutput {
	return o
}

func (o ServiceAccountArrayOutput) ToServiceAccountArrayOutputWithContext(ctx context.Context) ServiceAccountArrayOutput {
	return o
}

func (o ServiceAccountArrayOutput) Index(i pulumi.IntInput) ServiceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAccount {
		return vs[0].([]ServiceAccount)[vs[1].(int)]
	}).(ServiceAccountOutput)
}

// A service account.
type ServiceAccountResponse struct {
	// Email address of the service account.
	Email string `pulumi:"email"`
	// The list of scopes to be made available for this service account.
	Scopes []string `pulumi:"scopes"`
}

// ServiceAccountResponseInput is an input type that accepts ServiceAccountResponseArgs and ServiceAccountResponseOutput values.
// You can construct a concrete instance of `ServiceAccountResponseInput` via:
//
//          ServiceAccountResponseArgs{...}
type ServiceAccountResponseInput interface {
	pulumi.Input

	ToServiceAccountResponseOutput() ServiceAccountResponseOutput
	ToServiceAccountResponseOutputWithContext(context.Context) ServiceAccountResponseOutput
}

// A service account.
type ServiceAccountResponseArgs struct {
	// Email address of the service account.
	Email pulumi.StringInput `pulumi:"email"`
	// The list of scopes to be made available for this service account.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (ServiceAccountResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountResponse)(nil)).Elem()
}

func (i ServiceAccountResponseArgs) ToServiceAccountResponseOutput() ServiceAccountResponseOutput {
	return i.ToServiceAccountResponseOutputWithContext(context.Background())
}

func (i ServiceAccountResponseArgs) ToServiceAccountResponseOutputWithContext(ctx context.Context) ServiceAccountResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountResponseOutput)
}

// ServiceAccountResponseArrayInput is an input type that accepts ServiceAccountResponseArray and ServiceAccountResponseArrayOutput values.
// You can construct a concrete instance of `ServiceAccountResponseArrayInput` via:
//
//          ServiceAccountResponseArray{ ServiceAccountResponseArgs{...} }
type ServiceAccountResponseArrayInput interface {
	pulumi.Input

	ToServiceAccountResponseArrayOutput() ServiceAccountResponseArrayOutput
	ToServiceAccountResponseArrayOutputWithContext(context.Context) ServiceAccountResponseArrayOutput
}

type ServiceAccountResponseArray []ServiceAccountResponseInput

func (ServiceAccountResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccountResponse)(nil)).Elem()
}

func (i ServiceAccountResponseArray) ToServiceAccountResponseArrayOutput() ServiceAccountResponseArrayOutput {
	return i.ToServiceAccountResponseArrayOutputWithContext(context.Background())
}

func (i ServiceAccountResponseArray) ToServiceAccountResponseArrayOutputWithContext(ctx context.Context) ServiceAccountResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountResponseArrayOutput)
}

// A service account.
type ServiceAccountResponseOutput struct{ *pulumi.OutputState }

func (ServiceAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountResponse)(nil)).Elem()
}

func (o ServiceAccountResponseOutput) ToServiceAccountResponseOutput() ServiceAccountResponseOutput {
	return o
}

func (o ServiceAccountResponseOutput) ToServiceAccountResponseOutputWithContext(ctx context.Context) ServiceAccountResponseOutput {
	return o
}

// Email address of the service account.
func (o ServiceAccountResponseOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAccountResponse) string { return v.Email }).(pulumi.StringOutput)
}

// The list of scopes to be made available for this service account.
func (o ServiceAccountResponseOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAccountResponse) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type ServiceAccountResponseArrayOutput struct{ *pulumi.OutputState }

func (ServiceAccountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccountResponse)(nil)).Elem()
}

func (o ServiceAccountResponseArrayOutput) ToServiceAccountResponseArrayOutput() ServiceAccountResponseArrayOutput {
	return o
}

func (o ServiceAccountResponseArrayOutput) ToServiceAccountResponseArrayOutputWithContext(ctx context.Context) ServiceAccountResponseArrayOutput {
	return o
}

func (o ServiceAccountResponseArrayOutput) Index(i pulumi.IntInput) ServiceAccountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAccountResponse {
		return vs[0].([]ServiceAccountResponse)[vs[1].(int)]
	}).(ServiceAccountResponseOutput)
}

// [Output Only] A connection connected to this service attachment.
type ServiceAttachmentConnectedEndpointResponse struct {
	// The url of a connected endpoint.
	Endpoint string `pulumi:"endpoint"`
	// The PSC connection id of the connected endpoint.
	PscConnectionId string `pulumi:"pscConnectionId"`
	// The status of a connected endpoint to this service attachment.
	Status string `pulumi:"status"`
}

// ServiceAttachmentConnectedEndpointResponseInput is an input type that accepts ServiceAttachmentConnectedEndpointResponseArgs and ServiceAttachmentConnectedEndpointResponseOutput values.
// You can construct a concrete instance of `ServiceAttachmentConnectedEndpointResponseInput` via:
//
//          ServiceAttachmentConnectedEndpointResponseArgs{...}
type ServiceAttachmentConnectedEndpointResponseInput interface {
	pulumi.Input

	ToServiceAttachmentConnectedEndpointResponseOutput() ServiceAttachmentConnectedEndpointResponseOutput
	ToServiceAttachmentConnectedEndpointResponseOutputWithContext(context.Context) ServiceAttachmentConnectedEndpointResponseOutput
}

// [Output Only] A connection connected to this service attachment.
type ServiceAttachmentConnectedEndpointResponseArgs struct {
	// The url of a connected endpoint.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The PSC connection id of the connected endpoint.
	PscConnectionId pulumi.StringInput `pulumi:"pscConnectionId"`
	// The status of a connected endpoint to this service attachment.
	Status pulumi.StringInput `pulumi:"status"`
}

func (ServiceAttachmentConnectedEndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAttachmentConnectedEndpointResponse)(nil)).Elem()
}

func (i ServiceAttachmentConnectedEndpointResponseArgs) ToServiceAttachmentConnectedEndpointResponseOutput() ServiceAttachmentConnectedEndpointResponseOutput {
	return i.ToServiceAttachmentConnectedEndpointResponseOutputWithContext(context.Background())
}

func (i ServiceAttachmentConnectedEndpointResponseArgs) ToServiceAttachmentConnectedEndpointResponseOutputWithContext(ctx context.Context) ServiceAttachmentConnectedEndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAttachmentConnectedEndpointResponseOutput)
}

// ServiceAttachmentConnectedEndpointResponseArrayInput is an input type that accepts ServiceAttachmentConnectedEndpointResponseArray and ServiceAttachmentConnectedEndpointResponseArrayOutput values.
// You can construct a concrete instance of `ServiceAttachmentConnectedEndpointResponseArrayInput` via:
//
//          ServiceAttachmentConnectedEndpointResponseArray{ ServiceAttachmentConnectedEndpointResponseArgs{...} }
type ServiceAttachmentConnectedEndpointResponseArrayInput interface {
	pulumi.Input

	ToServiceAttachmentConnectedEndpointResponseArrayOutput() ServiceAttachmentConnectedEndpointResponseArrayOutput
	ToServiceAttachmentConnectedEndpointResponseArrayOutputWithContext(context.Context) ServiceAttachmentConnectedEndpointResponseArrayOutput
}

type ServiceAttachmentConnectedEndpointResponseArray []ServiceAttachmentConnectedEndpointResponseInput

func (ServiceAttachmentConnectedEndpointResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAttachmentConnectedEndpointResponse)(nil)).Elem()
}

func (i ServiceAttachmentConnectedEndpointResponseArray) ToServiceAttachmentConnectedEndpointResponseArrayOutput() ServiceAttachmentConnectedEndpointResponseArrayOutput {
	return i.ToServiceAttachmentConnectedEndpointResponseArrayOutputWithContext(context.Background())
}

func (i ServiceAttachmentConnectedEndpointResponseArray) ToServiceAttachmentConnectedEndpointResponseArrayOutputWithContext(ctx context.Context) ServiceAttachmentConnectedEndpointResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAttachmentConnectedEndpointResponseArrayOutput)
}

// [Output Only] A connection connected to this service attachment.
type ServiceAttachmentConnectedEndpointResponseOutput struct{ *pulumi.OutputState }

func (ServiceAttachmentConnectedEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAttachmentConnectedEndpointResponse)(nil)).Elem()
}

func (o ServiceAttachmentConnectedEndpointResponseOutput) ToServiceAttachmentConnectedEndpointResponseOutput() ServiceAttachmentConnectedEndpointResponseOutput {
	return o
}

func (o ServiceAttachmentConnectedEndpointResponseOutput) ToServiceAttachmentConnectedEndpointResponseOutputWithContext(ctx context.Context) ServiceAttachmentConnectedEndpointResponseOutput {
	return o
}

// The url of a connected endpoint.
func (o ServiceAttachmentConnectedEndpointResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAttachmentConnectedEndpointResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The PSC connection id of the connected endpoint.
func (o ServiceAttachmentConnectedEndpointResponseOutput) PscConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAttachmentConnectedEndpointResponse) string { return v.PscConnectionId }).(pulumi.StringOutput)
}

// The status of a connected endpoint to this service attachment.
func (o ServiceAttachmentConnectedEndpointResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAttachmentConnectedEndpointResponse) string { return v.Status }).(pulumi.StringOutput)
}

type ServiceAttachmentConnectedEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (ServiceAttachmentConnectedEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAttachmentConnectedEndpointResponse)(nil)).Elem()
}

func (o ServiceAttachmentConnectedEndpointResponseArrayOutput) ToServiceAttachmentConnectedEndpointResponseArrayOutput() ServiceAttachmentConnectedEndpointResponseArrayOutput {
	return o
}

func (o ServiceAttachmentConnectedEndpointResponseArrayOutput) ToServiceAttachmentConnectedEndpointResponseArrayOutputWithContext(ctx context.Context) ServiceAttachmentConnectedEndpointResponseArrayOutput {
	return o
}

func (o ServiceAttachmentConnectedEndpointResponseArrayOutput) Index(i pulumi.IntInput) ServiceAttachmentConnectedEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAttachmentConnectedEndpointResponse {
		return vs[0].([]ServiceAttachmentConnectedEndpointResponse)[vs[1].(int)]
	}).(ServiceAttachmentConnectedEndpointResponseOutput)
}

type ServiceAttachmentConsumerProjectLimit struct {
	// The value of the limit to set.
	ConnectionLimit *int `pulumi:"connectionLimit"`
	// The project id or number for the project to set the limit for.
	ProjectIdOrNum *string `pulumi:"projectIdOrNum"`
}

// ServiceAttachmentConsumerProjectLimitInput is an input type that accepts ServiceAttachmentConsumerProjectLimitArgs and ServiceAttachmentConsumerProjectLimitOutput values.
// You can construct a concrete instance of `ServiceAttachmentConsumerProjectLimitInput` via:
//
//          ServiceAttachmentConsumerProjectLimitArgs{...}
type ServiceAttachmentConsumerProjectLimitInput interface {
	pulumi.Input

	ToServiceAttachmentConsumerProjectLimitOutput() ServiceAttachmentConsumerProjectLimitOutput
	ToServiceAttachmentConsumerProjectLimitOutputWithContext(context.Context) ServiceAttachmentConsumerProjectLimitOutput
}

type ServiceAttachmentConsumerProjectLimitArgs struct {
	// The value of the limit to set.
	ConnectionLimit pulumi.IntPtrInput `pulumi:"connectionLimit"`
	// The project id or number for the project to set the limit for.
	ProjectIdOrNum pulumi.StringPtrInput `pulumi:"projectIdOrNum"`
}

func (ServiceAttachmentConsumerProjectLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAttachmentConsumerProjectLimit)(nil)).Elem()
}

func (i ServiceAttachmentConsumerProjectLimitArgs) ToServiceAttachmentConsumerProjectLimitOutput() ServiceAttachmentConsumerProjectLimitOutput {
	return i.ToServiceAttachmentConsumerProjectLimitOutputWithContext(context.Background())
}

func (i ServiceAttachmentConsumerProjectLimitArgs) ToServiceAttachmentConsumerProjectLimitOutputWithContext(ctx context.Context) ServiceAttachmentConsumerProjectLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAttachmentConsumerProjectLimitOutput)
}

// ServiceAttachmentConsumerProjectLimitArrayInput is an input type that accepts ServiceAttachmentConsumerProjectLimitArray and ServiceAttachmentConsumerProjectLimitArrayOutput values.
// You can construct a concrete instance of `ServiceAttachmentConsumerProjectLimitArrayInput` via:
//
//          ServiceAttachmentConsumerProjectLimitArray{ ServiceAttachmentConsumerProjectLimitArgs{...} }
type ServiceAttachmentConsumerProjectLimitArrayInput interface {
	pulumi.Input

	ToServiceAttachmentConsumerProjectLimitArrayOutput() ServiceAttachmentConsumerProjectLimitArrayOutput
	ToServiceAttachmentConsumerProjectLimitArrayOutputWithContext(context.Context) ServiceAttachmentConsumerProjectLimitArrayOutput
}

type ServiceAttachmentConsumerProjectLimitArray []ServiceAttachmentConsumerProjectLimitInput

func (ServiceAttachmentConsumerProjectLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAttachmentConsumerProjectLimit)(nil)).Elem()
}

func (i ServiceAttachmentConsumerProjectLimitArray) ToServiceAttachmentConsumerProjectLimitArrayOutput() ServiceAttachmentConsumerProjectLimitArrayOutput {
	return i.ToServiceAttachmentConsumerProjectLimitArrayOutputWithContext(context.Background())
}

func (i ServiceAttachmentConsumerProjectLimitArray) ToServiceAttachmentConsumerProjectLimitArrayOutputWithContext(ctx context.Context) ServiceAttachmentConsumerProjectLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAttachmentConsumerProjectLimitArrayOutput)
}

type ServiceAttachmentConsumerProjectLimitOutput struct{ *pulumi.OutputState }

func (ServiceAttachmentConsumerProjectLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAttachmentConsumerProjectLimit)(nil)).Elem()
}

func (o ServiceAttachmentConsumerProjectLimitOutput) ToServiceAttachmentConsumerProjectLimitOutput() ServiceAttachmentConsumerProjectLimitOutput {
	return o
}

func (o ServiceAttachmentConsumerProjectLimitOutput) ToServiceAttachmentConsumerProjectLimitOutputWithContext(ctx context.Context) ServiceAttachmentConsumerProjectLimitOutput {
	return o
}

// The value of the limit to set.
func (o ServiceAttachmentConsumerProjectLimitOutput) ConnectionLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceAttachmentConsumerProjectLimit) *int { return v.ConnectionLimit }).(pulumi.IntPtrOutput)
}

// The project id or number for the project to set the limit for.
func (o ServiceAttachmentConsumerProjectLimitOutput) ProjectIdOrNum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAttachmentConsumerProjectLimit) *string { return v.ProjectIdOrNum }).(pulumi.StringPtrOutput)
}

type ServiceAttachmentConsumerProjectLimitArrayOutput struct{ *pulumi.OutputState }

func (ServiceAttachmentConsumerProjectLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAttachmentConsumerProjectLimit)(nil)).Elem()
}

func (o ServiceAttachmentConsumerProjectLimitArrayOutput) ToServiceAttachmentConsumerProjectLimitArrayOutput() ServiceAttachmentConsumerProjectLimitArrayOutput {
	return o
}

func (o ServiceAttachmentConsumerProjectLimitArrayOutput) ToServiceAttachmentConsumerProjectLimitArrayOutputWithContext(ctx context.Context) ServiceAttachmentConsumerProjectLimitArrayOutput {
	return o
}

func (o ServiceAttachmentConsumerProjectLimitArrayOutput) Index(i pulumi.IntInput) ServiceAttachmentConsumerProjectLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAttachmentConsumerProjectLimit {
		return vs[0].([]ServiceAttachmentConsumerProjectLimit)[vs[1].(int)]
	}).(ServiceAttachmentConsumerProjectLimitOutput)
}

type ServiceAttachmentConsumerProjectLimitResponse struct {
	// The value of the limit to set.
	ConnectionLimit int `pulumi:"connectionLimit"`
	// The project id or number for the project to set the limit for.
	ProjectIdOrNum string `pulumi:"projectIdOrNum"`
}

// ServiceAttachmentConsumerProjectLimitResponseInput is an input type that accepts ServiceAttachmentConsumerProjectLimitResponseArgs and ServiceAttachmentConsumerProjectLimitResponseOutput values.
// You can construct a concrete instance of `ServiceAttachmentConsumerProjectLimitResponseInput` via:
//
//          ServiceAttachmentConsumerProjectLimitResponseArgs{...}
type ServiceAttachmentConsumerProjectLimitResponseInput interface {
	pulumi.Input

	ToServiceAttachmentConsumerProjectLimitResponseOutput() ServiceAttachmentConsumerProjectLimitResponseOutput
	ToServiceAttachmentConsumerProjectLimitResponseOutputWithContext(context.Context) ServiceAttachmentConsumerProjectLimitResponseOutput
}

type ServiceAttachmentConsumerProjectLimitResponseArgs struct {
	// The value of the limit to set.
	ConnectionLimit pulumi.IntInput `pulumi:"connectionLimit"`
	// The project id or number for the project to set the limit for.
	ProjectIdOrNum pulumi.StringInput `pulumi:"projectIdOrNum"`
}

func (ServiceAttachmentConsumerProjectLimitResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAttachmentConsumerProjectLimitResponse)(nil)).Elem()
}

func (i ServiceAttachmentConsumerProjectLimitResponseArgs) ToServiceAttachmentConsumerProjectLimitResponseOutput() ServiceAttachmentConsumerProjectLimitResponseOutput {
	return i.ToServiceAttachmentConsumerProjectLimitResponseOutputWithContext(context.Background())
}

func (i ServiceAttachmentConsumerProjectLimitResponseArgs) ToServiceAttachmentConsumerProjectLimitResponseOutputWithContext(ctx context.Context) ServiceAttachmentConsumerProjectLimitResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAttachmentConsumerProjectLimitResponseOutput)
}

// ServiceAttachmentConsumerProjectLimitResponseArrayInput is an input type that accepts ServiceAttachmentConsumerProjectLimitResponseArray and ServiceAttachmentConsumerProjectLimitResponseArrayOutput values.
// You can construct a concrete instance of `ServiceAttachmentConsumerProjectLimitResponseArrayInput` via:
//
//          ServiceAttachmentConsumerProjectLimitResponseArray{ ServiceAttachmentConsumerProjectLimitResponseArgs{...} }
type ServiceAttachmentConsumerProjectLimitResponseArrayInput interface {
	pulumi.Input

	ToServiceAttachmentConsumerProjectLimitResponseArrayOutput() ServiceAttachmentConsumerProjectLimitResponseArrayOutput
	ToServiceAttachmentConsumerProjectLimitResponseArrayOutputWithContext(context.Context) ServiceAttachmentConsumerProjectLimitResponseArrayOutput
}

type ServiceAttachmentConsumerProjectLimitResponseArray []ServiceAttachmentConsumerProjectLimitResponseInput

func (ServiceAttachmentConsumerProjectLimitResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAttachmentConsumerProjectLimitResponse)(nil)).Elem()
}

func (i ServiceAttachmentConsumerProjectLimitResponseArray) ToServiceAttachmentConsumerProjectLimitResponseArrayOutput() ServiceAttachmentConsumerProjectLimitResponseArrayOutput {
	return i.ToServiceAttachmentConsumerProjectLimitResponseArrayOutputWithContext(context.Background())
}

func (i ServiceAttachmentConsumerProjectLimitResponseArray) ToServiceAttachmentConsumerProjectLimitResponseArrayOutputWithContext(ctx context.Context) ServiceAttachmentConsumerProjectLimitResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAttachmentConsumerProjectLimitResponseArrayOutput)
}

type ServiceAttachmentConsumerProjectLimitResponseOutput struct{ *pulumi.OutputState }

func (ServiceAttachmentConsumerProjectLimitResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAttachmentConsumerProjectLimitResponse)(nil)).Elem()
}

func (o ServiceAttachmentConsumerProjectLimitResponseOutput) ToServiceAttachmentConsumerProjectLimitResponseOutput() ServiceAttachmentConsumerProjectLimitResponseOutput {
	return o
}

func (o ServiceAttachmentConsumerProjectLimitResponseOutput) ToServiceAttachmentConsumerProjectLimitResponseOutputWithContext(ctx context.Context) ServiceAttachmentConsumerProjectLimitResponseOutput {
	return o
}

// The value of the limit to set.
func (o ServiceAttachmentConsumerProjectLimitResponseOutput) ConnectionLimit() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceAttachmentConsumerProjectLimitResponse) int { return v.ConnectionLimit }).(pulumi.IntOutput)
}

// The project id or number for the project to set the limit for.
func (o ServiceAttachmentConsumerProjectLimitResponseOutput) ProjectIdOrNum() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAttachmentConsumerProjectLimitResponse) string { return v.ProjectIdOrNum }).(pulumi.StringOutput)
}

type ServiceAttachmentConsumerProjectLimitResponseArrayOutput struct{ *pulumi.OutputState }

func (ServiceAttachmentConsumerProjectLimitResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAttachmentConsumerProjectLimitResponse)(nil)).Elem()
}

func (o ServiceAttachmentConsumerProjectLimitResponseArrayOutput) ToServiceAttachmentConsumerProjectLimitResponseArrayOutput() ServiceAttachmentConsumerProjectLimitResponseArrayOutput {
	return o
}

func (o ServiceAttachmentConsumerProjectLimitResponseArrayOutput) ToServiceAttachmentConsumerProjectLimitResponseArrayOutputWithContext(ctx context.Context) ServiceAttachmentConsumerProjectLimitResponseArrayOutput {
	return o
}

func (o ServiceAttachmentConsumerProjectLimitResponseArrayOutput) Index(i pulumi.IntInput) ServiceAttachmentConsumerProjectLimitResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAttachmentConsumerProjectLimitResponse {
		return vs[0].([]ServiceAttachmentConsumerProjectLimitResponse)[vs[1].(int)]
	}).(ServiceAttachmentConsumerProjectLimitResponseOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfig struct {
	// Defines whether the instance has integrity monitoring enabled. Enabled by default.
	EnableIntegrityMonitoring *bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Disabled by default.
	EnableSecureBoot *bool `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm *bool `pulumi:"enableVtpm"`
}

// ShieldedInstanceConfigInput is an input type that accepts ShieldedInstanceConfigArgs and ShieldedInstanceConfigOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigInput` via:
//
//          ShieldedInstanceConfigArgs{...}
type ShieldedInstanceConfigInput interface {
	pulumi.Input

	ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput
	ToShieldedInstanceConfigOutputWithContext(context.Context) ShieldedInstanceConfigOutput
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigArgs struct {
	// Defines whether the instance has integrity monitoring enabled. Enabled by default.
	EnableIntegrityMonitoring pulumi.BoolPtrInput `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Disabled by default.
	EnableSecureBoot pulumi.BoolPtrInput `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm pulumi.BoolPtrInput `pulumi:"enableVtpm"`
}

func (ShieldedInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return i.ToShieldedInstanceConfigOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput)
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput).ToShieldedInstanceConfigPtrOutputWithContext(ctx)
}

// ShieldedInstanceConfigPtrInput is an input type that accepts ShieldedInstanceConfigArgs, ShieldedInstanceConfigPtr and ShieldedInstanceConfigPtrOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigPtrInput` via:
//
//          ShieldedInstanceConfigArgs{...}
//
//  or:
//
//          nil
type ShieldedInstanceConfigPtrInput interface {
	pulumi.Input

	ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput
	ToShieldedInstanceConfigPtrOutputWithContext(context.Context) ShieldedInstanceConfigPtrOutput
}

type shieldedInstanceConfigPtrType ShieldedInstanceConfigArgs

func ShieldedInstanceConfigPtr(v *ShieldedInstanceConfigArgs) ShieldedInstanceConfigPtrInput {
	return (*shieldedInstanceConfigPtrType)(v)
}

func (*shieldedInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigPtrOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *ShieldedInstanceConfig {
		return &v
	}).(ShieldedInstanceConfigPtrOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enabled by default.
func (o ShieldedInstanceConfigOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Disabled by default.
func (o ShieldedInstanceConfigOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableVtpm }).(pulumi.BoolPtrOutput)
}

type ShieldedInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) Elem() ShieldedInstanceConfigOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) ShieldedInstanceConfig { return *v }).(ShieldedInstanceConfigOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enabled by default.
func (o ShieldedInstanceConfigPtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Disabled by default.
func (o ShieldedInstanceConfigPtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigPtrOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVtpm
	}).(pulumi.BoolPtrOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigResponse struct {
	// Defines whether the instance has integrity monitoring enabled. Enabled by default.
	EnableIntegrityMonitoring bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Disabled by default.
	EnableSecureBoot bool `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm bool `pulumi:"enableVtpm"`
}

// ShieldedInstanceConfigResponseInput is an input type that accepts ShieldedInstanceConfigResponseArgs and ShieldedInstanceConfigResponseOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigResponseInput` via:
//
//          ShieldedInstanceConfigResponseArgs{...}
type ShieldedInstanceConfigResponseInput interface {
	pulumi.Input

	ToShieldedInstanceConfigResponseOutput() ShieldedInstanceConfigResponseOutput
	ToShieldedInstanceConfigResponseOutputWithContext(context.Context) ShieldedInstanceConfigResponseOutput
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigResponseArgs struct {
	// Defines whether the instance has integrity monitoring enabled. Enabled by default.
	EnableIntegrityMonitoring pulumi.BoolInput `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Disabled by default.
	EnableSecureBoot pulumi.BoolInput `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm pulumi.BoolInput `pulumi:"enableVtpm"`
}

func (ShieldedInstanceConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (i ShieldedInstanceConfigResponseArgs) ToShieldedInstanceConfigResponseOutput() ShieldedInstanceConfigResponseOutput {
	return i.ToShieldedInstanceConfigResponseOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigResponseArgs) ToShieldedInstanceConfigResponseOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigResponseOutput)
}

func (i ShieldedInstanceConfigResponseArgs) ToShieldedInstanceConfigResponsePtrOutput() ShieldedInstanceConfigResponsePtrOutput {
	return i.ToShieldedInstanceConfigResponsePtrOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigResponseArgs) ToShieldedInstanceConfigResponsePtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigResponseOutput).ToShieldedInstanceConfigResponsePtrOutputWithContext(ctx)
}

// ShieldedInstanceConfigResponsePtrInput is an input type that accepts ShieldedInstanceConfigResponseArgs, ShieldedInstanceConfigResponsePtr and ShieldedInstanceConfigResponsePtrOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigResponsePtrInput` via:
//
//          ShieldedInstanceConfigResponseArgs{...}
//
//  or:
//
//          nil
type ShieldedInstanceConfigResponsePtrInput interface {
	pulumi.Input

	ToShieldedInstanceConfigResponsePtrOutput() ShieldedInstanceConfigResponsePtrOutput
	ToShieldedInstanceConfigResponsePtrOutputWithContext(context.Context) ShieldedInstanceConfigResponsePtrOutput
}

type shieldedInstanceConfigResponsePtrType ShieldedInstanceConfigResponseArgs

func ShieldedInstanceConfigResponsePtr(v *ShieldedInstanceConfigResponseArgs) ShieldedInstanceConfigResponsePtrInput {
	return (*shieldedInstanceConfigResponsePtrType)(v)
}

func (*shieldedInstanceConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (i *shieldedInstanceConfigResponsePtrType) ToShieldedInstanceConfigResponsePtrOutput() ShieldedInstanceConfigResponsePtrOutput {
	return i.ToShieldedInstanceConfigResponsePtrOutputWithContext(context.Background())
}

func (i *shieldedInstanceConfigResponsePtrType) ToShieldedInstanceConfigResponsePtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigResponsePtrOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigResponseOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponseOutput() ShieldedInstanceConfigResponseOutput {
	return o
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponseOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponseOutput {
	return o
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponsePtrOutput() ShieldedInstanceConfigResponsePtrOutput {
	return o.ToShieldedInstanceConfigResponsePtrOutputWithContext(context.Background())
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponsePtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponsePtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) *ShieldedInstanceConfigResponse {
		return &v
	}).(ShieldedInstanceConfigResponsePtrOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enabled by default.
func (o ShieldedInstanceConfigResponseOutput) EnableIntegrityMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolOutput)
}

// Defines whether the instance has Secure Boot enabled. Disabled by default.
func (o ShieldedInstanceConfigResponseOutput) EnableSecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableSecureBoot }).(pulumi.BoolOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigResponseOutput) EnableVtpm() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableVtpm }).(pulumi.BoolOutput)
}

type ShieldedInstanceConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (o ShieldedInstanceConfigResponsePtrOutput) ToShieldedInstanceConfigResponsePtrOutput() ShieldedInstanceConfigResponsePtrOutput {
	return o
}

func (o ShieldedInstanceConfigResponsePtrOutput) ToShieldedInstanceConfigResponsePtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponsePtrOutput {
	return o
}

func (o ShieldedInstanceConfigResponsePtrOutput) Elem() ShieldedInstanceConfigResponseOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfigResponse) ShieldedInstanceConfigResponse { return *v }).(ShieldedInstanceConfigResponseOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enabled by default.
func (o ShieldedInstanceConfigResponsePtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Disabled by default.
func (o ShieldedInstanceConfigResponsePtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigResponsePtrOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableVtpm
	}).(pulumi.BoolPtrOutput)
}

// The policy describes the baseline against which Instance boot integrity is measured.
type ShieldedInstanceIntegrityPolicy struct {
	// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
	UpdateAutoLearnPolicy *bool `pulumi:"updateAutoLearnPolicy"`
}

// ShieldedInstanceIntegrityPolicyInput is an input type that accepts ShieldedInstanceIntegrityPolicyArgs and ShieldedInstanceIntegrityPolicyOutput values.
// You can construct a concrete instance of `ShieldedInstanceIntegrityPolicyInput` via:
//
//          ShieldedInstanceIntegrityPolicyArgs{...}
type ShieldedInstanceIntegrityPolicyInput interface {
	pulumi.Input

	ToShieldedInstanceIntegrityPolicyOutput() ShieldedInstanceIntegrityPolicyOutput
	ToShieldedInstanceIntegrityPolicyOutputWithContext(context.Context) ShieldedInstanceIntegrityPolicyOutput
}

// The policy describes the baseline against which Instance boot integrity is measured.
type ShieldedInstanceIntegrityPolicyArgs struct {
	// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
	UpdateAutoLearnPolicy pulumi.BoolPtrInput `pulumi:"updateAutoLearnPolicy"`
}

func (ShieldedInstanceIntegrityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceIntegrityPolicy)(nil)).Elem()
}

func (i ShieldedInstanceIntegrityPolicyArgs) ToShieldedInstanceIntegrityPolicyOutput() ShieldedInstanceIntegrityPolicyOutput {
	return i.ToShieldedInstanceIntegrityPolicyOutputWithContext(context.Background())
}

func (i ShieldedInstanceIntegrityPolicyArgs) ToShieldedInstanceIntegrityPolicyOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceIntegrityPolicyOutput)
}

func (i ShieldedInstanceIntegrityPolicyArgs) ToShieldedInstanceIntegrityPolicyPtrOutput() ShieldedInstanceIntegrityPolicyPtrOutput {
	return i.ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(context.Background())
}

func (i ShieldedInstanceIntegrityPolicyArgs) ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceIntegrityPolicyOutput).ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(ctx)
}

// ShieldedInstanceIntegrityPolicyPtrInput is an input type that accepts ShieldedInstanceIntegrityPolicyArgs, ShieldedInstanceIntegrityPolicyPtr and ShieldedInstanceIntegrityPolicyPtrOutput values.
// You can construct a concrete instance of `ShieldedInstanceIntegrityPolicyPtrInput` via:
//
//          ShieldedInstanceIntegrityPolicyArgs{...}
//
//  or:
//
//          nil
type ShieldedInstanceIntegrityPolicyPtrInput interface {
	pulumi.Input

	ToShieldedInstanceIntegrityPolicyPtrOutput() ShieldedInstanceIntegrityPolicyPtrOutput
	ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(context.Context) ShieldedInstanceIntegrityPolicyPtrOutput
}

type shieldedInstanceIntegrityPolicyPtrType ShieldedInstanceIntegrityPolicyArgs

func ShieldedInstanceIntegrityPolicyPtr(v *ShieldedInstanceIntegrityPolicyArgs) ShieldedInstanceIntegrityPolicyPtrInput {
	return (*shieldedInstanceIntegrityPolicyPtrType)(v)
}

func (*shieldedInstanceIntegrityPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceIntegrityPolicy)(nil)).Elem()
}

func (i *shieldedInstanceIntegrityPolicyPtrType) ToShieldedInstanceIntegrityPolicyPtrOutput() ShieldedInstanceIntegrityPolicyPtrOutput {
	return i.ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(context.Background())
}

func (i *shieldedInstanceIntegrityPolicyPtrType) ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceIntegrityPolicyPtrOutput)
}

// The policy describes the baseline against which Instance boot integrity is measured.
type ShieldedInstanceIntegrityPolicyOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceIntegrityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceIntegrityPolicy)(nil)).Elem()
}

func (o ShieldedInstanceIntegrityPolicyOutput) ToShieldedInstanceIntegrityPolicyOutput() ShieldedInstanceIntegrityPolicyOutput {
	return o
}

func (o ShieldedInstanceIntegrityPolicyOutput) ToShieldedInstanceIntegrityPolicyOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyOutput {
	return o
}

func (o ShieldedInstanceIntegrityPolicyOutput) ToShieldedInstanceIntegrityPolicyPtrOutput() ShieldedInstanceIntegrityPolicyPtrOutput {
	return o.ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(context.Background())
}

func (o ShieldedInstanceIntegrityPolicyOutput) ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceIntegrityPolicy) *ShieldedInstanceIntegrityPolicy {
		return &v
	}).(ShieldedInstanceIntegrityPolicyPtrOutput)
}

// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
func (o ShieldedInstanceIntegrityPolicyOutput) UpdateAutoLearnPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceIntegrityPolicy) *bool { return v.UpdateAutoLearnPolicy }).(pulumi.BoolPtrOutput)
}

type ShieldedInstanceIntegrityPolicyPtrOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceIntegrityPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceIntegrityPolicy)(nil)).Elem()
}

func (o ShieldedInstanceIntegrityPolicyPtrOutput) ToShieldedInstanceIntegrityPolicyPtrOutput() ShieldedInstanceIntegrityPolicyPtrOutput {
	return o
}

func (o ShieldedInstanceIntegrityPolicyPtrOutput) ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyPtrOutput {
	return o
}

func (o ShieldedInstanceIntegrityPolicyPtrOutput) Elem() ShieldedInstanceIntegrityPolicyOutput {
	return o.ApplyT(func(v *ShieldedInstanceIntegrityPolicy) ShieldedInstanceIntegrityPolicy { return *v }).(ShieldedInstanceIntegrityPolicyOutput)
}

// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
func (o ShieldedInstanceIntegrityPolicyPtrOutput) UpdateAutoLearnPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceIntegrityPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.UpdateAutoLearnPolicy
	}).(pulumi.BoolPtrOutput)
}

// The policy describes the baseline against which Instance boot integrity is measured.
type ShieldedInstanceIntegrityPolicyResponse struct {
	// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
	UpdateAutoLearnPolicy bool `pulumi:"updateAutoLearnPolicy"`
}

// ShieldedInstanceIntegrityPolicyResponseInput is an input type that accepts ShieldedInstanceIntegrityPolicyResponseArgs and ShieldedInstanceIntegrityPolicyResponseOutput values.
// You can construct a concrete instance of `ShieldedInstanceIntegrityPolicyResponseInput` via:
//
//          ShieldedInstanceIntegrityPolicyResponseArgs{...}
type ShieldedInstanceIntegrityPolicyResponseInput interface {
	pulumi.Input

	ToShieldedInstanceIntegrityPolicyResponseOutput() ShieldedInstanceIntegrityPolicyResponseOutput
	ToShieldedInstanceIntegrityPolicyResponseOutputWithContext(context.Context) ShieldedInstanceIntegrityPolicyResponseOutput
}

// The policy describes the baseline against which Instance boot integrity is measured.
type ShieldedInstanceIntegrityPolicyResponseArgs struct {
	// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
	UpdateAutoLearnPolicy pulumi.BoolInput `pulumi:"updateAutoLearnPolicy"`
}

func (ShieldedInstanceIntegrityPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceIntegrityPolicyResponse)(nil)).Elem()
}

func (i ShieldedInstanceIntegrityPolicyResponseArgs) ToShieldedInstanceIntegrityPolicyResponseOutput() ShieldedInstanceIntegrityPolicyResponseOutput {
	return i.ToShieldedInstanceIntegrityPolicyResponseOutputWithContext(context.Background())
}

func (i ShieldedInstanceIntegrityPolicyResponseArgs) ToShieldedInstanceIntegrityPolicyResponseOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceIntegrityPolicyResponseOutput)
}

func (i ShieldedInstanceIntegrityPolicyResponseArgs) ToShieldedInstanceIntegrityPolicyResponsePtrOutput() ShieldedInstanceIntegrityPolicyResponsePtrOutput {
	return i.ToShieldedInstanceIntegrityPolicyResponsePtrOutputWithContext(context.Background())
}

func (i ShieldedInstanceIntegrityPolicyResponseArgs) ToShieldedInstanceIntegrityPolicyResponsePtrOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceIntegrityPolicyResponseOutput).ToShieldedInstanceIntegrityPolicyResponsePtrOutputWithContext(ctx)
}

// ShieldedInstanceIntegrityPolicyResponsePtrInput is an input type that accepts ShieldedInstanceIntegrityPolicyResponseArgs, ShieldedInstanceIntegrityPolicyResponsePtr and ShieldedInstanceIntegrityPolicyResponsePtrOutput values.
// You can construct a concrete instance of `ShieldedInstanceIntegrityPolicyResponsePtrInput` via:
//
//          ShieldedInstanceIntegrityPolicyResponseArgs{...}
//
//  or:
//
//          nil
type ShieldedInstanceIntegrityPolicyResponsePtrInput interface {
	pulumi.Input

	ToShieldedInstanceIntegrityPolicyResponsePtrOutput() ShieldedInstanceIntegrityPolicyResponsePtrOutput
	ToShieldedInstanceIntegrityPolicyResponsePtrOutputWithContext(context.Context) ShieldedInstanceIntegrityPolicyResponsePtrOutput
}

type shieldedInstanceIntegrityPolicyResponsePtrType ShieldedInstanceIntegrityPolicyResponseArgs

func ShieldedInstanceIntegrityPolicyResponsePtr(v *ShieldedInstanceIntegrityPolicyResponseArgs) ShieldedInstanceIntegrityPolicyResponsePtrInput {
	return (*shieldedInstanceIntegrityPolicyResponsePtrType)(v)
}

func (*shieldedInstanceIntegrityPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceIntegrityPolicyResponse)(nil)).Elem()
}

func (i *shieldedInstanceIntegrityPolicyResponsePtrType) ToShieldedInstanceIntegrityPolicyResponsePtrOutput() ShieldedInstanceIntegrityPolicyResponsePtrOutput {
	return i.ToShieldedInstanceIntegrityPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *shieldedInstanceIntegrityPolicyResponsePtrType) ToShieldedInstanceIntegrityPolicyResponsePtrOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceIntegrityPolicyResponsePtrOutput)
}

// The policy describes the baseline against which Instance boot integrity is measured.
type ShieldedInstanceIntegrityPolicyResponseOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceIntegrityPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceIntegrityPolicyResponse)(nil)).Elem()
}

func (o ShieldedInstanceIntegrityPolicyResponseOutput) ToShieldedInstanceIntegrityPolicyResponseOutput() ShieldedInstanceIntegrityPolicyResponseOutput {
	return o
}

func (o ShieldedInstanceIntegrityPolicyResponseOutput) ToShieldedInstanceIntegrityPolicyResponseOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyResponseOutput {
	return o
}

func (o ShieldedInstanceIntegrityPolicyResponseOutput) ToShieldedInstanceIntegrityPolicyResponsePtrOutput() ShieldedInstanceIntegrityPolicyResponsePtrOutput {
	return o.ToShieldedInstanceIntegrityPolicyResponsePtrOutputWithContext(context.Background())
}

func (o ShieldedInstanceIntegrityPolicyResponseOutput) ToShieldedInstanceIntegrityPolicyResponsePtrOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyResponsePtrOutput {
	return o.ApplyT(func(v ShieldedInstanceIntegrityPolicyResponse) *ShieldedInstanceIntegrityPolicyResponse {
		return &v
	}).(ShieldedInstanceIntegrityPolicyResponsePtrOutput)
}

// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
func (o ShieldedInstanceIntegrityPolicyResponseOutput) UpdateAutoLearnPolicy() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceIntegrityPolicyResponse) bool { return v.UpdateAutoLearnPolicy }).(pulumi.BoolOutput)
}

type ShieldedInstanceIntegrityPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceIntegrityPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceIntegrityPolicyResponse)(nil)).Elem()
}

func (o ShieldedInstanceIntegrityPolicyResponsePtrOutput) ToShieldedInstanceIntegrityPolicyResponsePtrOutput() ShieldedInstanceIntegrityPolicyResponsePtrOutput {
	return o
}

func (o ShieldedInstanceIntegrityPolicyResponsePtrOutput) ToShieldedInstanceIntegrityPolicyResponsePtrOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyResponsePtrOutput {
	return o
}

func (o ShieldedInstanceIntegrityPolicyResponsePtrOutput) Elem() ShieldedInstanceIntegrityPolicyResponseOutput {
	return o.ApplyT(func(v *ShieldedInstanceIntegrityPolicyResponse) ShieldedInstanceIntegrityPolicyResponse { return *v }).(ShieldedInstanceIntegrityPolicyResponseOutput)
}

// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
func (o ShieldedInstanceIntegrityPolicyResponsePtrOutput) UpdateAutoLearnPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceIntegrityPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.UpdateAutoLearnPolicy
	}).(pulumi.BoolPtrOutput)
}

// A specification of the parameters to use when creating the instance template from a source instance.
type SourceInstanceParams struct {
	// Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
	DiskConfigs []DiskInstantiationConfig `pulumi:"diskConfigs"`
}

// SourceInstanceParamsInput is an input type that accepts SourceInstanceParamsArgs and SourceInstanceParamsOutput values.
// You can construct a concrete instance of `SourceInstanceParamsInput` via:
//
//          SourceInstanceParamsArgs{...}
type SourceInstanceParamsInput interface {
	pulumi.Input

	ToSourceInstanceParamsOutput() SourceInstanceParamsOutput
	ToSourceInstanceParamsOutputWithContext(context.Context) SourceInstanceParamsOutput
}

// A specification of the parameters to use when creating the instance template from a source instance.
type SourceInstanceParamsArgs struct {
	// Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
	DiskConfigs DiskInstantiationConfigArrayInput `pulumi:"diskConfigs"`
}

func (SourceInstanceParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceInstanceParams)(nil)).Elem()
}

func (i SourceInstanceParamsArgs) ToSourceInstanceParamsOutput() SourceInstanceParamsOutput {
	return i.ToSourceInstanceParamsOutputWithContext(context.Background())
}

func (i SourceInstanceParamsArgs) ToSourceInstanceParamsOutputWithContext(ctx context.Context) SourceInstanceParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceInstanceParamsOutput)
}

func (i SourceInstanceParamsArgs) ToSourceInstanceParamsPtrOutput() SourceInstanceParamsPtrOutput {
	return i.ToSourceInstanceParamsPtrOutputWithContext(context.Background())
}

func (i SourceInstanceParamsArgs) ToSourceInstanceParamsPtrOutputWithContext(ctx context.Context) SourceInstanceParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceInstanceParamsOutput).ToSourceInstanceParamsPtrOutputWithContext(ctx)
}

// SourceInstanceParamsPtrInput is an input type that accepts SourceInstanceParamsArgs, SourceInstanceParamsPtr and SourceInstanceParamsPtrOutput values.
// You can construct a concrete instance of `SourceInstanceParamsPtrInput` via:
//
//          SourceInstanceParamsArgs{...}
//
//  or:
//
//          nil
type SourceInstanceParamsPtrInput interface {
	pulumi.Input

	ToSourceInstanceParamsPtrOutput() SourceInstanceParamsPtrOutput
	ToSourceInstanceParamsPtrOutputWithContext(context.Context) SourceInstanceParamsPtrOutput
}

type sourceInstanceParamsPtrType SourceInstanceParamsArgs

func SourceInstanceParamsPtr(v *SourceInstanceParamsArgs) SourceInstanceParamsPtrInput {
	return (*sourceInstanceParamsPtrType)(v)
}

func (*sourceInstanceParamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceInstanceParams)(nil)).Elem()
}

func (i *sourceInstanceParamsPtrType) ToSourceInstanceParamsPtrOutput() SourceInstanceParamsPtrOutput {
	return i.ToSourceInstanceParamsPtrOutputWithContext(context.Background())
}

func (i *sourceInstanceParamsPtrType) ToSourceInstanceParamsPtrOutputWithContext(ctx context.Context) SourceInstanceParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceInstanceParamsPtrOutput)
}

// A specification of the parameters to use when creating the instance template from a source instance.
type SourceInstanceParamsOutput struct{ *pulumi.OutputState }

func (SourceInstanceParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceInstanceParams)(nil)).Elem()
}

func (o SourceInstanceParamsOutput) ToSourceInstanceParamsOutput() SourceInstanceParamsOutput {
	return o
}

func (o SourceInstanceParamsOutput) ToSourceInstanceParamsOutputWithContext(ctx context.Context) SourceInstanceParamsOutput {
	return o
}

func (o SourceInstanceParamsOutput) ToSourceInstanceParamsPtrOutput() SourceInstanceParamsPtrOutput {
	return o.ToSourceInstanceParamsPtrOutputWithContext(context.Background())
}

func (o SourceInstanceParamsOutput) ToSourceInstanceParamsPtrOutputWithContext(ctx context.Context) SourceInstanceParamsPtrOutput {
	return o.ApplyT(func(v SourceInstanceParams) *SourceInstanceParams {
		return &v
	}).(SourceInstanceParamsPtrOutput)
}

// Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
func (o SourceInstanceParamsOutput) DiskConfigs() DiskInstantiationConfigArrayOutput {
	return o.ApplyT(func(v SourceInstanceParams) []DiskInstantiationConfig { return v.DiskConfigs }).(DiskInstantiationConfigArrayOutput)
}

type SourceInstanceParamsPtrOutput struct{ *pulumi.OutputState }

func (SourceInstanceParamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceInstanceParams)(nil)).Elem()
}

func (o SourceInstanceParamsPtrOutput) ToSourceInstanceParamsPtrOutput() SourceInstanceParamsPtrOutput {
	return o
}

func (o SourceInstanceParamsPtrOutput) ToSourceInstanceParamsPtrOutputWithContext(ctx context.Context) SourceInstanceParamsPtrOutput {
	return o
}

func (o SourceInstanceParamsPtrOutput) Elem() SourceInstanceParamsOutput {
	return o.ApplyT(func(v *SourceInstanceParams) SourceInstanceParams { return *v }).(SourceInstanceParamsOutput)
}

// Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
func (o SourceInstanceParamsPtrOutput) DiskConfigs() DiskInstantiationConfigArrayOutput {
	return o.ApplyT(func(v *SourceInstanceParams) []DiskInstantiationConfig {
		if v == nil {
			return nil
		}
		return v.DiskConfigs
	}).(DiskInstantiationConfigArrayOutput)
}

// A specification of the parameters to use when creating the instance template from a source instance.
type SourceInstanceParamsResponse struct {
	// Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
	DiskConfigs []DiskInstantiationConfigResponse `pulumi:"diskConfigs"`
}

// SourceInstanceParamsResponseInput is an input type that accepts SourceInstanceParamsResponseArgs and SourceInstanceParamsResponseOutput values.
// You can construct a concrete instance of `SourceInstanceParamsResponseInput` via:
//
//          SourceInstanceParamsResponseArgs{...}
type SourceInstanceParamsResponseInput interface {
	pulumi.Input

	ToSourceInstanceParamsResponseOutput() SourceInstanceParamsResponseOutput
	ToSourceInstanceParamsResponseOutputWithContext(context.Context) SourceInstanceParamsResponseOutput
}

// A specification of the parameters to use when creating the instance template from a source instance.
type SourceInstanceParamsResponseArgs struct {
	// Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
	DiskConfigs DiskInstantiationConfigResponseArrayInput `pulumi:"diskConfigs"`
}

func (SourceInstanceParamsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceInstanceParamsResponse)(nil)).Elem()
}

func (i SourceInstanceParamsResponseArgs) ToSourceInstanceParamsResponseOutput() SourceInstanceParamsResponseOutput {
	return i.ToSourceInstanceParamsResponseOutputWithContext(context.Background())
}

func (i SourceInstanceParamsResponseArgs) ToSourceInstanceParamsResponseOutputWithContext(ctx context.Context) SourceInstanceParamsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceInstanceParamsResponseOutput)
}

func (i SourceInstanceParamsResponseArgs) ToSourceInstanceParamsResponsePtrOutput() SourceInstanceParamsResponsePtrOutput {
	return i.ToSourceInstanceParamsResponsePtrOutputWithContext(context.Background())
}

func (i SourceInstanceParamsResponseArgs) ToSourceInstanceParamsResponsePtrOutputWithContext(ctx context.Context) SourceInstanceParamsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceInstanceParamsResponseOutput).ToSourceInstanceParamsResponsePtrOutputWithContext(ctx)
}

// SourceInstanceParamsResponsePtrInput is an input type that accepts SourceInstanceParamsResponseArgs, SourceInstanceParamsResponsePtr and SourceInstanceParamsResponsePtrOutput values.
// You can construct a concrete instance of `SourceInstanceParamsResponsePtrInput` via:
//
//          SourceInstanceParamsResponseArgs{...}
//
//  or:
//
//          nil
type SourceInstanceParamsResponsePtrInput interface {
	pulumi.Input

	ToSourceInstanceParamsResponsePtrOutput() SourceInstanceParamsResponsePtrOutput
	ToSourceInstanceParamsResponsePtrOutputWithContext(context.Context) SourceInstanceParamsResponsePtrOutput
}

type sourceInstanceParamsResponsePtrType SourceInstanceParamsResponseArgs

func SourceInstanceParamsResponsePtr(v *SourceInstanceParamsResponseArgs) SourceInstanceParamsResponsePtrInput {
	return (*sourceInstanceParamsResponsePtrType)(v)
}

func (*sourceInstanceParamsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceInstanceParamsResponse)(nil)).Elem()
}

func (i *sourceInstanceParamsResponsePtrType) ToSourceInstanceParamsResponsePtrOutput() SourceInstanceParamsResponsePtrOutput {
	return i.ToSourceInstanceParamsResponsePtrOutputWithContext(context.Background())
}

func (i *sourceInstanceParamsResponsePtrType) ToSourceInstanceParamsResponsePtrOutputWithContext(ctx context.Context) SourceInstanceParamsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceInstanceParamsResponsePtrOutput)
}

// A specification of the parameters to use when creating the instance template from a source instance.
type SourceInstanceParamsResponseOutput struct{ *pulumi.OutputState }

func (SourceInstanceParamsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceInstanceParamsResponse)(nil)).Elem()
}

func (o SourceInstanceParamsResponseOutput) ToSourceInstanceParamsResponseOutput() SourceInstanceParamsResponseOutput {
	return o
}

func (o SourceInstanceParamsResponseOutput) ToSourceInstanceParamsResponseOutputWithContext(ctx context.Context) SourceInstanceParamsResponseOutput {
	return o
}

func (o SourceInstanceParamsResponseOutput) ToSourceInstanceParamsResponsePtrOutput() SourceInstanceParamsResponsePtrOutput {
	return o.ToSourceInstanceParamsResponsePtrOutputWithContext(context.Background())
}

func (o SourceInstanceParamsResponseOutput) ToSourceInstanceParamsResponsePtrOutputWithContext(ctx context.Context) SourceInstanceParamsResponsePtrOutput {
	return o.ApplyT(func(v SourceInstanceParamsResponse) *SourceInstanceParamsResponse {
		return &v
	}).(SourceInstanceParamsResponsePtrOutput)
}

// Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
func (o SourceInstanceParamsResponseOutput) DiskConfigs() DiskInstantiationConfigResponseArrayOutput {
	return o.ApplyT(func(v SourceInstanceParamsResponse) []DiskInstantiationConfigResponse { return v.DiskConfigs }).(DiskInstantiationConfigResponseArrayOutput)
}

type SourceInstanceParamsResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceInstanceParamsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceInstanceParamsResponse)(nil)).Elem()
}

func (o SourceInstanceParamsResponsePtrOutput) ToSourceInstanceParamsResponsePtrOutput() SourceInstanceParamsResponsePtrOutput {
	return o
}

func (o SourceInstanceParamsResponsePtrOutput) ToSourceInstanceParamsResponsePtrOutputWithContext(ctx context.Context) SourceInstanceParamsResponsePtrOutput {
	return o
}

func (o SourceInstanceParamsResponsePtrOutput) Elem() SourceInstanceParamsResponseOutput {
	return o.ApplyT(func(v *SourceInstanceParamsResponse) SourceInstanceParamsResponse { return *v }).(SourceInstanceParamsResponseOutput)
}

// Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
func (o SourceInstanceParamsResponsePtrOutput) DiskConfigs() DiskInstantiationConfigResponseArrayOutput {
	return o.ApplyT(func(v *SourceInstanceParamsResponse) []DiskInstantiationConfigResponse {
		if v == nil {
			return nil
		}
		return v.DiskConfigs
	}).(DiskInstantiationConfigResponseArrayOutput)
}

// Configuration and status of a managed SSL certificate.
type SslCertificateManagedSslCertificate struct {
	// The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates).
	Domains []string `pulumi:"domains"`
}

// SslCertificateManagedSslCertificateInput is an input type that accepts SslCertificateManagedSslCertificateArgs and SslCertificateManagedSslCertificateOutput values.
// You can construct a concrete instance of `SslCertificateManagedSslCertificateInput` via:
//
//          SslCertificateManagedSslCertificateArgs{...}
type SslCertificateManagedSslCertificateInput interface {
	pulumi.Input

	ToSslCertificateManagedSslCertificateOutput() SslCertificateManagedSslCertificateOutput
	ToSslCertificateManagedSslCertificateOutputWithContext(context.Context) SslCertificateManagedSslCertificateOutput
}

// Configuration and status of a managed SSL certificate.
type SslCertificateManagedSslCertificateArgs struct {
	// The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates).
	Domains pulumi.StringArrayInput `pulumi:"domains"`
}

func (SslCertificateManagedSslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertificateManagedSslCertificate)(nil)).Elem()
}

func (i SslCertificateManagedSslCertificateArgs) ToSslCertificateManagedSslCertificateOutput() SslCertificateManagedSslCertificateOutput {
	return i.ToSslCertificateManagedSslCertificateOutputWithContext(context.Background())
}

func (i SslCertificateManagedSslCertificateArgs) ToSslCertificateManagedSslCertificateOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateManagedSslCertificateOutput)
}

func (i SslCertificateManagedSslCertificateArgs) ToSslCertificateManagedSslCertificatePtrOutput() SslCertificateManagedSslCertificatePtrOutput {
	return i.ToSslCertificateManagedSslCertificatePtrOutputWithContext(context.Background())
}

func (i SslCertificateManagedSslCertificateArgs) ToSslCertificateManagedSslCertificatePtrOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateManagedSslCertificateOutput).ToSslCertificateManagedSslCertificatePtrOutputWithContext(ctx)
}

// SslCertificateManagedSslCertificatePtrInput is an input type that accepts SslCertificateManagedSslCertificateArgs, SslCertificateManagedSslCertificatePtr and SslCertificateManagedSslCertificatePtrOutput values.
// You can construct a concrete instance of `SslCertificateManagedSslCertificatePtrInput` via:
//
//          SslCertificateManagedSslCertificateArgs{...}
//
//  or:
//
//          nil
type SslCertificateManagedSslCertificatePtrInput interface {
	pulumi.Input

	ToSslCertificateManagedSslCertificatePtrOutput() SslCertificateManagedSslCertificatePtrOutput
	ToSslCertificateManagedSslCertificatePtrOutputWithContext(context.Context) SslCertificateManagedSslCertificatePtrOutput
}

type sslCertificateManagedSslCertificatePtrType SslCertificateManagedSslCertificateArgs

func SslCertificateManagedSslCertificatePtr(v *SslCertificateManagedSslCertificateArgs) SslCertificateManagedSslCertificatePtrInput {
	return (*sslCertificateManagedSslCertificatePtrType)(v)
}

func (*sslCertificateManagedSslCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertificateManagedSslCertificate)(nil)).Elem()
}

func (i *sslCertificateManagedSslCertificatePtrType) ToSslCertificateManagedSslCertificatePtrOutput() SslCertificateManagedSslCertificatePtrOutput {
	return i.ToSslCertificateManagedSslCertificatePtrOutputWithContext(context.Background())
}

func (i *sslCertificateManagedSslCertificatePtrType) ToSslCertificateManagedSslCertificatePtrOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateManagedSslCertificatePtrOutput)
}

// Configuration and status of a managed SSL certificate.
type SslCertificateManagedSslCertificateOutput struct{ *pulumi.OutputState }

func (SslCertificateManagedSslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertificateManagedSslCertificate)(nil)).Elem()
}

func (o SslCertificateManagedSslCertificateOutput) ToSslCertificateManagedSslCertificateOutput() SslCertificateManagedSslCertificateOutput {
	return o
}

func (o SslCertificateManagedSslCertificateOutput) ToSslCertificateManagedSslCertificateOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificateOutput {
	return o
}

func (o SslCertificateManagedSslCertificateOutput) ToSslCertificateManagedSslCertificatePtrOutput() SslCertificateManagedSslCertificatePtrOutput {
	return o.ToSslCertificateManagedSslCertificatePtrOutputWithContext(context.Background())
}

func (o SslCertificateManagedSslCertificateOutput) ToSslCertificateManagedSslCertificatePtrOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificatePtrOutput {
	return o.ApplyT(func(v SslCertificateManagedSslCertificate) *SslCertificateManagedSslCertificate {
		return &v
	}).(SslCertificateManagedSslCertificatePtrOutput)
}

// The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates).
func (o SslCertificateManagedSslCertificateOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SslCertificateManagedSslCertificate) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

type SslCertificateManagedSslCertificatePtrOutput struct{ *pulumi.OutputState }

func (SslCertificateManagedSslCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertificateManagedSslCertificate)(nil)).Elem()
}

func (o SslCertificateManagedSslCertificatePtrOutput) ToSslCertificateManagedSslCertificatePtrOutput() SslCertificateManagedSslCertificatePtrOutput {
	return o
}

func (o SslCertificateManagedSslCertificatePtrOutput) ToSslCertificateManagedSslCertificatePtrOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificatePtrOutput {
	return o
}

func (o SslCertificateManagedSslCertificatePtrOutput) Elem() SslCertificateManagedSslCertificateOutput {
	return o.ApplyT(func(v *SslCertificateManagedSslCertificate) SslCertificateManagedSslCertificate { return *v }).(SslCertificateManagedSslCertificateOutput)
}

// The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates).
func (o SslCertificateManagedSslCertificatePtrOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SslCertificateManagedSslCertificate) []string {
		if v == nil {
			return nil
		}
		return v.Domains
	}).(pulumi.StringArrayOutput)
}

// Configuration and status of a managed SSL certificate.
type SslCertificateManagedSslCertificateResponse struct {
	// [Output only] Detailed statuses of the domains specified for managed certificate resource.
	DomainStatus map[string]string `pulumi:"domainStatus"`
	// The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates).
	Domains []string `pulumi:"domains"`
	// [Output only] Status of the managed certificate resource.
	Status string `pulumi:"status"`
}

// SslCertificateManagedSslCertificateResponseInput is an input type that accepts SslCertificateManagedSslCertificateResponseArgs and SslCertificateManagedSslCertificateResponseOutput values.
// You can construct a concrete instance of `SslCertificateManagedSslCertificateResponseInput` via:
//
//          SslCertificateManagedSslCertificateResponseArgs{...}
type SslCertificateManagedSslCertificateResponseInput interface {
	pulumi.Input

	ToSslCertificateManagedSslCertificateResponseOutput() SslCertificateManagedSslCertificateResponseOutput
	ToSslCertificateManagedSslCertificateResponseOutputWithContext(context.Context) SslCertificateManagedSslCertificateResponseOutput
}

// Configuration and status of a managed SSL certificate.
type SslCertificateManagedSslCertificateResponseArgs struct {
	// [Output only] Detailed statuses of the domains specified for managed certificate resource.
	DomainStatus pulumi.StringMapInput `pulumi:"domainStatus"`
	// The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates).
	Domains pulumi.StringArrayInput `pulumi:"domains"`
	// [Output only] Status of the managed certificate resource.
	Status pulumi.StringInput `pulumi:"status"`
}

func (SslCertificateManagedSslCertificateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertificateManagedSslCertificateResponse)(nil)).Elem()
}

func (i SslCertificateManagedSslCertificateResponseArgs) ToSslCertificateManagedSslCertificateResponseOutput() SslCertificateManagedSslCertificateResponseOutput {
	return i.ToSslCertificateManagedSslCertificateResponseOutputWithContext(context.Background())
}

func (i SslCertificateManagedSslCertificateResponseArgs) ToSslCertificateManagedSslCertificateResponseOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateManagedSslCertificateResponseOutput)
}

func (i SslCertificateManagedSslCertificateResponseArgs) ToSslCertificateManagedSslCertificateResponsePtrOutput() SslCertificateManagedSslCertificateResponsePtrOutput {
	return i.ToSslCertificateManagedSslCertificateResponsePtrOutputWithContext(context.Background())
}

func (i SslCertificateManagedSslCertificateResponseArgs) ToSslCertificateManagedSslCertificateResponsePtrOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateManagedSslCertificateResponseOutput).ToSslCertificateManagedSslCertificateResponsePtrOutputWithContext(ctx)
}

// SslCertificateManagedSslCertificateResponsePtrInput is an input type that accepts SslCertificateManagedSslCertificateResponseArgs, SslCertificateManagedSslCertificateResponsePtr and SslCertificateManagedSslCertificateResponsePtrOutput values.
// You can construct a concrete instance of `SslCertificateManagedSslCertificateResponsePtrInput` via:
//
//          SslCertificateManagedSslCertificateResponseArgs{...}
//
//  or:
//
//          nil
type SslCertificateManagedSslCertificateResponsePtrInput interface {
	pulumi.Input

	ToSslCertificateManagedSslCertificateResponsePtrOutput() SslCertificateManagedSslCertificateResponsePtrOutput
	ToSslCertificateManagedSslCertificateResponsePtrOutputWithContext(context.Context) SslCertificateManagedSslCertificateResponsePtrOutput
}

type sslCertificateManagedSslCertificateResponsePtrType SslCertificateManagedSslCertificateResponseArgs

func SslCertificateManagedSslCertificateResponsePtr(v *SslCertificateManagedSslCertificateResponseArgs) SslCertificateManagedSslCertificateResponsePtrInput {
	return (*sslCertificateManagedSslCertificateResponsePtrType)(v)
}

func (*sslCertificateManagedSslCertificateResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertificateManagedSslCertificateResponse)(nil)).Elem()
}

func (i *sslCertificateManagedSslCertificateResponsePtrType) ToSslCertificateManagedSslCertificateResponsePtrOutput() SslCertificateManagedSslCertificateResponsePtrOutput {
	return i.ToSslCertificateManagedSslCertificateResponsePtrOutputWithContext(context.Background())
}

func (i *sslCertificateManagedSslCertificateResponsePtrType) ToSslCertificateManagedSslCertificateResponsePtrOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateManagedSslCertificateResponsePtrOutput)
}

// Configuration and status of a managed SSL certificate.
type SslCertificateManagedSslCertificateResponseOutput struct{ *pulumi.OutputState }

func (SslCertificateManagedSslCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertificateManagedSslCertificateResponse)(nil)).Elem()
}

func (o SslCertificateManagedSslCertificateResponseOutput) ToSslCertificateManagedSslCertificateResponseOutput() SslCertificateManagedSslCertificateResponseOutput {
	return o
}

func (o SslCertificateManagedSslCertificateResponseOutput) ToSslCertificateManagedSslCertificateResponseOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificateResponseOutput {
	return o
}

func (o SslCertificateManagedSslCertificateResponseOutput) ToSslCertificateManagedSslCertificateResponsePtrOutput() SslCertificateManagedSslCertificateResponsePtrOutput {
	return o.ToSslCertificateManagedSslCertificateResponsePtrOutputWithContext(context.Background())
}

func (o SslCertificateManagedSslCertificateResponseOutput) ToSslCertificateManagedSslCertificateResponsePtrOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificateResponsePtrOutput {
	return o.ApplyT(func(v SslCertificateManagedSslCertificateResponse) *SslCertificateManagedSslCertificateResponse {
		return &v
	}).(SslCertificateManagedSslCertificateResponsePtrOutput)
}

// [Output only] Detailed statuses of the domains specified for managed certificate resource.
func (o SslCertificateManagedSslCertificateResponseOutput) DomainStatus() pulumi.StringMapOutput {
	return o.ApplyT(func(v SslCertificateManagedSslCertificateResponse) map[string]string { return v.DomainStatus }).(pulumi.StringMapOutput)
}

// The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates).
func (o SslCertificateManagedSslCertificateResponseOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SslCertificateManagedSslCertificateResponse) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// [Output only] Status of the managed certificate resource.
func (o SslCertificateManagedSslCertificateResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SslCertificateManagedSslCertificateResponse) string { return v.Status }).(pulumi.StringOutput)
}

type SslCertificateManagedSslCertificateResponsePtrOutput struct{ *pulumi.OutputState }

func (SslCertificateManagedSslCertificateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertificateManagedSslCertificateResponse)(nil)).Elem()
}

func (o SslCertificateManagedSslCertificateResponsePtrOutput) ToSslCertificateManagedSslCertificateResponsePtrOutput() SslCertificateManagedSslCertificateResponsePtrOutput {
	return o
}

func (o SslCertificateManagedSslCertificateResponsePtrOutput) ToSslCertificateManagedSslCertificateResponsePtrOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificateResponsePtrOutput {
	return o
}

func (o SslCertificateManagedSslCertificateResponsePtrOutput) Elem() SslCertificateManagedSslCertificateResponseOutput {
	return o.ApplyT(func(v *SslCertificateManagedSslCertificateResponse) SslCertificateManagedSslCertificateResponse {
		return *v
	}).(SslCertificateManagedSslCertificateResponseOutput)
}

// [Output only] Detailed statuses of the domains specified for managed certificate resource.
func (o SslCertificateManagedSslCertificateResponsePtrOutput) DomainStatus() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SslCertificateManagedSslCertificateResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.DomainStatus
	}).(pulumi.StringMapOutput)
}

// The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates).
func (o SslCertificateManagedSslCertificateResponsePtrOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SslCertificateManagedSslCertificateResponse) []string {
		if v == nil {
			return nil
		}
		return v.Domains
	}).(pulumi.StringArrayOutput)
}

// [Output only] Status of the managed certificate resource.
func (o SslCertificateManagedSslCertificateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertificateManagedSslCertificateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Configuration and status of a self-managed SSL certificate.
type SslCertificateSelfManagedSslCertificate struct {
	// A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
	Certificate *string `pulumi:"certificate"`
	// A write-only private key in PEM format. Only insert requests will include this field.
	PrivateKey *string `pulumi:"privateKey"`
}

// SslCertificateSelfManagedSslCertificateInput is an input type that accepts SslCertificateSelfManagedSslCertificateArgs and SslCertificateSelfManagedSslCertificateOutput values.
// You can construct a concrete instance of `SslCertificateSelfManagedSslCertificateInput` via:
//
//          SslCertificateSelfManagedSslCertificateArgs{...}
type SslCertificateSelfManagedSslCertificateInput interface {
	pulumi.Input

	ToSslCertificateSelfManagedSslCertificateOutput() SslCertificateSelfManagedSslCertificateOutput
	ToSslCertificateSelfManagedSslCertificateOutputWithContext(context.Context) SslCertificateSelfManagedSslCertificateOutput
}

// Configuration and status of a self-managed SSL certificate.
type SslCertificateSelfManagedSslCertificateArgs struct {
	// A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// A write-only private key in PEM format. Only insert requests will include this field.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
}

func (SslCertificateSelfManagedSslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertificateSelfManagedSslCertificate)(nil)).Elem()
}

func (i SslCertificateSelfManagedSslCertificateArgs) ToSslCertificateSelfManagedSslCertificateOutput() SslCertificateSelfManagedSslCertificateOutput {
	return i.ToSslCertificateSelfManagedSslCertificateOutputWithContext(context.Background())
}

func (i SslCertificateSelfManagedSslCertificateArgs) ToSslCertificateSelfManagedSslCertificateOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateSelfManagedSslCertificateOutput)
}

func (i SslCertificateSelfManagedSslCertificateArgs) ToSslCertificateSelfManagedSslCertificatePtrOutput() SslCertificateSelfManagedSslCertificatePtrOutput {
	return i.ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(context.Background())
}

func (i SslCertificateSelfManagedSslCertificateArgs) ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateSelfManagedSslCertificateOutput).ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(ctx)
}

// SslCertificateSelfManagedSslCertificatePtrInput is an input type that accepts SslCertificateSelfManagedSslCertificateArgs, SslCertificateSelfManagedSslCertificatePtr and SslCertificateSelfManagedSslCertificatePtrOutput values.
// You can construct a concrete instance of `SslCertificateSelfManagedSslCertificatePtrInput` via:
//
//          SslCertificateSelfManagedSslCertificateArgs{...}
//
//  or:
//
//          nil
type SslCertificateSelfManagedSslCertificatePtrInput interface {
	pulumi.Input

	ToSslCertificateSelfManagedSslCertificatePtrOutput() SslCertificateSelfManagedSslCertificatePtrOutput
	ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(context.Context) SslCertificateSelfManagedSslCertificatePtrOutput
}

type sslCertificateSelfManagedSslCertificatePtrType SslCertificateSelfManagedSslCertificateArgs

func SslCertificateSelfManagedSslCertificatePtr(v *SslCertificateSelfManagedSslCertificateArgs) SslCertificateSelfManagedSslCertificatePtrInput {
	return (*sslCertificateSelfManagedSslCertificatePtrType)(v)
}

func (*sslCertificateSelfManagedSslCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertificateSelfManagedSslCertificate)(nil)).Elem()
}

func (i *sslCertificateSelfManagedSslCertificatePtrType) ToSslCertificateSelfManagedSslCertificatePtrOutput() SslCertificateSelfManagedSslCertificatePtrOutput {
	return i.ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(context.Background())
}

func (i *sslCertificateSelfManagedSslCertificatePtrType) ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateSelfManagedSslCertificatePtrOutput)
}

// Configuration and status of a self-managed SSL certificate.
type SslCertificateSelfManagedSslCertificateOutput struct{ *pulumi.OutputState }

func (SslCertificateSelfManagedSslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertificateSelfManagedSslCertificate)(nil)).Elem()
}

func (o SslCertificateSelfManagedSslCertificateOutput) ToSslCertificateSelfManagedSslCertificateOutput() SslCertificateSelfManagedSslCertificateOutput {
	return o
}

func (o SslCertificateSelfManagedSslCertificateOutput) ToSslCertificateSelfManagedSslCertificateOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificateOutput {
	return o
}

func (o SslCertificateSelfManagedSslCertificateOutput) ToSslCertificateSelfManagedSslCertificatePtrOutput() SslCertificateSelfManagedSslCertificatePtrOutput {
	return o.ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(context.Background())
}

func (o SslCertificateSelfManagedSslCertificateOutput) ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificatePtrOutput {
	return o.ApplyT(func(v SslCertificateSelfManagedSslCertificate) *SslCertificateSelfManagedSslCertificate {
		return &v
	}).(SslCertificateSelfManagedSslCertificatePtrOutput)
}

// A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
func (o SslCertificateSelfManagedSslCertificateOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertificateSelfManagedSslCertificate) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// A write-only private key in PEM format. Only insert requests will include this field.
func (o SslCertificateSelfManagedSslCertificateOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertificateSelfManagedSslCertificate) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

type SslCertificateSelfManagedSslCertificatePtrOutput struct{ *pulumi.OutputState }

func (SslCertificateSelfManagedSslCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertificateSelfManagedSslCertificate)(nil)).Elem()
}

func (o SslCertificateSelfManagedSslCertificatePtrOutput) ToSslCertificateSelfManagedSslCertificatePtrOutput() SslCertificateSelfManagedSslCertificatePtrOutput {
	return o
}

func (o SslCertificateSelfManagedSslCertificatePtrOutput) ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificatePtrOutput {
	return o
}

func (o SslCertificateSelfManagedSslCertificatePtrOutput) Elem() SslCertificateSelfManagedSslCertificateOutput {
	return o.ApplyT(func(v *SslCertificateSelfManagedSslCertificate) SslCertificateSelfManagedSslCertificate { return *v }).(SslCertificateSelfManagedSslCertificateOutput)
}

// A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
func (o SslCertificateSelfManagedSslCertificatePtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertificateSelfManagedSslCertificate) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// A write-only private key in PEM format. Only insert requests will include this field.
func (o SslCertificateSelfManagedSslCertificatePtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertificateSelfManagedSslCertificate) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Configuration and status of a self-managed SSL certificate.
type SslCertificateSelfManagedSslCertificateResponse struct {
	// A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
	Certificate string `pulumi:"certificate"`
	// A write-only private key in PEM format. Only insert requests will include this field.
	PrivateKey string `pulumi:"privateKey"`
}

// SslCertificateSelfManagedSslCertificateResponseInput is an input type that accepts SslCertificateSelfManagedSslCertificateResponseArgs and SslCertificateSelfManagedSslCertificateResponseOutput values.
// You can construct a concrete instance of `SslCertificateSelfManagedSslCertificateResponseInput` via:
//
//          SslCertificateSelfManagedSslCertificateResponseArgs{...}
type SslCertificateSelfManagedSslCertificateResponseInput interface {
	pulumi.Input

	ToSslCertificateSelfManagedSslCertificateResponseOutput() SslCertificateSelfManagedSslCertificateResponseOutput
	ToSslCertificateSelfManagedSslCertificateResponseOutputWithContext(context.Context) SslCertificateSelfManagedSslCertificateResponseOutput
}

// Configuration and status of a self-managed SSL certificate.
type SslCertificateSelfManagedSslCertificateResponseArgs struct {
	// A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
	Certificate pulumi.StringInput `pulumi:"certificate"`
	// A write-only private key in PEM format. Only insert requests will include this field.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
}

func (SslCertificateSelfManagedSslCertificateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertificateSelfManagedSslCertificateResponse)(nil)).Elem()
}

func (i SslCertificateSelfManagedSslCertificateResponseArgs) ToSslCertificateSelfManagedSslCertificateResponseOutput() SslCertificateSelfManagedSslCertificateResponseOutput {
	return i.ToSslCertificateSelfManagedSslCertificateResponseOutputWithContext(context.Background())
}

func (i SslCertificateSelfManagedSslCertificateResponseArgs) ToSslCertificateSelfManagedSslCertificateResponseOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateSelfManagedSslCertificateResponseOutput)
}

func (i SslCertificateSelfManagedSslCertificateResponseArgs) ToSslCertificateSelfManagedSslCertificateResponsePtrOutput() SslCertificateSelfManagedSslCertificateResponsePtrOutput {
	return i.ToSslCertificateSelfManagedSslCertificateResponsePtrOutputWithContext(context.Background())
}

func (i SslCertificateSelfManagedSslCertificateResponseArgs) ToSslCertificateSelfManagedSslCertificateResponsePtrOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateSelfManagedSslCertificateResponseOutput).ToSslCertificateSelfManagedSslCertificateResponsePtrOutputWithContext(ctx)
}

// SslCertificateSelfManagedSslCertificateResponsePtrInput is an input type that accepts SslCertificateSelfManagedSslCertificateResponseArgs, SslCertificateSelfManagedSslCertificateResponsePtr and SslCertificateSelfManagedSslCertificateResponsePtrOutput values.
// You can construct a concrete instance of `SslCertificateSelfManagedSslCertificateResponsePtrInput` via:
//
//          SslCertificateSelfManagedSslCertificateResponseArgs{...}
//
//  or:
//
//          nil
type SslCertificateSelfManagedSslCertificateResponsePtrInput interface {
	pulumi.Input

	ToSslCertificateSelfManagedSslCertificateResponsePtrOutput() SslCertificateSelfManagedSslCertificateResponsePtrOutput
	ToSslCertificateSelfManagedSslCertificateResponsePtrOutputWithContext(context.Context) SslCertificateSelfManagedSslCertificateResponsePtrOutput
}

type sslCertificateSelfManagedSslCertificateResponsePtrType SslCertificateSelfManagedSslCertificateResponseArgs

func SslCertificateSelfManagedSslCertificateResponsePtr(v *SslCertificateSelfManagedSslCertificateResponseArgs) SslCertificateSelfManagedSslCertificateResponsePtrInput {
	return (*sslCertificateSelfManagedSslCertificateResponsePtrType)(v)
}

func (*sslCertificateSelfManagedSslCertificateResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertificateSelfManagedSslCertificateResponse)(nil)).Elem()
}

func (i *sslCertificateSelfManagedSslCertificateResponsePtrType) ToSslCertificateSelfManagedSslCertificateResponsePtrOutput() SslCertificateSelfManagedSslCertificateResponsePtrOutput {
	return i.ToSslCertificateSelfManagedSslCertificateResponsePtrOutputWithContext(context.Background())
}

func (i *sslCertificateSelfManagedSslCertificateResponsePtrType) ToSslCertificateSelfManagedSslCertificateResponsePtrOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateSelfManagedSslCertificateResponsePtrOutput)
}

// Configuration and status of a self-managed SSL certificate.
type SslCertificateSelfManagedSslCertificateResponseOutput struct{ *pulumi.OutputState }

func (SslCertificateSelfManagedSslCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertificateSelfManagedSslCertificateResponse)(nil)).Elem()
}

func (o SslCertificateSelfManagedSslCertificateResponseOutput) ToSslCertificateSelfManagedSslCertificateResponseOutput() SslCertificateSelfManagedSslCertificateResponseOutput {
	return o
}

func (o SslCertificateSelfManagedSslCertificateResponseOutput) ToSslCertificateSelfManagedSslCertificateResponseOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificateResponseOutput {
	return o
}

func (o SslCertificateSelfManagedSslCertificateResponseOutput) ToSslCertificateSelfManagedSslCertificateResponsePtrOutput() SslCertificateSelfManagedSslCertificateResponsePtrOutput {
	return o.ToSslCertificateSelfManagedSslCertificateResponsePtrOutputWithContext(context.Background())
}

func (o SslCertificateSelfManagedSslCertificateResponseOutput) ToSslCertificateSelfManagedSslCertificateResponsePtrOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificateResponsePtrOutput {
	return o.ApplyT(func(v SslCertificateSelfManagedSslCertificateResponse) *SslCertificateSelfManagedSslCertificateResponse {
		return &v
	}).(SslCertificateSelfManagedSslCertificateResponsePtrOutput)
}

// A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
func (o SslCertificateSelfManagedSslCertificateResponseOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v SslCertificateSelfManagedSslCertificateResponse) string { return v.Certificate }).(pulumi.StringOutput)
}

// A write-only private key in PEM format. Only insert requests will include this field.
func (o SslCertificateSelfManagedSslCertificateResponseOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v SslCertificateSelfManagedSslCertificateResponse) string { return v.PrivateKey }).(pulumi.StringOutput)
}

type SslCertificateSelfManagedSslCertificateResponsePtrOutput struct{ *pulumi.OutputState }

func (SslCertificateSelfManagedSslCertificateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertificateSelfManagedSslCertificateResponse)(nil)).Elem()
}

func (o SslCertificateSelfManagedSslCertificateResponsePtrOutput) ToSslCertificateSelfManagedSslCertificateResponsePtrOutput() SslCertificateSelfManagedSslCertificateResponsePtrOutput {
	return o
}

func (o SslCertificateSelfManagedSslCertificateResponsePtrOutput) ToSslCertificateSelfManagedSslCertificateResponsePtrOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificateResponsePtrOutput {
	return o
}

func (o SslCertificateSelfManagedSslCertificateResponsePtrOutput) Elem() SslCertificateSelfManagedSslCertificateResponseOutput {
	return o.ApplyT(func(v *SslCertificateSelfManagedSslCertificateResponse) SslCertificateSelfManagedSslCertificateResponse {
		return *v
	}).(SslCertificateSelfManagedSslCertificateResponseOutput)
}

// A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
func (o SslCertificateSelfManagedSslCertificateResponsePtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertificateSelfManagedSslCertificateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Certificate
	}).(pulumi.StringPtrOutput)
}

// A write-only private key in PEM format. Only insert requests will include this field.
func (o SslCertificateSelfManagedSslCertificateResponsePtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertificateSelfManagedSslCertificateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

type SslPolicyWarningsItemDataItemResponse struct {
	// A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
	Key string `pulumi:"key"`
	// A warning data value corresponding to the key.
	Value string `pulumi:"value"`
}

// SslPolicyWarningsItemDataItemResponseInput is an input type that accepts SslPolicyWarningsItemDataItemResponseArgs and SslPolicyWarningsItemDataItemResponseOutput values.
// You can construct a concrete instance of `SslPolicyWarningsItemDataItemResponseInput` via:
//
//          SslPolicyWarningsItemDataItemResponseArgs{...}
type SslPolicyWarningsItemDataItemResponseInput interface {
	pulumi.Input

	ToSslPolicyWarningsItemDataItemResponseOutput() SslPolicyWarningsItemDataItemResponseOutput
	ToSslPolicyWarningsItemDataItemResponseOutputWithContext(context.Context) SslPolicyWarningsItemDataItemResponseOutput
}

type SslPolicyWarningsItemDataItemResponseArgs struct {
	// A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
	Key pulumi.StringInput `pulumi:"key"`
	// A warning data value corresponding to the key.
	Value pulumi.StringInput `pulumi:"value"`
}

func (SslPolicyWarningsItemDataItemResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslPolicyWarningsItemDataItemResponse)(nil)).Elem()
}

func (i SslPolicyWarningsItemDataItemResponseArgs) ToSslPolicyWarningsItemDataItemResponseOutput() SslPolicyWarningsItemDataItemResponseOutput {
	return i.ToSslPolicyWarningsItemDataItemResponseOutputWithContext(context.Background())
}

func (i SslPolicyWarningsItemDataItemResponseArgs) ToSslPolicyWarningsItemDataItemResponseOutputWithContext(ctx context.Context) SslPolicyWarningsItemDataItemResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslPolicyWarningsItemDataItemResponseOutput)
}

// SslPolicyWarningsItemDataItemResponseArrayInput is an input type that accepts SslPolicyWarningsItemDataItemResponseArray and SslPolicyWarningsItemDataItemResponseArrayOutput values.
// You can construct a concrete instance of `SslPolicyWarningsItemDataItemResponseArrayInput` via:
//
//          SslPolicyWarningsItemDataItemResponseArray{ SslPolicyWarningsItemDataItemResponseArgs{...} }
type SslPolicyWarningsItemDataItemResponseArrayInput interface {
	pulumi.Input

	ToSslPolicyWarningsItemDataItemResponseArrayOutput() SslPolicyWarningsItemDataItemResponseArrayOutput
	ToSslPolicyWarningsItemDataItemResponseArrayOutputWithContext(context.Context) SslPolicyWarningsItemDataItemResponseArrayOutput
}

type SslPolicyWarningsItemDataItemResponseArray []SslPolicyWarningsItemDataItemResponseInput

func (SslPolicyWarningsItemDataItemResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SslPolicyWarningsItemDataItemResponse)(nil)).Elem()
}

func (i SslPolicyWarningsItemDataItemResponseArray) ToSslPolicyWarningsItemDataItemResponseArrayOutput() SslPolicyWarningsItemDataItemResponseArrayOutput {
	return i.ToSslPolicyWarningsItemDataItemResponseArrayOutputWithContext(context.Background())
}

func (i SslPolicyWarningsItemDataItemResponseArray) ToSslPolicyWarningsItemDataItemResponseArrayOutputWithContext(ctx context.Context) SslPolicyWarningsItemDataItemResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslPolicyWarningsItemDataItemResponseArrayOutput)
}

type SslPolicyWarningsItemDataItemResponseOutput struct{ *pulumi.OutputState }

func (SslPolicyWarningsItemDataItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslPolicyWarningsItemDataItemResponse)(nil)).Elem()
}

func (o SslPolicyWarningsItemDataItemResponseOutput) ToSslPolicyWarningsItemDataItemResponseOutput() SslPolicyWarningsItemDataItemResponseOutput {
	return o
}

func (o SslPolicyWarningsItemDataItemResponseOutput) ToSslPolicyWarningsItemDataItemResponseOutputWithContext(ctx context.Context) SslPolicyWarningsItemDataItemResponseOutput {
	return o
}

// A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
func (o SslPolicyWarningsItemDataItemResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SslPolicyWarningsItemDataItemResponse) string { return v.Key }).(pulumi.StringOutput)
}

// A warning data value corresponding to the key.
func (o SslPolicyWarningsItemDataItemResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SslPolicyWarningsItemDataItemResponse) string { return v.Value }).(pulumi.StringOutput)
}

type SslPolicyWarningsItemDataItemResponseArrayOutput struct{ *pulumi.OutputState }

func (SslPolicyWarningsItemDataItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SslPolicyWarningsItemDataItemResponse)(nil)).Elem()
}

func (o SslPolicyWarningsItemDataItemResponseArrayOutput) ToSslPolicyWarningsItemDataItemResponseArrayOutput() SslPolicyWarningsItemDataItemResponseArrayOutput {
	return o
}

func (o SslPolicyWarningsItemDataItemResponseArrayOutput) ToSslPolicyWarningsItemDataItemResponseArrayOutputWithContext(ctx context.Context) SslPolicyWarningsItemDataItemResponseArrayOutput {
	return o
}

func (o SslPolicyWarningsItemDataItemResponseArrayOutput) Index(i pulumi.IntInput) SslPolicyWarningsItemDataItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SslPolicyWarningsItemDataItemResponse {
		return vs[0].([]SslPolicyWarningsItemDataItemResponse)[vs[1].(int)]
	}).(SslPolicyWarningsItemDataItemResponseOutput)
}

type SslPolicyWarningsItemResponse struct {
	// A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
	Code string `pulumi:"code"`
	// Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
	Data []SslPolicyWarningsItemDataItemResponse `pulumi:"data"`
	// A human-readable description of the warning code.
	Message string `pulumi:"message"`
}

// SslPolicyWarningsItemResponseInput is an input type that accepts SslPolicyWarningsItemResponseArgs and SslPolicyWarningsItemResponseOutput values.
// You can construct a concrete instance of `SslPolicyWarningsItemResponseInput` via:
//
//          SslPolicyWarningsItemResponseArgs{...}
type SslPolicyWarningsItemResponseInput interface {
	pulumi.Input

	ToSslPolicyWarningsItemResponseOutput() SslPolicyWarningsItemResponseOutput
	ToSslPolicyWarningsItemResponseOutputWithContext(context.Context) SslPolicyWarningsItemResponseOutput
}

type SslPolicyWarningsItemResponseArgs struct {
	// A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
	Code pulumi.StringInput `pulumi:"code"`
	// Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
	Data SslPolicyWarningsItemDataItemResponseArrayInput `pulumi:"data"`
	// A human-readable description of the warning code.
	Message pulumi.StringInput `pulumi:"message"`
}

func (SslPolicyWarningsItemResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslPolicyWarningsItemResponse)(nil)).Elem()
}

func (i SslPolicyWarningsItemResponseArgs) ToSslPolicyWarningsItemResponseOutput() SslPolicyWarningsItemResponseOutput {
	return i.ToSslPolicyWarningsItemResponseOutputWithContext(context.Background())
}

func (i SslPolicyWarningsItemResponseArgs) ToSslPolicyWarningsItemResponseOutputWithContext(ctx context.Context) SslPolicyWarningsItemResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslPolicyWarningsItemResponseOutput)
}

// SslPolicyWarningsItemResponseArrayInput is an input type that accepts SslPolicyWarningsItemResponseArray and SslPolicyWarningsItemResponseArrayOutput values.
// You can construct a concrete instance of `SslPolicyWarningsItemResponseArrayInput` via:
//
//          SslPolicyWarningsItemResponseArray{ SslPolicyWarningsItemResponseArgs{...} }
type SslPolicyWarningsItemResponseArrayInput interface {
	pulumi.Input

	ToSslPolicyWarningsItemResponseArrayOutput() SslPolicyWarningsItemResponseArrayOutput
	ToSslPolicyWarningsItemResponseArrayOutputWithContext(context.Context) SslPolicyWarningsItemResponseArrayOutput
}

type SslPolicyWarningsItemResponseArray []SslPolicyWarningsItemResponseInput

func (SslPolicyWarningsItemResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SslPolicyWarningsItemResponse)(nil)).Elem()
}

func (i SslPolicyWarningsItemResponseArray) ToSslPolicyWarningsItemResponseArrayOutput() SslPolicyWarningsItemResponseArrayOutput {
	return i.ToSslPolicyWarningsItemResponseArrayOutputWithContext(context.Background())
}

func (i SslPolicyWarningsItemResponseArray) ToSslPolicyWarningsItemResponseArrayOutputWithContext(ctx context.Context) SslPolicyWarningsItemResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslPolicyWarningsItemResponseArrayOutput)
}

type SslPolicyWarningsItemResponseOutput struct{ *pulumi.OutputState }

func (SslPolicyWarningsItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslPolicyWarningsItemResponse)(nil)).Elem()
}

func (o SslPolicyWarningsItemResponseOutput) ToSslPolicyWarningsItemResponseOutput() SslPolicyWarningsItemResponseOutput {
	return o
}

func (o SslPolicyWarningsItemResponseOutput) ToSslPolicyWarningsItemResponseOutputWithContext(ctx context.Context) SslPolicyWarningsItemResponseOutput {
	return o
}

// A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
func (o SslPolicyWarningsItemResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v SslPolicyWarningsItemResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
func (o SslPolicyWarningsItemResponseOutput) Data() SslPolicyWarningsItemDataItemResponseArrayOutput {
	return o.ApplyT(func(v SslPolicyWarningsItemResponse) []SslPolicyWarningsItemDataItemResponse { return v.Data }).(SslPolicyWarningsItemDataItemResponseArrayOutput)
}

// A human-readable description of the warning code.
func (o SslPolicyWarningsItemResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v SslPolicyWarningsItemResponse) string { return v.Message }).(pulumi.StringOutput)
}

type SslPolicyWarningsItemResponseArrayOutput struct{ *pulumi.OutputState }

func (SslPolicyWarningsItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SslPolicyWarningsItemResponse)(nil)).Elem()
}

func (o SslPolicyWarningsItemResponseArrayOutput) ToSslPolicyWarningsItemResponseArrayOutput() SslPolicyWarningsItemResponseArrayOutput {
	return o
}

func (o SslPolicyWarningsItemResponseArrayOutput) ToSslPolicyWarningsItemResponseArrayOutputWithContext(ctx context.Context) SslPolicyWarningsItemResponseArrayOutput {
	return o
}

func (o SslPolicyWarningsItemResponseArrayOutput) Index(i pulumi.IntInput) SslPolicyWarningsItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SslPolicyWarningsItemResponse {
		return vs[0].([]SslPolicyWarningsItemResponse)[vs[1].(int)]
	}).(SslPolicyWarningsItemResponseOutput)
}

type StatefulPolicy struct {
	PreservedState *StatefulPolicyPreservedState `pulumi:"preservedState"`
}

// StatefulPolicyInput is an input type that accepts StatefulPolicyArgs and StatefulPolicyOutput values.
// You can construct a concrete instance of `StatefulPolicyInput` via:
//
//          StatefulPolicyArgs{...}
type StatefulPolicyInput interface {
	pulumi.Input

	ToStatefulPolicyOutput() StatefulPolicyOutput
	ToStatefulPolicyOutputWithContext(context.Context) StatefulPolicyOutput
}

type StatefulPolicyArgs struct {
	PreservedState StatefulPolicyPreservedStatePtrInput `pulumi:"preservedState"`
}

func (StatefulPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulPolicy)(nil)).Elem()
}

func (i StatefulPolicyArgs) ToStatefulPolicyOutput() StatefulPolicyOutput {
	return i.ToStatefulPolicyOutputWithContext(context.Background())
}

func (i StatefulPolicyArgs) ToStatefulPolicyOutputWithContext(ctx context.Context) StatefulPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyOutput)
}

func (i StatefulPolicyArgs) ToStatefulPolicyPtrOutput() StatefulPolicyPtrOutput {
	return i.ToStatefulPolicyPtrOutputWithContext(context.Background())
}

func (i StatefulPolicyArgs) ToStatefulPolicyPtrOutputWithContext(ctx context.Context) StatefulPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyOutput).ToStatefulPolicyPtrOutputWithContext(ctx)
}

// StatefulPolicyPtrInput is an input type that accepts StatefulPolicyArgs, StatefulPolicyPtr and StatefulPolicyPtrOutput values.
// You can construct a concrete instance of `StatefulPolicyPtrInput` via:
//
//          StatefulPolicyArgs{...}
//
//  or:
//
//          nil
type StatefulPolicyPtrInput interface {
	pulumi.Input

	ToStatefulPolicyPtrOutput() StatefulPolicyPtrOutput
	ToStatefulPolicyPtrOutputWithContext(context.Context) StatefulPolicyPtrOutput
}

type statefulPolicyPtrType StatefulPolicyArgs

func StatefulPolicyPtr(v *StatefulPolicyArgs) StatefulPolicyPtrInput {
	return (*statefulPolicyPtrType)(v)
}

func (*statefulPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulPolicy)(nil)).Elem()
}

func (i *statefulPolicyPtrType) ToStatefulPolicyPtrOutput() StatefulPolicyPtrOutput {
	return i.ToStatefulPolicyPtrOutputWithContext(context.Background())
}

func (i *statefulPolicyPtrType) ToStatefulPolicyPtrOutputWithContext(ctx context.Context) StatefulPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyPtrOutput)
}

type StatefulPolicyOutput struct{ *pulumi.OutputState }

func (StatefulPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulPolicy)(nil)).Elem()
}

func (o StatefulPolicyOutput) ToStatefulPolicyOutput() StatefulPolicyOutput {
	return o
}

func (o StatefulPolicyOutput) ToStatefulPolicyOutputWithContext(ctx context.Context) StatefulPolicyOutput {
	return o
}

func (o StatefulPolicyOutput) ToStatefulPolicyPtrOutput() StatefulPolicyPtrOutput {
	return o.ToStatefulPolicyPtrOutputWithContext(context.Background())
}

func (o StatefulPolicyOutput) ToStatefulPolicyPtrOutputWithContext(ctx context.Context) StatefulPolicyPtrOutput {
	return o.ApplyT(func(v StatefulPolicy) *StatefulPolicy {
		return &v
	}).(StatefulPolicyPtrOutput)
}
func (o StatefulPolicyOutput) PreservedState() StatefulPolicyPreservedStatePtrOutput {
	return o.ApplyT(func(v StatefulPolicy) *StatefulPolicyPreservedState { return v.PreservedState }).(StatefulPolicyPreservedStatePtrOutput)
}

type StatefulPolicyPtrOutput struct{ *pulumi.OutputState }

func (StatefulPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulPolicy)(nil)).Elem()
}

func (o StatefulPolicyPtrOutput) ToStatefulPolicyPtrOutput() StatefulPolicyPtrOutput {
	return o
}

func (o StatefulPolicyPtrOutput) ToStatefulPolicyPtrOutputWithContext(ctx context.Context) StatefulPolicyPtrOutput {
	return o
}

func (o StatefulPolicyPtrOutput) Elem() StatefulPolicyOutput {
	return o.ApplyT(func(v *StatefulPolicy) StatefulPolicy { return *v }).(StatefulPolicyOutput)
}

func (o StatefulPolicyPtrOutput) PreservedState() StatefulPolicyPreservedStatePtrOutput {
	return o.ApplyT(func(v *StatefulPolicy) *StatefulPolicyPreservedState {
		if v == nil {
			return nil
		}
		return v.PreservedState
	}).(StatefulPolicyPreservedStatePtrOutput)
}

// Configuration of preserved resources.
type StatefulPolicyPreservedState struct {
	// Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
	Disks map[string]string `pulumi:"disks"`
}

// StatefulPolicyPreservedStateInput is an input type that accepts StatefulPolicyPreservedStateArgs and StatefulPolicyPreservedStateOutput values.
// You can construct a concrete instance of `StatefulPolicyPreservedStateInput` via:
//
//          StatefulPolicyPreservedStateArgs{...}
type StatefulPolicyPreservedStateInput interface {
	pulumi.Input

	ToStatefulPolicyPreservedStateOutput() StatefulPolicyPreservedStateOutput
	ToStatefulPolicyPreservedStateOutputWithContext(context.Context) StatefulPolicyPreservedStateOutput
}

// Configuration of preserved resources.
type StatefulPolicyPreservedStateArgs struct {
	// Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
	Disks pulumi.StringMapInput `pulumi:"disks"`
}

func (StatefulPolicyPreservedStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulPolicyPreservedState)(nil)).Elem()
}

func (i StatefulPolicyPreservedStateArgs) ToStatefulPolicyPreservedStateOutput() StatefulPolicyPreservedStateOutput {
	return i.ToStatefulPolicyPreservedStateOutputWithContext(context.Background())
}

func (i StatefulPolicyPreservedStateArgs) ToStatefulPolicyPreservedStateOutputWithContext(ctx context.Context) StatefulPolicyPreservedStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyPreservedStateOutput)
}

func (i StatefulPolicyPreservedStateArgs) ToStatefulPolicyPreservedStatePtrOutput() StatefulPolicyPreservedStatePtrOutput {
	return i.ToStatefulPolicyPreservedStatePtrOutputWithContext(context.Background())
}

func (i StatefulPolicyPreservedStateArgs) ToStatefulPolicyPreservedStatePtrOutputWithContext(ctx context.Context) StatefulPolicyPreservedStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyPreservedStateOutput).ToStatefulPolicyPreservedStatePtrOutputWithContext(ctx)
}

// StatefulPolicyPreservedStatePtrInput is an input type that accepts StatefulPolicyPreservedStateArgs, StatefulPolicyPreservedStatePtr and StatefulPolicyPreservedStatePtrOutput values.
// You can construct a concrete instance of `StatefulPolicyPreservedStatePtrInput` via:
//
//          StatefulPolicyPreservedStateArgs{...}
//
//  or:
//
//          nil
type StatefulPolicyPreservedStatePtrInput interface {
	pulumi.Input

	ToStatefulPolicyPreservedStatePtrOutput() StatefulPolicyPreservedStatePtrOutput
	ToStatefulPolicyPreservedStatePtrOutputWithContext(context.Context) StatefulPolicyPreservedStatePtrOutput
}

type statefulPolicyPreservedStatePtrType StatefulPolicyPreservedStateArgs

func StatefulPolicyPreservedStatePtr(v *StatefulPolicyPreservedStateArgs) StatefulPolicyPreservedStatePtrInput {
	return (*statefulPolicyPreservedStatePtrType)(v)
}

func (*statefulPolicyPreservedStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulPolicyPreservedState)(nil)).Elem()
}

func (i *statefulPolicyPreservedStatePtrType) ToStatefulPolicyPreservedStatePtrOutput() StatefulPolicyPreservedStatePtrOutput {
	return i.ToStatefulPolicyPreservedStatePtrOutputWithContext(context.Background())
}

func (i *statefulPolicyPreservedStatePtrType) ToStatefulPolicyPreservedStatePtrOutputWithContext(ctx context.Context) StatefulPolicyPreservedStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyPreservedStatePtrOutput)
}

// Configuration of preserved resources.
type StatefulPolicyPreservedStateOutput struct{ *pulumi.OutputState }

func (StatefulPolicyPreservedStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulPolicyPreservedState)(nil)).Elem()
}

func (o StatefulPolicyPreservedStateOutput) ToStatefulPolicyPreservedStateOutput() StatefulPolicyPreservedStateOutput {
	return o
}

func (o StatefulPolicyPreservedStateOutput) ToStatefulPolicyPreservedStateOutputWithContext(ctx context.Context) StatefulPolicyPreservedStateOutput {
	return o
}

func (o StatefulPolicyPreservedStateOutput) ToStatefulPolicyPreservedStatePtrOutput() StatefulPolicyPreservedStatePtrOutput {
	return o.ToStatefulPolicyPreservedStatePtrOutputWithContext(context.Background())
}

func (o StatefulPolicyPreservedStateOutput) ToStatefulPolicyPreservedStatePtrOutputWithContext(ctx context.Context) StatefulPolicyPreservedStatePtrOutput {
	return o.ApplyT(func(v StatefulPolicyPreservedState) *StatefulPolicyPreservedState {
		return &v
	}).(StatefulPolicyPreservedStatePtrOutput)
}

// Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
func (o StatefulPolicyPreservedStateOutput) Disks() pulumi.StringMapOutput {
	return o.ApplyT(func(v StatefulPolicyPreservedState) map[string]string { return v.Disks }).(pulumi.StringMapOutput)
}

type StatefulPolicyPreservedStatePtrOutput struct{ *pulumi.OutputState }

func (StatefulPolicyPreservedStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulPolicyPreservedState)(nil)).Elem()
}

func (o StatefulPolicyPreservedStatePtrOutput) ToStatefulPolicyPreservedStatePtrOutput() StatefulPolicyPreservedStatePtrOutput {
	return o
}

func (o StatefulPolicyPreservedStatePtrOutput) ToStatefulPolicyPreservedStatePtrOutputWithContext(ctx context.Context) StatefulPolicyPreservedStatePtrOutput {
	return o
}

func (o StatefulPolicyPreservedStatePtrOutput) Elem() StatefulPolicyPreservedStateOutput {
	return o.ApplyT(func(v *StatefulPolicyPreservedState) StatefulPolicyPreservedState { return *v }).(StatefulPolicyPreservedStateOutput)
}

// Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
func (o StatefulPolicyPreservedStatePtrOutput) Disks() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StatefulPolicyPreservedState) map[string]string {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(pulumi.StringMapOutput)
}

// Configuration of preserved resources.
type StatefulPolicyPreservedStateResponse struct {
	// Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
	Disks map[string]string `pulumi:"disks"`
}

// StatefulPolicyPreservedStateResponseInput is an input type that accepts StatefulPolicyPreservedStateResponseArgs and StatefulPolicyPreservedStateResponseOutput values.
// You can construct a concrete instance of `StatefulPolicyPreservedStateResponseInput` via:
//
//          StatefulPolicyPreservedStateResponseArgs{...}
type StatefulPolicyPreservedStateResponseInput interface {
	pulumi.Input

	ToStatefulPolicyPreservedStateResponseOutput() StatefulPolicyPreservedStateResponseOutput
	ToStatefulPolicyPreservedStateResponseOutputWithContext(context.Context) StatefulPolicyPreservedStateResponseOutput
}

// Configuration of preserved resources.
type StatefulPolicyPreservedStateResponseArgs struct {
	// Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
	Disks pulumi.StringMapInput `pulumi:"disks"`
}

func (StatefulPolicyPreservedStateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulPolicyPreservedStateResponse)(nil)).Elem()
}

func (i StatefulPolicyPreservedStateResponseArgs) ToStatefulPolicyPreservedStateResponseOutput() StatefulPolicyPreservedStateResponseOutput {
	return i.ToStatefulPolicyPreservedStateResponseOutputWithContext(context.Background())
}

func (i StatefulPolicyPreservedStateResponseArgs) ToStatefulPolicyPreservedStateResponseOutputWithContext(ctx context.Context) StatefulPolicyPreservedStateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyPreservedStateResponseOutput)
}

func (i StatefulPolicyPreservedStateResponseArgs) ToStatefulPolicyPreservedStateResponsePtrOutput() StatefulPolicyPreservedStateResponsePtrOutput {
	return i.ToStatefulPolicyPreservedStateResponsePtrOutputWithContext(context.Background())
}

func (i StatefulPolicyPreservedStateResponseArgs) ToStatefulPolicyPreservedStateResponsePtrOutputWithContext(ctx context.Context) StatefulPolicyPreservedStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyPreservedStateResponseOutput).ToStatefulPolicyPreservedStateResponsePtrOutputWithContext(ctx)
}

// StatefulPolicyPreservedStateResponsePtrInput is an input type that accepts StatefulPolicyPreservedStateResponseArgs, StatefulPolicyPreservedStateResponsePtr and StatefulPolicyPreservedStateResponsePtrOutput values.
// You can construct a concrete instance of `StatefulPolicyPreservedStateResponsePtrInput` via:
//
//          StatefulPolicyPreservedStateResponseArgs{...}
//
//  or:
//
//          nil
type StatefulPolicyPreservedStateResponsePtrInput interface {
	pulumi.Input

	ToStatefulPolicyPreservedStateResponsePtrOutput() StatefulPolicyPreservedStateResponsePtrOutput
	ToStatefulPolicyPreservedStateResponsePtrOutputWithContext(context.Context) StatefulPolicyPreservedStateResponsePtrOutput
}

type statefulPolicyPreservedStateResponsePtrType StatefulPolicyPreservedStateResponseArgs

func StatefulPolicyPreservedStateResponsePtr(v *StatefulPolicyPreservedStateResponseArgs) StatefulPolicyPreservedStateResponsePtrInput {
	return (*statefulPolicyPreservedStateResponsePtrType)(v)
}

func (*statefulPolicyPreservedStateResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulPolicyPreservedStateResponse)(nil)).Elem()
}

func (i *statefulPolicyPreservedStateResponsePtrType) ToStatefulPolicyPreservedStateResponsePtrOutput() StatefulPolicyPreservedStateResponsePtrOutput {
	return i.ToStatefulPolicyPreservedStateResponsePtrOutputWithContext(context.Background())
}

func (i *statefulPolicyPreservedStateResponsePtrType) ToStatefulPolicyPreservedStateResponsePtrOutputWithContext(ctx context.Context) StatefulPolicyPreservedStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyPreservedStateResponsePtrOutput)
}

// Configuration of preserved resources.
type StatefulPolicyPreservedStateResponseOutput struct{ *pulumi.OutputState }

func (StatefulPolicyPreservedStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulPolicyPreservedStateResponse)(nil)).Elem()
}

func (o StatefulPolicyPreservedStateResponseOutput) ToStatefulPolicyPreservedStateResponseOutput() StatefulPolicyPreservedStateResponseOutput {
	return o
}

func (o StatefulPolicyPreservedStateResponseOutput) ToStatefulPolicyPreservedStateResponseOutputWithContext(ctx context.Context) StatefulPolicyPreservedStateResponseOutput {
	return o
}

func (o StatefulPolicyPreservedStateResponseOutput) ToStatefulPolicyPreservedStateResponsePtrOutput() StatefulPolicyPreservedStateResponsePtrOutput {
	return o.ToStatefulPolicyPreservedStateResponsePtrOutputWithContext(context.Background())
}

func (o StatefulPolicyPreservedStateResponseOutput) ToStatefulPolicyPreservedStateResponsePtrOutputWithContext(ctx context.Context) StatefulPolicyPreservedStateResponsePtrOutput {
	return o.ApplyT(func(v StatefulPolicyPreservedStateResponse) *StatefulPolicyPreservedStateResponse {
		return &v
	}).(StatefulPolicyPreservedStateResponsePtrOutput)
}

// Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
func (o StatefulPolicyPreservedStateResponseOutput) Disks() pulumi.StringMapOutput {
	return o.ApplyT(func(v StatefulPolicyPreservedStateResponse) map[string]string { return v.Disks }).(pulumi.StringMapOutput)
}

type StatefulPolicyPreservedStateResponsePtrOutput struct{ *pulumi.OutputState }

func (StatefulPolicyPreservedStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulPolicyPreservedStateResponse)(nil)).Elem()
}

func (o StatefulPolicyPreservedStateResponsePtrOutput) ToStatefulPolicyPreservedStateResponsePtrOutput() StatefulPolicyPreservedStateResponsePtrOutput {
	return o
}

func (o StatefulPolicyPreservedStateResponsePtrOutput) ToStatefulPolicyPreservedStateResponsePtrOutputWithContext(ctx context.Context) StatefulPolicyPreservedStateResponsePtrOutput {
	return o
}

func (o StatefulPolicyPreservedStateResponsePtrOutput) Elem() StatefulPolicyPreservedStateResponseOutput {
	return o.ApplyT(func(v *StatefulPolicyPreservedStateResponse) StatefulPolicyPreservedStateResponse { return *v }).(StatefulPolicyPreservedStateResponseOutput)
}

// Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
func (o StatefulPolicyPreservedStateResponsePtrOutput) Disks() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StatefulPolicyPreservedStateResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(pulumi.StringMapOutput)
}

type StatefulPolicyResponse struct {
	PreservedState StatefulPolicyPreservedStateResponse `pulumi:"preservedState"`
}

// StatefulPolicyResponseInput is an input type that accepts StatefulPolicyResponseArgs and StatefulPolicyResponseOutput values.
// You can construct a concrete instance of `StatefulPolicyResponseInput` via:
//
//          StatefulPolicyResponseArgs{...}
type StatefulPolicyResponseInput interface {
	pulumi.Input

	ToStatefulPolicyResponseOutput() StatefulPolicyResponseOutput
	ToStatefulPolicyResponseOutputWithContext(context.Context) StatefulPolicyResponseOutput
}

type StatefulPolicyResponseArgs struct {
	PreservedState StatefulPolicyPreservedStateResponseInput `pulumi:"preservedState"`
}

func (StatefulPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulPolicyResponse)(nil)).Elem()
}

func (i StatefulPolicyResponseArgs) ToStatefulPolicyResponseOutput() StatefulPolicyResponseOutput {
	return i.ToStatefulPolicyResponseOutputWithContext(context.Background())
}

func (i StatefulPolicyResponseArgs) ToStatefulPolicyResponseOutputWithContext(ctx context.Context) StatefulPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyResponseOutput)
}

func (i StatefulPolicyResponseArgs) ToStatefulPolicyResponsePtrOutput() StatefulPolicyResponsePtrOutput {
	return i.ToStatefulPolicyResponsePtrOutputWithContext(context.Background())
}

func (i StatefulPolicyResponseArgs) ToStatefulPolicyResponsePtrOutputWithContext(ctx context.Context) StatefulPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyResponseOutput).ToStatefulPolicyResponsePtrOutputWithContext(ctx)
}

// StatefulPolicyResponsePtrInput is an input type that accepts StatefulPolicyResponseArgs, StatefulPolicyResponsePtr and StatefulPolicyResponsePtrOutput values.
// You can construct a concrete instance of `StatefulPolicyResponsePtrInput` via:
//
//          StatefulPolicyResponseArgs{...}
//
//  or:
//
//          nil
type StatefulPolicyResponsePtrInput interface {
	pulumi.Input

	ToStatefulPolicyResponsePtrOutput() StatefulPolicyResponsePtrOutput
	ToStatefulPolicyResponsePtrOutputWithContext(context.Context) StatefulPolicyResponsePtrOutput
}

type statefulPolicyResponsePtrType StatefulPolicyResponseArgs

func StatefulPolicyResponsePtr(v *StatefulPolicyResponseArgs) StatefulPolicyResponsePtrInput {
	return (*statefulPolicyResponsePtrType)(v)
}

func (*statefulPolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulPolicyResponse)(nil)).Elem()
}

func (i *statefulPolicyResponsePtrType) ToStatefulPolicyResponsePtrOutput() StatefulPolicyResponsePtrOutput {
	return i.ToStatefulPolicyResponsePtrOutputWithContext(context.Background())
}

func (i *statefulPolicyResponsePtrType) ToStatefulPolicyResponsePtrOutputWithContext(ctx context.Context) StatefulPolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyResponsePtrOutput)
}

type StatefulPolicyResponseOutput struct{ *pulumi.OutputState }

func (StatefulPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulPolicyResponse)(nil)).Elem()
}

func (o StatefulPolicyResponseOutput) ToStatefulPolicyResponseOutput() StatefulPolicyResponseOutput {
	return o
}

func (o StatefulPolicyResponseOutput) ToStatefulPolicyResponseOutputWithContext(ctx context.Context) StatefulPolicyResponseOutput {
	return o
}

func (o StatefulPolicyResponseOutput) ToStatefulPolicyResponsePtrOutput() StatefulPolicyResponsePtrOutput {
	return o.ToStatefulPolicyResponsePtrOutputWithContext(context.Background())
}

func (o StatefulPolicyResponseOutput) ToStatefulPolicyResponsePtrOutputWithContext(ctx context.Context) StatefulPolicyResponsePtrOutput {
	return o.ApplyT(func(v StatefulPolicyResponse) *StatefulPolicyResponse {
		return &v
	}).(StatefulPolicyResponsePtrOutput)
}
func (o StatefulPolicyResponseOutput) PreservedState() StatefulPolicyPreservedStateResponseOutput {
	return o.ApplyT(func(v StatefulPolicyResponse) StatefulPolicyPreservedStateResponse { return v.PreservedState }).(StatefulPolicyPreservedStateResponseOutput)
}

type StatefulPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (StatefulPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulPolicyResponse)(nil)).Elem()
}

func (o StatefulPolicyResponsePtrOutput) ToStatefulPolicyResponsePtrOutput() StatefulPolicyResponsePtrOutput {
	return o
}

func (o StatefulPolicyResponsePtrOutput) ToStatefulPolicyResponsePtrOutputWithContext(ctx context.Context) StatefulPolicyResponsePtrOutput {
	return o
}

func (o StatefulPolicyResponsePtrOutput) Elem() StatefulPolicyResponseOutput {
	return o.ApplyT(func(v *StatefulPolicyResponse) StatefulPolicyResponse { return *v }).(StatefulPolicyResponseOutput)
}

func (o StatefulPolicyResponsePtrOutput) PreservedState() StatefulPolicyPreservedStateResponsePtrOutput {
	return o.ApplyT(func(v *StatefulPolicyResponse) *StatefulPolicyPreservedStateResponse {
		if v == nil {
			return nil
		}
		return &v.PreservedState
	}).(StatefulPolicyPreservedStateResponsePtrOutput)
}

// The available logging options for this subnetwork.
type SubnetworkLogConfig struct {
	// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
	AggregationInterval *string `pulumi:"aggregationInterval"`
	// Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is to disable flow logging.
	Enable *bool `pulumi:"enable"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled. Export filter used to define which VPC flow logs should be logged.
	FilterExpr *string `pulumi:"filterExpr"`
	// Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5, which means half of all collected logs are reported.
	FlowSampling *float64 `pulumi:"flowSampling"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
	Metadata *string `pulumi:"metadata"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA.
	MetadataFields []string `pulumi:"metadataFields"`
}

// SubnetworkLogConfigInput is an input type that accepts SubnetworkLogConfigArgs and SubnetworkLogConfigOutput values.
// You can construct a concrete instance of `SubnetworkLogConfigInput` via:
//
//          SubnetworkLogConfigArgs{...}
type SubnetworkLogConfigInput interface {
	pulumi.Input

	ToSubnetworkLogConfigOutput() SubnetworkLogConfigOutput
	ToSubnetworkLogConfigOutputWithContext(context.Context) SubnetworkLogConfigOutput
}

// The available logging options for this subnetwork.
type SubnetworkLogConfigArgs struct {
	// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
	AggregationInterval *SubnetworkLogConfigAggregationInterval `pulumi:"aggregationInterval"`
	// Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is to disable flow logging.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled. Export filter used to define which VPC flow logs should be logged.
	FilterExpr pulumi.StringPtrInput `pulumi:"filterExpr"`
	// Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5, which means half of all collected logs are reported.
	FlowSampling pulumi.Float64PtrInput `pulumi:"flowSampling"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
	Metadata *SubnetworkLogConfigMetadata `pulumi:"metadata"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA.
	MetadataFields pulumi.StringArrayInput `pulumi:"metadataFields"`
}

func (SubnetworkLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkLogConfig)(nil)).Elem()
}

func (i SubnetworkLogConfigArgs) ToSubnetworkLogConfigOutput() SubnetworkLogConfigOutput {
	return i.ToSubnetworkLogConfigOutputWithContext(context.Background())
}

func (i SubnetworkLogConfigArgs) ToSubnetworkLogConfigOutputWithContext(ctx context.Context) SubnetworkLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkLogConfigOutput)
}

func (i SubnetworkLogConfigArgs) ToSubnetworkLogConfigPtrOutput() SubnetworkLogConfigPtrOutput {
	return i.ToSubnetworkLogConfigPtrOutputWithContext(context.Background())
}

func (i SubnetworkLogConfigArgs) ToSubnetworkLogConfigPtrOutputWithContext(ctx context.Context) SubnetworkLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkLogConfigOutput).ToSubnetworkLogConfigPtrOutputWithContext(ctx)
}

// SubnetworkLogConfigPtrInput is an input type that accepts SubnetworkLogConfigArgs, SubnetworkLogConfigPtr and SubnetworkLogConfigPtrOutput values.
// You can construct a concrete instance of `SubnetworkLogConfigPtrInput` via:
//
//          SubnetworkLogConfigArgs{...}
//
//  or:
//
//          nil
type SubnetworkLogConfigPtrInput interface {
	pulumi.Input

	ToSubnetworkLogConfigPtrOutput() SubnetworkLogConfigPtrOutput
	ToSubnetworkLogConfigPtrOutputWithContext(context.Context) SubnetworkLogConfigPtrOutput
}

type subnetworkLogConfigPtrType SubnetworkLogConfigArgs

func SubnetworkLogConfigPtr(v *SubnetworkLogConfigArgs) SubnetworkLogConfigPtrInput {
	return (*subnetworkLogConfigPtrType)(v)
}

func (*subnetworkLogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetworkLogConfig)(nil)).Elem()
}

func (i *subnetworkLogConfigPtrType) ToSubnetworkLogConfigPtrOutput() SubnetworkLogConfigPtrOutput {
	return i.ToSubnetworkLogConfigPtrOutputWithContext(context.Background())
}

func (i *subnetworkLogConfigPtrType) ToSubnetworkLogConfigPtrOutputWithContext(ctx context.Context) SubnetworkLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkLogConfigPtrOutput)
}

// The available logging options for this subnetwork.
type SubnetworkLogConfigOutput struct{ *pulumi.OutputState }

func (SubnetworkLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkLogConfig)(nil)).Elem()
}

func (o SubnetworkLogConfigOutput) ToSubnetworkLogConfigOutput() SubnetworkLogConfigOutput {
	return o
}

func (o SubnetworkLogConfigOutput) ToSubnetworkLogConfigOutputWithContext(ctx context.Context) SubnetworkLogConfigOutput {
	return o
}

func (o SubnetworkLogConfigOutput) ToSubnetworkLogConfigPtrOutput() SubnetworkLogConfigPtrOutput {
	return o.ToSubnetworkLogConfigPtrOutputWithContext(context.Background())
}

func (o SubnetworkLogConfigOutput) ToSubnetworkLogConfigPtrOutputWithContext(ctx context.Context) SubnetworkLogConfigPtrOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) *SubnetworkLogConfig {
		return &v
	}).(SubnetworkLogConfigPtrOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
func (o SubnetworkLogConfigOutput) AggregationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) *string { return v.AggregationInterval }).(pulumi.StringPtrOutput)
}

// Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is to disable flow logging.
func (o SubnetworkLogConfigOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled. Export filter used to define which VPC flow logs should be logged.
func (o SubnetworkLogConfigOutput) FilterExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) *string { return v.FilterExpr }).(pulumi.StringPtrOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5, which means half of all collected logs are reported.
func (o SubnetworkLogConfigOutput) FlowSampling() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) *float64 { return v.FlowSampling }).(pulumi.Float64PtrOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
func (o SubnetworkLogConfigOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA.
func (o SubnetworkLogConfigOutput) MetadataFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) []string { return v.MetadataFields }).(pulumi.StringArrayOutput)
}

type SubnetworkLogConfigPtrOutput struct{ *pulumi.OutputState }

func (SubnetworkLogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetworkLogConfig)(nil)).Elem()
}

func (o SubnetworkLogConfigPtrOutput) ToSubnetworkLogConfigPtrOutput() SubnetworkLogConfigPtrOutput {
	return o
}

func (o SubnetworkLogConfigPtrOutput) ToSubnetworkLogConfigPtrOutputWithContext(ctx context.Context) SubnetworkLogConfigPtrOutput {
	return o
}

func (o SubnetworkLogConfigPtrOutput) Elem() SubnetworkLogConfigOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) SubnetworkLogConfig { return *v }).(SubnetworkLogConfigOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
func (o SubnetworkLogConfigPtrOutput) AggregationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) *string {
		if v == nil {
			return nil
		}
		return v.AggregationInterval
	}).(pulumi.StringPtrOutput)
}

// Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is to disable flow logging.
func (o SubnetworkLogConfigPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled. Export filter used to define which VPC flow logs should be logged.
func (o SubnetworkLogConfigPtrOutput) FilterExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) *string {
		if v == nil {
			return nil
		}
		return v.FilterExpr
	}).(pulumi.StringPtrOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5, which means half of all collected logs are reported.
func (o SubnetworkLogConfigPtrOutput) FlowSampling() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.FlowSampling
	}).(pulumi.Float64PtrOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
func (o SubnetworkLogConfigPtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) *string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringPtrOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA.
func (o SubnetworkLogConfigPtrOutput) MetadataFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) []string {
		if v == nil {
			return nil
		}
		return v.MetadataFields
	}).(pulumi.StringArrayOutput)
}

// The available logging options for this subnetwork.
type SubnetworkLogConfigResponse struct {
	// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
	AggregationInterval string `pulumi:"aggregationInterval"`
	// Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is to disable flow logging.
	Enable bool `pulumi:"enable"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled. Export filter used to define which VPC flow logs should be logged.
	FilterExpr string `pulumi:"filterExpr"`
	// Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5, which means half of all collected logs are reported.
	FlowSampling float64 `pulumi:"flowSampling"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
	Metadata string `pulumi:"metadata"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA.
	MetadataFields []string `pulumi:"metadataFields"`
}

// SubnetworkLogConfigResponseInput is an input type that accepts SubnetworkLogConfigResponseArgs and SubnetworkLogConfigResponseOutput values.
// You can construct a concrete instance of `SubnetworkLogConfigResponseInput` via:
//
//          SubnetworkLogConfigResponseArgs{...}
type SubnetworkLogConfigResponseInput interface {
	pulumi.Input

	ToSubnetworkLogConfigResponseOutput() SubnetworkLogConfigResponseOutput
	ToSubnetworkLogConfigResponseOutputWithContext(context.Context) SubnetworkLogConfigResponseOutput
}

// The available logging options for this subnetwork.
type SubnetworkLogConfigResponseArgs struct {
	// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
	AggregationInterval pulumi.StringInput `pulumi:"aggregationInterval"`
	// Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is to disable flow logging.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled. Export filter used to define which VPC flow logs should be logged.
	FilterExpr pulumi.StringInput `pulumi:"filterExpr"`
	// Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5, which means half of all collected logs are reported.
	FlowSampling pulumi.Float64Input `pulumi:"flowSampling"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
	Metadata pulumi.StringInput `pulumi:"metadata"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA.
	MetadataFields pulumi.StringArrayInput `pulumi:"metadataFields"`
}

func (SubnetworkLogConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkLogConfigResponse)(nil)).Elem()
}

func (i SubnetworkLogConfigResponseArgs) ToSubnetworkLogConfigResponseOutput() SubnetworkLogConfigResponseOutput {
	return i.ToSubnetworkLogConfigResponseOutputWithContext(context.Background())
}

func (i SubnetworkLogConfigResponseArgs) ToSubnetworkLogConfigResponseOutputWithContext(ctx context.Context) SubnetworkLogConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkLogConfigResponseOutput)
}

func (i SubnetworkLogConfigResponseArgs) ToSubnetworkLogConfigResponsePtrOutput() SubnetworkLogConfigResponsePtrOutput {
	return i.ToSubnetworkLogConfigResponsePtrOutputWithContext(context.Background())
}

func (i SubnetworkLogConfigResponseArgs) ToSubnetworkLogConfigResponsePtrOutputWithContext(ctx context.Context) SubnetworkLogConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkLogConfigResponseOutput).ToSubnetworkLogConfigResponsePtrOutputWithContext(ctx)
}

// SubnetworkLogConfigResponsePtrInput is an input type that accepts SubnetworkLogConfigResponseArgs, SubnetworkLogConfigResponsePtr and SubnetworkLogConfigResponsePtrOutput values.
// You can construct a concrete instance of `SubnetworkLogConfigResponsePtrInput` via:
//
//          SubnetworkLogConfigResponseArgs{...}
//
//  or:
//
//          nil
type SubnetworkLogConfigResponsePtrInput interface {
	pulumi.Input

	ToSubnetworkLogConfigResponsePtrOutput() SubnetworkLogConfigResponsePtrOutput
	ToSubnetworkLogConfigResponsePtrOutputWithContext(context.Context) SubnetworkLogConfigResponsePtrOutput
}

type subnetworkLogConfigResponsePtrType SubnetworkLogConfigResponseArgs

func SubnetworkLogConfigResponsePtr(v *SubnetworkLogConfigResponseArgs) SubnetworkLogConfigResponsePtrInput {
	return (*subnetworkLogConfigResponsePtrType)(v)
}

func (*subnetworkLogConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetworkLogConfigResponse)(nil)).Elem()
}

func (i *subnetworkLogConfigResponsePtrType) ToSubnetworkLogConfigResponsePtrOutput() SubnetworkLogConfigResponsePtrOutput {
	return i.ToSubnetworkLogConfigResponsePtrOutputWithContext(context.Background())
}

func (i *subnetworkLogConfigResponsePtrType) ToSubnetworkLogConfigResponsePtrOutputWithContext(ctx context.Context) SubnetworkLogConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkLogConfigResponsePtrOutput)
}

// The available logging options for this subnetwork.
type SubnetworkLogConfigResponseOutput struct{ *pulumi.OutputState }

func (SubnetworkLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkLogConfigResponse)(nil)).Elem()
}

func (o SubnetworkLogConfigResponseOutput) ToSubnetworkLogConfigResponseOutput() SubnetworkLogConfigResponseOutput {
	return o
}

func (o SubnetworkLogConfigResponseOutput) ToSubnetworkLogConfigResponseOutputWithContext(ctx context.Context) SubnetworkLogConfigResponseOutput {
	return o
}

func (o SubnetworkLogConfigResponseOutput) ToSubnetworkLogConfigResponsePtrOutput() SubnetworkLogConfigResponsePtrOutput {
	return o.ToSubnetworkLogConfigResponsePtrOutputWithContext(context.Background())
}

func (o SubnetworkLogConfigResponseOutput) ToSubnetworkLogConfigResponsePtrOutputWithContext(ctx context.Context) SubnetworkLogConfigResponsePtrOutput {
	return o.ApplyT(func(v SubnetworkLogConfigResponse) *SubnetworkLogConfigResponse {
		return &v
	}).(SubnetworkLogConfigResponsePtrOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
func (o SubnetworkLogConfigResponseOutput) AggregationInterval() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkLogConfigResponse) string { return v.AggregationInterval }).(pulumi.StringOutput)
}

// Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is to disable flow logging.
func (o SubnetworkLogConfigResponseOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v SubnetworkLogConfigResponse) bool { return v.Enable }).(pulumi.BoolOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled. Export filter used to define which VPC flow logs should be logged.
func (o SubnetworkLogConfigResponseOutput) FilterExpr() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkLogConfigResponse) string { return v.FilterExpr }).(pulumi.StringOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5, which means half of all collected logs are reported.
func (o SubnetworkLogConfigResponseOutput) FlowSampling() pulumi.Float64Output {
	return o.ApplyT(func(v SubnetworkLogConfigResponse) float64 { return v.FlowSampling }).(pulumi.Float64Output)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
func (o SubnetworkLogConfigResponseOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkLogConfigResponse) string { return v.Metadata }).(pulumi.StringOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA.
func (o SubnetworkLogConfigResponseOutput) MetadataFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubnetworkLogConfigResponse) []string { return v.MetadataFields }).(pulumi.StringArrayOutput)
}

type SubnetworkLogConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (SubnetworkLogConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetworkLogConfigResponse)(nil)).Elem()
}

func (o SubnetworkLogConfigResponsePtrOutput) ToSubnetworkLogConfigResponsePtrOutput() SubnetworkLogConfigResponsePtrOutput {
	return o
}

func (o SubnetworkLogConfigResponsePtrOutput) ToSubnetworkLogConfigResponsePtrOutputWithContext(ctx context.Context) SubnetworkLogConfigResponsePtrOutput {
	return o
}

func (o SubnetworkLogConfigResponsePtrOutput) Elem() SubnetworkLogConfigResponseOutput {
	return o.ApplyT(func(v *SubnetworkLogConfigResponse) SubnetworkLogConfigResponse { return *v }).(SubnetworkLogConfigResponseOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
func (o SubnetworkLogConfigResponsePtrOutput) AggregationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AggregationInterval
	}).(pulumi.StringPtrOutput)
}

// Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is to disable flow logging.
func (o SubnetworkLogConfigResponsePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled. Export filter used to define which VPC flow logs should be logged.
func (o SubnetworkLogConfigResponsePtrOutput) FilterExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FilterExpr
	}).(pulumi.StringPtrOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5, which means half of all collected logs are reported.
func (o SubnetworkLogConfigResponsePtrOutput) FlowSampling() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfigResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.FlowSampling
	}).(pulumi.Float64PtrOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
func (o SubnetworkLogConfigResponsePtrOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Metadata
	}).(pulumi.StringPtrOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA.
func (o SubnetworkLogConfigResponsePtrOutput) MetadataFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubnetworkLogConfigResponse) []string {
		if v == nil {
			return nil
		}
		return v.MetadataFields
	}).(pulumi.StringArrayOutput)
}

// Represents a secondary IP range of a subnetwork.
type SubnetworkSecondaryRange struct {
	// The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
	IpCidrRange *string `pulumi:"ipCidrRange"`
	// The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
	RangeName *string `pulumi:"rangeName"`
}

// SubnetworkSecondaryRangeInput is an input type that accepts SubnetworkSecondaryRangeArgs and SubnetworkSecondaryRangeOutput values.
// You can construct a concrete instance of `SubnetworkSecondaryRangeInput` via:
//
//          SubnetworkSecondaryRangeArgs{...}
type SubnetworkSecondaryRangeInput interface {
	pulumi.Input

	ToSubnetworkSecondaryRangeOutput() SubnetworkSecondaryRangeOutput
	ToSubnetworkSecondaryRangeOutputWithContext(context.Context) SubnetworkSecondaryRangeOutput
}

// Represents a secondary IP range of a subnetwork.
type SubnetworkSecondaryRangeArgs struct {
	// The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
	IpCidrRange pulumi.StringPtrInput `pulumi:"ipCidrRange"`
	// The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
	RangeName pulumi.StringPtrInput `pulumi:"rangeName"`
}

func (SubnetworkSecondaryRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkSecondaryRange)(nil)).Elem()
}

func (i SubnetworkSecondaryRangeArgs) ToSubnetworkSecondaryRangeOutput() SubnetworkSecondaryRangeOutput {
	return i.ToSubnetworkSecondaryRangeOutputWithContext(context.Background())
}

func (i SubnetworkSecondaryRangeArgs) ToSubnetworkSecondaryRangeOutputWithContext(ctx context.Context) SubnetworkSecondaryRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkSecondaryRangeOutput)
}

// SubnetworkSecondaryRangeArrayInput is an input type that accepts SubnetworkSecondaryRangeArray and SubnetworkSecondaryRangeArrayOutput values.
// You can construct a concrete instance of `SubnetworkSecondaryRangeArrayInput` via:
//
//          SubnetworkSecondaryRangeArray{ SubnetworkSecondaryRangeArgs{...} }
type SubnetworkSecondaryRangeArrayInput interface {
	pulumi.Input

	ToSubnetworkSecondaryRangeArrayOutput() SubnetworkSecondaryRangeArrayOutput
	ToSubnetworkSecondaryRangeArrayOutputWithContext(context.Context) SubnetworkSecondaryRangeArrayOutput
}

type SubnetworkSecondaryRangeArray []SubnetworkSecondaryRangeInput

func (SubnetworkSecondaryRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetworkSecondaryRange)(nil)).Elem()
}

func (i SubnetworkSecondaryRangeArray) ToSubnetworkSecondaryRangeArrayOutput() SubnetworkSecondaryRangeArrayOutput {
	return i.ToSubnetworkSecondaryRangeArrayOutputWithContext(context.Background())
}

func (i SubnetworkSecondaryRangeArray) ToSubnetworkSecondaryRangeArrayOutputWithContext(ctx context.Context) SubnetworkSecondaryRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkSecondaryRangeArrayOutput)
}

// Represents a secondary IP range of a subnetwork.
type SubnetworkSecondaryRangeOutput struct{ *pulumi.OutputState }

func (SubnetworkSecondaryRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkSecondaryRange)(nil)).Elem()
}

func (o SubnetworkSecondaryRangeOutput) ToSubnetworkSecondaryRangeOutput() SubnetworkSecondaryRangeOutput {
	return o
}

func (o SubnetworkSecondaryRangeOutput) ToSubnetworkSecondaryRangeOutputWithContext(ctx context.Context) SubnetworkSecondaryRangeOutput {
	return o
}

// The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
func (o SubnetworkSecondaryRangeOutput) IpCidrRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetworkSecondaryRange) *string { return v.IpCidrRange }).(pulumi.StringPtrOutput)
}

// The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
func (o SubnetworkSecondaryRangeOutput) RangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetworkSecondaryRange) *string { return v.RangeName }).(pulumi.StringPtrOutput)
}

type SubnetworkSecondaryRangeArrayOutput struct{ *pulumi.OutputState }

func (SubnetworkSecondaryRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetworkSecondaryRange)(nil)).Elem()
}

func (o SubnetworkSecondaryRangeArrayOutput) ToSubnetworkSecondaryRangeArrayOutput() SubnetworkSecondaryRangeArrayOutput {
	return o
}

func (o SubnetworkSecondaryRangeArrayOutput) ToSubnetworkSecondaryRangeArrayOutputWithContext(ctx context.Context) SubnetworkSecondaryRangeArrayOutput {
	return o
}

func (o SubnetworkSecondaryRangeArrayOutput) Index(i pulumi.IntInput) SubnetworkSecondaryRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubnetworkSecondaryRange {
		return vs[0].([]SubnetworkSecondaryRange)[vs[1].(int)]
	}).(SubnetworkSecondaryRangeOutput)
}

// Represents a secondary IP range of a subnetwork.
type SubnetworkSecondaryRangeResponse struct {
	// The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
	IpCidrRange string `pulumi:"ipCidrRange"`
	// The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
	RangeName string `pulumi:"rangeName"`
}

// SubnetworkSecondaryRangeResponseInput is an input type that accepts SubnetworkSecondaryRangeResponseArgs and SubnetworkSecondaryRangeResponseOutput values.
// You can construct a concrete instance of `SubnetworkSecondaryRangeResponseInput` via:
//
//          SubnetworkSecondaryRangeResponseArgs{...}
type SubnetworkSecondaryRangeResponseInput interface {
	pulumi.Input

	ToSubnetworkSecondaryRangeResponseOutput() SubnetworkSecondaryRangeResponseOutput
	ToSubnetworkSecondaryRangeResponseOutputWithContext(context.Context) SubnetworkSecondaryRangeResponseOutput
}

// Represents a secondary IP range of a subnetwork.
type SubnetworkSecondaryRangeResponseArgs struct {
	// The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
	IpCidrRange pulumi.StringInput `pulumi:"ipCidrRange"`
	// The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
	RangeName pulumi.StringInput `pulumi:"rangeName"`
}

func (SubnetworkSecondaryRangeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkSecondaryRangeResponse)(nil)).Elem()
}

func (i SubnetworkSecondaryRangeResponseArgs) ToSubnetworkSecondaryRangeResponseOutput() SubnetworkSecondaryRangeResponseOutput {
	return i.ToSubnetworkSecondaryRangeResponseOutputWithContext(context.Background())
}

func (i SubnetworkSecondaryRangeResponseArgs) ToSubnetworkSecondaryRangeResponseOutputWithContext(ctx context.Context) SubnetworkSecondaryRangeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkSecondaryRangeResponseOutput)
}

// SubnetworkSecondaryRangeResponseArrayInput is an input type that accepts SubnetworkSecondaryRangeResponseArray and SubnetworkSecondaryRangeResponseArrayOutput values.
// You can construct a concrete instance of `SubnetworkSecondaryRangeResponseArrayInput` via:
//
//          SubnetworkSecondaryRangeResponseArray{ SubnetworkSecondaryRangeResponseArgs{...} }
type SubnetworkSecondaryRangeResponseArrayInput interface {
	pulumi.Input

	ToSubnetworkSecondaryRangeResponseArrayOutput() SubnetworkSecondaryRangeResponseArrayOutput
	ToSubnetworkSecondaryRangeResponseArrayOutputWithContext(context.Context) SubnetworkSecondaryRangeResponseArrayOutput
}

type SubnetworkSecondaryRangeResponseArray []SubnetworkSecondaryRangeResponseInput

func (SubnetworkSecondaryRangeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetworkSecondaryRangeResponse)(nil)).Elem()
}

func (i SubnetworkSecondaryRangeResponseArray) ToSubnetworkSecondaryRangeResponseArrayOutput() SubnetworkSecondaryRangeResponseArrayOutput {
	return i.ToSubnetworkSecondaryRangeResponseArrayOutputWithContext(context.Background())
}

func (i SubnetworkSecondaryRangeResponseArray) ToSubnetworkSecondaryRangeResponseArrayOutputWithContext(ctx context.Context) SubnetworkSecondaryRangeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkSecondaryRangeResponseArrayOutput)
}

// Represents a secondary IP range of a subnetwork.
type SubnetworkSecondaryRangeResponseOutput struct{ *pulumi.OutputState }

func (SubnetworkSecondaryRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkSecondaryRangeResponse)(nil)).Elem()
}

func (o SubnetworkSecondaryRangeResponseOutput) ToSubnetworkSecondaryRangeResponseOutput() SubnetworkSecondaryRangeResponseOutput {
	return o
}

func (o SubnetworkSecondaryRangeResponseOutput) ToSubnetworkSecondaryRangeResponseOutputWithContext(ctx context.Context) SubnetworkSecondaryRangeResponseOutput {
	return o
}

// The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
func (o SubnetworkSecondaryRangeResponseOutput) IpCidrRange() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkSecondaryRangeResponse) string { return v.IpCidrRange }).(pulumi.StringOutput)
}

// The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
func (o SubnetworkSecondaryRangeResponseOutput) RangeName() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkSecondaryRangeResponse) string { return v.RangeName }).(pulumi.StringOutput)
}

type SubnetworkSecondaryRangeResponseArrayOutput struct{ *pulumi.OutputState }

func (SubnetworkSecondaryRangeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetworkSecondaryRangeResponse)(nil)).Elem()
}

func (o SubnetworkSecondaryRangeResponseArrayOutput) ToSubnetworkSecondaryRangeResponseArrayOutput() SubnetworkSecondaryRangeResponseArrayOutput {
	return o
}

func (o SubnetworkSecondaryRangeResponseArrayOutput) ToSubnetworkSecondaryRangeResponseArrayOutputWithContext(ctx context.Context) SubnetworkSecondaryRangeResponseArrayOutput {
	return o
}

func (o SubnetworkSecondaryRangeResponseArrayOutput) Index(i pulumi.IntInput) SubnetworkSecondaryRangeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubnetworkSecondaryRangeResponse {
		return vs[0].([]SubnetworkSecondaryRangeResponse)[vs[1].(int)]
	}).(SubnetworkSecondaryRangeResponseOutput)
}

type TCPHealthCheck struct {
	// The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
	Port *int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName *string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, TCP health check follows behavior specified in port and portName fields.
	PortSpecification *string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *string `pulumi:"proxyHeader"`
	// The application data to send once the TCP connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
	Request *string `pulumi:"request"`
	// The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
	Response *string `pulumi:"response"`
}

// TCPHealthCheckInput is an input type that accepts TCPHealthCheckArgs and TCPHealthCheckOutput values.
// You can construct a concrete instance of `TCPHealthCheckInput` via:
//
//          TCPHealthCheckArgs{...}
type TCPHealthCheckInput interface {
	pulumi.Input

	ToTCPHealthCheckOutput() TCPHealthCheckOutput
	ToTCPHealthCheckOutputWithContext(context.Context) TCPHealthCheckOutput
}

type TCPHealthCheckArgs struct {
	// The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, TCP health check follows behavior specified in port and portName fields.
	PortSpecification *TCPHealthCheckPortSpecification `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *TCPHealthCheckProxyHeader `pulumi:"proxyHeader"`
	// The application data to send once the TCP connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
	Request pulumi.StringPtrInput `pulumi:"request"`
	// The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (TCPHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPHealthCheck)(nil)).Elem()
}

func (i TCPHealthCheckArgs) ToTCPHealthCheckOutput() TCPHealthCheckOutput {
	return i.ToTCPHealthCheckOutputWithContext(context.Background())
}

func (i TCPHealthCheckArgs) ToTCPHealthCheckOutputWithContext(ctx context.Context) TCPHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPHealthCheckOutput)
}

func (i TCPHealthCheckArgs) ToTCPHealthCheckPtrOutput() TCPHealthCheckPtrOutput {
	return i.ToTCPHealthCheckPtrOutputWithContext(context.Background())
}

func (i TCPHealthCheckArgs) ToTCPHealthCheckPtrOutputWithContext(ctx context.Context) TCPHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPHealthCheckOutput).ToTCPHealthCheckPtrOutputWithContext(ctx)
}

// TCPHealthCheckPtrInput is an input type that accepts TCPHealthCheckArgs, TCPHealthCheckPtr and TCPHealthCheckPtrOutput values.
// You can construct a concrete instance of `TCPHealthCheckPtrInput` via:
//
//          TCPHealthCheckArgs{...}
//
//  or:
//
//          nil
type TCPHealthCheckPtrInput interface {
	pulumi.Input

	ToTCPHealthCheckPtrOutput() TCPHealthCheckPtrOutput
	ToTCPHealthCheckPtrOutputWithContext(context.Context) TCPHealthCheckPtrOutput
}

type tcphealthCheckPtrType TCPHealthCheckArgs

func TCPHealthCheckPtr(v *TCPHealthCheckArgs) TCPHealthCheckPtrInput {
	return (*tcphealthCheckPtrType)(v)
}

func (*tcphealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPHealthCheck)(nil)).Elem()
}

func (i *tcphealthCheckPtrType) ToTCPHealthCheckPtrOutput() TCPHealthCheckPtrOutput {
	return i.ToTCPHealthCheckPtrOutputWithContext(context.Background())
}

func (i *tcphealthCheckPtrType) ToTCPHealthCheckPtrOutputWithContext(ctx context.Context) TCPHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPHealthCheckPtrOutput)
}

type TCPHealthCheckOutput struct{ *pulumi.OutputState }

func (TCPHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPHealthCheck)(nil)).Elem()
}

func (o TCPHealthCheckOutput) ToTCPHealthCheckOutput() TCPHealthCheckOutput {
	return o
}

func (o TCPHealthCheckOutput) ToTCPHealthCheckOutputWithContext(ctx context.Context) TCPHealthCheckOutput {
	return o
}

func (o TCPHealthCheckOutput) ToTCPHealthCheckPtrOutput() TCPHealthCheckPtrOutput {
	return o.ToTCPHealthCheckPtrOutputWithContext(context.Background())
}

func (o TCPHealthCheckOutput) ToTCPHealthCheckPtrOutputWithContext(ctx context.Context) TCPHealthCheckPtrOutput {
	return o.ApplyT(func(v TCPHealthCheck) *TCPHealthCheck {
		return &v
	}).(TCPHealthCheckPtrOutput)
}

// The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
func (o TCPHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TCPHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o TCPHealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPHealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, TCP health check follows behavior specified in port and portName fields.
func (o TCPHealthCheckOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPHealthCheck) *string { return v.PortSpecification }).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o TCPHealthCheckOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPHealthCheck) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

// The application data to send once the TCP connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
func (o TCPHealthCheckOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPHealthCheck) *string { return v.Request }).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
func (o TCPHealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPHealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type TCPHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (TCPHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPHealthCheck)(nil)).Elem()
}

func (o TCPHealthCheckPtrOutput) ToTCPHealthCheckPtrOutput() TCPHealthCheckPtrOutput {
	return o
}

func (o TCPHealthCheckPtrOutput) ToTCPHealthCheckPtrOutputWithContext(ctx context.Context) TCPHealthCheckPtrOutput {
	return o
}

func (o TCPHealthCheckPtrOutput) Elem() TCPHealthCheckOutput {
	return o.ApplyT(func(v *TCPHealthCheck) TCPHealthCheck { return *v }).(TCPHealthCheckOutput)
}

// The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
func (o TCPHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o TCPHealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, TCP health check follows behavior specified in port and portName fields.
func (o TCPHealthCheckPtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o TCPHealthCheckPtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The application data to send once the TCP connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
func (o TCPHealthCheckPtrOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Request
	}).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
func (o TCPHealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type TCPHealthCheckResponse struct {
	// The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
	Port int `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName string `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, TCP health check follows behavior specified in port and portName fields.
	PortSpecification string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader string `pulumi:"proxyHeader"`
	// The application data to send once the TCP connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
	Request string `pulumi:"request"`
	// The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
	Response string `pulumi:"response"`
}

// TCPHealthCheckResponseInput is an input type that accepts TCPHealthCheckResponseArgs and TCPHealthCheckResponseOutput values.
// You can construct a concrete instance of `TCPHealthCheckResponseInput` via:
//
//          TCPHealthCheckResponseArgs{...}
type TCPHealthCheckResponseInput interface {
	pulumi.Input

	ToTCPHealthCheckResponseOutput() TCPHealthCheckResponseOutput
	ToTCPHealthCheckResponseOutputWithContext(context.Context) TCPHealthCheckResponseOutput
}

type TCPHealthCheckResponseArgs struct {
	// The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
	Port pulumi.IntInput `pulumi:"port"`
	// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
	PortName pulumi.StringInput `pulumi:"portName"`
	// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, TCP health check follows behavior specified in port and portName fields.
	PortSpecification pulumi.StringInput `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader pulumi.StringInput `pulumi:"proxyHeader"`
	// The application data to send once the TCP connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
	Request pulumi.StringInput `pulumi:"request"`
	// The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
	Response pulumi.StringInput `pulumi:"response"`
}

func (TCPHealthCheckResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPHealthCheckResponse)(nil)).Elem()
}

func (i TCPHealthCheckResponseArgs) ToTCPHealthCheckResponseOutput() TCPHealthCheckResponseOutput {
	return i.ToTCPHealthCheckResponseOutputWithContext(context.Background())
}

func (i TCPHealthCheckResponseArgs) ToTCPHealthCheckResponseOutputWithContext(ctx context.Context) TCPHealthCheckResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPHealthCheckResponseOutput)
}

func (i TCPHealthCheckResponseArgs) ToTCPHealthCheckResponsePtrOutput() TCPHealthCheckResponsePtrOutput {
	return i.ToTCPHealthCheckResponsePtrOutputWithContext(context.Background())
}

func (i TCPHealthCheckResponseArgs) ToTCPHealthCheckResponsePtrOutputWithContext(ctx context.Context) TCPHealthCheckResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPHealthCheckResponseOutput).ToTCPHealthCheckResponsePtrOutputWithContext(ctx)
}

// TCPHealthCheckResponsePtrInput is an input type that accepts TCPHealthCheckResponseArgs, TCPHealthCheckResponsePtr and TCPHealthCheckResponsePtrOutput values.
// You can construct a concrete instance of `TCPHealthCheckResponsePtrInput` via:
//
//          TCPHealthCheckResponseArgs{...}
//
//  or:
//
//          nil
type TCPHealthCheckResponsePtrInput interface {
	pulumi.Input

	ToTCPHealthCheckResponsePtrOutput() TCPHealthCheckResponsePtrOutput
	ToTCPHealthCheckResponsePtrOutputWithContext(context.Context) TCPHealthCheckResponsePtrOutput
}

type tcphealthCheckResponsePtrType TCPHealthCheckResponseArgs

func TCPHealthCheckResponsePtr(v *TCPHealthCheckResponseArgs) TCPHealthCheckResponsePtrInput {
	return (*tcphealthCheckResponsePtrType)(v)
}

func (*tcphealthCheckResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPHealthCheckResponse)(nil)).Elem()
}

func (i *tcphealthCheckResponsePtrType) ToTCPHealthCheckResponsePtrOutput() TCPHealthCheckResponsePtrOutput {
	return i.ToTCPHealthCheckResponsePtrOutputWithContext(context.Background())
}

func (i *tcphealthCheckResponsePtrType) ToTCPHealthCheckResponsePtrOutputWithContext(ctx context.Context) TCPHealthCheckResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPHealthCheckResponsePtrOutput)
}

type TCPHealthCheckResponseOutput struct{ *pulumi.OutputState }

func (TCPHealthCheckResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPHealthCheckResponse)(nil)).Elem()
}

func (o TCPHealthCheckResponseOutput) ToTCPHealthCheckResponseOutput() TCPHealthCheckResponseOutput {
	return o
}

func (o TCPHealthCheckResponseOutput) ToTCPHealthCheckResponseOutputWithContext(ctx context.Context) TCPHealthCheckResponseOutput {
	return o
}

func (o TCPHealthCheckResponseOutput) ToTCPHealthCheckResponsePtrOutput() TCPHealthCheckResponsePtrOutput {
	return o.ToTCPHealthCheckResponsePtrOutputWithContext(context.Background())
}

func (o TCPHealthCheckResponseOutput) ToTCPHealthCheckResponsePtrOutputWithContext(ctx context.Context) TCPHealthCheckResponsePtrOutput {
	return o.ApplyT(func(v TCPHealthCheckResponse) *TCPHealthCheckResponse {
		return &v
	}).(TCPHealthCheckResponsePtrOutput)
}

// The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
func (o TCPHealthCheckResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v TCPHealthCheckResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o TCPHealthCheckResponseOutput) PortName() pulumi.StringOutput {
	return o.ApplyT(func(v TCPHealthCheckResponse) string { return v.PortName }).(pulumi.StringOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, TCP health check follows behavior specified in port and portName fields.
func (o TCPHealthCheckResponseOutput) PortSpecification() pulumi.StringOutput {
	return o.ApplyT(func(v TCPHealthCheckResponse) string { return v.PortSpecification }).(pulumi.StringOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o TCPHealthCheckResponseOutput) ProxyHeader() pulumi.StringOutput {
	return o.ApplyT(func(v TCPHealthCheckResponse) string { return v.ProxyHeader }).(pulumi.StringOutput)
}

// The application data to send once the TCP connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
func (o TCPHealthCheckResponseOutput) Request() pulumi.StringOutput {
	return o.ApplyT(func(v TCPHealthCheckResponse) string { return v.Request }).(pulumi.StringOutput)
}

// The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
func (o TCPHealthCheckResponseOutput) Response() pulumi.StringOutput {
	return o.ApplyT(func(v TCPHealthCheckResponse) string { return v.Response }).(pulumi.StringOutput)
}

type TCPHealthCheckResponsePtrOutput struct{ *pulumi.OutputState }

func (TCPHealthCheckResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPHealthCheckResponse)(nil)).Elem()
}

func (o TCPHealthCheckResponsePtrOutput) ToTCPHealthCheckResponsePtrOutput() TCPHealthCheckResponsePtrOutput {
	return o
}

func (o TCPHealthCheckResponsePtrOutput) ToTCPHealthCheckResponsePtrOutputWithContext(ctx context.Context) TCPHealthCheckResponsePtrOutput {
	return o
}

func (o TCPHealthCheckResponsePtrOutput) Elem() TCPHealthCheckResponseOutput {
	return o.ApplyT(func(v *TCPHealthCheckResponse) TCPHealthCheckResponse { return *v }).(TCPHealthCheckResponseOutput)
}

// The TCP port number for the health check request. The default value is 80. Valid values are 1 through 65535.
func (o TCPHealthCheckResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheckResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Port name as defined in InstanceGroup#NamedPort#name. If both port and port_name are defined, port takes precedence.
func (o TCPHealthCheckResponsePtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how port is selected for health checking, can be one of following values: USE_FIXED_PORT: The port number in port is used for health checking. USE_NAMED_PORT: The portName is used for health checking. USE_SERVING_PORT: For NetworkEndpointGroup, the port specified for each network endpoint is used for health checking. For other backends, the port or named port specified in the Backend Service is used for health checking. If not specified, TCP health check follows behavior specified in port and portName fields.
func (o TCPHealthCheckResponsePtrOutput) PortSpecification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PortSpecification
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o TCPHealthCheckResponsePtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

// The application data to send once the TCP connection has been established (default value is empty). If both request and response are empty, the connection establishment alone will indicate health. The request data can only be ASCII.
func (o TCPHealthCheckResponsePtrOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Request
	}).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. If left empty (the default value), any response will indicate health. The response data can only be ASCII.
func (o TCPHealthCheckResponsePtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheckResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Response
	}).(pulumi.StringPtrOutput)
}

// A set of instance tags.
type Tags struct {
	// An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
	Items []string `pulumi:"items"`
}

// TagsInput is an input type that accepts TagsArgs and TagsOutput values.
// You can construct a concrete instance of `TagsInput` via:
//
//          TagsArgs{...}
type TagsInput interface {
	pulumi.Input

	ToTagsOutput() TagsOutput
	ToTagsOutputWithContext(context.Context) TagsOutput
}

// A set of instance tags.
type TagsArgs struct {
	// An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
	Items pulumi.StringArrayInput `pulumi:"items"`
}

func (TagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Tags)(nil)).Elem()
}

func (i TagsArgs) ToTagsOutput() TagsOutput {
	return i.ToTagsOutputWithContext(context.Background())
}

func (i TagsArgs) ToTagsOutputWithContext(ctx context.Context) TagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsOutput)
}

func (i TagsArgs) ToTagsPtrOutput() TagsPtrOutput {
	return i.ToTagsPtrOutputWithContext(context.Background())
}

func (i TagsArgs) ToTagsPtrOutputWithContext(ctx context.Context) TagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsOutput).ToTagsPtrOutputWithContext(ctx)
}

// TagsPtrInput is an input type that accepts TagsArgs, TagsPtr and TagsPtrOutput values.
// You can construct a concrete instance of `TagsPtrInput` via:
//
//          TagsArgs{...}
//
//  or:
//
//          nil
type TagsPtrInput interface {
	pulumi.Input

	ToTagsPtrOutput() TagsPtrOutput
	ToTagsPtrOutputWithContext(context.Context) TagsPtrOutput
}

type tagsPtrType TagsArgs

func TagsPtr(v *TagsArgs) TagsPtrInput {
	return (*tagsPtrType)(v)
}

func (*tagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Tags)(nil)).Elem()
}

func (i *tagsPtrType) ToTagsPtrOutput() TagsPtrOutput {
	return i.ToTagsPtrOutputWithContext(context.Background())
}

func (i *tagsPtrType) ToTagsPtrOutputWithContext(ctx context.Context) TagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsPtrOutput)
}

// A set of instance tags.
type TagsOutput struct{ *pulumi.OutputState }

func (TagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Tags)(nil)).Elem()
}

func (o TagsOutput) ToTagsOutput() TagsOutput {
	return o
}

func (o TagsOutput) ToTagsOutputWithContext(ctx context.Context) TagsOutput {
	return o
}

func (o TagsOutput) ToTagsPtrOutput() TagsPtrOutput {
	return o.ToTagsPtrOutputWithContext(context.Background())
}

func (o TagsOutput) ToTagsPtrOutputWithContext(ctx context.Context) TagsPtrOutput {
	return o.ApplyT(func(v Tags) *Tags {
		return &v
	}).(TagsPtrOutput)
}

// An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
func (o TagsOutput) Items() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Tags) []string { return v.Items }).(pulumi.StringArrayOutput)
}

type TagsPtrOutput struct{ *pulumi.OutputState }

func (TagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tags)(nil)).Elem()
}

func (o TagsPtrOutput) ToTagsPtrOutput() TagsPtrOutput {
	return o
}

func (o TagsPtrOutput) ToTagsPtrOutputWithContext(ctx context.Context) TagsPtrOutput {
	return o
}

func (o TagsPtrOutput) Elem() TagsOutput {
	return o.ApplyT(func(v *Tags) Tags { return *v }).(TagsOutput)
}

// An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
func (o TagsPtrOutput) Items() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Tags) []string {
		if v == nil {
			return nil
		}
		return v.Items
	}).(pulumi.StringArrayOutput)
}

// A set of instance tags.
type TagsResponse struct {
	// Specifies a fingerprint for this request, which is essentially a hash of the tags' contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags. To see the latest fingerprint, make get() request to the instance.
	Fingerprint string `pulumi:"fingerprint"`
	// An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
	Items []string `pulumi:"items"`
}

// TagsResponseInput is an input type that accepts TagsResponseArgs and TagsResponseOutput values.
// You can construct a concrete instance of `TagsResponseInput` via:
//
//          TagsResponseArgs{...}
type TagsResponseInput interface {
	pulumi.Input

	ToTagsResponseOutput() TagsResponseOutput
	ToTagsResponseOutputWithContext(context.Context) TagsResponseOutput
}

// A set of instance tags.
type TagsResponseArgs struct {
	// Specifies a fingerprint for this request, which is essentially a hash of the tags' contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags. To see the latest fingerprint, make get() request to the instance.
	Fingerprint pulumi.StringInput `pulumi:"fingerprint"`
	// An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
	Items pulumi.StringArrayInput `pulumi:"items"`
}

func (TagsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagsResponse)(nil)).Elem()
}

func (i TagsResponseArgs) ToTagsResponseOutput() TagsResponseOutput {
	return i.ToTagsResponseOutputWithContext(context.Background())
}

func (i TagsResponseArgs) ToTagsResponseOutputWithContext(ctx context.Context) TagsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsResponseOutput)
}

func (i TagsResponseArgs) ToTagsResponsePtrOutput() TagsResponsePtrOutput {
	return i.ToTagsResponsePtrOutputWithContext(context.Background())
}

func (i TagsResponseArgs) ToTagsResponsePtrOutputWithContext(ctx context.Context) TagsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsResponseOutput).ToTagsResponsePtrOutputWithContext(ctx)
}

// TagsResponsePtrInput is an input type that accepts TagsResponseArgs, TagsResponsePtr and TagsResponsePtrOutput values.
// You can construct a concrete instance of `TagsResponsePtrInput` via:
//
//          TagsResponseArgs{...}
//
//  or:
//
//          nil
type TagsResponsePtrInput interface {
	pulumi.Input

	ToTagsResponsePtrOutput() TagsResponsePtrOutput
	ToTagsResponsePtrOutputWithContext(context.Context) TagsResponsePtrOutput
}

type tagsResponsePtrType TagsResponseArgs

func TagsResponsePtr(v *TagsResponseArgs) TagsResponsePtrInput {
	return (*tagsResponsePtrType)(v)
}

func (*tagsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TagsResponse)(nil)).Elem()
}

func (i *tagsResponsePtrType) ToTagsResponsePtrOutput() TagsResponsePtrOutput {
	return i.ToTagsResponsePtrOutputWithContext(context.Background())
}

func (i *tagsResponsePtrType) ToTagsResponsePtrOutputWithContext(ctx context.Context) TagsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsResponsePtrOutput)
}

// A set of instance tags.
type TagsResponseOutput struct{ *pulumi.OutputState }

func (TagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagsResponse)(nil)).Elem()
}

func (o TagsResponseOutput) ToTagsResponseOutput() TagsResponseOutput {
	return o
}

func (o TagsResponseOutput) ToTagsResponseOutputWithContext(ctx context.Context) TagsResponseOutput {
	return o
}

func (o TagsResponseOutput) ToTagsResponsePtrOutput() TagsResponsePtrOutput {
	return o.ToTagsResponsePtrOutputWithContext(context.Background())
}

func (o TagsResponseOutput) ToTagsResponsePtrOutputWithContext(ctx context.Context) TagsResponsePtrOutput {
	return o.ApplyT(func(v TagsResponse) *TagsResponse {
		return &v
	}).(TagsResponsePtrOutput)
}

// Specifies a fingerprint for this request, which is essentially a hash of the tags' contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags. To see the latest fingerprint, make get() request to the instance.
func (o TagsResponseOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v TagsResponse) string { return v.Fingerprint }).(pulumi.StringOutput)
}

// An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
func (o TagsResponseOutput) Items() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TagsResponse) []string { return v.Items }).(pulumi.StringArrayOutput)
}

type TagsResponsePtrOutput struct{ *pulumi.OutputState }

func (TagsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagsResponse)(nil)).Elem()
}

func (o TagsResponsePtrOutput) ToTagsResponsePtrOutput() TagsResponsePtrOutput {
	return o
}

func (o TagsResponsePtrOutput) ToTagsResponsePtrOutputWithContext(ctx context.Context) TagsResponsePtrOutput {
	return o
}

func (o TagsResponsePtrOutput) Elem() TagsResponseOutput {
	return o.ApplyT(func(v *TagsResponse) TagsResponse { return *v }).(TagsResponseOutput)
}

// Specifies a fingerprint for this request, which is essentially a hash of the tags' contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags. To see the latest fingerprint, make get() request to the instance.
func (o TagsResponsePtrOutput) Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TagsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Fingerprint
	}).(pulumi.StringPtrOutput)
}

// An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
func (o TagsResponsePtrOutput) Items() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TagsResponse) []string {
		if v == nil {
			return nil
		}
		return v.Items
	}).(pulumi.StringArrayOutput)
}

type Uint128Response struct {
	High string `pulumi:"high"`
	Low  string `pulumi:"low"`
}

// Uint128ResponseInput is an input type that accepts Uint128ResponseArgs and Uint128ResponseOutput values.
// You can construct a concrete instance of `Uint128ResponseInput` via:
//
//          Uint128ResponseArgs{...}
type Uint128ResponseInput interface {
	pulumi.Input

	ToUint128ResponseOutput() Uint128ResponseOutput
	ToUint128ResponseOutputWithContext(context.Context) Uint128ResponseOutput
}

type Uint128ResponseArgs struct {
	High pulumi.StringInput `pulumi:"high"`
	Low  pulumi.StringInput `pulumi:"low"`
}

func (Uint128ResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Uint128Response)(nil)).Elem()
}

func (i Uint128ResponseArgs) ToUint128ResponseOutput() Uint128ResponseOutput {
	return i.ToUint128ResponseOutputWithContext(context.Background())
}

func (i Uint128ResponseArgs) ToUint128ResponseOutputWithContext(ctx context.Context) Uint128ResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Uint128ResponseOutput)
}

func (i Uint128ResponseArgs) ToUint128ResponsePtrOutput() Uint128ResponsePtrOutput {
	return i.ToUint128ResponsePtrOutputWithContext(context.Background())
}

func (i Uint128ResponseArgs) ToUint128ResponsePtrOutputWithContext(ctx context.Context) Uint128ResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Uint128ResponseOutput).ToUint128ResponsePtrOutputWithContext(ctx)
}

// Uint128ResponsePtrInput is an input type that accepts Uint128ResponseArgs, Uint128ResponsePtr and Uint128ResponsePtrOutput values.
// You can construct a concrete instance of `Uint128ResponsePtrInput` via:
//
//          Uint128ResponseArgs{...}
//
//  or:
//
//          nil
type Uint128ResponsePtrInput interface {
	pulumi.Input

	ToUint128ResponsePtrOutput() Uint128ResponsePtrOutput
	ToUint128ResponsePtrOutputWithContext(context.Context) Uint128ResponsePtrOutput
}

type uint128ResponsePtrType Uint128ResponseArgs

func Uint128ResponsePtr(v *Uint128ResponseArgs) Uint128ResponsePtrInput {
	return (*uint128ResponsePtrType)(v)
}

func (*uint128ResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Uint128Response)(nil)).Elem()
}

func (i *uint128ResponsePtrType) ToUint128ResponsePtrOutput() Uint128ResponsePtrOutput {
	return i.ToUint128ResponsePtrOutputWithContext(context.Background())
}

func (i *uint128ResponsePtrType) ToUint128ResponsePtrOutputWithContext(ctx context.Context) Uint128ResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Uint128ResponsePtrOutput)
}

type Uint128ResponseOutput struct{ *pulumi.OutputState }

func (Uint128ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Uint128Response)(nil)).Elem()
}

func (o Uint128ResponseOutput) ToUint128ResponseOutput() Uint128ResponseOutput {
	return o
}

func (o Uint128ResponseOutput) ToUint128ResponseOutputWithContext(ctx context.Context) Uint128ResponseOutput {
	return o
}

func (o Uint128ResponseOutput) ToUint128ResponsePtrOutput() Uint128ResponsePtrOutput {
	return o.ToUint128ResponsePtrOutputWithContext(context.Background())
}

func (o Uint128ResponseOutput) ToUint128ResponsePtrOutputWithContext(ctx context.Context) Uint128ResponsePtrOutput {
	return o.ApplyT(func(v Uint128Response) *Uint128Response {
		return &v
	}).(Uint128ResponsePtrOutput)
}
func (o Uint128ResponseOutput) High() pulumi.StringOutput {
	return o.ApplyT(func(v Uint128Response) string { return v.High }).(pulumi.StringOutput)
}

func (o Uint128ResponseOutput) Low() pulumi.StringOutput {
	return o.ApplyT(func(v Uint128Response) string { return v.Low }).(pulumi.StringOutput)
}

type Uint128ResponsePtrOutput struct{ *pulumi.OutputState }

func (Uint128ResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Uint128Response)(nil)).Elem()
}

func (o Uint128ResponsePtrOutput) ToUint128ResponsePtrOutput() Uint128ResponsePtrOutput {
	return o
}

func (o Uint128ResponsePtrOutput) ToUint128ResponsePtrOutputWithContext(ctx context.Context) Uint128ResponsePtrOutput {
	return o
}

func (o Uint128ResponsePtrOutput) Elem() Uint128ResponseOutput {
	return o.ApplyT(func(v *Uint128Response) Uint128Response { return *v }).(Uint128ResponseOutput)
}

func (o Uint128ResponsePtrOutput) High() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Uint128Response) *string {
		if v == nil {
			return nil
		}
		return &v.High
	}).(pulumi.StringPtrOutput)
}

func (o Uint128ResponsePtrOutput) Low() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Uint128Response) *string {
		if v == nil {
			return nil
		}
		return &v.Low
	}).(pulumi.StringPtrOutput)
}

// Message for the expected URL mappings.
type UrlMapTest struct {
	// Description of this test case.
	Description *string `pulumi:"description"`
	// The expected output URL evaluated by load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to https. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified.
	ExpectedOutputUrl *string `pulumi:"expectedOutputUrl"`
	// For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode cannot be set when service is set.
	ExpectedRedirectResponseCode *int `pulumi:"expectedRedirectResponseCode"`
	// HTTP headers for this request. If headers contains a host header, then host must also match the header value.
	Headers []UrlMapTestHeader `pulumi:"headers"`
	// Host portion of the URL. If headers contains a host header, then host must also match the header value.
	Host *string `pulumi:"host"`
	// Path portion of the URL.
	Path *string `pulumi:"path"`
	// Expected BackendService or BackendBucket resource the given URL should be mapped to. service cannot be set if expectedRedirectResponseCode is set.
	Service *string `pulumi:"service"`
}

// UrlMapTestInput is an input type that accepts UrlMapTestArgs and UrlMapTestOutput values.
// You can construct a concrete instance of `UrlMapTestInput` via:
//
//          UrlMapTestArgs{...}
type UrlMapTestInput interface {
	pulumi.Input

	ToUrlMapTestOutput() UrlMapTestOutput
	ToUrlMapTestOutputWithContext(context.Context) UrlMapTestOutput
}

// Message for the expected URL mappings.
type UrlMapTestArgs struct {
	// Description of this test case.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The expected output URL evaluated by load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to https. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified.
	ExpectedOutputUrl pulumi.StringPtrInput `pulumi:"expectedOutputUrl"`
	// For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode cannot be set when service is set.
	ExpectedRedirectResponseCode pulumi.IntPtrInput `pulumi:"expectedRedirectResponseCode"`
	// HTTP headers for this request. If headers contains a host header, then host must also match the header value.
	Headers UrlMapTestHeaderArrayInput `pulumi:"headers"`
	// Host portion of the URL. If headers contains a host header, then host must also match the header value.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Path portion of the URL.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Expected BackendService or BackendBucket resource the given URL should be mapped to. service cannot be set if expectedRedirectResponseCode is set.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (UrlMapTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMapTest)(nil)).Elem()
}

func (i UrlMapTestArgs) ToUrlMapTestOutput() UrlMapTestOutput {
	return i.ToUrlMapTestOutputWithContext(context.Background())
}

func (i UrlMapTestArgs) ToUrlMapTestOutputWithContext(ctx context.Context) UrlMapTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMapTestOutput)
}

// UrlMapTestArrayInput is an input type that accepts UrlMapTestArray and UrlMapTestArrayOutput values.
// You can construct a concrete instance of `UrlMapTestArrayInput` via:
//
//          UrlMapTestArray{ UrlMapTestArgs{...} }
type UrlMapTestArrayInput interface {
	pulumi.Input

	ToUrlMapTestArrayOutput() UrlMapTestArrayOutput
	ToUrlMapTestArrayOutputWithContext(context.Context) UrlMapTestArrayOutput
}

type UrlMapTestArray []UrlMapTestInput

func (UrlMapTestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMapTest)(nil)).Elem()
}

func (i UrlMapTestArray) ToUrlMapTestArrayOutput() UrlMapTestArrayOutput {
	return i.ToUrlMapTestArrayOutputWithContext(context.Background())
}

func (i UrlMapTestArray) ToUrlMapTestArrayOutputWithContext(ctx context.Context) UrlMapTestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMapTestArrayOutput)
}

// Message for the expected URL mappings.
type UrlMapTestOutput struct{ *pulumi.OutputState }

func (UrlMapTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMapTest)(nil)).Elem()
}

func (o UrlMapTestOutput) ToUrlMapTestOutput() UrlMapTestOutput {
	return o
}

func (o UrlMapTestOutput) ToUrlMapTestOutputWithContext(ctx context.Context) UrlMapTestOutput {
	return o
}

// Description of this test case.
func (o UrlMapTestOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMapTest) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The expected output URL evaluated by load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to https. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified.
func (o UrlMapTestOutput) ExpectedOutputUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMapTest) *string { return v.ExpectedOutputUrl }).(pulumi.StringPtrOutput)
}

// For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode cannot be set when service is set.
func (o UrlMapTestOutput) ExpectedRedirectResponseCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UrlMapTest) *int { return v.ExpectedRedirectResponseCode }).(pulumi.IntPtrOutput)
}

// HTTP headers for this request. If headers contains a host header, then host must also match the header value.
func (o UrlMapTestOutput) Headers() UrlMapTestHeaderArrayOutput {
	return o.ApplyT(func(v UrlMapTest) []UrlMapTestHeader { return v.Headers }).(UrlMapTestHeaderArrayOutput)
}

// Host portion of the URL. If headers contains a host header, then host must also match the header value.
func (o UrlMapTestOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMapTest) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Path portion of the URL.
func (o UrlMapTestOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMapTest) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Expected BackendService or BackendBucket resource the given URL should be mapped to. service cannot be set if expectedRedirectResponseCode is set.
func (o UrlMapTestOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMapTest) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type UrlMapTestArrayOutput struct{ *pulumi.OutputState }

func (UrlMapTestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMapTest)(nil)).Elem()
}

func (o UrlMapTestArrayOutput) ToUrlMapTestArrayOutput() UrlMapTestArrayOutput {
	return o
}

func (o UrlMapTestArrayOutput) ToUrlMapTestArrayOutputWithContext(ctx context.Context) UrlMapTestArrayOutput {
	return o
}

func (o UrlMapTestArrayOutput) Index(i pulumi.IntInput) UrlMapTestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlMapTest {
		return vs[0].([]UrlMapTest)[vs[1].(int)]
	}).(UrlMapTestOutput)
}

// HTTP headers used in UrlMapTests.
type UrlMapTestHeader struct {
	// Header name.
	Name *string `pulumi:"name"`
	// Header value.
	Value *string `pulumi:"value"`
}

// UrlMapTestHeaderInput is an input type that accepts UrlMapTestHeaderArgs and UrlMapTestHeaderOutput values.
// You can construct a concrete instance of `UrlMapTestHeaderInput` via:
//
//          UrlMapTestHeaderArgs{...}
type UrlMapTestHeaderInput interface {
	pulumi.Input

	ToUrlMapTestHeaderOutput() UrlMapTestHeaderOutput
	ToUrlMapTestHeaderOutputWithContext(context.Context) UrlMapTestHeaderOutput
}

// HTTP headers used in UrlMapTests.
type UrlMapTestHeaderArgs struct {
	// Header name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Header value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (UrlMapTestHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMapTestHeader)(nil)).Elem()
}

func (i UrlMapTestHeaderArgs) ToUrlMapTestHeaderOutput() UrlMapTestHeaderOutput {
	return i.ToUrlMapTestHeaderOutputWithContext(context.Background())
}

func (i UrlMapTestHeaderArgs) ToUrlMapTestHeaderOutputWithContext(ctx context.Context) UrlMapTestHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMapTestHeaderOutput)
}

// UrlMapTestHeaderArrayInput is an input type that accepts UrlMapTestHeaderArray and UrlMapTestHeaderArrayOutput values.
// You can construct a concrete instance of `UrlMapTestHeaderArrayInput` via:
//
//          UrlMapTestHeaderArray{ UrlMapTestHeaderArgs{...} }
type UrlMapTestHeaderArrayInput interface {
	pulumi.Input

	ToUrlMapTestHeaderArrayOutput() UrlMapTestHeaderArrayOutput
	ToUrlMapTestHeaderArrayOutputWithContext(context.Context) UrlMapTestHeaderArrayOutput
}

type UrlMapTestHeaderArray []UrlMapTestHeaderInput

func (UrlMapTestHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMapTestHeader)(nil)).Elem()
}

func (i UrlMapTestHeaderArray) ToUrlMapTestHeaderArrayOutput() UrlMapTestHeaderArrayOutput {
	return i.ToUrlMapTestHeaderArrayOutputWithContext(context.Background())
}

func (i UrlMapTestHeaderArray) ToUrlMapTestHeaderArrayOutputWithContext(ctx context.Context) UrlMapTestHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMapTestHeaderArrayOutput)
}

// HTTP headers used in UrlMapTests.
type UrlMapTestHeaderOutput struct{ *pulumi.OutputState }

func (UrlMapTestHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMapTestHeader)(nil)).Elem()
}

func (o UrlMapTestHeaderOutput) ToUrlMapTestHeaderOutput() UrlMapTestHeaderOutput {
	return o
}

func (o UrlMapTestHeaderOutput) ToUrlMapTestHeaderOutputWithContext(ctx context.Context) UrlMapTestHeaderOutput {
	return o
}

// Header name.
func (o UrlMapTestHeaderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMapTestHeader) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Header value.
func (o UrlMapTestHeaderOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMapTestHeader) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type UrlMapTestHeaderArrayOutput struct{ *pulumi.OutputState }

func (UrlMapTestHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMapTestHeader)(nil)).Elem()
}

func (o UrlMapTestHeaderArrayOutput) ToUrlMapTestHeaderArrayOutput() UrlMapTestHeaderArrayOutput {
	return o
}

func (o UrlMapTestHeaderArrayOutput) ToUrlMapTestHeaderArrayOutputWithContext(ctx context.Context) UrlMapTestHeaderArrayOutput {
	return o
}

func (o UrlMapTestHeaderArrayOutput) Index(i pulumi.IntInput) UrlMapTestHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlMapTestHeader {
		return vs[0].([]UrlMapTestHeader)[vs[1].(int)]
	}).(UrlMapTestHeaderOutput)
}

// HTTP headers used in UrlMapTests.
type UrlMapTestHeaderResponse struct {
	// Header name.
	Name string `pulumi:"name"`
	// Header value.
	Value string `pulumi:"value"`
}

// UrlMapTestHeaderResponseInput is an input type that accepts UrlMapTestHeaderResponseArgs and UrlMapTestHeaderResponseOutput values.
// You can construct a concrete instance of `UrlMapTestHeaderResponseInput` via:
//
//          UrlMapTestHeaderResponseArgs{...}
type UrlMapTestHeaderResponseInput interface {
	pulumi.Input

	ToUrlMapTestHeaderResponseOutput() UrlMapTestHeaderResponseOutput
	ToUrlMapTestHeaderResponseOutputWithContext(context.Context) UrlMapTestHeaderResponseOutput
}

// HTTP headers used in UrlMapTests.
type UrlMapTestHeaderResponseArgs struct {
	// Header name.
	Name pulumi.StringInput `pulumi:"name"`
	// Header value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (UrlMapTestHeaderResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMapTestHeaderResponse)(nil)).Elem()
}

func (i UrlMapTestHeaderResponseArgs) ToUrlMapTestHeaderResponseOutput() UrlMapTestHeaderResponseOutput {
	return i.ToUrlMapTestHeaderResponseOutputWithContext(context.Background())
}

func (i UrlMapTestHeaderResponseArgs) ToUrlMapTestHeaderResponseOutputWithContext(ctx context.Context) UrlMapTestHeaderResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMapTestHeaderResponseOutput)
}

// UrlMapTestHeaderResponseArrayInput is an input type that accepts UrlMapTestHeaderResponseArray and UrlMapTestHeaderResponseArrayOutput values.
// You can construct a concrete instance of `UrlMapTestHeaderResponseArrayInput` via:
//
//          UrlMapTestHeaderResponseArray{ UrlMapTestHeaderResponseArgs{...} }
type UrlMapTestHeaderResponseArrayInput interface {
	pulumi.Input

	ToUrlMapTestHeaderResponseArrayOutput() UrlMapTestHeaderResponseArrayOutput
	ToUrlMapTestHeaderResponseArrayOutputWithContext(context.Context) UrlMapTestHeaderResponseArrayOutput
}

type UrlMapTestHeaderResponseArray []UrlMapTestHeaderResponseInput

func (UrlMapTestHeaderResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMapTestHeaderResponse)(nil)).Elem()
}

func (i UrlMapTestHeaderResponseArray) ToUrlMapTestHeaderResponseArrayOutput() UrlMapTestHeaderResponseArrayOutput {
	return i.ToUrlMapTestHeaderResponseArrayOutputWithContext(context.Background())
}

func (i UrlMapTestHeaderResponseArray) ToUrlMapTestHeaderResponseArrayOutputWithContext(ctx context.Context) UrlMapTestHeaderResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMapTestHeaderResponseArrayOutput)
}

// HTTP headers used in UrlMapTests.
type UrlMapTestHeaderResponseOutput struct{ *pulumi.OutputState }

func (UrlMapTestHeaderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMapTestHeaderResponse)(nil)).Elem()
}

func (o UrlMapTestHeaderResponseOutput) ToUrlMapTestHeaderResponseOutput() UrlMapTestHeaderResponseOutput {
	return o
}

func (o UrlMapTestHeaderResponseOutput) ToUrlMapTestHeaderResponseOutputWithContext(ctx context.Context) UrlMapTestHeaderResponseOutput {
	return o
}

// Header name.
func (o UrlMapTestHeaderResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapTestHeaderResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Header value.
func (o UrlMapTestHeaderResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapTestHeaderResponse) string { return v.Value }).(pulumi.StringOutput)
}

type UrlMapTestHeaderResponseArrayOutput struct{ *pulumi.OutputState }

func (UrlMapTestHeaderResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMapTestHeaderResponse)(nil)).Elem()
}

func (o UrlMapTestHeaderResponseArrayOutput) ToUrlMapTestHeaderResponseArrayOutput() UrlMapTestHeaderResponseArrayOutput {
	return o
}

func (o UrlMapTestHeaderResponseArrayOutput) ToUrlMapTestHeaderResponseArrayOutputWithContext(ctx context.Context) UrlMapTestHeaderResponseArrayOutput {
	return o
}

func (o UrlMapTestHeaderResponseArrayOutput) Index(i pulumi.IntInput) UrlMapTestHeaderResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlMapTestHeaderResponse {
		return vs[0].([]UrlMapTestHeaderResponse)[vs[1].(int)]
	}).(UrlMapTestHeaderResponseOutput)
}

// Message for the expected URL mappings.
type UrlMapTestResponse struct {
	// Description of this test case.
	Description string `pulumi:"description"`
	// The expected output URL evaluated by load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to https. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified.
	ExpectedOutputUrl string `pulumi:"expectedOutputUrl"`
	// For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode cannot be set when service is set.
	ExpectedRedirectResponseCode int `pulumi:"expectedRedirectResponseCode"`
	// HTTP headers for this request. If headers contains a host header, then host must also match the header value.
	Headers []UrlMapTestHeaderResponse `pulumi:"headers"`
	// Host portion of the URL. If headers contains a host header, then host must also match the header value.
	Host string `pulumi:"host"`
	// Path portion of the URL.
	Path string `pulumi:"path"`
	// Expected BackendService or BackendBucket resource the given URL should be mapped to. service cannot be set if expectedRedirectResponseCode is set.
	Service string `pulumi:"service"`
}

// UrlMapTestResponseInput is an input type that accepts UrlMapTestResponseArgs and UrlMapTestResponseOutput values.
// You can construct a concrete instance of `UrlMapTestResponseInput` via:
//
//          UrlMapTestResponseArgs{...}
type UrlMapTestResponseInput interface {
	pulumi.Input

	ToUrlMapTestResponseOutput() UrlMapTestResponseOutput
	ToUrlMapTestResponseOutputWithContext(context.Context) UrlMapTestResponseOutput
}

// Message for the expected URL mappings.
type UrlMapTestResponseArgs struct {
	// Description of this test case.
	Description pulumi.StringInput `pulumi:"description"`
	// The expected output URL evaluated by load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to https. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified.
	ExpectedOutputUrl pulumi.StringInput `pulumi:"expectedOutputUrl"`
	// For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode cannot be set when service is set.
	ExpectedRedirectResponseCode pulumi.IntInput `pulumi:"expectedRedirectResponseCode"`
	// HTTP headers for this request. If headers contains a host header, then host must also match the header value.
	Headers UrlMapTestHeaderResponseArrayInput `pulumi:"headers"`
	// Host portion of the URL. If headers contains a host header, then host must also match the header value.
	Host pulumi.StringInput `pulumi:"host"`
	// Path portion of the URL.
	Path pulumi.StringInput `pulumi:"path"`
	// Expected BackendService or BackendBucket resource the given URL should be mapped to. service cannot be set if expectedRedirectResponseCode is set.
	Service pulumi.StringInput `pulumi:"service"`
}

func (UrlMapTestResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMapTestResponse)(nil)).Elem()
}

func (i UrlMapTestResponseArgs) ToUrlMapTestResponseOutput() UrlMapTestResponseOutput {
	return i.ToUrlMapTestResponseOutputWithContext(context.Background())
}

func (i UrlMapTestResponseArgs) ToUrlMapTestResponseOutputWithContext(ctx context.Context) UrlMapTestResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMapTestResponseOutput)
}

// UrlMapTestResponseArrayInput is an input type that accepts UrlMapTestResponseArray and UrlMapTestResponseArrayOutput values.
// You can construct a concrete instance of `UrlMapTestResponseArrayInput` via:
//
//          UrlMapTestResponseArray{ UrlMapTestResponseArgs{...} }
type UrlMapTestResponseArrayInput interface {
	pulumi.Input

	ToUrlMapTestResponseArrayOutput() UrlMapTestResponseArrayOutput
	ToUrlMapTestResponseArrayOutputWithContext(context.Context) UrlMapTestResponseArrayOutput
}

type UrlMapTestResponseArray []UrlMapTestResponseInput

func (UrlMapTestResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMapTestResponse)(nil)).Elem()
}

func (i UrlMapTestResponseArray) ToUrlMapTestResponseArrayOutput() UrlMapTestResponseArrayOutput {
	return i.ToUrlMapTestResponseArrayOutputWithContext(context.Background())
}

func (i UrlMapTestResponseArray) ToUrlMapTestResponseArrayOutputWithContext(ctx context.Context) UrlMapTestResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMapTestResponseArrayOutput)
}

// Message for the expected URL mappings.
type UrlMapTestResponseOutput struct{ *pulumi.OutputState }

func (UrlMapTestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMapTestResponse)(nil)).Elem()
}

func (o UrlMapTestResponseOutput) ToUrlMapTestResponseOutput() UrlMapTestResponseOutput {
	return o
}

func (o UrlMapTestResponseOutput) ToUrlMapTestResponseOutputWithContext(ctx context.Context) UrlMapTestResponseOutput {
	return o
}

// Description of this test case.
func (o UrlMapTestResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapTestResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The expected output URL evaluated by load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to https. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified.
func (o UrlMapTestResponseOutput) ExpectedOutputUrl() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapTestResponse) string { return v.ExpectedOutputUrl }).(pulumi.StringOutput)
}

// For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode cannot be set when service is set.
func (o UrlMapTestResponseOutput) ExpectedRedirectResponseCode() pulumi.IntOutput {
	return o.ApplyT(func(v UrlMapTestResponse) int { return v.ExpectedRedirectResponseCode }).(pulumi.IntOutput)
}

// HTTP headers for this request. If headers contains a host header, then host must also match the header value.
func (o UrlMapTestResponseOutput) Headers() UrlMapTestHeaderResponseArrayOutput {
	return o.ApplyT(func(v UrlMapTestResponse) []UrlMapTestHeaderResponse { return v.Headers }).(UrlMapTestHeaderResponseArrayOutput)
}

// Host portion of the URL. If headers contains a host header, then host must also match the header value.
func (o UrlMapTestResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapTestResponse) string { return v.Host }).(pulumi.StringOutput)
}

// Path portion of the URL.
func (o UrlMapTestResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapTestResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Expected BackendService or BackendBucket resource the given URL should be mapped to. service cannot be set if expectedRedirectResponseCode is set.
func (o UrlMapTestResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapTestResponse) string { return v.Service }).(pulumi.StringOutput)
}

type UrlMapTestResponseArrayOutput struct{ *pulumi.OutputState }

func (UrlMapTestResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMapTestResponse)(nil)).Elem()
}

func (o UrlMapTestResponseArrayOutput) ToUrlMapTestResponseArrayOutput() UrlMapTestResponseArrayOutput {
	return o
}

func (o UrlMapTestResponseArrayOutput) ToUrlMapTestResponseArrayOutputWithContext(ctx context.Context) UrlMapTestResponseArrayOutput {
	return o
}

func (o UrlMapTestResponseArrayOutput) Index(i pulumi.IntInput) UrlMapTestResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlMapTestResponse {
		return vs[0].([]UrlMapTestResponse)[vs[1].(int)]
	}).(UrlMapTestResponseOutput)
}

// The spec for modifying the path before sending the request to the matched backend service.
type UrlRewrite struct {
	// Prior to forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be between 1 and 255 characters.
	HostRewrite *string `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be between 1 and 1024 characters.
	PathPrefixRewrite *string `pulumi:"pathPrefixRewrite"`
}

// UrlRewriteInput is an input type that accepts UrlRewriteArgs and UrlRewriteOutput values.
// You can construct a concrete instance of `UrlRewriteInput` via:
//
//          UrlRewriteArgs{...}
type UrlRewriteInput interface {
	pulumi.Input

	ToUrlRewriteOutput() UrlRewriteOutput
	ToUrlRewriteOutputWithContext(context.Context) UrlRewriteOutput
}

// The spec for modifying the path before sending the request to the matched backend service.
type UrlRewriteArgs struct {
	// Prior to forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be between 1 and 255 characters.
	HostRewrite pulumi.StringPtrInput `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be between 1 and 1024 characters.
	PathPrefixRewrite pulumi.StringPtrInput `pulumi:"pathPrefixRewrite"`
}

func (UrlRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlRewrite)(nil)).Elem()
}

func (i UrlRewriteArgs) ToUrlRewriteOutput() UrlRewriteOutput {
	return i.ToUrlRewriteOutputWithContext(context.Background())
}

func (i UrlRewriteArgs) ToUrlRewriteOutputWithContext(ctx context.Context) UrlRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlRewriteOutput)
}

func (i UrlRewriteArgs) ToUrlRewritePtrOutput() UrlRewritePtrOutput {
	return i.ToUrlRewritePtrOutputWithContext(context.Background())
}

func (i UrlRewriteArgs) ToUrlRewritePtrOutputWithContext(ctx context.Context) UrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlRewriteOutput).ToUrlRewritePtrOutputWithContext(ctx)
}

// UrlRewritePtrInput is an input type that accepts UrlRewriteArgs, UrlRewritePtr and UrlRewritePtrOutput values.
// You can construct a concrete instance of `UrlRewritePtrInput` via:
//
//          UrlRewriteArgs{...}
//
//  or:
//
//          nil
type UrlRewritePtrInput interface {
	pulumi.Input

	ToUrlRewritePtrOutput() UrlRewritePtrOutput
	ToUrlRewritePtrOutputWithContext(context.Context) UrlRewritePtrOutput
}

type urlRewritePtrType UrlRewriteArgs

func UrlRewritePtr(v *UrlRewriteArgs) UrlRewritePtrInput {
	return (*urlRewritePtrType)(v)
}

func (*urlRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlRewrite)(nil)).Elem()
}

func (i *urlRewritePtrType) ToUrlRewritePtrOutput() UrlRewritePtrOutput {
	return i.ToUrlRewritePtrOutputWithContext(context.Background())
}

func (i *urlRewritePtrType) ToUrlRewritePtrOutputWithContext(ctx context.Context) UrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlRewritePtrOutput)
}

// The spec for modifying the path before sending the request to the matched backend service.
type UrlRewriteOutput struct{ *pulumi.OutputState }

func (UrlRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlRewrite)(nil)).Elem()
}

func (o UrlRewriteOutput) ToUrlRewriteOutput() UrlRewriteOutput {
	return o
}

func (o UrlRewriteOutput) ToUrlRewriteOutputWithContext(ctx context.Context) UrlRewriteOutput {
	return o
}

func (o UrlRewriteOutput) ToUrlRewritePtrOutput() UrlRewritePtrOutput {
	return o.ToUrlRewritePtrOutputWithContext(context.Background())
}

func (o UrlRewriteOutput) ToUrlRewritePtrOutputWithContext(ctx context.Context) UrlRewritePtrOutput {
	return o.ApplyT(func(v UrlRewrite) *UrlRewrite {
		return &v
	}).(UrlRewritePtrOutput)
}

// Prior to forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be between 1 and 255 characters.
func (o UrlRewriteOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlRewrite) *string { return v.HostRewrite }).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be between 1 and 1024 characters.
func (o UrlRewriteOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlRewrite) *string { return v.PathPrefixRewrite }).(pulumi.StringPtrOutput)
}

type UrlRewritePtrOutput struct{ *pulumi.OutputState }

func (UrlRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlRewrite)(nil)).Elem()
}

func (o UrlRewritePtrOutput) ToUrlRewritePtrOutput() UrlRewritePtrOutput {
	return o
}

func (o UrlRewritePtrOutput) ToUrlRewritePtrOutputWithContext(ctx context.Context) UrlRewritePtrOutput {
	return o
}

func (o UrlRewritePtrOutput) Elem() UrlRewriteOutput {
	return o.ApplyT(func(v *UrlRewrite) UrlRewrite { return *v }).(UrlRewriteOutput)
}

// Prior to forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be between 1 and 255 characters.
func (o UrlRewritePtrOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.HostRewrite
	}).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be between 1 and 1024 characters.
func (o UrlRewritePtrOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.PathPrefixRewrite
	}).(pulumi.StringPtrOutput)
}

// The spec for modifying the path before sending the request to the matched backend service.
type UrlRewriteResponse struct {
	// Prior to forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be between 1 and 255 characters.
	HostRewrite string `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be between 1 and 1024 characters.
	PathPrefixRewrite string `pulumi:"pathPrefixRewrite"`
}

// UrlRewriteResponseInput is an input type that accepts UrlRewriteResponseArgs and UrlRewriteResponseOutput values.
// You can construct a concrete instance of `UrlRewriteResponseInput` via:
//
//          UrlRewriteResponseArgs{...}
type UrlRewriteResponseInput interface {
	pulumi.Input

	ToUrlRewriteResponseOutput() UrlRewriteResponseOutput
	ToUrlRewriteResponseOutputWithContext(context.Context) UrlRewriteResponseOutput
}

// The spec for modifying the path before sending the request to the matched backend service.
type UrlRewriteResponseArgs struct {
	// Prior to forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be between 1 and 255 characters.
	HostRewrite pulumi.StringInput `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be between 1 and 1024 characters.
	PathPrefixRewrite pulumi.StringInput `pulumi:"pathPrefixRewrite"`
}

func (UrlRewriteResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlRewriteResponse)(nil)).Elem()
}

func (i UrlRewriteResponseArgs) ToUrlRewriteResponseOutput() UrlRewriteResponseOutput {
	return i.ToUrlRewriteResponseOutputWithContext(context.Background())
}

func (i UrlRewriteResponseArgs) ToUrlRewriteResponseOutputWithContext(ctx context.Context) UrlRewriteResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlRewriteResponseOutput)
}

func (i UrlRewriteResponseArgs) ToUrlRewriteResponsePtrOutput() UrlRewriteResponsePtrOutput {
	return i.ToUrlRewriteResponsePtrOutputWithContext(context.Background())
}

func (i UrlRewriteResponseArgs) ToUrlRewriteResponsePtrOutputWithContext(ctx context.Context) UrlRewriteResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlRewriteResponseOutput).ToUrlRewriteResponsePtrOutputWithContext(ctx)
}

// UrlRewriteResponsePtrInput is an input type that accepts UrlRewriteResponseArgs, UrlRewriteResponsePtr and UrlRewriteResponsePtrOutput values.
// You can construct a concrete instance of `UrlRewriteResponsePtrInput` via:
//
//          UrlRewriteResponseArgs{...}
//
//  or:
//
//          nil
type UrlRewriteResponsePtrInput interface {
	pulumi.Input

	ToUrlRewriteResponsePtrOutput() UrlRewriteResponsePtrOutput
	ToUrlRewriteResponsePtrOutputWithContext(context.Context) UrlRewriteResponsePtrOutput
}

type urlRewriteResponsePtrType UrlRewriteResponseArgs

func UrlRewriteResponsePtr(v *UrlRewriteResponseArgs) UrlRewriteResponsePtrInput {
	return (*urlRewriteResponsePtrType)(v)
}

func (*urlRewriteResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlRewriteResponse)(nil)).Elem()
}

func (i *urlRewriteResponsePtrType) ToUrlRewriteResponsePtrOutput() UrlRewriteResponsePtrOutput {
	return i.ToUrlRewriteResponsePtrOutputWithContext(context.Background())
}

func (i *urlRewriteResponsePtrType) ToUrlRewriteResponsePtrOutputWithContext(ctx context.Context) UrlRewriteResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlRewriteResponsePtrOutput)
}

// The spec for modifying the path before sending the request to the matched backend service.
type UrlRewriteResponseOutput struct{ *pulumi.OutputState }

func (UrlRewriteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlRewriteResponse)(nil)).Elem()
}

func (o UrlRewriteResponseOutput) ToUrlRewriteResponseOutput() UrlRewriteResponseOutput {
	return o
}

func (o UrlRewriteResponseOutput) ToUrlRewriteResponseOutputWithContext(ctx context.Context) UrlRewriteResponseOutput {
	return o
}

func (o UrlRewriteResponseOutput) ToUrlRewriteResponsePtrOutput() UrlRewriteResponsePtrOutput {
	return o.ToUrlRewriteResponsePtrOutputWithContext(context.Background())
}

func (o UrlRewriteResponseOutput) ToUrlRewriteResponsePtrOutputWithContext(ctx context.Context) UrlRewriteResponsePtrOutput {
	return o.ApplyT(func(v UrlRewriteResponse) *UrlRewriteResponse {
		return &v
	}).(UrlRewriteResponsePtrOutput)
}

// Prior to forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be between 1 and 255 characters.
func (o UrlRewriteResponseOutput) HostRewrite() pulumi.StringOutput {
	return o.ApplyT(func(v UrlRewriteResponse) string { return v.HostRewrite }).(pulumi.StringOutput)
}

// Prior to forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be between 1 and 1024 characters.
func (o UrlRewriteResponseOutput) PathPrefixRewrite() pulumi.StringOutput {
	return o.ApplyT(func(v UrlRewriteResponse) string { return v.PathPrefixRewrite }).(pulumi.StringOutput)
}

type UrlRewriteResponsePtrOutput struct{ *pulumi.OutputState }

func (UrlRewriteResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlRewriteResponse)(nil)).Elem()
}

func (o UrlRewriteResponsePtrOutput) ToUrlRewriteResponsePtrOutput() UrlRewriteResponsePtrOutput {
	return o
}

func (o UrlRewriteResponsePtrOutput) ToUrlRewriteResponsePtrOutputWithContext(ctx context.Context) UrlRewriteResponsePtrOutput {
	return o
}

func (o UrlRewriteResponsePtrOutput) Elem() UrlRewriteResponseOutput {
	return o.ApplyT(func(v *UrlRewriteResponse) UrlRewriteResponse { return *v }).(UrlRewriteResponseOutput)
}

// Prior to forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be between 1 and 255 characters.
func (o UrlRewriteResponsePtrOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlRewriteResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HostRewrite
	}).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be between 1 and 1024 characters.
func (o UrlRewriteResponsePtrOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlRewriteResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PathPrefixRewrite
	}).(pulumi.StringPtrOutput)
}

// A VPN gateway interface.
type VpnGatewayVpnGatewayInterface struct {
	// URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for IPsec-encrypted Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource. Not currently available publicly.
	InterconnectAttachment *string `pulumi:"interconnectAttachment"`
}

// VpnGatewayVpnGatewayInterfaceInput is an input type that accepts VpnGatewayVpnGatewayInterfaceArgs and VpnGatewayVpnGatewayInterfaceOutput values.
// You can construct a concrete instance of `VpnGatewayVpnGatewayInterfaceInput` via:
//
//          VpnGatewayVpnGatewayInterfaceArgs{...}
type VpnGatewayVpnGatewayInterfaceInput interface {
	pulumi.Input

	ToVpnGatewayVpnGatewayInterfaceOutput() VpnGatewayVpnGatewayInterfaceOutput
	ToVpnGatewayVpnGatewayInterfaceOutputWithContext(context.Context) VpnGatewayVpnGatewayInterfaceOutput
}

// A VPN gateway interface.
type VpnGatewayVpnGatewayInterfaceArgs struct {
	// URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for IPsec-encrypted Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource. Not currently available publicly.
	InterconnectAttachment pulumi.StringPtrInput `pulumi:"interconnectAttachment"`
}

func (VpnGatewayVpnGatewayInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnGatewayVpnGatewayInterface)(nil)).Elem()
}

func (i VpnGatewayVpnGatewayInterfaceArgs) ToVpnGatewayVpnGatewayInterfaceOutput() VpnGatewayVpnGatewayInterfaceOutput {
	return i.ToVpnGatewayVpnGatewayInterfaceOutputWithContext(context.Background())
}

func (i VpnGatewayVpnGatewayInterfaceArgs) ToVpnGatewayVpnGatewayInterfaceOutputWithContext(ctx context.Context) VpnGatewayVpnGatewayInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnGatewayVpnGatewayInterfaceOutput)
}

// VpnGatewayVpnGatewayInterfaceArrayInput is an input type that accepts VpnGatewayVpnGatewayInterfaceArray and VpnGatewayVpnGatewayInterfaceArrayOutput values.
// You can construct a concrete instance of `VpnGatewayVpnGatewayInterfaceArrayInput` via:
//
//          VpnGatewayVpnGatewayInterfaceArray{ VpnGatewayVpnGatewayInterfaceArgs{...} }
type VpnGatewayVpnGatewayInterfaceArrayInput interface {
	pulumi.Input

	ToVpnGatewayVpnGatewayInterfaceArrayOutput() VpnGatewayVpnGatewayInterfaceArrayOutput
	ToVpnGatewayVpnGatewayInterfaceArrayOutputWithContext(context.Context) VpnGatewayVpnGatewayInterfaceArrayOutput
}

type VpnGatewayVpnGatewayInterfaceArray []VpnGatewayVpnGatewayInterfaceInput

func (VpnGatewayVpnGatewayInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpnGatewayVpnGatewayInterface)(nil)).Elem()
}

func (i VpnGatewayVpnGatewayInterfaceArray) ToVpnGatewayVpnGatewayInterfaceArrayOutput() VpnGatewayVpnGatewayInterfaceArrayOutput {
	return i.ToVpnGatewayVpnGatewayInterfaceArrayOutputWithContext(context.Background())
}

func (i VpnGatewayVpnGatewayInterfaceArray) ToVpnGatewayVpnGatewayInterfaceArrayOutputWithContext(ctx context.Context) VpnGatewayVpnGatewayInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnGatewayVpnGatewayInterfaceArrayOutput)
}

// A VPN gateway interface.
type VpnGatewayVpnGatewayInterfaceOutput struct{ *pulumi.OutputState }

func (VpnGatewayVpnGatewayInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnGatewayVpnGatewayInterface)(nil)).Elem()
}

func (o VpnGatewayVpnGatewayInterfaceOutput) ToVpnGatewayVpnGatewayInterfaceOutput() VpnGatewayVpnGatewayInterfaceOutput {
	return o
}

func (o VpnGatewayVpnGatewayInterfaceOutput) ToVpnGatewayVpnGatewayInterfaceOutputWithContext(ctx context.Context) VpnGatewayVpnGatewayInterfaceOutput {
	return o
}

// URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for IPsec-encrypted Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource. Not currently available publicly.
func (o VpnGatewayVpnGatewayInterfaceOutput) InterconnectAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnGatewayVpnGatewayInterface) *string { return v.InterconnectAttachment }).(pulumi.StringPtrOutput)
}

type VpnGatewayVpnGatewayInterfaceArrayOutput struct{ *pulumi.OutputState }

func (VpnGatewayVpnGatewayInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpnGatewayVpnGatewayInterface)(nil)).Elem()
}

func (o VpnGatewayVpnGatewayInterfaceArrayOutput) ToVpnGatewayVpnGatewayInterfaceArrayOutput() VpnGatewayVpnGatewayInterfaceArrayOutput {
	return o
}

func (o VpnGatewayVpnGatewayInterfaceArrayOutput) ToVpnGatewayVpnGatewayInterfaceArrayOutputWithContext(ctx context.Context) VpnGatewayVpnGatewayInterfaceArrayOutput {
	return o
}

func (o VpnGatewayVpnGatewayInterfaceArrayOutput) Index(i pulumi.IntInput) VpnGatewayVpnGatewayInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpnGatewayVpnGatewayInterface {
		return vs[0].([]VpnGatewayVpnGatewayInterface)[vs[1].(int)]
	}).(VpnGatewayVpnGatewayInterfaceOutput)
}

// A VPN gateway interface.
type VpnGatewayVpnGatewayInterfaceResponse struct {
	// URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for IPsec-encrypted Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource. Not currently available publicly.
	InterconnectAttachment string `pulumi:"interconnectAttachment"`
	// IP address for this VPN interface associated with the VPN gateway. The IP address could be either a regional external IP address or a regional internal IP address. The two IP addresses for a VPN gateway must be all regional external or regional internal IP addresses. There cannot be a mix of regional external IP addresses and regional internal IP addresses. For IPsec-encrypted Cloud Interconnect, the IP addresses for both interfaces could either be regional internal IP addresses or regional external IP addresses. For regular (non IPsec-encrypted Cloud Interconnect) HA VPN tunnels, the IP address must be a regional external IP address.
	IpAddress string `pulumi:"ipAddress"`
}

// VpnGatewayVpnGatewayInterfaceResponseInput is an input type that accepts VpnGatewayVpnGatewayInterfaceResponseArgs and VpnGatewayVpnGatewayInterfaceResponseOutput values.
// You can construct a concrete instance of `VpnGatewayVpnGatewayInterfaceResponseInput` via:
//
//          VpnGatewayVpnGatewayInterfaceResponseArgs{...}
type VpnGatewayVpnGatewayInterfaceResponseInput interface {
	pulumi.Input

	ToVpnGatewayVpnGatewayInterfaceResponseOutput() VpnGatewayVpnGatewayInterfaceResponseOutput
	ToVpnGatewayVpnGatewayInterfaceResponseOutputWithContext(context.Context) VpnGatewayVpnGatewayInterfaceResponseOutput
}

// A VPN gateway interface.
type VpnGatewayVpnGatewayInterfaceResponseArgs struct {
	// URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for IPsec-encrypted Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource. Not currently available publicly.
	InterconnectAttachment pulumi.StringInput `pulumi:"interconnectAttachment"`
	// IP address for this VPN interface associated with the VPN gateway. The IP address could be either a regional external IP address or a regional internal IP address. The two IP addresses for a VPN gateway must be all regional external or regional internal IP addresses. There cannot be a mix of regional external IP addresses and regional internal IP addresses. For IPsec-encrypted Cloud Interconnect, the IP addresses for both interfaces could either be regional internal IP addresses or regional external IP addresses. For regular (non IPsec-encrypted Cloud Interconnect) HA VPN tunnels, the IP address must be a regional external IP address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
}

func (VpnGatewayVpnGatewayInterfaceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnGatewayVpnGatewayInterfaceResponse)(nil)).Elem()
}

func (i VpnGatewayVpnGatewayInterfaceResponseArgs) ToVpnGatewayVpnGatewayInterfaceResponseOutput() VpnGatewayVpnGatewayInterfaceResponseOutput {
	return i.ToVpnGatewayVpnGatewayInterfaceResponseOutputWithContext(context.Background())
}

func (i VpnGatewayVpnGatewayInterfaceResponseArgs) ToVpnGatewayVpnGatewayInterfaceResponseOutputWithContext(ctx context.Context) VpnGatewayVpnGatewayInterfaceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnGatewayVpnGatewayInterfaceResponseOutput)
}

// VpnGatewayVpnGatewayInterfaceResponseArrayInput is an input type that accepts VpnGatewayVpnGatewayInterfaceResponseArray and VpnGatewayVpnGatewayInterfaceResponseArrayOutput values.
// You can construct a concrete instance of `VpnGatewayVpnGatewayInterfaceResponseArrayInput` via:
//
//          VpnGatewayVpnGatewayInterfaceResponseArray{ VpnGatewayVpnGatewayInterfaceResponseArgs{...} }
type VpnGatewayVpnGatewayInterfaceResponseArrayInput interface {
	pulumi.Input

	ToVpnGatewayVpnGatewayInterfaceResponseArrayOutput() VpnGatewayVpnGatewayInterfaceResponseArrayOutput
	ToVpnGatewayVpnGatewayInterfaceResponseArrayOutputWithContext(context.Context) VpnGatewayVpnGatewayInterfaceResponseArrayOutput
}

type VpnGatewayVpnGatewayInterfaceResponseArray []VpnGatewayVpnGatewayInterfaceResponseInput

func (VpnGatewayVpnGatewayInterfaceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpnGatewayVpnGatewayInterfaceResponse)(nil)).Elem()
}

func (i VpnGatewayVpnGatewayInterfaceResponseArray) ToVpnGatewayVpnGatewayInterfaceResponseArrayOutput() VpnGatewayVpnGatewayInterfaceResponseArrayOutput {
	return i.ToVpnGatewayVpnGatewayInterfaceResponseArrayOutputWithContext(context.Background())
}

func (i VpnGatewayVpnGatewayInterfaceResponseArray) ToVpnGatewayVpnGatewayInterfaceResponseArrayOutputWithContext(ctx context.Context) VpnGatewayVpnGatewayInterfaceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnGatewayVpnGatewayInterfaceResponseArrayOutput)
}

// A VPN gateway interface.
type VpnGatewayVpnGatewayInterfaceResponseOutput struct{ *pulumi.OutputState }

func (VpnGatewayVpnGatewayInterfaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnGatewayVpnGatewayInterfaceResponse)(nil)).Elem()
}

func (o VpnGatewayVpnGatewayInterfaceResponseOutput) ToVpnGatewayVpnGatewayInterfaceResponseOutput() VpnGatewayVpnGatewayInterfaceResponseOutput {
	return o
}

func (o VpnGatewayVpnGatewayInterfaceResponseOutput) ToVpnGatewayVpnGatewayInterfaceResponseOutputWithContext(ctx context.Context) VpnGatewayVpnGatewayInterfaceResponseOutput {
	return o
}

// URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for IPsec-encrypted Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource. Not currently available publicly.
func (o VpnGatewayVpnGatewayInterfaceResponseOutput) InterconnectAttachment() pulumi.StringOutput {
	return o.ApplyT(func(v VpnGatewayVpnGatewayInterfaceResponse) string { return v.InterconnectAttachment }).(pulumi.StringOutput)
}

// IP address for this VPN interface associated with the VPN gateway. The IP address could be either a regional external IP address or a regional internal IP address. The two IP addresses for a VPN gateway must be all regional external or regional internal IP addresses. There cannot be a mix of regional external IP addresses and regional internal IP addresses. For IPsec-encrypted Cloud Interconnect, the IP addresses for both interfaces could either be regional internal IP addresses or regional external IP addresses. For regular (non IPsec-encrypted Cloud Interconnect) HA VPN tunnels, the IP address must be a regional external IP address.
func (o VpnGatewayVpnGatewayInterfaceResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v VpnGatewayVpnGatewayInterfaceResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

type VpnGatewayVpnGatewayInterfaceResponseArrayOutput struct{ *pulumi.OutputState }

func (VpnGatewayVpnGatewayInterfaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpnGatewayVpnGatewayInterfaceResponse)(nil)).Elem()
}

func (o VpnGatewayVpnGatewayInterfaceResponseArrayOutput) ToVpnGatewayVpnGatewayInterfaceResponseArrayOutput() VpnGatewayVpnGatewayInterfaceResponseArrayOutput {
	return o
}

func (o VpnGatewayVpnGatewayInterfaceResponseArrayOutput) ToVpnGatewayVpnGatewayInterfaceResponseArrayOutputWithContext(ctx context.Context) VpnGatewayVpnGatewayInterfaceResponseArrayOutput {
	return o
}

func (o VpnGatewayVpnGatewayInterfaceResponseArrayOutput) Index(i pulumi.IntInput) VpnGatewayVpnGatewayInterfaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpnGatewayVpnGatewayInterfaceResponse {
		return vs[0].([]VpnGatewayVpnGatewayInterfaceResponse)[vs[1].(int)]
	}).(VpnGatewayVpnGatewayInterfaceResponseOutput)
}

// In contrast to a single BackendService in HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple BackendServices. The volume of traffic for each BackendService is proportional to the weight specified in each WeightedBackendService
type WeightedBackendService struct {
	// The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the loadbalancer applies any relevant headerActions specified as part of this backendServiceWeight.
	BackendService *string `pulumi:"backendService"`
	// Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap. Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	HeaderAction *HttpHeaderAction `pulumi:"headerAction"`
	// Specifies the fraction of traffic sent to backendService, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backendService, subsequent requests will be sent to the same backendService as determined by the BackendService's session affinity policy. The value must be between 0 and 1000
	Weight *int `pulumi:"weight"`
}

// WeightedBackendServiceInput is an input type that accepts WeightedBackendServiceArgs and WeightedBackendServiceOutput values.
// You can construct a concrete instance of `WeightedBackendServiceInput` via:
//
//          WeightedBackendServiceArgs{...}
type WeightedBackendServiceInput interface {
	pulumi.Input

	ToWeightedBackendServiceOutput() WeightedBackendServiceOutput
	ToWeightedBackendServiceOutputWithContext(context.Context) WeightedBackendServiceOutput
}

// In contrast to a single BackendService in HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple BackendServices. The volume of traffic for each BackendService is proportional to the weight specified in each WeightedBackendService
type WeightedBackendServiceArgs struct {
	// The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the loadbalancer applies any relevant headerActions specified as part of this backendServiceWeight.
	BackendService pulumi.StringPtrInput `pulumi:"backendService"`
	// Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap. Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	HeaderAction HttpHeaderActionPtrInput `pulumi:"headerAction"`
	// Specifies the fraction of traffic sent to backendService, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backendService, subsequent requests will be sent to the same backendService as determined by the BackendService's session affinity policy. The value must be between 0 and 1000
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (WeightedBackendServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeightedBackendService)(nil)).Elem()
}

func (i WeightedBackendServiceArgs) ToWeightedBackendServiceOutput() WeightedBackendServiceOutput {
	return i.ToWeightedBackendServiceOutputWithContext(context.Background())
}

func (i WeightedBackendServiceArgs) ToWeightedBackendServiceOutputWithContext(ctx context.Context) WeightedBackendServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeightedBackendServiceOutput)
}

// WeightedBackendServiceArrayInput is an input type that accepts WeightedBackendServiceArray and WeightedBackendServiceArrayOutput values.
// You can construct a concrete instance of `WeightedBackendServiceArrayInput` via:
//
//          WeightedBackendServiceArray{ WeightedBackendServiceArgs{...} }
type WeightedBackendServiceArrayInput interface {
	pulumi.Input

	ToWeightedBackendServiceArrayOutput() WeightedBackendServiceArrayOutput
	ToWeightedBackendServiceArrayOutputWithContext(context.Context) WeightedBackendServiceArrayOutput
}

type WeightedBackendServiceArray []WeightedBackendServiceInput

func (WeightedBackendServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeightedBackendService)(nil)).Elem()
}

func (i WeightedBackendServiceArray) ToWeightedBackendServiceArrayOutput() WeightedBackendServiceArrayOutput {
	return i.ToWeightedBackendServiceArrayOutputWithContext(context.Background())
}

func (i WeightedBackendServiceArray) ToWeightedBackendServiceArrayOutputWithContext(ctx context.Context) WeightedBackendServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeightedBackendServiceArrayOutput)
}

// In contrast to a single BackendService in HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple BackendServices. The volume of traffic for each BackendService is proportional to the weight specified in each WeightedBackendService
type WeightedBackendServiceOutput struct{ *pulumi.OutputState }

func (WeightedBackendServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeightedBackendService)(nil)).Elem()
}

func (o WeightedBackendServiceOutput) ToWeightedBackendServiceOutput() WeightedBackendServiceOutput {
	return o
}

func (o WeightedBackendServiceOutput) ToWeightedBackendServiceOutputWithContext(ctx context.Context) WeightedBackendServiceOutput {
	return o
}

// The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the loadbalancer applies any relevant headerActions specified as part of this backendServiceWeight.
func (o WeightedBackendServiceOutput) BackendService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WeightedBackendService) *string { return v.BackendService }).(pulumi.StringPtrOutput)
}

// Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap. Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o WeightedBackendServiceOutput) HeaderAction() HttpHeaderActionPtrOutput {
	return o.ApplyT(func(v WeightedBackendService) *HttpHeaderAction { return v.HeaderAction }).(HttpHeaderActionPtrOutput)
}

// Specifies the fraction of traffic sent to backendService, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backendService, subsequent requests will be sent to the same backendService as determined by the BackendService's session affinity policy. The value must be between 0 and 1000
func (o WeightedBackendServiceOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WeightedBackendService) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type WeightedBackendServiceArrayOutput struct{ *pulumi.OutputState }

func (WeightedBackendServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeightedBackendService)(nil)).Elem()
}

func (o WeightedBackendServiceArrayOutput) ToWeightedBackendServiceArrayOutput() WeightedBackendServiceArrayOutput {
	return o
}

func (o WeightedBackendServiceArrayOutput) ToWeightedBackendServiceArrayOutputWithContext(ctx context.Context) WeightedBackendServiceArrayOutput {
	return o
}

func (o WeightedBackendServiceArrayOutput) Index(i pulumi.IntInput) WeightedBackendServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WeightedBackendService {
		return vs[0].([]WeightedBackendService)[vs[1].(int)]
	}).(WeightedBackendServiceOutput)
}

// In contrast to a single BackendService in HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple BackendServices. The volume of traffic for each BackendService is proportional to the weight specified in each WeightedBackendService
type WeightedBackendServiceResponse struct {
	// The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the loadbalancer applies any relevant headerActions specified as part of this backendServiceWeight.
	BackendService string `pulumi:"backendService"`
	// Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap. Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	HeaderAction HttpHeaderActionResponse `pulumi:"headerAction"`
	// Specifies the fraction of traffic sent to backendService, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backendService, subsequent requests will be sent to the same backendService as determined by the BackendService's session affinity policy. The value must be between 0 and 1000
	Weight int `pulumi:"weight"`
}

// WeightedBackendServiceResponseInput is an input type that accepts WeightedBackendServiceResponseArgs and WeightedBackendServiceResponseOutput values.
// You can construct a concrete instance of `WeightedBackendServiceResponseInput` via:
//
//          WeightedBackendServiceResponseArgs{...}
type WeightedBackendServiceResponseInput interface {
	pulumi.Input

	ToWeightedBackendServiceResponseOutput() WeightedBackendServiceResponseOutput
	ToWeightedBackendServiceResponseOutputWithContext(context.Context) WeightedBackendServiceResponseOutput
}

// In contrast to a single BackendService in HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple BackendServices. The volume of traffic for each BackendService is proportional to the weight specified in each WeightedBackendService
type WeightedBackendServiceResponseArgs struct {
	// The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the loadbalancer applies any relevant headerActions specified as part of this backendServiceWeight.
	BackendService pulumi.StringInput `pulumi:"backendService"`
	// Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap. Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
	HeaderAction HttpHeaderActionResponseInput `pulumi:"headerAction"`
	// Specifies the fraction of traffic sent to backendService, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backendService, subsequent requests will be sent to the same backendService as determined by the BackendService's session affinity policy. The value must be between 0 and 1000
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (WeightedBackendServiceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeightedBackendServiceResponse)(nil)).Elem()
}

func (i WeightedBackendServiceResponseArgs) ToWeightedBackendServiceResponseOutput() WeightedBackendServiceResponseOutput {
	return i.ToWeightedBackendServiceResponseOutputWithContext(context.Background())
}

func (i WeightedBackendServiceResponseArgs) ToWeightedBackendServiceResponseOutputWithContext(ctx context.Context) WeightedBackendServiceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeightedBackendServiceResponseOutput)
}

// WeightedBackendServiceResponseArrayInput is an input type that accepts WeightedBackendServiceResponseArray and WeightedBackendServiceResponseArrayOutput values.
// You can construct a concrete instance of `WeightedBackendServiceResponseArrayInput` via:
//
//          WeightedBackendServiceResponseArray{ WeightedBackendServiceResponseArgs{...} }
type WeightedBackendServiceResponseArrayInput interface {
	pulumi.Input

	ToWeightedBackendServiceResponseArrayOutput() WeightedBackendServiceResponseArrayOutput
	ToWeightedBackendServiceResponseArrayOutputWithContext(context.Context) WeightedBackendServiceResponseArrayOutput
}

type WeightedBackendServiceResponseArray []WeightedBackendServiceResponseInput

func (WeightedBackendServiceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeightedBackendServiceResponse)(nil)).Elem()
}

func (i WeightedBackendServiceResponseArray) ToWeightedBackendServiceResponseArrayOutput() WeightedBackendServiceResponseArrayOutput {
	return i.ToWeightedBackendServiceResponseArrayOutputWithContext(context.Background())
}

func (i WeightedBackendServiceResponseArray) ToWeightedBackendServiceResponseArrayOutputWithContext(ctx context.Context) WeightedBackendServiceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeightedBackendServiceResponseArrayOutput)
}

// In contrast to a single BackendService in HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple BackendServices. The volume of traffic for each BackendService is proportional to the weight specified in each WeightedBackendService
type WeightedBackendServiceResponseOutput struct{ *pulumi.OutputState }

func (WeightedBackendServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeightedBackendServiceResponse)(nil)).Elem()
}

func (o WeightedBackendServiceResponseOutput) ToWeightedBackendServiceResponseOutput() WeightedBackendServiceResponseOutput {
	return o
}

func (o WeightedBackendServiceResponseOutput) ToWeightedBackendServiceResponseOutputWithContext(ctx context.Context) WeightedBackendServiceResponseOutput {
	return o
}

// The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the loadbalancer applies any relevant headerActions specified as part of this backendServiceWeight.
func (o WeightedBackendServiceResponseOutput) BackendService() pulumi.StringOutput {
	return o.ApplyT(func(v WeightedBackendServiceResponse) string { return v.BackendService }).(pulumi.StringOutput)
}

// Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap. Note that headerAction is not supported for Loadbalancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true.
func (o WeightedBackendServiceResponseOutput) HeaderAction() HttpHeaderActionResponseOutput {
	return o.ApplyT(func(v WeightedBackendServiceResponse) HttpHeaderActionResponse { return v.HeaderAction }).(HttpHeaderActionResponseOutput)
}

// Specifies the fraction of traffic sent to backendService, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backendService, subsequent requests will be sent to the same backendService as determined by the BackendService's session affinity policy. The value must be between 0 and 1000
func (o WeightedBackendServiceResponseOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v WeightedBackendServiceResponse) int { return v.Weight }).(pulumi.IntOutput)
}

type WeightedBackendServiceResponseArrayOutput struct{ *pulumi.OutputState }

func (WeightedBackendServiceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeightedBackendServiceResponse)(nil)).Elem()
}

func (o WeightedBackendServiceResponseArrayOutput) ToWeightedBackendServiceResponseArrayOutput() WeightedBackendServiceResponseArrayOutput {
	return o
}

func (o WeightedBackendServiceResponseArrayOutput) ToWeightedBackendServiceResponseArrayOutputWithContext(ctx context.Context) WeightedBackendServiceResponseArrayOutput {
	return o
}

func (o WeightedBackendServiceResponseArrayOutput) Index(i pulumi.IntInput) WeightedBackendServiceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WeightedBackendServiceResponse {
		return vs[0].([]WeightedBackendServiceResponse)[vs[1].(int)]
	}).(WeightedBackendServiceResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AcceleratorConfigOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigArrayOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigResponseOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AccessConfigOutput{})
	pulumi.RegisterOutputType(AccessConfigArrayOutput{})
	pulumi.RegisterOutputType(AccessConfigResponseOutput{})
	pulumi.RegisterOutputType(AccessConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AdvancedMachineFeaturesOutput{})
	pulumi.RegisterOutputType(AdvancedMachineFeaturesPtrOutput{})
	pulumi.RegisterOutputType(AdvancedMachineFeaturesResponseOutput{})
	pulumi.RegisterOutputType(AdvancedMachineFeaturesResponsePtrOutput{})
	pulumi.RegisterOutputType(AliasIpRangeOutput{})
	pulumi.RegisterOutputType(AliasIpRangeArrayOutput{})
	pulumi.RegisterOutputType(AliasIpRangeResponseOutput{})
	pulumi.RegisterOutputType(AliasIpRangeResponseArrayOutput{})
	pulumi.RegisterOutputType(AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskOutput{})
	pulumi.RegisterOutputType(AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskArrayOutput{})
	pulumi.RegisterOutputType(AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseOutput{})
	pulumi.RegisterOutputType(AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(AllocationSpecificSKUAllocationReservedInstancePropertiesOutput{})
	pulumi.RegisterOutputType(AllocationSpecificSKUAllocationReservedInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AllocationSpecificSKUAllocationReservedInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(AllocationSpecificSKUAllocationReservedInstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AllocationSpecificSKUReservationOutput{})
	pulumi.RegisterOutputType(AllocationSpecificSKUReservationPtrOutput{})
	pulumi.RegisterOutputType(AllocationSpecificSKUReservationResponseOutput{})
	pulumi.RegisterOutputType(AllocationSpecificSKUReservationResponsePtrOutput{})
	pulumi.RegisterOutputType(AttachedDiskOutput{})
	pulumi.RegisterOutputType(AttachedDiskArrayOutput{})
	pulumi.RegisterOutputType(AttachedDiskInitializeParamsOutput{})
	pulumi.RegisterOutputType(AttachedDiskInitializeParamsPtrOutput{})
	pulumi.RegisterOutputType(AttachedDiskInitializeParamsResponseOutput{})
	pulumi.RegisterOutputType(AttachedDiskResponseOutput{})
	pulumi.RegisterOutputType(AttachedDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationLoggingOptionsOutput{})
	pulumi.RegisterOutputType(AuthorizationLoggingOptionsPtrOutput{})
	pulumi.RegisterOutputType(AuthorizationLoggingOptionsResponseOutput{})
	pulumi.RegisterOutputType(AutoscalerStatusDetailsResponseOutput{})
	pulumi.RegisterOutputType(AutoscalerStatusDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyPtrOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyCpuUtilizationOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyCpuUtilizationPtrOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyCpuUtilizationResponseOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyCpuUtilizationResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyCustomMetricUtilizationOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyCustomMetricUtilizationArrayOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyCustomMetricUtilizationResponseOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyCustomMetricUtilizationResponseArrayOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyLoadBalancingUtilizationOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyLoadBalancingUtilizationPtrOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyLoadBalancingUtilizationResponseOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyLoadBalancingUtilizationResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyResponseOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyScaleInControlOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyScaleInControlPtrOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyScaleInControlResponseOutput{})
	pulumi.RegisterOutputType(AutoscalingPolicyScaleInControlResponsePtrOutput{})
	pulumi.RegisterOutputType(BackendOutput{})
	pulumi.RegisterOutputType(BackendArrayOutput{})
	pulumi.RegisterOutputType(BackendBucketCdnPolicyOutput{})
	pulumi.RegisterOutputType(BackendBucketCdnPolicyPtrOutput{})
	pulumi.RegisterOutputType(BackendBucketCdnPolicyBypassCacheOnRequestHeaderOutput{})
	pulumi.RegisterOutputType(BackendBucketCdnPolicyBypassCacheOnRequestHeaderArrayOutput{})
	pulumi.RegisterOutputType(BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseOutput{})
	pulumi.RegisterOutputType(BackendBucketCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput{})
	pulumi.RegisterOutputType(BackendBucketCdnPolicyNegativeCachingPolicyOutput{})
	pulumi.RegisterOutputType(BackendBucketCdnPolicyNegativeCachingPolicyArrayOutput{})
	pulumi.RegisterOutputType(BackendBucketCdnPolicyNegativeCachingPolicyResponseOutput{})
	pulumi.RegisterOutputType(BackendBucketCdnPolicyNegativeCachingPolicyResponseArrayOutput{})
	pulumi.RegisterOutputType(BackendBucketCdnPolicyResponseOutput{})
	pulumi.RegisterOutputType(BackendBucketCdnPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(BackendResponseOutput{})
	pulumi.RegisterOutputType(BackendResponseArrayOutput{})
	pulumi.RegisterOutputType(BackendServiceCdnPolicyOutput{})
	pulumi.RegisterOutputType(BackendServiceCdnPolicyPtrOutput{})
	pulumi.RegisterOutputType(BackendServiceCdnPolicyBypassCacheOnRequestHeaderOutput{})
	pulumi.RegisterOutputType(BackendServiceCdnPolicyBypassCacheOnRequestHeaderArrayOutput{})
	pulumi.RegisterOutputType(BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseOutput{})
	pulumi.RegisterOutputType(BackendServiceCdnPolicyBypassCacheOnRequestHeaderResponseArrayOutput{})
	pulumi.RegisterOutputType(BackendServiceCdnPolicyNegativeCachingPolicyOutput{})
	pulumi.RegisterOutputType(BackendServiceCdnPolicyNegativeCachingPolicyArrayOutput{})
	pulumi.RegisterOutputType(BackendServiceCdnPolicyNegativeCachingPolicyResponseOutput{})
	pulumi.RegisterOutputType(BackendServiceCdnPolicyNegativeCachingPolicyResponseArrayOutput{})
	pulumi.RegisterOutputType(BackendServiceCdnPolicyResponseOutput{})
	pulumi.RegisterOutputType(BackendServiceCdnPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(BackendServiceFailoverPolicyOutput{})
	pulumi.RegisterOutputType(BackendServiceFailoverPolicyPtrOutput{})
	pulumi.RegisterOutputType(BackendServiceFailoverPolicyResponseOutput{})
	pulumi.RegisterOutputType(BackendServiceFailoverPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(BackendServiceIAPOutput{})
	pulumi.RegisterOutputType(BackendServiceIAPPtrOutput{})
	pulumi.RegisterOutputType(BackendServiceIAPResponseOutput{})
	pulumi.RegisterOutputType(BackendServiceIAPResponsePtrOutput{})
	pulumi.RegisterOutputType(BackendServiceLogConfigOutput{})
	pulumi.RegisterOutputType(BackendServiceLogConfigPtrOutput{})
	pulumi.RegisterOutputType(BackendServiceLogConfigResponseOutput{})
	pulumi.RegisterOutputType(BackendServiceLogConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(CacheKeyPolicyOutput{})
	pulumi.RegisterOutputType(CacheKeyPolicyPtrOutput{})
	pulumi.RegisterOutputType(CacheKeyPolicyResponseOutput{})
	pulumi.RegisterOutputType(CacheKeyPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(CircuitBreakersOutput{})
	pulumi.RegisterOutputType(CircuitBreakersPtrOutput{})
	pulumi.RegisterOutputType(CircuitBreakersResponseOutput{})
	pulumi.RegisterOutputType(CircuitBreakersResponsePtrOutput{})
	pulumi.RegisterOutputType(ConditionOutput{})
	pulumi.RegisterOutputType(ConditionArrayOutput{})
	pulumi.RegisterOutputType(ConditionResponseOutput{})
	pulumi.RegisterOutputType(ConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(ConfidentialInstanceConfigOutput{})
	pulumi.RegisterOutputType(ConfidentialInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(ConfidentialInstanceConfigResponseOutput{})
	pulumi.RegisterOutputType(ConfidentialInstanceConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectionDrainingOutput{})
	pulumi.RegisterOutputType(ConnectionDrainingPtrOutput{})
	pulumi.RegisterOutputType(ConnectionDrainingResponseOutput{})
	pulumi.RegisterOutputType(ConnectionDrainingResponsePtrOutput{})
	pulumi.RegisterOutputType(ConsistentHashLoadBalancerSettingsOutput{})
	pulumi.RegisterOutputType(ConsistentHashLoadBalancerSettingsPtrOutput{})
	pulumi.RegisterOutputType(ConsistentHashLoadBalancerSettingsHttpCookieOutput{})
	pulumi.RegisterOutputType(ConsistentHashLoadBalancerSettingsHttpCookiePtrOutput{})
	pulumi.RegisterOutputType(ConsistentHashLoadBalancerSettingsHttpCookieResponseOutput{})
	pulumi.RegisterOutputType(ConsistentHashLoadBalancerSettingsHttpCookieResponsePtrOutput{})
	pulumi.RegisterOutputType(ConsistentHashLoadBalancerSettingsResponseOutput{})
	pulumi.RegisterOutputType(ConsistentHashLoadBalancerSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CorsPolicyOutput{})
	pulumi.RegisterOutputType(CorsPolicyPtrOutput{})
	pulumi.RegisterOutputType(CorsPolicyResponseOutput{})
	pulumi.RegisterOutputType(CorsPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomerEncryptionKeyOutput{})
	pulumi.RegisterOutputType(CustomerEncryptionKeyPtrOutput{})
	pulumi.RegisterOutputType(CustomerEncryptionKeyResponseOutput{})
	pulumi.RegisterOutputType(CustomerEncryptionKeyResponsePtrOutput{})
	pulumi.RegisterOutputType(DeprecationStatusOutput{})
	pulumi.RegisterOutputType(DeprecationStatusPtrOutput{})
	pulumi.RegisterOutputType(DeprecationStatusResponseOutput{})
	pulumi.RegisterOutputType(DeprecationStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskInstantiationConfigOutput{})
	pulumi.RegisterOutputType(DiskInstantiationConfigArrayOutput{})
	pulumi.RegisterOutputType(DiskInstantiationConfigResponseOutput{})
	pulumi.RegisterOutputType(DiskInstantiationConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(DisplayDeviceOutput{})
	pulumi.RegisterOutputType(DisplayDevicePtrOutput{})
	pulumi.RegisterOutputType(DisplayDeviceResponseOutput{})
	pulumi.RegisterOutputType(DisplayDeviceResponsePtrOutput{})
	pulumi.RegisterOutputType(DistributionPolicyOutput{})
	pulumi.RegisterOutputType(DistributionPolicyPtrOutput{})
	pulumi.RegisterOutputType(DistributionPolicyResponseOutput{})
	pulumi.RegisterOutputType(DistributionPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(DistributionPolicyZoneConfigurationOutput{})
	pulumi.RegisterOutputType(DistributionPolicyZoneConfigurationArrayOutput{})
	pulumi.RegisterOutputType(DistributionPolicyZoneConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DistributionPolicyZoneConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(DurationOutput{})
	pulumi.RegisterOutputType(DurationPtrOutput{})
	pulumi.RegisterOutputType(DurationResponseOutput{})
	pulumi.RegisterOutputType(DurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(ExternalVpnGatewayInterfaceOutput{})
	pulumi.RegisterOutputType(ExternalVpnGatewayInterfaceArrayOutput{})
	pulumi.RegisterOutputType(ExternalVpnGatewayInterfaceResponseOutput{})
	pulumi.RegisterOutputType(ExternalVpnGatewayInterfaceResponseArrayOutput{})
	pulumi.RegisterOutputType(FileContentBufferOutput{})
	pulumi.RegisterOutputType(FileContentBufferPtrOutput{})
	pulumi.RegisterOutputType(FileContentBufferArrayOutput{})
	pulumi.RegisterOutputType(FileContentBufferResponseOutput{})
	pulumi.RegisterOutputType(FileContentBufferResponsePtrOutput{})
	pulumi.RegisterOutputType(FileContentBufferResponseArrayOutput{})
	pulumi.RegisterOutputType(FirewallAllowedItemOutput{})
	pulumi.RegisterOutputType(FirewallAllowedItemArrayOutput{})
	pulumi.RegisterOutputType(FirewallAllowedItemResponseOutput{})
	pulumi.RegisterOutputType(FirewallAllowedItemResponseArrayOutput{})
	pulumi.RegisterOutputType(FirewallDeniedItemOutput{})
	pulumi.RegisterOutputType(FirewallDeniedItemArrayOutput{})
	pulumi.RegisterOutputType(FirewallDeniedItemResponseOutput{})
	pulumi.RegisterOutputType(FirewallDeniedItemResponseArrayOutput{})
	pulumi.RegisterOutputType(FirewallLogConfigOutput{})
	pulumi.RegisterOutputType(FirewallLogConfigPtrOutput{})
	pulumi.RegisterOutputType(FirewallLogConfigResponseOutput{})
	pulumi.RegisterOutputType(FirewallLogConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyAssociationOutput{})
	pulumi.RegisterOutputType(FirewallPolicyAssociationArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyAssociationResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicyAssociationResponseArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyRuleOutput{})
	pulumi.RegisterOutputType(FirewallPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyRuleMatcherOutput{})
	pulumi.RegisterOutputType(FirewallPolicyRuleMatcherPtrOutput{})
	pulumi.RegisterOutputType(FirewallPolicyRuleMatcherLayer4ConfigOutput{})
	pulumi.RegisterOutputType(FirewallPolicyRuleMatcherLayer4ConfigArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyRuleMatcherLayer4ConfigResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicyRuleMatcherLayer4ConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(FirewallPolicyRuleMatcherResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicyRuleResponseOutput{})
	pulumi.RegisterOutputType(FirewallPolicyRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(FixedOrPercentOutput{})
	pulumi.RegisterOutputType(FixedOrPercentPtrOutput{})
	pulumi.RegisterOutputType(FixedOrPercentResponseOutput{})
	pulumi.RegisterOutputType(FixedOrPercentResponsePtrOutput{})
	pulumi.RegisterOutputType(ForwardingRuleServiceDirectoryRegistrationOutput{})
	pulumi.RegisterOutputType(ForwardingRuleServiceDirectoryRegistrationArrayOutput{})
	pulumi.RegisterOutputType(ForwardingRuleServiceDirectoryRegistrationResponseOutput{})
	pulumi.RegisterOutputType(ForwardingRuleServiceDirectoryRegistrationResponseArrayOutput{})
	pulumi.RegisterOutputType(GRPCHealthCheckOutput{})
	pulumi.RegisterOutputType(GRPCHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(GRPCHealthCheckResponseOutput{})
	pulumi.RegisterOutputType(GRPCHealthCheckResponsePtrOutput{})
	pulumi.RegisterOutputType(GuestOsFeatureOutput{})
	pulumi.RegisterOutputType(GuestOsFeatureArrayOutput{})
	pulumi.RegisterOutputType(GuestOsFeatureResponseOutput{})
	pulumi.RegisterOutputType(GuestOsFeatureResponseArrayOutput{})
	pulumi.RegisterOutputType(HTTP2HealthCheckOutput{})
	pulumi.RegisterOutputType(HTTP2HealthCheckPtrOutput{})
	pulumi.RegisterOutputType(HTTP2HealthCheckResponseOutput{})
	pulumi.RegisterOutputType(HTTP2HealthCheckResponsePtrOutput{})
	pulumi.RegisterOutputType(HTTPHealthCheckOutput{})
	pulumi.RegisterOutputType(HTTPHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(HTTPHealthCheckResponseOutput{})
	pulumi.RegisterOutputType(HTTPHealthCheckResponsePtrOutput{})
	pulumi.RegisterOutputType(HTTPSHealthCheckOutput{})
	pulumi.RegisterOutputType(HTTPSHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(HTTPSHealthCheckResponseOutput{})
	pulumi.RegisterOutputType(HTTPSHealthCheckResponsePtrOutput{})
	pulumi.RegisterOutputType(HealthCheckLogConfigOutput{})
	pulumi.RegisterOutputType(HealthCheckLogConfigPtrOutput{})
	pulumi.RegisterOutputType(HealthCheckLogConfigResponseOutput{})
	pulumi.RegisterOutputType(HealthCheckLogConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(HostRuleOutput{})
	pulumi.RegisterOutputType(HostRuleArrayOutput{})
	pulumi.RegisterOutputType(HostRuleResponseOutput{})
	pulumi.RegisterOutputType(HostRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(HttpFaultAbortOutput{})
	pulumi.RegisterOutputType(HttpFaultAbortPtrOutput{})
	pulumi.RegisterOutputType(HttpFaultAbortResponseOutput{})
	pulumi.RegisterOutputType(HttpFaultAbortResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpFaultDelayOutput{})
	pulumi.RegisterOutputType(HttpFaultDelayPtrOutput{})
	pulumi.RegisterOutputType(HttpFaultDelayResponseOutput{})
	pulumi.RegisterOutputType(HttpFaultDelayResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpFaultInjectionOutput{})
	pulumi.RegisterOutputType(HttpFaultInjectionPtrOutput{})
	pulumi.RegisterOutputType(HttpFaultInjectionResponseOutput{})
	pulumi.RegisterOutputType(HttpFaultInjectionResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpHeaderActionOutput{})
	pulumi.RegisterOutputType(HttpHeaderActionPtrOutput{})
	pulumi.RegisterOutputType(HttpHeaderActionResponseOutput{})
	pulumi.RegisterOutputType(HttpHeaderActionResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpHeaderMatchOutput{})
	pulumi.RegisterOutputType(HttpHeaderMatchArrayOutput{})
	pulumi.RegisterOutputType(HttpHeaderMatchResponseOutput{})
	pulumi.RegisterOutputType(HttpHeaderMatchResponseArrayOutput{})
	pulumi.RegisterOutputType(HttpHeaderOptionOutput{})
	pulumi.RegisterOutputType(HttpHeaderOptionArrayOutput{})
	pulumi.RegisterOutputType(HttpHeaderOptionResponseOutput{})
	pulumi.RegisterOutputType(HttpHeaderOptionResponseArrayOutput{})
	pulumi.RegisterOutputType(HttpQueryParameterMatchOutput{})
	pulumi.RegisterOutputType(HttpQueryParameterMatchArrayOutput{})
	pulumi.RegisterOutputType(HttpQueryParameterMatchResponseOutput{})
	pulumi.RegisterOutputType(HttpQueryParameterMatchResponseArrayOutput{})
	pulumi.RegisterOutputType(HttpRedirectActionOutput{})
	pulumi.RegisterOutputType(HttpRedirectActionPtrOutput{})
	pulumi.RegisterOutputType(HttpRedirectActionResponseOutput{})
	pulumi.RegisterOutputType(HttpRedirectActionResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpRetryPolicyOutput{})
	pulumi.RegisterOutputType(HttpRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(HttpRetryPolicyResponseOutput{})
	pulumi.RegisterOutputType(HttpRetryPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpRouteActionOutput{})
	pulumi.RegisterOutputType(HttpRouteActionPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteActionResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteActionResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleMatchOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleMatchArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleMatchResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleMatchResponseArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageRawDiskOutput{})
	pulumi.RegisterOutputType(ImageRawDiskPtrOutput{})
	pulumi.RegisterOutputType(ImageRawDiskResponseOutput{})
	pulumi.RegisterOutputType(ImageRawDiskResponsePtrOutput{})
	pulumi.RegisterOutputType(InitialStateConfigOutput{})
	pulumi.RegisterOutputType(InitialStateConfigPtrOutput{})
	pulumi.RegisterOutputType(InitialStateConfigResponseOutput{})
	pulumi.RegisterOutputType(InitialStateConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerActionsSummaryResponseOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerActionsSummaryResponsePtrOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerAutoHealingPolicyOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerAutoHealingPolicyArrayOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerAutoHealingPolicyResponseOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerAutoHealingPolicyResponseArrayOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerStatusResponseOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerStatusStatefulPerInstanceConfigsResponseOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerStatusStatefulPerInstanceConfigsResponsePtrOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerStatusStatefulResponseOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerStatusStatefulResponsePtrOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerStatusVersionTargetResponseOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerStatusVersionTargetResponsePtrOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerUpdatePolicyOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerUpdatePolicyPtrOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerUpdatePolicyResponseOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerUpdatePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerVersionOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerVersionArrayOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerVersionResponseOutput{})
	pulumi.RegisterOutputType(InstanceGroupManagerVersionResponseArrayOutput{})
	pulumi.RegisterOutputType(InstancePropertiesOutput{})
	pulumi.RegisterOutputType(InstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(InstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(InstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(Int64RangeMatchOutput{})
	pulumi.RegisterOutputType(Int64RangeMatchPtrOutput{})
	pulumi.RegisterOutputType(Int64RangeMatchResponseOutput{})
	pulumi.RegisterOutputType(InterconnectAttachmentPartnerMetadataOutput{})
	pulumi.RegisterOutputType(InterconnectAttachmentPartnerMetadataPtrOutput{})
	pulumi.RegisterOutputType(InterconnectAttachmentPartnerMetadataResponseOutput{})
	pulumi.RegisterOutputType(InterconnectAttachmentPartnerMetadataResponsePtrOutput{})
	pulumi.RegisterOutputType(InterconnectAttachmentPrivateInfoResponseOutput{})
	pulumi.RegisterOutputType(InterconnectAttachmentPrivateInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(InterconnectCircuitInfoResponseOutput{})
	pulumi.RegisterOutputType(InterconnectCircuitInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(InterconnectOutageNotificationResponseOutput{})
	pulumi.RegisterOutputType(InterconnectOutageNotificationResponseArrayOutput{})
	pulumi.RegisterOutputType(LicenseResourceCommitmentOutput{})
	pulumi.RegisterOutputType(LicenseResourceCommitmentPtrOutput{})
	pulumi.RegisterOutputType(LicenseResourceCommitmentResponseOutput{})
	pulumi.RegisterOutputType(LicenseResourceCommitmentResponsePtrOutput{})
	pulumi.RegisterOutputType(LicenseResourceRequirementsOutput{})
	pulumi.RegisterOutputType(LicenseResourceRequirementsPtrOutput{})
	pulumi.RegisterOutputType(LicenseResourceRequirementsResponseOutput{})
	pulumi.RegisterOutputType(LicenseResourceRequirementsResponsePtrOutput{})
	pulumi.RegisterOutputType(LocalDiskOutput{})
	pulumi.RegisterOutputType(LocalDiskArrayOutput{})
	pulumi.RegisterOutputType(LocalDiskResponseOutput{})
	pulumi.RegisterOutputType(LocalDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(LogConfigOutput{})
	pulumi.RegisterOutputType(LogConfigArrayOutput{})
	pulumi.RegisterOutputType(LogConfigCloudAuditOptionsOutput{})
	pulumi.RegisterOutputType(LogConfigCloudAuditOptionsPtrOutput{})
	pulumi.RegisterOutputType(LogConfigCloudAuditOptionsResponseOutput{})
	pulumi.RegisterOutputType(LogConfigCounterOptionsOutput{})
	pulumi.RegisterOutputType(LogConfigCounterOptionsPtrOutput{})
	pulumi.RegisterOutputType(LogConfigCounterOptionsCustomFieldOutput{})
	pulumi.RegisterOutputType(LogConfigCounterOptionsCustomFieldArrayOutput{})
	pulumi.RegisterOutputType(LogConfigCounterOptionsCustomFieldResponseOutput{})
	pulumi.RegisterOutputType(LogConfigCounterOptionsCustomFieldResponseArrayOutput{})
	pulumi.RegisterOutputType(LogConfigCounterOptionsResponseOutput{})
	pulumi.RegisterOutputType(LogConfigDataAccessOptionsOutput{})
	pulumi.RegisterOutputType(LogConfigDataAccessOptionsPtrOutput{})
	pulumi.RegisterOutputType(LogConfigDataAccessOptionsResponseOutput{})
	pulumi.RegisterOutputType(LogConfigResponseOutput{})
	pulumi.RegisterOutputType(LogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(MetadataOutput{})
	pulumi.RegisterOutputType(MetadataPtrOutput{})
	pulumi.RegisterOutputType(MetadataFilterOutput{})
	pulumi.RegisterOutputType(MetadataFilterArrayOutput{})
	pulumi.RegisterOutputType(MetadataFilterLabelMatchOutput{})
	pulumi.RegisterOutputType(MetadataFilterLabelMatchArrayOutput{})
	pulumi.RegisterOutputType(MetadataFilterLabelMatchResponseOutput{})
	pulumi.RegisterOutputType(MetadataFilterLabelMatchResponseArrayOutput{})
	pulumi.RegisterOutputType(MetadataFilterResponseOutput{})
	pulumi.RegisterOutputType(MetadataFilterResponseArrayOutput{})
	pulumi.RegisterOutputType(MetadataItemsItemOutput{})
	pulumi.RegisterOutputType(MetadataItemsItemArrayOutput{})
	pulumi.RegisterOutputType(MetadataItemsItemResponseOutput{})
	pulumi.RegisterOutputType(MetadataItemsItemResponseArrayOutput{})
	pulumi.RegisterOutputType(MetadataResponseOutput{})
	pulumi.RegisterOutputType(MetadataResponsePtrOutput{})
	pulumi.RegisterOutputType(NamedPortOutput{})
	pulumi.RegisterOutputType(NamedPortArrayOutput{})
	pulumi.RegisterOutputType(NamedPortResponseOutput{})
	pulumi.RegisterOutputType(NamedPortResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkEndpointGroupAppEngineOutput{})
	pulumi.RegisterOutputType(NetworkEndpointGroupAppEnginePtrOutput{})
	pulumi.RegisterOutputType(NetworkEndpointGroupAppEngineResponseOutput{})
	pulumi.RegisterOutputType(NetworkEndpointGroupAppEngineResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkEndpointGroupCloudFunctionOutput{})
	pulumi.RegisterOutputType(NetworkEndpointGroupCloudFunctionPtrOutput{})
	pulumi.RegisterOutputType(NetworkEndpointGroupCloudFunctionResponseOutput{})
	pulumi.RegisterOutputType(NetworkEndpointGroupCloudFunctionResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkEndpointGroupCloudRunOutput{})
	pulumi.RegisterOutputType(NetworkEndpointGroupCloudRunPtrOutput{})
	pulumi.RegisterOutputType(NetworkEndpointGroupCloudRunResponseOutput{})
	pulumi.RegisterOutputType(NetworkEndpointGroupCloudRunResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceResponseOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkPeeringResponseOutput{})
	pulumi.RegisterOutputType(NetworkPeeringResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkRoutingConfigOutput{})
	pulumi.RegisterOutputType(NetworkRoutingConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworkRoutingConfigResponseOutput{})
	pulumi.RegisterOutputType(NetworkRoutingConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeGroupAutoscalingPolicyOutput{})
	pulumi.RegisterOutputType(NodeGroupAutoscalingPolicyPtrOutput{})
	pulumi.RegisterOutputType(NodeGroupAutoscalingPolicyResponseOutput{})
	pulumi.RegisterOutputType(NodeGroupAutoscalingPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeGroupMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(NodeGroupMaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(NodeGroupMaintenanceWindowResponseOutput{})
	pulumi.RegisterOutputType(NodeGroupMaintenanceWindowResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeTemplateNodeTypeFlexibilityOutput{})
	pulumi.RegisterOutputType(NodeTemplateNodeTypeFlexibilityPtrOutput{})
	pulumi.RegisterOutputType(NodeTemplateNodeTypeFlexibilityResponseOutput{})
	pulumi.RegisterOutputType(NodeTemplateNodeTypeFlexibilityResponsePtrOutput{})
	pulumi.RegisterOutputType(NotificationEndpointGrpcSettingsOutput{})
	pulumi.RegisterOutputType(NotificationEndpointGrpcSettingsPtrOutput{})
	pulumi.RegisterOutputType(NotificationEndpointGrpcSettingsResponseOutput{})
	pulumi.RegisterOutputType(NotificationEndpointGrpcSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(OutlierDetectionOutput{})
	pulumi.RegisterOutputType(OutlierDetectionPtrOutput{})
	pulumi.RegisterOutputType(OutlierDetectionResponseOutput{})
	pulumi.RegisterOutputType(OutlierDetectionResponsePtrOutput{})
	pulumi.RegisterOutputType(PacketMirroringFilterOutput{})
	pulumi.RegisterOutputType(PacketMirroringFilterPtrOutput{})
	pulumi.RegisterOutputType(PacketMirroringFilterResponseOutput{})
	pulumi.RegisterOutputType(PacketMirroringFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(PacketMirroringForwardingRuleInfoOutput{})
	pulumi.RegisterOutputType(PacketMirroringForwardingRuleInfoPtrOutput{})
	pulumi.RegisterOutputType(PacketMirroringForwardingRuleInfoResponseOutput{})
	pulumi.RegisterOutputType(PacketMirroringForwardingRuleInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourceInfoOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourceInfoPtrOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourceInfoInstanceInfoOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourceInfoInstanceInfoArrayOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourceInfoInstanceInfoResponseOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourceInfoInstanceInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourceInfoResponseOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourceInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourceInfoSubnetInfoOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourceInfoSubnetInfoArrayOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourceInfoSubnetInfoResponseOutput{})
	pulumi.RegisterOutputType(PacketMirroringMirroredResourceInfoSubnetInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(PacketMirroringNetworkInfoOutput{})
	pulumi.RegisterOutputType(PacketMirroringNetworkInfoPtrOutput{})
	pulumi.RegisterOutputType(PacketMirroringNetworkInfoResponseOutput{})
	pulumi.RegisterOutputType(PacketMirroringNetworkInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(PathMatcherOutput{})
	pulumi.RegisterOutputType(PathMatcherArrayOutput{})
	pulumi.RegisterOutputType(PathMatcherResponseOutput{})
	pulumi.RegisterOutputType(PathMatcherResponseArrayOutput{})
	pulumi.RegisterOutputType(PathRuleOutput{})
	pulumi.RegisterOutputType(PathRuleArrayOutput{})
	pulumi.RegisterOutputType(PathRuleResponseOutput{})
	pulumi.RegisterOutputType(PathRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(PublicAdvertisedPrefixPublicDelegatedPrefixResponseOutput{})
	pulumi.RegisterOutputType(PublicAdvertisedPrefixPublicDelegatedPrefixResponseArrayOutput{})
	pulumi.RegisterOutputType(PublicDelegatedPrefixPublicDelegatedSubPrefixOutput{})
	pulumi.RegisterOutputType(PublicDelegatedPrefixPublicDelegatedSubPrefixArrayOutput{})
	pulumi.RegisterOutputType(PublicDelegatedPrefixPublicDelegatedSubPrefixResponseOutput{})
	pulumi.RegisterOutputType(PublicDelegatedPrefixPublicDelegatedSubPrefixResponseArrayOutput{})
	pulumi.RegisterOutputType(RequestMirrorPolicyOutput{})
	pulumi.RegisterOutputType(RequestMirrorPolicyPtrOutput{})
	pulumi.RegisterOutputType(RequestMirrorPolicyResponseOutput{})
	pulumi.RegisterOutputType(RequestMirrorPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ReservationTypeOutput{})
	pulumi.RegisterOutputType(ReservationTypeArrayOutput{})
	pulumi.RegisterOutputType(ReservationAffinityOutput{})
	pulumi.RegisterOutputType(ReservationAffinityPtrOutput{})
	pulumi.RegisterOutputType(ReservationAffinityResponseOutput{})
	pulumi.RegisterOutputType(ReservationAffinityResponsePtrOutput{})
	pulumi.RegisterOutputType(ReservationResponseOutput{})
	pulumi.RegisterOutputType(ReservationResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceCommitmentOutput{})
	pulumi.RegisterOutputType(ResourceCommitmentArrayOutput{})
	pulumi.RegisterOutputType(ResourceCommitmentResponseOutput{})
	pulumi.RegisterOutputType(ResourceCommitmentResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourcePolicyDailyCycleOutput{})
	pulumi.RegisterOutputType(ResourcePolicyDailyCyclePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicyDailyCycleResponseOutput{})
	pulumi.RegisterOutputType(ResourcePolicyDailyCycleResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicyGroupPlacementPolicyOutput{})
	pulumi.RegisterOutputType(ResourcePolicyGroupPlacementPolicyPtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicyGroupPlacementPolicyResponseOutput{})
	pulumi.RegisterOutputType(ResourcePolicyGroupPlacementPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicyHourlyCycleOutput{})
	pulumi.RegisterOutputType(ResourcePolicyHourlyCyclePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicyHourlyCycleResponseOutput{})
	pulumi.RegisterOutputType(ResourcePolicyHourlyCycleResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicyInstanceSchedulePolicyOutput{})
	pulumi.RegisterOutputType(ResourcePolicyInstanceSchedulePolicyPtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicyInstanceSchedulePolicyResponseOutput{})
	pulumi.RegisterOutputType(ResourcePolicyInstanceSchedulePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicyInstanceSchedulePolicyScheduleOutput{})
	pulumi.RegisterOutputType(ResourcePolicyInstanceSchedulePolicySchedulePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicyInstanceSchedulePolicyScheduleResponseOutput{})
	pulumi.RegisterOutputType(ResourcePolicyInstanceSchedulePolicyScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponseOutput{})
	pulumi.RegisterOutputType(ResourcePolicyResourceStatusInstanceSchedulePolicyStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicyResourceStatusResponseOutput{})
	pulumi.RegisterOutputType(ResourcePolicyResourceStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyPtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyResponseOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyRetentionPolicyOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyRetentionPolicyPtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponseOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyRetentionPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyScheduleOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicySchedulePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyScheduleResponseOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicyScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ResourcePolicySnapshotSchedulePolicySnapshotPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicyWeeklyCycleOutput{})
	pulumi.RegisterOutputType(ResourcePolicyWeeklyCyclePtrOutput{})
	pulumi.RegisterOutputType(ResourcePolicyWeeklyCycleDayOfWeekOutput{})
	pulumi.RegisterOutputType(ResourcePolicyWeeklyCycleDayOfWeekArrayOutput{})
	pulumi.RegisterOutputType(ResourcePolicyWeeklyCycleDayOfWeekResponseOutput{})
	pulumi.RegisterOutputType(ResourcePolicyWeeklyCycleDayOfWeekResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourcePolicyWeeklyCycleResponseOutput{})
	pulumi.RegisterOutputType(ResourcePolicyWeeklyCycleResponsePtrOutput{})
	pulumi.RegisterOutputType(RouteWarningsItemDataItemResponseOutput{})
	pulumi.RegisterOutputType(RouteWarningsItemDataItemResponseArrayOutput{})
	pulumi.RegisterOutputType(RouteWarningsItemResponseOutput{})
	pulumi.RegisterOutputType(RouteWarningsItemResponseArrayOutput{})
	pulumi.RegisterOutputType(RouterAdvertisedIpRangeOutput{})
	pulumi.RegisterOutputType(RouterAdvertisedIpRangeArrayOutput{})
	pulumi.RegisterOutputType(RouterAdvertisedIpRangeResponseOutput{})
	pulumi.RegisterOutputType(RouterAdvertisedIpRangeResponseArrayOutput{})
	pulumi.RegisterOutputType(RouterBgpOutput{})
	pulumi.RegisterOutputType(RouterBgpPtrOutput{})
	pulumi.RegisterOutputType(RouterBgpPeerOutput{})
	pulumi.RegisterOutputType(RouterBgpPeerArrayOutput{})
	pulumi.RegisterOutputType(RouterBgpPeerResponseOutput{})
	pulumi.RegisterOutputType(RouterBgpPeerResponseArrayOutput{})
	pulumi.RegisterOutputType(RouterBgpResponseOutput{})
	pulumi.RegisterOutputType(RouterBgpResponsePtrOutput{})
	pulumi.RegisterOutputType(RouterInterfaceOutput{})
	pulumi.RegisterOutputType(RouterInterfaceArrayOutput{})
	pulumi.RegisterOutputType(RouterInterfaceResponseOutput{})
	pulumi.RegisterOutputType(RouterInterfaceResponseArrayOutput{})
	pulumi.RegisterOutputType(RouterNatOutput{})
	pulumi.RegisterOutputType(RouterNatArrayOutput{})
	pulumi.RegisterOutputType(RouterNatLogConfigOutput{})
	pulumi.RegisterOutputType(RouterNatLogConfigPtrOutput{})
	pulumi.RegisterOutputType(RouterNatLogConfigResponseOutput{})
	pulumi.RegisterOutputType(RouterNatResponseOutput{})
	pulumi.RegisterOutputType(RouterNatResponseArrayOutput{})
	pulumi.RegisterOutputType(RouterNatSubnetworkToNatOutput{})
	pulumi.RegisterOutputType(RouterNatSubnetworkToNatArrayOutput{})
	pulumi.RegisterOutputType(RouterNatSubnetworkToNatResponseOutput{})
	pulumi.RegisterOutputType(RouterNatSubnetworkToNatResponseArrayOutput{})
	pulumi.RegisterOutputType(RuleOutput{})
	pulumi.RegisterOutputType(RuleArrayOutput{})
	pulumi.RegisterOutputType(RuleResponseOutput{})
	pulumi.RegisterOutputType(RuleResponseArrayOutput{})
	pulumi.RegisterOutputType(SSLHealthCheckOutput{})
	pulumi.RegisterOutputType(SSLHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(SSLHealthCheckResponseOutput{})
	pulumi.RegisterOutputType(SSLHealthCheckResponsePtrOutput{})
	pulumi.RegisterOutputType(SchedulingOutput{})
	pulumi.RegisterOutputType(SchedulingPtrOutput{})
	pulumi.RegisterOutputType(SchedulingNodeAffinityOutput{})
	pulumi.RegisterOutputType(SchedulingNodeAffinityArrayOutput{})
	pulumi.RegisterOutputType(SchedulingNodeAffinityResponseOutput{})
	pulumi.RegisterOutputType(SchedulingNodeAffinityResponseArrayOutput{})
	pulumi.RegisterOutputType(SchedulingResponseOutput{})
	pulumi.RegisterOutputType(SchedulingResponsePtrOutput{})
	pulumi.RegisterOutputType(SecurityPolicyAdaptiveProtectionConfigOutput{})
	pulumi.RegisterOutputType(SecurityPolicyAdaptiveProtectionConfigPtrOutput{})
	pulumi.RegisterOutputType(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigOutput{})
	pulumi.RegisterOutputType(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigPtrOutput{})
	pulumi.RegisterOutputType(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponseOutput{})
	pulumi.RegisterOutputType(SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(SecurityPolicyAdaptiveProtectionConfigResponseOutput{})
	pulumi.RegisterOutputType(SecurityPolicyAdaptiveProtectionConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(SecurityPolicyAdvancedOptionsConfigOutput{})
	pulumi.RegisterOutputType(SecurityPolicyAdvancedOptionsConfigPtrOutput{})
	pulumi.RegisterOutputType(SecurityPolicyAdvancedOptionsConfigResponseOutput{})
	pulumi.RegisterOutputType(SecurityPolicyAdvancedOptionsConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleMatcherOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleMatcherPtrOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleMatcherConfigOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleMatcherConfigPtrOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleMatcherConfigResponseOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleMatcherResponseOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleResponseOutput{})
	pulumi.RegisterOutputType(SecurityPolicyRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(SecuritySettingsOutput{})
	pulumi.RegisterOutputType(SecuritySettingsPtrOutput{})
	pulumi.RegisterOutputType(SecuritySettingsResponseOutput{})
	pulumi.RegisterOutputType(SecuritySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ServerBindingOutput{})
	pulumi.RegisterOutputType(ServerBindingPtrOutput{})
	pulumi.RegisterOutputType(ServerBindingResponseOutput{})
	pulumi.RegisterOutputType(ServerBindingResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceAccountOutput{})
	pulumi.RegisterOutputType(ServiceAccountArrayOutput{})
	pulumi.RegisterOutputType(ServiceAccountResponseOutput{})
	pulumi.RegisterOutputType(ServiceAccountResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceAttachmentConnectedEndpointResponseOutput{})
	pulumi.RegisterOutputType(ServiceAttachmentConnectedEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceAttachmentConsumerProjectLimitOutput{})
	pulumi.RegisterOutputType(ServiceAttachmentConsumerProjectLimitArrayOutput{})
	pulumi.RegisterOutputType(ServiceAttachmentConsumerProjectLimitResponseOutput{})
	pulumi.RegisterOutputType(ServiceAttachmentConsumerProjectLimitResponseArrayOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigResponseOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceIntegrityPolicyOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceIntegrityPolicyPtrOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceIntegrityPolicyResponseOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceIntegrityPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceInstanceParamsOutput{})
	pulumi.RegisterOutputType(SourceInstanceParamsPtrOutput{})
	pulumi.RegisterOutputType(SourceInstanceParamsResponseOutput{})
	pulumi.RegisterOutputType(SourceInstanceParamsResponsePtrOutput{})
	pulumi.RegisterOutputType(SslCertificateManagedSslCertificateOutput{})
	pulumi.RegisterOutputType(SslCertificateManagedSslCertificatePtrOutput{})
	pulumi.RegisterOutputType(SslCertificateManagedSslCertificateResponseOutput{})
	pulumi.RegisterOutputType(SslCertificateManagedSslCertificateResponsePtrOutput{})
	pulumi.RegisterOutputType(SslCertificateSelfManagedSslCertificateOutput{})
	pulumi.RegisterOutputType(SslCertificateSelfManagedSslCertificatePtrOutput{})
	pulumi.RegisterOutputType(SslCertificateSelfManagedSslCertificateResponseOutput{})
	pulumi.RegisterOutputType(SslCertificateSelfManagedSslCertificateResponsePtrOutput{})
	pulumi.RegisterOutputType(SslPolicyWarningsItemDataItemResponseOutput{})
	pulumi.RegisterOutputType(SslPolicyWarningsItemDataItemResponseArrayOutput{})
	pulumi.RegisterOutputType(SslPolicyWarningsItemResponseOutput{})
	pulumi.RegisterOutputType(SslPolicyWarningsItemResponseArrayOutput{})
	pulumi.RegisterOutputType(StatefulPolicyOutput{})
	pulumi.RegisterOutputType(StatefulPolicyPtrOutput{})
	pulumi.RegisterOutputType(StatefulPolicyPreservedStateOutput{})
	pulumi.RegisterOutputType(StatefulPolicyPreservedStatePtrOutput{})
	pulumi.RegisterOutputType(StatefulPolicyPreservedStateResponseOutput{})
	pulumi.RegisterOutputType(StatefulPolicyPreservedStateResponsePtrOutput{})
	pulumi.RegisterOutputType(StatefulPolicyResponseOutput{})
	pulumi.RegisterOutputType(StatefulPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(SubnetworkLogConfigOutput{})
	pulumi.RegisterOutputType(SubnetworkLogConfigPtrOutput{})
	pulumi.RegisterOutputType(SubnetworkLogConfigResponseOutput{})
	pulumi.RegisterOutputType(SubnetworkLogConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(SubnetworkSecondaryRangeOutput{})
	pulumi.RegisterOutputType(SubnetworkSecondaryRangeArrayOutput{})
	pulumi.RegisterOutputType(SubnetworkSecondaryRangeResponseOutput{})
	pulumi.RegisterOutputType(SubnetworkSecondaryRangeResponseArrayOutput{})
	pulumi.RegisterOutputType(TCPHealthCheckOutput{})
	pulumi.RegisterOutputType(TCPHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(TCPHealthCheckResponseOutput{})
	pulumi.RegisterOutputType(TCPHealthCheckResponsePtrOutput{})
	pulumi.RegisterOutputType(TagsOutput{})
	pulumi.RegisterOutputType(TagsPtrOutput{})
	pulumi.RegisterOutputType(TagsResponseOutput{})
	pulumi.RegisterOutputType(TagsResponsePtrOutput{})
	pulumi.RegisterOutputType(Uint128ResponseOutput{})
	pulumi.RegisterOutputType(Uint128ResponsePtrOutput{})
	pulumi.RegisterOutputType(UrlMapTestOutput{})
	pulumi.RegisterOutputType(UrlMapTestArrayOutput{})
	pulumi.RegisterOutputType(UrlMapTestHeaderOutput{})
	pulumi.RegisterOutputType(UrlMapTestHeaderArrayOutput{})
	pulumi.RegisterOutputType(UrlMapTestHeaderResponseOutput{})
	pulumi.RegisterOutputType(UrlMapTestHeaderResponseArrayOutput{})
	pulumi.RegisterOutputType(UrlMapTestResponseOutput{})
	pulumi.RegisterOutputType(UrlMapTestResponseArrayOutput{})
	pulumi.RegisterOutputType(UrlRewriteOutput{})
	pulumi.RegisterOutputType(UrlRewritePtrOutput{})
	pulumi.RegisterOutputType(UrlRewriteResponseOutput{})
	pulumi.RegisterOutputType(UrlRewriteResponsePtrOutput{})
	pulumi.RegisterOutputType(VpnGatewayVpnGatewayInterfaceOutput{})
	pulumi.RegisterOutputType(VpnGatewayVpnGatewayInterfaceArrayOutput{})
	pulumi.RegisterOutputType(VpnGatewayVpnGatewayInterfaceResponseOutput{})
	pulumi.RegisterOutputType(VpnGatewayVpnGatewayInterfaceResponseArrayOutput{})
	pulumi.RegisterOutputType(WeightedBackendServiceOutput{})
	pulumi.RegisterOutputType(WeightedBackendServiceArrayOutput{})
	pulumi.RegisterOutputType(WeightedBackendServiceResponseOutput{})
	pulumi.RegisterOutputType(WeightedBackendServiceResponseArrayOutput{})
}
