// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a TargetHttpProxy resource in the specified project and region using the data included in the request.
type RegionTargetHttpProxy struct {
	pulumi.CustomResourceState

	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetHttpProxy. An up-to-date fingerprint must be provided in order to patch/update the TargetHttpProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetHttpProxy.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// Specifies how long to keep a connection open, after completing a response, while there is no matching traffic (in seconds). If an HTTP keep-alive is not specified, a default value (610 seconds) will be used. For global external Application Load Balancers, the minimum allowed value is 5 seconds and the maximum allowed value is 1200 seconds. For classic Application Load Balancers, this option is not supported.
	HttpKeepAliveTimeoutSec pulumi.IntOutput `pulumi:"httpKeepAliveTimeoutSec"`
	// Type of resource. Always compute#targetHttpProxy for target HTTP proxies.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
	ProxyBind pulumi.BoolOutput   `pulumi:"proxyBind"`
	Region    pulumi.StringOutput `pulumi:"region"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Server-defined URL for the resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// URL to the UrlMap resource that defines the mapping from URL to the BackendService.
	UrlMap pulumi.StringOutput `pulumi:"urlMap"`
}

// NewRegionTargetHttpProxy registers a new resource with the given unique name, arguments, and options.
func NewRegionTargetHttpProxy(ctx *pulumi.Context,
	name string, args *RegionTargetHttpProxyArgs, opts ...pulumi.ResourceOption) (*RegionTargetHttpProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"project",
		"region",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionTargetHttpProxy
	err := ctx.RegisterResource("google-native:compute/v1:RegionTargetHttpProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionTargetHttpProxy gets an existing RegionTargetHttpProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionTargetHttpProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionTargetHttpProxyState, opts ...pulumi.ResourceOption) (*RegionTargetHttpProxy, error) {
	var resource RegionTargetHttpProxy
	err := ctx.ReadResource("google-native:compute/v1:RegionTargetHttpProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionTargetHttpProxy resources.
type regionTargetHttpProxyState struct {
}

type RegionTargetHttpProxyState struct {
}

func (RegionTargetHttpProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionTargetHttpProxyState)(nil)).Elem()
}

type regionTargetHttpProxyArgs struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// Specifies how long to keep a connection open, after completing a response, while there is no matching traffic (in seconds). If an HTTP keep-alive is not specified, a default value (610 seconds) will be used. For global external Application Load Balancers, the minimum allowed value is 5 seconds and the maximum allowed value is 1200 seconds. For classic Application Load Balancers, this option is not supported.
	HttpKeepAliveTimeoutSec *int `pulumi:"httpKeepAliveTimeoutSec"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
	ProxyBind *bool  `pulumi:"proxyBind"`
	Region    string `pulumi:"region"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// URL to the UrlMap resource that defines the mapping from URL to the BackendService.
	UrlMap *string `pulumi:"urlMap"`
}

// The set of arguments for constructing a RegionTargetHttpProxy resource.
type RegionTargetHttpProxyArgs struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// Specifies how long to keep a connection open, after completing a response, while there is no matching traffic (in seconds). If an HTTP keep-alive is not specified, a default value (610 seconds) will be used. For global external Application Load Balancers, the minimum allowed value is 5 seconds and the maximum allowed value is 1200 seconds. For classic Application Load Balancers, this option is not supported.
	HttpKeepAliveTimeoutSec pulumi.IntPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
	ProxyBind pulumi.BoolPtrInput
	Region    pulumi.StringInput
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// URL to the UrlMap resource that defines the mapping from URL to the BackendService.
	UrlMap pulumi.StringPtrInput
}

func (RegionTargetHttpProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionTargetHttpProxyArgs)(nil)).Elem()
}

type RegionTargetHttpProxyInput interface {
	pulumi.Input

	ToRegionTargetHttpProxyOutput() RegionTargetHttpProxyOutput
	ToRegionTargetHttpProxyOutputWithContext(ctx context.Context) RegionTargetHttpProxyOutput
}

func (*RegionTargetHttpProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionTargetHttpProxy)(nil)).Elem()
}

func (i *RegionTargetHttpProxy) ToRegionTargetHttpProxyOutput() RegionTargetHttpProxyOutput {
	return i.ToRegionTargetHttpProxyOutputWithContext(context.Background())
}

func (i *RegionTargetHttpProxy) ToRegionTargetHttpProxyOutputWithContext(ctx context.Context) RegionTargetHttpProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionTargetHttpProxyOutput)
}

func (i *RegionTargetHttpProxy) ToOutput(ctx context.Context) pulumix.Output[*RegionTargetHttpProxy] {
	return pulumix.Output[*RegionTargetHttpProxy]{
		OutputState: i.ToRegionTargetHttpProxyOutputWithContext(ctx).OutputState,
	}
}

type RegionTargetHttpProxyOutput struct{ *pulumi.OutputState }

func (RegionTargetHttpProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionTargetHttpProxy)(nil)).Elem()
}

func (o RegionTargetHttpProxyOutput) ToRegionTargetHttpProxyOutput() RegionTargetHttpProxyOutput {
	return o
}

func (o RegionTargetHttpProxyOutput) ToRegionTargetHttpProxyOutputWithContext(ctx context.Context) RegionTargetHttpProxyOutput {
	return o
}

func (o RegionTargetHttpProxyOutput) ToOutput(ctx context.Context) pulumix.Output[*RegionTargetHttpProxy] {
	return pulumix.Output[*RegionTargetHttpProxy]{
		OutputState: o.OutputState,
	}
}

// Creation timestamp in RFC3339 text format.
func (o RegionTargetHttpProxyOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionTargetHttpProxy) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o RegionTargetHttpProxyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionTargetHttpProxy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetHttpProxy. An up-to-date fingerprint must be provided in order to patch/update the TargetHttpProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetHttpProxy.
func (o RegionTargetHttpProxyOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionTargetHttpProxy) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// Specifies how long to keep a connection open, after completing a response, while there is no matching traffic (in seconds). If an HTTP keep-alive is not specified, a default value (610 seconds) will be used. For global external Application Load Balancers, the minimum allowed value is 5 seconds and the maximum allowed value is 1200 seconds. For classic Application Load Balancers, this option is not supported.
func (o RegionTargetHttpProxyOutput) HttpKeepAliveTimeoutSec() pulumi.IntOutput {
	return o.ApplyT(func(v *RegionTargetHttpProxy) pulumi.IntOutput { return v.HttpKeepAliveTimeoutSec }).(pulumi.IntOutput)
}

// Type of resource. Always compute#targetHttpProxy for target HTTP proxies.
func (o RegionTargetHttpProxyOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionTargetHttpProxy) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o RegionTargetHttpProxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionTargetHttpProxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RegionTargetHttpProxyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionTargetHttpProxy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
func (o RegionTargetHttpProxyOutput) ProxyBind() pulumi.BoolOutput {
	return o.ApplyT(func(v *RegionTargetHttpProxy) pulumi.BoolOutput { return v.ProxyBind }).(pulumi.BoolOutput)
}

func (o RegionTargetHttpProxyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionTargetHttpProxy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
func (o RegionTargetHttpProxyOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionTargetHttpProxy) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Server-defined URL for the resource.
func (o RegionTargetHttpProxyOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionTargetHttpProxy) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// URL to the UrlMap resource that defines the mapping from URL to the BackendService.
func (o RegionTargetHttpProxyOutput) UrlMap() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionTargetHttpProxy) pulumi.StringOutput { return v.UrlMap }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionTargetHttpProxyInput)(nil)).Elem(), &RegionTargetHttpProxy{})
	pulumi.RegisterOutputType(RegionTargetHttpProxyOutput{})
}
