// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns the specified TargetHttpProxy resource in the specified region.
func LookupRegionTargetHttpProxy(ctx *pulumi.Context, args *LookupRegionTargetHttpProxyArgs, opts ...pulumi.InvokeOption) (*LookupRegionTargetHttpProxyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRegionTargetHttpProxyResult
	err := ctx.Invoke("google-native:compute/v1:getRegionTargetHttpProxy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRegionTargetHttpProxyArgs struct {
	Project         *string `pulumi:"project"`
	Region          string  `pulumi:"region"`
	TargetHttpProxy string  `pulumi:"targetHttpProxy"`
}

type LookupRegionTargetHttpProxyResult struct {
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp string `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description string `pulumi:"description"`
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetHttpProxy. An up-to-date fingerprint must be provided in order to patch/update the TargetHttpProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetHttpProxy.
	Fingerprint string `pulumi:"fingerprint"`
	// Type of resource. Always compute#targetHttpProxy for target HTTP proxies.
	Kind string `pulumi:"kind"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name string `pulumi:"name"`
	// This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
	ProxyBind bool `pulumi:"proxyBind"`
	// URL of the region where the regional Target HTTP Proxy resides. This field is not applicable to global Target HTTP Proxies.
	Region string `pulumi:"region"`
	// Server-defined URL for the resource.
	SelfLink string `pulumi:"selfLink"`
	// URL to the UrlMap resource that defines the mapping from URL to the BackendService.
	UrlMap string `pulumi:"urlMap"`
}

func LookupRegionTargetHttpProxyOutput(ctx *pulumi.Context, args LookupRegionTargetHttpProxyOutputArgs, opts ...pulumi.InvokeOption) LookupRegionTargetHttpProxyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRegionTargetHttpProxyResult, error) {
			args := v.(LookupRegionTargetHttpProxyArgs)
			r, err := LookupRegionTargetHttpProxy(ctx, &args, opts...)
			var s LookupRegionTargetHttpProxyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRegionTargetHttpProxyResultOutput)
}

type LookupRegionTargetHttpProxyOutputArgs struct {
	Project         pulumi.StringPtrInput `pulumi:"project"`
	Region          pulumi.StringInput    `pulumi:"region"`
	TargetHttpProxy pulumi.StringInput    `pulumi:"targetHttpProxy"`
}

func (LookupRegionTargetHttpProxyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegionTargetHttpProxyArgs)(nil)).Elem()
}

type LookupRegionTargetHttpProxyResultOutput struct{ *pulumi.OutputState }

func (LookupRegionTargetHttpProxyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegionTargetHttpProxyResult)(nil)).Elem()
}

func (o LookupRegionTargetHttpProxyResultOutput) ToLookupRegionTargetHttpProxyResultOutput() LookupRegionTargetHttpProxyResultOutput {
	return o
}

func (o LookupRegionTargetHttpProxyResultOutput) ToLookupRegionTargetHttpProxyResultOutputWithContext(ctx context.Context) LookupRegionTargetHttpProxyResultOutput {
	return o
}

// Creation timestamp in RFC3339 text format.
func (o LookupRegionTargetHttpProxyResultOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionTargetHttpProxyResult) string { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o LookupRegionTargetHttpProxyResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionTargetHttpProxyResult) string { return v.Description }).(pulumi.StringOutput)
}

// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetHttpProxy. An up-to-date fingerprint must be provided in order to patch/update the TargetHttpProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetHttpProxy.
func (o LookupRegionTargetHttpProxyResultOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionTargetHttpProxyResult) string { return v.Fingerprint }).(pulumi.StringOutput)
}

// Type of resource. Always compute#targetHttpProxy for target HTTP proxies.
func (o LookupRegionTargetHttpProxyResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionTargetHttpProxyResult) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o LookupRegionTargetHttpProxyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionTargetHttpProxyResult) string { return v.Name }).(pulumi.StringOutput)
}

// This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
func (o LookupRegionTargetHttpProxyResultOutput) ProxyBind() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRegionTargetHttpProxyResult) bool { return v.ProxyBind }).(pulumi.BoolOutput)
}

// URL of the region where the regional Target HTTP Proxy resides. This field is not applicable to global Target HTTP Proxies.
func (o LookupRegionTargetHttpProxyResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionTargetHttpProxyResult) string { return v.Region }).(pulumi.StringOutput)
}

// Server-defined URL for the resource.
func (o LookupRegionTargetHttpProxyResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionTargetHttpProxyResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

// URL to the UrlMap resource that defines the mapping from URL to the BackendService.
func (o LookupRegionTargetHttpProxyResultOutput) UrlMap() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionTargetHttpProxyResult) string { return v.UrlMap }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegionTargetHttpProxyResultOutput{})
}
