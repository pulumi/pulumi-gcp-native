// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package beta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy.  Caution This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
type LicenseIamPolicy struct {
	pulumi.CustomResourceState
}

// NewLicenseIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewLicenseIamPolicy(ctx *pulumi.Context,
	name string, args *LicenseIamPolicyArgs, opts ...pulumi.ResourceOption) (*LicenseIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Resource == nil {
		return nil, errors.New("invalid value for required argument 'Resource'")
	}
	var resource LicenseIamPolicy
	err := ctx.RegisterResource("google-cloud:compute/beta:LicenseIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseIamPolicy gets an existing LicenseIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseIamPolicyState, opts ...pulumi.ResourceOption) (*LicenseIamPolicy, error) {
	var resource LicenseIamPolicy
	err := ctx.ReadResource("google-cloud:compute/beta:LicenseIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseIamPolicy resources.
type licenseIamPolicyState struct {
}

type LicenseIamPolicyState struct {
}

func (LicenseIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseIamPolicyState)(nil)).Elem()
}

type licenseIamPolicyArgs struct {
	// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify bindings.
	Bindings []Binding `pulumi:"bindings"`
	// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag.
	Etag *string `pulumi:"etag"`
	// REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
	Policy   *Policy `pulumi:"policy"`
	Project  string  `pulumi:"project"`
	Resource string  `pulumi:"resource"`
}

// The set of arguments for constructing a LicenseIamPolicy resource.
type LicenseIamPolicyArgs struct {
	// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify bindings.
	Bindings BindingArrayInput
	// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag.
	Etag pulumi.StringPtrInput
	// REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
	Policy   PolicyPtrInput
	Project  pulumi.StringInput
	Resource pulumi.StringInput
}

func (LicenseIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseIamPolicyArgs)(nil)).Elem()
}

type LicenseIamPolicyInput interface {
	pulumi.Input

	ToLicenseIamPolicyOutput() LicenseIamPolicyOutput
	ToLicenseIamPolicyOutputWithContext(ctx context.Context) LicenseIamPolicyOutput
}

func (*LicenseIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseIamPolicy)(nil))
}

func (i *LicenseIamPolicy) ToLicenseIamPolicyOutput() LicenseIamPolicyOutput {
	return i.ToLicenseIamPolicyOutputWithContext(context.Background())
}

func (i *LicenseIamPolicy) ToLicenseIamPolicyOutputWithContext(ctx context.Context) LicenseIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseIamPolicyOutput)
}

type LicenseIamPolicyOutput struct {
	*pulumi.OutputState
}

func (LicenseIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseIamPolicy)(nil))
}

func (o LicenseIamPolicyOutput) ToLicenseIamPolicyOutput() LicenseIamPolicyOutput {
	return o
}

func (o LicenseIamPolicyOutput) ToLicenseIamPolicyOutputWithContext(ctx context.Context) LicenseIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LicenseIamPolicyOutput{})
}
