// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package beta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy.
type MachineImageIamPolicy struct {
	pulumi.CustomResourceState
}

// NewMachineImageIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewMachineImageIamPolicy(ctx *pulumi.Context,
	name string, args *MachineImageIamPolicyArgs, opts ...pulumi.ResourceOption) (*MachineImageIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Resource == nil {
		return nil, errors.New("invalid value for required argument 'Resource'")
	}
	var resource MachineImageIamPolicy
	err := ctx.RegisterResource("google-cloud:compute/beta:MachineImageIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMachineImageIamPolicy gets an existing MachineImageIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMachineImageIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MachineImageIamPolicyState, opts ...pulumi.ResourceOption) (*MachineImageIamPolicy, error) {
	var resource MachineImageIamPolicy
	err := ctx.ReadResource("google-cloud:compute/beta:MachineImageIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MachineImageIamPolicy resources.
type machineImageIamPolicyState struct {
}

type MachineImageIamPolicyState struct {
}

func (MachineImageIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*machineImageIamPolicyState)(nil)).Elem()
}

type machineImageIamPolicyArgs struct {
	// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify bindings.
	Bindings []Binding `pulumi:"bindings"`
	// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag.
	Etag *string `pulumi:"etag"`
	// REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
	Policy   *Policy `pulumi:"policy"`
	Project  string  `pulumi:"project"`
	Resource string  `pulumi:"resource"`
}

// The set of arguments for constructing a MachineImageIamPolicy resource.
type MachineImageIamPolicyArgs struct {
	// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify bindings.
	Bindings BindingArrayInput
	// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag.
	Etag pulumi.StringPtrInput
	// REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
	Policy   PolicyPtrInput
	Project  pulumi.StringInput
	Resource pulumi.StringInput
}

func (MachineImageIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*machineImageIamPolicyArgs)(nil)).Elem()
}

type MachineImageIamPolicyInput interface {
	pulumi.Input

	ToMachineImageIamPolicyOutput() MachineImageIamPolicyOutput
	ToMachineImageIamPolicyOutputWithContext(ctx context.Context) MachineImageIamPolicyOutput
}

func (*MachineImageIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineImageIamPolicy)(nil))
}

func (i *MachineImageIamPolicy) ToMachineImageIamPolicyOutput() MachineImageIamPolicyOutput {
	return i.ToMachineImageIamPolicyOutputWithContext(context.Background())
}

func (i *MachineImageIamPolicy) ToMachineImageIamPolicyOutputWithContext(ctx context.Context) MachineImageIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineImageIamPolicyOutput)
}

type MachineImageIamPolicyOutput struct {
	*pulumi.OutputState
}

func (MachineImageIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineImageIamPolicy)(nil))
}

func (o MachineImageIamPolicyOutput) ToMachineImageIamPolicyOutput() MachineImageIamPolicyOutput {
	return o
}

func (o MachineImageIamPolicyOutput) ToMachineImageIamPolicyOutputWithContext(ctx context.Context) MachineImageIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MachineImageIamPolicyOutput{})
}
