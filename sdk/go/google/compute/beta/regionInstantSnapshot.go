// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package beta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an instant snapshot in the specified region.
type RegionInstantSnapshot struct {
	pulumi.CustomResourceState

	// The architecture of the instant snapshot. Valid values are ARM64 or X86_64.
	Architecture pulumi.StringOutput `pulumi:"architecture"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// Size of the source disk, specified in GB.
	DiskSizeGb pulumi.StringOutput `pulumi:"diskSizeGb"`
	// Type of the resource. Always compute#instantSnapshot for InstantSnapshot resources.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// A fingerprint for the labels being applied to this InstantSnapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a InstantSnapshot.
	LabelFingerprint pulumi.StringOutput `pulumi:"labelFingerprint"`
	// Labels to apply to this InstantSnapshot. These can be later modified by the setLabels method. Label values may be empty.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	Region  pulumi.StringOutput `pulumi:"region"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Status information for the instant snapshot resource.
	ResourceStatus InstantSnapshotResourceStatusResponseOutput `pulumi:"resourceStatus"`
	// Reserved for future use.
	SatisfiesPzs pulumi.BoolOutput `pulumi:"satisfiesPzs"`
	// Server-defined URL for the resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Server-defined URL for this resource's resource id.
	SelfLinkWithId pulumi.StringOutput `pulumi:"selfLinkWithId"`
	// URL of the source disk used to create this instant snapshot. Note that the source disk must be in the same zone/region as the instant snapshot to be created. This can be a full or valid partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - https://www.googleapis.com/compute/v1/projects/project/regions/region /disks/disk - projects/project/zones/zone/disks/disk - projects/project/regions/region/disks/disk - zones/zone/disks/disk - regions/region/disks/disk
	SourceDisk pulumi.StringOutput `pulumi:"sourceDisk"`
	// The ID value of the disk used to create this InstantSnapshot. This value may be used to determine whether the InstantSnapshot was taken from the current or a previous instance of a given disk name.
	SourceDiskId pulumi.StringOutput `pulumi:"sourceDiskId"`
	// The status of the instantSnapshot. This can be CREATING, DELETING, FAILED, or READY.
	Status pulumi.StringOutput `pulumi:"status"`
	// URL of the zone where the instant snapshot resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewRegionInstantSnapshot registers a new resource with the given unique name, arguments, and options.
func NewRegionInstantSnapshot(ctx *pulumi.Context,
	name string, args *RegionInstantSnapshotArgs, opts ...pulumi.ResourceOption) (*RegionInstantSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"project",
		"region",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionInstantSnapshot
	err := ctx.RegisterResource("google-native:compute/beta:RegionInstantSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionInstantSnapshot gets an existing RegionInstantSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionInstantSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionInstantSnapshotState, opts ...pulumi.ResourceOption) (*RegionInstantSnapshot, error) {
	var resource RegionInstantSnapshot
	err := ctx.ReadResource("google-native:compute/beta:RegionInstantSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionInstantSnapshot resources.
type regionInstantSnapshotState struct {
}

type RegionInstantSnapshotState struct {
}

func (RegionInstantSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionInstantSnapshotState)(nil)).Elem()
}

type regionInstantSnapshotArgs struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// Labels to apply to this InstantSnapshot. These can be later modified by the setLabels method. Label values may be empty.
	Labels map[string]string `pulumi:"labels"`
	// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	Region  string  `pulumi:"region"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// URL of the source disk used to create this instant snapshot. Note that the source disk must be in the same zone/region as the instant snapshot to be created. This can be a full or valid partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - https://www.googleapis.com/compute/v1/projects/project/regions/region /disks/disk - projects/project/zones/zone/disks/disk - projects/project/regions/region/disks/disk - zones/zone/disks/disk - regions/region/disks/disk
	SourceDisk *string `pulumi:"sourceDisk"`
}

// The set of arguments for constructing a RegionInstantSnapshot resource.
type RegionInstantSnapshotArgs struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// Labels to apply to this InstantSnapshot. These can be later modified by the setLabels method. Label values may be empty.
	Labels pulumi.StringMapInput
	// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	Region  pulumi.StringInput
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// URL of the source disk used to create this instant snapshot. Note that the source disk must be in the same zone/region as the instant snapshot to be created. This can be a full or valid partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - https://www.googleapis.com/compute/v1/projects/project/regions/region /disks/disk - projects/project/zones/zone/disks/disk - projects/project/regions/region/disks/disk - zones/zone/disks/disk - regions/region/disks/disk
	SourceDisk pulumi.StringPtrInput
}

func (RegionInstantSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionInstantSnapshotArgs)(nil)).Elem()
}

type RegionInstantSnapshotInput interface {
	pulumi.Input

	ToRegionInstantSnapshotOutput() RegionInstantSnapshotOutput
	ToRegionInstantSnapshotOutputWithContext(ctx context.Context) RegionInstantSnapshotOutput
}

func (*RegionInstantSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionInstantSnapshot)(nil)).Elem()
}

func (i *RegionInstantSnapshot) ToRegionInstantSnapshotOutput() RegionInstantSnapshotOutput {
	return i.ToRegionInstantSnapshotOutputWithContext(context.Background())
}

func (i *RegionInstantSnapshot) ToRegionInstantSnapshotOutputWithContext(ctx context.Context) RegionInstantSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionInstantSnapshotOutput)
}

type RegionInstantSnapshotOutput struct{ *pulumi.OutputState }

func (RegionInstantSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionInstantSnapshot)(nil)).Elem()
}

func (o RegionInstantSnapshotOutput) ToRegionInstantSnapshotOutput() RegionInstantSnapshotOutput {
	return o
}

func (o RegionInstantSnapshotOutput) ToRegionInstantSnapshotOutputWithContext(ctx context.Context) RegionInstantSnapshotOutput {
	return o
}

// The architecture of the instant snapshot. Valid values are ARM64 or X86_64.
func (o RegionInstantSnapshotOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringOutput { return v.Architecture }).(pulumi.StringOutput)
}

// Creation timestamp in RFC3339 text format.
func (o RegionInstantSnapshotOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o RegionInstantSnapshotOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Size of the source disk, specified in GB.
func (o RegionInstantSnapshotOutput) DiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringOutput { return v.DiskSizeGb }).(pulumi.StringOutput)
}

// Type of the resource. Always compute#instantSnapshot for InstantSnapshot resources.
func (o RegionInstantSnapshotOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// A fingerprint for the labels being applied to this InstantSnapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a InstantSnapshot.
func (o RegionInstantSnapshotOutput) LabelFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringOutput { return v.LabelFingerprint }).(pulumi.StringOutput)
}

// Labels to apply to this InstantSnapshot. These can be later modified by the setLabels method. Label values may be empty.
func (o RegionInstantSnapshotOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o RegionInstantSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RegionInstantSnapshotOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o RegionInstantSnapshotOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
func (o RegionInstantSnapshotOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Status information for the instant snapshot resource.
func (o RegionInstantSnapshotOutput) ResourceStatus() InstantSnapshotResourceStatusResponseOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) InstantSnapshotResourceStatusResponseOutput { return v.ResourceStatus }).(InstantSnapshotResourceStatusResponseOutput)
}

// Reserved for future use.
func (o RegionInstantSnapshotOutput) SatisfiesPzs() pulumi.BoolOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.BoolOutput { return v.SatisfiesPzs }).(pulumi.BoolOutput)
}

// Server-defined URL for the resource.
func (o RegionInstantSnapshotOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Server-defined URL for this resource's resource id.
func (o RegionInstantSnapshotOutput) SelfLinkWithId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringOutput { return v.SelfLinkWithId }).(pulumi.StringOutput)
}

// URL of the source disk used to create this instant snapshot. Note that the source disk must be in the same zone/region as the instant snapshot to be created. This can be a full or valid partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - https://www.googleapis.com/compute/v1/projects/project/regions/region /disks/disk - projects/project/zones/zone/disks/disk - projects/project/regions/region/disks/disk - zones/zone/disks/disk - regions/region/disks/disk
func (o RegionInstantSnapshotOutput) SourceDisk() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringOutput { return v.SourceDisk }).(pulumi.StringOutput)
}

// The ID value of the disk used to create this InstantSnapshot. This value may be used to determine whether the InstantSnapshot was taken from the current or a previous instance of a given disk name.
func (o RegionInstantSnapshotOutput) SourceDiskId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringOutput { return v.SourceDiskId }).(pulumi.StringOutput)
}

// The status of the instantSnapshot. This can be CREATING, DELETING, FAILED, or READY.
func (o RegionInstantSnapshotOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// URL of the zone where the instant snapshot resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
func (o RegionInstantSnapshotOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionInstantSnapshot) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionInstantSnapshotInput)(nil)).Elem(), &RegionInstantSnapshot{})
	pulumi.RegisterOutputType(RegionInstantSnapshotOutput{})
}
