// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package beta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a regional HealthCheckService resource in the specified project and region using the data included in the request.
type RegionHealthCheckService struct {
	pulumi.CustomResourceState

	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a HealthCheckService. An up-to-date fingerprint must be provided in order to patch/update the HealthCheckService; Otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the HealthCheckService.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// A list of URLs to the HealthCheck resources. Must have at least one HealthCheck, and not more than 10. HealthCheck resources must have portSpecification=USE_SERVING_PORT or portSpecification=USE_FIXED_PORT. For regional HealthCheckService, the HealthCheck must be regional and in the same region. For global HealthCheckService, HealthCheck must be global. Mix of regional and global HealthChecks is not supported. Multiple regional HealthChecks must belong to the same region. Regional HealthChecks must belong to the same region as zones of NEGs.
	HealthChecks pulumi.StringArrayOutput `pulumi:"healthChecks"`
	// Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified. - NO_AGGREGATION. An EndpointHealth message is returned for each pair in the health check service. - AND. If any health check of an endpoint reports UNHEALTHY, then UNHEALTHY is the HealthState of the endpoint. If all health checks report HEALTHY, the HealthState of the endpoint is HEALTHY. .
	HealthStatusAggregationPolicy pulumi.StringOutput `pulumi:"healthStatusAggregationPolicy"`
	// This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. .
	//
	// Deprecated: This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. .
	HealthStatusAggregationStrategy pulumi.StringOutput `pulumi:"healthStatusAggregationStrategy"`
	// [Output only] Type of the resource. Always compute#healthCheckServicefor health check services.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of URLs to the NetworkEndpointGroup resources. Must not have more than 100. For regional HealthCheckService, NEGs must be in zones in the region of the HealthCheckService.
	NetworkEndpointGroups pulumi.StringArrayOutput `pulumi:"networkEndpointGroups"`
	// A list of URLs to the NotificationEndpoint resources. Must not have more than 10. A list of endpoints for receiving notifications of change in health status. For regional HealthCheckService, NotificationEndpoint must be regional and in the same region. For global HealthCheckService, NotificationEndpoint must be global.
	NotificationEndpoints pulumi.StringArrayOutput `pulumi:"notificationEndpoints"`
	Project               pulumi.StringOutput      `pulumi:"project"`
	Region                pulumi.StringOutput      `pulumi:"region"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Server-defined URL for the resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
}

// NewRegionHealthCheckService registers a new resource with the given unique name, arguments, and options.
func NewRegionHealthCheckService(ctx *pulumi.Context,
	name string, args *RegionHealthCheckServiceArgs, opts ...pulumi.ResourceOption) (*RegionHealthCheckService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"project",
		"region",
	})
	opts = append(opts, replaceOnChanges)
	var resource RegionHealthCheckService
	err := ctx.RegisterResource("google-native:compute/beta:RegionHealthCheckService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionHealthCheckService gets an existing RegionHealthCheckService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionHealthCheckService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionHealthCheckServiceState, opts ...pulumi.ResourceOption) (*RegionHealthCheckService, error) {
	var resource RegionHealthCheckService
	err := ctx.ReadResource("google-native:compute/beta:RegionHealthCheckService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionHealthCheckService resources.
type regionHealthCheckServiceState struct {
}

type RegionHealthCheckServiceState struct {
}

func (RegionHealthCheckServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionHealthCheckServiceState)(nil)).Elem()
}

type regionHealthCheckServiceArgs struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// A list of URLs to the HealthCheck resources. Must have at least one HealthCheck, and not more than 10. HealthCheck resources must have portSpecification=USE_SERVING_PORT or portSpecification=USE_FIXED_PORT. For regional HealthCheckService, the HealthCheck must be regional and in the same region. For global HealthCheckService, HealthCheck must be global. Mix of regional and global HealthChecks is not supported. Multiple regional HealthChecks must belong to the same region. Regional HealthChecks must belong to the same region as zones of NEGs.
	HealthChecks []string `pulumi:"healthChecks"`
	// Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified. - NO_AGGREGATION. An EndpointHealth message is returned for each pair in the health check service. - AND. If any health check of an endpoint reports UNHEALTHY, then UNHEALTHY is the HealthState of the endpoint. If all health checks report HEALTHY, the HealthState of the endpoint is HEALTHY. .
	HealthStatusAggregationPolicy *RegionHealthCheckServiceHealthStatusAggregationPolicy `pulumi:"healthStatusAggregationPolicy"`
	// This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. .
	//
	// Deprecated: This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. .
	HealthStatusAggregationStrategy *RegionHealthCheckServiceHealthStatusAggregationStrategy `pulumi:"healthStatusAggregationStrategy"`
	// Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// A list of URLs to the NetworkEndpointGroup resources. Must not have more than 100. For regional HealthCheckService, NEGs must be in zones in the region of the HealthCheckService.
	NetworkEndpointGroups []string `pulumi:"networkEndpointGroups"`
	// A list of URLs to the NotificationEndpoint resources. Must not have more than 10. A list of endpoints for receiving notifications of change in health status. For regional HealthCheckService, NotificationEndpoint must be regional and in the same region. For global HealthCheckService, NotificationEndpoint must be global.
	NotificationEndpoints []string `pulumi:"notificationEndpoints"`
	Project               *string  `pulumi:"project"`
	Region                string   `pulumi:"region"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
}

// The set of arguments for constructing a RegionHealthCheckService resource.
type RegionHealthCheckServiceArgs struct {
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// A list of URLs to the HealthCheck resources. Must have at least one HealthCheck, and not more than 10. HealthCheck resources must have portSpecification=USE_SERVING_PORT or portSpecification=USE_FIXED_PORT. For regional HealthCheckService, the HealthCheck must be regional and in the same region. For global HealthCheckService, HealthCheck must be global. Mix of regional and global HealthChecks is not supported. Multiple regional HealthChecks must belong to the same region. Regional HealthChecks must belong to the same region as zones of NEGs.
	HealthChecks pulumi.StringArrayInput
	// Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified. - NO_AGGREGATION. An EndpointHealth message is returned for each pair in the health check service. - AND. If any health check of an endpoint reports UNHEALTHY, then UNHEALTHY is the HealthState of the endpoint. If all health checks report HEALTHY, the HealthState of the endpoint is HEALTHY. .
	HealthStatusAggregationPolicy RegionHealthCheckServiceHealthStatusAggregationPolicyPtrInput
	// This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. .
	//
	// Deprecated: This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. .
	HealthStatusAggregationStrategy RegionHealthCheckServiceHealthStatusAggregationStrategyPtrInput
	// Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// A list of URLs to the NetworkEndpointGroup resources. Must not have more than 100. For regional HealthCheckService, NEGs must be in zones in the region of the HealthCheckService.
	NetworkEndpointGroups pulumi.StringArrayInput
	// A list of URLs to the NotificationEndpoint resources. Must not have more than 10. A list of endpoints for receiving notifications of change in health status. For regional HealthCheckService, NotificationEndpoint must be regional and in the same region. For global HealthCheckService, NotificationEndpoint must be global.
	NotificationEndpoints pulumi.StringArrayInput
	Project               pulumi.StringPtrInput
	Region                pulumi.StringInput
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
}

func (RegionHealthCheckServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionHealthCheckServiceArgs)(nil)).Elem()
}

type RegionHealthCheckServiceInput interface {
	pulumi.Input

	ToRegionHealthCheckServiceOutput() RegionHealthCheckServiceOutput
	ToRegionHealthCheckServiceOutputWithContext(ctx context.Context) RegionHealthCheckServiceOutput
}

func (*RegionHealthCheckService) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionHealthCheckService)(nil)).Elem()
}

func (i *RegionHealthCheckService) ToRegionHealthCheckServiceOutput() RegionHealthCheckServiceOutput {
	return i.ToRegionHealthCheckServiceOutputWithContext(context.Background())
}

func (i *RegionHealthCheckService) ToRegionHealthCheckServiceOutputWithContext(ctx context.Context) RegionHealthCheckServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionHealthCheckServiceOutput)
}

type RegionHealthCheckServiceOutput struct{ *pulumi.OutputState }

func (RegionHealthCheckServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionHealthCheckService)(nil)).Elem()
}

func (o RegionHealthCheckServiceOutput) ToRegionHealthCheckServiceOutput() RegionHealthCheckServiceOutput {
	return o
}

func (o RegionHealthCheckServiceOutput) ToRegionHealthCheckServiceOutputWithContext(ctx context.Context) RegionHealthCheckServiceOutput {
	return o
}

// Creation timestamp in RFC3339 text format.
func (o RegionHealthCheckServiceOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionHealthCheckService) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o RegionHealthCheckServiceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionHealthCheckService) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a HealthCheckService. An up-to-date fingerprint must be provided in order to patch/update the HealthCheckService; Otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the HealthCheckService.
func (o RegionHealthCheckServiceOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionHealthCheckService) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// A list of URLs to the HealthCheck resources. Must have at least one HealthCheck, and not more than 10. HealthCheck resources must have portSpecification=USE_SERVING_PORT or portSpecification=USE_FIXED_PORT. For regional HealthCheckService, the HealthCheck must be regional and in the same region. For global HealthCheckService, HealthCheck must be global. Mix of regional and global HealthChecks is not supported. Multiple regional HealthChecks must belong to the same region. Regional HealthChecks must belong to the same region as zones of NEGs.
func (o RegionHealthCheckServiceOutput) HealthChecks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionHealthCheckService) pulumi.StringArrayOutput { return v.HealthChecks }).(pulumi.StringArrayOutput)
}

// Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified. - NO_AGGREGATION. An EndpointHealth message is returned for each pair in the health check service. - AND. If any health check of an endpoint reports UNHEALTHY, then UNHEALTHY is the HealthState of the endpoint. If all health checks report HEALTHY, the HealthState of the endpoint is HEALTHY. .
func (o RegionHealthCheckServiceOutput) HealthStatusAggregationPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionHealthCheckService) pulumi.StringOutput { return v.HealthStatusAggregationPolicy }).(pulumi.StringOutput)
}

// This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. .
//
// Deprecated: This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. .
func (o RegionHealthCheckServiceOutput) HealthStatusAggregationStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionHealthCheckService) pulumi.StringOutput { return v.HealthStatusAggregationStrategy }).(pulumi.StringOutput)
}

// [Output only] Type of the resource. Always compute#healthCheckServicefor health check services.
func (o RegionHealthCheckServiceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionHealthCheckService) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o RegionHealthCheckServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionHealthCheckService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of URLs to the NetworkEndpointGroup resources. Must not have more than 100. For regional HealthCheckService, NEGs must be in zones in the region of the HealthCheckService.
func (o RegionHealthCheckServiceOutput) NetworkEndpointGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionHealthCheckService) pulumi.StringArrayOutput { return v.NetworkEndpointGroups }).(pulumi.StringArrayOutput)
}

// A list of URLs to the NotificationEndpoint resources. Must not have more than 10. A list of endpoints for receiving notifications of change in health status. For regional HealthCheckService, NotificationEndpoint must be regional and in the same region. For global HealthCheckService, NotificationEndpoint must be global.
func (o RegionHealthCheckServiceOutput) NotificationEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegionHealthCheckService) pulumi.StringArrayOutput { return v.NotificationEndpoints }).(pulumi.StringArrayOutput)
}

func (o RegionHealthCheckServiceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionHealthCheckService) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o RegionHealthCheckServiceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionHealthCheckService) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
func (o RegionHealthCheckServiceOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegionHealthCheckService) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Server-defined URL for the resource.
func (o RegionHealthCheckServiceOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionHealthCheckService) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionHealthCheckServiceInput)(nil)).Elem(), &RegionHealthCheckService{})
	pulumi.RegisterOutputType(RegionHealthCheckServiceOutput{})
}
