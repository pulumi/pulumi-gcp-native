// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package beta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy.
type RegionDiskIamPolicy struct {
	pulumi.CustomResourceState
}

// NewRegionDiskIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewRegionDiskIamPolicy(ctx *pulumi.Context,
	name string, args *RegionDiskIamPolicyArgs, opts ...pulumi.ResourceOption) (*RegionDiskIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Resource == nil {
		return nil, errors.New("invalid value for required argument 'Resource'")
	}
	var resource RegionDiskIamPolicy
	err := ctx.RegisterResource("google-cloud:compute/beta:RegionDiskIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionDiskIamPolicy gets an existing RegionDiskIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionDiskIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionDiskIamPolicyState, opts ...pulumi.ResourceOption) (*RegionDiskIamPolicy, error) {
	var resource RegionDiskIamPolicy
	err := ctx.ReadResource("google-cloud:compute/beta:RegionDiskIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionDiskIamPolicy resources.
type regionDiskIamPolicyState struct {
}

type RegionDiskIamPolicyState struct {
}

func (RegionDiskIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionDiskIamPolicyState)(nil)).Elem()
}

type regionDiskIamPolicyArgs struct {
	// Flatten Policy to create a backwacd compatible wire-format. Deprecated. Use 'policy' to specify bindings.
	Bindings []Binding `pulumi:"bindings"`
	// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag.
	Etag *string `pulumi:"etag"`
	// REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
	Policy   *Policy `pulumi:"policy"`
	Project  string  `pulumi:"project"`
	Region   string  `pulumi:"region"`
	Resource string  `pulumi:"resource"`
}

// The set of arguments for constructing a RegionDiskIamPolicy resource.
type RegionDiskIamPolicyArgs struct {
	// Flatten Policy to create a backwacd compatible wire-format. Deprecated. Use 'policy' to specify bindings.
	Bindings BindingArrayInput
	// Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag.
	Etag pulumi.StringPtrInput
	// REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
	Policy   PolicyPtrInput
	Project  pulumi.StringInput
	Region   pulumi.StringInput
	Resource pulumi.StringInput
}

func (RegionDiskIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionDiskIamPolicyArgs)(nil)).Elem()
}

type RegionDiskIamPolicyInput interface {
	pulumi.Input

	ToRegionDiskIamPolicyOutput() RegionDiskIamPolicyOutput
	ToRegionDiskIamPolicyOutputWithContext(ctx context.Context) RegionDiskIamPolicyOutput
}

func (*RegionDiskIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionDiskIamPolicy)(nil))
}

func (i *RegionDiskIamPolicy) ToRegionDiskIamPolicyOutput() RegionDiskIamPolicyOutput {
	return i.ToRegionDiskIamPolicyOutputWithContext(context.Background())
}

func (i *RegionDiskIamPolicy) ToRegionDiskIamPolicyOutputWithContext(ctx context.Context) RegionDiskIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionDiskIamPolicyOutput)
}

type RegionDiskIamPolicyOutput struct {
	*pulumi.OutputState
}

func (RegionDiskIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionDiskIamPolicy)(nil))
}

func (o RegionDiskIamPolicyOutput) ToRegionDiskIamPolicyOutput() RegionDiskIamPolicyOutput {
	return o
}

func (o RegionDiskIamPolicyOutput) ToRegionDiskIamPolicyOutputWithContext(ctx context.Context) RegionDiskIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(RegionDiskIamPolicyOutput{})
}
