// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns the specified regional HealthCheckService resource.
func LookupRegionHealthCheckService(ctx *pulumi.Context, args *LookupRegionHealthCheckServiceArgs, opts ...pulumi.InvokeOption) (*LookupRegionHealthCheckServiceResult, error) {
	var rv LookupRegionHealthCheckServiceResult
	err := ctx.Invoke("google-native:compute/beta:getRegionHealthCheckService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRegionHealthCheckServiceArgs struct {
	HealthCheckService string  `pulumi:"healthCheckService"`
	Project            *string `pulumi:"project"`
	Region             string  `pulumi:"region"`
}

type LookupRegionHealthCheckServiceResult struct {
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp string `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description string `pulumi:"description"`
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a HealthCheckService. An up-to-date fingerprint must be provided in order to patch/update the HealthCheckService; Otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the HealthCheckService.
	Fingerprint string `pulumi:"fingerprint"`
	// A list of URLs to the HealthCheck resources. Must have at least one HealthCheck, and not more than 10. HealthCheck resources must have portSpecification=USE_SERVING_PORT or portSpecification=USE_FIXED_PORT. For regional HealthCheckService, the HealthCheck must be regional and in the same region. For global HealthCheckService, HealthCheck must be global. Mix of regional and global HealthChecks is not supported. Multiple regional HealthChecks must belong to the same region. Regional HealthChecks must belong to the same region as zones of NEGs.
	HealthChecks []string `pulumi:"healthChecks"`
	// Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified. - NO_AGGREGATION. An EndpointHealth message is returned for each pair in the health check service. - AND. If any health check of an endpoint reports UNHEALTHY, then UNHEALTHY is the HealthState of the endpoint. If all health checks report HEALTHY, the HealthState of the endpoint is HEALTHY. .
	HealthStatusAggregationPolicy string `pulumi:"healthStatusAggregationPolicy"`
	// This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. .
	//
	// Deprecated: This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. .
	HealthStatusAggregationStrategy string `pulumi:"healthStatusAggregationStrategy"`
	// [Output only] Type of the resource. Always compute#healthCheckServicefor health check services.
	Kind string `pulumi:"kind"`
	// Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name string `pulumi:"name"`
	// A list of URLs to the NetworkEndpointGroup resources. Must not have more than 100. For regional HealthCheckService, NEGs must be in zones in the region of the HealthCheckService.
	NetworkEndpointGroups []string `pulumi:"networkEndpointGroups"`
	// A list of URLs to the NotificationEndpoint resources. Must not have more than 10. A list of endpoints for receiving notifications of change in health status. For regional HealthCheckService, NotificationEndpoint must be regional and in the same region. For global HealthCheckService, NotificationEndpoint must be global.
	NotificationEndpoints []string `pulumi:"notificationEndpoints"`
	// URL of the region where the health check service resides. This field is not applicable to global health check services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
	Region string `pulumi:"region"`
	// Server-defined URL for the resource.
	SelfLink string `pulumi:"selfLink"`
}

func LookupRegionHealthCheckServiceOutput(ctx *pulumi.Context, args LookupRegionHealthCheckServiceOutputArgs, opts ...pulumi.InvokeOption) LookupRegionHealthCheckServiceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRegionHealthCheckServiceResult, error) {
			args := v.(LookupRegionHealthCheckServiceArgs)
			r, err := LookupRegionHealthCheckService(ctx, &args, opts...)
			return *r, err
		}).(LookupRegionHealthCheckServiceResultOutput)
}

type LookupRegionHealthCheckServiceOutputArgs struct {
	HealthCheckService pulumi.StringInput    `pulumi:"healthCheckService"`
	Project            pulumi.StringPtrInput `pulumi:"project"`
	Region             pulumi.StringInput    `pulumi:"region"`
}

func (LookupRegionHealthCheckServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegionHealthCheckServiceArgs)(nil)).Elem()
}

type LookupRegionHealthCheckServiceResultOutput struct{ *pulumi.OutputState }

func (LookupRegionHealthCheckServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegionHealthCheckServiceResult)(nil)).Elem()
}

func (o LookupRegionHealthCheckServiceResultOutput) ToLookupRegionHealthCheckServiceResultOutput() LookupRegionHealthCheckServiceResultOutput {
	return o
}

func (o LookupRegionHealthCheckServiceResultOutput) ToLookupRegionHealthCheckServiceResultOutputWithContext(ctx context.Context) LookupRegionHealthCheckServiceResultOutput {
	return o
}

// Creation timestamp in RFC3339 text format.
func (o LookupRegionHealthCheckServiceResultOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionHealthCheckServiceResult) string { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o LookupRegionHealthCheckServiceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionHealthCheckServiceResult) string { return v.Description }).(pulumi.StringOutput)
}

// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a HealthCheckService. An up-to-date fingerprint must be provided in order to patch/update the HealthCheckService; Otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the HealthCheckService.
func (o LookupRegionHealthCheckServiceResultOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionHealthCheckServiceResult) string { return v.Fingerprint }).(pulumi.StringOutput)
}

// A list of URLs to the HealthCheck resources. Must have at least one HealthCheck, and not more than 10. HealthCheck resources must have portSpecification=USE_SERVING_PORT or portSpecification=USE_FIXED_PORT. For regional HealthCheckService, the HealthCheck must be regional and in the same region. For global HealthCheckService, HealthCheck must be global. Mix of regional and global HealthChecks is not supported. Multiple regional HealthChecks must belong to the same region. Regional HealthChecks must belong to the same region as zones of NEGs.
func (o LookupRegionHealthCheckServiceResultOutput) HealthChecks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRegionHealthCheckServiceResult) []string { return v.HealthChecks }).(pulumi.StringArrayOutput)
}

// Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified. - NO_AGGREGATION. An EndpointHealth message is returned for each pair in the health check service. - AND. If any health check of an endpoint reports UNHEALTHY, then UNHEALTHY is the HealthState of the endpoint. If all health checks report HEALTHY, the HealthState of the endpoint is HEALTHY. .
func (o LookupRegionHealthCheckServiceResultOutput) HealthStatusAggregationPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionHealthCheckServiceResult) string { return v.HealthStatusAggregationPolicy }).(pulumi.StringOutput)
}

// This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. .
//
// Deprecated: This field is deprecated. Use health_status_aggregation_policy instead. Policy for how the results from multiple health checks for the same endpoint are aggregated. - NO_AGGREGATION. An EndpointHealth message is returned for each backend in the health check service. - AND. If any backend's health check reports UNHEALTHY, then UNHEALTHY is the HealthState of the entire health check service. If all backend's are healthy, the HealthState of the health check service is HEALTHY. .
func (o LookupRegionHealthCheckServiceResultOutput) HealthStatusAggregationStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionHealthCheckServiceResult) string { return v.HealthStatusAggregationStrategy }).(pulumi.StringOutput)
}

// [Output only] Type of the resource. Always compute#healthCheckServicefor health check services.
func (o LookupRegionHealthCheckServiceResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionHealthCheckServiceResult) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o LookupRegionHealthCheckServiceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionHealthCheckServiceResult) string { return v.Name }).(pulumi.StringOutput)
}

// A list of URLs to the NetworkEndpointGroup resources. Must not have more than 100. For regional HealthCheckService, NEGs must be in zones in the region of the HealthCheckService.
func (o LookupRegionHealthCheckServiceResultOutput) NetworkEndpointGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRegionHealthCheckServiceResult) []string { return v.NetworkEndpointGroups }).(pulumi.StringArrayOutput)
}

// A list of URLs to the NotificationEndpoint resources. Must not have more than 10. A list of endpoints for receiving notifications of change in health status. For regional HealthCheckService, NotificationEndpoint must be regional and in the same region. For global HealthCheckService, NotificationEndpoint must be global.
func (o LookupRegionHealthCheckServiceResultOutput) NotificationEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRegionHealthCheckServiceResult) []string { return v.NotificationEndpoints }).(pulumi.StringArrayOutput)
}

// URL of the region where the health check service resides. This field is not applicable to global health check services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
func (o LookupRegionHealthCheckServiceResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionHealthCheckServiceResult) string { return v.Region }).(pulumi.StringOutput)
}

// Server-defined URL for the resource.
func (o LookupRegionHealthCheckServiceResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionHealthCheckServiceResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegionHealthCheckServiceResultOutput{})
}
