// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package beta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a ServiceAttachment in the specified project in the given scope using the parameters that are included in the request.
type ServiceAttachment struct {
	pulumi.CustomResourceState

	// An array of connections for all the consumers connected to this service attachment.
	ConnectedEndpoints ServiceAttachmentConnectedEndpointResponseArrayOutput `pulumi:"connectedEndpoints"`
	// The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
	ConnectionPreference pulumi.StringOutput `pulumi:"connectionPreference"`
	// Projects that are allowed to connect to this service attachment.
	ConsumerAcceptLists ServiceAttachmentConsumerProjectLimitResponseArrayOutput `pulumi:"consumerAcceptLists"`
	// Projects that are not allowed to connect to this service attachment. The project can be specified using its id or number.
	ConsumerRejectLists pulumi.StringArrayOutput `pulumi:"consumerRejectLists"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// If specified, the domain name will be used during the integration between the PSC connected endpoints and the Cloud DNS. For example, this is a valid domain name: "p.mycompany.com.". Current max number of domain names supported is 1.
	DomainNames pulumi.StringArrayOutput `pulumi:"domainNames"`
	// If true, enable the proxy protocol which is for supplying client TCP/IP address data in TCP connections that traverse proxies on their way to destination servers.
	EnableProxyProtocol pulumi.BoolOutput `pulumi:"enableProxyProtocol"`
	// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ServiceAttachment. An up-to-date fingerprint must be provided in order to patch/update the ServiceAttachment; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the ServiceAttachment.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// Type of the resource. Always compute#serviceAttachment for service attachments.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// An array of URLs where each entry is the URL of a subnet provided by the service producer to use for NAT in this service attachment.
	NatSubnets pulumi.StringArrayOutput `pulumi:"natSubnets"`
	// The URL of a forwarding rule with loadBalancingScheme INTERNAL* that is serving the endpoint identified by this service attachment.
	ProducerForwardingRule pulumi.StringOutput `pulumi:"producerForwardingRule"`
	Project                pulumi.StringOutput `pulumi:"project"`
	// An 128-bit global unique ID of the PSC service attachment.
	PscServiceAttachmentId Uint128ResponseOutput `pulumi:"pscServiceAttachmentId"`
	// This flag determines whether a consumer accept/reject list change can reconcile the statuses of existing ACCEPTED or REJECTED PSC endpoints. - If false, connection policy update will only affect existing PENDING PSC endpoints. Existing ACCEPTED/REJECTED endpoints will remain untouched regardless how the connection policy is modified . - If true, update will affect both PENDING and ACCEPTED/REJECTED PSC endpoints. For example, an ACCEPTED PSC endpoint will be moved to REJECTED if its project is added to the reject list. For newly created service attachment, this boolean defaults to true.
	ReconcileConnections pulumi.BoolOutput   `pulumi:"reconcileConnections"`
	Region               pulumi.StringOutput `pulumi:"region"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Server-defined URL for the resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The URL of a service serving the endpoint identified by this service attachment.
	TargetService pulumi.StringOutput `pulumi:"targetService"`
}

// NewServiceAttachment registers a new resource with the given unique name, arguments, and options.
func NewServiceAttachment(ctx *pulumi.Context,
	name string, args *ServiceAttachmentArgs, opts ...pulumi.ResourceOption) (*ServiceAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"project",
		"region",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceAttachment
	err := ctx.RegisterResource("google-native:compute/beta:ServiceAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAttachment gets an existing ServiceAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceAttachmentState, opts ...pulumi.ResourceOption) (*ServiceAttachment, error) {
	var resource ServiceAttachment
	err := ctx.ReadResource("google-native:compute/beta:ServiceAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAttachment resources.
type serviceAttachmentState struct {
}

type ServiceAttachmentState struct {
}

func (ServiceAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAttachmentState)(nil)).Elem()
}

type serviceAttachmentArgs struct {
	// The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
	ConnectionPreference *ServiceAttachmentConnectionPreference `pulumi:"connectionPreference"`
	// Projects that are allowed to connect to this service attachment.
	ConsumerAcceptLists []ServiceAttachmentConsumerProjectLimit `pulumi:"consumerAcceptLists"`
	// Projects that are not allowed to connect to this service attachment. The project can be specified using its id or number.
	ConsumerRejectLists []string `pulumi:"consumerRejectLists"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// If specified, the domain name will be used during the integration between the PSC connected endpoints and the Cloud DNS. For example, this is a valid domain name: "p.mycompany.com.". Current max number of domain names supported is 1.
	DomainNames []string `pulumi:"domainNames"`
	// If true, enable the proxy protocol which is for supplying client TCP/IP address data in TCP connections that traverse proxies on their way to destination servers.
	EnableProxyProtocol *bool `pulumi:"enableProxyProtocol"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// An array of URLs where each entry is the URL of a subnet provided by the service producer to use for NAT in this service attachment.
	NatSubnets []string `pulumi:"natSubnets"`
	// The URL of a forwarding rule with loadBalancingScheme INTERNAL* that is serving the endpoint identified by this service attachment.
	ProducerForwardingRule *string `pulumi:"producerForwardingRule"`
	Project                *string `pulumi:"project"`
	// This flag determines whether a consumer accept/reject list change can reconcile the statuses of existing ACCEPTED or REJECTED PSC endpoints. - If false, connection policy update will only affect existing PENDING PSC endpoints. Existing ACCEPTED/REJECTED endpoints will remain untouched regardless how the connection policy is modified . - If true, update will affect both PENDING and ACCEPTED/REJECTED PSC endpoints. For example, an ACCEPTED PSC endpoint will be moved to REJECTED if its project is added to the reject list. For newly created service attachment, this boolean defaults to true.
	ReconcileConnections *bool  `pulumi:"reconcileConnections"`
	Region               string `pulumi:"region"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// The URL of a service serving the endpoint identified by this service attachment.
	TargetService *string `pulumi:"targetService"`
}

// The set of arguments for constructing a ServiceAttachment resource.
type ServiceAttachmentArgs struct {
	// The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
	ConnectionPreference ServiceAttachmentConnectionPreferencePtrInput
	// Projects that are allowed to connect to this service attachment.
	ConsumerAcceptLists ServiceAttachmentConsumerProjectLimitArrayInput
	// Projects that are not allowed to connect to this service attachment. The project can be specified using its id or number.
	ConsumerRejectLists pulumi.StringArrayInput
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// If specified, the domain name will be used during the integration between the PSC connected endpoints and the Cloud DNS. For example, this is a valid domain name: "p.mycompany.com.". Current max number of domain names supported is 1.
	DomainNames pulumi.StringArrayInput
	// If true, enable the proxy protocol which is for supplying client TCP/IP address data in TCP connections that traverse proxies on their way to destination servers.
	EnableProxyProtocol pulumi.BoolPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// An array of URLs where each entry is the URL of a subnet provided by the service producer to use for NAT in this service attachment.
	NatSubnets pulumi.StringArrayInput
	// The URL of a forwarding rule with loadBalancingScheme INTERNAL* that is serving the endpoint identified by this service attachment.
	ProducerForwardingRule pulumi.StringPtrInput
	Project                pulumi.StringPtrInput
	// This flag determines whether a consumer accept/reject list change can reconcile the statuses of existing ACCEPTED or REJECTED PSC endpoints. - If false, connection policy update will only affect existing PENDING PSC endpoints. Existing ACCEPTED/REJECTED endpoints will remain untouched regardless how the connection policy is modified . - If true, update will affect both PENDING and ACCEPTED/REJECTED PSC endpoints. For example, an ACCEPTED PSC endpoint will be moved to REJECTED if its project is added to the reject list. For newly created service attachment, this boolean defaults to true.
	ReconcileConnections pulumi.BoolPtrInput
	Region               pulumi.StringInput
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// The URL of a service serving the endpoint identified by this service attachment.
	TargetService pulumi.StringPtrInput
}

func (ServiceAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAttachmentArgs)(nil)).Elem()
}

type ServiceAttachmentInput interface {
	pulumi.Input

	ToServiceAttachmentOutput() ServiceAttachmentOutput
	ToServiceAttachmentOutputWithContext(ctx context.Context) ServiceAttachmentOutput
}

func (*ServiceAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAttachment)(nil)).Elem()
}

func (i *ServiceAttachment) ToServiceAttachmentOutput() ServiceAttachmentOutput {
	return i.ToServiceAttachmentOutputWithContext(context.Background())
}

func (i *ServiceAttachment) ToServiceAttachmentOutputWithContext(ctx context.Context) ServiceAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAttachmentOutput)
}

type ServiceAttachmentOutput struct{ *pulumi.OutputState }

func (ServiceAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAttachment)(nil)).Elem()
}

func (o ServiceAttachmentOutput) ToServiceAttachmentOutput() ServiceAttachmentOutput {
	return o
}

func (o ServiceAttachmentOutput) ToServiceAttachmentOutputWithContext(ctx context.Context) ServiceAttachmentOutput {
	return o
}

// An array of connections for all the consumers connected to this service attachment.
func (o ServiceAttachmentOutput) ConnectedEndpoints() ServiceAttachmentConnectedEndpointResponseArrayOutput {
	return o.ApplyT(func(v *ServiceAttachment) ServiceAttachmentConnectedEndpointResponseArrayOutput {
		return v.ConnectedEndpoints
	}).(ServiceAttachmentConnectedEndpointResponseArrayOutput)
}

// The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
func (o ServiceAttachmentOutput) ConnectionPreference() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.StringOutput { return v.ConnectionPreference }).(pulumi.StringOutput)
}

// Projects that are allowed to connect to this service attachment.
func (o ServiceAttachmentOutput) ConsumerAcceptLists() ServiceAttachmentConsumerProjectLimitResponseArrayOutput {
	return o.ApplyT(func(v *ServiceAttachment) ServiceAttachmentConsumerProjectLimitResponseArrayOutput {
		return v.ConsumerAcceptLists
	}).(ServiceAttachmentConsumerProjectLimitResponseArrayOutput)
}

// Projects that are not allowed to connect to this service attachment. The project can be specified using its id or number.
func (o ServiceAttachmentOutput) ConsumerRejectLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.StringArrayOutput { return v.ConsumerRejectLists }).(pulumi.StringArrayOutput)
}

// Creation timestamp in RFC3339 text format.
func (o ServiceAttachmentOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o ServiceAttachmentOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// If specified, the domain name will be used during the integration between the PSC connected endpoints and the Cloud DNS. For example, this is a valid domain name: "p.mycompany.com.". Current max number of domain names supported is 1.
func (o ServiceAttachmentOutput) DomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.StringArrayOutput { return v.DomainNames }).(pulumi.StringArrayOutput)
}

// If true, enable the proxy protocol which is for supplying client TCP/IP address data in TCP connections that traverse proxies on their way to destination servers.
func (o ServiceAttachmentOutput) EnableProxyProtocol() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.BoolOutput { return v.EnableProxyProtocol }).(pulumi.BoolOutput)
}

// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ServiceAttachment. An up-to-date fingerprint must be provided in order to patch/update the ServiceAttachment; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the ServiceAttachment.
func (o ServiceAttachmentOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// Type of the resource. Always compute#serviceAttachment for service attachments.
func (o ServiceAttachmentOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o ServiceAttachmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An array of URLs where each entry is the URL of a subnet provided by the service producer to use for NAT in this service attachment.
func (o ServiceAttachmentOutput) NatSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.StringArrayOutput { return v.NatSubnets }).(pulumi.StringArrayOutput)
}

// The URL of a forwarding rule with loadBalancingScheme INTERNAL* that is serving the endpoint identified by this service attachment.
func (o ServiceAttachmentOutput) ProducerForwardingRule() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.StringOutput { return v.ProducerForwardingRule }).(pulumi.StringOutput)
}

func (o ServiceAttachmentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// An 128-bit global unique ID of the PSC service attachment.
func (o ServiceAttachmentOutput) PscServiceAttachmentId() Uint128ResponseOutput {
	return o.ApplyT(func(v *ServiceAttachment) Uint128ResponseOutput { return v.PscServiceAttachmentId }).(Uint128ResponseOutput)
}

// This flag determines whether a consumer accept/reject list change can reconcile the statuses of existing ACCEPTED or REJECTED PSC endpoints. - If false, connection policy update will only affect existing PENDING PSC endpoints. Existing ACCEPTED/REJECTED endpoints will remain untouched regardless how the connection policy is modified . - If true, update will affect both PENDING and ACCEPTED/REJECTED PSC endpoints. For example, an ACCEPTED PSC endpoint will be moved to REJECTED if its project is added to the reject list. For newly created service attachment, this boolean defaults to true.
func (o ServiceAttachmentOutput) ReconcileConnections() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.BoolOutput { return v.ReconcileConnections }).(pulumi.BoolOutput)
}

func (o ServiceAttachmentOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
func (o ServiceAttachmentOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Server-defined URL for the resource.
func (o ServiceAttachmentOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// The URL of a service serving the endpoint identified by this service attachment.
func (o ServiceAttachmentOutput) TargetService() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAttachment) pulumi.StringOutput { return v.TargetService }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAttachmentInput)(nil)).Elem(), &ServiceAttachment{})
	pulumi.RegisterOutputType(ServiceAttachmentOutput{})
}
