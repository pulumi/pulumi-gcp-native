// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an Interconnect in the specified project using the data included in the request.
type Interconnect struct {
	pulumi.CustomResourceState

	// Administrative status of the interconnect. When this is set to true, the Interconnect is functional and can carry traffic. When set to false, no packets can be carried over the interconnect and no BGP routes are exchanged over it. By default, the status is set to true.
	AdminEnabled pulumi.BoolOutput `pulumi:"adminEnabled"`
	// [Output only] List of features available for this interconnect, which can take one of the following values: - MACSEC If present then the interconnect was created on MACsec capable hardware ports. If not present then the interconnect is provisioned on non-MACsec capable ports and MACsec enablement will fail.
	AvailableFeatures pulumi.StringArrayOutput `pulumi:"availableFeatures"`
	// A list of CircuitInfo objects, that describe the individual circuits in this LAG.
	CircuitInfos InterconnectCircuitInfoResponseArrayOutput `pulumi:"circuitInfos"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// Customer name, to put in the Letter of Authorization as the party authorized to request a crossconnect.
	CustomerName pulumi.StringOutput `pulumi:"customerName"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// A list of outages expected for this Interconnect.
	ExpectedOutages InterconnectOutageNotificationResponseArrayOutput `pulumi:"expectedOutages"`
	// IP address configured on the Google side of the Interconnect link. This can be used only for ping tests.
	GoogleIpAddress pulumi.StringOutput `pulumi:"googleIpAddress"`
	// Google reference ID to be used when raising support tickets with Google or otherwise to debug backend connectivity issues.
	GoogleReferenceId pulumi.StringOutput `pulumi:"googleReferenceId"`
	// A list of the URLs of all InterconnectAttachments configured to use this Interconnect.
	InterconnectAttachments pulumi.StringArrayOutput `pulumi:"interconnectAttachments"`
	// Type of interconnect, which can take one of the following values: - PARTNER: A partner-managed interconnection shared between customers though a partner. - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED.
	InterconnectType pulumi.StringOutput `pulumi:"interconnectType"`
	// Type of the resource. Always compute#interconnect for interconnects.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// A fingerprint for the labels being applied to this Interconnect, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an Interconnect.
	LabelFingerprint pulumi.StringOutput `pulumi:"labelFingerprint"`
	// Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Type of link requested, which can take one of the following values: - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle.
	LinkType pulumi.StringOutput `pulumi:"linkType"`
	// URL of the InterconnectLocation object that represents where this connection is to be provisioned.
	Location pulumi.StringOutput `pulumi:"location"`
	// Configuration to enable Media Access Control security (MACsec) on the Interconnect between Google and your on-premises router.
	Macsec InterconnectMacsecResponseOutput `pulumi:"macsec"`
	// Enable or disable MACsec on this Interconnect. MACsec enablement will fail if the macsec object is not specified.
	MacsecEnabled pulumi.BoolOutput `pulumi:"macsecEnabled"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// Email address to contact the customer NOC for operations and maintenance notifications regarding this Interconnect. If specified, this will be used for notifications in addition to all other forms described, such as Cloud Monitoring logs alerting and Cloud Notifications. This field is required for users who sign up for Cloud Interconnect using workforce identity federation.
	NocContactEmail pulumi.StringOutput `pulumi:"nocContactEmail"`
	// The current status of this Interconnect's functionality, which can take one of the following values: - OS_ACTIVE: A valid Interconnect, which is turned up and is ready to use. Attachments may be provisioned on this Interconnect. - OS_UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this Interconnect. - OS_UNDER_MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
	OperationalStatus pulumi.StringOutput `pulumi:"operationalStatus"`
	// IP address configured on the customer side of the Interconnect link. The customer should configure this IP address during turnup when prompted by Google NOC. This can be used only for ping tests.
	PeerIpAddress pulumi.StringOutput `pulumi:"peerIpAddress"`
	Project       pulumi.StringOutput `pulumi:"project"`
	// Number of links actually provisioned in this interconnect.
	ProvisionedLinkCount pulumi.IntOutput `pulumi:"provisionedLinkCount"`
	// Indicates that this is a Cross-Cloud Interconnect. This field specifies the location outside of Google's network that the interconnect is connected to.
	RemoteLocation pulumi.StringOutput `pulumi:"remoteLocation"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Optional. List of features requested for this interconnect, which can take one of the following values: - MACSEC If specified then the interconnect will be created on MACsec capable hardware ports. If not specified, the default value is false, which will allocate non-MACsec capable ports first if available. This parameter can only be provided during interconnect INSERT and cannot be changed using interconnect PATCH. Please review Interconnect Pricing for implications on enabling this flag.
	RequestedFeatures pulumi.StringArrayOutput `pulumi:"requestedFeatures"`
	// Target number of physical links in the link bundle, as requested by the customer.
	RequestedLinkCount pulumi.IntOutput `pulumi:"requestedLinkCount"`
	// Reserved for future use.
	SatisfiesPzs pulumi.BoolOutput `pulumi:"satisfiesPzs"`
	// Server-defined URL for the resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Server-defined URL for this resource with the resource id.
	SelfLinkWithId pulumi.StringOutput `pulumi:"selfLinkWithId"`
	// The current state of Interconnect functionality, which can take one of the following values: - ACTIVE: The Interconnect is valid, turned up and ready to use. Attachments may be provisioned on this Interconnect. - UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect. - UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewInterconnect registers a new resource with the given unique name, arguments, and options.
func NewInterconnect(ctx *pulumi.Context,
	name string, args *InterconnectArgs, opts ...pulumi.ResourceOption) (*Interconnect, error) {
	if args == nil {
		args = &InterconnectArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Interconnect
	err := ctx.RegisterResource("google-native:compute/alpha:Interconnect", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterconnect gets an existing Interconnect resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterconnect(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterconnectState, opts ...pulumi.ResourceOption) (*Interconnect, error) {
	var resource Interconnect
	err := ctx.ReadResource("google-native:compute/alpha:Interconnect", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Interconnect resources.
type interconnectState struct {
}

type InterconnectState struct {
}

func (InterconnectState) ElementType() reflect.Type {
	return reflect.TypeOf((*interconnectState)(nil)).Elem()
}

type interconnectArgs struct {
	// Administrative status of the interconnect. When this is set to true, the Interconnect is functional and can carry traffic. When set to false, no packets can be carried over the interconnect and no BGP routes are exchanged over it. By default, the status is set to true.
	AdminEnabled *bool `pulumi:"adminEnabled"`
	// Customer name, to put in the Letter of Authorization as the party authorized to request a crossconnect.
	CustomerName *string `pulumi:"customerName"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// Type of interconnect, which can take one of the following values: - PARTNER: A partner-managed interconnection shared between customers though a partner. - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED.
	InterconnectType *InterconnectInterconnectType `pulumi:"interconnectType"`
	// Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty.
	Labels map[string]string `pulumi:"labels"`
	// Type of link requested, which can take one of the following values: - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle.
	LinkType *InterconnectLinkType `pulumi:"linkType"`
	// URL of the InterconnectLocation object that represents where this connection is to be provisioned.
	Location *string `pulumi:"location"`
	// Configuration to enable Media Access Control security (MACsec) on the Interconnect between Google and your on-premises router.
	Macsec *InterconnectMacsec `pulumi:"macsec"`
	// Enable or disable MACsec on this Interconnect. MACsec enablement will fail if the macsec object is not specified.
	MacsecEnabled *bool `pulumi:"macsecEnabled"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// Email address to contact the customer NOC for operations and maintenance notifications regarding this Interconnect. If specified, this will be used for notifications in addition to all other forms described, such as Cloud Monitoring logs alerting and Cloud Notifications. This field is required for users who sign up for Cloud Interconnect using workforce identity federation.
	NocContactEmail *string `pulumi:"nocContactEmail"`
	Project         *string `pulumi:"project"`
	// Indicates that this is a Cross-Cloud Interconnect. This field specifies the location outside of Google's network that the interconnect is connected to.
	RemoteLocation *string `pulumi:"remoteLocation"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Optional. List of features requested for this interconnect, which can take one of the following values: - MACSEC If specified then the interconnect will be created on MACsec capable hardware ports. If not specified, the default value is false, which will allocate non-MACsec capable ports first if available. This parameter can only be provided during interconnect INSERT and cannot be changed using interconnect PATCH. Please review Interconnect Pricing for implications on enabling this flag.
	RequestedFeatures []InterconnectRequestedFeaturesItem `pulumi:"requestedFeatures"`
	// Target number of physical links in the link bundle, as requested by the customer.
	RequestedLinkCount *int `pulumi:"requestedLinkCount"`
}

// The set of arguments for constructing a Interconnect resource.
type InterconnectArgs struct {
	// Administrative status of the interconnect. When this is set to true, the Interconnect is functional and can carry traffic. When set to false, no packets can be carried over the interconnect and no BGP routes are exchanged over it. By default, the status is set to true.
	AdminEnabled pulumi.BoolPtrInput
	// Customer name, to put in the Letter of Authorization as the party authorized to request a crossconnect.
	CustomerName pulumi.StringPtrInput
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// Type of interconnect, which can take one of the following values: - PARTNER: A partner-managed interconnection shared between customers though a partner. - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED.
	InterconnectType InterconnectInterconnectTypePtrInput
	// Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty.
	Labels pulumi.StringMapInput
	// Type of link requested, which can take one of the following values: - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle.
	LinkType InterconnectLinkTypePtrInput
	// URL of the InterconnectLocation object that represents where this connection is to be provisioned.
	Location pulumi.StringPtrInput
	// Configuration to enable Media Access Control security (MACsec) on the Interconnect between Google and your on-premises router.
	Macsec InterconnectMacsecPtrInput
	// Enable or disable MACsec on this Interconnect. MACsec enablement will fail if the macsec object is not specified.
	MacsecEnabled pulumi.BoolPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// Email address to contact the customer NOC for operations and maintenance notifications regarding this Interconnect. If specified, this will be used for notifications in addition to all other forms described, such as Cloud Monitoring logs alerting and Cloud Notifications. This field is required for users who sign up for Cloud Interconnect using workforce identity federation.
	NocContactEmail pulumi.StringPtrInput
	Project         pulumi.StringPtrInput
	// Indicates that this is a Cross-Cloud Interconnect. This field specifies the location outside of Google's network that the interconnect is connected to.
	RemoteLocation pulumi.StringPtrInput
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Optional. List of features requested for this interconnect, which can take one of the following values: - MACSEC If specified then the interconnect will be created on MACsec capable hardware ports. If not specified, the default value is false, which will allocate non-MACsec capable ports first if available. This parameter can only be provided during interconnect INSERT and cannot be changed using interconnect PATCH. Please review Interconnect Pricing for implications on enabling this flag.
	RequestedFeatures InterconnectRequestedFeaturesItemArrayInput
	// Target number of physical links in the link bundle, as requested by the customer.
	RequestedLinkCount pulumi.IntPtrInput
}

func (InterconnectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interconnectArgs)(nil)).Elem()
}

type InterconnectInput interface {
	pulumi.Input

	ToInterconnectOutput() InterconnectOutput
	ToInterconnectOutputWithContext(ctx context.Context) InterconnectOutput
}

func (*Interconnect) ElementType() reflect.Type {
	return reflect.TypeOf((**Interconnect)(nil)).Elem()
}

func (i *Interconnect) ToInterconnectOutput() InterconnectOutput {
	return i.ToInterconnectOutputWithContext(context.Background())
}

func (i *Interconnect) ToInterconnectOutputWithContext(ctx context.Context) InterconnectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectOutput)
}

type InterconnectOutput struct{ *pulumi.OutputState }

func (InterconnectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Interconnect)(nil)).Elem()
}

func (o InterconnectOutput) ToInterconnectOutput() InterconnectOutput {
	return o
}

func (o InterconnectOutput) ToInterconnectOutputWithContext(ctx context.Context) InterconnectOutput {
	return o
}

// Administrative status of the interconnect. When this is set to true, the Interconnect is functional and can carry traffic. When set to false, no packets can be carried over the interconnect and no BGP routes are exchanged over it. By default, the status is set to true.
func (o InterconnectOutput) AdminEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.BoolOutput { return v.AdminEnabled }).(pulumi.BoolOutput)
}

// [Output only] List of features available for this interconnect, which can take one of the following values: - MACSEC If present then the interconnect was created on MACsec capable hardware ports. If not present then the interconnect is provisioned on non-MACsec capable ports and MACsec enablement will fail.
func (o InterconnectOutput) AvailableFeatures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringArrayOutput { return v.AvailableFeatures }).(pulumi.StringArrayOutput)
}

// A list of CircuitInfo objects, that describe the individual circuits in this LAG.
func (o InterconnectOutput) CircuitInfos() InterconnectCircuitInfoResponseArrayOutput {
	return o.ApplyT(func(v *Interconnect) InterconnectCircuitInfoResponseArrayOutput { return v.CircuitInfos }).(InterconnectCircuitInfoResponseArrayOutput)
}

// Creation timestamp in RFC3339 text format.
func (o InterconnectOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// Customer name, to put in the Letter of Authorization as the party authorized to request a crossconnect.
func (o InterconnectOutput) CustomerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.CustomerName }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o InterconnectOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// A list of outages expected for this Interconnect.
func (o InterconnectOutput) ExpectedOutages() InterconnectOutageNotificationResponseArrayOutput {
	return o.ApplyT(func(v *Interconnect) InterconnectOutageNotificationResponseArrayOutput { return v.ExpectedOutages }).(InterconnectOutageNotificationResponseArrayOutput)
}

// IP address configured on the Google side of the Interconnect link. This can be used only for ping tests.
func (o InterconnectOutput) GoogleIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.GoogleIpAddress }).(pulumi.StringOutput)
}

// Google reference ID to be used when raising support tickets with Google or otherwise to debug backend connectivity issues.
func (o InterconnectOutput) GoogleReferenceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.GoogleReferenceId }).(pulumi.StringOutput)
}

// A list of the URLs of all InterconnectAttachments configured to use this Interconnect.
func (o InterconnectOutput) InterconnectAttachments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringArrayOutput { return v.InterconnectAttachments }).(pulumi.StringArrayOutput)
}

// Type of interconnect, which can take one of the following values: - PARTNER: A partner-managed interconnection shared between customers though a partner. - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED.
func (o InterconnectOutput) InterconnectType() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.InterconnectType }).(pulumi.StringOutput)
}

// Type of the resource. Always compute#interconnect for interconnects.
func (o InterconnectOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// A fingerprint for the labels being applied to this Interconnect, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an Interconnect.
func (o InterconnectOutput) LabelFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.LabelFingerprint }).(pulumi.StringOutput)
}

// Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty.
func (o InterconnectOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Type of link requested, which can take one of the following values: - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle.
func (o InterconnectOutput) LinkType() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.LinkType }).(pulumi.StringOutput)
}

// URL of the InterconnectLocation object that represents where this connection is to be provisioned.
func (o InterconnectOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Configuration to enable Media Access Control security (MACsec) on the Interconnect between Google and your on-premises router.
func (o InterconnectOutput) Macsec() InterconnectMacsecResponseOutput {
	return o.ApplyT(func(v *Interconnect) InterconnectMacsecResponseOutput { return v.Macsec }).(InterconnectMacsecResponseOutput)
}

// Enable or disable MACsec on this Interconnect. MACsec enablement will fail if the macsec object is not specified.
func (o InterconnectOutput) MacsecEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.BoolOutput { return v.MacsecEnabled }).(pulumi.BoolOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o InterconnectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Email address to contact the customer NOC for operations and maintenance notifications regarding this Interconnect. If specified, this will be used for notifications in addition to all other forms described, such as Cloud Monitoring logs alerting and Cloud Notifications. This field is required for users who sign up for Cloud Interconnect using workforce identity federation.
func (o InterconnectOutput) NocContactEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.NocContactEmail }).(pulumi.StringOutput)
}

// The current status of this Interconnect's functionality, which can take one of the following values: - OS_ACTIVE: A valid Interconnect, which is turned up and is ready to use. Attachments may be provisioned on this Interconnect. - OS_UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this Interconnect. - OS_UNDER_MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
func (o InterconnectOutput) OperationalStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.OperationalStatus }).(pulumi.StringOutput)
}

// IP address configured on the customer side of the Interconnect link. The customer should configure this IP address during turnup when prompted by Google NOC. This can be used only for ping tests.
func (o InterconnectOutput) PeerIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.PeerIpAddress }).(pulumi.StringOutput)
}

func (o InterconnectOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Number of links actually provisioned in this interconnect.
func (o InterconnectOutput) ProvisionedLinkCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.IntOutput { return v.ProvisionedLinkCount }).(pulumi.IntOutput)
}

// Indicates that this is a Cross-Cloud Interconnect. This field specifies the location outside of Google's network that the interconnect is connected to.
func (o InterconnectOutput) RemoteLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.RemoteLocation }).(pulumi.StringOutput)
}

// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
func (o InterconnectOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Optional. List of features requested for this interconnect, which can take one of the following values: - MACSEC If specified then the interconnect will be created on MACsec capable hardware ports. If not specified, the default value is false, which will allocate non-MACsec capable ports first if available. This parameter can only be provided during interconnect INSERT and cannot be changed using interconnect PATCH. Please review Interconnect Pricing for implications on enabling this flag.
func (o InterconnectOutput) RequestedFeatures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringArrayOutput { return v.RequestedFeatures }).(pulumi.StringArrayOutput)
}

// Target number of physical links in the link bundle, as requested by the customer.
func (o InterconnectOutput) RequestedLinkCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.IntOutput { return v.RequestedLinkCount }).(pulumi.IntOutput)
}

// Reserved for future use.
func (o InterconnectOutput) SatisfiesPzs() pulumi.BoolOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.BoolOutput { return v.SatisfiesPzs }).(pulumi.BoolOutput)
}

// Server-defined URL for the resource.
func (o InterconnectOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Server-defined URL for this resource with the resource id.
func (o InterconnectOutput) SelfLinkWithId() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.SelfLinkWithId }).(pulumi.StringOutput)
}

// The current state of Interconnect functionality, which can take one of the following values: - ACTIVE: The Interconnect is valid, turned up and ready to use. Attachments may be provisioned on this Interconnect. - UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect. - UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
func (o InterconnectOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Interconnect) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterconnectInput)(nil)).Elem(), &Interconnect{})
	pulumi.RegisterOutputType(InterconnectOutput{})
}
