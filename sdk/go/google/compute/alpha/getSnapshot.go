// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns the specified Snapshot resource.
func LookupSnapshot(ctx *pulumi.Context, args *LookupSnapshotArgs, opts ...pulumi.InvokeOption) (*LookupSnapshotResult, error) {
	var rv LookupSnapshotResult
	err := ctx.Invoke("google-native:compute/alpha:getSnapshot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSnapshotArgs struct {
	Project  *string `pulumi:"project"`
	Snapshot string  `pulumi:"snapshot"`
}

type LookupSnapshotResult struct {
	// The architecture of the snapshot. Valid values are ARM64 or X86_64.
	Architecture string `pulumi:"architecture"`
	// Set to true if snapshots are automatically created by applying resource policy on the target disk.
	AutoCreated bool `pulumi:"autoCreated"`
	// Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters long and comply with RFC1035. This is an uncommon option only for advanced service owners who needs to create separate snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible only if it has a non-empty value.
	ChainName string `pulumi:"chainName"`
	// Size in bytes of the snapshot at creation time.
	CreationSizeBytes string `pulumi:"creationSizeBytes"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp string `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description string `pulumi:"description"`
	// Size of the source disk, specified in GB.
	DiskSizeGb string `pulumi:"diskSizeGb"`
	// Number of bytes downloaded to restore a snapshot to a disk.
	DownloadBytes string `pulumi:"downloadBytes"`
	// [Input Only] Whether to attempt an application consistent snapshot by informing the OS to prepare for the snapshot process.
	GuestFlush bool `pulumi:"guestFlush"`
	// A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
	GuestOsFeatures []GuestOsFeatureResponse `pulumi:"guestOsFeatures"`
	// Type of the resource. Always compute#snapshot for Snapshot resources.
	Kind string `pulumi:"kind"`
	// A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a snapshot.
	LabelFingerprint string `pulumi:"labelFingerprint"`
	// Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty.
	Labels map[string]string `pulumi:"labels"`
	// Integer license codes indicating which licenses are attached to this snapshot.
	LicenseCodes []string `pulumi:"licenseCodes"`
	// A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image).
	Licenses []string `pulumi:"licenses"`
	// An opaque location hint used to place the snapshot close to other resources. This field is for use by internal tools that use the public API.
	LocationHint string `pulumi:"locationHint"`
	// Number of days the snapshot should be retained before being deleted automatically.
	MaxRetentionDays int `pulumi:"maxRetentionDays"`
	// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name string `pulumi:"name"`
	// Reserved for future use.
	SatisfiesPzs bool `pulumi:"satisfiesPzs"`
	// Server-defined URL for the resource.
	SelfLink string `pulumi:"selfLink"`
	// Server-defined URL for this resource's resource id.
	SelfLinkWithId string `pulumi:"selfLinkWithId"`
	// Encrypts the snapshot using a customer-supplied encryption key. After you encrypt a snapshot using a customer-supplied key, you must provide the same key if you use the snapshot later. For example, you must provide the encryption key when you create a disk from the encrypted snapshot in a future request. Customer-supplied encryption keys do not protect access to metadata of the snapshot. If you do not provide an encryption key when creating the snapshot, then the snapshot will be encrypted using an automatically generated key and you do not need to provide a key to use the snapshot later.
	SnapshotEncryptionKey CustomerEncryptionKeyResponse `pulumi:"snapshotEncryptionKey"`
	// Indicates the type of the snapshot.
	SnapshotType string `pulumi:"snapshotType"`
	// The source disk used to create this snapshot.
	SourceDisk string `pulumi:"sourceDisk"`
	// The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
	SourceDiskEncryptionKey CustomerEncryptionKeyResponse `pulumi:"sourceDiskEncryptionKey"`
	// The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name.
	SourceDiskId string `pulumi:"sourceDiskId"`
	// The source instant snapshot used to create this snapshot. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instantSnapshots/instantSnapshot - projects/project/zones/zone/instantSnapshots/instantSnapshot - zones/zone/instantSnapshots/instantSnapshot
	SourceInstantSnapshot string `pulumi:"sourceInstantSnapshot"`
	// The unique ID of the instant snapshot used to create this snapshot. This value identifies the exact instant snapshot that was used to create this persistent disk. For example, if you created the persistent disk from an instant snapshot that was later deleted and recreated under the same name, the source instant snapshot ID would identify the exact instant snapshot that was used.
	SourceInstantSnapshotId string `pulumi:"sourceInstantSnapshotId"`
	// URL of the resource policy which created this scheduled snapshot.
	SourceSnapshotSchedulePolicy string `pulumi:"sourceSnapshotSchedulePolicy"`
	// ID of the resource policy which created this scheduled snapshot.
	SourceSnapshotSchedulePolicyId string `pulumi:"sourceSnapshotSchedulePolicyId"`
	// The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING.
	Status string `pulumi:"status"`
	// A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion.
	StorageBytes string `pulumi:"storageBytes"`
	// An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
	StorageBytesStatus string `pulumi:"storageBytesStatus"`
	// Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
	StorageLocations []string `pulumi:"storageLocations"`
	// A list of user provided licenses represented by a list of URLs to the license resource.
	UserLicenses []string `pulumi:"userLicenses"`
}

func LookupSnapshotOutput(ctx *pulumi.Context, args LookupSnapshotOutputArgs, opts ...pulumi.InvokeOption) LookupSnapshotResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSnapshotResult, error) {
			args := v.(LookupSnapshotArgs)
			r, err := LookupSnapshot(ctx, &args, opts...)
			var s LookupSnapshotResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSnapshotResultOutput)
}

type LookupSnapshotOutputArgs struct {
	Project  pulumi.StringPtrInput `pulumi:"project"`
	Snapshot pulumi.StringInput    `pulumi:"snapshot"`
}

func (LookupSnapshotOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnapshotArgs)(nil)).Elem()
}

type LookupSnapshotResultOutput struct{ *pulumi.OutputState }

func (LookupSnapshotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnapshotResult)(nil)).Elem()
}

func (o LookupSnapshotResultOutput) ToLookupSnapshotResultOutput() LookupSnapshotResultOutput {
	return o
}

func (o LookupSnapshotResultOutput) ToLookupSnapshotResultOutputWithContext(ctx context.Context) LookupSnapshotResultOutput {
	return o
}

// The architecture of the snapshot. Valid values are ARM64 or X86_64.
func (o LookupSnapshotResultOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.Architecture }).(pulumi.StringOutput)
}

// Set to true if snapshots are automatically created by applying resource policy on the target disk.
func (o LookupSnapshotResultOutput) AutoCreated() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnapshotResult) bool { return v.AutoCreated }).(pulumi.BoolOutput)
}

// Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters long and comply with RFC1035. This is an uncommon option only for advanced service owners who needs to create separate snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible only if it has a non-empty value.
func (o LookupSnapshotResultOutput) ChainName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.ChainName }).(pulumi.StringOutput)
}

// Size in bytes of the snapshot at creation time.
func (o LookupSnapshotResultOutput) CreationSizeBytes() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.CreationSizeBytes }).(pulumi.StringOutput)
}

// Creation timestamp in RFC3339 text format.
func (o LookupSnapshotResultOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o LookupSnapshotResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.Description }).(pulumi.StringOutput)
}

// Size of the source disk, specified in GB.
func (o LookupSnapshotResultOutput) DiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.DiskSizeGb }).(pulumi.StringOutput)
}

// Number of bytes downloaded to restore a snapshot to a disk.
func (o LookupSnapshotResultOutput) DownloadBytes() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.DownloadBytes }).(pulumi.StringOutput)
}

// [Input Only] Whether to attempt an application consistent snapshot by informing the OS to prepare for the snapshot process.
func (o LookupSnapshotResultOutput) GuestFlush() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnapshotResult) bool { return v.GuestFlush }).(pulumi.BoolOutput)
}

// A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
func (o LookupSnapshotResultOutput) GuestOsFeatures() GuestOsFeatureResponseArrayOutput {
	return o.ApplyT(func(v LookupSnapshotResult) []GuestOsFeatureResponse { return v.GuestOsFeatures }).(GuestOsFeatureResponseArrayOutput)
}

// Type of the resource. Always compute#snapshot for Snapshot resources.
func (o LookupSnapshotResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.Kind }).(pulumi.StringOutput)
}

// A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a snapshot.
func (o LookupSnapshotResultOutput) LabelFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.LabelFingerprint }).(pulumi.StringOutput)
}

// Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty.
func (o LookupSnapshotResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSnapshotResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Integer license codes indicating which licenses are attached to this snapshot.
func (o LookupSnapshotResultOutput) LicenseCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSnapshotResult) []string { return v.LicenseCodes }).(pulumi.StringArrayOutput)
}

// A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image).
func (o LookupSnapshotResultOutput) Licenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSnapshotResult) []string { return v.Licenses }).(pulumi.StringArrayOutput)
}

// An opaque location hint used to place the snapshot close to other resources. This field is for use by internal tools that use the public API.
func (o LookupSnapshotResultOutput) LocationHint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.LocationHint }).(pulumi.StringOutput)
}

// Number of days the snapshot should be retained before being deleted automatically.
func (o LookupSnapshotResultOutput) MaxRetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnapshotResult) int { return v.MaxRetentionDays }).(pulumi.IntOutput)
}

// Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o LookupSnapshotResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.Name }).(pulumi.StringOutput)
}

// Reserved for future use.
func (o LookupSnapshotResultOutput) SatisfiesPzs() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnapshotResult) bool { return v.SatisfiesPzs }).(pulumi.BoolOutput)
}

// Server-defined URL for the resource.
func (o LookupSnapshotResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

// Server-defined URL for this resource's resource id.
func (o LookupSnapshotResultOutput) SelfLinkWithId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.SelfLinkWithId }).(pulumi.StringOutput)
}

// Encrypts the snapshot using a customer-supplied encryption key. After you encrypt a snapshot using a customer-supplied key, you must provide the same key if you use the snapshot later. For example, you must provide the encryption key when you create a disk from the encrypted snapshot in a future request. Customer-supplied encryption keys do not protect access to metadata of the snapshot. If you do not provide an encryption key when creating the snapshot, then the snapshot will be encrypted using an automatically generated key and you do not need to provide a key to use the snapshot later.
func (o LookupSnapshotResultOutput) SnapshotEncryptionKey() CustomerEncryptionKeyResponseOutput {
	return o.ApplyT(func(v LookupSnapshotResult) CustomerEncryptionKeyResponse { return v.SnapshotEncryptionKey }).(CustomerEncryptionKeyResponseOutput)
}

// Indicates the type of the snapshot.
func (o LookupSnapshotResultOutput) SnapshotType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.SnapshotType }).(pulumi.StringOutput)
}

// The source disk used to create this snapshot.
func (o LookupSnapshotResultOutput) SourceDisk() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.SourceDisk }).(pulumi.StringOutput)
}

// The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
func (o LookupSnapshotResultOutput) SourceDiskEncryptionKey() CustomerEncryptionKeyResponseOutput {
	return o.ApplyT(func(v LookupSnapshotResult) CustomerEncryptionKeyResponse { return v.SourceDiskEncryptionKey }).(CustomerEncryptionKeyResponseOutput)
}

// The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name.
func (o LookupSnapshotResultOutput) SourceDiskId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.SourceDiskId }).(pulumi.StringOutput)
}

// The source instant snapshot used to create this snapshot. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instantSnapshots/instantSnapshot - projects/project/zones/zone/instantSnapshots/instantSnapshot - zones/zone/instantSnapshots/instantSnapshot
func (o LookupSnapshotResultOutput) SourceInstantSnapshot() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.SourceInstantSnapshot }).(pulumi.StringOutput)
}

// The unique ID of the instant snapshot used to create this snapshot. This value identifies the exact instant snapshot that was used to create this persistent disk. For example, if you created the persistent disk from an instant snapshot that was later deleted and recreated under the same name, the source instant snapshot ID would identify the exact instant snapshot that was used.
func (o LookupSnapshotResultOutput) SourceInstantSnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.SourceInstantSnapshotId }).(pulumi.StringOutput)
}

// URL of the resource policy which created this scheduled snapshot.
func (o LookupSnapshotResultOutput) SourceSnapshotSchedulePolicy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.SourceSnapshotSchedulePolicy }).(pulumi.StringOutput)
}

// ID of the resource policy which created this scheduled snapshot.
func (o LookupSnapshotResultOutput) SourceSnapshotSchedulePolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.SourceSnapshotSchedulePolicyId }).(pulumi.StringOutput)
}

// The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING.
func (o LookupSnapshotResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.Status }).(pulumi.StringOutput)
}

// A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion.
func (o LookupSnapshotResultOutput) StorageBytes() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.StorageBytes }).(pulumi.StringOutput)
}

// An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
func (o LookupSnapshotResultOutput) StorageBytesStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.StorageBytesStatus }).(pulumi.StringOutput)
}

// Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
func (o LookupSnapshotResultOutput) StorageLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSnapshotResult) []string { return v.StorageLocations }).(pulumi.StringArrayOutput)
}

// A list of user provided licenses represented by a list of URLs to the license resource.
func (o LookupSnapshotResultOutput) UserLicenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSnapshotResult) []string { return v.UserLicenses }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSnapshotResultOutput{})
}
