// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns the specified commitment resource. Gets a list of available commitments by making a list() request.
func LookupRegionCommitment(ctx *pulumi.Context, args *LookupRegionCommitmentArgs, opts ...pulumi.InvokeOption) (*LookupRegionCommitmentResult, error) {
	var rv LookupRegionCommitmentResult
	err := ctx.Invoke("google-native:compute/alpha:getRegionCommitment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRegionCommitmentArgs struct {
	Commitment string  `pulumi:"commitment"`
	Project    *string `pulumi:"project"`
	Region     string  `pulumi:"region"`
}

type LookupRegionCommitmentResult struct {
	// Specifies whether to enable automatic renewal for the commitment. The default value is false if not specified. The field can be updated until the day of the commitment expiration at 12:00am PST. If the field is set to true, the commitment will be automatically renewed for either one or three years according to the terms of the existing commitment.
	AutoRenew bool `pulumi:"autoRenew"`
	// The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in licenseResources. Note that only MACHINE commitments should have a Type specified.
	Category string `pulumi:"category"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp string `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description string `pulumi:"description"`
	// Commitment end time in RFC3339 text format.
	EndTimestamp string `pulumi:"endTimestamp"`
	// Type of the resource. Always compute#commitment for commitments.
	Kind string `pulumi:"kind"`
	// The license specification required as part of a license commitment.
	LicenseResource LicenseResourceCommitmentResponse `pulumi:"licenseResource"`
	// List of source commitments to be merged into a new commitment.
	MergeSourceCommitments []string `pulumi:"mergeSourceCommitments"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name string `pulumi:"name"`
	// The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
	Plan string `pulumi:"plan"`
	// URL of the region where this commitment may be used.
	Region string `pulumi:"region"`
	// List of reservations in this commitment.
	Reservations []ReservationResponse `pulumi:"reservations"`
	// A list of commitment amounts for particular resources. Note that VCPU and MEMORY resource commitments must occur together.
	Resources []ResourceCommitmentResponse `pulumi:"resources"`
	// Server-defined URL for the resource.
	SelfLink string `pulumi:"selfLink"`
	// Server-defined URL for this resource with the resource id.
	SelfLinkWithId string `pulumi:"selfLinkWithId"`
	// Source commitment to be splitted into a new commitment.
	SplitSourceCommitment string `pulumi:"splitSourceCommitment"`
	// Commitment start time in RFC3339 text format.
	StartTimestamp string `pulumi:"startTimestamp"`
	// Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT_YET_ACTIVE, ACTIVE, EXPIRED.
	Status string `pulumi:"status"`
	// An optional, human-readable explanation of the status.
	StatusMessage string `pulumi:"statusMessage"`
	// The type of commitment, which affects the discount rate and the eligible resources. Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized machines. Type ACCELERATOR_OPTIMIZED specifies a commitment that will only apply to accelerator optimized machines.
	Type string `pulumi:"type"`
}

func LookupRegionCommitmentOutput(ctx *pulumi.Context, args LookupRegionCommitmentOutputArgs, opts ...pulumi.InvokeOption) LookupRegionCommitmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRegionCommitmentResult, error) {
			args := v.(LookupRegionCommitmentArgs)
			r, err := LookupRegionCommitment(ctx, &args, opts...)
			var s LookupRegionCommitmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRegionCommitmentResultOutput)
}

type LookupRegionCommitmentOutputArgs struct {
	Commitment pulumi.StringInput    `pulumi:"commitment"`
	Project    pulumi.StringPtrInput `pulumi:"project"`
	Region     pulumi.StringInput    `pulumi:"region"`
}

func (LookupRegionCommitmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegionCommitmentArgs)(nil)).Elem()
}

type LookupRegionCommitmentResultOutput struct{ *pulumi.OutputState }

func (LookupRegionCommitmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegionCommitmentResult)(nil)).Elem()
}

func (o LookupRegionCommitmentResultOutput) ToLookupRegionCommitmentResultOutput() LookupRegionCommitmentResultOutput {
	return o
}

func (o LookupRegionCommitmentResultOutput) ToLookupRegionCommitmentResultOutputWithContext(ctx context.Context) LookupRegionCommitmentResultOutput {
	return o
}

// Specifies whether to enable automatic renewal for the commitment. The default value is false if not specified. The field can be updated until the day of the commitment expiration at 12:00am PST. If the field is set to true, the commitment will be automatically renewed for either one or three years according to the terms of the existing commitment.
func (o LookupRegionCommitmentResultOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in licenseResources. Note that only MACHINE commitments should have a Type specified.
func (o LookupRegionCommitmentResultOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) string { return v.Category }).(pulumi.StringOutput)
}

// Creation timestamp in RFC3339 text format.
func (o LookupRegionCommitmentResultOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) string { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o LookupRegionCommitmentResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) string { return v.Description }).(pulumi.StringOutput)
}

// Commitment end time in RFC3339 text format.
func (o LookupRegionCommitmentResultOutput) EndTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) string { return v.EndTimestamp }).(pulumi.StringOutput)
}

// Type of the resource. Always compute#commitment for commitments.
func (o LookupRegionCommitmentResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) string { return v.Kind }).(pulumi.StringOutput)
}

// The license specification required as part of a license commitment.
func (o LookupRegionCommitmentResultOutput) LicenseResource() LicenseResourceCommitmentResponseOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) LicenseResourceCommitmentResponse { return v.LicenseResource }).(LicenseResourceCommitmentResponseOutput)
}

// List of source commitments to be merged into a new commitment.
func (o LookupRegionCommitmentResultOutput) MergeSourceCommitments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) []string { return v.MergeSourceCommitments }).(pulumi.StringArrayOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o LookupRegionCommitmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) string { return v.Name }).(pulumi.StringOutput)
}

// The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years).
func (o LookupRegionCommitmentResultOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) string { return v.Plan }).(pulumi.StringOutput)
}

// URL of the region where this commitment may be used.
func (o LookupRegionCommitmentResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) string { return v.Region }).(pulumi.StringOutput)
}

// List of reservations in this commitment.
func (o LookupRegionCommitmentResultOutput) Reservations() ReservationResponseArrayOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) []ReservationResponse { return v.Reservations }).(ReservationResponseArrayOutput)
}

// A list of commitment amounts for particular resources. Note that VCPU and MEMORY resource commitments must occur together.
func (o LookupRegionCommitmentResultOutput) Resources() ResourceCommitmentResponseArrayOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) []ResourceCommitmentResponse { return v.Resources }).(ResourceCommitmentResponseArrayOutput)
}

// Server-defined URL for the resource.
func (o LookupRegionCommitmentResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

// Server-defined URL for this resource with the resource id.
func (o LookupRegionCommitmentResultOutput) SelfLinkWithId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) string { return v.SelfLinkWithId }).(pulumi.StringOutput)
}

// Source commitment to be splitted into a new commitment.
func (o LookupRegionCommitmentResultOutput) SplitSourceCommitment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) string { return v.SplitSourceCommitment }).(pulumi.StringOutput)
}

// Commitment start time in RFC3339 text format.
func (o LookupRegionCommitmentResultOutput) StartTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) string { return v.StartTimestamp }).(pulumi.StringOutput)
}

// Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT_YET_ACTIVE, ACTIVE, EXPIRED.
func (o LookupRegionCommitmentResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) string { return v.Status }).(pulumi.StringOutput)
}

// An optional, human-readable explanation of the status.
func (o LookupRegionCommitmentResultOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// The type of commitment, which affects the discount rate and the eligible resources. Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized machines. Type ACCELERATOR_OPTIMIZED specifies a commitment that will only apply to accelerator optimized machines.
func (o LookupRegionCommitmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionCommitmentResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegionCommitmentResultOutput{})
}
