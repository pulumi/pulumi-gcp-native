// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SecurityPolicyUserDefinedFieldResponse struct {
	// The base relative to which 'offset' is measured. Possible values are: - IPV4: Points to the beginning of the IPv4 header. - IPV6: Points to the beginning of the IPv6 header. - TCP: Points to the beginning of the TCP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments. - UDP: Points to the beginning of the UDP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments. required
	Base string `pulumi:"base"`
	// If specified, apply this mask (bitwise AND) to the field to ignore bits before matching. Encoded as a hexadecimal number (starting with "0x"). The last byte of the field (in network byte order) corresponds to the least significant byte of the mask.
	Mask string `pulumi:"mask"`
	// The name of this field. Must be unique within the policy.
	Name string `pulumi:"name"`
	// Offset of the first byte of the field (in network byte order) relative to 'base'.
	Offset int `pulumi:"offset"`
	// Size of the field in bytes. Valid values: 1-4.
	Size int `pulumi:"size"`
}

type SecurityPolicyUserDefinedFieldResponseOutput struct{ *pulumi.OutputState }

func (SecurityPolicyUserDefinedFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPolicyUserDefinedFieldResponse)(nil)).Elem()
}

func (o SecurityPolicyUserDefinedFieldResponseOutput) ToSecurityPolicyUserDefinedFieldResponseOutput() SecurityPolicyUserDefinedFieldResponseOutput {
	return o
}

func (o SecurityPolicyUserDefinedFieldResponseOutput) ToSecurityPolicyUserDefinedFieldResponseOutputWithContext(ctx context.Context) SecurityPolicyUserDefinedFieldResponseOutput {
	return o
}

// The base relative to which 'offset' is measured. Possible values are: - IPV4: Points to the beginning of the IPv4 header. - IPV6: Points to the beginning of the IPv6 header. - TCP: Points to the beginning of the TCP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments. - UDP: Points to the beginning of the UDP header, skipping over any IPv4 options or IPv6 extension headers. Not present for non-first fragments. required
func (o SecurityPolicyUserDefinedFieldResponseOutput) Base() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPolicyUserDefinedFieldResponse) string { return v.Base }).(pulumi.StringOutput)
}

// If specified, apply this mask (bitwise AND) to the field to ignore bits before matching. Encoded as a hexadecimal number (starting with "0x"). The last byte of the field (in network byte order) corresponds to the least significant byte of the mask.
func (o SecurityPolicyUserDefinedFieldResponseOutput) Mask() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPolicyUserDefinedFieldResponse) string { return v.Mask }).(pulumi.StringOutput)
}

// The name of this field. Must be unique within the policy.
func (o SecurityPolicyUserDefinedFieldResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPolicyUserDefinedFieldResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Offset of the first byte of the field (in network byte order) relative to 'base'.
func (o SecurityPolicyUserDefinedFieldResponseOutput) Offset() pulumi.IntOutput {
	return o.ApplyT(func(v SecurityPolicyUserDefinedFieldResponse) int { return v.Offset }).(pulumi.IntOutput)
}

// Size of the field in bytes. Valid values: 1-4.
func (o SecurityPolicyUserDefinedFieldResponseOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v SecurityPolicyUserDefinedFieldResponse) int { return v.Size }).(pulumi.IntOutput)
}

type SecurityPolicyUserDefinedFieldResponseArrayOutput struct{ *pulumi.OutputState }

func (SecurityPolicyUserDefinedFieldResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityPolicyUserDefinedFieldResponse)(nil)).Elem()
}

func (o SecurityPolicyUserDefinedFieldResponseArrayOutput) ToSecurityPolicyUserDefinedFieldResponseArrayOutput() SecurityPolicyUserDefinedFieldResponseArrayOutput {
	return o
}

func (o SecurityPolicyUserDefinedFieldResponseArrayOutput) ToSecurityPolicyUserDefinedFieldResponseArrayOutputWithContext(ctx context.Context) SecurityPolicyUserDefinedFieldResponseArrayOutput {
	return o
}

func (o SecurityPolicyUserDefinedFieldResponseArrayOutput) Index(i pulumi.IntInput) SecurityPolicyUserDefinedFieldResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityPolicyUserDefinedFieldResponse {
		return vs[0].([]SecurityPolicyUserDefinedFieldResponse)[vs[1].(int)]
	}).(SecurityPolicyUserDefinedFieldResponseOutput)
}

// The authentication and authorization settings for a BackendService.
type SecuritySettings struct {
	// [Deprecated] Use clientTlsPolicy instead.
	//
	// Deprecated: [Deprecated] Use clientTlsPolicy instead.
	Authentication *string `pulumi:"authentication"`
	// [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
	//
	// Deprecated: [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
	AuthenticationPolicy *AuthenticationPolicy `pulumi:"authenticationPolicy"`
	// [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
	//
	// Deprecated: [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
	AuthorizationConfig *AuthorizationConfig `pulumi:"authorizationConfig"`
	// Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
	ClientTlsPolicy *string `pulumi:"clientTlsPolicy"`
	// [Deprecated] TLS Settings for the backend service.
	//
	// Deprecated: [Deprecated] TLS Settings for the backend service.
	ClientTlsSettings *ClientTlsSettings `pulumi:"clientTlsSettings"`
	// Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
	SubjectAltNames []string `pulumi:"subjectAltNames"`
}

// SecuritySettingsInput is an input type that accepts SecuritySettingsArgs and SecuritySettingsOutput values.
// You can construct a concrete instance of `SecuritySettingsInput` via:
//
//	SecuritySettingsArgs{...}
type SecuritySettingsInput interface {
	pulumi.Input

	ToSecuritySettingsOutput() SecuritySettingsOutput
	ToSecuritySettingsOutputWithContext(context.Context) SecuritySettingsOutput
}

// The authentication and authorization settings for a BackendService.
type SecuritySettingsArgs struct {
	// [Deprecated] Use clientTlsPolicy instead.
	//
	// Deprecated: [Deprecated] Use clientTlsPolicy instead.
	Authentication pulumi.StringPtrInput `pulumi:"authentication"`
	// [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
	//
	// Deprecated: [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
	AuthenticationPolicy AuthenticationPolicyPtrInput `pulumi:"authenticationPolicy"`
	// [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
	//
	// Deprecated: [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
	AuthorizationConfig AuthorizationConfigPtrInput `pulumi:"authorizationConfig"`
	// Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
	ClientTlsPolicy pulumi.StringPtrInput `pulumi:"clientTlsPolicy"`
	// [Deprecated] TLS Settings for the backend service.
	//
	// Deprecated: [Deprecated] TLS Settings for the backend service.
	ClientTlsSettings ClientTlsSettingsPtrInput `pulumi:"clientTlsSettings"`
	// Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
	SubjectAltNames pulumi.StringArrayInput `pulumi:"subjectAltNames"`
}

func (SecuritySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecuritySettings)(nil)).Elem()
}

func (i SecuritySettingsArgs) ToSecuritySettingsOutput() SecuritySettingsOutput {
	return i.ToSecuritySettingsOutputWithContext(context.Background())
}

func (i SecuritySettingsArgs) ToSecuritySettingsOutputWithContext(ctx context.Context) SecuritySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecuritySettingsOutput)
}

func (i SecuritySettingsArgs) ToSecuritySettingsPtrOutput() SecuritySettingsPtrOutput {
	return i.ToSecuritySettingsPtrOutputWithContext(context.Background())
}

func (i SecuritySettingsArgs) ToSecuritySettingsPtrOutputWithContext(ctx context.Context) SecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecuritySettingsOutput).ToSecuritySettingsPtrOutputWithContext(ctx)
}

// SecuritySettingsPtrInput is an input type that accepts SecuritySettingsArgs, SecuritySettingsPtr and SecuritySettingsPtrOutput values.
// You can construct a concrete instance of `SecuritySettingsPtrInput` via:
//
//	        SecuritySettingsArgs{...}
//
//	or:
//
//	        nil
type SecuritySettingsPtrInput interface {
	pulumi.Input

	ToSecuritySettingsPtrOutput() SecuritySettingsPtrOutput
	ToSecuritySettingsPtrOutputWithContext(context.Context) SecuritySettingsPtrOutput
}

type securitySettingsPtrType SecuritySettingsArgs

func SecuritySettingsPtr(v *SecuritySettingsArgs) SecuritySettingsPtrInput {
	return (*securitySettingsPtrType)(v)
}

func (*securitySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecuritySettings)(nil)).Elem()
}

func (i *securitySettingsPtrType) ToSecuritySettingsPtrOutput() SecuritySettingsPtrOutput {
	return i.ToSecuritySettingsPtrOutputWithContext(context.Background())
}

func (i *securitySettingsPtrType) ToSecuritySettingsPtrOutputWithContext(ctx context.Context) SecuritySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecuritySettingsPtrOutput)
}

// The authentication and authorization settings for a BackendService.
type SecuritySettingsOutput struct{ *pulumi.OutputState }

func (SecuritySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecuritySettings)(nil)).Elem()
}

func (o SecuritySettingsOutput) ToSecuritySettingsOutput() SecuritySettingsOutput {
	return o
}

func (o SecuritySettingsOutput) ToSecuritySettingsOutputWithContext(ctx context.Context) SecuritySettingsOutput {
	return o
}

func (o SecuritySettingsOutput) ToSecuritySettingsPtrOutput() SecuritySettingsPtrOutput {
	return o.ToSecuritySettingsPtrOutputWithContext(context.Background())
}

func (o SecuritySettingsOutput) ToSecuritySettingsPtrOutputWithContext(ctx context.Context) SecuritySettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecuritySettings) *SecuritySettings {
		return &v
	}).(SecuritySettingsPtrOutput)
}

// [Deprecated] Use clientTlsPolicy instead.
//
// Deprecated: [Deprecated] Use clientTlsPolicy instead.
func (o SecuritySettingsOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecuritySettings) *string { return v.Authentication }).(pulumi.StringPtrOutput)
}

// [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
//
// Deprecated: [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
func (o SecuritySettingsOutput) AuthenticationPolicy() AuthenticationPolicyPtrOutput {
	return o.ApplyT(func(v SecuritySettings) *AuthenticationPolicy { return v.AuthenticationPolicy }).(AuthenticationPolicyPtrOutput)
}

// [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
//
// Deprecated: [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
func (o SecuritySettingsOutput) AuthorizationConfig() AuthorizationConfigPtrOutput {
	return o.ApplyT(func(v SecuritySettings) *AuthorizationConfig { return v.AuthorizationConfig }).(AuthorizationConfigPtrOutput)
}

// Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
func (o SecuritySettingsOutput) ClientTlsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecuritySettings) *string { return v.ClientTlsPolicy }).(pulumi.StringPtrOutput)
}

// [Deprecated] TLS Settings for the backend service.
//
// Deprecated: [Deprecated] TLS Settings for the backend service.
func (o SecuritySettingsOutput) ClientTlsSettings() ClientTlsSettingsPtrOutput {
	return o.ApplyT(func(v SecuritySettings) *ClientTlsSettings { return v.ClientTlsSettings }).(ClientTlsSettingsPtrOutput)
}

// Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
func (o SecuritySettingsOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecuritySettings) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

type SecuritySettingsPtrOutput struct{ *pulumi.OutputState }

func (SecuritySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecuritySettings)(nil)).Elem()
}

func (o SecuritySettingsPtrOutput) ToSecuritySettingsPtrOutput() SecuritySettingsPtrOutput {
	return o
}

func (o SecuritySettingsPtrOutput) ToSecuritySettingsPtrOutputWithContext(ctx context.Context) SecuritySettingsPtrOutput {
	return o
}

func (o SecuritySettingsPtrOutput) Elem() SecuritySettingsOutput {
	return o.ApplyT(func(v *SecuritySettings) SecuritySettings {
		if v != nil {
			return *v
		}
		var ret SecuritySettings
		return ret
	}).(SecuritySettingsOutput)
}

// [Deprecated] Use clientTlsPolicy instead.
//
// Deprecated: [Deprecated] Use clientTlsPolicy instead.
func (o SecuritySettingsPtrOutput) Authentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecuritySettings) *string {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(pulumi.StringPtrOutput)
}

// [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
//
// Deprecated: [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
func (o SecuritySettingsPtrOutput) AuthenticationPolicy() AuthenticationPolicyPtrOutput {
	return o.ApplyT(func(v *SecuritySettings) *AuthenticationPolicy {
		if v == nil {
			return nil
		}
		return v.AuthenticationPolicy
	}).(AuthenticationPolicyPtrOutput)
}

// [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
//
// Deprecated: [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
func (o SecuritySettingsPtrOutput) AuthorizationConfig() AuthorizationConfigPtrOutput {
	return o.ApplyT(func(v *SecuritySettings) *AuthorizationConfig {
		if v == nil {
			return nil
		}
		return v.AuthorizationConfig
	}).(AuthorizationConfigPtrOutput)
}

// Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
func (o SecuritySettingsPtrOutput) ClientTlsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecuritySettings) *string {
		if v == nil {
			return nil
		}
		return v.ClientTlsPolicy
	}).(pulumi.StringPtrOutput)
}

// [Deprecated] TLS Settings for the backend service.
//
// Deprecated: [Deprecated] TLS Settings for the backend service.
func (o SecuritySettingsPtrOutput) ClientTlsSettings() ClientTlsSettingsPtrOutput {
	return o.ApplyT(func(v *SecuritySettings) *ClientTlsSettings {
		if v == nil {
			return nil
		}
		return v.ClientTlsSettings
	}).(ClientTlsSettingsPtrOutput)
}

// Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
func (o SecuritySettingsPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecuritySettings) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

// The authentication and authorization settings for a BackendService.
type SecuritySettingsResponse struct {
	// [Deprecated] Use clientTlsPolicy instead.
	//
	// Deprecated: [Deprecated] Use clientTlsPolicy instead.
	Authentication string `pulumi:"authentication"`
	// [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
	//
	// Deprecated: [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
	AuthenticationPolicy AuthenticationPolicyResponse `pulumi:"authenticationPolicy"`
	// [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
	//
	// Deprecated: [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
	AuthorizationConfig AuthorizationConfigResponse `pulumi:"authorizationConfig"`
	// Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
	ClientTlsPolicy string `pulumi:"clientTlsPolicy"`
	// [Deprecated] TLS Settings for the backend service.
	//
	// Deprecated: [Deprecated] TLS Settings for the backend service.
	ClientTlsSettings ClientTlsSettingsResponse `pulumi:"clientTlsSettings"`
	// Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
	SubjectAltNames []string `pulumi:"subjectAltNames"`
}

// The authentication and authorization settings for a BackendService.
type SecuritySettingsResponseOutput struct{ *pulumi.OutputState }

func (SecuritySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecuritySettingsResponse)(nil)).Elem()
}

func (o SecuritySettingsResponseOutput) ToSecuritySettingsResponseOutput() SecuritySettingsResponseOutput {
	return o
}

func (o SecuritySettingsResponseOutput) ToSecuritySettingsResponseOutputWithContext(ctx context.Context) SecuritySettingsResponseOutput {
	return o
}

// [Deprecated] Use clientTlsPolicy instead.
//
// Deprecated: [Deprecated] Use clientTlsPolicy instead.
func (o SecuritySettingsResponseOutput) Authentication() pulumi.StringOutput {
	return o.ApplyT(func(v SecuritySettingsResponse) string { return v.Authentication }).(pulumi.StringOutput)
}

// [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
//
// Deprecated: [Deprecated] Authentication policy defines what authentication methods can be accepted on backends, and if authenticated, which method/certificate will set the request principal. request principal.
func (o SecuritySettingsResponseOutput) AuthenticationPolicy() AuthenticationPolicyResponseOutput {
	return o.ApplyT(func(v SecuritySettingsResponse) AuthenticationPolicyResponse { return v.AuthenticationPolicy }).(AuthenticationPolicyResponseOutput)
}

// [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
//
// Deprecated: [Deprecated] Authorization config defines the Role Based Access Control (RBAC) config. Authorization config defines the Role Based Access Control (RBAC) config.
func (o SecuritySettingsResponseOutput) AuthorizationConfig() AuthorizationConfigResponseOutput {
	return o.ApplyT(func(v SecuritySettingsResponse) AuthorizationConfigResponse { return v.AuthorizationConfig }).(AuthorizationConfigResponseOutput)
}

// Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
func (o SecuritySettingsResponseOutput) ClientTlsPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v SecuritySettingsResponse) string { return v.ClientTlsPolicy }).(pulumi.StringOutput)
}

// [Deprecated] TLS Settings for the backend service.
//
// Deprecated: [Deprecated] TLS Settings for the backend service.
func (o SecuritySettingsResponseOutput) ClientTlsSettings() ClientTlsSettingsResponseOutput {
	return o.ApplyT(func(v SecuritySettingsResponse) ClientTlsSettingsResponse { return v.ClientTlsSettings }).(ClientTlsSettingsResponseOutput)
}

// Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
func (o SecuritySettingsResponseOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecuritySettingsResponse) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

type ServerBinding struct {
	Type *ServerBindingType `pulumi:"type"`
}

// ServerBindingInput is an input type that accepts ServerBindingArgs and ServerBindingOutput values.
// You can construct a concrete instance of `ServerBindingInput` via:
//
//	ServerBindingArgs{...}
type ServerBindingInput interface {
	pulumi.Input

	ToServerBindingOutput() ServerBindingOutput
	ToServerBindingOutputWithContext(context.Context) ServerBindingOutput
}

type ServerBindingArgs struct {
	Type ServerBindingTypePtrInput `pulumi:"type"`
}

func (ServerBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerBinding)(nil)).Elem()
}

func (i ServerBindingArgs) ToServerBindingOutput() ServerBindingOutput {
	return i.ToServerBindingOutputWithContext(context.Background())
}

func (i ServerBindingArgs) ToServerBindingOutputWithContext(ctx context.Context) ServerBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBindingOutput)
}

func (i ServerBindingArgs) ToServerBindingPtrOutput() ServerBindingPtrOutput {
	return i.ToServerBindingPtrOutputWithContext(context.Background())
}

func (i ServerBindingArgs) ToServerBindingPtrOutputWithContext(ctx context.Context) ServerBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBindingOutput).ToServerBindingPtrOutputWithContext(ctx)
}

// ServerBindingPtrInput is an input type that accepts ServerBindingArgs, ServerBindingPtr and ServerBindingPtrOutput values.
// You can construct a concrete instance of `ServerBindingPtrInput` via:
//
//	        ServerBindingArgs{...}
//
//	or:
//
//	        nil
type ServerBindingPtrInput interface {
	pulumi.Input

	ToServerBindingPtrOutput() ServerBindingPtrOutput
	ToServerBindingPtrOutputWithContext(context.Context) ServerBindingPtrOutput
}

type serverBindingPtrType ServerBindingArgs

func ServerBindingPtr(v *ServerBindingArgs) ServerBindingPtrInput {
	return (*serverBindingPtrType)(v)
}

func (*serverBindingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerBinding)(nil)).Elem()
}

func (i *serverBindingPtrType) ToServerBindingPtrOutput() ServerBindingPtrOutput {
	return i.ToServerBindingPtrOutputWithContext(context.Background())
}

func (i *serverBindingPtrType) ToServerBindingPtrOutputWithContext(ctx context.Context) ServerBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerBindingPtrOutput)
}

type ServerBindingOutput struct{ *pulumi.OutputState }

func (ServerBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerBinding)(nil)).Elem()
}

func (o ServerBindingOutput) ToServerBindingOutput() ServerBindingOutput {
	return o
}

func (o ServerBindingOutput) ToServerBindingOutputWithContext(ctx context.Context) ServerBindingOutput {
	return o
}

func (o ServerBindingOutput) ToServerBindingPtrOutput() ServerBindingPtrOutput {
	return o.ToServerBindingPtrOutputWithContext(context.Background())
}

func (o ServerBindingOutput) ToServerBindingPtrOutputWithContext(ctx context.Context) ServerBindingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerBinding) *ServerBinding {
		return &v
	}).(ServerBindingPtrOutput)
}

func (o ServerBindingOutput) Type() ServerBindingTypePtrOutput {
	return o.ApplyT(func(v ServerBinding) *ServerBindingType { return v.Type }).(ServerBindingTypePtrOutput)
}

type ServerBindingPtrOutput struct{ *pulumi.OutputState }

func (ServerBindingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerBinding)(nil)).Elem()
}

func (o ServerBindingPtrOutput) ToServerBindingPtrOutput() ServerBindingPtrOutput {
	return o
}

func (o ServerBindingPtrOutput) ToServerBindingPtrOutputWithContext(ctx context.Context) ServerBindingPtrOutput {
	return o
}

func (o ServerBindingPtrOutput) Elem() ServerBindingOutput {
	return o.ApplyT(func(v *ServerBinding) ServerBinding {
		if v != nil {
			return *v
		}
		var ret ServerBinding
		return ret
	}).(ServerBindingOutput)
}

func (o ServerBindingPtrOutput) Type() ServerBindingTypePtrOutput {
	return o.ApplyT(func(v *ServerBinding) *ServerBindingType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ServerBindingTypePtrOutput)
}

type ServerBindingResponse struct {
	Type string `pulumi:"type"`
}

type ServerBindingResponseOutput struct{ *pulumi.OutputState }

func (ServerBindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerBindingResponse)(nil)).Elem()
}

func (o ServerBindingResponseOutput) ToServerBindingResponseOutput() ServerBindingResponseOutput {
	return o
}

func (o ServerBindingResponseOutput) ToServerBindingResponseOutputWithContext(ctx context.Context) ServerBindingResponseOutput {
	return o
}

func (o ServerBindingResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServerBindingResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The TLS settings for the server.
type ServerTlsSettings struct {
	// Configures the mechanism to obtain security certificates and identity information.
	ProxyTlsContext *TlsContext `pulumi:"proxyTlsContext"`
	// A list of alternate names to verify the subject identity in the certificate presented by the client.
	SubjectAltNames []string `pulumi:"subjectAltNames"`
	// Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following: - SIMPLE Secure connections with standard TLS semantics. - MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication.
	TlsMode *ServerTlsSettingsTlsMode `pulumi:"tlsMode"`
}

// ServerTlsSettingsInput is an input type that accepts ServerTlsSettingsArgs and ServerTlsSettingsOutput values.
// You can construct a concrete instance of `ServerTlsSettingsInput` via:
//
//	ServerTlsSettingsArgs{...}
type ServerTlsSettingsInput interface {
	pulumi.Input

	ToServerTlsSettingsOutput() ServerTlsSettingsOutput
	ToServerTlsSettingsOutputWithContext(context.Context) ServerTlsSettingsOutput
}

// The TLS settings for the server.
type ServerTlsSettingsArgs struct {
	// Configures the mechanism to obtain security certificates and identity information.
	ProxyTlsContext TlsContextPtrInput `pulumi:"proxyTlsContext"`
	// A list of alternate names to verify the subject identity in the certificate presented by the client.
	SubjectAltNames pulumi.StringArrayInput `pulumi:"subjectAltNames"`
	// Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following: - SIMPLE Secure connections with standard TLS semantics. - MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication.
	TlsMode ServerTlsSettingsTlsModePtrInput `pulumi:"tlsMode"`
}

func (ServerTlsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsSettings)(nil)).Elem()
}

func (i ServerTlsSettingsArgs) ToServerTlsSettingsOutput() ServerTlsSettingsOutput {
	return i.ToServerTlsSettingsOutputWithContext(context.Background())
}

func (i ServerTlsSettingsArgs) ToServerTlsSettingsOutputWithContext(ctx context.Context) ServerTlsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsSettingsOutput)
}

func (i ServerTlsSettingsArgs) ToServerTlsSettingsPtrOutput() ServerTlsSettingsPtrOutput {
	return i.ToServerTlsSettingsPtrOutputWithContext(context.Background())
}

func (i ServerTlsSettingsArgs) ToServerTlsSettingsPtrOutputWithContext(ctx context.Context) ServerTlsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsSettingsOutput).ToServerTlsSettingsPtrOutputWithContext(ctx)
}

// ServerTlsSettingsPtrInput is an input type that accepts ServerTlsSettingsArgs, ServerTlsSettingsPtr and ServerTlsSettingsPtrOutput values.
// You can construct a concrete instance of `ServerTlsSettingsPtrInput` via:
//
//	        ServerTlsSettingsArgs{...}
//
//	or:
//
//	        nil
type ServerTlsSettingsPtrInput interface {
	pulumi.Input

	ToServerTlsSettingsPtrOutput() ServerTlsSettingsPtrOutput
	ToServerTlsSettingsPtrOutputWithContext(context.Context) ServerTlsSettingsPtrOutput
}

type serverTlsSettingsPtrType ServerTlsSettingsArgs

func ServerTlsSettingsPtr(v *ServerTlsSettingsArgs) ServerTlsSettingsPtrInput {
	return (*serverTlsSettingsPtrType)(v)
}

func (*serverTlsSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsSettings)(nil)).Elem()
}

func (i *serverTlsSettingsPtrType) ToServerTlsSettingsPtrOutput() ServerTlsSettingsPtrOutput {
	return i.ToServerTlsSettingsPtrOutputWithContext(context.Background())
}

func (i *serverTlsSettingsPtrType) ToServerTlsSettingsPtrOutputWithContext(ctx context.Context) ServerTlsSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsSettingsPtrOutput)
}

// The TLS settings for the server.
type ServerTlsSettingsOutput struct{ *pulumi.OutputState }

func (ServerTlsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsSettings)(nil)).Elem()
}

func (o ServerTlsSettingsOutput) ToServerTlsSettingsOutput() ServerTlsSettingsOutput {
	return o
}

func (o ServerTlsSettingsOutput) ToServerTlsSettingsOutputWithContext(ctx context.Context) ServerTlsSettingsOutput {
	return o
}

func (o ServerTlsSettingsOutput) ToServerTlsSettingsPtrOutput() ServerTlsSettingsPtrOutput {
	return o.ToServerTlsSettingsPtrOutputWithContext(context.Background())
}

func (o ServerTlsSettingsOutput) ToServerTlsSettingsPtrOutputWithContext(ctx context.Context) ServerTlsSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerTlsSettings) *ServerTlsSettings {
		return &v
	}).(ServerTlsSettingsPtrOutput)
}

// Configures the mechanism to obtain security certificates and identity information.
func (o ServerTlsSettingsOutput) ProxyTlsContext() TlsContextPtrOutput {
	return o.ApplyT(func(v ServerTlsSettings) *TlsContext { return v.ProxyTlsContext }).(TlsContextPtrOutput)
}

// A list of alternate names to verify the subject identity in the certificate presented by the client.
func (o ServerTlsSettingsOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerTlsSettings) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

// Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following: - SIMPLE Secure connections with standard TLS semantics. - MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication.
func (o ServerTlsSettingsOutput) TlsMode() ServerTlsSettingsTlsModePtrOutput {
	return o.ApplyT(func(v ServerTlsSettings) *ServerTlsSettingsTlsMode { return v.TlsMode }).(ServerTlsSettingsTlsModePtrOutput)
}

type ServerTlsSettingsPtrOutput struct{ *pulumi.OutputState }

func (ServerTlsSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsSettings)(nil)).Elem()
}

func (o ServerTlsSettingsPtrOutput) ToServerTlsSettingsPtrOutput() ServerTlsSettingsPtrOutput {
	return o
}

func (o ServerTlsSettingsPtrOutput) ToServerTlsSettingsPtrOutputWithContext(ctx context.Context) ServerTlsSettingsPtrOutput {
	return o
}

func (o ServerTlsSettingsPtrOutput) Elem() ServerTlsSettingsOutput {
	return o.ApplyT(func(v *ServerTlsSettings) ServerTlsSettings {
		if v != nil {
			return *v
		}
		var ret ServerTlsSettings
		return ret
	}).(ServerTlsSettingsOutput)
}

// Configures the mechanism to obtain security certificates and identity information.
func (o ServerTlsSettingsPtrOutput) ProxyTlsContext() TlsContextPtrOutput {
	return o.ApplyT(func(v *ServerTlsSettings) *TlsContext {
		if v == nil {
			return nil
		}
		return v.ProxyTlsContext
	}).(TlsContextPtrOutput)
}

// A list of alternate names to verify the subject identity in the certificate presented by the client.
func (o ServerTlsSettingsPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerTlsSettings) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

// Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following: - SIMPLE Secure connections with standard TLS semantics. - MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication.
func (o ServerTlsSettingsPtrOutput) TlsMode() ServerTlsSettingsTlsModePtrOutput {
	return o.ApplyT(func(v *ServerTlsSettings) *ServerTlsSettingsTlsMode {
		if v == nil {
			return nil
		}
		return v.TlsMode
	}).(ServerTlsSettingsTlsModePtrOutput)
}

// The TLS settings for the server.
type ServerTlsSettingsResponse struct {
	// Configures the mechanism to obtain security certificates and identity information.
	ProxyTlsContext TlsContextResponse `pulumi:"proxyTlsContext"`
	// A list of alternate names to verify the subject identity in the certificate presented by the client.
	SubjectAltNames []string `pulumi:"subjectAltNames"`
	// Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following: - SIMPLE Secure connections with standard TLS semantics. - MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication.
	TlsMode string `pulumi:"tlsMode"`
}

// The TLS settings for the server.
type ServerTlsSettingsResponseOutput struct{ *pulumi.OutputState }

func (ServerTlsSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerTlsSettingsResponse)(nil)).Elem()
}

func (o ServerTlsSettingsResponseOutput) ToServerTlsSettingsResponseOutput() ServerTlsSettingsResponseOutput {
	return o
}

func (o ServerTlsSettingsResponseOutput) ToServerTlsSettingsResponseOutputWithContext(ctx context.Context) ServerTlsSettingsResponseOutput {
	return o
}

// Configures the mechanism to obtain security certificates and identity information.
func (o ServerTlsSettingsResponseOutput) ProxyTlsContext() TlsContextResponseOutput {
	return o.ApplyT(func(v ServerTlsSettingsResponse) TlsContextResponse { return v.ProxyTlsContext }).(TlsContextResponseOutput)
}

// A list of alternate names to verify the subject identity in the certificate presented by the client.
func (o ServerTlsSettingsResponseOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerTlsSettingsResponse) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

// Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following: - SIMPLE Secure connections with standard TLS semantics. - MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication.
func (o ServerTlsSettingsResponseOutput) TlsMode() pulumi.StringOutput {
	return o.ApplyT(func(v ServerTlsSettingsResponse) string { return v.TlsMode }).(pulumi.StringOutput)
}

// A service account.
type ServiceAccount struct {
	// Email address of the service account.
	Email *string `pulumi:"email"`
	// The list of scopes to be made available for this service account.
	Scopes []string `pulumi:"scopes"`
}

// ServiceAccountInput is an input type that accepts ServiceAccountArgs and ServiceAccountOutput values.
// You can construct a concrete instance of `ServiceAccountInput` via:
//
//	ServiceAccountArgs{...}
type ServiceAccountInput interface {
	pulumi.Input

	ToServiceAccountOutput() ServiceAccountOutput
	ToServiceAccountOutputWithContext(context.Context) ServiceAccountOutput
}

// A service account.
type ServiceAccountArgs struct {
	// Email address of the service account.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// The list of scopes to be made available for this service account.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (ServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccount)(nil)).Elem()
}

func (i ServiceAccountArgs) ToServiceAccountOutput() ServiceAccountOutput {
	return i.ToServiceAccountOutputWithContext(context.Background())
}

func (i ServiceAccountArgs) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountOutput)
}

// ServiceAccountArrayInput is an input type that accepts ServiceAccountArray and ServiceAccountArrayOutput values.
// You can construct a concrete instance of `ServiceAccountArrayInput` via:
//
//	ServiceAccountArray{ ServiceAccountArgs{...} }
type ServiceAccountArrayInput interface {
	pulumi.Input

	ToServiceAccountArrayOutput() ServiceAccountArrayOutput
	ToServiceAccountArrayOutputWithContext(context.Context) ServiceAccountArrayOutput
}

type ServiceAccountArray []ServiceAccountInput

func (ServiceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccount)(nil)).Elem()
}

func (i ServiceAccountArray) ToServiceAccountArrayOutput() ServiceAccountArrayOutput {
	return i.ToServiceAccountArrayOutputWithContext(context.Background())
}

func (i ServiceAccountArray) ToServiceAccountArrayOutputWithContext(ctx context.Context) ServiceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountArrayOutput)
}

// A service account.
type ServiceAccountOutput struct{ *pulumi.OutputState }

func (ServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountOutput) ToServiceAccountOutput() ServiceAccountOutput {
	return o
}

func (o ServiceAccountOutput) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return o
}

// Email address of the service account.
func (o ServiceAccountOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccount) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The list of scopes to be made available for this service account.
func (o ServiceAccountOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAccount) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type ServiceAccountArrayOutput struct{ *pulumi.OutputState }

func (ServiceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountArrayOutput) ToServiceAccountArrayOutput() ServiceAccountArrayOutput {
	return o
}

func (o ServiceAccountArrayOutput) ToServiceAccountArrayOutputWithContext(ctx context.Context) ServiceAccountArrayOutput {
	return o
}

func (o ServiceAccountArrayOutput) Index(i pulumi.IntInput) ServiceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAccount {
		return vs[0].([]ServiceAccount)[vs[1].(int)]
	}).(ServiceAccountOutput)
}

// A service account.
type ServiceAccountResponse struct {
	// Email address of the service account.
	Email string `pulumi:"email"`
	// The list of scopes to be made available for this service account.
	Scopes []string `pulumi:"scopes"`
}

// A service account.
type ServiceAccountResponseOutput struct{ *pulumi.OutputState }

func (ServiceAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountResponse)(nil)).Elem()
}

func (o ServiceAccountResponseOutput) ToServiceAccountResponseOutput() ServiceAccountResponseOutput {
	return o
}

func (o ServiceAccountResponseOutput) ToServiceAccountResponseOutputWithContext(ctx context.Context) ServiceAccountResponseOutput {
	return o
}

// Email address of the service account.
func (o ServiceAccountResponseOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAccountResponse) string { return v.Email }).(pulumi.StringOutput)
}

// The list of scopes to be made available for this service account.
func (o ServiceAccountResponseOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAccountResponse) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type ServiceAccountResponseArrayOutput struct{ *pulumi.OutputState }

func (ServiceAccountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccountResponse)(nil)).Elem()
}

func (o ServiceAccountResponseArrayOutput) ToServiceAccountResponseArrayOutput() ServiceAccountResponseArrayOutput {
	return o
}

func (o ServiceAccountResponseArrayOutput) ToServiceAccountResponseArrayOutputWithContext(ctx context.Context) ServiceAccountResponseArrayOutput {
	return o
}

func (o ServiceAccountResponseArrayOutput) Index(i pulumi.IntInput) ServiceAccountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAccountResponse {
		return vs[0].([]ServiceAccountResponse)[vs[1].(int)]
	}).(ServiceAccountResponseOutput)
}

// [Output Only] A connection connected to this service attachment.
type ServiceAttachmentConnectedEndpointResponse struct {
	// The url of a connected endpoint.
	Endpoint string `pulumi:"endpoint"`
	// The PSC connection id of the connected endpoint.
	PscConnectionId string `pulumi:"pscConnectionId"`
	// The status of a connected endpoint to this service attachment.
	Status string `pulumi:"status"`
}

// [Output Only] A connection connected to this service attachment.
type ServiceAttachmentConnectedEndpointResponseOutput struct{ *pulumi.OutputState }

func (ServiceAttachmentConnectedEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAttachmentConnectedEndpointResponse)(nil)).Elem()
}

func (o ServiceAttachmentConnectedEndpointResponseOutput) ToServiceAttachmentConnectedEndpointResponseOutput() ServiceAttachmentConnectedEndpointResponseOutput {
	return o
}

func (o ServiceAttachmentConnectedEndpointResponseOutput) ToServiceAttachmentConnectedEndpointResponseOutputWithContext(ctx context.Context) ServiceAttachmentConnectedEndpointResponseOutput {
	return o
}

// The url of a connected endpoint.
func (o ServiceAttachmentConnectedEndpointResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAttachmentConnectedEndpointResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The PSC connection id of the connected endpoint.
func (o ServiceAttachmentConnectedEndpointResponseOutput) PscConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAttachmentConnectedEndpointResponse) string { return v.PscConnectionId }).(pulumi.StringOutput)
}

// The status of a connected endpoint to this service attachment.
func (o ServiceAttachmentConnectedEndpointResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAttachmentConnectedEndpointResponse) string { return v.Status }).(pulumi.StringOutput)
}

type ServiceAttachmentConnectedEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (ServiceAttachmentConnectedEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAttachmentConnectedEndpointResponse)(nil)).Elem()
}

func (o ServiceAttachmentConnectedEndpointResponseArrayOutput) ToServiceAttachmentConnectedEndpointResponseArrayOutput() ServiceAttachmentConnectedEndpointResponseArrayOutput {
	return o
}

func (o ServiceAttachmentConnectedEndpointResponseArrayOutput) ToServiceAttachmentConnectedEndpointResponseArrayOutputWithContext(ctx context.Context) ServiceAttachmentConnectedEndpointResponseArrayOutput {
	return o
}

func (o ServiceAttachmentConnectedEndpointResponseArrayOutput) Index(i pulumi.IntInput) ServiceAttachmentConnectedEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAttachmentConnectedEndpointResponse {
		return vs[0].([]ServiceAttachmentConnectedEndpointResponse)[vs[1].(int)]
	}).(ServiceAttachmentConnectedEndpointResponseOutput)
}

type ServiceAttachmentConsumerProjectLimit struct {
	// The value of the limit to set.
	ConnectionLimit *int `pulumi:"connectionLimit"`
	// The project id or number for the project to set the limit for.
	ProjectIdOrNum *string `pulumi:"projectIdOrNum"`
}

// ServiceAttachmentConsumerProjectLimitInput is an input type that accepts ServiceAttachmentConsumerProjectLimitArgs and ServiceAttachmentConsumerProjectLimitOutput values.
// You can construct a concrete instance of `ServiceAttachmentConsumerProjectLimitInput` via:
//
//	ServiceAttachmentConsumerProjectLimitArgs{...}
type ServiceAttachmentConsumerProjectLimitInput interface {
	pulumi.Input

	ToServiceAttachmentConsumerProjectLimitOutput() ServiceAttachmentConsumerProjectLimitOutput
	ToServiceAttachmentConsumerProjectLimitOutputWithContext(context.Context) ServiceAttachmentConsumerProjectLimitOutput
}

type ServiceAttachmentConsumerProjectLimitArgs struct {
	// The value of the limit to set.
	ConnectionLimit pulumi.IntPtrInput `pulumi:"connectionLimit"`
	// The project id or number for the project to set the limit for.
	ProjectIdOrNum pulumi.StringPtrInput `pulumi:"projectIdOrNum"`
}

func (ServiceAttachmentConsumerProjectLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAttachmentConsumerProjectLimit)(nil)).Elem()
}

func (i ServiceAttachmentConsumerProjectLimitArgs) ToServiceAttachmentConsumerProjectLimitOutput() ServiceAttachmentConsumerProjectLimitOutput {
	return i.ToServiceAttachmentConsumerProjectLimitOutputWithContext(context.Background())
}

func (i ServiceAttachmentConsumerProjectLimitArgs) ToServiceAttachmentConsumerProjectLimitOutputWithContext(ctx context.Context) ServiceAttachmentConsumerProjectLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAttachmentConsumerProjectLimitOutput)
}

// ServiceAttachmentConsumerProjectLimitArrayInput is an input type that accepts ServiceAttachmentConsumerProjectLimitArray and ServiceAttachmentConsumerProjectLimitArrayOutput values.
// You can construct a concrete instance of `ServiceAttachmentConsumerProjectLimitArrayInput` via:
//
//	ServiceAttachmentConsumerProjectLimitArray{ ServiceAttachmentConsumerProjectLimitArgs{...} }
type ServiceAttachmentConsumerProjectLimitArrayInput interface {
	pulumi.Input

	ToServiceAttachmentConsumerProjectLimitArrayOutput() ServiceAttachmentConsumerProjectLimitArrayOutput
	ToServiceAttachmentConsumerProjectLimitArrayOutputWithContext(context.Context) ServiceAttachmentConsumerProjectLimitArrayOutput
}

type ServiceAttachmentConsumerProjectLimitArray []ServiceAttachmentConsumerProjectLimitInput

func (ServiceAttachmentConsumerProjectLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAttachmentConsumerProjectLimit)(nil)).Elem()
}

func (i ServiceAttachmentConsumerProjectLimitArray) ToServiceAttachmentConsumerProjectLimitArrayOutput() ServiceAttachmentConsumerProjectLimitArrayOutput {
	return i.ToServiceAttachmentConsumerProjectLimitArrayOutputWithContext(context.Background())
}

func (i ServiceAttachmentConsumerProjectLimitArray) ToServiceAttachmentConsumerProjectLimitArrayOutputWithContext(ctx context.Context) ServiceAttachmentConsumerProjectLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAttachmentConsumerProjectLimitArrayOutput)
}

type ServiceAttachmentConsumerProjectLimitOutput struct{ *pulumi.OutputState }

func (ServiceAttachmentConsumerProjectLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAttachmentConsumerProjectLimit)(nil)).Elem()
}

func (o ServiceAttachmentConsumerProjectLimitOutput) ToServiceAttachmentConsumerProjectLimitOutput() ServiceAttachmentConsumerProjectLimitOutput {
	return o
}

func (o ServiceAttachmentConsumerProjectLimitOutput) ToServiceAttachmentConsumerProjectLimitOutputWithContext(ctx context.Context) ServiceAttachmentConsumerProjectLimitOutput {
	return o
}

// The value of the limit to set.
func (o ServiceAttachmentConsumerProjectLimitOutput) ConnectionLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceAttachmentConsumerProjectLimit) *int { return v.ConnectionLimit }).(pulumi.IntPtrOutput)
}

// The project id or number for the project to set the limit for.
func (o ServiceAttachmentConsumerProjectLimitOutput) ProjectIdOrNum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAttachmentConsumerProjectLimit) *string { return v.ProjectIdOrNum }).(pulumi.StringPtrOutput)
}

type ServiceAttachmentConsumerProjectLimitArrayOutput struct{ *pulumi.OutputState }

func (ServiceAttachmentConsumerProjectLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAttachmentConsumerProjectLimit)(nil)).Elem()
}

func (o ServiceAttachmentConsumerProjectLimitArrayOutput) ToServiceAttachmentConsumerProjectLimitArrayOutput() ServiceAttachmentConsumerProjectLimitArrayOutput {
	return o
}

func (o ServiceAttachmentConsumerProjectLimitArrayOutput) ToServiceAttachmentConsumerProjectLimitArrayOutputWithContext(ctx context.Context) ServiceAttachmentConsumerProjectLimitArrayOutput {
	return o
}

func (o ServiceAttachmentConsumerProjectLimitArrayOutput) Index(i pulumi.IntInput) ServiceAttachmentConsumerProjectLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAttachmentConsumerProjectLimit {
		return vs[0].([]ServiceAttachmentConsumerProjectLimit)[vs[1].(int)]
	}).(ServiceAttachmentConsumerProjectLimitOutput)
}

type ServiceAttachmentConsumerProjectLimitResponse struct {
	// The value of the limit to set.
	ConnectionLimit int `pulumi:"connectionLimit"`
	// The project id or number for the project to set the limit for.
	ProjectIdOrNum string `pulumi:"projectIdOrNum"`
}

type ServiceAttachmentConsumerProjectLimitResponseOutput struct{ *pulumi.OutputState }

func (ServiceAttachmentConsumerProjectLimitResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAttachmentConsumerProjectLimitResponse)(nil)).Elem()
}

func (o ServiceAttachmentConsumerProjectLimitResponseOutput) ToServiceAttachmentConsumerProjectLimitResponseOutput() ServiceAttachmentConsumerProjectLimitResponseOutput {
	return o
}

func (o ServiceAttachmentConsumerProjectLimitResponseOutput) ToServiceAttachmentConsumerProjectLimitResponseOutputWithContext(ctx context.Context) ServiceAttachmentConsumerProjectLimitResponseOutput {
	return o
}

// The value of the limit to set.
func (o ServiceAttachmentConsumerProjectLimitResponseOutput) ConnectionLimit() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceAttachmentConsumerProjectLimitResponse) int { return v.ConnectionLimit }).(pulumi.IntOutput)
}

// The project id or number for the project to set the limit for.
func (o ServiceAttachmentConsumerProjectLimitResponseOutput) ProjectIdOrNum() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAttachmentConsumerProjectLimitResponse) string { return v.ProjectIdOrNum }).(pulumi.StringOutput)
}

type ServiceAttachmentConsumerProjectLimitResponseArrayOutput struct{ *pulumi.OutputState }

func (ServiceAttachmentConsumerProjectLimitResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAttachmentConsumerProjectLimitResponse)(nil)).Elem()
}

func (o ServiceAttachmentConsumerProjectLimitResponseArrayOutput) ToServiceAttachmentConsumerProjectLimitResponseArrayOutput() ServiceAttachmentConsumerProjectLimitResponseArrayOutput {
	return o
}

func (o ServiceAttachmentConsumerProjectLimitResponseArrayOutput) ToServiceAttachmentConsumerProjectLimitResponseArrayOutputWithContext(ctx context.Context) ServiceAttachmentConsumerProjectLimitResponseArrayOutput {
	return o
}

func (o ServiceAttachmentConsumerProjectLimitResponseArrayOutput) Index(i pulumi.IntInput) ServiceAttachmentConsumerProjectLimitResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAttachmentConsumerProjectLimitResponse {
		return vs[0].([]ServiceAttachmentConsumerProjectLimitResponse)[vs[1].(int)]
	}).(ServiceAttachmentConsumerProjectLimitResponseOutput)
}

// The share setting for reservations and sole tenancy node groups.
type ShareSettings struct {
	// A map of folder id and folder config to specify consumer projects for this shared-reservation. This is only valid when share_type's value is DIRECT_PROJECTS_UNDER_SPECIFIC_FOLDERS. Folder id should be a string of number, and without "folders/" prefix.
	FolderMap map[string]string `pulumi:"folderMap"`
	// A map of project id and project config. This is only valid when share_type's value is SPECIFIC_PROJECTS.
	ProjectMap map[string]string `pulumi:"projectMap"`
	// A List of Project names to specify consumer projects for this shared-reservation. This is only valid when share_type's value is SPECIFIC_PROJECTS.
	Projects []string `pulumi:"projects"`
	// Type of sharing for this shared-reservation
	ShareType *ShareSettingsShareType `pulumi:"shareType"`
}

// ShareSettingsInput is an input type that accepts ShareSettingsArgs and ShareSettingsOutput values.
// You can construct a concrete instance of `ShareSettingsInput` via:
//
//	ShareSettingsArgs{...}
type ShareSettingsInput interface {
	pulumi.Input

	ToShareSettingsOutput() ShareSettingsOutput
	ToShareSettingsOutputWithContext(context.Context) ShareSettingsOutput
}

// The share setting for reservations and sole tenancy node groups.
type ShareSettingsArgs struct {
	// A map of folder id and folder config to specify consumer projects for this shared-reservation. This is only valid when share_type's value is DIRECT_PROJECTS_UNDER_SPECIFIC_FOLDERS. Folder id should be a string of number, and without "folders/" prefix.
	FolderMap pulumi.StringMapInput `pulumi:"folderMap"`
	// A map of project id and project config. This is only valid when share_type's value is SPECIFIC_PROJECTS.
	ProjectMap pulumi.StringMapInput `pulumi:"projectMap"`
	// A List of Project names to specify consumer projects for this shared-reservation. This is only valid when share_type's value is SPECIFIC_PROJECTS.
	Projects pulumi.StringArrayInput `pulumi:"projects"`
	// Type of sharing for this shared-reservation
	ShareType ShareSettingsShareTypePtrInput `pulumi:"shareType"`
}

func (ShareSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareSettings)(nil)).Elem()
}

func (i ShareSettingsArgs) ToShareSettingsOutput() ShareSettingsOutput {
	return i.ToShareSettingsOutputWithContext(context.Background())
}

func (i ShareSettingsArgs) ToShareSettingsOutputWithContext(ctx context.Context) ShareSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareSettingsOutput)
}

func (i ShareSettingsArgs) ToShareSettingsPtrOutput() ShareSettingsPtrOutput {
	return i.ToShareSettingsPtrOutputWithContext(context.Background())
}

func (i ShareSettingsArgs) ToShareSettingsPtrOutputWithContext(ctx context.Context) ShareSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareSettingsOutput).ToShareSettingsPtrOutputWithContext(ctx)
}

// ShareSettingsPtrInput is an input type that accepts ShareSettingsArgs, ShareSettingsPtr and ShareSettingsPtrOutput values.
// You can construct a concrete instance of `ShareSettingsPtrInput` via:
//
//	        ShareSettingsArgs{...}
//
//	or:
//
//	        nil
type ShareSettingsPtrInput interface {
	pulumi.Input

	ToShareSettingsPtrOutput() ShareSettingsPtrOutput
	ToShareSettingsPtrOutputWithContext(context.Context) ShareSettingsPtrOutput
}

type shareSettingsPtrType ShareSettingsArgs

func ShareSettingsPtr(v *ShareSettingsArgs) ShareSettingsPtrInput {
	return (*shareSettingsPtrType)(v)
}

func (*shareSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShareSettings)(nil)).Elem()
}

func (i *shareSettingsPtrType) ToShareSettingsPtrOutput() ShareSettingsPtrOutput {
	return i.ToShareSettingsPtrOutputWithContext(context.Background())
}

func (i *shareSettingsPtrType) ToShareSettingsPtrOutputWithContext(ctx context.Context) ShareSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareSettingsPtrOutput)
}

// The share setting for reservations and sole tenancy node groups.
type ShareSettingsOutput struct{ *pulumi.OutputState }

func (ShareSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareSettings)(nil)).Elem()
}

func (o ShareSettingsOutput) ToShareSettingsOutput() ShareSettingsOutput {
	return o
}

func (o ShareSettingsOutput) ToShareSettingsOutputWithContext(ctx context.Context) ShareSettingsOutput {
	return o
}

func (o ShareSettingsOutput) ToShareSettingsPtrOutput() ShareSettingsPtrOutput {
	return o.ToShareSettingsPtrOutputWithContext(context.Background())
}

func (o ShareSettingsOutput) ToShareSettingsPtrOutputWithContext(ctx context.Context) ShareSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ShareSettings) *ShareSettings {
		return &v
	}).(ShareSettingsPtrOutput)
}

// A map of folder id and folder config to specify consumer projects for this shared-reservation. This is only valid when share_type's value is DIRECT_PROJECTS_UNDER_SPECIFIC_FOLDERS. Folder id should be a string of number, and without "folders/" prefix.
func (o ShareSettingsOutput) FolderMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v ShareSettings) map[string]string { return v.FolderMap }).(pulumi.StringMapOutput)
}

// A map of project id and project config. This is only valid when share_type's value is SPECIFIC_PROJECTS.
func (o ShareSettingsOutput) ProjectMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v ShareSettings) map[string]string { return v.ProjectMap }).(pulumi.StringMapOutput)
}

// A List of Project names to specify consumer projects for this shared-reservation. This is only valid when share_type's value is SPECIFIC_PROJECTS.
func (o ShareSettingsOutput) Projects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ShareSettings) []string { return v.Projects }).(pulumi.StringArrayOutput)
}

// Type of sharing for this shared-reservation
func (o ShareSettingsOutput) ShareType() ShareSettingsShareTypePtrOutput {
	return o.ApplyT(func(v ShareSettings) *ShareSettingsShareType { return v.ShareType }).(ShareSettingsShareTypePtrOutput)
}

type ShareSettingsPtrOutput struct{ *pulumi.OutputState }

func (ShareSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShareSettings)(nil)).Elem()
}

func (o ShareSettingsPtrOutput) ToShareSettingsPtrOutput() ShareSettingsPtrOutput {
	return o
}

func (o ShareSettingsPtrOutput) ToShareSettingsPtrOutputWithContext(ctx context.Context) ShareSettingsPtrOutput {
	return o
}

func (o ShareSettingsPtrOutput) Elem() ShareSettingsOutput {
	return o.ApplyT(func(v *ShareSettings) ShareSettings {
		if v != nil {
			return *v
		}
		var ret ShareSettings
		return ret
	}).(ShareSettingsOutput)
}

// A map of folder id and folder config to specify consumer projects for this shared-reservation. This is only valid when share_type's value is DIRECT_PROJECTS_UNDER_SPECIFIC_FOLDERS. Folder id should be a string of number, and without "folders/" prefix.
func (o ShareSettingsPtrOutput) FolderMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ShareSettings) map[string]string {
		if v == nil {
			return nil
		}
		return v.FolderMap
	}).(pulumi.StringMapOutput)
}

// A map of project id and project config. This is only valid when share_type's value is SPECIFIC_PROJECTS.
func (o ShareSettingsPtrOutput) ProjectMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ShareSettings) map[string]string {
		if v == nil {
			return nil
		}
		return v.ProjectMap
	}).(pulumi.StringMapOutput)
}

// A List of Project names to specify consumer projects for this shared-reservation. This is only valid when share_type's value is SPECIFIC_PROJECTS.
func (o ShareSettingsPtrOutput) Projects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ShareSettings) []string {
		if v == nil {
			return nil
		}
		return v.Projects
	}).(pulumi.StringArrayOutput)
}

// Type of sharing for this shared-reservation
func (o ShareSettingsPtrOutput) ShareType() ShareSettingsShareTypePtrOutput {
	return o.ApplyT(func(v *ShareSettings) *ShareSettingsShareType {
		if v == nil {
			return nil
		}
		return v.ShareType
	}).(ShareSettingsShareTypePtrOutput)
}

// The share setting for reservations and sole tenancy node groups.
type ShareSettingsResponse struct {
	// A map of folder id and folder config to specify consumer projects for this shared-reservation. This is only valid when share_type's value is DIRECT_PROJECTS_UNDER_SPECIFIC_FOLDERS. Folder id should be a string of number, and without "folders/" prefix.
	FolderMap map[string]string `pulumi:"folderMap"`
	// A map of project id and project config. This is only valid when share_type's value is SPECIFIC_PROJECTS.
	ProjectMap map[string]string `pulumi:"projectMap"`
	// A List of Project names to specify consumer projects for this shared-reservation. This is only valid when share_type's value is SPECIFIC_PROJECTS.
	Projects []string `pulumi:"projects"`
	// Type of sharing for this shared-reservation
	ShareType string `pulumi:"shareType"`
}

// The share setting for reservations and sole tenancy node groups.
type ShareSettingsResponseOutput struct{ *pulumi.OutputState }

func (ShareSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShareSettingsResponse)(nil)).Elem()
}

func (o ShareSettingsResponseOutput) ToShareSettingsResponseOutput() ShareSettingsResponseOutput {
	return o
}

func (o ShareSettingsResponseOutput) ToShareSettingsResponseOutputWithContext(ctx context.Context) ShareSettingsResponseOutput {
	return o
}

// A map of folder id and folder config to specify consumer projects for this shared-reservation. This is only valid when share_type's value is DIRECT_PROJECTS_UNDER_SPECIFIC_FOLDERS. Folder id should be a string of number, and without "folders/" prefix.
func (o ShareSettingsResponseOutput) FolderMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v ShareSettingsResponse) map[string]string { return v.FolderMap }).(pulumi.StringMapOutput)
}

// A map of project id and project config. This is only valid when share_type's value is SPECIFIC_PROJECTS.
func (o ShareSettingsResponseOutput) ProjectMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v ShareSettingsResponse) map[string]string { return v.ProjectMap }).(pulumi.StringMapOutput)
}

// A List of Project names to specify consumer projects for this shared-reservation. This is only valid when share_type's value is SPECIFIC_PROJECTS.
func (o ShareSettingsResponseOutput) Projects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ShareSettingsResponse) []string { return v.Projects }).(pulumi.StringArrayOutput)
}

// Type of sharing for this shared-reservation
func (o ShareSettingsResponseOutput) ShareType() pulumi.StringOutput {
	return o.ApplyT(func(v ShareSettingsResponse) string { return v.ShareType }).(pulumi.StringOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfig struct {
	// Defines whether the instance has integrity monitoring enabled. Enabled by default.
	EnableIntegrityMonitoring *bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Disabled by default.
	EnableSecureBoot *bool `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm *bool `pulumi:"enableVtpm"`
}

// ShieldedInstanceConfigInput is an input type that accepts ShieldedInstanceConfigArgs and ShieldedInstanceConfigOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigInput` via:
//
//	ShieldedInstanceConfigArgs{...}
type ShieldedInstanceConfigInput interface {
	pulumi.Input

	ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput
	ToShieldedInstanceConfigOutputWithContext(context.Context) ShieldedInstanceConfigOutput
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigArgs struct {
	// Defines whether the instance has integrity monitoring enabled. Enabled by default.
	EnableIntegrityMonitoring pulumi.BoolPtrInput `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Disabled by default.
	EnableSecureBoot pulumi.BoolPtrInput `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm pulumi.BoolPtrInput `pulumi:"enableVtpm"`
}

func (ShieldedInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return i.ToShieldedInstanceConfigOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput)
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput).ToShieldedInstanceConfigPtrOutputWithContext(ctx)
}

// ShieldedInstanceConfigPtrInput is an input type that accepts ShieldedInstanceConfigArgs, ShieldedInstanceConfigPtr and ShieldedInstanceConfigPtrOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigPtrInput` via:
//
//	        ShieldedInstanceConfigArgs{...}
//
//	or:
//
//	        nil
type ShieldedInstanceConfigPtrInput interface {
	pulumi.Input

	ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput
	ToShieldedInstanceConfigPtrOutputWithContext(context.Context) ShieldedInstanceConfigPtrOutput
}

type shieldedInstanceConfigPtrType ShieldedInstanceConfigArgs

func ShieldedInstanceConfigPtr(v *ShieldedInstanceConfigArgs) ShieldedInstanceConfigPtrInput {
	return (*shieldedInstanceConfigPtrType)(v)
}

func (*shieldedInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigPtrOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ShieldedInstanceConfig) *ShieldedInstanceConfig {
		return &v
	}).(ShieldedInstanceConfigPtrOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enabled by default.
func (o ShieldedInstanceConfigOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Disabled by default.
func (o ShieldedInstanceConfigOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableVtpm }).(pulumi.BoolPtrOutput)
}

type ShieldedInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) Elem() ShieldedInstanceConfigOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) ShieldedInstanceConfig {
		if v != nil {
			return *v
		}
		var ret ShieldedInstanceConfig
		return ret
	}).(ShieldedInstanceConfigOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enabled by default.
func (o ShieldedInstanceConfigPtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Disabled by default.
func (o ShieldedInstanceConfigPtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigPtrOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVtpm
	}).(pulumi.BoolPtrOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigResponse struct {
	// Defines whether the instance has integrity monitoring enabled. Enabled by default.
	EnableIntegrityMonitoring bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Disabled by default.
	EnableSecureBoot bool `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm bool `pulumi:"enableVtpm"`
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigResponseOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponseOutput() ShieldedInstanceConfigResponseOutput {
	return o
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponseOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponseOutput {
	return o
}

// Defines whether the instance has integrity monitoring enabled. Enabled by default.
func (o ShieldedInstanceConfigResponseOutput) EnableIntegrityMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolOutput)
}

// Defines whether the instance has Secure Boot enabled. Disabled by default.
func (o ShieldedInstanceConfigResponseOutput) EnableSecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableSecureBoot }).(pulumi.BoolOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigResponseOutput) EnableVtpm() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableVtpm }).(pulumi.BoolOutput)
}

// The policy describes the baseline against which Instance boot integrity is measured.
type ShieldedInstanceIntegrityPolicy struct {
	// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
	UpdateAutoLearnPolicy *bool `pulumi:"updateAutoLearnPolicy"`
}

// ShieldedInstanceIntegrityPolicyInput is an input type that accepts ShieldedInstanceIntegrityPolicyArgs and ShieldedInstanceIntegrityPolicyOutput values.
// You can construct a concrete instance of `ShieldedInstanceIntegrityPolicyInput` via:
//
//	ShieldedInstanceIntegrityPolicyArgs{...}
type ShieldedInstanceIntegrityPolicyInput interface {
	pulumi.Input

	ToShieldedInstanceIntegrityPolicyOutput() ShieldedInstanceIntegrityPolicyOutput
	ToShieldedInstanceIntegrityPolicyOutputWithContext(context.Context) ShieldedInstanceIntegrityPolicyOutput
}

// The policy describes the baseline against which Instance boot integrity is measured.
type ShieldedInstanceIntegrityPolicyArgs struct {
	// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
	UpdateAutoLearnPolicy pulumi.BoolPtrInput `pulumi:"updateAutoLearnPolicy"`
}

func (ShieldedInstanceIntegrityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceIntegrityPolicy)(nil)).Elem()
}

func (i ShieldedInstanceIntegrityPolicyArgs) ToShieldedInstanceIntegrityPolicyOutput() ShieldedInstanceIntegrityPolicyOutput {
	return i.ToShieldedInstanceIntegrityPolicyOutputWithContext(context.Background())
}

func (i ShieldedInstanceIntegrityPolicyArgs) ToShieldedInstanceIntegrityPolicyOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceIntegrityPolicyOutput)
}

func (i ShieldedInstanceIntegrityPolicyArgs) ToShieldedInstanceIntegrityPolicyPtrOutput() ShieldedInstanceIntegrityPolicyPtrOutput {
	return i.ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(context.Background())
}

func (i ShieldedInstanceIntegrityPolicyArgs) ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceIntegrityPolicyOutput).ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(ctx)
}

// ShieldedInstanceIntegrityPolicyPtrInput is an input type that accepts ShieldedInstanceIntegrityPolicyArgs, ShieldedInstanceIntegrityPolicyPtr and ShieldedInstanceIntegrityPolicyPtrOutput values.
// You can construct a concrete instance of `ShieldedInstanceIntegrityPolicyPtrInput` via:
//
//	        ShieldedInstanceIntegrityPolicyArgs{...}
//
//	or:
//
//	        nil
type ShieldedInstanceIntegrityPolicyPtrInput interface {
	pulumi.Input

	ToShieldedInstanceIntegrityPolicyPtrOutput() ShieldedInstanceIntegrityPolicyPtrOutput
	ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(context.Context) ShieldedInstanceIntegrityPolicyPtrOutput
}

type shieldedInstanceIntegrityPolicyPtrType ShieldedInstanceIntegrityPolicyArgs

func ShieldedInstanceIntegrityPolicyPtr(v *ShieldedInstanceIntegrityPolicyArgs) ShieldedInstanceIntegrityPolicyPtrInput {
	return (*shieldedInstanceIntegrityPolicyPtrType)(v)
}

func (*shieldedInstanceIntegrityPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceIntegrityPolicy)(nil)).Elem()
}

func (i *shieldedInstanceIntegrityPolicyPtrType) ToShieldedInstanceIntegrityPolicyPtrOutput() ShieldedInstanceIntegrityPolicyPtrOutput {
	return i.ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(context.Background())
}

func (i *shieldedInstanceIntegrityPolicyPtrType) ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceIntegrityPolicyPtrOutput)
}

// The policy describes the baseline against which Instance boot integrity is measured.
type ShieldedInstanceIntegrityPolicyOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceIntegrityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceIntegrityPolicy)(nil)).Elem()
}

func (o ShieldedInstanceIntegrityPolicyOutput) ToShieldedInstanceIntegrityPolicyOutput() ShieldedInstanceIntegrityPolicyOutput {
	return o
}

func (o ShieldedInstanceIntegrityPolicyOutput) ToShieldedInstanceIntegrityPolicyOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyOutput {
	return o
}

func (o ShieldedInstanceIntegrityPolicyOutput) ToShieldedInstanceIntegrityPolicyPtrOutput() ShieldedInstanceIntegrityPolicyPtrOutput {
	return o.ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(context.Background())
}

func (o ShieldedInstanceIntegrityPolicyOutput) ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ShieldedInstanceIntegrityPolicy) *ShieldedInstanceIntegrityPolicy {
		return &v
	}).(ShieldedInstanceIntegrityPolicyPtrOutput)
}

// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
func (o ShieldedInstanceIntegrityPolicyOutput) UpdateAutoLearnPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceIntegrityPolicy) *bool { return v.UpdateAutoLearnPolicy }).(pulumi.BoolPtrOutput)
}

type ShieldedInstanceIntegrityPolicyPtrOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceIntegrityPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceIntegrityPolicy)(nil)).Elem()
}

func (o ShieldedInstanceIntegrityPolicyPtrOutput) ToShieldedInstanceIntegrityPolicyPtrOutput() ShieldedInstanceIntegrityPolicyPtrOutput {
	return o
}

func (o ShieldedInstanceIntegrityPolicyPtrOutput) ToShieldedInstanceIntegrityPolicyPtrOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyPtrOutput {
	return o
}

func (o ShieldedInstanceIntegrityPolicyPtrOutput) Elem() ShieldedInstanceIntegrityPolicyOutput {
	return o.ApplyT(func(v *ShieldedInstanceIntegrityPolicy) ShieldedInstanceIntegrityPolicy {
		if v != nil {
			return *v
		}
		var ret ShieldedInstanceIntegrityPolicy
		return ret
	}).(ShieldedInstanceIntegrityPolicyOutput)
}

// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
func (o ShieldedInstanceIntegrityPolicyPtrOutput) UpdateAutoLearnPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceIntegrityPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.UpdateAutoLearnPolicy
	}).(pulumi.BoolPtrOutput)
}

// The policy describes the baseline against which Instance boot integrity is measured.
type ShieldedInstanceIntegrityPolicyResponse struct {
	// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
	UpdateAutoLearnPolicy bool `pulumi:"updateAutoLearnPolicy"`
}

// The policy describes the baseline against which Instance boot integrity is measured.
type ShieldedInstanceIntegrityPolicyResponseOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceIntegrityPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceIntegrityPolicyResponse)(nil)).Elem()
}

func (o ShieldedInstanceIntegrityPolicyResponseOutput) ToShieldedInstanceIntegrityPolicyResponseOutput() ShieldedInstanceIntegrityPolicyResponseOutput {
	return o
}

func (o ShieldedInstanceIntegrityPolicyResponseOutput) ToShieldedInstanceIntegrityPolicyResponseOutputWithContext(ctx context.Context) ShieldedInstanceIntegrityPolicyResponseOutput {
	return o
}

// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
func (o ShieldedInstanceIntegrityPolicyResponseOutput) UpdateAutoLearnPolicy() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceIntegrityPolicyResponse) bool { return v.UpdateAutoLearnPolicy }).(pulumi.BoolOutput)
}

// A set of Shielded VM options.
type ShieldedVmConfig struct {
	// Defines whether the instance has integrity monitoring enabled.
	EnableIntegrityMonitoring *bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled.
	EnableSecureBoot *bool `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled.
	EnableVtpm *bool `pulumi:"enableVtpm"`
}

// ShieldedVmConfigInput is an input type that accepts ShieldedVmConfigArgs and ShieldedVmConfigOutput values.
// You can construct a concrete instance of `ShieldedVmConfigInput` via:
//
//	ShieldedVmConfigArgs{...}
type ShieldedVmConfigInput interface {
	pulumi.Input

	ToShieldedVmConfigOutput() ShieldedVmConfigOutput
	ToShieldedVmConfigOutputWithContext(context.Context) ShieldedVmConfigOutput
}

// A set of Shielded VM options.
type ShieldedVmConfigArgs struct {
	// Defines whether the instance has integrity monitoring enabled.
	EnableIntegrityMonitoring pulumi.BoolPtrInput `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled.
	EnableSecureBoot pulumi.BoolPtrInput `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled.
	EnableVtpm pulumi.BoolPtrInput `pulumi:"enableVtpm"`
}

func (ShieldedVmConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedVmConfig)(nil)).Elem()
}

func (i ShieldedVmConfigArgs) ToShieldedVmConfigOutput() ShieldedVmConfigOutput {
	return i.ToShieldedVmConfigOutputWithContext(context.Background())
}

func (i ShieldedVmConfigArgs) ToShieldedVmConfigOutputWithContext(ctx context.Context) ShieldedVmConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedVmConfigOutput)
}

func (i ShieldedVmConfigArgs) ToShieldedVmConfigPtrOutput() ShieldedVmConfigPtrOutput {
	return i.ToShieldedVmConfigPtrOutputWithContext(context.Background())
}

func (i ShieldedVmConfigArgs) ToShieldedVmConfigPtrOutputWithContext(ctx context.Context) ShieldedVmConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedVmConfigOutput).ToShieldedVmConfigPtrOutputWithContext(ctx)
}

// ShieldedVmConfigPtrInput is an input type that accepts ShieldedVmConfigArgs, ShieldedVmConfigPtr and ShieldedVmConfigPtrOutput values.
// You can construct a concrete instance of `ShieldedVmConfigPtrInput` via:
//
//	        ShieldedVmConfigArgs{...}
//
//	or:
//
//	        nil
type ShieldedVmConfigPtrInput interface {
	pulumi.Input

	ToShieldedVmConfigPtrOutput() ShieldedVmConfigPtrOutput
	ToShieldedVmConfigPtrOutputWithContext(context.Context) ShieldedVmConfigPtrOutput
}

type shieldedVmConfigPtrType ShieldedVmConfigArgs

func ShieldedVmConfigPtr(v *ShieldedVmConfigArgs) ShieldedVmConfigPtrInput {
	return (*shieldedVmConfigPtrType)(v)
}

func (*shieldedVmConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedVmConfig)(nil)).Elem()
}

func (i *shieldedVmConfigPtrType) ToShieldedVmConfigPtrOutput() ShieldedVmConfigPtrOutput {
	return i.ToShieldedVmConfigPtrOutputWithContext(context.Background())
}

func (i *shieldedVmConfigPtrType) ToShieldedVmConfigPtrOutputWithContext(ctx context.Context) ShieldedVmConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedVmConfigPtrOutput)
}

// A set of Shielded VM options.
type ShieldedVmConfigOutput struct{ *pulumi.OutputState }

func (ShieldedVmConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedVmConfig)(nil)).Elem()
}

func (o ShieldedVmConfigOutput) ToShieldedVmConfigOutput() ShieldedVmConfigOutput {
	return o
}

func (o ShieldedVmConfigOutput) ToShieldedVmConfigOutputWithContext(ctx context.Context) ShieldedVmConfigOutput {
	return o
}

func (o ShieldedVmConfigOutput) ToShieldedVmConfigPtrOutput() ShieldedVmConfigPtrOutput {
	return o.ToShieldedVmConfigPtrOutputWithContext(context.Background())
}

func (o ShieldedVmConfigOutput) ToShieldedVmConfigPtrOutputWithContext(ctx context.Context) ShieldedVmConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ShieldedVmConfig) *ShieldedVmConfig {
		return &v
	}).(ShieldedVmConfigPtrOutput)
}

// Defines whether the instance has integrity monitoring enabled.
func (o ShieldedVmConfigOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedVmConfig) *bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled.
func (o ShieldedVmConfigOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedVmConfig) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has the vTPM enabled.
func (o ShieldedVmConfigOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedVmConfig) *bool { return v.EnableVtpm }).(pulumi.BoolPtrOutput)
}

type ShieldedVmConfigPtrOutput struct{ *pulumi.OutputState }

func (ShieldedVmConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedVmConfig)(nil)).Elem()
}

func (o ShieldedVmConfigPtrOutput) ToShieldedVmConfigPtrOutput() ShieldedVmConfigPtrOutput {
	return o
}

func (o ShieldedVmConfigPtrOutput) ToShieldedVmConfigPtrOutputWithContext(ctx context.Context) ShieldedVmConfigPtrOutput {
	return o
}

func (o ShieldedVmConfigPtrOutput) Elem() ShieldedVmConfigOutput {
	return o.ApplyT(func(v *ShieldedVmConfig) ShieldedVmConfig {
		if v != nil {
			return *v
		}
		var ret ShieldedVmConfig
		return ret
	}).(ShieldedVmConfigOutput)
}

// Defines whether the instance has integrity monitoring enabled.
func (o ShieldedVmConfigPtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedVmConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled.
func (o ShieldedVmConfigPtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedVmConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has the vTPM enabled.
func (o ShieldedVmConfigPtrOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedVmConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVtpm
	}).(pulumi.BoolPtrOutput)
}

// A set of Shielded VM options.
type ShieldedVmConfigResponse struct {
	// Defines whether the instance has integrity monitoring enabled.
	EnableIntegrityMonitoring bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled.
	EnableSecureBoot bool `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled.
	EnableVtpm bool `pulumi:"enableVtpm"`
}

// A set of Shielded VM options.
type ShieldedVmConfigResponseOutput struct{ *pulumi.OutputState }

func (ShieldedVmConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedVmConfigResponse)(nil)).Elem()
}

func (o ShieldedVmConfigResponseOutput) ToShieldedVmConfigResponseOutput() ShieldedVmConfigResponseOutput {
	return o
}

func (o ShieldedVmConfigResponseOutput) ToShieldedVmConfigResponseOutputWithContext(ctx context.Context) ShieldedVmConfigResponseOutput {
	return o
}

// Defines whether the instance has integrity monitoring enabled.
func (o ShieldedVmConfigResponseOutput) EnableIntegrityMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedVmConfigResponse) bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolOutput)
}

// Defines whether the instance has Secure Boot enabled.
func (o ShieldedVmConfigResponseOutput) EnableSecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedVmConfigResponse) bool { return v.EnableSecureBoot }).(pulumi.BoolOutput)
}

// Defines whether the instance has the vTPM enabled.
func (o ShieldedVmConfigResponseOutput) EnableVtpm() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedVmConfigResponse) bool { return v.EnableVtpm }).(pulumi.BoolOutput)
}

// The policy describes the baseline against which VM instance boot integrity is measured.
type ShieldedVmIntegrityPolicy struct {
	// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
	UpdateAutoLearnPolicy *bool `pulumi:"updateAutoLearnPolicy"`
}

// ShieldedVmIntegrityPolicyInput is an input type that accepts ShieldedVmIntegrityPolicyArgs and ShieldedVmIntegrityPolicyOutput values.
// You can construct a concrete instance of `ShieldedVmIntegrityPolicyInput` via:
//
//	ShieldedVmIntegrityPolicyArgs{...}
type ShieldedVmIntegrityPolicyInput interface {
	pulumi.Input

	ToShieldedVmIntegrityPolicyOutput() ShieldedVmIntegrityPolicyOutput
	ToShieldedVmIntegrityPolicyOutputWithContext(context.Context) ShieldedVmIntegrityPolicyOutput
}

// The policy describes the baseline against which VM instance boot integrity is measured.
type ShieldedVmIntegrityPolicyArgs struct {
	// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
	UpdateAutoLearnPolicy pulumi.BoolPtrInput `pulumi:"updateAutoLearnPolicy"`
}

func (ShieldedVmIntegrityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedVmIntegrityPolicy)(nil)).Elem()
}

func (i ShieldedVmIntegrityPolicyArgs) ToShieldedVmIntegrityPolicyOutput() ShieldedVmIntegrityPolicyOutput {
	return i.ToShieldedVmIntegrityPolicyOutputWithContext(context.Background())
}

func (i ShieldedVmIntegrityPolicyArgs) ToShieldedVmIntegrityPolicyOutputWithContext(ctx context.Context) ShieldedVmIntegrityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedVmIntegrityPolicyOutput)
}

func (i ShieldedVmIntegrityPolicyArgs) ToShieldedVmIntegrityPolicyPtrOutput() ShieldedVmIntegrityPolicyPtrOutput {
	return i.ToShieldedVmIntegrityPolicyPtrOutputWithContext(context.Background())
}

func (i ShieldedVmIntegrityPolicyArgs) ToShieldedVmIntegrityPolicyPtrOutputWithContext(ctx context.Context) ShieldedVmIntegrityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedVmIntegrityPolicyOutput).ToShieldedVmIntegrityPolicyPtrOutputWithContext(ctx)
}

// ShieldedVmIntegrityPolicyPtrInput is an input type that accepts ShieldedVmIntegrityPolicyArgs, ShieldedVmIntegrityPolicyPtr and ShieldedVmIntegrityPolicyPtrOutput values.
// You can construct a concrete instance of `ShieldedVmIntegrityPolicyPtrInput` via:
//
//	        ShieldedVmIntegrityPolicyArgs{...}
//
//	or:
//
//	        nil
type ShieldedVmIntegrityPolicyPtrInput interface {
	pulumi.Input

	ToShieldedVmIntegrityPolicyPtrOutput() ShieldedVmIntegrityPolicyPtrOutput
	ToShieldedVmIntegrityPolicyPtrOutputWithContext(context.Context) ShieldedVmIntegrityPolicyPtrOutput
}

type shieldedVmIntegrityPolicyPtrType ShieldedVmIntegrityPolicyArgs

func ShieldedVmIntegrityPolicyPtr(v *ShieldedVmIntegrityPolicyArgs) ShieldedVmIntegrityPolicyPtrInput {
	return (*shieldedVmIntegrityPolicyPtrType)(v)
}

func (*shieldedVmIntegrityPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedVmIntegrityPolicy)(nil)).Elem()
}

func (i *shieldedVmIntegrityPolicyPtrType) ToShieldedVmIntegrityPolicyPtrOutput() ShieldedVmIntegrityPolicyPtrOutput {
	return i.ToShieldedVmIntegrityPolicyPtrOutputWithContext(context.Background())
}

func (i *shieldedVmIntegrityPolicyPtrType) ToShieldedVmIntegrityPolicyPtrOutputWithContext(ctx context.Context) ShieldedVmIntegrityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedVmIntegrityPolicyPtrOutput)
}

// The policy describes the baseline against which VM instance boot integrity is measured.
type ShieldedVmIntegrityPolicyOutput struct{ *pulumi.OutputState }

func (ShieldedVmIntegrityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedVmIntegrityPolicy)(nil)).Elem()
}

func (o ShieldedVmIntegrityPolicyOutput) ToShieldedVmIntegrityPolicyOutput() ShieldedVmIntegrityPolicyOutput {
	return o
}

func (o ShieldedVmIntegrityPolicyOutput) ToShieldedVmIntegrityPolicyOutputWithContext(ctx context.Context) ShieldedVmIntegrityPolicyOutput {
	return o
}

func (o ShieldedVmIntegrityPolicyOutput) ToShieldedVmIntegrityPolicyPtrOutput() ShieldedVmIntegrityPolicyPtrOutput {
	return o.ToShieldedVmIntegrityPolicyPtrOutputWithContext(context.Background())
}

func (o ShieldedVmIntegrityPolicyOutput) ToShieldedVmIntegrityPolicyPtrOutputWithContext(ctx context.Context) ShieldedVmIntegrityPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ShieldedVmIntegrityPolicy) *ShieldedVmIntegrityPolicy {
		return &v
	}).(ShieldedVmIntegrityPolicyPtrOutput)
}

// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
func (o ShieldedVmIntegrityPolicyOutput) UpdateAutoLearnPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedVmIntegrityPolicy) *bool { return v.UpdateAutoLearnPolicy }).(pulumi.BoolPtrOutput)
}

type ShieldedVmIntegrityPolicyPtrOutput struct{ *pulumi.OutputState }

func (ShieldedVmIntegrityPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedVmIntegrityPolicy)(nil)).Elem()
}

func (o ShieldedVmIntegrityPolicyPtrOutput) ToShieldedVmIntegrityPolicyPtrOutput() ShieldedVmIntegrityPolicyPtrOutput {
	return o
}

func (o ShieldedVmIntegrityPolicyPtrOutput) ToShieldedVmIntegrityPolicyPtrOutputWithContext(ctx context.Context) ShieldedVmIntegrityPolicyPtrOutput {
	return o
}

func (o ShieldedVmIntegrityPolicyPtrOutput) Elem() ShieldedVmIntegrityPolicyOutput {
	return o.ApplyT(func(v *ShieldedVmIntegrityPolicy) ShieldedVmIntegrityPolicy {
		if v != nil {
			return *v
		}
		var ret ShieldedVmIntegrityPolicy
		return ret
	}).(ShieldedVmIntegrityPolicyOutput)
}

// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
func (o ShieldedVmIntegrityPolicyPtrOutput) UpdateAutoLearnPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedVmIntegrityPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.UpdateAutoLearnPolicy
	}).(pulumi.BoolPtrOutput)
}

// The policy describes the baseline against which VM instance boot integrity is measured.
type ShieldedVmIntegrityPolicyResponse struct {
	// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
	UpdateAutoLearnPolicy bool `pulumi:"updateAutoLearnPolicy"`
}

// The policy describes the baseline against which VM instance boot integrity is measured.
type ShieldedVmIntegrityPolicyResponseOutput struct{ *pulumi.OutputState }

func (ShieldedVmIntegrityPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedVmIntegrityPolicyResponse)(nil)).Elem()
}

func (o ShieldedVmIntegrityPolicyResponseOutput) ToShieldedVmIntegrityPolicyResponseOutput() ShieldedVmIntegrityPolicyResponseOutput {
	return o
}

func (o ShieldedVmIntegrityPolicyResponseOutput) ToShieldedVmIntegrityPolicyResponseOutputWithContext(ctx context.Context) ShieldedVmIntegrityPolicyResponseOutput {
	return o
}

// Updates the integrity policy baseline using the measurements from the VM instance's most recent boot.
func (o ShieldedVmIntegrityPolicyResponseOutput) UpdateAutoLearnPolicy() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedVmIntegrityPolicyResponse) bool { return v.UpdateAutoLearnPolicy }).(pulumi.BoolOutput)
}

type SourceDiskEncryptionKey struct {
	// The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
	DiskEncryptionKey *CustomerEncryptionKey `pulumi:"diskEncryptionKey"`
	// URL of the disk attached to the source instance. This can be a full or valid partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk
	SourceDisk *string `pulumi:"sourceDisk"`
}

// SourceDiskEncryptionKeyInput is an input type that accepts SourceDiskEncryptionKeyArgs and SourceDiskEncryptionKeyOutput values.
// You can construct a concrete instance of `SourceDiskEncryptionKeyInput` via:
//
//	SourceDiskEncryptionKeyArgs{...}
type SourceDiskEncryptionKeyInput interface {
	pulumi.Input

	ToSourceDiskEncryptionKeyOutput() SourceDiskEncryptionKeyOutput
	ToSourceDiskEncryptionKeyOutputWithContext(context.Context) SourceDiskEncryptionKeyOutput
}

type SourceDiskEncryptionKeyArgs struct {
	// The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
	DiskEncryptionKey CustomerEncryptionKeyPtrInput `pulumi:"diskEncryptionKey"`
	// URL of the disk attached to the source instance. This can be a full or valid partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk
	SourceDisk pulumi.StringPtrInput `pulumi:"sourceDisk"`
}

func (SourceDiskEncryptionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceDiskEncryptionKey)(nil)).Elem()
}

func (i SourceDiskEncryptionKeyArgs) ToSourceDiskEncryptionKeyOutput() SourceDiskEncryptionKeyOutput {
	return i.ToSourceDiskEncryptionKeyOutputWithContext(context.Background())
}

func (i SourceDiskEncryptionKeyArgs) ToSourceDiskEncryptionKeyOutputWithContext(ctx context.Context) SourceDiskEncryptionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceDiskEncryptionKeyOutput)
}

// SourceDiskEncryptionKeyArrayInput is an input type that accepts SourceDiskEncryptionKeyArray and SourceDiskEncryptionKeyArrayOutput values.
// You can construct a concrete instance of `SourceDiskEncryptionKeyArrayInput` via:
//
//	SourceDiskEncryptionKeyArray{ SourceDiskEncryptionKeyArgs{...} }
type SourceDiskEncryptionKeyArrayInput interface {
	pulumi.Input

	ToSourceDiskEncryptionKeyArrayOutput() SourceDiskEncryptionKeyArrayOutput
	ToSourceDiskEncryptionKeyArrayOutputWithContext(context.Context) SourceDiskEncryptionKeyArrayOutput
}

type SourceDiskEncryptionKeyArray []SourceDiskEncryptionKeyInput

func (SourceDiskEncryptionKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceDiskEncryptionKey)(nil)).Elem()
}

func (i SourceDiskEncryptionKeyArray) ToSourceDiskEncryptionKeyArrayOutput() SourceDiskEncryptionKeyArrayOutput {
	return i.ToSourceDiskEncryptionKeyArrayOutputWithContext(context.Background())
}

func (i SourceDiskEncryptionKeyArray) ToSourceDiskEncryptionKeyArrayOutputWithContext(ctx context.Context) SourceDiskEncryptionKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceDiskEncryptionKeyArrayOutput)
}

type SourceDiskEncryptionKeyOutput struct{ *pulumi.OutputState }

func (SourceDiskEncryptionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceDiskEncryptionKey)(nil)).Elem()
}

func (o SourceDiskEncryptionKeyOutput) ToSourceDiskEncryptionKeyOutput() SourceDiskEncryptionKeyOutput {
	return o
}

func (o SourceDiskEncryptionKeyOutput) ToSourceDiskEncryptionKeyOutputWithContext(ctx context.Context) SourceDiskEncryptionKeyOutput {
	return o
}

// The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
func (o SourceDiskEncryptionKeyOutput) DiskEncryptionKey() CustomerEncryptionKeyPtrOutput {
	return o.ApplyT(func(v SourceDiskEncryptionKey) *CustomerEncryptionKey { return v.DiskEncryptionKey }).(CustomerEncryptionKeyPtrOutput)
}

// URL of the disk attached to the source instance. This can be a full or valid partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk
func (o SourceDiskEncryptionKeyOutput) SourceDisk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceDiskEncryptionKey) *string { return v.SourceDisk }).(pulumi.StringPtrOutput)
}

type SourceDiskEncryptionKeyArrayOutput struct{ *pulumi.OutputState }

func (SourceDiskEncryptionKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceDiskEncryptionKey)(nil)).Elem()
}

func (o SourceDiskEncryptionKeyArrayOutput) ToSourceDiskEncryptionKeyArrayOutput() SourceDiskEncryptionKeyArrayOutput {
	return o
}

func (o SourceDiskEncryptionKeyArrayOutput) ToSourceDiskEncryptionKeyArrayOutputWithContext(ctx context.Context) SourceDiskEncryptionKeyArrayOutput {
	return o
}

func (o SourceDiskEncryptionKeyArrayOutput) Index(i pulumi.IntInput) SourceDiskEncryptionKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceDiskEncryptionKey {
		return vs[0].([]SourceDiskEncryptionKey)[vs[1].(int)]
	}).(SourceDiskEncryptionKeyOutput)
}

type SourceDiskEncryptionKeyResponse struct {
	// The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
	DiskEncryptionKey CustomerEncryptionKeyResponse `pulumi:"diskEncryptionKey"`
	// URL of the disk attached to the source instance. This can be a full or valid partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk
	SourceDisk string `pulumi:"sourceDisk"`
}

type SourceDiskEncryptionKeyResponseOutput struct{ *pulumi.OutputState }

func (SourceDiskEncryptionKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceDiskEncryptionKeyResponse)(nil)).Elem()
}

func (o SourceDiskEncryptionKeyResponseOutput) ToSourceDiskEncryptionKeyResponseOutput() SourceDiskEncryptionKeyResponseOutput {
	return o
}

func (o SourceDiskEncryptionKeyResponseOutput) ToSourceDiskEncryptionKeyResponseOutputWithContext(ctx context.Context) SourceDiskEncryptionKeyResponseOutput {
	return o
}

// The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
func (o SourceDiskEncryptionKeyResponseOutput) DiskEncryptionKey() CustomerEncryptionKeyResponseOutput {
	return o.ApplyT(func(v SourceDiskEncryptionKeyResponse) CustomerEncryptionKeyResponse { return v.DiskEncryptionKey }).(CustomerEncryptionKeyResponseOutput)
}

// URL of the disk attached to the source instance. This can be a full or valid partial URL. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk
func (o SourceDiskEncryptionKeyResponseOutput) SourceDisk() pulumi.StringOutput {
	return o.ApplyT(func(v SourceDiskEncryptionKeyResponse) string { return v.SourceDisk }).(pulumi.StringOutput)
}

type SourceDiskEncryptionKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (SourceDiskEncryptionKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceDiskEncryptionKeyResponse)(nil)).Elem()
}

func (o SourceDiskEncryptionKeyResponseArrayOutput) ToSourceDiskEncryptionKeyResponseArrayOutput() SourceDiskEncryptionKeyResponseArrayOutput {
	return o
}

func (o SourceDiskEncryptionKeyResponseArrayOutput) ToSourceDiskEncryptionKeyResponseArrayOutputWithContext(ctx context.Context) SourceDiskEncryptionKeyResponseArrayOutput {
	return o
}

func (o SourceDiskEncryptionKeyResponseArrayOutput) Index(i pulumi.IntInput) SourceDiskEncryptionKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceDiskEncryptionKeyResponse {
		return vs[0].([]SourceDiskEncryptionKeyResponse)[vs[1].(int)]
	}).(SourceDiskEncryptionKeyResponseOutput)
}

// A specification of the parameters to use when creating the instance template from a source instance.
type SourceInstanceParams struct {
	// Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
	DiskConfigs []DiskInstantiationConfig `pulumi:"diskConfigs"`
}

// SourceInstanceParamsInput is an input type that accepts SourceInstanceParamsArgs and SourceInstanceParamsOutput values.
// You can construct a concrete instance of `SourceInstanceParamsInput` via:
//
//	SourceInstanceParamsArgs{...}
type SourceInstanceParamsInput interface {
	pulumi.Input

	ToSourceInstanceParamsOutput() SourceInstanceParamsOutput
	ToSourceInstanceParamsOutputWithContext(context.Context) SourceInstanceParamsOutput
}

// A specification of the parameters to use when creating the instance template from a source instance.
type SourceInstanceParamsArgs struct {
	// Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
	DiskConfigs DiskInstantiationConfigArrayInput `pulumi:"diskConfigs"`
}

func (SourceInstanceParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceInstanceParams)(nil)).Elem()
}

func (i SourceInstanceParamsArgs) ToSourceInstanceParamsOutput() SourceInstanceParamsOutput {
	return i.ToSourceInstanceParamsOutputWithContext(context.Background())
}

func (i SourceInstanceParamsArgs) ToSourceInstanceParamsOutputWithContext(ctx context.Context) SourceInstanceParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceInstanceParamsOutput)
}

func (i SourceInstanceParamsArgs) ToSourceInstanceParamsPtrOutput() SourceInstanceParamsPtrOutput {
	return i.ToSourceInstanceParamsPtrOutputWithContext(context.Background())
}

func (i SourceInstanceParamsArgs) ToSourceInstanceParamsPtrOutputWithContext(ctx context.Context) SourceInstanceParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceInstanceParamsOutput).ToSourceInstanceParamsPtrOutputWithContext(ctx)
}

// SourceInstanceParamsPtrInput is an input type that accepts SourceInstanceParamsArgs, SourceInstanceParamsPtr and SourceInstanceParamsPtrOutput values.
// You can construct a concrete instance of `SourceInstanceParamsPtrInput` via:
//
//	        SourceInstanceParamsArgs{...}
//
//	or:
//
//	        nil
type SourceInstanceParamsPtrInput interface {
	pulumi.Input

	ToSourceInstanceParamsPtrOutput() SourceInstanceParamsPtrOutput
	ToSourceInstanceParamsPtrOutputWithContext(context.Context) SourceInstanceParamsPtrOutput
}

type sourceInstanceParamsPtrType SourceInstanceParamsArgs

func SourceInstanceParamsPtr(v *SourceInstanceParamsArgs) SourceInstanceParamsPtrInput {
	return (*sourceInstanceParamsPtrType)(v)
}

func (*sourceInstanceParamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceInstanceParams)(nil)).Elem()
}

func (i *sourceInstanceParamsPtrType) ToSourceInstanceParamsPtrOutput() SourceInstanceParamsPtrOutput {
	return i.ToSourceInstanceParamsPtrOutputWithContext(context.Background())
}

func (i *sourceInstanceParamsPtrType) ToSourceInstanceParamsPtrOutputWithContext(ctx context.Context) SourceInstanceParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceInstanceParamsPtrOutput)
}

// A specification of the parameters to use when creating the instance template from a source instance.
type SourceInstanceParamsOutput struct{ *pulumi.OutputState }

func (SourceInstanceParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceInstanceParams)(nil)).Elem()
}

func (o SourceInstanceParamsOutput) ToSourceInstanceParamsOutput() SourceInstanceParamsOutput {
	return o
}

func (o SourceInstanceParamsOutput) ToSourceInstanceParamsOutputWithContext(ctx context.Context) SourceInstanceParamsOutput {
	return o
}

func (o SourceInstanceParamsOutput) ToSourceInstanceParamsPtrOutput() SourceInstanceParamsPtrOutput {
	return o.ToSourceInstanceParamsPtrOutputWithContext(context.Background())
}

func (o SourceInstanceParamsOutput) ToSourceInstanceParamsPtrOutputWithContext(ctx context.Context) SourceInstanceParamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceInstanceParams) *SourceInstanceParams {
		return &v
	}).(SourceInstanceParamsPtrOutput)
}

// Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
func (o SourceInstanceParamsOutput) DiskConfigs() DiskInstantiationConfigArrayOutput {
	return o.ApplyT(func(v SourceInstanceParams) []DiskInstantiationConfig { return v.DiskConfigs }).(DiskInstantiationConfigArrayOutput)
}

type SourceInstanceParamsPtrOutput struct{ *pulumi.OutputState }

func (SourceInstanceParamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceInstanceParams)(nil)).Elem()
}

func (o SourceInstanceParamsPtrOutput) ToSourceInstanceParamsPtrOutput() SourceInstanceParamsPtrOutput {
	return o
}

func (o SourceInstanceParamsPtrOutput) ToSourceInstanceParamsPtrOutputWithContext(ctx context.Context) SourceInstanceParamsPtrOutput {
	return o
}

func (o SourceInstanceParamsPtrOutput) Elem() SourceInstanceParamsOutput {
	return o.ApplyT(func(v *SourceInstanceParams) SourceInstanceParams {
		if v != nil {
			return *v
		}
		var ret SourceInstanceParams
		return ret
	}).(SourceInstanceParamsOutput)
}

// Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
func (o SourceInstanceParamsPtrOutput) DiskConfigs() DiskInstantiationConfigArrayOutput {
	return o.ApplyT(func(v *SourceInstanceParams) []DiskInstantiationConfig {
		if v == nil {
			return nil
		}
		return v.DiskConfigs
	}).(DiskInstantiationConfigArrayOutput)
}

// A specification of the parameters to use when creating the instance template from a source instance.
type SourceInstanceParamsResponse struct {
	// Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
	DiskConfigs []DiskInstantiationConfigResponse `pulumi:"diskConfigs"`
}

// A specification of the parameters to use when creating the instance template from a source instance.
type SourceInstanceParamsResponseOutput struct{ *pulumi.OutputState }

func (SourceInstanceParamsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceInstanceParamsResponse)(nil)).Elem()
}

func (o SourceInstanceParamsResponseOutput) ToSourceInstanceParamsResponseOutput() SourceInstanceParamsResponseOutput {
	return o
}

func (o SourceInstanceParamsResponseOutput) ToSourceInstanceParamsResponseOutputWithContext(ctx context.Context) SourceInstanceParamsResponseOutput {
	return o
}

// Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, new custom images will be created from each disk. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
func (o SourceInstanceParamsResponseOutput) DiskConfigs() DiskInstantiationConfigResponseArrayOutput {
	return o.ApplyT(func(v SourceInstanceParamsResponse) []DiskInstantiationConfigResponse { return v.DiskConfigs }).(DiskInstantiationConfigResponseArrayOutput)
}

// DEPRECATED: Please use compute#instanceProperties instead. New properties will not be added to this field.
type SourceInstancePropertiesResponse struct {
	// Enables instances created based on this machine image to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
	CanIpForward bool `pulumi:"canIpForward"`
	// Whether the instance created from this machine image should be protected against deletion.
	DeletionProtection bool `pulumi:"deletionProtection"`
	// An optional text description for the instances that are created from this machine image.
	Description string `pulumi:"description"`
	// An array of disks that are associated with the instances that are created from this machine image.
	Disks []SavedAttachedDiskResponse `pulumi:"disks"`
	// A list of guest accelerator cards' type and count to use for instances created from this machine image.
	GuestAccelerators []AcceleratorConfigResponse `pulumi:"guestAccelerators"`
	// KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified.
	KeyRevocationActionType string `pulumi:"keyRevocationActionType"`
	// Labels to apply to instances that are created from this machine image.
	Labels map[string]string `pulumi:"labels"`
	// The machine type to use for instances that are created from this machine image.
	MachineType string `pulumi:"machineType"`
	// The metadata key/value pairs to assign to instances that are created from this machine image. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
	Metadata MetadataResponse `pulumi:"metadata"`
	// Minimum cpu/platform to be used by instances created from this machine image. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform.
	MinCpuPlatform string `pulumi:"minCpuPlatform"`
	// An array of network access configurations for this interface.
	NetworkInterfaces []NetworkInterfaceResponse `pulumi:"networkInterfaces"`
	// PostKeyRevocationActionType of the instance.
	PostKeyRevocationActionType string `pulumi:"postKeyRevocationActionType"`
	// Specifies the scheduling options for the instances that are created from this machine image.
	Scheduling SchedulingResponse `pulumi:"scheduling"`
	// A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from this machine image. Use metadata queries to obtain the access tokens for these instances.
	ServiceAccounts []ServiceAccountResponse `pulumi:"serviceAccounts"`
	// A list of tags to apply to the instances that are created from this machine image. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
	Tags TagsResponse `pulumi:"tags"`
}

// DEPRECATED: Please use compute#instanceProperties instead. New properties will not be added to this field.
type SourceInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (SourceInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceInstancePropertiesResponse)(nil)).Elem()
}

func (o SourceInstancePropertiesResponseOutput) ToSourceInstancePropertiesResponseOutput() SourceInstancePropertiesResponseOutput {
	return o
}

func (o SourceInstancePropertiesResponseOutput) ToSourceInstancePropertiesResponseOutputWithContext(ctx context.Context) SourceInstancePropertiesResponseOutput {
	return o
}

// Enables instances created based on this machine image to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
func (o SourceInstancePropertiesResponseOutput) CanIpForward() pulumi.BoolOutput {
	return o.ApplyT(func(v SourceInstancePropertiesResponse) bool { return v.CanIpForward }).(pulumi.BoolOutput)
}

// Whether the instance created from this machine image should be protected against deletion.
func (o SourceInstancePropertiesResponseOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v SourceInstancePropertiesResponse) bool { return v.DeletionProtection }).(pulumi.BoolOutput)
}

// An optional text description for the instances that are created from this machine image.
func (o SourceInstancePropertiesResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v SourceInstancePropertiesResponse) string { return v.Description }).(pulumi.StringOutput)
}

// An array of disks that are associated with the instances that are created from this machine image.
func (o SourceInstancePropertiesResponseOutput) Disks() SavedAttachedDiskResponseArrayOutput {
	return o.ApplyT(func(v SourceInstancePropertiesResponse) []SavedAttachedDiskResponse { return v.Disks }).(SavedAttachedDiskResponseArrayOutput)
}

// A list of guest accelerator cards' type and count to use for instances created from this machine image.
func (o SourceInstancePropertiesResponseOutput) GuestAccelerators() AcceleratorConfigResponseArrayOutput {
	return o.ApplyT(func(v SourceInstancePropertiesResponse) []AcceleratorConfigResponse { return v.GuestAccelerators }).(AcceleratorConfigResponseArrayOutput)
}

// KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified.
func (o SourceInstancePropertiesResponseOutput) KeyRevocationActionType() pulumi.StringOutput {
	return o.ApplyT(func(v SourceInstancePropertiesResponse) string { return v.KeyRevocationActionType }).(pulumi.StringOutput)
}

// Labels to apply to instances that are created from this machine image.
func (o SourceInstancePropertiesResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v SourceInstancePropertiesResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The machine type to use for instances that are created from this machine image.
func (o SourceInstancePropertiesResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v SourceInstancePropertiesResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// The metadata key/value pairs to assign to instances that are created from this machine image. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
func (o SourceInstancePropertiesResponseOutput) Metadata() MetadataResponseOutput {
	return o.ApplyT(func(v SourceInstancePropertiesResponse) MetadataResponse { return v.Metadata }).(MetadataResponseOutput)
}

// Minimum cpu/platform to be used by instances created from this machine image. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform.
func (o SourceInstancePropertiesResponseOutput) MinCpuPlatform() pulumi.StringOutput {
	return o.ApplyT(func(v SourceInstancePropertiesResponse) string { return v.MinCpuPlatform }).(pulumi.StringOutput)
}

// An array of network access configurations for this interface.
func (o SourceInstancePropertiesResponseOutput) NetworkInterfaces() NetworkInterfaceResponseArrayOutput {
	return o.ApplyT(func(v SourceInstancePropertiesResponse) []NetworkInterfaceResponse { return v.NetworkInterfaces }).(NetworkInterfaceResponseArrayOutput)
}

// PostKeyRevocationActionType of the instance.
func (o SourceInstancePropertiesResponseOutput) PostKeyRevocationActionType() pulumi.StringOutput {
	return o.ApplyT(func(v SourceInstancePropertiesResponse) string { return v.PostKeyRevocationActionType }).(pulumi.StringOutput)
}

// Specifies the scheduling options for the instances that are created from this machine image.
func (o SourceInstancePropertiesResponseOutput) Scheduling() SchedulingResponseOutput {
	return o.ApplyT(func(v SourceInstancePropertiesResponse) SchedulingResponse { return v.Scheduling }).(SchedulingResponseOutput)
}

// A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from this machine image. Use metadata queries to obtain the access tokens for these instances.
func (o SourceInstancePropertiesResponseOutput) ServiceAccounts() ServiceAccountResponseArrayOutput {
	return o.ApplyT(func(v SourceInstancePropertiesResponse) []ServiceAccountResponse { return v.ServiceAccounts }).(ServiceAccountResponseArrayOutput)
}

// A list of tags to apply to the instances that are created from this machine image. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
func (o SourceInstancePropertiesResponseOutput) Tags() TagsResponseOutput {
	return o.ApplyT(func(v SourceInstancePropertiesResponse) TagsResponse { return v.Tags }).(TagsResponseOutput)
}

// Configuration and status of a managed SSL certificate.
type SslCertificateManagedSslCertificate struct {
	// The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates).
	Domains []string `pulumi:"domains"`
}

// SslCertificateManagedSslCertificateInput is an input type that accepts SslCertificateManagedSslCertificateArgs and SslCertificateManagedSslCertificateOutput values.
// You can construct a concrete instance of `SslCertificateManagedSslCertificateInput` via:
//
//	SslCertificateManagedSslCertificateArgs{...}
type SslCertificateManagedSslCertificateInput interface {
	pulumi.Input

	ToSslCertificateManagedSslCertificateOutput() SslCertificateManagedSslCertificateOutput
	ToSslCertificateManagedSslCertificateOutputWithContext(context.Context) SslCertificateManagedSslCertificateOutput
}

// Configuration and status of a managed SSL certificate.
type SslCertificateManagedSslCertificateArgs struct {
	// The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates).
	Domains pulumi.StringArrayInput `pulumi:"domains"`
}

func (SslCertificateManagedSslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertificateManagedSslCertificate)(nil)).Elem()
}

func (i SslCertificateManagedSslCertificateArgs) ToSslCertificateManagedSslCertificateOutput() SslCertificateManagedSslCertificateOutput {
	return i.ToSslCertificateManagedSslCertificateOutputWithContext(context.Background())
}

func (i SslCertificateManagedSslCertificateArgs) ToSslCertificateManagedSslCertificateOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateManagedSslCertificateOutput)
}

func (i SslCertificateManagedSslCertificateArgs) ToSslCertificateManagedSslCertificatePtrOutput() SslCertificateManagedSslCertificatePtrOutput {
	return i.ToSslCertificateManagedSslCertificatePtrOutputWithContext(context.Background())
}

func (i SslCertificateManagedSslCertificateArgs) ToSslCertificateManagedSslCertificatePtrOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateManagedSslCertificateOutput).ToSslCertificateManagedSslCertificatePtrOutputWithContext(ctx)
}

// SslCertificateManagedSslCertificatePtrInput is an input type that accepts SslCertificateManagedSslCertificateArgs, SslCertificateManagedSslCertificatePtr and SslCertificateManagedSslCertificatePtrOutput values.
// You can construct a concrete instance of `SslCertificateManagedSslCertificatePtrInput` via:
//
//	        SslCertificateManagedSslCertificateArgs{...}
//
//	or:
//
//	        nil
type SslCertificateManagedSslCertificatePtrInput interface {
	pulumi.Input

	ToSslCertificateManagedSslCertificatePtrOutput() SslCertificateManagedSslCertificatePtrOutput
	ToSslCertificateManagedSslCertificatePtrOutputWithContext(context.Context) SslCertificateManagedSslCertificatePtrOutput
}

type sslCertificateManagedSslCertificatePtrType SslCertificateManagedSslCertificateArgs

func SslCertificateManagedSslCertificatePtr(v *SslCertificateManagedSslCertificateArgs) SslCertificateManagedSslCertificatePtrInput {
	return (*sslCertificateManagedSslCertificatePtrType)(v)
}

func (*sslCertificateManagedSslCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertificateManagedSslCertificate)(nil)).Elem()
}

func (i *sslCertificateManagedSslCertificatePtrType) ToSslCertificateManagedSslCertificatePtrOutput() SslCertificateManagedSslCertificatePtrOutput {
	return i.ToSslCertificateManagedSslCertificatePtrOutputWithContext(context.Background())
}

func (i *sslCertificateManagedSslCertificatePtrType) ToSslCertificateManagedSslCertificatePtrOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateManagedSslCertificatePtrOutput)
}

// Configuration and status of a managed SSL certificate.
type SslCertificateManagedSslCertificateOutput struct{ *pulumi.OutputState }

func (SslCertificateManagedSslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertificateManagedSslCertificate)(nil)).Elem()
}

func (o SslCertificateManagedSslCertificateOutput) ToSslCertificateManagedSslCertificateOutput() SslCertificateManagedSslCertificateOutput {
	return o
}

func (o SslCertificateManagedSslCertificateOutput) ToSslCertificateManagedSslCertificateOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificateOutput {
	return o
}

func (o SslCertificateManagedSslCertificateOutput) ToSslCertificateManagedSslCertificatePtrOutput() SslCertificateManagedSslCertificatePtrOutput {
	return o.ToSslCertificateManagedSslCertificatePtrOutputWithContext(context.Background())
}

func (o SslCertificateManagedSslCertificateOutput) ToSslCertificateManagedSslCertificatePtrOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SslCertificateManagedSslCertificate) *SslCertificateManagedSslCertificate {
		return &v
	}).(SslCertificateManagedSslCertificatePtrOutput)
}

// The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates).
func (o SslCertificateManagedSslCertificateOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SslCertificateManagedSslCertificate) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

type SslCertificateManagedSslCertificatePtrOutput struct{ *pulumi.OutputState }

func (SslCertificateManagedSslCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertificateManagedSslCertificate)(nil)).Elem()
}

func (o SslCertificateManagedSslCertificatePtrOutput) ToSslCertificateManagedSslCertificatePtrOutput() SslCertificateManagedSslCertificatePtrOutput {
	return o
}

func (o SslCertificateManagedSslCertificatePtrOutput) ToSslCertificateManagedSslCertificatePtrOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificatePtrOutput {
	return o
}

func (o SslCertificateManagedSslCertificatePtrOutput) Elem() SslCertificateManagedSslCertificateOutput {
	return o.ApplyT(func(v *SslCertificateManagedSslCertificate) SslCertificateManagedSslCertificate {
		if v != nil {
			return *v
		}
		var ret SslCertificateManagedSslCertificate
		return ret
	}).(SslCertificateManagedSslCertificateOutput)
}

// The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates).
func (o SslCertificateManagedSslCertificatePtrOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SslCertificateManagedSslCertificate) []string {
		if v == nil {
			return nil
		}
		return v.Domains
	}).(pulumi.StringArrayOutput)
}

// Configuration and status of a managed SSL certificate.
type SslCertificateManagedSslCertificateResponse struct {
	// [Output only] Detailed statuses of the domains specified for managed certificate resource.
	DomainStatus map[string]string `pulumi:"domainStatus"`
	// The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates).
	Domains []string `pulumi:"domains"`
	// [Output only] Status of the managed certificate resource.
	Status string `pulumi:"status"`
}

// Configuration and status of a managed SSL certificate.
type SslCertificateManagedSslCertificateResponseOutput struct{ *pulumi.OutputState }

func (SslCertificateManagedSslCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertificateManagedSslCertificateResponse)(nil)).Elem()
}

func (o SslCertificateManagedSslCertificateResponseOutput) ToSslCertificateManagedSslCertificateResponseOutput() SslCertificateManagedSslCertificateResponseOutput {
	return o
}

func (o SslCertificateManagedSslCertificateResponseOutput) ToSslCertificateManagedSslCertificateResponseOutputWithContext(ctx context.Context) SslCertificateManagedSslCertificateResponseOutput {
	return o
}

// [Output only] Detailed statuses of the domains specified for managed certificate resource.
func (o SslCertificateManagedSslCertificateResponseOutput) DomainStatus() pulumi.StringMapOutput {
	return o.ApplyT(func(v SslCertificateManagedSslCertificateResponse) map[string]string { return v.DomainStatus }).(pulumi.StringMapOutput)
}

// The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL certificate](/load-balancing/docs/quotas#ssl_certificates).
func (o SslCertificateManagedSslCertificateResponseOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SslCertificateManagedSslCertificateResponse) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// [Output only] Status of the managed certificate resource.
func (o SslCertificateManagedSslCertificateResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SslCertificateManagedSslCertificateResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Configuration and status of a self-managed SSL certificate.
type SslCertificateSelfManagedSslCertificate struct {
	// A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
	Certificate *string `pulumi:"certificate"`
	// A write-only private key in PEM format. Only insert requests will include this field.
	PrivateKey *string `pulumi:"privateKey"`
}

// SslCertificateSelfManagedSslCertificateInput is an input type that accepts SslCertificateSelfManagedSslCertificateArgs and SslCertificateSelfManagedSslCertificateOutput values.
// You can construct a concrete instance of `SslCertificateSelfManagedSslCertificateInput` via:
//
//	SslCertificateSelfManagedSslCertificateArgs{...}
type SslCertificateSelfManagedSslCertificateInput interface {
	pulumi.Input

	ToSslCertificateSelfManagedSslCertificateOutput() SslCertificateSelfManagedSslCertificateOutput
	ToSslCertificateSelfManagedSslCertificateOutputWithContext(context.Context) SslCertificateSelfManagedSslCertificateOutput
}

// Configuration and status of a self-managed SSL certificate.
type SslCertificateSelfManagedSslCertificateArgs struct {
	// A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// A write-only private key in PEM format. Only insert requests will include this field.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
}

func (SslCertificateSelfManagedSslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertificateSelfManagedSslCertificate)(nil)).Elem()
}

func (i SslCertificateSelfManagedSslCertificateArgs) ToSslCertificateSelfManagedSslCertificateOutput() SslCertificateSelfManagedSslCertificateOutput {
	return i.ToSslCertificateSelfManagedSslCertificateOutputWithContext(context.Background())
}

func (i SslCertificateSelfManagedSslCertificateArgs) ToSslCertificateSelfManagedSslCertificateOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateSelfManagedSslCertificateOutput)
}

func (i SslCertificateSelfManagedSslCertificateArgs) ToSslCertificateSelfManagedSslCertificatePtrOutput() SslCertificateSelfManagedSslCertificatePtrOutput {
	return i.ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(context.Background())
}

func (i SslCertificateSelfManagedSslCertificateArgs) ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateSelfManagedSslCertificateOutput).ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(ctx)
}

// SslCertificateSelfManagedSslCertificatePtrInput is an input type that accepts SslCertificateSelfManagedSslCertificateArgs, SslCertificateSelfManagedSslCertificatePtr and SslCertificateSelfManagedSslCertificatePtrOutput values.
// You can construct a concrete instance of `SslCertificateSelfManagedSslCertificatePtrInput` via:
//
//	        SslCertificateSelfManagedSslCertificateArgs{...}
//
//	or:
//
//	        nil
type SslCertificateSelfManagedSslCertificatePtrInput interface {
	pulumi.Input

	ToSslCertificateSelfManagedSslCertificatePtrOutput() SslCertificateSelfManagedSslCertificatePtrOutput
	ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(context.Context) SslCertificateSelfManagedSslCertificatePtrOutput
}

type sslCertificateSelfManagedSslCertificatePtrType SslCertificateSelfManagedSslCertificateArgs

func SslCertificateSelfManagedSslCertificatePtr(v *SslCertificateSelfManagedSslCertificateArgs) SslCertificateSelfManagedSslCertificatePtrInput {
	return (*sslCertificateSelfManagedSslCertificatePtrType)(v)
}

func (*sslCertificateSelfManagedSslCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertificateSelfManagedSslCertificate)(nil)).Elem()
}

func (i *sslCertificateSelfManagedSslCertificatePtrType) ToSslCertificateSelfManagedSslCertificatePtrOutput() SslCertificateSelfManagedSslCertificatePtrOutput {
	return i.ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(context.Background())
}

func (i *sslCertificateSelfManagedSslCertificatePtrType) ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateSelfManagedSslCertificatePtrOutput)
}

// Configuration and status of a self-managed SSL certificate.
type SslCertificateSelfManagedSslCertificateOutput struct{ *pulumi.OutputState }

func (SslCertificateSelfManagedSslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertificateSelfManagedSslCertificate)(nil)).Elem()
}

func (o SslCertificateSelfManagedSslCertificateOutput) ToSslCertificateSelfManagedSslCertificateOutput() SslCertificateSelfManagedSslCertificateOutput {
	return o
}

func (o SslCertificateSelfManagedSslCertificateOutput) ToSslCertificateSelfManagedSslCertificateOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificateOutput {
	return o
}

func (o SslCertificateSelfManagedSslCertificateOutput) ToSslCertificateSelfManagedSslCertificatePtrOutput() SslCertificateSelfManagedSslCertificatePtrOutput {
	return o.ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(context.Background())
}

func (o SslCertificateSelfManagedSslCertificateOutput) ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SslCertificateSelfManagedSslCertificate) *SslCertificateSelfManagedSslCertificate {
		return &v
	}).(SslCertificateSelfManagedSslCertificatePtrOutput)
}

// A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
func (o SslCertificateSelfManagedSslCertificateOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertificateSelfManagedSslCertificate) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// A write-only private key in PEM format. Only insert requests will include this field.
func (o SslCertificateSelfManagedSslCertificateOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertificateSelfManagedSslCertificate) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

type SslCertificateSelfManagedSslCertificatePtrOutput struct{ *pulumi.OutputState }

func (SslCertificateSelfManagedSslCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertificateSelfManagedSslCertificate)(nil)).Elem()
}

func (o SslCertificateSelfManagedSslCertificatePtrOutput) ToSslCertificateSelfManagedSslCertificatePtrOutput() SslCertificateSelfManagedSslCertificatePtrOutput {
	return o
}

func (o SslCertificateSelfManagedSslCertificatePtrOutput) ToSslCertificateSelfManagedSslCertificatePtrOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificatePtrOutput {
	return o
}

func (o SslCertificateSelfManagedSslCertificatePtrOutput) Elem() SslCertificateSelfManagedSslCertificateOutput {
	return o.ApplyT(func(v *SslCertificateSelfManagedSslCertificate) SslCertificateSelfManagedSslCertificate {
		if v != nil {
			return *v
		}
		var ret SslCertificateSelfManagedSslCertificate
		return ret
	}).(SslCertificateSelfManagedSslCertificateOutput)
}

// A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
func (o SslCertificateSelfManagedSslCertificatePtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertificateSelfManagedSslCertificate) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// A write-only private key in PEM format. Only insert requests will include this field.
func (o SslCertificateSelfManagedSslCertificatePtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertificateSelfManagedSslCertificate) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Configuration and status of a self-managed SSL certificate.
type SslCertificateSelfManagedSslCertificateResponse struct {
	// A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
	Certificate string `pulumi:"certificate"`
	// A write-only private key in PEM format. Only insert requests will include this field.
	PrivateKey string `pulumi:"privateKey"`
}

// Configuration and status of a self-managed SSL certificate.
type SslCertificateSelfManagedSslCertificateResponseOutput struct{ *pulumi.OutputState }

func (SslCertificateSelfManagedSslCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertificateSelfManagedSslCertificateResponse)(nil)).Elem()
}

func (o SslCertificateSelfManagedSslCertificateResponseOutput) ToSslCertificateSelfManagedSslCertificateResponseOutput() SslCertificateSelfManagedSslCertificateResponseOutput {
	return o
}

func (o SslCertificateSelfManagedSslCertificateResponseOutput) ToSslCertificateSelfManagedSslCertificateResponseOutputWithContext(ctx context.Context) SslCertificateSelfManagedSslCertificateResponseOutput {
	return o
}

// A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
func (o SslCertificateSelfManagedSslCertificateResponseOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v SslCertificateSelfManagedSslCertificateResponse) string { return v.Certificate }).(pulumi.StringOutput)
}

// A write-only private key in PEM format. Only insert requests will include this field.
func (o SslCertificateSelfManagedSslCertificateResponseOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v SslCertificateSelfManagedSslCertificateResponse) string { return v.PrivateKey }).(pulumi.StringOutput)
}

type SslPolicyWarningsItemDataItemResponse struct {
	// A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
	Key string `pulumi:"key"`
	// A warning data value corresponding to the key.
	Value string `pulumi:"value"`
}

type SslPolicyWarningsItemDataItemResponseOutput struct{ *pulumi.OutputState }

func (SslPolicyWarningsItemDataItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslPolicyWarningsItemDataItemResponse)(nil)).Elem()
}

func (o SslPolicyWarningsItemDataItemResponseOutput) ToSslPolicyWarningsItemDataItemResponseOutput() SslPolicyWarningsItemDataItemResponseOutput {
	return o
}

func (o SslPolicyWarningsItemDataItemResponseOutput) ToSslPolicyWarningsItemDataItemResponseOutputWithContext(ctx context.Context) SslPolicyWarningsItemDataItemResponseOutput {
	return o
}

// A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
func (o SslPolicyWarningsItemDataItemResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SslPolicyWarningsItemDataItemResponse) string { return v.Key }).(pulumi.StringOutput)
}

// A warning data value corresponding to the key.
func (o SslPolicyWarningsItemDataItemResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SslPolicyWarningsItemDataItemResponse) string { return v.Value }).(pulumi.StringOutput)
}

type SslPolicyWarningsItemDataItemResponseArrayOutput struct{ *pulumi.OutputState }

func (SslPolicyWarningsItemDataItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SslPolicyWarningsItemDataItemResponse)(nil)).Elem()
}

func (o SslPolicyWarningsItemDataItemResponseArrayOutput) ToSslPolicyWarningsItemDataItemResponseArrayOutput() SslPolicyWarningsItemDataItemResponseArrayOutput {
	return o
}

func (o SslPolicyWarningsItemDataItemResponseArrayOutput) ToSslPolicyWarningsItemDataItemResponseArrayOutputWithContext(ctx context.Context) SslPolicyWarningsItemDataItemResponseArrayOutput {
	return o
}

func (o SslPolicyWarningsItemDataItemResponseArrayOutput) Index(i pulumi.IntInput) SslPolicyWarningsItemDataItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SslPolicyWarningsItemDataItemResponse {
		return vs[0].([]SslPolicyWarningsItemDataItemResponse)[vs[1].(int)]
	}).(SslPolicyWarningsItemDataItemResponseOutput)
}

type SslPolicyWarningsItemResponse struct {
	// A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
	Code string `pulumi:"code"`
	// Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
	Data []SslPolicyWarningsItemDataItemResponse `pulumi:"data"`
	// A human-readable description of the warning code.
	Message string `pulumi:"message"`
}

type SslPolicyWarningsItemResponseOutput struct{ *pulumi.OutputState }

func (SslPolicyWarningsItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslPolicyWarningsItemResponse)(nil)).Elem()
}

func (o SslPolicyWarningsItemResponseOutput) ToSslPolicyWarningsItemResponseOutput() SslPolicyWarningsItemResponseOutput {
	return o
}

func (o SslPolicyWarningsItemResponseOutput) ToSslPolicyWarningsItemResponseOutputWithContext(ctx context.Context) SslPolicyWarningsItemResponseOutput {
	return o
}

// A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
func (o SslPolicyWarningsItemResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v SslPolicyWarningsItemResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
func (o SslPolicyWarningsItemResponseOutput) Data() SslPolicyWarningsItemDataItemResponseArrayOutput {
	return o.ApplyT(func(v SslPolicyWarningsItemResponse) []SslPolicyWarningsItemDataItemResponse { return v.Data }).(SslPolicyWarningsItemDataItemResponseArrayOutput)
}

// A human-readable description of the warning code.
func (o SslPolicyWarningsItemResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v SslPolicyWarningsItemResponse) string { return v.Message }).(pulumi.StringOutput)
}

type SslPolicyWarningsItemResponseArrayOutput struct{ *pulumi.OutputState }

func (SslPolicyWarningsItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SslPolicyWarningsItemResponse)(nil)).Elem()
}

func (o SslPolicyWarningsItemResponseArrayOutput) ToSslPolicyWarningsItemResponseArrayOutput() SslPolicyWarningsItemResponseArrayOutput {
	return o
}

func (o SslPolicyWarningsItemResponseArrayOutput) ToSslPolicyWarningsItemResponseArrayOutputWithContext(ctx context.Context) SslPolicyWarningsItemResponseArrayOutput {
	return o
}

func (o SslPolicyWarningsItemResponseArrayOutput) Index(i pulumi.IntInput) SslPolicyWarningsItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SslPolicyWarningsItemResponse {
		return vs[0].([]SslPolicyWarningsItemResponse)[vs[1].(int)]
	}).(SslPolicyWarningsItemResponseOutput)
}

type StatefulPolicy struct {
	PreservedState *StatefulPolicyPreservedState `pulumi:"preservedState"`
}

// StatefulPolicyInput is an input type that accepts StatefulPolicyArgs and StatefulPolicyOutput values.
// You can construct a concrete instance of `StatefulPolicyInput` via:
//
//	StatefulPolicyArgs{...}
type StatefulPolicyInput interface {
	pulumi.Input

	ToStatefulPolicyOutput() StatefulPolicyOutput
	ToStatefulPolicyOutputWithContext(context.Context) StatefulPolicyOutput
}

type StatefulPolicyArgs struct {
	PreservedState StatefulPolicyPreservedStatePtrInput `pulumi:"preservedState"`
}

func (StatefulPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulPolicy)(nil)).Elem()
}

func (i StatefulPolicyArgs) ToStatefulPolicyOutput() StatefulPolicyOutput {
	return i.ToStatefulPolicyOutputWithContext(context.Background())
}

func (i StatefulPolicyArgs) ToStatefulPolicyOutputWithContext(ctx context.Context) StatefulPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyOutput)
}

func (i StatefulPolicyArgs) ToStatefulPolicyPtrOutput() StatefulPolicyPtrOutput {
	return i.ToStatefulPolicyPtrOutputWithContext(context.Background())
}

func (i StatefulPolicyArgs) ToStatefulPolicyPtrOutputWithContext(ctx context.Context) StatefulPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyOutput).ToStatefulPolicyPtrOutputWithContext(ctx)
}

// StatefulPolicyPtrInput is an input type that accepts StatefulPolicyArgs, StatefulPolicyPtr and StatefulPolicyPtrOutput values.
// You can construct a concrete instance of `StatefulPolicyPtrInput` via:
//
//	        StatefulPolicyArgs{...}
//
//	or:
//
//	        nil
type StatefulPolicyPtrInput interface {
	pulumi.Input

	ToStatefulPolicyPtrOutput() StatefulPolicyPtrOutput
	ToStatefulPolicyPtrOutputWithContext(context.Context) StatefulPolicyPtrOutput
}

type statefulPolicyPtrType StatefulPolicyArgs

func StatefulPolicyPtr(v *StatefulPolicyArgs) StatefulPolicyPtrInput {
	return (*statefulPolicyPtrType)(v)
}

func (*statefulPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulPolicy)(nil)).Elem()
}

func (i *statefulPolicyPtrType) ToStatefulPolicyPtrOutput() StatefulPolicyPtrOutput {
	return i.ToStatefulPolicyPtrOutputWithContext(context.Background())
}

func (i *statefulPolicyPtrType) ToStatefulPolicyPtrOutputWithContext(ctx context.Context) StatefulPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyPtrOutput)
}

type StatefulPolicyOutput struct{ *pulumi.OutputState }

func (StatefulPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulPolicy)(nil)).Elem()
}

func (o StatefulPolicyOutput) ToStatefulPolicyOutput() StatefulPolicyOutput {
	return o
}

func (o StatefulPolicyOutput) ToStatefulPolicyOutputWithContext(ctx context.Context) StatefulPolicyOutput {
	return o
}

func (o StatefulPolicyOutput) ToStatefulPolicyPtrOutput() StatefulPolicyPtrOutput {
	return o.ToStatefulPolicyPtrOutputWithContext(context.Background())
}

func (o StatefulPolicyOutput) ToStatefulPolicyPtrOutputWithContext(ctx context.Context) StatefulPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatefulPolicy) *StatefulPolicy {
		return &v
	}).(StatefulPolicyPtrOutput)
}

func (o StatefulPolicyOutput) PreservedState() StatefulPolicyPreservedStatePtrOutput {
	return o.ApplyT(func(v StatefulPolicy) *StatefulPolicyPreservedState { return v.PreservedState }).(StatefulPolicyPreservedStatePtrOutput)
}

type StatefulPolicyPtrOutput struct{ *pulumi.OutputState }

func (StatefulPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulPolicy)(nil)).Elem()
}

func (o StatefulPolicyPtrOutput) ToStatefulPolicyPtrOutput() StatefulPolicyPtrOutput {
	return o
}

func (o StatefulPolicyPtrOutput) ToStatefulPolicyPtrOutputWithContext(ctx context.Context) StatefulPolicyPtrOutput {
	return o
}

func (o StatefulPolicyPtrOutput) Elem() StatefulPolicyOutput {
	return o.ApplyT(func(v *StatefulPolicy) StatefulPolicy {
		if v != nil {
			return *v
		}
		var ret StatefulPolicy
		return ret
	}).(StatefulPolicyOutput)
}

func (o StatefulPolicyPtrOutput) PreservedState() StatefulPolicyPreservedStatePtrOutput {
	return o.ApplyT(func(v *StatefulPolicy) *StatefulPolicyPreservedState {
		if v == nil {
			return nil
		}
		return v.PreservedState
	}).(StatefulPolicyPreservedStatePtrOutput)
}

// Configuration of preserved resources.
type StatefulPolicyPreservedState struct {
	// Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
	Disks map[string]string `pulumi:"disks"`
	// External network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name.
	ExternalIPs map[string]string `pulumi:"externalIPs"`
	// Internal network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name.
	InternalIPs map[string]string `pulumi:"internalIPs"`
}

// StatefulPolicyPreservedStateInput is an input type that accepts StatefulPolicyPreservedStateArgs and StatefulPolicyPreservedStateOutput values.
// You can construct a concrete instance of `StatefulPolicyPreservedStateInput` via:
//
//	StatefulPolicyPreservedStateArgs{...}
type StatefulPolicyPreservedStateInput interface {
	pulumi.Input

	ToStatefulPolicyPreservedStateOutput() StatefulPolicyPreservedStateOutput
	ToStatefulPolicyPreservedStateOutputWithContext(context.Context) StatefulPolicyPreservedStateOutput
}

// Configuration of preserved resources.
type StatefulPolicyPreservedStateArgs struct {
	// Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
	Disks pulumi.StringMapInput `pulumi:"disks"`
	// External network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name.
	ExternalIPs pulumi.StringMapInput `pulumi:"externalIPs"`
	// Internal network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name.
	InternalIPs pulumi.StringMapInput `pulumi:"internalIPs"`
}

func (StatefulPolicyPreservedStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulPolicyPreservedState)(nil)).Elem()
}

func (i StatefulPolicyPreservedStateArgs) ToStatefulPolicyPreservedStateOutput() StatefulPolicyPreservedStateOutput {
	return i.ToStatefulPolicyPreservedStateOutputWithContext(context.Background())
}

func (i StatefulPolicyPreservedStateArgs) ToStatefulPolicyPreservedStateOutputWithContext(ctx context.Context) StatefulPolicyPreservedStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyPreservedStateOutput)
}

func (i StatefulPolicyPreservedStateArgs) ToStatefulPolicyPreservedStatePtrOutput() StatefulPolicyPreservedStatePtrOutput {
	return i.ToStatefulPolicyPreservedStatePtrOutputWithContext(context.Background())
}

func (i StatefulPolicyPreservedStateArgs) ToStatefulPolicyPreservedStatePtrOutputWithContext(ctx context.Context) StatefulPolicyPreservedStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyPreservedStateOutput).ToStatefulPolicyPreservedStatePtrOutputWithContext(ctx)
}

// StatefulPolicyPreservedStatePtrInput is an input type that accepts StatefulPolicyPreservedStateArgs, StatefulPolicyPreservedStatePtr and StatefulPolicyPreservedStatePtrOutput values.
// You can construct a concrete instance of `StatefulPolicyPreservedStatePtrInput` via:
//
//	        StatefulPolicyPreservedStateArgs{...}
//
//	or:
//
//	        nil
type StatefulPolicyPreservedStatePtrInput interface {
	pulumi.Input

	ToStatefulPolicyPreservedStatePtrOutput() StatefulPolicyPreservedStatePtrOutput
	ToStatefulPolicyPreservedStatePtrOutputWithContext(context.Context) StatefulPolicyPreservedStatePtrOutput
}

type statefulPolicyPreservedStatePtrType StatefulPolicyPreservedStateArgs

func StatefulPolicyPreservedStatePtr(v *StatefulPolicyPreservedStateArgs) StatefulPolicyPreservedStatePtrInput {
	return (*statefulPolicyPreservedStatePtrType)(v)
}

func (*statefulPolicyPreservedStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulPolicyPreservedState)(nil)).Elem()
}

func (i *statefulPolicyPreservedStatePtrType) ToStatefulPolicyPreservedStatePtrOutput() StatefulPolicyPreservedStatePtrOutput {
	return i.ToStatefulPolicyPreservedStatePtrOutputWithContext(context.Background())
}

func (i *statefulPolicyPreservedStatePtrType) ToStatefulPolicyPreservedStatePtrOutputWithContext(ctx context.Context) StatefulPolicyPreservedStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatefulPolicyPreservedStatePtrOutput)
}

// Configuration of preserved resources.
type StatefulPolicyPreservedStateOutput struct{ *pulumi.OutputState }

func (StatefulPolicyPreservedStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulPolicyPreservedState)(nil)).Elem()
}

func (o StatefulPolicyPreservedStateOutput) ToStatefulPolicyPreservedStateOutput() StatefulPolicyPreservedStateOutput {
	return o
}

func (o StatefulPolicyPreservedStateOutput) ToStatefulPolicyPreservedStateOutputWithContext(ctx context.Context) StatefulPolicyPreservedStateOutput {
	return o
}

func (o StatefulPolicyPreservedStateOutput) ToStatefulPolicyPreservedStatePtrOutput() StatefulPolicyPreservedStatePtrOutput {
	return o.ToStatefulPolicyPreservedStatePtrOutputWithContext(context.Background())
}

func (o StatefulPolicyPreservedStateOutput) ToStatefulPolicyPreservedStatePtrOutputWithContext(ctx context.Context) StatefulPolicyPreservedStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatefulPolicyPreservedState) *StatefulPolicyPreservedState {
		return &v
	}).(StatefulPolicyPreservedStatePtrOutput)
}

// Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
func (o StatefulPolicyPreservedStateOutput) Disks() pulumi.StringMapOutput {
	return o.ApplyT(func(v StatefulPolicyPreservedState) map[string]string { return v.Disks }).(pulumi.StringMapOutput)
}

// External network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name.
func (o StatefulPolicyPreservedStateOutput) ExternalIPs() pulumi.StringMapOutput {
	return o.ApplyT(func(v StatefulPolicyPreservedState) map[string]string { return v.ExternalIPs }).(pulumi.StringMapOutput)
}

// Internal network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name.
func (o StatefulPolicyPreservedStateOutput) InternalIPs() pulumi.StringMapOutput {
	return o.ApplyT(func(v StatefulPolicyPreservedState) map[string]string { return v.InternalIPs }).(pulumi.StringMapOutput)
}

type StatefulPolicyPreservedStatePtrOutput struct{ *pulumi.OutputState }

func (StatefulPolicyPreservedStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatefulPolicyPreservedState)(nil)).Elem()
}

func (o StatefulPolicyPreservedStatePtrOutput) ToStatefulPolicyPreservedStatePtrOutput() StatefulPolicyPreservedStatePtrOutput {
	return o
}

func (o StatefulPolicyPreservedStatePtrOutput) ToStatefulPolicyPreservedStatePtrOutputWithContext(ctx context.Context) StatefulPolicyPreservedStatePtrOutput {
	return o
}

func (o StatefulPolicyPreservedStatePtrOutput) Elem() StatefulPolicyPreservedStateOutput {
	return o.ApplyT(func(v *StatefulPolicyPreservedState) StatefulPolicyPreservedState {
		if v != nil {
			return *v
		}
		var ret StatefulPolicyPreservedState
		return ret
	}).(StatefulPolicyPreservedStateOutput)
}

// Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
func (o StatefulPolicyPreservedStatePtrOutput) Disks() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StatefulPolicyPreservedState) map[string]string {
		if v == nil {
			return nil
		}
		return v.Disks
	}).(pulumi.StringMapOutput)
}

// External network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name.
func (o StatefulPolicyPreservedStatePtrOutput) ExternalIPs() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StatefulPolicyPreservedState) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringMapOutput)
}

// Internal network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name.
func (o StatefulPolicyPreservedStatePtrOutput) InternalIPs() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StatefulPolicyPreservedState) map[string]string {
		if v == nil {
			return nil
		}
		return v.InternalIPs
	}).(pulumi.StringMapOutput)
}

// Configuration of preserved resources.
type StatefulPolicyPreservedStateResponse struct {
	// Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
	Disks map[string]string `pulumi:"disks"`
	// External network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name.
	ExternalIPs map[string]string `pulumi:"externalIPs"`
	// Internal network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name.
	InternalIPs map[string]string `pulumi:"internalIPs"`
}

// Configuration of preserved resources.
type StatefulPolicyPreservedStateResponseOutput struct{ *pulumi.OutputState }

func (StatefulPolicyPreservedStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulPolicyPreservedStateResponse)(nil)).Elem()
}

func (o StatefulPolicyPreservedStateResponseOutput) ToStatefulPolicyPreservedStateResponseOutput() StatefulPolicyPreservedStateResponseOutput {
	return o
}

func (o StatefulPolicyPreservedStateResponseOutput) ToStatefulPolicyPreservedStateResponseOutputWithContext(ctx context.Context) StatefulPolicyPreservedStateResponseOutput {
	return o
}

// Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
func (o StatefulPolicyPreservedStateResponseOutput) Disks() pulumi.StringMapOutput {
	return o.ApplyT(func(v StatefulPolicyPreservedStateResponse) map[string]string { return v.Disks }).(pulumi.StringMapOutput)
}

// External network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name.
func (o StatefulPolicyPreservedStateResponseOutput) ExternalIPs() pulumi.StringMapOutput {
	return o.ApplyT(func(v StatefulPolicyPreservedStateResponse) map[string]string { return v.ExternalIPs }).(pulumi.StringMapOutput)
}

// Internal network IPs assigned to the instances that will be preserved on instance delete, update, etc. This map is keyed with the network interface name.
func (o StatefulPolicyPreservedStateResponseOutput) InternalIPs() pulumi.StringMapOutput {
	return o.ApplyT(func(v StatefulPolicyPreservedStateResponse) map[string]string { return v.InternalIPs }).(pulumi.StringMapOutput)
}

type StatefulPolicyResponse struct {
	PreservedState StatefulPolicyPreservedStateResponse `pulumi:"preservedState"`
}

type StatefulPolicyResponseOutput struct{ *pulumi.OutputState }

func (StatefulPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatefulPolicyResponse)(nil)).Elem()
}

func (o StatefulPolicyResponseOutput) ToStatefulPolicyResponseOutput() StatefulPolicyResponseOutput {
	return o
}

func (o StatefulPolicyResponseOutput) ToStatefulPolicyResponseOutputWithContext(ctx context.Context) StatefulPolicyResponseOutput {
	return o
}

func (o StatefulPolicyResponseOutput) PreservedState() StatefulPolicyPreservedStateResponseOutput {
	return o.ApplyT(func(v StatefulPolicyResponse) StatefulPolicyPreservedStateResponse { return v.PreservedState }).(StatefulPolicyPreservedStateResponseOutput)
}

// The available logging options for this subnetwork.
type SubnetworkLogConfig struct {
	// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
	AggregationInterval *SubnetworkLogConfigAggregationInterval `pulumi:"aggregationInterval"`
	// Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled.
	Enable *bool `pulumi:"enable"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled. The filter expression is used to define which VPC flow logs should be exported to Cloud Logging.
	FilterExpr *string `pulumi:"filterExpr"`
	// Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5 unless otherwise specified by the org policy, which means half of all collected logs are reported.
	FlowSampling *float64 `pulumi:"flowSampling"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
	Metadata *SubnetworkLogConfigMetadata `pulumi:"metadata"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA.
	MetadataFields []string `pulumi:"metadataFields"`
}

// SubnetworkLogConfigInput is an input type that accepts SubnetworkLogConfigArgs and SubnetworkLogConfigOutput values.
// You can construct a concrete instance of `SubnetworkLogConfigInput` via:
//
//	SubnetworkLogConfigArgs{...}
type SubnetworkLogConfigInput interface {
	pulumi.Input

	ToSubnetworkLogConfigOutput() SubnetworkLogConfigOutput
	ToSubnetworkLogConfigOutputWithContext(context.Context) SubnetworkLogConfigOutput
}

// The available logging options for this subnetwork.
type SubnetworkLogConfigArgs struct {
	// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
	AggregationInterval SubnetworkLogConfigAggregationIntervalPtrInput `pulumi:"aggregationInterval"`
	// Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled. The filter expression is used to define which VPC flow logs should be exported to Cloud Logging.
	FilterExpr pulumi.StringPtrInput `pulumi:"filterExpr"`
	// Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5 unless otherwise specified by the org policy, which means half of all collected logs are reported.
	FlowSampling pulumi.Float64PtrInput `pulumi:"flowSampling"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
	Metadata SubnetworkLogConfigMetadataPtrInput `pulumi:"metadata"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA.
	MetadataFields pulumi.StringArrayInput `pulumi:"metadataFields"`
}

func (SubnetworkLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkLogConfig)(nil)).Elem()
}

func (i SubnetworkLogConfigArgs) ToSubnetworkLogConfigOutput() SubnetworkLogConfigOutput {
	return i.ToSubnetworkLogConfigOutputWithContext(context.Background())
}

func (i SubnetworkLogConfigArgs) ToSubnetworkLogConfigOutputWithContext(ctx context.Context) SubnetworkLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkLogConfigOutput)
}

func (i SubnetworkLogConfigArgs) ToSubnetworkLogConfigPtrOutput() SubnetworkLogConfigPtrOutput {
	return i.ToSubnetworkLogConfigPtrOutputWithContext(context.Background())
}

func (i SubnetworkLogConfigArgs) ToSubnetworkLogConfigPtrOutputWithContext(ctx context.Context) SubnetworkLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkLogConfigOutput).ToSubnetworkLogConfigPtrOutputWithContext(ctx)
}

// SubnetworkLogConfigPtrInput is an input type that accepts SubnetworkLogConfigArgs, SubnetworkLogConfigPtr and SubnetworkLogConfigPtrOutput values.
// You can construct a concrete instance of `SubnetworkLogConfigPtrInput` via:
//
//	        SubnetworkLogConfigArgs{...}
//
//	or:
//
//	        nil
type SubnetworkLogConfigPtrInput interface {
	pulumi.Input

	ToSubnetworkLogConfigPtrOutput() SubnetworkLogConfigPtrOutput
	ToSubnetworkLogConfigPtrOutputWithContext(context.Context) SubnetworkLogConfigPtrOutput
}

type subnetworkLogConfigPtrType SubnetworkLogConfigArgs

func SubnetworkLogConfigPtr(v *SubnetworkLogConfigArgs) SubnetworkLogConfigPtrInput {
	return (*subnetworkLogConfigPtrType)(v)
}

func (*subnetworkLogConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetworkLogConfig)(nil)).Elem()
}

func (i *subnetworkLogConfigPtrType) ToSubnetworkLogConfigPtrOutput() SubnetworkLogConfigPtrOutput {
	return i.ToSubnetworkLogConfigPtrOutputWithContext(context.Background())
}

func (i *subnetworkLogConfigPtrType) ToSubnetworkLogConfigPtrOutputWithContext(ctx context.Context) SubnetworkLogConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkLogConfigPtrOutput)
}

// The available logging options for this subnetwork.
type SubnetworkLogConfigOutput struct{ *pulumi.OutputState }

func (SubnetworkLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkLogConfig)(nil)).Elem()
}

func (o SubnetworkLogConfigOutput) ToSubnetworkLogConfigOutput() SubnetworkLogConfigOutput {
	return o
}

func (o SubnetworkLogConfigOutput) ToSubnetworkLogConfigOutputWithContext(ctx context.Context) SubnetworkLogConfigOutput {
	return o
}

func (o SubnetworkLogConfigOutput) ToSubnetworkLogConfigPtrOutput() SubnetworkLogConfigPtrOutput {
	return o.ToSubnetworkLogConfigPtrOutputWithContext(context.Background())
}

func (o SubnetworkLogConfigOutput) ToSubnetworkLogConfigPtrOutputWithContext(ctx context.Context) SubnetworkLogConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubnetworkLogConfig) *SubnetworkLogConfig {
		return &v
	}).(SubnetworkLogConfigPtrOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
func (o SubnetworkLogConfigOutput) AggregationInterval() SubnetworkLogConfigAggregationIntervalPtrOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) *SubnetworkLogConfigAggregationInterval { return v.AggregationInterval }).(SubnetworkLogConfigAggregationIntervalPtrOutput)
}

// Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled.
func (o SubnetworkLogConfigOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled. The filter expression is used to define which VPC flow logs should be exported to Cloud Logging.
func (o SubnetworkLogConfigOutput) FilterExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) *string { return v.FilterExpr }).(pulumi.StringPtrOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5 unless otherwise specified by the org policy, which means half of all collected logs are reported.
func (o SubnetworkLogConfigOutput) FlowSampling() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) *float64 { return v.FlowSampling }).(pulumi.Float64PtrOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
func (o SubnetworkLogConfigOutput) Metadata() SubnetworkLogConfigMetadataPtrOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) *SubnetworkLogConfigMetadata { return v.Metadata }).(SubnetworkLogConfigMetadataPtrOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA.
func (o SubnetworkLogConfigOutput) MetadataFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubnetworkLogConfig) []string { return v.MetadataFields }).(pulumi.StringArrayOutput)
}

type SubnetworkLogConfigPtrOutput struct{ *pulumi.OutputState }

func (SubnetworkLogConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetworkLogConfig)(nil)).Elem()
}

func (o SubnetworkLogConfigPtrOutput) ToSubnetworkLogConfigPtrOutput() SubnetworkLogConfigPtrOutput {
	return o
}

func (o SubnetworkLogConfigPtrOutput) ToSubnetworkLogConfigPtrOutputWithContext(ctx context.Context) SubnetworkLogConfigPtrOutput {
	return o
}

func (o SubnetworkLogConfigPtrOutput) Elem() SubnetworkLogConfigOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) SubnetworkLogConfig {
		if v != nil {
			return *v
		}
		var ret SubnetworkLogConfig
		return ret
	}).(SubnetworkLogConfigOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
func (o SubnetworkLogConfigPtrOutput) AggregationInterval() SubnetworkLogConfigAggregationIntervalPtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) *SubnetworkLogConfigAggregationInterval {
		if v == nil {
			return nil
		}
		return v.AggregationInterval
	}).(SubnetworkLogConfigAggregationIntervalPtrOutput)
}

// Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled.
func (o SubnetworkLogConfigPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled. The filter expression is used to define which VPC flow logs should be exported to Cloud Logging.
func (o SubnetworkLogConfigPtrOutput) FilterExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) *string {
		if v == nil {
			return nil
		}
		return v.FilterExpr
	}).(pulumi.StringPtrOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5 unless otherwise specified by the org policy, which means half of all collected logs are reported.
func (o SubnetworkLogConfigPtrOutput) FlowSampling() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.FlowSampling
	}).(pulumi.Float64PtrOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
func (o SubnetworkLogConfigPtrOutput) Metadata() SubnetworkLogConfigMetadataPtrOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) *SubnetworkLogConfigMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(SubnetworkLogConfigMetadataPtrOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA.
func (o SubnetworkLogConfigPtrOutput) MetadataFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubnetworkLogConfig) []string {
		if v == nil {
			return nil
		}
		return v.MetadataFields
	}).(pulumi.StringArrayOutput)
}

// The available logging options for this subnetwork.
type SubnetworkLogConfigResponse struct {
	// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
	AggregationInterval string `pulumi:"aggregationInterval"`
	// Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled.
	Enable bool `pulumi:"enable"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled. The filter expression is used to define which VPC flow logs should be exported to Cloud Logging.
	FilterExpr string `pulumi:"filterExpr"`
	// Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5 unless otherwise specified by the org policy, which means half of all collected logs are reported.
	FlowSampling float64 `pulumi:"flowSampling"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
	Metadata string `pulumi:"metadata"`
	// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA.
	MetadataFields []string `pulumi:"metadataFields"`
}

// The available logging options for this subnetwork.
type SubnetworkLogConfigResponseOutput struct{ *pulumi.OutputState }

func (SubnetworkLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkLogConfigResponse)(nil)).Elem()
}

func (o SubnetworkLogConfigResponseOutput) ToSubnetworkLogConfigResponseOutput() SubnetworkLogConfigResponseOutput {
	return o
}

func (o SubnetworkLogConfigResponseOutput) ToSubnetworkLogConfigResponseOutputWithContext(ctx context.Context) SubnetworkLogConfigResponseOutput {
	return o
}

// Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
func (o SubnetworkLogConfigResponseOutput) AggregationInterval() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkLogConfigResponse) string { return v.AggregationInterval }).(pulumi.StringOutput)
}

// Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled.
func (o SubnetworkLogConfigResponseOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v SubnetworkLogConfigResponse) bool { return v.Enable }).(pulumi.BoolOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled. The filter expression is used to define which VPC flow logs should be exported to Cloud Logging.
func (o SubnetworkLogConfigResponseOutput) FilterExpr() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkLogConfigResponse) string { return v.FilterExpr }).(pulumi.StringOutput)
}

// Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5 unless otherwise specified by the org policy, which means half of all collected logs are reported.
func (o SubnetworkLogConfigResponseOutput) FlowSampling() pulumi.Float64Output {
	return o.ApplyT(func(v SubnetworkLogConfigResponse) float64 { return v.FlowSampling }).(pulumi.Float64Output)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE_ALL_METADATA.
func (o SubnetworkLogConfigResponseOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkLogConfigResponse) string { return v.Metadata }).(pulumi.StringOutput)
}

// Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA.
func (o SubnetworkLogConfigResponseOutput) MetadataFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubnetworkLogConfigResponse) []string { return v.MetadataFields }).(pulumi.StringArrayOutput)
}

// Represents a secondary IP range of a subnetwork.
type SubnetworkSecondaryRange struct {
	// The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
	IpCidrRange *string `pulumi:"ipCidrRange"`
	// The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
	RangeName *string `pulumi:"rangeName"`
	// The URL of the reserved internal range.
	ReservedInternalRange *string `pulumi:"reservedInternalRange"`
}

// SubnetworkSecondaryRangeInput is an input type that accepts SubnetworkSecondaryRangeArgs and SubnetworkSecondaryRangeOutput values.
// You can construct a concrete instance of `SubnetworkSecondaryRangeInput` via:
//
//	SubnetworkSecondaryRangeArgs{...}
type SubnetworkSecondaryRangeInput interface {
	pulumi.Input

	ToSubnetworkSecondaryRangeOutput() SubnetworkSecondaryRangeOutput
	ToSubnetworkSecondaryRangeOutputWithContext(context.Context) SubnetworkSecondaryRangeOutput
}

// Represents a secondary IP range of a subnetwork.
type SubnetworkSecondaryRangeArgs struct {
	// The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
	IpCidrRange pulumi.StringPtrInput `pulumi:"ipCidrRange"`
	// The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
	RangeName pulumi.StringPtrInput `pulumi:"rangeName"`
	// The URL of the reserved internal range.
	ReservedInternalRange pulumi.StringPtrInput `pulumi:"reservedInternalRange"`
}

func (SubnetworkSecondaryRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkSecondaryRange)(nil)).Elem()
}

func (i SubnetworkSecondaryRangeArgs) ToSubnetworkSecondaryRangeOutput() SubnetworkSecondaryRangeOutput {
	return i.ToSubnetworkSecondaryRangeOutputWithContext(context.Background())
}

func (i SubnetworkSecondaryRangeArgs) ToSubnetworkSecondaryRangeOutputWithContext(ctx context.Context) SubnetworkSecondaryRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkSecondaryRangeOutput)
}

// SubnetworkSecondaryRangeArrayInput is an input type that accepts SubnetworkSecondaryRangeArray and SubnetworkSecondaryRangeArrayOutput values.
// You can construct a concrete instance of `SubnetworkSecondaryRangeArrayInput` via:
//
//	SubnetworkSecondaryRangeArray{ SubnetworkSecondaryRangeArgs{...} }
type SubnetworkSecondaryRangeArrayInput interface {
	pulumi.Input

	ToSubnetworkSecondaryRangeArrayOutput() SubnetworkSecondaryRangeArrayOutput
	ToSubnetworkSecondaryRangeArrayOutputWithContext(context.Context) SubnetworkSecondaryRangeArrayOutput
}

type SubnetworkSecondaryRangeArray []SubnetworkSecondaryRangeInput

func (SubnetworkSecondaryRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetworkSecondaryRange)(nil)).Elem()
}

func (i SubnetworkSecondaryRangeArray) ToSubnetworkSecondaryRangeArrayOutput() SubnetworkSecondaryRangeArrayOutput {
	return i.ToSubnetworkSecondaryRangeArrayOutputWithContext(context.Background())
}

func (i SubnetworkSecondaryRangeArray) ToSubnetworkSecondaryRangeArrayOutputWithContext(ctx context.Context) SubnetworkSecondaryRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetworkSecondaryRangeArrayOutput)
}

// Represents a secondary IP range of a subnetwork.
type SubnetworkSecondaryRangeOutput struct{ *pulumi.OutputState }

func (SubnetworkSecondaryRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkSecondaryRange)(nil)).Elem()
}

func (o SubnetworkSecondaryRangeOutput) ToSubnetworkSecondaryRangeOutput() SubnetworkSecondaryRangeOutput {
	return o
}

func (o SubnetworkSecondaryRangeOutput) ToSubnetworkSecondaryRangeOutputWithContext(ctx context.Context) SubnetworkSecondaryRangeOutput {
	return o
}

// The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
func (o SubnetworkSecondaryRangeOutput) IpCidrRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetworkSecondaryRange) *string { return v.IpCidrRange }).(pulumi.StringPtrOutput)
}

// The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
func (o SubnetworkSecondaryRangeOutput) RangeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetworkSecondaryRange) *string { return v.RangeName }).(pulumi.StringPtrOutput)
}

// The URL of the reserved internal range.
func (o SubnetworkSecondaryRangeOutput) ReservedInternalRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetworkSecondaryRange) *string { return v.ReservedInternalRange }).(pulumi.StringPtrOutput)
}

type SubnetworkSecondaryRangeArrayOutput struct{ *pulumi.OutputState }

func (SubnetworkSecondaryRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetworkSecondaryRange)(nil)).Elem()
}

func (o SubnetworkSecondaryRangeArrayOutput) ToSubnetworkSecondaryRangeArrayOutput() SubnetworkSecondaryRangeArrayOutput {
	return o
}

func (o SubnetworkSecondaryRangeArrayOutput) ToSubnetworkSecondaryRangeArrayOutputWithContext(ctx context.Context) SubnetworkSecondaryRangeArrayOutput {
	return o
}

func (o SubnetworkSecondaryRangeArrayOutput) Index(i pulumi.IntInput) SubnetworkSecondaryRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubnetworkSecondaryRange {
		return vs[0].([]SubnetworkSecondaryRange)[vs[1].(int)]
	}).(SubnetworkSecondaryRangeOutput)
}

// Represents a secondary IP range of a subnetwork.
type SubnetworkSecondaryRangeResponse struct {
	// The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
	IpCidrRange string `pulumi:"ipCidrRange"`
	// The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
	RangeName string `pulumi:"rangeName"`
	// The URL of the reserved internal range.
	ReservedInternalRange string `pulumi:"reservedInternalRange"`
}

// Represents a secondary IP range of a subnetwork.
type SubnetworkSecondaryRangeResponseOutput struct{ *pulumi.OutputState }

func (SubnetworkSecondaryRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetworkSecondaryRangeResponse)(nil)).Elem()
}

func (o SubnetworkSecondaryRangeResponseOutput) ToSubnetworkSecondaryRangeResponseOutput() SubnetworkSecondaryRangeResponseOutput {
	return o
}

func (o SubnetworkSecondaryRangeResponseOutput) ToSubnetworkSecondaryRangeResponseOutputWithContext(ctx context.Context) SubnetworkSecondaryRangeResponseOutput {
	return o
}

// The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
func (o SubnetworkSecondaryRangeResponseOutput) IpCidrRange() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkSecondaryRangeResponse) string { return v.IpCidrRange }).(pulumi.StringOutput)
}

// The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
func (o SubnetworkSecondaryRangeResponseOutput) RangeName() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkSecondaryRangeResponse) string { return v.RangeName }).(pulumi.StringOutput)
}

// The URL of the reserved internal range.
func (o SubnetworkSecondaryRangeResponseOutput) ReservedInternalRange() pulumi.StringOutput {
	return o.ApplyT(func(v SubnetworkSecondaryRangeResponse) string { return v.ReservedInternalRange }).(pulumi.StringOutput)
}

type SubnetworkSecondaryRangeResponseArrayOutput struct{ *pulumi.OutputState }

func (SubnetworkSecondaryRangeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetworkSecondaryRangeResponse)(nil)).Elem()
}

func (o SubnetworkSecondaryRangeResponseArrayOutput) ToSubnetworkSecondaryRangeResponseArrayOutput() SubnetworkSecondaryRangeResponseArrayOutput {
	return o
}

func (o SubnetworkSecondaryRangeResponseArrayOutput) ToSubnetworkSecondaryRangeResponseArrayOutputWithContext(ctx context.Context) SubnetworkSecondaryRangeResponseArrayOutput {
	return o
}

func (o SubnetworkSecondaryRangeResponseArrayOutput) Index(i pulumi.IntInput) SubnetworkSecondaryRangeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubnetworkSecondaryRangeResponse {
		return vs[0].([]SubnetworkSecondaryRangeResponse)[vs[1].(int)]
	}).(SubnetworkSecondaryRangeResponseOutput)
}

// Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing, Internal HTTP(S) load balancing and Traffic Director.
type Subsetting struct {
	Policy *SubsettingPolicy `pulumi:"policy"`
	// The number of backends per backend group assigned to each proxy instance or each service mesh client. An input parameter to the `CONSISTENT_HASH_SUBSETTING` algorithm. Can only be set if `policy` is set to `CONSISTENT_HASH_SUBSETTING`. Can only be set if load balancing scheme is `INTERNAL_MANAGED` or `INTERNAL_SELF_MANAGED`. `subset_size` is optional for Internal HTTP(S) load balancing and required for Traffic Director. If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number of proxies/clients visible to each backend and vice versa. Must be greater than 0. If `subset_size` is larger than the number of backends/endpoints, then subsetting is disabled.
	SubsetSize *int `pulumi:"subsetSize"`
}

// SubsettingInput is an input type that accepts SubsettingArgs and SubsettingOutput values.
// You can construct a concrete instance of `SubsettingInput` via:
//
//	SubsettingArgs{...}
type SubsettingInput interface {
	pulumi.Input

	ToSubsettingOutput() SubsettingOutput
	ToSubsettingOutputWithContext(context.Context) SubsettingOutput
}

// Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing, Internal HTTP(S) load balancing and Traffic Director.
type SubsettingArgs struct {
	Policy SubsettingPolicyPtrInput `pulumi:"policy"`
	// The number of backends per backend group assigned to each proxy instance or each service mesh client. An input parameter to the `CONSISTENT_HASH_SUBSETTING` algorithm. Can only be set if `policy` is set to `CONSISTENT_HASH_SUBSETTING`. Can only be set if load balancing scheme is `INTERNAL_MANAGED` or `INTERNAL_SELF_MANAGED`. `subset_size` is optional for Internal HTTP(S) load balancing and required for Traffic Director. If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number of proxies/clients visible to each backend and vice versa. Must be greater than 0. If `subset_size` is larger than the number of backends/endpoints, then subsetting is disabled.
	SubsetSize pulumi.IntPtrInput `pulumi:"subsetSize"`
}

func (SubsettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Subsetting)(nil)).Elem()
}

func (i SubsettingArgs) ToSubsettingOutput() SubsettingOutput {
	return i.ToSubsettingOutputWithContext(context.Background())
}

func (i SubsettingArgs) ToSubsettingOutputWithContext(ctx context.Context) SubsettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubsettingOutput)
}

func (i SubsettingArgs) ToSubsettingPtrOutput() SubsettingPtrOutput {
	return i.ToSubsettingPtrOutputWithContext(context.Background())
}

func (i SubsettingArgs) ToSubsettingPtrOutputWithContext(ctx context.Context) SubsettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubsettingOutput).ToSubsettingPtrOutputWithContext(ctx)
}

// SubsettingPtrInput is an input type that accepts SubsettingArgs, SubsettingPtr and SubsettingPtrOutput values.
// You can construct a concrete instance of `SubsettingPtrInput` via:
//
//	        SubsettingArgs{...}
//
//	or:
//
//	        nil
type SubsettingPtrInput interface {
	pulumi.Input

	ToSubsettingPtrOutput() SubsettingPtrOutput
	ToSubsettingPtrOutputWithContext(context.Context) SubsettingPtrOutput
}

type subsettingPtrType SubsettingArgs

func SubsettingPtr(v *SubsettingArgs) SubsettingPtrInput {
	return (*subsettingPtrType)(v)
}

func (*subsettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Subsetting)(nil)).Elem()
}

func (i *subsettingPtrType) ToSubsettingPtrOutput() SubsettingPtrOutput {
	return i.ToSubsettingPtrOutputWithContext(context.Background())
}

func (i *subsettingPtrType) ToSubsettingPtrOutputWithContext(ctx context.Context) SubsettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubsettingPtrOutput)
}

// Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing, Internal HTTP(S) load balancing and Traffic Director.
type SubsettingOutput struct{ *pulumi.OutputState }

func (SubsettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Subsetting)(nil)).Elem()
}

func (o SubsettingOutput) ToSubsettingOutput() SubsettingOutput {
	return o
}

func (o SubsettingOutput) ToSubsettingOutputWithContext(ctx context.Context) SubsettingOutput {
	return o
}

func (o SubsettingOutput) ToSubsettingPtrOutput() SubsettingPtrOutput {
	return o.ToSubsettingPtrOutputWithContext(context.Background())
}

func (o SubsettingOutput) ToSubsettingPtrOutputWithContext(ctx context.Context) SubsettingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Subsetting) *Subsetting {
		return &v
	}).(SubsettingPtrOutput)
}

func (o SubsettingOutput) Policy() SubsettingPolicyPtrOutput {
	return o.ApplyT(func(v Subsetting) *SubsettingPolicy { return v.Policy }).(SubsettingPolicyPtrOutput)
}

// The number of backends per backend group assigned to each proxy instance or each service mesh client. An input parameter to the `CONSISTENT_HASH_SUBSETTING` algorithm. Can only be set if `policy` is set to `CONSISTENT_HASH_SUBSETTING`. Can only be set if load balancing scheme is `INTERNAL_MANAGED` or `INTERNAL_SELF_MANAGED`. `subset_size` is optional for Internal HTTP(S) load balancing and required for Traffic Director. If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number of proxies/clients visible to each backend and vice versa. Must be greater than 0. If `subset_size` is larger than the number of backends/endpoints, then subsetting is disabled.
func (o SubsettingOutput) SubsetSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Subsetting) *int { return v.SubsetSize }).(pulumi.IntPtrOutput)
}

type SubsettingPtrOutput struct{ *pulumi.OutputState }

func (SubsettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subsetting)(nil)).Elem()
}

func (o SubsettingPtrOutput) ToSubsettingPtrOutput() SubsettingPtrOutput {
	return o
}

func (o SubsettingPtrOutput) ToSubsettingPtrOutputWithContext(ctx context.Context) SubsettingPtrOutput {
	return o
}

func (o SubsettingPtrOutput) Elem() SubsettingOutput {
	return o.ApplyT(func(v *Subsetting) Subsetting {
		if v != nil {
			return *v
		}
		var ret Subsetting
		return ret
	}).(SubsettingOutput)
}

func (o SubsettingPtrOutput) Policy() SubsettingPolicyPtrOutput {
	return o.ApplyT(func(v *Subsetting) *SubsettingPolicy {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(SubsettingPolicyPtrOutput)
}

// The number of backends per backend group assigned to each proxy instance or each service mesh client. An input parameter to the `CONSISTENT_HASH_SUBSETTING` algorithm. Can only be set if `policy` is set to `CONSISTENT_HASH_SUBSETTING`. Can only be set if load balancing scheme is `INTERNAL_MANAGED` or `INTERNAL_SELF_MANAGED`. `subset_size` is optional for Internal HTTP(S) load balancing and required for Traffic Director. If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number of proxies/clients visible to each backend and vice versa. Must be greater than 0. If `subset_size` is larger than the number of backends/endpoints, then subsetting is disabled.
func (o SubsettingPtrOutput) SubsetSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Subsetting) *int {
		if v == nil {
			return nil
		}
		return v.SubsetSize
	}).(pulumi.IntPtrOutput)
}

// Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing, Internal HTTP(S) load balancing and Traffic Director.
type SubsettingResponse struct {
	Policy string `pulumi:"policy"`
	// The number of backends per backend group assigned to each proxy instance or each service mesh client. An input parameter to the `CONSISTENT_HASH_SUBSETTING` algorithm. Can only be set if `policy` is set to `CONSISTENT_HASH_SUBSETTING`. Can only be set if load balancing scheme is `INTERNAL_MANAGED` or `INTERNAL_SELF_MANAGED`. `subset_size` is optional for Internal HTTP(S) load balancing and required for Traffic Director. If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number of proxies/clients visible to each backend and vice versa. Must be greater than 0. If `subset_size` is larger than the number of backends/endpoints, then subsetting is disabled.
	SubsetSize int `pulumi:"subsetSize"`
}

// Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing, Internal HTTP(S) load balancing and Traffic Director.
type SubsettingResponseOutput struct{ *pulumi.OutputState }

func (SubsettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubsettingResponse)(nil)).Elem()
}

func (o SubsettingResponseOutput) ToSubsettingResponseOutput() SubsettingResponseOutput {
	return o
}

func (o SubsettingResponseOutput) ToSubsettingResponseOutputWithContext(ctx context.Context) SubsettingResponseOutput {
	return o
}

func (o SubsettingResponseOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v SubsettingResponse) string { return v.Policy }).(pulumi.StringOutput)
}

// The number of backends per backend group assigned to each proxy instance or each service mesh client. An input parameter to the `CONSISTENT_HASH_SUBSETTING` algorithm. Can only be set if `policy` is set to `CONSISTENT_HASH_SUBSETTING`. Can only be set if load balancing scheme is `INTERNAL_MANAGED` or `INTERNAL_SELF_MANAGED`. `subset_size` is optional for Internal HTTP(S) load balancing and required for Traffic Director. If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number of proxies/clients visible to each backend and vice versa. Must be greater than 0. If `subset_size` is larger than the number of backends/endpoints, then subsetting is disabled.
func (o SubsettingResponseOutput) SubsetSize() pulumi.IntOutput {
	return o.ApplyT(func(v SubsettingResponse) int { return v.SubsetSize }).(pulumi.IntOutput)
}

type TCPHealthCheck struct {
	// The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.
	Port *int `pulumi:"port"`
	// Not supported.
	PortName *string `pulumi:"portName"`
	// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
	PortSpecification *TCPHealthCheckPortSpecification `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader *TCPHealthCheckProxyHeader `pulumi:"proxyHeader"`
	// Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection.
	Request *string `pulumi:"request"`
	// Creates a content-based TCP health check. In addition to establishing a TCP connection, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp
	Response *string `pulumi:"response"`
}

// TCPHealthCheckInput is an input type that accepts TCPHealthCheckArgs and TCPHealthCheckOutput values.
// You can construct a concrete instance of `TCPHealthCheckInput` via:
//
//	TCPHealthCheckArgs{...}
type TCPHealthCheckInput interface {
	pulumi.Input

	ToTCPHealthCheckOutput() TCPHealthCheckOutput
	ToTCPHealthCheckOutputWithContext(context.Context) TCPHealthCheckOutput
}

type TCPHealthCheckArgs struct {
	// The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Not supported.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
	PortSpecification TCPHealthCheckPortSpecificationPtrInput `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader TCPHealthCheckProxyHeaderPtrInput `pulumi:"proxyHeader"`
	// Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection.
	Request pulumi.StringPtrInput `pulumi:"request"`
	// Creates a content-based TCP health check. In addition to establishing a TCP connection, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (TCPHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPHealthCheck)(nil)).Elem()
}

func (i TCPHealthCheckArgs) ToTCPHealthCheckOutput() TCPHealthCheckOutput {
	return i.ToTCPHealthCheckOutputWithContext(context.Background())
}

func (i TCPHealthCheckArgs) ToTCPHealthCheckOutputWithContext(ctx context.Context) TCPHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPHealthCheckOutput)
}

func (i TCPHealthCheckArgs) ToTCPHealthCheckPtrOutput() TCPHealthCheckPtrOutput {
	return i.ToTCPHealthCheckPtrOutputWithContext(context.Background())
}

func (i TCPHealthCheckArgs) ToTCPHealthCheckPtrOutputWithContext(ctx context.Context) TCPHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPHealthCheckOutput).ToTCPHealthCheckPtrOutputWithContext(ctx)
}

// TCPHealthCheckPtrInput is an input type that accepts TCPHealthCheckArgs, TCPHealthCheckPtr and TCPHealthCheckPtrOutput values.
// You can construct a concrete instance of `TCPHealthCheckPtrInput` via:
//
//	        TCPHealthCheckArgs{...}
//
//	or:
//
//	        nil
type TCPHealthCheckPtrInput interface {
	pulumi.Input

	ToTCPHealthCheckPtrOutput() TCPHealthCheckPtrOutput
	ToTCPHealthCheckPtrOutputWithContext(context.Context) TCPHealthCheckPtrOutput
}

type tcphealthCheckPtrType TCPHealthCheckArgs

func TCPHealthCheckPtr(v *TCPHealthCheckArgs) TCPHealthCheckPtrInput {
	return (*tcphealthCheckPtrType)(v)
}

func (*tcphealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPHealthCheck)(nil)).Elem()
}

func (i *tcphealthCheckPtrType) ToTCPHealthCheckPtrOutput() TCPHealthCheckPtrOutput {
	return i.ToTCPHealthCheckPtrOutputWithContext(context.Background())
}

func (i *tcphealthCheckPtrType) ToTCPHealthCheckPtrOutputWithContext(ctx context.Context) TCPHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPHealthCheckPtrOutput)
}

type TCPHealthCheckOutput struct{ *pulumi.OutputState }

func (TCPHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPHealthCheck)(nil)).Elem()
}

func (o TCPHealthCheckOutput) ToTCPHealthCheckOutput() TCPHealthCheckOutput {
	return o
}

func (o TCPHealthCheckOutput) ToTCPHealthCheckOutputWithContext(ctx context.Context) TCPHealthCheckOutput {
	return o
}

func (o TCPHealthCheckOutput) ToTCPHealthCheckPtrOutput() TCPHealthCheckPtrOutput {
	return o.ToTCPHealthCheckPtrOutputWithContext(context.Background())
}

func (o TCPHealthCheckOutput) ToTCPHealthCheckPtrOutputWithContext(ctx context.Context) TCPHealthCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TCPHealthCheck) *TCPHealthCheck {
		return &v
	}).(TCPHealthCheckPtrOutput)
}

// The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.
func (o TCPHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TCPHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Not supported.
func (o TCPHealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPHealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
func (o TCPHealthCheckOutput) PortSpecification() TCPHealthCheckPortSpecificationPtrOutput {
	return o.ApplyT(func(v TCPHealthCheck) *TCPHealthCheckPortSpecification { return v.PortSpecification }).(TCPHealthCheckPortSpecificationPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o TCPHealthCheckOutput) ProxyHeader() TCPHealthCheckProxyHeaderPtrOutput {
	return o.ApplyT(func(v TCPHealthCheck) *TCPHealthCheckProxyHeader { return v.ProxyHeader }).(TCPHealthCheckProxyHeaderPtrOutput)
}

// Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection.
func (o TCPHealthCheckOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPHealthCheck) *string { return v.Request }).(pulumi.StringPtrOutput)
}

// Creates a content-based TCP health check. In addition to establishing a TCP connection, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp
func (o TCPHealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TCPHealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type TCPHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (TCPHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPHealthCheck)(nil)).Elem()
}

func (o TCPHealthCheckPtrOutput) ToTCPHealthCheckPtrOutput() TCPHealthCheckPtrOutput {
	return o
}

func (o TCPHealthCheckPtrOutput) ToTCPHealthCheckPtrOutputWithContext(ctx context.Context) TCPHealthCheckPtrOutput {
	return o
}

func (o TCPHealthCheckPtrOutput) Elem() TCPHealthCheckOutput {
	return o.ApplyT(func(v *TCPHealthCheck) TCPHealthCheck {
		if v != nil {
			return *v
		}
		var ret TCPHealthCheck
		return ret
	}).(TCPHealthCheckOutput)
}

// The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.
func (o TCPHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Not supported.
func (o TCPHealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
func (o TCPHealthCheckPtrOutput) PortSpecification() TCPHealthCheckPortSpecificationPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheck) *TCPHealthCheckPortSpecification {
		if v == nil {
			return nil
		}
		return v.PortSpecification
	}).(TCPHealthCheckPortSpecificationPtrOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o TCPHealthCheckPtrOutput) ProxyHeader() TCPHealthCheckProxyHeaderPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheck) *TCPHealthCheckProxyHeader {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(TCPHealthCheckProxyHeaderPtrOutput)
}

// Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection.
func (o TCPHealthCheckPtrOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Request
	}).(pulumi.StringPtrOutput)
}

// Creates a content-based TCP health check. In addition to establishing a TCP connection, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp
func (o TCPHealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type TCPHealthCheckResponse struct {
	// The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.
	Port int `pulumi:"port"`
	// Not supported.
	PortName string `pulumi:"portName"`
	// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
	PortSpecification string `pulumi:"portSpecification"`
	// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
	ProxyHeader string `pulumi:"proxyHeader"`
	// Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection.
	Request string `pulumi:"request"`
	// Creates a content-based TCP health check. In addition to establishing a TCP connection, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp
	Response string `pulumi:"response"`
}

type TCPHealthCheckResponseOutput struct{ *pulumi.OutputState }

func (TCPHealthCheckResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TCPHealthCheckResponse)(nil)).Elem()
}

func (o TCPHealthCheckResponseOutput) ToTCPHealthCheckResponseOutput() TCPHealthCheckResponseOutput {
	return o
}

func (o TCPHealthCheckResponseOutput) ToTCPHealthCheckResponseOutputWithContext(ctx context.Context) TCPHealthCheckResponseOutput {
	return o
}

// The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.
func (o TCPHealthCheckResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v TCPHealthCheckResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Not supported.
func (o TCPHealthCheckResponseOutput) PortName() pulumi.StringOutput {
	return o.ApplyT(func(v TCPHealthCheckResponse) string { return v.PortName }).(pulumi.StringOutput)
}

// Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
func (o TCPHealthCheckResponseOutput) PortSpecification() pulumi.StringOutput {
	return o.ApplyT(func(v TCPHealthCheckResponse) string { return v.PortSpecification }).(pulumi.StringOutput)
}

// Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
func (o TCPHealthCheckResponseOutput) ProxyHeader() pulumi.StringOutput {
	return o.ApplyT(func(v TCPHealthCheckResponse) string { return v.ProxyHeader }).(pulumi.StringOutput)
}

// Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection.
func (o TCPHealthCheckResponseOutput) Request() pulumi.StringOutput {
	return o.ApplyT(func(v TCPHealthCheckResponse) string { return v.Request }).(pulumi.StringOutput)
}

// Creates a content-based TCP health check. In addition to establishing a TCP connection, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp
func (o TCPHealthCheckResponseOutput) Response() pulumi.StringOutput {
	return o.ApplyT(func(v TCPHealthCheckResponse) string { return v.Response }).(pulumi.StringOutput)
}

// A set of instance tags.
type Tags struct {
	// An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
	Items []string `pulumi:"items"`
}

// TagsInput is an input type that accepts TagsArgs and TagsOutput values.
// You can construct a concrete instance of `TagsInput` via:
//
//	TagsArgs{...}
type TagsInput interface {
	pulumi.Input

	ToTagsOutput() TagsOutput
	ToTagsOutputWithContext(context.Context) TagsOutput
}

// A set of instance tags.
type TagsArgs struct {
	// An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
	Items pulumi.StringArrayInput `pulumi:"items"`
}

func (TagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Tags)(nil)).Elem()
}

func (i TagsArgs) ToTagsOutput() TagsOutput {
	return i.ToTagsOutputWithContext(context.Background())
}

func (i TagsArgs) ToTagsOutputWithContext(ctx context.Context) TagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsOutput)
}

func (i TagsArgs) ToTagsPtrOutput() TagsPtrOutput {
	return i.ToTagsPtrOutputWithContext(context.Background())
}

func (i TagsArgs) ToTagsPtrOutputWithContext(ctx context.Context) TagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsOutput).ToTagsPtrOutputWithContext(ctx)
}

// TagsPtrInput is an input type that accepts TagsArgs, TagsPtr and TagsPtrOutput values.
// You can construct a concrete instance of `TagsPtrInput` via:
//
//	        TagsArgs{...}
//
//	or:
//
//	        nil
type TagsPtrInput interface {
	pulumi.Input

	ToTagsPtrOutput() TagsPtrOutput
	ToTagsPtrOutputWithContext(context.Context) TagsPtrOutput
}

type tagsPtrType TagsArgs

func TagsPtr(v *TagsArgs) TagsPtrInput {
	return (*tagsPtrType)(v)
}

func (*tagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Tags)(nil)).Elem()
}

func (i *tagsPtrType) ToTagsPtrOutput() TagsPtrOutput {
	return i.ToTagsPtrOutputWithContext(context.Background())
}

func (i *tagsPtrType) ToTagsPtrOutputWithContext(ctx context.Context) TagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsPtrOutput)
}

// A set of instance tags.
type TagsOutput struct{ *pulumi.OutputState }

func (TagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Tags)(nil)).Elem()
}

func (o TagsOutput) ToTagsOutput() TagsOutput {
	return o
}

func (o TagsOutput) ToTagsOutputWithContext(ctx context.Context) TagsOutput {
	return o
}

func (o TagsOutput) ToTagsPtrOutput() TagsPtrOutput {
	return o.ToTagsPtrOutputWithContext(context.Background())
}

func (o TagsOutput) ToTagsPtrOutputWithContext(ctx context.Context) TagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Tags) *Tags {
		return &v
	}).(TagsPtrOutput)
}

// An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
func (o TagsOutput) Items() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Tags) []string { return v.Items }).(pulumi.StringArrayOutput)
}

type TagsPtrOutput struct{ *pulumi.OutputState }

func (TagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tags)(nil)).Elem()
}

func (o TagsPtrOutput) ToTagsPtrOutput() TagsPtrOutput {
	return o
}

func (o TagsPtrOutput) ToTagsPtrOutputWithContext(ctx context.Context) TagsPtrOutput {
	return o
}

func (o TagsPtrOutput) Elem() TagsOutput {
	return o.ApplyT(func(v *Tags) Tags {
		if v != nil {
			return *v
		}
		var ret Tags
		return ret
	}).(TagsOutput)
}

// An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
func (o TagsPtrOutput) Items() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Tags) []string {
		if v == nil {
			return nil
		}
		return v.Items
	}).(pulumi.StringArrayOutput)
}

// A set of instance tags.
type TagsResponse struct {
	// Specifies a fingerprint for this request, which is essentially a hash of the tags' contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags. To see the latest fingerprint, make get() request to the instance.
	Fingerprint string `pulumi:"fingerprint"`
	// An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
	Items []string `pulumi:"items"`
}

// A set of instance tags.
type TagsResponseOutput struct{ *pulumi.OutputState }

func (TagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagsResponse)(nil)).Elem()
}

func (o TagsResponseOutput) ToTagsResponseOutput() TagsResponseOutput {
	return o
}

func (o TagsResponseOutput) ToTagsResponseOutputWithContext(ctx context.Context) TagsResponseOutput {
	return o
}

// Specifies a fingerprint for this request, which is essentially a hash of the tags' contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags. To see the latest fingerprint, make get() request to the instance.
func (o TagsResponseOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v TagsResponse) string { return v.Fingerprint }).(pulumi.StringOutput)
}

// An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
func (o TagsResponseOutput) Items() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TagsResponse) []string { return v.Items }).(pulumi.StringArrayOutput)
}

// [Deprecated] Defines the mechanism to obtain the client or server certificate. Defines the mechanism to obtain the client or server certificate.
type TlsCertificateContext struct {
	// Specifies the certificate and private key paths. This field is applicable only if tlsCertificateSource is set to USE_PATH.
	CertificatePaths *TlsCertificatePaths `pulumi:"certificatePaths"`
	// Defines how TLS certificates are obtained.
	CertificateSource *TlsCertificateContextCertificateSource `pulumi:"certificateSource"`
	// Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
	SdsConfig *SdsConfig `pulumi:"sdsConfig"`
}

// TlsCertificateContextInput is an input type that accepts TlsCertificateContextArgs and TlsCertificateContextOutput values.
// You can construct a concrete instance of `TlsCertificateContextInput` via:
//
//	TlsCertificateContextArgs{...}
type TlsCertificateContextInput interface {
	pulumi.Input

	ToTlsCertificateContextOutput() TlsCertificateContextOutput
	ToTlsCertificateContextOutputWithContext(context.Context) TlsCertificateContextOutput
}

// [Deprecated] Defines the mechanism to obtain the client or server certificate. Defines the mechanism to obtain the client or server certificate.
type TlsCertificateContextArgs struct {
	// Specifies the certificate and private key paths. This field is applicable only if tlsCertificateSource is set to USE_PATH.
	CertificatePaths TlsCertificatePathsPtrInput `pulumi:"certificatePaths"`
	// Defines how TLS certificates are obtained.
	CertificateSource TlsCertificateContextCertificateSourcePtrInput `pulumi:"certificateSource"`
	// Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
	SdsConfig SdsConfigPtrInput `pulumi:"sdsConfig"`
}

func (TlsCertificateContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertificateContext)(nil)).Elem()
}

func (i TlsCertificateContextArgs) ToTlsCertificateContextOutput() TlsCertificateContextOutput {
	return i.ToTlsCertificateContextOutputWithContext(context.Background())
}

func (i TlsCertificateContextArgs) ToTlsCertificateContextOutputWithContext(ctx context.Context) TlsCertificateContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificateContextOutput)
}

func (i TlsCertificateContextArgs) ToTlsCertificateContextPtrOutput() TlsCertificateContextPtrOutput {
	return i.ToTlsCertificateContextPtrOutputWithContext(context.Background())
}

func (i TlsCertificateContextArgs) ToTlsCertificateContextPtrOutputWithContext(ctx context.Context) TlsCertificateContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificateContextOutput).ToTlsCertificateContextPtrOutputWithContext(ctx)
}

// TlsCertificateContextPtrInput is an input type that accepts TlsCertificateContextArgs, TlsCertificateContextPtr and TlsCertificateContextPtrOutput values.
// You can construct a concrete instance of `TlsCertificateContextPtrInput` via:
//
//	        TlsCertificateContextArgs{...}
//
//	or:
//
//	        nil
type TlsCertificateContextPtrInput interface {
	pulumi.Input

	ToTlsCertificateContextPtrOutput() TlsCertificateContextPtrOutput
	ToTlsCertificateContextPtrOutputWithContext(context.Context) TlsCertificateContextPtrOutput
}

type tlsCertificateContextPtrType TlsCertificateContextArgs

func TlsCertificateContextPtr(v *TlsCertificateContextArgs) TlsCertificateContextPtrInput {
	return (*tlsCertificateContextPtrType)(v)
}

func (*tlsCertificateContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsCertificateContext)(nil)).Elem()
}

func (i *tlsCertificateContextPtrType) ToTlsCertificateContextPtrOutput() TlsCertificateContextPtrOutput {
	return i.ToTlsCertificateContextPtrOutputWithContext(context.Background())
}

func (i *tlsCertificateContextPtrType) ToTlsCertificateContextPtrOutputWithContext(ctx context.Context) TlsCertificateContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificateContextPtrOutput)
}

// [Deprecated] Defines the mechanism to obtain the client or server certificate. Defines the mechanism to obtain the client or server certificate.
type TlsCertificateContextOutput struct{ *pulumi.OutputState }

func (TlsCertificateContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertificateContext)(nil)).Elem()
}

func (o TlsCertificateContextOutput) ToTlsCertificateContextOutput() TlsCertificateContextOutput {
	return o
}

func (o TlsCertificateContextOutput) ToTlsCertificateContextOutputWithContext(ctx context.Context) TlsCertificateContextOutput {
	return o
}

func (o TlsCertificateContextOutput) ToTlsCertificateContextPtrOutput() TlsCertificateContextPtrOutput {
	return o.ToTlsCertificateContextPtrOutputWithContext(context.Background())
}

func (o TlsCertificateContextOutput) ToTlsCertificateContextPtrOutputWithContext(ctx context.Context) TlsCertificateContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TlsCertificateContext) *TlsCertificateContext {
		return &v
	}).(TlsCertificateContextPtrOutput)
}

// Specifies the certificate and private key paths. This field is applicable only if tlsCertificateSource is set to USE_PATH.
func (o TlsCertificateContextOutput) CertificatePaths() TlsCertificatePathsPtrOutput {
	return o.ApplyT(func(v TlsCertificateContext) *TlsCertificatePaths { return v.CertificatePaths }).(TlsCertificatePathsPtrOutput)
}

// Defines how TLS certificates are obtained.
func (o TlsCertificateContextOutput) CertificateSource() TlsCertificateContextCertificateSourcePtrOutput {
	return o.ApplyT(func(v TlsCertificateContext) *TlsCertificateContextCertificateSource { return v.CertificateSource }).(TlsCertificateContextCertificateSourcePtrOutput)
}

// Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
func (o TlsCertificateContextOutput) SdsConfig() SdsConfigPtrOutput {
	return o.ApplyT(func(v TlsCertificateContext) *SdsConfig { return v.SdsConfig }).(SdsConfigPtrOutput)
}

type TlsCertificateContextPtrOutput struct{ *pulumi.OutputState }

func (TlsCertificateContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsCertificateContext)(nil)).Elem()
}

func (o TlsCertificateContextPtrOutput) ToTlsCertificateContextPtrOutput() TlsCertificateContextPtrOutput {
	return o
}

func (o TlsCertificateContextPtrOutput) ToTlsCertificateContextPtrOutputWithContext(ctx context.Context) TlsCertificateContextPtrOutput {
	return o
}

func (o TlsCertificateContextPtrOutput) Elem() TlsCertificateContextOutput {
	return o.ApplyT(func(v *TlsCertificateContext) TlsCertificateContext {
		if v != nil {
			return *v
		}
		var ret TlsCertificateContext
		return ret
	}).(TlsCertificateContextOutput)
}

// Specifies the certificate and private key paths. This field is applicable only if tlsCertificateSource is set to USE_PATH.
func (o TlsCertificateContextPtrOutput) CertificatePaths() TlsCertificatePathsPtrOutput {
	return o.ApplyT(func(v *TlsCertificateContext) *TlsCertificatePaths {
		if v == nil {
			return nil
		}
		return v.CertificatePaths
	}).(TlsCertificatePathsPtrOutput)
}

// Defines how TLS certificates are obtained.
func (o TlsCertificateContextPtrOutput) CertificateSource() TlsCertificateContextCertificateSourcePtrOutput {
	return o.ApplyT(func(v *TlsCertificateContext) *TlsCertificateContextCertificateSource {
		if v == nil {
			return nil
		}
		return v.CertificateSource
	}).(TlsCertificateContextCertificateSourcePtrOutput)
}

// Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
func (o TlsCertificateContextPtrOutput) SdsConfig() SdsConfigPtrOutput {
	return o.ApplyT(func(v *TlsCertificateContext) *SdsConfig {
		if v == nil {
			return nil
		}
		return v.SdsConfig
	}).(SdsConfigPtrOutput)
}

// [Deprecated] Defines the mechanism to obtain the client or server certificate. Defines the mechanism to obtain the client or server certificate.
type TlsCertificateContextResponse struct {
	// Specifies the certificate and private key paths. This field is applicable only if tlsCertificateSource is set to USE_PATH.
	CertificatePaths TlsCertificatePathsResponse `pulumi:"certificatePaths"`
	// Defines how TLS certificates are obtained.
	CertificateSource string `pulumi:"certificateSource"`
	// Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
	SdsConfig SdsConfigResponse `pulumi:"sdsConfig"`
}

// [Deprecated] Defines the mechanism to obtain the client or server certificate. Defines the mechanism to obtain the client or server certificate.
type TlsCertificateContextResponseOutput struct{ *pulumi.OutputState }

func (TlsCertificateContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertificateContextResponse)(nil)).Elem()
}

func (o TlsCertificateContextResponseOutput) ToTlsCertificateContextResponseOutput() TlsCertificateContextResponseOutput {
	return o
}

func (o TlsCertificateContextResponseOutput) ToTlsCertificateContextResponseOutputWithContext(ctx context.Context) TlsCertificateContextResponseOutput {
	return o
}

// Specifies the certificate and private key paths. This field is applicable only if tlsCertificateSource is set to USE_PATH.
func (o TlsCertificateContextResponseOutput) CertificatePaths() TlsCertificatePathsResponseOutput {
	return o.ApplyT(func(v TlsCertificateContextResponse) TlsCertificatePathsResponse { return v.CertificatePaths }).(TlsCertificatePathsResponseOutput)
}

// Defines how TLS certificates are obtained.
func (o TlsCertificateContextResponseOutput) CertificateSource() pulumi.StringOutput {
	return o.ApplyT(func(v TlsCertificateContextResponse) string { return v.CertificateSource }).(pulumi.StringOutput)
}

// Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
func (o TlsCertificateContextResponseOutput) SdsConfig() SdsConfigResponseOutput {
	return o.ApplyT(func(v TlsCertificateContextResponse) SdsConfigResponse { return v.SdsConfig }).(SdsConfigResponseOutput)
}

// [Deprecated] The paths to the mounted TLS Certificates and private key. The paths to the mounted TLS Certificates and private key.
type TlsCertificatePaths struct {
	// The path to the file holding the client or server TLS certificate to use.
	CertificatePath *string `pulumi:"certificatePath"`
	// The path to the file holding the client or server private key.
	PrivateKeyPath *string `pulumi:"privateKeyPath"`
}

// TlsCertificatePathsInput is an input type that accepts TlsCertificatePathsArgs and TlsCertificatePathsOutput values.
// You can construct a concrete instance of `TlsCertificatePathsInput` via:
//
//	TlsCertificatePathsArgs{...}
type TlsCertificatePathsInput interface {
	pulumi.Input

	ToTlsCertificatePathsOutput() TlsCertificatePathsOutput
	ToTlsCertificatePathsOutputWithContext(context.Context) TlsCertificatePathsOutput
}

// [Deprecated] The paths to the mounted TLS Certificates and private key. The paths to the mounted TLS Certificates and private key.
type TlsCertificatePathsArgs struct {
	// The path to the file holding the client or server TLS certificate to use.
	CertificatePath pulumi.StringPtrInput `pulumi:"certificatePath"`
	// The path to the file holding the client or server private key.
	PrivateKeyPath pulumi.StringPtrInput `pulumi:"privateKeyPath"`
}

func (TlsCertificatePathsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertificatePaths)(nil)).Elem()
}

func (i TlsCertificatePathsArgs) ToTlsCertificatePathsOutput() TlsCertificatePathsOutput {
	return i.ToTlsCertificatePathsOutputWithContext(context.Background())
}

func (i TlsCertificatePathsArgs) ToTlsCertificatePathsOutputWithContext(ctx context.Context) TlsCertificatePathsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificatePathsOutput)
}

func (i TlsCertificatePathsArgs) ToTlsCertificatePathsPtrOutput() TlsCertificatePathsPtrOutput {
	return i.ToTlsCertificatePathsPtrOutputWithContext(context.Background())
}

func (i TlsCertificatePathsArgs) ToTlsCertificatePathsPtrOutputWithContext(ctx context.Context) TlsCertificatePathsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificatePathsOutput).ToTlsCertificatePathsPtrOutputWithContext(ctx)
}

// TlsCertificatePathsPtrInput is an input type that accepts TlsCertificatePathsArgs, TlsCertificatePathsPtr and TlsCertificatePathsPtrOutput values.
// You can construct a concrete instance of `TlsCertificatePathsPtrInput` via:
//
//	        TlsCertificatePathsArgs{...}
//
//	or:
//
//	        nil
type TlsCertificatePathsPtrInput interface {
	pulumi.Input

	ToTlsCertificatePathsPtrOutput() TlsCertificatePathsPtrOutput
	ToTlsCertificatePathsPtrOutputWithContext(context.Context) TlsCertificatePathsPtrOutput
}

type tlsCertificatePathsPtrType TlsCertificatePathsArgs

func TlsCertificatePathsPtr(v *TlsCertificatePathsArgs) TlsCertificatePathsPtrInput {
	return (*tlsCertificatePathsPtrType)(v)
}

func (*tlsCertificatePathsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsCertificatePaths)(nil)).Elem()
}

func (i *tlsCertificatePathsPtrType) ToTlsCertificatePathsPtrOutput() TlsCertificatePathsPtrOutput {
	return i.ToTlsCertificatePathsPtrOutputWithContext(context.Background())
}

func (i *tlsCertificatePathsPtrType) ToTlsCertificatePathsPtrOutputWithContext(ctx context.Context) TlsCertificatePathsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificatePathsPtrOutput)
}

// [Deprecated] The paths to the mounted TLS Certificates and private key. The paths to the mounted TLS Certificates and private key.
type TlsCertificatePathsOutput struct{ *pulumi.OutputState }

func (TlsCertificatePathsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertificatePaths)(nil)).Elem()
}

func (o TlsCertificatePathsOutput) ToTlsCertificatePathsOutput() TlsCertificatePathsOutput {
	return o
}

func (o TlsCertificatePathsOutput) ToTlsCertificatePathsOutputWithContext(ctx context.Context) TlsCertificatePathsOutput {
	return o
}

func (o TlsCertificatePathsOutput) ToTlsCertificatePathsPtrOutput() TlsCertificatePathsPtrOutput {
	return o.ToTlsCertificatePathsPtrOutputWithContext(context.Background())
}

func (o TlsCertificatePathsOutput) ToTlsCertificatePathsPtrOutputWithContext(ctx context.Context) TlsCertificatePathsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TlsCertificatePaths) *TlsCertificatePaths {
		return &v
	}).(TlsCertificatePathsPtrOutput)
}

// The path to the file holding the client or server TLS certificate to use.
func (o TlsCertificatePathsOutput) CertificatePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TlsCertificatePaths) *string { return v.CertificatePath }).(pulumi.StringPtrOutput)
}

// The path to the file holding the client or server private key.
func (o TlsCertificatePathsOutput) PrivateKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TlsCertificatePaths) *string { return v.PrivateKeyPath }).(pulumi.StringPtrOutput)
}

type TlsCertificatePathsPtrOutput struct{ *pulumi.OutputState }

func (TlsCertificatePathsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsCertificatePaths)(nil)).Elem()
}

func (o TlsCertificatePathsPtrOutput) ToTlsCertificatePathsPtrOutput() TlsCertificatePathsPtrOutput {
	return o
}

func (o TlsCertificatePathsPtrOutput) ToTlsCertificatePathsPtrOutputWithContext(ctx context.Context) TlsCertificatePathsPtrOutput {
	return o
}

func (o TlsCertificatePathsPtrOutput) Elem() TlsCertificatePathsOutput {
	return o.ApplyT(func(v *TlsCertificatePaths) TlsCertificatePaths {
		if v != nil {
			return *v
		}
		var ret TlsCertificatePaths
		return ret
	}).(TlsCertificatePathsOutput)
}

// The path to the file holding the client or server TLS certificate to use.
func (o TlsCertificatePathsPtrOutput) CertificatePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsCertificatePaths) *string {
		if v == nil {
			return nil
		}
		return v.CertificatePath
	}).(pulumi.StringPtrOutput)
}

// The path to the file holding the client or server private key.
func (o TlsCertificatePathsPtrOutput) PrivateKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsCertificatePaths) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKeyPath
	}).(pulumi.StringPtrOutput)
}

// [Deprecated] The paths to the mounted TLS Certificates and private key. The paths to the mounted TLS Certificates and private key.
type TlsCertificatePathsResponse struct {
	// The path to the file holding the client or server TLS certificate to use.
	CertificatePath string `pulumi:"certificatePath"`
	// The path to the file holding the client or server private key.
	PrivateKeyPath string `pulumi:"privateKeyPath"`
}

// [Deprecated] The paths to the mounted TLS Certificates and private key. The paths to the mounted TLS Certificates and private key.
type TlsCertificatePathsResponseOutput struct{ *pulumi.OutputState }

func (TlsCertificatePathsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertificatePathsResponse)(nil)).Elem()
}

func (o TlsCertificatePathsResponseOutput) ToTlsCertificatePathsResponseOutput() TlsCertificatePathsResponseOutput {
	return o
}

func (o TlsCertificatePathsResponseOutput) ToTlsCertificatePathsResponseOutputWithContext(ctx context.Context) TlsCertificatePathsResponseOutput {
	return o
}

// The path to the file holding the client or server TLS certificate to use.
func (o TlsCertificatePathsResponseOutput) CertificatePath() pulumi.StringOutput {
	return o.ApplyT(func(v TlsCertificatePathsResponse) string { return v.CertificatePath }).(pulumi.StringOutput)
}

// The path to the file holding the client or server private key.
func (o TlsCertificatePathsResponseOutput) PrivateKeyPath() pulumi.StringOutput {
	return o.ApplyT(func(v TlsCertificatePathsResponse) string { return v.PrivateKeyPath }).(pulumi.StringOutput)
}

// [Deprecated] The TLS settings for the client or server. The TLS settings for the client or server.
type TlsContext struct {
	// Defines the mechanism to obtain the client or server certificate.
	CertificateContext *TlsCertificateContext `pulumi:"certificateContext"`
	// Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. If omitted, the proxy will not validate the server or client certificate.
	ValidationContext *TlsValidationContext `pulumi:"validationContext"`
}

// TlsContextInput is an input type that accepts TlsContextArgs and TlsContextOutput values.
// You can construct a concrete instance of `TlsContextInput` via:
//
//	TlsContextArgs{...}
type TlsContextInput interface {
	pulumi.Input

	ToTlsContextOutput() TlsContextOutput
	ToTlsContextOutputWithContext(context.Context) TlsContextOutput
}

// [Deprecated] The TLS settings for the client or server. The TLS settings for the client or server.
type TlsContextArgs struct {
	// Defines the mechanism to obtain the client or server certificate.
	CertificateContext TlsCertificateContextPtrInput `pulumi:"certificateContext"`
	// Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. If omitted, the proxy will not validate the server or client certificate.
	ValidationContext TlsValidationContextPtrInput `pulumi:"validationContext"`
}

func (TlsContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsContext)(nil)).Elem()
}

func (i TlsContextArgs) ToTlsContextOutput() TlsContextOutput {
	return i.ToTlsContextOutputWithContext(context.Background())
}

func (i TlsContextArgs) ToTlsContextOutputWithContext(ctx context.Context) TlsContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsContextOutput)
}

func (i TlsContextArgs) ToTlsContextPtrOutput() TlsContextPtrOutput {
	return i.ToTlsContextPtrOutputWithContext(context.Background())
}

func (i TlsContextArgs) ToTlsContextPtrOutputWithContext(ctx context.Context) TlsContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsContextOutput).ToTlsContextPtrOutputWithContext(ctx)
}

// TlsContextPtrInput is an input type that accepts TlsContextArgs, TlsContextPtr and TlsContextPtrOutput values.
// You can construct a concrete instance of `TlsContextPtrInput` via:
//
//	        TlsContextArgs{...}
//
//	or:
//
//	        nil
type TlsContextPtrInput interface {
	pulumi.Input

	ToTlsContextPtrOutput() TlsContextPtrOutput
	ToTlsContextPtrOutputWithContext(context.Context) TlsContextPtrOutput
}

type tlsContextPtrType TlsContextArgs

func TlsContextPtr(v *TlsContextArgs) TlsContextPtrInput {
	return (*tlsContextPtrType)(v)
}

func (*tlsContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsContext)(nil)).Elem()
}

func (i *tlsContextPtrType) ToTlsContextPtrOutput() TlsContextPtrOutput {
	return i.ToTlsContextPtrOutputWithContext(context.Background())
}

func (i *tlsContextPtrType) ToTlsContextPtrOutputWithContext(ctx context.Context) TlsContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsContextPtrOutput)
}

// [Deprecated] The TLS settings for the client or server. The TLS settings for the client or server.
type TlsContextOutput struct{ *pulumi.OutputState }

func (TlsContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsContext)(nil)).Elem()
}

func (o TlsContextOutput) ToTlsContextOutput() TlsContextOutput {
	return o
}

func (o TlsContextOutput) ToTlsContextOutputWithContext(ctx context.Context) TlsContextOutput {
	return o
}

func (o TlsContextOutput) ToTlsContextPtrOutput() TlsContextPtrOutput {
	return o.ToTlsContextPtrOutputWithContext(context.Background())
}

func (o TlsContextOutput) ToTlsContextPtrOutputWithContext(ctx context.Context) TlsContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TlsContext) *TlsContext {
		return &v
	}).(TlsContextPtrOutput)
}

// Defines the mechanism to obtain the client or server certificate.
func (o TlsContextOutput) CertificateContext() TlsCertificateContextPtrOutput {
	return o.ApplyT(func(v TlsContext) *TlsCertificateContext { return v.CertificateContext }).(TlsCertificateContextPtrOutput)
}

// Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. If omitted, the proxy will not validate the server or client certificate.
func (o TlsContextOutput) ValidationContext() TlsValidationContextPtrOutput {
	return o.ApplyT(func(v TlsContext) *TlsValidationContext { return v.ValidationContext }).(TlsValidationContextPtrOutput)
}

type TlsContextPtrOutput struct{ *pulumi.OutputState }

func (TlsContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsContext)(nil)).Elem()
}

func (o TlsContextPtrOutput) ToTlsContextPtrOutput() TlsContextPtrOutput {
	return o
}

func (o TlsContextPtrOutput) ToTlsContextPtrOutputWithContext(ctx context.Context) TlsContextPtrOutput {
	return o
}

func (o TlsContextPtrOutput) Elem() TlsContextOutput {
	return o.ApplyT(func(v *TlsContext) TlsContext {
		if v != nil {
			return *v
		}
		var ret TlsContext
		return ret
	}).(TlsContextOutput)
}

// Defines the mechanism to obtain the client or server certificate.
func (o TlsContextPtrOutput) CertificateContext() TlsCertificateContextPtrOutput {
	return o.ApplyT(func(v *TlsContext) *TlsCertificateContext {
		if v == nil {
			return nil
		}
		return v.CertificateContext
	}).(TlsCertificateContextPtrOutput)
}

// Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. If omitted, the proxy will not validate the server or client certificate.
func (o TlsContextPtrOutput) ValidationContext() TlsValidationContextPtrOutput {
	return o.ApplyT(func(v *TlsContext) *TlsValidationContext {
		if v == nil {
			return nil
		}
		return v.ValidationContext
	}).(TlsValidationContextPtrOutput)
}

// [Deprecated] The TLS settings for the client or server. The TLS settings for the client or server.
type TlsContextResponse struct {
	// Defines the mechanism to obtain the client or server certificate.
	CertificateContext TlsCertificateContextResponse `pulumi:"certificateContext"`
	// Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. If omitted, the proxy will not validate the server or client certificate.
	ValidationContext TlsValidationContextResponse `pulumi:"validationContext"`
}

// [Deprecated] The TLS settings for the client or server. The TLS settings for the client or server.
type TlsContextResponseOutput struct{ *pulumi.OutputState }

func (TlsContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsContextResponse)(nil)).Elem()
}

func (o TlsContextResponseOutput) ToTlsContextResponseOutput() TlsContextResponseOutput {
	return o
}

func (o TlsContextResponseOutput) ToTlsContextResponseOutputWithContext(ctx context.Context) TlsContextResponseOutput {
	return o
}

// Defines the mechanism to obtain the client or server certificate.
func (o TlsContextResponseOutput) CertificateContext() TlsCertificateContextResponseOutput {
	return o.ApplyT(func(v TlsContextResponse) TlsCertificateContextResponse { return v.CertificateContext }).(TlsCertificateContextResponseOutput)
}

// Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. If omitted, the proxy will not validate the server or client certificate.
func (o TlsContextResponseOutput) ValidationContext() TlsValidationContextResponseOutput {
	return o.ApplyT(func(v TlsContextResponse) TlsValidationContextResponse { return v.ValidationContext }).(TlsValidationContextResponseOutput)
}

// [Deprecated] Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. validate the client/server certificate.
type TlsValidationContext struct {
	// The path to the file holding the CA certificate to validate the client or server certificate.
	CertificatePath *string `pulumi:"certificatePath"`
	// Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
	SdsConfig *SdsConfig `pulumi:"sdsConfig"`
	// Defines how TLS certificates are obtained.
	ValidationSource *TlsValidationContextValidationSource `pulumi:"validationSource"`
}

// TlsValidationContextInput is an input type that accepts TlsValidationContextArgs and TlsValidationContextOutput values.
// You can construct a concrete instance of `TlsValidationContextInput` via:
//
//	TlsValidationContextArgs{...}
type TlsValidationContextInput interface {
	pulumi.Input

	ToTlsValidationContextOutput() TlsValidationContextOutput
	ToTlsValidationContextOutputWithContext(context.Context) TlsValidationContextOutput
}

// [Deprecated] Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. validate the client/server certificate.
type TlsValidationContextArgs struct {
	// The path to the file holding the CA certificate to validate the client or server certificate.
	CertificatePath pulumi.StringPtrInput `pulumi:"certificatePath"`
	// Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
	SdsConfig SdsConfigPtrInput `pulumi:"sdsConfig"`
	// Defines how TLS certificates are obtained.
	ValidationSource TlsValidationContextValidationSourcePtrInput `pulumi:"validationSource"`
}

func (TlsValidationContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsValidationContext)(nil)).Elem()
}

func (i TlsValidationContextArgs) ToTlsValidationContextOutput() TlsValidationContextOutput {
	return i.ToTlsValidationContextOutputWithContext(context.Background())
}

func (i TlsValidationContextArgs) ToTlsValidationContextOutputWithContext(ctx context.Context) TlsValidationContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsValidationContextOutput)
}

func (i TlsValidationContextArgs) ToTlsValidationContextPtrOutput() TlsValidationContextPtrOutput {
	return i.ToTlsValidationContextPtrOutputWithContext(context.Background())
}

func (i TlsValidationContextArgs) ToTlsValidationContextPtrOutputWithContext(ctx context.Context) TlsValidationContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsValidationContextOutput).ToTlsValidationContextPtrOutputWithContext(ctx)
}

// TlsValidationContextPtrInput is an input type that accepts TlsValidationContextArgs, TlsValidationContextPtr and TlsValidationContextPtrOutput values.
// You can construct a concrete instance of `TlsValidationContextPtrInput` via:
//
//	        TlsValidationContextArgs{...}
//
//	or:
//
//	        nil
type TlsValidationContextPtrInput interface {
	pulumi.Input

	ToTlsValidationContextPtrOutput() TlsValidationContextPtrOutput
	ToTlsValidationContextPtrOutputWithContext(context.Context) TlsValidationContextPtrOutput
}

type tlsValidationContextPtrType TlsValidationContextArgs

func TlsValidationContextPtr(v *TlsValidationContextArgs) TlsValidationContextPtrInput {
	return (*tlsValidationContextPtrType)(v)
}

func (*tlsValidationContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsValidationContext)(nil)).Elem()
}

func (i *tlsValidationContextPtrType) ToTlsValidationContextPtrOutput() TlsValidationContextPtrOutput {
	return i.ToTlsValidationContextPtrOutputWithContext(context.Background())
}

func (i *tlsValidationContextPtrType) ToTlsValidationContextPtrOutputWithContext(ctx context.Context) TlsValidationContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsValidationContextPtrOutput)
}

// [Deprecated] Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. validate the client/server certificate.
type TlsValidationContextOutput struct{ *pulumi.OutputState }

func (TlsValidationContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsValidationContext)(nil)).Elem()
}

func (o TlsValidationContextOutput) ToTlsValidationContextOutput() TlsValidationContextOutput {
	return o
}

func (o TlsValidationContextOutput) ToTlsValidationContextOutputWithContext(ctx context.Context) TlsValidationContextOutput {
	return o
}

func (o TlsValidationContextOutput) ToTlsValidationContextPtrOutput() TlsValidationContextPtrOutput {
	return o.ToTlsValidationContextPtrOutputWithContext(context.Background())
}

func (o TlsValidationContextOutput) ToTlsValidationContextPtrOutputWithContext(ctx context.Context) TlsValidationContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TlsValidationContext) *TlsValidationContext {
		return &v
	}).(TlsValidationContextPtrOutput)
}

// The path to the file holding the CA certificate to validate the client or server certificate.
func (o TlsValidationContextOutput) CertificatePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TlsValidationContext) *string { return v.CertificatePath }).(pulumi.StringPtrOutput)
}

// Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
func (o TlsValidationContextOutput) SdsConfig() SdsConfigPtrOutput {
	return o.ApplyT(func(v TlsValidationContext) *SdsConfig { return v.SdsConfig }).(SdsConfigPtrOutput)
}

// Defines how TLS certificates are obtained.
func (o TlsValidationContextOutput) ValidationSource() TlsValidationContextValidationSourcePtrOutput {
	return o.ApplyT(func(v TlsValidationContext) *TlsValidationContextValidationSource { return v.ValidationSource }).(TlsValidationContextValidationSourcePtrOutput)
}

type TlsValidationContextPtrOutput struct{ *pulumi.OutputState }

func (TlsValidationContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsValidationContext)(nil)).Elem()
}

func (o TlsValidationContextPtrOutput) ToTlsValidationContextPtrOutput() TlsValidationContextPtrOutput {
	return o
}

func (o TlsValidationContextPtrOutput) ToTlsValidationContextPtrOutputWithContext(ctx context.Context) TlsValidationContextPtrOutput {
	return o
}

func (o TlsValidationContextPtrOutput) Elem() TlsValidationContextOutput {
	return o.ApplyT(func(v *TlsValidationContext) TlsValidationContext {
		if v != nil {
			return *v
		}
		var ret TlsValidationContext
		return ret
	}).(TlsValidationContextOutput)
}

// The path to the file holding the CA certificate to validate the client or server certificate.
func (o TlsValidationContextPtrOutput) CertificatePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsValidationContext) *string {
		if v == nil {
			return nil
		}
		return v.CertificatePath
	}).(pulumi.StringPtrOutput)
}

// Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
func (o TlsValidationContextPtrOutput) SdsConfig() SdsConfigPtrOutput {
	return o.ApplyT(func(v *TlsValidationContext) *SdsConfig {
		if v == nil {
			return nil
		}
		return v.SdsConfig
	}).(SdsConfigPtrOutput)
}

// Defines how TLS certificates are obtained.
func (o TlsValidationContextPtrOutput) ValidationSource() TlsValidationContextValidationSourcePtrOutput {
	return o.ApplyT(func(v *TlsValidationContext) *TlsValidationContextValidationSource {
		if v == nil {
			return nil
		}
		return v.ValidationSource
	}).(TlsValidationContextValidationSourcePtrOutput)
}

// [Deprecated] Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. validate the client/server certificate.
type TlsValidationContextResponse struct {
	// The path to the file holding the CA certificate to validate the client or server certificate.
	CertificatePath string `pulumi:"certificatePath"`
	// Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
	SdsConfig SdsConfigResponse `pulumi:"sdsConfig"`
	// Defines how TLS certificates are obtained.
	ValidationSource string `pulumi:"validationSource"`
}

// [Deprecated] Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. validate the client/server certificate.
type TlsValidationContextResponseOutput struct{ *pulumi.OutputState }

func (TlsValidationContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsValidationContextResponse)(nil)).Elem()
}

func (o TlsValidationContextResponseOutput) ToTlsValidationContextResponseOutput() TlsValidationContextResponseOutput {
	return o
}

func (o TlsValidationContextResponseOutput) ToTlsValidationContextResponseOutputWithContext(ctx context.Context) TlsValidationContextResponseOutput {
	return o
}

// The path to the file holding the CA certificate to validate the client or server certificate.
func (o TlsValidationContextResponseOutput) CertificatePath() pulumi.StringOutput {
	return o.ApplyT(func(v TlsValidationContextResponse) string { return v.CertificatePath }).(pulumi.StringOutput)
}

// Specifies the config to retrieve certificates through SDS. This field is applicable only if tlsCertificateSource is set to USE_SDS.
func (o TlsValidationContextResponseOutput) SdsConfig() SdsConfigResponseOutput {
	return o.ApplyT(func(v TlsValidationContextResponse) SdsConfigResponse { return v.SdsConfig }).(SdsConfigResponseOutput)
}

// Defines how TLS certificates are obtained.
func (o TlsValidationContextResponseOutput) ValidationSource() pulumi.StringOutput {
	return o.ApplyT(func(v TlsValidationContextResponse) string { return v.ValidationSource }).(pulumi.StringOutput)
}

type UDPHealthCheck struct {
	// The UDP port number to which the health check prober sends packets. Valid values are 1 through 65535.
	Port *int `pulumi:"port"`
	// Not supported.
	PortName *string `pulumi:"portName"`
	// Raw data of request to send in payload of UDP packet. It is an error if this is empty. The request data can only be ASCII.
	Request *string `pulumi:"request"`
	// The bytes to match against the beginning of the response data. It is an error if this is empty. The response data can only be ASCII.
	Response *string `pulumi:"response"`
}

// UDPHealthCheckInput is an input type that accepts UDPHealthCheckArgs and UDPHealthCheckOutput values.
// You can construct a concrete instance of `UDPHealthCheckInput` via:
//
//	UDPHealthCheckArgs{...}
type UDPHealthCheckInput interface {
	pulumi.Input

	ToUDPHealthCheckOutput() UDPHealthCheckOutput
	ToUDPHealthCheckOutputWithContext(context.Context) UDPHealthCheckOutput
}

type UDPHealthCheckArgs struct {
	// The UDP port number to which the health check prober sends packets. Valid values are 1 through 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Not supported.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Raw data of request to send in payload of UDP packet. It is an error if this is empty. The request data can only be ASCII.
	Request pulumi.StringPtrInput `pulumi:"request"`
	// The bytes to match against the beginning of the response data. It is an error if this is empty. The response data can only be ASCII.
	Response pulumi.StringPtrInput `pulumi:"response"`
}

func (UDPHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UDPHealthCheck)(nil)).Elem()
}

func (i UDPHealthCheckArgs) ToUDPHealthCheckOutput() UDPHealthCheckOutput {
	return i.ToUDPHealthCheckOutputWithContext(context.Background())
}

func (i UDPHealthCheckArgs) ToUDPHealthCheckOutputWithContext(ctx context.Context) UDPHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UDPHealthCheckOutput)
}

func (i UDPHealthCheckArgs) ToUDPHealthCheckPtrOutput() UDPHealthCheckPtrOutput {
	return i.ToUDPHealthCheckPtrOutputWithContext(context.Background())
}

func (i UDPHealthCheckArgs) ToUDPHealthCheckPtrOutputWithContext(ctx context.Context) UDPHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UDPHealthCheckOutput).ToUDPHealthCheckPtrOutputWithContext(ctx)
}

// UDPHealthCheckPtrInput is an input type that accepts UDPHealthCheckArgs, UDPHealthCheckPtr and UDPHealthCheckPtrOutput values.
// You can construct a concrete instance of `UDPHealthCheckPtrInput` via:
//
//	        UDPHealthCheckArgs{...}
//
//	or:
//
//	        nil
type UDPHealthCheckPtrInput interface {
	pulumi.Input

	ToUDPHealthCheckPtrOutput() UDPHealthCheckPtrOutput
	ToUDPHealthCheckPtrOutputWithContext(context.Context) UDPHealthCheckPtrOutput
}

type udphealthCheckPtrType UDPHealthCheckArgs

func UDPHealthCheckPtr(v *UDPHealthCheckArgs) UDPHealthCheckPtrInput {
	return (*udphealthCheckPtrType)(v)
}

func (*udphealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UDPHealthCheck)(nil)).Elem()
}

func (i *udphealthCheckPtrType) ToUDPHealthCheckPtrOutput() UDPHealthCheckPtrOutput {
	return i.ToUDPHealthCheckPtrOutputWithContext(context.Background())
}

func (i *udphealthCheckPtrType) ToUDPHealthCheckPtrOutputWithContext(ctx context.Context) UDPHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UDPHealthCheckPtrOutput)
}

type UDPHealthCheckOutput struct{ *pulumi.OutputState }

func (UDPHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UDPHealthCheck)(nil)).Elem()
}

func (o UDPHealthCheckOutput) ToUDPHealthCheckOutput() UDPHealthCheckOutput {
	return o
}

func (o UDPHealthCheckOutput) ToUDPHealthCheckOutputWithContext(ctx context.Context) UDPHealthCheckOutput {
	return o
}

func (o UDPHealthCheckOutput) ToUDPHealthCheckPtrOutput() UDPHealthCheckPtrOutput {
	return o.ToUDPHealthCheckPtrOutputWithContext(context.Background())
}

func (o UDPHealthCheckOutput) ToUDPHealthCheckPtrOutputWithContext(ctx context.Context) UDPHealthCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UDPHealthCheck) *UDPHealthCheck {
		return &v
	}).(UDPHealthCheckPtrOutput)
}

// The UDP port number to which the health check prober sends packets. Valid values are 1 through 65535.
func (o UDPHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UDPHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Not supported.
func (o UDPHealthCheckOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UDPHealthCheck) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Raw data of request to send in payload of UDP packet. It is an error if this is empty. The request data can only be ASCII.
func (o UDPHealthCheckOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UDPHealthCheck) *string { return v.Request }).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. It is an error if this is empty. The response data can only be ASCII.
func (o UDPHealthCheckOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UDPHealthCheck) *string { return v.Response }).(pulumi.StringPtrOutput)
}

type UDPHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (UDPHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UDPHealthCheck)(nil)).Elem()
}

func (o UDPHealthCheckPtrOutput) ToUDPHealthCheckPtrOutput() UDPHealthCheckPtrOutput {
	return o
}

func (o UDPHealthCheckPtrOutput) ToUDPHealthCheckPtrOutputWithContext(ctx context.Context) UDPHealthCheckPtrOutput {
	return o
}

func (o UDPHealthCheckPtrOutput) Elem() UDPHealthCheckOutput {
	return o.ApplyT(func(v *UDPHealthCheck) UDPHealthCheck {
		if v != nil {
			return *v
		}
		var ret UDPHealthCheck
		return ret
	}).(UDPHealthCheckOutput)
}

// The UDP port number to which the health check prober sends packets. Valid values are 1 through 65535.
func (o UDPHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UDPHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Not supported.
func (o UDPHealthCheckPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UDPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Raw data of request to send in payload of UDP packet. It is an error if this is empty. The request data can only be ASCII.
func (o UDPHealthCheckPtrOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UDPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Request
	}).(pulumi.StringPtrOutput)
}

// The bytes to match against the beginning of the response data. It is an error if this is empty. The response data can only be ASCII.
func (o UDPHealthCheckPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UDPHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

type UDPHealthCheckResponse struct {
	// The UDP port number to which the health check prober sends packets. Valid values are 1 through 65535.
	Port int `pulumi:"port"`
	// Not supported.
	PortName string `pulumi:"portName"`
	// Raw data of request to send in payload of UDP packet. It is an error if this is empty. The request data can only be ASCII.
	Request string `pulumi:"request"`
	// The bytes to match against the beginning of the response data. It is an error if this is empty. The response data can only be ASCII.
	Response string `pulumi:"response"`
}

type UDPHealthCheckResponseOutput struct{ *pulumi.OutputState }

func (UDPHealthCheckResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UDPHealthCheckResponse)(nil)).Elem()
}

func (o UDPHealthCheckResponseOutput) ToUDPHealthCheckResponseOutput() UDPHealthCheckResponseOutput {
	return o
}

func (o UDPHealthCheckResponseOutput) ToUDPHealthCheckResponseOutputWithContext(ctx context.Context) UDPHealthCheckResponseOutput {
	return o
}

// The UDP port number to which the health check prober sends packets. Valid values are 1 through 65535.
func (o UDPHealthCheckResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v UDPHealthCheckResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Not supported.
func (o UDPHealthCheckResponseOutput) PortName() pulumi.StringOutput {
	return o.ApplyT(func(v UDPHealthCheckResponse) string { return v.PortName }).(pulumi.StringOutput)
}

// Raw data of request to send in payload of UDP packet. It is an error if this is empty. The request data can only be ASCII.
func (o UDPHealthCheckResponseOutput) Request() pulumi.StringOutput {
	return o.ApplyT(func(v UDPHealthCheckResponse) string { return v.Request }).(pulumi.StringOutput)
}

// The bytes to match against the beginning of the response data. It is an error if this is empty. The response data can only be ASCII.
func (o UDPHealthCheckResponseOutput) Response() pulumi.StringOutput {
	return o.ApplyT(func(v UDPHealthCheckResponse) string { return v.Response }).(pulumi.StringOutput)
}

type Uint128Response struct {
	High string `pulumi:"high"`
	Low  string `pulumi:"low"`
}

type Uint128ResponseOutput struct{ *pulumi.OutputState }

func (Uint128ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Uint128Response)(nil)).Elem()
}

func (o Uint128ResponseOutput) ToUint128ResponseOutput() Uint128ResponseOutput {
	return o
}

func (o Uint128ResponseOutput) ToUint128ResponseOutputWithContext(ctx context.Context) Uint128ResponseOutput {
	return o
}

func (o Uint128ResponseOutput) High() pulumi.StringOutput {
	return o.ApplyT(func(v Uint128Response) string { return v.High }).(pulumi.StringOutput)
}

func (o Uint128ResponseOutput) Low() pulumi.StringOutput {
	return o.ApplyT(func(v Uint128Response) string { return v.Low }).(pulumi.StringOutput)
}

// Upcoming Maintenance notification information. TODO(b/242069500) Deprecate this proto once it's fully migrated to be under proto ResourceStatus.UpcomingMaintenance.
type UpcomingMaintenanceResponse struct {
	// Indicates if the maintenance can be customer triggered. From more detail, see go/sf-ctm-design.
	CanReschedule bool `pulumi:"canReschedule"`
	// The date when the maintenance will take place. This value is in RFC3339 text format. DEPRECATED: Use start_time_window instead.
	//
	// Deprecated: [Output Only] The date when the maintenance will take place. This value is in RFC3339 text format. DEPRECATED: Use start_time_window instead.
	Date string `pulumi:"date"`
	// The start time window of the maintenance disruption.
	StartTimeWindow UpcomingMaintenanceTimeWindowResponse `pulumi:"startTimeWindow"`
	// The time when the maintenance will take place. This value is in RFC3339 text format. DEPRECATED: Use start_time_window instead.
	//
	// Deprecated: [Output Only] The time when the maintenance will take place. This value is in RFC3339 text format. DEPRECATED: Use start_time_window instead.
	Time string `pulumi:"time"`
	// Defines the type of maintenance.
	Type string `pulumi:"type"`
}

// Upcoming Maintenance notification information. TODO(b/242069500) Deprecate this proto once it's fully migrated to be under proto ResourceStatus.UpcomingMaintenance.
type UpcomingMaintenanceResponseOutput struct{ *pulumi.OutputState }

func (UpcomingMaintenanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpcomingMaintenanceResponse)(nil)).Elem()
}

func (o UpcomingMaintenanceResponseOutput) ToUpcomingMaintenanceResponseOutput() UpcomingMaintenanceResponseOutput {
	return o
}

func (o UpcomingMaintenanceResponseOutput) ToUpcomingMaintenanceResponseOutputWithContext(ctx context.Context) UpcomingMaintenanceResponseOutput {
	return o
}

// Indicates if the maintenance can be customer triggered. From more detail, see go/sf-ctm-design.
func (o UpcomingMaintenanceResponseOutput) CanReschedule() pulumi.BoolOutput {
	return o.ApplyT(func(v UpcomingMaintenanceResponse) bool { return v.CanReschedule }).(pulumi.BoolOutput)
}

// The date when the maintenance will take place. This value is in RFC3339 text format. DEPRECATED: Use start_time_window instead.
//
// Deprecated: [Output Only] The date when the maintenance will take place. This value is in RFC3339 text format. DEPRECATED: Use start_time_window instead.
func (o UpcomingMaintenanceResponseOutput) Date() pulumi.StringOutput {
	return o.ApplyT(func(v UpcomingMaintenanceResponse) string { return v.Date }).(pulumi.StringOutput)
}

// The start time window of the maintenance disruption.
func (o UpcomingMaintenanceResponseOutput) StartTimeWindow() UpcomingMaintenanceTimeWindowResponseOutput {
	return o.ApplyT(func(v UpcomingMaintenanceResponse) UpcomingMaintenanceTimeWindowResponse { return v.StartTimeWindow }).(UpcomingMaintenanceTimeWindowResponseOutput)
}

// The time when the maintenance will take place. This value is in RFC3339 text format. DEPRECATED: Use start_time_window instead.
//
// Deprecated: [Output Only] The time when the maintenance will take place. This value is in RFC3339 text format. DEPRECATED: Use start_time_window instead.
func (o UpcomingMaintenanceResponseOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v UpcomingMaintenanceResponse) string { return v.Time }).(pulumi.StringOutput)
}

// Defines the type of maintenance.
func (o UpcomingMaintenanceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UpcomingMaintenanceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Represents a window of time using two timestamps: `earliest` and `latest`. This timestamp values are in RFC3339 text format.
type UpcomingMaintenanceTimeWindowResponse struct {
	Earliest string `pulumi:"earliest"`
	Latest   string `pulumi:"latest"`
}

// Represents a window of time using two timestamps: `earliest` and `latest`. This timestamp values are in RFC3339 text format.
type UpcomingMaintenanceTimeWindowResponseOutput struct{ *pulumi.OutputState }

func (UpcomingMaintenanceTimeWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpcomingMaintenanceTimeWindowResponse)(nil)).Elem()
}

func (o UpcomingMaintenanceTimeWindowResponseOutput) ToUpcomingMaintenanceTimeWindowResponseOutput() UpcomingMaintenanceTimeWindowResponseOutput {
	return o
}

func (o UpcomingMaintenanceTimeWindowResponseOutput) ToUpcomingMaintenanceTimeWindowResponseOutputWithContext(ctx context.Context) UpcomingMaintenanceTimeWindowResponseOutput {
	return o
}

func (o UpcomingMaintenanceTimeWindowResponseOutput) Earliest() pulumi.StringOutput {
	return o.ApplyT(func(v UpcomingMaintenanceTimeWindowResponse) string { return v.Earliest }).(pulumi.StringOutput)
}

func (o UpcomingMaintenanceTimeWindowResponseOutput) Latest() pulumi.StringOutput {
	return o.ApplyT(func(v UpcomingMaintenanceTimeWindowResponse) string { return v.Latest }).(pulumi.StringOutput)
}

// Message for the expected URL mappings.
type UrlMapTest struct {
	// The weight to use for the supplied host and path when using advanced routing rules that involve traffic splitting.
	BackendServiceWeight *int `pulumi:"backendServiceWeight"`
	// Description of this test case.
	Description *string `pulumi:"description"`
	// The expected output URL evaluated by the load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by the load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to HTTPS. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified.
	ExpectedOutputUrl *string `pulumi:"expectedOutputUrl"`
	// For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode cannot be set when service is set.
	ExpectedRedirectResponseCode *int `pulumi:"expectedRedirectResponseCode"`
	// The expected URL that should be redirected to for the host and path being tested. [Deprecated] This field is deprecated. Use expected_output_url instead.
	//
	// Deprecated: The expected URL that should be redirected to for the host and path being tested. [Deprecated] This field is deprecated. Use expected_output_url instead.
	ExpectedUrlRedirect *string `pulumi:"expectedUrlRedirect"`
	// HTTP headers for this request. If headers contains a host header, then host must also match the header value.
	Headers []UrlMapTestHeader `pulumi:"headers"`
	// Host portion of the URL. If headers contains a host header, then host must also match the header value.
	Host *string `pulumi:"host"`
	// Path portion of the URL.
	Path *string `pulumi:"path"`
	// Expected BackendService or BackendBucket resource the given URL should be mapped to. The service field cannot be set if expectedRedirectResponseCode is set.
	Service *string `pulumi:"service"`
}

// UrlMapTestInput is an input type that accepts UrlMapTestArgs and UrlMapTestOutput values.
// You can construct a concrete instance of `UrlMapTestInput` via:
//
//	UrlMapTestArgs{...}
type UrlMapTestInput interface {
	pulumi.Input

	ToUrlMapTestOutput() UrlMapTestOutput
	ToUrlMapTestOutputWithContext(context.Context) UrlMapTestOutput
}

// Message for the expected URL mappings.
type UrlMapTestArgs struct {
	// The weight to use for the supplied host and path when using advanced routing rules that involve traffic splitting.
	BackendServiceWeight pulumi.IntPtrInput `pulumi:"backendServiceWeight"`
	// Description of this test case.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The expected output URL evaluated by the load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by the load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to HTTPS. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified.
	ExpectedOutputUrl pulumi.StringPtrInput `pulumi:"expectedOutputUrl"`
	// For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode cannot be set when service is set.
	ExpectedRedirectResponseCode pulumi.IntPtrInput `pulumi:"expectedRedirectResponseCode"`
	// The expected URL that should be redirected to for the host and path being tested. [Deprecated] This field is deprecated. Use expected_output_url instead.
	//
	// Deprecated: The expected URL that should be redirected to for the host and path being tested. [Deprecated] This field is deprecated. Use expected_output_url instead.
	ExpectedUrlRedirect pulumi.StringPtrInput `pulumi:"expectedUrlRedirect"`
	// HTTP headers for this request. If headers contains a host header, then host must also match the header value.
	Headers UrlMapTestHeaderArrayInput `pulumi:"headers"`
	// Host portion of the URL. If headers contains a host header, then host must also match the header value.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Path portion of the URL.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Expected BackendService or BackendBucket resource the given URL should be mapped to. The service field cannot be set if expectedRedirectResponseCode is set.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (UrlMapTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMapTest)(nil)).Elem()
}

func (i UrlMapTestArgs) ToUrlMapTestOutput() UrlMapTestOutput {
	return i.ToUrlMapTestOutputWithContext(context.Background())
}

func (i UrlMapTestArgs) ToUrlMapTestOutputWithContext(ctx context.Context) UrlMapTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMapTestOutput)
}

// UrlMapTestArrayInput is an input type that accepts UrlMapTestArray and UrlMapTestArrayOutput values.
// You can construct a concrete instance of `UrlMapTestArrayInput` via:
//
//	UrlMapTestArray{ UrlMapTestArgs{...} }
type UrlMapTestArrayInput interface {
	pulumi.Input

	ToUrlMapTestArrayOutput() UrlMapTestArrayOutput
	ToUrlMapTestArrayOutputWithContext(context.Context) UrlMapTestArrayOutput
}

type UrlMapTestArray []UrlMapTestInput

func (UrlMapTestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMapTest)(nil)).Elem()
}

func (i UrlMapTestArray) ToUrlMapTestArrayOutput() UrlMapTestArrayOutput {
	return i.ToUrlMapTestArrayOutputWithContext(context.Background())
}

func (i UrlMapTestArray) ToUrlMapTestArrayOutputWithContext(ctx context.Context) UrlMapTestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMapTestArrayOutput)
}

// Message for the expected URL mappings.
type UrlMapTestOutput struct{ *pulumi.OutputState }

func (UrlMapTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMapTest)(nil)).Elem()
}

func (o UrlMapTestOutput) ToUrlMapTestOutput() UrlMapTestOutput {
	return o
}

func (o UrlMapTestOutput) ToUrlMapTestOutputWithContext(ctx context.Context) UrlMapTestOutput {
	return o
}

// The weight to use for the supplied host and path when using advanced routing rules that involve traffic splitting.
func (o UrlMapTestOutput) BackendServiceWeight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UrlMapTest) *int { return v.BackendServiceWeight }).(pulumi.IntPtrOutput)
}

// Description of this test case.
func (o UrlMapTestOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMapTest) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The expected output URL evaluated by the load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by the load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to HTTPS. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified.
func (o UrlMapTestOutput) ExpectedOutputUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMapTest) *string { return v.ExpectedOutputUrl }).(pulumi.StringPtrOutput)
}

// For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode cannot be set when service is set.
func (o UrlMapTestOutput) ExpectedRedirectResponseCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UrlMapTest) *int { return v.ExpectedRedirectResponseCode }).(pulumi.IntPtrOutput)
}

// The expected URL that should be redirected to for the host and path being tested. [Deprecated] This field is deprecated. Use expected_output_url instead.
//
// Deprecated: The expected URL that should be redirected to for the host and path being tested. [Deprecated] This field is deprecated. Use expected_output_url instead.
func (o UrlMapTestOutput) ExpectedUrlRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMapTest) *string { return v.ExpectedUrlRedirect }).(pulumi.StringPtrOutput)
}

// HTTP headers for this request. If headers contains a host header, then host must also match the header value.
func (o UrlMapTestOutput) Headers() UrlMapTestHeaderArrayOutput {
	return o.ApplyT(func(v UrlMapTest) []UrlMapTestHeader { return v.Headers }).(UrlMapTestHeaderArrayOutput)
}

// Host portion of the URL. If headers contains a host header, then host must also match the header value.
func (o UrlMapTestOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMapTest) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Path portion of the URL.
func (o UrlMapTestOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMapTest) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Expected BackendService or BackendBucket resource the given URL should be mapped to. The service field cannot be set if expectedRedirectResponseCode is set.
func (o UrlMapTestOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMapTest) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type UrlMapTestArrayOutput struct{ *pulumi.OutputState }

func (UrlMapTestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMapTest)(nil)).Elem()
}

func (o UrlMapTestArrayOutput) ToUrlMapTestArrayOutput() UrlMapTestArrayOutput {
	return o
}

func (o UrlMapTestArrayOutput) ToUrlMapTestArrayOutputWithContext(ctx context.Context) UrlMapTestArrayOutput {
	return o
}

func (o UrlMapTestArrayOutput) Index(i pulumi.IntInput) UrlMapTestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlMapTest {
		return vs[0].([]UrlMapTest)[vs[1].(int)]
	}).(UrlMapTestOutput)
}

// HTTP headers used in UrlMapTests.
type UrlMapTestHeader struct {
	// Header name.
	Name *string `pulumi:"name"`
	// Header value.
	Value *string `pulumi:"value"`
}

// UrlMapTestHeaderInput is an input type that accepts UrlMapTestHeaderArgs and UrlMapTestHeaderOutput values.
// You can construct a concrete instance of `UrlMapTestHeaderInput` via:
//
//	UrlMapTestHeaderArgs{...}
type UrlMapTestHeaderInput interface {
	pulumi.Input

	ToUrlMapTestHeaderOutput() UrlMapTestHeaderOutput
	ToUrlMapTestHeaderOutputWithContext(context.Context) UrlMapTestHeaderOutput
}

// HTTP headers used in UrlMapTests.
type UrlMapTestHeaderArgs struct {
	// Header name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Header value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (UrlMapTestHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMapTestHeader)(nil)).Elem()
}

func (i UrlMapTestHeaderArgs) ToUrlMapTestHeaderOutput() UrlMapTestHeaderOutput {
	return i.ToUrlMapTestHeaderOutputWithContext(context.Background())
}

func (i UrlMapTestHeaderArgs) ToUrlMapTestHeaderOutputWithContext(ctx context.Context) UrlMapTestHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMapTestHeaderOutput)
}

// UrlMapTestHeaderArrayInput is an input type that accepts UrlMapTestHeaderArray and UrlMapTestHeaderArrayOutput values.
// You can construct a concrete instance of `UrlMapTestHeaderArrayInput` via:
//
//	UrlMapTestHeaderArray{ UrlMapTestHeaderArgs{...} }
type UrlMapTestHeaderArrayInput interface {
	pulumi.Input

	ToUrlMapTestHeaderArrayOutput() UrlMapTestHeaderArrayOutput
	ToUrlMapTestHeaderArrayOutputWithContext(context.Context) UrlMapTestHeaderArrayOutput
}

type UrlMapTestHeaderArray []UrlMapTestHeaderInput

func (UrlMapTestHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMapTestHeader)(nil)).Elem()
}

func (i UrlMapTestHeaderArray) ToUrlMapTestHeaderArrayOutput() UrlMapTestHeaderArrayOutput {
	return i.ToUrlMapTestHeaderArrayOutputWithContext(context.Background())
}

func (i UrlMapTestHeaderArray) ToUrlMapTestHeaderArrayOutputWithContext(ctx context.Context) UrlMapTestHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMapTestHeaderArrayOutput)
}

// HTTP headers used in UrlMapTests.
type UrlMapTestHeaderOutput struct{ *pulumi.OutputState }

func (UrlMapTestHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMapTestHeader)(nil)).Elem()
}

func (o UrlMapTestHeaderOutput) ToUrlMapTestHeaderOutput() UrlMapTestHeaderOutput {
	return o
}

func (o UrlMapTestHeaderOutput) ToUrlMapTestHeaderOutputWithContext(ctx context.Context) UrlMapTestHeaderOutput {
	return o
}

// Header name.
func (o UrlMapTestHeaderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMapTestHeader) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Header value.
func (o UrlMapTestHeaderOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMapTestHeader) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type UrlMapTestHeaderArrayOutput struct{ *pulumi.OutputState }

func (UrlMapTestHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMapTestHeader)(nil)).Elem()
}

func (o UrlMapTestHeaderArrayOutput) ToUrlMapTestHeaderArrayOutput() UrlMapTestHeaderArrayOutput {
	return o
}

func (o UrlMapTestHeaderArrayOutput) ToUrlMapTestHeaderArrayOutputWithContext(ctx context.Context) UrlMapTestHeaderArrayOutput {
	return o
}

func (o UrlMapTestHeaderArrayOutput) Index(i pulumi.IntInput) UrlMapTestHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlMapTestHeader {
		return vs[0].([]UrlMapTestHeader)[vs[1].(int)]
	}).(UrlMapTestHeaderOutput)
}

// HTTP headers used in UrlMapTests.
type UrlMapTestHeaderResponse struct {
	// Header name.
	Name string `pulumi:"name"`
	// Header value.
	Value string `pulumi:"value"`
}

// HTTP headers used in UrlMapTests.
type UrlMapTestHeaderResponseOutput struct{ *pulumi.OutputState }

func (UrlMapTestHeaderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMapTestHeaderResponse)(nil)).Elem()
}

func (o UrlMapTestHeaderResponseOutput) ToUrlMapTestHeaderResponseOutput() UrlMapTestHeaderResponseOutput {
	return o
}

func (o UrlMapTestHeaderResponseOutput) ToUrlMapTestHeaderResponseOutputWithContext(ctx context.Context) UrlMapTestHeaderResponseOutput {
	return o
}

// Header name.
func (o UrlMapTestHeaderResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapTestHeaderResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Header value.
func (o UrlMapTestHeaderResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapTestHeaderResponse) string { return v.Value }).(pulumi.StringOutput)
}

type UrlMapTestHeaderResponseArrayOutput struct{ *pulumi.OutputState }

func (UrlMapTestHeaderResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMapTestHeaderResponse)(nil)).Elem()
}

func (o UrlMapTestHeaderResponseArrayOutput) ToUrlMapTestHeaderResponseArrayOutput() UrlMapTestHeaderResponseArrayOutput {
	return o
}

func (o UrlMapTestHeaderResponseArrayOutput) ToUrlMapTestHeaderResponseArrayOutputWithContext(ctx context.Context) UrlMapTestHeaderResponseArrayOutput {
	return o
}

func (o UrlMapTestHeaderResponseArrayOutput) Index(i pulumi.IntInput) UrlMapTestHeaderResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlMapTestHeaderResponse {
		return vs[0].([]UrlMapTestHeaderResponse)[vs[1].(int)]
	}).(UrlMapTestHeaderResponseOutput)
}

// Message for the expected URL mappings.
type UrlMapTestResponse struct {
	// The weight to use for the supplied host and path when using advanced routing rules that involve traffic splitting.
	BackendServiceWeight int `pulumi:"backendServiceWeight"`
	// Description of this test case.
	Description string `pulumi:"description"`
	// The expected output URL evaluated by the load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by the load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to HTTPS. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified.
	ExpectedOutputUrl string `pulumi:"expectedOutputUrl"`
	// For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode cannot be set when service is set.
	ExpectedRedirectResponseCode int `pulumi:"expectedRedirectResponseCode"`
	// The expected URL that should be redirected to for the host and path being tested. [Deprecated] This field is deprecated. Use expected_output_url instead.
	//
	// Deprecated: The expected URL that should be redirected to for the host and path being tested. [Deprecated] This field is deprecated. Use expected_output_url instead.
	ExpectedUrlRedirect string `pulumi:"expectedUrlRedirect"`
	// HTTP headers for this request. If headers contains a host header, then host must also match the header value.
	Headers []UrlMapTestHeaderResponse `pulumi:"headers"`
	// Host portion of the URL. If headers contains a host header, then host must also match the header value.
	Host string `pulumi:"host"`
	// Path portion of the URL.
	Path string `pulumi:"path"`
	// Expected BackendService or BackendBucket resource the given URL should be mapped to. The service field cannot be set if expectedRedirectResponseCode is set.
	Service string `pulumi:"service"`
}

// Message for the expected URL mappings.
type UrlMapTestResponseOutput struct{ *pulumi.OutputState }

func (UrlMapTestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMapTestResponse)(nil)).Elem()
}

func (o UrlMapTestResponseOutput) ToUrlMapTestResponseOutput() UrlMapTestResponseOutput {
	return o
}

func (o UrlMapTestResponseOutput) ToUrlMapTestResponseOutputWithContext(ctx context.Context) UrlMapTestResponseOutput {
	return o
}

// The weight to use for the supplied host and path when using advanced routing rules that involve traffic splitting.
func (o UrlMapTestResponseOutput) BackendServiceWeight() pulumi.IntOutput {
	return o.ApplyT(func(v UrlMapTestResponse) int { return v.BackendServiceWeight }).(pulumi.IntOutput)
}

// Description of this test case.
func (o UrlMapTestResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapTestResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The expected output URL evaluated by the load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by the load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to HTTPS. If urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified.
func (o UrlMapTestResponseOutput) ExpectedOutputUrl() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapTestResponse) string { return v.ExpectedOutputUrl }).(pulumi.StringOutput)
}

// For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode cannot be set when service is set.
func (o UrlMapTestResponseOutput) ExpectedRedirectResponseCode() pulumi.IntOutput {
	return o.ApplyT(func(v UrlMapTestResponse) int { return v.ExpectedRedirectResponseCode }).(pulumi.IntOutput)
}

// The expected URL that should be redirected to for the host and path being tested. [Deprecated] This field is deprecated. Use expected_output_url instead.
//
// Deprecated: The expected URL that should be redirected to for the host and path being tested. [Deprecated] This field is deprecated. Use expected_output_url instead.
func (o UrlMapTestResponseOutput) ExpectedUrlRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapTestResponse) string { return v.ExpectedUrlRedirect }).(pulumi.StringOutput)
}

// HTTP headers for this request. If headers contains a host header, then host must also match the header value.
func (o UrlMapTestResponseOutput) Headers() UrlMapTestHeaderResponseArrayOutput {
	return o.ApplyT(func(v UrlMapTestResponse) []UrlMapTestHeaderResponse { return v.Headers }).(UrlMapTestHeaderResponseArrayOutput)
}

// Host portion of the URL. If headers contains a host header, then host must also match the header value.
func (o UrlMapTestResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapTestResponse) string { return v.Host }).(pulumi.StringOutput)
}

// Path portion of the URL.
func (o UrlMapTestResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapTestResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Expected BackendService or BackendBucket resource the given URL should be mapped to. The service field cannot be set if expectedRedirectResponseCode is set.
func (o UrlMapTestResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMapTestResponse) string { return v.Service }).(pulumi.StringOutput)
}

type UrlMapTestResponseArrayOutput struct{ *pulumi.OutputState }

func (UrlMapTestResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMapTestResponse)(nil)).Elem()
}

func (o UrlMapTestResponseArrayOutput) ToUrlMapTestResponseArrayOutput() UrlMapTestResponseArrayOutput {
	return o
}

func (o UrlMapTestResponseArrayOutput) ToUrlMapTestResponseArrayOutputWithContext(ctx context.Context) UrlMapTestResponseArrayOutput {
	return o
}

func (o UrlMapTestResponseArrayOutput) Index(i pulumi.IntInput) UrlMapTestResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlMapTestResponse {
		return vs[0].([]UrlMapTestResponse)[vs[1].(int)]
	}).(UrlMapTestResponseOutput)
}

// The spec for modifying the path before sending the request to the matched backend service.
type UrlRewrite struct {
	// Before forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be from 1 to 255 characters.
	HostRewrite *string `pulumi:"hostRewrite"`
	// Before forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be from 1 to 1024 characters.
	PathPrefixRewrite *string `pulumi:"pathPrefixRewrite"`
}

// UrlRewriteInput is an input type that accepts UrlRewriteArgs and UrlRewriteOutput values.
// You can construct a concrete instance of `UrlRewriteInput` via:
//
//	UrlRewriteArgs{...}
type UrlRewriteInput interface {
	pulumi.Input

	ToUrlRewriteOutput() UrlRewriteOutput
	ToUrlRewriteOutputWithContext(context.Context) UrlRewriteOutput
}

// The spec for modifying the path before sending the request to the matched backend service.
type UrlRewriteArgs struct {
	// Before forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be from 1 to 255 characters.
	HostRewrite pulumi.StringPtrInput `pulumi:"hostRewrite"`
	// Before forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be from 1 to 1024 characters.
	PathPrefixRewrite pulumi.StringPtrInput `pulumi:"pathPrefixRewrite"`
}

func (UrlRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlRewrite)(nil)).Elem()
}

func (i UrlRewriteArgs) ToUrlRewriteOutput() UrlRewriteOutput {
	return i.ToUrlRewriteOutputWithContext(context.Background())
}

func (i UrlRewriteArgs) ToUrlRewriteOutputWithContext(ctx context.Context) UrlRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlRewriteOutput)
}

func (i UrlRewriteArgs) ToUrlRewritePtrOutput() UrlRewritePtrOutput {
	return i.ToUrlRewritePtrOutputWithContext(context.Background())
}

func (i UrlRewriteArgs) ToUrlRewritePtrOutputWithContext(ctx context.Context) UrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlRewriteOutput).ToUrlRewritePtrOutputWithContext(ctx)
}

// UrlRewritePtrInput is an input type that accepts UrlRewriteArgs, UrlRewritePtr and UrlRewritePtrOutput values.
// You can construct a concrete instance of `UrlRewritePtrInput` via:
//
//	        UrlRewriteArgs{...}
//
//	or:
//
//	        nil
type UrlRewritePtrInput interface {
	pulumi.Input

	ToUrlRewritePtrOutput() UrlRewritePtrOutput
	ToUrlRewritePtrOutputWithContext(context.Context) UrlRewritePtrOutput
}

type urlRewritePtrType UrlRewriteArgs

func UrlRewritePtr(v *UrlRewriteArgs) UrlRewritePtrInput {
	return (*urlRewritePtrType)(v)
}

func (*urlRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlRewrite)(nil)).Elem()
}

func (i *urlRewritePtrType) ToUrlRewritePtrOutput() UrlRewritePtrOutput {
	return i.ToUrlRewritePtrOutputWithContext(context.Background())
}

func (i *urlRewritePtrType) ToUrlRewritePtrOutputWithContext(ctx context.Context) UrlRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlRewritePtrOutput)
}

// The spec for modifying the path before sending the request to the matched backend service.
type UrlRewriteOutput struct{ *pulumi.OutputState }

func (UrlRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlRewrite)(nil)).Elem()
}

func (o UrlRewriteOutput) ToUrlRewriteOutput() UrlRewriteOutput {
	return o
}

func (o UrlRewriteOutput) ToUrlRewriteOutputWithContext(ctx context.Context) UrlRewriteOutput {
	return o
}

func (o UrlRewriteOutput) ToUrlRewritePtrOutput() UrlRewritePtrOutput {
	return o.ToUrlRewritePtrOutputWithContext(context.Background())
}

func (o UrlRewriteOutput) ToUrlRewritePtrOutputWithContext(ctx context.Context) UrlRewritePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UrlRewrite) *UrlRewrite {
		return &v
	}).(UrlRewritePtrOutput)
}

// Before forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be from 1 to 255 characters.
func (o UrlRewriteOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlRewrite) *string { return v.HostRewrite }).(pulumi.StringPtrOutput)
}

// Before forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be from 1 to 1024 characters.
func (o UrlRewriteOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlRewrite) *string { return v.PathPrefixRewrite }).(pulumi.StringPtrOutput)
}

type UrlRewritePtrOutput struct{ *pulumi.OutputState }

func (UrlRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlRewrite)(nil)).Elem()
}

func (o UrlRewritePtrOutput) ToUrlRewritePtrOutput() UrlRewritePtrOutput {
	return o
}

func (o UrlRewritePtrOutput) ToUrlRewritePtrOutputWithContext(ctx context.Context) UrlRewritePtrOutput {
	return o
}

func (o UrlRewritePtrOutput) Elem() UrlRewriteOutput {
	return o.ApplyT(func(v *UrlRewrite) UrlRewrite {
		if v != nil {
			return *v
		}
		var ret UrlRewrite
		return ret
	}).(UrlRewriteOutput)
}

// Before forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be from 1 to 255 characters.
func (o UrlRewritePtrOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.HostRewrite
	}).(pulumi.StringPtrOutput)
}

// Before forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be from 1 to 1024 characters.
func (o UrlRewritePtrOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlRewrite) *string {
		if v == nil {
			return nil
		}
		return v.PathPrefixRewrite
	}).(pulumi.StringPtrOutput)
}

// The spec for modifying the path before sending the request to the matched backend service.
type UrlRewriteResponse struct {
	// Before forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be from 1 to 255 characters.
	HostRewrite string `pulumi:"hostRewrite"`
	// Before forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be from 1 to 1024 characters.
	PathPrefixRewrite string `pulumi:"pathPrefixRewrite"`
}

// The spec for modifying the path before sending the request to the matched backend service.
type UrlRewriteResponseOutput struct{ *pulumi.OutputState }

func (UrlRewriteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlRewriteResponse)(nil)).Elem()
}

func (o UrlRewriteResponseOutput) ToUrlRewriteResponseOutput() UrlRewriteResponseOutput {
	return o
}

func (o UrlRewriteResponseOutput) ToUrlRewriteResponseOutputWithContext(ctx context.Context) UrlRewriteResponseOutput {
	return o
}

// Before forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be from 1 to 255 characters.
func (o UrlRewriteResponseOutput) HostRewrite() pulumi.StringOutput {
	return o.ApplyT(func(v UrlRewriteResponse) string { return v.HostRewrite }).(pulumi.StringOutput)
}

// Before forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be from 1 to 1024 characters.
func (o UrlRewriteResponseOutput) PathPrefixRewrite() pulumi.StringOutput {
	return o.ApplyT(func(v UrlRewriteResponse) string { return v.PathPrefixRewrite }).(pulumi.StringOutput)
}

// A VPN gateway interface.
type VpnGatewayVpnGatewayInterface struct {
	// URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for HA VPN over Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource.
	InterconnectAttachment *string `pulumi:"interconnectAttachment"`
}

// VpnGatewayVpnGatewayInterfaceInput is an input type that accepts VpnGatewayVpnGatewayInterfaceArgs and VpnGatewayVpnGatewayInterfaceOutput values.
// You can construct a concrete instance of `VpnGatewayVpnGatewayInterfaceInput` via:
//
//	VpnGatewayVpnGatewayInterfaceArgs{...}
type VpnGatewayVpnGatewayInterfaceInput interface {
	pulumi.Input

	ToVpnGatewayVpnGatewayInterfaceOutput() VpnGatewayVpnGatewayInterfaceOutput
	ToVpnGatewayVpnGatewayInterfaceOutputWithContext(context.Context) VpnGatewayVpnGatewayInterfaceOutput
}

// A VPN gateway interface.
type VpnGatewayVpnGatewayInterfaceArgs struct {
	// URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for HA VPN over Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource.
	InterconnectAttachment pulumi.StringPtrInput `pulumi:"interconnectAttachment"`
}

func (VpnGatewayVpnGatewayInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnGatewayVpnGatewayInterface)(nil)).Elem()
}

func (i VpnGatewayVpnGatewayInterfaceArgs) ToVpnGatewayVpnGatewayInterfaceOutput() VpnGatewayVpnGatewayInterfaceOutput {
	return i.ToVpnGatewayVpnGatewayInterfaceOutputWithContext(context.Background())
}

func (i VpnGatewayVpnGatewayInterfaceArgs) ToVpnGatewayVpnGatewayInterfaceOutputWithContext(ctx context.Context) VpnGatewayVpnGatewayInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnGatewayVpnGatewayInterfaceOutput)
}

// VpnGatewayVpnGatewayInterfaceArrayInput is an input type that accepts VpnGatewayVpnGatewayInterfaceArray and VpnGatewayVpnGatewayInterfaceArrayOutput values.
// You can construct a concrete instance of `VpnGatewayVpnGatewayInterfaceArrayInput` via:
//
//	VpnGatewayVpnGatewayInterfaceArray{ VpnGatewayVpnGatewayInterfaceArgs{...} }
type VpnGatewayVpnGatewayInterfaceArrayInput interface {
	pulumi.Input

	ToVpnGatewayVpnGatewayInterfaceArrayOutput() VpnGatewayVpnGatewayInterfaceArrayOutput
	ToVpnGatewayVpnGatewayInterfaceArrayOutputWithContext(context.Context) VpnGatewayVpnGatewayInterfaceArrayOutput
}

type VpnGatewayVpnGatewayInterfaceArray []VpnGatewayVpnGatewayInterfaceInput

func (VpnGatewayVpnGatewayInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpnGatewayVpnGatewayInterface)(nil)).Elem()
}

func (i VpnGatewayVpnGatewayInterfaceArray) ToVpnGatewayVpnGatewayInterfaceArrayOutput() VpnGatewayVpnGatewayInterfaceArrayOutput {
	return i.ToVpnGatewayVpnGatewayInterfaceArrayOutputWithContext(context.Background())
}

func (i VpnGatewayVpnGatewayInterfaceArray) ToVpnGatewayVpnGatewayInterfaceArrayOutputWithContext(ctx context.Context) VpnGatewayVpnGatewayInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnGatewayVpnGatewayInterfaceArrayOutput)
}

// A VPN gateway interface.
type VpnGatewayVpnGatewayInterfaceOutput struct{ *pulumi.OutputState }

func (VpnGatewayVpnGatewayInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnGatewayVpnGatewayInterface)(nil)).Elem()
}

func (o VpnGatewayVpnGatewayInterfaceOutput) ToVpnGatewayVpnGatewayInterfaceOutput() VpnGatewayVpnGatewayInterfaceOutput {
	return o
}

func (o VpnGatewayVpnGatewayInterfaceOutput) ToVpnGatewayVpnGatewayInterfaceOutputWithContext(ctx context.Context) VpnGatewayVpnGatewayInterfaceOutput {
	return o
}

// URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for HA VPN over Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource.
func (o VpnGatewayVpnGatewayInterfaceOutput) InterconnectAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpnGatewayVpnGatewayInterface) *string { return v.InterconnectAttachment }).(pulumi.StringPtrOutput)
}

type VpnGatewayVpnGatewayInterfaceArrayOutput struct{ *pulumi.OutputState }

func (VpnGatewayVpnGatewayInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpnGatewayVpnGatewayInterface)(nil)).Elem()
}

func (o VpnGatewayVpnGatewayInterfaceArrayOutput) ToVpnGatewayVpnGatewayInterfaceArrayOutput() VpnGatewayVpnGatewayInterfaceArrayOutput {
	return o
}

func (o VpnGatewayVpnGatewayInterfaceArrayOutput) ToVpnGatewayVpnGatewayInterfaceArrayOutputWithContext(ctx context.Context) VpnGatewayVpnGatewayInterfaceArrayOutput {
	return o
}

func (o VpnGatewayVpnGatewayInterfaceArrayOutput) Index(i pulumi.IntInput) VpnGatewayVpnGatewayInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpnGatewayVpnGatewayInterface {
		return vs[0].([]VpnGatewayVpnGatewayInterface)[vs[1].(int)]
	}).(VpnGatewayVpnGatewayInterfaceOutput)
}

// A VPN gateway interface.
type VpnGatewayVpnGatewayInterfaceResponse struct {
	// URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for HA VPN over Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource.
	InterconnectAttachment string `pulumi:"interconnectAttachment"`
	// IP address for this VPN interface associated with the VPN gateway. The IP address could be either a regional external IP address or a regional internal IP address. The two IP addresses for a VPN gateway must be all regional external or regional internal IP addresses. There cannot be a mix of regional external IP addresses and regional internal IP addresses. For HA VPN over Cloud Interconnect, the IP addresses for both interfaces could either be regional internal IP addresses or regional external IP addresses. For regular (non HA VPN over Cloud Interconnect) HA VPN tunnels, the IP address must be a regional external IP address.
	IpAddress string `pulumi:"ipAddress"`
}

// A VPN gateway interface.
type VpnGatewayVpnGatewayInterfaceResponseOutput struct{ *pulumi.OutputState }

func (VpnGatewayVpnGatewayInterfaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpnGatewayVpnGatewayInterfaceResponse)(nil)).Elem()
}

func (o VpnGatewayVpnGatewayInterfaceResponseOutput) ToVpnGatewayVpnGatewayInterfaceResponseOutput() VpnGatewayVpnGatewayInterfaceResponseOutput {
	return o
}

func (o VpnGatewayVpnGatewayInterfaceResponseOutput) ToVpnGatewayVpnGatewayInterfaceResponseOutputWithContext(ctx context.Context) VpnGatewayVpnGatewayInterfaceResponseOutput {
	return o
}

// URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for HA VPN over Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource.
func (o VpnGatewayVpnGatewayInterfaceResponseOutput) InterconnectAttachment() pulumi.StringOutput {
	return o.ApplyT(func(v VpnGatewayVpnGatewayInterfaceResponse) string { return v.InterconnectAttachment }).(pulumi.StringOutput)
}

// IP address for this VPN interface associated with the VPN gateway. The IP address could be either a regional external IP address or a regional internal IP address. The two IP addresses for a VPN gateway must be all regional external or regional internal IP addresses. There cannot be a mix of regional external IP addresses and regional internal IP addresses. For HA VPN over Cloud Interconnect, the IP addresses for both interfaces could either be regional internal IP addresses or regional external IP addresses. For regular (non HA VPN over Cloud Interconnect) HA VPN tunnels, the IP address must be a regional external IP address.
func (o VpnGatewayVpnGatewayInterfaceResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v VpnGatewayVpnGatewayInterfaceResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

type VpnGatewayVpnGatewayInterfaceResponseArrayOutput struct{ *pulumi.OutputState }

func (VpnGatewayVpnGatewayInterfaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpnGatewayVpnGatewayInterfaceResponse)(nil)).Elem()
}

func (o VpnGatewayVpnGatewayInterfaceResponseArrayOutput) ToVpnGatewayVpnGatewayInterfaceResponseArrayOutput() VpnGatewayVpnGatewayInterfaceResponseArrayOutput {
	return o
}

func (o VpnGatewayVpnGatewayInterfaceResponseArrayOutput) ToVpnGatewayVpnGatewayInterfaceResponseArrayOutputWithContext(ctx context.Context) VpnGatewayVpnGatewayInterfaceResponseArrayOutput {
	return o
}

func (o VpnGatewayVpnGatewayInterfaceResponseArrayOutput) Index(i pulumi.IntInput) VpnGatewayVpnGatewayInterfaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpnGatewayVpnGatewayInterfaceResponse {
		return vs[0].([]VpnGatewayVpnGatewayInterfaceResponse)[vs[1].(int)]
	}).(VpnGatewayVpnGatewayInterfaceResponseOutput)
}

// In contrast to a single BackendService in HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple backend services. The volume of traffic for each backend service is proportional to the weight specified in each WeightedBackendService
type WeightedBackendService struct {
	// The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the load balancer applies any relevant headerActions specified as part of this backendServiceWeight.
	BackendService *string `pulumi:"backendService"`
	// Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap. headerAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
	HeaderAction *HttpHeaderAction `pulumi:"headerAction"`
	// Specifies the fraction of traffic sent to a backend service, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backend service, subsequent requests are sent to the same backend service as determined by the backend service's session affinity policy. The value must be from 0 to 1000.
	Weight *int `pulumi:"weight"`
}

// WeightedBackendServiceInput is an input type that accepts WeightedBackendServiceArgs and WeightedBackendServiceOutput values.
// You can construct a concrete instance of `WeightedBackendServiceInput` via:
//
//	WeightedBackendServiceArgs{...}
type WeightedBackendServiceInput interface {
	pulumi.Input

	ToWeightedBackendServiceOutput() WeightedBackendServiceOutput
	ToWeightedBackendServiceOutputWithContext(context.Context) WeightedBackendServiceOutput
}

// In contrast to a single BackendService in HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple backend services. The volume of traffic for each backend service is proportional to the weight specified in each WeightedBackendService
type WeightedBackendServiceArgs struct {
	// The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the load balancer applies any relevant headerActions specified as part of this backendServiceWeight.
	BackendService pulumi.StringPtrInput `pulumi:"backendService"`
	// Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap. headerAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
	HeaderAction HttpHeaderActionPtrInput `pulumi:"headerAction"`
	// Specifies the fraction of traffic sent to a backend service, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backend service, subsequent requests are sent to the same backend service as determined by the backend service's session affinity policy. The value must be from 0 to 1000.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (WeightedBackendServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeightedBackendService)(nil)).Elem()
}

func (i WeightedBackendServiceArgs) ToWeightedBackendServiceOutput() WeightedBackendServiceOutput {
	return i.ToWeightedBackendServiceOutputWithContext(context.Background())
}

func (i WeightedBackendServiceArgs) ToWeightedBackendServiceOutputWithContext(ctx context.Context) WeightedBackendServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeightedBackendServiceOutput)
}

// WeightedBackendServiceArrayInput is an input type that accepts WeightedBackendServiceArray and WeightedBackendServiceArrayOutput values.
// You can construct a concrete instance of `WeightedBackendServiceArrayInput` via:
//
//	WeightedBackendServiceArray{ WeightedBackendServiceArgs{...} }
type WeightedBackendServiceArrayInput interface {
	pulumi.Input

	ToWeightedBackendServiceArrayOutput() WeightedBackendServiceArrayOutput
	ToWeightedBackendServiceArrayOutputWithContext(context.Context) WeightedBackendServiceArrayOutput
}

type WeightedBackendServiceArray []WeightedBackendServiceInput

func (WeightedBackendServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeightedBackendService)(nil)).Elem()
}

func (i WeightedBackendServiceArray) ToWeightedBackendServiceArrayOutput() WeightedBackendServiceArrayOutput {
	return i.ToWeightedBackendServiceArrayOutputWithContext(context.Background())
}

func (i WeightedBackendServiceArray) ToWeightedBackendServiceArrayOutputWithContext(ctx context.Context) WeightedBackendServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeightedBackendServiceArrayOutput)
}

// In contrast to a single BackendService in HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple backend services. The volume of traffic for each backend service is proportional to the weight specified in each WeightedBackendService
type WeightedBackendServiceOutput struct{ *pulumi.OutputState }

func (WeightedBackendServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeightedBackendService)(nil)).Elem()
}

func (o WeightedBackendServiceOutput) ToWeightedBackendServiceOutput() WeightedBackendServiceOutput {
	return o
}

func (o WeightedBackendServiceOutput) ToWeightedBackendServiceOutputWithContext(ctx context.Context) WeightedBackendServiceOutput {
	return o
}

// The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the load balancer applies any relevant headerActions specified as part of this backendServiceWeight.
func (o WeightedBackendServiceOutput) BackendService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WeightedBackendService) *string { return v.BackendService }).(pulumi.StringPtrOutput)
}

// Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap. headerAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
func (o WeightedBackendServiceOutput) HeaderAction() HttpHeaderActionPtrOutput {
	return o.ApplyT(func(v WeightedBackendService) *HttpHeaderAction { return v.HeaderAction }).(HttpHeaderActionPtrOutput)
}

// Specifies the fraction of traffic sent to a backend service, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backend service, subsequent requests are sent to the same backend service as determined by the backend service's session affinity policy. The value must be from 0 to 1000.
func (o WeightedBackendServiceOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WeightedBackendService) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type WeightedBackendServiceArrayOutput struct{ *pulumi.OutputState }

func (WeightedBackendServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeightedBackendService)(nil)).Elem()
}

func (o WeightedBackendServiceArrayOutput) ToWeightedBackendServiceArrayOutput() WeightedBackendServiceArrayOutput {
	return o
}

func (o WeightedBackendServiceArrayOutput) ToWeightedBackendServiceArrayOutputWithContext(ctx context.Context) WeightedBackendServiceArrayOutput {
	return o
}

func (o WeightedBackendServiceArrayOutput) Index(i pulumi.IntInput) WeightedBackendServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WeightedBackendService {
		return vs[0].([]WeightedBackendService)[vs[1].(int)]
	}).(WeightedBackendServiceOutput)
}

// In contrast to a single BackendService in HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple backend services. The volume of traffic for each backend service is proportional to the weight specified in each WeightedBackendService
type WeightedBackendServiceResponse struct {
	// The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the load balancer applies any relevant headerActions specified as part of this backendServiceWeight.
	BackendService string `pulumi:"backendService"`
	// Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap. headerAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
	HeaderAction HttpHeaderActionResponse `pulumi:"headerAction"`
	// Specifies the fraction of traffic sent to a backend service, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backend service, subsequent requests are sent to the same backend service as determined by the backend service's session affinity policy. The value must be from 0 to 1000.
	Weight int `pulumi:"weight"`
}

// In contrast to a single BackendService in HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple backend services. The volume of traffic for each backend service is proportional to the weight specified in each WeightedBackendService
type WeightedBackendServiceResponseOutput struct{ *pulumi.OutputState }

func (WeightedBackendServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeightedBackendServiceResponse)(nil)).Elem()
}

func (o WeightedBackendServiceResponseOutput) ToWeightedBackendServiceResponseOutput() WeightedBackendServiceResponseOutput {
	return o
}

func (o WeightedBackendServiceResponseOutput) ToWeightedBackendServiceResponseOutputWithContext(ctx context.Context) WeightedBackendServiceResponseOutput {
	return o
}

// The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the load balancer applies any relevant headerActions specified as part of this backendServiceWeight.
func (o WeightedBackendServiceResponseOutput) BackendService() pulumi.StringOutput {
	return o.ApplyT(func(v WeightedBackendServiceResponse) string { return v.BackendService }).(pulumi.StringOutput)
}

// Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap. headerAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
func (o WeightedBackendServiceResponseOutput) HeaderAction() HttpHeaderActionResponseOutput {
	return o.ApplyT(func(v WeightedBackendServiceResponse) HttpHeaderActionResponse { return v.HeaderAction }).(HttpHeaderActionResponseOutput)
}

// Specifies the fraction of traffic sent to a backend service, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user's request has been directed to a backend service, subsequent requests are sent to the same backend service as determined by the backend service's session affinity policy. The value must be from 0 to 1000.
func (o WeightedBackendServiceResponseOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v WeightedBackendServiceResponse) int { return v.Weight }).(pulumi.IntOutput)
}

type WeightedBackendServiceResponseArrayOutput struct{ *pulumi.OutputState }

func (WeightedBackendServiceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeightedBackendServiceResponse)(nil)).Elem()
}

func (o WeightedBackendServiceResponseArrayOutput) ToWeightedBackendServiceResponseArrayOutput() WeightedBackendServiceResponseArrayOutput {
	return o
}

func (o WeightedBackendServiceResponseArrayOutput) ToWeightedBackendServiceResponseArrayOutputWithContext(ctx context.Context) WeightedBackendServiceResponseArrayOutput {
	return o
}

func (o WeightedBackendServiceResponseArrayOutput) Index(i pulumi.IntInput) WeightedBackendServiceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WeightedBackendServiceResponse {
		return vs[0].([]WeightedBackendServiceResponse)[vs[1].(int)]
	}).(WeightedBackendServiceResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecuritySettingsInput)(nil)).Elem(), SecuritySettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecuritySettingsPtrInput)(nil)).Elem(), SecuritySettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerBindingInput)(nil)).Elem(), ServerBindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerBindingPtrInput)(nil)).Elem(), ServerBindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsSettingsInput)(nil)).Elem(), ServerTlsSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsSettingsPtrInput)(nil)).Elem(), ServerTlsSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountInput)(nil)).Elem(), ServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountArrayInput)(nil)).Elem(), ServiceAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAttachmentConsumerProjectLimitInput)(nil)).Elem(), ServiceAttachmentConsumerProjectLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAttachmentConsumerProjectLimitArrayInput)(nil)).Elem(), ServiceAttachmentConsumerProjectLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareSettingsInput)(nil)).Elem(), ShareSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareSettingsPtrInput)(nil)).Elem(), ShareSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedInstanceConfigInput)(nil)).Elem(), ShieldedInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedInstanceConfigPtrInput)(nil)).Elem(), ShieldedInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedInstanceIntegrityPolicyInput)(nil)).Elem(), ShieldedInstanceIntegrityPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedInstanceIntegrityPolicyPtrInput)(nil)).Elem(), ShieldedInstanceIntegrityPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedVmConfigInput)(nil)).Elem(), ShieldedVmConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedVmConfigPtrInput)(nil)).Elem(), ShieldedVmConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedVmIntegrityPolicyInput)(nil)).Elem(), ShieldedVmIntegrityPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedVmIntegrityPolicyPtrInput)(nil)).Elem(), ShieldedVmIntegrityPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceDiskEncryptionKeyInput)(nil)).Elem(), SourceDiskEncryptionKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceDiskEncryptionKeyArrayInput)(nil)).Elem(), SourceDiskEncryptionKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceInstanceParamsInput)(nil)).Elem(), SourceInstanceParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceInstanceParamsPtrInput)(nil)).Elem(), SourceInstanceParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslCertificateManagedSslCertificateInput)(nil)).Elem(), SslCertificateManagedSslCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslCertificateManagedSslCertificatePtrInput)(nil)).Elem(), SslCertificateManagedSslCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslCertificateSelfManagedSslCertificateInput)(nil)).Elem(), SslCertificateSelfManagedSslCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslCertificateSelfManagedSslCertificatePtrInput)(nil)).Elem(), SslCertificateSelfManagedSslCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulPolicyInput)(nil)).Elem(), StatefulPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulPolicyPtrInput)(nil)).Elem(), StatefulPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulPolicyPreservedStateInput)(nil)).Elem(), StatefulPolicyPreservedStateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatefulPolicyPreservedStatePtrInput)(nil)).Elem(), StatefulPolicyPreservedStateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetworkLogConfigInput)(nil)).Elem(), SubnetworkLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetworkLogConfigPtrInput)(nil)).Elem(), SubnetworkLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetworkSecondaryRangeInput)(nil)).Elem(), SubnetworkSecondaryRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetworkSecondaryRangeArrayInput)(nil)).Elem(), SubnetworkSecondaryRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubsettingInput)(nil)).Elem(), SubsettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubsettingPtrInput)(nil)).Elem(), SubsettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TCPHealthCheckInput)(nil)).Elem(), TCPHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TCPHealthCheckPtrInput)(nil)).Elem(), TCPHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagsInput)(nil)).Elem(), TagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagsPtrInput)(nil)).Elem(), TagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsCertificateContextInput)(nil)).Elem(), TlsCertificateContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsCertificateContextPtrInput)(nil)).Elem(), TlsCertificateContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsCertificatePathsInput)(nil)).Elem(), TlsCertificatePathsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsCertificatePathsPtrInput)(nil)).Elem(), TlsCertificatePathsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsContextInput)(nil)).Elem(), TlsContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsContextPtrInput)(nil)).Elem(), TlsContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsValidationContextInput)(nil)).Elem(), TlsValidationContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsValidationContextPtrInput)(nil)).Elem(), TlsValidationContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UDPHealthCheckInput)(nil)).Elem(), UDPHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UDPHealthCheckPtrInput)(nil)).Elem(), UDPHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMapTestInput)(nil)).Elem(), UrlMapTestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMapTestArrayInput)(nil)).Elem(), UrlMapTestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMapTestHeaderInput)(nil)).Elem(), UrlMapTestHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMapTestHeaderArrayInput)(nil)).Elem(), UrlMapTestHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlRewriteInput)(nil)).Elem(), UrlRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlRewritePtrInput)(nil)).Elem(), UrlRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnGatewayVpnGatewayInterfaceInput)(nil)).Elem(), VpnGatewayVpnGatewayInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnGatewayVpnGatewayInterfaceArrayInput)(nil)).Elem(), VpnGatewayVpnGatewayInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WeightedBackendServiceInput)(nil)).Elem(), WeightedBackendServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WeightedBackendServiceArrayInput)(nil)).Elem(), WeightedBackendServiceArray{})
	pulumi.RegisterOutputType(SecurityPolicyUserDefinedFieldResponseOutput{})
	pulumi.RegisterOutputType(SecurityPolicyUserDefinedFieldResponseArrayOutput{})
	pulumi.RegisterOutputType(SecuritySettingsOutput{})
	pulumi.RegisterOutputType(SecuritySettingsPtrOutput{})
	pulumi.RegisterOutputType(SecuritySettingsResponseOutput{})
	pulumi.RegisterOutputType(ServerBindingOutput{})
	pulumi.RegisterOutputType(ServerBindingPtrOutput{})
	pulumi.RegisterOutputType(ServerBindingResponseOutput{})
	pulumi.RegisterOutputType(ServerTlsSettingsOutput{})
	pulumi.RegisterOutputType(ServerTlsSettingsPtrOutput{})
	pulumi.RegisterOutputType(ServerTlsSettingsResponseOutput{})
	pulumi.RegisterOutputType(ServiceAccountOutput{})
	pulumi.RegisterOutputType(ServiceAccountArrayOutput{})
	pulumi.RegisterOutputType(ServiceAccountResponseOutput{})
	pulumi.RegisterOutputType(ServiceAccountResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceAttachmentConnectedEndpointResponseOutput{})
	pulumi.RegisterOutputType(ServiceAttachmentConnectedEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceAttachmentConsumerProjectLimitOutput{})
	pulumi.RegisterOutputType(ServiceAttachmentConsumerProjectLimitArrayOutput{})
	pulumi.RegisterOutputType(ServiceAttachmentConsumerProjectLimitResponseOutput{})
	pulumi.RegisterOutputType(ServiceAttachmentConsumerProjectLimitResponseArrayOutput{})
	pulumi.RegisterOutputType(ShareSettingsOutput{})
	pulumi.RegisterOutputType(ShareSettingsPtrOutput{})
	pulumi.RegisterOutputType(ShareSettingsResponseOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigResponseOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceIntegrityPolicyOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceIntegrityPolicyPtrOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceIntegrityPolicyResponseOutput{})
	pulumi.RegisterOutputType(ShieldedVmConfigOutput{})
	pulumi.RegisterOutputType(ShieldedVmConfigPtrOutput{})
	pulumi.RegisterOutputType(ShieldedVmConfigResponseOutput{})
	pulumi.RegisterOutputType(ShieldedVmIntegrityPolicyOutput{})
	pulumi.RegisterOutputType(ShieldedVmIntegrityPolicyPtrOutput{})
	pulumi.RegisterOutputType(ShieldedVmIntegrityPolicyResponseOutput{})
	pulumi.RegisterOutputType(SourceDiskEncryptionKeyOutput{})
	pulumi.RegisterOutputType(SourceDiskEncryptionKeyArrayOutput{})
	pulumi.RegisterOutputType(SourceDiskEncryptionKeyResponseOutput{})
	pulumi.RegisterOutputType(SourceDiskEncryptionKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(SourceInstanceParamsOutput{})
	pulumi.RegisterOutputType(SourceInstanceParamsPtrOutput{})
	pulumi.RegisterOutputType(SourceInstanceParamsResponseOutput{})
	pulumi.RegisterOutputType(SourceInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(SslCertificateManagedSslCertificateOutput{})
	pulumi.RegisterOutputType(SslCertificateManagedSslCertificatePtrOutput{})
	pulumi.RegisterOutputType(SslCertificateManagedSslCertificateResponseOutput{})
	pulumi.RegisterOutputType(SslCertificateSelfManagedSslCertificateOutput{})
	pulumi.RegisterOutputType(SslCertificateSelfManagedSslCertificatePtrOutput{})
	pulumi.RegisterOutputType(SslCertificateSelfManagedSslCertificateResponseOutput{})
	pulumi.RegisterOutputType(SslPolicyWarningsItemDataItemResponseOutput{})
	pulumi.RegisterOutputType(SslPolicyWarningsItemDataItemResponseArrayOutput{})
	pulumi.RegisterOutputType(SslPolicyWarningsItemResponseOutput{})
	pulumi.RegisterOutputType(SslPolicyWarningsItemResponseArrayOutput{})
	pulumi.RegisterOutputType(StatefulPolicyOutput{})
	pulumi.RegisterOutputType(StatefulPolicyPtrOutput{})
	pulumi.RegisterOutputType(StatefulPolicyPreservedStateOutput{})
	pulumi.RegisterOutputType(StatefulPolicyPreservedStatePtrOutput{})
	pulumi.RegisterOutputType(StatefulPolicyPreservedStateResponseOutput{})
	pulumi.RegisterOutputType(StatefulPolicyResponseOutput{})
	pulumi.RegisterOutputType(SubnetworkLogConfigOutput{})
	pulumi.RegisterOutputType(SubnetworkLogConfigPtrOutput{})
	pulumi.RegisterOutputType(SubnetworkLogConfigResponseOutput{})
	pulumi.RegisterOutputType(SubnetworkSecondaryRangeOutput{})
	pulumi.RegisterOutputType(SubnetworkSecondaryRangeArrayOutput{})
	pulumi.RegisterOutputType(SubnetworkSecondaryRangeResponseOutput{})
	pulumi.RegisterOutputType(SubnetworkSecondaryRangeResponseArrayOutput{})
	pulumi.RegisterOutputType(SubsettingOutput{})
	pulumi.RegisterOutputType(SubsettingPtrOutput{})
	pulumi.RegisterOutputType(SubsettingResponseOutput{})
	pulumi.RegisterOutputType(TCPHealthCheckOutput{})
	pulumi.RegisterOutputType(TCPHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(TCPHealthCheckResponseOutput{})
	pulumi.RegisterOutputType(TagsOutput{})
	pulumi.RegisterOutputType(TagsPtrOutput{})
	pulumi.RegisterOutputType(TagsResponseOutput{})
	pulumi.RegisterOutputType(TlsCertificateContextOutput{})
	pulumi.RegisterOutputType(TlsCertificateContextPtrOutput{})
	pulumi.RegisterOutputType(TlsCertificateContextResponseOutput{})
	pulumi.RegisterOutputType(TlsCertificatePathsOutput{})
	pulumi.RegisterOutputType(TlsCertificatePathsPtrOutput{})
	pulumi.RegisterOutputType(TlsCertificatePathsResponseOutput{})
	pulumi.RegisterOutputType(TlsContextOutput{})
	pulumi.RegisterOutputType(TlsContextPtrOutput{})
	pulumi.RegisterOutputType(TlsContextResponseOutput{})
	pulumi.RegisterOutputType(TlsValidationContextOutput{})
	pulumi.RegisterOutputType(TlsValidationContextPtrOutput{})
	pulumi.RegisterOutputType(TlsValidationContextResponseOutput{})
	pulumi.RegisterOutputType(UDPHealthCheckOutput{})
	pulumi.RegisterOutputType(UDPHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(UDPHealthCheckResponseOutput{})
	pulumi.RegisterOutputType(Uint128ResponseOutput{})
	pulumi.RegisterOutputType(UpcomingMaintenanceResponseOutput{})
	pulumi.RegisterOutputType(UpcomingMaintenanceTimeWindowResponseOutput{})
	pulumi.RegisterOutputType(UrlMapTestOutput{})
	pulumi.RegisterOutputType(UrlMapTestArrayOutput{})
	pulumi.RegisterOutputType(UrlMapTestHeaderOutput{})
	pulumi.RegisterOutputType(UrlMapTestHeaderArrayOutput{})
	pulumi.RegisterOutputType(UrlMapTestHeaderResponseOutput{})
	pulumi.RegisterOutputType(UrlMapTestHeaderResponseArrayOutput{})
	pulumi.RegisterOutputType(UrlMapTestResponseOutput{})
	pulumi.RegisterOutputType(UrlMapTestResponseArrayOutput{})
	pulumi.RegisterOutputType(UrlRewriteOutput{})
	pulumi.RegisterOutputType(UrlRewritePtrOutput{})
	pulumi.RegisterOutputType(UrlRewriteResponseOutput{})
	pulumi.RegisterOutputType(VpnGatewayVpnGatewayInterfaceOutput{})
	pulumi.RegisterOutputType(VpnGatewayVpnGatewayInterfaceArrayOutput{})
	pulumi.RegisterOutputType(VpnGatewayVpnGatewayInterfaceResponseOutput{})
	pulumi.RegisterOutputType(VpnGatewayVpnGatewayInterfaceResponseArrayOutput{})
	pulumi.RegisterOutputType(WeightedBackendServiceOutput{})
	pulumi.RegisterOutputType(WeightedBackendServiceArrayOutput{})
	pulumi.RegisterOutputType(WeightedBackendServiceResponseOutput{})
	pulumi.RegisterOutputType(WeightedBackendServiceResponseArrayOutput{})
}
