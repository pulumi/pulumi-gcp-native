// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns a specified storage pool. Gets a list of available storage pools by making a list() request.
func LookupStoragePool(ctx *pulumi.Context, args *LookupStoragePoolArgs, opts ...pulumi.InvokeOption) (*LookupStoragePoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStoragePoolResult
	err := ctx.Invoke("google-native:compute/alpha:getStoragePool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupStoragePoolArgs struct {
	Project     *string `pulumi:"project"`
	StoragePool string  `pulumi:"storagePool"`
	Zone        string  `pulumi:"zone"`
}

type LookupStoragePoolResult struct {
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp string `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description string `pulumi:"description"`
	// Type of the resource. Always compute#storagePool for storage pools.
	Kind string `pulumi:"kind"`
	// A fingerprint for the labels being applied to this storage pool, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a storage pool.
	LabelFingerprint string `pulumi:"labelFingerprint"`
	// Labels to apply to this storage pool. These can be later modified by the setLabels method.
	Labels map[string]string `pulumi:"labels"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name string `pulumi:"name"`
	// Provsioned IOPS of the storage pool.
	ProvisionedIops string `pulumi:"provisionedIops"`
	// Status information for the storage pool resource.
	ResourceStatus StoragePoolResourceStatusResponse `pulumi:"resourceStatus"`
	// Server-defined fully-qualified URL for this resource.
	SelfLink string `pulumi:"selfLink"`
	// Server-defined URL for this resource's resource id.
	SelfLinkWithId string `pulumi:"selfLinkWithId"`
	// Size, in GiB, of the storage pool.
	SizeGb string `pulumi:"sizeGb"`
	// The status of storage pool creation. - CREATING: Storage pool is provisioning. storagePool. - FAILED: Storage pool creation failed. - READY: Storage pool is ready for use. - DELETING: Storage pool is deleting.
	State string `pulumi:"state"`
	// Type of the storage pool
	Type string `pulumi:"type"`
	// URL of the zone where the storage pool resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
	Zone string `pulumi:"zone"`
}

func LookupStoragePoolOutput(ctx *pulumi.Context, args LookupStoragePoolOutputArgs, opts ...pulumi.InvokeOption) LookupStoragePoolResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupStoragePoolResult, error) {
			args := v.(LookupStoragePoolArgs)
			r, err := LookupStoragePool(ctx, &args, opts...)
			var s LookupStoragePoolResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupStoragePoolResultOutput)
}

type LookupStoragePoolOutputArgs struct {
	Project     pulumi.StringPtrInput `pulumi:"project"`
	StoragePool pulumi.StringInput    `pulumi:"storagePool"`
	Zone        pulumi.StringInput    `pulumi:"zone"`
}

func (LookupStoragePoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStoragePoolArgs)(nil)).Elem()
}

type LookupStoragePoolResultOutput struct{ *pulumi.OutputState }

func (LookupStoragePoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStoragePoolResult)(nil)).Elem()
}

func (o LookupStoragePoolResultOutput) ToLookupStoragePoolResultOutput() LookupStoragePoolResultOutput {
	return o
}

func (o LookupStoragePoolResultOutput) ToLookupStoragePoolResultOutputWithContext(ctx context.Context) LookupStoragePoolResultOutput {
	return o
}

// Creation timestamp in RFC3339 text format.
func (o LookupStoragePoolResultOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoragePoolResult) string { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o LookupStoragePoolResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoragePoolResult) string { return v.Description }).(pulumi.StringOutput)
}

// Type of the resource. Always compute#storagePool for storage pools.
func (o LookupStoragePoolResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoragePoolResult) string { return v.Kind }).(pulumi.StringOutput)
}

// A fingerprint for the labels being applied to this storage pool, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a storage pool.
func (o LookupStoragePoolResultOutput) LabelFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoragePoolResult) string { return v.LabelFingerprint }).(pulumi.StringOutput)
}

// Labels to apply to this storage pool. These can be later modified by the setLabels method.
func (o LookupStoragePoolResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupStoragePoolResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o LookupStoragePoolResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoragePoolResult) string { return v.Name }).(pulumi.StringOutput)
}

// Provsioned IOPS of the storage pool.
func (o LookupStoragePoolResultOutput) ProvisionedIops() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoragePoolResult) string { return v.ProvisionedIops }).(pulumi.StringOutput)
}

// Status information for the storage pool resource.
func (o LookupStoragePoolResultOutput) ResourceStatus() StoragePoolResourceStatusResponseOutput {
	return o.ApplyT(func(v LookupStoragePoolResult) StoragePoolResourceStatusResponse { return v.ResourceStatus }).(StoragePoolResourceStatusResponseOutput)
}

// Server-defined fully-qualified URL for this resource.
func (o LookupStoragePoolResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoragePoolResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

// Server-defined URL for this resource's resource id.
func (o LookupStoragePoolResultOutput) SelfLinkWithId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoragePoolResult) string { return v.SelfLinkWithId }).(pulumi.StringOutput)
}

// Size, in GiB, of the storage pool.
func (o LookupStoragePoolResultOutput) SizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoragePoolResult) string { return v.SizeGb }).(pulumi.StringOutput)
}

// The status of storage pool creation. - CREATING: Storage pool is provisioning. storagePool. - FAILED: Storage pool creation failed. - READY: Storage pool is ready for use. - DELETING: Storage pool is deleting.
func (o LookupStoragePoolResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoragePoolResult) string { return v.State }).(pulumi.StringOutput)
}

// Type of the storage pool
func (o LookupStoragePoolResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoragePoolResult) string { return v.Type }).(pulumi.StringOutput)
}

// URL of the zone where the storage pool resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
func (o LookupStoragePoolResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoragePoolResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStoragePoolResultOutput{})
}
