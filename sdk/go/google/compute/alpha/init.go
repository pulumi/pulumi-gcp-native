// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package alpha

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-google-cloud/sdk/go/google-cloud"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "google-cloud:compute/alpha:Address":
		r, err = NewAddress(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:Autoscaler":
		r, err = NewAutoscaler(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:BackendBucket":
		r, err = NewBackendBucket(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:BackendBucketIamPolicy":
		r, err = NewBackendBucketIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:BackendService":
		r, err = NewBackendService(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:Disk":
		r, err = NewDisk(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:DiskIamPolicy":
		r, err = NewDiskIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:ExternalVpnGateway":
		r, err = NewExternalVpnGateway(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:Firewall":
		r, err = NewFirewall(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:FirewallPolicy":
		r, err = NewFirewallPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:FirewallPolicyIamPolicy":
		r, err = NewFirewallPolicyIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:ForwardingRule":
		r, err = NewForwardingRule(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:GlobalAddress":
		r, err = NewGlobalAddress(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:GlobalForwardingRule":
		r, err = NewGlobalForwardingRule(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:GlobalNetworkEndpointGroup":
		r, err = NewGlobalNetworkEndpointGroup(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:GlobalPublicDelegatedPrefix":
		r, err = NewGlobalPublicDelegatedPrefix(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:HealthCheck":
		r, err = NewHealthCheck(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:HttpHealthCheck":
		r, err = NewHttpHealthCheck(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:HttpsHealthCheck":
		r, err = NewHttpsHealthCheck(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:Image":
		r, err = NewImage(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:ImageIamPolicy":
		r, err = NewImageIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:Instance":
		r, err = NewInstance(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:InstanceGroup":
		r, err = NewInstanceGroup(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:InstanceGroupManager":
		r, err = NewInstanceGroupManager(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:InstanceIamPolicy":
		r, err = NewInstanceIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:InstanceTemplate":
		r, err = NewInstanceTemplate(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:InstanceTemplateIamPolicy":
		r, err = NewInstanceTemplateIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:Interconnect":
		r, err = NewInterconnect(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:InterconnectAttachment":
		r, err = NewInterconnectAttachment(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:InterconnectAttachmentIamPolicy":
		r, err = NewInterconnectAttachmentIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:InterconnectIamPolicy":
		r, err = NewInterconnectIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:License":
		r, err = NewLicense(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:LicenseCodeIamPolicy":
		r, err = NewLicenseCodeIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:LicenseIamPolicy":
		r, err = NewLicenseIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:MachineImage":
		r, err = NewMachineImage(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:MachineImageIamPolicy":
		r, err = NewMachineImageIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:Network":
		r, err = NewNetwork(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:NetworkEndpointGroup":
		r, err = NewNetworkEndpointGroup(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:NetworkFirewallPolicy":
		r, err = NewNetworkFirewallPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:NetworkFirewallPolicyIamPolicy":
		r, err = NewNetworkFirewallPolicyIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:NodeGroup":
		r, err = NewNodeGroup(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:NodeGroupIamPolicy":
		r, err = NewNodeGroupIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:NodeTemplate":
		r, err = NewNodeTemplate(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:NodeTemplateIamPolicy":
		r, err = NewNodeTemplateIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:OrganizationSecurityPolicy":
		r, err = NewOrganizationSecurityPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:PacketMirroring":
		r, err = NewPacketMirroring(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:PublicAdvertisedPrefix":
		r, err = NewPublicAdvertisedPrefix(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:PublicDelegatedPrefix":
		r, err = NewPublicDelegatedPrefix(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionAutoscaler":
		r, err = NewRegionAutoscaler(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionBackendService":
		r, err = NewRegionBackendService(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionCommitment":
		r, err = NewRegionCommitment(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionDisk":
		r, err = NewRegionDisk(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionDiskIamPolicy":
		r, err = NewRegionDiskIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionHealthCheck":
		r, err = NewRegionHealthCheck(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionHealthCheckService":
		r, err = NewRegionHealthCheckService(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionInPlaceSnapshot":
		r, err = NewRegionInPlaceSnapshot(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionInPlaceSnapshotIamPolicy":
		r, err = NewRegionInPlaceSnapshotIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionInstanceGroupManager":
		r, err = NewRegionInstanceGroupManager(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionInstantSnapshot":
		r, err = NewRegionInstantSnapshot(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionInstantSnapshotIamPolicy":
		r, err = NewRegionInstantSnapshotIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionNetworkEndpointGroup":
		r, err = NewRegionNetworkEndpointGroup(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionNetworkFirewallPolicy":
		r, err = NewRegionNetworkFirewallPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionNetworkFirewallPolicyIamPolicy":
		r, err = NewRegionNetworkFirewallPolicyIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionNotificationEndpoint":
		r, err = NewRegionNotificationEndpoint(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionSslCertificate":
		r, err = NewRegionSslCertificate(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionTargetHttpProxy":
		r, err = NewRegionTargetHttpProxy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionTargetHttpsProxy":
		r, err = NewRegionTargetHttpsProxy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:RegionUrlMap":
		r, err = NewRegionUrlMap(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:Reservation":
		r, err = NewReservation(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:ReservationIamPolicy":
		r, err = NewReservationIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:ResourcePolicy":
		r, err = NewResourcePolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:ResourcePolicyIamPolicy":
		r, err = NewResourcePolicyIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:Route":
		r, err = NewRoute(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:Router":
		r, err = NewRouter(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:SecurityPolicy":
		r, err = NewSecurityPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:ServiceAttachment":
		r, err = NewServiceAttachment(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:ServiceAttachmentIamPolicy":
		r, err = NewServiceAttachmentIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:Snapshot":
		r, err = NewSnapshot(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:SnapshotIamPolicy":
		r, err = NewSnapshotIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:SslCertificate":
		r, err = NewSslCertificate(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:SslPolicy":
		r, err = NewSslPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:Subnetwork":
		r, err = NewSubnetwork(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:SubnetworkIamPolicy":
		r, err = NewSubnetworkIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:TargetGrpcProxy":
		r, err = NewTargetGrpcProxy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:TargetHttpProxy":
		r, err = NewTargetHttpProxy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:TargetHttpsProxy":
		r, err = NewTargetHttpsProxy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:TargetInstance":
		r, err = NewTargetInstance(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:TargetPool":
		r, err = NewTargetPool(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:TargetSslProxy":
		r, err = NewTargetSslProxy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:TargetTcpProxy":
		r, err = NewTargetTcpProxy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:TargetVpnGateway":
		r, err = NewTargetVpnGateway(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:UrlMap":
		r, err = NewUrlMap(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:VpnGateway":
		r, err = NewVpnGateway(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:VpnTunnel":
		r, err = NewVpnTunnel(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:ZoneInPlaceSnapshot":
		r, err = NewZoneInPlaceSnapshot(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:ZoneInPlaceSnapshotIamPolicy":
		r, err = NewZoneInPlaceSnapshotIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:ZoneInstantSnapshot":
		r, err = NewZoneInstantSnapshot(ctx, name, nil, pulumi.URN_(urn))
	case "google-cloud:compute/alpha:ZoneInstantSnapshotIamPolicy":
		r, err = NewZoneInstantSnapshotIamPolicy(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

func init() {
	version, err := google - cloud.PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"google-cloud",
		"compute/alpha",
		&module{version},
	)
}
