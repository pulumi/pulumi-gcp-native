// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alpha

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new resource policy.
type ResourcePolicy struct {
	pulumi.CustomResourceState

	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	Description       pulumi.StringOutput `pulumi:"description"`
	// Resource policy for disk consistency groups.
	DiskConsistencyGroupPolicy ResourcePolicyDiskConsistencyGroupPolicyResponseOutput `pulumi:"diskConsistencyGroupPolicy"`
	// Resource policy for instances for placement configuration.
	GroupPlacementPolicy ResourcePolicyGroupPlacementPolicyResponseOutput `pulumi:"groupPlacementPolicy"`
	// Resource policy for scheduling instance operations.
	InstanceSchedulePolicy ResourcePolicyInstanceSchedulePolicyResponseOutput `pulumi:"instanceSchedulePolicy"`
	// Type of the resource. Always compute#resource_policies for resource policies.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	Region  pulumi.StringOutput `pulumi:"region"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// The system status of the resource policy.
	ResourceStatus ResourcePolicyResourceStatusResponseOutput `pulumi:"resourceStatus"`
	// Server-defined fully-qualified URL for this resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Server-defined URL for this resource with the resource id.
	SelfLinkWithId pulumi.StringOutput `pulumi:"selfLinkWithId"`
	// Resource policy for persistent disks for creating snapshots.
	SnapshotSchedulePolicy ResourcePolicySnapshotSchedulePolicyResponseOutput `pulumi:"snapshotSchedulePolicy"`
	// The status of resource policy creation.
	Status pulumi.StringOutput `pulumi:"status"`
	// Resource policy applicable to VMs for infrastructure maintenance.
	VmMaintenancePolicy ResourcePolicyVmMaintenancePolicyResponseOutput `pulumi:"vmMaintenancePolicy"`
}

// NewResourcePolicy registers a new resource with the given unique name, arguments, and options.
func NewResourcePolicy(ctx *pulumi.Context,
	name string, args *ResourcePolicyArgs, opts ...pulumi.ResourceOption) (*ResourcePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"project",
		"region",
	})
	opts = append(opts, replaceOnChanges)
	var resource ResourcePolicy
	err := ctx.RegisterResource("google-native:compute/alpha:ResourcePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourcePolicy gets an existing ResourcePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourcePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourcePolicyState, opts ...pulumi.ResourceOption) (*ResourcePolicy, error) {
	var resource ResourcePolicy
	err := ctx.ReadResource("google-native:compute/alpha:ResourcePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourcePolicy resources.
type resourcePolicyState struct {
}

type ResourcePolicyState struct {
}

func (ResourcePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcePolicyState)(nil)).Elem()
}

type resourcePolicyArgs struct {
	Description *string `pulumi:"description"`
	// Resource policy for disk consistency groups.
	DiskConsistencyGroupPolicy *ResourcePolicyDiskConsistencyGroupPolicy `pulumi:"diskConsistencyGroupPolicy"`
	// Resource policy for instances for placement configuration.
	GroupPlacementPolicy *ResourcePolicyGroupPlacementPolicy `pulumi:"groupPlacementPolicy"`
	// Resource policy for scheduling instance operations.
	InstanceSchedulePolicy *ResourcePolicyInstanceSchedulePolicy `pulumi:"instanceSchedulePolicy"`
	// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	Region  string  `pulumi:"region"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Resource policy for persistent disks for creating snapshots.
	SnapshotSchedulePolicy *ResourcePolicySnapshotSchedulePolicy `pulumi:"snapshotSchedulePolicy"`
	// Resource policy applicable to VMs for infrastructure maintenance.
	VmMaintenancePolicy *ResourcePolicyVmMaintenancePolicy `pulumi:"vmMaintenancePolicy"`
}

// The set of arguments for constructing a ResourcePolicy resource.
type ResourcePolicyArgs struct {
	Description pulumi.StringPtrInput
	// Resource policy for disk consistency groups.
	DiskConsistencyGroupPolicy ResourcePolicyDiskConsistencyGroupPolicyPtrInput
	// Resource policy for instances for placement configuration.
	GroupPlacementPolicy ResourcePolicyGroupPlacementPolicyPtrInput
	// Resource policy for scheduling instance operations.
	InstanceSchedulePolicy ResourcePolicyInstanceSchedulePolicyPtrInput
	// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	Region  pulumi.StringInput
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Resource policy for persistent disks for creating snapshots.
	SnapshotSchedulePolicy ResourcePolicySnapshotSchedulePolicyPtrInput
	// Resource policy applicable to VMs for infrastructure maintenance.
	VmMaintenancePolicy ResourcePolicyVmMaintenancePolicyPtrInput
}

func (ResourcePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcePolicyArgs)(nil)).Elem()
}

type ResourcePolicyInput interface {
	pulumi.Input

	ToResourcePolicyOutput() ResourcePolicyOutput
	ToResourcePolicyOutputWithContext(ctx context.Context) ResourcePolicyOutput
}

func (*ResourcePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicy)(nil)).Elem()
}

func (i *ResourcePolicy) ToResourcePolicyOutput() ResourcePolicyOutput {
	return i.ToResourcePolicyOutputWithContext(context.Background())
}

func (i *ResourcePolicy) ToResourcePolicyOutputWithContext(ctx context.Context) ResourcePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePolicyOutput)
}

type ResourcePolicyOutput struct{ *pulumi.OutputState }

func (ResourcePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicy)(nil)).Elem()
}

func (o ResourcePolicyOutput) ToResourcePolicyOutput() ResourcePolicyOutput {
	return o
}

func (o ResourcePolicyOutput) ToResourcePolicyOutputWithContext(ctx context.Context) ResourcePolicyOutput {
	return o
}

// Creation timestamp in RFC3339 text format.
func (o ResourcePolicyOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicy) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

func (o ResourcePolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Resource policy for disk consistency groups.
func (o ResourcePolicyOutput) DiskConsistencyGroupPolicy() ResourcePolicyDiskConsistencyGroupPolicyResponseOutput {
	return o.ApplyT(func(v *ResourcePolicy) ResourcePolicyDiskConsistencyGroupPolicyResponseOutput {
		return v.DiskConsistencyGroupPolicy
	}).(ResourcePolicyDiskConsistencyGroupPolicyResponseOutput)
}

// Resource policy for instances for placement configuration.
func (o ResourcePolicyOutput) GroupPlacementPolicy() ResourcePolicyGroupPlacementPolicyResponseOutput {
	return o.ApplyT(func(v *ResourcePolicy) ResourcePolicyGroupPlacementPolicyResponseOutput {
		return v.GroupPlacementPolicy
	}).(ResourcePolicyGroupPlacementPolicyResponseOutput)
}

// Resource policy for scheduling instance operations.
func (o ResourcePolicyOutput) InstanceSchedulePolicy() ResourcePolicyInstanceSchedulePolicyResponseOutput {
	return o.ApplyT(func(v *ResourcePolicy) ResourcePolicyInstanceSchedulePolicyResponseOutput {
		return v.InstanceSchedulePolicy
	}).(ResourcePolicyInstanceSchedulePolicyResponseOutput)
}

// Type of the resource. Always compute#resource_policies for resource policies.
func (o ResourcePolicyOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicy) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o ResourcePolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ResourcePolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o ResourcePolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
func (o ResourcePolicyOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePolicy) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// The system status of the resource policy.
func (o ResourcePolicyOutput) ResourceStatus() ResourcePolicyResourceStatusResponseOutput {
	return o.ApplyT(func(v *ResourcePolicy) ResourcePolicyResourceStatusResponseOutput { return v.ResourceStatus }).(ResourcePolicyResourceStatusResponseOutput)
}

// Server-defined fully-qualified URL for this resource.
func (o ResourcePolicyOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicy) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Server-defined URL for this resource with the resource id.
func (o ResourcePolicyOutput) SelfLinkWithId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicy) pulumi.StringOutput { return v.SelfLinkWithId }).(pulumi.StringOutput)
}

// Resource policy for persistent disks for creating snapshots.
func (o ResourcePolicyOutput) SnapshotSchedulePolicy() ResourcePolicySnapshotSchedulePolicyResponseOutput {
	return o.ApplyT(func(v *ResourcePolicy) ResourcePolicySnapshotSchedulePolicyResponseOutput {
		return v.SnapshotSchedulePolicy
	}).(ResourcePolicySnapshotSchedulePolicyResponseOutput)
}

// The status of resource policy creation.
func (o ResourcePolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcePolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Resource policy applicable to VMs for infrastructure maintenance.
func (o ResourcePolicyOutput) VmMaintenancePolicy() ResourcePolicyVmMaintenancePolicyResponseOutput {
	return o.ApplyT(func(v *ResourcePolicy) ResourcePolicyVmMaintenancePolicyResponseOutput { return v.VmMaintenancePolicy }).(ResourcePolicyVmMaintenancePolicyResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePolicyInput)(nil)).Elem(), &ResourcePolicy{})
	pulumi.RegisterOutputType(ResourcePolicyOutput{})
}
