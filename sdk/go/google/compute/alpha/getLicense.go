// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns the specified License resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
func LookupLicense(ctx *pulumi.Context, args *LookupLicenseArgs, opts ...pulumi.InvokeOption) (*LookupLicenseResult, error) {
	var rv LookupLicenseResult
	err := ctx.Invoke("google-native:compute/alpha:getLicense", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLicenseArgs struct {
	License string  `pulumi:"license"`
	Project *string `pulumi:"project"`
}

type LookupLicenseResult struct {
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp string `pulumi:"creationTimestamp"`
	// An optional textual description of the resource; provided by the client when the resource is created.
	Description string `pulumi:"description"`
	// Type of resource. Always compute#license for licenses.
	Kind string `pulumi:"kind"`
	// The unique code used to attach this license to images, snapshots, and disks.
	LicenseCode string `pulumi:"licenseCode"`
	// Name of the resource. The name must be 1-63 characters long and comply with RFC1035.
	Name                 string                              `pulumi:"name"`
	ResourceRequirements LicenseResourceRequirementsResponse `pulumi:"resourceRequirements"`
	// Server-defined URL for the resource.
	SelfLink string `pulumi:"selfLink"`
	// Server-defined URL for this resource with the resource id.
	SelfLinkWithId string `pulumi:"selfLinkWithId"`
	// If false, licenses will not be copied from the source resource when creating an image from a disk, disk from snapshot, or snapshot from disk.
	Transferable bool `pulumi:"transferable"`
}

func LookupLicenseOutput(ctx *pulumi.Context, args LookupLicenseOutputArgs, opts ...pulumi.InvokeOption) LookupLicenseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLicenseResult, error) {
			args := v.(LookupLicenseArgs)
			r, err := LookupLicense(ctx, &args, opts...)
			return *r, err
		}).(LookupLicenseResultOutput)
}

type LookupLicenseOutputArgs struct {
	License pulumi.StringInput    `pulumi:"license"`
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupLicenseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLicenseArgs)(nil)).Elem()
}

type LookupLicenseResultOutput struct{ *pulumi.OutputState }

func (LookupLicenseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLicenseResult)(nil)).Elem()
}

func (o LookupLicenseResultOutput) ToLookupLicenseResultOutput() LookupLicenseResultOutput {
	return o
}

func (o LookupLicenseResultOutput) ToLookupLicenseResultOutputWithContext(ctx context.Context) LookupLicenseResultOutput {
	return o
}

// Creation timestamp in RFC3339 text format.
func (o LookupLicenseResultOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLicenseResult) string { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional textual description of the resource; provided by the client when the resource is created.
func (o LookupLicenseResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLicenseResult) string { return v.Description }).(pulumi.StringOutput)
}

// Type of resource. Always compute#license for licenses.
func (o LookupLicenseResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLicenseResult) string { return v.Kind }).(pulumi.StringOutput)
}

// The unique code used to attach this license to images, snapshots, and disks.
func (o LookupLicenseResultOutput) LicenseCode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLicenseResult) string { return v.LicenseCode }).(pulumi.StringOutput)
}

// Name of the resource. The name must be 1-63 characters long and comply with RFC1035.
func (o LookupLicenseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLicenseResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupLicenseResultOutput) ResourceRequirements() LicenseResourceRequirementsResponseOutput {
	return o.ApplyT(func(v LookupLicenseResult) LicenseResourceRequirementsResponse { return v.ResourceRequirements }).(LicenseResourceRequirementsResponseOutput)
}

// Server-defined URL for the resource.
func (o LookupLicenseResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLicenseResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

// Server-defined URL for this resource with the resource id.
func (o LookupLicenseResultOutput) SelfLinkWithId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLicenseResult) string { return v.SelfLinkWithId }).(pulumi.StringOutput)
}

// If false, licenses will not be copied from the source resource when creating an image from a disk, disk from snapshot, or snapshot from disk.
func (o LookupLicenseResultOutput) Transferable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLicenseResult) bool { return v.Transferable }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLicenseResultOutput{})
}
