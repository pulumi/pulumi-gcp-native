// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a model resource.
func LookupModel(ctx *pulumi.Context, args *LookupModelArgs, opts ...pulumi.InvokeOption) (*LookupModelResult, error) {
	var rv LookupModelResult
	err := ctx.Invoke("google-native:firebaseml/v1beta2:getModel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupModelArgs struct {
	ModelId string  `pulumi:"modelId"`
	Project *string `pulumi:"project"`
}

type LookupModelResult struct {
	// Lists operation ids associated with this model whose status is NOT done.
	ActiveOperations []OperationResponse `pulumi:"activeOperations"`
	// Timestamp when this model was created in Firebase ML.
	CreateTime string `pulumi:"createTime"`
	// The name of the model to create. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores(_) and ASCII digits 0-9. It must start with a letter.
	DisplayName string `pulumi:"displayName"`
	// See RFC7232 https://tools.ietf.org/html/rfc7232#section-2.3
	Etag string `pulumi:"etag"`
	// The model_hash will change if a new file is available for download.
	ModelHash string `pulumi:"modelHash"`
	// The resource name of the Model. Model names have the form `projects/{project_id}/models/{model_id}` The name is ignored when creating a model.
	Name string `pulumi:"name"`
	// State common to all model types. Includes publishing and validation information.
	State ModelStateResponse `pulumi:"state"`
	// User defined tags which can be used to group/filter models during listing
	Tags []string `pulumi:"tags"`
	// A TFLite Model
	TfliteModel TfLiteModelResponse `pulumi:"tfliteModel"`
	// Timestamp when this model was updated in Firebase ML.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupModelOutput(ctx *pulumi.Context, args LookupModelOutputArgs, opts ...pulumi.InvokeOption) LookupModelResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupModelResult, error) {
			args := v.(LookupModelArgs)
			r, err := LookupModel(ctx, &args, opts...)
			var s LookupModelResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupModelResultOutput)
}

type LookupModelOutputArgs struct {
	ModelId pulumi.StringInput    `pulumi:"modelId"`
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupModelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupModelArgs)(nil)).Elem()
}

type LookupModelResultOutput struct{ *pulumi.OutputState }

func (LookupModelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupModelResult)(nil)).Elem()
}

func (o LookupModelResultOutput) ToLookupModelResultOutput() LookupModelResultOutput {
	return o
}

func (o LookupModelResultOutput) ToLookupModelResultOutputWithContext(ctx context.Context) LookupModelResultOutput {
	return o
}

// Lists operation ids associated with this model whose status is NOT done.
func (o LookupModelResultOutput) ActiveOperations() OperationResponseArrayOutput {
	return o.ApplyT(func(v LookupModelResult) []OperationResponse { return v.ActiveOperations }).(OperationResponseArrayOutput)
}

// Timestamp when this model was created in Firebase ML.
func (o LookupModelResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The name of the model to create. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores(_) and ASCII digits 0-9. It must start with a letter.
func (o LookupModelResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// See RFC7232 https://tools.ietf.org/html/rfc7232#section-2.3
func (o LookupModelResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.Etag }).(pulumi.StringOutput)
}

// The model_hash will change if a new file is available for download.
func (o LookupModelResultOutput) ModelHash() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.ModelHash }).(pulumi.StringOutput)
}

// The resource name of the Model. Model names have the form `projects/{project_id}/models/{model_id}` The name is ignored when creating a model.
func (o LookupModelResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.Name }).(pulumi.StringOutput)
}

// State common to all model types. Includes publishing and validation information.
func (o LookupModelResultOutput) State() ModelStateResponseOutput {
	return o.ApplyT(func(v LookupModelResult) ModelStateResponse { return v.State }).(ModelStateResponseOutput)
}

// User defined tags which can be used to group/filter models during listing
func (o LookupModelResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupModelResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// A TFLite Model
func (o LookupModelResultOutput) TfliteModel() TfLiteModelResponseOutput {
	return o.ApplyT(func(v LookupModelResult) TfLiteModelResponse { return v.TfliteModel }).(TfLiteModelResponseOutput)
}

// Timestamp when this model was updated in Firebase ML.
func (o LookupModelResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupModelResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupModelResultOutput{})
}
