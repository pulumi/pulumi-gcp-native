// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// State common to all model types. Includes publishing and validation information.
type ModelStateType struct {
	// Indicates if this model has been published.
	Published *bool `pulumi:"published"`
}

// ModelStateTypeInput is an input type that accepts ModelStateTypeArgs and ModelStateTypeOutput values.
// You can construct a concrete instance of `ModelStateTypeInput` via:
//
//	ModelStateTypeArgs{...}
type ModelStateTypeInput interface {
	pulumi.Input

	ToModelStateTypeOutput() ModelStateTypeOutput
	ToModelStateTypeOutputWithContext(context.Context) ModelStateTypeOutput
}

// State common to all model types. Includes publishing and validation information.
type ModelStateTypeArgs struct {
	// Indicates if this model has been published.
	Published pulumi.BoolPtrInput `pulumi:"published"`
}

func (ModelStateTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelStateType)(nil)).Elem()
}

func (i ModelStateTypeArgs) ToModelStateTypeOutput() ModelStateTypeOutput {
	return i.ToModelStateTypeOutputWithContext(context.Background())
}

func (i ModelStateTypeArgs) ToModelStateTypeOutputWithContext(ctx context.Context) ModelStateTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelStateTypeOutput)
}

func (i ModelStateTypeArgs) ToModelStateTypePtrOutput() ModelStateTypePtrOutput {
	return i.ToModelStateTypePtrOutputWithContext(context.Background())
}

func (i ModelStateTypeArgs) ToModelStateTypePtrOutputWithContext(ctx context.Context) ModelStateTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelStateTypeOutput).ToModelStateTypePtrOutputWithContext(ctx)
}

// ModelStateTypePtrInput is an input type that accepts ModelStateTypeArgs, ModelStateTypePtr and ModelStateTypePtrOutput values.
// You can construct a concrete instance of `ModelStateTypePtrInput` via:
//
//	        ModelStateTypeArgs{...}
//
//	or:
//
//	        nil
type ModelStateTypePtrInput interface {
	pulumi.Input

	ToModelStateTypePtrOutput() ModelStateTypePtrOutput
	ToModelStateTypePtrOutputWithContext(context.Context) ModelStateTypePtrOutput
}

type modelStateTypePtrType ModelStateTypeArgs

func ModelStateTypePtr(v *ModelStateTypeArgs) ModelStateTypePtrInput {
	return (*modelStateTypePtrType)(v)
}

func (*modelStateTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelStateType)(nil)).Elem()
}

func (i *modelStateTypePtrType) ToModelStateTypePtrOutput() ModelStateTypePtrOutput {
	return i.ToModelStateTypePtrOutputWithContext(context.Background())
}

func (i *modelStateTypePtrType) ToModelStateTypePtrOutputWithContext(ctx context.Context) ModelStateTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelStateTypePtrOutput)
}

// State common to all model types. Includes publishing and validation information.
type ModelStateTypeOutput struct{ *pulumi.OutputState }

func (ModelStateTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelStateType)(nil)).Elem()
}

func (o ModelStateTypeOutput) ToModelStateTypeOutput() ModelStateTypeOutput {
	return o
}

func (o ModelStateTypeOutput) ToModelStateTypeOutputWithContext(ctx context.Context) ModelStateTypeOutput {
	return o
}

func (o ModelStateTypeOutput) ToModelStateTypePtrOutput() ModelStateTypePtrOutput {
	return o.ToModelStateTypePtrOutputWithContext(context.Background())
}

func (o ModelStateTypeOutput) ToModelStateTypePtrOutputWithContext(ctx context.Context) ModelStateTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModelStateType) *ModelStateType {
		return &v
	}).(ModelStateTypePtrOutput)
}

// Indicates if this model has been published.
func (o ModelStateTypeOutput) Published() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelStateType) *bool { return v.Published }).(pulumi.BoolPtrOutput)
}

type ModelStateTypePtrOutput struct{ *pulumi.OutputState }

func (ModelStateTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelStateType)(nil)).Elem()
}

func (o ModelStateTypePtrOutput) ToModelStateTypePtrOutput() ModelStateTypePtrOutput {
	return o
}

func (o ModelStateTypePtrOutput) ToModelStateTypePtrOutputWithContext(ctx context.Context) ModelStateTypePtrOutput {
	return o
}

func (o ModelStateTypePtrOutput) Elem() ModelStateTypeOutput {
	return o.ApplyT(func(v *ModelStateType) ModelStateType {
		if v != nil {
			return *v
		}
		var ret ModelStateType
		return ret
	}).(ModelStateTypeOutput)
}

// Indicates if this model has been published.
func (o ModelStateTypePtrOutput) Published() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ModelStateType) *bool {
		if v == nil {
			return nil
		}
		return v.Published
	}).(pulumi.BoolPtrOutput)
}

// State common to all model types. Includes publishing and validation information.
type ModelStateResponse struct {
	// Indicates if this model has been published.
	Published bool `pulumi:"published"`
	// Indicates the latest validation error on the model if any. A model may have validation errors if there were problems during the model creation/update. e.g. in the case of a TfLiteModel, if a tflite model file was missing or in the wrong format. This field will be empty for valid models.
	ValidationError StatusResponse `pulumi:"validationError"`
}

// State common to all model types. Includes publishing and validation information.
type ModelStateResponseOutput struct{ *pulumi.OutputState }

func (ModelStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelStateResponse)(nil)).Elem()
}

func (o ModelStateResponseOutput) ToModelStateResponseOutput() ModelStateResponseOutput {
	return o
}

func (o ModelStateResponseOutput) ToModelStateResponseOutputWithContext(ctx context.Context) ModelStateResponseOutput {
	return o
}

// Indicates if this model has been published.
func (o ModelStateResponseOutput) Published() pulumi.BoolOutput {
	return o.ApplyT(func(v ModelStateResponse) bool { return v.Published }).(pulumi.BoolOutput)
}

// Indicates the latest validation error on the model if any. A model may have validation errors if there were problems during the model creation/update. e.g. in the case of a TfLiteModel, if a tflite model file was missing or in the wrong format. This field will be empty for valid models.
func (o ModelStateResponseOutput) ValidationError() StatusResponseOutput {
	return o.ApplyT(func(v ModelStateResponse) StatusResponse { return v.ValidationError }).(StatusResponseOutput)
}

// This resource represents a long-running operation that is the result of a network API call.
type OperationResponse struct {
	// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
	Done bool `pulumi:"done"`
	// The error result of the operation in case of failure or cancellation.
	Error StatusResponse `pulumi:"error"`
	// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
	Metadata map[string]interface{} `pulumi:"metadata"`
	// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
	Name string `pulumi:"name"`
	// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
	Response map[string]interface{} `pulumi:"response"`
}

// This resource represents a long-running operation that is the result of a network API call.
type OperationResponseOutput struct{ *pulumi.OutputState }

func (OperationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationResponse)(nil)).Elem()
}

func (o OperationResponseOutput) ToOperationResponseOutput() OperationResponseOutput {
	return o
}

func (o OperationResponseOutput) ToOperationResponseOutputWithContext(ctx context.Context) OperationResponseOutput {
	return o
}

// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
func (o OperationResponseOutput) Done() pulumi.BoolOutput {
	return o.ApplyT(func(v OperationResponse) bool { return v.Done }).(pulumi.BoolOutput)
}

// The error result of the operation in case of failure or cancellation.
func (o OperationResponseOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v OperationResponse) StatusResponse { return v.Error }).(StatusResponseOutput)
}

// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
func (o OperationResponseOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v OperationResponse) map[string]interface{} { return v.Metadata }).(pulumi.MapOutput)
}

// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
func (o OperationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OperationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
func (o OperationResponseOutput) Response() pulumi.MapOutput {
	return o.ApplyT(func(v OperationResponse) map[string]interface{} { return v.Response }).(pulumi.MapOutput)
}

type OperationResponseArrayOutput struct{ *pulumi.OutputState }

func (OperationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OperationResponse)(nil)).Elem()
}

func (o OperationResponseArrayOutput) ToOperationResponseArrayOutput() OperationResponseArrayOutput {
	return o
}

func (o OperationResponseArrayOutput) ToOperationResponseArrayOutputWithContext(ctx context.Context) OperationResponseArrayOutput {
	return o
}

func (o OperationResponseArrayOutput) Index(i pulumi.IntInput) OperationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OperationResponse {
		return vs[0].([]OperationResponse)[vs[1].(int)]
	}).(OperationResponseOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Information that is specific to TfLite models.
type TfLiteModel struct {
	// The AutoML model id referencing a model you created with the AutoML API. The name should have format 'projects//locations//models/' (This is the model resource name returned from the AutoML API)
	AutomlModel *string `pulumi:"automlModel"`
	// The TfLite file containing the model. (Stored in Google Cloud). The gcs_tflite_uri should have form: gs://some-bucket/some-model.tflite Note: If you update the file in the original location, it is necessary to call UpdateModel for ML to pick up and validate the updated file.
	GcsTfliteUri *string `pulumi:"gcsTfliteUri"`
}

// TfLiteModelInput is an input type that accepts TfLiteModelArgs and TfLiteModelOutput values.
// You can construct a concrete instance of `TfLiteModelInput` via:
//
//	TfLiteModelArgs{...}
type TfLiteModelInput interface {
	pulumi.Input

	ToTfLiteModelOutput() TfLiteModelOutput
	ToTfLiteModelOutputWithContext(context.Context) TfLiteModelOutput
}

// Information that is specific to TfLite models.
type TfLiteModelArgs struct {
	// The AutoML model id referencing a model you created with the AutoML API. The name should have format 'projects//locations//models/' (This is the model resource name returned from the AutoML API)
	AutomlModel pulumi.StringPtrInput `pulumi:"automlModel"`
	// The TfLite file containing the model. (Stored in Google Cloud). The gcs_tflite_uri should have form: gs://some-bucket/some-model.tflite Note: If you update the file in the original location, it is necessary to call UpdateModel for ML to pick up and validate the updated file.
	GcsTfliteUri pulumi.StringPtrInput `pulumi:"gcsTfliteUri"`
}

func (TfLiteModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TfLiteModel)(nil)).Elem()
}

func (i TfLiteModelArgs) ToTfLiteModelOutput() TfLiteModelOutput {
	return i.ToTfLiteModelOutputWithContext(context.Background())
}

func (i TfLiteModelArgs) ToTfLiteModelOutputWithContext(ctx context.Context) TfLiteModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TfLiteModelOutput)
}

func (i TfLiteModelArgs) ToTfLiteModelPtrOutput() TfLiteModelPtrOutput {
	return i.ToTfLiteModelPtrOutputWithContext(context.Background())
}

func (i TfLiteModelArgs) ToTfLiteModelPtrOutputWithContext(ctx context.Context) TfLiteModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TfLiteModelOutput).ToTfLiteModelPtrOutputWithContext(ctx)
}

// TfLiteModelPtrInput is an input type that accepts TfLiteModelArgs, TfLiteModelPtr and TfLiteModelPtrOutput values.
// You can construct a concrete instance of `TfLiteModelPtrInput` via:
//
//	        TfLiteModelArgs{...}
//
//	or:
//
//	        nil
type TfLiteModelPtrInput interface {
	pulumi.Input

	ToTfLiteModelPtrOutput() TfLiteModelPtrOutput
	ToTfLiteModelPtrOutputWithContext(context.Context) TfLiteModelPtrOutput
}

type tfLiteModelPtrType TfLiteModelArgs

func TfLiteModelPtr(v *TfLiteModelArgs) TfLiteModelPtrInput {
	return (*tfLiteModelPtrType)(v)
}

func (*tfLiteModelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TfLiteModel)(nil)).Elem()
}

func (i *tfLiteModelPtrType) ToTfLiteModelPtrOutput() TfLiteModelPtrOutput {
	return i.ToTfLiteModelPtrOutputWithContext(context.Background())
}

func (i *tfLiteModelPtrType) ToTfLiteModelPtrOutputWithContext(ctx context.Context) TfLiteModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TfLiteModelPtrOutput)
}

// Information that is specific to TfLite models.
type TfLiteModelOutput struct{ *pulumi.OutputState }

func (TfLiteModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TfLiteModel)(nil)).Elem()
}

func (o TfLiteModelOutput) ToTfLiteModelOutput() TfLiteModelOutput {
	return o
}

func (o TfLiteModelOutput) ToTfLiteModelOutputWithContext(ctx context.Context) TfLiteModelOutput {
	return o
}

func (o TfLiteModelOutput) ToTfLiteModelPtrOutput() TfLiteModelPtrOutput {
	return o.ToTfLiteModelPtrOutputWithContext(context.Background())
}

func (o TfLiteModelOutput) ToTfLiteModelPtrOutputWithContext(ctx context.Context) TfLiteModelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TfLiteModel) *TfLiteModel {
		return &v
	}).(TfLiteModelPtrOutput)
}

// The AutoML model id referencing a model you created with the AutoML API. The name should have format 'projects//locations//models/' (This is the model resource name returned from the AutoML API)
func (o TfLiteModelOutput) AutomlModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TfLiteModel) *string { return v.AutomlModel }).(pulumi.StringPtrOutput)
}

// The TfLite file containing the model. (Stored in Google Cloud). The gcs_tflite_uri should have form: gs://some-bucket/some-model.tflite Note: If you update the file in the original location, it is necessary to call UpdateModel for ML to pick up and validate the updated file.
func (o TfLiteModelOutput) GcsTfliteUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TfLiteModel) *string { return v.GcsTfliteUri }).(pulumi.StringPtrOutput)
}

type TfLiteModelPtrOutput struct{ *pulumi.OutputState }

func (TfLiteModelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TfLiteModel)(nil)).Elem()
}

func (o TfLiteModelPtrOutput) ToTfLiteModelPtrOutput() TfLiteModelPtrOutput {
	return o
}

func (o TfLiteModelPtrOutput) ToTfLiteModelPtrOutputWithContext(ctx context.Context) TfLiteModelPtrOutput {
	return o
}

func (o TfLiteModelPtrOutput) Elem() TfLiteModelOutput {
	return o.ApplyT(func(v *TfLiteModel) TfLiteModel {
		if v != nil {
			return *v
		}
		var ret TfLiteModel
		return ret
	}).(TfLiteModelOutput)
}

// The AutoML model id referencing a model you created with the AutoML API. The name should have format 'projects//locations//models/' (This is the model resource name returned from the AutoML API)
func (o TfLiteModelPtrOutput) AutomlModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TfLiteModel) *string {
		if v == nil {
			return nil
		}
		return v.AutomlModel
	}).(pulumi.StringPtrOutput)
}

// The TfLite file containing the model. (Stored in Google Cloud). The gcs_tflite_uri should have form: gs://some-bucket/some-model.tflite Note: If you update the file in the original location, it is necessary to call UpdateModel for ML to pick up and validate the updated file.
func (o TfLiteModelPtrOutput) GcsTfliteUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TfLiteModel) *string {
		if v == nil {
			return nil
		}
		return v.GcsTfliteUri
	}).(pulumi.StringPtrOutput)
}

// Information that is specific to TfLite models.
type TfLiteModelResponse struct {
	// The AutoML model id referencing a model you created with the AutoML API. The name should have format 'projects//locations//models/' (This is the model resource name returned from the AutoML API)
	AutomlModel string `pulumi:"automlModel"`
	// The TfLite file containing the model. (Stored in Google Cloud). The gcs_tflite_uri should have form: gs://some-bucket/some-model.tflite Note: If you update the file in the original location, it is necessary to call UpdateModel for ML to pick up and validate the updated file.
	GcsTfliteUri string `pulumi:"gcsTfliteUri"`
	// The size of the TFLite model
	SizeBytes string `pulumi:"sizeBytes"`
}

// Information that is specific to TfLite models.
type TfLiteModelResponseOutput struct{ *pulumi.OutputState }

func (TfLiteModelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TfLiteModelResponse)(nil)).Elem()
}

func (o TfLiteModelResponseOutput) ToTfLiteModelResponseOutput() TfLiteModelResponseOutput {
	return o
}

func (o TfLiteModelResponseOutput) ToTfLiteModelResponseOutputWithContext(ctx context.Context) TfLiteModelResponseOutput {
	return o
}

// The AutoML model id referencing a model you created with the AutoML API. The name should have format 'projects//locations//models/' (This is the model resource name returned from the AutoML API)
func (o TfLiteModelResponseOutput) AutomlModel() pulumi.StringOutput {
	return o.ApplyT(func(v TfLiteModelResponse) string { return v.AutomlModel }).(pulumi.StringOutput)
}

// The TfLite file containing the model. (Stored in Google Cloud). The gcs_tflite_uri should have form: gs://some-bucket/some-model.tflite Note: If you update the file in the original location, it is necessary to call UpdateModel for ML to pick up and validate the updated file.
func (o TfLiteModelResponseOutput) GcsTfliteUri() pulumi.StringOutput {
	return o.ApplyT(func(v TfLiteModelResponse) string { return v.GcsTfliteUri }).(pulumi.StringOutput)
}

// The size of the TFLite model
func (o TfLiteModelResponseOutput) SizeBytes() pulumi.StringOutput {
	return o.ApplyT(func(v TfLiteModelResponse) string { return v.SizeBytes }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModelStateTypeInput)(nil)).Elem(), ModelStateTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelStateTypePtrInput)(nil)).Elem(), ModelStateTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TfLiteModelInput)(nil)).Elem(), TfLiteModelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TfLiteModelPtrInput)(nil)).Elem(), TfLiteModelArgs{})
	pulumi.RegisterOutputType(ModelStateTypeOutput{})
	pulumi.RegisterOutputType(ModelStateTypePtrOutput{})
	pulumi.RegisterOutputType(ModelStateResponseOutput{})
	pulumi.RegisterOutputType(OperationResponseOutput{})
	pulumi.RegisterOutputType(OperationResponseArrayOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(TfLiteModelOutput{})
	pulumi.RegisterOutputType(TfLiteModelPtrOutput{})
	pulumi.RegisterOutputType(TfLiteModelResponseOutput{})
}
