// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// State common to all model types. Includes publishing and validation information.
type ModelStateType struct {
	// Indicates if this model has been published.
	Published *bool `pulumi:"published"`
	// Output only. Indicates the latest validation error on the model if any. A model may have validation errors if there were problems during the model creation/update. e.g. in the case of a TfLiteModel, if a tflite model file was missing or in the wrong format. This field will be empty for valid models.
	ValidationError *Status `pulumi:"validationError"`
}

// ModelStateTypeInput is an input type that accepts ModelStateTypeArgs and ModelStateTypeOutput values.
// You can construct a concrete instance of `ModelStateTypeInput` via:
//
//          ModelStateTypeArgs{...}
type ModelStateTypeInput interface {
	pulumi.Input

	ToModelStateTypeOutput() ModelStateTypeOutput
	ToModelStateTypeOutputWithContext(context.Context) ModelStateTypeOutput
}

// State common to all model types. Includes publishing and validation information.
type ModelStateTypeArgs struct {
	// Indicates if this model has been published.
	Published pulumi.BoolPtrInput `pulumi:"published"`
	// Output only. Indicates the latest validation error on the model if any. A model may have validation errors if there were problems during the model creation/update. e.g. in the case of a TfLiteModel, if a tflite model file was missing or in the wrong format. This field will be empty for valid models.
	ValidationError StatusPtrInput `pulumi:"validationError"`
}

func (ModelStateTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelStateType)(nil)).Elem()
}

func (i ModelStateTypeArgs) ToModelStateTypeOutput() ModelStateTypeOutput {
	return i.ToModelStateTypeOutputWithContext(context.Background())
}

func (i ModelStateTypeArgs) ToModelStateTypeOutputWithContext(ctx context.Context) ModelStateTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelStateTypeOutput)
}

func (i ModelStateTypeArgs) ToModelStateTypePtrOutput() ModelStateTypePtrOutput {
	return i.ToModelStateTypePtrOutputWithContext(context.Background())
}

func (i ModelStateTypeArgs) ToModelStateTypePtrOutputWithContext(ctx context.Context) ModelStateTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelStateTypeOutput).ToModelStateTypePtrOutputWithContext(ctx)
}

// ModelStateTypePtrInput is an input type that accepts ModelStateTypeArgs, ModelStateTypePtr and ModelStateTypePtrOutput values.
// You can construct a concrete instance of `ModelStateTypePtrInput` via:
//
//          ModelStateTypeArgs{...}
//
//  or:
//
//          nil
type ModelStateTypePtrInput interface {
	pulumi.Input

	ToModelStateTypePtrOutput() ModelStateTypePtrOutput
	ToModelStateTypePtrOutputWithContext(context.Context) ModelStateTypePtrOutput
}

type modelStateTypePtrType ModelStateTypeArgs

func ModelStateTypePtr(v *ModelStateTypeArgs) ModelStateTypePtrInput {
	return (*modelStateTypePtrType)(v)
}

func (*modelStateTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelStateType)(nil)).Elem()
}

func (i *modelStateTypePtrType) ToModelStateTypePtrOutput() ModelStateTypePtrOutput {
	return i.ToModelStateTypePtrOutputWithContext(context.Background())
}

func (i *modelStateTypePtrType) ToModelStateTypePtrOutputWithContext(ctx context.Context) ModelStateTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelStateTypePtrOutput)
}

// State common to all model types. Includes publishing and validation information.
type ModelStateTypeOutput struct{ *pulumi.OutputState }

func (ModelStateTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelStateType)(nil)).Elem()
}

func (o ModelStateTypeOutput) ToModelStateTypeOutput() ModelStateTypeOutput {
	return o
}

func (o ModelStateTypeOutput) ToModelStateTypeOutputWithContext(ctx context.Context) ModelStateTypeOutput {
	return o
}

func (o ModelStateTypeOutput) ToModelStateTypePtrOutput() ModelStateTypePtrOutput {
	return o.ToModelStateTypePtrOutputWithContext(context.Background())
}

func (o ModelStateTypeOutput) ToModelStateTypePtrOutputWithContext(ctx context.Context) ModelStateTypePtrOutput {
	return o.ApplyT(func(v ModelStateType) *ModelStateType {
		return &v
	}).(ModelStateTypePtrOutput)
}

// Indicates if this model has been published.
func (o ModelStateTypeOutput) Published() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelStateType) *bool { return v.Published }).(pulumi.BoolPtrOutput)
}

// Output only. Indicates the latest validation error on the model if any. A model may have validation errors if there were problems during the model creation/update. e.g. in the case of a TfLiteModel, if a tflite model file was missing or in the wrong format. This field will be empty for valid models.
func (o ModelStateTypeOutput) ValidationError() StatusPtrOutput {
	return o.ApplyT(func(v ModelStateType) *Status { return v.ValidationError }).(StatusPtrOutput)
}

type ModelStateTypePtrOutput struct{ *pulumi.OutputState }

func (ModelStateTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelStateType)(nil)).Elem()
}

func (o ModelStateTypePtrOutput) ToModelStateTypePtrOutput() ModelStateTypePtrOutput {
	return o
}

func (o ModelStateTypePtrOutput) ToModelStateTypePtrOutputWithContext(ctx context.Context) ModelStateTypePtrOutput {
	return o
}

func (o ModelStateTypePtrOutput) Elem() ModelStateTypeOutput {
	return o.ApplyT(func(v *ModelStateType) ModelStateType { return *v }).(ModelStateTypeOutput)
}

// Indicates if this model has been published.
func (o ModelStateTypePtrOutput) Published() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ModelStateType) *bool {
		if v == nil {
			return nil
		}
		return v.Published
	}).(pulumi.BoolPtrOutput)
}

// Output only. Indicates the latest validation error on the model if any. A model may have validation errors if there were problems during the model creation/update. e.g. in the case of a TfLiteModel, if a tflite model file was missing or in the wrong format. This field will be empty for valid models.
func (o ModelStateTypePtrOutput) ValidationError() StatusPtrOutput {
	return o.ApplyT(func(v *ModelStateType) *Status {
		if v == nil {
			return nil
		}
		return v.ValidationError
	}).(StatusPtrOutput)
}

// This resource represents a long-running operation that is the result of a network API call.
type Operation struct {
	// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
	Done *bool `pulumi:"done"`
	// The error result of the operation in case of failure or cancellation.
	Error *Status `pulumi:"error"`
	// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
	Metadata map[string]string `pulumi:"metadata"`
	// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
	Name *string `pulumi:"name"`
	// The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
	Response map[string]string `pulumi:"response"`
}

// OperationInput is an input type that accepts OperationArgs and OperationOutput values.
// You can construct a concrete instance of `OperationInput` via:
//
//          OperationArgs{...}
type OperationInput interface {
	pulumi.Input

	ToOperationOutput() OperationOutput
	ToOperationOutputWithContext(context.Context) OperationOutput
}

// This resource represents a long-running operation that is the result of a network API call.
type OperationArgs struct {
	// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
	Done pulumi.BoolPtrInput `pulumi:"done"`
	// The error result of the operation in case of failure or cancellation.
	Error StatusPtrInput `pulumi:"error"`
	// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
	Response pulumi.StringMapInput `pulumi:"response"`
}

func (OperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Operation)(nil)).Elem()
}

func (i OperationArgs) ToOperationOutput() OperationOutput {
	return i.ToOperationOutputWithContext(context.Background())
}

func (i OperationArgs) ToOperationOutputWithContext(ctx context.Context) OperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationOutput)
}

// OperationArrayInput is an input type that accepts OperationArray and OperationArrayOutput values.
// You can construct a concrete instance of `OperationArrayInput` via:
//
//          OperationArray{ OperationArgs{...} }
type OperationArrayInput interface {
	pulumi.Input

	ToOperationArrayOutput() OperationArrayOutput
	ToOperationArrayOutputWithContext(context.Context) OperationArrayOutput
}

type OperationArray []OperationInput

func (OperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Operation)(nil)).Elem()
}

func (i OperationArray) ToOperationArrayOutput() OperationArrayOutput {
	return i.ToOperationArrayOutputWithContext(context.Background())
}

func (i OperationArray) ToOperationArrayOutputWithContext(ctx context.Context) OperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationArrayOutput)
}

// This resource represents a long-running operation that is the result of a network API call.
type OperationOutput struct{ *pulumi.OutputState }

func (OperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Operation)(nil)).Elem()
}

func (o OperationOutput) ToOperationOutput() OperationOutput {
	return o
}

func (o OperationOutput) ToOperationOutputWithContext(ctx context.Context) OperationOutput {
	return o
}

// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
func (o OperationOutput) Done() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Operation) *bool { return v.Done }).(pulumi.BoolPtrOutput)
}

// The error result of the operation in case of failure or cancellation.
func (o OperationOutput) Error() StatusPtrOutput {
	return o.ApplyT(func(v Operation) *Status { return v.Error }).(StatusPtrOutput)
}

// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
func (o OperationOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v Operation) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
func (o OperationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Operation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
func (o OperationOutput) Response() pulumi.StringMapOutput {
	return o.ApplyT(func(v Operation) map[string]string { return v.Response }).(pulumi.StringMapOutput)
}

type OperationArrayOutput struct{ *pulumi.OutputState }

func (OperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Operation)(nil)).Elem()
}

func (o OperationArrayOutput) ToOperationArrayOutput() OperationArrayOutput {
	return o
}

func (o OperationArrayOutput) ToOperationArrayOutputWithContext(ctx context.Context) OperationArrayOutput {
	return o
}

func (o OperationArrayOutput) Index(i pulumi.IntInput) OperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Operation {
		return vs[0].([]Operation)[vs[1].(int)]
	}).(OperationOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type Status struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code *int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]string `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message *string `pulumi:"message"`
}

// StatusInput is an input type that accepts StatusArgs and StatusOutput values.
// You can construct a concrete instance of `StatusInput` via:
//
//          StatusArgs{...}
type StatusInput interface {
	pulumi.Input

	ToStatusOutput() StatusOutput
	ToStatusOutputWithContext(context.Context) StatusOutput
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details pulumi.StringMapArrayInput `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (StatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (i StatusArgs) ToStatusOutput() StatusOutput {
	return i.ToStatusOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput)
}

func (i StatusArgs) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput).ToStatusPtrOutputWithContext(ctx)
}

// StatusPtrInput is an input type that accepts StatusArgs, StatusPtr and StatusPtrOutput values.
// You can construct a concrete instance of `StatusPtrInput` via:
//
//          StatusArgs{...}
//
//  or:
//
//          nil
type StatusPtrInput interface {
	pulumi.Input

	ToStatusPtrOutput() StatusPtrOutput
	ToStatusPtrOutputWithContext(context.Context) StatusPtrOutput
}

type statusPtrType StatusArgs

func StatusPtr(v *StatusArgs) StatusPtrInput {
	return (*statusPtrType)(v)
}

func (*statusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (i *statusPtrType) ToStatusPtrOutput() StatusPtrOutput {
	return i.ToStatusPtrOutputWithContext(context.Background())
}

func (i *statusPtrType) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusOutput struct{ *pulumi.OutputState }

func (StatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (o StatusOutput) ToStatusOutput() StatusOutput {
	return o
}

func (o StatusOutput) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return o
}

func (o StatusOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o.ToStatusPtrOutputWithContext(context.Background())
}

func (o StatusOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o.ApplyT(func(v Status) *Status {
		return &v
	}).(StatusPtrOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Status) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v Status) []map[string]string { return v.Details }).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Status) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type StatusPtrOutput struct{ *pulumi.OutputState }

func (StatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Status)(nil)).Elem()
}

func (o StatusPtrOutput) ToStatusPtrOutput() StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) ToStatusPtrOutputWithContext(ctx context.Context) StatusPtrOutput {
	return o
}

func (o StatusPtrOutput) Elem() StatusOutput {
	return o.ApplyT(func(v *Status) Status { return *v }).(StatusOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusPtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Status) *int {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusPtrOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *Status) []map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Status) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Information that is specific to TfLite models.
type TfLiteModel struct {
	// The AutoML model id referencing a model you created with the AutoML API. The name should have format 'projects//locations//models/' (This is the model resource name returned from the AutoML API)
	AutomlModel *string `pulumi:"automlModel"`
	// The TfLite file containing the model. (Stored in Google Cloud). The gcs_tflite_uri should have form: gs://some-bucket/some-model.tflite Note: If you update the file in the original location, it is necessary to call UpdateModel for ML to pick up and validate the updated file.
	GcsTfliteUri *string `pulumi:"gcsTfliteUri"`
	// Output only. The size of the TFLite model
	SizeBytes *string `pulumi:"sizeBytes"`
}

// TfLiteModelInput is an input type that accepts TfLiteModelArgs and TfLiteModelOutput values.
// You can construct a concrete instance of `TfLiteModelInput` via:
//
//          TfLiteModelArgs{...}
type TfLiteModelInput interface {
	pulumi.Input

	ToTfLiteModelOutput() TfLiteModelOutput
	ToTfLiteModelOutputWithContext(context.Context) TfLiteModelOutput
}

// Information that is specific to TfLite models.
type TfLiteModelArgs struct {
	// The AutoML model id referencing a model you created with the AutoML API. The name should have format 'projects//locations//models/' (This is the model resource name returned from the AutoML API)
	AutomlModel pulumi.StringPtrInput `pulumi:"automlModel"`
	// The TfLite file containing the model. (Stored in Google Cloud). The gcs_tflite_uri should have form: gs://some-bucket/some-model.tflite Note: If you update the file in the original location, it is necessary to call UpdateModel for ML to pick up and validate the updated file.
	GcsTfliteUri pulumi.StringPtrInput `pulumi:"gcsTfliteUri"`
	// Output only. The size of the TFLite model
	SizeBytes pulumi.StringPtrInput `pulumi:"sizeBytes"`
}

func (TfLiteModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TfLiteModel)(nil)).Elem()
}

func (i TfLiteModelArgs) ToTfLiteModelOutput() TfLiteModelOutput {
	return i.ToTfLiteModelOutputWithContext(context.Background())
}

func (i TfLiteModelArgs) ToTfLiteModelOutputWithContext(ctx context.Context) TfLiteModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TfLiteModelOutput)
}

func (i TfLiteModelArgs) ToTfLiteModelPtrOutput() TfLiteModelPtrOutput {
	return i.ToTfLiteModelPtrOutputWithContext(context.Background())
}

func (i TfLiteModelArgs) ToTfLiteModelPtrOutputWithContext(ctx context.Context) TfLiteModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TfLiteModelOutput).ToTfLiteModelPtrOutputWithContext(ctx)
}

// TfLiteModelPtrInput is an input type that accepts TfLiteModelArgs, TfLiteModelPtr and TfLiteModelPtrOutput values.
// You can construct a concrete instance of `TfLiteModelPtrInput` via:
//
//          TfLiteModelArgs{...}
//
//  or:
//
//          nil
type TfLiteModelPtrInput interface {
	pulumi.Input

	ToTfLiteModelPtrOutput() TfLiteModelPtrOutput
	ToTfLiteModelPtrOutputWithContext(context.Context) TfLiteModelPtrOutput
}

type tfLiteModelPtrType TfLiteModelArgs

func TfLiteModelPtr(v *TfLiteModelArgs) TfLiteModelPtrInput {
	return (*tfLiteModelPtrType)(v)
}

func (*tfLiteModelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TfLiteModel)(nil)).Elem()
}

func (i *tfLiteModelPtrType) ToTfLiteModelPtrOutput() TfLiteModelPtrOutput {
	return i.ToTfLiteModelPtrOutputWithContext(context.Background())
}

func (i *tfLiteModelPtrType) ToTfLiteModelPtrOutputWithContext(ctx context.Context) TfLiteModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TfLiteModelPtrOutput)
}

// Information that is specific to TfLite models.
type TfLiteModelOutput struct{ *pulumi.OutputState }

func (TfLiteModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TfLiteModel)(nil)).Elem()
}

func (o TfLiteModelOutput) ToTfLiteModelOutput() TfLiteModelOutput {
	return o
}

func (o TfLiteModelOutput) ToTfLiteModelOutputWithContext(ctx context.Context) TfLiteModelOutput {
	return o
}

func (o TfLiteModelOutput) ToTfLiteModelPtrOutput() TfLiteModelPtrOutput {
	return o.ToTfLiteModelPtrOutputWithContext(context.Background())
}

func (o TfLiteModelOutput) ToTfLiteModelPtrOutputWithContext(ctx context.Context) TfLiteModelPtrOutput {
	return o.ApplyT(func(v TfLiteModel) *TfLiteModel {
		return &v
	}).(TfLiteModelPtrOutput)
}

// The AutoML model id referencing a model you created with the AutoML API. The name should have format 'projects//locations//models/' (This is the model resource name returned from the AutoML API)
func (o TfLiteModelOutput) AutomlModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TfLiteModel) *string { return v.AutomlModel }).(pulumi.StringPtrOutput)
}

// The TfLite file containing the model. (Stored in Google Cloud). The gcs_tflite_uri should have form: gs://some-bucket/some-model.tflite Note: If you update the file in the original location, it is necessary to call UpdateModel for ML to pick up and validate the updated file.
func (o TfLiteModelOutput) GcsTfliteUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TfLiteModel) *string { return v.GcsTfliteUri }).(pulumi.StringPtrOutput)
}

// Output only. The size of the TFLite model
func (o TfLiteModelOutput) SizeBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TfLiteModel) *string { return v.SizeBytes }).(pulumi.StringPtrOutput)
}

type TfLiteModelPtrOutput struct{ *pulumi.OutputState }

func (TfLiteModelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TfLiteModel)(nil)).Elem()
}

func (o TfLiteModelPtrOutput) ToTfLiteModelPtrOutput() TfLiteModelPtrOutput {
	return o
}

func (o TfLiteModelPtrOutput) ToTfLiteModelPtrOutputWithContext(ctx context.Context) TfLiteModelPtrOutput {
	return o
}

func (o TfLiteModelPtrOutput) Elem() TfLiteModelOutput {
	return o.ApplyT(func(v *TfLiteModel) TfLiteModel { return *v }).(TfLiteModelOutput)
}

// The AutoML model id referencing a model you created with the AutoML API. The name should have format 'projects//locations//models/' (This is the model resource name returned from the AutoML API)
func (o TfLiteModelPtrOutput) AutomlModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TfLiteModel) *string {
		if v == nil {
			return nil
		}
		return v.AutomlModel
	}).(pulumi.StringPtrOutput)
}

// The TfLite file containing the model. (Stored in Google Cloud). The gcs_tflite_uri should have form: gs://some-bucket/some-model.tflite Note: If you update the file in the original location, it is necessary to call UpdateModel for ML to pick up and validate the updated file.
func (o TfLiteModelPtrOutput) GcsTfliteUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TfLiteModel) *string {
		if v == nil {
			return nil
		}
		return v.GcsTfliteUri
	}).(pulumi.StringPtrOutput)
}

// Output only. The size of the TFLite model
func (o TfLiteModelPtrOutput) SizeBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TfLiteModel) *string {
		if v == nil {
			return nil
		}
		return v.SizeBytes
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ModelStateTypeOutput{})
	pulumi.RegisterOutputType(ModelStateTypePtrOutput{})
	pulumi.RegisterOutputType(OperationOutput{})
	pulumi.RegisterOutputType(OperationArrayOutput{})
	pulumi.RegisterOutputType(StatusOutput{})
	pulumi.RegisterOutputType(StatusPtrOutput{})
	pulumi.RegisterOutputType(TfLiteModelOutput{})
	pulumi.RegisterOutputType(TfLiteModelPtrOutput{})
}
