// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a model in Firebase ML. The longrunning operation will eventually return a Model
type Model struct {
	pulumi.CustomResourceState

	// Lists operation ids associated with this model whose status is NOT done.
	ActiveOperations OperationResponseArrayOutput `pulumi:"activeOperations"`
	// Timestamp when this model was created in Firebase ML.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The name of the model to create. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores(_) and ASCII digits 0-9. It must start with a letter.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// See RFC7232 https://tools.ietf.org/html/rfc7232#section-2.3
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The model_hash will change if a new file is available for download.
	ModelHash pulumi.StringOutput `pulumi:"modelHash"`
	// The resource name of the Model. Model names have the form `projects/{project_id}/models/{model_id}` The name is ignored when creating a model.
	Name pulumi.StringOutput `pulumi:"name"`
	// State common to all model types. Includes publishing and validation information.
	State ModelStateResponseOutput `pulumi:"state"`
	// User defined tags which can be used to group/filter models during listing
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// A TFLite Model
	TfliteModel TfLiteModelResponseOutput `pulumi:"tfliteModel"`
	// Timestamp when this model was updated in Firebase ML.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewModel registers a new resource with the given unique name, arguments, and options.
func NewModel(ctx *pulumi.Context,
	name string, args *ModelArgs, opts ...pulumi.ResourceOption) (*Model, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	var resource Model
	err := ctx.RegisterResource("google-native:firebaseml/v1beta2:Model", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModel gets an existing Model resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModelState, opts ...pulumi.ResourceOption) (*Model, error) {
	var resource Model
	err := ctx.ReadResource("google-native:firebaseml/v1beta2:Model", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Model resources.
type modelState struct {
}

type ModelState struct {
}

func (ModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*modelState)(nil)).Elem()
}

type modelArgs struct {
	// The name of the model to create. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores(_) and ASCII digits 0-9. It must start with a letter.
	DisplayName string `pulumi:"displayName"`
	// The resource name of the Model. Model names have the form `projects/{project_id}/models/{model_id}` The name is ignored when creating a model.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// State common to all model types. Includes publishing and validation information.
	State *ModelStateType `pulumi:"state"`
	// User defined tags which can be used to group/filter models during listing
	Tags []string `pulumi:"tags"`
	// A TFLite Model
	TfliteModel *TfLiteModel `pulumi:"tfliteModel"`
}

// The set of arguments for constructing a Model resource.
type ModelArgs struct {
	// The name of the model to create. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores(_) and ASCII digits 0-9. It must start with a letter.
	DisplayName pulumi.StringInput
	// The resource name of the Model. Model names have the form `projects/{project_id}/models/{model_id}` The name is ignored when creating a model.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// State common to all model types. Includes publishing and validation information.
	State ModelStateTypePtrInput
	// User defined tags which can be used to group/filter models during listing
	Tags pulumi.StringArrayInput
	// A TFLite Model
	TfliteModel TfLiteModelPtrInput
}

func (ModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*modelArgs)(nil)).Elem()
}

type ModelInput interface {
	pulumi.Input

	ToModelOutput() ModelOutput
	ToModelOutputWithContext(ctx context.Context) ModelOutput
}

func (*Model) ElementType() reflect.Type {
	return reflect.TypeOf((**Model)(nil)).Elem()
}

func (i *Model) ToModelOutput() ModelOutput {
	return i.ToModelOutputWithContext(context.Background())
}

func (i *Model) ToModelOutputWithContext(ctx context.Context) ModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelOutput)
}

type ModelOutput struct{ *pulumi.OutputState }

func (ModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Model)(nil)).Elem()
}

func (o ModelOutput) ToModelOutput() ModelOutput {
	return o
}

func (o ModelOutput) ToModelOutputWithContext(ctx context.Context) ModelOutput {
	return o
}

// Lists operation ids associated with this model whose status is NOT done.
func (o ModelOutput) ActiveOperations() OperationResponseArrayOutput {
	return o.ApplyT(func(v *Model) OperationResponseArrayOutput { return v.ActiveOperations }).(OperationResponseArrayOutput)
}

// Timestamp when this model was created in Firebase ML.
func (o ModelOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The name of the model to create. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores(_) and ASCII digits 0-9. It must start with a letter.
func (o ModelOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// See RFC7232 https://tools.ietf.org/html/rfc7232#section-2.3
func (o ModelOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The model_hash will change if a new file is available for download.
func (o ModelOutput) ModelHash() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.ModelHash }).(pulumi.StringOutput)
}

// The resource name of the Model. Model names have the form `projects/{project_id}/models/{model_id}` The name is ignored when creating a model.
func (o ModelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// State common to all model types. Includes publishing and validation information.
func (o ModelOutput) State() ModelStateResponseOutput {
	return o.ApplyT(func(v *Model) ModelStateResponseOutput { return v.State }).(ModelStateResponseOutput)
}

// User defined tags which can be used to group/filter models during listing
func (o ModelOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Model) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// A TFLite Model
func (o ModelOutput) TfliteModel() TfLiteModelResponseOutput {
	return o.ApplyT(func(v *Model) TfLiteModelResponseOutput { return v.TfliteModel }).(TfLiteModelResponseOutput)
}

// Timestamp when this model was updated in Firebase ML.
func (o ModelOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Model) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModelInput)(nil)).Elem(), &Model{})
	pulumi.RegisterOutputType(ModelOutput{})
}
