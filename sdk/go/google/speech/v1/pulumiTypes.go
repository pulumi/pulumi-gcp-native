// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An item of the class.
type ClassItem struct {
	// The class item's value.
	Value *string `pulumi:"value"`
}

// ClassItemInput is an input type that accepts ClassItemArgs and ClassItemOutput values.
// You can construct a concrete instance of `ClassItemInput` via:
//
//          ClassItemArgs{...}
type ClassItemInput interface {
	pulumi.Input

	ToClassItemOutput() ClassItemOutput
	ToClassItemOutputWithContext(context.Context) ClassItemOutput
}

// An item of the class.
type ClassItemArgs struct {
	// The class item's value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ClassItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassItem)(nil)).Elem()
}

func (i ClassItemArgs) ToClassItemOutput() ClassItemOutput {
	return i.ToClassItemOutputWithContext(context.Background())
}

func (i ClassItemArgs) ToClassItemOutputWithContext(ctx context.Context) ClassItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassItemOutput)
}

// ClassItemArrayInput is an input type that accepts ClassItemArray and ClassItemArrayOutput values.
// You can construct a concrete instance of `ClassItemArrayInput` via:
//
//          ClassItemArray{ ClassItemArgs{...} }
type ClassItemArrayInput interface {
	pulumi.Input

	ToClassItemArrayOutput() ClassItemArrayOutput
	ToClassItemArrayOutputWithContext(context.Context) ClassItemArrayOutput
}

type ClassItemArray []ClassItemInput

func (ClassItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassItem)(nil)).Elem()
}

func (i ClassItemArray) ToClassItemArrayOutput() ClassItemArrayOutput {
	return i.ToClassItemArrayOutputWithContext(context.Background())
}

func (i ClassItemArray) ToClassItemArrayOutputWithContext(ctx context.Context) ClassItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassItemArrayOutput)
}

// An item of the class.
type ClassItemOutput struct{ *pulumi.OutputState }

func (ClassItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassItem)(nil)).Elem()
}

func (o ClassItemOutput) ToClassItemOutput() ClassItemOutput {
	return o
}

func (o ClassItemOutput) ToClassItemOutputWithContext(ctx context.Context) ClassItemOutput {
	return o
}

// The class item's value.
func (o ClassItemOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassItem) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ClassItemArrayOutput struct{ *pulumi.OutputState }

func (ClassItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassItem)(nil)).Elem()
}

func (o ClassItemArrayOutput) ToClassItemArrayOutput() ClassItemArrayOutput {
	return o
}

func (o ClassItemArrayOutput) ToClassItemArrayOutputWithContext(ctx context.Context) ClassItemArrayOutput {
	return o
}

func (o ClassItemArrayOutput) Index(i pulumi.IntInput) ClassItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClassItem {
		return vs[0].([]ClassItem)[vs[1].(int)]
	}).(ClassItemOutput)
}

// An item of the class.
type ClassItemResponse struct {
	// The class item's value.
	Value string `pulumi:"value"`
}

// An item of the class.
type ClassItemResponseOutput struct{ *pulumi.OutputState }

func (ClassItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassItemResponse)(nil)).Elem()
}

func (o ClassItemResponseOutput) ToClassItemResponseOutput() ClassItemResponseOutput {
	return o
}

func (o ClassItemResponseOutput) ToClassItemResponseOutputWithContext(ctx context.Context) ClassItemResponseOutput {
	return o
}

// The class item's value.
func (o ClassItemResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ClassItemResponse) string { return v.Value }).(pulumi.StringOutput)
}

type ClassItemResponseArrayOutput struct{ *pulumi.OutputState }

func (ClassItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassItemResponse)(nil)).Elem()
}

func (o ClassItemResponseArrayOutput) ToClassItemResponseArrayOutput() ClassItemResponseArrayOutput {
	return o
}

func (o ClassItemResponseArrayOutput) ToClassItemResponseArrayOutputWithContext(ctx context.Context) ClassItemResponseArrayOutput {
	return o
}

func (o ClassItemResponseArrayOutput) Index(i pulumi.IntInput) ClassItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClassItemResponse {
		return vs[0].([]ClassItemResponse)[vs[1].(int)]
	}).(ClassItemResponseOutput)
}

// A phrases containing words and phrase "hints" so that the speech recognition is more likely to recognize them. This can be used to improve the accuracy for specific words and phrases, for example, if specific commands are typically spoken by the user. This can also be used to add additional words to the vocabulary of the recognizer. See [usage limits](https://cloud.google.com/speech-to-text/quotas#content). List items can also include pre-built or custom classes containing groups of words that represent common concepts that occur in natural language. For example, rather than providing a phrase hint for every month of the year (e.g. "i was born in january", "i was born in febuary", ...), use the pre-built `$MONTH` class improves the likelihood of correctly transcribing audio that includes months (e.g. "i was born in $month"). To refer to pre-built classes, use the class' symbol prepended with `$` e.g. `$MONTH`. To refer to custom classes that were defined inline in the request, set the class's `custom_class_id` to a string unique to all class resources and inline classes. Then use the class' id wrapped in $`{...}` e.g. "${my-months}". To refer to custom classes resources, use the class' id wrapped in `${}` (e.g. `${my-months}`). Speech-to-Text supports three locations: `global`, `us` (US North America), and `eu` (Europe). If you are calling the `speech.googleapis.com` endpoint, use the `global` location. To specify a region, use a [regional endpoint](/speech-to-text/docs/endpoints) with matching `us` or `eu` location value.
type Phrase struct {
	// Hint Boost. Overrides the boost set at the phrase set level. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 and 20. We recommend using a binary search approach to finding the optimal value for your use case. Speech recognition will skip PhraseSets with a boost value of 0.
	Boost *float64 `pulumi:"boost"`
	// The phrase itself.
	Value *string `pulumi:"value"`
}

// PhraseInput is an input type that accepts PhraseArgs and PhraseOutput values.
// You can construct a concrete instance of `PhraseInput` via:
//
//          PhraseArgs{...}
type PhraseInput interface {
	pulumi.Input

	ToPhraseOutput() PhraseOutput
	ToPhraseOutputWithContext(context.Context) PhraseOutput
}

// A phrases containing words and phrase "hints" so that the speech recognition is more likely to recognize them. This can be used to improve the accuracy for specific words and phrases, for example, if specific commands are typically spoken by the user. This can also be used to add additional words to the vocabulary of the recognizer. See [usage limits](https://cloud.google.com/speech-to-text/quotas#content). List items can also include pre-built or custom classes containing groups of words that represent common concepts that occur in natural language. For example, rather than providing a phrase hint for every month of the year (e.g. "i was born in january", "i was born in febuary", ...), use the pre-built `$MONTH` class improves the likelihood of correctly transcribing audio that includes months (e.g. "i was born in $month"). To refer to pre-built classes, use the class' symbol prepended with `$` e.g. `$MONTH`. To refer to custom classes that were defined inline in the request, set the class's `custom_class_id` to a string unique to all class resources and inline classes. Then use the class' id wrapped in $`{...}` e.g. "${my-months}". To refer to custom classes resources, use the class' id wrapped in `${}` (e.g. `${my-months}`). Speech-to-Text supports three locations: `global`, `us` (US North America), and `eu` (Europe). If you are calling the `speech.googleapis.com` endpoint, use the `global` location. To specify a region, use a [regional endpoint](/speech-to-text/docs/endpoints) with matching `us` or `eu` location value.
type PhraseArgs struct {
	// Hint Boost. Overrides the boost set at the phrase set level. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 and 20. We recommend using a binary search approach to finding the optimal value for your use case. Speech recognition will skip PhraseSets with a boost value of 0.
	Boost pulumi.Float64PtrInput `pulumi:"boost"`
	// The phrase itself.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PhraseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Phrase)(nil)).Elem()
}

func (i PhraseArgs) ToPhraseOutput() PhraseOutput {
	return i.ToPhraseOutputWithContext(context.Background())
}

func (i PhraseArgs) ToPhraseOutputWithContext(ctx context.Context) PhraseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhraseOutput)
}

// PhraseArrayInput is an input type that accepts PhraseArray and PhraseArrayOutput values.
// You can construct a concrete instance of `PhraseArrayInput` via:
//
//          PhraseArray{ PhraseArgs{...} }
type PhraseArrayInput interface {
	pulumi.Input

	ToPhraseArrayOutput() PhraseArrayOutput
	ToPhraseArrayOutputWithContext(context.Context) PhraseArrayOutput
}

type PhraseArray []PhraseInput

func (PhraseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Phrase)(nil)).Elem()
}

func (i PhraseArray) ToPhraseArrayOutput() PhraseArrayOutput {
	return i.ToPhraseArrayOutputWithContext(context.Background())
}

func (i PhraseArray) ToPhraseArrayOutputWithContext(ctx context.Context) PhraseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhraseArrayOutput)
}

// A phrases containing words and phrase "hints" so that the speech recognition is more likely to recognize them. This can be used to improve the accuracy for specific words and phrases, for example, if specific commands are typically spoken by the user. This can also be used to add additional words to the vocabulary of the recognizer. See [usage limits](https://cloud.google.com/speech-to-text/quotas#content). List items can also include pre-built or custom classes containing groups of words that represent common concepts that occur in natural language. For example, rather than providing a phrase hint for every month of the year (e.g. "i was born in january", "i was born in febuary", ...), use the pre-built `$MONTH` class improves the likelihood of correctly transcribing audio that includes months (e.g. "i was born in $month"). To refer to pre-built classes, use the class' symbol prepended with `$` e.g. `$MONTH`. To refer to custom classes that were defined inline in the request, set the class's `custom_class_id` to a string unique to all class resources and inline classes. Then use the class' id wrapped in $`{...}` e.g. "${my-months}". To refer to custom classes resources, use the class' id wrapped in `${}` (e.g. `${my-months}`). Speech-to-Text supports three locations: `global`, `us` (US North America), and `eu` (Europe). If you are calling the `speech.googleapis.com` endpoint, use the `global` location. To specify a region, use a [regional endpoint](/speech-to-text/docs/endpoints) with matching `us` or `eu` location value.
type PhraseOutput struct{ *pulumi.OutputState }

func (PhraseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Phrase)(nil)).Elem()
}

func (o PhraseOutput) ToPhraseOutput() PhraseOutput {
	return o
}

func (o PhraseOutput) ToPhraseOutputWithContext(ctx context.Context) PhraseOutput {
	return o
}

// Hint Boost. Overrides the boost set at the phrase set level. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 and 20. We recommend using a binary search approach to finding the optimal value for your use case. Speech recognition will skip PhraseSets with a boost value of 0.
func (o PhraseOutput) Boost() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Phrase) *float64 { return v.Boost }).(pulumi.Float64PtrOutput)
}

// The phrase itself.
func (o PhraseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Phrase) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PhraseArrayOutput struct{ *pulumi.OutputState }

func (PhraseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Phrase)(nil)).Elem()
}

func (o PhraseArrayOutput) ToPhraseArrayOutput() PhraseArrayOutput {
	return o
}

func (o PhraseArrayOutput) ToPhraseArrayOutputWithContext(ctx context.Context) PhraseArrayOutput {
	return o
}

func (o PhraseArrayOutput) Index(i pulumi.IntInput) PhraseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Phrase {
		return vs[0].([]Phrase)[vs[1].(int)]
	}).(PhraseOutput)
}

// A phrases containing words and phrase "hints" so that the speech recognition is more likely to recognize them. This can be used to improve the accuracy for specific words and phrases, for example, if specific commands are typically spoken by the user. This can also be used to add additional words to the vocabulary of the recognizer. See [usage limits](https://cloud.google.com/speech-to-text/quotas#content). List items can also include pre-built or custom classes containing groups of words that represent common concepts that occur in natural language. For example, rather than providing a phrase hint for every month of the year (e.g. "i was born in january", "i was born in febuary", ...), use the pre-built `$MONTH` class improves the likelihood of correctly transcribing audio that includes months (e.g. "i was born in $month"). To refer to pre-built classes, use the class' symbol prepended with `$` e.g. `$MONTH`. To refer to custom classes that were defined inline in the request, set the class's `custom_class_id` to a string unique to all class resources and inline classes. Then use the class' id wrapped in $`{...}` e.g. "${my-months}". To refer to custom classes resources, use the class' id wrapped in `${}` (e.g. `${my-months}`). Speech-to-Text supports three locations: `global`, `us` (US North America), and `eu` (Europe). If you are calling the `speech.googleapis.com` endpoint, use the `global` location. To specify a region, use a [regional endpoint](/speech-to-text/docs/endpoints) with matching `us` or `eu` location value.
type PhraseResponse struct {
	// Hint Boost. Overrides the boost set at the phrase set level. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 and 20. We recommend using a binary search approach to finding the optimal value for your use case. Speech recognition will skip PhraseSets with a boost value of 0.
	Boost float64 `pulumi:"boost"`
	// The phrase itself.
	Value string `pulumi:"value"`
}

// A phrases containing words and phrase "hints" so that the speech recognition is more likely to recognize them. This can be used to improve the accuracy for specific words and phrases, for example, if specific commands are typically spoken by the user. This can also be used to add additional words to the vocabulary of the recognizer. See [usage limits](https://cloud.google.com/speech-to-text/quotas#content). List items can also include pre-built or custom classes containing groups of words that represent common concepts that occur in natural language. For example, rather than providing a phrase hint for every month of the year (e.g. "i was born in january", "i was born in febuary", ...), use the pre-built `$MONTH` class improves the likelihood of correctly transcribing audio that includes months (e.g. "i was born in $month"). To refer to pre-built classes, use the class' symbol prepended with `$` e.g. `$MONTH`. To refer to custom classes that were defined inline in the request, set the class's `custom_class_id` to a string unique to all class resources and inline classes. Then use the class' id wrapped in $`{...}` e.g. "${my-months}". To refer to custom classes resources, use the class' id wrapped in `${}` (e.g. `${my-months}`). Speech-to-Text supports three locations: `global`, `us` (US North America), and `eu` (Europe). If you are calling the `speech.googleapis.com` endpoint, use the `global` location. To specify a region, use a [regional endpoint](/speech-to-text/docs/endpoints) with matching `us` or `eu` location value.
type PhraseResponseOutput struct{ *pulumi.OutputState }

func (PhraseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhraseResponse)(nil)).Elem()
}

func (o PhraseResponseOutput) ToPhraseResponseOutput() PhraseResponseOutput {
	return o
}

func (o PhraseResponseOutput) ToPhraseResponseOutputWithContext(ctx context.Context) PhraseResponseOutput {
	return o
}

// Hint Boost. Overrides the boost set at the phrase set level. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 and 20. We recommend using a binary search approach to finding the optimal value for your use case. Speech recognition will skip PhraseSets with a boost value of 0.
func (o PhraseResponseOutput) Boost() pulumi.Float64Output {
	return o.ApplyT(func(v PhraseResponse) float64 { return v.Boost }).(pulumi.Float64Output)
}

// The phrase itself.
func (o PhraseResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PhraseResponse) string { return v.Value }).(pulumi.StringOutput)
}

type PhraseResponseArrayOutput struct{ *pulumi.OutputState }

func (PhraseResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PhraseResponse)(nil)).Elem()
}

func (o PhraseResponseArrayOutput) ToPhraseResponseArrayOutput() PhraseResponseArrayOutput {
	return o
}

func (o PhraseResponseArrayOutput) ToPhraseResponseArrayOutputWithContext(ctx context.Context) PhraseResponseArrayOutput {
	return o
}

func (o PhraseResponseArrayOutput) Index(i pulumi.IntInput) PhraseResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PhraseResponse {
		return vs[0].([]PhraseResponse)[vs[1].(int)]
	}).(PhraseResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClassItemInput)(nil)).Elem(), ClassItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassItemArrayInput)(nil)).Elem(), ClassItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PhraseInput)(nil)).Elem(), PhraseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PhraseArrayInput)(nil)).Elem(), PhraseArray{})
	pulumi.RegisterOutputType(ClassItemOutput{})
	pulumi.RegisterOutputType(ClassItemArrayOutput{})
	pulumi.RegisterOutputType(ClassItemResponseOutput{})
	pulumi.RegisterOutputType(ClassItemResponseArrayOutput{})
	pulumi.RegisterOutputType(PhraseOutput{})
	pulumi.RegisterOutputType(PhraseArrayOutput{})
	pulumi.RegisterOutputType(PhraseResponseOutput{})
	pulumi.RegisterOutputType(PhraseResponseArrayOutput{})
}
