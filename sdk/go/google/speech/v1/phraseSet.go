// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a set of phrase hints. Each item in the set can be a single word or a multi-word phrase. The items in the PhraseSet are favored by the recognition model when you send a call that includes the PhraseSet.
type PhraseSet struct {
	pulumi.CustomResourceState

	// Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case. Speech recognition will skip PhraseSets with a boost value of 0.
	Boost pulumi.Float64Output `pulumi:"boost"`
	// The resource name of the phrase set.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of word and phrases.
	Phrases PhraseResponseArrayOutput `pulumi:"phrases"`
}

// NewPhraseSet registers a new resource with the given unique name, arguments, and options.
func NewPhraseSet(ctx *pulumi.Context,
	name string, args *PhraseSetArgs, opts ...pulumi.ResourceOption) (*PhraseSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PhraseSetId == nil {
		return nil, errors.New("invalid value for required argument 'PhraseSetId'")
	}
	var resource PhraseSet
	err := ctx.RegisterResource("google-native:speech/v1:PhraseSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPhraseSet gets an existing PhraseSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPhraseSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PhraseSetState, opts ...pulumi.ResourceOption) (*PhraseSet, error) {
	var resource PhraseSet
	err := ctx.ReadResource("google-native:speech/v1:PhraseSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PhraseSet resources.
type phraseSetState struct {
}

type PhraseSetState struct {
}

func (PhraseSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*phraseSetState)(nil)).Elem()
}

type phraseSetArgs struct {
	// Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case. Speech recognition will skip PhraseSets with a boost value of 0.
	Boost    *float64 `pulumi:"boost"`
	Location *string  `pulumi:"location"`
	// The resource name of the phrase set.
	Name *string `pulumi:"name"`
	// The ID to use for the phrase set, which will become the final component of the phrase set's resource name. This value should be 4-63 characters, and valid characters are /a-z-/.
	PhraseSetId string `pulumi:"phraseSetId"`
	// A list of word and phrases.
	Phrases []Phrase `pulumi:"phrases"`
	Project *string  `pulumi:"project"`
}

// The set of arguments for constructing a PhraseSet resource.
type PhraseSetArgs struct {
	// Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case. Speech recognition will skip PhraseSets with a boost value of 0.
	Boost    pulumi.Float64PtrInput
	Location pulumi.StringPtrInput
	// The resource name of the phrase set.
	Name pulumi.StringPtrInput
	// The ID to use for the phrase set, which will become the final component of the phrase set's resource name. This value should be 4-63 characters, and valid characters are /a-z-/.
	PhraseSetId pulumi.StringInput
	// A list of word and phrases.
	Phrases PhraseArrayInput
	Project pulumi.StringPtrInput
}

func (PhraseSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*phraseSetArgs)(nil)).Elem()
}

type PhraseSetInput interface {
	pulumi.Input

	ToPhraseSetOutput() PhraseSetOutput
	ToPhraseSetOutputWithContext(ctx context.Context) PhraseSetOutput
}

func (*PhraseSet) ElementType() reflect.Type {
	return reflect.TypeOf((**PhraseSet)(nil)).Elem()
}

func (i *PhraseSet) ToPhraseSetOutput() PhraseSetOutput {
	return i.ToPhraseSetOutputWithContext(context.Background())
}

func (i *PhraseSet) ToPhraseSetOutputWithContext(ctx context.Context) PhraseSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhraseSetOutput)
}

type PhraseSetOutput struct{ *pulumi.OutputState }

func (PhraseSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PhraseSet)(nil)).Elem()
}

func (o PhraseSetOutput) ToPhraseSetOutput() PhraseSetOutput {
	return o
}

func (o PhraseSetOutput) ToPhraseSetOutputWithContext(ctx context.Context) PhraseSetOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PhraseSetInput)(nil)).Elem(), &PhraseSet{})
	pulumi.RegisterOutputType(PhraseSetOutput{})
}
