// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a set of phrase hints. Each item in the set can be a single word or a multi-word phrase. The items in the PhraseSet are favored by the recognition model when you send a call that includes the PhraseSet.
type PhraseSet struct {
	pulumi.CustomResourceState

	// Allows users to store small amounts of arbitrary data. Both the key and the value must be 63 characters or less each. At most 100 annotations. This field is not used.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case as well as adding phrases both with and without boost to your requests.
	Boost pulumi.Float64Output `pulumi:"boost"`
	// The time at which this resource was requested for deletion. This field is not used.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// User-settable, human-readable name for the PhraseSet. Must be 63 characters or less. This field is not used.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// This checksum is computed by the server based on the value of other fields. This may be sent on update, undelete, and delete requests to ensure the client has an up-to-date value before proceeding. This field is not used.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The time at which this resource will be purged. This field is not used.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// The [KMS key name](https://cloud.google.com/kms/docs/resource-hierarchy#keys) with which the content of the PhraseSet is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
	KmsKeyName pulumi.StringOutput `pulumi:"kmsKeyName"`
	// The [KMS key version name](https://cloud.google.com/kms/docs/resource-hierarchy#key_versions) with which content of the PhraseSet is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}`.
	KmsKeyVersionName pulumi.StringOutput `pulumi:"kmsKeyVersionName"`
	Location          pulumi.StringOutput `pulumi:"location"`
	// The resource name of the phrase set.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of word and phrases.
	Phrases PhraseResponseArrayOutput `pulumi:"phrases"`
	Project pulumi.StringOutput       `pulumi:"project"`
	// Whether or not this PhraseSet is in the process of being updated. This field is not used.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// The CustomClass lifecycle state. This field is not used.
	State pulumi.StringOutput `pulumi:"state"`
	// System-assigned unique identifier for the PhraseSet. This field is not used.
	Uid pulumi.StringOutput `pulumi:"uid"`
}

// NewPhraseSet registers a new resource with the given unique name, arguments, and options.
func NewPhraseSet(ctx *pulumi.Context,
	name string, args *PhraseSetArgs, opts ...pulumi.ResourceOption) (*PhraseSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PhraseSetId == nil {
		return nil, errors.New("invalid value for required argument 'PhraseSetId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PhraseSet
	err := ctx.RegisterResource("google-native:speech/v1:PhraseSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPhraseSet gets an existing PhraseSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPhraseSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PhraseSetState, opts ...pulumi.ResourceOption) (*PhraseSet, error) {
	var resource PhraseSet
	err := ctx.ReadResource("google-native:speech/v1:PhraseSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PhraseSet resources.
type phraseSetState struct {
}

type PhraseSetState struct {
}

func (PhraseSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*phraseSetState)(nil)).Elem()
}

type phraseSetArgs struct {
	// Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case as well as adding phrases both with and without boost to your requests.
	Boost    *float64 `pulumi:"boost"`
	Location *string  `pulumi:"location"`
	// The resource name of the phrase set.
	Name *string `pulumi:"name"`
	// The ID to use for the phrase set, which will become the final component of the phrase set's resource name. This value should restrict to letters, numbers, and hyphens, with the first character a letter, the last a letter or a number, and be 4-63 characters.
	PhraseSetId string `pulumi:"phraseSetId"`
	// A list of word and phrases.
	Phrases []Phrase `pulumi:"phrases"`
	Project *string  `pulumi:"project"`
}

// The set of arguments for constructing a PhraseSet resource.
type PhraseSetArgs struct {
	// Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case as well as adding phrases both with and without boost to your requests.
	Boost    pulumi.Float64PtrInput
	Location pulumi.StringPtrInput
	// The resource name of the phrase set.
	Name pulumi.StringPtrInput
	// The ID to use for the phrase set, which will become the final component of the phrase set's resource name. This value should restrict to letters, numbers, and hyphens, with the first character a letter, the last a letter or a number, and be 4-63 characters.
	PhraseSetId pulumi.StringInput
	// A list of word and phrases.
	Phrases PhraseArrayInput
	Project pulumi.StringPtrInput
}

func (PhraseSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*phraseSetArgs)(nil)).Elem()
}

type PhraseSetInput interface {
	pulumi.Input

	ToPhraseSetOutput() PhraseSetOutput
	ToPhraseSetOutputWithContext(ctx context.Context) PhraseSetOutput
}

func (*PhraseSet) ElementType() reflect.Type {
	return reflect.TypeOf((**PhraseSet)(nil)).Elem()
}

func (i *PhraseSet) ToPhraseSetOutput() PhraseSetOutput {
	return i.ToPhraseSetOutputWithContext(context.Background())
}

func (i *PhraseSet) ToPhraseSetOutputWithContext(ctx context.Context) PhraseSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhraseSetOutput)
}

type PhraseSetOutput struct{ *pulumi.OutputState }

func (PhraseSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PhraseSet)(nil)).Elem()
}

func (o PhraseSetOutput) ToPhraseSetOutput() PhraseSetOutput {
	return o
}

func (o PhraseSetOutput) ToPhraseSetOutputWithContext(ctx context.Context) PhraseSetOutput {
	return o
}

// Allows users to store small amounts of arbitrary data. Both the key and the value must be 63 characters or less each. At most 100 annotations. This field is not used.
func (o PhraseSetOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PhraseSet) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case as well as adding phrases both with and without boost to your requests.
func (o PhraseSetOutput) Boost() pulumi.Float64Output {
	return o.ApplyT(func(v *PhraseSet) pulumi.Float64Output { return v.Boost }).(pulumi.Float64Output)
}

// The time at which this resource was requested for deletion. This field is not used.
func (o PhraseSetOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PhraseSet) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// User-settable, human-readable name for the PhraseSet. Must be 63 characters or less. This field is not used.
func (o PhraseSetOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *PhraseSet) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other fields. This may be sent on update, undelete, and delete requests to ensure the client has an up-to-date value before proceeding. This field is not used.
func (o PhraseSetOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *PhraseSet) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The time at which this resource will be purged. This field is not used.
func (o PhraseSetOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PhraseSet) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

// The [KMS key name](https://cloud.google.com/kms/docs/resource-hierarchy#keys) with which the content of the PhraseSet is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
func (o PhraseSetOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *PhraseSet) pulumi.StringOutput { return v.KmsKeyName }).(pulumi.StringOutput)
}

// The [KMS key version name](https://cloud.google.com/kms/docs/resource-hierarchy#key_versions) with which content of the PhraseSet is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}`.
func (o PhraseSetOutput) KmsKeyVersionName() pulumi.StringOutput {
	return o.ApplyT(func(v *PhraseSet) pulumi.StringOutput { return v.KmsKeyVersionName }).(pulumi.StringOutput)
}

func (o PhraseSetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PhraseSet) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the phrase set.
func (o PhraseSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PhraseSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of word and phrases.
func (o PhraseSetOutput) Phrases() PhraseResponseArrayOutput {
	return o.ApplyT(func(v *PhraseSet) PhraseResponseArrayOutput { return v.Phrases }).(PhraseResponseArrayOutput)
}

func (o PhraseSetOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PhraseSet) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Whether or not this PhraseSet is in the process of being updated. This field is not used.
func (o PhraseSetOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *PhraseSet) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// The CustomClass lifecycle state. This field is not used.
func (o PhraseSetOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *PhraseSet) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// System-assigned unique identifier for the PhraseSet. This field is not used.
func (o PhraseSetOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *PhraseSet) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PhraseSetInput)(nil)).Elem(), &PhraseSet{})
	pulumi.RegisterOutputType(PhraseSetOutput{})
}
