// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1p1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Create a set of phrase hints. Each item in the set can be a single word or a multi-word phrase. The items in the PhraseSet are favored by the recognition model when you send a call that includes the PhraseSet.
type PhraseSet struct {
	pulumi.CustomResourceState
}

// NewPhraseSet registers a new resource with the given unique name, arguments, and options.
func NewPhraseSet(ctx *pulumi.Context,
	name string, args *PhraseSetArgs, opts ...pulumi.ResourceOption) (*PhraseSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.PhraseSetsId == nil {
		return nil, errors.New("invalid value for required argument 'PhraseSetsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource PhraseSet
	err := ctx.RegisterResource("google-cloud:speech/v1p1beta1:PhraseSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPhraseSet gets an existing PhraseSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPhraseSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PhraseSetState, opts ...pulumi.ResourceOption) (*PhraseSet, error) {
	var resource PhraseSet
	err := ctx.ReadResource("google-cloud:speech/v1p1beta1:PhraseSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PhraseSet resources.
type phraseSetState struct {
}

type PhraseSetState struct {
}

func (PhraseSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*phraseSetState)(nil)).Elem()
}

type phraseSetArgs struct {
	LocationsId string `pulumi:"locationsId"`
	// Required. The phrase set to create.
	PhraseSet *PhraseSetType `pulumi:"phraseSet"`
	// The ID to use for the phrase set, which will become the final component of the phrase set's resource name. This value should be 4-63 characters, and valid characters are /a-z-/.
	PhraseSetId  *string `pulumi:"phraseSetId"`
	PhraseSetsId string  `pulumi:"phraseSetsId"`
	ProjectsId   string  `pulumi:"projectsId"`
}

// The set of arguments for constructing a PhraseSet resource.
type PhraseSetArgs struct {
	LocationsId pulumi.StringInput
	// Required. The phrase set to create.
	PhraseSet PhraseSetTypePtrInput
	// The ID to use for the phrase set, which will become the final component of the phrase set's resource name. This value should be 4-63 characters, and valid characters are /a-z-/.
	PhraseSetId  pulumi.StringPtrInput
	PhraseSetsId pulumi.StringInput
	ProjectsId   pulumi.StringInput
}

func (PhraseSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*phraseSetArgs)(nil)).Elem()
}

type PhraseSetInput interface {
	pulumi.Input

	ToPhraseSetOutput() PhraseSetOutput
	ToPhraseSetOutputWithContext(ctx context.Context) PhraseSetOutput
}

func (*PhraseSet) ElementType() reflect.Type {
	return reflect.TypeOf((*PhraseSet)(nil))
}

func (i *PhraseSet) ToPhraseSetOutput() PhraseSetOutput {
	return i.ToPhraseSetOutputWithContext(context.Background())
}

func (i *PhraseSet) ToPhraseSetOutputWithContext(ctx context.Context) PhraseSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhraseSetOutput)
}

type PhraseSetOutput struct {
	*pulumi.OutputState
}

func (PhraseSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhraseSet)(nil))
}

func (o PhraseSetOutput) ToPhraseSetOutput() PhraseSetOutput {
	return o
}

func (o PhraseSetOutput) ToPhraseSetOutputWithContext(ctx context.Context) PhraseSetOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(PhraseSetOutput{})
}
