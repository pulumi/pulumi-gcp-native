// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new custom dashboard. For examples on how you can use this API to create dashboards, see Managing dashboards by API (https://cloud.google.com/monitoring/dashboards/api-dashboard). This method requires the monitoring.dashboards.create permission on the specified project. For more information about permissions, see Cloud Identity and Access Management (https://cloud.google.com/iam).
type Dashboard struct {
	pulumi.CustomResourceState

	// The content is divided into equally spaced columns and the widgets are arranged vertically.
	ColumnLayout ColumnLayoutResponseOutput `pulumi:"columnLayout"`
	// Filters to reduce the amount of data charted based on the filter criteria.
	DashboardFilters DashboardFilterResponseArrayOutput `pulumi:"dashboardFilters"`
	// The mutable, human-readable name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. An etag is returned in the response to GetDashboard, and users are expected to put that etag in the request to UpdateDashboard to ensure that their change will be applied to the same version of the Dashboard configuration. The field should not be passed during dashboard creation.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Content is arranged with a basic layout that re-flows a simple list of informational elements like widgets or tiles.
	GridLayout GridLayoutResponseOutput `pulumi:"gridLayout"`
	// Labels applied to the dashboard
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The content is arranged as a grid of tiles, with each content widget occupying one or more grid blocks.
	MosaicLayout MosaicLayoutResponseOutput `pulumi:"mosaicLayout"`
	// Immutable. The resource name of the dashboard.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The content is divided into equally spaced rows and the widgets are arranged horizontally.
	RowLayout RowLayoutResponseOutput `pulumi:"rowLayout"`
	// If set, validate the request and preview the review, but do not actually save it.
	ValidateOnly pulumi.BoolPtrOutput `pulumi:"validateOnly"`
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource Dashboard
	err := ctx.RegisterResource("google-native:monitoring/v1:Dashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardState, opts ...pulumi.ResourceOption) (*Dashboard, error) {
	var resource Dashboard
	err := ctx.ReadResource("google-native:monitoring/v1:Dashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dashboard resources.
type dashboardState struct {
}

type DashboardState struct {
}

func (DashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardState)(nil)).Elem()
}

type dashboardArgs struct {
	// The content is divided into equally spaced columns and the widgets are arranged vertically.
	ColumnLayout *ColumnLayout `pulumi:"columnLayout"`
	// Filters to reduce the amount of data charted based on the filter criteria.
	DashboardFilters []DashboardFilter `pulumi:"dashboardFilters"`
	// The mutable, human-readable name.
	DisplayName string `pulumi:"displayName"`
	// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. An etag is returned in the response to GetDashboard, and users are expected to put that etag in the request to UpdateDashboard to ensure that their change will be applied to the same version of the Dashboard configuration. The field should not be passed during dashboard creation.
	Etag *string `pulumi:"etag"`
	// Content is arranged with a basic layout that re-flows a simple list of informational elements like widgets or tiles.
	GridLayout *GridLayout `pulumi:"gridLayout"`
	// Labels applied to the dashboard
	Labels map[string]string `pulumi:"labels"`
	// The content is arranged as a grid of tiles, with each content widget occupying one or more grid blocks.
	MosaicLayout *MosaicLayout `pulumi:"mosaicLayout"`
	// Immutable. The resource name of the dashboard.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The content is divided into equally spaced rows and the widgets are arranged horizontally.
	RowLayout *RowLayout `pulumi:"rowLayout"`
	// If set, validate the request and preview the review, but do not actually save it.
	ValidateOnly *bool `pulumi:"validateOnly"`
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	// The content is divided into equally spaced columns and the widgets are arranged vertically.
	ColumnLayout ColumnLayoutPtrInput
	// Filters to reduce the amount of data charted based on the filter criteria.
	DashboardFilters DashboardFilterArrayInput
	// The mutable, human-readable name.
	DisplayName pulumi.StringInput
	// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. An etag is returned in the response to GetDashboard, and users are expected to put that etag in the request to UpdateDashboard to ensure that their change will be applied to the same version of the Dashboard configuration. The field should not be passed during dashboard creation.
	Etag pulumi.StringPtrInput
	// Content is arranged with a basic layout that re-flows a simple list of informational elements like widgets or tiles.
	GridLayout GridLayoutPtrInput
	// Labels applied to the dashboard
	Labels pulumi.StringMapInput
	// The content is arranged as a grid of tiles, with each content widget occupying one or more grid blocks.
	MosaicLayout MosaicLayoutPtrInput
	// Immutable. The resource name of the dashboard.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The content is divided into equally spaced rows and the widgets are arranged horizontally.
	RowLayout RowLayoutPtrInput
	// If set, validate the request and preview the review, but do not actually save it.
	ValidateOnly pulumi.BoolPtrInput
}

func (DashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardArgs)(nil)).Elem()
}

type DashboardInput interface {
	pulumi.Input

	ToDashboardOutput() DashboardOutput
	ToDashboardOutputWithContext(ctx context.Context) DashboardOutput
}

func (*Dashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (i *Dashboard) ToDashboardOutput() DashboardOutput {
	return i.ToDashboardOutputWithContext(context.Background())
}

func (i *Dashboard) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardOutput)
}

type DashboardOutput struct{ *pulumi.OutputState }

func (DashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dashboard)(nil)).Elem()
}

func (o DashboardOutput) ToDashboardOutput() DashboardOutput {
	return o
}

func (o DashboardOutput) ToDashboardOutputWithContext(ctx context.Context) DashboardOutput {
	return o
}

// The content is divided into equally spaced columns and the widgets are arranged vertically.
func (o DashboardOutput) ColumnLayout() ColumnLayoutResponseOutput {
	return o.ApplyT(func(v *Dashboard) ColumnLayoutResponseOutput { return v.ColumnLayout }).(ColumnLayoutResponseOutput)
}

// Filters to reduce the amount of data charted based on the filter criteria.
func (o DashboardOutput) DashboardFilters() DashboardFilterResponseArrayOutput {
	return o.ApplyT(func(v *Dashboard) DashboardFilterResponseArrayOutput { return v.DashboardFilters }).(DashboardFilterResponseArrayOutput)
}

// The mutable, human-readable name.
func (o DashboardOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. An etag is returned in the response to GetDashboard, and users are expected to put that etag in the request to UpdateDashboard to ensure that their change will be applied to the same version of the Dashboard configuration. The field should not be passed during dashboard creation.
func (o DashboardOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Content is arranged with a basic layout that re-flows a simple list of informational elements like widgets or tiles.
func (o DashboardOutput) GridLayout() GridLayoutResponseOutput {
	return o.ApplyT(func(v *Dashboard) GridLayoutResponseOutput { return v.GridLayout }).(GridLayoutResponseOutput)
}

// Labels applied to the dashboard
func (o DashboardOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The content is arranged as a grid of tiles, with each content widget occupying one or more grid blocks.
func (o DashboardOutput) MosaicLayout() MosaicLayoutResponseOutput {
	return o.ApplyT(func(v *Dashboard) MosaicLayoutResponseOutput { return v.MosaicLayout }).(MosaicLayoutResponseOutput)
}

// Immutable. The resource name of the dashboard.
func (o DashboardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DashboardOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The content is divided into equally spaced rows and the widgets are arranged horizontally.
func (o DashboardOutput) RowLayout() RowLayoutResponseOutput {
	return o.ApplyT(func(v *Dashboard) RowLayoutResponseOutput { return v.RowLayout }).(RowLayoutResponseOutput)
}

// If set, validate the request and preview the review, but do not actually save it.
func (o DashboardOutput) ValidateOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Dashboard) pulumi.BoolPtrOutput { return v.ValidateOnly }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardInput)(nil)).Elem(), &Dashboard{})
	pulumi.RegisterOutputType(DashboardOutput{})
}
