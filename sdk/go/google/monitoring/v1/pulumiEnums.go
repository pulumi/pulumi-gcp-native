// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.Not all reducer operations can be applied to all time series. The valid choices depend on the metric_kind and the value_type of the original time series. Reduction can yield a time series with a different metric_kind or value_type than the input time series.Time series data must first be aligned (see per_series_aligner) in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified, and must not be ALIGN_NONE. An alignment_period must also be specified; otherwise, an error is returned.
type AggregationCrossSeriesReducer string

const (
	// No cross-time series reduction. The output of the Aligner is returned.
	AggregationCrossSeriesReducerReduceNone = AggregationCrossSeriesReducer("REDUCE_NONE")
	// Reduce by computing the mean value across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics with numeric or distribution values. The value_type of the output is DOUBLE.
	AggregationCrossSeriesReducerReduceMean = AggregationCrossSeriesReducer("REDUCE_MEAN")
	// Reduce by computing the minimum value across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics with numeric values. The value_type of the output is the same as the value_type of the input.
	AggregationCrossSeriesReducerReduceMin = AggregationCrossSeriesReducer("REDUCE_MIN")
	// Reduce by computing the maximum value across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics with numeric values. The value_type of the output is the same as the value_type of the input.
	AggregationCrossSeriesReducerReduceMax = AggregationCrossSeriesReducer("REDUCE_MAX")
	// Reduce by computing the sum across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics with numeric and distribution values. The value_type of the output is the same as the value_type of the input.
	AggregationCrossSeriesReducerReduceSum = AggregationCrossSeriesReducer("REDUCE_SUM")
	// Reduce by computing the standard deviation across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics with numeric or distribution values. The value_type of the output is DOUBLE.
	AggregationCrossSeriesReducerReduceStddev = AggregationCrossSeriesReducer("REDUCE_STDDEV")
	// Reduce by computing the number of data points across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics of numeric, Boolean, distribution, and string value_type. The value_type of the output is INT64.
	AggregationCrossSeriesReducerReduceCount = AggregationCrossSeriesReducer("REDUCE_COUNT")
	// Reduce by computing the number of True-valued data points across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics of Boolean value_type. The value_type of the output is INT64.
	AggregationCrossSeriesReducerReduceCountTrue = AggregationCrossSeriesReducer("REDUCE_COUNT_TRUE")
	// Reduce by computing the number of False-valued data points across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics of Boolean value_type. The value_type of the output is INT64.
	AggregationCrossSeriesReducerReduceCountFalse = AggregationCrossSeriesReducer("REDUCE_COUNT_FALSE")
	// Reduce by computing the ratio of the number of True-valued data points to the total number of data points for each alignment period. This reducer is valid for DELTA and GAUGE metrics of Boolean value_type. The output value is in the range 0.0, 1.0 and has value_type DOUBLE.
	AggregationCrossSeriesReducerReduceFractionTrue = AggregationCrossSeriesReducer("REDUCE_FRACTION_TRUE")
	// Reduce by computing the 99th percentile (https://en.wikipedia.org/wiki/Percentile) of data points across time series for each alignment period. This reducer is valid for GAUGE and DELTA metrics of numeric and distribution type. The value of the output is DOUBLE.
	AggregationCrossSeriesReducerReducePercentile99 = AggregationCrossSeriesReducer("REDUCE_PERCENTILE_99")
	// Reduce by computing the 95th percentile (https://en.wikipedia.org/wiki/Percentile) of data points across time series for each alignment period. This reducer is valid for GAUGE and DELTA metrics of numeric and distribution type. The value of the output is DOUBLE.
	AggregationCrossSeriesReducerReducePercentile95 = AggregationCrossSeriesReducer("REDUCE_PERCENTILE_95")
	// Reduce by computing the 50th percentile (https://en.wikipedia.org/wiki/Percentile) of data points across time series for each alignment period. This reducer is valid for GAUGE and DELTA metrics of numeric and distribution type. The value of the output is DOUBLE.
	AggregationCrossSeriesReducerReducePercentile50 = AggregationCrossSeriesReducer("REDUCE_PERCENTILE_50")
	// Reduce by computing the 5th percentile (https://en.wikipedia.org/wiki/Percentile) of data points across time series for each alignment period. This reducer is valid for GAUGE and DELTA metrics of numeric and distribution type. The value of the output is DOUBLE.
	AggregationCrossSeriesReducerReducePercentile05 = AggregationCrossSeriesReducer("REDUCE_PERCENTILE_05")
)

func (AggregationCrossSeriesReducer) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationCrossSeriesReducer)(nil)).Elem()
}

func (e AggregationCrossSeriesReducer) ToAggregationCrossSeriesReducerOutput() AggregationCrossSeriesReducerOutput {
	return pulumi.ToOutput(e).(AggregationCrossSeriesReducerOutput)
}

func (e AggregationCrossSeriesReducer) ToAggregationCrossSeriesReducerOutputWithContext(ctx context.Context) AggregationCrossSeriesReducerOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AggregationCrossSeriesReducerOutput)
}

func (e AggregationCrossSeriesReducer) ToAggregationCrossSeriesReducerPtrOutput() AggregationCrossSeriesReducerPtrOutput {
	return e.ToAggregationCrossSeriesReducerPtrOutputWithContext(context.Background())
}

func (e AggregationCrossSeriesReducer) ToAggregationCrossSeriesReducerPtrOutputWithContext(ctx context.Context) AggregationCrossSeriesReducerPtrOutput {
	return AggregationCrossSeriesReducer(e).ToAggregationCrossSeriesReducerOutputWithContext(ctx).ToAggregationCrossSeriesReducerPtrOutputWithContext(ctx)
}

func (e AggregationCrossSeriesReducer) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AggregationCrossSeriesReducer) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AggregationCrossSeriesReducer) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AggregationCrossSeriesReducer) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AggregationCrossSeriesReducerOutput struct{ *pulumi.OutputState }

func (AggregationCrossSeriesReducerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationCrossSeriesReducer)(nil)).Elem()
}

func (o AggregationCrossSeriesReducerOutput) ToAggregationCrossSeriesReducerOutput() AggregationCrossSeriesReducerOutput {
	return o
}

func (o AggregationCrossSeriesReducerOutput) ToAggregationCrossSeriesReducerOutputWithContext(ctx context.Context) AggregationCrossSeriesReducerOutput {
	return o
}

func (o AggregationCrossSeriesReducerOutput) ToAggregationCrossSeriesReducerPtrOutput() AggregationCrossSeriesReducerPtrOutput {
	return o.ToAggregationCrossSeriesReducerPtrOutputWithContext(context.Background())
}

func (o AggregationCrossSeriesReducerOutput) ToAggregationCrossSeriesReducerPtrOutputWithContext(ctx context.Context) AggregationCrossSeriesReducerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AggregationCrossSeriesReducer) *AggregationCrossSeriesReducer {
		return &v
	}).(AggregationCrossSeriesReducerPtrOutput)
}

func (o AggregationCrossSeriesReducerOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AggregationCrossSeriesReducerOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AggregationCrossSeriesReducer) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AggregationCrossSeriesReducerOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AggregationCrossSeriesReducerOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AggregationCrossSeriesReducer) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AggregationCrossSeriesReducerPtrOutput struct{ *pulumi.OutputState }

func (AggregationCrossSeriesReducerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregationCrossSeriesReducer)(nil)).Elem()
}

func (o AggregationCrossSeriesReducerPtrOutput) ToAggregationCrossSeriesReducerPtrOutput() AggregationCrossSeriesReducerPtrOutput {
	return o
}

func (o AggregationCrossSeriesReducerPtrOutput) ToAggregationCrossSeriesReducerPtrOutputWithContext(ctx context.Context) AggregationCrossSeriesReducerPtrOutput {
	return o
}

func (o AggregationCrossSeriesReducerPtrOutput) Elem() AggregationCrossSeriesReducerOutput {
	return o.ApplyT(func(v *AggregationCrossSeriesReducer) AggregationCrossSeriesReducer {
		if v != nil {
			return *v
		}
		var ret AggregationCrossSeriesReducer
		return ret
	}).(AggregationCrossSeriesReducerOutput)
}

func (o AggregationCrossSeriesReducerPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AggregationCrossSeriesReducerPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AggregationCrossSeriesReducer) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AggregationCrossSeriesReducerInput is an input type that accepts AggregationCrossSeriesReducerArgs and AggregationCrossSeriesReducerOutput values.
// You can construct a concrete instance of `AggregationCrossSeriesReducerInput` via:
//
//	AggregationCrossSeriesReducerArgs{...}
type AggregationCrossSeriesReducerInput interface {
	pulumi.Input

	ToAggregationCrossSeriesReducerOutput() AggregationCrossSeriesReducerOutput
	ToAggregationCrossSeriesReducerOutputWithContext(context.Context) AggregationCrossSeriesReducerOutput
}

var aggregationCrossSeriesReducerPtrType = reflect.TypeOf((**AggregationCrossSeriesReducer)(nil)).Elem()

type AggregationCrossSeriesReducerPtrInput interface {
	pulumi.Input

	ToAggregationCrossSeriesReducerPtrOutput() AggregationCrossSeriesReducerPtrOutput
	ToAggregationCrossSeriesReducerPtrOutputWithContext(context.Context) AggregationCrossSeriesReducerPtrOutput
}

type aggregationCrossSeriesReducerPtr string

func AggregationCrossSeriesReducerPtr(v string) AggregationCrossSeriesReducerPtrInput {
	return (*aggregationCrossSeriesReducerPtr)(&v)
}

func (*aggregationCrossSeriesReducerPtr) ElementType() reflect.Type {
	return aggregationCrossSeriesReducerPtrType
}

func (in *aggregationCrossSeriesReducerPtr) ToAggregationCrossSeriesReducerPtrOutput() AggregationCrossSeriesReducerPtrOutput {
	return pulumi.ToOutput(in).(AggregationCrossSeriesReducerPtrOutput)
}

func (in *aggregationCrossSeriesReducerPtr) ToAggregationCrossSeriesReducerPtrOutputWithContext(ctx context.Context) AggregationCrossSeriesReducerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AggregationCrossSeriesReducerPtrOutput)
}

// An Aligner describes how to bring the data points in a single time series into temporal alignment. Except for ALIGN_NONE, all alignments cause all the data points in an alignment_period to be mathematically grouped together, resulting in a single data point for each alignment_period with end timestamp at the end of the period.Not all alignment operations may be applied to all time series. The valid choices depend on the metric_kind and value_type of the original time series. Alignment can change the metric_kind or the value_type of the time series.Time series data must be aligned in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified and not equal to ALIGN_NONE and alignment_period must be specified; otherwise, an error is returned.
type AggregationPerSeriesAligner string

const (
	// No alignment. Raw data is returned. Not valid if cross-series reduction is requested. The value_type of the result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignNone = AggregationPerSeriesAligner("ALIGN_NONE")
	// Align and convert to DELTA. The output is delta = y1 - y0.This alignment is valid for CUMULATIVE and DELTA metrics. If the selected alignment period results in periods with no data, then the aligned value for such a period is created by interpolation. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignDelta = AggregationPerSeriesAligner("ALIGN_DELTA")
	// Align and convert to a rate. The result is computed as rate = (y1 - y0)/(t1 - t0), or "delta over time". Think of this aligner as providing the slope of the line that passes through the value at the start and at the end of the alignment_period.This aligner is valid for CUMULATIVE and DELTA metrics with numeric values. If the selected alignment period results in periods with no data, then the aligned value for such a period is created by interpolation. The output is a GAUGE metric with value_type DOUBLE.If, by "rate", you mean "percentage change", see the ALIGN_PERCENT_CHANGE aligner instead.
	AggregationPerSeriesAlignerAlignRate = AggregationPerSeriesAligner("ALIGN_RATE")
	// Align by interpolating between adjacent points around the alignment period boundary. This aligner is valid for GAUGE metrics with numeric values. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignInterpolate = AggregationPerSeriesAligner("ALIGN_INTERPOLATE")
	// Align by moving the most recent data point before the end of the alignment period to the boundary at the end of the alignment period. This aligner is valid for GAUGE metrics. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignNextOlder = AggregationPerSeriesAligner("ALIGN_NEXT_OLDER")
	// Align the time series by returning the minimum value in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric values. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignMin = AggregationPerSeriesAligner("ALIGN_MIN")
	// Align the time series by returning the maximum value in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric values. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignMax = AggregationPerSeriesAligner("ALIGN_MAX")
	// Align the time series by returning the mean value in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric values. The value_type of the aligned result is DOUBLE.
	AggregationPerSeriesAlignerAlignMean = AggregationPerSeriesAligner("ALIGN_MEAN")
	// Align the time series by returning the number of values in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric or Boolean values. The value_type of the aligned result is INT64.
	AggregationPerSeriesAlignerAlignCount = AggregationPerSeriesAligner("ALIGN_COUNT")
	// Align the time series by returning the sum of the values in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric and distribution values. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignSum = AggregationPerSeriesAligner("ALIGN_SUM")
	// Align the time series by returning the standard deviation of the values in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric values. The value_type of the output is DOUBLE.
	AggregationPerSeriesAlignerAlignStddev = AggregationPerSeriesAligner("ALIGN_STDDEV")
	// Align the time series by returning the number of True values in each alignment period. This aligner is valid for GAUGE metrics with Boolean values. The value_type of the output is INT64.
	AggregationPerSeriesAlignerAlignCountTrue = AggregationPerSeriesAligner("ALIGN_COUNT_TRUE")
	// Align the time series by returning the number of False values in each alignment period. This aligner is valid for GAUGE metrics with Boolean values. The value_type of the output is INT64.
	AggregationPerSeriesAlignerAlignCountFalse = AggregationPerSeriesAligner("ALIGN_COUNT_FALSE")
	// Align the time series by returning the ratio of the number of True values to the total number of values in each alignment period. This aligner is valid for GAUGE metrics with Boolean values. The output value is in the range 0.0, 1.0 and has value_type DOUBLE.
	AggregationPerSeriesAlignerAlignFractionTrue = AggregationPerSeriesAligner("ALIGN_FRACTION_TRUE")
	// Align the time series by using percentile aggregation (https://en.wikipedia.org/wiki/Percentile). The resulting data point in each alignment period is the 99th percentile of all data points in the period. This aligner is valid for GAUGE and DELTA metrics with distribution values. The output is a GAUGE metric with value_type DOUBLE.
	AggregationPerSeriesAlignerAlignPercentile99 = AggregationPerSeriesAligner("ALIGN_PERCENTILE_99")
	// Align the time series by using percentile aggregation (https://en.wikipedia.org/wiki/Percentile). The resulting data point in each alignment period is the 95th percentile of all data points in the period. This aligner is valid for GAUGE and DELTA metrics with distribution values. The output is a GAUGE metric with value_type DOUBLE.
	AggregationPerSeriesAlignerAlignPercentile95 = AggregationPerSeriesAligner("ALIGN_PERCENTILE_95")
	// Align the time series by using percentile aggregation (https://en.wikipedia.org/wiki/Percentile). The resulting data point in each alignment period is the 50th percentile of all data points in the period. This aligner is valid for GAUGE and DELTA metrics with distribution values. The output is a GAUGE metric with value_type DOUBLE.
	AggregationPerSeriesAlignerAlignPercentile50 = AggregationPerSeriesAligner("ALIGN_PERCENTILE_50")
	// Align the time series by using percentile aggregation (https://en.wikipedia.org/wiki/Percentile). The resulting data point in each alignment period is the 5th percentile of all data points in the period. This aligner is valid for GAUGE and DELTA metrics with distribution values. The output is a GAUGE metric with value_type DOUBLE.
	AggregationPerSeriesAlignerAlignPercentile05 = AggregationPerSeriesAligner("ALIGN_PERCENTILE_05")
	// Align and convert to a percentage change. This aligner is valid for GAUGE and DELTA metrics with numeric values. This alignment returns ((current - previous)/previous) * 100, where the value of previous is determined based on the alignment_period.If the values of current and previous are both 0, then the returned value is 0. If only previous is 0, the returned value is infinity.A 10-minute moving mean is computed at each point of the alignment period prior to the above calculation to smooth the metric and prevent false positives from very short-lived spikes. The moving mean is only applicable for data whose values are >= 0. Any values < 0 are treated as a missing datapoint, and are ignored. While DELTA metrics are accepted by this alignment, special care should be taken that the values for the metric will always be positive. The output is a GAUGE metric with value_type DOUBLE.
	AggregationPerSeriesAlignerAlignPercentChange = AggregationPerSeriesAligner("ALIGN_PERCENT_CHANGE")
)

func (AggregationPerSeriesAligner) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationPerSeriesAligner)(nil)).Elem()
}

func (e AggregationPerSeriesAligner) ToAggregationPerSeriesAlignerOutput() AggregationPerSeriesAlignerOutput {
	return pulumi.ToOutput(e).(AggregationPerSeriesAlignerOutput)
}

func (e AggregationPerSeriesAligner) ToAggregationPerSeriesAlignerOutputWithContext(ctx context.Context) AggregationPerSeriesAlignerOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AggregationPerSeriesAlignerOutput)
}

func (e AggregationPerSeriesAligner) ToAggregationPerSeriesAlignerPtrOutput() AggregationPerSeriesAlignerPtrOutput {
	return e.ToAggregationPerSeriesAlignerPtrOutputWithContext(context.Background())
}

func (e AggregationPerSeriesAligner) ToAggregationPerSeriesAlignerPtrOutputWithContext(ctx context.Context) AggregationPerSeriesAlignerPtrOutput {
	return AggregationPerSeriesAligner(e).ToAggregationPerSeriesAlignerOutputWithContext(ctx).ToAggregationPerSeriesAlignerPtrOutputWithContext(ctx)
}

func (e AggregationPerSeriesAligner) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AggregationPerSeriesAligner) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AggregationPerSeriesAligner) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AggregationPerSeriesAligner) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AggregationPerSeriesAlignerOutput struct{ *pulumi.OutputState }

func (AggregationPerSeriesAlignerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationPerSeriesAligner)(nil)).Elem()
}

func (o AggregationPerSeriesAlignerOutput) ToAggregationPerSeriesAlignerOutput() AggregationPerSeriesAlignerOutput {
	return o
}

func (o AggregationPerSeriesAlignerOutput) ToAggregationPerSeriesAlignerOutputWithContext(ctx context.Context) AggregationPerSeriesAlignerOutput {
	return o
}

func (o AggregationPerSeriesAlignerOutput) ToAggregationPerSeriesAlignerPtrOutput() AggregationPerSeriesAlignerPtrOutput {
	return o.ToAggregationPerSeriesAlignerPtrOutputWithContext(context.Background())
}

func (o AggregationPerSeriesAlignerOutput) ToAggregationPerSeriesAlignerPtrOutputWithContext(ctx context.Context) AggregationPerSeriesAlignerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AggregationPerSeriesAligner) *AggregationPerSeriesAligner {
		return &v
	}).(AggregationPerSeriesAlignerPtrOutput)
}

func (o AggregationPerSeriesAlignerOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AggregationPerSeriesAlignerOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AggregationPerSeriesAligner) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AggregationPerSeriesAlignerOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AggregationPerSeriesAlignerOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AggregationPerSeriesAligner) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AggregationPerSeriesAlignerPtrOutput struct{ *pulumi.OutputState }

func (AggregationPerSeriesAlignerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregationPerSeriesAligner)(nil)).Elem()
}

func (o AggregationPerSeriesAlignerPtrOutput) ToAggregationPerSeriesAlignerPtrOutput() AggregationPerSeriesAlignerPtrOutput {
	return o
}

func (o AggregationPerSeriesAlignerPtrOutput) ToAggregationPerSeriesAlignerPtrOutputWithContext(ctx context.Context) AggregationPerSeriesAlignerPtrOutput {
	return o
}

func (o AggregationPerSeriesAlignerPtrOutput) Elem() AggregationPerSeriesAlignerOutput {
	return o.ApplyT(func(v *AggregationPerSeriesAligner) AggregationPerSeriesAligner {
		if v != nil {
			return *v
		}
		var ret AggregationPerSeriesAligner
		return ret
	}).(AggregationPerSeriesAlignerOutput)
}

func (o AggregationPerSeriesAlignerPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AggregationPerSeriesAlignerPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AggregationPerSeriesAligner) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AggregationPerSeriesAlignerInput is an input type that accepts AggregationPerSeriesAlignerArgs and AggregationPerSeriesAlignerOutput values.
// You can construct a concrete instance of `AggregationPerSeriesAlignerInput` via:
//
//	AggregationPerSeriesAlignerArgs{...}
type AggregationPerSeriesAlignerInput interface {
	pulumi.Input

	ToAggregationPerSeriesAlignerOutput() AggregationPerSeriesAlignerOutput
	ToAggregationPerSeriesAlignerOutputWithContext(context.Context) AggregationPerSeriesAlignerOutput
}

var aggregationPerSeriesAlignerPtrType = reflect.TypeOf((**AggregationPerSeriesAligner)(nil)).Elem()

type AggregationPerSeriesAlignerPtrInput interface {
	pulumi.Input

	ToAggregationPerSeriesAlignerPtrOutput() AggregationPerSeriesAlignerPtrOutput
	ToAggregationPerSeriesAlignerPtrOutputWithContext(context.Context) AggregationPerSeriesAlignerPtrOutput
}

type aggregationPerSeriesAlignerPtr string

func AggregationPerSeriesAlignerPtr(v string) AggregationPerSeriesAlignerPtrInput {
	return (*aggregationPerSeriesAlignerPtr)(&v)
}

func (*aggregationPerSeriesAlignerPtr) ElementType() reflect.Type {
	return aggregationPerSeriesAlignerPtrType
}

func (in *aggregationPerSeriesAlignerPtr) ToAggregationPerSeriesAlignerPtrOutput() AggregationPerSeriesAlignerPtrOutput {
	return pulumi.ToOutput(in).(AggregationPerSeriesAlignerPtrOutput)
}

func (in *aggregationPerSeriesAlignerPtr) ToAggregationPerSeriesAlignerPtrOutputWithContext(ctx context.Context) AggregationPerSeriesAlignerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AggregationPerSeriesAlignerPtrOutput)
}

// The axis scale. By default, a linear scale is used.
type AxisScale string

const (
	// Scale is unspecified. The view will default to LINEAR.
	AxisScaleScaleUnspecified = AxisScale("SCALE_UNSPECIFIED")
	// Linear scale.
	AxisScaleLinear = AxisScale("LINEAR")
	// Logarithmic scale (base 10).
	AxisScaleLog10 = AxisScale("LOG10")
)

func (AxisScale) ElementType() reflect.Type {
	return reflect.TypeOf((*AxisScale)(nil)).Elem()
}

func (e AxisScale) ToAxisScaleOutput() AxisScaleOutput {
	return pulumi.ToOutput(e).(AxisScaleOutput)
}

func (e AxisScale) ToAxisScaleOutputWithContext(ctx context.Context) AxisScaleOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AxisScaleOutput)
}

func (e AxisScale) ToAxisScalePtrOutput() AxisScalePtrOutput {
	return e.ToAxisScalePtrOutputWithContext(context.Background())
}

func (e AxisScale) ToAxisScalePtrOutputWithContext(ctx context.Context) AxisScalePtrOutput {
	return AxisScale(e).ToAxisScaleOutputWithContext(ctx).ToAxisScalePtrOutputWithContext(ctx)
}

func (e AxisScale) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AxisScale) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AxisScale) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AxisScale) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AxisScaleOutput struct{ *pulumi.OutputState }

func (AxisScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AxisScale)(nil)).Elem()
}

func (o AxisScaleOutput) ToAxisScaleOutput() AxisScaleOutput {
	return o
}

func (o AxisScaleOutput) ToAxisScaleOutputWithContext(ctx context.Context) AxisScaleOutput {
	return o
}

func (o AxisScaleOutput) ToAxisScalePtrOutput() AxisScalePtrOutput {
	return o.ToAxisScalePtrOutputWithContext(context.Background())
}

func (o AxisScaleOutput) ToAxisScalePtrOutputWithContext(ctx context.Context) AxisScalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AxisScale) *AxisScale {
		return &v
	}).(AxisScalePtrOutput)
}

func (o AxisScaleOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AxisScaleOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AxisScale) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AxisScaleOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AxisScaleOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AxisScale) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AxisScalePtrOutput struct{ *pulumi.OutputState }

func (AxisScalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AxisScale)(nil)).Elem()
}

func (o AxisScalePtrOutput) ToAxisScalePtrOutput() AxisScalePtrOutput {
	return o
}

func (o AxisScalePtrOutput) ToAxisScalePtrOutputWithContext(ctx context.Context) AxisScalePtrOutput {
	return o
}

func (o AxisScalePtrOutput) Elem() AxisScaleOutput {
	return o.ApplyT(func(v *AxisScale) AxisScale {
		if v != nil {
			return *v
		}
		var ret AxisScale
		return ret
	}).(AxisScaleOutput)
}

func (o AxisScalePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AxisScalePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AxisScale) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AxisScaleInput is an input type that accepts AxisScaleArgs and AxisScaleOutput values.
// You can construct a concrete instance of `AxisScaleInput` via:
//
//	AxisScaleArgs{...}
type AxisScaleInput interface {
	pulumi.Input

	ToAxisScaleOutput() AxisScaleOutput
	ToAxisScaleOutputWithContext(context.Context) AxisScaleOutput
}

var axisScalePtrType = reflect.TypeOf((**AxisScale)(nil)).Elem()

type AxisScalePtrInput interface {
	pulumi.Input

	ToAxisScalePtrOutput() AxisScalePtrOutput
	ToAxisScalePtrOutputWithContext(context.Context) AxisScalePtrOutput
}

type axisScalePtr string

func AxisScalePtr(v string) AxisScalePtrInput {
	return (*axisScalePtr)(&v)
}

func (*axisScalePtr) ElementType() reflect.Type {
	return axisScalePtrType
}

func (in *axisScalePtr) ToAxisScalePtrOutput() AxisScalePtrOutput {
	return pulumi.ToOutput(in).(AxisScalePtrOutput)
}

func (in *axisScalePtr) ToAxisScalePtrOutputWithContext(ctx context.Context) AxisScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AxisScalePtrOutput)
}

// The chart mode.
type ChartOptionsMode string

const (
	// Mode is unspecified. The view will default to COLOR.
	ChartOptionsModeModeUnspecified = ChartOptionsMode("MODE_UNSPECIFIED")
	// The chart distinguishes data series using different color. Line colors may get reused when there are many lines in the chart.
	ChartOptionsModeColor = ChartOptionsMode("COLOR")
	// The chart uses the Stackdriver x-ray mode, in which each data set is plotted using the same semi-transparent color.
	ChartOptionsModeXRay = ChartOptionsMode("X_RAY")
	// The chart displays statistics such as average, median, 95th percentile, and more.
	ChartOptionsModeStats = ChartOptionsMode("STATS")
)

func (ChartOptionsMode) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartOptionsMode)(nil)).Elem()
}

func (e ChartOptionsMode) ToChartOptionsModeOutput() ChartOptionsModeOutput {
	return pulumi.ToOutput(e).(ChartOptionsModeOutput)
}

func (e ChartOptionsMode) ToChartOptionsModeOutputWithContext(ctx context.Context) ChartOptionsModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ChartOptionsModeOutput)
}

func (e ChartOptionsMode) ToChartOptionsModePtrOutput() ChartOptionsModePtrOutput {
	return e.ToChartOptionsModePtrOutputWithContext(context.Background())
}

func (e ChartOptionsMode) ToChartOptionsModePtrOutputWithContext(ctx context.Context) ChartOptionsModePtrOutput {
	return ChartOptionsMode(e).ToChartOptionsModeOutputWithContext(ctx).ToChartOptionsModePtrOutputWithContext(ctx)
}

func (e ChartOptionsMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ChartOptionsMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ChartOptionsMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ChartOptionsMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ChartOptionsModeOutput struct{ *pulumi.OutputState }

func (ChartOptionsModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChartOptionsMode)(nil)).Elem()
}

func (o ChartOptionsModeOutput) ToChartOptionsModeOutput() ChartOptionsModeOutput {
	return o
}

func (o ChartOptionsModeOutput) ToChartOptionsModeOutputWithContext(ctx context.Context) ChartOptionsModeOutput {
	return o
}

func (o ChartOptionsModeOutput) ToChartOptionsModePtrOutput() ChartOptionsModePtrOutput {
	return o.ToChartOptionsModePtrOutputWithContext(context.Background())
}

func (o ChartOptionsModeOutput) ToChartOptionsModePtrOutputWithContext(ctx context.Context) ChartOptionsModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChartOptionsMode) *ChartOptionsMode {
		return &v
	}).(ChartOptionsModePtrOutput)
}

func (o ChartOptionsModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ChartOptionsModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ChartOptionsMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ChartOptionsModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ChartOptionsModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ChartOptionsMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ChartOptionsModePtrOutput struct{ *pulumi.OutputState }

func (ChartOptionsModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChartOptionsMode)(nil)).Elem()
}

func (o ChartOptionsModePtrOutput) ToChartOptionsModePtrOutput() ChartOptionsModePtrOutput {
	return o
}

func (o ChartOptionsModePtrOutput) ToChartOptionsModePtrOutputWithContext(ctx context.Context) ChartOptionsModePtrOutput {
	return o
}

func (o ChartOptionsModePtrOutput) Elem() ChartOptionsModeOutput {
	return o.ApplyT(func(v *ChartOptionsMode) ChartOptionsMode {
		if v != nil {
			return *v
		}
		var ret ChartOptionsMode
		return ret
	}).(ChartOptionsModeOutput)
}

func (o ChartOptionsModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ChartOptionsModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ChartOptionsMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ChartOptionsModeInput is an input type that accepts ChartOptionsModeArgs and ChartOptionsModeOutput values.
// You can construct a concrete instance of `ChartOptionsModeInput` via:
//
//	ChartOptionsModeArgs{...}
type ChartOptionsModeInput interface {
	pulumi.Input

	ToChartOptionsModeOutput() ChartOptionsModeOutput
	ToChartOptionsModeOutputWithContext(context.Context) ChartOptionsModeOutput
}

var chartOptionsModePtrType = reflect.TypeOf((**ChartOptionsMode)(nil)).Elem()

type ChartOptionsModePtrInput interface {
	pulumi.Input

	ToChartOptionsModePtrOutput() ChartOptionsModePtrOutput
	ToChartOptionsModePtrOutputWithContext(context.Context) ChartOptionsModePtrOutput
}

type chartOptionsModePtr string

func ChartOptionsModePtr(v string) ChartOptionsModePtrInput {
	return (*chartOptionsModePtr)(&v)
}

func (*chartOptionsModePtr) ElementType() reflect.Type {
	return chartOptionsModePtrType
}

func (in *chartOptionsModePtr) ToChartOptionsModePtrOutput() ChartOptionsModePtrOutput {
	return pulumi.ToOutput(in).(ChartOptionsModePtrOutput)
}

func (in *chartOptionsModePtr) ToChartOptionsModePtrOutputWithContext(ctx context.Context) ChartOptionsModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ChartOptionsModePtrOutput)
}

// The specified filter type
type DashboardFilterFilterType string

const (
	// Filter type is unspecified. This is not valid in a well-formed request.
	DashboardFilterFilterTypeFilterTypeUnspecified = DashboardFilterFilterType("FILTER_TYPE_UNSPECIFIED")
	// Filter on a resource label value
	DashboardFilterFilterTypeResourceLabel = DashboardFilterFilterType("RESOURCE_LABEL")
	// Filter on a metrics label value
	DashboardFilterFilterTypeMetricLabel = DashboardFilterFilterType("METRIC_LABEL")
	// Filter on a user metadata label value
	DashboardFilterFilterTypeUserMetadataLabel = DashboardFilterFilterType("USER_METADATA_LABEL")
	// Filter on a system metadata label value
	DashboardFilterFilterTypeSystemMetadataLabel = DashboardFilterFilterType("SYSTEM_METADATA_LABEL")
	// Filter on a group id
	DashboardFilterFilterTypeGroup = DashboardFilterFilterType("GROUP")
)

func (DashboardFilterFilterType) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardFilterFilterType)(nil)).Elem()
}

func (e DashboardFilterFilterType) ToDashboardFilterFilterTypeOutput() DashboardFilterFilterTypeOutput {
	return pulumi.ToOutput(e).(DashboardFilterFilterTypeOutput)
}

func (e DashboardFilterFilterType) ToDashboardFilterFilterTypeOutputWithContext(ctx context.Context) DashboardFilterFilterTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DashboardFilterFilterTypeOutput)
}

func (e DashboardFilterFilterType) ToDashboardFilterFilterTypePtrOutput() DashboardFilterFilterTypePtrOutput {
	return e.ToDashboardFilterFilterTypePtrOutputWithContext(context.Background())
}

func (e DashboardFilterFilterType) ToDashboardFilterFilterTypePtrOutputWithContext(ctx context.Context) DashboardFilterFilterTypePtrOutput {
	return DashboardFilterFilterType(e).ToDashboardFilterFilterTypeOutputWithContext(ctx).ToDashboardFilterFilterTypePtrOutputWithContext(ctx)
}

func (e DashboardFilterFilterType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DashboardFilterFilterType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DashboardFilterFilterType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DashboardFilterFilterType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DashboardFilterFilterTypeOutput struct{ *pulumi.OutputState }

func (DashboardFilterFilterTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardFilterFilterType)(nil)).Elem()
}

func (o DashboardFilterFilterTypeOutput) ToDashboardFilterFilterTypeOutput() DashboardFilterFilterTypeOutput {
	return o
}

func (o DashboardFilterFilterTypeOutput) ToDashboardFilterFilterTypeOutputWithContext(ctx context.Context) DashboardFilterFilterTypeOutput {
	return o
}

func (o DashboardFilterFilterTypeOutput) ToDashboardFilterFilterTypePtrOutput() DashboardFilterFilterTypePtrOutput {
	return o.ToDashboardFilterFilterTypePtrOutputWithContext(context.Background())
}

func (o DashboardFilterFilterTypeOutput) ToDashboardFilterFilterTypePtrOutputWithContext(ctx context.Context) DashboardFilterFilterTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashboardFilterFilterType) *DashboardFilterFilterType {
		return &v
	}).(DashboardFilterFilterTypePtrOutput)
}

func (o DashboardFilterFilterTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DashboardFilterFilterTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DashboardFilterFilterType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DashboardFilterFilterTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DashboardFilterFilterTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DashboardFilterFilterType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DashboardFilterFilterTypePtrOutput struct{ *pulumi.OutputState }

func (DashboardFilterFilterTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardFilterFilterType)(nil)).Elem()
}

func (o DashboardFilterFilterTypePtrOutput) ToDashboardFilterFilterTypePtrOutput() DashboardFilterFilterTypePtrOutput {
	return o
}

func (o DashboardFilterFilterTypePtrOutput) ToDashboardFilterFilterTypePtrOutputWithContext(ctx context.Context) DashboardFilterFilterTypePtrOutput {
	return o
}

func (o DashboardFilterFilterTypePtrOutput) Elem() DashboardFilterFilterTypeOutput {
	return o.ApplyT(func(v *DashboardFilterFilterType) DashboardFilterFilterType {
		if v != nil {
			return *v
		}
		var ret DashboardFilterFilterType
		return ret
	}).(DashboardFilterFilterTypeOutput)
}

func (o DashboardFilterFilterTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DashboardFilterFilterTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DashboardFilterFilterType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DashboardFilterFilterTypeInput is an input type that accepts DashboardFilterFilterTypeArgs and DashboardFilterFilterTypeOutput values.
// You can construct a concrete instance of `DashboardFilterFilterTypeInput` via:
//
//	DashboardFilterFilterTypeArgs{...}
type DashboardFilterFilterTypeInput interface {
	pulumi.Input

	ToDashboardFilterFilterTypeOutput() DashboardFilterFilterTypeOutput
	ToDashboardFilterFilterTypeOutputWithContext(context.Context) DashboardFilterFilterTypeOutput
}

var dashboardFilterFilterTypePtrType = reflect.TypeOf((**DashboardFilterFilterType)(nil)).Elem()

type DashboardFilterFilterTypePtrInput interface {
	pulumi.Input

	ToDashboardFilterFilterTypePtrOutput() DashboardFilterFilterTypePtrOutput
	ToDashboardFilterFilterTypePtrOutputWithContext(context.Context) DashboardFilterFilterTypePtrOutput
}

type dashboardFilterFilterTypePtr string

func DashboardFilterFilterTypePtr(v string) DashboardFilterFilterTypePtrInput {
	return (*dashboardFilterFilterTypePtr)(&v)
}

func (*dashboardFilterFilterTypePtr) ElementType() reflect.Type {
	return dashboardFilterFilterTypePtrType
}

func (in *dashboardFilterFilterTypePtr) ToDashboardFilterFilterTypePtrOutput() DashboardFilterFilterTypePtrOutput {
	return pulumi.ToOutput(in).(DashboardFilterFilterTypePtrOutput)
}

func (in *dashboardFilterFilterTypePtr) ToDashboardFilterFilterTypePtrOutputWithContext(ctx context.Context) DashboardFilterFilterTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DashboardFilterFilterTypePtrOutput)
}

// How this data should be plotted on the chart.
type DataSetPlotType string

const (
	// Plot type is unspecified. The view will default to LINE.
	DataSetPlotTypePlotTypeUnspecified = DataSetPlotType("PLOT_TYPE_UNSPECIFIED")
	// The data is plotted as a set of lines (one line per series).
	DataSetPlotTypeLine = DataSetPlotType("LINE")
	// The data is plotted as a set of filled areas (one area per series), with the areas stacked vertically (the base of each area is the top of its predecessor, and the base of the first area is the X axis). Since the areas do not overlap, each is filled with a different opaque color.
	DataSetPlotTypeStackedArea = DataSetPlotType("STACKED_AREA")
	// The data is plotted as a set of rectangular boxes (one box per series), with the boxes stacked vertically (the base of each box is the top of its predecessor, and the base of the first box is the X axis). Since the boxes do not overlap, each is filled with a different opaque color.
	DataSetPlotTypeStackedBar = DataSetPlotType("STACKED_BAR")
	// The data is plotted as a heatmap. The series being plotted must have a DISTRIBUTION value type. The value of each bucket in the distribution is displayed as a color. This type is not currently available in the Stackdriver Monitoring application.
	DataSetPlotTypeHeatmap = DataSetPlotType("HEATMAP")
)

func (DataSetPlotType) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPlotType)(nil)).Elem()
}

func (e DataSetPlotType) ToDataSetPlotTypeOutput() DataSetPlotTypeOutput {
	return pulumi.ToOutput(e).(DataSetPlotTypeOutput)
}

func (e DataSetPlotType) ToDataSetPlotTypeOutputWithContext(ctx context.Context) DataSetPlotTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DataSetPlotTypeOutput)
}

func (e DataSetPlotType) ToDataSetPlotTypePtrOutput() DataSetPlotTypePtrOutput {
	return e.ToDataSetPlotTypePtrOutputWithContext(context.Background())
}

func (e DataSetPlotType) ToDataSetPlotTypePtrOutputWithContext(ctx context.Context) DataSetPlotTypePtrOutput {
	return DataSetPlotType(e).ToDataSetPlotTypeOutputWithContext(ctx).ToDataSetPlotTypePtrOutputWithContext(ctx)
}

func (e DataSetPlotType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataSetPlotType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataSetPlotType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DataSetPlotType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DataSetPlotTypeOutput struct{ *pulumi.OutputState }

func (DataSetPlotTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetPlotType)(nil)).Elem()
}

func (o DataSetPlotTypeOutput) ToDataSetPlotTypeOutput() DataSetPlotTypeOutput {
	return o
}

func (o DataSetPlotTypeOutput) ToDataSetPlotTypeOutputWithContext(ctx context.Context) DataSetPlotTypeOutput {
	return o
}

func (o DataSetPlotTypeOutput) ToDataSetPlotTypePtrOutput() DataSetPlotTypePtrOutput {
	return o.ToDataSetPlotTypePtrOutputWithContext(context.Background())
}

func (o DataSetPlotTypeOutput) ToDataSetPlotTypePtrOutputWithContext(ctx context.Context) DataSetPlotTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetPlotType) *DataSetPlotType {
		return &v
	}).(DataSetPlotTypePtrOutput)
}

func (o DataSetPlotTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DataSetPlotTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataSetPlotType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DataSetPlotTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataSetPlotTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataSetPlotType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DataSetPlotTypePtrOutput struct{ *pulumi.OutputState }

func (DataSetPlotTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetPlotType)(nil)).Elem()
}

func (o DataSetPlotTypePtrOutput) ToDataSetPlotTypePtrOutput() DataSetPlotTypePtrOutput {
	return o
}

func (o DataSetPlotTypePtrOutput) ToDataSetPlotTypePtrOutputWithContext(ctx context.Context) DataSetPlotTypePtrOutput {
	return o
}

func (o DataSetPlotTypePtrOutput) Elem() DataSetPlotTypeOutput {
	return o.ApplyT(func(v *DataSetPlotType) DataSetPlotType {
		if v != nil {
			return *v
		}
		var ret DataSetPlotType
		return ret
	}).(DataSetPlotTypeOutput)
}

func (o DataSetPlotTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataSetPlotTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DataSetPlotType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DataSetPlotTypeInput is an input type that accepts DataSetPlotTypeArgs and DataSetPlotTypeOutput values.
// You can construct a concrete instance of `DataSetPlotTypeInput` via:
//
//	DataSetPlotTypeArgs{...}
type DataSetPlotTypeInput interface {
	pulumi.Input

	ToDataSetPlotTypeOutput() DataSetPlotTypeOutput
	ToDataSetPlotTypeOutputWithContext(context.Context) DataSetPlotTypeOutput
}

var dataSetPlotTypePtrType = reflect.TypeOf((**DataSetPlotType)(nil)).Elem()

type DataSetPlotTypePtrInput interface {
	pulumi.Input

	ToDataSetPlotTypePtrOutput() DataSetPlotTypePtrOutput
	ToDataSetPlotTypePtrOutputWithContext(context.Context) DataSetPlotTypePtrOutput
}

type dataSetPlotTypePtr string

func DataSetPlotTypePtr(v string) DataSetPlotTypePtrInput {
	return (*dataSetPlotTypePtr)(&v)
}

func (*dataSetPlotTypePtr) ElementType() reflect.Type {
	return dataSetPlotTypePtrType
}

func (in *dataSetPlotTypePtr) ToDataSetPlotTypePtrOutput() DataSetPlotTypePtrOutput {
	return pulumi.ToOutput(in).(DataSetPlotTypePtrOutput)
}

func (in *dataSetPlotTypePtr) ToDataSetPlotTypePtrOutputWithContext(ctx context.Context) DataSetPlotTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DataSetPlotTypePtrOutput)
}

// Optional. The target axis to use for plotting the metric.
type DataSetTargetAxis string

const (
	// The target axis was not specified. Defaults to Y1.
	DataSetTargetAxisTargetAxisUnspecified = DataSetTargetAxis("TARGET_AXIS_UNSPECIFIED")
	// The y_axis (the right axis of chart).
	DataSetTargetAxisY1 = DataSetTargetAxis("Y1")
	// The y2_axis (the left axis of chart).
	DataSetTargetAxisY2 = DataSetTargetAxis("Y2")
)

func (DataSetTargetAxis) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetTargetAxis)(nil)).Elem()
}

func (e DataSetTargetAxis) ToDataSetTargetAxisOutput() DataSetTargetAxisOutput {
	return pulumi.ToOutput(e).(DataSetTargetAxisOutput)
}

func (e DataSetTargetAxis) ToDataSetTargetAxisOutputWithContext(ctx context.Context) DataSetTargetAxisOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DataSetTargetAxisOutput)
}

func (e DataSetTargetAxis) ToDataSetTargetAxisPtrOutput() DataSetTargetAxisPtrOutput {
	return e.ToDataSetTargetAxisPtrOutputWithContext(context.Background())
}

func (e DataSetTargetAxis) ToDataSetTargetAxisPtrOutputWithContext(ctx context.Context) DataSetTargetAxisPtrOutput {
	return DataSetTargetAxis(e).ToDataSetTargetAxisOutputWithContext(ctx).ToDataSetTargetAxisPtrOutputWithContext(ctx)
}

func (e DataSetTargetAxis) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataSetTargetAxis) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataSetTargetAxis) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DataSetTargetAxis) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DataSetTargetAxisOutput struct{ *pulumi.OutputState }

func (DataSetTargetAxisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSetTargetAxis)(nil)).Elem()
}

func (o DataSetTargetAxisOutput) ToDataSetTargetAxisOutput() DataSetTargetAxisOutput {
	return o
}

func (o DataSetTargetAxisOutput) ToDataSetTargetAxisOutputWithContext(ctx context.Context) DataSetTargetAxisOutput {
	return o
}

func (o DataSetTargetAxisOutput) ToDataSetTargetAxisPtrOutput() DataSetTargetAxisPtrOutput {
	return o.ToDataSetTargetAxisPtrOutputWithContext(context.Background())
}

func (o DataSetTargetAxisOutput) ToDataSetTargetAxisPtrOutputWithContext(ctx context.Context) DataSetTargetAxisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSetTargetAxis) *DataSetTargetAxis {
		return &v
	}).(DataSetTargetAxisPtrOutput)
}

func (o DataSetTargetAxisOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DataSetTargetAxisOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataSetTargetAxis) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DataSetTargetAxisOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataSetTargetAxisOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataSetTargetAxis) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DataSetTargetAxisPtrOutput struct{ *pulumi.OutputState }

func (DataSetTargetAxisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSetTargetAxis)(nil)).Elem()
}

func (o DataSetTargetAxisPtrOutput) ToDataSetTargetAxisPtrOutput() DataSetTargetAxisPtrOutput {
	return o
}

func (o DataSetTargetAxisPtrOutput) ToDataSetTargetAxisPtrOutputWithContext(ctx context.Context) DataSetTargetAxisPtrOutput {
	return o
}

func (o DataSetTargetAxisPtrOutput) Elem() DataSetTargetAxisOutput {
	return o.ApplyT(func(v *DataSetTargetAxis) DataSetTargetAxis {
		if v != nil {
			return *v
		}
		var ret DataSetTargetAxis
		return ret
	}).(DataSetTargetAxisOutput)
}

func (o DataSetTargetAxisPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataSetTargetAxisPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DataSetTargetAxis) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DataSetTargetAxisInput is an input type that accepts DataSetTargetAxisArgs and DataSetTargetAxisOutput values.
// You can construct a concrete instance of `DataSetTargetAxisInput` via:
//
//	DataSetTargetAxisArgs{...}
type DataSetTargetAxisInput interface {
	pulumi.Input

	ToDataSetTargetAxisOutput() DataSetTargetAxisOutput
	ToDataSetTargetAxisOutputWithContext(context.Context) DataSetTargetAxisOutput
}

var dataSetTargetAxisPtrType = reflect.TypeOf((**DataSetTargetAxis)(nil)).Elem()

type DataSetTargetAxisPtrInput interface {
	pulumi.Input

	ToDataSetTargetAxisPtrOutput() DataSetTargetAxisPtrOutput
	ToDataSetTargetAxisPtrOutputWithContext(context.Context) DataSetTargetAxisPtrOutput
}

type dataSetTargetAxisPtr string

func DataSetTargetAxisPtr(v string) DataSetTargetAxisPtrInput {
	return (*dataSetTargetAxisPtr)(&v)
}

func (*dataSetTargetAxisPtr) ElementType() reflect.Type {
	return dataSetTargetAxisPtrType
}

func (in *dataSetTargetAxisPtr) ToDataSetTargetAxisPtrOutput() DataSetTargetAxisPtrOutput {
	return pulumi.ToOutput(in).(DataSetTargetAxisPtrOutput)
}

func (in *dataSetTargetAxisPtr) ToDataSetTargetAxisPtrOutputWithContext(ctx context.Context) DataSetTargetAxisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DataSetTargetAxisPtrOutput)
}

// How to use the ranking to select time series that pass through the filter.
type PickTimeSeriesFilterDirection string

const (
	// Not allowed. You must specify a different Direction if you specify a PickTimeSeriesFilter.
	PickTimeSeriesFilterDirectionDirectionUnspecified = PickTimeSeriesFilterDirection("DIRECTION_UNSPECIFIED")
	// Pass the highest num_time_series ranking inputs.
	PickTimeSeriesFilterDirectionTop = PickTimeSeriesFilterDirection("TOP")
	// Pass the lowest num_time_series ranking inputs.
	PickTimeSeriesFilterDirectionBottom = PickTimeSeriesFilterDirection("BOTTOM")
)

func (PickTimeSeriesFilterDirection) ElementType() reflect.Type {
	return reflect.TypeOf((*PickTimeSeriesFilterDirection)(nil)).Elem()
}

func (e PickTimeSeriesFilterDirection) ToPickTimeSeriesFilterDirectionOutput() PickTimeSeriesFilterDirectionOutput {
	return pulumi.ToOutput(e).(PickTimeSeriesFilterDirectionOutput)
}

func (e PickTimeSeriesFilterDirection) ToPickTimeSeriesFilterDirectionOutputWithContext(ctx context.Context) PickTimeSeriesFilterDirectionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PickTimeSeriesFilterDirectionOutput)
}

func (e PickTimeSeriesFilterDirection) ToPickTimeSeriesFilterDirectionPtrOutput() PickTimeSeriesFilterDirectionPtrOutput {
	return e.ToPickTimeSeriesFilterDirectionPtrOutputWithContext(context.Background())
}

func (e PickTimeSeriesFilterDirection) ToPickTimeSeriesFilterDirectionPtrOutputWithContext(ctx context.Context) PickTimeSeriesFilterDirectionPtrOutput {
	return PickTimeSeriesFilterDirection(e).ToPickTimeSeriesFilterDirectionOutputWithContext(ctx).ToPickTimeSeriesFilterDirectionPtrOutputWithContext(ctx)
}

func (e PickTimeSeriesFilterDirection) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PickTimeSeriesFilterDirection) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PickTimeSeriesFilterDirection) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PickTimeSeriesFilterDirection) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PickTimeSeriesFilterDirectionOutput struct{ *pulumi.OutputState }

func (PickTimeSeriesFilterDirectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PickTimeSeriesFilterDirection)(nil)).Elem()
}

func (o PickTimeSeriesFilterDirectionOutput) ToPickTimeSeriesFilterDirectionOutput() PickTimeSeriesFilterDirectionOutput {
	return o
}

func (o PickTimeSeriesFilterDirectionOutput) ToPickTimeSeriesFilterDirectionOutputWithContext(ctx context.Context) PickTimeSeriesFilterDirectionOutput {
	return o
}

func (o PickTimeSeriesFilterDirectionOutput) ToPickTimeSeriesFilterDirectionPtrOutput() PickTimeSeriesFilterDirectionPtrOutput {
	return o.ToPickTimeSeriesFilterDirectionPtrOutputWithContext(context.Background())
}

func (o PickTimeSeriesFilterDirectionOutput) ToPickTimeSeriesFilterDirectionPtrOutputWithContext(ctx context.Context) PickTimeSeriesFilterDirectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PickTimeSeriesFilterDirection) *PickTimeSeriesFilterDirection {
		return &v
	}).(PickTimeSeriesFilterDirectionPtrOutput)
}

func (o PickTimeSeriesFilterDirectionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PickTimeSeriesFilterDirectionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PickTimeSeriesFilterDirection) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PickTimeSeriesFilterDirectionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PickTimeSeriesFilterDirectionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PickTimeSeriesFilterDirection) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PickTimeSeriesFilterDirectionPtrOutput struct{ *pulumi.OutputState }

func (PickTimeSeriesFilterDirectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PickTimeSeriesFilterDirection)(nil)).Elem()
}

func (o PickTimeSeriesFilterDirectionPtrOutput) ToPickTimeSeriesFilterDirectionPtrOutput() PickTimeSeriesFilterDirectionPtrOutput {
	return o
}

func (o PickTimeSeriesFilterDirectionPtrOutput) ToPickTimeSeriesFilterDirectionPtrOutputWithContext(ctx context.Context) PickTimeSeriesFilterDirectionPtrOutput {
	return o
}

func (o PickTimeSeriesFilterDirectionPtrOutput) Elem() PickTimeSeriesFilterDirectionOutput {
	return o.ApplyT(func(v *PickTimeSeriesFilterDirection) PickTimeSeriesFilterDirection {
		if v != nil {
			return *v
		}
		var ret PickTimeSeriesFilterDirection
		return ret
	}).(PickTimeSeriesFilterDirectionOutput)
}

func (o PickTimeSeriesFilterDirectionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PickTimeSeriesFilterDirectionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PickTimeSeriesFilterDirection) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PickTimeSeriesFilterDirectionInput is an input type that accepts PickTimeSeriesFilterDirectionArgs and PickTimeSeriesFilterDirectionOutput values.
// You can construct a concrete instance of `PickTimeSeriesFilterDirectionInput` via:
//
//	PickTimeSeriesFilterDirectionArgs{...}
type PickTimeSeriesFilterDirectionInput interface {
	pulumi.Input

	ToPickTimeSeriesFilterDirectionOutput() PickTimeSeriesFilterDirectionOutput
	ToPickTimeSeriesFilterDirectionOutputWithContext(context.Context) PickTimeSeriesFilterDirectionOutput
}

var pickTimeSeriesFilterDirectionPtrType = reflect.TypeOf((**PickTimeSeriesFilterDirection)(nil)).Elem()

type PickTimeSeriesFilterDirectionPtrInput interface {
	pulumi.Input

	ToPickTimeSeriesFilterDirectionPtrOutput() PickTimeSeriesFilterDirectionPtrOutput
	ToPickTimeSeriesFilterDirectionPtrOutputWithContext(context.Context) PickTimeSeriesFilterDirectionPtrOutput
}

type pickTimeSeriesFilterDirectionPtr string

func PickTimeSeriesFilterDirectionPtr(v string) PickTimeSeriesFilterDirectionPtrInput {
	return (*pickTimeSeriesFilterDirectionPtr)(&v)
}

func (*pickTimeSeriesFilterDirectionPtr) ElementType() reflect.Type {
	return pickTimeSeriesFilterDirectionPtrType
}

func (in *pickTimeSeriesFilterDirectionPtr) ToPickTimeSeriesFilterDirectionPtrOutput() PickTimeSeriesFilterDirectionPtrOutput {
	return pulumi.ToOutput(in).(PickTimeSeriesFilterDirectionPtrOutput)
}

func (in *pickTimeSeriesFilterDirectionPtr) ToPickTimeSeriesFilterDirectionPtrOutputWithContext(ctx context.Context) PickTimeSeriesFilterDirectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PickTimeSeriesFilterDirectionPtrOutput)
}

// ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.
type PickTimeSeriesFilterRankingMethod string

const (
	// Not allowed. You must specify a different Method if you specify a PickTimeSeriesFilter.
	PickTimeSeriesFilterRankingMethodMethodUnspecified = PickTimeSeriesFilterRankingMethod("METHOD_UNSPECIFIED")
	// Select the mean of all values.
	PickTimeSeriesFilterRankingMethodMethodMean = PickTimeSeriesFilterRankingMethod("METHOD_MEAN")
	// Select the maximum value.
	PickTimeSeriesFilterRankingMethodMethodMax = PickTimeSeriesFilterRankingMethod("METHOD_MAX")
	// Select the minimum value.
	PickTimeSeriesFilterRankingMethodMethodMin = PickTimeSeriesFilterRankingMethod("METHOD_MIN")
	// Compute the sum of all values.
	PickTimeSeriesFilterRankingMethodMethodSum = PickTimeSeriesFilterRankingMethod("METHOD_SUM")
	// Select the most recent value.
	PickTimeSeriesFilterRankingMethodMethodLatest = PickTimeSeriesFilterRankingMethod("METHOD_LATEST")
)

func (PickTimeSeriesFilterRankingMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*PickTimeSeriesFilterRankingMethod)(nil)).Elem()
}

func (e PickTimeSeriesFilterRankingMethod) ToPickTimeSeriesFilterRankingMethodOutput() PickTimeSeriesFilterRankingMethodOutput {
	return pulumi.ToOutput(e).(PickTimeSeriesFilterRankingMethodOutput)
}

func (e PickTimeSeriesFilterRankingMethod) ToPickTimeSeriesFilterRankingMethodOutputWithContext(ctx context.Context) PickTimeSeriesFilterRankingMethodOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PickTimeSeriesFilterRankingMethodOutput)
}

func (e PickTimeSeriesFilterRankingMethod) ToPickTimeSeriesFilterRankingMethodPtrOutput() PickTimeSeriesFilterRankingMethodPtrOutput {
	return e.ToPickTimeSeriesFilterRankingMethodPtrOutputWithContext(context.Background())
}

func (e PickTimeSeriesFilterRankingMethod) ToPickTimeSeriesFilterRankingMethodPtrOutputWithContext(ctx context.Context) PickTimeSeriesFilterRankingMethodPtrOutput {
	return PickTimeSeriesFilterRankingMethod(e).ToPickTimeSeriesFilterRankingMethodOutputWithContext(ctx).ToPickTimeSeriesFilterRankingMethodPtrOutputWithContext(ctx)
}

func (e PickTimeSeriesFilterRankingMethod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PickTimeSeriesFilterRankingMethod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PickTimeSeriesFilterRankingMethod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PickTimeSeriesFilterRankingMethod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PickTimeSeriesFilterRankingMethodOutput struct{ *pulumi.OutputState }

func (PickTimeSeriesFilterRankingMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PickTimeSeriesFilterRankingMethod)(nil)).Elem()
}

func (o PickTimeSeriesFilterRankingMethodOutput) ToPickTimeSeriesFilterRankingMethodOutput() PickTimeSeriesFilterRankingMethodOutput {
	return o
}

func (o PickTimeSeriesFilterRankingMethodOutput) ToPickTimeSeriesFilterRankingMethodOutputWithContext(ctx context.Context) PickTimeSeriesFilterRankingMethodOutput {
	return o
}

func (o PickTimeSeriesFilterRankingMethodOutput) ToPickTimeSeriesFilterRankingMethodPtrOutput() PickTimeSeriesFilterRankingMethodPtrOutput {
	return o.ToPickTimeSeriesFilterRankingMethodPtrOutputWithContext(context.Background())
}

func (o PickTimeSeriesFilterRankingMethodOutput) ToPickTimeSeriesFilterRankingMethodPtrOutputWithContext(ctx context.Context) PickTimeSeriesFilterRankingMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PickTimeSeriesFilterRankingMethod) *PickTimeSeriesFilterRankingMethod {
		return &v
	}).(PickTimeSeriesFilterRankingMethodPtrOutput)
}

func (o PickTimeSeriesFilterRankingMethodOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PickTimeSeriesFilterRankingMethodOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PickTimeSeriesFilterRankingMethod) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PickTimeSeriesFilterRankingMethodOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PickTimeSeriesFilterRankingMethodOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PickTimeSeriesFilterRankingMethod) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PickTimeSeriesFilterRankingMethodPtrOutput struct{ *pulumi.OutputState }

func (PickTimeSeriesFilterRankingMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PickTimeSeriesFilterRankingMethod)(nil)).Elem()
}

func (o PickTimeSeriesFilterRankingMethodPtrOutput) ToPickTimeSeriesFilterRankingMethodPtrOutput() PickTimeSeriesFilterRankingMethodPtrOutput {
	return o
}

func (o PickTimeSeriesFilterRankingMethodPtrOutput) ToPickTimeSeriesFilterRankingMethodPtrOutputWithContext(ctx context.Context) PickTimeSeriesFilterRankingMethodPtrOutput {
	return o
}

func (o PickTimeSeriesFilterRankingMethodPtrOutput) Elem() PickTimeSeriesFilterRankingMethodOutput {
	return o.ApplyT(func(v *PickTimeSeriesFilterRankingMethod) PickTimeSeriesFilterRankingMethod {
		if v != nil {
			return *v
		}
		var ret PickTimeSeriesFilterRankingMethod
		return ret
	}).(PickTimeSeriesFilterRankingMethodOutput)
}

func (o PickTimeSeriesFilterRankingMethodPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PickTimeSeriesFilterRankingMethodPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PickTimeSeriesFilterRankingMethod) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PickTimeSeriesFilterRankingMethodInput is an input type that accepts PickTimeSeriesFilterRankingMethodArgs and PickTimeSeriesFilterRankingMethodOutput values.
// You can construct a concrete instance of `PickTimeSeriesFilterRankingMethodInput` via:
//
//	PickTimeSeriesFilterRankingMethodArgs{...}
type PickTimeSeriesFilterRankingMethodInput interface {
	pulumi.Input

	ToPickTimeSeriesFilterRankingMethodOutput() PickTimeSeriesFilterRankingMethodOutput
	ToPickTimeSeriesFilterRankingMethodOutputWithContext(context.Context) PickTimeSeriesFilterRankingMethodOutput
}

var pickTimeSeriesFilterRankingMethodPtrType = reflect.TypeOf((**PickTimeSeriesFilterRankingMethod)(nil)).Elem()

type PickTimeSeriesFilterRankingMethodPtrInput interface {
	pulumi.Input

	ToPickTimeSeriesFilterRankingMethodPtrOutput() PickTimeSeriesFilterRankingMethodPtrOutput
	ToPickTimeSeriesFilterRankingMethodPtrOutputWithContext(context.Context) PickTimeSeriesFilterRankingMethodPtrOutput
}

type pickTimeSeriesFilterRankingMethodPtr string

func PickTimeSeriesFilterRankingMethodPtr(v string) PickTimeSeriesFilterRankingMethodPtrInput {
	return (*pickTimeSeriesFilterRankingMethodPtr)(&v)
}

func (*pickTimeSeriesFilterRankingMethodPtr) ElementType() reflect.Type {
	return pickTimeSeriesFilterRankingMethodPtrType
}

func (in *pickTimeSeriesFilterRankingMethodPtr) ToPickTimeSeriesFilterRankingMethodPtrOutput() PickTimeSeriesFilterRankingMethodPtrOutput {
	return pulumi.ToOutput(in).(PickTimeSeriesFilterRankingMethodPtrOutput)
}

func (in *pickTimeSeriesFilterRankingMethodPtr) ToPickTimeSeriesFilterRankingMethodPtrOutputWithContext(ctx context.Context) PickTimeSeriesFilterRankingMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PickTimeSeriesFilterRankingMethodPtrOutput)
}

// Required. The type of sparkchart to show in this chartView.
type SparkChartViewSparkChartType string

const (
	// Not allowed in well-formed requests.
	SparkChartViewSparkChartTypeSparkChartTypeUnspecified = SparkChartViewSparkChartType("SPARK_CHART_TYPE_UNSPECIFIED")
	// The sparkline will be rendered as a small line chart.
	SparkChartViewSparkChartTypeSparkLine = SparkChartViewSparkChartType("SPARK_LINE")
	// The sparkbar will be rendered as a small bar chart.
	SparkChartViewSparkChartTypeSparkBar = SparkChartViewSparkChartType("SPARK_BAR")
)

func (SparkChartViewSparkChartType) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkChartViewSparkChartType)(nil)).Elem()
}

func (e SparkChartViewSparkChartType) ToSparkChartViewSparkChartTypeOutput() SparkChartViewSparkChartTypeOutput {
	return pulumi.ToOutput(e).(SparkChartViewSparkChartTypeOutput)
}

func (e SparkChartViewSparkChartType) ToSparkChartViewSparkChartTypeOutputWithContext(ctx context.Context) SparkChartViewSparkChartTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SparkChartViewSparkChartTypeOutput)
}

func (e SparkChartViewSparkChartType) ToSparkChartViewSparkChartTypePtrOutput() SparkChartViewSparkChartTypePtrOutput {
	return e.ToSparkChartViewSparkChartTypePtrOutputWithContext(context.Background())
}

func (e SparkChartViewSparkChartType) ToSparkChartViewSparkChartTypePtrOutputWithContext(ctx context.Context) SparkChartViewSparkChartTypePtrOutput {
	return SparkChartViewSparkChartType(e).ToSparkChartViewSparkChartTypeOutputWithContext(ctx).ToSparkChartViewSparkChartTypePtrOutputWithContext(ctx)
}

func (e SparkChartViewSparkChartType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SparkChartViewSparkChartType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SparkChartViewSparkChartType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SparkChartViewSparkChartType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SparkChartViewSparkChartTypeOutput struct{ *pulumi.OutputState }

func (SparkChartViewSparkChartTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkChartViewSparkChartType)(nil)).Elem()
}

func (o SparkChartViewSparkChartTypeOutput) ToSparkChartViewSparkChartTypeOutput() SparkChartViewSparkChartTypeOutput {
	return o
}

func (o SparkChartViewSparkChartTypeOutput) ToSparkChartViewSparkChartTypeOutputWithContext(ctx context.Context) SparkChartViewSparkChartTypeOutput {
	return o
}

func (o SparkChartViewSparkChartTypeOutput) ToSparkChartViewSparkChartTypePtrOutput() SparkChartViewSparkChartTypePtrOutput {
	return o.ToSparkChartViewSparkChartTypePtrOutputWithContext(context.Background())
}

func (o SparkChartViewSparkChartTypeOutput) ToSparkChartViewSparkChartTypePtrOutputWithContext(ctx context.Context) SparkChartViewSparkChartTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SparkChartViewSparkChartType) *SparkChartViewSparkChartType {
		return &v
	}).(SparkChartViewSparkChartTypePtrOutput)
}

func (o SparkChartViewSparkChartTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SparkChartViewSparkChartTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SparkChartViewSparkChartType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SparkChartViewSparkChartTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SparkChartViewSparkChartTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SparkChartViewSparkChartType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SparkChartViewSparkChartTypePtrOutput struct{ *pulumi.OutputState }

func (SparkChartViewSparkChartTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkChartViewSparkChartType)(nil)).Elem()
}

func (o SparkChartViewSparkChartTypePtrOutput) ToSparkChartViewSparkChartTypePtrOutput() SparkChartViewSparkChartTypePtrOutput {
	return o
}

func (o SparkChartViewSparkChartTypePtrOutput) ToSparkChartViewSparkChartTypePtrOutputWithContext(ctx context.Context) SparkChartViewSparkChartTypePtrOutput {
	return o
}

func (o SparkChartViewSparkChartTypePtrOutput) Elem() SparkChartViewSparkChartTypeOutput {
	return o.ApplyT(func(v *SparkChartViewSparkChartType) SparkChartViewSparkChartType {
		if v != nil {
			return *v
		}
		var ret SparkChartViewSparkChartType
		return ret
	}).(SparkChartViewSparkChartTypeOutput)
}

func (o SparkChartViewSparkChartTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SparkChartViewSparkChartTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SparkChartViewSparkChartType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SparkChartViewSparkChartTypeInput is an input type that accepts SparkChartViewSparkChartTypeArgs and SparkChartViewSparkChartTypeOutput values.
// You can construct a concrete instance of `SparkChartViewSparkChartTypeInput` via:
//
//	SparkChartViewSparkChartTypeArgs{...}
type SparkChartViewSparkChartTypeInput interface {
	pulumi.Input

	ToSparkChartViewSparkChartTypeOutput() SparkChartViewSparkChartTypeOutput
	ToSparkChartViewSparkChartTypeOutputWithContext(context.Context) SparkChartViewSparkChartTypeOutput
}

var sparkChartViewSparkChartTypePtrType = reflect.TypeOf((**SparkChartViewSparkChartType)(nil)).Elem()

type SparkChartViewSparkChartTypePtrInput interface {
	pulumi.Input

	ToSparkChartViewSparkChartTypePtrOutput() SparkChartViewSparkChartTypePtrOutput
	ToSparkChartViewSparkChartTypePtrOutputWithContext(context.Context) SparkChartViewSparkChartTypePtrOutput
}

type sparkChartViewSparkChartTypePtr string

func SparkChartViewSparkChartTypePtr(v string) SparkChartViewSparkChartTypePtrInput {
	return (*sparkChartViewSparkChartTypePtr)(&v)
}

func (*sparkChartViewSparkChartTypePtr) ElementType() reflect.Type {
	return sparkChartViewSparkChartTypePtrType
}

func (in *sparkChartViewSparkChartTypePtr) ToSparkChartViewSparkChartTypePtrOutput() SparkChartViewSparkChartTypePtrOutput {
	return pulumi.ToOutput(in).(SparkChartViewSparkChartTypePtrOutput)
}

func (in *sparkChartViewSparkChartTypePtr) ToSparkChartViewSparkChartTypePtrOutputWithContext(ctx context.Context) SparkChartViewSparkChartTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SparkChartViewSparkChartTypePtrOutput)
}

// rankingMethod is applied to a set of time series, and then the produced value for each individual time series is used to compare a given time series to others. These are methods that cannot be applied stream-by-stream, but rather require the full context of a request to evaluate time series.
type StatisticalTimeSeriesFilterRankingMethod string

const (
	// Not allowed in well-formed requests.
	StatisticalTimeSeriesFilterRankingMethodMethodUnspecified = StatisticalTimeSeriesFilterRankingMethod("METHOD_UNSPECIFIED")
	// Compute the outlier score of each stream.
	StatisticalTimeSeriesFilterRankingMethodMethodClusterOutlier = StatisticalTimeSeriesFilterRankingMethod("METHOD_CLUSTER_OUTLIER")
)

func (StatisticalTimeSeriesFilterRankingMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*StatisticalTimeSeriesFilterRankingMethod)(nil)).Elem()
}

func (e StatisticalTimeSeriesFilterRankingMethod) ToStatisticalTimeSeriesFilterRankingMethodOutput() StatisticalTimeSeriesFilterRankingMethodOutput {
	return pulumi.ToOutput(e).(StatisticalTimeSeriesFilterRankingMethodOutput)
}

func (e StatisticalTimeSeriesFilterRankingMethod) ToStatisticalTimeSeriesFilterRankingMethodOutputWithContext(ctx context.Context) StatisticalTimeSeriesFilterRankingMethodOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StatisticalTimeSeriesFilterRankingMethodOutput)
}

func (e StatisticalTimeSeriesFilterRankingMethod) ToStatisticalTimeSeriesFilterRankingMethodPtrOutput() StatisticalTimeSeriesFilterRankingMethodPtrOutput {
	return e.ToStatisticalTimeSeriesFilterRankingMethodPtrOutputWithContext(context.Background())
}

func (e StatisticalTimeSeriesFilterRankingMethod) ToStatisticalTimeSeriesFilterRankingMethodPtrOutputWithContext(ctx context.Context) StatisticalTimeSeriesFilterRankingMethodPtrOutput {
	return StatisticalTimeSeriesFilterRankingMethod(e).ToStatisticalTimeSeriesFilterRankingMethodOutputWithContext(ctx).ToStatisticalTimeSeriesFilterRankingMethodPtrOutputWithContext(ctx)
}

func (e StatisticalTimeSeriesFilterRankingMethod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StatisticalTimeSeriesFilterRankingMethod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StatisticalTimeSeriesFilterRankingMethod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StatisticalTimeSeriesFilterRankingMethod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StatisticalTimeSeriesFilterRankingMethodOutput struct{ *pulumi.OutputState }

func (StatisticalTimeSeriesFilterRankingMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatisticalTimeSeriesFilterRankingMethod)(nil)).Elem()
}

func (o StatisticalTimeSeriesFilterRankingMethodOutput) ToStatisticalTimeSeriesFilterRankingMethodOutput() StatisticalTimeSeriesFilterRankingMethodOutput {
	return o
}

func (o StatisticalTimeSeriesFilterRankingMethodOutput) ToStatisticalTimeSeriesFilterRankingMethodOutputWithContext(ctx context.Context) StatisticalTimeSeriesFilterRankingMethodOutput {
	return o
}

func (o StatisticalTimeSeriesFilterRankingMethodOutput) ToStatisticalTimeSeriesFilterRankingMethodPtrOutput() StatisticalTimeSeriesFilterRankingMethodPtrOutput {
	return o.ToStatisticalTimeSeriesFilterRankingMethodPtrOutputWithContext(context.Background())
}

func (o StatisticalTimeSeriesFilterRankingMethodOutput) ToStatisticalTimeSeriesFilterRankingMethodPtrOutputWithContext(ctx context.Context) StatisticalTimeSeriesFilterRankingMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatisticalTimeSeriesFilterRankingMethod) *StatisticalTimeSeriesFilterRankingMethod {
		return &v
	}).(StatisticalTimeSeriesFilterRankingMethodPtrOutput)
}

func (o StatisticalTimeSeriesFilterRankingMethodOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StatisticalTimeSeriesFilterRankingMethodOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StatisticalTimeSeriesFilterRankingMethod) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StatisticalTimeSeriesFilterRankingMethodOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StatisticalTimeSeriesFilterRankingMethodOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StatisticalTimeSeriesFilterRankingMethod) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StatisticalTimeSeriesFilterRankingMethodPtrOutput struct{ *pulumi.OutputState }

func (StatisticalTimeSeriesFilterRankingMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatisticalTimeSeriesFilterRankingMethod)(nil)).Elem()
}

func (o StatisticalTimeSeriesFilterRankingMethodPtrOutput) ToStatisticalTimeSeriesFilterRankingMethodPtrOutput() StatisticalTimeSeriesFilterRankingMethodPtrOutput {
	return o
}

func (o StatisticalTimeSeriesFilterRankingMethodPtrOutput) ToStatisticalTimeSeriesFilterRankingMethodPtrOutputWithContext(ctx context.Context) StatisticalTimeSeriesFilterRankingMethodPtrOutput {
	return o
}

func (o StatisticalTimeSeriesFilterRankingMethodPtrOutput) Elem() StatisticalTimeSeriesFilterRankingMethodOutput {
	return o.ApplyT(func(v *StatisticalTimeSeriesFilterRankingMethod) StatisticalTimeSeriesFilterRankingMethod {
		if v != nil {
			return *v
		}
		var ret StatisticalTimeSeriesFilterRankingMethod
		return ret
	}).(StatisticalTimeSeriesFilterRankingMethodOutput)
}

func (o StatisticalTimeSeriesFilterRankingMethodPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StatisticalTimeSeriesFilterRankingMethodPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StatisticalTimeSeriesFilterRankingMethod) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StatisticalTimeSeriesFilterRankingMethodInput is an input type that accepts StatisticalTimeSeriesFilterRankingMethodArgs and StatisticalTimeSeriesFilterRankingMethodOutput values.
// You can construct a concrete instance of `StatisticalTimeSeriesFilterRankingMethodInput` via:
//
//	StatisticalTimeSeriesFilterRankingMethodArgs{...}
type StatisticalTimeSeriesFilterRankingMethodInput interface {
	pulumi.Input

	ToStatisticalTimeSeriesFilterRankingMethodOutput() StatisticalTimeSeriesFilterRankingMethodOutput
	ToStatisticalTimeSeriesFilterRankingMethodOutputWithContext(context.Context) StatisticalTimeSeriesFilterRankingMethodOutput
}

var statisticalTimeSeriesFilterRankingMethodPtrType = reflect.TypeOf((**StatisticalTimeSeriesFilterRankingMethod)(nil)).Elem()

type StatisticalTimeSeriesFilterRankingMethodPtrInput interface {
	pulumi.Input

	ToStatisticalTimeSeriesFilterRankingMethodPtrOutput() StatisticalTimeSeriesFilterRankingMethodPtrOutput
	ToStatisticalTimeSeriesFilterRankingMethodPtrOutputWithContext(context.Context) StatisticalTimeSeriesFilterRankingMethodPtrOutput
}

type statisticalTimeSeriesFilterRankingMethodPtr string

func StatisticalTimeSeriesFilterRankingMethodPtr(v string) StatisticalTimeSeriesFilterRankingMethodPtrInput {
	return (*statisticalTimeSeriesFilterRankingMethodPtr)(&v)
}

func (*statisticalTimeSeriesFilterRankingMethodPtr) ElementType() reflect.Type {
	return statisticalTimeSeriesFilterRankingMethodPtrType
}

func (in *statisticalTimeSeriesFilterRankingMethodPtr) ToStatisticalTimeSeriesFilterRankingMethodPtrOutput() StatisticalTimeSeriesFilterRankingMethodPtrOutput {
	return pulumi.ToOutput(in).(StatisticalTimeSeriesFilterRankingMethodPtrOutput)
}

func (in *statisticalTimeSeriesFilterRankingMethodPtr) ToStatisticalTimeSeriesFilterRankingMethodPtrOutputWithContext(ctx context.Context) StatisticalTimeSeriesFilterRankingMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StatisticalTimeSeriesFilterRankingMethodPtrOutput)
}

// How the text content is formatted.
type TextFormat string

const (
	// Format is unspecified. Defaults to MARKDOWN.
	TextFormatFormatUnspecified = TextFormat("FORMAT_UNSPECIFIED")
	// The text contains Markdown formatting.
	TextFormatMarkdown = TextFormat("MARKDOWN")
	// The text contains no special formatting.
	TextFormatRaw = TextFormat("RAW")
)

func (TextFormat) ElementType() reflect.Type {
	return reflect.TypeOf((*TextFormat)(nil)).Elem()
}

func (e TextFormat) ToTextFormatOutput() TextFormatOutput {
	return pulumi.ToOutput(e).(TextFormatOutput)
}

func (e TextFormat) ToTextFormatOutputWithContext(ctx context.Context) TextFormatOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TextFormatOutput)
}

func (e TextFormat) ToTextFormatPtrOutput() TextFormatPtrOutput {
	return e.ToTextFormatPtrOutputWithContext(context.Background())
}

func (e TextFormat) ToTextFormatPtrOutputWithContext(ctx context.Context) TextFormatPtrOutput {
	return TextFormat(e).ToTextFormatOutputWithContext(ctx).ToTextFormatPtrOutputWithContext(ctx)
}

func (e TextFormat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TextFormat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TextFormat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TextFormat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TextFormatOutput struct{ *pulumi.OutputState }

func (TextFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextFormat)(nil)).Elem()
}

func (o TextFormatOutput) ToTextFormatOutput() TextFormatOutput {
	return o
}

func (o TextFormatOutput) ToTextFormatOutputWithContext(ctx context.Context) TextFormatOutput {
	return o
}

func (o TextFormatOutput) ToTextFormatPtrOutput() TextFormatPtrOutput {
	return o.ToTextFormatPtrOutputWithContext(context.Background())
}

func (o TextFormatOutput) ToTextFormatPtrOutputWithContext(ctx context.Context) TextFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TextFormat) *TextFormat {
		return &v
	}).(TextFormatPtrOutput)
}

func (o TextFormatOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TextFormatOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TextFormat) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TextFormatOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TextFormatOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TextFormat) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TextFormatPtrOutput struct{ *pulumi.OutputState }

func (TextFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TextFormat)(nil)).Elem()
}

func (o TextFormatPtrOutput) ToTextFormatPtrOutput() TextFormatPtrOutput {
	return o
}

func (o TextFormatPtrOutput) ToTextFormatPtrOutputWithContext(ctx context.Context) TextFormatPtrOutput {
	return o
}

func (o TextFormatPtrOutput) Elem() TextFormatOutput {
	return o.ApplyT(func(v *TextFormat) TextFormat {
		if v != nil {
			return *v
		}
		var ret TextFormat
		return ret
	}).(TextFormatOutput)
}

func (o TextFormatPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TextFormatPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TextFormat) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TextFormatInput is an input type that accepts TextFormatArgs and TextFormatOutput values.
// You can construct a concrete instance of `TextFormatInput` via:
//
//	TextFormatArgs{...}
type TextFormatInput interface {
	pulumi.Input

	ToTextFormatOutput() TextFormatOutput
	ToTextFormatOutputWithContext(context.Context) TextFormatOutput
}

var textFormatPtrType = reflect.TypeOf((**TextFormat)(nil)).Elem()

type TextFormatPtrInput interface {
	pulumi.Input

	ToTextFormatPtrOutput() TextFormatPtrOutput
	ToTextFormatPtrOutputWithContext(context.Context) TextFormatPtrOutput
}

type textFormatPtr string

func TextFormatPtr(v string) TextFormatPtrInput {
	return (*textFormatPtr)(&v)
}

func (*textFormatPtr) ElementType() reflect.Type {
	return textFormatPtrType
}

func (in *textFormatPtr) ToTextFormatPtrOutput() TextFormatPtrOutput {
	return pulumi.ToOutput(in).(TextFormatPtrOutput)
}

func (in *textFormatPtr) ToTextFormatPtrOutputWithContext(ctx context.Context) TextFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TextFormatPtrOutput)
}

// The state color for this threshold. Color is not allowed in a XyChart.
type ThresholdColor string

const (
	// Color is unspecified. Not allowed in well-formed requests.
	ThresholdColorColorUnspecified = ThresholdColor("COLOR_UNSPECIFIED")
	// Crossing the threshold is "concerning" behavior.
	ThresholdColorYellow = ThresholdColor("YELLOW")
	// Crossing the threshold is "emergency" behavior.
	ThresholdColorRed = ThresholdColor("RED")
)

func (ThresholdColor) ElementType() reflect.Type {
	return reflect.TypeOf((*ThresholdColor)(nil)).Elem()
}

func (e ThresholdColor) ToThresholdColorOutput() ThresholdColorOutput {
	return pulumi.ToOutput(e).(ThresholdColorOutput)
}

func (e ThresholdColor) ToThresholdColorOutputWithContext(ctx context.Context) ThresholdColorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ThresholdColorOutput)
}

func (e ThresholdColor) ToThresholdColorPtrOutput() ThresholdColorPtrOutput {
	return e.ToThresholdColorPtrOutputWithContext(context.Background())
}

func (e ThresholdColor) ToThresholdColorPtrOutputWithContext(ctx context.Context) ThresholdColorPtrOutput {
	return ThresholdColor(e).ToThresholdColorOutputWithContext(ctx).ToThresholdColorPtrOutputWithContext(ctx)
}

func (e ThresholdColor) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ThresholdColor) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ThresholdColor) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ThresholdColor) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ThresholdColorOutput struct{ *pulumi.OutputState }

func (ThresholdColorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThresholdColor)(nil)).Elem()
}

func (o ThresholdColorOutput) ToThresholdColorOutput() ThresholdColorOutput {
	return o
}

func (o ThresholdColorOutput) ToThresholdColorOutputWithContext(ctx context.Context) ThresholdColorOutput {
	return o
}

func (o ThresholdColorOutput) ToThresholdColorPtrOutput() ThresholdColorPtrOutput {
	return o.ToThresholdColorPtrOutputWithContext(context.Background())
}

func (o ThresholdColorOutput) ToThresholdColorPtrOutputWithContext(ctx context.Context) ThresholdColorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThresholdColor) *ThresholdColor {
		return &v
	}).(ThresholdColorPtrOutput)
}

func (o ThresholdColorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ThresholdColorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ThresholdColor) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ThresholdColorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ThresholdColorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ThresholdColor) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ThresholdColorPtrOutput struct{ *pulumi.OutputState }

func (ThresholdColorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThresholdColor)(nil)).Elem()
}

func (o ThresholdColorPtrOutput) ToThresholdColorPtrOutput() ThresholdColorPtrOutput {
	return o
}

func (o ThresholdColorPtrOutput) ToThresholdColorPtrOutputWithContext(ctx context.Context) ThresholdColorPtrOutput {
	return o
}

func (o ThresholdColorPtrOutput) Elem() ThresholdColorOutput {
	return o.ApplyT(func(v *ThresholdColor) ThresholdColor {
		if v != nil {
			return *v
		}
		var ret ThresholdColor
		return ret
	}).(ThresholdColorOutput)
}

func (o ThresholdColorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ThresholdColorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ThresholdColor) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ThresholdColorInput is an input type that accepts ThresholdColorArgs and ThresholdColorOutput values.
// You can construct a concrete instance of `ThresholdColorInput` via:
//
//	ThresholdColorArgs{...}
type ThresholdColorInput interface {
	pulumi.Input

	ToThresholdColorOutput() ThresholdColorOutput
	ToThresholdColorOutputWithContext(context.Context) ThresholdColorOutput
}

var thresholdColorPtrType = reflect.TypeOf((**ThresholdColor)(nil)).Elem()

type ThresholdColorPtrInput interface {
	pulumi.Input

	ToThresholdColorPtrOutput() ThresholdColorPtrOutput
	ToThresholdColorPtrOutputWithContext(context.Context) ThresholdColorPtrOutput
}

type thresholdColorPtr string

func ThresholdColorPtr(v string) ThresholdColorPtrInput {
	return (*thresholdColorPtr)(&v)
}

func (*thresholdColorPtr) ElementType() reflect.Type {
	return thresholdColorPtrType
}

func (in *thresholdColorPtr) ToThresholdColorPtrOutput() ThresholdColorPtrOutput {
	return pulumi.ToOutput(in).(ThresholdColorPtrOutput)
}

func (in *thresholdColorPtr) ToThresholdColorPtrOutputWithContext(ctx context.Context) ThresholdColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ThresholdColorPtrOutput)
}

// The direction for the current threshold. Direction is not allowed in a XyChart.
type ThresholdDirection string

const (
	// Not allowed in well-formed requests.
	ThresholdDirectionDirectionUnspecified = ThresholdDirection("DIRECTION_UNSPECIFIED")
	// The threshold will be considered crossed if the actual value is above the threshold value.
	ThresholdDirectionAbove = ThresholdDirection("ABOVE")
	// The threshold will be considered crossed if the actual value is below the threshold value.
	ThresholdDirectionBelow = ThresholdDirection("BELOW")
)

func (ThresholdDirection) ElementType() reflect.Type {
	return reflect.TypeOf((*ThresholdDirection)(nil)).Elem()
}

func (e ThresholdDirection) ToThresholdDirectionOutput() ThresholdDirectionOutput {
	return pulumi.ToOutput(e).(ThresholdDirectionOutput)
}

func (e ThresholdDirection) ToThresholdDirectionOutputWithContext(ctx context.Context) ThresholdDirectionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ThresholdDirectionOutput)
}

func (e ThresholdDirection) ToThresholdDirectionPtrOutput() ThresholdDirectionPtrOutput {
	return e.ToThresholdDirectionPtrOutputWithContext(context.Background())
}

func (e ThresholdDirection) ToThresholdDirectionPtrOutputWithContext(ctx context.Context) ThresholdDirectionPtrOutput {
	return ThresholdDirection(e).ToThresholdDirectionOutputWithContext(ctx).ToThresholdDirectionPtrOutputWithContext(ctx)
}

func (e ThresholdDirection) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ThresholdDirection) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ThresholdDirection) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ThresholdDirection) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ThresholdDirectionOutput struct{ *pulumi.OutputState }

func (ThresholdDirectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThresholdDirection)(nil)).Elem()
}

func (o ThresholdDirectionOutput) ToThresholdDirectionOutput() ThresholdDirectionOutput {
	return o
}

func (o ThresholdDirectionOutput) ToThresholdDirectionOutputWithContext(ctx context.Context) ThresholdDirectionOutput {
	return o
}

func (o ThresholdDirectionOutput) ToThresholdDirectionPtrOutput() ThresholdDirectionPtrOutput {
	return o.ToThresholdDirectionPtrOutputWithContext(context.Background())
}

func (o ThresholdDirectionOutput) ToThresholdDirectionPtrOutputWithContext(ctx context.Context) ThresholdDirectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThresholdDirection) *ThresholdDirection {
		return &v
	}).(ThresholdDirectionPtrOutput)
}

func (o ThresholdDirectionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ThresholdDirectionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ThresholdDirection) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ThresholdDirectionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ThresholdDirectionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ThresholdDirection) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ThresholdDirectionPtrOutput struct{ *pulumi.OutputState }

func (ThresholdDirectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThresholdDirection)(nil)).Elem()
}

func (o ThresholdDirectionPtrOutput) ToThresholdDirectionPtrOutput() ThresholdDirectionPtrOutput {
	return o
}

func (o ThresholdDirectionPtrOutput) ToThresholdDirectionPtrOutputWithContext(ctx context.Context) ThresholdDirectionPtrOutput {
	return o
}

func (o ThresholdDirectionPtrOutput) Elem() ThresholdDirectionOutput {
	return o.ApplyT(func(v *ThresholdDirection) ThresholdDirection {
		if v != nil {
			return *v
		}
		var ret ThresholdDirection
		return ret
	}).(ThresholdDirectionOutput)
}

func (o ThresholdDirectionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ThresholdDirectionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ThresholdDirection) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ThresholdDirectionInput is an input type that accepts ThresholdDirectionArgs and ThresholdDirectionOutput values.
// You can construct a concrete instance of `ThresholdDirectionInput` via:
//
//	ThresholdDirectionArgs{...}
type ThresholdDirectionInput interface {
	pulumi.Input

	ToThresholdDirectionOutput() ThresholdDirectionOutput
	ToThresholdDirectionOutputWithContext(context.Context) ThresholdDirectionOutput
}

var thresholdDirectionPtrType = reflect.TypeOf((**ThresholdDirection)(nil)).Elem()

type ThresholdDirectionPtrInput interface {
	pulumi.Input

	ToThresholdDirectionPtrOutput() ThresholdDirectionPtrOutput
	ToThresholdDirectionPtrOutputWithContext(context.Context) ThresholdDirectionPtrOutput
}

type thresholdDirectionPtr string

func ThresholdDirectionPtr(v string) ThresholdDirectionPtrInput {
	return (*thresholdDirectionPtr)(&v)
}

func (*thresholdDirectionPtr) ElementType() reflect.Type {
	return thresholdDirectionPtrType
}

func (in *thresholdDirectionPtr) ToThresholdDirectionPtrOutput() ThresholdDirectionPtrOutput {
	return pulumi.ToOutput(in).(ThresholdDirectionPtrOutput)
}

func (in *thresholdDirectionPtr) ToThresholdDirectionPtrOutputWithContext(ctx context.Context) ThresholdDirectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ThresholdDirectionPtrOutput)
}

// The target axis to use for plotting the threshold. Target axis is not allowed in a Scorecard.
type ThresholdTargetAxis string

const (
	// The target axis was not specified. Defaults to Y1.
	ThresholdTargetAxisTargetAxisUnspecified = ThresholdTargetAxis("TARGET_AXIS_UNSPECIFIED")
	// The y_axis (the right axis of chart).
	ThresholdTargetAxisY1 = ThresholdTargetAxis("Y1")
	// The y2_axis (the left axis of chart).
	ThresholdTargetAxisY2 = ThresholdTargetAxis("Y2")
)

func (ThresholdTargetAxis) ElementType() reflect.Type {
	return reflect.TypeOf((*ThresholdTargetAxis)(nil)).Elem()
}

func (e ThresholdTargetAxis) ToThresholdTargetAxisOutput() ThresholdTargetAxisOutput {
	return pulumi.ToOutput(e).(ThresholdTargetAxisOutput)
}

func (e ThresholdTargetAxis) ToThresholdTargetAxisOutputWithContext(ctx context.Context) ThresholdTargetAxisOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ThresholdTargetAxisOutput)
}

func (e ThresholdTargetAxis) ToThresholdTargetAxisPtrOutput() ThresholdTargetAxisPtrOutput {
	return e.ToThresholdTargetAxisPtrOutputWithContext(context.Background())
}

func (e ThresholdTargetAxis) ToThresholdTargetAxisPtrOutputWithContext(ctx context.Context) ThresholdTargetAxisPtrOutput {
	return ThresholdTargetAxis(e).ToThresholdTargetAxisOutputWithContext(ctx).ToThresholdTargetAxisPtrOutputWithContext(ctx)
}

func (e ThresholdTargetAxis) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ThresholdTargetAxis) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ThresholdTargetAxis) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ThresholdTargetAxis) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ThresholdTargetAxisOutput struct{ *pulumi.OutputState }

func (ThresholdTargetAxisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThresholdTargetAxis)(nil)).Elem()
}

func (o ThresholdTargetAxisOutput) ToThresholdTargetAxisOutput() ThresholdTargetAxisOutput {
	return o
}

func (o ThresholdTargetAxisOutput) ToThresholdTargetAxisOutputWithContext(ctx context.Context) ThresholdTargetAxisOutput {
	return o
}

func (o ThresholdTargetAxisOutput) ToThresholdTargetAxisPtrOutput() ThresholdTargetAxisPtrOutput {
	return o.ToThresholdTargetAxisPtrOutputWithContext(context.Background())
}

func (o ThresholdTargetAxisOutput) ToThresholdTargetAxisPtrOutputWithContext(ctx context.Context) ThresholdTargetAxisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThresholdTargetAxis) *ThresholdTargetAxis {
		return &v
	}).(ThresholdTargetAxisPtrOutput)
}

func (o ThresholdTargetAxisOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ThresholdTargetAxisOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ThresholdTargetAxis) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ThresholdTargetAxisOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ThresholdTargetAxisOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ThresholdTargetAxis) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ThresholdTargetAxisPtrOutput struct{ *pulumi.OutputState }

func (ThresholdTargetAxisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThresholdTargetAxis)(nil)).Elem()
}

func (o ThresholdTargetAxisPtrOutput) ToThresholdTargetAxisPtrOutput() ThresholdTargetAxisPtrOutput {
	return o
}

func (o ThresholdTargetAxisPtrOutput) ToThresholdTargetAxisPtrOutputWithContext(ctx context.Context) ThresholdTargetAxisPtrOutput {
	return o
}

func (o ThresholdTargetAxisPtrOutput) Elem() ThresholdTargetAxisOutput {
	return o.ApplyT(func(v *ThresholdTargetAxis) ThresholdTargetAxis {
		if v != nil {
			return *v
		}
		var ret ThresholdTargetAxis
		return ret
	}).(ThresholdTargetAxisOutput)
}

func (o ThresholdTargetAxisPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ThresholdTargetAxisPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ThresholdTargetAxis) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ThresholdTargetAxisInput is an input type that accepts ThresholdTargetAxisArgs and ThresholdTargetAxisOutput values.
// You can construct a concrete instance of `ThresholdTargetAxisInput` via:
//
//	ThresholdTargetAxisArgs{...}
type ThresholdTargetAxisInput interface {
	pulumi.Input

	ToThresholdTargetAxisOutput() ThresholdTargetAxisOutput
	ToThresholdTargetAxisOutputWithContext(context.Context) ThresholdTargetAxisOutput
}

var thresholdTargetAxisPtrType = reflect.TypeOf((**ThresholdTargetAxis)(nil)).Elem()

type ThresholdTargetAxisPtrInput interface {
	pulumi.Input

	ToThresholdTargetAxisPtrOutput() ThresholdTargetAxisPtrOutput
	ToThresholdTargetAxisPtrOutputWithContext(context.Context) ThresholdTargetAxisPtrOutput
}

type thresholdTargetAxisPtr string

func ThresholdTargetAxisPtr(v string) ThresholdTargetAxisPtrInput {
	return (*thresholdTargetAxisPtr)(&v)
}

func (*thresholdTargetAxisPtr) ElementType() reflect.Type {
	return thresholdTargetAxisPtrType
}

func (in *thresholdTargetAxisPtr) ToThresholdTargetAxisPtrOutput() ThresholdTargetAxisPtrOutput {
	return pulumi.ToOutput(in).(ThresholdTargetAxisPtrOutput)
}

func (in *thresholdTargetAxisPtr) ToThresholdTargetAxisPtrOutputWithContext(ctx context.Context) ThresholdTargetAxisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ThresholdTargetAxisPtrOutput)
}

// Optional. Store rendering strategy
type TimeSeriesTableMetricVisualization string

const (
	// Unspecified state
	TimeSeriesTableMetricVisualizationMetricVisualizationUnspecified = TimeSeriesTableMetricVisualization("METRIC_VISUALIZATION_UNSPECIFIED")
	// Default text rendering
	TimeSeriesTableMetricVisualizationNumber = TimeSeriesTableMetricVisualization("NUMBER")
	// Horizontal bar rendering
	TimeSeriesTableMetricVisualizationBar = TimeSeriesTableMetricVisualization("BAR")
)

func (TimeSeriesTableMetricVisualization) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeSeriesTableMetricVisualization)(nil)).Elem()
}

func (e TimeSeriesTableMetricVisualization) ToTimeSeriesTableMetricVisualizationOutput() TimeSeriesTableMetricVisualizationOutput {
	return pulumi.ToOutput(e).(TimeSeriesTableMetricVisualizationOutput)
}

func (e TimeSeriesTableMetricVisualization) ToTimeSeriesTableMetricVisualizationOutputWithContext(ctx context.Context) TimeSeriesTableMetricVisualizationOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TimeSeriesTableMetricVisualizationOutput)
}

func (e TimeSeriesTableMetricVisualization) ToTimeSeriesTableMetricVisualizationPtrOutput() TimeSeriesTableMetricVisualizationPtrOutput {
	return e.ToTimeSeriesTableMetricVisualizationPtrOutputWithContext(context.Background())
}

func (e TimeSeriesTableMetricVisualization) ToTimeSeriesTableMetricVisualizationPtrOutputWithContext(ctx context.Context) TimeSeriesTableMetricVisualizationPtrOutput {
	return TimeSeriesTableMetricVisualization(e).ToTimeSeriesTableMetricVisualizationOutputWithContext(ctx).ToTimeSeriesTableMetricVisualizationPtrOutputWithContext(ctx)
}

func (e TimeSeriesTableMetricVisualization) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TimeSeriesTableMetricVisualization) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TimeSeriesTableMetricVisualization) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TimeSeriesTableMetricVisualization) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TimeSeriesTableMetricVisualizationOutput struct{ *pulumi.OutputState }

func (TimeSeriesTableMetricVisualizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeSeriesTableMetricVisualization)(nil)).Elem()
}

func (o TimeSeriesTableMetricVisualizationOutput) ToTimeSeriesTableMetricVisualizationOutput() TimeSeriesTableMetricVisualizationOutput {
	return o
}

func (o TimeSeriesTableMetricVisualizationOutput) ToTimeSeriesTableMetricVisualizationOutputWithContext(ctx context.Context) TimeSeriesTableMetricVisualizationOutput {
	return o
}

func (o TimeSeriesTableMetricVisualizationOutput) ToTimeSeriesTableMetricVisualizationPtrOutput() TimeSeriesTableMetricVisualizationPtrOutput {
	return o.ToTimeSeriesTableMetricVisualizationPtrOutputWithContext(context.Background())
}

func (o TimeSeriesTableMetricVisualizationOutput) ToTimeSeriesTableMetricVisualizationPtrOutputWithContext(ctx context.Context) TimeSeriesTableMetricVisualizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TimeSeriesTableMetricVisualization) *TimeSeriesTableMetricVisualization {
		return &v
	}).(TimeSeriesTableMetricVisualizationPtrOutput)
}

func (o TimeSeriesTableMetricVisualizationOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TimeSeriesTableMetricVisualizationOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TimeSeriesTableMetricVisualization) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TimeSeriesTableMetricVisualizationOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TimeSeriesTableMetricVisualizationOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TimeSeriesTableMetricVisualization) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TimeSeriesTableMetricVisualizationPtrOutput struct{ *pulumi.OutputState }

func (TimeSeriesTableMetricVisualizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeSeriesTableMetricVisualization)(nil)).Elem()
}

func (o TimeSeriesTableMetricVisualizationPtrOutput) ToTimeSeriesTableMetricVisualizationPtrOutput() TimeSeriesTableMetricVisualizationPtrOutput {
	return o
}

func (o TimeSeriesTableMetricVisualizationPtrOutput) ToTimeSeriesTableMetricVisualizationPtrOutputWithContext(ctx context.Context) TimeSeriesTableMetricVisualizationPtrOutput {
	return o
}

func (o TimeSeriesTableMetricVisualizationPtrOutput) Elem() TimeSeriesTableMetricVisualizationOutput {
	return o.ApplyT(func(v *TimeSeriesTableMetricVisualization) TimeSeriesTableMetricVisualization {
		if v != nil {
			return *v
		}
		var ret TimeSeriesTableMetricVisualization
		return ret
	}).(TimeSeriesTableMetricVisualizationOutput)
}

func (o TimeSeriesTableMetricVisualizationPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TimeSeriesTableMetricVisualizationPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TimeSeriesTableMetricVisualization) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TimeSeriesTableMetricVisualizationInput is an input type that accepts TimeSeriesTableMetricVisualizationArgs and TimeSeriesTableMetricVisualizationOutput values.
// You can construct a concrete instance of `TimeSeriesTableMetricVisualizationInput` via:
//
//	TimeSeriesTableMetricVisualizationArgs{...}
type TimeSeriesTableMetricVisualizationInput interface {
	pulumi.Input

	ToTimeSeriesTableMetricVisualizationOutput() TimeSeriesTableMetricVisualizationOutput
	ToTimeSeriesTableMetricVisualizationOutputWithContext(context.Context) TimeSeriesTableMetricVisualizationOutput
}

var timeSeriesTableMetricVisualizationPtrType = reflect.TypeOf((**TimeSeriesTableMetricVisualization)(nil)).Elem()

type TimeSeriesTableMetricVisualizationPtrInput interface {
	pulumi.Input

	ToTimeSeriesTableMetricVisualizationPtrOutput() TimeSeriesTableMetricVisualizationPtrOutput
	ToTimeSeriesTableMetricVisualizationPtrOutputWithContext(context.Context) TimeSeriesTableMetricVisualizationPtrOutput
}

type timeSeriesTableMetricVisualizationPtr string

func TimeSeriesTableMetricVisualizationPtr(v string) TimeSeriesTableMetricVisualizationPtrInput {
	return (*timeSeriesTableMetricVisualizationPtr)(&v)
}

func (*timeSeriesTableMetricVisualizationPtr) ElementType() reflect.Type {
	return timeSeriesTableMetricVisualizationPtrType
}

func (in *timeSeriesTableMetricVisualizationPtr) ToTimeSeriesTableMetricVisualizationPtrOutput() TimeSeriesTableMetricVisualizationPtrOutput {
	return pulumi.ToOutput(in).(TimeSeriesTableMetricVisualizationPtrOutput)
}

func (in *timeSeriesTableMetricVisualizationPtr) ToTimeSeriesTableMetricVisualizationPtrOutputWithContext(ctx context.Context) TimeSeriesTableMetricVisualizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TimeSeriesTableMetricVisualizationPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AggregationCrossSeriesReducerInput)(nil)).Elem(), AggregationCrossSeriesReducer("REDUCE_NONE"))
	pulumi.RegisterInputType(reflect.TypeOf((*AggregationCrossSeriesReducerPtrInput)(nil)).Elem(), AggregationCrossSeriesReducer("REDUCE_NONE"))
	pulumi.RegisterInputType(reflect.TypeOf((*AggregationPerSeriesAlignerInput)(nil)).Elem(), AggregationPerSeriesAligner("ALIGN_NONE"))
	pulumi.RegisterInputType(reflect.TypeOf((*AggregationPerSeriesAlignerPtrInput)(nil)).Elem(), AggregationPerSeriesAligner("ALIGN_NONE"))
	pulumi.RegisterInputType(reflect.TypeOf((*AxisScaleInput)(nil)).Elem(), AxisScale("SCALE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AxisScalePtrInput)(nil)).Elem(), AxisScale("SCALE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ChartOptionsModeInput)(nil)).Elem(), ChartOptionsMode("MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ChartOptionsModePtrInput)(nil)).Elem(), ChartOptionsMode("MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardFilterFilterTypeInput)(nil)).Elem(), DashboardFilterFilterType("FILTER_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardFilterFilterTypePtrInput)(nil)).Elem(), DashboardFilterFilterType("FILTER_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPlotTypeInput)(nil)).Elem(), DataSetPlotType("PLOT_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetPlotTypePtrInput)(nil)).Elem(), DataSetPlotType("PLOT_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetTargetAxisInput)(nil)).Elem(), DataSetTargetAxis("TARGET_AXIS_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DataSetTargetAxisPtrInput)(nil)).Elem(), DataSetTargetAxis("TARGET_AXIS_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PickTimeSeriesFilterDirectionInput)(nil)).Elem(), PickTimeSeriesFilterDirection("DIRECTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PickTimeSeriesFilterDirectionPtrInput)(nil)).Elem(), PickTimeSeriesFilterDirection("DIRECTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PickTimeSeriesFilterRankingMethodInput)(nil)).Elem(), PickTimeSeriesFilterRankingMethod("METHOD_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PickTimeSeriesFilterRankingMethodPtrInput)(nil)).Elem(), PickTimeSeriesFilterRankingMethod("METHOD_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*SparkChartViewSparkChartTypeInput)(nil)).Elem(), SparkChartViewSparkChartType("SPARK_CHART_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*SparkChartViewSparkChartTypePtrInput)(nil)).Elem(), SparkChartViewSparkChartType("SPARK_CHART_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*StatisticalTimeSeriesFilterRankingMethodInput)(nil)).Elem(), StatisticalTimeSeriesFilterRankingMethod("METHOD_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*StatisticalTimeSeriesFilterRankingMethodPtrInput)(nil)).Elem(), StatisticalTimeSeriesFilterRankingMethod("METHOD_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*TextFormatInput)(nil)).Elem(), TextFormat("FORMAT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*TextFormatPtrInput)(nil)).Elem(), TextFormat("FORMAT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ThresholdColorInput)(nil)).Elem(), ThresholdColor("COLOR_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ThresholdColorPtrInput)(nil)).Elem(), ThresholdColor("COLOR_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ThresholdDirectionInput)(nil)).Elem(), ThresholdDirection("DIRECTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ThresholdDirectionPtrInput)(nil)).Elem(), ThresholdDirection("DIRECTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ThresholdTargetAxisInput)(nil)).Elem(), ThresholdTargetAxis("TARGET_AXIS_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ThresholdTargetAxisPtrInput)(nil)).Elem(), ThresholdTargetAxis("TARGET_AXIS_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*TimeSeriesTableMetricVisualizationInput)(nil)).Elem(), TimeSeriesTableMetricVisualization("METRIC_VISUALIZATION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*TimeSeriesTableMetricVisualizationPtrInput)(nil)).Elem(), TimeSeriesTableMetricVisualization("METRIC_VISUALIZATION_UNSPECIFIED"))
	pulumi.RegisterOutputType(AggregationCrossSeriesReducerOutput{})
	pulumi.RegisterOutputType(AggregationCrossSeriesReducerPtrOutput{})
	pulumi.RegisterOutputType(AggregationPerSeriesAlignerOutput{})
	pulumi.RegisterOutputType(AggregationPerSeriesAlignerPtrOutput{})
	pulumi.RegisterOutputType(AxisScaleOutput{})
	pulumi.RegisterOutputType(AxisScalePtrOutput{})
	pulumi.RegisterOutputType(ChartOptionsModeOutput{})
	pulumi.RegisterOutputType(ChartOptionsModePtrOutput{})
	pulumi.RegisterOutputType(DashboardFilterFilterTypeOutput{})
	pulumi.RegisterOutputType(DashboardFilterFilterTypePtrOutput{})
	pulumi.RegisterOutputType(DataSetPlotTypeOutput{})
	pulumi.RegisterOutputType(DataSetPlotTypePtrOutput{})
	pulumi.RegisterOutputType(DataSetTargetAxisOutput{})
	pulumi.RegisterOutputType(DataSetTargetAxisPtrOutput{})
	pulumi.RegisterOutputType(PickTimeSeriesFilterDirectionOutput{})
	pulumi.RegisterOutputType(PickTimeSeriesFilterDirectionPtrOutput{})
	pulumi.RegisterOutputType(PickTimeSeriesFilterRankingMethodOutput{})
	pulumi.RegisterOutputType(PickTimeSeriesFilterRankingMethodPtrOutput{})
	pulumi.RegisterOutputType(SparkChartViewSparkChartTypeOutput{})
	pulumi.RegisterOutputType(SparkChartViewSparkChartTypePtrOutput{})
	pulumi.RegisterOutputType(StatisticalTimeSeriesFilterRankingMethodOutput{})
	pulumi.RegisterOutputType(StatisticalTimeSeriesFilterRankingMethodPtrOutput{})
	pulumi.RegisterOutputType(TextFormatOutput{})
	pulumi.RegisterOutputType(TextFormatPtrOutput{})
	pulumi.RegisterOutputType(ThresholdColorOutput{})
	pulumi.RegisterOutputType(ThresholdColorPtrOutput{})
	pulumi.RegisterOutputType(ThresholdDirectionOutput{})
	pulumi.RegisterOutputType(ThresholdDirectionPtrOutput{})
	pulumi.RegisterOutputType(ThresholdTargetAxisOutput{})
	pulumi.RegisterOutputType(ThresholdTargetAxisPtrOutput{})
	pulumi.RegisterOutputType(TimeSeriesTableMetricVisualizationOutput{})
	pulumi.RegisterOutputType(TimeSeriesTableMetricVisualizationPtrOutput{})
}
