// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.Not all reducer operations can be applied to all time series. The valid choices depend on the metric_kind and the value_type of the original time series. Reduction can yield a time series with a different metric_kind or value_type than the input time series.Time series data must first be aligned (see per_series_aligner) in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified, and must not be ALIGN_NONE. An alignment_period must also be specified; otherwise, an error is returned.
type AggregationCrossSeriesReducer string

const (
	// No cross-time series reduction. The output of the Aligner is returned.
	AggregationCrossSeriesReducerReduceNone = AggregationCrossSeriesReducer("REDUCE_NONE")
	// Reduce by computing the mean value across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics with numeric or distribution values. The value_type of the output is DOUBLE.
	AggregationCrossSeriesReducerReduceMean = AggregationCrossSeriesReducer("REDUCE_MEAN")
	// Reduce by computing the minimum value across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics with numeric values. The value_type of the output is the same as the value_type of the input.
	AggregationCrossSeriesReducerReduceMin = AggregationCrossSeriesReducer("REDUCE_MIN")
	// Reduce by computing the maximum value across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics with numeric values. The value_type of the output is the same as the value_type of the input.
	AggregationCrossSeriesReducerReduceMax = AggregationCrossSeriesReducer("REDUCE_MAX")
	// Reduce by computing the sum across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics with numeric and distribution values. The value_type of the output is the same as the value_type of the input.
	AggregationCrossSeriesReducerReduceSum = AggregationCrossSeriesReducer("REDUCE_SUM")
	// Reduce by computing the standard deviation across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics with numeric or distribution values. The value_type of the output is DOUBLE.
	AggregationCrossSeriesReducerReduceStddev = AggregationCrossSeriesReducer("REDUCE_STDDEV")
	// Reduce by computing the number of data points across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics of numeric, Boolean, distribution, and string value_type. The value_type of the output is INT64.
	AggregationCrossSeriesReducerReduceCount = AggregationCrossSeriesReducer("REDUCE_COUNT")
	// Reduce by computing the number of True-valued data points across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics of Boolean value_type. The value_type of the output is INT64.
	AggregationCrossSeriesReducerReduceCountTrue = AggregationCrossSeriesReducer("REDUCE_COUNT_TRUE")
	// Reduce by computing the number of False-valued data points across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics of Boolean value_type. The value_type of the output is INT64.
	AggregationCrossSeriesReducerReduceCountFalse = AggregationCrossSeriesReducer("REDUCE_COUNT_FALSE")
	// Reduce by computing the ratio of the number of True-valued data points to the total number of data points for each alignment period. This reducer is valid for DELTA and GAUGE metrics of Boolean value_type. The output value is in the range 0.0, 1.0 and has value_type DOUBLE.
	AggregationCrossSeriesReducerReduceFractionTrue = AggregationCrossSeriesReducer("REDUCE_FRACTION_TRUE")
	// Reduce by computing the 99th percentile (https://en.wikipedia.org/wiki/Percentile) of data points across time series for each alignment period. This reducer is valid for GAUGE and DELTA metrics of numeric and distribution type. The value of the output is DOUBLE.
	AggregationCrossSeriesReducerReducePercentile99 = AggregationCrossSeriesReducer("REDUCE_PERCENTILE_99")
	// Reduce by computing the 95th percentile (https://en.wikipedia.org/wiki/Percentile) of data points across time series for each alignment period. This reducer is valid for GAUGE and DELTA metrics of numeric and distribution type. The value of the output is DOUBLE.
	AggregationCrossSeriesReducerReducePercentile95 = AggregationCrossSeriesReducer("REDUCE_PERCENTILE_95")
	// Reduce by computing the 50th percentile (https://en.wikipedia.org/wiki/Percentile) of data points across time series for each alignment period. This reducer is valid for GAUGE and DELTA metrics of numeric and distribution type. The value of the output is DOUBLE.
	AggregationCrossSeriesReducerReducePercentile50 = AggregationCrossSeriesReducer("REDUCE_PERCENTILE_50")
	// Reduce by computing the 5th percentile (https://en.wikipedia.org/wiki/Percentile) of data points across time series for each alignment period. This reducer is valid for GAUGE and DELTA metrics of numeric and distribution type. The value of the output is DOUBLE.
	AggregationCrossSeriesReducerReducePercentile05 = AggregationCrossSeriesReducer("REDUCE_PERCENTILE_05")
)

func (AggregationCrossSeriesReducer) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationCrossSeriesReducer)(nil)).Elem()
}

func (e AggregationCrossSeriesReducer) ToAggregationCrossSeriesReducerOutput() AggregationCrossSeriesReducerOutput {
	return pulumi.ToOutput(e).(AggregationCrossSeriesReducerOutput)
}

func (e AggregationCrossSeriesReducer) ToAggregationCrossSeriesReducerOutputWithContext(ctx context.Context) AggregationCrossSeriesReducerOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AggregationCrossSeriesReducerOutput)
}

func (e AggregationCrossSeriesReducer) ToAggregationCrossSeriesReducerPtrOutput() AggregationCrossSeriesReducerPtrOutput {
	return e.ToAggregationCrossSeriesReducerPtrOutputWithContext(context.Background())
}

func (e AggregationCrossSeriesReducer) ToAggregationCrossSeriesReducerPtrOutputWithContext(ctx context.Context) AggregationCrossSeriesReducerPtrOutput {
	return AggregationCrossSeriesReducer(e).ToAggregationCrossSeriesReducerOutputWithContext(ctx).ToAggregationCrossSeriesReducerPtrOutputWithContext(ctx)
}

func (e AggregationCrossSeriesReducer) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AggregationCrossSeriesReducer) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AggregationCrossSeriesReducer) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AggregationCrossSeriesReducer) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AggregationCrossSeriesReducerOutput struct{ *pulumi.OutputState }

func (AggregationCrossSeriesReducerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationCrossSeriesReducer)(nil)).Elem()
}

func (o AggregationCrossSeriesReducerOutput) ToAggregationCrossSeriesReducerOutput() AggregationCrossSeriesReducerOutput {
	return o
}

func (o AggregationCrossSeriesReducerOutput) ToAggregationCrossSeriesReducerOutputWithContext(ctx context.Context) AggregationCrossSeriesReducerOutput {
	return o
}

func (o AggregationCrossSeriesReducerOutput) ToAggregationCrossSeriesReducerPtrOutput() AggregationCrossSeriesReducerPtrOutput {
	return o.ToAggregationCrossSeriesReducerPtrOutputWithContext(context.Background())
}

func (o AggregationCrossSeriesReducerOutput) ToAggregationCrossSeriesReducerPtrOutputWithContext(ctx context.Context) AggregationCrossSeriesReducerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AggregationCrossSeriesReducer) *AggregationCrossSeriesReducer {
		return &v
	}).(AggregationCrossSeriesReducerPtrOutput)
}

func (o AggregationCrossSeriesReducerOutput) ToOutput(ctx context.Context) pulumix.Output[AggregationCrossSeriesReducer] {
	return pulumix.Output[AggregationCrossSeriesReducer]{
		OutputState: o.OutputState,
	}
}

func (o AggregationCrossSeriesReducerOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AggregationCrossSeriesReducerOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AggregationCrossSeriesReducer) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AggregationCrossSeriesReducerOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AggregationCrossSeriesReducerOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AggregationCrossSeriesReducer) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AggregationCrossSeriesReducerPtrOutput struct{ *pulumi.OutputState }

func (AggregationCrossSeriesReducerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregationCrossSeriesReducer)(nil)).Elem()
}

func (o AggregationCrossSeriesReducerPtrOutput) ToAggregationCrossSeriesReducerPtrOutput() AggregationCrossSeriesReducerPtrOutput {
	return o
}

func (o AggregationCrossSeriesReducerPtrOutput) ToAggregationCrossSeriesReducerPtrOutputWithContext(ctx context.Context) AggregationCrossSeriesReducerPtrOutput {
	return o
}

func (o AggregationCrossSeriesReducerPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AggregationCrossSeriesReducer] {
	return pulumix.Output[*AggregationCrossSeriesReducer]{
		OutputState: o.OutputState,
	}
}

func (o AggregationCrossSeriesReducerPtrOutput) Elem() AggregationCrossSeriesReducerOutput {
	return o.ApplyT(func(v *AggregationCrossSeriesReducer) AggregationCrossSeriesReducer {
		if v != nil {
			return *v
		}
		var ret AggregationCrossSeriesReducer
		return ret
	}).(AggregationCrossSeriesReducerOutput)
}

func (o AggregationCrossSeriesReducerPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AggregationCrossSeriesReducerPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AggregationCrossSeriesReducer) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AggregationCrossSeriesReducerInput is an input type that accepts AggregationCrossSeriesReducerArgs and AggregationCrossSeriesReducerOutput values.
// You can construct a concrete instance of `AggregationCrossSeriesReducerInput` via:
//
//	AggregationCrossSeriesReducerArgs{...}
type AggregationCrossSeriesReducerInput interface {
	pulumi.Input

	ToAggregationCrossSeriesReducerOutput() AggregationCrossSeriesReducerOutput
	ToAggregationCrossSeriesReducerOutputWithContext(context.Context) AggregationCrossSeriesReducerOutput
}

var aggregationCrossSeriesReducerPtrType = reflect.TypeOf((**AggregationCrossSeriesReducer)(nil)).Elem()

type AggregationCrossSeriesReducerPtrInput interface {
	pulumi.Input

	ToAggregationCrossSeriesReducerPtrOutput() AggregationCrossSeriesReducerPtrOutput
	ToAggregationCrossSeriesReducerPtrOutputWithContext(context.Context) AggregationCrossSeriesReducerPtrOutput
}

type aggregationCrossSeriesReducerPtr string

func AggregationCrossSeriesReducerPtr(v string) AggregationCrossSeriesReducerPtrInput {
	return (*aggregationCrossSeriesReducerPtr)(&v)
}

func (*aggregationCrossSeriesReducerPtr) ElementType() reflect.Type {
	return aggregationCrossSeriesReducerPtrType
}

func (in *aggregationCrossSeriesReducerPtr) ToAggregationCrossSeriesReducerPtrOutput() AggregationCrossSeriesReducerPtrOutput {
	return pulumi.ToOutput(in).(AggregationCrossSeriesReducerPtrOutput)
}

func (in *aggregationCrossSeriesReducerPtr) ToAggregationCrossSeriesReducerPtrOutputWithContext(ctx context.Context) AggregationCrossSeriesReducerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AggregationCrossSeriesReducerPtrOutput)
}

func (in *aggregationCrossSeriesReducerPtr) ToOutput(ctx context.Context) pulumix.Output[*AggregationCrossSeriesReducer] {
	return pulumix.Output[*AggregationCrossSeriesReducer]{
		OutputState: in.ToAggregationCrossSeriesReducerPtrOutputWithContext(ctx).OutputState,
	}
}

// An Aligner describes how to bring the data points in a single time series into temporal alignment. Except for ALIGN_NONE, all alignments cause all the data points in an alignment_period to be mathematically grouped together, resulting in a single data point for each alignment_period with end timestamp at the end of the period.Not all alignment operations may be applied to all time series. The valid choices depend on the metric_kind and value_type of the original time series. Alignment can change the metric_kind or the value_type of the time series.Time series data must be aligned in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified and not equal to ALIGN_NONE and alignment_period must be specified; otherwise, an error is returned.
type AggregationPerSeriesAligner string

const (
	// No alignment. Raw data is returned. Not valid if cross-series reduction is requested. The value_type of the result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignNone = AggregationPerSeriesAligner("ALIGN_NONE")
	// Align and convert to DELTA. The output is delta = y1 - y0.This alignment is valid for CUMULATIVE and DELTA metrics. If the selected alignment period results in periods with no data, then the aligned value for such a period is created by interpolation. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignDelta = AggregationPerSeriesAligner("ALIGN_DELTA")
	// Align and convert to a rate. The result is computed as rate = (y1 - y0)/(t1 - t0), or "delta over time". Think of this aligner as providing the slope of the line that passes through the value at the start and at the end of the alignment_period.This aligner is valid for CUMULATIVE and DELTA metrics with numeric values. If the selected alignment period results in periods with no data, then the aligned value for such a period is created by interpolation. The output is a GAUGE metric with value_type DOUBLE.If, by "rate", you mean "percentage change", see the ALIGN_PERCENT_CHANGE aligner instead.
	AggregationPerSeriesAlignerAlignRate = AggregationPerSeriesAligner("ALIGN_RATE")
	// Align by interpolating between adjacent points around the alignment period boundary. This aligner is valid for GAUGE metrics with numeric values. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignInterpolate = AggregationPerSeriesAligner("ALIGN_INTERPOLATE")
	// Align by moving the most recent data point before the end of the alignment period to the boundary at the end of the alignment period. This aligner is valid for GAUGE metrics. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignNextOlder = AggregationPerSeriesAligner("ALIGN_NEXT_OLDER")
	// Align the time series by returning the minimum value in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric values. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignMin = AggregationPerSeriesAligner("ALIGN_MIN")
	// Align the time series by returning the maximum value in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric values. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignMax = AggregationPerSeriesAligner("ALIGN_MAX")
	// Align the time series by returning the mean value in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric values. The value_type of the aligned result is DOUBLE.
	AggregationPerSeriesAlignerAlignMean = AggregationPerSeriesAligner("ALIGN_MEAN")
	// Align the time series by returning the number of values in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric or Boolean values. The value_type of the aligned result is INT64.
	AggregationPerSeriesAlignerAlignCount = AggregationPerSeriesAligner("ALIGN_COUNT")
	// Align the time series by returning the sum of the values in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric and distribution values. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignSum = AggregationPerSeriesAligner("ALIGN_SUM")
	// Align the time series by returning the standard deviation of the values in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric values. The value_type of the output is DOUBLE.
	AggregationPerSeriesAlignerAlignStddev = AggregationPerSeriesAligner("ALIGN_STDDEV")
	// Align the time series by returning the number of True values in each alignment period. This aligner is valid for GAUGE metrics with Boolean values. The value_type of the output is INT64.
	AggregationPerSeriesAlignerAlignCountTrue = AggregationPerSeriesAligner("ALIGN_COUNT_TRUE")
	// Align the time series by returning the number of False values in each alignment period. This aligner is valid for GAUGE metrics with Boolean values. The value_type of the output is INT64.
	AggregationPerSeriesAlignerAlignCountFalse = AggregationPerSeriesAligner("ALIGN_COUNT_FALSE")
	// Align the time series by returning the ratio of the number of True values to the total number of values in each alignment period. This aligner is valid for GAUGE metrics with Boolean values. The output value is in the range 0.0, 1.0 and has value_type DOUBLE.
	AggregationPerSeriesAlignerAlignFractionTrue = AggregationPerSeriesAligner("ALIGN_FRACTION_TRUE")
	// Align the time series by using percentile aggregation (https://en.wikipedia.org/wiki/Percentile). The resulting data point in each alignment period is the 99th percentile of all data points in the period. This aligner is valid for GAUGE and DELTA metrics with distribution values. The output is a GAUGE metric with value_type DOUBLE.
	AggregationPerSeriesAlignerAlignPercentile99 = AggregationPerSeriesAligner("ALIGN_PERCENTILE_99")
	// Align the time series by using percentile aggregation (https://en.wikipedia.org/wiki/Percentile). The resulting data point in each alignment period is the 95th percentile of all data points in the period. This aligner is valid for GAUGE and DELTA metrics with distribution values. The output is a GAUGE metric with value_type DOUBLE.
	AggregationPerSeriesAlignerAlignPercentile95 = AggregationPerSeriesAligner("ALIGN_PERCENTILE_95")
	// Align the time series by using percentile aggregation (https://en.wikipedia.org/wiki/Percentile). The resulting data point in each alignment period is the 50th percentile of all data points in the period. This aligner is valid for GAUGE and DELTA metrics with distribution values. The output is a GAUGE metric with value_type DOUBLE.
	AggregationPerSeriesAlignerAlignPercentile50 = AggregationPerSeriesAligner("ALIGN_PERCENTILE_50")
	// Align the time series by using percentile aggregation (https://en.wikipedia.org/wiki/Percentile). The resulting data point in each alignment period is the 5th percentile of all data points in the period. This aligner is valid for GAUGE and DELTA metrics with distribution values. The output is a GAUGE metric with value_type DOUBLE.
	AggregationPerSeriesAlignerAlignPercentile05 = AggregationPerSeriesAligner("ALIGN_PERCENTILE_05")
	// Align and convert to a percentage change. This aligner is valid for GAUGE and DELTA metrics with numeric values. This alignment returns ((current - previous)/previous) * 100, where the value of previous is determined based on the alignment_period.If the values of current and previous are both 0, then the returned value is 0. If only previous is 0, the returned value is infinity.A 10-minute moving mean is computed at each point of the alignment period prior to the above calculation to smooth the metric and prevent false positives from very short-lived spikes. The moving mean is only applicable for data whose values are >= 0. Any values < 0 are treated as a missing datapoint, and are ignored. While DELTA metrics are accepted by this alignment, special care should be taken that the values for the metric will always be positive. The output is a GAUGE metric with value_type DOUBLE.
	AggregationPerSeriesAlignerAlignPercentChange = AggregationPerSeriesAligner("ALIGN_PERCENT_CHANGE")
)

func (AggregationPerSeriesAligner) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationPerSeriesAligner)(nil)).Elem()
}

func (e AggregationPerSeriesAligner) ToAggregationPerSeriesAlignerOutput() AggregationPerSeriesAlignerOutput {
	return pulumi.ToOutput(e).(AggregationPerSeriesAlignerOutput)
}

func (e AggregationPerSeriesAligner) ToAggregationPerSeriesAlignerOutputWithContext(ctx context.Context) AggregationPerSeriesAlignerOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AggregationPerSeriesAlignerOutput)
}

func (e AggregationPerSeriesAligner) ToAggregationPerSeriesAlignerPtrOutput() AggregationPerSeriesAlignerPtrOutput {
	return e.ToAggregationPerSeriesAlignerPtrOutputWithContext(context.Background())
}

func (e AggregationPerSeriesAligner) ToAggregationPerSeriesAlignerPtrOutputWithContext(ctx context.Context) AggregationPerSeriesAlignerPtrOutput {
	return AggregationPerSeriesAligner(e).ToAggregationPerSeriesAlignerOutputWithContext(ctx).ToAggregationPerSeriesAlignerPtrOutputWithContext(ctx)
}

func (e AggregationPerSeriesAligner) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AggregationPerSeriesAligner) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AggregationPerSeriesAligner) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AggregationPerSeriesAligner) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AggregationPerSeriesAlignerOutput struct{ *pulumi.OutputState }

func (AggregationPerSeriesAlignerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationPerSeriesAligner)(nil)).Elem()
}

func (o AggregationPerSeriesAlignerOutput) ToAggregationPerSeriesAlignerOutput() AggregationPerSeriesAlignerOutput {
	return o
}

func (o AggregationPerSeriesAlignerOutput) ToAggregationPerSeriesAlignerOutputWithContext(ctx context.Context) AggregationPerSeriesAlignerOutput {
	return o
}

func (o AggregationPerSeriesAlignerOutput) ToAggregationPerSeriesAlignerPtrOutput() AggregationPerSeriesAlignerPtrOutput {
	return o.ToAggregationPerSeriesAlignerPtrOutputWithContext(context.Background())
}

func (o AggregationPerSeriesAlignerOutput) ToAggregationPerSeriesAlignerPtrOutputWithContext(ctx context.Context) AggregationPerSeriesAlignerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AggregationPerSeriesAligner) *AggregationPerSeriesAligner {
		return &v
	}).(AggregationPerSeriesAlignerPtrOutput)
}

func (o AggregationPerSeriesAlignerOutput) ToOutput(ctx context.Context) pulumix.Output[AggregationPerSeriesAligner] {
	return pulumix.Output[AggregationPerSeriesAligner]{
		OutputState: o.OutputState,
	}
}

func (o AggregationPerSeriesAlignerOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AggregationPerSeriesAlignerOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AggregationPerSeriesAligner) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AggregationPerSeriesAlignerOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AggregationPerSeriesAlignerOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AggregationPerSeriesAligner) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AggregationPerSeriesAlignerPtrOutput struct{ *pulumi.OutputState }

func (AggregationPerSeriesAlignerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregationPerSeriesAligner)(nil)).Elem()
}

func (o AggregationPerSeriesAlignerPtrOutput) ToAggregationPerSeriesAlignerPtrOutput() AggregationPerSeriesAlignerPtrOutput {
	return o
}

func (o AggregationPerSeriesAlignerPtrOutput) ToAggregationPerSeriesAlignerPtrOutputWithContext(ctx context.Context) AggregationPerSeriesAlignerPtrOutput {
	return o
}

func (o AggregationPerSeriesAlignerPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AggregationPerSeriesAligner] {
	return pulumix.Output[*AggregationPerSeriesAligner]{
		OutputState: o.OutputState,
	}
}

func (o AggregationPerSeriesAlignerPtrOutput) Elem() AggregationPerSeriesAlignerOutput {
	return o.ApplyT(func(v *AggregationPerSeriesAligner) AggregationPerSeriesAligner {
		if v != nil {
			return *v
		}
		var ret AggregationPerSeriesAligner
		return ret
	}).(AggregationPerSeriesAlignerOutput)
}

func (o AggregationPerSeriesAlignerPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AggregationPerSeriesAlignerPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AggregationPerSeriesAligner) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AggregationPerSeriesAlignerInput is an input type that accepts AggregationPerSeriesAlignerArgs and AggregationPerSeriesAlignerOutput values.
// You can construct a concrete instance of `AggregationPerSeriesAlignerInput` via:
//
//	AggregationPerSeriesAlignerArgs{...}
type AggregationPerSeriesAlignerInput interface {
	pulumi.Input

	ToAggregationPerSeriesAlignerOutput() AggregationPerSeriesAlignerOutput
	ToAggregationPerSeriesAlignerOutputWithContext(context.Context) AggregationPerSeriesAlignerOutput
}

var aggregationPerSeriesAlignerPtrType = reflect.TypeOf((**AggregationPerSeriesAligner)(nil)).Elem()

type AggregationPerSeriesAlignerPtrInput interface {
	pulumi.Input

	ToAggregationPerSeriesAlignerPtrOutput() AggregationPerSeriesAlignerPtrOutput
	ToAggregationPerSeriesAlignerPtrOutputWithContext(context.Context) AggregationPerSeriesAlignerPtrOutput
}

type aggregationPerSeriesAlignerPtr string

func AggregationPerSeriesAlignerPtr(v string) AggregationPerSeriesAlignerPtrInput {
	return (*aggregationPerSeriesAlignerPtr)(&v)
}

func (*aggregationPerSeriesAlignerPtr) ElementType() reflect.Type {
	return aggregationPerSeriesAlignerPtrType
}

func (in *aggregationPerSeriesAlignerPtr) ToAggregationPerSeriesAlignerPtrOutput() AggregationPerSeriesAlignerPtrOutput {
	return pulumi.ToOutput(in).(AggregationPerSeriesAlignerPtrOutput)
}

func (in *aggregationPerSeriesAlignerPtr) ToAggregationPerSeriesAlignerPtrOutputWithContext(ctx context.Context) AggregationPerSeriesAlignerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AggregationPerSeriesAlignerPtrOutput)
}

func (in *aggregationPerSeriesAlignerPtr) ToOutput(ctx context.Context) pulumix.Output[*AggregationPerSeriesAligner] {
	return pulumix.Output[*AggregationPerSeriesAligner]{
		OutputState: in.ToAggregationPerSeriesAlignerPtrOutputWithContext(ctx).OutputState,
	}
}

// How to combine the results of multiple conditions to determine if an incident should be opened. If condition_time_series_query_language is present, this must be COMBINE_UNSPECIFIED.
type AlertPolicyCombiner string

const (
	// An unspecified combiner.
	AlertPolicyCombinerCombineUnspecified = AlertPolicyCombiner("COMBINE_UNSPECIFIED")
	// Combine conditions using the logical AND operator. An incident is created only if all the conditions are met simultaneously. This combiner is satisfied if all conditions are met, even if they are met on completely different resources.
	AlertPolicyCombinerAnd = AlertPolicyCombiner("AND")
	// Combine conditions using the logical OR operator. An incident is created if any of the listed conditions is met.
	AlertPolicyCombinerOr = AlertPolicyCombiner("OR")
	// Combine conditions using logical AND operator, but unlike the regular AND option, an incident is created only if all conditions are met simultaneously on at least one resource.
	AlertPolicyCombinerAndWithMatchingResource = AlertPolicyCombiner("AND_WITH_MATCHING_RESOURCE")
)

func (AlertPolicyCombiner) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPolicyCombiner)(nil)).Elem()
}

func (e AlertPolicyCombiner) ToAlertPolicyCombinerOutput() AlertPolicyCombinerOutput {
	return pulumi.ToOutput(e).(AlertPolicyCombinerOutput)
}

func (e AlertPolicyCombiner) ToAlertPolicyCombinerOutputWithContext(ctx context.Context) AlertPolicyCombinerOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AlertPolicyCombinerOutput)
}

func (e AlertPolicyCombiner) ToAlertPolicyCombinerPtrOutput() AlertPolicyCombinerPtrOutput {
	return e.ToAlertPolicyCombinerPtrOutputWithContext(context.Background())
}

func (e AlertPolicyCombiner) ToAlertPolicyCombinerPtrOutputWithContext(ctx context.Context) AlertPolicyCombinerPtrOutput {
	return AlertPolicyCombiner(e).ToAlertPolicyCombinerOutputWithContext(ctx).ToAlertPolicyCombinerPtrOutputWithContext(ctx)
}

func (e AlertPolicyCombiner) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AlertPolicyCombiner) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AlertPolicyCombiner) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AlertPolicyCombiner) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AlertPolicyCombinerOutput struct{ *pulumi.OutputState }

func (AlertPolicyCombinerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPolicyCombiner)(nil)).Elem()
}

func (o AlertPolicyCombinerOutput) ToAlertPolicyCombinerOutput() AlertPolicyCombinerOutput {
	return o
}

func (o AlertPolicyCombinerOutput) ToAlertPolicyCombinerOutputWithContext(ctx context.Context) AlertPolicyCombinerOutput {
	return o
}

func (o AlertPolicyCombinerOutput) ToAlertPolicyCombinerPtrOutput() AlertPolicyCombinerPtrOutput {
	return o.ToAlertPolicyCombinerPtrOutputWithContext(context.Background())
}

func (o AlertPolicyCombinerOutput) ToAlertPolicyCombinerPtrOutputWithContext(ctx context.Context) AlertPolicyCombinerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertPolicyCombiner) *AlertPolicyCombiner {
		return &v
	}).(AlertPolicyCombinerPtrOutput)
}

func (o AlertPolicyCombinerOutput) ToOutput(ctx context.Context) pulumix.Output[AlertPolicyCombiner] {
	return pulumix.Output[AlertPolicyCombiner]{
		OutputState: o.OutputState,
	}
}

func (o AlertPolicyCombinerOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AlertPolicyCombinerOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AlertPolicyCombiner) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AlertPolicyCombinerOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AlertPolicyCombinerOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AlertPolicyCombiner) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AlertPolicyCombinerPtrOutput struct{ *pulumi.OutputState }

func (AlertPolicyCombinerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertPolicyCombiner)(nil)).Elem()
}

func (o AlertPolicyCombinerPtrOutput) ToAlertPolicyCombinerPtrOutput() AlertPolicyCombinerPtrOutput {
	return o
}

func (o AlertPolicyCombinerPtrOutput) ToAlertPolicyCombinerPtrOutputWithContext(ctx context.Context) AlertPolicyCombinerPtrOutput {
	return o
}

func (o AlertPolicyCombinerPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertPolicyCombiner] {
	return pulumix.Output[*AlertPolicyCombiner]{
		OutputState: o.OutputState,
	}
}

func (o AlertPolicyCombinerPtrOutput) Elem() AlertPolicyCombinerOutput {
	return o.ApplyT(func(v *AlertPolicyCombiner) AlertPolicyCombiner {
		if v != nil {
			return *v
		}
		var ret AlertPolicyCombiner
		return ret
	}).(AlertPolicyCombinerOutput)
}

func (o AlertPolicyCombinerPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AlertPolicyCombinerPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AlertPolicyCombiner) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AlertPolicyCombinerInput is an input type that accepts AlertPolicyCombinerArgs and AlertPolicyCombinerOutput values.
// You can construct a concrete instance of `AlertPolicyCombinerInput` via:
//
//	AlertPolicyCombinerArgs{...}
type AlertPolicyCombinerInput interface {
	pulumi.Input

	ToAlertPolicyCombinerOutput() AlertPolicyCombinerOutput
	ToAlertPolicyCombinerOutputWithContext(context.Context) AlertPolicyCombinerOutput
}

var alertPolicyCombinerPtrType = reflect.TypeOf((**AlertPolicyCombiner)(nil)).Elem()

type AlertPolicyCombinerPtrInput interface {
	pulumi.Input

	ToAlertPolicyCombinerPtrOutput() AlertPolicyCombinerPtrOutput
	ToAlertPolicyCombinerPtrOutputWithContext(context.Context) AlertPolicyCombinerPtrOutput
}

type alertPolicyCombinerPtr string

func AlertPolicyCombinerPtr(v string) AlertPolicyCombinerPtrInput {
	return (*alertPolicyCombinerPtr)(&v)
}

func (*alertPolicyCombinerPtr) ElementType() reflect.Type {
	return alertPolicyCombinerPtrType
}

func (in *alertPolicyCombinerPtr) ToAlertPolicyCombinerPtrOutput() AlertPolicyCombinerPtrOutput {
	return pulumi.ToOutput(in).(AlertPolicyCombinerPtrOutput)
}

func (in *alertPolicyCombinerPtr) ToAlertPolicyCombinerPtrOutputWithContext(ctx context.Context) AlertPolicyCombinerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AlertPolicyCombinerPtrOutput)
}

func (in *alertPolicyCombinerPtr) ToOutput(ctx context.Context) pulumix.Output[*AlertPolicyCombiner] {
	return pulumix.Output[*AlertPolicyCombiner]{
		OutputState: in.ToAlertPolicyCombinerPtrOutputWithContext(ctx).OutputState,
	}
}

// The type of content matcher that will be applied to the server output, compared to the content string when the check is run.
type ContentMatcherMatcher string

const (
	// No content matcher type specified (maintained for backward compatibility, but deprecated for future use). Treated as CONTAINS_STRING.
	ContentMatcherMatcherContentMatcherOptionUnspecified = ContentMatcherMatcher("CONTENT_MATCHER_OPTION_UNSPECIFIED")
	// Selects substring matching. The match succeeds if the output contains the content string. This is the default value for checks without a matcher option, or where the value of matcher is CONTENT_MATCHER_OPTION_UNSPECIFIED.
	ContentMatcherMatcherContainsString = ContentMatcherMatcher("CONTAINS_STRING")
	// Selects negation of substring matching. The match succeeds if the output does NOT contain the content string.
	ContentMatcherMatcherNotContainsString = ContentMatcherMatcher("NOT_CONTAINS_STRING")
	// Selects regular-expression matching. The match succeeds if the output matches the regular expression specified in the content string. Regex matching is only supported for HTTP/HTTPS checks.
	ContentMatcherMatcherMatchesRegex = ContentMatcherMatcher("MATCHES_REGEX")
	// Selects negation of regular-expression matching. The match succeeds if the output does NOT match the regular expression specified in the content string. Regex matching is only supported for HTTP/HTTPS checks.
	ContentMatcherMatcherNotMatchesRegex = ContentMatcherMatcher("NOT_MATCHES_REGEX")
	// Selects JSONPath matching. See JsonPathMatcher for details on when the match succeeds. JSONPath matching is only supported for HTTP/HTTPS checks.
	ContentMatcherMatcherMatchesJsonPath = ContentMatcherMatcher("MATCHES_JSON_PATH")
	// Selects JSONPath matching. See JsonPathMatcher for details on when the match succeeds. Succeeds when output does NOT match as specified. JSONPath is only supported for HTTP/HTTPS checks.
	ContentMatcherMatcherNotMatchesJsonPath = ContentMatcherMatcher("NOT_MATCHES_JSON_PATH")
)

func (ContentMatcherMatcher) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentMatcherMatcher)(nil)).Elem()
}

func (e ContentMatcherMatcher) ToContentMatcherMatcherOutput() ContentMatcherMatcherOutput {
	return pulumi.ToOutput(e).(ContentMatcherMatcherOutput)
}

func (e ContentMatcherMatcher) ToContentMatcherMatcherOutputWithContext(ctx context.Context) ContentMatcherMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ContentMatcherMatcherOutput)
}

func (e ContentMatcherMatcher) ToContentMatcherMatcherPtrOutput() ContentMatcherMatcherPtrOutput {
	return e.ToContentMatcherMatcherPtrOutputWithContext(context.Background())
}

func (e ContentMatcherMatcher) ToContentMatcherMatcherPtrOutputWithContext(ctx context.Context) ContentMatcherMatcherPtrOutput {
	return ContentMatcherMatcher(e).ToContentMatcherMatcherOutputWithContext(ctx).ToContentMatcherMatcherPtrOutputWithContext(ctx)
}

func (e ContentMatcherMatcher) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentMatcherMatcher) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentMatcherMatcher) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ContentMatcherMatcher) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ContentMatcherMatcherOutput struct{ *pulumi.OutputState }

func (ContentMatcherMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentMatcherMatcher)(nil)).Elem()
}

func (o ContentMatcherMatcherOutput) ToContentMatcherMatcherOutput() ContentMatcherMatcherOutput {
	return o
}

func (o ContentMatcherMatcherOutput) ToContentMatcherMatcherOutputWithContext(ctx context.Context) ContentMatcherMatcherOutput {
	return o
}

func (o ContentMatcherMatcherOutput) ToContentMatcherMatcherPtrOutput() ContentMatcherMatcherPtrOutput {
	return o.ToContentMatcherMatcherPtrOutputWithContext(context.Background())
}

func (o ContentMatcherMatcherOutput) ToContentMatcherMatcherPtrOutputWithContext(ctx context.Context) ContentMatcherMatcherPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContentMatcherMatcher) *ContentMatcherMatcher {
		return &v
	}).(ContentMatcherMatcherPtrOutput)
}

func (o ContentMatcherMatcherOutput) ToOutput(ctx context.Context) pulumix.Output[ContentMatcherMatcher] {
	return pulumix.Output[ContentMatcherMatcher]{
		OutputState: o.OutputState,
	}
}

func (o ContentMatcherMatcherOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ContentMatcherMatcherOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentMatcherMatcher) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ContentMatcherMatcherOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentMatcherMatcherOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentMatcherMatcher) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ContentMatcherMatcherPtrOutput struct{ *pulumi.OutputState }

func (ContentMatcherMatcherPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentMatcherMatcher)(nil)).Elem()
}

func (o ContentMatcherMatcherPtrOutput) ToContentMatcherMatcherPtrOutput() ContentMatcherMatcherPtrOutput {
	return o
}

func (o ContentMatcherMatcherPtrOutput) ToContentMatcherMatcherPtrOutputWithContext(ctx context.Context) ContentMatcherMatcherPtrOutput {
	return o
}

func (o ContentMatcherMatcherPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContentMatcherMatcher] {
	return pulumix.Output[*ContentMatcherMatcher]{
		OutputState: o.OutputState,
	}
}

func (o ContentMatcherMatcherPtrOutput) Elem() ContentMatcherMatcherOutput {
	return o.ApplyT(func(v *ContentMatcherMatcher) ContentMatcherMatcher {
		if v != nil {
			return *v
		}
		var ret ContentMatcherMatcher
		return ret
	}).(ContentMatcherMatcherOutput)
}

func (o ContentMatcherMatcherPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentMatcherMatcherPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ContentMatcherMatcher) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ContentMatcherMatcherInput is an input type that accepts ContentMatcherMatcherArgs and ContentMatcherMatcherOutput values.
// You can construct a concrete instance of `ContentMatcherMatcherInput` via:
//
//	ContentMatcherMatcherArgs{...}
type ContentMatcherMatcherInput interface {
	pulumi.Input

	ToContentMatcherMatcherOutput() ContentMatcherMatcherOutput
	ToContentMatcherMatcherOutputWithContext(context.Context) ContentMatcherMatcherOutput
}

var contentMatcherMatcherPtrType = reflect.TypeOf((**ContentMatcherMatcher)(nil)).Elem()

type ContentMatcherMatcherPtrInput interface {
	pulumi.Input

	ToContentMatcherMatcherPtrOutput() ContentMatcherMatcherPtrOutput
	ToContentMatcherMatcherPtrOutputWithContext(context.Context) ContentMatcherMatcherPtrOutput
}

type contentMatcherMatcherPtr string

func ContentMatcherMatcherPtr(v string) ContentMatcherMatcherPtrInput {
	return (*contentMatcherMatcherPtr)(&v)
}

func (*contentMatcherMatcherPtr) ElementType() reflect.Type {
	return contentMatcherMatcherPtrType
}

func (in *contentMatcherMatcherPtr) ToContentMatcherMatcherPtrOutput() ContentMatcherMatcherPtrOutput {
	return pulumi.ToOutput(in).(ContentMatcherMatcherPtrOutput)
}

func (in *contentMatcherMatcherPtr) ToContentMatcherMatcherPtrOutputWithContext(ctx context.Context) ContentMatcherMatcherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ContentMatcherMatcherPtrOutput)
}

func (in *contentMatcherMatcherPtr) ToOutput(ctx context.Context) pulumix.Output[*ContentMatcherMatcher] {
	return pulumix.Output[*ContentMatcherMatcher]{
		OutputState: in.ToContentMatcherMatcherPtrOutputWithContext(ctx).OutputState,
	}
}

// The content type header to use for the check. The following configurations result in errors: 1. Content type is specified in both the headers field and the content_type field. 2. Request method is GET and content_type is not TYPE_UNSPECIFIED 3. Request method is POST and content_type is TYPE_UNSPECIFIED. 4. Request method is POST and a "Content-Type" header is provided via headers field. The content_type field should be used instead.
type HttpCheckContentType string

const (
	// No content type specified.
	HttpCheckContentTypeTypeUnspecified = HttpCheckContentType("TYPE_UNSPECIFIED")
	// body is in URL-encoded form. Equivalent to setting the Content-Type to application/x-www-form-urlencoded in the HTTP request.
	HttpCheckContentTypeUrlEncoded = HttpCheckContentType("URL_ENCODED")
	// body is in custom_content_type form. Equivalent to setting the Content-Type to the contents of custom_content_type in the HTTP request.
	HttpCheckContentTypeUserProvided = HttpCheckContentType("USER_PROVIDED")
)

func (HttpCheckContentType) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpCheckContentType)(nil)).Elem()
}

func (e HttpCheckContentType) ToHttpCheckContentTypeOutput() HttpCheckContentTypeOutput {
	return pulumi.ToOutput(e).(HttpCheckContentTypeOutput)
}

func (e HttpCheckContentType) ToHttpCheckContentTypeOutputWithContext(ctx context.Context) HttpCheckContentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HttpCheckContentTypeOutput)
}

func (e HttpCheckContentType) ToHttpCheckContentTypePtrOutput() HttpCheckContentTypePtrOutput {
	return e.ToHttpCheckContentTypePtrOutputWithContext(context.Background())
}

func (e HttpCheckContentType) ToHttpCheckContentTypePtrOutputWithContext(ctx context.Context) HttpCheckContentTypePtrOutput {
	return HttpCheckContentType(e).ToHttpCheckContentTypeOutputWithContext(ctx).ToHttpCheckContentTypePtrOutputWithContext(ctx)
}

func (e HttpCheckContentType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpCheckContentType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpCheckContentType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HttpCheckContentType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HttpCheckContentTypeOutput struct{ *pulumi.OutputState }

func (HttpCheckContentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpCheckContentType)(nil)).Elem()
}

func (o HttpCheckContentTypeOutput) ToHttpCheckContentTypeOutput() HttpCheckContentTypeOutput {
	return o
}

func (o HttpCheckContentTypeOutput) ToHttpCheckContentTypeOutputWithContext(ctx context.Context) HttpCheckContentTypeOutput {
	return o
}

func (o HttpCheckContentTypeOutput) ToHttpCheckContentTypePtrOutput() HttpCheckContentTypePtrOutput {
	return o.ToHttpCheckContentTypePtrOutputWithContext(context.Background())
}

func (o HttpCheckContentTypeOutput) ToHttpCheckContentTypePtrOutputWithContext(ctx context.Context) HttpCheckContentTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpCheckContentType) *HttpCheckContentType {
		return &v
	}).(HttpCheckContentTypePtrOutput)
}

func (o HttpCheckContentTypeOutput) ToOutput(ctx context.Context) pulumix.Output[HttpCheckContentType] {
	return pulumix.Output[HttpCheckContentType]{
		OutputState: o.OutputState,
	}
}

func (o HttpCheckContentTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HttpCheckContentTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HttpCheckContentType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HttpCheckContentTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HttpCheckContentTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HttpCheckContentType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HttpCheckContentTypePtrOutput struct{ *pulumi.OutputState }

func (HttpCheckContentTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpCheckContentType)(nil)).Elem()
}

func (o HttpCheckContentTypePtrOutput) ToHttpCheckContentTypePtrOutput() HttpCheckContentTypePtrOutput {
	return o
}

func (o HttpCheckContentTypePtrOutput) ToHttpCheckContentTypePtrOutputWithContext(ctx context.Context) HttpCheckContentTypePtrOutput {
	return o
}

func (o HttpCheckContentTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HttpCheckContentType] {
	return pulumix.Output[*HttpCheckContentType]{
		OutputState: o.OutputState,
	}
}

func (o HttpCheckContentTypePtrOutput) Elem() HttpCheckContentTypeOutput {
	return o.ApplyT(func(v *HttpCheckContentType) HttpCheckContentType {
		if v != nil {
			return *v
		}
		var ret HttpCheckContentType
		return ret
	}).(HttpCheckContentTypeOutput)
}

func (o HttpCheckContentTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HttpCheckContentTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *HttpCheckContentType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HttpCheckContentTypeInput is an input type that accepts HttpCheckContentTypeArgs and HttpCheckContentTypeOutput values.
// You can construct a concrete instance of `HttpCheckContentTypeInput` via:
//
//	HttpCheckContentTypeArgs{...}
type HttpCheckContentTypeInput interface {
	pulumi.Input

	ToHttpCheckContentTypeOutput() HttpCheckContentTypeOutput
	ToHttpCheckContentTypeOutputWithContext(context.Context) HttpCheckContentTypeOutput
}

var httpCheckContentTypePtrType = reflect.TypeOf((**HttpCheckContentType)(nil)).Elem()

type HttpCheckContentTypePtrInput interface {
	pulumi.Input

	ToHttpCheckContentTypePtrOutput() HttpCheckContentTypePtrOutput
	ToHttpCheckContentTypePtrOutputWithContext(context.Context) HttpCheckContentTypePtrOutput
}

type httpCheckContentTypePtr string

func HttpCheckContentTypePtr(v string) HttpCheckContentTypePtrInput {
	return (*httpCheckContentTypePtr)(&v)
}

func (*httpCheckContentTypePtr) ElementType() reflect.Type {
	return httpCheckContentTypePtrType
}

func (in *httpCheckContentTypePtr) ToHttpCheckContentTypePtrOutput() HttpCheckContentTypePtrOutput {
	return pulumi.ToOutput(in).(HttpCheckContentTypePtrOutput)
}

func (in *httpCheckContentTypePtr) ToHttpCheckContentTypePtrOutputWithContext(ctx context.Context) HttpCheckContentTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HttpCheckContentTypePtrOutput)
}

func (in *httpCheckContentTypePtr) ToOutput(ctx context.Context) pulumix.Output[*HttpCheckContentType] {
	return pulumix.Output[*HttpCheckContentType]{
		OutputState: in.ToHttpCheckContentTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The HTTP request method to use for the check. If set to METHOD_UNSPECIFIED then request_method defaults to GET.
type HttpCheckRequestMethod string

const (
	// No request method specified.
	HttpCheckRequestMethodMethodUnspecified = HttpCheckRequestMethod("METHOD_UNSPECIFIED")
	// GET request.
	HttpCheckRequestMethodGet = HttpCheckRequestMethod("GET")
	// POST request.
	HttpCheckRequestMethodPost = HttpCheckRequestMethod("POST")
)

func (HttpCheckRequestMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpCheckRequestMethod)(nil)).Elem()
}

func (e HttpCheckRequestMethod) ToHttpCheckRequestMethodOutput() HttpCheckRequestMethodOutput {
	return pulumi.ToOutput(e).(HttpCheckRequestMethodOutput)
}

func (e HttpCheckRequestMethod) ToHttpCheckRequestMethodOutputWithContext(ctx context.Context) HttpCheckRequestMethodOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HttpCheckRequestMethodOutput)
}

func (e HttpCheckRequestMethod) ToHttpCheckRequestMethodPtrOutput() HttpCheckRequestMethodPtrOutput {
	return e.ToHttpCheckRequestMethodPtrOutputWithContext(context.Background())
}

func (e HttpCheckRequestMethod) ToHttpCheckRequestMethodPtrOutputWithContext(ctx context.Context) HttpCheckRequestMethodPtrOutput {
	return HttpCheckRequestMethod(e).ToHttpCheckRequestMethodOutputWithContext(ctx).ToHttpCheckRequestMethodPtrOutputWithContext(ctx)
}

func (e HttpCheckRequestMethod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpCheckRequestMethod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpCheckRequestMethod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HttpCheckRequestMethod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HttpCheckRequestMethodOutput struct{ *pulumi.OutputState }

func (HttpCheckRequestMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpCheckRequestMethod)(nil)).Elem()
}

func (o HttpCheckRequestMethodOutput) ToHttpCheckRequestMethodOutput() HttpCheckRequestMethodOutput {
	return o
}

func (o HttpCheckRequestMethodOutput) ToHttpCheckRequestMethodOutputWithContext(ctx context.Context) HttpCheckRequestMethodOutput {
	return o
}

func (o HttpCheckRequestMethodOutput) ToHttpCheckRequestMethodPtrOutput() HttpCheckRequestMethodPtrOutput {
	return o.ToHttpCheckRequestMethodPtrOutputWithContext(context.Background())
}

func (o HttpCheckRequestMethodOutput) ToHttpCheckRequestMethodPtrOutputWithContext(ctx context.Context) HttpCheckRequestMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpCheckRequestMethod) *HttpCheckRequestMethod {
		return &v
	}).(HttpCheckRequestMethodPtrOutput)
}

func (o HttpCheckRequestMethodOutput) ToOutput(ctx context.Context) pulumix.Output[HttpCheckRequestMethod] {
	return pulumix.Output[HttpCheckRequestMethod]{
		OutputState: o.OutputState,
	}
}

func (o HttpCheckRequestMethodOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HttpCheckRequestMethodOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HttpCheckRequestMethod) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HttpCheckRequestMethodOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HttpCheckRequestMethodOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HttpCheckRequestMethod) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HttpCheckRequestMethodPtrOutput struct{ *pulumi.OutputState }

func (HttpCheckRequestMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpCheckRequestMethod)(nil)).Elem()
}

func (o HttpCheckRequestMethodPtrOutput) ToHttpCheckRequestMethodPtrOutput() HttpCheckRequestMethodPtrOutput {
	return o
}

func (o HttpCheckRequestMethodPtrOutput) ToHttpCheckRequestMethodPtrOutputWithContext(ctx context.Context) HttpCheckRequestMethodPtrOutput {
	return o
}

func (o HttpCheckRequestMethodPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HttpCheckRequestMethod] {
	return pulumix.Output[*HttpCheckRequestMethod]{
		OutputState: o.OutputState,
	}
}

func (o HttpCheckRequestMethodPtrOutput) Elem() HttpCheckRequestMethodOutput {
	return o.ApplyT(func(v *HttpCheckRequestMethod) HttpCheckRequestMethod {
		if v != nil {
			return *v
		}
		var ret HttpCheckRequestMethod
		return ret
	}).(HttpCheckRequestMethodOutput)
}

func (o HttpCheckRequestMethodPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HttpCheckRequestMethodPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *HttpCheckRequestMethod) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HttpCheckRequestMethodInput is an input type that accepts HttpCheckRequestMethodArgs and HttpCheckRequestMethodOutput values.
// You can construct a concrete instance of `HttpCheckRequestMethodInput` via:
//
//	HttpCheckRequestMethodArgs{...}
type HttpCheckRequestMethodInput interface {
	pulumi.Input

	ToHttpCheckRequestMethodOutput() HttpCheckRequestMethodOutput
	ToHttpCheckRequestMethodOutputWithContext(context.Context) HttpCheckRequestMethodOutput
}

var httpCheckRequestMethodPtrType = reflect.TypeOf((**HttpCheckRequestMethod)(nil)).Elem()

type HttpCheckRequestMethodPtrInput interface {
	pulumi.Input

	ToHttpCheckRequestMethodPtrOutput() HttpCheckRequestMethodPtrOutput
	ToHttpCheckRequestMethodPtrOutputWithContext(context.Context) HttpCheckRequestMethodPtrOutput
}

type httpCheckRequestMethodPtr string

func HttpCheckRequestMethodPtr(v string) HttpCheckRequestMethodPtrInput {
	return (*httpCheckRequestMethodPtr)(&v)
}

func (*httpCheckRequestMethodPtr) ElementType() reflect.Type {
	return httpCheckRequestMethodPtrType
}

func (in *httpCheckRequestMethodPtr) ToHttpCheckRequestMethodPtrOutput() HttpCheckRequestMethodPtrOutput {
	return pulumi.ToOutput(in).(HttpCheckRequestMethodPtrOutput)
}

func (in *httpCheckRequestMethodPtr) ToHttpCheckRequestMethodPtrOutputWithContext(ctx context.Context) HttpCheckRequestMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HttpCheckRequestMethodPtrOutput)
}

func (in *httpCheckRequestMethodPtr) ToOutput(ctx context.Context) pulumix.Output[*HttpCheckRequestMethod] {
	return pulumix.Output[*HttpCheckRequestMethod]{
		OutputState: in.ToHttpCheckRequestMethodPtrOutputWithContext(ctx).OutputState,
	}
}

// The current operational state of the internal checker.
type InternalCheckerState string

const (
	// An internal checker should never be in the unspecified state.
	InternalCheckerStateUnspecified = InternalCheckerState("UNSPECIFIED")
	// The checker is being created, provisioned, and configured. A checker in this state can be returned by ListInternalCheckers or GetInternalChecker, as well as by examining the long running Operation (https://cloud.google.com/apis/design/design_patterns#long_running_operations) that created it.
	InternalCheckerStateCreating = InternalCheckerState("CREATING")
	// The checker is running and available for use. A checker in this state can be returned by ListInternalCheckers or GetInternalChecker as well as by examining the long running Operation (https://cloud.google.com/apis/design/design_patterns#long_running_operations) that created it. If a checker is being torn down, it is neither visible nor usable, so there is no "deleting" or "down" state.
	InternalCheckerStateRunning = InternalCheckerState("RUNNING")
)

func (InternalCheckerState) ElementType() reflect.Type {
	return reflect.TypeOf((*InternalCheckerState)(nil)).Elem()
}

func (e InternalCheckerState) ToInternalCheckerStateOutput() InternalCheckerStateOutput {
	return pulumi.ToOutput(e).(InternalCheckerStateOutput)
}

func (e InternalCheckerState) ToInternalCheckerStateOutputWithContext(ctx context.Context) InternalCheckerStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(InternalCheckerStateOutput)
}

func (e InternalCheckerState) ToInternalCheckerStatePtrOutput() InternalCheckerStatePtrOutput {
	return e.ToInternalCheckerStatePtrOutputWithContext(context.Background())
}

func (e InternalCheckerState) ToInternalCheckerStatePtrOutputWithContext(ctx context.Context) InternalCheckerStatePtrOutput {
	return InternalCheckerState(e).ToInternalCheckerStateOutputWithContext(ctx).ToInternalCheckerStatePtrOutputWithContext(ctx)
}

func (e InternalCheckerState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InternalCheckerState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InternalCheckerState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InternalCheckerState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type InternalCheckerStateOutput struct{ *pulumi.OutputState }

func (InternalCheckerStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InternalCheckerState)(nil)).Elem()
}

func (o InternalCheckerStateOutput) ToInternalCheckerStateOutput() InternalCheckerStateOutput {
	return o
}

func (o InternalCheckerStateOutput) ToInternalCheckerStateOutputWithContext(ctx context.Context) InternalCheckerStateOutput {
	return o
}

func (o InternalCheckerStateOutput) ToInternalCheckerStatePtrOutput() InternalCheckerStatePtrOutput {
	return o.ToInternalCheckerStatePtrOutputWithContext(context.Background())
}

func (o InternalCheckerStateOutput) ToInternalCheckerStatePtrOutputWithContext(ctx context.Context) InternalCheckerStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InternalCheckerState) *InternalCheckerState {
		return &v
	}).(InternalCheckerStatePtrOutput)
}

func (o InternalCheckerStateOutput) ToOutput(ctx context.Context) pulumix.Output[InternalCheckerState] {
	return pulumix.Output[InternalCheckerState]{
		OutputState: o.OutputState,
	}
}

func (o InternalCheckerStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o InternalCheckerStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InternalCheckerState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o InternalCheckerStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InternalCheckerStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InternalCheckerState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type InternalCheckerStatePtrOutput struct{ *pulumi.OutputState }

func (InternalCheckerStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalCheckerState)(nil)).Elem()
}

func (o InternalCheckerStatePtrOutput) ToInternalCheckerStatePtrOutput() InternalCheckerStatePtrOutput {
	return o
}

func (o InternalCheckerStatePtrOutput) ToInternalCheckerStatePtrOutputWithContext(ctx context.Context) InternalCheckerStatePtrOutput {
	return o
}

func (o InternalCheckerStatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*InternalCheckerState] {
	return pulumix.Output[*InternalCheckerState]{
		OutputState: o.OutputState,
	}
}

func (o InternalCheckerStatePtrOutput) Elem() InternalCheckerStateOutput {
	return o.ApplyT(func(v *InternalCheckerState) InternalCheckerState {
		if v != nil {
			return *v
		}
		var ret InternalCheckerState
		return ret
	}).(InternalCheckerStateOutput)
}

func (o InternalCheckerStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InternalCheckerStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *InternalCheckerState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// InternalCheckerStateInput is an input type that accepts InternalCheckerStateArgs and InternalCheckerStateOutput values.
// You can construct a concrete instance of `InternalCheckerStateInput` via:
//
//	InternalCheckerStateArgs{...}
type InternalCheckerStateInput interface {
	pulumi.Input

	ToInternalCheckerStateOutput() InternalCheckerStateOutput
	ToInternalCheckerStateOutputWithContext(context.Context) InternalCheckerStateOutput
}

var internalCheckerStatePtrType = reflect.TypeOf((**InternalCheckerState)(nil)).Elem()

type InternalCheckerStatePtrInput interface {
	pulumi.Input

	ToInternalCheckerStatePtrOutput() InternalCheckerStatePtrOutput
	ToInternalCheckerStatePtrOutputWithContext(context.Context) InternalCheckerStatePtrOutput
}

type internalCheckerStatePtr string

func InternalCheckerStatePtr(v string) InternalCheckerStatePtrInput {
	return (*internalCheckerStatePtr)(&v)
}

func (*internalCheckerStatePtr) ElementType() reflect.Type {
	return internalCheckerStatePtrType
}

func (in *internalCheckerStatePtr) ToInternalCheckerStatePtrOutput() InternalCheckerStatePtrOutput {
	return pulumi.ToOutput(in).(InternalCheckerStatePtrOutput)
}

func (in *internalCheckerStatePtr) ToInternalCheckerStatePtrOutputWithContext(ctx context.Context) InternalCheckerStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(InternalCheckerStatePtrOutput)
}

func (in *internalCheckerStatePtr) ToOutput(ctx context.Context) pulumix.Output[*InternalCheckerState] {
	return pulumix.Output[*InternalCheckerState]{
		OutputState: in.ToInternalCheckerStatePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of JSONPath match that will be applied to the JSON output (ContentMatcher.content)
type JsonPathMatcherJsonMatcher string

const (
	// No JSONPath matcher type specified (not valid).
	JsonPathMatcherJsonMatcherJsonPathMatcherOptionUnspecified = JsonPathMatcherJsonMatcher("JSON_PATH_MATCHER_OPTION_UNSPECIFIED")
	// Selects 'exact string' matching. The match succeeds if the content at the json_path within the output is exactly the same as the content string.
	JsonPathMatcherJsonMatcherExactMatch = JsonPathMatcherJsonMatcher("EXACT_MATCH")
	// Selects regular-expression matching. The match succeeds if the content at the json_path within the output matches the regular expression specified in the content string.
	JsonPathMatcherJsonMatcherRegexMatch = JsonPathMatcherJsonMatcher("REGEX_MATCH")
)

func (JsonPathMatcherJsonMatcher) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonPathMatcherJsonMatcher)(nil)).Elem()
}

func (e JsonPathMatcherJsonMatcher) ToJsonPathMatcherJsonMatcherOutput() JsonPathMatcherJsonMatcherOutput {
	return pulumi.ToOutput(e).(JsonPathMatcherJsonMatcherOutput)
}

func (e JsonPathMatcherJsonMatcher) ToJsonPathMatcherJsonMatcherOutputWithContext(ctx context.Context) JsonPathMatcherJsonMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, e).(JsonPathMatcherJsonMatcherOutput)
}

func (e JsonPathMatcherJsonMatcher) ToJsonPathMatcherJsonMatcherPtrOutput() JsonPathMatcherJsonMatcherPtrOutput {
	return e.ToJsonPathMatcherJsonMatcherPtrOutputWithContext(context.Background())
}

func (e JsonPathMatcherJsonMatcher) ToJsonPathMatcherJsonMatcherPtrOutputWithContext(ctx context.Context) JsonPathMatcherJsonMatcherPtrOutput {
	return JsonPathMatcherJsonMatcher(e).ToJsonPathMatcherJsonMatcherOutputWithContext(ctx).ToJsonPathMatcherJsonMatcherPtrOutputWithContext(ctx)
}

func (e JsonPathMatcherJsonMatcher) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e JsonPathMatcherJsonMatcher) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e JsonPathMatcherJsonMatcher) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e JsonPathMatcherJsonMatcher) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type JsonPathMatcherJsonMatcherOutput struct{ *pulumi.OutputState }

func (JsonPathMatcherJsonMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonPathMatcherJsonMatcher)(nil)).Elem()
}

func (o JsonPathMatcherJsonMatcherOutput) ToJsonPathMatcherJsonMatcherOutput() JsonPathMatcherJsonMatcherOutput {
	return o
}

func (o JsonPathMatcherJsonMatcherOutput) ToJsonPathMatcherJsonMatcherOutputWithContext(ctx context.Context) JsonPathMatcherJsonMatcherOutput {
	return o
}

func (o JsonPathMatcherJsonMatcherOutput) ToJsonPathMatcherJsonMatcherPtrOutput() JsonPathMatcherJsonMatcherPtrOutput {
	return o.ToJsonPathMatcherJsonMatcherPtrOutputWithContext(context.Background())
}

func (o JsonPathMatcherJsonMatcherOutput) ToJsonPathMatcherJsonMatcherPtrOutputWithContext(ctx context.Context) JsonPathMatcherJsonMatcherPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonPathMatcherJsonMatcher) *JsonPathMatcherJsonMatcher {
		return &v
	}).(JsonPathMatcherJsonMatcherPtrOutput)
}

func (o JsonPathMatcherJsonMatcherOutput) ToOutput(ctx context.Context) pulumix.Output[JsonPathMatcherJsonMatcher] {
	return pulumix.Output[JsonPathMatcherJsonMatcher]{
		OutputState: o.OutputState,
	}
}

func (o JsonPathMatcherJsonMatcherOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o JsonPathMatcherJsonMatcherOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e JsonPathMatcherJsonMatcher) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o JsonPathMatcherJsonMatcherOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o JsonPathMatcherJsonMatcherOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e JsonPathMatcherJsonMatcher) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type JsonPathMatcherJsonMatcherPtrOutput struct{ *pulumi.OutputState }

func (JsonPathMatcherJsonMatcherPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonPathMatcherJsonMatcher)(nil)).Elem()
}

func (o JsonPathMatcherJsonMatcherPtrOutput) ToJsonPathMatcherJsonMatcherPtrOutput() JsonPathMatcherJsonMatcherPtrOutput {
	return o
}

func (o JsonPathMatcherJsonMatcherPtrOutput) ToJsonPathMatcherJsonMatcherPtrOutputWithContext(ctx context.Context) JsonPathMatcherJsonMatcherPtrOutput {
	return o
}

func (o JsonPathMatcherJsonMatcherPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JsonPathMatcherJsonMatcher] {
	return pulumix.Output[*JsonPathMatcherJsonMatcher]{
		OutputState: o.OutputState,
	}
}

func (o JsonPathMatcherJsonMatcherPtrOutput) Elem() JsonPathMatcherJsonMatcherOutput {
	return o.ApplyT(func(v *JsonPathMatcherJsonMatcher) JsonPathMatcherJsonMatcher {
		if v != nil {
			return *v
		}
		var ret JsonPathMatcherJsonMatcher
		return ret
	}).(JsonPathMatcherJsonMatcherOutput)
}

func (o JsonPathMatcherJsonMatcherPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o JsonPathMatcherJsonMatcherPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *JsonPathMatcherJsonMatcher) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// JsonPathMatcherJsonMatcherInput is an input type that accepts JsonPathMatcherJsonMatcherArgs and JsonPathMatcherJsonMatcherOutput values.
// You can construct a concrete instance of `JsonPathMatcherJsonMatcherInput` via:
//
//	JsonPathMatcherJsonMatcherArgs{...}
type JsonPathMatcherJsonMatcherInput interface {
	pulumi.Input

	ToJsonPathMatcherJsonMatcherOutput() JsonPathMatcherJsonMatcherOutput
	ToJsonPathMatcherJsonMatcherOutputWithContext(context.Context) JsonPathMatcherJsonMatcherOutput
}

var jsonPathMatcherJsonMatcherPtrType = reflect.TypeOf((**JsonPathMatcherJsonMatcher)(nil)).Elem()

type JsonPathMatcherJsonMatcherPtrInput interface {
	pulumi.Input

	ToJsonPathMatcherJsonMatcherPtrOutput() JsonPathMatcherJsonMatcherPtrOutput
	ToJsonPathMatcherJsonMatcherPtrOutputWithContext(context.Context) JsonPathMatcherJsonMatcherPtrOutput
}

type jsonPathMatcherJsonMatcherPtr string

func JsonPathMatcherJsonMatcherPtr(v string) JsonPathMatcherJsonMatcherPtrInput {
	return (*jsonPathMatcherJsonMatcherPtr)(&v)
}

func (*jsonPathMatcherJsonMatcherPtr) ElementType() reflect.Type {
	return jsonPathMatcherJsonMatcherPtrType
}

func (in *jsonPathMatcherJsonMatcherPtr) ToJsonPathMatcherJsonMatcherPtrOutput() JsonPathMatcherJsonMatcherPtrOutput {
	return pulumi.ToOutput(in).(JsonPathMatcherJsonMatcherPtrOutput)
}

func (in *jsonPathMatcherJsonMatcherPtr) ToJsonPathMatcherJsonMatcherPtrOutputWithContext(ctx context.Context) JsonPathMatcherJsonMatcherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(JsonPathMatcherJsonMatcherPtrOutput)
}

func (in *jsonPathMatcherJsonMatcherPtr) ToOutput(ctx context.Context) pulumix.Output[*JsonPathMatcherJsonMatcher] {
	return pulumix.Output[*JsonPathMatcherJsonMatcher]{
		OutputState: in.ToJsonPathMatcherJsonMatcherPtrOutputWithContext(ctx).OutputState,
	}
}

// The type of data that can be assigned to the label.
type LabelDescriptorValueType string

const (
	// A variable-length string, not to exceed 1,024 characters. This is the default value type.
	LabelDescriptorValueTypeString = LabelDescriptorValueType("STRING")
	// Boolean; true or false.
	LabelDescriptorValueTypeBool = LabelDescriptorValueType("BOOL")
	// A 64-bit signed integer.
	LabelDescriptorValueTypeInt64 = LabelDescriptorValueType("INT64")
)

func (LabelDescriptorValueType) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelDescriptorValueType)(nil)).Elem()
}

func (e LabelDescriptorValueType) ToLabelDescriptorValueTypeOutput() LabelDescriptorValueTypeOutput {
	return pulumi.ToOutput(e).(LabelDescriptorValueTypeOutput)
}

func (e LabelDescriptorValueType) ToLabelDescriptorValueTypeOutputWithContext(ctx context.Context) LabelDescriptorValueTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LabelDescriptorValueTypeOutput)
}

func (e LabelDescriptorValueType) ToLabelDescriptorValueTypePtrOutput() LabelDescriptorValueTypePtrOutput {
	return e.ToLabelDescriptorValueTypePtrOutputWithContext(context.Background())
}

func (e LabelDescriptorValueType) ToLabelDescriptorValueTypePtrOutputWithContext(ctx context.Context) LabelDescriptorValueTypePtrOutput {
	return LabelDescriptorValueType(e).ToLabelDescriptorValueTypeOutputWithContext(ctx).ToLabelDescriptorValueTypePtrOutputWithContext(ctx)
}

func (e LabelDescriptorValueType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LabelDescriptorValueType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LabelDescriptorValueType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LabelDescriptorValueType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LabelDescriptorValueTypeOutput struct{ *pulumi.OutputState }

func (LabelDescriptorValueTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelDescriptorValueType)(nil)).Elem()
}

func (o LabelDescriptorValueTypeOutput) ToLabelDescriptorValueTypeOutput() LabelDescriptorValueTypeOutput {
	return o
}

func (o LabelDescriptorValueTypeOutput) ToLabelDescriptorValueTypeOutputWithContext(ctx context.Context) LabelDescriptorValueTypeOutput {
	return o
}

func (o LabelDescriptorValueTypeOutput) ToLabelDescriptorValueTypePtrOutput() LabelDescriptorValueTypePtrOutput {
	return o.ToLabelDescriptorValueTypePtrOutputWithContext(context.Background())
}

func (o LabelDescriptorValueTypeOutput) ToLabelDescriptorValueTypePtrOutputWithContext(ctx context.Context) LabelDescriptorValueTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LabelDescriptorValueType) *LabelDescriptorValueType {
		return &v
	}).(LabelDescriptorValueTypePtrOutput)
}

func (o LabelDescriptorValueTypeOutput) ToOutput(ctx context.Context) pulumix.Output[LabelDescriptorValueType] {
	return pulumix.Output[LabelDescriptorValueType]{
		OutputState: o.OutputState,
	}
}

func (o LabelDescriptorValueTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LabelDescriptorValueTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LabelDescriptorValueType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LabelDescriptorValueTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LabelDescriptorValueTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LabelDescriptorValueType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LabelDescriptorValueTypePtrOutput struct{ *pulumi.OutputState }

func (LabelDescriptorValueTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelDescriptorValueType)(nil)).Elem()
}

func (o LabelDescriptorValueTypePtrOutput) ToLabelDescriptorValueTypePtrOutput() LabelDescriptorValueTypePtrOutput {
	return o
}

func (o LabelDescriptorValueTypePtrOutput) ToLabelDescriptorValueTypePtrOutputWithContext(ctx context.Context) LabelDescriptorValueTypePtrOutput {
	return o
}

func (o LabelDescriptorValueTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LabelDescriptorValueType] {
	return pulumix.Output[*LabelDescriptorValueType]{
		OutputState: o.OutputState,
	}
}

func (o LabelDescriptorValueTypePtrOutput) Elem() LabelDescriptorValueTypeOutput {
	return o.ApplyT(func(v *LabelDescriptorValueType) LabelDescriptorValueType {
		if v != nil {
			return *v
		}
		var ret LabelDescriptorValueType
		return ret
	}).(LabelDescriptorValueTypeOutput)
}

func (o LabelDescriptorValueTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LabelDescriptorValueTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LabelDescriptorValueType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LabelDescriptorValueTypeInput is an input type that accepts LabelDescriptorValueTypeArgs and LabelDescriptorValueTypeOutput values.
// You can construct a concrete instance of `LabelDescriptorValueTypeInput` via:
//
//	LabelDescriptorValueTypeArgs{...}
type LabelDescriptorValueTypeInput interface {
	pulumi.Input

	ToLabelDescriptorValueTypeOutput() LabelDescriptorValueTypeOutput
	ToLabelDescriptorValueTypeOutputWithContext(context.Context) LabelDescriptorValueTypeOutput
}

var labelDescriptorValueTypePtrType = reflect.TypeOf((**LabelDescriptorValueType)(nil)).Elem()

type LabelDescriptorValueTypePtrInput interface {
	pulumi.Input

	ToLabelDescriptorValueTypePtrOutput() LabelDescriptorValueTypePtrOutput
	ToLabelDescriptorValueTypePtrOutputWithContext(context.Context) LabelDescriptorValueTypePtrOutput
}

type labelDescriptorValueTypePtr string

func LabelDescriptorValueTypePtr(v string) LabelDescriptorValueTypePtrInput {
	return (*labelDescriptorValueTypePtr)(&v)
}

func (*labelDescriptorValueTypePtr) ElementType() reflect.Type {
	return labelDescriptorValueTypePtrType
}

func (in *labelDescriptorValueTypePtr) ToLabelDescriptorValueTypePtrOutput() LabelDescriptorValueTypePtrOutput {
	return pulumi.ToOutput(in).(LabelDescriptorValueTypePtrOutput)
}

func (in *labelDescriptorValueTypePtr) ToLabelDescriptorValueTypePtrOutputWithContext(ctx context.Context) LabelDescriptorValueTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LabelDescriptorValueTypePtrOutput)
}

func (in *labelDescriptorValueTypePtr) ToOutput(ctx context.Context) pulumix.Output[*LabelDescriptorValueType] {
	return pulumix.Output[*LabelDescriptorValueType]{
		OutputState: in.ToLabelDescriptorValueTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Optional. The launch stage of the metric definition.
type MetricDescriptorLaunchStage string

const (
	// Do not use this default value.
	MetricDescriptorLaunchStageLaunchStageUnspecified = MetricDescriptorLaunchStage("LAUNCH_STAGE_UNSPECIFIED")
	// The feature is not yet implemented. Users can not use it.
	MetricDescriptorLaunchStageUnimplemented = MetricDescriptorLaunchStage("UNIMPLEMENTED")
	// Prelaunch features are hidden from users and are only visible internally.
	MetricDescriptorLaunchStagePrelaunch = MetricDescriptorLaunchStage("PRELAUNCH")
	// Early Access features are limited to a closed group of testers. To use these features, you must sign up in advance and sign a Trusted Tester agreement (which includes confidentiality provisions). These features may be unstable, changed in backward-incompatible ways, and are not guaranteed to be released.
	MetricDescriptorLaunchStageEarlyAccess = MetricDescriptorLaunchStage("EARLY_ACCESS")
	// Alpha is a limited availability test for releases before they are cleared for widespread use. By Alpha, all significant design issues are resolved and we are in the process of verifying functionality. Alpha customers need to apply for access, agree to applicable terms, and have their projects allowlisted. Alpha releases don't have to be feature complete, no SLAs are provided, and there are no technical support obligations, but they will be far enough along that customers can actually use them in test environments or for limited-use tests -- just like they would in normal production cases.
	MetricDescriptorLaunchStageAlpha = MetricDescriptorLaunchStage("ALPHA")
	// Beta is the point at which we are ready to open a release for any customer to use. There are no SLA or technical support obligations in a Beta release. Products will be complete from a feature perspective, but may have some open outstanding issues. Beta releases are suitable for limited production use cases.
	MetricDescriptorLaunchStageBeta = MetricDescriptorLaunchStage("BETA")
	// GA features are open to all developers and are considered stable and fully qualified for production use.
	MetricDescriptorLaunchStageGa = MetricDescriptorLaunchStage("GA")
	// Deprecated features are scheduled to be shut down and removed. For more information, see the "Deprecation Policy" section of our Terms of Service (https://cloud.google.com/terms/) and the Google Cloud Platform Subject to the Deprecation Policy (https://cloud.google.com/terms/deprecation) documentation.
	MetricDescriptorLaunchStageDeprecated = MetricDescriptorLaunchStage("DEPRECATED")
)

func (MetricDescriptorLaunchStage) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptorLaunchStage)(nil)).Elem()
}

func (e MetricDescriptorLaunchStage) ToMetricDescriptorLaunchStageOutput() MetricDescriptorLaunchStageOutput {
	return pulumi.ToOutput(e).(MetricDescriptorLaunchStageOutput)
}

func (e MetricDescriptorLaunchStage) ToMetricDescriptorLaunchStageOutputWithContext(ctx context.Context) MetricDescriptorLaunchStageOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MetricDescriptorLaunchStageOutput)
}

func (e MetricDescriptorLaunchStage) ToMetricDescriptorLaunchStagePtrOutput() MetricDescriptorLaunchStagePtrOutput {
	return e.ToMetricDescriptorLaunchStagePtrOutputWithContext(context.Background())
}

func (e MetricDescriptorLaunchStage) ToMetricDescriptorLaunchStagePtrOutputWithContext(ctx context.Context) MetricDescriptorLaunchStagePtrOutput {
	return MetricDescriptorLaunchStage(e).ToMetricDescriptorLaunchStageOutputWithContext(ctx).ToMetricDescriptorLaunchStagePtrOutputWithContext(ctx)
}

func (e MetricDescriptorLaunchStage) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricDescriptorLaunchStage) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricDescriptorLaunchStage) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MetricDescriptorLaunchStage) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MetricDescriptorLaunchStageOutput struct{ *pulumi.OutputState }

func (MetricDescriptorLaunchStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptorLaunchStage)(nil)).Elem()
}

func (o MetricDescriptorLaunchStageOutput) ToMetricDescriptorLaunchStageOutput() MetricDescriptorLaunchStageOutput {
	return o
}

func (o MetricDescriptorLaunchStageOutput) ToMetricDescriptorLaunchStageOutputWithContext(ctx context.Context) MetricDescriptorLaunchStageOutput {
	return o
}

func (o MetricDescriptorLaunchStageOutput) ToMetricDescriptorLaunchStagePtrOutput() MetricDescriptorLaunchStagePtrOutput {
	return o.ToMetricDescriptorLaunchStagePtrOutputWithContext(context.Background())
}

func (o MetricDescriptorLaunchStageOutput) ToMetricDescriptorLaunchStagePtrOutputWithContext(ctx context.Context) MetricDescriptorLaunchStagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricDescriptorLaunchStage) *MetricDescriptorLaunchStage {
		return &v
	}).(MetricDescriptorLaunchStagePtrOutput)
}

func (o MetricDescriptorLaunchStageOutput) ToOutput(ctx context.Context) pulumix.Output[MetricDescriptorLaunchStage] {
	return pulumix.Output[MetricDescriptorLaunchStage]{
		OutputState: o.OutputState,
	}
}

func (o MetricDescriptorLaunchStageOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MetricDescriptorLaunchStageOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricDescriptorLaunchStage) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MetricDescriptorLaunchStageOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricDescriptorLaunchStageOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricDescriptorLaunchStage) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MetricDescriptorLaunchStagePtrOutput struct{ *pulumi.OutputState }

func (MetricDescriptorLaunchStagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricDescriptorLaunchStage)(nil)).Elem()
}

func (o MetricDescriptorLaunchStagePtrOutput) ToMetricDescriptorLaunchStagePtrOutput() MetricDescriptorLaunchStagePtrOutput {
	return o
}

func (o MetricDescriptorLaunchStagePtrOutput) ToMetricDescriptorLaunchStagePtrOutputWithContext(ctx context.Context) MetricDescriptorLaunchStagePtrOutput {
	return o
}

func (o MetricDescriptorLaunchStagePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetricDescriptorLaunchStage] {
	return pulumix.Output[*MetricDescriptorLaunchStage]{
		OutputState: o.OutputState,
	}
}

func (o MetricDescriptorLaunchStagePtrOutput) Elem() MetricDescriptorLaunchStageOutput {
	return o.ApplyT(func(v *MetricDescriptorLaunchStage) MetricDescriptorLaunchStage {
		if v != nil {
			return *v
		}
		var ret MetricDescriptorLaunchStage
		return ret
	}).(MetricDescriptorLaunchStageOutput)
}

func (o MetricDescriptorLaunchStagePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricDescriptorLaunchStagePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MetricDescriptorLaunchStage) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MetricDescriptorLaunchStageInput is an input type that accepts MetricDescriptorLaunchStageArgs and MetricDescriptorLaunchStageOutput values.
// You can construct a concrete instance of `MetricDescriptorLaunchStageInput` via:
//
//	MetricDescriptorLaunchStageArgs{...}
type MetricDescriptorLaunchStageInput interface {
	pulumi.Input

	ToMetricDescriptorLaunchStageOutput() MetricDescriptorLaunchStageOutput
	ToMetricDescriptorLaunchStageOutputWithContext(context.Context) MetricDescriptorLaunchStageOutput
}

var metricDescriptorLaunchStagePtrType = reflect.TypeOf((**MetricDescriptorLaunchStage)(nil)).Elem()

type MetricDescriptorLaunchStagePtrInput interface {
	pulumi.Input

	ToMetricDescriptorLaunchStagePtrOutput() MetricDescriptorLaunchStagePtrOutput
	ToMetricDescriptorLaunchStagePtrOutputWithContext(context.Context) MetricDescriptorLaunchStagePtrOutput
}

type metricDescriptorLaunchStagePtr string

func MetricDescriptorLaunchStagePtr(v string) MetricDescriptorLaunchStagePtrInput {
	return (*metricDescriptorLaunchStagePtr)(&v)
}

func (*metricDescriptorLaunchStagePtr) ElementType() reflect.Type {
	return metricDescriptorLaunchStagePtrType
}

func (in *metricDescriptorLaunchStagePtr) ToMetricDescriptorLaunchStagePtrOutput() MetricDescriptorLaunchStagePtrOutput {
	return pulumi.ToOutput(in).(MetricDescriptorLaunchStagePtrOutput)
}

func (in *metricDescriptorLaunchStagePtr) ToMetricDescriptorLaunchStagePtrOutputWithContext(ctx context.Context) MetricDescriptorLaunchStagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MetricDescriptorLaunchStagePtrOutput)
}

func (in *metricDescriptorLaunchStagePtr) ToOutput(ctx context.Context) pulumix.Output[*MetricDescriptorLaunchStage] {
	return pulumix.Output[*MetricDescriptorLaunchStage]{
		OutputState: in.ToMetricDescriptorLaunchStagePtrOutputWithContext(ctx).OutputState,
	}
}

// Deprecated. Must use the MetricDescriptor.launch_stage instead.
type MetricDescriptorMetadataLaunchStage string

const (
	// Do not use this default value.
	MetricDescriptorMetadataLaunchStageLaunchStageUnspecified = MetricDescriptorMetadataLaunchStage("LAUNCH_STAGE_UNSPECIFIED")
	// The feature is not yet implemented. Users can not use it.
	MetricDescriptorMetadataLaunchStageUnimplemented = MetricDescriptorMetadataLaunchStage("UNIMPLEMENTED")
	// Prelaunch features are hidden from users and are only visible internally.
	MetricDescriptorMetadataLaunchStagePrelaunch = MetricDescriptorMetadataLaunchStage("PRELAUNCH")
	// Early Access features are limited to a closed group of testers. To use these features, you must sign up in advance and sign a Trusted Tester agreement (which includes confidentiality provisions). These features may be unstable, changed in backward-incompatible ways, and are not guaranteed to be released.
	MetricDescriptorMetadataLaunchStageEarlyAccess = MetricDescriptorMetadataLaunchStage("EARLY_ACCESS")
	// Alpha is a limited availability test for releases before they are cleared for widespread use. By Alpha, all significant design issues are resolved and we are in the process of verifying functionality. Alpha customers need to apply for access, agree to applicable terms, and have their projects allowlisted. Alpha releases don't have to be feature complete, no SLAs are provided, and there are no technical support obligations, but they will be far enough along that customers can actually use them in test environments or for limited-use tests -- just like they would in normal production cases.
	MetricDescriptorMetadataLaunchStageAlpha = MetricDescriptorMetadataLaunchStage("ALPHA")
	// Beta is the point at which we are ready to open a release for any customer to use. There are no SLA or technical support obligations in a Beta release. Products will be complete from a feature perspective, but may have some open outstanding issues. Beta releases are suitable for limited production use cases.
	MetricDescriptorMetadataLaunchStageBeta = MetricDescriptorMetadataLaunchStage("BETA")
	// GA features are open to all developers and are considered stable and fully qualified for production use.
	MetricDescriptorMetadataLaunchStageGa = MetricDescriptorMetadataLaunchStage("GA")
	// Deprecated features are scheduled to be shut down and removed. For more information, see the "Deprecation Policy" section of our Terms of Service (https://cloud.google.com/terms/) and the Google Cloud Platform Subject to the Deprecation Policy (https://cloud.google.com/terms/deprecation) documentation.
	MetricDescriptorMetadataLaunchStageDeprecated = MetricDescriptorMetadataLaunchStage("DEPRECATED")
)

func (MetricDescriptorMetadataLaunchStage) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptorMetadataLaunchStage)(nil)).Elem()
}

func (e MetricDescriptorMetadataLaunchStage) ToMetricDescriptorMetadataLaunchStageOutput() MetricDescriptorMetadataLaunchStageOutput {
	return pulumi.ToOutput(e).(MetricDescriptorMetadataLaunchStageOutput)
}

func (e MetricDescriptorMetadataLaunchStage) ToMetricDescriptorMetadataLaunchStageOutputWithContext(ctx context.Context) MetricDescriptorMetadataLaunchStageOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MetricDescriptorMetadataLaunchStageOutput)
}

func (e MetricDescriptorMetadataLaunchStage) ToMetricDescriptorMetadataLaunchStagePtrOutput() MetricDescriptorMetadataLaunchStagePtrOutput {
	return e.ToMetricDescriptorMetadataLaunchStagePtrOutputWithContext(context.Background())
}

func (e MetricDescriptorMetadataLaunchStage) ToMetricDescriptorMetadataLaunchStagePtrOutputWithContext(ctx context.Context) MetricDescriptorMetadataLaunchStagePtrOutput {
	return MetricDescriptorMetadataLaunchStage(e).ToMetricDescriptorMetadataLaunchStageOutputWithContext(ctx).ToMetricDescriptorMetadataLaunchStagePtrOutputWithContext(ctx)
}

func (e MetricDescriptorMetadataLaunchStage) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricDescriptorMetadataLaunchStage) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricDescriptorMetadataLaunchStage) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MetricDescriptorMetadataLaunchStage) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MetricDescriptorMetadataLaunchStageOutput struct{ *pulumi.OutputState }

func (MetricDescriptorMetadataLaunchStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptorMetadataLaunchStage)(nil)).Elem()
}

func (o MetricDescriptorMetadataLaunchStageOutput) ToMetricDescriptorMetadataLaunchStageOutput() MetricDescriptorMetadataLaunchStageOutput {
	return o
}

func (o MetricDescriptorMetadataLaunchStageOutput) ToMetricDescriptorMetadataLaunchStageOutputWithContext(ctx context.Context) MetricDescriptorMetadataLaunchStageOutput {
	return o
}

func (o MetricDescriptorMetadataLaunchStageOutput) ToMetricDescriptorMetadataLaunchStagePtrOutput() MetricDescriptorMetadataLaunchStagePtrOutput {
	return o.ToMetricDescriptorMetadataLaunchStagePtrOutputWithContext(context.Background())
}

func (o MetricDescriptorMetadataLaunchStageOutput) ToMetricDescriptorMetadataLaunchStagePtrOutputWithContext(ctx context.Context) MetricDescriptorMetadataLaunchStagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricDescriptorMetadataLaunchStage) *MetricDescriptorMetadataLaunchStage {
		return &v
	}).(MetricDescriptorMetadataLaunchStagePtrOutput)
}

func (o MetricDescriptorMetadataLaunchStageOutput) ToOutput(ctx context.Context) pulumix.Output[MetricDescriptorMetadataLaunchStage] {
	return pulumix.Output[MetricDescriptorMetadataLaunchStage]{
		OutputState: o.OutputState,
	}
}

func (o MetricDescriptorMetadataLaunchStageOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MetricDescriptorMetadataLaunchStageOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricDescriptorMetadataLaunchStage) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MetricDescriptorMetadataLaunchStageOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricDescriptorMetadataLaunchStageOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricDescriptorMetadataLaunchStage) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MetricDescriptorMetadataLaunchStagePtrOutput struct{ *pulumi.OutputState }

func (MetricDescriptorMetadataLaunchStagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricDescriptorMetadataLaunchStage)(nil)).Elem()
}

func (o MetricDescriptorMetadataLaunchStagePtrOutput) ToMetricDescriptorMetadataLaunchStagePtrOutput() MetricDescriptorMetadataLaunchStagePtrOutput {
	return o
}

func (o MetricDescriptorMetadataLaunchStagePtrOutput) ToMetricDescriptorMetadataLaunchStagePtrOutputWithContext(ctx context.Context) MetricDescriptorMetadataLaunchStagePtrOutput {
	return o
}

func (o MetricDescriptorMetadataLaunchStagePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetricDescriptorMetadataLaunchStage] {
	return pulumix.Output[*MetricDescriptorMetadataLaunchStage]{
		OutputState: o.OutputState,
	}
}

func (o MetricDescriptorMetadataLaunchStagePtrOutput) Elem() MetricDescriptorMetadataLaunchStageOutput {
	return o.ApplyT(func(v *MetricDescriptorMetadataLaunchStage) MetricDescriptorMetadataLaunchStage {
		if v != nil {
			return *v
		}
		var ret MetricDescriptorMetadataLaunchStage
		return ret
	}).(MetricDescriptorMetadataLaunchStageOutput)
}

func (o MetricDescriptorMetadataLaunchStagePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricDescriptorMetadataLaunchStagePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MetricDescriptorMetadataLaunchStage) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MetricDescriptorMetadataLaunchStageInput is an input type that accepts MetricDescriptorMetadataLaunchStageArgs and MetricDescriptorMetadataLaunchStageOutput values.
// You can construct a concrete instance of `MetricDescriptorMetadataLaunchStageInput` via:
//
//	MetricDescriptorMetadataLaunchStageArgs{...}
type MetricDescriptorMetadataLaunchStageInput interface {
	pulumi.Input

	ToMetricDescriptorMetadataLaunchStageOutput() MetricDescriptorMetadataLaunchStageOutput
	ToMetricDescriptorMetadataLaunchStageOutputWithContext(context.Context) MetricDescriptorMetadataLaunchStageOutput
}

var metricDescriptorMetadataLaunchStagePtrType = reflect.TypeOf((**MetricDescriptorMetadataLaunchStage)(nil)).Elem()

type MetricDescriptorMetadataLaunchStagePtrInput interface {
	pulumi.Input

	ToMetricDescriptorMetadataLaunchStagePtrOutput() MetricDescriptorMetadataLaunchStagePtrOutput
	ToMetricDescriptorMetadataLaunchStagePtrOutputWithContext(context.Context) MetricDescriptorMetadataLaunchStagePtrOutput
}

type metricDescriptorMetadataLaunchStagePtr string

func MetricDescriptorMetadataLaunchStagePtr(v string) MetricDescriptorMetadataLaunchStagePtrInput {
	return (*metricDescriptorMetadataLaunchStagePtr)(&v)
}

func (*metricDescriptorMetadataLaunchStagePtr) ElementType() reflect.Type {
	return metricDescriptorMetadataLaunchStagePtrType
}

func (in *metricDescriptorMetadataLaunchStagePtr) ToMetricDescriptorMetadataLaunchStagePtrOutput() MetricDescriptorMetadataLaunchStagePtrOutput {
	return pulumi.ToOutput(in).(MetricDescriptorMetadataLaunchStagePtrOutput)
}

func (in *metricDescriptorMetadataLaunchStagePtr) ToMetricDescriptorMetadataLaunchStagePtrOutputWithContext(ctx context.Context) MetricDescriptorMetadataLaunchStagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MetricDescriptorMetadataLaunchStagePtrOutput)
}

func (in *metricDescriptorMetadataLaunchStagePtr) ToOutput(ctx context.Context) pulumix.Output[*MetricDescriptorMetadataLaunchStage] {
	return pulumix.Output[*MetricDescriptorMetadataLaunchStage]{
		OutputState: in.ToMetricDescriptorMetadataLaunchStagePtrOutputWithContext(ctx).OutputState,
	}
}

// Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metric_kind and value_type might not be supported.
type MetricDescriptorMetricKind string

const (
	// Do not use this default value.
	MetricDescriptorMetricKindMetricKindUnspecified = MetricDescriptorMetricKind("METRIC_KIND_UNSPECIFIED")
	// An instantaneous measurement of a value.
	MetricDescriptorMetricKindGauge = MetricDescriptorMetricKind("GAUGE")
	// The change in a value during a time interval.
	MetricDescriptorMetricKindDelta = MetricDescriptorMetricKind("DELTA")
	// A value accumulated over a time interval. Cumulative measurements in a time series should have the same start time and increasing end times, until an event resets the cumulative value to zero and sets a new start time for the following points.
	MetricDescriptorMetricKindCumulative = MetricDescriptorMetricKind("CUMULATIVE")
)

func (MetricDescriptorMetricKind) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptorMetricKind)(nil)).Elem()
}

func (e MetricDescriptorMetricKind) ToMetricDescriptorMetricKindOutput() MetricDescriptorMetricKindOutput {
	return pulumi.ToOutput(e).(MetricDescriptorMetricKindOutput)
}

func (e MetricDescriptorMetricKind) ToMetricDescriptorMetricKindOutputWithContext(ctx context.Context) MetricDescriptorMetricKindOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MetricDescriptorMetricKindOutput)
}

func (e MetricDescriptorMetricKind) ToMetricDescriptorMetricKindPtrOutput() MetricDescriptorMetricKindPtrOutput {
	return e.ToMetricDescriptorMetricKindPtrOutputWithContext(context.Background())
}

func (e MetricDescriptorMetricKind) ToMetricDescriptorMetricKindPtrOutputWithContext(ctx context.Context) MetricDescriptorMetricKindPtrOutput {
	return MetricDescriptorMetricKind(e).ToMetricDescriptorMetricKindOutputWithContext(ctx).ToMetricDescriptorMetricKindPtrOutputWithContext(ctx)
}

func (e MetricDescriptorMetricKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricDescriptorMetricKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricDescriptorMetricKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MetricDescriptorMetricKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MetricDescriptorMetricKindOutput struct{ *pulumi.OutputState }

func (MetricDescriptorMetricKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptorMetricKind)(nil)).Elem()
}

func (o MetricDescriptorMetricKindOutput) ToMetricDescriptorMetricKindOutput() MetricDescriptorMetricKindOutput {
	return o
}

func (o MetricDescriptorMetricKindOutput) ToMetricDescriptorMetricKindOutputWithContext(ctx context.Context) MetricDescriptorMetricKindOutput {
	return o
}

func (o MetricDescriptorMetricKindOutput) ToMetricDescriptorMetricKindPtrOutput() MetricDescriptorMetricKindPtrOutput {
	return o.ToMetricDescriptorMetricKindPtrOutputWithContext(context.Background())
}

func (o MetricDescriptorMetricKindOutput) ToMetricDescriptorMetricKindPtrOutputWithContext(ctx context.Context) MetricDescriptorMetricKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricDescriptorMetricKind) *MetricDescriptorMetricKind {
		return &v
	}).(MetricDescriptorMetricKindPtrOutput)
}

func (o MetricDescriptorMetricKindOutput) ToOutput(ctx context.Context) pulumix.Output[MetricDescriptorMetricKind] {
	return pulumix.Output[MetricDescriptorMetricKind]{
		OutputState: o.OutputState,
	}
}

func (o MetricDescriptorMetricKindOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MetricDescriptorMetricKindOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricDescriptorMetricKind) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MetricDescriptorMetricKindOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricDescriptorMetricKindOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricDescriptorMetricKind) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MetricDescriptorMetricKindPtrOutput struct{ *pulumi.OutputState }

func (MetricDescriptorMetricKindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricDescriptorMetricKind)(nil)).Elem()
}

func (o MetricDescriptorMetricKindPtrOutput) ToMetricDescriptorMetricKindPtrOutput() MetricDescriptorMetricKindPtrOutput {
	return o
}

func (o MetricDescriptorMetricKindPtrOutput) ToMetricDescriptorMetricKindPtrOutputWithContext(ctx context.Context) MetricDescriptorMetricKindPtrOutput {
	return o
}

func (o MetricDescriptorMetricKindPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetricDescriptorMetricKind] {
	return pulumix.Output[*MetricDescriptorMetricKind]{
		OutputState: o.OutputState,
	}
}

func (o MetricDescriptorMetricKindPtrOutput) Elem() MetricDescriptorMetricKindOutput {
	return o.ApplyT(func(v *MetricDescriptorMetricKind) MetricDescriptorMetricKind {
		if v != nil {
			return *v
		}
		var ret MetricDescriptorMetricKind
		return ret
	}).(MetricDescriptorMetricKindOutput)
}

func (o MetricDescriptorMetricKindPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricDescriptorMetricKindPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MetricDescriptorMetricKind) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MetricDescriptorMetricKindInput is an input type that accepts MetricDescriptorMetricKindArgs and MetricDescriptorMetricKindOutput values.
// You can construct a concrete instance of `MetricDescriptorMetricKindInput` via:
//
//	MetricDescriptorMetricKindArgs{...}
type MetricDescriptorMetricKindInput interface {
	pulumi.Input

	ToMetricDescriptorMetricKindOutput() MetricDescriptorMetricKindOutput
	ToMetricDescriptorMetricKindOutputWithContext(context.Context) MetricDescriptorMetricKindOutput
}

var metricDescriptorMetricKindPtrType = reflect.TypeOf((**MetricDescriptorMetricKind)(nil)).Elem()

type MetricDescriptorMetricKindPtrInput interface {
	pulumi.Input

	ToMetricDescriptorMetricKindPtrOutput() MetricDescriptorMetricKindPtrOutput
	ToMetricDescriptorMetricKindPtrOutputWithContext(context.Context) MetricDescriptorMetricKindPtrOutput
}

type metricDescriptorMetricKindPtr string

func MetricDescriptorMetricKindPtr(v string) MetricDescriptorMetricKindPtrInput {
	return (*metricDescriptorMetricKindPtr)(&v)
}

func (*metricDescriptorMetricKindPtr) ElementType() reflect.Type {
	return metricDescriptorMetricKindPtrType
}

func (in *metricDescriptorMetricKindPtr) ToMetricDescriptorMetricKindPtrOutput() MetricDescriptorMetricKindPtrOutput {
	return pulumi.ToOutput(in).(MetricDescriptorMetricKindPtrOutput)
}

func (in *metricDescriptorMetricKindPtr) ToMetricDescriptorMetricKindPtrOutputWithContext(ctx context.Context) MetricDescriptorMetricKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MetricDescriptorMetricKindPtrOutput)
}

func (in *metricDescriptorMetricKindPtr) ToOutput(ctx context.Context) pulumix.Output[*MetricDescriptorMetricKind] {
	return pulumix.Output[*MetricDescriptorMetricKind]{
		OutputState: in.ToMetricDescriptorMetricKindPtrOutputWithContext(ctx).OutputState,
	}
}

// Whether the measurement is an integer, a floating-point number, etc. Some combinations of metric_kind and value_type might not be supported.
type MetricDescriptorValueType string

const (
	// Do not use this default value.
	MetricDescriptorValueTypeValueTypeUnspecified = MetricDescriptorValueType("VALUE_TYPE_UNSPECIFIED")
	// The value is a boolean. This value type can be used only if the metric kind is GAUGE.
	MetricDescriptorValueTypeBool = MetricDescriptorValueType("BOOL")
	// The value is a signed 64-bit integer.
	MetricDescriptorValueTypeInt64 = MetricDescriptorValueType("INT64")
	// The value is a double precision floating point number.
	MetricDescriptorValueTypeDouble = MetricDescriptorValueType("DOUBLE")
	// The value is a text string. This value type can be used only if the metric kind is GAUGE.
	MetricDescriptorValueTypeString = MetricDescriptorValueType("STRING")
	// The value is a Distribution.
	MetricDescriptorValueTypeDistribution = MetricDescriptorValueType("DISTRIBUTION")
	// The value is money.
	MetricDescriptorValueTypeMoney = MetricDescriptorValueType("MONEY")
)

func (MetricDescriptorValueType) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptorValueType)(nil)).Elem()
}

func (e MetricDescriptorValueType) ToMetricDescriptorValueTypeOutput() MetricDescriptorValueTypeOutput {
	return pulumi.ToOutput(e).(MetricDescriptorValueTypeOutput)
}

func (e MetricDescriptorValueType) ToMetricDescriptorValueTypeOutputWithContext(ctx context.Context) MetricDescriptorValueTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MetricDescriptorValueTypeOutput)
}

func (e MetricDescriptorValueType) ToMetricDescriptorValueTypePtrOutput() MetricDescriptorValueTypePtrOutput {
	return e.ToMetricDescriptorValueTypePtrOutputWithContext(context.Background())
}

func (e MetricDescriptorValueType) ToMetricDescriptorValueTypePtrOutputWithContext(ctx context.Context) MetricDescriptorValueTypePtrOutput {
	return MetricDescriptorValueType(e).ToMetricDescriptorValueTypeOutputWithContext(ctx).ToMetricDescriptorValueTypePtrOutputWithContext(ctx)
}

func (e MetricDescriptorValueType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricDescriptorValueType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricDescriptorValueType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MetricDescriptorValueType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MetricDescriptorValueTypeOutput struct{ *pulumi.OutputState }

func (MetricDescriptorValueTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptorValueType)(nil)).Elem()
}

func (o MetricDescriptorValueTypeOutput) ToMetricDescriptorValueTypeOutput() MetricDescriptorValueTypeOutput {
	return o
}

func (o MetricDescriptorValueTypeOutput) ToMetricDescriptorValueTypeOutputWithContext(ctx context.Context) MetricDescriptorValueTypeOutput {
	return o
}

func (o MetricDescriptorValueTypeOutput) ToMetricDescriptorValueTypePtrOutput() MetricDescriptorValueTypePtrOutput {
	return o.ToMetricDescriptorValueTypePtrOutputWithContext(context.Background())
}

func (o MetricDescriptorValueTypeOutput) ToMetricDescriptorValueTypePtrOutputWithContext(ctx context.Context) MetricDescriptorValueTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricDescriptorValueType) *MetricDescriptorValueType {
		return &v
	}).(MetricDescriptorValueTypePtrOutput)
}

func (o MetricDescriptorValueTypeOutput) ToOutput(ctx context.Context) pulumix.Output[MetricDescriptorValueType] {
	return pulumix.Output[MetricDescriptorValueType]{
		OutputState: o.OutputState,
	}
}

func (o MetricDescriptorValueTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MetricDescriptorValueTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricDescriptorValueType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MetricDescriptorValueTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricDescriptorValueTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricDescriptorValueType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MetricDescriptorValueTypePtrOutput struct{ *pulumi.OutputState }

func (MetricDescriptorValueTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricDescriptorValueType)(nil)).Elem()
}

func (o MetricDescriptorValueTypePtrOutput) ToMetricDescriptorValueTypePtrOutput() MetricDescriptorValueTypePtrOutput {
	return o
}

func (o MetricDescriptorValueTypePtrOutput) ToMetricDescriptorValueTypePtrOutputWithContext(ctx context.Context) MetricDescriptorValueTypePtrOutput {
	return o
}

func (o MetricDescriptorValueTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetricDescriptorValueType] {
	return pulumix.Output[*MetricDescriptorValueType]{
		OutputState: o.OutputState,
	}
}

func (o MetricDescriptorValueTypePtrOutput) Elem() MetricDescriptorValueTypeOutput {
	return o.ApplyT(func(v *MetricDescriptorValueType) MetricDescriptorValueType {
		if v != nil {
			return *v
		}
		var ret MetricDescriptorValueType
		return ret
	}).(MetricDescriptorValueTypeOutput)
}

func (o MetricDescriptorValueTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricDescriptorValueTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MetricDescriptorValueType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MetricDescriptorValueTypeInput is an input type that accepts MetricDescriptorValueTypeArgs and MetricDescriptorValueTypeOutput values.
// You can construct a concrete instance of `MetricDescriptorValueTypeInput` via:
//
//	MetricDescriptorValueTypeArgs{...}
type MetricDescriptorValueTypeInput interface {
	pulumi.Input

	ToMetricDescriptorValueTypeOutput() MetricDescriptorValueTypeOutput
	ToMetricDescriptorValueTypeOutputWithContext(context.Context) MetricDescriptorValueTypeOutput
}

var metricDescriptorValueTypePtrType = reflect.TypeOf((**MetricDescriptorValueType)(nil)).Elem()

type MetricDescriptorValueTypePtrInput interface {
	pulumi.Input

	ToMetricDescriptorValueTypePtrOutput() MetricDescriptorValueTypePtrOutput
	ToMetricDescriptorValueTypePtrOutputWithContext(context.Context) MetricDescriptorValueTypePtrOutput
}

type metricDescriptorValueTypePtr string

func MetricDescriptorValueTypePtr(v string) MetricDescriptorValueTypePtrInput {
	return (*metricDescriptorValueTypePtr)(&v)
}

func (*metricDescriptorValueTypePtr) ElementType() reflect.Type {
	return metricDescriptorValueTypePtrType
}

func (in *metricDescriptorValueTypePtr) ToMetricDescriptorValueTypePtrOutput() MetricDescriptorValueTypePtrOutput {
	return pulumi.ToOutput(in).(MetricDescriptorValueTypePtrOutput)
}

func (in *metricDescriptorValueTypePtr) ToMetricDescriptorValueTypePtrOutputWithContext(ctx context.Context) MetricDescriptorValueTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MetricDescriptorValueTypePtrOutput)
}

func (in *metricDescriptorValueTypePtr) ToOutput(ctx context.Context) pulumix.Output[*MetricDescriptorValueType] {
	return pulumix.Output[*MetricDescriptorValueType]{
		OutputState: in.ToMetricDescriptorValueTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The comparison to apply between the time series (indicated by filter and aggregation) and the threshold (indicated by threshold_value). The comparison is applied on each time series, with the time series on the left-hand side and the threshold on the right-hand side.Only COMPARISON_LT and COMPARISON_GT are supported currently.
type MetricThresholdComparison string

const (
	// No ordering relationship is specified.
	MetricThresholdComparisonComparisonUnspecified = MetricThresholdComparison("COMPARISON_UNSPECIFIED")
	// True if the left argument is greater than the right argument.
	MetricThresholdComparisonComparisonGt = MetricThresholdComparison("COMPARISON_GT")
	// True if the left argument is greater than or equal to the right argument.
	MetricThresholdComparisonComparisonGe = MetricThresholdComparison("COMPARISON_GE")
	// True if the left argument is less than the right argument.
	MetricThresholdComparisonComparisonLt = MetricThresholdComparison("COMPARISON_LT")
	// True if the left argument is less than or equal to the right argument.
	MetricThresholdComparisonComparisonLe = MetricThresholdComparison("COMPARISON_LE")
	// True if the left argument is equal to the right argument.
	MetricThresholdComparisonComparisonEq = MetricThresholdComparison("COMPARISON_EQ")
	// True if the left argument is not equal to the right argument.
	MetricThresholdComparisonComparisonNe = MetricThresholdComparison("COMPARISON_NE")
)

func (MetricThresholdComparison) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricThresholdComparison)(nil)).Elem()
}

func (e MetricThresholdComparison) ToMetricThresholdComparisonOutput() MetricThresholdComparisonOutput {
	return pulumi.ToOutput(e).(MetricThresholdComparisonOutput)
}

func (e MetricThresholdComparison) ToMetricThresholdComparisonOutputWithContext(ctx context.Context) MetricThresholdComparisonOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MetricThresholdComparisonOutput)
}

func (e MetricThresholdComparison) ToMetricThresholdComparisonPtrOutput() MetricThresholdComparisonPtrOutput {
	return e.ToMetricThresholdComparisonPtrOutputWithContext(context.Background())
}

func (e MetricThresholdComparison) ToMetricThresholdComparisonPtrOutputWithContext(ctx context.Context) MetricThresholdComparisonPtrOutput {
	return MetricThresholdComparison(e).ToMetricThresholdComparisonOutputWithContext(ctx).ToMetricThresholdComparisonPtrOutputWithContext(ctx)
}

func (e MetricThresholdComparison) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricThresholdComparison) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricThresholdComparison) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MetricThresholdComparison) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MetricThresholdComparisonOutput struct{ *pulumi.OutputState }

func (MetricThresholdComparisonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricThresholdComparison)(nil)).Elem()
}

func (o MetricThresholdComparisonOutput) ToMetricThresholdComparisonOutput() MetricThresholdComparisonOutput {
	return o
}

func (o MetricThresholdComparisonOutput) ToMetricThresholdComparisonOutputWithContext(ctx context.Context) MetricThresholdComparisonOutput {
	return o
}

func (o MetricThresholdComparisonOutput) ToMetricThresholdComparisonPtrOutput() MetricThresholdComparisonPtrOutput {
	return o.ToMetricThresholdComparisonPtrOutputWithContext(context.Background())
}

func (o MetricThresholdComparisonOutput) ToMetricThresholdComparisonPtrOutputWithContext(ctx context.Context) MetricThresholdComparisonPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricThresholdComparison) *MetricThresholdComparison {
		return &v
	}).(MetricThresholdComparisonPtrOutput)
}

func (o MetricThresholdComparisonOutput) ToOutput(ctx context.Context) pulumix.Output[MetricThresholdComparison] {
	return pulumix.Output[MetricThresholdComparison]{
		OutputState: o.OutputState,
	}
}

func (o MetricThresholdComparisonOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MetricThresholdComparisonOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricThresholdComparison) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MetricThresholdComparisonOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricThresholdComparisonOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricThresholdComparison) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MetricThresholdComparisonPtrOutput struct{ *pulumi.OutputState }

func (MetricThresholdComparisonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricThresholdComparison)(nil)).Elem()
}

func (o MetricThresholdComparisonPtrOutput) ToMetricThresholdComparisonPtrOutput() MetricThresholdComparisonPtrOutput {
	return o
}

func (o MetricThresholdComparisonPtrOutput) ToMetricThresholdComparisonPtrOutputWithContext(ctx context.Context) MetricThresholdComparisonPtrOutput {
	return o
}

func (o MetricThresholdComparisonPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetricThresholdComparison] {
	return pulumix.Output[*MetricThresholdComparison]{
		OutputState: o.OutputState,
	}
}

func (o MetricThresholdComparisonPtrOutput) Elem() MetricThresholdComparisonOutput {
	return o.ApplyT(func(v *MetricThresholdComparison) MetricThresholdComparison {
		if v != nil {
			return *v
		}
		var ret MetricThresholdComparison
		return ret
	}).(MetricThresholdComparisonOutput)
}

func (o MetricThresholdComparisonPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricThresholdComparisonPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MetricThresholdComparison) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MetricThresholdComparisonInput is an input type that accepts MetricThresholdComparisonArgs and MetricThresholdComparisonOutput values.
// You can construct a concrete instance of `MetricThresholdComparisonInput` via:
//
//	MetricThresholdComparisonArgs{...}
type MetricThresholdComparisonInput interface {
	pulumi.Input

	ToMetricThresholdComparisonOutput() MetricThresholdComparisonOutput
	ToMetricThresholdComparisonOutputWithContext(context.Context) MetricThresholdComparisonOutput
}

var metricThresholdComparisonPtrType = reflect.TypeOf((**MetricThresholdComparison)(nil)).Elem()

type MetricThresholdComparisonPtrInput interface {
	pulumi.Input

	ToMetricThresholdComparisonPtrOutput() MetricThresholdComparisonPtrOutput
	ToMetricThresholdComparisonPtrOutputWithContext(context.Context) MetricThresholdComparisonPtrOutput
}

type metricThresholdComparisonPtr string

func MetricThresholdComparisonPtr(v string) MetricThresholdComparisonPtrInput {
	return (*metricThresholdComparisonPtr)(&v)
}

func (*metricThresholdComparisonPtr) ElementType() reflect.Type {
	return metricThresholdComparisonPtrType
}

func (in *metricThresholdComparisonPtr) ToMetricThresholdComparisonPtrOutput() MetricThresholdComparisonPtrOutput {
	return pulumi.ToOutput(in).(MetricThresholdComparisonPtrOutput)
}

func (in *metricThresholdComparisonPtr) ToMetricThresholdComparisonPtrOutputWithContext(ctx context.Context) MetricThresholdComparisonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MetricThresholdComparisonPtrOutput)
}

func (in *metricThresholdComparisonPtr) ToOutput(ctx context.Context) pulumix.Output[*MetricThresholdComparison] {
	return pulumix.Output[*MetricThresholdComparison]{
		OutputState: in.ToMetricThresholdComparisonPtrOutputWithContext(ctx).OutputState,
	}
}

// A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.
type MetricThresholdEvaluationMissingData string

const (
	// An unspecified evaluation missing data option. Equivalent to EVALUATION_MISSING_DATA_NO_OP.
	MetricThresholdEvaluationMissingDataEvaluationMissingDataUnspecified = MetricThresholdEvaluationMissingData("EVALUATION_MISSING_DATA_UNSPECIFIED")
	// If there is no data to evaluate the condition, then evaluate the condition as false.
	MetricThresholdEvaluationMissingDataEvaluationMissingDataInactive = MetricThresholdEvaluationMissingData("EVALUATION_MISSING_DATA_INACTIVE")
	// If there is no data to evaluate the condition, then evaluate the condition as true.
	MetricThresholdEvaluationMissingDataEvaluationMissingDataActive = MetricThresholdEvaluationMissingData("EVALUATION_MISSING_DATA_ACTIVE")
	// Do not evaluate the condition to any value if there is no data.
	MetricThresholdEvaluationMissingDataEvaluationMissingDataNoOp = MetricThresholdEvaluationMissingData("EVALUATION_MISSING_DATA_NO_OP")
)

func (MetricThresholdEvaluationMissingData) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricThresholdEvaluationMissingData)(nil)).Elem()
}

func (e MetricThresholdEvaluationMissingData) ToMetricThresholdEvaluationMissingDataOutput() MetricThresholdEvaluationMissingDataOutput {
	return pulumi.ToOutput(e).(MetricThresholdEvaluationMissingDataOutput)
}

func (e MetricThresholdEvaluationMissingData) ToMetricThresholdEvaluationMissingDataOutputWithContext(ctx context.Context) MetricThresholdEvaluationMissingDataOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MetricThresholdEvaluationMissingDataOutput)
}

func (e MetricThresholdEvaluationMissingData) ToMetricThresholdEvaluationMissingDataPtrOutput() MetricThresholdEvaluationMissingDataPtrOutput {
	return e.ToMetricThresholdEvaluationMissingDataPtrOutputWithContext(context.Background())
}

func (e MetricThresholdEvaluationMissingData) ToMetricThresholdEvaluationMissingDataPtrOutputWithContext(ctx context.Context) MetricThresholdEvaluationMissingDataPtrOutput {
	return MetricThresholdEvaluationMissingData(e).ToMetricThresholdEvaluationMissingDataOutputWithContext(ctx).ToMetricThresholdEvaluationMissingDataPtrOutputWithContext(ctx)
}

func (e MetricThresholdEvaluationMissingData) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricThresholdEvaluationMissingData) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricThresholdEvaluationMissingData) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MetricThresholdEvaluationMissingData) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MetricThresholdEvaluationMissingDataOutput struct{ *pulumi.OutputState }

func (MetricThresholdEvaluationMissingDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricThresholdEvaluationMissingData)(nil)).Elem()
}

func (o MetricThresholdEvaluationMissingDataOutput) ToMetricThresholdEvaluationMissingDataOutput() MetricThresholdEvaluationMissingDataOutput {
	return o
}

func (o MetricThresholdEvaluationMissingDataOutput) ToMetricThresholdEvaluationMissingDataOutputWithContext(ctx context.Context) MetricThresholdEvaluationMissingDataOutput {
	return o
}

func (o MetricThresholdEvaluationMissingDataOutput) ToMetricThresholdEvaluationMissingDataPtrOutput() MetricThresholdEvaluationMissingDataPtrOutput {
	return o.ToMetricThresholdEvaluationMissingDataPtrOutputWithContext(context.Background())
}

func (o MetricThresholdEvaluationMissingDataOutput) ToMetricThresholdEvaluationMissingDataPtrOutputWithContext(ctx context.Context) MetricThresholdEvaluationMissingDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricThresholdEvaluationMissingData) *MetricThresholdEvaluationMissingData {
		return &v
	}).(MetricThresholdEvaluationMissingDataPtrOutput)
}

func (o MetricThresholdEvaluationMissingDataOutput) ToOutput(ctx context.Context) pulumix.Output[MetricThresholdEvaluationMissingData] {
	return pulumix.Output[MetricThresholdEvaluationMissingData]{
		OutputState: o.OutputState,
	}
}

func (o MetricThresholdEvaluationMissingDataOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MetricThresholdEvaluationMissingDataOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricThresholdEvaluationMissingData) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MetricThresholdEvaluationMissingDataOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricThresholdEvaluationMissingDataOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricThresholdEvaluationMissingData) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MetricThresholdEvaluationMissingDataPtrOutput struct{ *pulumi.OutputState }

func (MetricThresholdEvaluationMissingDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricThresholdEvaluationMissingData)(nil)).Elem()
}

func (o MetricThresholdEvaluationMissingDataPtrOutput) ToMetricThresholdEvaluationMissingDataPtrOutput() MetricThresholdEvaluationMissingDataPtrOutput {
	return o
}

func (o MetricThresholdEvaluationMissingDataPtrOutput) ToMetricThresholdEvaluationMissingDataPtrOutputWithContext(ctx context.Context) MetricThresholdEvaluationMissingDataPtrOutput {
	return o
}

func (o MetricThresholdEvaluationMissingDataPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetricThresholdEvaluationMissingData] {
	return pulumix.Output[*MetricThresholdEvaluationMissingData]{
		OutputState: o.OutputState,
	}
}

func (o MetricThresholdEvaluationMissingDataPtrOutput) Elem() MetricThresholdEvaluationMissingDataOutput {
	return o.ApplyT(func(v *MetricThresholdEvaluationMissingData) MetricThresholdEvaluationMissingData {
		if v != nil {
			return *v
		}
		var ret MetricThresholdEvaluationMissingData
		return ret
	}).(MetricThresholdEvaluationMissingDataOutput)
}

func (o MetricThresholdEvaluationMissingDataPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricThresholdEvaluationMissingDataPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MetricThresholdEvaluationMissingData) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MetricThresholdEvaluationMissingDataInput is an input type that accepts MetricThresholdEvaluationMissingDataArgs and MetricThresholdEvaluationMissingDataOutput values.
// You can construct a concrete instance of `MetricThresholdEvaluationMissingDataInput` via:
//
//	MetricThresholdEvaluationMissingDataArgs{...}
type MetricThresholdEvaluationMissingDataInput interface {
	pulumi.Input

	ToMetricThresholdEvaluationMissingDataOutput() MetricThresholdEvaluationMissingDataOutput
	ToMetricThresholdEvaluationMissingDataOutputWithContext(context.Context) MetricThresholdEvaluationMissingDataOutput
}

var metricThresholdEvaluationMissingDataPtrType = reflect.TypeOf((**MetricThresholdEvaluationMissingData)(nil)).Elem()

type MetricThresholdEvaluationMissingDataPtrInput interface {
	pulumi.Input

	ToMetricThresholdEvaluationMissingDataPtrOutput() MetricThresholdEvaluationMissingDataPtrOutput
	ToMetricThresholdEvaluationMissingDataPtrOutputWithContext(context.Context) MetricThresholdEvaluationMissingDataPtrOutput
}

type metricThresholdEvaluationMissingDataPtr string

func MetricThresholdEvaluationMissingDataPtr(v string) MetricThresholdEvaluationMissingDataPtrInput {
	return (*metricThresholdEvaluationMissingDataPtr)(&v)
}

func (*metricThresholdEvaluationMissingDataPtr) ElementType() reflect.Type {
	return metricThresholdEvaluationMissingDataPtrType
}

func (in *metricThresholdEvaluationMissingDataPtr) ToMetricThresholdEvaluationMissingDataPtrOutput() MetricThresholdEvaluationMissingDataPtrOutput {
	return pulumi.ToOutput(in).(MetricThresholdEvaluationMissingDataPtrOutput)
}

func (in *metricThresholdEvaluationMissingDataPtr) ToMetricThresholdEvaluationMissingDataPtrOutputWithContext(ctx context.Context) MetricThresholdEvaluationMissingDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MetricThresholdEvaluationMissingDataPtrOutput)
}

func (in *metricThresholdEvaluationMissingDataPtr) ToOutput(ctx context.Context) pulumix.Output[*MetricThresholdEvaluationMissingData] {
	return pulumix.Output[*MetricThresholdEvaluationMissingData]{
		OutputState: in.ToMetricThresholdEvaluationMissingDataPtrOutputWithContext(ctx).OutputState,
	}
}

// A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.
type MonitoringQueryLanguageConditionEvaluationMissingData string

const (
	// An unspecified evaluation missing data option. Equivalent to EVALUATION_MISSING_DATA_NO_OP.
	MonitoringQueryLanguageConditionEvaluationMissingDataEvaluationMissingDataUnspecified = MonitoringQueryLanguageConditionEvaluationMissingData("EVALUATION_MISSING_DATA_UNSPECIFIED")
	// If there is no data to evaluate the condition, then evaluate the condition as false.
	MonitoringQueryLanguageConditionEvaluationMissingDataEvaluationMissingDataInactive = MonitoringQueryLanguageConditionEvaluationMissingData("EVALUATION_MISSING_DATA_INACTIVE")
	// If there is no data to evaluate the condition, then evaluate the condition as true.
	MonitoringQueryLanguageConditionEvaluationMissingDataEvaluationMissingDataActive = MonitoringQueryLanguageConditionEvaluationMissingData("EVALUATION_MISSING_DATA_ACTIVE")
	// Do not evaluate the condition to any value if there is no data.
	MonitoringQueryLanguageConditionEvaluationMissingDataEvaluationMissingDataNoOp = MonitoringQueryLanguageConditionEvaluationMissingData("EVALUATION_MISSING_DATA_NO_OP")
)

func (MonitoringQueryLanguageConditionEvaluationMissingData) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringQueryLanguageConditionEvaluationMissingData)(nil)).Elem()
}

func (e MonitoringQueryLanguageConditionEvaluationMissingData) ToMonitoringQueryLanguageConditionEvaluationMissingDataOutput() MonitoringQueryLanguageConditionEvaluationMissingDataOutput {
	return pulumi.ToOutput(e).(MonitoringQueryLanguageConditionEvaluationMissingDataOutput)
}

func (e MonitoringQueryLanguageConditionEvaluationMissingData) ToMonitoringQueryLanguageConditionEvaluationMissingDataOutputWithContext(ctx context.Context) MonitoringQueryLanguageConditionEvaluationMissingDataOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MonitoringQueryLanguageConditionEvaluationMissingDataOutput)
}

func (e MonitoringQueryLanguageConditionEvaluationMissingData) ToMonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput() MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput {
	return e.ToMonitoringQueryLanguageConditionEvaluationMissingDataPtrOutputWithContext(context.Background())
}

func (e MonitoringQueryLanguageConditionEvaluationMissingData) ToMonitoringQueryLanguageConditionEvaluationMissingDataPtrOutputWithContext(ctx context.Context) MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput {
	return MonitoringQueryLanguageConditionEvaluationMissingData(e).ToMonitoringQueryLanguageConditionEvaluationMissingDataOutputWithContext(ctx).ToMonitoringQueryLanguageConditionEvaluationMissingDataPtrOutputWithContext(ctx)
}

func (e MonitoringQueryLanguageConditionEvaluationMissingData) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MonitoringQueryLanguageConditionEvaluationMissingData) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MonitoringQueryLanguageConditionEvaluationMissingData) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MonitoringQueryLanguageConditionEvaluationMissingData) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MonitoringQueryLanguageConditionEvaluationMissingDataOutput struct{ *pulumi.OutputState }

func (MonitoringQueryLanguageConditionEvaluationMissingDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringQueryLanguageConditionEvaluationMissingData)(nil)).Elem()
}

func (o MonitoringQueryLanguageConditionEvaluationMissingDataOutput) ToMonitoringQueryLanguageConditionEvaluationMissingDataOutput() MonitoringQueryLanguageConditionEvaluationMissingDataOutput {
	return o
}

func (o MonitoringQueryLanguageConditionEvaluationMissingDataOutput) ToMonitoringQueryLanguageConditionEvaluationMissingDataOutputWithContext(ctx context.Context) MonitoringQueryLanguageConditionEvaluationMissingDataOutput {
	return o
}

func (o MonitoringQueryLanguageConditionEvaluationMissingDataOutput) ToMonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput() MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput {
	return o.ToMonitoringQueryLanguageConditionEvaluationMissingDataPtrOutputWithContext(context.Background())
}

func (o MonitoringQueryLanguageConditionEvaluationMissingDataOutput) ToMonitoringQueryLanguageConditionEvaluationMissingDataPtrOutputWithContext(ctx context.Context) MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitoringQueryLanguageConditionEvaluationMissingData) *MonitoringQueryLanguageConditionEvaluationMissingData {
		return &v
	}).(MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput)
}

func (o MonitoringQueryLanguageConditionEvaluationMissingDataOutput) ToOutput(ctx context.Context) pulumix.Output[MonitoringQueryLanguageConditionEvaluationMissingData] {
	return pulumix.Output[MonitoringQueryLanguageConditionEvaluationMissingData]{
		OutputState: o.OutputState,
	}
}

func (o MonitoringQueryLanguageConditionEvaluationMissingDataOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MonitoringQueryLanguageConditionEvaluationMissingDataOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MonitoringQueryLanguageConditionEvaluationMissingData) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MonitoringQueryLanguageConditionEvaluationMissingDataOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MonitoringQueryLanguageConditionEvaluationMissingDataOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MonitoringQueryLanguageConditionEvaluationMissingData) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput struct{ *pulumi.OutputState }

func (MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringQueryLanguageConditionEvaluationMissingData)(nil)).Elem()
}

func (o MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput) ToMonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput() MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput {
	return o
}

func (o MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput) ToMonitoringQueryLanguageConditionEvaluationMissingDataPtrOutputWithContext(ctx context.Context) MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput {
	return o
}

func (o MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MonitoringQueryLanguageConditionEvaluationMissingData] {
	return pulumix.Output[*MonitoringQueryLanguageConditionEvaluationMissingData]{
		OutputState: o.OutputState,
	}
}

func (o MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput) Elem() MonitoringQueryLanguageConditionEvaluationMissingDataOutput {
	return o.ApplyT(func(v *MonitoringQueryLanguageConditionEvaluationMissingData) MonitoringQueryLanguageConditionEvaluationMissingData {
		if v != nil {
			return *v
		}
		var ret MonitoringQueryLanguageConditionEvaluationMissingData
		return ret
	}).(MonitoringQueryLanguageConditionEvaluationMissingDataOutput)
}

func (o MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MonitoringQueryLanguageConditionEvaluationMissingData) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MonitoringQueryLanguageConditionEvaluationMissingDataInput is an input type that accepts MonitoringQueryLanguageConditionEvaluationMissingDataArgs and MonitoringQueryLanguageConditionEvaluationMissingDataOutput values.
// You can construct a concrete instance of `MonitoringQueryLanguageConditionEvaluationMissingDataInput` via:
//
//	MonitoringQueryLanguageConditionEvaluationMissingDataArgs{...}
type MonitoringQueryLanguageConditionEvaluationMissingDataInput interface {
	pulumi.Input

	ToMonitoringQueryLanguageConditionEvaluationMissingDataOutput() MonitoringQueryLanguageConditionEvaluationMissingDataOutput
	ToMonitoringQueryLanguageConditionEvaluationMissingDataOutputWithContext(context.Context) MonitoringQueryLanguageConditionEvaluationMissingDataOutput
}

var monitoringQueryLanguageConditionEvaluationMissingDataPtrType = reflect.TypeOf((**MonitoringQueryLanguageConditionEvaluationMissingData)(nil)).Elem()

type MonitoringQueryLanguageConditionEvaluationMissingDataPtrInput interface {
	pulumi.Input

	ToMonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput() MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput
	ToMonitoringQueryLanguageConditionEvaluationMissingDataPtrOutputWithContext(context.Context) MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput
}

type monitoringQueryLanguageConditionEvaluationMissingDataPtr string

func MonitoringQueryLanguageConditionEvaluationMissingDataPtr(v string) MonitoringQueryLanguageConditionEvaluationMissingDataPtrInput {
	return (*monitoringQueryLanguageConditionEvaluationMissingDataPtr)(&v)
}

func (*monitoringQueryLanguageConditionEvaluationMissingDataPtr) ElementType() reflect.Type {
	return monitoringQueryLanguageConditionEvaluationMissingDataPtrType
}

func (in *monitoringQueryLanguageConditionEvaluationMissingDataPtr) ToMonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput() MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput {
	return pulumi.ToOutput(in).(MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput)
}

func (in *monitoringQueryLanguageConditionEvaluationMissingDataPtr) ToMonitoringQueryLanguageConditionEvaluationMissingDataPtrOutputWithContext(ctx context.Context) MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput)
}

func (in *monitoringQueryLanguageConditionEvaluationMissingDataPtr) ToOutput(ctx context.Context) pulumix.Output[*MonitoringQueryLanguageConditionEvaluationMissingData] {
	return pulumix.Output[*MonitoringQueryLanguageConditionEvaluationMissingData]{
		OutputState: in.ToMonitoringQueryLanguageConditionEvaluationMissingDataPtrOutputWithContext(ctx).OutputState,
	}
}

// Indicates whether this channel has been verified or not. On a ListNotificationChannels or GetNotificationChannel operation, this field is expected to be populated.If the value is UNVERIFIED, then it indicates that the channel is non-functioning (it both requires verification and lacks verification); otherwise, it is assumed that the channel works.If the channel is neither VERIFIED nor UNVERIFIED, it implies that the channel is of a type that does not require verification or that this specific channel has been exempted from verification because it was created prior to verification being required for channels of this type.This field cannot be modified using a standard UpdateNotificationChannel operation. To change the value of this field, you must call VerifyNotificationChannel.
type NotificationChannelVerificationStatus string

const (
	// Sentinel value used to indicate that the state is unknown, omitted, or is not applicable (as in the case of channels that neither support nor require verification in order to function).
	NotificationChannelVerificationStatusVerificationStatusUnspecified = NotificationChannelVerificationStatus("VERIFICATION_STATUS_UNSPECIFIED")
	// The channel has yet to be verified and requires verification to function. Note that this state also applies to the case where the verification process has been initiated by sending a verification code but where the verification code has not been submitted to complete the process.
	NotificationChannelVerificationStatusUnverified = NotificationChannelVerificationStatus("UNVERIFIED")
	// It has been proven that notifications can be received on this notification channel and that someone on the project has access to messages that are delivered to that channel.
	NotificationChannelVerificationStatusVerified = NotificationChannelVerificationStatus("VERIFIED")
)

func (NotificationChannelVerificationStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationChannelVerificationStatus)(nil)).Elem()
}

func (e NotificationChannelVerificationStatus) ToNotificationChannelVerificationStatusOutput() NotificationChannelVerificationStatusOutput {
	return pulumi.ToOutput(e).(NotificationChannelVerificationStatusOutput)
}

func (e NotificationChannelVerificationStatus) ToNotificationChannelVerificationStatusOutputWithContext(ctx context.Context) NotificationChannelVerificationStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NotificationChannelVerificationStatusOutput)
}

func (e NotificationChannelVerificationStatus) ToNotificationChannelVerificationStatusPtrOutput() NotificationChannelVerificationStatusPtrOutput {
	return e.ToNotificationChannelVerificationStatusPtrOutputWithContext(context.Background())
}

func (e NotificationChannelVerificationStatus) ToNotificationChannelVerificationStatusPtrOutputWithContext(ctx context.Context) NotificationChannelVerificationStatusPtrOutput {
	return NotificationChannelVerificationStatus(e).ToNotificationChannelVerificationStatusOutputWithContext(ctx).ToNotificationChannelVerificationStatusPtrOutputWithContext(ctx)
}

func (e NotificationChannelVerificationStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NotificationChannelVerificationStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NotificationChannelVerificationStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NotificationChannelVerificationStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NotificationChannelVerificationStatusOutput struct{ *pulumi.OutputState }

func (NotificationChannelVerificationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationChannelVerificationStatus)(nil)).Elem()
}

func (o NotificationChannelVerificationStatusOutput) ToNotificationChannelVerificationStatusOutput() NotificationChannelVerificationStatusOutput {
	return o
}

func (o NotificationChannelVerificationStatusOutput) ToNotificationChannelVerificationStatusOutputWithContext(ctx context.Context) NotificationChannelVerificationStatusOutput {
	return o
}

func (o NotificationChannelVerificationStatusOutput) ToNotificationChannelVerificationStatusPtrOutput() NotificationChannelVerificationStatusPtrOutput {
	return o.ToNotificationChannelVerificationStatusPtrOutputWithContext(context.Background())
}

func (o NotificationChannelVerificationStatusOutput) ToNotificationChannelVerificationStatusPtrOutputWithContext(ctx context.Context) NotificationChannelVerificationStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotificationChannelVerificationStatus) *NotificationChannelVerificationStatus {
		return &v
	}).(NotificationChannelVerificationStatusPtrOutput)
}

func (o NotificationChannelVerificationStatusOutput) ToOutput(ctx context.Context) pulumix.Output[NotificationChannelVerificationStatus] {
	return pulumix.Output[NotificationChannelVerificationStatus]{
		OutputState: o.OutputState,
	}
}

func (o NotificationChannelVerificationStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NotificationChannelVerificationStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NotificationChannelVerificationStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NotificationChannelVerificationStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NotificationChannelVerificationStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NotificationChannelVerificationStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NotificationChannelVerificationStatusPtrOutput struct{ *pulumi.OutputState }

func (NotificationChannelVerificationStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationChannelVerificationStatus)(nil)).Elem()
}

func (o NotificationChannelVerificationStatusPtrOutput) ToNotificationChannelVerificationStatusPtrOutput() NotificationChannelVerificationStatusPtrOutput {
	return o
}

func (o NotificationChannelVerificationStatusPtrOutput) ToNotificationChannelVerificationStatusPtrOutputWithContext(ctx context.Context) NotificationChannelVerificationStatusPtrOutput {
	return o
}

func (o NotificationChannelVerificationStatusPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NotificationChannelVerificationStatus] {
	return pulumix.Output[*NotificationChannelVerificationStatus]{
		OutputState: o.OutputState,
	}
}

func (o NotificationChannelVerificationStatusPtrOutput) Elem() NotificationChannelVerificationStatusOutput {
	return o.ApplyT(func(v *NotificationChannelVerificationStatus) NotificationChannelVerificationStatus {
		if v != nil {
			return *v
		}
		var ret NotificationChannelVerificationStatus
		return ret
	}).(NotificationChannelVerificationStatusOutput)
}

func (o NotificationChannelVerificationStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NotificationChannelVerificationStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NotificationChannelVerificationStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NotificationChannelVerificationStatusInput is an input type that accepts NotificationChannelVerificationStatusArgs and NotificationChannelVerificationStatusOutput values.
// You can construct a concrete instance of `NotificationChannelVerificationStatusInput` via:
//
//	NotificationChannelVerificationStatusArgs{...}
type NotificationChannelVerificationStatusInput interface {
	pulumi.Input

	ToNotificationChannelVerificationStatusOutput() NotificationChannelVerificationStatusOutput
	ToNotificationChannelVerificationStatusOutputWithContext(context.Context) NotificationChannelVerificationStatusOutput
}

var notificationChannelVerificationStatusPtrType = reflect.TypeOf((**NotificationChannelVerificationStatus)(nil)).Elem()

type NotificationChannelVerificationStatusPtrInput interface {
	pulumi.Input

	ToNotificationChannelVerificationStatusPtrOutput() NotificationChannelVerificationStatusPtrOutput
	ToNotificationChannelVerificationStatusPtrOutputWithContext(context.Context) NotificationChannelVerificationStatusPtrOutput
}

type notificationChannelVerificationStatusPtr string

func NotificationChannelVerificationStatusPtr(v string) NotificationChannelVerificationStatusPtrInput {
	return (*notificationChannelVerificationStatusPtr)(&v)
}

func (*notificationChannelVerificationStatusPtr) ElementType() reflect.Type {
	return notificationChannelVerificationStatusPtrType
}

func (in *notificationChannelVerificationStatusPtr) ToNotificationChannelVerificationStatusPtrOutput() NotificationChannelVerificationStatusPtrOutput {
	return pulumi.ToOutput(in).(NotificationChannelVerificationStatusPtrOutput)
}

func (in *notificationChannelVerificationStatusPtr) ToNotificationChannelVerificationStatusPtrOutputWithContext(ctx context.Context) NotificationChannelVerificationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NotificationChannelVerificationStatusPtrOutput)
}

func (in *notificationChannelVerificationStatusPtr) ToOutput(ctx context.Context) pulumix.Output[*NotificationChannelVerificationStatus] {
	return pulumix.Output[*NotificationChannelVerificationStatus]{
		OutputState: in.ToNotificationChannelVerificationStatusPtrOutputWithContext(ctx).OutputState,
	}
}

// The resource type of the group members.
type ResourceGroupResourceType string

const (
	// Default value (not valid).
	ResourceGroupResourceTypeResourceTypeUnspecified = ResourceGroupResourceType("RESOURCE_TYPE_UNSPECIFIED")
	// A group of instances from Google Cloud Platform (GCP) or Amazon Web Services (AWS).
	ResourceGroupResourceTypeInstance = ResourceGroupResourceType("INSTANCE")
	// A group of Amazon ELB load balancers.
	ResourceGroupResourceTypeAwsElbLoadBalancer = ResourceGroupResourceType("AWS_ELB_LOAD_BALANCER")
)

func (ResourceGroupResourceType) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGroupResourceType)(nil)).Elem()
}

func (e ResourceGroupResourceType) ToResourceGroupResourceTypeOutput() ResourceGroupResourceTypeOutput {
	return pulumi.ToOutput(e).(ResourceGroupResourceTypeOutput)
}

func (e ResourceGroupResourceType) ToResourceGroupResourceTypeOutputWithContext(ctx context.Context) ResourceGroupResourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResourceGroupResourceTypeOutput)
}

func (e ResourceGroupResourceType) ToResourceGroupResourceTypePtrOutput() ResourceGroupResourceTypePtrOutput {
	return e.ToResourceGroupResourceTypePtrOutputWithContext(context.Background())
}

func (e ResourceGroupResourceType) ToResourceGroupResourceTypePtrOutputWithContext(ctx context.Context) ResourceGroupResourceTypePtrOutput {
	return ResourceGroupResourceType(e).ToResourceGroupResourceTypeOutputWithContext(ctx).ToResourceGroupResourceTypePtrOutputWithContext(ctx)
}

func (e ResourceGroupResourceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceGroupResourceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceGroupResourceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourceGroupResourceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResourceGroupResourceTypeOutput struct{ *pulumi.OutputState }

func (ResourceGroupResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGroupResourceType)(nil)).Elem()
}

func (o ResourceGroupResourceTypeOutput) ToResourceGroupResourceTypeOutput() ResourceGroupResourceTypeOutput {
	return o
}

func (o ResourceGroupResourceTypeOutput) ToResourceGroupResourceTypeOutputWithContext(ctx context.Context) ResourceGroupResourceTypeOutput {
	return o
}

func (o ResourceGroupResourceTypeOutput) ToResourceGroupResourceTypePtrOutput() ResourceGroupResourceTypePtrOutput {
	return o.ToResourceGroupResourceTypePtrOutputWithContext(context.Background())
}

func (o ResourceGroupResourceTypeOutput) ToResourceGroupResourceTypePtrOutputWithContext(ctx context.Context) ResourceGroupResourceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceGroupResourceType) *ResourceGroupResourceType {
		return &v
	}).(ResourceGroupResourceTypePtrOutput)
}

func (o ResourceGroupResourceTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceGroupResourceType] {
	return pulumix.Output[ResourceGroupResourceType]{
		OutputState: o.OutputState,
	}
}

func (o ResourceGroupResourceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResourceGroupResourceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceGroupResourceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResourceGroupResourceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceGroupResourceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceGroupResourceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResourceGroupResourceTypePtrOutput struct{ *pulumi.OutputState }

func (ResourceGroupResourceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGroupResourceType)(nil)).Elem()
}

func (o ResourceGroupResourceTypePtrOutput) ToResourceGroupResourceTypePtrOutput() ResourceGroupResourceTypePtrOutput {
	return o
}

func (o ResourceGroupResourceTypePtrOutput) ToResourceGroupResourceTypePtrOutputWithContext(ctx context.Context) ResourceGroupResourceTypePtrOutput {
	return o
}

func (o ResourceGroupResourceTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ResourceGroupResourceType] {
	return pulumix.Output[*ResourceGroupResourceType]{
		OutputState: o.OutputState,
	}
}

func (o ResourceGroupResourceTypePtrOutput) Elem() ResourceGroupResourceTypeOutput {
	return o.ApplyT(func(v *ResourceGroupResourceType) ResourceGroupResourceType {
		if v != nil {
			return *v
		}
		var ret ResourceGroupResourceType
		return ret
	}).(ResourceGroupResourceTypeOutput)
}

func (o ResourceGroupResourceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceGroupResourceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResourceGroupResourceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResourceGroupResourceTypeInput is an input type that accepts ResourceGroupResourceTypeArgs and ResourceGroupResourceTypeOutput values.
// You can construct a concrete instance of `ResourceGroupResourceTypeInput` via:
//
//	ResourceGroupResourceTypeArgs{...}
type ResourceGroupResourceTypeInput interface {
	pulumi.Input

	ToResourceGroupResourceTypeOutput() ResourceGroupResourceTypeOutput
	ToResourceGroupResourceTypeOutputWithContext(context.Context) ResourceGroupResourceTypeOutput
}

var resourceGroupResourceTypePtrType = reflect.TypeOf((**ResourceGroupResourceType)(nil)).Elem()

type ResourceGroupResourceTypePtrInput interface {
	pulumi.Input

	ToResourceGroupResourceTypePtrOutput() ResourceGroupResourceTypePtrOutput
	ToResourceGroupResourceTypePtrOutputWithContext(context.Context) ResourceGroupResourceTypePtrOutput
}

type resourceGroupResourceTypePtr string

func ResourceGroupResourceTypePtr(v string) ResourceGroupResourceTypePtrInput {
	return (*resourceGroupResourceTypePtr)(&v)
}

func (*resourceGroupResourceTypePtr) ElementType() reflect.Type {
	return resourceGroupResourceTypePtrType
}

func (in *resourceGroupResourceTypePtr) ToResourceGroupResourceTypePtrOutput() ResourceGroupResourceTypePtrOutput {
	return pulumi.ToOutput(in).(ResourceGroupResourceTypePtrOutput)
}

func (in *resourceGroupResourceTypePtr) ToResourceGroupResourceTypePtrOutputWithContext(ctx context.Context) ResourceGroupResourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResourceGroupResourceTypePtrOutput)
}

func (in *resourceGroupResourceTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ResourceGroupResourceType] {
	return pulumix.Output[*ResourceGroupResourceType]{
		OutputState: in.ToResourceGroupResourceTypePtrOutputWithContext(ctx).OutputState,
	}
}

// A class of status codes to accept.
type ResponseStatusCodeStatusClass string

const (
	// Default value that matches no status codes.
	ResponseStatusCodeStatusClassStatusClassUnspecified = ResponseStatusCodeStatusClass("STATUS_CLASS_UNSPECIFIED")
	// The class of status codes between 100 and 199.
	ResponseStatusCodeStatusClassStatusClass1xx = ResponseStatusCodeStatusClass("STATUS_CLASS_1XX")
	// The class of status codes between 200 and 299.
	ResponseStatusCodeStatusClassStatusClass2xx = ResponseStatusCodeStatusClass("STATUS_CLASS_2XX")
	// The class of status codes between 300 and 399.
	ResponseStatusCodeStatusClassStatusClass3xx = ResponseStatusCodeStatusClass("STATUS_CLASS_3XX")
	// The class of status codes between 400 and 499.
	ResponseStatusCodeStatusClassStatusClass4xx = ResponseStatusCodeStatusClass("STATUS_CLASS_4XX")
	// The class of status codes between 500 and 599.
	ResponseStatusCodeStatusClassStatusClass5xx = ResponseStatusCodeStatusClass("STATUS_CLASS_5XX")
	// The class of all status codes.
	ResponseStatusCodeStatusClassStatusClassAny = ResponseStatusCodeStatusClass("STATUS_CLASS_ANY")
)

func (ResponseStatusCodeStatusClass) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponseStatusCodeStatusClass)(nil)).Elem()
}

func (e ResponseStatusCodeStatusClass) ToResponseStatusCodeStatusClassOutput() ResponseStatusCodeStatusClassOutput {
	return pulumi.ToOutput(e).(ResponseStatusCodeStatusClassOutput)
}

func (e ResponseStatusCodeStatusClass) ToResponseStatusCodeStatusClassOutputWithContext(ctx context.Context) ResponseStatusCodeStatusClassOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResponseStatusCodeStatusClassOutput)
}

func (e ResponseStatusCodeStatusClass) ToResponseStatusCodeStatusClassPtrOutput() ResponseStatusCodeStatusClassPtrOutput {
	return e.ToResponseStatusCodeStatusClassPtrOutputWithContext(context.Background())
}

func (e ResponseStatusCodeStatusClass) ToResponseStatusCodeStatusClassPtrOutputWithContext(ctx context.Context) ResponseStatusCodeStatusClassPtrOutput {
	return ResponseStatusCodeStatusClass(e).ToResponseStatusCodeStatusClassOutputWithContext(ctx).ToResponseStatusCodeStatusClassPtrOutputWithContext(ctx)
}

func (e ResponseStatusCodeStatusClass) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResponseStatusCodeStatusClass) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResponseStatusCodeStatusClass) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResponseStatusCodeStatusClass) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResponseStatusCodeStatusClassOutput struct{ *pulumi.OutputState }

func (ResponseStatusCodeStatusClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResponseStatusCodeStatusClass)(nil)).Elem()
}

func (o ResponseStatusCodeStatusClassOutput) ToResponseStatusCodeStatusClassOutput() ResponseStatusCodeStatusClassOutput {
	return o
}

func (o ResponseStatusCodeStatusClassOutput) ToResponseStatusCodeStatusClassOutputWithContext(ctx context.Context) ResponseStatusCodeStatusClassOutput {
	return o
}

func (o ResponseStatusCodeStatusClassOutput) ToResponseStatusCodeStatusClassPtrOutput() ResponseStatusCodeStatusClassPtrOutput {
	return o.ToResponseStatusCodeStatusClassPtrOutputWithContext(context.Background())
}

func (o ResponseStatusCodeStatusClassOutput) ToResponseStatusCodeStatusClassPtrOutputWithContext(ctx context.Context) ResponseStatusCodeStatusClassPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResponseStatusCodeStatusClass) *ResponseStatusCodeStatusClass {
		return &v
	}).(ResponseStatusCodeStatusClassPtrOutput)
}

func (o ResponseStatusCodeStatusClassOutput) ToOutput(ctx context.Context) pulumix.Output[ResponseStatusCodeStatusClass] {
	return pulumix.Output[ResponseStatusCodeStatusClass]{
		OutputState: o.OutputState,
	}
}

func (o ResponseStatusCodeStatusClassOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResponseStatusCodeStatusClassOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResponseStatusCodeStatusClass) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResponseStatusCodeStatusClassOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResponseStatusCodeStatusClassOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResponseStatusCodeStatusClass) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResponseStatusCodeStatusClassPtrOutput struct{ *pulumi.OutputState }

func (ResponseStatusCodeStatusClassPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResponseStatusCodeStatusClass)(nil)).Elem()
}

func (o ResponseStatusCodeStatusClassPtrOutput) ToResponseStatusCodeStatusClassPtrOutput() ResponseStatusCodeStatusClassPtrOutput {
	return o
}

func (o ResponseStatusCodeStatusClassPtrOutput) ToResponseStatusCodeStatusClassPtrOutputWithContext(ctx context.Context) ResponseStatusCodeStatusClassPtrOutput {
	return o
}

func (o ResponseStatusCodeStatusClassPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ResponseStatusCodeStatusClass] {
	return pulumix.Output[*ResponseStatusCodeStatusClass]{
		OutputState: o.OutputState,
	}
}

func (o ResponseStatusCodeStatusClassPtrOutput) Elem() ResponseStatusCodeStatusClassOutput {
	return o.ApplyT(func(v *ResponseStatusCodeStatusClass) ResponseStatusCodeStatusClass {
		if v != nil {
			return *v
		}
		var ret ResponseStatusCodeStatusClass
		return ret
	}).(ResponseStatusCodeStatusClassOutput)
}

func (o ResponseStatusCodeStatusClassPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResponseStatusCodeStatusClassPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResponseStatusCodeStatusClass) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResponseStatusCodeStatusClassInput is an input type that accepts ResponseStatusCodeStatusClassArgs and ResponseStatusCodeStatusClassOutput values.
// You can construct a concrete instance of `ResponseStatusCodeStatusClassInput` via:
//
//	ResponseStatusCodeStatusClassArgs{...}
type ResponseStatusCodeStatusClassInput interface {
	pulumi.Input

	ToResponseStatusCodeStatusClassOutput() ResponseStatusCodeStatusClassOutput
	ToResponseStatusCodeStatusClassOutputWithContext(context.Context) ResponseStatusCodeStatusClassOutput
}

var responseStatusCodeStatusClassPtrType = reflect.TypeOf((**ResponseStatusCodeStatusClass)(nil)).Elem()

type ResponseStatusCodeStatusClassPtrInput interface {
	pulumi.Input

	ToResponseStatusCodeStatusClassPtrOutput() ResponseStatusCodeStatusClassPtrOutput
	ToResponseStatusCodeStatusClassPtrOutputWithContext(context.Context) ResponseStatusCodeStatusClassPtrOutput
}

type responseStatusCodeStatusClassPtr string

func ResponseStatusCodeStatusClassPtr(v string) ResponseStatusCodeStatusClassPtrInput {
	return (*responseStatusCodeStatusClassPtr)(&v)
}

func (*responseStatusCodeStatusClassPtr) ElementType() reflect.Type {
	return responseStatusCodeStatusClassPtrType
}

func (in *responseStatusCodeStatusClassPtr) ToResponseStatusCodeStatusClassPtrOutput() ResponseStatusCodeStatusClassPtrOutput {
	return pulumi.ToOutput(in).(ResponseStatusCodeStatusClassPtrOutput)
}

func (in *responseStatusCodeStatusClassPtr) ToResponseStatusCodeStatusClassPtrOutputWithContext(ctx context.Context) ResponseStatusCodeStatusClassPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResponseStatusCodeStatusClassPtrOutput)
}

func (in *responseStatusCodeStatusClassPtr) ToOutput(ctx context.Context) pulumix.Output[*ResponseStatusCodeStatusClass] {
	return pulumix.Output[*ResponseStatusCodeStatusClass]{
		OutputState: in.ToResponseStatusCodeStatusClassPtrOutputWithContext(ctx).OutputState,
	}
}

// A calendar period, semantically "since the start of the current ". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.
type ServiceLevelObjectiveCalendarPeriod string

const (
	// Undefined period, raises an error.
	ServiceLevelObjectiveCalendarPeriodCalendarPeriodUnspecified = ServiceLevelObjectiveCalendarPeriod("CALENDAR_PERIOD_UNSPECIFIED")
	// A day.
	ServiceLevelObjectiveCalendarPeriodDay = ServiceLevelObjectiveCalendarPeriod("DAY")
	// A week. Weeks begin on Monday, following ISO 8601 (https://en.wikipedia.org/wiki/ISO_week_date).
	ServiceLevelObjectiveCalendarPeriodWeek = ServiceLevelObjectiveCalendarPeriod("WEEK")
	// A fortnight. The first calendar fortnight of the year begins at the start of week 1 according to ISO 8601 (https://en.wikipedia.org/wiki/ISO_week_date).
	ServiceLevelObjectiveCalendarPeriodFortnight = ServiceLevelObjectiveCalendarPeriod("FORTNIGHT")
	// A month.
	ServiceLevelObjectiveCalendarPeriodMonth = ServiceLevelObjectiveCalendarPeriod("MONTH")
	// A quarter. Quarters start on dates 1-Jan, 1-Apr, 1-Jul, and 1-Oct of each year.
	ServiceLevelObjectiveCalendarPeriodQuarter = ServiceLevelObjectiveCalendarPeriod("QUARTER")
	// A half-year. Half-years start on dates 1-Jan and 1-Jul.
	ServiceLevelObjectiveCalendarPeriodHalf = ServiceLevelObjectiveCalendarPeriod("HALF")
	// A year.
	ServiceLevelObjectiveCalendarPeriodYear = ServiceLevelObjectiveCalendarPeriod("YEAR")
)

func (ServiceLevelObjectiveCalendarPeriod) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveCalendarPeriod)(nil)).Elem()
}

func (e ServiceLevelObjectiveCalendarPeriod) ToServiceLevelObjectiveCalendarPeriodOutput() ServiceLevelObjectiveCalendarPeriodOutput {
	return pulumi.ToOutput(e).(ServiceLevelObjectiveCalendarPeriodOutput)
}

func (e ServiceLevelObjectiveCalendarPeriod) ToServiceLevelObjectiveCalendarPeriodOutputWithContext(ctx context.Context) ServiceLevelObjectiveCalendarPeriodOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ServiceLevelObjectiveCalendarPeriodOutput)
}

func (e ServiceLevelObjectiveCalendarPeriod) ToServiceLevelObjectiveCalendarPeriodPtrOutput() ServiceLevelObjectiveCalendarPeriodPtrOutput {
	return e.ToServiceLevelObjectiveCalendarPeriodPtrOutputWithContext(context.Background())
}

func (e ServiceLevelObjectiveCalendarPeriod) ToServiceLevelObjectiveCalendarPeriodPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveCalendarPeriodPtrOutput {
	return ServiceLevelObjectiveCalendarPeriod(e).ToServiceLevelObjectiveCalendarPeriodOutputWithContext(ctx).ToServiceLevelObjectiveCalendarPeriodPtrOutputWithContext(ctx)
}

func (e ServiceLevelObjectiveCalendarPeriod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServiceLevelObjectiveCalendarPeriod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServiceLevelObjectiveCalendarPeriod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ServiceLevelObjectiveCalendarPeriod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ServiceLevelObjectiveCalendarPeriodOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveCalendarPeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLevelObjectiveCalendarPeriod)(nil)).Elem()
}

func (o ServiceLevelObjectiveCalendarPeriodOutput) ToServiceLevelObjectiveCalendarPeriodOutput() ServiceLevelObjectiveCalendarPeriodOutput {
	return o
}

func (o ServiceLevelObjectiveCalendarPeriodOutput) ToServiceLevelObjectiveCalendarPeriodOutputWithContext(ctx context.Context) ServiceLevelObjectiveCalendarPeriodOutput {
	return o
}

func (o ServiceLevelObjectiveCalendarPeriodOutput) ToServiceLevelObjectiveCalendarPeriodPtrOutput() ServiceLevelObjectiveCalendarPeriodPtrOutput {
	return o.ToServiceLevelObjectiveCalendarPeriodPtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveCalendarPeriodOutput) ToServiceLevelObjectiveCalendarPeriodPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveCalendarPeriodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceLevelObjectiveCalendarPeriod) *ServiceLevelObjectiveCalendarPeriod {
		return &v
	}).(ServiceLevelObjectiveCalendarPeriodPtrOutput)
}

func (o ServiceLevelObjectiveCalendarPeriodOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceLevelObjectiveCalendarPeriod] {
	return pulumix.Output[ServiceLevelObjectiveCalendarPeriod]{
		OutputState: o.OutputState,
	}
}

func (o ServiceLevelObjectiveCalendarPeriodOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveCalendarPeriodOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ServiceLevelObjectiveCalendarPeriod) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ServiceLevelObjectiveCalendarPeriodOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveCalendarPeriodOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ServiceLevelObjectiveCalendarPeriod) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ServiceLevelObjectiveCalendarPeriodPtrOutput struct{ *pulumi.OutputState }

func (ServiceLevelObjectiveCalendarPeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceLevelObjectiveCalendarPeriod)(nil)).Elem()
}

func (o ServiceLevelObjectiveCalendarPeriodPtrOutput) ToServiceLevelObjectiveCalendarPeriodPtrOutput() ServiceLevelObjectiveCalendarPeriodPtrOutput {
	return o
}

func (o ServiceLevelObjectiveCalendarPeriodPtrOutput) ToServiceLevelObjectiveCalendarPeriodPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveCalendarPeriodPtrOutput {
	return o
}

func (o ServiceLevelObjectiveCalendarPeriodPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceLevelObjectiveCalendarPeriod] {
	return pulumix.Output[*ServiceLevelObjectiveCalendarPeriod]{
		OutputState: o.OutputState,
	}
}

func (o ServiceLevelObjectiveCalendarPeriodPtrOutput) Elem() ServiceLevelObjectiveCalendarPeriodOutput {
	return o.ApplyT(func(v *ServiceLevelObjectiveCalendarPeriod) ServiceLevelObjectiveCalendarPeriod {
		if v != nil {
			return *v
		}
		var ret ServiceLevelObjectiveCalendarPeriod
		return ret
	}).(ServiceLevelObjectiveCalendarPeriodOutput)
}

func (o ServiceLevelObjectiveCalendarPeriodPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ServiceLevelObjectiveCalendarPeriodPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ServiceLevelObjectiveCalendarPeriod) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ServiceLevelObjectiveCalendarPeriodInput is an input type that accepts ServiceLevelObjectiveCalendarPeriodArgs and ServiceLevelObjectiveCalendarPeriodOutput values.
// You can construct a concrete instance of `ServiceLevelObjectiveCalendarPeriodInput` via:
//
//	ServiceLevelObjectiveCalendarPeriodArgs{...}
type ServiceLevelObjectiveCalendarPeriodInput interface {
	pulumi.Input

	ToServiceLevelObjectiveCalendarPeriodOutput() ServiceLevelObjectiveCalendarPeriodOutput
	ToServiceLevelObjectiveCalendarPeriodOutputWithContext(context.Context) ServiceLevelObjectiveCalendarPeriodOutput
}

var serviceLevelObjectiveCalendarPeriodPtrType = reflect.TypeOf((**ServiceLevelObjectiveCalendarPeriod)(nil)).Elem()

type ServiceLevelObjectiveCalendarPeriodPtrInput interface {
	pulumi.Input

	ToServiceLevelObjectiveCalendarPeriodPtrOutput() ServiceLevelObjectiveCalendarPeriodPtrOutput
	ToServiceLevelObjectiveCalendarPeriodPtrOutputWithContext(context.Context) ServiceLevelObjectiveCalendarPeriodPtrOutput
}

type serviceLevelObjectiveCalendarPeriodPtr string

func ServiceLevelObjectiveCalendarPeriodPtr(v string) ServiceLevelObjectiveCalendarPeriodPtrInput {
	return (*serviceLevelObjectiveCalendarPeriodPtr)(&v)
}

func (*serviceLevelObjectiveCalendarPeriodPtr) ElementType() reflect.Type {
	return serviceLevelObjectiveCalendarPeriodPtrType
}

func (in *serviceLevelObjectiveCalendarPeriodPtr) ToServiceLevelObjectiveCalendarPeriodPtrOutput() ServiceLevelObjectiveCalendarPeriodPtrOutput {
	return pulumi.ToOutput(in).(ServiceLevelObjectiveCalendarPeriodPtrOutput)
}

func (in *serviceLevelObjectiveCalendarPeriodPtr) ToServiceLevelObjectiveCalendarPeriodPtrOutputWithContext(ctx context.Context) ServiceLevelObjectiveCalendarPeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ServiceLevelObjectiveCalendarPeriodPtrOutput)
}

func (in *serviceLevelObjectiveCalendarPeriodPtr) ToOutput(ctx context.Context) pulumix.Output[*ServiceLevelObjectiveCalendarPeriod] {
	return pulumix.Output[*ServiceLevelObjectiveCalendarPeriod]{
		OutputState: in.ToServiceLevelObjectiveCalendarPeriodPtrOutputWithContext(ctx).OutputState,
	}
}

// The type of checkers to use to execute the Uptime check.
type UptimeCheckConfigCheckerType string

const (
	// The default checker type. Currently converted to STATIC_IP_CHECKERS on creation, the default conversion behavior may change in the future.
	UptimeCheckConfigCheckerTypeCheckerTypeUnspecified = UptimeCheckConfigCheckerType("CHECKER_TYPE_UNSPECIFIED")
	// STATIC_IP_CHECKERS are used for uptime checks that perform egress across the public internet. STATIC_IP_CHECKERS use the static IP addresses returned by ListUptimeCheckIps.
	UptimeCheckConfigCheckerTypeStaticIpCheckers = UptimeCheckConfigCheckerType("STATIC_IP_CHECKERS")
	// VPC_CHECKERS are used for uptime checks that perform egress using Service Directory and private network access. When using VPC_CHECKERS, the monitored resource type must be servicedirectory_service.
	UptimeCheckConfigCheckerTypeVpcCheckers = UptimeCheckConfigCheckerType("VPC_CHECKERS")
)

func (UptimeCheckConfigCheckerType) ElementType() reflect.Type {
	return reflect.TypeOf((*UptimeCheckConfigCheckerType)(nil)).Elem()
}

func (e UptimeCheckConfigCheckerType) ToUptimeCheckConfigCheckerTypeOutput() UptimeCheckConfigCheckerTypeOutput {
	return pulumi.ToOutput(e).(UptimeCheckConfigCheckerTypeOutput)
}

func (e UptimeCheckConfigCheckerType) ToUptimeCheckConfigCheckerTypeOutputWithContext(ctx context.Context) UptimeCheckConfigCheckerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(UptimeCheckConfigCheckerTypeOutput)
}

func (e UptimeCheckConfigCheckerType) ToUptimeCheckConfigCheckerTypePtrOutput() UptimeCheckConfigCheckerTypePtrOutput {
	return e.ToUptimeCheckConfigCheckerTypePtrOutputWithContext(context.Background())
}

func (e UptimeCheckConfigCheckerType) ToUptimeCheckConfigCheckerTypePtrOutputWithContext(ctx context.Context) UptimeCheckConfigCheckerTypePtrOutput {
	return UptimeCheckConfigCheckerType(e).ToUptimeCheckConfigCheckerTypeOutputWithContext(ctx).ToUptimeCheckConfigCheckerTypePtrOutputWithContext(ctx)
}

func (e UptimeCheckConfigCheckerType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UptimeCheckConfigCheckerType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UptimeCheckConfigCheckerType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UptimeCheckConfigCheckerType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UptimeCheckConfigCheckerTypeOutput struct{ *pulumi.OutputState }

func (UptimeCheckConfigCheckerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UptimeCheckConfigCheckerType)(nil)).Elem()
}

func (o UptimeCheckConfigCheckerTypeOutput) ToUptimeCheckConfigCheckerTypeOutput() UptimeCheckConfigCheckerTypeOutput {
	return o
}

func (o UptimeCheckConfigCheckerTypeOutput) ToUptimeCheckConfigCheckerTypeOutputWithContext(ctx context.Context) UptimeCheckConfigCheckerTypeOutput {
	return o
}

func (o UptimeCheckConfigCheckerTypeOutput) ToUptimeCheckConfigCheckerTypePtrOutput() UptimeCheckConfigCheckerTypePtrOutput {
	return o.ToUptimeCheckConfigCheckerTypePtrOutputWithContext(context.Background())
}

func (o UptimeCheckConfigCheckerTypeOutput) ToUptimeCheckConfigCheckerTypePtrOutputWithContext(ctx context.Context) UptimeCheckConfigCheckerTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UptimeCheckConfigCheckerType) *UptimeCheckConfigCheckerType {
		return &v
	}).(UptimeCheckConfigCheckerTypePtrOutput)
}

func (o UptimeCheckConfigCheckerTypeOutput) ToOutput(ctx context.Context) pulumix.Output[UptimeCheckConfigCheckerType] {
	return pulumix.Output[UptimeCheckConfigCheckerType]{
		OutputState: o.OutputState,
	}
}

func (o UptimeCheckConfigCheckerTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o UptimeCheckConfigCheckerTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UptimeCheckConfigCheckerType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o UptimeCheckConfigCheckerTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UptimeCheckConfigCheckerTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UptimeCheckConfigCheckerType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type UptimeCheckConfigCheckerTypePtrOutput struct{ *pulumi.OutputState }

func (UptimeCheckConfigCheckerTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UptimeCheckConfigCheckerType)(nil)).Elem()
}

func (o UptimeCheckConfigCheckerTypePtrOutput) ToUptimeCheckConfigCheckerTypePtrOutput() UptimeCheckConfigCheckerTypePtrOutput {
	return o
}

func (o UptimeCheckConfigCheckerTypePtrOutput) ToUptimeCheckConfigCheckerTypePtrOutputWithContext(ctx context.Context) UptimeCheckConfigCheckerTypePtrOutput {
	return o
}

func (o UptimeCheckConfigCheckerTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UptimeCheckConfigCheckerType] {
	return pulumix.Output[*UptimeCheckConfigCheckerType]{
		OutputState: o.OutputState,
	}
}

func (o UptimeCheckConfigCheckerTypePtrOutput) Elem() UptimeCheckConfigCheckerTypeOutput {
	return o.ApplyT(func(v *UptimeCheckConfigCheckerType) UptimeCheckConfigCheckerType {
		if v != nil {
			return *v
		}
		var ret UptimeCheckConfigCheckerType
		return ret
	}).(UptimeCheckConfigCheckerTypeOutput)
}

func (o UptimeCheckConfigCheckerTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UptimeCheckConfigCheckerTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *UptimeCheckConfigCheckerType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// UptimeCheckConfigCheckerTypeInput is an input type that accepts UptimeCheckConfigCheckerTypeArgs and UptimeCheckConfigCheckerTypeOutput values.
// You can construct a concrete instance of `UptimeCheckConfigCheckerTypeInput` via:
//
//	UptimeCheckConfigCheckerTypeArgs{...}
type UptimeCheckConfigCheckerTypeInput interface {
	pulumi.Input

	ToUptimeCheckConfigCheckerTypeOutput() UptimeCheckConfigCheckerTypeOutput
	ToUptimeCheckConfigCheckerTypeOutputWithContext(context.Context) UptimeCheckConfigCheckerTypeOutput
}

var uptimeCheckConfigCheckerTypePtrType = reflect.TypeOf((**UptimeCheckConfigCheckerType)(nil)).Elem()

type UptimeCheckConfigCheckerTypePtrInput interface {
	pulumi.Input

	ToUptimeCheckConfigCheckerTypePtrOutput() UptimeCheckConfigCheckerTypePtrOutput
	ToUptimeCheckConfigCheckerTypePtrOutputWithContext(context.Context) UptimeCheckConfigCheckerTypePtrOutput
}

type uptimeCheckConfigCheckerTypePtr string

func UptimeCheckConfigCheckerTypePtr(v string) UptimeCheckConfigCheckerTypePtrInput {
	return (*uptimeCheckConfigCheckerTypePtr)(&v)
}

func (*uptimeCheckConfigCheckerTypePtr) ElementType() reflect.Type {
	return uptimeCheckConfigCheckerTypePtrType
}

func (in *uptimeCheckConfigCheckerTypePtr) ToUptimeCheckConfigCheckerTypePtrOutput() UptimeCheckConfigCheckerTypePtrOutput {
	return pulumi.ToOutput(in).(UptimeCheckConfigCheckerTypePtrOutput)
}

func (in *uptimeCheckConfigCheckerTypePtr) ToUptimeCheckConfigCheckerTypePtrOutputWithContext(ctx context.Context) UptimeCheckConfigCheckerTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(UptimeCheckConfigCheckerTypePtrOutput)
}

func (in *uptimeCheckConfigCheckerTypePtr) ToOutput(ctx context.Context) pulumix.Output[*UptimeCheckConfigCheckerType] {
	return pulumix.Output[*UptimeCheckConfigCheckerType]{
		OutputState: in.ToUptimeCheckConfigCheckerTypePtrOutputWithContext(ctx).OutputState,
	}
}

type UptimeCheckConfigSelectedRegionsItem string

const (
	// Default value if no region is specified. Will result in Uptime checks running from all regions.
	UptimeCheckConfigSelectedRegionsItemRegionUnspecified = UptimeCheckConfigSelectedRegionsItem("REGION_UNSPECIFIED")
	// Allows checks to run from locations within the United States of America.
	UptimeCheckConfigSelectedRegionsItemUsa = UptimeCheckConfigSelectedRegionsItem("USA")
	// Allows checks to run from locations within the continent of Europe.
	UptimeCheckConfigSelectedRegionsItemEurope = UptimeCheckConfigSelectedRegionsItem("EUROPE")
	// Allows checks to run from locations within the continent of South America.
	UptimeCheckConfigSelectedRegionsItemSouthAmerica = UptimeCheckConfigSelectedRegionsItem("SOUTH_AMERICA")
	// Allows checks to run from locations within the Asia Pacific area (ex: Singapore).
	UptimeCheckConfigSelectedRegionsItemAsiaPacific = UptimeCheckConfigSelectedRegionsItem("ASIA_PACIFIC")
	// Allows checks to run from locations within the western United States of America
	UptimeCheckConfigSelectedRegionsItemUsaOregon = UptimeCheckConfigSelectedRegionsItem("USA_OREGON")
	// Allows checks to run from locations within the central United States of America
	UptimeCheckConfigSelectedRegionsItemUsaIowa = UptimeCheckConfigSelectedRegionsItem("USA_IOWA")
	// Allows checks to run from locations within the eastern United States of America
	UptimeCheckConfigSelectedRegionsItemUsaVirginia = UptimeCheckConfigSelectedRegionsItem("USA_VIRGINIA")
)

func (UptimeCheckConfigSelectedRegionsItem) ElementType() reflect.Type {
	return reflect.TypeOf((*UptimeCheckConfigSelectedRegionsItem)(nil)).Elem()
}

func (e UptimeCheckConfigSelectedRegionsItem) ToUptimeCheckConfigSelectedRegionsItemOutput() UptimeCheckConfigSelectedRegionsItemOutput {
	return pulumi.ToOutput(e).(UptimeCheckConfigSelectedRegionsItemOutput)
}

func (e UptimeCheckConfigSelectedRegionsItem) ToUptimeCheckConfigSelectedRegionsItemOutputWithContext(ctx context.Context) UptimeCheckConfigSelectedRegionsItemOutput {
	return pulumi.ToOutputWithContext(ctx, e).(UptimeCheckConfigSelectedRegionsItemOutput)
}

func (e UptimeCheckConfigSelectedRegionsItem) ToUptimeCheckConfigSelectedRegionsItemPtrOutput() UptimeCheckConfigSelectedRegionsItemPtrOutput {
	return e.ToUptimeCheckConfigSelectedRegionsItemPtrOutputWithContext(context.Background())
}

func (e UptimeCheckConfigSelectedRegionsItem) ToUptimeCheckConfigSelectedRegionsItemPtrOutputWithContext(ctx context.Context) UptimeCheckConfigSelectedRegionsItemPtrOutput {
	return UptimeCheckConfigSelectedRegionsItem(e).ToUptimeCheckConfigSelectedRegionsItemOutputWithContext(ctx).ToUptimeCheckConfigSelectedRegionsItemPtrOutputWithContext(ctx)
}

func (e UptimeCheckConfigSelectedRegionsItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UptimeCheckConfigSelectedRegionsItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UptimeCheckConfigSelectedRegionsItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UptimeCheckConfigSelectedRegionsItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UptimeCheckConfigSelectedRegionsItemOutput struct{ *pulumi.OutputState }

func (UptimeCheckConfigSelectedRegionsItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UptimeCheckConfigSelectedRegionsItem)(nil)).Elem()
}

func (o UptimeCheckConfigSelectedRegionsItemOutput) ToUptimeCheckConfigSelectedRegionsItemOutput() UptimeCheckConfigSelectedRegionsItemOutput {
	return o
}

func (o UptimeCheckConfigSelectedRegionsItemOutput) ToUptimeCheckConfigSelectedRegionsItemOutputWithContext(ctx context.Context) UptimeCheckConfigSelectedRegionsItemOutput {
	return o
}

func (o UptimeCheckConfigSelectedRegionsItemOutput) ToUptimeCheckConfigSelectedRegionsItemPtrOutput() UptimeCheckConfigSelectedRegionsItemPtrOutput {
	return o.ToUptimeCheckConfigSelectedRegionsItemPtrOutputWithContext(context.Background())
}

func (o UptimeCheckConfigSelectedRegionsItemOutput) ToUptimeCheckConfigSelectedRegionsItemPtrOutputWithContext(ctx context.Context) UptimeCheckConfigSelectedRegionsItemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UptimeCheckConfigSelectedRegionsItem) *UptimeCheckConfigSelectedRegionsItem {
		return &v
	}).(UptimeCheckConfigSelectedRegionsItemPtrOutput)
}

func (o UptimeCheckConfigSelectedRegionsItemOutput) ToOutput(ctx context.Context) pulumix.Output[UptimeCheckConfigSelectedRegionsItem] {
	return pulumix.Output[UptimeCheckConfigSelectedRegionsItem]{
		OutputState: o.OutputState,
	}
}

func (o UptimeCheckConfigSelectedRegionsItemOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o UptimeCheckConfigSelectedRegionsItemOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UptimeCheckConfigSelectedRegionsItem) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o UptimeCheckConfigSelectedRegionsItemOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UptimeCheckConfigSelectedRegionsItemOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UptimeCheckConfigSelectedRegionsItem) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type UptimeCheckConfigSelectedRegionsItemPtrOutput struct{ *pulumi.OutputState }

func (UptimeCheckConfigSelectedRegionsItemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UptimeCheckConfigSelectedRegionsItem)(nil)).Elem()
}

func (o UptimeCheckConfigSelectedRegionsItemPtrOutput) ToUptimeCheckConfigSelectedRegionsItemPtrOutput() UptimeCheckConfigSelectedRegionsItemPtrOutput {
	return o
}

func (o UptimeCheckConfigSelectedRegionsItemPtrOutput) ToUptimeCheckConfigSelectedRegionsItemPtrOutputWithContext(ctx context.Context) UptimeCheckConfigSelectedRegionsItemPtrOutput {
	return o
}

func (o UptimeCheckConfigSelectedRegionsItemPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UptimeCheckConfigSelectedRegionsItem] {
	return pulumix.Output[*UptimeCheckConfigSelectedRegionsItem]{
		OutputState: o.OutputState,
	}
}

func (o UptimeCheckConfigSelectedRegionsItemPtrOutput) Elem() UptimeCheckConfigSelectedRegionsItemOutput {
	return o.ApplyT(func(v *UptimeCheckConfigSelectedRegionsItem) UptimeCheckConfigSelectedRegionsItem {
		if v != nil {
			return *v
		}
		var ret UptimeCheckConfigSelectedRegionsItem
		return ret
	}).(UptimeCheckConfigSelectedRegionsItemOutput)
}

func (o UptimeCheckConfigSelectedRegionsItemPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UptimeCheckConfigSelectedRegionsItemPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *UptimeCheckConfigSelectedRegionsItem) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// UptimeCheckConfigSelectedRegionsItemInput is an input type that accepts UptimeCheckConfigSelectedRegionsItemArgs and UptimeCheckConfigSelectedRegionsItemOutput values.
// You can construct a concrete instance of `UptimeCheckConfigSelectedRegionsItemInput` via:
//
//	UptimeCheckConfigSelectedRegionsItemArgs{...}
type UptimeCheckConfigSelectedRegionsItemInput interface {
	pulumi.Input

	ToUptimeCheckConfigSelectedRegionsItemOutput() UptimeCheckConfigSelectedRegionsItemOutput
	ToUptimeCheckConfigSelectedRegionsItemOutputWithContext(context.Context) UptimeCheckConfigSelectedRegionsItemOutput
}

var uptimeCheckConfigSelectedRegionsItemPtrType = reflect.TypeOf((**UptimeCheckConfigSelectedRegionsItem)(nil)).Elem()

type UptimeCheckConfigSelectedRegionsItemPtrInput interface {
	pulumi.Input

	ToUptimeCheckConfigSelectedRegionsItemPtrOutput() UptimeCheckConfigSelectedRegionsItemPtrOutput
	ToUptimeCheckConfigSelectedRegionsItemPtrOutputWithContext(context.Context) UptimeCheckConfigSelectedRegionsItemPtrOutput
}

type uptimeCheckConfigSelectedRegionsItemPtr string

func UptimeCheckConfigSelectedRegionsItemPtr(v string) UptimeCheckConfigSelectedRegionsItemPtrInput {
	return (*uptimeCheckConfigSelectedRegionsItemPtr)(&v)
}

func (*uptimeCheckConfigSelectedRegionsItemPtr) ElementType() reflect.Type {
	return uptimeCheckConfigSelectedRegionsItemPtrType
}

func (in *uptimeCheckConfigSelectedRegionsItemPtr) ToUptimeCheckConfigSelectedRegionsItemPtrOutput() UptimeCheckConfigSelectedRegionsItemPtrOutput {
	return pulumi.ToOutput(in).(UptimeCheckConfigSelectedRegionsItemPtrOutput)
}

func (in *uptimeCheckConfigSelectedRegionsItemPtr) ToUptimeCheckConfigSelectedRegionsItemPtrOutputWithContext(ctx context.Context) UptimeCheckConfigSelectedRegionsItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(UptimeCheckConfigSelectedRegionsItemPtrOutput)
}

func (in *uptimeCheckConfigSelectedRegionsItemPtr) ToOutput(ctx context.Context) pulumix.Output[*UptimeCheckConfigSelectedRegionsItem] {
	return pulumix.Output[*UptimeCheckConfigSelectedRegionsItem]{
		OutputState: in.ToUptimeCheckConfigSelectedRegionsItemPtrOutputWithContext(ctx).OutputState,
	}
}

// UptimeCheckConfigSelectedRegionsItemArrayInput is an input type that accepts UptimeCheckConfigSelectedRegionsItemArray and UptimeCheckConfigSelectedRegionsItemArrayOutput values.
// You can construct a concrete instance of `UptimeCheckConfigSelectedRegionsItemArrayInput` via:
//
//	UptimeCheckConfigSelectedRegionsItemArray{ UptimeCheckConfigSelectedRegionsItemArgs{...} }
type UptimeCheckConfigSelectedRegionsItemArrayInput interface {
	pulumi.Input

	ToUptimeCheckConfigSelectedRegionsItemArrayOutput() UptimeCheckConfigSelectedRegionsItemArrayOutput
	ToUptimeCheckConfigSelectedRegionsItemArrayOutputWithContext(context.Context) UptimeCheckConfigSelectedRegionsItemArrayOutput
}

type UptimeCheckConfigSelectedRegionsItemArray []UptimeCheckConfigSelectedRegionsItem

func (UptimeCheckConfigSelectedRegionsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UptimeCheckConfigSelectedRegionsItem)(nil)).Elem()
}

func (i UptimeCheckConfigSelectedRegionsItemArray) ToUptimeCheckConfigSelectedRegionsItemArrayOutput() UptimeCheckConfigSelectedRegionsItemArrayOutput {
	return i.ToUptimeCheckConfigSelectedRegionsItemArrayOutputWithContext(context.Background())
}

func (i UptimeCheckConfigSelectedRegionsItemArray) ToUptimeCheckConfigSelectedRegionsItemArrayOutputWithContext(ctx context.Context) UptimeCheckConfigSelectedRegionsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UptimeCheckConfigSelectedRegionsItemArrayOutput)
}

func (i UptimeCheckConfigSelectedRegionsItemArray) ToOutput(ctx context.Context) pulumix.Output[[]UptimeCheckConfigSelectedRegionsItem] {
	return pulumix.Output[[]UptimeCheckConfigSelectedRegionsItem]{
		OutputState: i.ToUptimeCheckConfigSelectedRegionsItemArrayOutputWithContext(ctx).OutputState,
	}
}

type UptimeCheckConfigSelectedRegionsItemArrayOutput struct{ *pulumi.OutputState }

func (UptimeCheckConfigSelectedRegionsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UptimeCheckConfigSelectedRegionsItem)(nil)).Elem()
}

func (o UptimeCheckConfigSelectedRegionsItemArrayOutput) ToUptimeCheckConfigSelectedRegionsItemArrayOutput() UptimeCheckConfigSelectedRegionsItemArrayOutput {
	return o
}

func (o UptimeCheckConfigSelectedRegionsItemArrayOutput) ToUptimeCheckConfigSelectedRegionsItemArrayOutputWithContext(ctx context.Context) UptimeCheckConfigSelectedRegionsItemArrayOutput {
	return o
}

func (o UptimeCheckConfigSelectedRegionsItemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]UptimeCheckConfigSelectedRegionsItem] {
	return pulumix.Output[[]UptimeCheckConfigSelectedRegionsItem]{
		OutputState: o.OutputState,
	}
}

func (o UptimeCheckConfigSelectedRegionsItemArrayOutput) Index(i pulumi.IntInput) UptimeCheckConfigSelectedRegionsItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UptimeCheckConfigSelectedRegionsItem {
		return vs[0].([]UptimeCheckConfigSelectedRegionsItem)[vs[1].(int)]
	}).(UptimeCheckConfigSelectedRegionsItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AggregationCrossSeriesReducerInput)(nil)).Elem(), AggregationCrossSeriesReducer("REDUCE_NONE"))
	pulumi.RegisterInputType(reflect.TypeOf((*AggregationCrossSeriesReducerPtrInput)(nil)).Elem(), AggregationCrossSeriesReducer("REDUCE_NONE"))
	pulumi.RegisterInputType(reflect.TypeOf((*AggregationPerSeriesAlignerInput)(nil)).Elem(), AggregationPerSeriesAligner("ALIGN_NONE"))
	pulumi.RegisterInputType(reflect.TypeOf((*AggregationPerSeriesAlignerPtrInput)(nil)).Elem(), AggregationPerSeriesAligner("ALIGN_NONE"))
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyCombinerInput)(nil)).Elem(), AlertPolicyCombiner("COMBINE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyCombinerPtrInput)(nil)).Elem(), AlertPolicyCombiner("COMBINE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ContentMatcherMatcherInput)(nil)).Elem(), ContentMatcherMatcher("CONTENT_MATCHER_OPTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ContentMatcherMatcherPtrInput)(nil)).Elem(), ContentMatcherMatcher("CONTENT_MATCHER_OPTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*HttpCheckContentTypeInput)(nil)).Elem(), HttpCheckContentType("TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*HttpCheckContentTypePtrInput)(nil)).Elem(), HttpCheckContentType("TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*HttpCheckRequestMethodInput)(nil)).Elem(), HttpCheckRequestMethod("METHOD_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*HttpCheckRequestMethodPtrInput)(nil)).Elem(), HttpCheckRequestMethod("METHOD_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*InternalCheckerStateInput)(nil)).Elem(), InternalCheckerState("UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*InternalCheckerStatePtrInput)(nil)).Elem(), InternalCheckerState("UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*JsonPathMatcherJsonMatcherInput)(nil)).Elem(), JsonPathMatcherJsonMatcher("JSON_PATH_MATCHER_OPTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*JsonPathMatcherJsonMatcherPtrInput)(nil)).Elem(), JsonPathMatcherJsonMatcher("JSON_PATH_MATCHER_OPTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*LabelDescriptorValueTypeInput)(nil)).Elem(), LabelDescriptorValueType("STRING"))
	pulumi.RegisterInputType(reflect.TypeOf((*LabelDescriptorValueTypePtrInput)(nil)).Elem(), LabelDescriptorValueType("STRING"))
	pulumi.RegisterInputType(reflect.TypeOf((*MetricDescriptorLaunchStageInput)(nil)).Elem(), MetricDescriptorLaunchStage("LAUNCH_STAGE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MetricDescriptorLaunchStagePtrInput)(nil)).Elem(), MetricDescriptorLaunchStage("LAUNCH_STAGE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MetricDescriptorMetadataLaunchStageInput)(nil)).Elem(), MetricDescriptorMetadataLaunchStage("LAUNCH_STAGE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MetricDescriptorMetadataLaunchStagePtrInput)(nil)).Elem(), MetricDescriptorMetadataLaunchStage("LAUNCH_STAGE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MetricDescriptorMetricKindInput)(nil)).Elem(), MetricDescriptorMetricKind("METRIC_KIND_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MetricDescriptorMetricKindPtrInput)(nil)).Elem(), MetricDescriptorMetricKind("METRIC_KIND_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MetricDescriptorValueTypeInput)(nil)).Elem(), MetricDescriptorValueType("VALUE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MetricDescriptorValueTypePtrInput)(nil)).Elem(), MetricDescriptorValueType("VALUE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MetricThresholdComparisonInput)(nil)).Elem(), MetricThresholdComparison("COMPARISON_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MetricThresholdComparisonPtrInput)(nil)).Elem(), MetricThresholdComparison("COMPARISON_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MetricThresholdEvaluationMissingDataInput)(nil)).Elem(), MetricThresholdEvaluationMissingData("EVALUATION_MISSING_DATA_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MetricThresholdEvaluationMissingDataPtrInput)(nil)).Elem(), MetricThresholdEvaluationMissingData("EVALUATION_MISSING_DATA_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringQueryLanguageConditionEvaluationMissingDataInput)(nil)).Elem(), MonitoringQueryLanguageConditionEvaluationMissingData("EVALUATION_MISSING_DATA_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringQueryLanguageConditionEvaluationMissingDataPtrInput)(nil)).Elem(), MonitoringQueryLanguageConditionEvaluationMissingData("EVALUATION_MISSING_DATA_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationChannelVerificationStatusInput)(nil)).Elem(), NotificationChannelVerificationStatus("VERIFICATION_STATUS_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationChannelVerificationStatusPtrInput)(nil)).Elem(), NotificationChannelVerificationStatus("VERIFICATION_STATUS_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGroupResourceTypeInput)(nil)).Elem(), ResourceGroupResourceType("RESOURCE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGroupResourceTypePtrInput)(nil)).Elem(), ResourceGroupResourceType("RESOURCE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ResponseStatusCodeStatusClassInput)(nil)).Elem(), ResponseStatusCodeStatusClass("STATUS_CLASS_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ResponseStatusCodeStatusClassPtrInput)(nil)).Elem(), ResponseStatusCodeStatusClass("STATUS_CLASS_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveCalendarPeriodInput)(nil)).Elem(), ServiceLevelObjectiveCalendarPeriod("CALENDAR_PERIOD_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceLevelObjectiveCalendarPeriodPtrInput)(nil)).Elem(), ServiceLevelObjectiveCalendarPeriod("CALENDAR_PERIOD_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*UptimeCheckConfigCheckerTypeInput)(nil)).Elem(), UptimeCheckConfigCheckerType("CHECKER_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*UptimeCheckConfigCheckerTypePtrInput)(nil)).Elem(), UptimeCheckConfigCheckerType("CHECKER_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*UptimeCheckConfigSelectedRegionsItemInput)(nil)).Elem(), UptimeCheckConfigSelectedRegionsItem("REGION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*UptimeCheckConfigSelectedRegionsItemPtrInput)(nil)).Elem(), UptimeCheckConfigSelectedRegionsItem("REGION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*UptimeCheckConfigSelectedRegionsItemArrayInput)(nil)).Elem(), UptimeCheckConfigSelectedRegionsItemArray{})
	pulumi.RegisterOutputType(AggregationCrossSeriesReducerOutput{})
	pulumi.RegisterOutputType(AggregationCrossSeriesReducerPtrOutput{})
	pulumi.RegisterOutputType(AggregationPerSeriesAlignerOutput{})
	pulumi.RegisterOutputType(AggregationPerSeriesAlignerPtrOutput{})
	pulumi.RegisterOutputType(AlertPolicyCombinerOutput{})
	pulumi.RegisterOutputType(AlertPolicyCombinerPtrOutput{})
	pulumi.RegisterOutputType(ContentMatcherMatcherOutput{})
	pulumi.RegisterOutputType(ContentMatcherMatcherPtrOutput{})
	pulumi.RegisterOutputType(HttpCheckContentTypeOutput{})
	pulumi.RegisterOutputType(HttpCheckContentTypePtrOutput{})
	pulumi.RegisterOutputType(HttpCheckRequestMethodOutput{})
	pulumi.RegisterOutputType(HttpCheckRequestMethodPtrOutput{})
	pulumi.RegisterOutputType(InternalCheckerStateOutput{})
	pulumi.RegisterOutputType(InternalCheckerStatePtrOutput{})
	pulumi.RegisterOutputType(JsonPathMatcherJsonMatcherOutput{})
	pulumi.RegisterOutputType(JsonPathMatcherJsonMatcherPtrOutput{})
	pulumi.RegisterOutputType(LabelDescriptorValueTypeOutput{})
	pulumi.RegisterOutputType(LabelDescriptorValueTypePtrOutput{})
	pulumi.RegisterOutputType(MetricDescriptorLaunchStageOutput{})
	pulumi.RegisterOutputType(MetricDescriptorLaunchStagePtrOutput{})
	pulumi.RegisterOutputType(MetricDescriptorMetadataLaunchStageOutput{})
	pulumi.RegisterOutputType(MetricDescriptorMetadataLaunchStagePtrOutput{})
	pulumi.RegisterOutputType(MetricDescriptorMetricKindOutput{})
	pulumi.RegisterOutputType(MetricDescriptorMetricKindPtrOutput{})
	pulumi.RegisterOutputType(MetricDescriptorValueTypeOutput{})
	pulumi.RegisterOutputType(MetricDescriptorValueTypePtrOutput{})
	pulumi.RegisterOutputType(MetricThresholdComparisonOutput{})
	pulumi.RegisterOutputType(MetricThresholdComparisonPtrOutput{})
	pulumi.RegisterOutputType(MetricThresholdEvaluationMissingDataOutput{})
	pulumi.RegisterOutputType(MetricThresholdEvaluationMissingDataPtrOutput{})
	pulumi.RegisterOutputType(MonitoringQueryLanguageConditionEvaluationMissingDataOutput{})
	pulumi.RegisterOutputType(MonitoringQueryLanguageConditionEvaluationMissingDataPtrOutput{})
	pulumi.RegisterOutputType(NotificationChannelVerificationStatusOutput{})
	pulumi.RegisterOutputType(NotificationChannelVerificationStatusPtrOutput{})
	pulumi.RegisterOutputType(ResourceGroupResourceTypeOutput{})
	pulumi.RegisterOutputType(ResourceGroupResourceTypePtrOutput{})
	pulumi.RegisterOutputType(ResponseStatusCodeStatusClassOutput{})
	pulumi.RegisterOutputType(ResponseStatusCodeStatusClassPtrOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveCalendarPeriodOutput{})
	pulumi.RegisterOutputType(ServiceLevelObjectiveCalendarPeriodPtrOutput{})
	pulumi.RegisterOutputType(UptimeCheckConfigCheckerTypeOutput{})
	pulumi.RegisterOutputType(UptimeCheckConfigCheckerTypePtrOutput{})
	pulumi.RegisterOutputType(UptimeCheckConfigSelectedRegionsItemOutput{})
	pulumi.RegisterOutputType(UptimeCheckConfigSelectedRegionsItemPtrOutput{})
	pulumi.RegisterOutputType(UptimeCheckConfigSelectedRegionsItemArrayOutput{})
}
