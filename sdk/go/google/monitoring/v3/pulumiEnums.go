// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.Not all reducer operations can be applied to all time series. The valid choices depend on the metric_kind and the value_type of the original time series. Reduction can yield a time series with a different metric_kind or value_type than the input time series.Time series data must first be aligned (see per_series_aligner) in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified, and must not be ALIGN_NONE. An alignment_period must also be specified; otherwise, an error is returned.
type AggregationCrossSeriesReducer pulumi.String

const (
	// No cross-time series reduction. The output of the Aligner is returned.
	AggregationCrossSeriesReducerReduceNone = AggregationCrossSeriesReducer("REDUCE_NONE")
	// Reduce by computing the mean value across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics with numeric or distribution values. The value_type of the output is DOUBLE.
	AggregationCrossSeriesReducerReduceMean = AggregationCrossSeriesReducer("REDUCE_MEAN")
	// Reduce by computing the minimum value across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics with numeric values. The value_type of the output is the same as the value_type of the input.
	AggregationCrossSeriesReducerReduceMin = AggregationCrossSeriesReducer("REDUCE_MIN")
	// Reduce by computing the maximum value across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics with numeric values. The value_type of the output is the same as the value_type of the input.
	AggregationCrossSeriesReducerReduceMax = AggregationCrossSeriesReducer("REDUCE_MAX")
	// Reduce by computing the sum across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics with numeric and distribution values. The value_type of the output is the same as the value_type of the input.
	AggregationCrossSeriesReducerReduceSum = AggregationCrossSeriesReducer("REDUCE_SUM")
	// Reduce by computing the standard deviation across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics with numeric or distribution values. The value_type of the output is DOUBLE.
	AggregationCrossSeriesReducerReduceStddev = AggregationCrossSeriesReducer("REDUCE_STDDEV")
	// Reduce by computing the number of data points across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics of numeric, Boolean, distribution, and string value_type. The value_type of the output is INT64.
	AggregationCrossSeriesReducerReduceCount = AggregationCrossSeriesReducer("REDUCE_COUNT")
	// Reduce by computing the number of True-valued data points across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics of Boolean value_type. The value_type of the output is INT64.
	AggregationCrossSeriesReducerReduceCountTrue = AggregationCrossSeriesReducer("REDUCE_COUNT_TRUE")
	// Reduce by computing the number of False-valued data points across time series for each alignment period. This reducer is valid for DELTA and GAUGE metrics of Boolean value_type. The value_type of the output is INT64.
	AggregationCrossSeriesReducerReduceCountFalse = AggregationCrossSeriesReducer("REDUCE_COUNT_FALSE")
	// Reduce by computing the ratio of the number of True-valued data points to the total number of data points for each alignment period. This reducer is valid for DELTA and GAUGE metrics of Boolean value_type. The output value is in the range 0.0, 1.0 and has value_type DOUBLE.
	AggregationCrossSeriesReducerReduceFractionTrue = AggregationCrossSeriesReducer("REDUCE_FRACTION_TRUE")
	// Reduce by computing the 99th percentile (https://en.wikipedia.org/wiki/Percentile) of data points across time series for each alignment period. This reducer is valid for GAUGE and DELTA metrics of numeric and distribution type. The value of the output is DOUBLE.
	AggregationCrossSeriesReducerReducePercentile99 = AggregationCrossSeriesReducer("REDUCE_PERCENTILE_99")
	// Reduce by computing the 95th percentile (https://en.wikipedia.org/wiki/Percentile) of data points across time series for each alignment period. This reducer is valid for GAUGE and DELTA metrics of numeric and distribution type. The value of the output is DOUBLE.
	AggregationCrossSeriesReducerReducePercentile95 = AggregationCrossSeriesReducer("REDUCE_PERCENTILE_95")
	// Reduce by computing the 50th percentile (https://en.wikipedia.org/wiki/Percentile) of data points across time series for each alignment period. This reducer is valid for GAUGE and DELTA metrics of numeric and distribution type. The value of the output is DOUBLE.
	AggregationCrossSeriesReducerReducePercentile50 = AggregationCrossSeriesReducer("REDUCE_PERCENTILE_50")
	// Reduce by computing the 5th percentile (https://en.wikipedia.org/wiki/Percentile) of data points across time series for each alignment period. This reducer is valid for GAUGE and DELTA metrics of numeric and distribution type. The value of the output is DOUBLE.
	AggregationCrossSeriesReducerReducePercentile05 = AggregationCrossSeriesReducer("REDUCE_PERCENTILE_05")
)

func (AggregationCrossSeriesReducer) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AggregationCrossSeriesReducer) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AggregationCrossSeriesReducer) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AggregationCrossSeriesReducer) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AggregationCrossSeriesReducer) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// An Aligner describes how to bring the data points in a single time series into temporal alignment. Except for ALIGN_NONE, all alignments cause all the data points in an alignment_period to be mathematically grouped together, resulting in a single data point for each alignment_period with end timestamp at the end of the period.Not all alignment operations may be applied to all time series. The valid choices depend on the metric_kind and value_type of the original time series. Alignment can change the metric_kind or the value_type of the time series.Time series data must be aligned in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified and not equal to ALIGN_NONE and alignment_period must be specified; otherwise, an error is returned.
type AggregationPerSeriesAligner pulumi.String

const (
	// No alignment. Raw data is returned. Not valid if cross-series reduction is requested. The value_type of the result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignNone = AggregationPerSeriesAligner("ALIGN_NONE")
	// Align and convert to DELTA. The output is delta = y1 - y0.This alignment is valid for CUMULATIVE and DELTA metrics. If the selected alignment period results in periods with no data, then the aligned value for such a period is created by interpolation. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignDelta = AggregationPerSeriesAligner("ALIGN_DELTA")
	// Align and convert to a rate. The result is computed as rate = (y1 - y0)/(t1 - t0), or "delta over time". Think of this aligner as providing the slope of the line that passes through the value at the start and at the end of the alignment_period.This aligner is valid for CUMULATIVE and DELTA metrics with numeric values. If the selected alignment period results in periods with no data, then the aligned value for such a period is created by interpolation. The output is a GAUGE metric with value_type DOUBLE.If, by "rate", you mean "percentage change", see the ALIGN_PERCENT_CHANGE aligner instead.
	AggregationPerSeriesAlignerAlignRate = AggregationPerSeriesAligner("ALIGN_RATE")
	// Align by interpolating between adjacent points around the alignment period boundary. This aligner is valid for GAUGE metrics with numeric values. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignInterpolate = AggregationPerSeriesAligner("ALIGN_INTERPOLATE")
	// Align by moving the most recent data point before the end of the alignment period to the boundary at the end of the alignment period. This aligner is valid for GAUGE metrics. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignNextOlder = AggregationPerSeriesAligner("ALIGN_NEXT_OLDER")
	// Align the time series by returning the minimum value in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric values. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignMin = AggregationPerSeriesAligner("ALIGN_MIN")
	// Align the time series by returning the maximum value in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric values. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignMax = AggregationPerSeriesAligner("ALIGN_MAX")
	// Align the time series by returning the mean value in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric values. The value_type of the aligned result is DOUBLE.
	AggregationPerSeriesAlignerAlignMean = AggregationPerSeriesAligner("ALIGN_MEAN")
	// Align the time series by returning the number of values in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric or Boolean values. The value_type of the aligned result is INT64.
	AggregationPerSeriesAlignerAlignCount = AggregationPerSeriesAligner("ALIGN_COUNT")
	// Align the time series by returning the sum of the values in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric and distribution values. The value_type of the aligned result is the same as the value_type of the input.
	AggregationPerSeriesAlignerAlignSum = AggregationPerSeriesAligner("ALIGN_SUM")
	// Align the time series by returning the standard deviation of the values in each alignment period. This aligner is valid for GAUGE and DELTA metrics with numeric values. The value_type of the output is DOUBLE.
	AggregationPerSeriesAlignerAlignStddev = AggregationPerSeriesAligner("ALIGN_STDDEV")
	// Align the time series by returning the number of True values in each alignment period. This aligner is valid for GAUGE metrics with Boolean values. The value_type of the output is INT64.
	AggregationPerSeriesAlignerAlignCountTrue = AggregationPerSeriesAligner("ALIGN_COUNT_TRUE")
	// Align the time series by returning the number of False values in each alignment period. This aligner is valid for GAUGE metrics with Boolean values. The value_type of the output is INT64.
	AggregationPerSeriesAlignerAlignCountFalse = AggregationPerSeriesAligner("ALIGN_COUNT_FALSE")
	// Align the time series by returning the ratio of the number of True values to the total number of values in each alignment period. This aligner is valid for GAUGE metrics with Boolean values. The output value is in the range 0.0, 1.0 and has value_type DOUBLE.
	AggregationPerSeriesAlignerAlignFractionTrue = AggregationPerSeriesAligner("ALIGN_FRACTION_TRUE")
	// Align the time series by using percentile aggregation (https://en.wikipedia.org/wiki/Percentile). The resulting data point in each alignment period is the 99th percentile of all data points in the period. This aligner is valid for GAUGE and DELTA metrics with distribution values. The output is a GAUGE metric with value_type DOUBLE.
	AggregationPerSeriesAlignerAlignPercentile99 = AggregationPerSeriesAligner("ALIGN_PERCENTILE_99")
	// Align the time series by using percentile aggregation (https://en.wikipedia.org/wiki/Percentile). The resulting data point in each alignment period is the 95th percentile of all data points in the period. This aligner is valid for GAUGE and DELTA metrics with distribution values. The output is a GAUGE metric with value_type DOUBLE.
	AggregationPerSeriesAlignerAlignPercentile95 = AggregationPerSeriesAligner("ALIGN_PERCENTILE_95")
	// Align the time series by using percentile aggregation (https://en.wikipedia.org/wiki/Percentile). The resulting data point in each alignment period is the 50th percentile of all data points in the period. This aligner is valid for GAUGE and DELTA metrics with distribution values. The output is a GAUGE metric with value_type DOUBLE.
	AggregationPerSeriesAlignerAlignPercentile50 = AggregationPerSeriesAligner("ALIGN_PERCENTILE_50")
	// Align the time series by using percentile aggregation (https://en.wikipedia.org/wiki/Percentile). The resulting data point in each alignment period is the 5th percentile of all data points in the period. This aligner is valid for GAUGE and DELTA metrics with distribution values. The output is a GAUGE metric with value_type DOUBLE.
	AggregationPerSeriesAlignerAlignPercentile05 = AggregationPerSeriesAligner("ALIGN_PERCENTILE_05")
	// Align and convert to a percentage change. This aligner is valid for GAUGE and DELTA metrics with numeric values. This alignment returns ((current - previous)/previous) * 100, where the value of previous is determined based on the alignment_period.If the values of current and previous are both 0, then the returned value is 0. If only previous is 0, the returned value is infinity.A 10-minute moving mean is computed at each point of the alignment period prior to the above calculation to smooth the metric and prevent false positives from very short-lived spikes. The moving mean is only applicable for data whose values are >= 0. Any values < 0 are treated as a missing datapoint, and are ignored. While DELTA metrics are accepted by this alignment, special care should be taken that the values for the metric will always be positive. The output is a GAUGE metric with value_type DOUBLE.
	AggregationPerSeriesAlignerAlignPercentChange = AggregationPerSeriesAligner("ALIGN_PERCENT_CHANGE")
)

func (AggregationPerSeriesAligner) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AggregationPerSeriesAligner) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AggregationPerSeriesAligner) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AggregationPerSeriesAligner) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AggregationPerSeriesAligner) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// How to combine the results of multiple conditions to determine if an incident should be opened. If condition_time_series_query_language is present, this must be COMBINE_UNSPECIFIED.
type AlertPolicyCombiner pulumi.String

const (
	// An unspecified combiner.
	AlertPolicyCombinerCombineUnspecified = AlertPolicyCombiner("COMBINE_UNSPECIFIED")
	// Combine conditions using the logical AND operator. An incident is created only if all the conditions are met simultaneously. This combiner is satisfied if all conditions are met, even if they are met on completely different resources.
	AlertPolicyCombinerAnd = AlertPolicyCombiner("AND")
	// Combine conditions using the logical OR operator. An incident is created if any of the listed conditions is met.
	AlertPolicyCombinerOr = AlertPolicyCombiner("OR")
	// Combine conditions using logical AND operator, but unlike the regular AND option, an incident is created only if all conditions are met simultaneously on at least one resource.
	AlertPolicyCombinerAndWithMatchingResource = AlertPolicyCombiner("AND_WITH_MATCHING_RESOURCE")
)

func (AlertPolicyCombiner) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AlertPolicyCombiner) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AlertPolicyCombiner) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AlertPolicyCombiner) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AlertPolicyCombiner) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The type of content matcher that will be applied to the server output, compared to the content string when the check is run.
type ContentMatcherMatcher pulumi.String

const (
	// No content matcher type specified (maintained for backward compatibility, but deprecated for future use). Treated as CONTAINS_STRING.
	ContentMatcherMatcherContentMatcherOptionUnspecified = ContentMatcherMatcher("CONTENT_MATCHER_OPTION_UNSPECIFIED")
	// Selects substring matching. The match succeeds if the output contains the content string. This is the default value for checks without a matcher option, or where the value of matcher is CONTENT_MATCHER_OPTION_UNSPECIFIED.
	ContentMatcherMatcherContainsString = ContentMatcherMatcher("CONTAINS_STRING")
	// Selects negation of substring matching. The match succeeds if the output does NOT contain the content string.
	ContentMatcherMatcherNotContainsString = ContentMatcherMatcher("NOT_CONTAINS_STRING")
	// Selects regular-expression matching. The match succeeds of the output matches the regular expression specified in the content string. Regex matching is only supported for HTTP/HTTPS checks.
	ContentMatcherMatcherMatchesRegex = ContentMatcherMatcher("MATCHES_REGEX")
	// Selects negation of regular-expression matching. The match succeeds if the output does NOT match the regular expression specified in the content string. Regex matching is only supported for HTTP/HTTPS checks.
	ContentMatcherMatcherNotMatchesRegex = ContentMatcherMatcher("NOT_MATCHES_REGEX")
)

func (ContentMatcherMatcher) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ContentMatcherMatcher) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentMatcherMatcher) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentMatcherMatcher) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ContentMatcherMatcher) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The content type header to use for the check. The following configurations result in errors: 1. Content type is specified in both the headers field and the content_type field. 2. Request method is GET and content_type is not TYPE_UNSPECIFIED 3. Request method is POST and content_type is TYPE_UNSPECIFIED. 4. Request method is POST and a "Content-Type" header is provided via headers field. The content_type field should be used instead.
type HttpCheckContentType pulumi.String

const (
	// No content type specified.
	HttpCheckContentTypeTypeUnspecified = HttpCheckContentType("TYPE_UNSPECIFIED")
	// body is in URL-encoded form. Equivalent to setting the Content-Type to application/x-www-form-urlencoded in the HTTP request.
	HttpCheckContentTypeUrlEncoded = HttpCheckContentType("URL_ENCODED")
)

func (HttpCheckContentType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e HttpCheckContentType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpCheckContentType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpCheckContentType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HttpCheckContentType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The HTTP request method to use for the check. If set to METHOD_UNSPECIFIED then request_method defaults to GET.
type HttpCheckRequestMethod pulumi.String

const (
	// No request method specified.
	HttpCheckRequestMethodMethodUnspecified = HttpCheckRequestMethod("METHOD_UNSPECIFIED")
	// GET request.
	HttpCheckRequestMethodGet = HttpCheckRequestMethod("GET")
	// POST request.
	HttpCheckRequestMethodPost = HttpCheckRequestMethod("POST")
)

func (HttpCheckRequestMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e HttpCheckRequestMethod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpCheckRequestMethod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HttpCheckRequestMethod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HttpCheckRequestMethod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The current operational state of the internal checker.
type InternalCheckerState pulumi.String

const (
	// An internal checker should never be in the unspecified state.
	InternalCheckerStateUnspecified = InternalCheckerState("UNSPECIFIED")
	// The checker is being created, provisioned, and configured. A checker in this state can be returned by ListInternalCheckers or GetInternalChecker, as well as by examining the long running Operation (https://cloud.google.com/apis/design/design_patterns#long_running_operations) that created it.
	InternalCheckerStateCreating = InternalCheckerState("CREATING")
	// The checker is running and available for use. A checker in this state can be returned by ListInternalCheckers or GetInternalChecker as well as by examining the long running Operation (https://cloud.google.com/apis/design/design_patterns#long_running_operations) that created it. If a checker is being torn down, it is neither visible nor usable, so there is no "deleting" or "down" state.
	InternalCheckerStateRunning = InternalCheckerState("RUNNING")
)

func (InternalCheckerState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InternalCheckerState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InternalCheckerState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InternalCheckerState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InternalCheckerState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The type of data that can be assigned to the label.
type LabelDescriptorValueType pulumi.String

const (
	// A variable-length string, not to exceed 1,024 characters. This is the default value type.
	LabelDescriptorValueTypeString = LabelDescriptorValueType("STRING")
	// Boolean; true or false.
	LabelDescriptorValueTypeBool = LabelDescriptorValueType("BOOL")
	// A 64-bit signed integer.
	LabelDescriptorValueTypeInt64 = LabelDescriptorValueType("INT64")
)

func (LabelDescriptorValueType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e LabelDescriptorValueType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LabelDescriptorValueType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LabelDescriptorValueType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LabelDescriptorValueType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Optional. The launch stage of the metric definition.
type MetricDescriptorLaunchStage pulumi.String

const (
	// Do not use this default value.
	MetricDescriptorLaunchStageLaunchStageUnspecified = MetricDescriptorLaunchStage("LAUNCH_STAGE_UNSPECIFIED")
	// The feature is not yet implemented. Users can not use it.
	MetricDescriptorLaunchStageUnimplemented = MetricDescriptorLaunchStage("UNIMPLEMENTED")
	// Prelaunch features are hidden from users and are only visible internally.
	MetricDescriptorLaunchStagePrelaunch = MetricDescriptorLaunchStage("PRELAUNCH")
	// Early Access features are limited to a closed group of testers. To use these features, you must sign up in advance and sign a Trusted Tester agreement (which includes confidentiality provisions). These features may be unstable, changed in backward-incompatible ways, and are not guaranteed to be released.
	MetricDescriptorLaunchStageEarlyAccess = MetricDescriptorLaunchStage("EARLY_ACCESS")
	// Alpha is a limited availability test for releases before they are cleared for widespread use. By Alpha, all significant design issues are resolved and we are in the process of verifying functionality. Alpha customers need to apply for access, agree to applicable terms, and have their projects allowlisted. Alpha releases don’t have to be feature complete, no SLAs are provided, and there are no technical support obligations, but they will be far enough along that customers can actually use them in test environments or for limited-use tests -- just like they would in normal production cases.
	MetricDescriptorLaunchStageAlpha = MetricDescriptorLaunchStage("ALPHA")
	// Beta is the point at which we are ready to open a release for any customer to use. There are no SLA or technical support obligations in a Beta release. Products will be complete from a feature perspective, but may have some open outstanding issues. Beta releases are suitable for limited production use cases.
	MetricDescriptorLaunchStageBeta = MetricDescriptorLaunchStage("BETA")
	// GA features are open to all developers and are considered stable and fully qualified for production use.
	MetricDescriptorLaunchStageGa = MetricDescriptorLaunchStage("GA")
	// Deprecated features are scheduled to be shut down and removed. For more information, see the “Deprecation Policy” section of our Terms of Service (https://cloud.google.com/terms/) and the Google Cloud Platform Subject to the Deprecation Policy (https://cloud.google.com/terms/deprecation) documentation.
	MetricDescriptorLaunchStageDeprecated = MetricDescriptorLaunchStage("DEPRECATED")
)

func (MetricDescriptorLaunchStage) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e MetricDescriptorLaunchStage) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricDescriptorLaunchStage) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricDescriptorLaunchStage) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MetricDescriptorLaunchStage) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Whether the metric records instantaneous values, changes to a value, etc. Some combinations of metric_kind and value_type might not be supported.
type MetricDescriptorMetricKind pulumi.String

const (
	// Do not use this default value.
	MetricDescriptorMetricKindMetricKindUnspecified = MetricDescriptorMetricKind("METRIC_KIND_UNSPECIFIED")
	// An instantaneous measurement of a value.
	MetricDescriptorMetricKindGauge = MetricDescriptorMetricKind("GAUGE")
	// The change in a value during a time interval.
	MetricDescriptorMetricKindDelta = MetricDescriptorMetricKind("DELTA")
	// A value accumulated over a time interval. Cumulative measurements in a time series should have the same start time and increasing end times, until an event resets the cumulative value to zero and sets a new start time for the following points.
	MetricDescriptorMetricKindCumulative = MetricDescriptorMetricKind("CUMULATIVE")
)

func (MetricDescriptorMetricKind) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e MetricDescriptorMetricKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricDescriptorMetricKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricDescriptorMetricKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MetricDescriptorMetricKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Whether the measurement is an integer, a floating-point number, etc. Some combinations of metric_kind and value_type might not be supported.
type MetricDescriptorValueType pulumi.String

const (
	// Do not use this default value.
	MetricDescriptorValueTypeValueTypeUnspecified = MetricDescriptorValueType("VALUE_TYPE_UNSPECIFIED")
	// The value is a boolean. This value type can be used only if the metric kind is GAUGE.
	MetricDescriptorValueTypeBool = MetricDescriptorValueType("BOOL")
	// The value is a signed 64-bit integer.
	MetricDescriptorValueTypeInt64 = MetricDescriptorValueType("INT64")
	// The value is a double precision floating point number.
	MetricDescriptorValueTypeDouble = MetricDescriptorValueType("DOUBLE")
	// The value is a text string. This value type can be used only if the metric kind is GAUGE.
	MetricDescriptorValueTypeString = MetricDescriptorValueType("STRING")
	// The value is a Distribution.
	MetricDescriptorValueTypeDistribution = MetricDescriptorValueType("DISTRIBUTION")
	// The value is money.
	MetricDescriptorValueTypeMoney = MetricDescriptorValueType("MONEY")
)

func (MetricDescriptorValueType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e MetricDescriptorValueType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricDescriptorValueType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricDescriptorValueType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MetricDescriptorValueType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The comparison to apply between the time series (indicated by filter and aggregation) and the threshold (indicated by threshold_value). The comparison is applied on each time series, with the time series on the left-hand side and the threshold on the right-hand side.Only COMPARISON_LT and COMPARISON_GT are supported currently.
type MetricThresholdComparison pulumi.String

const (
	// No ordering relationship is specified.
	MetricThresholdComparisonComparisonUnspecified = MetricThresholdComparison("COMPARISON_UNSPECIFIED")
	// True if the left argument is greater than the right argument.
	MetricThresholdComparisonComparisonGt = MetricThresholdComparison("COMPARISON_GT")
	// True if the left argument is greater than or equal to the right argument.
	MetricThresholdComparisonComparisonGe = MetricThresholdComparison("COMPARISON_GE")
	// True if the left argument is less than the right argument.
	MetricThresholdComparisonComparisonLt = MetricThresholdComparison("COMPARISON_LT")
	// True if the left argument is less than or equal to the right argument.
	MetricThresholdComparisonComparisonLe = MetricThresholdComparison("COMPARISON_LE")
	// True if the left argument is equal to the right argument.
	MetricThresholdComparisonComparisonEq = MetricThresholdComparison("COMPARISON_EQ")
	// True if the left argument is not equal to the right argument.
	MetricThresholdComparisonComparisonNe = MetricThresholdComparison("COMPARISON_NE")
)

func (MetricThresholdComparison) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e MetricThresholdComparison) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricThresholdComparison) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricThresholdComparison) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MetricThresholdComparison) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Indicates whether this channel has been verified or not. On a ListNotificationChannels or GetNotificationChannel operation, this field is expected to be populated.If the value is UNVERIFIED, then it indicates that the channel is non-functioning (it both requires verification and lacks verification); otherwise, it is assumed that the channel works.If the channel is neither VERIFIED nor UNVERIFIED, it implies that the channel is of a type that does not require verification or that this specific channel has been exempted from verification because it was created prior to verification being required for channels of this type.This field cannot be modified using a standard UpdateNotificationChannel operation. To change the value of this field, you must call VerifyNotificationChannel.
type NotificationChannelVerificationStatus pulumi.String

const (
	// Sentinel value used to indicate that the state is unknown, omitted, or is not applicable (as in the case of channels that neither support nor require verification in order to function).
	NotificationChannelVerificationStatusVerificationStatusUnspecified = NotificationChannelVerificationStatus("VERIFICATION_STATUS_UNSPECIFIED")
	// The channel has yet to be verified and requires verification to function. Note that this state also applies to the case where the verification process has been initiated by sending a verification code but where the verification code has not been submitted to complete the process.
	NotificationChannelVerificationStatusUnverified = NotificationChannelVerificationStatus("UNVERIFIED")
	// It has been proven that notifications can be received on this notification channel and that someone on the project has access to messages that are delivered to that channel.
	NotificationChannelVerificationStatusVerified = NotificationChannelVerificationStatus("VERIFIED")
)

func (NotificationChannelVerificationStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NotificationChannelVerificationStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NotificationChannelVerificationStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NotificationChannelVerificationStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NotificationChannelVerificationStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The resource type of the group members.
type ResourceGroupResourceType pulumi.String

const (
	// Default value (not valid).
	ResourceGroupResourceTypeResourceTypeUnspecified = ResourceGroupResourceType("RESOURCE_TYPE_UNSPECIFIED")
	// A group of instances from Google Cloud Platform (GCP) or Amazon Web Services (AWS).
	ResourceGroupResourceTypeInstance = ResourceGroupResourceType("INSTANCE")
	// A group of Amazon ELB load balancers.
	ResourceGroupResourceTypeAwsElbLoadBalancer = ResourceGroupResourceType("AWS_ELB_LOAD_BALANCER")
)

func (ResourceGroupResourceType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ResourceGroupResourceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceGroupResourceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceGroupResourceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourceGroupResourceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// A calendar period, semantically "since the start of the current ". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.
type ServiceLevelObjectiveCalendarPeriod pulumi.String

const (
	// Undefined period, raises an error.
	ServiceLevelObjectiveCalendarPeriodCalendarPeriodUnspecified = ServiceLevelObjectiveCalendarPeriod("CALENDAR_PERIOD_UNSPECIFIED")
	// A day.
	ServiceLevelObjectiveCalendarPeriodDay = ServiceLevelObjectiveCalendarPeriod("DAY")
	// A week. Weeks begin on Monday, following ISO 8601 (https://en.wikipedia.org/wiki/ISO_week_date).
	ServiceLevelObjectiveCalendarPeriodWeek = ServiceLevelObjectiveCalendarPeriod("WEEK")
	// A fortnight. The first calendar fortnight of the year begins at the start of week 1 according to ISO 8601 (https://en.wikipedia.org/wiki/ISO_week_date).
	ServiceLevelObjectiveCalendarPeriodFortnight = ServiceLevelObjectiveCalendarPeriod("FORTNIGHT")
	// A month.
	ServiceLevelObjectiveCalendarPeriodMonth = ServiceLevelObjectiveCalendarPeriod("MONTH")
	// A quarter. Quarters start on dates 1-Jan, 1-Apr, 1-Jul, and 1-Oct of each year.
	ServiceLevelObjectiveCalendarPeriodQuarter = ServiceLevelObjectiveCalendarPeriod("QUARTER")
	// A half-year. Half-years start on dates 1-Jan and 1-Jul.
	ServiceLevelObjectiveCalendarPeriodHalf = ServiceLevelObjectiveCalendarPeriod("HALF")
	// A year.
	ServiceLevelObjectiveCalendarPeriodYear = ServiceLevelObjectiveCalendarPeriod("YEAR")
)

func (ServiceLevelObjectiveCalendarPeriod) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ServiceLevelObjectiveCalendarPeriod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServiceLevelObjectiveCalendarPeriod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServiceLevelObjectiveCalendarPeriod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ServiceLevelObjectiveCalendarPeriod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UptimeCheckConfigSelectedRegionsItem pulumi.String

const (
	// Default value if no region is specified. Will result in Uptime checks running from all regions.
	UptimeCheckConfigSelectedRegionsItemRegionUnspecified = UptimeCheckConfigSelectedRegionsItem("REGION_UNSPECIFIED")
	// Allows checks to run from locations within the United States of America.
	UptimeCheckConfigSelectedRegionsItemUsa = UptimeCheckConfigSelectedRegionsItem("USA")
	// Allows checks to run from locations within the continent of Europe.
	UptimeCheckConfigSelectedRegionsItemEurope = UptimeCheckConfigSelectedRegionsItem("EUROPE")
	// Allows checks to run from locations within the continent of South America.
	UptimeCheckConfigSelectedRegionsItemSouthAmerica = UptimeCheckConfigSelectedRegionsItem("SOUTH_AMERICA")
	// Allows checks to run from locations within the Asia Pacific area (ex: Singapore).
	UptimeCheckConfigSelectedRegionsItemAsiaPacific = UptimeCheckConfigSelectedRegionsItem("ASIA_PACIFIC")
)

func (UptimeCheckConfigSelectedRegionsItem) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e UptimeCheckConfigSelectedRegionsItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UptimeCheckConfigSelectedRegionsItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UptimeCheckConfigSelectedRegionsItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UptimeCheckConfigSelectedRegionsItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// UptimeCheckConfigSelectedRegionsItemArrayInput is an input type that accepts UptimeCheckConfigSelectedRegionsItemArray and UptimeCheckConfigSelectedRegionsItemArrayOutput values.
// You can construct a concrete instance of `UptimeCheckConfigSelectedRegionsItemArrayInput` via:
//
//          UptimeCheckConfigSelectedRegionsItemArray{ UptimeCheckConfigSelectedRegionsItemArgs{...} }
type UptimeCheckConfigSelectedRegionsItemArrayInput interface {
	pulumi.Input

	ToUptimeCheckConfigSelectedRegionsItemArrayOutput() UptimeCheckConfigSelectedRegionsItemArrayOutput
	ToUptimeCheckConfigSelectedRegionsItemArrayOutputWithContext(context.Context) UptimeCheckConfigSelectedRegionsItemArrayOutput
}

type UptimeCheckConfigSelectedRegionsItemArray []UptimeCheckConfigSelectedRegionsItem

func (UptimeCheckConfigSelectedRegionsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UptimeCheckConfigSelectedRegionsItem)(nil)).Elem()
}

func (i UptimeCheckConfigSelectedRegionsItemArray) ToUptimeCheckConfigSelectedRegionsItemArrayOutput() UptimeCheckConfigSelectedRegionsItemArrayOutput {
	return i.ToUptimeCheckConfigSelectedRegionsItemArrayOutputWithContext(context.Background())
}

func (i UptimeCheckConfigSelectedRegionsItemArray) ToUptimeCheckConfigSelectedRegionsItemArrayOutputWithContext(ctx context.Context) UptimeCheckConfigSelectedRegionsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UptimeCheckConfigSelectedRegionsItemArrayOutput)
}

type UptimeCheckConfigSelectedRegionsItemArrayOutput struct{ *pulumi.OutputState }

func (UptimeCheckConfigSelectedRegionsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UptimeCheckConfigSelectedRegionsItem)(nil)).Elem()
}

func (o UptimeCheckConfigSelectedRegionsItemArrayOutput) ToUptimeCheckConfigSelectedRegionsItemArrayOutput() UptimeCheckConfigSelectedRegionsItemArrayOutput {
	return o
}

func (o UptimeCheckConfigSelectedRegionsItemArrayOutput) ToUptimeCheckConfigSelectedRegionsItemArrayOutputWithContext(ctx context.Context) UptimeCheckConfigSelectedRegionsItemArrayOutput {
	return o
}

func (o UptimeCheckConfigSelectedRegionsItemArrayOutput) Index(i pulumi.IntInput) pulumi.StringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) pulumi.StringOutput {
		return vs[0].([]UptimeCheckConfigSelectedRegionsItem)[vs[1].(int)].ToStringOutput()
	}).(pulumi.StringOutput)
}
