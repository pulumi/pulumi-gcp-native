// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a Snooze by name.
func LookupSnooze(ctx *pulumi.Context, args *LookupSnoozeArgs, opts ...pulumi.InvokeOption) (*LookupSnoozeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSnoozeResult
	err := ctx.Invoke("google-native:monitoring/v3:getSnooze", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSnoozeArgs struct {
	Project  *string `pulumi:"project"`
	SnoozeId string  `pulumi:"snoozeId"`
}

type LookupSnoozeResult struct {
	// This defines the criteria for applying the Snooze. See Criteria for more information.
	Criteria CriteriaResponse `pulumi:"criteria"`
	// A display name for the Snooze. This can be, at most, 512 unicode characters.
	DisplayName string `pulumi:"displayName"`
	// The Snooze will be active from interval.start_time through interval.end_time. interval.start_time cannot be in the past. There is a 15 second clock skew to account for the time it takes for a request to reach the API from the UI.
	Interval TimeIntervalResponse `pulumi:"interval"`
	// The name of the Snooze. The format is: projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID] The ID of the Snooze will be generated by the system.
	Name string `pulumi:"name"`
}

func LookupSnoozeOutput(ctx *pulumi.Context, args LookupSnoozeOutputArgs, opts ...pulumi.InvokeOption) LookupSnoozeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSnoozeResult, error) {
			args := v.(LookupSnoozeArgs)
			r, err := LookupSnooze(ctx, &args, opts...)
			var s LookupSnoozeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSnoozeResultOutput)
}

type LookupSnoozeOutputArgs struct {
	Project  pulumi.StringPtrInput `pulumi:"project"`
	SnoozeId pulumi.StringInput    `pulumi:"snoozeId"`
}

func (LookupSnoozeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnoozeArgs)(nil)).Elem()
}

type LookupSnoozeResultOutput struct{ *pulumi.OutputState }

func (LookupSnoozeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnoozeResult)(nil)).Elem()
}

func (o LookupSnoozeResultOutput) ToLookupSnoozeResultOutput() LookupSnoozeResultOutput {
	return o
}

func (o LookupSnoozeResultOutput) ToLookupSnoozeResultOutputWithContext(ctx context.Context) LookupSnoozeResultOutput {
	return o
}

// This defines the criteria for applying the Snooze. See Criteria for more information.
func (o LookupSnoozeResultOutput) Criteria() CriteriaResponseOutput {
	return o.ApplyT(func(v LookupSnoozeResult) CriteriaResponse { return v.Criteria }).(CriteriaResponseOutput)
}

// A display name for the Snooze. This can be, at most, 512 unicode characters.
func (o LookupSnoozeResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnoozeResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The Snooze will be active from interval.start_time through interval.end_time. interval.start_time cannot be in the past. There is a 15 second clock skew to account for the time it takes for a request to reach the API from the UI.
func (o LookupSnoozeResultOutput) Interval() TimeIntervalResponseOutput {
	return o.ApplyT(func(v LookupSnoozeResult) TimeIntervalResponse { return v.Interval }).(TimeIntervalResponseOutput)
}

// The name of the Snooze. The format is: projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID] The ID of the Snooze will be generated by the system.
func (o LookupSnoozeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnoozeResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSnoozeResultOutput{})
}
