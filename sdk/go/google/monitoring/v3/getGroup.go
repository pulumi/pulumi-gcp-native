// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a single group.
func LookupGroup(ctx *pulumi.Context, args *LookupGroupArgs, opts ...pulumi.InvokeOption) (*LookupGroupResult, error) {
	var rv LookupGroupResult
	err := ctx.Invoke("google-native:monitoring/v3:getGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupGroupArgs struct {
	GroupId string  `pulumi:"groupId"`
	Project *string `pulumi:"project"`
}

type LookupGroupResult struct {
	// A user-assigned name for this group, used only for display purposes.
	DisplayName string `pulumi:"displayName"`
	// The filter used to determine which monitored resources belong to this group.
	Filter string `pulumi:"filter"`
	// If true, the members of this group are considered to be a cluster. The system can perform additional analysis on groups that are clusters.
	IsCluster bool `pulumi:"isCluster"`
	// The name of this group. The format is: projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID] When creating a group, this field is ignored and a new name is created consisting of the project specified in the call to CreateGroup and a unique [GROUP_ID] that is generated automatically.
	Name string `pulumi:"name"`
	// The name of the group's parent, if it has one. The format is: projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID] For groups with no parent, parent_name is the empty string, "".
	ParentName string `pulumi:"parentName"`
}

func LookupGroupOutput(ctx *pulumi.Context, args LookupGroupOutputArgs, opts ...pulumi.InvokeOption) LookupGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGroupResult, error) {
			args := v.(LookupGroupArgs)
			r, err := LookupGroup(ctx, &args, opts...)
			return *r, err
		}).(LookupGroupResultOutput)
}

type LookupGroupOutputArgs struct {
	GroupId pulumi.StringInput    `pulumi:"groupId"`
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupArgs)(nil)).Elem()
}

type LookupGroupResultOutput struct{ *pulumi.OutputState }

func (LookupGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupResult)(nil)).Elem()
}

func (o LookupGroupResultOutput) ToLookupGroupResultOutput() LookupGroupResultOutput {
	return o
}

func (o LookupGroupResultOutput) ToLookupGroupResultOutputWithContext(ctx context.Context) LookupGroupResultOutput {
	return o
}

// A user-assigned name for this group, used only for display purposes.
func (o LookupGroupResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The filter used to determine which monitored resources belong to this group.
func (o LookupGroupResultOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.Filter }).(pulumi.StringOutput)
}

// If true, the members of this group are considered to be a cluster. The system can perform additional analysis on groups that are clusters.
func (o LookupGroupResultOutput) IsCluster() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupGroupResult) bool { return v.IsCluster }).(pulumi.BoolOutput)
}

// The name of this group. The format is: projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID] When creating a group, this field is ignored and a new name is created consisting of the project specified in the call to CreateGroup and a unique [GROUP_ID] that is generated automatically.
func (o LookupGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the group's parent, if it has one. The format is: projects/[PROJECT_ID_OR_NUMBER]/groups/[GROUP_ID] For groups with no parent, parent_name is the empty string, "".
func (o LookupGroupResultOutput) ParentName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupResult) string { return v.ParentName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGroupResultOutput{})
}
