// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Type of archive files in this repository. The default behavior is DEB.
type AptRepositoryArchiveType string

const (
	// Unspecified.
	AptRepositoryArchiveTypeArchiveTypeUnspecified = AptRepositoryArchiveType("ARCHIVE_TYPE_UNSPECIFIED")
	// DEB indicates that the archive contains binary files.
	AptRepositoryArchiveTypeDeb = AptRepositoryArchiveType("DEB")
	// DEB_SRC indicates that the archive contains source files.
	AptRepositoryArchiveTypeDebSrc = AptRepositoryArchiveType("DEB_SRC")
)

func (AptRepositoryArchiveType) ElementType() reflect.Type {
	return reflect.TypeOf((*AptRepositoryArchiveType)(nil)).Elem()
}

func (e AptRepositoryArchiveType) ToAptRepositoryArchiveTypeOutput() AptRepositoryArchiveTypeOutput {
	return pulumi.ToOutput(e).(AptRepositoryArchiveTypeOutput)
}

func (e AptRepositoryArchiveType) ToAptRepositoryArchiveTypeOutputWithContext(ctx context.Context) AptRepositoryArchiveTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AptRepositoryArchiveTypeOutput)
}

func (e AptRepositoryArchiveType) ToAptRepositoryArchiveTypePtrOutput() AptRepositoryArchiveTypePtrOutput {
	return e.ToAptRepositoryArchiveTypePtrOutputWithContext(context.Background())
}

func (e AptRepositoryArchiveType) ToAptRepositoryArchiveTypePtrOutputWithContext(ctx context.Context) AptRepositoryArchiveTypePtrOutput {
	return AptRepositoryArchiveType(e).ToAptRepositoryArchiveTypeOutputWithContext(ctx).ToAptRepositoryArchiveTypePtrOutputWithContext(ctx)
}

func (e AptRepositoryArchiveType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AptRepositoryArchiveType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AptRepositoryArchiveType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AptRepositoryArchiveType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AptRepositoryArchiveTypeOutput struct{ *pulumi.OutputState }

func (AptRepositoryArchiveTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AptRepositoryArchiveType)(nil)).Elem()
}

func (o AptRepositoryArchiveTypeOutput) ToAptRepositoryArchiveTypeOutput() AptRepositoryArchiveTypeOutput {
	return o
}

func (o AptRepositoryArchiveTypeOutput) ToAptRepositoryArchiveTypeOutputWithContext(ctx context.Context) AptRepositoryArchiveTypeOutput {
	return o
}

func (o AptRepositoryArchiveTypeOutput) ToAptRepositoryArchiveTypePtrOutput() AptRepositoryArchiveTypePtrOutput {
	return o.ToAptRepositoryArchiveTypePtrOutputWithContext(context.Background())
}

func (o AptRepositoryArchiveTypeOutput) ToAptRepositoryArchiveTypePtrOutputWithContext(ctx context.Context) AptRepositoryArchiveTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AptRepositoryArchiveType) *AptRepositoryArchiveType {
		return &v
	}).(AptRepositoryArchiveTypePtrOutput)
}

func (o AptRepositoryArchiveTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AptRepositoryArchiveType] {
	return pulumix.Output[AptRepositoryArchiveType]{
		OutputState: o.OutputState,
	}
}

func (o AptRepositoryArchiveTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AptRepositoryArchiveTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AptRepositoryArchiveType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AptRepositoryArchiveTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AptRepositoryArchiveTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AptRepositoryArchiveType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AptRepositoryArchiveTypePtrOutput struct{ *pulumi.OutputState }

func (AptRepositoryArchiveTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AptRepositoryArchiveType)(nil)).Elem()
}

func (o AptRepositoryArchiveTypePtrOutput) ToAptRepositoryArchiveTypePtrOutput() AptRepositoryArchiveTypePtrOutput {
	return o
}

func (o AptRepositoryArchiveTypePtrOutput) ToAptRepositoryArchiveTypePtrOutputWithContext(ctx context.Context) AptRepositoryArchiveTypePtrOutput {
	return o
}

func (o AptRepositoryArchiveTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AptRepositoryArchiveType] {
	return pulumix.Output[*AptRepositoryArchiveType]{
		OutputState: o.OutputState,
	}
}

func (o AptRepositoryArchiveTypePtrOutput) Elem() AptRepositoryArchiveTypeOutput {
	return o.ApplyT(func(v *AptRepositoryArchiveType) AptRepositoryArchiveType {
		if v != nil {
			return *v
		}
		var ret AptRepositoryArchiveType
		return ret
	}).(AptRepositoryArchiveTypeOutput)
}

func (o AptRepositoryArchiveTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AptRepositoryArchiveTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AptRepositoryArchiveType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AptRepositoryArchiveTypeInput is an input type that accepts AptRepositoryArchiveTypeArgs and AptRepositoryArchiveTypeOutput values.
// You can construct a concrete instance of `AptRepositoryArchiveTypeInput` via:
//
//	AptRepositoryArchiveTypeArgs{...}
type AptRepositoryArchiveTypeInput interface {
	pulumi.Input

	ToAptRepositoryArchiveTypeOutput() AptRepositoryArchiveTypeOutput
	ToAptRepositoryArchiveTypeOutputWithContext(context.Context) AptRepositoryArchiveTypeOutput
}

var aptRepositoryArchiveTypePtrType = reflect.TypeOf((**AptRepositoryArchiveType)(nil)).Elem()

type AptRepositoryArchiveTypePtrInput interface {
	pulumi.Input

	ToAptRepositoryArchiveTypePtrOutput() AptRepositoryArchiveTypePtrOutput
	ToAptRepositoryArchiveTypePtrOutputWithContext(context.Context) AptRepositoryArchiveTypePtrOutput
}

type aptRepositoryArchiveTypePtr string

func AptRepositoryArchiveTypePtr(v string) AptRepositoryArchiveTypePtrInput {
	return (*aptRepositoryArchiveTypePtr)(&v)
}

func (*aptRepositoryArchiveTypePtr) ElementType() reflect.Type {
	return aptRepositoryArchiveTypePtrType
}

func (in *aptRepositoryArchiveTypePtr) ToAptRepositoryArchiveTypePtrOutput() AptRepositoryArchiveTypePtrOutput {
	return pulumi.ToOutput(in).(AptRepositoryArchiveTypePtrOutput)
}

func (in *aptRepositoryArchiveTypePtr) ToAptRepositoryArchiveTypePtrOutputWithContext(ctx context.Context) AptRepositoryArchiveTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AptRepositoryArchiveTypePtrOutput)
}

func (in *aptRepositoryArchiveTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AptRepositoryArchiveType] {
	return pulumix.Output[*AptRepositoryArchiveType]{
		OutputState: in.ToAptRepositoryArchiveTypePtrOutputWithContext(ctx).OutputState,
	}
}

// By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
type AptSettingsType string

const (
	// By default, upgrade will be performed.
	AptSettingsTypeTypeUnspecified = AptSettingsType("TYPE_UNSPECIFIED")
	// Runs `apt-get dist-upgrade`.
	AptSettingsTypeDist = AptSettingsType("DIST")
	// Runs `apt-get upgrade`.
	AptSettingsTypeUpgrade = AptSettingsType("UPGRADE")
)

func (AptSettingsType) ElementType() reflect.Type {
	return reflect.TypeOf((*AptSettingsType)(nil)).Elem()
}

func (e AptSettingsType) ToAptSettingsTypeOutput() AptSettingsTypeOutput {
	return pulumi.ToOutput(e).(AptSettingsTypeOutput)
}

func (e AptSettingsType) ToAptSettingsTypeOutputWithContext(ctx context.Context) AptSettingsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AptSettingsTypeOutput)
}

func (e AptSettingsType) ToAptSettingsTypePtrOutput() AptSettingsTypePtrOutput {
	return e.ToAptSettingsTypePtrOutputWithContext(context.Background())
}

func (e AptSettingsType) ToAptSettingsTypePtrOutputWithContext(ctx context.Context) AptSettingsTypePtrOutput {
	return AptSettingsType(e).ToAptSettingsTypeOutputWithContext(ctx).ToAptSettingsTypePtrOutputWithContext(ctx)
}

func (e AptSettingsType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AptSettingsType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AptSettingsType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AptSettingsType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AptSettingsTypeOutput struct{ *pulumi.OutputState }

func (AptSettingsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AptSettingsType)(nil)).Elem()
}

func (o AptSettingsTypeOutput) ToAptSettingsTypeOutput() AptSettingsTypeOutput {
	return o
}

func (o AptSettingsTypeOutput) ToAptSettingsTypeOutputWithContext(ctx context.Context) AptSettingsTypeOutput {
	return o
}

func (o AptSettingsTypeOutput) ToAptSettingsTypePtrOutput() AptSettingsTypePtrOutput {
	return o.ToAptSettingsTypePtrOutputWithContext(context.Background())
}

func (o AptSettingsTypeOutput) ToAptSettingsTypePtrOutputWithContext(ctx context.Context) AptSettingsTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AptSettingsType) *AptSettingsType {
		return &v
	}).(AptSettingsTypePtrOutput)
}

func (o AptSettingsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AptSettingsType] {
	return pulumix.Output[AptSettingsType]{
		OutputState: o.OutputState,
	}
}

func (o AptSettingsTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AptSettingsTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AptSettingsType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AptSettingsTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AptSettingsTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AptSettingsType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AptSettingsTypePtrOutput struct{ *pulumi.OutputState }

func (AptSettingsTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AptSettingsType)(nil)).Elem()
}

func (o AptSettingsTypePtrOutput) ToAptSettingsTypePtrOutput() AptSettingsTypePtrOutput {
	return o
}

func (o AptSettingsTypePtrOutput) ToAptSettingsTypePtrOutputWithContext(ctx context.Context) AptSettingsTypePtrOutput {
	return o
}

func (o AptSettingsTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AptSettingsType] {
	return pulumix.Output[*AptSettingsType]{
		OutputState: o.OutputState,
	}
}

func (o AptSettingsTypePtrOutput) Elem() AptSettingsTypeOutput {
	return o.ApplyT(func(v *AptSettingsType) AptSettingsType {
		if v != nil {
			return *v
		}
		var ret AptSettingsType
		return ret
	}).(AptSettingsTypeOutput)
}

func (o AptSettingsTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AptSettingsTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AptSettingsType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AptSettingsTypeInput is an input type that accepts AptSettingsTypeArgs and AptSettingsTypeOutput values.
// You can construct a concrete instance of `AptSettingsTypeInput` via:
//
//	AptSettingsTypeArgs{...}
type AptSettingsTypeInput interface {
	pulumi.Input

	ToAptSettingsTypeOutput() AptSettingsTypeOutput
	ToAptSettingsTypeOutputWithContext(context.Context) AptSettingsTypeOutput
}

var aptSettingsTypePtrType = reflect.TypeOf((**AptSettingsType)(nil)).Elem()

type AptSettingsTypePtrInput interface {
	pulumi.Input

	ToAptSettingsTypePtrOutput() AptSettingsTypePtrOutput
	ToAptSettingsTypePtrOutputWithContext(context.Context) AptSettingsTypePtrOutput
}

type aptSettingsTypePtr string

func AptSettingsTypePtr(v string) AptSettingsTypePtrInput {
	return (*aptSettingsTypePtr)(&v)
}

func (*aptSettingsTypePtr) ElementType() reflect.Type {
	return aptSettingsTypePtrType
}

func (in *aptSettingsTypePtr) ToAptSettingsTypePtrOutput() AptSettingsTypePtrOutput {
	return pulumi.ToOutput(in).(AptSettingsTypePtrOutput)
}

func (in *aptSettingsTypePtr) ToAptSettingsTypePtrOutputWithContext(ctx context.Context) AptSettingsTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AptSettingsTypePtrOutput)
}

func (in *aptSettingsTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AptSettingsType] {
	return pulumix.Output[*AptSettingsType]{
		OutputState: in.ToAptSettingsTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
type ExecStepConfigInterpreter string

const (
	// If the interpreter is not specified, the value defaults to `NONE`.
	ExecStepConfigInterpreterInterpreterUnspecified = ExecStepConfigInterpreter("INTERPRETER_UNSPECIFIED")
	// Indicates that the file is run as follows on each operating system: + For Linux VMs, the file is ran as an executable and the interpreter might be parsed from the [shebang line](<https://wikipedia.org/wiki/Shebang_(Unix)>) of the file. + For Windows VM, this value is not supported.
	ExecStepConfigInterpreterNone = ExecStepConfigInterpreter("NONE")
	// Indicates that the file is run with `/bin/sh` on Linux and `cmd` on Windows.
	ExecStepConfigInterpreterShell = ExecStepConfigInterpreter("SHELL")
	// Indicates that the file is run with PowerShell.
	ExecStepConfigInterpreterPowershell = ExecStepConfigInterpreter("POWERSHELL")
)

func (ExecStepConfigInterpreter) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStepConfigInterpreter)(nil)).Elem()
}

func (e ExecStepConfigInterpreter) ToExecStepConfigInterpreterOutput() ExecStepConfigInterpreterOutput {
	return pulumi.ToOutput(e).(ExecStepConfigInterpreterOutput)
}

func (e ExecStepConfigInterpreter) ToExecStepConfigInterpreterOutputWithContext(ctx context.Context) ExecStepConfigInterpreterOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ExecStepConfigInterpreterOutput)
}

func (e ExecStepConfigInterpreter) ToExecStepConfigInterpreterPtrOutput() ExecStepConfigInterpreterPtrOutput {
	return e.ToExecStepConfigInterpreterPtrOutputWithContext(context.Background())
}

func (e ExecStepConfigInterpreter) ToExecStepConfigInterpreterPtrOutputWithContext(ctx context.Context) ExecStepConfigInterpreterPtrOutput {
	return ExecStepConfigInterpreter(e).ToExecStepConfigInterpreterOutputWithContext(ctx).ToExecStepConfigInterpreterPtrOutputWithContext(ctx)
}

func (e ExecStepConfigInterpreter) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExecStepConfigInterpreter) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExecStepConfigInterpreter) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ExecStepConfigInterpreter) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ExecStepConfigInterpreterOutput struct{ *pulumi.OutputState }

func (ExecStepConfigInterpreterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStepConfigInterpreter)(nil)).Elem()
}

func (o ExecStepConfigInterpreterOutput) ToExecStepConfigInterpreterOutput() ExecStepConfigInterpreterOutput {
	return o
}

func (o ExecStepConfigInterpreterOutput) ToExecStepConfigInterpreterOutputWithContext(ctx context.Context) ExecStepConfigInterpreterOutput {
	return o
}

func (o ExecStepConfigInterpreterOutput) ToExecStepConfigInterpreterPtrOutput() ExecStepConfigInterpreterPtrOutput {
	return o.ToExecStepConfigInterpreterPtrOutputWithContext(context.Background())
}

func (o ExecStepConfigInterpreterOutput) ToExecStepConfigInterpreterPtrOutputWithContext(ctx context.Context) ExecStepConfigInterpreterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExecStepConfigInterpreter) *ExecStepConfigInterpreter {
		return &v
	}).(ExecStepConfigInterpreterPtrOutput)
}

func (o ExecStepConfigInterpreterOutput) ToOutput(ctx context.Context) pulumix.Output[ExecStepConfigInterpreter] {
	return pulumix.Output[ExecStepConfigInterpreter]{
		OutputState: o.OutputState,
	}
}

func (o ExecStepConfigInterpreterOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ExecStepConfigInterpreterOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExecStepConfigInterpreter) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ExecStepConfigInterpreterOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExecStepConfigInterpreterOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExecStepConfigInterpreter) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ExecStepConfigInterpreterPtrOutput struct{ *pulumi.OutputState }

func (ExecStepConfigInterpreterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecStepConfigInterpreter)(nil)).Elem()
}

func (o ExecStepConfigInterpreterPtrOutput) ToExecStepConfigInterpreterPtrOutput() ExecStepConfigInterpreterPtrOutput {
	return o
}

func (o ExecStepConfigInterpreterPtrOutput) ToExecStepConfigInterpreterPtrOutputWithContext(ctx context.Context) ExecStepConfigInterpreterPtrOutput {
	return o
}

func (o ExecStepConfigInterpreterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExecStepConfigInterpreter] {
	return pulumix.Output[*ExecStepConfigInterpreter]{
		OutputState: o.OutputState,
	}
}

func (o ExecStepConfigInterpreterPtrOutput) Elem() ExecStepConfigInterpreterOutput {
	return o.ApplyT(func(v *ExecStepConfigInterpreter) ExecStepConfigInterpreter {
		if v != nil {
			return *v
		}
		var ret ExecStepConfigInterpreter
		return ret
	}).(ExecStepConfigInterpreterOutput)
}

func (o ExecStepConfigInterpreterPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExecStepConfigInterpreterPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ExecStepConfigInterpreter) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ExecStepConfigInterpreterInput is an input type that accepts ExecStepConfigInterpreterArgs and ExecStepConfigInterpreterOutput values.
// You can construct a concrete instance of `ExecStepConfigInterpreterInput` via:
//
//	ExecStepConfigInterpreterArgs{...}
type ExecStepConfigInterpreterInput interface {
	pulumi.Input

	ToExecStepConfigInterpreterOutput() ExecStepConfigInterpreterOutput
	ToExecStepConfigInterpreterOutputWithContext(context.Context) ExecStepConfigInterpreterOutput
}

var execStepConfigInterpreterPtrType = reflect.TypeOf((**ExecStepConfigInterpreter)(nil)).Elem()

type ExecStepConfigInterpreterPtrInput interface {
	pulumi.Input

	ToExecStepConfigInterpreterPtrOutput() ExecStepConfigInterpreterPtrOutput
	ToExecStepConfigInterpreterPtrOutputWithContext(context.Context) ExecStepConfigInterpreterPtrOutput
}

type execStepConfigInterpreterPtr string

func ExecStepConfigInterpreterPtr(v string) ExecStepConfigInterpreterPtrInput {
	return (*execStepConfigInterpreterPtr)(&v)
}

func (*execStepConfigInterpreterPtr) ElementType() reflect.Type {
	return execStepConfigInterpreterPtrType
}

func (in *execStepConfigInterpreterPtr) ToExecStepConfigInterpreterPtrOutput() ExecStepConfigInterpreterPtrOutput {
	return pulumi.ToOutput(in).(ExecStepConfigInterpreterPtrOutput)
}

func (in *execStepConfigInterpreterPtr) ToExecStepConfigInterpreterPtrOutputWithContext(ctx context.Context) ExecStepConfigInterpreterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ExecStepConfigInterpreterPtrOutput)
}

func (in *execStepConfigInterpreterPtr) ToOutput(ctx context.Context) pulumix.Output[*ExecStepConfigInterpreter] {
	return pulumix.Output[*ExecStepConfigInterpreter]{
		OutputState: in.ToExecStepConfigInterpreterPtrOutputWithContext(ctx).OutputState,
	}
}

// The desired_state the agent should maintain for this package. The default is to ensure the package is installed.
type PackageDesiredState string

const (
	// The default is to ensure the package is installed.
	PackageDesiredStateDesiredStateUnspecified = PackageDesiredState("DESIRED_STATE_UNSPECIFIED")
	// The agent ensures that the package is installed.
	PackageDesiredStateInstalled = PackageDesiredState("INSTALLED")
	// The agent ensures that the package is installed and periodically checks for and install any updates.
	PackageDesiredStateUpdated = PackageDesiredState("UPDATED")
	// The agent ensures that the package is not installed and uninstall it if detected.
	PackageDesiredStateRemoved = PackageDesiredState("REMOVED")
)

func (PackageDesiredState) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageDesiredState)(nil)).Elem()
}

func (e PackageDesiredState) ToPackageDesiredStateOutput() PackageDesiredStateOutput {
	return pulumi.ToOutput(e).(PackageDesiredStateOutput)
}

func (e PackageDesiredState) ToPackageDesiredStateOutputWithContext(ctx context.Context) PackageDesiredStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PackageDesiredStateOutput)
}

func (e PackageDesiredState) ToPackageDesiredStatePtrOutput() PackageDesiredStatePtrOutput {
	return e.ToPackageDesiredStatePtrOutputWithContext(context.Background())
}

func (e PackageDesiredState) ToPackageDesiredStatePtrOutputWithContext(ctx context.Context) PackageDesiredStatePtrOutput {
	return PackageDesiredState(e).ToPackageDesiredStateOutputWithContext(ctx).ToPackageDesiredStatePtrOutputWithContext(ctx)
}

func (e PackageDesiredState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PackageDesiredState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PackageDesiredState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PackageDesiredState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PackageDesiredStateOutput struct{ *pulumi.OutputState }

func (PackageDesiredStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageDesiredState)(nil)).Elem()
}

func (o PackageDesiredStateOutput) ToPackageDesiredStateOutput() PackageDesiredStateOutput {
	return o
}

func (o PackageDesiredStateOutput) ToPackageDesiredStateOutputWithContext(ctx context.Context) PackageDesiredStateOutput {
	return o
}

func (o PackageDesiredStateOutput) ToPackageDesiredStatePtrOutput() PackageDesiredStatePtrOutput {
	return o.ToPackageDesiredStatePtrOutputWithContext(context.Background())
}

func (o PackageDesiredStateOutput) ToPackageDesiredStatePtrOutputWithContext(ctx context.Context) PackageDesiredStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PackageDesiredState) *PackageDesiredState {
		return &v
	}).(PackageDesiredStatePtrOutput)
}

func (o PackageDesiredStateOutput) ToOutput(ctx context.Context) pulumix.Output[PackageDesiredState] {
	return pulumix.Output[PackageDesiredState]{
		OutputState: o.OutputState,
	}
}

func (o PackageDesiredStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PackageDesiredStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PackageDesiredState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PackageDesiredStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PackageDesiredStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PackageDesiredState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PackageDesiredStatePtrOutput struct{ *pulumi.OutputState }

func (PackageDesiredStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageDesiredState)(nil)).Elem()
}

func (o PackageDesiredStatePtrOutput) ToPackageDesiredStatePtrOutput() PackageDesiredStatePtrOutput {
	return o
}

func (o PackageDesiredStatePtrOutput) ToPackageDesiredStatePtrOutputWithContext(ctx context.Context) PackageDesiredStatePtrOutput {
	return o
}

func (o PackageDesiredStatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PackageDesiredState] {
	return pulumix.Output[*PackageDesiredState]{
		OutputState: o.OutputState,
	}
}

func (o PackageDesiredStatePtrOutput) Elem() PackageDesiredStateOutput {
	return o.ApplyT(func(v *PackageDesiredState) PackageDesiredState {
		if v != nil {
			return *v
		}
		var ret PackageDesiredState
		return ret
	}).(PackageDesiredStateOutput)
}

func (o PackageDesiredStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PackageDesiredStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PackageDesiredState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PackageDesiredStateInput is an input type that accepts PackageDesiredStateArgs and PackageDesiredStateOutput values.
// You can construct a concrete instance of `PackageDesiredStateInput` via:
//
//	PackageDesiredStateArgs{...}
type PackageDesiredStateInput interface {
	pulumi.Input

	ToPackageDesiredStateOutput() PackageDesiredStateOutput
	ToPackageDesiredStateOutputWithContext(context.Context) PackageDesiredStateOutput
}

var packageDesiredStatePtrType = reflect.TypeOf((**PackageDesiredState)(nil)).Elem()

type PackageDesiredStatePtrInput interface {
	pulumi.Input

	ToPackageDesiredStatePtrOutput() PackageDesiredStatePtrOutput
	ToPackageDesiredStatePtrOutputWithContext(context.Context) PackageDesiredStatePtrOutput
}

type packageDesiredStatePtr string

func PackageDesiredStatePtr(v string) PackageDesiredStatePtrInput {
	return (*packageDesiredStatePtr)(&v)
}

func (*packageDesiredStatePtr) ElementType() reflect.Type {
	return packageDesiredStatePtrType
}

func (in *packageDesiredStatePtr) ToPackageDesiredStatePtrOutput() PackageDesiredStatePtrOutput {
	return pulumi.ToOutput(in).(PackageDesiredStatePtrOutput)
}

func (in *packageDesiredStatePtr) ToPackageDesiredStatePtrOutputWithContext(ctx context.Context) PackageDesiredStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PackageDesiredStatePtrOutput)
}

func (in *packageDesiredStatePtr) ToOutput(ctx context.Context) pulumix.Output[*PackageDesiredState] {
	return pulumix.Output[*PackageDesiredState]{
		OutputState: in.ToPackageDesiredStatePtrOutputWithContext(ctx).OutputState,
	}
}

// Type of package manager that can be used to install this package. If a system does not have the package manager, the package is not installed or removed no error message is returned. By default, or if you specify `ANY`, the agent attempts to install and remove this package using the default package manager. This is useful when creating a policy that applies to different types of systems. The default behavior is ANY.
type PackageManager string

const (
	// The default behavior is ANY.
	PackageManagerManagerUnspecified = PackageManager("MANAGER_UNSPECIFIED")
	// Apply this package config using the default system package manager.
	PackageManagerAny = PackageManager("ANY")
	// Apply this package config only if Apt is available on the system.
	PackageManagerApt = PackageManager("APT")
	// Apply this package config only if Yum is available on the system.
	PackageManagerYum = PackageManager("YUM")
	// Apply this package config only if Zypper is available on the system.
	PackageManagerZypper = PackageManager("ZYPPER")
	// Apply this package config only if GooGet is available on the system.
	PackageManagerGoo = PackageManager("GOO")
)

func (PackageManager) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageManager)(nil)).Elem()
}

func (e PackageManager) ToPackageManagerOutput() PackageManagerOutput {
	return pulumi.ToOutput(e).(PackageManagerOutput)
}

func (e PackageManager) ToPackageManagerOutputWithContext(ctx context.Context) PackageManagerOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PackageManagerOutput)
}

func (e PackageManager) ToPackageManagerPtrOutput() PackageManagerPtrOutput {
	return e.ToPackageManagerPtrOutputWithContext(context.Background())
}

func (e PackageManager) ToPackageManagerPtrOutputWithContext(ctx context.Context) PackageManagerPtrOutput {
	return PackageManager(e).ToPackageManagerOutputWithContext(ctx).ToPackageManagerPtrOutputWithContext(ctx)
}

func (e PackageManager) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PackageManager) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PackageManager) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PackageManager) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PackageManagerOutput struct{ *pulumi.OutputState }

func (PackageManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageManager)(nil)).Elem()
}

func (o PackageManagerOutput) ToPackageManagerOutput() PackageManagerOutput {
	return o
}

func (o PackageManagerOutput) ToPackageManagerOutputWithContext(ctx context.Context) PackageManagerOutput {
	return o
}

func (o PackageManagerOutput) ToPackageManagerPtrOutput() PackageManagerPtrOutput {
	return o.ToPackageManagerPtrOutputWithContext(context.Background())
}

func (o PackageManagerOutput) ToPackageManagerPtrOutputWithContext(ctx context.Context) PackageManagerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PackageManager) *PackageManager {
		return &v
	}).(PackageManagerPtrOutput)
}

func (o PackageManagerOutput) ToOutput(ctx context.Context) pulumix.Output[PackageManager] {
	return pulumix.Output[PackageManager]{
		OutputState: o.OutputState,
	}
}

func (o PackageManagerOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PackageManagerOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PackageManager) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PackageManagerOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PackageManagerOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PackageManager) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PackageManagerPtrOutput struct{ *pulumi.OutputState }

func (PackageManagerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageManager)(nil)).Elem()
}

func (o PackageManagerPtrOutput) ToPackageManagerPtrOutput() PackageManagerPtrOutput {
	return o
}

func (o PackageManagerPtrOutput) ToPackageManagerPtrOutputWithContext(ctx context.Context) PackageManagerPtrOutput {
	return o
}

func (o PackageManagerPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PackageManager] {
	return pulumix.Output[*PackageManager]{
		OutputState: o.OutputState,
	}
}

func (o PackageManagerPtrOutput) Elem() PackageManagerOutput {
	return o.ApplyT(func(v *PackageManager) PackageManager {
		if v != nil {
			return *v
		}
		var ret PackageManager
		return ret
	}).(PackageManagerOutput)
}

func (o PackageManagerPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PackageManagerPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PackageManager) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PackageManagerInput is an input type that accepts PackageManagerArgs and PackageManagerOutput values.
// You can construct a concrete instance of `PackageManagerInput` via:
//
//	PackageManagerArgs{...}
type PackageManagerInput interface {
	pulumi.Input

	ToPackageManagerOutput() PackageManagerOutput
	ToPackageManagerOutputWithContext(context.Context) PackageManagerOutput
}

var packageManagerPtrType = reflect.TypeOf((**PackageManager)(nil)).Elem()

type PackageManagerPtrInput interface {
	pulumi.Input

	ToPackageManagerPtrOutput() PackageManagerPtrOutput
	ToPackageManagerPtrOutputWithContext(context.Context) PackageManagerPtrOutput
}

type packageManagerPtr string

func PackageManagerPtr(v string) PackageManagerPtrInput {
	return (*packageManagerPtr)(&v)
}

func (*packageManagerPtr) ElementType() reflect.Type {
	return packageManagerPtrType
}

func (in *packageManagerPtr) ToPackageManagerPtrOutput() PackageManagerPtrOutput {
	return pulumi.ToOutput(in).(PackageManagerPtrOutput)
}

func (in *packageManagerPtr) ToPackageManagerPtrOutputWithContext(ctx context.Context) PackageManagerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PackageManagerPtrOutput)
}

func (in *packageManagerPtr) ToOutput(ctx context.Context) pulumix.Output[*PackageManager] {
	return pulumix.Output[*PackageManager]{
		OutputState: in.ToPackageManagerPtrOutputWithContext(ctx).OutputState,
	}
}

// Post-patch reboot settings.
type PatchConfigRebootConfig string

const (
	// The default behavior is DEFAULT.
	PatchConfigRebootConfigRebootConfigUnspecified = PatchConfigRebootConfig("REBOOT_CONFIG_UNSPECIFIED")
	// The agent decides if a reboot is necessary by checking signals such as registry keys on Windows or `/var/run/reboot-required` on APT based systems. On RPM based systems, a set of core system package install times are compared with system boot time.
	PatchConfigRebootConfigDefault = PatchConfigRebootConfig("DEFAULT")
	// Always reboot the machine after the update completes.
	PatchConfigRebootConfigAlways = PatchConfigRebootConfig("ALWAYS")
	// Never reboot the machine after the update completes.
	PatchConfigRebootConfigNever = PatchConfigRebootConfig("NEVER")
)

func (PatchConfigRebootConfig) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchConfigRebootConfig)(nil)).Elem()
}

func (e PatchConfigRebootConfig) ToPatchConfigRebootConfigOutput() PatchConfigRebootConfigOutput {
	return pulumi.ToOutput(e).(PatchConfigRebootConfigOutput)
}

func (e PatchConfigRebootConfig) ToPatchConfigRebootConfigOutputWithContext(ctx context.Context) PatchConfigRebootConfigOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PatchConfigRebootConfigOutput)
}

func (e PatchConfigRebootConfig) ToPatchConfigRebootConfigPtrOutput() PatchConfigRebootConfigPtrOutput {
	return e.ToPatchConfigRebootConfigPtrOutputWithContext(context.Background())
}

func (e PatchConfigRebootConfig) ToPatchConfigRebootConfigPtrOutputWithContext(ctx context.Context) PatchConfigRebootConfigPtrOutput {
	return PatchConfigRebootConfig(e).ToPatchConfigRebootConfigOutputWithContext(ctx).ToPatchConfigRebootConfigPtrOutputWithContext(ctx)
}

func (e PatchConfigRebootConfig) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PatchConfigRebootConfig) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PatchConfigRebootConfig) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PatchConfigRebootConfig) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PatchConfigRebootConfigOutput struct{ *pulumi.OutputState }

func (PatchConfigRebootConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchConfigRebootConfig)(nil)).Elem()
}

func (o PatchConfigRebootConfigOutput) ToPatchConfigRebootConfigOutput() PatchConfigRebootConfigOutput {
	return o
}

func (o PatchConfigRebootConfigOutput) ToPatchConfigRebootConfigOutputWithContext(ctx context.Context) PatchConfigRebootConfigOutput {
	return o
}

func (o PatchConfigRebootConfigOutput) ToPatchConfigRebootConfigPtrOutput() PatchConfigRebootConfigPtrOutput {
	return o.ToPatchConfigRebootConfigPtrOutputWithContext(context.Background())
}

func (o PatchConfigRebootConfigOutput) ToPatchConfigRebootConfigPtrOutputWithContext(ctx context.Context) PatchConfigRebootConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PatchConfigRebootConfig) *PatchConfigRebootConfig {
		return &v
	}).(PatchConfigRebootConfigPtrOutput)
}

func (o PatchConfigRebootConfigOutput) ToOutput(ctx context.Context) pulumix.Output[PatchConfigRebootConfig] {
	return pulumix.Output[PatchConfigRebootConfig]{
		OutputState: o.OutputState,
	}
}

func (o PatchConfigRebootConfigOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PatchConfigRebootConfigOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PatchConfigRebootConfig) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PatchConfigRebootConfigOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PatchConfigRebootConfigOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PatchConfigRebootConfig) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PatchConfigRebootConfigPtrOutput struct{ *pulumi.OutputState }

func (PatchConfigRebootConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchConfigRebootConfig)(nil)).Elem()
}

func (o PatchConfigRebootConfigPtrOutput) ToPatchConfigRebootConfigPtrOutput() PatchConfigRebootConfigPtrOutput {
	return o
}

func (o PatchConfigRebootConfigPtrOutput) ToPatchConfigRebootConfigPtrOutputWithContext(ctx context.Context) PatchConfigRebootConfigPtrOutput {
	return o
}

func (o PatchConfigRebootConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PatchConfigRebootConfig] {
	return pulumix.Output[*PatchConfigRebootConfig]{
		OutputState: o.OutputState,
	}
}

func (o PatchConfigRebootConfigPtrOutput) Elem() PatchConfigRebootConfigOutput {
	return o.ApplyT(func(v *PatchConfigRebootConfig) PatchConfigRebootConfig {
		if v != nil {
			return *v
		}
		var ret PatchConfigRebootConfig
		return ret
	}).(PatchConfigRebootConfigOutput)
}

func (o PatchConfigRebootConfigPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PatchConfigRebootConfigPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PatchConfigRebootConfig) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PatchConfigRebootConfigInput is an input type that accepts PatchConfigRebootConfigArgs and PatchConfigRebootConfigOutput values.
// You can construct a concrete instance of `PatchConfigRebootConfigInput` via:
//
//	PatchConfigRebootConfigArgs{...}
type PatchConfigRebootConfigInput interface {
	pulumi.Input

	ToPatchConfigRebootConfigOutput() PatchConfigRebootConfigOutput
	ToPatchConfigRebootConfigOutputWithContext(context.Context) PatchConfigRebootConfigOutput
}

var patchConfigRebootConfigPtrType = reflect.TypeOf((**PatchConfigRebootConfig)(nil)).Elem()

type PatchConfigRebootConfigPtrInput interface {
	pulumi.Input

	ToPatchConfigRebootConfigPtrOutput() PatchConfigRebootConfigPtrOutput
	ToPatchConfigRebootConfigPtrOutputWithContext(context.Context) PatchConfigRebootConfigPtrOutput
}

type patchConfigRebootConfigPtr string

func PatchConfigRebootConfigPtr(v string) PatchConfigRebootConfigPtrInput {
	return (*patchConfigRebootConfigPtr)(&v)
}

func (*patchConfigRebootConfigPtr) ElementType() reflect.Type {
	return patchConfigRebootConfigPtrType
}

func (in *patchConfigRebootConfigPtr) ToPatchConfigRebootConfigPtrOutput() PatchConfigRebootConfigPtrOutput {
	return pulumi.ToOutput(in).(PatchConfigRebootConfigPtrOutput)
}

func (in *patchConfigRebootConfigPtr) ToPatchConfigRebootConfigPtrOutputWithContext(ctx context.Context) PatchConfigRebootConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PatchConfigRebootConfigPtrOutput)
}

func (in *patchConfigRebootConfigPtr) ToOutput(ctx context.Context) pulumix.Output[*PatchConfigRebootConfig] {
	return pulumix.Output[*PatchConfigRebootConfig]{
		OutputState: in.ToPatchConfigRebootConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Mode of the patch rollout.
type PatchRolloutMode string

const (
	// Mode must be specified.
	PatchRolloutModeModeUnspecified = PatchRolloutMode("MODE_UNSPECIFIED")
	// Patches are applied one zone at a time. The patch job begins in the region with the lowest number of targeted VMs. Within the region, patching begins in the zone with the lowest number of targeted VMs. If multiple regions (or zones within a region) have the same number of targeted VMs, a tie-breaker is achieved by sorting the regions or zones in alphabetical order.
	PatchRolloutModeZoneByZone = PatchRolloutMode("ZONE_BY_ZONE")
	// Patches are applied to VMs in all zones at the same time.
	PatchRolloutModeConcurrentZones = PatchRolloutMode("CONCURRENT_ZONES")
)

func (PatchRolloutMode) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchRolloutMode)(nil)).Elem()
}

func (e PatchRolloutMode) ToPatchRolloutModeOutput() PatchRolloutModeOutput {
	return pulumi.ToOutput(e).(PatchRolloutModeOutput)
}

func (e PatchRolloutMode) ToPatchRolloutModeOutputWithContext(ctx context.Context) PatchRolloutModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PatchRolloutModeOutput)
}

func (e PatchRolloutMode) ToPatchRolloutModePtrOutput() PatchRolloutModePtrOutput {
	return e.ToPatchRolloutModePtrOutputWithContext(context.Background())
}

func (e PatchRolloutMode) ToPatchRolloutModePtrOutputWithContext(ctx context.Context) PatchRolloutModePtrOutput {
	return PatchRolloutMode(e).ToPatchRolloutModeOutputWithContext(ctx).ToPatchRolloutModePtrOutputWithContext(ctx)
}

func (e PatchRolloutMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PatchRolloutMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PatchRolloutMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PatchRolloutMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PatchRolloutModeOutput struct{ *pulumi.OutputState }

func (PatchRolloutModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchRolloutMode)(nil)).Elem()
}

func (o PatchRolloutModeOutput) ToPatchRolloutModeOutput() PatchRolloutModeOutput {
	return o
}

func (o PatchRolloutModeOutput) ToPatchRolloutModeOutputWithContext(ctx context.Context) PatchRolloutModeOutput {
	return o
}

func (o PatchRolloutModeOutput) ToPatchRolloutModePtrOutput() PatchRolloutModePtrOutput {
	return o.ToPatchRolloutModePtrOutputWithContext(context.Background())
}

func (o PatchRolloutModeOutput) ToPatchRolloutModePtrOutputWithContext(ctx context.Context) PatchRolloutModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PatchRolloutMode) *PatchRolloutMode {
		return &v
	}).(PatchRolloutModePtrOutput)
}

func (o PatchRolloutModeOutput) ToOutput(ctx context.Context) pulumix.Output[PatchRolloutMode] {
	return pulumix.Output[PatchRolloutMode]{
		OutputState: o.OutputState,
	}
}

func (o PatchRolloutModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PatchRolloutModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PatchRolloutMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PatchRolloutModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PatchRolloutModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PatchRolloutMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PatchRolloutModePtrOutput struct{ *pulumi.OutputState }

func (PatchRolloutModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchRolloutMode)(nil)).Elem()
}

func (o PatchRolloutModePtrOutput) ToPatchRolloutModePtrOutput() PatchRolloutModePtrOutput {
	return o
}

func (o PatchRolloutModePtrOutput) ToPatchRolloutModePtrOutputWithContext(ctx context.Context) PatchRolloutModePtrOutput {
	return o
}

func (o PatchRolloutModePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PatchRolloutMode] {
	return pulumix.Output[*PatchRolloutMode]{
		OutputState: o.OutputState,
	}
}

func (o PatchRolloutModePtrOutput) Elem() PatchRolloutModeOutput {
	return o.ApplyT(func(v *PatchRolloutMode) PatchRolloutMode {
		if v != nil {
			return *v
		}
		var ret PatchRolloutMode
		return ret
	}).(PatchRolloutModeOutput)
}

func (o PatchRolloutModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PatchRolloutModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PatchRolloutMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PatchRolloutModeInput is an input type that accepts PatchRolloutModeArgs and PatchRolloutModeOutput values.
// You can construct a concrete instance of `PatchRolloutModeInput` via:
//
//	PatchRolloutModeArgs{...}
type PatchRolloutModeInput interface {
	pulumi.Input

	ToPatchRolloutModeOutput() PatchRolloutModeOutput
	ToPatchRolloutModeOutputWithContext(context.Context) PatchRolloutModeOutput
}

var patchRolloutModePtrType = reflect.TypeOf((**PatchRolloutMode)(nil)).Elem()

type PatchRolloutModePtrInput interface {
	pulumi.Input

	ToPatchRolloutModePtrOutput() PatchRolloutModePtrOutput
	ToPatchRolloutModePtrOutputWithContext(context.Context) PatchRolloutModePtrOutput
}

type patchRolloutModePtr string

func PatchRolloutModePtr(v string) PatchRolloutModePtrInput {
	return (*patchRolloutModePtr)(&v)
}

func (*patchRolloutModePtr) ElementType() reflect.Type {
	return patchRolloutModePtrType
}

func (in *patchRolloutModePtr) ToPatchRolloutModePtrOutput() PatchRolloutModePtrOutput {
	return pulumi.ToOutput(in).(PatchRolloutModePtrOutput)
}

func (in *patchRolloutModePtr) ToPatchRolloutModePtrOutputWithContext(ctx context.Context) PatchRolloutModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PatchRolloutModePtrOutput)
}

func (in *patchRolloutModePtr) ToOutput(ctx context.Context) pulumix.Output[*PatchRolloutMode] {
	return pulumix.Output[*PatchRolloutMode]{
		OutputState: in.ToPatchRolloutModePtrOutputWithContext(ctx).OutputState,
	}
}

// Required. The frequency unit of this recurring schedule.
type RecurringScheduleFrequency string

const (
	// Invalid. A frequency must be specified.
	RecurringScheduleFrequencyFrequencyUnspecified = RecurringScheduleFrequency("FREQUENCY_UNSPECIFIED")
	// Indicates that the frequency of recurrence should be expressed in terms of weeks.
	RecurringScheduleFrequencyWeekly = RecurringScheduleFrequency("WEEKLY")
	// Indicates that the frequency of recurrence should be expressed in terms of months.
	RecurringScheduleFrequencyMonthly = RecurringScheduleFrequency("MONTHLY")
	// Indicates that the frequency of recurrence should be expressed in terms of days.
	RecurringScheduleFrequencyDaily = RecurringScheduleFrequency("DAILY")
)

func (RecurringScheduleFrequency) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringScheduleFrequency)(nil)).Elem()
}

func (e RecurringScheduleFrequency) ToRecurringScheduleFrequencyOutput() RecurringScheduleFrequencyOutput {
	return pulumi.ToOutput(e).(RecurringScheduleFrequencyOutput)
}

func (e RecurringScheduleFrequency) ToRecurringScheduleFrequencyOutputWithContext(ctx context.Context) RecurringScheduleFrequencyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RecurringScheduleFrequencyOutput)
}

func (e RecurringScheduleFrequency) ToRecurringScheduleFrequencyPtrOutput() RecurringScheduleFrequencyPtrOutput {
	return e.ToRecurringScheduleFrequencyPtrOutputWithContext(context.Background())
}

func (e RecurringScheduleFrequency) ToRecurringScheduleFrequencyPtrOutputWithContext(ctx context.Context) RecurringScheduleFrequencyPtrOutput {
	return RecurringScheduleFrequency(e).ToRecurringScheduleFrequencyOutputWithContext(ctx).ToRecurringScheduleFrequencyPtrOutputWithContext(ctx)
}

func (e RecurringScheduleFrequency) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RecurringScheduleFrequency) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RecurringScheduleFrequency) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RecurringScheduleFrequency) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RecurringScheduleFrequencyOutput struct{ *pulumi.OutputState }

func (RecurringScheduleFrequencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringScheduleFrequency)(nil)).Elem()
}

func (o RecurringScheduleFrequencyOutput) ToRecurringScheduleFrequencyOutput() RecurringScheduleFrequencyOutput {
	return o
}

func (o RecurringScheduleFrequencyOutput) ToRecurringScheduleFrequencyOutputWithContext(ctx context.Context) RecurringScheduleFrequencyOutput {
	return o
}

func (o RecurringScheduleFrequencyOutput) ToRecurringScheduleFrequencyPtrOutput() RecurringScheduleFrequencyPtrOutput {
	return o.ToRecurringScheduleFrequencyPtrOutputWithContext(context.Background())
}

func (o RecurringScheduleFrequencyOutput) ToRecurringScheduleFrequencyPtrOutputWithContext(ctx context.Context) RecurringScheduleFrequencyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurringScheduleFrequency) *RecurringScheduleFrequency {
		return &v
	}).(RecurringScheduleFrequencyPtrOutput)
}

func (o RecurringScheduleFrequencyOutput) ToOutput(ctx context.Context) pulumix.Output[RecurringScheduleFrequency] {
	return pulumix.Output[RecurringScheduleFrequency]{
		OutputState: o.OutputState,
	}
}

func (o RecurringScheduleFrequencyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RecurringScheduleFrequencyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RecurringScheduleFrequency) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RecurringScheduleFrequencyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RecurringScheduleFrequencyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RecurringScheduleFrequency) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RecurringScheduleFrequencyPtrOutput struct{ *pulumi.OutputState }

func (RecurringScheduleFrequencyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurringScheduleFrequency)(nil)).Elem()
}

func (o RecurringScheduleFrequencyPtrOutput) ToRecurringScheduleFrequencyPtrOutput() RecurringScheduleFrequencyPtrOutput {
	return o
}

func (o RecurringScheduleFrequencyPtrOutput) ToRecurringScheduleFrequencyPtrOutputWithContext(ctx context.Context) RecurringScheduleFrequencyPtrOutput {
	return o
}

func (o RecurringScheduleFrequencyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RecurringScheduleFrequency] {
	return pulumix.Output[*RecurringScheduleFrequency]{
		OutputState: o.OutputState,
	}
}

func (o RecurringScheduleFrequencyPtrOutput) Elem() RecurringScheduleFrequencyOutput {
	return o.ApplyT(func(v *RecurringScheduleFrequency) RecurringScheduleFrequency {
		if v != nil {
			return *v
		}
		var ret RecurringScheduleFrequency
		return ret
	}).(RecurringScheduleFrequencyOutput)
}

func (o RecurringScheduleFrequencyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RecurringScheduleFrequencyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RecurringScheduleFrequency) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RecurringScheduleFrequencyInput is an input type that accepts RecurringScheduleFrequencyArgs and RecurringScheduleFrequencyOutput values.
// You can construct a concrete instance of `RecurringScheduleFrequencyInput` via:
//
//	RecurringScheduleFrequencyArgs{...}
type RecurringScheduleFrequencyInput interface {
	pulumi.Input

	ToRecurringScheduleFrequencyOutput() RecurringScheduleFrequencyOutput
	ToRecurringScheduleFrequencyOutputWithContext(context.Context) RecurringScheduleFrequencyOutput
}

var recurringScheduleFrequencyPtrType = reflect.TypeOf((**RecurringScheduleFrequency)(nil)).Elem()

type RecurringScheduleFrequencyPtrInput interface {
	pulumi.Input

	ToRecurringScheduleFrequencyPtrOutput() RecurringScheduleFrequencyPtrOutput
	ToRecurringScheduleFrequencyPtrOutputWithContext(context.Context) RecurringScheduleFrequencyPtrOutput
}

type recurringScheduleFrequencyPtr string

func RecurringScheduleFrequencyPtr(v string) RecurringScheduleFrequencyPtrInput {
	return (*recurringScheduleFrequencyPtr)(&v)
}

func (*recurringScheduleFrequencyPtr) ElementType() reflect.Type {
	return recurringScheduleFrequencyPtrType
}

func (in *recurringScheduleFrequencyPtr) ToRecurringScheduleFrequencyPtrOutput() RecurringScheduleFrequencyPtrOutput {
	return pulumi.ToOutput(in).(RecurringScheduleFrequencyPtrOutput)
}

func (in *recurringScheduleFrequencyPtr) ToRecurringScheduleFrequencyPtrOutputWithContext(ctx context.Context) RecurringScheduleFrequencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RecurringScheduleFrequencyPtrOutput)
}

func (in *recurringScheduleFrequencyPtr) ToOutput(ctx context.Context) pulumix.Output[*RecurringScheduleFrequency] {
	return pulumix.Output[*RecurringScheduleFrequency]{
		OutputState: in.ToRecurringScheduleFrequencyPtrOutputWithContext(ctx).OutputState,
	}
}

// Default is INSTALLED. The desired state the agent should maintain for this recipe. INSTALLED: The software recipe is installed on the instance but won't be updated to new versions. UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version, if a higher version of the recipe is assigned to this instance. REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.
type SoftwareRecipeDesiredState string

const (
	// The default is to ensure the package is installed.
	SoftwareRecipeDesiredStateDesiredStateUnspecified = SoftwareRecipeDesiredState("DESIRED_STATE_UNSPECIFIED")
	// The agent ensures that the package is installed.
	SoftwareRecipeDesiredStateInstalled = SoftwareRecipeDesiredState("INSTALLED")
	// The agent ensures that the package is installed and periodically checks for and install any updates.
	SoftwareRecipeDesiredStateUpdated = SoftwareRecipeDesiredState("UPDATED")
	// The agent ensures that the package is not installed and uninstall it if detected.
	SoftwareRecipeDesiredStateRemoved = SoftwareRecipeDesiredState("REMOVED")
)

func (SoftwareRecipeDesiredState) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeDesiredState)(nil)).Elem()
}

func (e SoftwareRecipeDesiredState) ToSoftwareRecipeDesiredStateOutput() SoftwareRecipeDesiredStateOutput {
	return pulumi.ToOutput(e).(SoftwareRecipeDesiredStateOutput)
}

func (e SoftwareRecipeDesiredState) ToSoftwareRecipeDesiredStateOutputWithContext(ctx context.Context) SoftwareRecipeDesiredStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SoftwareRecipeDesiredStateOutput)
}

func (e SoftwareRecipeDesiredState) ToSoftwareRecipeDesiredStatePtrOutput() SoftwareRecipeDesiredStatePtrOutput {
	return e.ToSoftwareRecipeDesiredStatePtrOutputWithContext(context.Background())
}

func (e SoftwareRecipeDesiredState) ToSoftwareRecipeDesiredStatePtrOutputWithContext(ctx context.Context) SoftwareRecipeDesiredStatePtrOutput {
	return SoftwareRecipeDesiredState(e).ToSoftwareRecipeDesiredStateOutputWithContext(ctx).ToSoftwareRecipeDesiredStatePtrOutputWithContext(ctx)
}

func (e SoftwareRecipeDesiredState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SoftwareRecipeDesiredState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SoftwareRecipeDesiredState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SoftwareRecipeDesiredState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SoftwareRecipeDesiredStateOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeDesiredStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeDesiredState)(nil)).Elem()
}

func (o SoftwareRecipeDesiredStateOutput) ToSoftwareRecipeDesiredStateOutput() SoftwareRecipeDesiredStateOutput {
	return o
}

func (o SoftwareRecipeDesiredStateOutput) ToSoftwareRecipeDesiredStateOutputWithContext(ctx context.Context) SoftwareRecipeDesiredStateOutput {
	return o
}

func (o SoftwareRecipeDesiredStateOutput) ToSoftwareRecipeDesiredStatePtrOutput() SoftwareRecipeDesiredStatePtrOutput {
	return o.ToSoftwareRecipeDesiredStatePtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeDesiredStateOutput) ToSoftwareRecipeDesiredStatePtrOutputWithContext(ctx context.Context) SoftwareRecipeDesiredStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SoftwareRecipeDesiredState) *SoftwareRecipeDesiredState {
		return &v
	}).(SoftwareRecipeDesiredStatePtrOutput)
}

func (o SoftwareRecipeDesiredStateOutput) ToOutput(ctx context.Context) pulumix.Output[SoftwareRecipeDesiredState] {
	return pulumix.Output[SoftwareRecipeDesiredState]{
		OutputState: o.OutputState,
	}
}

func (o SoftwareRecipeDesiredStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SoftwareRecipeDesiredStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SoftwareRecipeDesiredState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SoftwareRecipeDesiredStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeDesiredStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SoftwareRecipeDesiredState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SoftwareRecipeDesiredStatePtrOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeDesiredStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeDesiredState)(nil)).Elem()
}

func (o SoftwareRecipeDesiredStatePtrOutput) ToSoftwareRecipeDesiredStatePtrOutput() SoftwareRecipeDesiredStatePtrOutput {
	return o
}

func (o SoftwareRecipeDesiredStatePtrOutput) ToSoftwareRecipeDesiredStatePtrOutputWithContext(ctx context.Context) SoftwareRecipeDesiredStatePtrOutput {
	return o
}

func (o SoftwareRecipeDesiredStatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SoftwareRecipeDesiredState] {
	return pulumix.Output[*SoftwareRecipeDesiredState]{
		OutputState: o.OutputState,
	}
}

func (o SoftwareRecipeDesiredStatePtrOutput) Elem() SoftwareRecipeDesiredStateOutput {
	return o.ApplyT(func(v *SoftwareRecipeDesiredState) SoftwareRecipeDesiredState {
		if v != nil {
			return *v
		}
		var ret SoftwareRecipeDesiredState
		return ret
	}).(SoftwareRecipeDesiredStateOutput)
}

func (o SoftwareRecipeDesiredStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeDesiredStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SoftwareRecipeDesiredState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SoftwareRecipeDesiredStateInput is an input type that accepts SoftwareRecipeDesiredStateArgs and SoftwareRecipeDesiredStateOutput values.
// You can construct a concrete instance of `SoftwareRecipeDesiredStateInput` via:
//
//	SoftwareRecipeDesiredStateArgs{...}
type SoftwareRecipeDesiredStateInput interface {
	pulumi.Input

	ToSoftwareRecipeDesiredStateOutput() SoftwareRecipeDesiredStateOutput
	ToSoftwareRecipeDesiredStateOutputWithContext(context.Context) SoftwareRecipeDesiredStateOutput
}

var softwareRecipeDesiredStatePtrType = reflect.TypeOf((**SoftwareRecipeDesiredState)(nil)).Elem()

type SoftwareRecipeDesiredStatePtrInput interface {
	pulumi.Input

	ToSoftwareRecipeDesiredStatePtrOutput() SoftwareRecipeDesiredStatePtrOutput
	ToSoftwareRecipeDesiredStatePtrOutputWithContext(context.Context) SoftwareRecipeDesiredStatePtrOutput
}

type softwareRecipeDesiredStatePtr string

func SoftwareRecipeDesiredStatePtr(v string) SoftwareRecipeDesiredStatePtrInput {
	return (*softwareRecipeDesiredStatePtr)(&v)
}

func (*softwareRecipeDesiredStatePtr) ElementType() reflect.Type {
	return softwareRecipeDesiredStatePtrType
}

func (in *softwareRecipeDesiredStatePtr) ToSoftwareRecipeDesiredStatePtrOutput() SoftwareRecipeDesiredStatePtrOutput {
	return pulumi.ToOutput(in).(SoftwareRecipeDesiredStatePtrOutput)
}

func (in *softwareRecipeDesiredStatePtr) ToSoftwareRecipeDesiredStatePtrOutputWithContext(ctx context.Context) SoftwareRecipeDesiredStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SoftwareRecipeDesiredStatePtrOutput)
}

func (in *softwareRecipeDesiredStatePtr) ToOutput(ctx context.Context) pulumix.Output[*SoftwareRecipeDesiredState] {
	return pulumix.Output[*SoftwareRecipeDesiredState]{
		OutputState: in.ToSoftwareRecipeDesiredStatePtrOutputWithContext(ctx).OutputState,
	}
}

// Required. The type of the archive to extract.
type SoftwareRecipeStepExtractArchiveType string

const (
	// Indicates that the archive type isn't specified.
	SoftwareRecipeStepExtractArchiveTypeArchiveTypeUnspecified = SoftwareRecipeStepExtractArchiveType("ARCHIVE_TYPE_UNSPECIFIED")
	// Indicates that the archive is a tar archive with no encryption.
	SoftwareRecipeStepExtractArchiveTypeTar = SoftwareRecipeStepExtractArchiveType("TAR")
	// Indicates that the archive is a tar archive with gzip encryption.
	SoftwareRecipeStepExtractArchiveTypeTarGzip = SoftwareRecipeStepExtractArchiveType("TAR_GZIP")
	// Indicates that the archive is a tar archive with bzip encryption.
	SoftwareRecipeStepExtractArchiveTypeTarBzip = SoftwareRecipeStepExtractArchiveType("TAR_BZIP")
	// Indicates that the archive is a tar archive with lzma encryption.
	SoftwareRecipeStepExtractArchiveTypeTarLzma = SoftwareRecipeStepExtractArchiveType("TAR_LZMA")
	// Indicates that the archive is a tar archive with xz encryption.
	SoftwareRecipeStepExtractArchiveTypeTarXz = SoftwareRecipeStepExtractArchiveType("TAR_XZ")
	// Indicates that the archive is a zip archive.
	SoftwareRecipeStepExtractArchiveTypeZip = SoftwareRecipeStepExtractArchiveType("ZIP")
)

func (SoftwareRecipeStepExtractArchiveType) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepExtractArchiveType)(nil)).Elem()
}

func (e SoftwareRecipeStepExtractArchiveType) ToSoftwareRecipeStepExtractArchiveTypeOutput() SoftwareRecipeStepExtractArchiveTypeOutput {
	return pulumi.ToOutput(e).(SoftwareRecipeStepExtractArchiveTypeOutput)
}

func (e SoftwareRecipeStepExtractArchiveType) ToSoftwareRecipeStepExtractArchiveTypeOutputWithContext(ctx context.Context) SoftwareRecipeStepExtractArchiveTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SoftwareRecipeStepExtractArchiveTypeOutput)
}

func (e SoftwareRecipeStepExtractArchiveType) ToSoftwareRecipeStepExtractArchiveTypePtrOutput() SoftwareRecipeStepExtractArchiveTypePtrOutput {
	return e.ToSoftwareRecipeStepExtractArchiveTypePtrOutputWithContext(context.Background())
}

func (e SoftwareRecipeStepExtractArchiveType) ToSoftwareRecipeStepExtractArchiveTypePtrOutputWithContext(ctx context.Context) SoftwareRecipeStepExtractArchiveTypePtrOutput {
	return SoftwareRecipeStepExtractArchiveType(e).ToSoftwareRecipeStepExtractArchiveTypeOutputWithContext(ctx).ToSoftwareRecipeStepExtractArchiveTypePtrOutputWithContext(ctx)
}

func (e SoftwareRecipeStepExtractArchiveType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SoftwareRecipeStepExtractArchiveType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SoftwareRecipeStepExtractArchiveType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SoftwareRecipeStepExtractArchiveType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SoftwareRecipeStepExtractArchiveTypeOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepExtractArchiveTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepExtractArchiveType)(nil)).Elem()
}

func (o SoftwareRecipeStepExtractArchiveTypeOutput) ToSoftwareRecipeStepExtractArchiveTypeOutput() SoftwareRecipeStepExtractArchiveTypeOutput {
	return o
}

func (o SoftwareRecipeStepExtractArchiveTypeOutput) ToSoftwareRecipeStepExtractArchiveTypeOutputWithContext(ctx context.Context) SoftwareRecipeStepExtractArchiveTypeOutput {
	return o
}

func (o SoftwareRecipeStepExtractArchiveTypeOutput) ToSoftwareRecipeStepExtractArchiveTypePtrOutput() SoftwareRecipeStepExtractArchiveTypePtrOutput {
	return o.ToSoftwareRecipeStepExtractArchiveTypePtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeStepExtractArchiveTypeOutput) ToSoftwareRecipeStepExtractArchiveTypePtrOutputWithContext(ctx context.Context) SoftwareRecipeStepExtractArchiveTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SoftwareRecipeStepExtractArchiveType) *SoftwareRecipeStepExtractArchiveType {
		return &v
	}).(SoftwareRecipeStepExtractArchiveTypePtrOutput)
}

func (o SoftwareRecipeStepExtractArchiveTypeOutput) ToOutput(ctx context.Context) pulumix.Output[SoftwareRecipeStepExtractArchiveType] {
	return pulumix.Output[SoftwareRecipeStepExtractArchiveType]{
		OutputState: o.OutputState,
	}
}

func (o SoftwareRecipeStepExtractArchiveTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SoftwareRecipeStepExtractArchiveTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SoftwareRecipeStepExtractArchiveType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SoftwareRecipeStepExtractArchiveTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeStepExtractArchiveTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SoftwareRecipeStepExtractArchiveType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SoftwareRecipeStepExtractArchiveTypePtrOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepExtractArchiveTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeStepExtractArchiveType)(nil)).Elem()
}

func (o SoftwareRecipeStepExtractArchiveTypePtrOutput) ToSoftwareRecipeStepExtractArchiveTypePtrOutput() SoftwareRecipeStepExtractArchiveTypePtrOutput {
	return o
}

func (o SoftwareRecipeStepExtractArchiveTypePtrOutput) ToSoftwareRecipeStepExtractArchiveTypePtrOutputWithContext(ctx context.Context) SoftwareRecipeStepExtractArchiveTypePtrOutput {
	return o
}

func (o SoftwareRecipeStepExtractArchiveTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SoftwareRecipeStepExtractArchiveType] {
	return pulumix.Output[*SoftwareRecipeStepExtractArchiveType]{
		OutputState: o.OutputState,
	}
}

func (o SoftwareRecipeStepExtractArchiveTypePtrOutput) Elem() SoftwareRecipeStepExtractArchiveTypeOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepExtractArchiveType) SoftwareRecipeStepExtractArchiveType {
		if v != nil {
			return *v
		}
		var ret SoftwareRecipeStepExtractArchiveType
		return ret
	}).(SoftwareRecipeStepExtractArchiveTypeOutput)
}

func (o SoftwareRecipeStepExtractArchiveTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeStepExtractArchiveTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SoftwareRecipeStepExtractArchiveType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SoftwareRecipeStepExtractArchiveTypeInput is an input type that accepts SoftwareRecipeStepExtractArchiveTypeArgs and SoftwareRecipeStepExtractArchiveTypeOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepExtractArchiveTypeInput` via:
//
//	SoftwareRecipeStepExtractArchiveTypeArgs{...}
type SoftwareRecipeStepExtractArchiveTypeInput interface {
	pulumi.Input

	ToSoftwareRecipeStepExtractArchiveTypeOutput() SoftwareRecipeStepExtractArchiveTypeOutput
	ToSoftwareRecipeStepExtractArchiveTypeOutputWithContext(context.Context) SoftwareRecipeStepExtractArchiveTypeOutput
}

var softwareRecipeStepExtractArchiveTypePtrType = reflect.TypeOf((**SoftwareRecipeStepExtractArchiveType)(nil)).Elem()

type SoftwareRecipeStepExtractArchiveTypePtrInput interface {
	pulumi.Input

	ToSoftwareRecipeStepExtractArchiveTypePtrOutput() SoftwareRecipeStepExtractArchiveTypePtrOutput
	ToSoftwareRecipeStepExtractArchiveTypePtrOutputWithContext(context.Context) SoftwareRecipeStepExtractArchiveTypePtrOutput
}

type softwareRecipeStepExtractArchiveTypePtr string

func SoftwareRecipeStepExtractArchiveTypePtr(v string) SoftwareRecipeStepExtractArchiveTypePtrInput {
	return (*softwareRecipeStepExtractArchiveTypePtr)(&v)
}

func (*softwareRecipeStepExtractArchiveTypePtr) ElementType() reflect.Type {
	return softwareRecipeStepExtractArchiveTypePtrType
}

func (in *softwareRecipeStepExtractArchiveTypePtr) ToSoftwareRecipeStepExtractArchiveTypePtrOutput() SoftwareRecipeStepExtractArchiveTypePtrOutput {
	return pulumi.ToOutput(in).(SoftwareRecipeStepExtractArchiveTypePtrOutput)
}

func (in *softwareRecipeStepExtractArchiveTypePtr) ToSoftwareRecipeStepExtractArchiveTypePtrOutputWithContext(ctx context.Context) SoftwareRecipeStepExtractArchiveTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SoftwareRecipeStepExtractArchiveTypePtrOutput)
}

func (in *softwareRecipeStepExtractArchiveTypePtr) ToOutput(ctx context.Context) pulumix.Output[*SoftwareRecipeStepExtractArchiveType] {
	return pulumix.Output[*SoftwareRecipeStepExtractArchiveType]{
		OutputState: in.ToSoftwareRecipeStepExtractArchiveTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The script interpreter to use to run the script. If no interpreter is specified the script is executed directly, which likely only succeed for scripts with [shebang lines](<https://en.wikipedia.org/wiki/Shebang_\(Unix\)>).
type SoftwareRecipeStepRunScriptInterpreter string

const (
	// Default value for ScriptType.
	SoftwareRecipeStepRunScriptInterpreterInterpreterUnspecified = SoftwareRecipeStepRunScriptInterpreter("INTERPRETER_UNSPECIFIED")
	// Indicates that the script is run with `/bin/sh` on Linux and `cmd` on windows.
	SoftwareRecipeStepRunScriptInterpreterShell = SoftwareRecipeStepRunScriptInterpreter("SHELL")
	// Indicates that the script is run with powershell.
	SoftwareRecipeStepRunScriptInterpreterPowershell = SoftwareRecipeStepRunScriptInterpreter("POWERSHELL")
)

func (SoftwareRecipeStepRunScriptInterpreter) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepRunScriptInterpreter)(nil)).Elem()
}

func (e SoftwareRecipeStepRunScriptInterpreter) ToSoftwareRecipeStepRunScriptInterpreterOutput() SoftwareRecipeStepRunScriptInterpreterOutput {
	return pulumi.ToOutput(e).(SoftwareRecipeStepRunScriptInterpreterOutput)
}

func (e SoftwareRecipeStepRunScriptInterpreter) ToSoftwareRecipeStepRunScriptInterpreterOutputWithContext(ctx context.Context) SoftwareRecipeStepRunScriptInterpreterOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SoftwareRecipeStepRunScriptInterpreterOutput)
}

func (e SoftwareRecipeStepRunScriptInterpreter) ToSoftwareRecipeStepRunScriptInterpreterPtrOutput() SoftwareRecipeStepRunScriptInterpreterPtrOutput {
	return e.ToSoftwareRecipeStepRunScriptInterpreterPtrOutputWithContext(context.Background())
}

func (e SoftwareRecipeStepRunScriptInterpreter) ToSoftwareRecipeStepRunScriptInterpreterPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepRunScriptInterpreterPtrOutput {
	return SoftwareRecipeStepRunScriptInterpreter(e).ToSoftwareRecipeStepRunScriptInterpreterOutputWithContext(ctx).ToSoftwareRecipeStepRunScriptInterpreterPtrOutputWithContext(ctx)
}

func (e SoftwareRecipeStepRunScriptInterpreter) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SoftwareRecipeStepRunScriptInterpreter) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SoftwareRecipeStepRunScriptInterpreter) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SoftwareRecipeStepRunScriptInterpreter) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SoftwareRecipeStepRunScriptInterpreterOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepRunScriptInterpreterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SoftwareRecipeStepRunScriptInterpreter)(nil)).Elem()
}

func (o SoftwareRecipeStepRunScriptInterpreterOutput) ToSoftwareRecipeStepRunScriptInterpreterOutput() SoftwareRecipeStepRunScriptInterpreterOutput {
	return o
}

func (o SoftwareRecipeStepRunScriptInterpreterOutput) ToSoftwareRecipeStepRunScriptInterpreterOutputWithContext(ctx context.Context) SoftwareRecipeStepRunScriptInterpreterOutput {
	return o
}

func (o SoftwareRecipeStepRunScriptInterpreterOutput) ToSoftwareRecipeStepRunScriptInterpreterPtrOutput() SoftwareRecipeStepRunScriptInterpreterPtrOutput {
	return o.ToSoftwareRecipeStepRunScriptInterpreterPtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeStepRunScriptInterpreterOutput) ToSoftwareRecipeStepRunScriptInterpreterPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepRunScriptInterpreterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SoftwareRecipeStepRunScriptInterpreter) *SoftwareRecipeStepRunScriptInterpreter {
		return &v
	}).(SoftwareRecipeStepRunScriptInterpreterPtrOutput)
}

func (o SoftwareRecipeStepRunScriptInterpreterOutput) ToOutput(ctx context.Context) pulumix.Output[SoftwareRecipeStepRunScriptInterpreter] {
	return pulumix.Output[SoftwareRecipeStepRunScriptInterpreter]{
		OutputState: o.OutputState,
	}
}

func (o SoftwareRecipeStepRunScriptInterpreterOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SoftwareRecipeStepRunScriptInterpreterOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SoftwareRecipeStepRunScriptInterpreter) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SoftwareRecipeStepRunScriptInterpreterOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeStepRunScriptInterpreterOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SoftwareRecipeStepRunScriptInterpreter) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SoftwareRecipeStepRunScriptInterpreterPtrOutput struct{ *pulumi.OutputState }

func (SoftwareRecipeStepRunScriptInterpreterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SoftwareRecipeStepRunScriptInterpreter)(nil)).Elem()
}

func (o SoftwareRecipeStepRunScriptInterpreterPtrOutput) ToSoftwareRecipeStepRunScriptInterpreterPtrOutput() SoftwareRecipeStepRunScriptInterpreterPtrOutput {
	return o
}

func (o SoftwareRecipeStepRunScriptInterpreterPtrOutput) ToSoftwareRecipeStepRunScriptInterpreterPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepRunScriptInterpreterPtrOutput {
	return o
}

func (o SoftwareRecipeStepRunScriptInterpreterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SoftwareRecipeStepRunScriptInterpreter] {
	return pulumix.Output[*SoftwareRecipeStepRunScriptInterpreter]{
		OutputState: o.OutputState,
	}
}

func (o SoftwareRecipeStepRunScriptInterpreterPtrOutput) Elem() SoftwareRecipeStepRunScriptInterpreterOutput {
	return o.ApplyT(func(v *SoftwareRecipeStepRunScriptInterpreter) SoftwareRecipeStepRunScriptInterpreter {
		if v != nil {
			return *v
		}
		var ret SoftwareRecipeStepRunScriptInterpreter
		return ret
	}).(SoftwareRecipeStepRunScriptInterpreterOutput)
}

func (o SoftwareRecipeStepRunScriptInterpreterPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SoftwareRecipeStepRunScriptInterpreterPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SoftwareRecipeStepRunScriptInterpreter) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SoftwareRecipeStepRunScriptInterpreterInput is an input type that accepts SoftwareRecipeStepRunScriptInterpreterArgs and SoftwareRecipeStepRunScriptInterpreterOutput values.
// You can construct a concrete instance of `SoftwareRecipeStepRunScriptInterpreterInput` via:
//
//	SoftwareRecipeStepRunScriptInterpreterArgs{...}
type SoftwareRecipeStepRunScriptInterpreterInput interface {
	pulumi.Input

	ToSoftwareRecipeStepRunScriptInterpreterOutput() SoftwareRecipeStepRunScriptInterpreterOutput
	ToSoftwareRecipeStepRunScriptInterpreterOutputWithContext(context.Context) SoftwareRecipeStepRunScriptInterpreterOutput
}

var softwareRecipeStepRunScriptInterpreterPtrType = reflect.TypeOf((**SoftwareRecipeStepRunScriptInterpreter)(nil)).Elem()

type SoftwareRecipeStepRunScriptInterpreterPtrInput interface {
	pulumi.Input

	ToSoftwareRecipeStepRunScriptInterpreterPtrOutput() SoftwareRecipeStepRunScriptInterpreterPtrOutput
	ToSoftwareRecipeStepRunScriptInterpreterPtrOutputWithContext(context.Context) SoftwareRecipeStepRunScriptInterpreterPtrOutput
}

type softwareRecipeStepRunScriptInterpreterPtr string

func SoftwareRecipeStepRunScriptInterpreterPtr(v string) SoftwareRecipeStepRunScriptInterpreterPtrInput {
	return (*softwareRecipeStepRunScriptInterpreterPtr)(&v)
}

func (*softwareRecipeStepRunScriptInterpreterPtr) ElementType() reflect.Type {
	return softwareRecipeStepRunScriptInterpreterPtrType
}

func (in *softwareRecipeStepRunScriptInterpreterPtr) ToSoftwareRecipeStepRunScriptInterpreterPtrOutput() SoftwareRecipeStepRunScriptInterpreterPtrOutput {
	return pulumi.ToOutput(in).(SoftwareRecipeStepRunScriptInterpreterPtrOutput)
}

func (in *softwareRecipeStepRunScriptInterpreterPtr) ToSoftwareRecipeStepRunScriptInterpreterPtrOutputWithContext(ctx context.Context) SoftwareRecipeStepRunScriptInterpreterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SoftwareRecipeStepRunScriptInterpreterPtrOutput)
}

func (in *softwareRecipeStepRunScriptInterpreterPtr) ToOutput(ctx context.Context) pulumix.Output[*SoftwareRecipeStepRunScriptInterpreter] {
	return pulumix.Output[*SoftwareRecipeStepRunScriptInterpreter]{
		OutputState: in.ToSoftwareRecipeStepRunScriptInterpreterPtrOutputWithContext(ctx).OutputState,
	}
}

// Required. A day of the week.
type WeekDayOfMonthDayOfWeek string

const (
	// The day of the week is unspecified.
	WeekDayOfMonthDayOfWeekDayOfWeekUnspecified = WeekDayOfMonthDayOfWeek("DAY_OF_WEEK_UNSPECIFIED")
	// Monday
	WeekDayOfMonthDayOfWeekMonday = WeekDayOfMonthDayOfWeek("MONDAY")
	// Tuesday
	WeekDayOfMonthDayOfWeekTuesday = WeekDayOfMonthDayOfWeek("TUESDAY")
	// Wednesday
	WeekDayOfMonthDayOfWeekWednesday = WeekDayOfMonthDayOfWeek("WEDNESDAY")
	// Thursday
	WeekDayOfMonthDayOfWeekThursday = WeekDayOfMonthDayOfWeek("THURSDAY")
	// Friday
	WeekDayOfMonthDayOfWeekFriday = WeekDayOfMonthDayOfWeek("FRIDAY")
	// Saturday
	WeekDayOfMonthDayOfWeekSaturday = WeekDayOfMonthDayOfWeek("SATURDAY")
	// Sunday
	WeekDayOfMonthDayOfWeekSunday = WeekDayOfMonthDayOfWeek("SUNDAY")
)

func (WeekDayOfMonthDayOfWeek) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDayOfMonthDayOfWeek)(nil)).Elem()
}

func (e WeekDayOfMonthDayOfWeek) ToWeekDayOfMonthDayOfWeekOutput() WeekDayOfMonthDayOfWeekOutput {
	return pulumi.ToOutput(e).(WeekDayOfMonthDayOfWeekOutput)
}

func (e WeekDayOfMonthDayOfWeek) ToWeekDayOfMonthDayOfWeekOutputWithContext(ctx context.Context) WeekDayOfMonthDayOfWeekOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WeekDayOfMonthDayOfWeekOutput)
}

func (e WeekDayOfMonthDayOfWeek) ToWeekDayOfMonthDayOfWeekPtrOutput() WeekDayOfMonthDayOfWeekPtrOutput {
	return e.ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(context.Background())
}

func (e WeekDayOfMonthDayOfWeek) ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(ctx context.Context) WeekDayOfMonthDayOfWeekPtrOutput {
	return WeekDayOfMonthDayOfWeek(e).ToWeekDayOfMonthDayOfWeekOutputWithContext(ctx).ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(ctx)
}

func (e WeekDayOfMonthDayOfWeek) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeekDayOfMonthDayOfWeek) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeekDayOfMonthDayOfWeek) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WeekDayOfMonthDayOfWeek) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WeekDayOfMonthDayOfWeekOutput struct{ *pulumi.OutputState }

func (WeekDayOfMonthDayOfWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDayOfMonthDayOfWeek)(nil)).Elem()
}

func (o WeekDayOfMonthDayOfWeekOutput) ToWeekDayOfMonthDayOfWeekOutput() WeekDayOfMonthDayOfWeekOutput {
	return o
}

func (o WeekDayOfMonthDayOfWeekOutput) ToWeekDayOfMonthDayOfWeekOutputWithContext(ctx context.Context) WeekDayOfMonthDayOfWeekOutput {
	return o
}

func (o WeekDayOfMonthDayOfWeekOutput) ToWeekDayOfMonthDayOfWeekPtrOutput() WeekDayOfMonthDayOfWeekPtrOutput {
	return o.ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(context.Background())
}

func (o WeekDayOfMonthDayOfWeekOutput) ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(ctx context.Context) WeekDayOfMonthDayOfWeekPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WeekDayOfMonthDayOfWeek) *WeekDayOfMonthDayOfWeek {
		return &v
	}).(WeekDayOfMonthDayOfWeekPtrOutput)
}

func (o WeekDayOfMonthDayOfWeekOutput) ToOutput(ctx context.Context) pulumix.Output[WeekDayOfMonthDayOfWeek] {
	return pulumix.Output[WeekDayOfMonthDayOfWeek]{
		OutputState: o.OutputState,
	}
}

func (o WeekDayOfMonthDayOfWeekOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WeekDayOfMonthDayOfWeekOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeekDayOfMonthDayOfWeek) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WeekDayOfMonthDayOfWeekOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeekDayOfMonthDayOfWeekOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeekDayOfMonthDayOfWeek) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WeekDayOfMonthDayOfWeekPtrOutput struct{ *pulumi.OutputState }

func (WeekDayOfMonthDayOfWeekPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeekDayOfMonthDayOfWeek)(nil)).Elem()
}

func (o WeekDayOfMonthDayOfWeekPtrOutput) ToWeekDayOfMonthDayOfWeekPtrOutput() WeekDayOfMonthDayOfWeekPtrOutput {
	return o
}

func (o WeekDayOfMonthDayOfWeekPtrOutput) ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(ctx context.Context) WeekDayOfMonthDayOfWeekPtrOutput {
	return o
}

func (o WeekDayOfMonthDayOfWeekPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*WeekDayOfMonthDayOfWeek] {
	return pulumix.Output[*WeekDayOfMonthDayOfWeek]{
		OutputState: o.OutputState,
	}
}

func (o WeekDayOfMonthDayOfWeekPtrOutput) Elem() WeekDayOfMonthDayOfWeekOutput {
	return o.ApplyT(func(v *WeekDayOfMonthDayOfWeek) WeekDayOfMonthDayOfWeek {
		if v != nil {
			return *v
		}
		var ret WeekDayOfMonthDayOfWeek
		return ret
	}).(WeekDayOfMonthDayOfWeekOutput)
}

func (o WeekDayOfMonthDayOfWeekPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeekDayOfMonthDayOfWeekPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WeekDayOfMonthDayOfWeek) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WeekDayOfMonthDayOfWeekInput is an input type that accepts WeekDayOfMonthDayOfWeekArgs and WeekDayOfMonthDayOfWeekOutput values.
// You can construct a concrete instance of `WeekDayOfMonthDayOfWeekInput` via:
//
//	WeekDayOfMonthDayOfWeekArgs{...}
type WeekDayOfMonthDayOfWeekInput interface {
	pulumi.Input

	ToWeekDayOfMonthDayOfWeekOutput() WeekDayOfMonthDayOfWeekOutput
	ToWeekDayOfMonthDayOfWeekOutputWithContext(context.Context) WeekDayOfMonthDayOfWeekOutput
}

var weekDayOfMonthDayOfWeekPtrType = reflect.TypeOf((**WeekDayOfMonthDayOfWeek)(nil)).Elem()

type WeekDayOfMonthDayOfWeekPtrInput interface {
	pulumi.Input

	ToWeekDayOfMonthDayOfWeekPtrOutput() WeekDayOfMonthDayOfWeekPtrOutput
	ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(context.Context) WeekDayOfMonthDayOfWeekPtrOutput
}

type weekDayOfMonthDayOfWeekPtr string

func WeekDayOfMonthDayOfWeekPtr(v string) WeekDayOfMonthDayOfWeekPtrInput {
	return (*weekDayOfMonthDayOfWeekPtr)(&v)
}

func (*weekDayOfMonthDayOfWeekPtr) ElementType() reflect.Type {
	return weekDayOfMonthDayOfWeekPtrType
}

func (in *weekDayOfMonthDayOfWeekPtr) ToWeekDayOfMonthDayOfWeekPtrOutput() WeekDayOfMonthDayOfWeekPtrOutput {
	return pulumi.ToOutput(in).(WeekDayOfMonthDayOfWeekPtrOutput)
}

func (in *weekDayOfMonthDayOfWeekPtr) ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(ctx context.Context) WeekDayOfMonthDayOfWeekPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WeekDayOfMonthDayOfWeekPtrOutput)
}

func (in *weekDayOfMonthDayOfWeekPtr) ToOutput(ctx context.Context) pulumix.Output[*WeekDayOfMonthDayOfWeek] {
	return pulumix.Output[*WeekDayOfMonthDayOfWeek]{
		OutputState: in.ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(ctx).OutputState,
	}
}

// Required. Day of the week.
type WeeklyScheduleDayOfWeek string

const (
	// The day of the week is unspecified.
	WeeklyScheduleDayOfWeekDayOfWeekUnspecified = WeeklyScheduleDayOfWeek("DAY_OF_WEEK_UNSPECIFIED")
	// Monday
	WeeklyScheduleDayOfWeekMonday = WeeklyScheduleDayOfWeek("MONDAY")
	// Tuesday
	WeeklyScheduleDayOfWeekTuesday = WeeklyScheduleDayOfWeek("TUESDAY")
	// Wednesday
	WeeklyScheduleDayOfWeekWednesday = WeeklyScheduleDayOfWeek("WEDNESDAY")
	// Thursday
	WeeklyScheduleDayOfWeekThursday = WeeklyScheduleDayOfWeek("THURSDAY")
	// Friday
	WeeklyScheduleDayOfWeekFriday = WeeklyScheduleDayOfWeek("FRIDAY")
	// Saturday
	WeeklyScheduleDayOfWeekSaturday = WeeklyScheduleDayOfWeek("SATURDAY")
	// Sunday
	WeeklyScheduleDayOfWeekSunday = WeeklyScheduleDayOfWeek("SUNDAY")
)

func (WeeklyScheduleDayOfWeek) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyScheduleDayOfWeek)(nil)).Elem()
}

func (e WeeklyScheduleDayOfWeek) ToWeeklyScheduleDayOfWeekOutput() WeeklyScheduleDayOfWeekOutput {
	return pulumi.ToOutput(e).(WeeklyScheduleDayOfWeekOutput)
}

func (e WeeklyScheduleDayOfWeek) ToWeeklyScheduleDayOfWeekOutputWithContext(ctx context.Context) WeeklyScheduleDayOfWeekOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WeeklyScheduleDayOfWeekOutput)
}

func (e WeeklyScheduleDayOfWeek) ToWeeklyScheduleDayOfWeekPtrOutput() WeeklyScheduleDayOfWeekPtrOutput {
	return e.ToWeeklyScheduleDayOfWeekPtrOutputWithContext(context.Background())
}

func (e WeeklyScheduleDayOfWeek) ToWeeklyScheduleDayOfWeekPtrOutputWithContext(ctx context.Context) WeeklyScheduleDayOfWeekPtrOutput {
	return WeeklyScheduleDayOfWeek(e).ToWeeklyScheduleDayOfWeekOutputWithContext(ctx).ToWeeklyScheduleDayOfWeekPtrOutputWithContext(ctx)
}

func (e WeeklyScheduleDayOfWeek) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeeklyScheduleDayOfWeek) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeeklyScheduleDayOfWeek) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WeeklyScheduleDayOfWeek) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WeeklyScheduleDayOfWeekOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleDayOfWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyScheduleDayOfWeek)(nil)).Elem()
}

func (o WeeklyScheduleDayOfWeekOutput) ToWeeklyScheduleDayOfWeekOutput() WeeklyScheduleDayOfWeekOutput {
	return o
}

func (o WeeklyScheduleDayOfWeekOutput) ToWeeklyScheduleDayOfWeekOutputWithContext(ctx context.Context) WeeklyScheduleDayOfWeekOutput {
	return o
}

func (o WeeklyScheduleDayOfWeekOutput) ToWeeklyScheduleDayOfWeekPtrOutput() WeeklyScheduleDayOfWeekPtrOutput {
	return o.ToWeeklyScheduleDayOfWeekPtrOutputWithContext(context.Background())
}

func (o WeeklyScheduleDayOfWeekOutput) ToWeeklyScheduleDayOfWeekPtrOutputWithContext(ctx context.Context) WeeklyScheduleDayOfWeekPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WeeklyScheduleDayOfWeek) *WeeklyScheduleDayOfWeek {
		return &v
	}).(WeeklyScheduleDayOfWeekPtrOutput)
}

func (o WeeklyScheduleDayOfWeekOutput) ToOutput(ctx context.Context) pulumix.Output[WeeklyScheduleDayOfWeek] {
	return pulumix.Output[WeeklyScheduleDayOfWeek]{
		OutputState: o.OutputState,
	}
}

func (o WeeklyScheduleDayOfWeekOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WeeklyScheduleDayOfWeekOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeeklyScheduleDayOfWeek) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WeeklyScheduleDayOfWeekOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeeklyScheduleDayOfWeekOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeeklyScheduleDayOfWeek) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WeeklyScheduleDayOfWeekPtrOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleDayOfWeekPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklyScheduleDayOfWeek)(nil)).Elem()
}

func (o WeeklyScheduleDayOfWeekPtrOutput) ToWeeklyScheduleDayOfWeekPtrOutput() WeeklyScheduleDayOfWeekPtrOutput {
	return o
}

func (o WeeklyScheduleDayOfWeekPtrOutput) ToWeeklyScheduleDayOfWeekPtrOutputWithContext(ctx context.Context) WeeklyScheduleDayOfWeekPtrOutput {
	return o
}

func (o WeeklyScheduleDayOfWeekPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*WeeklyScheduleDayOfWeek] {
	return pulumix.Output[*WeeklyScheduleDayOfWeek]{
		OutputState: o.OutputState,
	}
}

func (o WeeklyScheduleDayOfWeekPtrOutput) Elem() WeeklyScheduleDayOfWeekOutput {
	return o.ApplyT(func(v *WeeklyScheduleDayOfWeek) WeeklyScheduleDayOfWeek {
		if v != nil {
			return *v
		}
		var ret WeeklyScheduleDayOfWeek
		return ret
	}).(WeeklyScheduleDayOfWeekOutput)
}

func (o WeeklyScheduleDayOfWeekPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeeklyScheduleDayOfWeekPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WeeklyScheduleDayOfWeek) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WeeklyScheduleDayOfWeekInput is an input type that accepts WeeklyScheduleDayOfWeekArgs and WeeklyScheduleDayOfWeekOutput values.
// You can construct a concrete instance of `WeeklyScheduleDayOfWeekInput` via:
//
//	WeeklyScheduleDayOfWeekArgs{...}
type WeeklyScheduleDayOfWeekInput interface {
	pulumi.Input

	ToWeeklyScheduleDayOfWeekOutput() WeeklyScheduleDayOfWeekOutput
	ToWeeklyScheduleDayOfWeekOutputWithContext(context.Context) WeeklyScheduleDayOfWeekOutput
}

var weeklyScheduleDayOfWeekPtrType = reflect.TypeOf((**WeeklyScheduleDayOfWeek)(nil)).Elem()

type WeeklyScheduleDayOfWeekPtrInput interface {
	pulumi.Input

	ToWeeklyScheduleDayOfWeekPtrOutput() WeeklyScheduleDayOfWeekPtrOutput
	ToWeeklyScheduleDayOfWeekPtrOutputWithContext(context.Context) WeeklyScheduleDayOfWeekPtrOutput
}

type weeklyScheduleDayOfWeekPtr string

func WeeklyScheduleDayOfWeekPtr(v string) WeeklyScheduleDayOfWeekPtrInput {
	return (*weeklyScheduleDayOfWeekPtr)(&v)
}

func (*weeklyScheduleDayOfWeekPtr) ElementType() reflect.Type {
	return weeklyScheduleDayOfWeekPtrType
}

func (in *weeklyScheduleDayOfWeekPtr) ToWeeklyScheduleDayOfWeekPtrOutput() WeeklyScheduleDayOfWeekPtrOutput {
	return pulumi.ToOutput(in).(WeeklyScheduleDayOfWeekPtrOutput)
}

func (in *weeklyScheduleDayOfWeekPtr) ToWeeklyScheduleDayOfWeekPtrOutputWithContext(ctx context.Context) WeeklyScheduleDayOfWeekPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WeeklyScheduleDayOfWeekPtrOutput)
}

func (in *weeklyScheduleDayOfWeekPtr) ToOutput(ctx context.Context) pulumix.Output[*WeeklyScheduleDayOfWeek] {
	return pulumix.Output[*WeeklyScheduleDayOfWeek]{
		OutputState: in.ToWeeklyScheduleDayOfWeekPtrOutputWithContext(ctx).OutputState,
	}
}

type WindowsUpdateSettingsClassificationsItem string

const (
	// Invalid. If classifications are included, they must be specified.
	WindowsUpdateSettingsClassificationsItemClassificationUnspecified = WindowsUpdateSettingsClassificationsItem("CLASSIFICATION_UNSPECIFIED")
	// "A widely released fix for a specific problem that addresses a critical, non-security-related bug." [1]
	WindowsUpdateSettingsClassificationsItemCritical = WindowsUpdateSettingsClassificationsItem("CRITICAL")
	// "A widely released fix for a product-specific, security-related vulnerability. Security vulnerabilities are rated by their severity. The severity rating is indicated in the Microsoft security bulletin as critical, important, moderate, or low." [1]
	WindowsUpdateSettingsClassificationsItemSecurity = WindowsUpdateSettingsClassificationsItem("SECURITY")
	// "A widely released and frequent software update that contains additions to a product's definition database. Definition databases are often used to detect objects that have specific attributes, such as malicious code, phishing websites, or junk mail." [1]
	WindowsUpdateSettingsClassificationsItemDefinition = WindowsUpdateSettingsClassificationsItem("DEFINITION")
	// "Software that controls the input and output of a device." [1]
	WindowsUpdateSettingsClassificationsItemDriver = WindowsUpdateSettingsClassificationsItem("DRIVER")
	// "New product functionality that is first distributed outside the context of a product release and that is typically included in the next full product release." [1]
	WindowsUpdateSettingsClassificationsItemFeaturePack = WindowsUpdateSettingsClassificationsItem("FEATURE_PACK")
	// "A tested, cumulative set of all hotfixes, security updates, critical updates, and updates. Additionally, service packs may contain additional fixes for problems that are found internally since the release of the product. Service packs my also contain a limited number of customer-requested design changes or features." [1]
	WindowsUpdateSettingsClassificationsItemServicePack = WindowsUpdateSettingsClassificationsItem("SERVICE_PACK")
	// "A utility or feature that helps complete a task or set of tasks." [1]
	WindowsUpdateSettingsClassificationsItemTool = WindowsUpdateSettingsClassificationsItem("TOOL")
	// "A tested, cumulative set of hotfixes, security updates, critical updates, and updates that are packaged together for easy deployment. A rollup generally targets a specific area, such as security, or a component of a product, such as Internet Information Services (IIS)." [1]
	WindowsUpdateSettingsClassificationsItemUpdateRollup = WindowsUpdateSettingsClassificationsItem("UPDATE_ROLLUP")
	// "A widely released fix for a specific problem. An update addresses a noncritical, non-security-related bug." [1]
	WindowsUpdateSettingsClassificationsItemUpdate = WindowsUpdateSettingsClassificationsItem("UPDATE")
)

func (WindowsUpdateSettingsClassificationsItem) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUpdateSettingsClassificationsItem)(nil)).Elem()
}

func (e WindowsUpdateSettingsClassificationsItem) ToWindowsUpdateSettingsClassificationsItemOutput() WindowsUpdateSettingsClassificationsItemOutput {
	return pulumi.ToOutput(e).(WindowsUpdateSettingsClassificationsItemOutput)
}

func (e WindowsUpdateSettingsClassificationsItem) ToWindowsUpdateSettingsClassificationsItemOutputWithContext(ctx context.Context) WindowsUpdateSettingsClassificationsItemOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WindowsUpdateSettingsClassificationsItemOutput)
}

func (e WindowsUpdateSettingsClassificationsItem) ToWindowsUpdateSettingsClassificationsItemPtrOutput() WindowsUpdateSettingsClassificationsItemPtrOutput {
	return e.ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(context.Background())
}

func (e WindowsUpdateSettingsClassificationsItem) ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsClassificationsItemPtrOutput {
	return WindowsUpdateSettingsClassificationsItem(e).ToWindowsUpdateSettingsClassificationsItemOutputWithContext(ctx).ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(ctx)
}

func (e WindowsUpdateSettingsClassificationsItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WindowsUpdateSettingsClassificationsItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WindowsUpdateSettingsClassificationsItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WindowsUpdateSettingsClassificationsItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WindowsUpdateSettingsClassificationsItemOutput struct{ *pulumi.OutputState }

func (WindowsUpdateSettingsClassificationsItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUpdateSettingsClassificationsItem)(nil)).Elem()
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToWindowsUpdateSettingsClassificationsItemOutput() WindowsUpdateSettingsClassificationsItemOutput {
	return o
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToWindowsUpdateSettingsClassificationsItemOutputWithContext(ctx context.Context) WindowsUpdateSettingsClassificationsItemOutput {
	return o
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToWindowsUpdateSettingsClassificationsItemPtrOutput() WindowsUpdateSettingsClassificationsItemPtrOutput {
	return o.ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(context.Background())
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsClassificationsItemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WindowsUpdateSettingsClassificationsItem) *WindowsUpdateSettingsClassificationsItem {
		return &v
	}).(WindowsUpdateSettingsClassificationsItemPtrOutput)
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToOutput(ctx context.Context) pulumix.Output[WindowsUpdateSettingsClassificationsItem] {
	return pulumix.Output[WindowsUpdateSettingsClassificationsItem]{
		OutputState: o.OutputState,
	}
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WindowsUpdateSettingsClassificationsItem) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WindowsUpdateSettingsClassificationsItem) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WindowsUpdateSettingsClassificationsItemPtrOutput struct{ *pulumi.OutputState }

func (WindowsUpdateSettingsClassificationsItemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsUpdateSettingsClassificationsItem)(nil)).Elem()
}

func (o WindowsUpdateSettingsClassificationsItemPtrOutput) ToWindowsUpdateSettingsClassificationsItemPtrOutput() WindowsUpdateSettingsClassificationsItemPtrOutput {
	return o
}

func (o WindowsUpdateSettingsClassificationsItemPtrOutput) ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsClassificationsItemPtrOutput {
	return o
}

func (o WindowsUpdateSettingsClassificationsItemPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*WindowsUpdateSettingsClassificationsItem] {
	return pulumix.Output[*WindowsUpdateSettingsClassificationsItem]{
		OutputState: o.OutputState,
	}
}

func (o WindowsUpdateSettingsClassificationsItemPtrOutput) Elem() WindowsUpdateSettingsClassificationsItemOutput {
	return o.ApplyT(func(v *WindowsUpdateSettingsClassificationsItem) WindowsUpdateSettingsClassificationsItem {
		if v != nil {
			return *v
		}
		var ret WindowsUpdateSettingsClassificationsItem
		return ret
	}).(WindowsUpdateSettingsClassificationsItemOutput)
}

func (o WindowsUpdateSettingsClassificationsItemPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WindowsUpdateSettingsClassificationsItemPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WindowsUpdateSettingsClassificationsItem) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WindowsUpdateSettingsClassificationsItemInput is an input type that accepts WindowsUpdateSettingsClassificationsItemArgs and WindowsUpdateSettingsClassificationsItemOutput values.
// You can construct a concrete instance of `WindowsUpdateSettingsClassificationsItemInput` via:
//
//	WindowsUpdateSettingsClassificationsItemArgs{...}
type WindowsUpdateSettingsClassificationsItemInput interface {
	pulumi.Input

	ToWindowsUpdateSettingsClassificationsItemOutput() WindowsUpdateSettingsClassificationsItemOutput
	ToWindowsUpdateSettingsClassificationsItemOutputWithContext(context.Context) WindowsUpdateSettingsClassificationsItemOutput
}

var windowsUpdateSettingsClassificationsItemPtrType = reflect.TypeOf((**WindowsUpdateSettingsClassificationsItem)(nil)).Elem()

type WindowsUpdateSettingsClassificationsItemPtrInput interface {
	pulumi.Input

	ToWindowsUpdateSettingsClassificationsItemPtrOutput() WindowsUpdateSettingsClassificationsItemPtrOutput
	ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(context.Context) WindowsUpdateSettingsClassificationsItemPtrOutput
}

type windowsUpdateSettingsClassificationsItemPtr string

func WindowsUpdateSettingsClassificationsItemPtr(v string) WindowsUpdateSettingsClassificationsItemPtrInput {
	return (*windowsUpdateSettingsClassificationsItemPtr)(&v)
}

func (*windowsUpdateSettingsClassificationsItemPtr) ElementType() reflect.Type {
	return windowsUpdateSettingsClassificationsItemPtrType
}

func (in *windowsUpdateSettingsClassificationsItemPtr) ToWindowsUpdateSettingsClassificationsItemPtrOutput() WindowsUpdateSettingsClassificationsItemPtrOutput {
	return pulumi.ToOutput(in).(WindowsUpdateSettingsClassificationsItemPtrOutput)
}

func (in *windowsUpdateSettingsClassificationsItemPtr) ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsClassificationsItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WindowsUpdateSettingsClassificationsItemPtrOutput)
}

func (in *windowsUpdateSettingsClassificationsItemPtr) ToOutput(ctx context.Context) pulumix.Output[*WindowsUpdateSettingsClassificationsItem] {
	return pulumix.Output[*WindowsUpdateSettingsClassificationsItem]{
		OutputState: in.ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(ctx).OutputState,
	}
}

// WindowsUpdateSettingsClassificationsItemArrayInput is an input type that accepts WindowsUpdateSettingsClassificationsItemArray and WindowsUpdateSettingsClassificationsItemArrayOutput values.
// You can construct a concrete instance of `WindowsUpdateSettingsClassificationsItemArrayInput` via:
//
//	WindowsUpdateSettingsClassificationsItemArray{ WindowsUpdateSettingsClassificationsItemArgs{...} }
type WindowsUpdateSettingsClassificationsItemArrayInput interface {
	pulumi.Input

	ToWindowsUpdateSettingsClassificationsItemArrayOutput() WindowsUpdateSettingsClassificationsItemArrayOutput
	ToWindowsUpdateSettingsClassificationsItemArrayOutputWithContext(context.Context) WindowsUpdateSettingsClassificationsItemArrayOutput
}

type WindowsUpdateSettingsClassificationsItemArray []WindowsUpdateSettingsClassificationsItem

func (WindowsUpdateSettingsClassificationsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsUpdateSettingsClassificationsItem)(nil)).Elem()
}

func (i WindowsUpdateSettingsClassificationsItemArray) ToWindowsUpdateSettingsClassificationsItemArrayOutput() WindowsUpdateSettingsClassificationsItemArrayOutput {
	return i.ToWindowsUpdateSettingsClassificationsItemArrayOutputWithContext(context.Background())
}

func (i WindowsUpdateSettingsClassificationsItemArray) ToWindowsUpdateSettingsClassificationsItemArrayOutputWithContext(ctx context.Context) WindowsUpdateSettingsClassificationsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUpdateSettingsClassificationsItemArrayOutput)
}

func (i WindowsUpdateSettingsClassificationsItemArray) ToOutput(ctx context.Context) pulumix.Output[[]WindowsUpdateSettingsClassificationsItem] {
	return pulumix.Output[[]WindowsUpdateSettingsClassificationsItem]{
		OutputState: i.ToWindowsUpdateSettingsClassificationsItemArrayOutputWithContext(ctx).OutputState,
	}
}

type WindowsUpdateSettingsClassificationsItemArrayOutput struct{ *pulumi.OutputState }

func (WindowsUpdateSettingsClassificationsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsUpdateSettingsClassificationsItem)(nil)).Elem()
}

func (o WindowsUpdateSettingsClassificationsItemArrayOutput) ToWindowsUpdateSettingsClassificationsItemArrayOutput() WindowsUpdateSettingsClassificationsItemArrayOutput {
	return o
}

func (o WindowsUpdateSettingsClassificationsItemArrayOutput) ToWindowsUpdateSettingsClassificationsItemArrayOutputWithContext(ctx context.Context) WindowsUpdateSettingsClassificationsItemArrayOutput {
	return o
}

func (o WindowsUpdateSettingsClassificationsItemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]WindowsUpdateSettingsClassificationsItem] {
	return pulumix.Output[[]WindowsUpdateSettingsClassificationsItem]{
		OutputState: o.OutputState,
	}
}

func (o WindowsUpdateSettingsClassificationsItemArrayOutput) Index(i pulumi.IntInput) WindowsUpdateSettingsClassificationsItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsUpdateSettingsClassificationsItem {
		return vs[0].([]WindowsUpdateSettingsClassificationsItem)[vs[1].(int)]
	}).(WindowsUpdateSettingsClassificationsItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AptRepositoryArchiveTypeInput)(nil)).Elem(), AptRepositoryArchiveType("ARCHIVE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AptRepositoryArchiveTypePtrInput)(nil)).Elem(), AptRepositoryArchiveType("ARCHIVE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AptSettingsTypeInput)(nil)).Elem(), AptSettingsType("TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AptSettingsTypePtrInput)(nil)).Elem(), AptSettingsType("TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ExecStepConfigInterpreterInput)(nil)).Elem(), ExecStepConfigInterpreter("INTERPRETER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ExecStepConfigInterpreterPtrInput)(nil)).Elem(), ExecStepConfigInterpreter("INTERPRETER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PackageDesiredStateInput)(nil)).Elem(), PackageDesiredState("DESIRED_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PackageDesiredStatePtrInput)(nil)).Elem(), PackageDesiredState("DESIRED_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PackageManagerInput)(nil)).Elem(), PackageManager("MANAGER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PackageManagerPtrInput)(nil)).Elem(), PackageManager("MANAGER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PatchConfigRebootConfigInput)(nil)).Elem(), PatchConfigRebootConfig("REBOOT_CONFIG_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PatchConfigRebootConfigPtrInput)(nil)).Elem(), PatchConfigRebootConfig("REBOOT_CONFIG_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PatchRolloutModeInput)(nil)).Elem(), PatchRolloutMode("MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PatchRolloutModePtrInput)(nil)).Elem(), PatchRolloutMode("MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RecurringScheduleFrequencyInput)(nil)).Elem(), RecurringScheduleFrequency("FREQUENCY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RecurringScheduleFrequencyPtrInput)(nil)).Elem(), RecurringScheduleFrequency("FREQUENCY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareRecipeDesiredStateInput)(nil)).Elem(), SoftwareRecipeDesiredState("DESIRED_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareRecipeDesiredStatePtrInput)(nil)).Elem(), SoftwareRecipeDesiredState("DESIRED_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareRecipeStepExtractArchiveTypeInput)(nil)).Elem(), SoftwareRecipeStepExtractArchiveType("ARCHIVE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareRecipeStepExtractArchiveTypePtrInput)(nil)).Elem(), SoftwareRecipeStepExtractArchiveType("ARCHIVE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareRecipeStepRunScriptInterpreterInput)(nil)).Elem(), SoftwareRecipeStepRunScriptInterpreter("INTERPRETER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*SoftwareRecipeStepRunScriptInterpreterPtrInput)(nil)).Elem(), SoftwareRecipeStepRunScriptInterpreter("INTERPRETER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*WeekDayOfMonthDayOfWeekInput)(nil)).Elem(), WeekDayOfMonthDayOfWeek("DAY_OF_WEEK_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*WeekDayOfMonthDayOfWeekPtrInput)(nil)).Elem(), WeekDayOfMonthDayOfWeek("DAY_OF_WEEK_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*WeeklyScheduleDayOfWeekInput)(nil)).Elem(), WeeklyScheduleDayOfWeek("DAY_OF_WEEK_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*WeeklyScheduleDayOfWeekPtrInput)(nil)).Elem(), WeeklyScheduleDayOfWeek("DAY_OF_WEEK_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsUpdateSettingsClassificationsItemInput)(nil)).Elem(), WindowsUpdateSettingsClassificationsItem("CLASSIFICATION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsUpdateSettingsClassificationsItemPtrInput)(nil)).Elem(), WindowsUpdateSettingsClassificationsItem("CLASSIFICATION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsUpdateSettingsClassificationsItemArrayInput)(nil)).Elem(), WindowsUpdateSettingsClassificationsItemArray{})
	pulumi.RegisterOutputType(AptRepositoryArchiveTypeOutput{})
	pulumi.RegisterOutputType(AptRepositoryArchiveTypePtrOutput{})
	pulumi.RegisterOutputType(AptSettingsTypeOutput{})
	pulumi.RegisterOutputType(AptSettingsTypePtrOutput{})
	pulumi.RegisterOutputType(ExecStepConfigInterpreterOutput{})
	pulumi.RegisterOutputType(ExecStepConfigInterpreterPtrOutput{})
	pulumi.RegisterOutputType(PackageDesiredStateOutput{})
	pulumi.RegisterOutputType(PackageDesiredStatePtrOutput{})
	pulumi.RegisterOutputType(PackageManagerOutput{})
	pulumi.RegisterOutputType(PackageManagerPtrOutput{})
	pulumi.RegisterOutputType(PatchConfigRebootConfigOutput{})
	pulumi.RegisterOutputType(PatchConfigRebootConfigPtrOutput{})
	pulumi.RegisterOutputType(PatchRolloutModeOutput{})
	pulumi.RegisterOutputType(PatchRolloutModePtrOutput{})
	pulumi.RegisterOutputType(RecurringScheduleFrequencyOutput{})
	pulumi.RegisterOutputType(RecurringScheduleFrequencyPtrOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeDesiredStateOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeDesiredStatePtrOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepExtractArchiveTypeOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepExtractArchiveTypePtrOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepRunScriptInterpreterOutput{})
	pulumi.RegisterOutputType(SoftwareRecipeStepRunScriptInterpreterPtrOutput{})
	pulumi.RegisterOutputType(WeekDayOfMonthDayOfWeekOutput{})
	pulumi.RegisterOutputType(WeekDayOfMonthDayOfWeekPtrOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleDayOfWeekOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleDayOfWeekPtrOutput{})
	pulumi.RegisterOutputType(WindowsUpdateSettingsClassificationsItemOutput{})
	pulumi.RegisterOutputType(WindowsUpdateSettingsClassificationsItemPtrOutput{})
	pulumi.RegisterOutputType(WindowsUpdateSettingsClassificationsItemArrayOutput{})
}
