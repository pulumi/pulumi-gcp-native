// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get an OS Config guest policy.
func LookupGuestPolicy(ctx *pulumi.Context, args *LookupGuestPolicyArgs, opts ...pulumi.InvokeOption) (*LookupGuestPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGuestPolicyResult
	err := ctx.Invoke("google-native:osconfig/v1beta:getGuestPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupGuestPolicyArgs struct {
	GuestPolicyId string  `pulumi:"guestPolicyId"`
	Project       *string `pulumi:"project"`
}

type LookupGuestPolicyResult struct {
	// Specifies the VM instances that are assigned to this policy. This allows you to target sets or groups of VM instances by different parameters such as labels, names, OS, or zones. If left empty, all VM instances underneath this policy are targeted. At the same level in the resource hierarchy (that is within a project), the service prevents the creation of multiple policies that conflict with each other. For more information, see how the service [handles assignment conflicts](/compute/docs/os-config-management/create-guest-policy#handle-conflicts).
	Assignment AssignmentResponse `pulumi:"assignment"`
	// Time this guest policy was created.
	CreateTime string `pulumi:"createTime"`
	// Description of the guest policy. Length of the description is limited to 1024 characters.
	Description string `pulumi:"description"`
	// The etag for this guest policy. If this is provided on update, it must match the server's etag.
	Etag string `pulumi:"etag"`
	// Unique name of the resource in this project using one of the following forms: `projects/{project_number}/guestPolicies/{guest_policy_id}`.
	Name string `pulumi:"name"`
	// A list of package repositories to configure on the VM instance. This is done before any other configs are applied so they can use these repos. Package repositories are only configured if the corresponding package manager(s) are available.
	PackageRepositories []PackageRepositoryResponse `pulumi:"packageRepositories"`
	// The software packages to be managed by this policy.
	Packages []PackageResponse `pulumi:"packages"`
	// A list of Recipes to install on the VM instance.
	Recipes []SoftwareRecipeResponse `pulumi:"recipes"`
	// Last time this guest policy was updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupGuestPolicyOutput(ctx *pulumi.Context, args LookupGuestPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupGuestPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGuestPolicyResult, error) {
			args := v.(LookupGuestPolicyArgs)
			r, err := LookupGuestPolicy(ctx, &args, opts...)
			var s LookupGuestPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGuestPolicyResultOutput)
}

type LookupGuestPolicyOutputArgs struct {
	GuestPolicyId pulumi.StringInput    `pulumi:"guestPolicyId"`
	Project       pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupGuestPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGuestPolicyArgs)(nil)).Elem()
}

type LookupGuestPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupGuestPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGuestPolicyResult)(nil)).Elem()
}

func (o LookupGuestPolicyResultOutput) ToLookupGuestPolicyResultOutput() LookupGuestPolicyResultOutput {
	return o
}

func (o LookupGuestPolicyResultOutput) ToLookupGuestPolicyResultOutputWithContext(ctx context.Context) LookupGuestPolicyResultOutput {
	return o
}

// Specifies the VM instances that are assigned to this policy. This allows you to target sets or groups of VM instances by different parameters such as labels, names, OS, or zones. If left empty, all VM instances underneath this policy are targeted. At the same level in the resource hierarchy (that is within a project), the service prevents the creation of multiple policies that conflict with each other. For more information, see how the service [handles assignment conflicts](/compute/docs/os-config-management/create-guest-policy#handle-conflicts).
func (o LookupGuestPolicyResultOutput) Assignment() AssignmentResponseOutput {
	return o.ApplyT(func(v LookupGuestPolicyResult) AssignmentResponse { return v.Assignment }).(AssignmentResponseOutput)
}

// Time this guest policy was created.
func (o LookupGuestPolicyResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGuestPolicyResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the guest policy. Length of the description is limited to 1024 characters.
func (o LookupGuestPolicyResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGuestPolicyResult) string { return v.Description }).(pulumi.StringOutput)
}

// The etag for this guest policy. If this is provided on update, it must match the server's etag.
func (o LookupGuestPolicyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGuestPolicyResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Unique name of the resource in this project using one of the following forms: `projects/{project_number}/guestPolicies/{guest_policy_id}`.
func (o LookupGuestPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGuestPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// A list of package repositories to configure on the VM instance. This is done before any other configs are applied so they can use these repos. Package repositories are only configured if the corresponding package manager(s) are available.
func (o LookupGuestPolicyResultOutput) PackageRepositories() PackageRepositoryResponseArrayOutput {
	return o.ApplyT(func(v LookupGuestPolicyResult) []PackageRepositoryResponse { return v.PackageRepositories }).(PackageRepositoryResponseArrayOutput)
}

// The software packages to be managed by this policy.
func (o LookupGuestPolicyResultOutput) Packages() PackageResponseArrayOutput {
	return o.ApplyT(func(v LookupGuestPolicyResult) []PackageResponse { return v.Packages }).(PackageResponseArrayOutput)
}

// A list of Recipes to install on the VM instance.
func (o LookupGuestPolicyResultOutput) Recipes() SoftwareRecipeResponseArrayOutput {
	return o.ApplyT(func(v LookupGuestPolicyResult) []SoftwareRecipeResponse { return v.Recipes }).(SoftwareRecipeResponseArrayOutput)
}

// Last time this guest policy was updated.
func (o LookupGuestPolicyResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGuestPolicyResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGuestPolicyResultOutput{})
}
