// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercent struct {
	// Specifies a fixed value.
	Fixed *int `pulumi:"fixed"`
	// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
	Percent *int `pulumi:"percent"`
}

// FixedOrPercentInput is an input type that accepts FixedOrPercentArgs and FixedOrPercentOutput values.
// You can construct a concrete instance of `FixedOrPercentInput` via:
//
//          FixedOrPercentArgs{...}
type FixedOrPercentInput interface {
	pulumi.Input

	ToFixedOrPercentOutput() FixedOrPercentOutput
	ToFixedOrPercentOutputWithContext(context.Context) FixedOrPercentOutput
}

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercentArgs struct {
	// Specifies a fixed value.
	Fixed pulumi.IntPtrInput `pulumi:"fixed"`
	// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
	Percent pulumi.IntPtrInput `pulumi:"percent"`
}

func (FixedOrPercentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedOrPercent)(nil)).Elem()
}

func (i FixedOrPercentArgs) ToFixedOrPercentOutput() FixedOrPercentOutput {
	return i.ToFixedOrPercentOutputWithContext(context.Background())
}

func (i FixedOrPercentArgs) ToFixedOrPercentOutputWithContext(ctx context.Context) FixedOrPercentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentOutput)
}

func (i FixedOrPercentArgs) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return i.ToFixedOrPercentPtrOutputWithContext(context.Background())
}

func (i FixedOrPercentArgs) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentOutput).ToFixedOrPercentPtrOutputWithContext(ctx)
}

// FixedOrPercentPtrInput is an input type that accepts FixedOrPercentArgs, FixedOrPercentPtr and FixedOrPercentPtrOutput values.
// You can construct a concrete instance of `FixedOrPercentPtrInput` via:
//
//          FixedOrPercentArgs{...}
//
//  or:
//
//          nil
type FixedOrPercentPtrInput interface {
	pulumi.Input

	ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput
	ToFixedOrPercentPtrOutputWithContext(context.Context) FixedOrPercentPtrOutput
}

type fixedOrPercentPtrType FixedOrPercentArgs

func FixedOrPercentPtr(v *FixedOrPercentArgs) FixedOrPercentPtrInput {
	return (*fixedOrPercentPtrType)(v)
}

func (*fixedOrPercentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedOrPercent)(nil)).Elem()
}

func (i *fixedOrPercentPtrType) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return i.ToFixedOrPercentPtrOutputWithContext(context.Background())
}

func (i *fixedOrPercentPtrType) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentPtrOutput)
}

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercentOutput struct{ *pulumi.OutputState }

func (FixedOrPercentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedOrPercent)(nil)).Elem()
}

func (o FixedOrPercentOutput) ToFixedOrPercentOutput() FixedOrPercentOutput {
	return o
}

func (o FixedOrPercentOutput) ToFixedOrPercentOutputWithContext(ctx context.Context) FixedOrPercentOutput {
	return o
}

func (o FixedOrPercentOutput) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return o.ToFixedOrPercentPtrOutputWithContext(context.Background())
}

func (o FixedOrPercentOutput) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return o.ApplyT(func(v FixedOrPercent) *FixedOrPercent {
		return &v
	}).(FixedOrPercentPtrOutput)
}

// Specifies a fixed value.
func (o FixedOrPercentOutput) Fixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FixedOrPercent) *int { return v.Fixed }).(pulumi.IntPtrOutput)
}

// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
func (o FixedOrPercentOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FixedOrPercent) *int { return v.Percent }).(pulumi.IntPtrOutput)
}

type FixedOrPercentPtrOutput struct{ *pulumi.OutputState }

func (FixedOrPercentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedOrPercent)(nil)).Elem()
}

func (o FixedOrPercentPtrOutput) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return o
}

func (o FixedOrPercentPtrOutput) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return o
}

func (o FixedOrPercentPtrOutput) Elem() FixedOrPercentOutput {
	return o.ApplyT(func(v *FixedOrPercent) FixedOrPercent { return *v }).(FixedOrPercentOutput)
}

// Specifies a fixed value.
func (o FixedOrPercentPtrOutput) Fixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedOrPercent) *int {
		if v == nil {
			return nil
		}
		return v.Fixed
	}).(pulumi.IntPtrOutput)
}

// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
func (o FixedOrPercentPtrOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedOrPercent) *int {
		if v == nil {
			return nil
		}
		return v.Percent
	}).(pulumi.IntPtrOutput)
}

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercentResponse struct {
	// Specifies a fixed value.
	Fixed int `pulumi:"fixed"`
	// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
	Percent int `pulumi:"percent"`
}

// FixedOrPercentResponseInput is an input type that accepts FixedOrPercentResponseArgs and FixedOrPercentResponseOutput values.
// You can construct a concrete instance of `FixedOrPercentResponseInput` via:
//
//          FixedOrPercentResponseArgs{...}
type FixedOrPercentResponseInput interface {
	pulumi.Input

	ToFixedOrPercentResponseOutput() FixedOrPercentResponseOutput
	ToFixedOrPercentResponseOutputWithContext(context.Context) FixedOrPercentResponseOutput
}

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercentResponseArgs struct {
	// Specifies a fixed value.
	Fixed pulumi.IntInput `pulumi:"fixed"`
	// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
	Percent pulumi.IntInput `pulumi:"percent"`
}

func (FixedOrPercentResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedOrPercentResponse)(nil)).Elem()
}

func (i FixedOrPercentResponseArgs) ToFixedOrPercentResponseOutput() FixedOrPercentResponseOutput {
	return i.ToFixedOrPercentResponseOutputWithContext(context.Background())
}

func (i FixedOrPercentResponseArgs) ToFixedOrPercentResponseOutputWithContext(ctx context.Context) FixedOrPercentResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentResponseOutput)
}

func (i FixedOrPercentResponseArgs) ToFixedOrPercentResponsePtrOutput() FixedOrPercentResponsePtrOutput {
	return i.ToFixedOrPercentResponsePtrOutputWithContext(context.Background())
}

func (i FixedOrPercentResponseArgs) ToFixedOrPercentResponsePtrOutputWithContext(ctx context.Context) FixedOrPercentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentResponseOutput).ToFixedOrPercentResponsePtrOutputWithContext(ctx)
}

// FixedOrPercentResponsePtrInput is an input type that accepts FixedOrPercentResponseArgs, FixedOrPercentResponsePtr and FixedOrPercentResponsePtrOutput values.
// You can construct a concrete instance of `FixedOrPercentResponsePtrInput` via:
//
//          FixedOrPercentResponseArgs{...}
//
//  or:
//
//          nil
type FixedOrPercentResponsePtrInput interface {
	pulumi.Input

	ToFixedOrPercentResponsePtrOutput() FixedOrPercentResponsePtrOutput
	ToFixedOrPercentResponsePtrOutputWithContext(context.Context) FixedOrPercentResponsePtrOutput
}

type fixedOrPercentResponsePtrType FixedOrPercentResponseArgs

func FixedOrPercentResponsePtr(v *FixedOrPercentResponseArgs) FixedOrPercentResponsePtrInput {
	return (*fixedOrPercentResponsePtrType)(v)
}

func (*fixedOrPercentResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedOrPercentResponse)(nil)).Elem()
}

func (i *fixedOrPercentResponsePtrType) ToFixedOrPercentResponsePtrOutput() FixedOrPercentResponsePtrOutput {
	return i.ToFixedOrPercentResponsePtrOutputWithContext(context.Background())
}

func (i *fixedOrPercentResponsePtrType) ToFixedOrPercentResponsePtrOutputWithContext(ctx context.Context) FixedOrPercentResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentResponsePtrOutput)
}

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercentResponseOutput struct{ *pulumi.OutputState }

func (FixedOrPercentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedOrPercentResponse)(nil)).Elem()
}

func (o FixedOrPercentResponseOutput) ToFixedOrPercentResponseOutput() FixedOrPercentResponseOutput {
	return o
}

func (o FixedOrPercentResponseOutput) ToFixedOrPercentResponseOutputWithContext(ctx context.Context) FixedOrPercentResponseOutput {
	return o
}

func (o FixedOrPercentResponseOutput) ToFixedOrPercentResponsePtrOutput() FixedOrPercentResponsePtrOutput {
	return o.ToFixedOrPercentResponsePtrOutputWithContext(context.Background())
}

func (o FixedOrPercentResponseOutput) ToFixedOrPercentResponsePtrOutputWithContext(ctx context.Context) FixedOrPercentResponsePtrOutput {
	return o.ApplyT(func(v FixedOrPercentResponse) *FixedOrPercentResponse {
		return &v
	}).(FixedOrPercentResponsePtrOutput)
}

// Specifies a fixed value.
func (o FixedOrPercentResponseOutput) Fixed() pulumi.IntOutput {
	return o.ApplyT(func(v FixedOrPercentResponse) int { return v.Fixed }).(pulumi.IntOutput)
}

// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
func (o FixedOrPercentResponseOutput) Percent() pulumi.IntOutput {
	return o.ApplyT(func(v FixedOrPercentResponse) int { return v.Percent }).(pulumi.IntOutput)
}

type FixedOrPercentResponsePtrOutput struct{ *pulumi.OutputState }

func (FixedOrPercentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedOrPercentResponse)(nil)).Elem()
}

func (o FixedOrPercentResponsePtrOutput) ToFixedOrPercentResponsePtrOutput() FixedOrPercentResponsePtrOutput {
	return o
}

func (o FixedOrPercentResponsePtrOutput) ToFixedOrPercentResponsePtrOutputWithContext(ctx context.Context) FixedOrPercentResponsePtrOutput {
	return o
}

func (o FixedOrPercentResponsePtrOutput) Elem() FixedOrPercentResponseOutput {
	return o.ApplyT(func(v *FixedOrPercentResponse) FixedOrPercentResponse { return *v }).(FixedOrPercentResponseOutput)
}

// Specifies a fixed value.
func (o FixedOrPercentResponsePtrOutput) Fixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedOrPercentResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Fixed
	}).(pulumi.IntPtrOutput)
}

// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
func (o FixedOrPercentResponsePtrOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedOrPercentResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Percent
	}).(pulumi.IntPtrOutput)
}

// An OS policy defines the desired state configuration for a VM.
type OSPolicy struct {
	// This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.
	AllowNoResourceGroupMatch *bool `pulumi:"allowNoResourceGroupMatch"`
	// Policy description. Length of the description is limited to 1024 characters.
	Description *string `pulumi:"description"`
	// The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment.
	Id string `pulumi:"id"`
	// Policy mode
	Mode string `pulumi:"mode"`
	// List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`
	ResourceGroups []OSPolicyResourceGroup `pulumi:"resourceGroups"`
}

// OSPolicyInput is an input type that accepts OSPolicyArgs and OSPolicyOutput values.
// You can construct a concrete instance of `OSPolicyInput` via:
//
//          OSPolicyArgs{...}
type OSPolicyInput interface {
	pulumi.Input

	ToOSPolicyOutput() OSPolicyOutput
	ToOSPolicyOutputWithContext(context.Context) OSPolicyOutput
}

// An OS policy defines the desired state configuration for a VM.
type OSPolicyArgs struct {
	// This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.
	AllowNoResourceGroupMatch pulumi.BoolPtrInput `pulumi:"allowNoResourceGroupMatch"`
	// Policy description. Length of the description is limited to 1024 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment.
	Id pulumi.StringInput `pulumi:"id"`
	// Policy mode
	Mode OSPolicyMode `pulumi:"mode"`
	// List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`
	ResourceGroups OSPolicyResourceGroupArrayInput `pulumi:"resourceGroups"`
}

func (OSPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicy)(nil)).Elem()
}

func (i OSPolicyArgs) ToOSPolicyOutput() OSPolicyOutput {
	return i.ToOSPolicyOutputWithContext(context.Background())
}

func (i OSPolicyArgs) ToOSPolicyOutputWithContext(ctx context.Context) OSPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyOutput)
}

// OSPolicyArrayInput is an input type that accepts OSPolicyArray and OSPolicyArrayOutput values.
// You can construct a concrete instance of `OSPolicyArrayInput` via:
//
//          OSPolicyArray{ OSPolicyArgs{...} }
type OSPolicyArrayInput interface {
	pulumi.Input

	ToOSPolicyArrayOutput() OSPolicyArrayOutput
	ToOSPolicyArrayOutputWithContext(context.Context) OSPolicyArrayOutput
}

type OSPolicyArray []OSPolicyInput

func (OSPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicy)(nil)).Elem()
}

func (i OSPolicyArray) ToOSPolicyArrayOutput() OSPolicyArrayOutput {
	return i.ToOSPolicyArrayOutputWithContext(context.Background())
}

func (i OSPolicyArray) ToOSPolicyArrayOutputWithContext(ctx context.Context) OSPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyArrayOutput)
}

// An OS policy defines the desired state configuration for a VM.
type OSPolicyOutput struct{ *pulumi.OutputState }

func (OSPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicy)(nil)).Elem()
}

func (o OSPolicyOutput) ToOSPolicyOutput() OSPolicyOutput {
	return o
}

func (o OSPolicyOutput) ToOSPolicyOutputWithContext(ctx context.Context) OSPolicyOutput {
	return o
}

// This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.
func (o OSPolicyOutput) AllowNoResourceGroupMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSPolicy) *bool { return v.AllowNoResourceGroupMatch }).(pulumi.BoolPtrOutput)
}

// Policy description. Length of the description is limited to 1024 characters.
func (o OSPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicy) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment.
func (o OSPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicy) string { return v.Id }).(pulumi.StringOutput)
}

// Policy mode
func (o OSPolicyOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicy) string { return v.Mode }).(pulumi.StringOutput)
}

// List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`
func (o OSPolicyOutput) ResourceGroups() OSPolicyResourceGroupArrayOutput {
	return o.ApplyT(func(v OSPolicy) []OSPolicyResourceGroup { return v.ResourceGroups }).(OSPolicyResourceGroupArrayOutput)
}

type OSPolicyArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicy)(nil)).Elem()
}

func (o OSPolicyArrayOutput) ToOSPolicyArrayOutput() OSPolicyArrayOutput {
	return o
}

func (o OSPolicyArrayOutput) ToOSPolicyArrayOutputWithContext(ctx context.Context) OSPolicyArrayOutput {
	return o
}

func (o OSPolicyArrayOutput) Index(i pulumi.IntInput) OSPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicy {
		return vs[0].([]OSPolicy)[vs[1].(int)]
	}).(OSPolicyOutput)
}

// Message to represent the filters to select VMs for an assignment
type OSPolicyAssignmentInstanceFilter struct {
	// Target all VMs in the project. If true, no other criteria is permitted.
	All *bool `pulumi:"all"`
	// List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM. This filter is applied last in the filtering chain and therefore a VM is guaranteed to be excluded if it satisfies one of the below label sets.
	ExclusionLabels []OSPolicyAssignmentLabelSet `pulumi:"exclusionLabels"`
	// List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
	InclusionLabels []OSPolicyAssignmentLabelSet `pulumi:"inclusionLabels"`
	// A VM is included if it's OS short name matches with any of the values provided in this list.
	OsShortNames []string `pulumi:"osShortNames"`
}

// OSPolicyAssignmentInstanceFilterInput is an input type that accepts OSPolicyAssignmentInstanceFilterArgs and OSPolicyAssignmentInstanceFilterOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentInstanceFilterInput` via:
//
//          OSPolicyAssignmentInstanceFilterArgs{...}
type OSPolicyAssignmentInstanceFilterInput interface {
	pulumi.Input

	ToOSPolicyAssignmentInstanceFilterOutput() OSPolicyAssignmentInstanceFilterOutput
	ToOSPolicyAssignmentInstanceFilterOutputWithContext(context.Context) OSPolicyAssignmentInstanceFilterOutput
}

// Message to represent the filters to select VMs for an assignment
type OSPolicyAssignmentInstanceFilterArgs struct {
	// Target all VMs in the project. If true, no other criteria is permitted.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM. This filter is applied last in the filtering chain and therefore a VM is guaranteed to be excluded if it satisfies one of the below label sets.
	ExclusionLabels OSPolicyAssignmentLabelSetArrayInput `pulumi:"exclusionLabels"`
	// List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
	InclusionLabels OSPolicyAssignmentLabelSetArrayInput `pulumi:"inclusionLabels"`
	// A VM is included if it's OS short name matches with any of the values provided in this list.
	OsShortNames pulumi.StringArrayInput `pulumi:"osShortNames"`
}

func (OSPolicyAssignmentInstanceFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentInstanceFilter)(nil)).Elem()
}

func (i OSPolicyAssignmentInstanceFilterArgs) ToOSPolicyAssignmentInstanceFilterOutput() OSPolicyAssignmentInstanceFilterOutput {
	return i.ToOSPolicyAssignmentInstanceFilterOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentInstanceFilterArgs) ToOSPolicyAssignmentInstanceFilterOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentInstanceFilterOutput)
}

func (i OSPolicyAssignmentInstanceFilterArgs) ToOSPolicyAssignmentInstanceFilterPtrOutput() OSPolicyAssignmentInstanceFilterPtrOutput {
	return i.ToOSPolicyAssignmentInstanceFilterPtrOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentInstanceFilterArgs) ToOSPolicyAssignmentInstanceFilterPtrOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentInstanceFilterOutput).ToOSPolicyAssignmentInstanceFilterPtrOutputWithContext(ctx)
}

// OSPolicyAssignmentInstanceFilterPtrInput is an input type that accepts OSPolicyAssignmentInstanceFilterArgs, OSPolicyAssignmentInstanceFilterPtr and OSPolicyAssignmentInstanceFilterPtrOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentInstanceFilterPtrInput` via:
//
//          OSPolicyAssignmentInstanceFilterArgs{...}
//
//  or:
//
//          nil
type OSPolicyAssignmentInstanceFilterPtrInput interface {
	pulumi.Input

	ToOSPolicyAssignmentInstanceFilterPtrOutput() OSPolicyAssignmentInstanceFilterPtrOutput
	ToOSPolicyAssignmentInstanceFilterPtrOutputWithContext(context.Context) OSPolicyAssignmentInstanceFilterPtrOutput
}

type ospolicyAssignmentInstanceFilterPtrType OSPolicyAssignmentInstanceFilterArgs

func OSPolicyAssignmentInstanceFilterPtr(v *OSPolicyAssignmentInstanceFilterArgs) OSPolicyAssignmentInstanceFilterPtrInput {
	return (*ospolicyAssignmentInstanceFilterPtrType)(v)
}

func (*ospolicyAssignmentInstanceFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyAssignmentInstanceFilter)(nil)).Elem()
}

func (i *ospolicyAssignmentInstanceFilterPtrType) ToOSPolicyAssignmentInstanceFilterPtrOutput() OSPolicyAssignmentInstanceFilterPtrOutput {
	return i.ToOSPolicyAssignmentInstanceFilterPtrOutputWithContext(context.Background())
}

func (i *ospolicyAssignmentInstanceFilterPtrType) ToOSPolicyAssignmentInstanceFilterPtrOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentInstanceFilterPtrOutput)
}

// Message to represent the filters to select VMs for an assignment
type OSPolicyAssignmentInstanceFilterOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentInstanceFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentInstanceFilter)(nil)).Elem()
}

func (o OSPolicyAssignmentInstanceFilterOutput) ToOSPolicyAssignmentInstanceFilterOutput() OSPolicyAssignmentInstanceFilterOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterOutput) ToOSPolicyAssignmentInstanceFilterOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterOutput) ToOSPolicyAssignmentInstanceFilterPtrOutput() OSPolicyAssignmentInstanceFilterPtrOutput {
	return o.ToOSPolicyAssignmentInstanceFilterPtrOutputWithContext(context.Background())
}

func (o OSPolicyAssignmentInstanceFilterOutput) ToOSPolicyAssignmentInstanceFilterPtrOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterPtrOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilter) *OSPolicyAssignmentInstanceFilter {
		return &v
	}).(OSPolicyAssignmentInstanceFilterPtrOutput)
}

// Target all VMs in the project. If true, no other criteria is permitted.
func (o OSPolicyAssignmentInstanceFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM. This filter is applied last in the filtering chain and therefore a VM is guaranteed to be excluded if it satisfies one of the below label sets.
func (o OSPolicyAssignmentInstanceFilterOutput) ExclusionLabels() OSPolicyAssignmentLabelSetArrayOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilter) []OSPolicyAssignmentLabelSet { return v.ExclusionLabels }).(OSPolicyAssignmentLabelSetArrayOutput)
}

// List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
func (o OSPolicyAssignmentInstanceFilterOutput) InclusionLabels() OSPolicyAssignmentLabelSetArrayOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilter) []OSPolicyAssignmentLabelSet { return v.InclusionLabels }).(OSPolicyAssignmentLabelSetArrayOutput)
}

// A VM is included if it's OS short name matches with any of the values provided in this list.
func (o OSPolicyAssignmentInstanceFilterOutput) OsShortNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilter) []string { return v.OsShortNames }).(pulumi.StringArrayOutput)
}

type OSPolicyAssignmentInstanceFilterPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentInstanceFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyAssignmentInstanceFilter)(nil)).Elem()
}

func (o OSPolicyAssignmentInstanceFilterPtrOutput) ToOSPolicyAssignmentInstanceFilterPtrOutput() OSPolicyAssignmentInstanceFilterPtrOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterPtrOutput) ToOSPolicyAssignmentInstanceFilterPtrOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterPtrOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterPtrOutput) Elem() OSPolicyAssignmentInstanceFilterOutput {
	return o.ApplyT(func(v *OSPolicyAssignmentInstanceFilter) OSPolicyAssignmentInstanceFilter { return *v }).(OSPolicyAssignmentInstanceFilterOutput)
}

// Target all VMs in the project. If true, no other criteria is permitted.
func (o OSPolicyAssignmentInstanceFilterPtrOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSPolicyAssignmentInstanceFilter) *bool {
		if v == nil {
			return nil
		}
		return v.All
	}).(pulumi.BoolPtrOutput)
}

// List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM. This filter is applied last in the filtering chain and therefore a VM is guaranteed to be excluded if it satisfies one of the below label sets.
func (o OSPolicyAssignmentInstanceFilterPtrOutput) ExclusionLabels() OSPolicyAssignmentLabelSetArrayOutput {
	return o.ApplyT(func(v *OSPolicyAssignmentInstanceFilter) []OSPolicyAssignmentLabelSet {
		if v == nil {
			return nil
		}
		return v.ExclusionLabels
	}).(OSPolicyAssignmentLabelSetArrayOutput)
}

// List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
func (o OSPolicyAssignmentInstanceFilterPtrOutput) InclusionLabels() OSPolicyAssignmentLabelSetArrayOutput {
	return o.ApplyT(func(v *OSPolicyAssignmentInstanceFilter) []OSPolicyAssignmentLabelSet {
		if v == nil {
			return nil
		}
		return v.InclusionLabels
	}).(OSPolicyAssignmentLabelSetArrayOutput)
}

// A VM is included if it's OS short name matches with any of the values provided in this list.
func (o OSPolicyAssignmentInstanceFilterPtrOutput) OsShortNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OSPolicyAssignmentInstanceFilter) []string {
		if v == nil {
			return nil
		}
		return v.OsShortNames
	}).(pulumi.StringArrayOutput)
}

// Message to represent the filters to select VMs for an assignment
type OSPolicyAssignmentInstanceFilterResponse struct {
	// Target all VMs in the project. If true, no other criteria is permitted.
	All bool `pulumi:"all"`
	// List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM. This filter is applied last in the filtering chain and therefore a VM is guaranteed to be excluded if it satisfies one of the below label sets.
	ExclusionLabels []OSPolicyAssignmentLabelSetResponse `pulumi:"exclusionLabels"`
	// List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
	InclusionLabels []OSPolicyAssignmentLabelSetResponse `pulumi:"inclusionLabels"`
	// A VM is included if it's OS short name matches with any of the values provided in this list.
	OsShortNames []string `pulumi:"osShortNames"`
}

// OSPolicyAssignmentInstanceFilterResponseInput is an input type that accepts OSPolicyAssignmentInstanceFilterResponseArgs and OSPolicyAssignmentInstanceFilterResponseOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentInstanceFilterResponseInput` via:
//
//          OSPolicyAssignmentInstanceFilterResponseArgs{...}
type OSPolicyAssignmentInstanceFilterResponseInput interface {
	pulumi.Input

	ToOSPolicyAssignmentInstanceFilterResponseOutput() OSPolicyAssignmentInstanceFilterResponseOutput
	ToOSPolicyAssignmentInstanceFilterResponseOutputWithContext(context.Context) OSPolicyAssignmentInstanceFilterResponseOutput
}

// Message to represent the filters to select VMs for an assignment
type OSPolicyAssignmentInstanceFilterResponseArgs struct {
	// Target all VMs in the project. If true, no other criteria is permitted.
	All pulumi.BoolInput `pulumi:"all"`
	// List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM. This filter is applied last in the filtering chain and therefore a VM is guaranteed to be excluded if it satisfies one of the below label sets.
	ExclusionLabels OSPolicyAssignmentLabelSetResponseArrayInput `pulumi:"exclusionLabels"`
	// List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
	InclusionLabels OSPolicyAssignmentLabelSetResponseArrayInput `pulumi:"inclusionLabels"`
	// A VM is included if it's OS short name matches with any of the values provided in this list.
	OsShortNames pulumi.StringArrayInput `pulumi:"osShortNames"`
}

func (OSPolicyAssignmentInstanceFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentInstanceFilterResponse)(nil)).Elem()
}

func (i OSPolicyAssignmentInstanceFilterResponseArgs) ToOSPolicyAssignmentInstanceFilterResponseOutput() OSPolicyAssignmentInstanceFilterResponseOutput {
	return i.ToOSPolicyAssignmentInstanceFilterResponseOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentInstanceFilterResponseArgs) ToOSPolicyAssignmentInstanceFilterResponseOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentInstanceFilterResponseOutput)
}

func (i OSPolicyAssignmentInstanceFilterResponseArgs) ToOSPolicyAssignmentInstanceFilterResponsePtrOutput() OSPolicyAssignmentInstanceFilterResponsePtrOutput {
	return i.ToOSPolicyAssignmentInstanceFilterResponsePtrOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentInstanceFilterResponseArgs) ToOSPolicyAssignmentInstanceFilterResponsePtrOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentInstanceFilterResponseOutput).ToOSPolicyAssignmentInstanceFilterResponsePtrOutputWithContext(ctx)
}

// OSPolicyAssignmentInstanceFilterResponsePtrInput is an input type that accepts OSPolicyAssignmentInstanceFilterResponseArgs, OSPolicyAssignmentInstanceFilterResponsePtr and OSPolicyAssignmentInstanceFilterResponsePtrOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentInstanceFilterResponsePtrInput` via:
//
//          OSPolicyAssignmentInstanceFilterResponseArgs{...}
//
//  or:
//
//          nil
type OSPolicyAssignmentInstanceFilterResponsePtrInput interface {
	pulumi.Input

	ToOSPolicyAssignmentInstanceFilterResponsePtrOutput() OSPolicyAssignmentInstanceFilterResponsePtrOutput
	ToOSPolicyAssignmentInstanceFilterResponsePtrOutputWithContext(context.Context) OSPolicyAssignmentInstanceFilterResponsePtrOutput
}

type ospolicyAssignmentInstanceFilterResponsePtrType OSPolicyAssignmentInstanceFilterResponseArgs

func OSPolicyAssignmentInstanceFilterResponsePtr(v *OSPolicyAssignmentInstanceFilterResponseArgs) OSPolicyAssignmentInstanceFilterResponsePtrInput {
	return (*ospolicyAssignmentInstanceFilterResponsePtrType)(v)
}

func (*ospolicyAssignmentInstanceFilterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyAssignmentInstanceFilterResponse)(nil)).Elem()
}

func (i *ospolicyAssignmentInstanceFilterResponsePtrType) ToOSPolicyAssignmentInstanceFilterResponsePtrOutput() OSPolicyAssignmentInstanceFilterResponsePtrOutput {
	return i.ToOSPolicyAssignmentInstanceFilterResponsePtrOutputWithContext(context.Background())
}

func (i *ospolicyAssignmentInstanceFilterResponsePtrType) ToOSPolicyAssignmentInstanceFilterResponsePtrOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentInstanceFilterResponsePtrOutput)
}

// Message to represent the filters to select VMs for an assignment
type OSPolicyAssignmentInstanceFilterResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentInstanceFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentInstanceFilterResponse)(nil)).Elem()
}

func (o OSPolicyAssignmentInstanceFilterResponseOutput) ToOSPolicyAssignmentInstanceFilterResponseOutput() OSPolicyAssignmentInstanceFilterResponseOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterResponseOutput) ToOSPolicyAssignmentInstanceFilterResponseOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterResponseOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterResponseOutput) ToOSPolicyAssignmentInstanceFilterResponsePtrOutput() OSPolicyAssignmentInstanceFilterResponsePtrOutput {
	return o.ToOSPolicyAssignmentInstanceFilterResponsePtrOutputWithContext(context.Background())
}

func (o OSPolicyAssignmentInstanceFilterResponseOutput) ToOSPolicyAssignmentInstanceFilterResponsePtrOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterResponsePtrOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilterResponse) *OSPolicyAssignmentInstanceFilterResponse {
		return &v
	}).(OSPolicyAssignmentInstanceFilterResponsePtrOutput)
}

// Target all VMs in the project. If true, no other criteria is permitted.
func (o OSPolicyAssignmentInstanceFilterResponseOutput) All() pulumi.BoolOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilterResponse) bool { return v.All }).(pulumi.BoolOutput)
}

// List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM. This filter is applied last in the filtering chain and therefore a VM is guaranteed to be excluded if it satisfies one of the below label sets.
func (o OSPolicyAssignmentInstanceFilterResponseOutput) ExclusionLabels() OSPolicyAssignmentLabelSetResponseArrayOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilterResponse) []OSPolicyAssignmentLabelSetResponse {
		return v.ExclusionLabels
	}).(OSPolicyAssignmentLabelSetResponseArrayOutput)
}

// List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
func (o OSPolicyAssignmentInstanceFilterResponseOutput) InclusionLabels() OSPolicyAssignmentLabelSetResponseArrayOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilterResponse) []OSPolicyAssignmentLabelSetResponse {
		return v.InclusionLabels
	}).(OSPolicyAssignmentLabelSetResponseArrayOutput)
}

// A VM is included if it's OS short name matches with any of the values provided in this list.
func (o OSPolicyAssignmentInstanceFilterResponseOutput) OsShortNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilterResponse) []string { return v.OsShortNames }).(pulumi.StringArrayOutput)
}

type OSPolicyAssignmentInstanceFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentInstanceFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyAssignmentInstanceFilterResponse)(nil)).Elem()
}

func (o OSPolicyAssignmentInstanceFilterResponsePtrOutput) ToOSPolicyAssignmentInstanceFilterResponsePtrOutput() OSPolicyAssignmentInstanceFilterResponsePtrOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterResponsePtrOutput) ToOSPolicyAssignmentInstanceFilterResponsePtrOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterResponsePtrOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterResponsePtrOutput) Elem() OSPolicyAssignmentInstanceFilterResponseOutput {
	return o.ApplyT(func(v *OSPolicyAssignmentInstanceFilterResponse) OSPolicyAssignmentInstanceFilterResponse { return *v }).(OSPolicyAssignmentInstanceFilterResponseOutput)
}

// Target all VMs in the project. If true, no other criteria is permitted.
func (o OSPolicyAssignmentInstanceFilterResponsePtrOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSPolicyAssignmentInstanceFilterResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.All
	}).(pulumi.BoolPtrOutput)
}

// List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM. This filter is applied last in the filtering chain and therefore a VM is guaranteed to be excluded if it satisfies one of the below label sets.
func (o OSPolicyAssignmentInstanceFilterResponsePtrOutput) ExclusionLabels() OSPolicyAssignmentLabelSetResponseArrayOutput {
	return o.ApplyT(func(v *OSPolicyAssignmentInstanceFilterResponse) []OSPolicyAssignmentLabelSetResponse {
		if v == nil {
			return nil
		}
		return v.ExclusionLabels
	}).(OSPolicyAssignmentLabelSetResponseArrayOutput)
}

// List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
func (o OSPolicyAssignmentInstanceFilterResponsePtrOutput) InclusionLabels() OSPolicyAssignmentLabelSetResponseArrayOutput {
	return o.ApplyT(func(v *OSPolicyAssignmentInstanceFilterResponse) []OSPolicyAssignmentLabelSetResponse {
		if v == nil {
			return nil
		}
		return v.InclusionLabels
	}).(OSPolicyAssignmentLabelSetResponseArrayOutput)
}

// A VM is included if it's OS short name matches with any of the values provided in this list.
func (o OSPolicyAssignmentInstanceFilterResponsePtrOutput) OsShortNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OSPolicyAssignmentInstanceFilterResponse) []string {
		if v == nil {
			return nil
		}
		return v.OsShortNames
	}).(pulumi.StringArrayOutput)
}

// Message representing label set. * A label is a key value pair set for a VM. * A LabelSet is a set of labels. * Labels within a LabelSet are ANDed. In other words, a LabelSet is applicable for a VM only if it matches all the labels in the LabelSet. * Example: A LabelSet with 2 labels: `env=prod` and `type=webserver` will only be applicable for those VMs with both labels present.
type OSPolicyAssignmentLabelSet struct {
	// Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
	Labels map[string]string `pulumi:"labels"`
}

// OSPolicyAssignmentLabelSetInput is an input type that accepts OSPolicyAssignmentLabelSetArgs and OSPolicyAssignmentLabelSetOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentLabelSetInput` via:
//
//          OSPolicyAssignmentLabelSetArgs{...}
type OSPolicyAssignmentLabelSetInput interface {
	pulumi.Input

	ToOSPolicyAssignmentLabelSetOutput() OSPolicyAssignmentLabelSetOutput
	ToOSPolicyAssignmentLabelSetOutputWithContext(context.Context) OSPolicyAssignmentLabelSetOutput
}

// Message representing label set. * A label is a key value pair set for a VM. * A LabelSet is a set of labels. * Labels within a LabelSet are ANDed. In other words, a LabelSet is applicable for a VM only if it matches all the labels in the LabelSet. * Example: A LabelSet with 2 labels: `env=prod` and `type=webserver` will only be applicable for those VMs with both labels present.
type OSPolicyAssignmentLabelSetArgs struct {
	// Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (OSPolicyAssignmentLabelSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentLabelSet)(nil)).Elem()
}

func (i OSPolicyAssignmentLabelSetArgs) ToOSPolicyAssignmentLabelSetOutput() OSPolicyAssignmentLabelSetOutput {
	return i.ToOSPolicyAssignmentLabelSetOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentLabelSetArgs) ToOSPolicyAssignmentLabelSetOutputWithContext(ctx context.Context) OSPolicyAssignmentLabelSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentLabelSetOutput)
}

// OSPolicyAssignmentLabelSetArrayInput is an input type that accepts OSPolicyAssignmentLabelSetArray and OSPolicyAssignmentLabelSetArrayOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentLabelSetArrayInput` via:
//
//          OSPolicyAssignmentLabelSetArray{ OSPolicyAssignmentLabelSetArgs{...} }
type OSPolicyAssignmentLabelSetArrayInput interface {
	pulumi.Input

	ToOSPolicyAssignmentLabelSetArrayOutput() OSPolicyAssignmentLabelSetArrayOutput
	ToOSPolicyAssignmentLabelSetArrayOutputWithContext(context.Context) OSPolicyAssignmentLabelSetArrayOutput
}

type OSPolicyAssignmentLabelSetArray []OSPolicyAssignmentLabelSetInput

func (OSPolicyAssignmentLabelSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyAssignmentLabelSet)(nil)).Elem()
}

func (i OSPolicyAssignmentLabelSetArray) ToOSPolicyAssignmentLabelSetArrayOutput() OSPolicyAssignmentLabelSetArrayOutput {
	return i.ToOSPolicyAssignmentLabelSetArrayOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentLabelSetArray) ToOSPolicyAssignmentLabelSetArrayOutputWithContext(ctx context.Context) OSPolicyAssignmentLabelSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentLabelSetArrayOutput)
}

// Message representing label set. * A label is a key value pair set for a VM. * A LabelSet is a set of labels. * Labels within a LabelSet are ANDed. In other words, a LabelSet is applicable for a VM only if it matches all the labels in the LabelSet. * Example: A LabelSet with 2 labels: `env=prod` and `type=webserver` will only be applicable for those VMs with both labels present.
type OSPolicyAssignmentLabelSetOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentLabelSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentLabelSet)(nil)).Elem()
}

func (o OSPolicyAssignmentLabelSetOutput) ToOSPolicyAssignmentLabelSetOutput() OSPolicyAssignmentLabelSetOutput {
	return o
}

func (o OSPolicyAssignmentLabelSetOutput) ToOSPolicyAssignmentLabelSetOutputWithContext(ctx context.Context) OSPolicyAssignmentLabelSetOutput {
	return o
}

// Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
func (o OSPolicyAssignmentLabelSetOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v OSPolicyAssignmentLabelSet) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type OSPolicyAssignmentLabelSetArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentLabelSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyAssignmentLabelSet)(nil)).Elem()
}

func (o OSPolicyAssignmentLabelSetArrayOutput) ToOSPolicyAssignmentLabelSetArrayOutput() OSPolicyAssignmentLabelSetArrayOutput {
	return o
}

func (o OSPolicyAssignmentLabelSetArrayOutput) ToOSPolicyAssignmentLabelSetArrayOutputWithContext(ctx context.Context) OSPolicyAssignmentLabelSetArrayOutput {
	return o
}

func (o OSPolicyAssignmentLabelSetArrayOutput) Index(i pulumi.IntInput) OSPolicyAssignmentLabelSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyAssignmentLabelSet {
		return vs[0].([]OSPolicyAssignmentLabelSet)[vs[1].(int)]
	}).(OSPolicyAssignmentLabelSetOutput)
}

// Message representing label set. * A label is a key value pair set for a VM. * A LabelSet is a set of labels. * Labels within a LabelSet are ANDed. In other words, a LabelSet is applicable for a VM only if it matches all the labels in the LabelSet. * Example: A LabelSet with 2 labels: `env=prod` and `type=webserver` will only be applicable for those VMs with both labels present.
type OSPolicyAssignmentLabelSetResponse struct {
	// Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
	Labels map[string]string `pulumi:"labels"`
}

// OSPolicyAssignmentLabelSetResponseInput is an input type that accepts OSPolicyAssignmentLabelSetResponseArgs and OSPolicyAssignmentLabelSetResponseOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentLabelSetResponseInput` via:
//
//          OSPolicyAssignmentLabelSetResponseArgs{...}
type OSPolicyAssignmentLabelSetResponseInput interface {
	pulumi.Input

	ToOSPolicyAssignmentLabelSetResponseOutput() OSPolicyAssignmentLabelSetResponseOutput
	ToOSPolicyAssignmentLabelSetResponseOutputWithContext(context.Context) OSPolicyAssignmentLabelSetResponseOutput
}

// Message representing label set. * A label is a key value pair set for a VM. * A LabelSet is a set of labels. * Labels within a LabelSet are ANDed. In other words, a LabelSet is applicable for a VM only if it matches all the labels in the LabelSet. * Example: A LabelSet with 2 labels: `env=prod` and `type=webserver` will only be applicable for those VMs with both labels present.
type OSPolicyAssignmentLabelSetResponseArgs struct {
	// Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (OSPolicyAssignmentLabelSetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentLabelSetResponse)(nil)).Elem()
}

func (i OSPolicyAssignmentLabelSetResponseArgs) ToOSPolicyAssignmentLabelSetResponseOutput() OSPolicyAssignmentLabelSetResponseOutput {
	return i.ToOSPolicyAssignmentLabelSetResponseOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentLabelSetResponseArgs) ToOSPolicyAssignmentLabelSetResponseOutputWithContext(ctx context.Context) OSPolicyAssignmentLabelSetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentLabelSetResponseOutput)
}

// OSPolicyAssignmentLabelSetResponseArrayInput is an input type that accepts OSPolicyAssignmentLabelSetResponseArray and OSPolicyAssignmentLabelSetResponseArrayOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentLabelSetResponseArrayInput` via:
//
//          OSPolicyAssignmentLabelSetResponseArray{ OSPolicyAssignmentLabelSetResponseArgs{...} }
type OSPolicyAssignmentLabelSetResponseArrayInput interface {
	pulumi.Input

	ToOSPolicyAssignmentLabelSetResponseArrayOutput() OSPolicyAssignmentLabelSetResponseArrayOutput
	ToOSPolicyAssignmentLabelSetResponseArrayOutputWithContext(context.Context) OSPolicyAssignmentLabelSetResponseArrayOutput
}

type OSPolicyAssignmentLabelSetResponseArray []OSPolicyAssignmentLabelSetResponseInput

func (OSPolicyAssignmentLabelSetResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyAssignmentLabelSetResponse)(nil)).Elem()
}

func (i OSPolicyAssignmentLabelSetResponseArray) ToOSPolicyAssignmentLabelSetResponseArrayOutput() OSPolicyAssignmentLabelSetResponseArrayOutput {
	return i.ToOSPolicyAssignmentLabelSetResponseArrayOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentLabelSetResponseArray) ToOSPolicyAssignmentLabelSetResponseArrayOutputWithContext(ctx context.Context) OSPolicyAssignmentLabelSetResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentLabelSetResponseArrayOutput)
}

// Message representing label set. * A label is a key value pair set for a VM. * A LabelSet is a set of labels. * Labels within a LabelSet are ANDed. In other words, a LabelSet is applicable for a VM only if it matches all the labels in the LabelSet. * Example: A LabelSet with 2 labels: `env=prod` and `type=webserver` will only be applicable for those VMs with both labels present.
type OSPolicyAssignmentLabelSetResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentLabelSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentLabelSetResponse)(nil)).Elem()
}

func (o OSPolicyAssignmentLabelSetResponseOutput) ToOSPolicyAssignmentLabelSetResponseOutput() OSPolicyAssignmentLabelSetResponseOutput {
	return o
}

func (o OSPolicyAssignmentLabelSetResponseOutput) ToOSPolicyAssignmentLabelSetResponseOutputWithContext(ctx context.Context) OSPolicyAssignmentLabelSetResponseOutput {
	return o
}

// Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
func (o OSPolicyAssignmentLabelSetResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v OSPolicyAssignmentLabelSetResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type OSPolicyAssignmentLabelSetResponseArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentLabelSetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyAssignmentLabelSetResponse)(nil)).Elem()
}

func (o OSPolicyAssignmentLabelSetResponseArrayOutput) ToOSPolicyAssignmentLabelSetResponseArrayOutput() OSPolicyAssignmentLabelSetResponseArrayOutput {
	return o
}

func (o OSPolicyAssignmentLabelSetResponseArrayOutput) ToOSPolicyAssignmentLabelSetResponseArrayOutputWithContext(ctx context.Context) OSPolicyAssignmentLabelSetResponseArrayOutput {
	return o
}

func (o OSPolicyAssignmentLabelSetResponseArrayOutput) Index(i pulumi.IntInput) OSPolicyAssignmentLabelSetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyAssignmentLabelSetResponse {
		return vs[0].([]OSPolicyAssignmentLabelSetResponse)[vs[1].(int)]
	}).(OSPolicyAssignmentLabelSetResponseOutput)
}

// Message to configure the rollout at the zonal level for the OS policy assignment.
type OSPolicyAssignmentRollout struct {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment.
	DisruptionBudget FixedOrPercent `pulumi:"disruptionBudget"`
	// This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.
	MinWaitDuration string `pulumi:"minWaitDuration"`
}

// OSPolicyAssignmentRolloutInput is an input type that accepts OSPolicyAssignmentRolloutArgs and OSPolicyAssignmentRolloutOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentRolloutInput` via:
//
//          OSPolicyAssignmentRolloutArgs{...}
type OSPolicyAssignmentRolloutInput interface {
	pulumi.Input

	ToOSPolicyAssignmentRolloutOutput() OSPolicyAssignmentRolloutOutput
	ToOSPolicyAssignmentRolloutOutputWithContext(context.Context) OSPolicyAssignmentRolloutOutput
}

// Message to configure the rollout at the zonal level for the OS policy assignment.
type OSPolicyAssignmentRolloutArgs struct {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment.
	DisruptionBudget FixedOrPercentInput `pulumi:"disruptionBudget"`
	// This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.
	MinWaitDuration pulumi.StringInput `pulumi:"minWaitDuration"`
}

func (OSPolicyAssignmentRolloutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentRollout)(nil)).Elem()
}

func (i OSPolicyAssignmentRolloutArgs) ToOSPolicyAssignmentRolloutOutput() OSPolicyAssignmentRolloutOutput {
	return i.ToOSPolicyAssignmentRolloutOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentRolloutArgs) ToOSPolicyAssignmentRolloutOutputWithContext(ctx context.Context) OSPolicyAssignmentRolloutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentRolloutOutput)
}

func (i OSPolicyAssignmentRolloutArgs) ToOSPolicyAssignmentRolloutPtrOutput() OSPolicyAssignmentRolloutPtrOutput {
	return i.ToOSPolicyAssignmentRolloutPtrOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentRolloutArgs) ToOSPolicyAssignmentRolloutPtrOutputWithContext(ctx context.Context) OSPolicyAssignmentRolloutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentRolloutOutput).ToOSPolicyAssignmentRolloutPtrOutputWithContext(ctx)
}

// OSPolicyAssignmentRolloutPtrInput is an input type that accepts OSPolicyAssignmentRolloutArgs, OSPolicyAssignmentRolloutPtr and OSPolicyAssignmentRolloutPtrOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentRolloutPtrInput` via:
//
//          OSPolicyAssignmentRolloutArgs{...}
//
//  or:
//
//          nil
type OSPolicyAssignmentRolloutPtrInput interface {
	pulumi.Input

	ToOSPolicyAssignmentRolloutPtrOutput() OSPolicyAssignmentRolloutPtrOutput
	ToOSPolicyAssignmentRolloutPtrOutputWithContext(context.Context) OSPolicyAssignmentRolloutPtrOutput
}

type ospolicyAssignmentRolloutPtrType OSPolicyAssignmentRolloutArgs

func OSPolicyAssignmentRolloutPtr(v *OSPolicyAssignmentRolloutArgs) OSPolicyAssignmentRolloutPtrInput {
	return (*ospolicyAssignmentRolloutPtrType)(v)
}

func (*ospolicyAssignmentRolloutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyAssignmentRollout)(nil)).Elem()
}

func (i *ospolicyAssignmentRolloutPtrType) ToOSPolicyAssignmentRolloutPtrOutput() OSPolicyAssignmentRolloutPtrOutput {
	return i.ToOSPolicyAssignmentRolloutPtrOutputWithContext(context.Background())
}

func (i *ospolicyAssignmentRolloutPtrType) ToOSPolicyAssignmentRolloutPtrOutputWithContext(ctx context.Context) OSPolicyAssignmentRolloutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentRolloutPtrOutput)
}

// Message to configure the rollout at the zonal level for the OS policy assignment.
type OSPolicyAssignmentRolloutOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentRolloutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentRollout)(nil)).Elem()
}

func (o OSPolicyAssignmentRolloutOutput) ToOSPolicyAssignmentRolloutOutput() OSPolicyAssignmentRolloutOutput {
	return o
}

func (o OSPolicyAssignmentRolloutOutput) ToOSPolicyAssignmentRolloutOutputWithContext(ctx context.Context) OSPolicyAssignmentRolloutOutput {
	return o
}

func (o OSPolicyAssignmentRolloutOutput) ToOSPolicyAssignmentRolloutPtrOutput() OSPolicyAssignmentRolloutPtrOutput {
	return o.ToOSPolicyAssignmentRolloutPtrOutputWithContext(context.Background())
}

func (o OSPolicyAssignmentRolloutOutput) ToOSPolicyAssignmentRolloutPtrOutputWithContext(ctx context.Context) OSPolicyAssignmentRolloutPtrOutput {
	return o.ApplyT(func(v OSPolicyAssignmentRollout) *OSPolicyAssignmentRollout {
		return &v
	}).(OSPolicyAssignmentRolloutPtrOutput)
}

// The maximum number (or percentage) of VMs per zone to disrupt at any given moment.
func (o OSPolicyAssignmentRolloutOutput) DisruptionBudget() FixedOrPercentOutput {
	return o.ApplyT(func(v OSPolicyAssignmentRollout) FixedOrPercent { return v.DisruptionBudget }).(FixedOrPercentOutput)
}

// This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.
func (o OSPolicyAssignmentRolloutOutput) MinWaitDuration() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyAssignmentRollout) string { return v.MinWaitDuration }).(pulumi.StringOutput)
}

type OSPolicyAssignmentRolloutPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentRolloutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyAssignmentRollout)(nil)).Elem()
}

func (o OSPolicyAssignmentRolloutPtrOutput) ToOSPolicyAssignmentRolloutPtrOutput() OSPolicyAssignmentRolloutPtrOutput {
	return o
}

func (o OSPolicyAssignmentRolloutPtrOutput) ToOSPolicyAssignmentRolloutPtrOutputWithContext(ctx context.Context) OSPolicyAssignmentRolloutPtrOutput {
	return o
}

func (o OSPolicyAssignmentRolloutPtrOutput) Elem() OSPolicyAssignmentRolloutOutput {
	return o.ApplyT(func(v *OSPolicyAssignmentRollout) OSPolicyAssignmentRollout { return *v }).(OSPolicyAssignmentRolloutOutput)
}

// The maximum number (or percentage) of VMs per zone to disrupt at any given moment.
func (o OSPolicyAssignmentRolloutPtrOutput) DisruptionBudget() FixedOrPercentPtrOutput {
	return o.ApplyT(func(v *OSPolicyAssignmentRollout) *FixedOrPercent {
		if v == nil {
			return nil
		}
		return &v.DisruptionBudget
	}).(FixedOrPercentPtrOutput)
}

// This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.
func (o OSPolicyAssignmentRolloutPtrOutput) MinWaitDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyAssignmentRollout) *string {
		if v == nil {
			return nil
		}
		return &v.MinWaitDuration
	}).(pulumi.StringPtrOutput)
}

// Message to configure the rollout at the zonal level for the OS policy assignment.
type OSPolicyAssignmentRolloutResponse struct {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment.
	DisruptionBudget FixedOrPercentResponse `pulumi:"disruptionBudget"`
	// This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.
	MinWaitDuration string `pulumi:"minWaitDuration"`
}

// OSPolicyAssignmentRolloutResponseInput is an input type that accepts OSPolicyAssignmentRolloutResponseArgs and OSPolicyAssignmentRolloutResponseOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentRolloutResponseInput` via:
//
//          OSPolicyAssignmentRolloutResponseArgs{...}
type OSPolicyAssignmentRolloutResponseInput interface {
	pulumi.Input

	ToOSPolicyAssignmentRolloutResponseOutput() OSPolicyAssignmentRolloutResponseOutput
	ToOSPolicyAssignmentRolloutResponseOutputWithContext(context.Context) OSPolicyAssignmentRolloutResponseOutput
}

// Message to configure the rollout at the zonal level for the OS policy assignment.
type OSPolicyAssignmentRolloutResponseArgs struct {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment.
	DisruptionBudget FixedOrPercentResponseInput `pulumi:"disruptionBudget"`
	// This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.
	MinWaitDuration pulumi.StringInput `pulumi:"minWaitDuration"`
}

func (OSPolicyAssignmentRolloutResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentRolloutResponse)(nil)).Elem()
}

func (i OSPolicyAssignmentRolloutResponseArgs) ToOSPolicyAssignmentRolloutResponseOutput() OSPolicyAssignmentRolloutResponseOutput {
	return i.ToOSPolicyAssignmentRolloutResponseOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentRolloutResponseArgs) ToOSPolicyAssignmentRolloutResponseOutputWithContext(ctx context.Context) OSPolicyAssignmentRolloutResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentRolloutResponseOutput)
}

func (i OSPolicyAssignmentRolloutResponseArgs) ToOSPolicyAssignmentRolloutResponsePtrOutput() OSPolicyAssignmentRolloutResponsePtrOutput {
	return i.ToOSPolicyAssignmentRolloutResponsePtrOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentRolloutResponseArgs) ToOSPolicyAssignmentRolloutResponsePtrOutputWithContext(ctx context.Context) OSPolicyAssignmentRolloutResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentRolloutResponseOutput).ToOSPolicyAssignmentRolloutResponsePtrOutputWithContext(ctx)
}

// OSPolicyAssignmentRolloutResponsePtrInput is an input type that accepts OSPolicyAssignmentRolloutResponseArgs, OSPolicyAssignmentRolloutResponsePtr and OSPolicyAssignmentRolloutResponsePtrOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentRolloutResponsePtrInput` via:
//
//          OSPolicyAssignmentRolloutResponseArgs{...}
//
//  or:
//
//          nil
type OSPolicyAssignmentRolloutResponsePtrInput interface {
	pulumi.Input

	ToOSPolicyAssignmentRolloutResponsePtrOutput() OSPolicyAssignmentRolloutResponsePtrOutput
	ToOSPolicyAssignmentRolloutResponsePtrOutputWithContext(context.Context) OSPolicyAssignmentRolloutResponsePtrOutput
}

type ospolicyAssignmentRolloutResponsePtrType OSPolicyAssignmentRolloutResponseArgs

func OSPolicyAssignmentRolloutResponsePtr(v *OSPolicyAssignmentRolloutResponseArgs) OSPolicyAssignmentRolloutResponsePtrInput {
	return (*ospolicyAssignmentRolloutResponsePtrType)(v)
}

func (*ospolicyAssignmentRolloutResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyAssignmentRolloutResponse)(nil)).Elem()
}

func (i *ospolicyAssignmentRolloutResponsePtrType) ToOSPolicyAssignmentRolloutResponsePtrOutput() OSPolicyAssignmentRolloutResponsePtrOutput {
	return i.ToOSPolicyAssignmentRolloutResponsePtrOutputWithContext(context.Background())
}

func (i *ospolicyAssignmentRolloutResponsePtrType) ToOSPolicyAssignmentRolloutResponsePtrOutputWithContext(ctx context.Context) OSPolicyAssignmentRolloutResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentRolloutResponsePtrOutput)
}

// Message to configure the rollout at the zonal level for the OS policy assignment.
type OSPolicyAssignmentRolloutResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentRolloutResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentRolloutResponse)(nil)).Elem()
}

func (o OSPolicyAssignmentRolloutResponseOutput) ToOSPolicyAssignmentRolloutResponseOutput() OSPolicyAssignmentRolloutResponseOutput {
	return o
}

func (o OSPolicyAssignmentRolloutResponseOutput) ToOSPolicyAssignmentRolloutResponseOutputWithContext(ctx context.Context) OSPolicyAssignmentRolloutResponseOutput {
	return o
}

func (o OSPolicyAssignmentRolloutResponseOutput) ToOSPolicyAssignmentRolloutResponsePtrOutput() OSPolicyAssignmentRolloutResponsePtrOutput {
	return o.ToOSPolicyAssignmentRolloutResponsePtrOutputWithContext(context.Background())
}

func (o OSPolicyAssignmentRolloutResponseOutput) ToOSPolicyAssignmentRolloutResponsePtrOutputWithContext(ctx context.Context) OSPolicyAssignmentRolloutResponsePtrOutput {
	return o.ApplyT(func(v OSPolicyAssignmentRolloutResponse) *OSPolicyAssignmentRolloutResponse {
		return &v
	}).(OSPolicyAssignmentRolloutResponsePtrOutput)
}

// The maximum number (or percentage) of VMs per zone to disrupt at any given moment.
func (o OSPolicyAssignmentRolloutResponseOutput) DisruptionBudget() FixedOrPercentResponseOutput {
	return o.ApplyT(func(v OSPolicyAssignmentRolloutResponse) FixedOrPercentResponse { return v.DisruptionBudget }).(FixedOrPercentResponseOutput)
}

// This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.
func (o OSPolicyAssignmentRolloutResponseOutput) MinWaitDuration() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyAssignmentRolloutResponse) string { return v.MinWaitDuration }).(pulumi.StringOutput)
}

type OSPolicyAssignmentRolloutResponsePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentRolloutResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyAssignmentRolloutResponse)(nil)).Elem()
}

func (o OSPolicyAssignmentRolloutResponsePtrOutput) ToOSPolicyAssignmentRolloutResponsePtrOutput() OSPolicyAssignmentRolloutResponsePtrOutput {
	return o
}

func (o OSPolicyAssignmentRolloutResponsePtrOutput) ToOSPolicyAssignmentRolloutResponsePtrOutputWithContext(ctx context.Context) OSPolicyAssignmentRolloutResponsePtrOutput {
	return o
}

func (o OSPolicyAssignmentRolloutResponsePtrOutput) Elem() OSPolicyAssignmentRolloutResponseOutput {
	return o.ApplyT(func(v *OSPolicyAssignmentRolloutResponse) OSPolicyAssignmentRolloutResponse { return *v }).(OSPolicyAssignmentRolloutResponseOutput)
}

// The maximum number (or percentage) of VMs per zone to disrupt at any given moment.
func (o OSPolicyAssignmentRolloutResponsePtrOutput) DisruptionBudget() FixedOrPercentResponsePtrOutput {
	return o.ApplyT(func(v *OSPolicyAssignmentRolloutResponse) *FixedOrPercentResponse {
		if v == nil {
			return nil
		}
		return &v.DisruptionBudget
	}).(FixedOrPercentResponsePtrOutput)
}

// This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.
func (o OSPolicyAssignmentRolloutResponsePtrOutput) MinWaitDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyAssignmentRolloutResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MinWaitDuration
	}).(pulumi.StringPtrOutput)
}

// The `OSFilter` is used to specify the OS filtering criteria for the resource group.
type OSPolicyOSFilter struct {
	// This should match OS short name emitted by the OS inventory agent. An empty value matches any OS.
	OsShortName *string `pulumi:"osShortName"`
	// This value should match the version emitted by the OS inventory agent. Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*`
	OsVersion *string `pulumi:"osVersion"`
}

// OSPolicyOSFilterInput is an input type that accepts OSPolicyOSFilterArgs and OSPolicyOSFilterOutput values.
// You can construct a concrete instance of `OSPolicyOSFilterInput` via:
//
//          OSPolicyOSFilterArgs{...}
type OSPolicyOSFilterInput interface {
	pulumi.Input

	ToOSPolicyOSFilterOutput() OSPolicyOSFilterOutput
	ToOSPolicyOSFilterOutputWithContext(context.Context) OSPolicyOSFilterOutput
}

// The `OSFilter` is used to specify the OS filtering criteria for the resource group.
type OSPolicyOSFilterArgs struct {
	// This should match OS short name emitted by the OS inventory agent. An empty value matches any OS.
	OsShortName pulumi.StringPtrInput `pulumi:"osShortName"`
	// This value should match the version emitted by the OS inventory agent. Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*`
	OsVersion pulumi.StringPtrInput `pulumi:"osVersion"`
}

func (OSPolicyOSFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyOSFilter)(nil)).Elem()
}

func (i OSPolicyOSFilterArgs) ToOSPolicyOSFilterOutput() OSPolicyOSFilterOutput {
	return i.ToOSPolicyOSFilterOutputWithContext(context.Background())
}

func (i OSPolicyOSFilterArgs) ToOSPolicyOSFilterOutputWithContext(ctx context.Context) OSPolicyOSFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyOSFilterOutput)
}

func (i OSPolicyOSFilterArgs) ToOSPolicyOSFilterPtrOutput() OSPolicyOSFilterPtrOutput {
	return i.ToOSPolicyOSFilterPtrOutputWithContext(context.Background())
}

func (i OSPolicyOSFilterArgs) ToOSPolicyOSFilterPtrOutputWithContext(ctx context.Context) OSPolicyOSFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyOSFilterOutput).ToOSPolicyOSFilterPtrOutputWithContext(ctx)
}

// OSPolicyOSFilterPtrInput is an input type that accepts OSPolicyOSFilterArgs, OSPolicyOSFilterPtr and OSPolicyOSFilterPtrOutput values.
// You can construct a concrete instance of `OSPolicyOSFilterPtrInput` via:
//
//          OSPolicyOSFilterArgs{...}
//
//  or:
//
//          nil
type OSPolicyOSFilterPtrInput interface {
	pulumi.Input

	ToOSPolicyOSFilterPtrOutput() OSPolicyOSFilterPtrOutput
	ToOSPolicyOSFilterPtrOutputWithContext(context.Context) OSPolicyOSFilterPtrOutput
}

type ospolicyOSFilterPtrType OSPolicyOSFilterArgs

func OSPolicyOSFilterPtr(v *OSPolicyOSFilterArgs) OSPolicyOSFilterPtrInput {
	return (*ospolicyOSFilterPtrType)(v)
}

func (*ospolicyOSFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyOSFilter)(nil)).Elem()
}

func (i *ospolicyOSFilterPtrType) ToOSPolicyOSFilterPtrOutput() OSPolicyOSFilterPtrOutput {
	return i.ToOSPolicyOSFilterPtrOutputWithContext(context.Background())
}

func (i *ospolicyOSFilterPtrType) ToOSPolicyOSFilterPtrOutputWithContext(ctx context.Context) OSPolicyOSFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyOSFilterPtrOutput)
}

// The `OSFilter` is used to specify the OS filtering criteria for the resource group.
type OSPolicyOSFilterOutput struct{ *pulumi.OutputState }

func (OSPolicyOSFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyOSFilter)(nil)).Elem()
}

func (o OSPolicyOSFilterOutput) ToOSPolicyOSFilterOutput() OSPolicyOSFilterOutput {
	return o
}

func (o OSPolicyOSFilterOutput) ToOSPolicyOSFilterOutputWithContext(ctx context.Context) OSPolicyOSFilterOutput {
	return o
}

func (o OSPolicyOSFilterOutput) ToOSPolicyOSFilterPtrOutput() OSPolicyOSFilterPtrOutput {
	return o.ToOSPolicyOSFilterPtrOutputWithContext(context.Background())
}

func (o OSPolicyOSFilterOutput) ToOSPolicyOSFilterPtrOutputWithContext(ctx context.Context) OSPolicyOSFilterPtrOutput {
	return o.ApplyT(func(v OSPolicyOSFilter) *OSPolicyOSFilter {
		return &v
	}).(OSPolicyOSFilterPtrOutput)
}

// This should match OS short name emitted by the OS inventory agent. An empty value matches any OS.
func (o OSPolicyOSFilterOutput) OsShortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyOSFilter) *string { return v.OsShortName }).(pulumi.StringPtrOutput)
}

// This value should match the version emitted by the OS inventory agent. Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*`
func (o OSPolicyOSFilterOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyOSFilter) *string { return v.OsVersion }).(pulumi.StringPtrOutput)
}

type OSPolicyOSFilterPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyOSFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyOSFilter)(nil)).Elem()
}

func (o OSPolicyOSFilterPtrOutput) ToOSPolicyOSFilterPtrOutput() OSPolicyOSFilterPtrOutput {
	return o
}

func (o OSPolicyOSFilterPtrOutput) ToOSPolicyOSFilterPtrOutputWithContext(ctx context.Context) OSPolicyOSFilterPtrOutput {
	return o
}

func (o OSPolicyOSFilterPtrOutput) Elem() OSPolicyOSFilterOutput {
	return o.ApplyT(func(v *OSPolicyOSFilter) OSPolicyOSFilter { return *v }).(OSPolicyOSFilterOutput)
}

// This should match OS short name emitted by the OS inventory agent. An empty value matches any OS.
func (o OSPolicyOSFilterPtrOutput) OsShortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyOSFilter) *string {
		if v == nil {
			return nil
		}
		return v.OsShortName
	}).(pulumi.StringPtrOutput)
}

// This value should match the version emitted by the OS inventory agent. Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*`
func (o OSPolicyOSFilterPtrOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyOSFilter) *string {
		if v == nil {
			return nil
		}
		return v.OsVersion
	}).(pulumi.StringPtrOutput)
}

// The `OSFilter` is used to specify the OS filtering criteria for the resource group.
type OSPolicyOSFilterResponse struct {
	// This should match OS short name emitted by the OS inventory agent. An empty value matches any OS.
	OsShortName string `pulumi:"osShortName"`
	// This value should match the version emitted by the OS inventory agent. Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*`
	OsVersion string `pulumi:"osVersion"`
}

// OSPolicyOSFilterResponseInput is an input type that accepts OSPolicyOSFilterResponseArgs and OSPolicyOSFilterResponseOutput values.
// You can construct a concrete instance of `OSPolicyOSFilterResponseInput` via:
//
//          OSPolicyOSFilterResponseArgs{...}
type OSPolicyOSFilterResponseInput interface {
	pulumi.Input

	ToOSPolicyOSFilterResponseOutput() OSPolicyOSFilterResponseOutput
	ToOSPolicyOSFilterResponseOutputWithContext(context.Context) OSPolicyOSFilterResponseOutput
}

// The `OSFilter` is used to specify the OS filtering criteria for the resource group.
type OSPolicyOSFilterResponseArgs struct {
	// This should match OS short name emitted by the OS inventory agent. An empty value matches any OS.
	OsShortName pulumi.StringInput `pulumi:"osShortName"`
	// This value should match the version emitted by the OS inventory agent. Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*`
	OsVersion pulumi.StringInput `pulumi:"osVersion"`
}

func (OSPolicyOSFilterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyOSFilterResponse)(nil)).Elem()
}

func (i OSPolicyOSFilterResponseArgs) ToOSPolicyOSFilterResponseOutput() OSPolicyOSFilterResponseOutput {
	return i.ToOSPolicyOSFilterResponseOutputWithContext(context.Background())
}

func (i OSPolicyOSFilterResponseArgs) ToOSPolicyOSFilterResponseOutputWithContext(ctx context.Context) OSPolicyOSFilterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyOSFilterResponseOutput)
}

// The `OSFilter` is used to specify the OS filtering criteria for the resource group.
type OSPolicyOSFilterResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyOSFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyOSFilterResponse)(nil)).Elem()
}

func (o OSPolicyOSFilterResponseOutput) ToOSPolicyOSFilterResponseOutput() OSPolicyOSFilterResponseOutput {
	return o
}

func (o OSPolicyOSFilterResponseOutput) ToOSPolicyOSFilterResponseOutputWithContext(ctx context.Context) OSPolicyOSFilterResponseOutput {
	return o
}

// This should match OS short name emitted by the OS inventory agent. An empty value matches any OS.
func (o OSPolicyOSFilterResponseOutput) OsShortName() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyOSFilterResponse) string { return v.OsShortName }).(pulumi.StringOutput)
}

// This value should match the version emitted by the OS inventory agent. Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*`
func (o OSPolicyOSFilterResponseOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyOSFilterResponse) string { return v.OsVersion }).(pulumi.StringOutput)
}

// An OS policy resource is used to define the desired state configuration and provides a specific functionality like installing/removing packages, executing a script etc. The system ensures that resources are always in their desired state by taking necessary actions if they have drifted from their desired state.
type OSPolicyResource struct {
	// Exec resource
	Exec *OSPolicyResourceExecResource `pulumi:"exec"`
	// File resource
	File *OSPolicyResourceFileResource `pulumi:"file"`
	// The id of the resource with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the OS policy.
	Id string `pulumi:"id"`
	// Package resource
	Pkg *OSPolicyResourcePackageResource `pulumi:"pkg"`
	// Package repository resource
	Repository *OSPolicyResourceRepositoryResource `pulumi:"repository"`
}

// OSPolicyResourceInput is an input type that accepts OSPolicyResourceArgs and OSPolicyResourceOutput values.
// You can construct a concrete instance of `OSPolicyResourceInput` via:
//
//          OSPolicyResourceArgs{...}
type OSPolicyResourceInput interface {
	pulumi.Input

	ToOSPolicyResourceOutput() OSPolicyResourceOutput
	ToOSPolicyResourceOutputWithContext(context.Context) OSPolicyResourceOutput
}

// An OS policy resource is used to define the desired state configuration and provides a specific functionality like installing/removing packages, executing a script etc. The system ensures that resources are always in their desired state by taking necessary actions if they have drifted from their desired state.
type OSPolicyResourceArgs struct {
	// Exec resource
	Exec OSPolicyResourceExecResourcePtrInput `pulumi:"exec"`
	// File resource
	File OSPolicyResourceFileResourcePtrInput `pulumi:"file"`
	// The id of the resource with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the OS policy.
	Id pulumi.StringInput `pulumi:"id"`
	// Package resource
	Pkg OSPolicyResourcePackageResourcePtrInput `pulumi:"pkg"`
	// Package repository resource
	Repository OSPolicyResourceRepositoryResourcePtrInput `pulumi:"repository"`
}

func (OSPolicyResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResource)(nil)).Elem()
}

func (i OSPolicyResourceArgs) ToOSPolicyResourceOutput() OSPolicyResourceOutput {
	return i.ToOSPolicyResourceOutputWithContext(context.Background())
}

func (i OSPolicyResourceArgs) ToOSPolicyResourceOutputWithContext(ctx context.Context) OSPolicyResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceOutput)
}

// OSPolicyResourceArrayInput is an input type that accepts OSPolicyResourceArray and OSPolicyResourceArrayOutput values.
// You can construct a concrete instance of `OSPolicyResourceArrayInput` via:
//
//          OSPolicyResourceArray{ OSPolicyResourceArgs{...} }
type OSPolicyResourceArrayInput interface {
	pulumi.Input

	ToOSPolicyResourceArrayOutput() OSPolicyResourceArrayOutput
	ToOSPolicyResourceArrayOutputWithContext(context.Context) OSPolicyResourceArrayOutput
}

type OSPolicyResourceArray []OSPolicyResourceInput

func (OSPolicyResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResource)(nil)).Elem()
}

func (i OSPolicyResourceArray) ToOSPolicyResourceArrayOutput() OSPolicyResourceArrayOutput {
	return i.ToOSPolicyResourceArrayOutputWithContext(context.Background())
}

func (i OSPolicyResourceArray) ToOSPolicyResourceArrayOutputWithContext(ctx context.Context) OSPolicyResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceArrayOutput)
}

// An OS policy resource is used to define the desired state configuration and provides a specific functionality like installing/removing packages, executing a script etc. The system ensures that resources are always in their desired state by taking necessary actions if they have drifted from their desired state.
type OSPolicyResourceOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResource)(nil)).Elem()
}

func (o OSPolicyResourceOutput) ToOSPolicyResourceOutput() OSPolicyResourceOutput {
	return o
}

func (o OSPolicyResourceOutput) ToOSPolicyResourceOutputWithContext(ctx context.Context) OSPolicyResourceOutput {
	return o
}

// Exec resource
func (o OSPolicyResourceOutput) Exec() OSPolicyResourceExecResourcePtrOutput {
	return o.ApplyT(func(v OSPolicyResource) *OSPolicyResourceExecResource { return v.Exec }).(OSPolicyResourceExecResourcePtrOutput)
}

// File resource
func (o OSPolicyResourceOutput) File() OSPolicyResourceFileResourcePtrOutput {
	return o.ApplyT(func(v OSPolicyResource) *OSPolicyResourceFileResource { return v.File }).(OSPolicyResourceFileResourcePtrOutput)
}

// The id of the resource with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the OS policy.
func (o OSPolicyResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResource) string { return v.Id }).(pulumi.StringOutput)
}

// Package resource
func (o OSPolicyResourceOutput) Pkg() OSPolicyResourcePackageResourcePtrOutput {
	return o.ApplyT(func(v OSPolicyResource) *OSPolicyResourcePackageResource { return v.Pkg }).(OSPolicyResourcePackageResourcePtrOutput)
}

// Package repository resource
func (o OSPolicyResourceOutput) Repository() OSPolicyResourceRepositoryResourcePtrOutput {
	return o.ApplyT(func(v OSPolicyResource) *OSPolicyResourceRepositoryResource { return v.Repository }).(OSPolicyResourceRepositoryResourcePtrOutput)
}

type OSPolicyResourceArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResource)(nil)).Elem()
}

func (o OSPolicyResourceArrayOutput) ToOSPolicyResourceArrayOutput() OSPolicyResourceArrayOutput {
	return o
}

func (o OSPolicyResourceArrayOutput) ToOSPolicyResourceArrayOutputWithContext(ctx context.Context) OSPolicyResourceArrayOutput {
	return o
}

func (o OSPolicyResourceArrayOutput) Index(i pulumi.IntInput) OSPolicyResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyResource {
		return vs[0].([]OSPolicyResource)[vs[1].(int)]
	}).(OSPolicyResourceOutput)
}

// A resource that allows executing scripts on the VM. The `ExecResource` has 2 stages: `validate` and `enforce` and both stages accept a script as an argument to execute. When the `ExecResource` is applied by the agent, it first executes the script in the `validate` stage. The `validate` stage can signal that the `ExecResource` is already in the desired state by returning an exit code of `100`. If the `ExecResource` is not in the desired state, it should return an exit code of `101`. Any other exit code returned by this stage is considered an error. If the `ExecResource` is not in the desired state based on the exit code from the `validate` stage, the agent proceeds to execute the script from the `enforce` stage. If the `ExecResource` is already in the desired state, the `enforce` stage will not be run. Similar to `validate` stage, the `enforce` stage should return an exit code of `100` to indicate that the resource in now in its desired state. Any other exit code is considered an error. NOTE: An exit code of `100` was chosen over `0` (and `101` vs `1`) to have an explicit indicator of `in desired state`, `not in desired state` and errors. Because, for example, Powershell will always return an exit code of `0` unless an `exit` statement is provided in the script. So, for reasons of consistency and being explicit, exit codes `100` and `101` were chosen.
type OSPolicyResourceExecResource struct {
	// What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce.
	Enforce *OSPolicyResourceExecResourceExec `pulumi:"enforce"`
	// What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate.
	Validate OSPolicyResourceExecResourceExec `pulumi:"validate"`
}

// OSPolicyResourceExecResourceInput is an input type that accepts OSPolicyResourceExecResourceArgs and OSPolicyResourceExecResourceOutput values.
// You can construct a concrete instance of `OSPolicyResourceExecResourceInput` via:
//
//          OSPolicyResourceExecResourceArgs{...}
type OSPolicyResourceExecResourceInput interface {
	pulumi.Input

	ToOSPolicyResourceExecResourceOutput() OSPolicyResourceExecResourceOutput
	ToOSPolicyResourceExecResourceOutputWithContext(context.Context) OSPolicyResourceExecResourceOutput
}

// A resource that allows executing scripts on the VM. The `ExecResource` has 2 stages: `validate` and `enforce` and both stages accept a script as an argument to execute. When the `ExecResource` is applied by the agent, it first executes the script in the `validate` stage. The `validate` stage can signal that the `ExecResource` is already in the desired state by returning an exit code of `100`. If the `ExecResource` is not in the desired state, it should return an exit code of `101`. Any other exit code returned by this stage is considered an error. If the `ExecResource` is not in the desired state based on the exit code from the `validate` stage, the agent proceeds to execute the script from the `enforce` stage. If the `ExecResource` is already in the desired state, the `enforce` stage will not be run. Similar to `validate` stage, the `enforce` stage should return an exit code of `100` to indicate that the resource in now in its desired state. Any other exit code is considered an error. NOTE: An exit code of `100` was chosen over `0` (and `101` vs `1`) to have an explicit indicator of `in desired state`, `not in desired state` and errors. Because, for example, Powershell will always return an exit code of `0` unless an `exit` statement is provided in the script. So, for reasons of consistency and being explicit, exit codes `100` and `101` were chosen.
type OSPolicyResourceExecResourceArgs struct {
	// What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce.
	Enforce OSPolicyResourceExecResourceExecPtrInput `pulumi:"enforce"`
	// What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate.
	Validate OSPolicyResourceExecResourceExecInput `pulumi:"validate"`
}

func (OSPolicyResourceExecResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceExecResource)(nil)).Elem()
}

func (i OSPolicyResourceExecResourceArgs) ToOSPolicyResourceExecResourceOutput() OSPolicyResourceExecResourceOutput {
	return i.ToOSPolicyResourceExecResourceOutputWithContext(context.Background())
}

func (i OSPolicyResourceExecResourceArgs) ToOSPolicyResourceExecResourceOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceExecResourceOutput)
}

func (i OSPolicyResourceExecResourceArgs) ToOSPolicyResourceExecResourcePtrOutput() OSPolicyResourceExecResourcePtrOutput {
	return i.ToOSPolicyResourceExecResourcePtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceExecResourceArgs) ToOSPolicyResourceExecResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceExecResourceOutput).ToOSPolicyResourceExecResourcePtrOutputWithContext(ctx)
}

// OSPolicyResourceExecResourcePtrInput is an input type that accepts OSPolicyResourceExecResourceArgs, OSPolicyResourceExecResourcePtr and OSPolicyResourceExecResourcePtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceExecResourcePtrInput` via:
//
//          OSPolicyResourceExecResourceArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourceExecResourcePtrInput interface {
	pulumi.Input

	ToOSPolicyResourceExecResourcePtrOutput() OSPolicyResourceExecResourcePtrOutput
	ToOSPolicyResourceExecResourcePtrOutputWithContext(context.Context) OSPolicyResourceExecResourcePtrOutput
}

type ospolicyResourceExecResourcePtrType OSPolicyResourceExecResourceArgs

func OSPolicyResourceExecResourcePtr(v *OSPolicyResourceExecResourceArgs) OSPolicyResourceExecResourcePtrInput {
	return (*ospolicyResourceExecResourcePtrType)(v)
}

func (*ospolicyResourceExecResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceExecResource)(nil)).Elem()
}

func (i *ospolicyResourceExecResourcePtrType) ToOSPolicyResourceExecResourcePtrOutput() OSPolicyResourceExecResourcePtrOutput {
	return i.ToOSPolicyResourceExecResourcePtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceExecResourcePtrType) ToOSPolicyResourceExecResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceExecResourcePtrOutput)
}

// A resource that allows executing scripts on the VM. The `ExecResource` has 2 stages: `validate` and `enforce` and both stages accept a script as an argument to execute. When the `ExecResource` is applied by the agent, it first executes the script in the `validate` stage. The `validate` stage can signal that the `ExecResource` is already in the desired state by returning an exit code of `100`. If the `ExecResource` is not in the desired state, it should return an exit code of `101`. Any other exit code returned by this stage is considered an error. If the `ExecResource` is not in the desired state based on the exit code from the `validate` stage, the agent proceeds to execute the script from the `enforce` stage. If the `ExecResource` is already in the desired state, the `enforce` stage will not be run. Similar to `validate` stage, the `enforce` stage should return an exit code of `100` to indicate that the resource in now in its desired state. Any other exit code is considered an error. NOTE: An exit code of `100` was chosen over `0` (and `101` vs `1`) to have an explicit indicator of `in desired state`, `not in desired state` and errors. Because, for example, Powershell will always return an exit code of `0` unless an `exit` statement is provided in the script. So, for reasons of consistency and being explicit, exit codes `100` and `101` were chosen.
type OSPolicyResourceExecResourceOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceExecResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceExecResource)(nil)).Elem()
}

func (o OSPolicyResourceExecResourceOutput) ToOSPolicyResourceExecResourceOutput() OSPolicyResourceExecResourceOutput {
	return o
}

func (o OSPolicyResourceExecResourceOutput) ToOSPolicyResourceExecResourceOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceOutput {
	return o
}

func (o OSPolicyResourceExecResourceOutput) ToOSPolicyResourceExecResourcePtrOutput() OSPolicyResourceExecResourcePtrOutput {
	return o.ToOSPolicyResourceExecResourcePtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceExecResourceOutput) ToOSPolicyResourceExecResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourcePtrOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResource) *OSPolicyResourceExecResource {
		return &v
	}).(OSPolicyResourceExecResourcePtrOutput)
}

// What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce.
func (o OSPolicyResourceExecResourceOutput) Enforce() OSPolicyResourceExecResourceExecPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResource) *OSPolicyResourceExecResourceExec { return v.Enforce }).(OSPolicyResourceExecResourceExecPtrOutput)
}

// What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate.
func (o OSPolicyResourceExecResourceOutput) Validate() OSPolicyResourceExecResourceExecOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResource) OSPolicyResourceExecResourceExec { return v.Validate }).(OSPolicyResourceExecResourceExecOutput)
}

type OSPolicyResourceExecResourcePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceExecResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceExecResource)(nil)).Elem()
}

func (o OSPolicyResourceExecResourcePtrOutput) ToOSPolicyResourceExecResourcePtrOutput() OSPolicyResourceExecResourcePtrOutput {
	return o
}

func (o OSPolicyResourceExecResourcePtrOutput) ToOSPolicyResourceExecResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourcePtrOutput {
	return o
}

func (o OSPolicyResourceExecResourcePtrOutput) Elem() OSPolicyResourceExecResourceOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResource) OSPolicyResourceExecResource { return *v }).(OSPolicyResourceExecResourceOutput)
}

// What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce.
func (o OSPolicyResourceExecResourcePtrOutput) Enforce() OSPolicyResourceExecResourceExecPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResource) *OSPolicyResourceExecResourceExec {
		if v == nil {
			return nil
		}
		return v.Enforce
	}).(OSPolicyResourceExecResourceExecPtrOutput)
}

// What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate.
func (o OSPolicyResourceExecResourcePtrOutput) Validate() OSPolicyResourceExecResourceExecPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResource) *OSPolicyResourceExecResourceExec {
		if v == nil {
			return nil
		}
		return &v.Validate
	}).(OSPolicyResourceExecResourceExecPtrOutput)
}

// A file or script to execute.
type OSPolicyResourceExecResourceExec struct {
	// Optional arguments to pass to the source during execution.
	Args []string `pulumi:"args"`
	// A remote or local file.
	File *OSPolicyResourceFile `pulumi:"file"`
	// The script interpreter to use.
	Interpreter string `pulumi:"interpreter"`
	// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
	OutputFilePath *string `pulumi:"outputFilePath"`
	// An inline script. The size of the script is limited to 1024 characters.
	Script *string `pulumi:"script"`
}

// OSPolicyResourceExecResourceExecInput is an input type that accepts OSPolicyResourceExecResourceExecArgs and OSPolicyResourceExecResourceExecOutput values.
// You can construct a concrete instance of `OSPolicyResourceExecResourceExecInput` via:
//
//          OSPolicyResourceExecResourceExecArgs{...}
type OSPolicyResourceExecResourceExecInput interface {
	pulumi.Input

	ToOSPolicyResourceExecResourceExecOutput() OSPolicyResourceExecResourceExecOutput
	ToOSPolicyResourceExecResourceExecOutputWithContext(context.Context) OSPolicyResourceExecResourceExecOutput
}

// A file or script to execute.
type OSPolicyResourceExecResourceExecArgs struct {
	// Optional arguments to pass to the source during execution.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// A remote or local file.
	File OSPolicyResourceFilePtrInput `pulumi:"file"`
	// The script interpreter to use.
	Interpreter OSPolicyResourceExecResourceExecInterpreter `pulumi:"interpreter"`
	// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
	OutputFilePath pulumi.StringPtrInput `pulumi:"outputFilePath"`
	// An inline script. The size of the script is limited to 1024 characters.
	Script pulumi.StringPtrInput `pulumi:"script"`
}

func (OSPolicyResourceExecResourceExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceExecResourceExec)(nil)).Elem()
}

func (i OSPolicyResourceExecResourceExecArgs) ToOSPolicyResourceExecResourceExecOutput() OSPolicyResourceExecResourceExecOutput {
	return i.ToOSPolicyResourceExecResourceExecOutputWithContext(context.Background())
}

func (i OSPolicyResourceExecResourceExecArgs) ToOSPolicyResourceExecResourceExecOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceExecResourceExecOutput)
}

func (i OSPolicyResourceExecResourceExecArgs) ToOSPolicyResourceExecResourceExecPtrOutput() OSPolicyResourceExecResourceExecPtrOutput {
	return i.ToOSPolicyResourceExecResourceExecPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceExecResourceExecArgs) ToOSPolicyResourceExecResourceExecPtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceExecResourceExecOutput).ToOSPolicyResourceExecResourceExecPtrOutputWithContext(ctx)
}

// OSPolicyResourceExecResourceExecPtrInput is an input type that accepts OSPolicyResourceExecResourceExecArgs, OSPolicyResourceExecResourceExecPtr and OSPolicyResourceExecResourceExecPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceExecResourceExecPtrInput` via:
//
//          OSPolicyResourceExecResourceExecArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourceExecResourceExecPtrInput interface {
	pulumi.Input

	ToOSPolicyResourceExecResourceExecPtrOutput() OSPolicyResourceExecResourceExecPtrOutput
	ToOSPolicyResourceExecResourceExecPtrOutputWithContext(context.Context) OSPolicyResourceExecResourceExecPtrOutput
}

type ospolicyResourceExecResourceExecPtrType OSPolicyResourceExecResourceExecArgs

func OSPolicyResourceExecResourceExecPtr(v *OSPolicyResourceExecResourceExecArgs) OSPolicyResourceExecResourceExecPtrInput {
	return (*ospolicyResourceExecResourceExecPtrType)(v)
}

func (*ospolicyResourceExecResourceExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceExecResourceExec)(nil)).Elem()
}

func (i *ospolicyResourceExecResourceExecPtrType) ToOSPolicyResourceExecResourceExecPtrOutput() OSPolicyResourceExecResourceExecPtrOutput {
	return i.ToOSPolicyResourceExecResourceExecPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceExecResourceExecPtrType) ToOSPolicyResourceExecResourceExecPtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceExecResourceExecPtrOutput)
}

// A file or script to execute.
type OSPolicyResourceExecResourceExecOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceExecResourceExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceExecResourceExec)(nil)).Elem()
}

func (o OSPolicyResourceExecResourceExecOutput) ToOSPolicyResourceExecResourceExecOutput() OSPolicyResourceExecResourceExecOutput {
	return o
}

func (o OSPolicyResourceExecResourceExecOutput) ToOSPolicyResourceExecResourceExecOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecOutput {
	return o
}

func (o OSPolicyResourceExecResourceExecOutput) ToOSPolicyResourceExecResourceExecPtrOutput() OSPolicyResourceExecResourceExecPtrOutput {
	return o.ToOSPolicyResourceExecResourceExecPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceExecResourceExecOutput) ToOSPolicyResourceExecResourceExecPtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExec) *OSPolicyResourceExecResourceExec {
		return &v
	}).(OSPolicyResourceExecResourceExecPtrOutput)
}

// Optional arguments to pass to the source during execution.
func (o OSPolicyResourceExecResourceExecOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExec) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// A remote or local file.
func (o OSPolicyResourceExecResourceExecOutput) File() OSPolicyResourceFilePtrOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExec) *OSPolicyResourceFile { return v.File }).(OSPolicyResourceFilePtrOutput)
}

// The script interpreter to use.
func (o OSPolicyResourceExecResourceExecOutput) Interpreter() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExec) string { return v.Interpreter }).(pulumi.StringOutput)
}

// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
func (o OSPolicyResourceExecResourceExecOutput) OutputFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExec) *string { return v.OutputFilePath }).(pulumi.StringPtrOutput)
}

// An inline script. The size of the script is limited to 1024 characters.
func (o OSPolicyResourceExecResourceExecOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExec) *string { return v.Script }).(pulumi.StringPtrOutput)
}

type OSPolicyResourceExecResourceExecPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceExecResourceExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceExecResourceExec)(nil)).Elem()
}

func (o OSPolicyResourceExecResourceExecPtrOutput) ToOSPolicyResourceExecResourceExecPtrOutput() OSPolicyResourceExecResourceExecPtrOutput {
	return o
}

func (o OSPolicyResourceExecResourceExecPtrOutput) ToOSPolicyResourceExecResourceExecPtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecPtrOutput {
	return o
}

func (o OSPolicyResourceExecResourceExecPtrOutput) Elem() OSPolicyResourceExecResourceExecOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResourceExec) OSPolicyResourceExecResourceExec { return *v }).(OSPolicyResourceExecResourceExecOutput)
}

// Optional arguments to pass to the source during execution.
func (o OSPolicyResourceExecResourceExecPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResourceExec) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// A remote or local file.
func (o OSPolicyResourceExecResourceExecPtrOutput) File() OSPolicyResourceFilePtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResourceExec) *OSPolicyResourceFile {
		if v == nil {
			return nil
		}
		return v.File
	}).(OSPolicyResourceFilePtrOutput)
}

// The script interpreter to use.
func (o OSPolicyResourceExecResourceExecPtrOutput) Interpreter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResourceExec) *string {
		if v == nil {
			return nil
		}
		return &v.Interpreter
	}).(pulumi.StringPtrOutput)
}

// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
func (o OSPolicyResourceExecResourceExecPtrOutput) OutputFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResourceExec) *string {
		if v == nil {
			return nil
		}
		return v.OutputFilePath
	}).(pulumi.StringPtrOutput)
}

// An inline script. The size of the script is limited to 1024 characters.
func (o OSPolicyResourceExecResourceExecPtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResourceExec) *string {
		if v == nil {
			return nil
		}
		return v.Script
	}).(pulumi.StringPtrOutput)
}

// A file or script to execute.
type OSPolicyResourceExecResourceExecResponse struct {
	// Optional arguments to pass to the source during execution.
	Args []string `pulumi:"args"`
	// A remote or local file.
	File OSPolicyResourceFileResponse `pulumi:"file"`
	// The script interpreter to use.
	Interpreter string `pulumi:"interpreter"`
	// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
	OutputFilePath string `pulumi:"outputFilePath"`
	// An inline script. The size of the script is limited to 1024 characters.
	Script string `pulumi:"script"`
}

// OSPolicyResourceExecResourceExecResponseInput is an input type that accepts OSPolicyResourceExecResourceExecResponseArgs and OSPolicyResourceExecResourceExecResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourceExecResourceExecResponseInput` via:
//
//          OSPolicyResourceExecResourceExecResponseArgs{...}
type OSPolicyResourceExecResourceExecResponseInput interface {
	pulumi.Input

	ToOSPolicyResourceExecResourceExecResponseOutput() OSPolicyResourceExecResourceExecResponseOutput
	ToOSPolicyResourceExecResourceExecResponseOutputWithContext(context.Context) OSPolicyResourceExecResourceExecResponseOutput
}

// A file or script to execute.
type OSPolicyResourceExecResourceExecResponseArgs struct {
	// Optional arguments to pass to the source during execution.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// A remote or local file.
	File OSPolicyResourceFileResponseInput `pulumi:"file"`
	// The script interpreter to use.
	Interpreter pulumi.StringInput `pulumi:"interpreter"`
	// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
	OutputFilePath pulumi.StringInput `pulumi:"outputFilePath"`
	// An inline script. The size of the script is limited to 1024 characters.
	Script pulumi.StringInput `pulumi:"script"`
}

func (OSPolicyResourceExecResourceExecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceExecResourceExecResponse)(nil)).Elem()
}

func (i OSPolicyResourceExecResourceExecResponseArgs) ToOSPolicyResourceExecResourceExecResponseOutput() OSPolicyResourceExecResourceExecResponseOutput {
	return i.ToOSPolicyResourceExecResourceExecResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourceExecResourceExecResponseArgs) ToOSPolicyResourceExecResourceExecResponseOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceExecResourceExecResponseOutput)
}

// A file or script to execute.
type OSPolicyResourceExecResourceExecResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceExecResourceExecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceExecResourceExecResponse)(nil)).Elem()
}

func (o OSPolicyResourceExecResourceExecResponseOutput) ToOSPolicyResourceExecResourceExecResponseOutput() OSPolicyResourceExecResourceExecResponseOutput {
	return o
}

func (o OSPolicyResourceExecResourceExecResponseOutput) ToOSPolicyResourceExecResourceExecResponseOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecResponseOutput {
	return o
}

// Optional arguments to pass to the source during execution.
func (o OSPolicyResourceExecResourceExecResponseOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExecResponse) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// A remote or local file.
func (o OSPolicyResourceExecResourceExecResponseOutput) File() OSPolicyResourceFileResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExecResponse) OSPolicyResourceFileResponse { return v.File }).(OSPolicyResourceFileResponseOutput)
}

// The script interpreter to use.
func (o OSPolicyResourceExecResourceExecResponseOutput) Interpreter() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExecResponse) string { return v.Interpreter }).(pulumi.StringOutput)
}

// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
func (o OSPolicyResourceExecResourceExecResponseOutput) OutputFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExecResponse) string { return v.OutputFilePath }).(pulumi.StringOutput)
}

// An inline script. The size of the script is limited to 1024 characters.
func (o OSPolicyResourceExecResourceExecResponseOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExecResponse) string { return v.Script }).(pulumi.StringOutput)
}

// A resource that allows executing scripts on the VM. The `ExecResource` has 2 stages: `validate` and `enforce` and both stages accept a script as an argument to execute. When the `ExecResource` is applied by the agent, it first executes the script in the `validate` stage. The `validate` stage can signal that the `ExecResource` is already in the desired state by returning an exit code of `100`. If the `ExecResource` is not in the desired state, it should return an exit code of `101`. Any other exit code returned by this stage is considered an error. If the `ExecResource` is not in the desired state based on the exit code from the `validate` stage, the agent proceeds to execute the script from the `enforce` stage. If the `ExecResource` is already in the desired state, the `enforce` stage will not be run. Similar to `validate` stage, the `enforce` stage should return an exit code of `100` to indicate that the resource in now in its desired state. Any other exit code is considered an error. NOTE: An exit code of `100` was chosen over `0` (and `101` vs `1`) to have an explicit indicator of `in desired state`, `not in desired state` and errors. Because, for example, Powershell will always return an exit code of `0` unless an `exit` statement is provided in the script. So, for reasons of consistency and being explicit, exit codes `100` and `101` were chosen.
type OSPolicyResourceExecResourceResponse struct {
	// What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce.
	Enforce OSPolicyResourceExecResourceExecResponse `pulumi:"enforce"`
	// What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate.
	Validate OSPolicyResourceExecResourceExecResponse `pulumi:"validate"`
}

// OSPolicyResourceExecResourceResponseInput is an input type that accepts OSPolicyResourceExecResourceResponseArgs and OSPolicyResourceExecResourceResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourceExecResourceResponseInput` via:
//
//          OSPolicyResourceExecResourceResponseArgs{...}
type OSPolicyResourceExecResourceResponseInput interface {
	pulumi.Input

	ToOSPolicyResourceExecResourceResponseOutput() OSPolicyResourceExecResourceResponseOutput
	ToOSPolicyResourceExecResourceResponseOutputWithContext(context.Context) OSPolicyResourceExecResourceResponseOutput
}

// A resource that allows executing scripts on the VM. The `ExecResource` has 2 stages: `validate` and `enforce` and both stages accept a script as an argument to execute. When the `ExecResource` is applied by the agent, it first executes the script in the `validate` stage. The `validate` stage can signal that the `ExecResource` is already in the desired state by returning an exit code of `100`. If the `ExecResource` is not in the desired state, it should return an exit code of `101`. Any other exit code returned by this stage is considered an error. If the `ExecResource` is not in the desired state based on the exit code from the `validate` stage, the agent proceeds to execute the script from the `enforce` stage. If the `ExecResource` is already in the desired state, the `enforce` stage will not be run. Similar to `validate` stage, the `enforce` stage should return an exit code of `100` to indicate that the resource in now in its desired state. Any other exit code is considered an error. NOTE: An exit code of `100` was chosen over `0` (and `101` vs `1`) to have an explicit indicator of `in desired state`, `not in desired state` and errors. Because, for example, Powershell will always return an exit code of `0` unless an `exit` statement is provided in the script. So, for reasons of consistency and being explicit, exit codes `100` and `101` were chosen.
type OSPolicyResourceExecResourceResponseArgs struct {
	// What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce.
	Enforce OSPolicyResourceExecResourceExecResponseInput `pulumi:"enforce"`
	// What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate.
	Validate OSPolicyResourceExecResourceExecResponseInput `pulumi:"validate"`
}

func (OSPolicyResourceExecResourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceExecResourceResponse)(nil)).Elem()
}

func (i OSPolicyResourceExecResourceResponseArgs) ToOSPolicyResourceExecResourceResponseOutput() OSPolicyResourceExecResourceResponseOutput {
	return i.ToOSPolicyResourceExecResourceResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourceExecResourceResponseArgs) ToOSPolicyResourceExecResourceResponseOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceExecResourceResponseOutput)
}

// A resource that allows executing scripts on the VM. The `ExecResource` has 2 stages: `validate` and `enforce` and both stages accept a script as an argument to execute. When the `ExecResource` is applied by the agent, it first executes the script in the `validate` stage. The `validate` stage can signal that the `ExecResource` is already in the desired state by returning an exit code of `100`. If the `ExecResource` is not in the desired state, it should return an exit code of `101`. Any other exit code returned by this stage is considered an error. If the `ExecResource` is not in the desired state based on the exit code from the `validate` stage, the agent proceeds to execute the script from the `enforce` stage. If the `ExecResource` is already in the desired state, the `enforce` stage will not be run. Similar to `validate` stage, the `enforce` stage should return an exit code of `100` to indicate that the resource in now in its desired state. Any other exit code is considered an error. NOTE: An exit code of `100` was chosen over `0` (and `101` vs `1`) to have an explicit indicator of `in desired state`, `not in desired state` and errors. Because, for example, Powershell will always return an exit code of `0` unless an `exit` statement is provided in the script. So, for reasons of consistency and being explicit, exit codes `100` and `101` were chosen.
type OSPolicyResourceExecResourceResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceExecResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceExecResourceResponse)(nil)).Elem()
}

func (o OSPolicyResourceExecResourceResponseOutput) ToOSPolicyResourceExecResourceResponseOutput() OSPolicyResourceExecResourceResponseOutput {
	return o
}

func (o OSPolicyResourceExecResourceResponseOutput) ToOSPolicyResourceExecResourceResponseOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceResponseOutput {
	return o
}

// What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce.
func (o OSPolicyResourceExecResourceResponseOutput) Enforce() OSPolicyResourceExecResourceExecResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceResponse) OSPolicyResourceExecResourceExecResponse {
		return v.Enforce
	}).(OSPolicyResourceExecResourceExecResponseOutput)
}

// What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate.
func (o OSPolicyResourceExecResourceResponseOutput) Validate() OSPolicyResourceExecResourceExecResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceResponse) OSPolicyResourceExecResourceExecResponse {
		return v.Validate
	}).(OSPolicyResourceExecResourceExecResponseOutput)
}

// A remote or local file.
type OSPolicyResourceFile struct {
	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	AllowInsecure *bool `pulumi:"allowInsecure"`
	// A Cloud Storage object.
	Gcs *OSPolicyResourceFileGcs `pulumi:"gcs"`
	// A local path within the VM to use.
	LocalPath *string `pulumi:"localPath"`
	// A generic remote file.
	Remote *OSPolicyResourceFileRemote `pulumi:"remote"`
}

// OSPolicyResourceFileInput is an input type that accepts OSPolicyResourceFileArgs and OSPolicyResourceFileOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileInput` via:
//
//          OSPolicyResourceFileArgs{...}
type OSPolicyResourceFileInput interface {
	pulumi.Input

	ToOSPolicyResourceFileOutput() OSPolicyResourceFileOutput
	ToOSPolicyResourceFileOutputWithContext(context.Context) OSPolicyResourceFileOutput
}

// A remote or local file.
type OSPolicyResourceFileArgs struct {
	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	AllowInsecure pulumi.BoolPtrInput `pulumi:"allowInsecure"`
	// A Cloud Storage object.
	Gcs OSPolicyResourceFileGcsPtrInput `pulumi:"gcs"`
	// A local path within the VM to use.
	LocalPath pulumi.StringPtrInput `pulumi:"localPath"`
	// A generic remote file.
	Remote OSPolicyResourceFileRemotePtrInput `pulumi:"remote"`
}

func (OSPolicyResourceFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFile)(nil)).Elem()
}

func (i OSPolicyResourceFileArgs) ToOSPolicyResourceFileOutput() OSPolicyResourceFileOutput {
	return i.ToOSPolicyResourceFileOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileArgs) ToOSPolicyResourceFileOutputWithContext(ctx context.Context) OSPolicyResourceFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileOutput)
}

func (i OSPolicyResourceFileArgs) ToOSPolicyResourceFilePtrOutput() OSPolicyResourceFilePtrOutput {
	return i.ToOSPolicyResourceFilePtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileArgs) ToOSPolicyResourceFilePtrOutputWithContext(ctx context.Context) OSPolicyResourceFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileOutput).ToOSPolicyResourceFilePtrOutputWithContext(ctx)
}

// OSPolicyResourceFilePtrInput is an input type that accepts OSPolicyResourceFileArgs, OSPolicyResourceFilePtr and OSPolicyResourceFilePtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceFilePtrInput` via:
//
//          OSPolicyResourceFileArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourceFilePtrInput interface {
	pulumi.Input

	ToOSPolicyResourceFilePtrOutput() OSPolicyResourceFilePtrOutput
	ToOSPolicyResourceFilePtrOutputWithContext(context.Context) OSPolicyResourceFilePtrOutput
}

type ospolicyResourceFilePtrType OSPolicyResourceFileArgs

func OSPolicyResourceFilePtr(v *OSPolicyResourceFileArgs) OSPolicyResourceFilePtrInput {
	return (*ospolicyResourceFilePtrType)(v)
}

func (*ospolicyResourceFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFile)(nil)).Elem()
}

func (i *ospolicyResourceFilePtrType) ToOSPolicyResourceFilePtrOutput() OSPolicyResourceFilePtrOutput {
	return i.ToOSPolicyResourceFilePtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceFilePtrType) ToOSPolicyResourceFilePtrOutputWithContext(ctx context.Context) OSPolicyResourceFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFilePtrOutput)
}

// A remote or local file.
type OSPolicyResourceFileOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFile)(nil)).Elem()
}

func (o OSPolicyResourceFileOutput) ToOSPolicyResourceFileOutput() OSPolicyResourceFileOutput {
	return o
}

func (o OSPolicyResourceFileOutput) ToOSPolicyResourceFileOutputWithContext(ctx context.Context) OSPolicyResourceFileOutput {
	return o
}

func (o OSPolicyResourceFileOutput) ToOSPolicyResourceFilePtrOutput() OSPolicyResourceFilePtrOutput {
	return o.ToOSPolicyResourceFilePtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceFileOutput) ToOSPolicyResourceFilePtrOutputWithContext(ctx context.Context) OSPolicyResourceFilePtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFile) *OSPolicyResourceFile {
		return &v
	}).(OSPolicyResourceFilePtrOutput)
}

// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
func (o OSPolicyResourceFileOutput) AllowInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFile) *bool { return v.AllowInsecure }).(pulumi.BoolPtrOutput)
}

// A Cloud Storage object.
func (o OSPolicyResourceFileOutput) Gcs() OSPolicyResourceFileGcsPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFile) *OSPolicyResourceFileGcs { return v.Gcs }).(OSPolicyResourceFileGcsPtrOutput)
}

// A local path within the VM to use.
func (o OSPolicyResourceFileOutput) LocalPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFile) *string { return v.LocalPath }).(pulumi.StringPtrOutput)
}

// A generic remote file.
func (o OSPolicyResourceFileOutput) Remote() OSPolicyResourceFileRemotePtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFile) *OSPolicyResourceFileRemote { return v.Remote }).(OSPolicyResourceFileRemotePtrOutput)
}

type OSPolicyResourceFilePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFile)(nil)).Elem()
}

func (o OSPolicyResourceFilePtrOutput) ToOSPolicyResourceFilePtrOutput() OSPolicyResourceFilePtrOutput {
	return o
}

func (o OSPolicyResourceFilePtrOutput) ToOSPolicyResourceFilePtrOutputWithContext(ctx context.Context) OSPolicyResourceFilePtrOutput {
	return o
}

func (o OSPolicyResourceFilePtrOutput) Elem() OSPolicyResourceFileOutput {
	return o.ApplyT(func(v *OSPolicyResourceFile) OSPolicyResourceFile { return *v }).(OSPolicyResourceFileOutput)
}

// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
func (o OSPolicyResourceFilePtrOutput) AllowInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFile) *bool {
		if v == nil {
			return nil
		}
		return v.AllowInsecure
	}).(pulumi.BoolPtrOutput)
}

// A Cloud Storage object.
func (o OSPolicyResourceFilePtrOutput) Gcs() OSPolicyResourceFileGcsPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFile) *OSPolicyResourceFileGcs {
		if v == nil {
			return nil
		}
		return v.Gcs
	}).(OSPolicyResourceFileGcsPtrOutput)
}

// A local path within the VM to use.
func (o OSPolicyResourceFilePtrOutput) LocalPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFile) *string {
		if v == nil {
			return nil
		}
		return v.LocalPath
	}).(pulumi.StringPtrOutput)
}

// A generic remote file.
func (o OSPolicyResourceFilePtrOutput) Remote() OSPolicyResourceFileRemotePtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFile) *OSPolicyResourceFileRemote {
		if v == nil {
			return nil
		}
		return v.Remote
	}).(OSPolicyResourceFileRemotePtrOutput)
}

// Specifies a file available as a Cloud Storage Object.
type OSPolicyResourceFileGcs struct {
	// Bucket of the Cloud Storage object.
	Bucket string `pulumi:"bucket"`
	// Generation number of the Cloud Storage object.
	Generation *string `pulumi:"generation"`
	// Name of the Cloud Storage object.
	Object string `pulumi:"object"`
}

// OSPolicyResourceFileGcsInput is an input type that accepts OSPolicyResourceFileGcsArgs and OSPolicyResourceFileGcsOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileGcsInput` via:
//
//          OSPolicyResourceFileGcsArgs{...}
type OSPolicyResourceFileGcsInput interface {
	pulumi.Input

	ToOSPolicyResourceFileGcsOutput() OSPolicyResourceFileGcsOutput
	ToOSPolicyResourceFileGcsOutputWithContext(context.Context) OSPolicyResourceFileGcsOutput
}

// Specifies a file available as a Cloud Storage Object.
type OSPolicyResourceFileGcsArgs struct {
	// Bucket of the Cloud Storage object.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// Generation number of the Cloud Storage object.
	Generation pulumi.StringPtrInput `pulumi:"generation"`
	// Name of the Cloud Storage object.
	Object pulumi.StringInput `pulumi:"object"`
}

func (OSPolicyResourceFileGcsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileGcs)(nil)).Elem()
}

func (i OSPolicyResourceFileGcsArgs) ToOSPolicyResourceFileGcsOutput() OSPolicyResourceFileGcsOutput {
	return i.ToOSPolicyResourceFileGcsOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileGcsArgs) ToOSPolicyResourceFileGcsOutputWithContext(ctx context.Context) OSPolicyResourceFileGcsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileGcsOutput)
}

func (i OSPolicyResourceFileGcsArgs) ToOSPolicyResourceFileGcsPtrOutput() OSPolicyResourceFileGcsPtrOutput {
	return i.ToOSPolicyResourceFileGcsPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileGcsArgs) ToOSPolicyResourceFileGcsPtrOutputWithContext(ctx context.Context) OSPolicyResourceFileGcsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileGcsOutput).ToOSPolicyResourceFileGcsPtrOutputWithContext(ctx)
}

// OSPolicyResourceFileGcsPtrInput is an input type that accepts OSPolicyResourceFileGcsArgs, OSPolicyResourceFileGcsPtr and OSPolicyResourceFileGcsPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileGcsPtrInput` via:
//
//          OSPolicyResourceFileGcsArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourceFileGcsPtrInput interface {
	pulumi.Input

	ToOSPolicyResourceFileGcsPtrOutput() OSPolicyResourceFileGcsPtrOutput
	ToOSPolicyResourceFileGcsPtrOutputWithContext(context.Context) OSPolicyResourceFileGcsPtrOutput
}

type ospolicyResourceFileGcsPtrType OSPolicyResourceFileGcsArgs

func OSPolicyResourceFileGcsPtr(v *OSPolicyResourceFileGcsArgs) OSPolicyResourceFileGcsPtrInput {
	return (*ospolicyResourceFileGcsPtrType)(v)
}

func (*ospolicyResourceFileGcsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFileGcs)(nil)).Elem()
}

func (i *ospolicyResourceFileGcsPtrType) ToOSPolicyResourceFileGcsPtrOutput() OSPolicyResourceFileGcsPtrOutput {
	return i.ToOSPolicyResourceFileGcsPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceFileGcsPtrType) ToOSPolicyResourceFileGcsPtrOutputWithContext(ctx context.Context) OSPolicyResourceFileGcsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileGcsPtrOutput)
}

// Specifies a file available as a Cloud Storage Object.
type OSPolicyResourceFileGcsOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileGcsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileGcs)(nil)).Elem()
}

func (o OSPolicyResourceFileGcsOutput) ToOSPolicyResourceFileGcsOutput() OSPolicyResourceFileGcsOutput {
	return o
}

func (o OSPolicyResourceFileGcsOutput) ToOSPolicyResourceFileGcsOutputWithContext(ctx context.Context) OSPolicyResourceFileGcsOutput {
	return o
}

func (o OSPolicyResourceFileGcsOutput) ToOSPolicyResourceFileGcsPtrOutput() OSPolicyResourceFileGcsPtrOutput {
	return o.ToOSPolicyResourceFileGcsPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceFileGcsOutput) ToOSPolicyResourceFileGcsPtrOutputWithContext(ctx context.Context) OSPolicyResourceFileGcsPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFileGcs) *OSPolicyResourceFileGcs {
		return &v
	}).(OSPolicyResourceFileGcsPtrOutput)
}

// Bucket of the Cloud Storage object.
func (o OSPolicyResourceFileGcsOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileGcs) string { return v.Bucket }).(pulumi.StringOutput)
}

// Generation number of the Cloud Storage object.
func (o OSPolicyResourceFileGcsOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFileGcs) *string { return v.Generation }).(pulumi.StringPtrOutput)
}

// Name of the Cloud Storage object.
func (o OSPolicyResourceFileGcsOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileGcs) string { return v.Object }).(pulumi.StringOutput)
}

type OSPolicyResourceFileGcsPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileGcsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFileGcs)(nil)).Elem()
}

func (o OSPolicyResourceFileGcsPtrOutput) ToOSPolicyResourceFileGcsPtrOutput() OSPolicyResourceFileGcsPtrOutput {
	return o
}

func (o OSPolicyResourceFileGcsPtrOutput) ToOSPolicyResourceFileGcsPtrOutputWithContext(ctx context.Context) OSPolicyResourceFileGcsPtrOutput {
	return o
}

func (o OSPolicyResourceFileGcsPtrOutput) Elem() OSPolicyResourceFileGcsOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileGcs) OSPolicyResourceFileGcs { return *v }).(OSPolicyResourceFileGcsOutput)
}

// Bucket of the Cloud Storage object.
func (o OSPolicyResourceFileGcsPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileGcs) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Generation number of the Cloud Storage object.
func (o OSPolicyResourceFileGcsPtrOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileGcs) *string {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.StringPtrOutput)
}

// Name of the Cloud Storage object.
func (o OSPolicyResourceFileGcsPtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileGcs) *string {
		if v == nil {
			return nil
		}
		return &v.Object
	}).(pulumi.StringPtrOutput)
}

// Specifies a file available as a Cloud Storage Object.
type OSPolicyResourceFileGcsResponse struct {
	// Bucket of the Cloud Storage object.
	Bucket string `pulumi:"bucket"`
	// Generation number of the Cloud Storage object.
	Generation string `pulumi:"generation"`
	// Name of the Cloud Storage object.
	Object string `pulumi:"object"`
}

// OSPolicyResourceFileGcsResponseInput is an input type that accepts OSPolicyResourceFileGcsResponseArgs and OSPolicyResourceFileGcsResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileGcsResponseInput` via:
//
//          OSPolicyResourceFileGcsResponseArgs{...}
type OSPolicyResourceFileGcsResponseInput interface {
	pulumi.Input

	ToOSPolicyResourceFileGcsResponseOutput() OSPolicyResourceFileGcsResponseOutput
	ToOSPolicyResourceFileGcsResponseOutputWithContext(context.Context) OSPolicyResourceFileGcsResponseOutput
}

// Specifies a file available as a Cloud Storage Object.
type OSPolicyResourceFileGcsResponseArgs struct {
	// Bucket of the Cloud Storage object.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// Generation number of the Cloud Storage object.
	Generation pulumi.StringInput `pulumi:"generation"`
	// Name of the Cloud Storage object.
	Object pulumi.StringInput `pulumi:"object"`
}

func (OSPolicyResourceFileGcsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileGcsResponse)(nil)).Elem()
}

func (i OSPolicyResourceFileGcsResponseArgs) ToOSPolicyResourceFileGcsResponseOutput() OSPolicyResourceFileGcsResponseOutput {
	return i.ToOSPolicyResourceFileGcsResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileGcsResponseArgs) ToOSPolicyResourceFileGcsResponseOutputWithContext(ctx context.Context) OSPolicyResourceFileGcsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileGcsResponseOutput)
}

// Specifies a file available as a Cloud Storage Object.
type OSPolicyResourceFileGcsResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileGcsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileGcsResponse)(nil)).Elem()
}

func (o OSPolicyResourceFileGcsResponseOutput) ToOSPolicyResourceFileGcsResponseOutput() OSPolicyResourceFileGcsResponseOutput {
	return o
}

func (o OSPolicyResourceFileGcsResponseOutput) ToOSPolicyResourceFileGcsResponseOutputWithContext(ctx context.Context) OSPolicyResourceFileGcsResponseOutput {
	return o
}

// Bucket of the Cloud Storage object.
func (o OSPolicyResourceFileGcsResponseOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileGcsResponse) string { return v.Bucket }).(pulumi.StringOutput)
}

// Generation number of the Cloud Storage object.
func (o OSPolicyResourceFileGcsResponseOutput) Generation() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileGcsResponse) string { return v.Generation }).(pulumi.StringOutput)
}

// Name of the Cloud Storage object.
func (o OSPolicyResourceFileGcsResponseOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileGcsResponse) string { return v.Object }).(pulumi.StringOutput)
}

// Specifies a file available via some URI.
type OSPolicyResourceFileRemote struct {
	// SHA256 checksum of the remote file.
	Sha256Checksum *string `pulumi:"sha256Checksum"`
	// URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`.
	Uri string `pulumi:"uri"`
}

// OSPolicyResourceFileRemoteInput is an input type that accepts OSPolicyResourceFileRemoteArgs and OSPolicyResourceFileRemoteOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileRemoteInput` via:
//
//          OSPolicyResourceFileRemoteArgs{...}
type OSPolicyResourceFileRemoteInput interface {
	pulumi.Input

	ToOSPolicyResourceFileRemoteOutput() OSPolicyResourceFileRemoteOutput
	ToOSPolicyResourceFileRemoteOutputWithContext(context.Context) OSPolicyResourceFileRemoteOutput
}

// Specifies a file available via some URI.
type OSPolicyResourceFileRemoteArgs struct {
	// SHA256 checksum of the remote file.
	Sha256Checksum pulumi.StringPtrInput `pulumi:"sha256Checksum"`
	// URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (OSPolicyResourceFileRemoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileRemote)(nil)).Elem()
}

func (i OSPolicyResourceFileRemoteArgs) ToOSPolicyResourceFileRemoteOutput() OSPolicyResourceFileRemoteOutput {
	return i.ToOSPolicyResourceFileRemoteOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileRemoteArgs) ToOSPolicyResourceFileRemoteOutputWithContext(ctx context.Context) OSPolicyResourceFileRemoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileRemoteOutput)
}

func (i OSPolicyResourceFileRemoteArgs) ToOSPolicyResourceFileRemotePtrOutput() OSPolicyResourceFileRemotePtrOutput {
	return i.ToOSPolicyResourceFileRemotePtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileRemoteArgs) ToOSPolicyResourceFileRemotePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileRemotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileRemoteOutput).ToOSPolicyResourceFileRemotePtrOutputWithContext(ctx)
}

// OSPolicyResourceFileRemotePtrInput is an input type that accepts OSPolicyResourceFileRemoteArgs, OSPolicyResourceFileRemotePtr and OSPolicyResourceFileRemotePtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileRemotePtrInput` via:
//
//          OSPolicyResourceFileRemoteArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourceFileRemotePtrInput interface {
	pulumi.Input

	ToOSPolicyResourceFileRemotePtrOutput() OSPolicyResourceFileRemotePtrOutput
	ToOSPolicyResourceFileRemotePtrOutputWithContext(context.Context) OSPolicyResourceFileRemotePtrOutput
}

type ospolicyResourceFileRemotePtrType OSPolicyResourceFileRemoteArgs

func OSPolicyResourceFileRemotePtr(v *OSPolicyResourceFileRemoteArgs) OSPolicyResourceFileRemotePtrInput {
	return (*ospolicyResourceFileRemotePtrType)(v)
}

func (*ospolicyResourceFileRemotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFileRemote)(nil)).Elem()
}

func (i *ospolicyResourceFileRemotePtrType) ToOSPolicyResourceFileRemotePtrOutput() OSPolicyResourceFileRemotePtrOutput {
	return i.ToOSPolicyResourceFileRemotePtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceFileRemotePtrType) ToOSPolicyResourceFileRemotePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileRemotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileRemotePtrOutput)
}

// Specifies a file available via some URI.
type OSPolicyResourceFileRemoteOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileRemoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileRemote)(nil)).Elem()
}

func (o OSPolicyResourceFileRemoteOutput) ToOSPolicyResourceFileRemoteOutput() OSPolicyResourceFileRemoteOutput {
	return o
}

func (o OSPolicyResourceFileRemoteOutput) ToOSPolicyResourceFileRemoteOutputWithContext(ctx context.Context) OSPolicyResourceFileRemoteOutput {
	return o
}

func (o OSPolicyResourceFileRemoteOutput) ToOSPolicyResourceFileRemotePtrOutput() OSPolicyResourceFileRemotePtrOutput {
	return o.ToOSPolicyResourceFileRemotePtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceFileRemoteOutput) ToOSPolicyResourceFileRemotePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileRemotePtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFileRemote) *OSPolicyResourceFileRemote {
		return &v
	}).(OSPolicyResourceFileRemotePtrOutput)
}

// SHA256 checksum of the remote file.
func (o OSPolicyResourceFileRemoteOutput) Sha256Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFileRemote) *string { return v.Sha256Checksum }).(pulumi.StringPtrOutput)
}

// URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`.
func (o OSPolicyResourceFileRemoteOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileRemote) string { return v.Uri }).(pulumi.StringOutput)
}

type OSPolicyResourceFileRemotePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileRemotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFileRemote)(nil)).Elem()
}

func (o OSPolicyResourceFileRemotePtrOutput) ToOSPolicyResourceFileRemotePtrOutput() OSPolicyResourceFileRemotePtrOutput {
	return o
}

func (o OSPolicyResourceFileRemotePtrOutput) ToOSPolicyResourceFileRemotePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileRemotePtrOutput {
	return o
}

func (o OSPolicyResourceFileRemotePtrOutput) Elem() OSPolicyResourceFileRemoteOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileRemote) OSPolicyResourceFileRemote { return *v }).(OSPolicyResourceFileRemoteOutput)
}

// SHA256 checksum of the remote file.
func (o OSPolicyResourceFileRemotePtrOutput) Sha256Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileRemote) *string {
		if v == nil {
			return nil
		}
		return v.Sha256Checksum
	}).(pulumi.StringPtrOutput)
}

// URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`.
func (o OSPolicyResourceFileRemotePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileRemote) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Specifies a file available via some URI.
type OSPolicyResourceFileRemoteResponse struct {
	// SHA256 checksum of the remote file.
	Sha256Checksum string `pulumi:"sha256Checksum"`
	// URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`.
	Uri string `pulumi:"uri"`
}

// OSPolicyResourceFileRemoteResponseInput is an input type that accepts OSPolicyResourceFileRemoteResponseArgs and OSPolicyResourceFileRemoteResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileRemoteResponseInput` via:
//
//          OSPolicyResourceFileRemoteResponseArgs{...}
type OSPolicyResourceFileRemoteResponseInput interface {
	pulumi.Input

	ToOSPolicyResourceFileRemoteResponseOutput() OSPolicyResourceFileRemoteResponseOutput
	ToOSPolicyResourceFileRemoteResponseOutputWithContext(context.Context) OSPolicyResourceFileRemoteResponseOutput
}

// Specifies a file available via some URI.
type OSPolicyResourceFileRemoteResponseArgs struct {
	// SHA256 checksum of the remote file.
	Sha256Checksum pulumi.StringInput `pulumi:"sha256Checksum"`
	// URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (OSPolicyResourceFileRemoteResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileRemoteResponse)(nil)).Elem()
}

func (i OSPolicyResourceFileRemoteResponseArgs) ToOSPolicyResourceFileRemoteResponseOutput() OSPolicyResourceFileRemoteResponseOutput {
	return i.ToOSPolicyResourceFileRemoteResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileRemoteResponseArgs) ToOSPolicyResourceFileRemoteResponseOutputWithContext(ctx context.Context) OSPolicyResourceFileRemoteResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileRemoteResponseOutput)
}

// Specifies a file available via some URI.
type OSPolicyResourceFileRemoteResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileRemoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileRemoteResponse)(nil)).Elem()
}

func (o OSPolicyResourceFileRemoteResponseOutput) ToOSPolicyResourceFileRemoteResponseOutput() OSPolicyResourceFileRemoteResponseOutput {
	return o
}

func (o OSPolicyResourceFileRemoteResponseOutput) ToOSPolicyResourceFileRemoteResponseOutputWithContext(ctx context.Context) OSPolicyResourceFileRemoteResponseOutput {
	return o
}

// SHA256 checksum of the remote file.
func (o OSPolicyResourceFileRemoteResponseOutput) Sha256Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileRemoteResponse) string { return v.Sha256Checksum }).(pulumi.StringOutput)
}

// URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`.
func (o OSPolicyResourceFileRemoteResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileRemoteResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// A resource that manages the state of a file.
type OSPolicyResourceFileResource struct {
	// A a file with this content. The size of the content is limited to 1024 characters.
	Content *string `pulumi:"content"`
	// A remote or local source.
	File *OSPolicyResourceFile `pulumi:"file"`
	// The absolute path of the file within the VM.
	Path string `pulumi:"path"`
	// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
	Permissions *string `pulumi:"permissions"`
	// Desired state of the file.
	State string `pulumi:"state"`
}

// OSPolicyResourceFileResourceInput is an input type that accepts OSPolicyResourceFileResourceArgs and OSPolicyResourceFileResourceOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileResourceInput` via:
//
//          OSPolicyResourceFileResourceArgs{...}
type OSPolicyResourceFileResourceInput interface {
	pulumi.Input

	ToOSPolicyResourceFileResourceOutput() OSPolicyResourceFileResourceOutput
	ToOSPolicyResourceFileResourceOutputWithContext(context.Context) OSPolicyResourceFileResourceOutput
}

// A resource that manages the state of a file.
type OSPolicyResourceFileResourceArgs struct {
	// A a file with this content. The size of the content is limited to 1024 characters.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// A remote or local source.
	File OSPolicyResourceFilePtrInput `pulumi:"file"`
	// The absolute path of the file within the VM.
	Path pulumi.StringInput `pulumi:"path"`
	// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
	Permissions pulumi.StringPtrInput `pulumi:"permissions"`
	// Desired state of the file.
	State OSPolicyResourceFileResourceState `pulumi:"state"`
}

func (OSPolicyResourceFileResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileResource)(nil)).Elem()
}

func (i OSPolicyResourceFileResourceArgs) ToOSPolicyResourceFileResourceOutput() OSPolicyResourceFileResourceOutput {
	return i.ToOSPolicyResourceFileResourceOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileResourceArgs) ToOSPolicyResourceFileResourceOutputWithContext(ctx context.Context) OSPolicyResourceFileResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileResourceOutput)
}

func (i OSPolicyResourceFileResourceArgs) ToOSPolicyResourceFileResourcePtrOutput() OSPolicyResourceFileResourcePtrOutput {
	return i.ToOSPolicyResourceFileResourcePtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileResourceArgs) ToOSPolicyResourceFileResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileResourceOutput).ToOSPolicyResourceFileResourcePtrOutputWithContext(ctx)
}

// OSPolicyResourceFileResourcePtrInput is an input type that accepts OSPolicyResourceFileResourceArgs, OSPolicyResourceFileResourcePtr and OSPolicyResourceFileResourcePtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileResourcePtrInput` via:
//
//          OSPolicyResourceFileResourceArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourceFileResourcePtrInput interface {
	pulumi.Input

	ToOSPolicyResourceFileResourcePtrOutput() OSPolicyResourceFileResourcePtrOutput
	ToOSPolicyResourceFileResourcePtrOutputWithContext(context.Context) OSPolicyResourceFileResourcePtrOutput
}

type ospolicyResourceFileResourcePtrType OSPolicyResourceFileResourceArgs

func OSPolicyResourceFileResourcePtr(v *OSPolicyResourceFileResourceArgs) OSPolicyResourceFileResourcePtrInput {
	return (*ospolicyResourceFileResourcePtrType)(v)
}

func (*ospolicyResourceFileResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFileResource)(nil)).Elem()
}

func (i *ospolicyResourceFileResourcePtrType) ToOSPolicyResourceFileResourcePtrOutput() OSPolicyResourceFileResourcePtrOutput {
	return i.ToOSPolicyResourceFileResourcePtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceFileResourcePtrType) ToOSPolicyResourceFileResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileResourcePtrOutput)
}

// A resource that manages the state of a file.
type OSPolicyResourceFileResourceOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileResource)(nil)).Elem()
}

func (o OSPolicyResourceFileResourceOutput) ToOSPolicyResourceFileResourceOutput() OSPolicyResourceFileResourceOutput {
	return o
}

func (o OSPolicyResourceFileResourceOutput) ToOSPolicyResourceFileResourceOutputWithContext(ctx context.Context) OSPolicyResourceFileResourceOutput {
	return o
}

func (o OSPolicyResourceFileResourceOutput) ToOSPolicyResourceFileResourcePtrOutput() OSPolicyResourceFileResourcePtrOutput {
	return o.ToOSPolicyResourceFileResourcePtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceFileResourceOutput) ToOSPolicyResourceFileResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileResourcePtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResource) *OSPolicyResourceFileResource {
		return &v
	}).(OSPolicyResourceFileResourcePtrOutput)
}

// A a file with this content. The size of the content is limited to 1024 characters.
func (o OSPolicyResourceFileResourceOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResource) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// A remote or local source.
func (o OSPolicyResourceFileResourceOutput) File() OSPolicyResourceFilePtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResource) *OSPolicyResourceFile { return v.File }).(OSPolicyResourceFilePtrOutput)
}

// The absolute path of the file within the VM.
func (o OSPolicyResourceFileResourceOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResource) string { return v.Path }).(pulumi.StringOutput)
}

// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
func (o OSPolicyResourceFileResourceOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResource) *string { return v.Permissions }).(pulumi.StringPtrOutput)
}

// Desired state of the file.
func (o OSPolicyResourceFileResourceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResource) string { return v.State }).(pulumi.StringOutput)
}

type OSPolicyResourceFileResourcePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFileResource)(nil)).Elem()
}

func (o OSPolicyResourceFileResourcePtrOutput) ToOSPolicyResourceFileResourcePtrOutput() OSPolicyResourceFileResourcePtrOutput {
	return o
}

func (o OSPolicyResourceFileResourcePtrOutput) ToOSPolicyResourceFileResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileResourcePtrOutput {
	return o
}

func (o OSPolicyResourceFileResourcePtrOutput) Elem() OSPolicyResourceFileResourceOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileResource) OSPolicyResourceFileResource { return *v }).(OSPolicyResourceFileResourceOutput)
}

// A a file with this content. The size of the content is limited to 1024 characters.
func (o OSPolicyResourceFileResourcePtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileResource) *string {
		if v == nil {
			return nil
		}
		return v.Content
	}).(pulumi.StringPtrOutput)
}

// A remote or local source.
func (o OSPolicyResourceFileResourcePtrOutput) File() OSPolicyResourceFilePtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileResource) *OSPolicyResourceFile {
		if v == nil {
			return nil
		}
		return v.File
	}).(OSPolicyResourceFilePtrOutput)
}

// The absolute path of the file within the VM.
func (o OSPolicyResourceFileResourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileResource) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
func (o OSPolicyResourceFileResourcePtrOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileResource) *string {
		if v == nil {
			return nil
		}
		return v.Permissions
	}).(pulumi.StringPtrOutput)
}

// Desired state of the file.
func (o OSPolicyResourceFileResourcePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileResource) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// A resource that manages the state of a file.
type OSPolicyResourceFileResourceResponse struct {
	// A a file with this content. The size of the content is limited to 1024 characters.
	Content string `pulumi:"content"`
	// A remote or local source.
	File OSPolicyResourceFileResponse `pulumi:"file"`
	// The absolute path of the file within the VM.
	Path string `pulumi:"path"`
	// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
	Permissions string `pulumi:"permissions"`
	// Desired state of the file.
	State string `pulumi:"state"`
}

// OSPolicyResourceFileResourceResponseInput is an input type that accepts OSPolicyResourceFileResourceResponseArgs and OSPolicyResourceFileResourceResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileResourceResponseInput` via:
//
//          OSPolicyResourceFileResourceResponseArgs{...}
type OSPolicyResourceFileResourceResponseInput interface {
	pulumi.Input

	ToOSPolicyResourceFileResourceResponseOutput() OSPolicyResourceFileResourceResponseOutput
	ToOSPolicyResourceFileResourceResponseOutputWithContext(context.Context) OSPolicyResourceFileResourceResponseOutput
}

// A resource that manages the state of a file.
type OSPolicyResourceFileResourceResponseArgs struct {
	// A a file with this content. The size of the content is limited to 1024 characters.
	Content pulumi.StringInput `pulumi:"content"`
	// A remote or local source.
	File OSPolicyResourceFileResponseInput `pulumi:"file"`
	// The absolute path of the file within the VM.
	Path pulumi.StringInput `pulumi:"path"`
	// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
	Permissions pulumi.StringInput `pulumi:"permissions"`
	// Desired state of the file.
	State pulumi.StringInput `pulumi:"state"`
}

func (OSPolicyResourceFileResourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileResourceResponse)(nil)).Elem()
}

func (i OSPolicyResourceFileResourceResponseArgs) ToOSPolicyResourceFileResourceResponseOutput() OSPolicyResourceFileResourceResponseOutput {
	return i.ToOSPolicyResourceFileResourceResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileResourceResponseArgs) ToOSPolicyResourceFileResourceResponseOutputWithContext(ctx context.Context) OSPolicyResourceFileResourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileResourceResponseOutput)
}

// A resource that manages the state of a file.
type OSPolicyResourceFileResourceResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileResourceResponse)(nil)).Elem()
}

func (o OSPolicyResourceFileResourceResponseOutput) ToOSPolicyResourceFileResourceResponseOutput() OSPolicyResourceFileResourceResponseOutput {
	return o
}

func (o OSPolicyResourceFileResourceResponseOutput) ToOSPolicyResourceFileResourceResponseOutputWithContext(ctx context.Context) OSPolicyResourceFileResourceResponseOutput {
	return o
}

// A a file with this content. The size of the content is limited to 1024 characters.
func (o OSPolicyResourceFileResourceResponseOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResourceResponse) string { return v.Content }).(pulumi.StringOutput)
}

// A remote or local source.
func (o OSPolicyResourceFileResourceResponseOutput) File() OSPolicyResourceFileResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResourceResponse) OSPolicyResourceFileResponse { return v.File }).(OSPolicyResourceFileResponseOutput)
}

// The absolute path of the file within the VM.
func (o OSPolicyResourceFileResourceResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResourceResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
func (o OSPolicyResourceFileResourceResponseOutput) Permissions() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResourceResponse) string { return v.Permissions }).(pulumi.StringOutput)
}

// Desired state of the file.
func (o OSPolicyResourceFileResourceResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResourceResponse) string { return v.State }).(pulumi.StringOutput)
}

// A remote or local file.
type OSPolicyResourceFileResponse struct {
	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	AllowInsecure bool `pulumi:"allowInsecure"`
	// A Cloud Storage object.
	Gcs OSPolicyResourceFileGcsResponse `pulumi:"gcs"`
	// A local path within the VM to use.
	LocalPath string `pulumi:"localPath"`
	// A generic remote file.
	Remote OSPolicyResourceFileRemoteResponse `pulumi:"remote"`
}

// OSPolicyResourceFileResponseInput is an input type that accepts OSPolicyResourceFileResponseArgs and OSPolicyResourceFileResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileResponseInput` via:
//
//          OSPolicyResourceFileResponseArgs{...}
type OSPolicyResourceFileResponseInput interface {
	pulumi.Input

	ToOSPolicyResourceFileResponseOutput() OSPolicyResourceFileResponseOutput
	ToOSPolicyResourceFileResponseOutputWithContext(context.Context) OSPolicyResourceFileResponseOutput
}

// A remote or local file.
type OSPolicyResourceFileResponseArgs struct {
	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	AllowInsecure pulumi.BoolInput `pulumi:"allowInsecure"`
	// A Cloud Storage object.
	Gcs OSPolicyResourceFileGcsResponseInput `pulumi:"gcs"`
	// A local path within the VM to use.
	LocalPath pulumi.StringInput `pulumi:"localPath"`
	// A generic remote file.
	Remote OSPolicyResourceFileRemoteResponseInput `pulumi:"remote"`
}

func (OSPolicyResourceFileResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileResponse)(nil)).Elem()
}

func (i OSPolicyResourceFileResponseArgs) ToOSPolicyResourceFileResponseOutput() OSPolicyResourceFileResponseOutput {
	return i.ToOSPolicyResourceFileResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileResponseArgs) ToOSPolicyResourceFileResponseOutputWithContext(ctx context.Context) OSPolicyResourceFileResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileResponseOutput)
}

// A remote or local file.
type OSPolicyResourceFileResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileResponse)(nil)).Elem()
}

func (o OSPolicyResourceFileResponseOutput) ToOSPolicyResourceFileResponseOutput() OSPolicyResourceFileResponseOutput {
	return o
}

func (o OSPolicyResourceFileResponseOutput) ToOSPolicyResourceFileResponseOutputWithContext(ctx context.Context) OSPolicyResourceFileResponseOutput {
	return o
}

// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
func (o OSPolicyResourceFileResponseOutput) AllowInsecure() pulumi.BoolOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResponse) bool { return v.AllowInsecure }).(pulumi.BoolOutput)
}

// A Cloud Storage object.
func (o OSPolicyResourceFileResponseOutput) Gcs() OSPolicyResourceFileGcsResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResponse) OSPolicyResourceFileGcsResponse { return v.Gcs }).(OSPolicyResourceFileGcsResponseOutput)
}

// A local path within the VM to use.
func (o OSPolicyResourceFileResponseOutput) LocalPath() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResponse) string { return v.LocalPath }).(pulumi.StringOutput)
}

// A generic remote file.
func (o OSPolicyResourceFileResponseOutput) Remote() OSPolicyResourceFileRemoteResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResponse) OSPolicyResourceFileRemoteResponse { return v.Remote }).(OSPolicyResourceFileRemoteResponseOutput)
}

// Resource groups provide a mechanism to group OS policy resources. Resource groups enable OS policy authors to create a single OS policy to be applied to VMs running different operating Systems. When the OS policy is applied to a target VM, the appropriate resource group within the OS policy is selected based on the `OSFilter` specified within the resource group.
type OSPolicyResourceGroup struct {
	// Used to specify the OS filter for a resource group
	OsFilter *OSPolicyOSFilter `pulumi:"osFilter"`
	// List of resources configured for this resource group. The resources are executed in the exact order specified here.
	Resources []OSPolicyResource `pulumi:"resources"`
}

// OSPolicyResourceGroupInput is an input type that accepts OSPolicyResourceGroupArgs and OSPolicyResourceGroupOutput values.
// You can construct a concrete instance of `OSPolicyResourceGroupInput` via:
//
//          OSPolicyResourceGroupArgs{...}
type OSPolicyResourceGroupInput interface {
	pulumi.Input

	ToOSPolicyResourceGroupOutput() OSPolicyResourceGroupOutput
	ToOSPolicyResourceGroupOutputWithContext(context.Context) OSPolicyResourceGroupOutput
}

// Resource groups provide a mechanism to group OS policy resources. Resource groups enable OS policy authors to create a single OS policy to be applied to VMs running different operating Systems. When the OS policy is applied to a target VM, the appropriate resource group within the OS policy is selected based on the `OSFilter` specified within the resource group.
type OSPolicyResourceGroupArgs struct {
	// Used to specify the OS filter for a resource group
	OsFilter OSPolicyOSFilterPtrInput `pulumi:"osFilter"`
	// List of resources configured for this resource group. The resources are executed in the exact order specified here.
	Resources OSPolicyResourceArrayInput `pulumi:"resources"`
}

func (OSPolicyResourceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceGroup)(nil)).Elem()
}

func (i OSPolicyResourceGroupArgs) ToOSPolicyResourceGroupOutput() OSPolicyResourceGroupOutput {
	return i.ToOSPolicyResourceGroupOutputWithContext(context.Background())
}

func (i OSPolicyResourceGroupArgs) ToOSPolicyResourceGroupOutputWithContext(ctx context.Context) OSPolicyResourceGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceGroupOutput)
}

// OSPolicyResourceGroupArrayInput is an input type that accepts OSPolicyResourceGroupArray and OSPolicyResourceGroupArrayOutput values.
// You can construct a concrete instance of `OSPolicyResourceGroupArrayInput` via:
//
//          OSPolicyResourceGroupArray{ OSPolicyResourceGroupArgs{...} }
type OSPolicyResourceGroupArrayInput interface {
	pulumi.Input

	ToOSPolicyResourceGroupArrayOutput() OSPolicyResourceGroupArrayOutput
	ToOSPolicyResourceGroupArrayOutputWithContext(context.Context) OSPolicyResourceGroupArrayOutput
}

type OSPolicyResourceGroupArray []OSPolicyResourceGroupInput

func (OSPolicyResourceGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResourceGroup)(nil)).Elem()
}

func (i OSPolicyResourceGroupArray) ToOSPolicyResourceGroupArrayOutput() OSPolicyResourceGroupArrayOutput {
	return i.ToOSPolicyResourceGroupArrayOutputWithContext(context.Background())
}

func (i OSPolicyResourceGroupArray) ToOSPolicyResourceGroupArrayOutputWithContext(ctx context.Context) OSPolicyResourceGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceGroupArrayOutput)
}

// Resource groups provide a mechanism to group OS policy resources. Resource groups enable OS policy authors to create a single OS policy to be applied to VMs running different operating Systems. When the OS policy is applied to a target VM, the appropriate resource group within the OS policy is selected based on the `OSFilter` specified within the resource group.
type OSPolicyResourceGroupOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceGroup)(nil)).Elem()
}

func (o OSPolicyResourceGroupOutput) ToOSPolicyResourceGroupOutput() OSPolicyResourceGroupOutput {
	return o
}

func (o OSPolicyResourceGroupOutput) ToOSPolicyResourceGroupOutputWithContext(ctx context.Context) OSPolicyResourceGroupOutput {
	return o
}

// Used to specify the OS filter for a resource group
func (o OSPolicyResourceGroupOutput) OsFilter() OSPolicyOSFilterPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceGroup) *OSPolicyOSFilter { return v.OsFilter }).(OSPolicyOSFilterPtrOutput)
}

// List of resources configured for this resource group. The resources are executed in the exact order specified here.
func (o OSPolicyResourceGroupOutput) Resources() OSPolicyResourceArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceGroup) []OSPolicyResource { return v.Resources }).(OSPolicyResourceArrayOutput)
}

type OSPolicyResourceGroupArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResourceGroup)(nil)).Elem()
}

func (o OSPolicyResourceGroupArrayOutput) ToOSPolicyResourceGroupArrayOutput() OSPolicyResourceGroupArrayOutput {
	return o
}

func (o OSPolicyResourceGroupArrayOutput) ToOSPolicyResourceGroupArrayOutputWithContext(ctx context.Context) OSPolicyResourceGroupArrayOutput {
	return o
}

func (o OSPolicyResourceGroupArrayOutput) Index(i pulumi.IntInput) OSPolicyResourceGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyResourceGroup {
		return vs[0].([]OSPolicyResourceGroup)[vs[1].(int)]
	}).(OSPolicyResourceGroupOutput)
}

// Resource groups provide a mechanism to group OS policy resources. Resource groups enable OS policy authors to create a single OS policy to be applied to VMs running different operating Systems. When the OS policy is applied to a target VM, the appropriate resource group within the OS policy is selected based on the `OSFilter` specified within the resource group.
type OSPolicyResourceGroupResponse struct {
	// Used to specify the OS filter for a resource group
	OsFilter OSPolicyOSFilterResponse `pulumi:"osFilter"`
	// List of resources configured for this resource group. The resources are executed in the exact order specified here.
	Resources []OSPolicyResourceResponse `pulumi:"resources"`
}

// OSPolicyResourceGroupResponseInput is an input type that accepts OSPolicyResourceGroupResponseArgs and OSPolicyResourceGroupResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourceGroupResponseInput` via:
//
//          OSPolicyResourceGroupResponseArgs{...}
type OSPolicyResourceGroupResponseInput interface {
	pulumi.Input

	ToOSPolicyResourceGroupResponseOutput() OSPolicyResourceGroupResponseOutput
	ToOSPolicyResourceGroupResponseOutputWithContext(context.Context) OSPolicyResourceGroupResponseOutput
}

// Resource groups provide a mechanism to group OS policy resources. Resource groups enable OS policy authors to create a single OS policy to be applied to VMs running different operating Systems. When the OS policy is applied to a target VM, the appropriate resource group within the OS policy is selected based on the `OSFilter` specified within the resource group.
type OSPolicyResourceGroupResponseArgs struct {
	// Used to specify the OS filter for a resource group
	OsFilter OSPolicyOSFilterResponseInput `pulumi:"osFilter"`
	// List of resources configured for this resource group. The resources are executed in the exact order specified here.
	Resources OSPolicyResourceResponseArrayInput `pulumi:"resources"`
}

func (OSPolicyResourceGroupResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceGroupResponse)(nil)).Elem()
}

func (i OSPolicyResourceGroupResponseArgs) ToOSPolicyResourceGroupResponseOutput() OSPolicyResourceGroupResponseOutput {
	return i.ToOSPolicyResourceGroupResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourceGroupResponseArgs) ToOSPolicyResourceGroupResponseOutputWithContext(ctx context.Context) OSPolicyResourceGroupResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceGroupResponseOutput)
}

// OSPolicyResourceGroupResponseArrayInput is an input type that accepts OSPolicyResourceGroupResponseArray and OSPolicyResourceGroupResponseArrayOutput values.
// You can construct a concrete instance of `OSPolicyResourceGroupResponseArrayInput` via:
//
//          OSPolicyResourceGroupResponseArray{ OSPolicyResourceGroupResponseArgs{...} }
type OSPolicyResourceGroupResponseArrayInput interface {
	pulumi.Input

	ToOSPolicyResourceGroupResponseArrayOutput() OSPolicyResourceGroupResponseArrayOutput
	ToOSPolicyResourceGroupResponseArrayOutputWithContext(context.Context) OSPolicyResourceGroupResponseArrayOutput
}

type OSPolicyResourceGroupResponseArray []OSPolicyResourceGroupResponseInput

func (OSPolicyResourceGroupResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResourceGroupResponse)(nil)).Elem()
}

func (i OSPolicyResourceGroupResponseArray) ToOSPolicyResourceGroupResponseArrayOutput() OSPolicyResourceGroupResponseArrayOutput {
	return i.ToOSPolicyResourceGroupResponseArrayOutputWithContext(context.Background())
}

func (i OSPolicyResourceGroupResponseArray) ToOSPolicyResourceGroupResponseArrayOutputWithContext(ctx context.Context) OSPolicyResourceGroupResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceGroupResponseArrayOutput)
}

// Resource groups provide a mechanism to group OS policy resources. Resource groups enable OS policy authors to create a single OS policy to be applied to VMs running different operating Systems. When the OS policy is applied to a target VM, the appropriate resource group within the OS policy is selected based on the `OSFilter` specified within the resource group.
type OSPolicyResourceGroupResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceGroupResponse)(nil)).Elem()
}

func (o OSPolicyResourceGroupResponseOutput) ToOSPolicyResourceGroupResponseOutput() OSPolicyResourceGroupResponseOutput {
	return o
}

func (o OSPolicyResourceGroupResponseOutput) ToOSPolicyResourceGroupResponseOutputWithContext(ctx context.Context) OSPolicyResourceGroupResponseOutput {
	return o
}

// Used to specify the OS filter for a resource group
func (o OSPolicyResourceGroupResponseOutput) OsFilter() OSPolicyOSFilterResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceGroupResponse) OSPolicyOSFilterResponse { return v.OsFilter }).(OSPolicyOSFilterResponseOutput)
}

// List of resources configured for this resource group. The resources are executed in the exact order specified here.
func (o OSPolicyResourceGroupResponseOutput) Resources() OSPolicyResourceResponseArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceGroupResponse) []OSPolicyResourceResponse { return v.Resources }).(OSPolicyResourceResponseArrayOutput)
}

type OSPolicyResourceGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResourceGroupResponse)(nil)).Elem()
}

func (o OSPolicyResourceGroupResponseArrayOutput) ToOSPolicyResourceGroupResponseArrayOutput() OSPolicyResourceGroupResponseArrayOutput {
	return o
}

func (o OSPolicyResourceGroupResponseArrayOutput) ToOSPolicyResourceGroupResponseArrayOutputWithContext(ctx context.Context) OSPolicyResourceGroupResponseArrayOutput {
	return o
}

func (o OSPolicyResourceGroupResponseArrayOutput) Index(i pulumi.IntInput) OSPolicyResourceGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyResourceGroupResponse {
		return vs[0].([]OSPolicyResourceGroupResponse)[vs[1].(int)]
	}).(OSPolicyResourceGroupResponseOutput)
}

// A resource that manages a system package.
type OSPolicyResourcePackageResource struct {
	// A package managed by Apt.
	Apt *OSPolicyResourcePackageResourceAPT `pulumi:"apt"`
	// A deb package file.
	Deb *OSPolicyResourcePackageResourceDeb `pulumi:"deb"`
	// The desired state the agent should maintain for this package.
	DesiredState string `pulumi:"desiredState"`
	// A package managed by GooGet.
	Googet *OSPolicyResourcePackageResourceGooGet `pulumi:"googet"`
	// An MSI package.
	Msi *OSPolicyResourcePackageResourceMSI `pulumi:"msi"`
	// An rpm package file.
	Rpm *OSPolicyResourcePackageResourceRPM `pulumi:"rpm"`
	// A package managed by YUM.
	Yum *OSPolicyResourcePackageResourceYUM `pulumi:"yum"`
	// A package managed by Zypper.
	Zypper *OSPolicyResourcePackageResourceZypper `pulumi:"zypper"`
}

// OSPolicyResourcePackageResourceInput is an input type that accepts OSPolicyResourcePackageResourceArgs and OSPolicyResourcePackageResourceOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceInput` via:
//
//          OSPolicyResourcePackageResourceArgs{...}
type OSPolicyResourcePackageResourceInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceOutput() OSPolicyResourcePackageResourceOutput
	ToOSPolicyResourcePackageResourceOutputWithContext(context.Context) OSPolicyResourcePackageResourceOutput
}

// A resource that manages a system package.
type OSPolicyResourcePackageResourceArgs struct {
	// A package managed by Apt.
	Apt OSPolicyResourcePackageResourceAPTPtrInput `pulumi:"apt"`
	// A deb package file.
	Deb OSPolicyResourcePackageResourceDebPtrInput `pulumi:"deb"`
	// The desired state the agent should maintain for this package.
	DesiredState OSPolicyResourcePackageResourceDesiredState `pulumi:"desiredState"`
	// A package managed by GooGet.
	Googet OSPolicyResourcePackageResourceGooGetPtrInput `pulumi:"googet"`
	// An MSI package.
	Msi OSPolicyResourcePackageResourceMSIPtrInput `pulumi:"msi"`
	// An rpm package file.
	Rpm OSPolicyResourcePackageResourceRPMPtrInput `pulumi:"rpm"`
	// A package managed by YUM.
	Yum OSPolicyResourcePackageResourceYUMPtrInput `pulumi:"yum"`
	// A package managed by Zypper.
	Zypper OSPolicyResourcePackageResourceZypperPtrInput `pulumi:"zypper"`
}

func (OSPolicyResourcePackageResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResource)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceArgs) ToOSPolicyResourcePackageResourceOutput() OSPolicyResourcePackageResourceOutput {
	return i.ToOSPolicyResourcePackageResourceOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceArgs) ToOSPolicyResourcePackageResourceOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceOutput)
}

func (i OSPolicyResourcePackageResourceArgs) ToOSPolicyResourcePackageResourcePtrOutput() OSPolicyResourcePackageResourcePtrOutput {
	return i.ToOSPolicyResourcePackageResourcePtrOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceArgs) ToOSPolicyResourcePackageResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceOutput).ToOSPolicyResourcePackageResourcePtrOutputWithContext(ctx)
}

// OSPolicyResourcePackageResourcePtrInput is an input type that accepts OSPolicyResourcePackageResourceArgs, OSPolicyResourcePackageResourcePtr and OSPolicyResourcePackageResourcePtrOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourcePtrInput` via:
//
//          OSPolicyResourcePackageResourceArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourcePackageResourcePtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourcePtrOutput() OSPolicyResourcePackageResourcePtrOutput
	ToOSPolicyResourcePackageResourcePtrOutputWithContext(context.Context) OSPolicyResourcePackageResourcePtrOutput
}

type ospolicyResourcePackageResourcePtrType OSPolicyResourcePackageResourceArgs

func OSPolicyResourcePackageResourcePtr(v *OSPolicyResourcePackageResourceArgs) OSPolicyResourcePackageResourcePtrInput {
	return (*ospolicyResourcePackageResourcePtrType)(v)
}

func (*ospolicyResourcePackageResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResource)(nil)).Elem()
}

func (i *ospolicyResourcePackageResourcePtrType) ToOSPolicyResourcePackageResourcePtrOutput() OSPolicyResourcePackageResourcePtrOutput {
	return i.ToOSPolicyResourcePackageResourcePtrOutputWithContext(context.Background())
}

func (i *ospolicyResourcePackageResourcePtrType) ToOSPolicyResourcePackageResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourcePtrOutput)
}

// A resource that manages a system package.
type OSPolicyResourcePackageResourceOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResource)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceOutput) ToOSPolicyResourcePackageResourceOutput() OSPolicyResourcePackageResourceOutput {
	return o
}

func (o OSPolicyResourcePackageResourceOutput) ToOSPolicyResourcePackageResourceOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceOutput {
	return o
}

func (o OSPolicyResourcePackageResourceOutput) ToOSPolicyResourcePackageResourcePtrOutput() OSPolicyResourcePackageResourcePtrOutput {
	return o.ToOSPolicyResourcePackageResourcePtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceOutput) ToOSPolicyResourcePackageResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourcePtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) *OSPolicyResourcePackageResource {
		return &v
	}).(OSPolicyResourcePackageResourcePtrOutput)
}

// A package managed by Apt.
func (o OSPolicyResourcePackageResourceOutput) Apt() OSPolicyResourcePackageResourceAPTPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceAPT { return v.Apt }).(OSPolicyResourcePackageResourceAPTPtrOutput)
}

// A deb package file.
func (o OSPolicyResourcePackageResourceOutput) Deb() OSPolicyResourcePackageResourceDebPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceDeb { return v.Deb }).(OSPolicyResourcePackageResourceDebPtrOutput)
}

// The desired state the agent should maintain for this package.
func (o OSPolicyResourcePackageResourceOutput) DesiredState() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) string { return v.DesiredState }).(pulumi.StringOutput)
}

// A package managed by GooGet.
func (o OSPolicyResourcePackageResourceOutput) Googet() OSPolicyResourcePackageResourceGooGetPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceGooGet { return v.Googet }).(OSPolicyResourcePackageResourceGooGetPtrOutput)
}

// An MSI package.
func (o OSPolicyResourcePackageResourceOutput) Msi() OSPolicyResourcePackageResourceMSIPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceMSI { return v.Msi }).(OSPolicyResourcePackageResourceMSIPtrOutput)
}

// An rpm package file.
func (o OSPolicyResourcePackageResourceOutput) Rpm() OSPolicyResourcePackageResourceRPMPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceRPM { return v.Rpm }).(OSPolicyResourcePackageResourceRPMPtrOutput)
}

// A package managed by YUM.
func (o OSPolicyResourcePackageResourceOutput) Yum() OSPolicyResourcePackageResourceYUMPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceYUM { return v.Yum }).(OSPolicyResourcePackageResourceYUMPtrOutput)
}

// A package managed by Zypper.
func (o OSPolicyResourcePackageResourceOutput) Zypper() OSPolicyResourcePackageResourceZypperPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceZypper { return v.Zypper }).(OSPolicyResourcePackageResourceZypperPtrOutput)
}

type OSPolicyResourcePackageResourcePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResource)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourcePtrOutput) ToOSPolicyResourcePackageResourcePtrOutput() OSPolicyResourcePackageResourcePtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourcePtrOutput) ToOSPolicyResourcePackageResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourcePtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourcePtrOutput) Elem() OSPolicyResourcePackageResourceOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) OSPolicyResourcePackageResource { return *v }).(OSPolicyResourcePackageResourceOutput)
}

// A package managed by Apt.
func (o OSPolicyResourcePackageResourcePtrOutput) Apt() OSPolicyResourcePackageResourceAPTPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceAPT {
		if v == nil {
			return nil
		}
		return v.Apt
	}).(OSPolicyResourcePackageResourceAPTPtrOutput)
}

// A deb package file.
func (o OSPolicyResourcePackageResourcePtrOutput) Deb() OSPolicyResourcePackageResourceDebPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceDeb {
		if v == nil {
			return nil
		}
		return v.Deb
	}).(OSPolicyResourcePackageResourceDebPtrOutput)
}

// The desired state the agent should maintain for this package.
func (o OSPolicyResourcePackageResourcePtrOutput) DesiredState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) *string {
		if v == nil {
			return nil
		}
		return &v.DesiredState
	}).(pulumi.StringPtrOutput)
}

// A package managed by GooGet.
func (o OSPolicyResourcePackageResourcePtrOutput) Googet() OSPolicyResourcePackageResourceGooGetPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceGooGet {
		if v == nil {
			return nil
		}
		return v.Googet
	}).(OSPolicyResourcePackageResourceGooGetPtrOutput)
}

// An MSI package.
func (o OSPolicyResourcePackageResourcePtrOutput) Msi() OSPolicyResourcePackageResourceMSIPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceMSI {
		if v == nil {
			return nil
		}
		return v.Msi
	}).(OSPolicyResourcePackageResourceMSIPtrOutput)
}

// An rpm package file.
func (o OSPolicyResourcePackageResourcePtrOutput) Rpm() OSPolicyResourcePackageResourceRPMPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceRPM {
		if v == nil {
			return nil
		}
		return v.Rpm
	}).(OSPolicyResourcePackageResourceRPMPtrOutput)
}

// A package managed by YUM.
func (o OSPolicyResourcePackageResourcePtrOutput) Yum() OSPolicyResourcePackageResourceYUMPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceYUM {
		if v == nil {
			return nil
		}
		return v.Yum
	}).(OSPolicyResourcePackageResourceYUMPtrOutput)
}

// A package managed by Zypper.
func (o OSPolicyResourcePackageResourcePtrOutput) Zypper() OSPolicyResourcePackageResourceZypperPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceZypper {
		if v == nil {
			return nil
		}
		return v.Zypper
	}).(OSPolicyResourcePackageResourceZypperPtrOutput)
}

// A package managed by APT. - install: `apt-get update && apt-get -y install [name]` - remove: `apt-get -y remove [name]`
type OSPolicyResourcePackageResourceAPT struct {
	// Package name.
	Name string `pulumi:"name"`
}

// OSPolicyResourcePackageResourceAPTInput is an input type that accepts OSPolicyResourcePackageResourceAPTArgs and OSPolicyResourcePackageResourceAPTOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceAPTInput` via:
//
//          OSPolicyResourcePackageResourceAPTArgs{...}
type OSPolicyResourcePackageResourceAPTInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceAPTOutput() OSPolicyResourcePackageResourceAPTOutput
	ToOSPolicyResourcePackageResourceAPTOutputWithContext(context.Context) OSPolicyResourcePackageResourceAPTOutput
}

// A package managed by APT. - install: `apt-get update && apt-get -y install [name]` - remove: `apt-get -y remove [name]`
type OSPolicyResourcePackageResourceAPTArgs struct {
	// Package name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (OSPolicyResourcePackageResourceAPTArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceAPT)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceAPTArgs) ToOSPolicyResourcePackageResourceAPTOutput() OSPolicyResourcePackageResourceAPTOutput {
	return i.ToOSPolicyResourcePackageResourceAPTOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceAPTArgs) ToOSPolicyResourcePackageResourceAPTOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceAPTOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceAPTOutput)
}

func (i OSPolicyResourcePackageResourceAPTArgs) ToOSPolicyResourcePackageResourceAPTPtrOutput() OSPolicyResourcePackageResourceAPTPtrOutput {
	return i.ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceAPTArgs) ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceAPTPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceAPTOutput).ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(ctx)
}

// OSPolicyResourcePackageResourceAPTPtrInput is an input type that accepts OSPolicyResourcePackageResourceAPTArgs, OSPolicyResourcePackageResourceAPTPtr and OSPolicyResourcePackageResourceAPTPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceAPTPtrInput` via:
//
//          OSPolicyResourcePackageResourceAPTArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourcePackageResourceAPTPtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceAPTPtrOutput() OSPolicyResourcePackageResourceAPTPtrOutput
	ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(context.Context) OSPolicyResourcePackageResourceAPTPtrOutput
}

type ospolicyResourcePackageResourceAPTPtrType OSPolicyResourcePackageResourceAPTArgs

func OSPolicyResourcePackageResourceAPTPtr(v *OSPolicyResourcePackageResourceAPTArgs) OSPolicyResourcePackageResourceAPTPtrInput {
	return (*ospolicyResourcePackageResourceAPTPtrType)(v)
}

func (*ospolicyResourcePackageResourceAPTPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceAPT)(nil)).Elem()
}

func (i *ospolicyResourcePackageResourceAPTPtrType) ToOSPolicyResourcePackageResourceAPTPtrOutput() OSPolicyResourcePackageResourceAPTPtrOutput {
	return i.ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourcePackageResourceAPTPtrType) ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceAPTPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceAPTPtrOutput)
}

// A package managed by APT. - install: `apt-get update && apt-get -y install [name]` - remove: `apt-get -y remove [name]`
type OSPolicyResourcePackageResourceAPTOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceAPTOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceAPT)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceAPTOutput) ToOSPolicyResourcePackageResourceAPTOutput() OSPolicyResourcePackageResourceAPTOutput {
	return o
}

func (o OSPolicyResourcePackageResourceAPTOutput) ToOSPolicyResourcePackageResourceAPTOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceAPTOutput {
	return o
}

func (o OSPolicyResourcePackageResourceAPTOutput) ToOSPolicyResourcePackageResourceAPTPtrOutput() OSPolicyResourcePackageResourceAPTPtrOutput {
	return o.ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceAPTOutput) ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceAPTPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceAPT) *OSPolicyResourcePackageResourceAPT {
		return &v
	}).(OSPolicyResourcePackageResourceAPTPtrOutput)
}

// Package name.
func (o OSPolicyResourcePackageResourceAPTOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceAPT) string { return v.Name }).(pulumi.StringOutput)
}

type OSPolicyResourcePackageResourceAPTPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceAPTPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceAPT)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceAPTPtrOutput) ToOSPolicyResourcePackageResourceAPTPtrOutput() OSPolicyResourcePackageResourceAPTPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceAPTPtrOutput) ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceAPTPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceAPTPtrOutput) Elem() OSPolicyResourcePackageResourceAPTOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceAPT) OSPolicyResourcePackageResourceAPT { return *v }).(OSPolicyResourcePackageResourceAPTOutput)
}

// Package name.
func (o OSPolicyResourcePackageResourceAPTPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceAPT) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// A package managed by APT. - install: `apt-get update && apt-get -y install [name]` - remove: `apt-get -y remove [name]`
type OSPolicyResourcePackageResourceAPTResponse struct {
	// Package name.
	Name string `pulumi:"name"`
}

// OSPolicyResourcePackageResourceAPTResponseInput is an input type that accepts OSPolicyResourcePackageResourceAPTResponseArgs and OSPolicyResourcePackageResourceAPTResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceAPTResponseInput` via:
//
//          OSPolicyResourcePackageResourceAPTResponseArgs{...}
type OSPolicyResourcePackageResourceAPTResponseInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceAPTResponseOutput() OSPolicyResourcePackageResourceAPTResponseOutput
	ToOSPolicyResourcePackageResourceAPTResponseOutputWithContext(context.Context) OSPolicyResourcePackageResourceAPTResponseOutput
}

// A package managed by APT. - install: `apt-get update && apt-get -y install [name]` - remove: `apt-get -y remove [name]`
type OSPolicyResourcePackageResourceAPTResponseArgs struct {
	// Package name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (OSPolicyResourcePackageResourceAPTResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceAPTResponse)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceAPTResponseArgs) ToOSPolicyResourcePackageResourceAPTResponseOutput() OSPolicyResourcePackageResourceAPTResponseOutput {
	return i.ToOSPolicyResourcePackageResourceAPTResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceAPTResponseArgs) ToOSPolicyResourcePackageResourceAPTResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceAPTResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceAPTResponseOutput)
}

// A package managed by APT. - install: `apt-get update && apt-get -y install [name]` - remove: `apt-get -y remove [name]`
type OSPolicyResourcePackageResourceAPTResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceAPTResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceAPTResponse)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceAPTResponseOutput) ToOSPolicyResourcePackageResourceAPTResponseOutput() OSPolicyResourcePackageResourceAPTResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceAPTResponseOutput) ToOSPolicyResourcePackageResourceAPTResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceAPTResponseOutput {
	return o
}

// Package name.
func (o OSPolicyResourcePackageResourceAPTResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceAPTResponse) string { return v.Name }).(pulumi.StringOutput)
}

// A deb package file. dpkg packages only support INSTALLED state.
type OSPolicyResourcePackageResourceDeb struct {
	// Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb`
	PullDeps *bool `pulumi:"pullDeps"`
	// A deb package.
	Source OSPolicyResourceFile `pulumi:"source"`
}

// OSPolicyResourcePackageResourceDebInput is an input type that accepts OSPolicyResourcePackageResourceDebArgs and OSPolicyResourcePackageResourceDebOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceDebInput` via:
//
//          OSPolicyResourcePackageResourceDebArgs{...}
type OSPolicyResourcePackageResourceDebInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceDebOutput() OSPolicyResourcePackageResourceDebOutput
	ToOSPolicyResourcePackageResourceDebOutputWithContext(context.Context) OSPolicyResourcePackageResourceDebOutput
}

// A deb package file. dpkg packages only support INSTALLED state.
type OSPolicyResourcePackageResourceDebArgs struct {
	// Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb`
	PullDeps pulumi.BoolPtrInput `pulumi:"pullDeps"`
	// A deb package.
	Source OSPolicyResourceFileInput `pulumi:"source"`
}

func (OSPolicyResourcePackageResourceDebArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceDeb)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceDebArgs) ToOSPolicyResourcePackageResourceDebOutput() OSPolicyResourcePackageResourceDebOutput {
	return i.ToOSPolicyResourcePackageResourceDebOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceDebArgs) ToOSPolicyResourcePackageResourceDebOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDebOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceDebOutput)
}

func (i OSPolicyResourcePackageResourceDebArgs) ToOSPolicyResourcePackageResourceDebPtrOutput() OSPolicyResourcePackageResourceDebPtrOutput {
	return i.ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceDebArgs) ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDebPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceDebOutput).ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(ctx)
}

// OSPolicyResourcePackageResourceDebPtrInput is an input type that accepts OSPolicyResourcePackageResourceDebArgs, OSPolicyResourcePackageResourceDebPtr and OSPolicyResourcePackageResourceDebPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceDebPtrInput` via:
//
//          OSPolicyResourcePackageResourceDebArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourcePackageResourceDebPtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceDebPtrOutput() OSPolicyResourcePackageResourceDebPtrOutput
	ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(context.Context) OSPolicyResourcePackageResourceDebPtrOutput
}

type ospolicyResourcePackageResourceDebPtrType OSPolicyResourcePackageResourceDebArgs

func OSPolicyResourcePackageResourceDebPtr(v *OSPolicyResourcePackageResourceDebArgs) OSPolicyResourcePackageResourceDebPtrInput {
	return (*ospolicyResourcePackageResourceDebPtrType)(v)
}

func (*ospolicyResourcePackageResourceDebPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceDeb)(nil)).Elem()
}

func (i *ospolicyResourcePackageResourceDebPtrType) ToOSPolicyResourcePackageResourceDebPtrOutput() OSPolicyResourcePackageResourceDebPtrOutput {
	return i.ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourcePackageResourceDebPtrType) ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDebPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceDebPtrOutput)
}

// A deb package file. dpkg packages only support INSTALLED state.
type OSPolicyResourcePackageResourceDebOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceDebOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceDeb)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceDebOutput) ToOSPolicyResourcePackageResourceDebOutput() OSPolicyResourcePackageResourceDebOutput {
	return o
}

func (o OSPolicyResourcePackageResourceDebOutput) ToOSPolicyResourcePackageResourceDebOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDebOutput {
	return o
}

func (o OSPolicyResourcePackageResourceDebOutput) ToOSPolicyResourcePackageResourceDebPtrOutput() OSPolicyResourcePackageResourceDebPtrOutput {
	return o.ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceDebOutput) ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDebPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceDeb) *OSPolicyResourcePackageResourceDeb {
		return &v
	}).(OSPolicyResourcePackageResourceDebPtrOutput)
}

// Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb`
func (o OSPolicyResourcePackageResourceDebOutput) PullDeps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceDeb) *bool { return v.PullDeps }).(pulumi.BoolPtrOutput)
}

// A deb package.
func (o OSPolicyResourcePackageResourceDebOutput) Source() OSPolicyResourceFileOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceDeb) OSPolicyResourceFile { return v.Source }).(OSPolicyResourceFileOutput)
}

type OSPolicyResourcePackageResourceDebPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceDebPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceDeb)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceDebPtrOutput) ToOSPolicyResourcePackageResourceDebPtrOutput() OSPolicyResourcePackageResourceDebPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceDebPtrOutput) ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDebPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceDebPtrOutput) Elem() OSPolicyResourcePackageResourceDebOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceDeb) OSPolicyResourcePackageResourceDeb { return *v }).(OSPolicyResourcePackageResourceDebOutput)
}

// Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb`
func (o OSPolicyResourcePackageResourceDebPtrOutput) PullDeps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceDeb) *bool {
		if v == nil {
			return nil
		}
		return v.PullDeps
	}).(pulumi.BoolPtrOutput)
}

// A deb package.
func (o OSPolicyResourcePackageResourceDebPtrOutput) Source() OSPolicyResourceFilePtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceDeb) *OSPolicyResourceFile {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(OSPolicyResourceFilePtrOutput)
}

// A deb package file. dpkg packages only support INSTALLED state.
type OSPolicyResourcePackageResourceDebResponse struct {
	// Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb`
	PullDeps bool `pulumi:"pullDeps"`
	// A deb package.
	Source OSPolicyResourceFileResponse `pulumi:"source"`
}

// OSPolicyResourcePackageResourceDebResponseInput is an input type that accepts OSPolicyResourcePackageResourceDebResponseArgs and OSPolicyResourcePackageResourceDebResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceDebResponseInput` via:
//
//          OSPolicyResourcePackageResourceDebResponseArgs{...}
type OSPolicyResourcePackageResourceDebResponseInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceDebResponseOutput() OSPolicyResourcePackageResourceDebResponseOutput
	ToOSPolicyResourcePackageResourceDebResponseOutputWithContext(context.Context) OSPolicyResourcePackageResourceDebResponseOutput
}

// A deb package file. dpkg packages only support INSTALLED state.
type OSPolicyResourcePackageResourceDebResponseArgs struct {
	// Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb`
	PullDeps pulumi.BoolInput `pulumi:"pullDeps"`
	// A deb package.
	Source OSPolicyResourceFileResponseInput `pulumi:"source"`
}

func (OSPolicyResourcePackageResourceDebResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceDebResponse)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceDebResponseArgs) ToOSPolicyResourcePackageResourceDebResponseOutput() OSPolicyResourcePackageResourceDebResponseOutput {
	return i.ToOSPolicyResourcePackageResourceDebResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceDebResponseArgs) ToOSPolicyResourcePackageResourceDebResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDebResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceDebResponseOutput)
}

// A deb package file. dpkg packages only support INSTALLED state.
type OSPolicyResourcePackageResourceDebResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceDebResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceDebResponse)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceDebResponseOutput) ToOSPolicyResourcePackageResourceDebResponseOutput() OSPolicyResourcePackageResourceDebResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceDebResponseOutput) ToOSPolicyResourcePackageResourceDebResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDebResponseOutput {
	return o
}

// Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb`
func (o OSPolicyResourcePackageResourceDebResponseOutput) PullDeps() pulumi.BoolOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceDebResponse) bool { return v.PullDeps }).(pulumi.BoolOutput)
}

// A deb package.
func (o OSPolicyResourcePackageResourceDebResponseOutput) Source() OSPolicyResourceFileResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceDebResponse) OSPolicyResourceFileResponse { return v.Source }).(OSPolicyResourceFileResponseOutput)
}

// A package managed by GooGet. - install: `googet -noconfirm install package` - remove: `googet -noconfirm remove package`
type OSPolicyResourcePackageResourceGooGet struct {
	// Package name.
	Name string `pulumi:"name"`
}

// OSPolicyResourcePackageResourceGooGetInput is an input type that accepts OSPolicyResourcePackageResourceGooGetArgs and OSPolicyResourcePackageResourceGooGetOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceGooGetInput` via:
//
//          OSPolicyResourcePackageResourceGooGetArgs{...}
type OSPolicyResourcePackageResourceGooGetInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceGooGetOutput() OSPolicyResourcePackageResourceGooGetOutput
	ToOSPolicyResourcePackageResourceGooGetOutputWithContext(context.Context) OSPolicyResourcePackageResourceGooGetOutput
}

// A package managed by GooGet. - install: `googet -noconfirm install package` - remove: `googet -noconfirm remove package`
type OSPolicyResourcePackageResourceGooGetArgs struct {
	// Package name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (OSPolicyResourcePackageResourceGooGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceGooGet)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceGooGetArgs) ToOSPolicyResourcePackageResourceGooGetOutput() OSPolicyResourcePackageResourceGooGetOutput {
	return i.ToOSPolicyResourcePackageResourceGooGetOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceGooGetArgs) ToOSPolicyResourcePackageResourceGooGetOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceGooGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceGooGetOutput)
}

func (i OSPolicyResourcePackageResourceGooGetArgs) ToOSPolicyResourcePackageResourceGooGetPtrOutput() OSPolicyResourcePackageResourceGooGetPtrOutput {
	return i.ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceGooGetArgs) ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceGooGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceGooGetOutput).ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(ctx)
}

// OSPolicyResourcePackageResourceGooGetPtrInput is an input type that accepts OSPolicyResourcePackageResourceGooGetArgs, OSPolicyResourcePackageResourceGooGetPtr and OSPolicyResourcePackageResourceGooGetPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceGooGetPtrInput` via:
//
//          OSPolicyResourcePackageResourceGooGetArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourcePackageResourceGooGetPtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceGooGetPtrOutput() OSPolicyResourcePackageResourceGooGetPtrOutput
	ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(context.Context) OSPolicyResourcePackageResourceGooGetPtrOutput
}

type ospolicyResourcePackageResourceGooGetPtrType OSPolicyResourcePackageResourceGooGetArgs

func OSPolicyResourcePackageResourceGooGetPtr(v *OSPolicyResourcePackageResourceGooGetArgs) OSPolicyResourcePackageResourceGooGetPtrInput {
	return (*ospolicyResourcePackageResourceGooGetPtrType)(v)
}

func (*ospolicyResourcePackageResourceGooGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceGooGet)(nil)).Elem()
}

func (i *ospolicyResourcePackageResourceGooGetPtrType) ToOSPolicyResourcePackageResourceGooGetPtrOutput() OSPolicyResourcePackageResourceGooGetPtrOutput {
	return i.ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourcePackageResourceGooGetPtrType) ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceGooGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceGooGetPtrOutput)
}

// A package managed by GooGet. - install: `googet -noconfirm install package` - remove: `googet -noconfirm remove package`
type OSPolicyResourcePackageResourceGooGetOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceGooGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceGooGet)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceGooGetOutput) ToOSPolicyResourcePackageResourceGooGetOutput() OSPolicyResourcePackageResourceGooGetOutput {
	return o
}

func (o OSPolicyResourcePackageResourceGooGetOutput) ToOSPolicyResourcePackageResourceGooGetOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceGooGetOutput {
	return o
}

func (o OSPolicyResourcePackageResourceGooGetOutput) ToOSPolicyResourcePackageResourceGooGetPtrOutput() OSPolicyResourcePackageResourceGooGetPtrOutput {
	return o.ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceGooGetOutput) ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceGooGetPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceGooGet) *OSPolicyResourcePackageResourceGooGet {
		return &v
	}).(OSPolicyResourcePackageResourceGooGetPtrOutput)
}

// Package name.
func (o OSPolicyResourcePackageResourceGooGetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceGooGet) string { return v.Name }).(pulumi.StringOutput)
}

type OSPolicyResourcePackageResourceGooGetPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceGooGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceGooGet)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceGooGetPtrOutput) ToOSPolicyResourcePackageResourceGooGetPtrOutput() OSPolicyResourcePackageResourceGooGetPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceGooGetPtrOutput) ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceGooGetPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceGooGetPtrOutput) Elem() OSPolicyResourcePackageResourceGooGetOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceGooGet) OSPolicyResourcePackageResourceGooGet { return *v }).(OSPolicyResourcePackageResourceGooGetOutput)
}

// Package name.
func (o OSPolicyResourcePackageResourceGooGetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceGooGet) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// A package managed by GooGet. - install: `googet -noconfirm install package` - remove: `googet -noconfirm remove package`
type OSPolicyResourcePackageResourceGooGetResponse struct {
	// Package name.
	Name string `pulumi:"name"`
}

// OSPolicyResourcePackageResourceGooGetResponseInput is an input type that accepts OSPolicyResourcePackageResourceGooGetResponseArgs and OSPolicyResourcePackageResourceGooGetResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceGooGetResponseInput` via:
//
//          OSPolicyResourcePackageResourceGooGetResponseArgs{...}
type OSPolicyResourcePackageResourceGooGetResponseInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceGooGetResponseOutput() OSPolicyResourcePackageResourceGooGetResponseOutput
	ToOSPolicyResourcePackageResourceGooGetResponseOutputWithContext(context.Context) OSPolicyResourcePackageResourceGooGetResponseOutput
}

// A package managed by GooGet. - install: `googet -noconfirm install package` - remove: `googet -noconfirm remove package`
type OSPolicyResourcePackageResourceGooGetResponseArgs struct {
	// Package name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (OSPolicyResourcePackageResourceGooGetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceGooGetResponse)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceGooGetResponseArgs) ToOSPolicyResourcePackageResourceGooGetResponseOutput() OSPolicyResourcePackageResourceGooGetResponseOutput {
	return i.ToOSPolicyResourcePackageResourceGooGetResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceGooGetResponseArgs) ToOSPolicyResourcePackageResourceGooGetResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceGooGetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceGooGetResponseOutput)
}

// A package managed by GooGet. - install: `googet -noconfirm install package` - remove: `googet -noconfirm remove package`
type OSPolicyResourcePackageResourceGooGetResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceGooGetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceGooGetResponse)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceGooGetResponseOutput) ToOSPolicyResourcePackageResourceGooGetResponseOutput() OSPolicyResourcePackageResourceGooGetResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceGooGetResponseOutput) ToOSPolicyResourcePackageResourceGooGetResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceGooGetResponseOutput {
	return o
}

// Package name.
func (o OSPolicyResourcePackageResourceGooGetResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceGooGetResponse) string { return v.Name }).(pulumi.StringOutput)
}

// An MSI package. MSI packages only support INSTALLED state.
type OSPolicyResourcePackageResourceMSI struct {
	// Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`.
	Properties []string `pulumi:"properties"`
	// The MSI package.
	Source OSPolicyResourceFile `pulumi:"source"`
}

// OSPolicyResourcePackageResourceMSIInput is an input type that accepts OSPolicyResourcePackageResourceMSIArgs and OSPolicyResourcePackageResourceMSIOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceMSIInput` via:
//
//          OSPolicyResourcePackageResourceMSIArgs{...}
type OSPolicyResourcePackageResourceMSIInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceMSIOutput() OSPolicyResourcePackageResourceMSIOutput
	ToOSPolicyResourcePackageResourceMSIOutputWithContext(context.Context) OSPolicyResourcePackageResourceMSIOutput
}

// An MSI package. MSI packages only support INSTALLED state.
type OSPolicyResourcePackageResourceMSIArgs struct {
	// Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`.
	Properties pulumi.StringArrayInput `pulumi:"properties"`
	// The MSI package.
	Source OSPolicyResourceFileInput `pulumi:"source"`
}

func (OSPolicyResourcePackageResourceMSIArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceMSI)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceMSIArgs) ToOSPolicyResourcePackageResourceMSIOutput() OSPolicyResourcePackageResourceMSIOutput {
	return i.ToOSPolicyResourcePackageResourceMSIOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceMSIArgs) ToOSPolicyResourcePackageResourceMSIOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceMSIOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceMSIOutput)
}

func (i OSPolicyResourcePackageResourceMSIArgs) ToOSPolicyResourcePackageResourceMSIPtrOutput() OSPolicyResourcePackageResourceMSIPtrOutput {
	return i.ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceMSIArgs) ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceMSIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceMSIOutput).ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(ctx)
}

// OSPolicyResourcePackageResourceMSIPtrInput is an input type that accepts OSPolicyResourcePackageResourceMSIArgs, OSPolicyResourcePackageResourceMSIPtr and OSPolicyResourcePackageResourceMSIPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceMSIPtrInput` via:
//
//          OSPolicyResourcePackageResourceMSIArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourcePackageResourceMSIPtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceMSIPtrOutput() OSPolicyResourcePackageResourceMSIPtrOutput
	ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(context.Context) OSPolicyResourcePackageResourceMSIPtrOutput
}

type ospolicyResourcePackageResourceMSIPtrType OSPolicyResourcePackageResourceMSIArgs

func OSPolicyResourcePackageResourceMSIPtr(v *OSPolicyResourcePackageResourceMSIArgs) OSPolicyResourcePackageResourceMSIPtrInput {
	return (*ospolicyResourcePackageResourceMSIPtrType)(v)
}

func (*ospolicyResourcePackageResourceMSIPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceMSI)(nil)).Elem()
}

func (i *ospolicyResourcePackageResourceMSIPtrType) ToOSPolicyResourcePackageResourceMSIPtrOutput() OSPolicyResourcePackageResourceMSIPtrOutput {
	return i.ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourcePackageResourceMSIPtrType) ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceMSIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceMSIPtrOutput)
}

// An MSI package. MSI packages only support INSTALLED state.
type OSPolicyResourcePackageResourceMSIOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceMSIOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceMSI)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceMSIOutput) ToOSPolicyResourcePackageResourceMSIOutput() OSPolicyResourcePackageResourceMSIOutput {
	return o
}

func (o OSPolicyResourcePackageResourceMSIOutput) ToOSPolicyResourcePackageResourceMSIOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceMSIOutput {
	return o
}

func (o OSPolicyResourcePackageResourceMSIOutput) ToOSPolicyResourcePackageResourceMSIPtrOutput() OSPolicyResourcePackageResourceMSIPtrOutput {
	return o.ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceMSIOutput) ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceMSIPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceMSI) *OSPolicyResourcePackageResourceMSI {
		return &v
	}).(OSPolicyResourcePackageResourceMSIPtrOutput)
}

// Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`.
func (o OSPolicyResourcePackageResourceMSIOutput) Properties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceMSI) []string { return v.Properties }).(pulumi.StringArrayOutput)
}

// The MSI package.
func (o OSPolicyResourcePackageResourceMSIOutput) Source() OSPolicyResourceFileOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceMSI) OSPolicyResourceFile { return v.Source }).(OSPolicyResourceFileOutput)
}

type OSPolicyResourcePackageResourceMSIPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceMSIPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceMSI)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceMSIPtrOutput) ToOSPolicyResourcePackageResourceMSIPtrOutput() OSPolicyResourcePackageResourceMSIPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceMSIPtrOutput) ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceMSIPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceMSIPtrOutput) Elem() OSPolicyResourcePackageResourceMSIOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceMSI) OSPolicyResourcePackageResourceMSI { return *v }).(OSPolicyResourcePackageResourceMSIOutput)
}

// Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`.
func (o OSPolicyResourcePackageResourceMSIPtrOutput) Properties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceMSI) []string {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.StringArrayOutput)
}

// The MSI package.
func (o OSPolicyResourcePackageResourceMSIPtrOutput) Source() OSPolicyResourceFilePtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceMSI) *OSPolicyResourceFile {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(OSPolicyResourceFilePtrOutput)
}

// An MSI package. MSI packages only support INSTALLED state.
type OSPolicyResourcePackageResourceMSIResponse struct {
	// Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`.
	Properties []string `pulumi:"properties"`
	// The MSI package.
	Source OSPolicyResourceFileResponse `pulumi:"source"`
}

// OSPolicyResourcePackageResourceMSIResponseInput is an input type that accepts OSPolicyResourcePackageResourceMSIResponseArgs and OSPolicyResourcePackageResourceMSIResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceMSIResponseInput` via:
//
//          OSPolicyResourcePackageResourceMSIResponseArgs{...}
type OSPolicyResourcePackageResourceMSIResponseInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceMSIResponseOutput() OSPolicyResourcePackageResourceMSIResponseOutput
	ToOSPolicyResourcePackageResourceMSIResponseOutputWithContext(context.Context) OSPolicyResourcePackageResourceMSIResponseOutput
}

// An MSI package. MSI packages only support INSTALLED state.
type OSPolicyResourcePackageResourceMSIResponseArgs struct {
	// Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`.
	Properties pulumi.StringArrayInput `pulumi:"properties"`
	// The MSI package.
	Source OSPolicyResourceFileResponseInput `pulumi:"source"`
}

func (OSPolicyResourcePackageResourceMSIResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceMSIResponse)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceMSIResponseArgs) ToOSPolicyResourcePackageResourceMSIResponseOutput() OSPolicyResourcePackageResourceMSIResponseOutput {
	return i.ToOSPolicyResourcePackageResourceMSIResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceMSIResponseArgs) ToOSPolicyResourcePackageResourceMSIResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceMSIResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceMSIResponseOutput)
}

// An MSI package. MSI packages only support INSTALLED state.
type OSPolicyResourcePackageResourceMSIResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceMSIResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceMSIResponse)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceMSIResponseOutput) ToOSPolicyResourcePackageResourceMSIResponseOutput() OSPolicyResourcePackageResourceMSIResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceMSIResponseOutput) ToOSPolicyResourcePackageResourceMSIResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceMSIResponseOutput {
	return o
}

// Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`.
func (o OSPolicyResourcePackageResourceMSIResponseOutput) Properties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceMSIResponse) []string { return v.Properties }).(pulumi.StringArrayOutput)
}

// The MSI package.
func (o OSPolicyResourcePackageResourceMSIResponseOutput) Source() OSPolicyResourceFileResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceMSIResponse) OSPolicyResourceFileResponse { return v.Source }).(OSPolicyResourceFileResponseOutput)
}

// An RPM package file. RPM packages only support INSTALLED state.
type OSPolicyResourcePackageResourceRPM struct {
	// Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm`
	PullDeps *bool `pulumi:"pullDeps"`
	// An rpm package.
	Source OSPolicyResourceFile `pulumi:"source"`
}

// OSPolicyResourcePackageResourceRPMInput is an input type that accepts OSPolicyResourcePackageResourceRPMArgs and OSPolicyResourcePackageResourceRPMOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceRPMInput` via:
//
//          OSPolicyResourcePackageResourceRPMArgs{...}
type OSPolicyResourcePackageResourceRPMInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceRPMOutput() OSPolicyResourcePackageResourceRPMOutput
	ToOSPolicyResourcePackageResourceRPMOutputWithContext(context.Context) OSPolicyResourcePackageResourceRPMOutput
}

// An RPM package file. RPM packages only support INSTALLED state.
type OSPolicyResourcePackageResourceRPMArgs struct {
	// Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm`
	PullDeps pulumi.BoolPtrInput `pulumi:"pullDeps"`
	// An rpm package.
	Source OSPolicyResourceFileInput `pulumi:"source"`
}

func (OSPolicyResourcePackageResourceRPMArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceRPM)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceRPMArgs) ToOSPolicyResourcePackageResourceRPMOutput() OSPolicyResourcePackageResourceRPMOutput {
	return i.ToOSPolicyResourcePackageResourceRPMOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceRPMArgs) ToOSPolicyResourcePackageResourceRPMOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceRPMOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceRPMOutput)
}

func (i OSPolicyResourcePackageResourceRPMArgs) ToOSPolicyResourcePackageResourceRPMPtrOutput() OSPolicyResourcePackageResourceRPMPtrOutput {
	return i.ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceRPMArgs) ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceRPMPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceRPMOutput).ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(ctx)
}

// OSPolicyResourcePackageResourceRPMPtrInput is an input type that accepts OSPolicyResourcePackageResourceRPMArgs, OSPolicyResourcePackageResourceRPMPtr and OSPolicyResourcePackageResourceRPMPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceRPMPtrInput` via:
//
//          OSPolicyResourcePackageResourceRPMArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourcePackageResourceRPMPtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceRPMPtrOutput() OSPolicyResourcePackageResourceRPMPtrOutput
	ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(context.Context) OSPolicyResourcePackageResourceRPMPtrOutput
}

type ospolicyResourcePackageResourceRPMPtrType OSPolicyResourcePackageResourceRPMArgs

func OSPolicyResourcePackageResourceRPMPtr(v *OSPolicyResourcePackageResourceRPMArgs) OSPolicyResourcePackageResourceRPMPtrInput {
	return (*ospolicyResourcePackageResourceRPMPtrType)(v)
}

func (*ospolicyResourcePackageResourceRPMPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceRPM)(nil)).Elem()
}

func (i *ospolicyResourcePackageResourceRPMPtrType) ToOSPolicyResourcePackageResourceRPMPtrOutput() OSPolicyResourcePackageResourceRPMPtrOutput {
	return i.ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourcePackageResourceRPMPtrType) ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceRPMPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceRPMPtrOutput)
}

// An RPM package file. RPM packages only support INSTALLED state.
type OSPolicyResourcePackageResourceRPMOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceRPMOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceRPM)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceRPMOutput) ToOSPolicyResourcePackageResourceRPMOutput() OSPolicyResourcePackageResourceRPMOutput {
	return o
}

func (o OSPolicyResourcePackageResourceRPMOutput) ToOSPolicyResourcePackageResourceRPMOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceRPMOutput {
	return o
}

func (o OSPolicyResourcePackageResourceRPMOutput) ToOSPolicyResourcePackageResourceRPMPtrOutput() OSPolicyResourcePackageResourceRPMPtrOutput {
	return o.ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceRPMOutput) ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceRPMPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceRPM) *OSPolicyResourcePackageResourceRPM {
		return &v
	}).(OSPolicyResourcePackageResourceRPMPtrOutput)
}

// Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm`
func (o OSPolicyResourcePackageResourceRPMOutput) PullDeps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceRPM) *bool { return v.PullDeps }).(pulumi.BoolPtrOutput)
}

// An rpm package.
func (o OSPolicyResourcePackageResourceRPMOutput) Source() OSPolicyResourceFileOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceRPM) OSPolicyResourceFile { return v.Source }).(OSPolicyResourceFileOutput)
}

type OSPolicyResourcePackageResourceRPMPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceRPMPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceRPM)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceRPMPtrOutput) ToOSPolicyResourcePackageResourceRPMPtrOutput() OSPolicyResourcePackageResourceRPMPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceRPMPtrOutput) ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceRPMPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceRPMPtrOutput) Elem() OSPolicyResourcePackageResourceRPMOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceRPM) OSPolicyResourcePackageResourceRPM { return *v }).(OSPolicyResourcePackageResourceRPMOutput)
}

// Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm`
func (o OSPolicyResourcePackageResourceRPMPtrOutput) PullDeps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceRPM) *bool {
		if v == nil {
			return nil
		}
		return v.PullDeps
	}).(pulumi.BoolPtrOutput)
}

// An rpm package.
func (o OSPolicyResourcePackageResourceRPMPtrOutput) Source() OSPolicyResourceFilePtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceRPM) *OSPolicyResourceFile {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(OSPolicyResourceFilePtrOutput)
}

// An RPM package file. RPM packages only support INSTALLED state.
type OSPolicyResourcePackageResourceRPMResponse struct {
	// Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm`
	PullDeps bool `pulumi:"pullDeps"`
	// An rpm package.
	Source OSPolicyResourceFileResponse `pulumi:"source"`
}

// OSPolicyResourcePackageResourceRPMResponseInput is an input type that accepts OSPolicyResourcePackageResourceRPMResponseArgs and OSPolicyResourcePackageResourceRPMResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceRPMResponseInput` via:
//
//          OSPolicyResourcePackageResourceRPMResponseArgs{...}
type OSPolicyResourcePackageResourceRPMResponseInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceRPMResponseOutput() OSPolicyResourcePackageResourceRPMResponseOutput
	ToOSPolicyResourcePackageResourceRPMResponseOutputWithContext(context.Context) OSPolicyResourcePackageResourceRPMResponseOutput
}

// An RPM package file. RPM packages only support INSTALLED state.
type OSPolicyResourcePackageResourceRPMResponseArgs struct {
	// Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm`
	PullDeps pulumi.BoolInput `pulumi:"pullDeps"`
	// An rpm package.
	Source OSPolicyResourceFileResponseInput `pulumi:"source"`
}

func (OSPolicyResourcePackageResourceRPMResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceRPMResponse)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceRPMResponseArgs) ToOSPolicyResourcePackageResourceRPMResponseOutput() OSPolicyResourcePackageResourceRPMResponseOutput {
	return i.ToOSPolicyResourcePackageResourceRPMResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceRPMResponseArgs) ToOSPolicyResourcePackageResourceRPMResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceRPMResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceRPMResponseOutput)
}

// An RPM package file. RPM packages only support INSTALLED state.
type OSPolicyResourcePackageResourceRPMResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceRPMResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceRPMResponse)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceRPMResponseOutput) ToOSPolicyResourcePackageResourceRPMResponseOutput() OSPolicyResourcePackageResourceRPMResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceRPMResponseOutput) ToOSPolicyResourcePackageResourceRPMResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceRPMResponseOutput {
	return o
}

// Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm`
func (o OSPolicyResourcePackageResourceRPMResponseOutput) PullDeps() pulumi.BoolOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceRPMResponse) bool { return v.PullDeps }).(pulumi.BoolOutput)
}

// An rpm package.
func (o OSPolicyResourcePackageResourceRPMResponseOutput) Source() OSPolicyResourceFileResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceRPMResponse) OSPolicyResourceFileResponse { return v.Source }).(OSPolicyResourceFileResponseOutput)
}

// A resource that manages a system package.
type OSPolicyResourcePackageResourceResponse struct {
	// A package managed by Apt.
	Apt OSPolicyResourcePackageResourceAPTResponse `pulumi:"apt"`
	// A deb package file.
	Deb OSPolicyResourcePackageResourceDebResponse `pulumi:"deb"`
	// The desired state the agent should maintain for this package.
	DesiredState string `pulumi:"desiredState"`
	// A package managed by GooGet.
	Googet OSPolicyResourcePackageResourceGooGetResponse `pulumi:"googet"`
	// An MSI package.
	Msi OSPolicyResourcePackageResourceMSIResponse `pulumi:"msi"`
	// An rpm package file.
	Rpm OSPolicyResourcePackageResourceRPMResponse `pulumi:"rpm"`
	// A package managed by YUM.
	Yum OSPolicyResourcePackageResourceYUMResponse `pulumi:"yum"`
	// A package managed by Zypper.
	Zypper OSPolicyResourcePackageResourceZypperResponse `pulumi:"zypper"`
}

// OSPolicyResourcePackageResourceResponseInput is an input type that accepts OSPolicyResourcePackageResourceResponseArgs and OSPolicyResourcePackageResourceResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceResponseInput` via:
//
//          OSPolicyResourcePackageResourceResponseArgs{...}
type OSPolicyResourcePackageResourceResponseInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceResponseOutput() OSPolicyResourcePackageResourceResponseOutput
	ToOSPolicyResourcePackageResourceResponseOutputWithContext(context.Context) OSPolicyResourcePackageResourceResponseOutput
}

// A resource that manages a system package.
type OSPolicyResourcePackageResourceResponseArgs struct {
	// A package managed by Apt.
	Apt OSPolicyResourcePackageResourceAPTResponseInput `pulumi:"apt"`
	// A deb package file.
	Deb OSPolicyResourcePackageResourceDebResponseInput `pulumi:"deb"`
	// The desired state the agent should maintain for this package.
	DesiredState pulumi.StringInput `pulumi:"desiredState"`
	// A package managed by GooGet.
	Googet OSPolicyResourcePackageResourceGooGetResponseInput `pulumi:"googet"`
	// An MSI package.
	Msi OSPolicyResourcePackageResourceMSIResponseInput `pulumi:"msi"`
	// An rpm package file.
	Rpm OSPolicyResourcePackageResourceRPMResponseInput `pulumi:"rpm"`
	// A package managed by YUM.
	Yum OSPolicyResourcePackageResourceYUMResponseInput `pulumi:"yum"`
	// A package managed by Zypper.
	Zypper OSPolicyResourcePackageResourceZypperResponseInput `pulumi:"zypper"`
}

func (OSPolicyResourcePackageResourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceResponse)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceResponseArgs) ToOSPolicyResourcePackageResourceResponseOutput() OSPolicyResourcePackageResourceResponseOutput {
	return i.ToOSPolicyResourcePackageResourceResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceResponseArgs) ToOSPolicyResourcePackageResourceResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceResponseOutput)
}

// A resource that manages a system package.
type OSPolicyResourcePackageResourceResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceResponse)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceResponseOutput) ToOSPolicyResourcePackageResourceResponseOutput() OSPolicyResourcePackageResourceResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceResponseOutput) ToOSPolicyResourcePackageResourceResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceResponseOutput {
	return o
}

// A package managed by Apt.
func (o OSPolicyResourcePackageResourceResponseOutput) Apt() OSPolicyResourcePackageResourceAPTResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceResponse) OSPolicyResourcePackageResourceAPTResponse {
		return v.Apt
	}).(OSPolicyResourcePackageResourceAPTResponseOutput)
}

// A deb package file.
func (o OSPolicyResourcePackageResourceResponseOutput) Deb() OSPolicyResourcePackageResourceDebResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceResponse) OSPolicyResourcePackageResourceDebResponse {
		return v.Deb
	}).(OSPolicyResourcePackageResourceDebResponseOutput)
}

// The desired state the agent should maintain for this package.
func (o OSPolicyResourcePackageResourceResponseOutput) DesiredState() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceResponse) string { return v.DesiredState }).(pulumi.StringOutput)
}

// A package managed by GooGet.
func (o OSPolicyResourcePackageResourceResponseOutput) Googet() OSPolicyResourcePackageResourceGooGetResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceResponse) OSPolicyResourcePackageResourceGooGetResponse {
		return v.Googet
	}).(OSPolicyResourcePackageResourceGooGetResponseOutput)
}

// An MSI package.
func (o OSPolicyResourcePackageResourceResponseOutput) Msi() OSPolicyResourcePackageResourceMSIResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceResponse) OSPolicyResourcePackageResourceMSIResponse {
		return v.Msi
	}).(OSPolicyResourcePackageResourceMSIResponseOutput)
}

// An rpm package file.
func (o OSPolicyResourcePackageResourceResponseOutput) Rpm() OSPolicyResourcePackageResourceRPMResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceResponse) OSPolicyResourcePackageResourceRPMResponse {
		return v.Rpm
	}).(OSPolicyResourcePackageResourceRPMResponseOutput)
}

// A package managed by YUM.
func (o OSPolicyResourcePackageResourceResponseOutput) Yum() OSPolicyResourcePackageResourceYUMResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceResponse) OSPolicyResourcePackageResourceYUMResponse {
		return v.Yum
	}).(OSPolicyResourcePackageResourceYUMResponseOutput)
}

// A package managed by Zypper.
func (o OSPolicyResourcePackageResourceResponseOutput) Zypper() OSPolicyResourcePackageResourceZypperResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceResponse) OSPolicyResourcePackageResourceZypperResponse {
		return v.Zypper
	}).(OSPolicyResourcePackageResourceZypperResponseOutput)
}

// A package managed by YUM. - install: `yum -y install package` - remove: `yum -y remove package`
type OSPolicyResourcePackageResourceYUM struct {
	// Package name.
	Name string `pulumi:"name"`
}

// OSPolicyResourcePackageResourceYUMInput is an input type that accepts OSPolicyResourcePackageResourceYUMArgs and OSPolicyResourcePackageResourceYUMOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceYUMInput` via:
//
//          OSPolicyResourcePackageResourceYUMArgs{...}
type OSPolicyResourcePackageResourceYUMInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceYUMOutput() OSPolicyResourcePackageResourceYUMOutput
	ToOSPolicyResourcePackageResourceYUMOutputWithContext(context.Context) OSPolicyResourcePackageResourceYUMOutput
}

// A package managed by YUM. - install: `yum -y install package` - remove: `yum -y remove package`
type OSPolicyResourcePackageResourceYUMArgs struct {
	// Package name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (OSPolicyResourcePackageResourceYUMArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceYUM)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceYUMArgs) ToOSPolicyResourcePackageResourceYUMOutput() OSPolicyResourcePackageResourceYUMOutput {
	return i.ToOSPolicyResourcePackageResourceYUMOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceYUMArgs) ToOSPolicyResourcePackageResourceYUMOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceYUMOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceYUMOutput)
}

func (i OSPolicyResourcePackageResourceYUMArgs) ToOSPolicyResourcePackageResourceYUMPtrOutput() OSPolicyResourcePackageResourceYUMPtrOutput {
	return i.ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceYUMArgs) ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceYUMPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceYUMOutput).ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(ctx)
}

// OSPolicyResourcePackageResourceYUMPtrInput is an input type that accepts OSPolicyResourcePackageResourceYUMArgs, OSPolicyResourcePackageResourceYUMPtr and OSPolicyResourcePackageResourceYUMPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceYUMPtrInput` via:
//
//          OSPolicyResourcePackageResourceYUMArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourcePackageResourceYUMPtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceYUMPtrOutput() OSPolicyResourcePackageResourceYUMPtrOutput
	ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(context.Context) OSPolicyResourcePackageResourceYUMPtrOutput
}

type ospolicyResourcePackageResourceYUMPtrType OSPolicyResourcePackageResourceYUMArgs

func OSPolicyResourcePackageResourceYUMPtr(v *OSPolicyResourcePackageResourceYUMArgs) OSPolicyResourcePackageResourceYUMPtrInput {
	return (*ospolicyResourcePackageResourceYUMPtrType)(v)
}

func (*ospolicyResourcePackageResourceYUMPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceYUM)(nil)).Elem()
}

func (i *ospolicyResourcePackageResourceYUMPtrType) ToOSPolicyResourcePackageResourceYUMPtrOutput() OSPolicyResourcePackageResourceYUMPtrOutput {
	return i.ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourcePackageResourceYUMPtrType) ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceYUMPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceYUMPtrOutput)
}

// A package managed by YUM. - install: `yum -y install package` - remove: `yum -y remove package`
type OSPolicyResourcePackageResourceYUMOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceYUMOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceYUM)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceYUMOutput) ToOSPolicyResourcePackageResourceYUMOutput() OSPolicyResourcePackageResourceYUMOutput {
	return o
}

func (o OSPolicyResourcePackageResourceYUMOutput) ToOSPolicyResourcePackageResourceYUMOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceYUMOutput {
	return o
}

func (o OSPolicyResourcePackageResourceYUMOutput) ToOSPolicyResourcePackageResourceYUMPtrOutput() OSPolicyResourcePackageResourceYUMPtrOutput {
	return o.ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceYUMOutput) ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceYUMPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceYUM) *OSPolicyResourcePackageResourceYUM {
		return &v
	}).(OSPolicyResourcePackageResourceYUMPtrOutput)
}

// Package name.
func (o OSPolicyResourcePackageResourceYUMOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceYUM) string { return v.Name }).(pulumi.StringOutput)
}

type OSPolicyResourcePackageResourceYUMPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceYUMPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceYUM)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceYUMPtrOutput) ToOSPolicyResourcePackageResourceYUMPtrOutput() OSPolicyResourcePackageResourceYUMPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceYUMPtrOutput) ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceYUMPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceYUMPtrOutput) Elem() OSPolicyResourcePackageResourceYUMOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceYUM) OSPolicyResourcePackageResourceYUM { return *v }).(OSPolicyResourcePackageResourceYUMOutput)
}

// Package name.
func (o OSPolicyResourcePackageResourceYUMPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceYUM) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// A package managed by YUM. - install: `yum -y install package` - remove: `yum -y remove package`
type OSPolicyResourcePackageResourceYUMResponse struct {
	// Package name.
	Name string `pulumi:"name"`
}

// OSPolicyResourcePackageResourceYUMResponseInput is an input type that accepts OSPolicyResourcePackageResourceYUMResponseArgs and OSPolicyResourcePackageResourceYUMResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceYUMResponseInput` via:
//
//          OSPolicyResourcePackageResourceYUMResponseArgs{...}
type OSPolicyResourcePackageResourceYUMResponseInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceYUMResponseOutput() OSPolicyResourcePackageResourceYUMResponseOutput
	ToOSPolicyResourcePackageResourceYUMResponseOutputWithContext(context.Context) OSPolicyResourcePackageResourceYUMResponseOutput
}

// A package managed by YUM. - install: `yum -y install package` - remove: `yum -y remove package`
type OSPolicyResourcePackageResourceYUMResponseArgs struct {
	// Package name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (OSPolicyResourcePackageResourceYUMResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceYUMResponse)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceYUMResponseArgs) ToOSPolicyResourcePackageResourceYUMResponseOutput() OSPolicyResourcePackageResourceYUMResponseOutput {
	return i.ToOSPolicyResourcePackageResourceYUMResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceYUMResponseArgs) ToOSPolicyResourcePackageResourceYUMResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceYUMResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceYUMResponseOutput)
}

// A package managed by YUM. - install: `yum -y install package` - remove: `yum -y remove package`
type OSPolicyResourcePackageResourceYUMResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceYUMResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceYUMResponse)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceYUMResponseOutput) ToOSPolicyResourcePackageResourceYUMResponseOutput() OSPolicyResourcePackageResourceYUMResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceYUMResponseOutput) ToOSPolicyResourcePackageResourceYUMResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceYUMResponseOutput {
	return o
}

// Package name.
func (o OSPolicyResourcePackageResourceYUMResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceYUMResponse) string { return v.Name }).(pulumi.StringOutput)
}

// A package managed by Zypper. - install: `zypper -y install package` - remove: `zypper -y rm package`
type OSPolicyResourcePackageResourceZypper struct {
	// Package name.
	Name string `pulumi:"name"`
}

// OSPolicyResourcePackageResourceZypperInput is an input type that accepts OSPolicyResourcePackageResourceZypperArgs and OSPolicyResourcePackageResourceZypperOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceZypperInput` via:
//
//          OSPolicyResourcePackageResourceZypperArgs{...}
type OSPolicyResourcePackageResourceZypperInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceZypperOutput() OSPolicyResourcePackageResourceZypperOutput
	ToOSPolicyResourcePackageResourceZypperOutputWithContext(context.Context) OSPolicyResourcePackageResourceZypperOutput
}

// A package managed by Zypper. - install: `zypper -y install package` - remove: `zypper -y rm package`
type OSPolicyResourcePackageResourceZypperArgs struct {
	// Package name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (OSPolicyResourcePackageResourceZypperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceZypper)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceZypperArgs) ToOSPolicyResourcePackageResourceZypperOutput() OSPolicyResourcePackageResourceZypperOutput {
	return i.ToOSPolicyResourcePackageResourceZypperOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceZypperArgs) ToOSPolicyResourcePackageResourceZypperOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceZypperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceZypperOutput)
}

func (i OSPolicyResourcePackageResourceZypperArgs) ToOSPolicyResourcePackageResourceZypperPtrOutput() OSPolicyResourcePackageResourceZypperPtrOutput {
	return i.ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceZypperArgs) ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceZypperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceZypperOutput).ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(ctx)
}

// OSPolicyResourcePackageResourceZypperPtrInput is an input type that accepts OSPolicyResourcePackageResourceZypperArgs, OSPolicyResourcePackageResourceZypperPtr and OSPolicyResourcePackageResourceZypperPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceZypperPtrInput` via:
//
//          OSPolicyResourcePackageResourceZypperArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourcePackageResourceZypperPtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceZypperPtrOutput() OSPolicyResourcePackageResourceZypperPtrOutput
	ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(context.Context) OSPolicyResourcePackageResourceZypperPtrOutput
}

type ospolicyResourcePackageResourceZypperPtrType OSPolicyResourcePackageResourceZypperArgs

func OSPolicyResourcePackageResourceZypperPtr(v *OSPolicyResourcePackageResourceZypperArgs) OSPolicyResourcePackageResourceZypperPtrInput {
	return (*ospolicyResourcePackageResourceZypperPtrType)(v)
}

func (*ospolicyResourcePackageResourceZypperPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceZypper)(nil)).Elem()
}

func (i *ospolicyResourcePackageResourceZypperPtrType) ToOSPolicyResourcePackageResourceZypperPtrOutput() OSPolicyResourcePackageResourceZypperPtrOutput {
	return i.ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourcePackageResourceZypperPtrType) ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceZypperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceZypperPtrOutput)
}

// A package managed by Zypper. - install: `zypper -y install package` - remove: `zypper -y rm package`
type OSPolicyResourcePackageResourceZypperOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceZypperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceZypper)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceZypperOutput) ToOSPolicyResourcePackageResourceZypperOutput() OSPolicyResourcePackageResourceZypperOutput {
	return o
}

func (o OSPolicyResourcePackageResourceZypperOutput) ToOSPolicyResourcePackageResourceZypperOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceZypperOutput {
	return o
}

func (o OSPolicyResourcePackageResourceZypperOutput) ToOSPolicyResourcePackageResourceZypperPtrOutput() OSPolicyResourcePackageResourceZypperPtrOutput {
	return o.ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceZypperOutput) ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceZypperPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceZypper) *OSPolicyResourcePackageResourceZypper {
		return &v
	}).(OSPolicyResourcePackageResourceZypperPtrOutput)
}

// Package name.
func (o OSPolicyResourcePackageResourceZypperOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceZypper) string { return v.Name }).(pulumi.StringOutput)
}

type OSPolicyResourcePackageResourceZypperPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceZypperPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceZypper)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceZypperPtrOutput) ToOSPolicyResourcePackageResourceZypperPtrOutput() OSPolicyResourcePackageResourceZypperPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceZypperPtrOutput) ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceZypperPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceZypperPtrOutput) Elem() OSPolicyResourcePackageResourceZypperOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceZypper) OSPolicyResourcePackageResourceZypper { return *v }).(OSPolicyResourcePackageResourceZypperOutput)
}

// Package name.
func (o OSPolicyResourcePackageResourceZypperPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceZypper) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// A package managed by Zypper. - install: `zypper -y install package` - remove: `zypper -y rm package`
type OSPolicyResourcePackageResourceZypperResponse struct {
	// Package name.
	Name string `pulumi:"name"`
}

// OSPolicyResourcePackageResourceZypperResponseInput is an input type that accepts OSPolicyResourcePackageResourceZypperResponseArgs and OSPolicyResourcePackageResourceZypperResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceZypperResponseInput` via:
//
//          OSPolicyResourcePackageResourceZypperResponseArgs{...}
type OSPolicyResourcePackageResourceZypperResponseInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceZypperResponseOutput() OSPolicyResourcePackageResourceZypperResponseOutput
	ToOSPolicyResourcePackageResourceZypperResponseOutputWithContext(context.Context) OSPolicyResourcePackageResourceZypperResponseOutput
}

// A package managed by Zypper. - install: `zypper -y install package` - remove: `zypper -y rm package`
type OSPolicyResourcePackageResourceZypperResponseArgs struct {
	// Package name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (OSPolicyResourcePackageResourceZypperResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceZypperResponse)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceZypperResponseArgs) ToOSPolicyResourcePackageResourceZypperResponseOutput() OSPolicyResourcePackageResourceZypperResponseOutput {
	return i.ToOSPolicyResourcePackageResourceZypperResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceZypperResponseArgs) ToOSPolicyResourcePackageResourceZypperResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceZypperResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceZypperResponseOutput)
}

// A package managed by Zypper. - install: `zypper -y install package` - remove: `zypper -y rm package`
type OSPolicyResourcePackageResourceZypperResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceZypperResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceZypperResponse)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceZypperResponseOutput) ToOSPolicyResourcePackageResourceZypperResponseOutput() OSPolicyResourcePackageResourceZypperResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceZypperResponseOutput) ToOSPolicyResourcePackageResourceZypperResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceZypperResponseOutput {
	return o
}

// Package name.
func (o OSPolicyResourcePackageResourceZypperResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceZypperResponse) string { return v.Name }).(pulumi.StringOutput)
}

// A resource that manages a package repository.
type OSPolicyResourceRepositoryResource struct {
	// An Apt Repository.
	Apt *OSPolicyResourceRepositoryResourceAptRepository `pulumi:"apt"`
	// A Goo Repository.
	Goo *OSPolicyResourceRepositoryResourceGooRepository `pulumi:"goo"`
	// A Yum Repository.
	Yum *OSPolicyResourceRepositoryResourceYumRepository `pulumi:"yum"`
	// A Zypper Repository.
	Zypper *OSPolicyResourceRepositoryResourceZypperRepository `pulumi:"zypper"`
}

// OSPolicyResourceRepositoryResourceInput is an input type that accepts OSPolicyResourceRepositoryResourceArgs and OSPolicyResourceRepositoryResourceOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceInput` via:
//
//          OSPolicyResourceRepositoryResourceArgs{...}
type OSPolicyResourceRepositoryResourceInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceOutput() OSPolicyResourceRepositoryResourceOutput
	ToOSPolicyResourceRepositoryResourceOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceOutput
}

// A resource that manages a package repository.
type OSPolicyResourceRepositoryResourceArgs struct {
	// An Apt Repository.
	Apt OSPolicyResourceRepositoryResourceAptRepositoryPtrInput `pulumi:"apt"`
	// A Goo Repository.
	Goo OSPolicyResourceRepositoryResourceGooRepositoryPtrInput `pulumi:"goo"`
	// A Yum Repository.
	Yum OSPolicyResourceRepositoryResourceYumRepositoryPtrInput `pulumi:"yum"`
	// A Zypper Repository.
	Zypper OSPolicyResourceRepositoryResourceZypperRepositoryPtrInput `pulumi:"zypper"`
}

func (OSPolicyResourceRepositoryResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResource)(nil)).Elem()
}

func (i OSPolicyResourceRepositoryResourceArgs) ToOSPolicyResourceRepositoryResourceOutput() OSPolicyResourceRepositoryResourceOutput {
	return i.ToOSPolicyResourceRepositoryResourceOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceArgs) ToOSPolicyResourceRepositoryResourceOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceOutput)
}

func (i OSPolicyResourceRepositoryResourceArgs) ToOSPolicyResourceRepositoryResourcePtrOutput() OSPolicyResourceRepositoryResourcePtrOutput {
	return i.ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceArgs) ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceOutput).ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(ctx)
}

// OSPolicyResourceRepositoryResourcePtrInput is an input type that accepts OSPolicyResourceRepositoryResourceArgs, OSPolicyResourceRepositoryResourcePtr and OSPolicyResourceRepositoryResourcePtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourcePtrInput` via:
//
//          OSPolicyResourceRepositoryResourceArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourceRepositoryResourcePtrInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourcePtrOutput() OSPolicyResourceRepositoryResourcePtrOutput
	ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(context.Context) OSPolicyResourceRepositoryResourcePtrOutput
}

type ospolicyResourceRepositoryResourcePtrType OSPolicyResourceRepositoryResourceArgs

func OSPolicyResourceRepositoryResourcePtr(v *OSPolicyResourceRepositoryResourceArgs) OSPolicyResourceRepositoryResourcePtrInput {
	return (*ospolicyResourceRepositoryResourcePtrType)(v)
}

func (*ospolicyResourceRepositoryResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResource)(nil)).Elem()
}

func (i *ospolicyResourceRepositoryResourcePtrType) ToOSPolicyResourceRepositoryResourcePtrOutput() OSPolicyResourceRepositoryResourcePtrOutput {
	return i.ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceRepositoryResourcePtrType) ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourcePtrOutput)
}

// A resource that manages a package repository.
type OSPolicyResourceRepositoryResourceOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResource)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceOutput) ToOSPolicyResourceRepositoryResourceOutput() OSPolicyResourceRepositoryResourceOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceOutput) ToOSPolicyResourceRepositoryResourceOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceOutput) ToOSPolicyResourceRepositoryResourcePtrOutput() OSPolicyResourceRepositoryResourcePtrOutput {
	return o.ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceRepositoryResourceOutput) ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourcePtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResource {
		return &v
	}).(OSPolicyResourceRepositoryResourcePtrOutput)
}

// An Apt Repository.
func (o OSPolicyResourceRepositoryResourceOutput) Apt() OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResourceAptRepository {
		return v.Apt
	}).(OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput)
}

// A Goo Repository.
func (o OSPolicyResourceRepositoryResourceOutput) Goo() OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResourceGooRepository {
		return v.Goo
	}).(OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput)
}

// A Yum Repository.
func (o OSPolicyResourceRepositoryResourceOutput) Yum() OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResourceYumRepository {
		return v.Yum
	}).(OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput)
}

// A Zypper Repository.
func (o OSPolicyResourceRepositoryResourceOutput) Zypper() OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResourceZypperRepository {
		return v.Zypper
	}).(OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput)
}

type OSPolicyResourceRepositoryResourcePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResource)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourcePtrOutput) ToOSPolicyResourceRepositoryResourcePtrOutput() OSPolicyResourceRepositoryResourcePtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourcePtrOutput) ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourcePtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourcePtrOutput) Elem() OSPolicyResourceRepositoryResourceOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResource) OSPolicyResourceRepositoryResource { return *v }).(OSPolicyResourceRepositoryResourceOutput)
}

// An Apt Repository.
func (o OSPolicyResourceRepositoryResourcePtrOutput) Apt() OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResourceAptRepository {
		if v == nil {
			return nil
		}
		return v.Apt
	}).(OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput)
}

// A Goo Repository.
func (o OSPolicyResourceRepositoryResourcePtrOutput) Goo() OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResourceGooRepository {
		if v == nil {
			return nil
		}
		return v.Goo
	}).(OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput)
}

// A Yum Repository.
func (o OSPolicyResourceRepositoryResourcePtrOutput) Yum() OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResourceYumRepository {
		if v == nil {
			return nil
		}
		return v.Yum
	}).(OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput)
}

// A Zypper Repository.
func (o OSPolicyResourceRepositoryResourcePtrOutput) Zypper() OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResourceZypperRepository {
		if v == nil {
			return nil
		}
		return v.Zypper
	}).(OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput)
}

// Represents a single apt package repository. These will be added to a repo file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`.
type OSPolicyResourceRepositoryResourceAptRepository struct {
	// Type of archive files in this repository.
	ArchiveType string `pulumi:"archiveType"`
	// List of components for this repository. Must contain at least one item.
	Components []string `pulumi:"components"`
	// Distribution of this repository.
	Distribution string `pulumi:"distribution"`
	// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
	GpgKey *string `pulumi:"gpgKey"`
	// URI for this repository.
	Uri string `pulumi:"uri"`
}

// OSPolicyResourceRepositoryResourceAptRepositoryInput is an input type that accepts OSPolicyResourceRepositoryResourceAptRepositoryArgs and OSPolicyResourceRepositoryResourceAptRepositoryOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceAptRepositoryInput` via:
//
//          OSPolicyResourceRepositoryResourceAptRepositoryArgs{...}
type OSPolicyResourceRepositoryResourceAptRepositoryInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceAptRepositoryOutput() OSPolicyResourceRepositoryResourceAptRepositoryOutput
	ToOSPolicyResourceRepositoryResourceAptRepositoryOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceAptRepositoryOutput
}

// Represents a single apt package repository. These will be added to a repo file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`.
type OSPolicyResourceRepositoryResourceAptRepositoryArgs struct {
	// Type of archive files in this repository.
	ArchiveType OSPolicyResourceRepositoryResourceAptRepositoryArchiveType `pulumi:"archiveType"`
	// List of components for this repository. Must contain at least one item.
	Components pulumi.StringArrayInput `pulumi:"components"`
	// Distribution of this repository.
	Distribution pulumi.StringInput `pulumi:"distribution"`
	// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
	GpgKey pulumi.StringPtrInput `pulumi:"gpgKey"`
	// URI for this repository.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (OSPolicyResourceRepositoryResourceAptRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceAptRepository)(nil)).Elem()
}

func (i OSPolicyResourceRepositoryResourceAptRepositoryArgs) ToOSPolicyResourceRepositoryResourceAptRepositoryOutput() OSPolicyResourceRepositoryResourceAptRepositoryOutput {
	return i.ToOSPolicyResourceRepositoryResourceAptRepositoryOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceAptRepositoryArgs) ToOSPolicyResourceRepositoryResourceAptRepositoryOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceAptRepositoryOutput)
}

func (i OSPolicyResourceRepositoryResourceAptRepositoryArgs) ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutput() OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return i.ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceAptRepositoryArgs) ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceAptRepositoryOutput).ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(ctx)
}

// OSPolicyResourceRepositoryResourceAptRepositoryPtrInput is an input type that accepts OSPolicyResourceRepositoryResourceAptRepositoryArgs, OSPolicyResourceRepositoryResourceAptRepositoryPtr and OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceAptRepositoryPtrInput` via:
//
//          OSPolicyResourceRepositoryResourceAptRepositoryArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourceRepositoryResourceAptRepositoryPtrInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutput() OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput
	ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput
}

type ospolicyResourceRepositoryResourceAptRepositoryPtrType OSPolicyResourceRepositoryResourceAptRepositoryArgs

func OSPolicyResourceRepositoryResourceAptRepositoryPtr(v *OSPolicyResourceRepositoryResourceAptRepositoryArgs) OSPolicyResourceRepositoryResourceAptRepositoryPtrInput {
	return (*ospolicyResourceRepositoryResourceAptRepositoryPtrType)(v)
}

func (*ospolicyResourceRepositoryResourceAptRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceAptRepository)(nil)).Elem()
}

func (i *ospolicyResourceRepositoryResourceAptRepositoryPtrType) ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutput() OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return i.ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceRepositoryResourceAptRepositoryPtrType) ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput)
}

// Represents a single apt package repository. These will be added to a repo file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`.
type OSPolicyResourceRepositoryResourceAptRepositoryOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceAptRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceAptRepository)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryOutput() OSPolicyResourceRepositoryResourceAptRepositoryOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutput() OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return o.ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepository) *OSPolicyResourceRepositoryResourceAptRepository {
		return &v
	}).(OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput)
}

// Type of archive files in this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) ArchiveType() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepository) string { return v.ArchiveType }).(pulumi.StringOutput)
}

// List of components for this repository. Must contain at least one item.
func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) Components() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepository) []string { return v.Components }).(pulumi.StringArrayOutput)
}

// Distribution of this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) Distribution() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepository) string { return v.Distribution }).(pulumi.StringOutput)
}

// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) GpgKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepository) *string { return v.GpgKey }).(pulumi.StringPtrOutput)
}

// URI for this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepository) string { return v.Uri }).(pulumi.StringOutput)
}

type OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceAptRepository)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutput() OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) Elem() OSPolicyResourceRepositoryResourceAptRepositoryOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceAptRepository) OSPolicyResourceRepositoryResourceAptRepository {
		return *v
	}).(OSPolicyResourceRepositoryResourceAptRepositoryOutput)
}

// Type of archive files in this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) ArchiveType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceAptRepository) *string {
		if v == nil {
			return nil
		}
		return &v.ArchiveType
	}).(pulumi.StringPtrOutput)
}

// List of components for this repository. Must contain at least one item.
func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) Components() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceAptRepository) []string {
		if v == nil {
			return nil
		}
		return v.Components
	}).(pulumi.StringArrayOutput)
}

// Distribution of this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) Distribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceAptRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Distribution
	}).(pulumi.StringPtrOutput)
}

// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) GpgKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceAptRepository) *string {
		if v == nil {
			return nil
		}
		return v.GpgKey
	}).(pulumi.StringPtrOutput)
}

// URI for this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceAptRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Represents a single apt package repository. These will be added to a repo file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`.
type OSPolicyResourceRepositoryResourceAptRepositoryResponse struct {
	// Type of archive files in this repository.
	ArchiveType string `pulumi:"archiveType"`
	// List of components for this repository. Must contain at least one item.
	Components []string `pulumi:"components"`
	// Distribution of this repository.
	Distribution string `pulumi:"distribution"`
	// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
	GpgKey string `pulumi:"gpgKey"`
	// URI for this repository.
	Uri string `pulumi:"uri"`
}

// OSPolicyResourceRepositoryResourceAptRepositoryResponseInput is an input type that accepts OSPolicyResourceRepositoryResourceAptRepositoryResponseArgs and OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceAptRepositoryResponseInput` via:
//
//          OSPolicyResourceRepositoryResourceAptRepositoryResponseArgs{...}
type OSPolicyResourceRepositoryResourceAptRepositoryResponseInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceAptRepositoryResponseOutput() OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput
	ToOSPolicyResourceRepositoryResourceAptRepositoryResponseOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput
}

// Represents a single apt package repository. These will be added to a repo file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`.
type OSPolicyResourceRepositoryResourceAptRepositoryResponseArgs struct {
	// Type of archive files in this repository.
	ArchiveType pulumi.StringInput `pulumi:"archiveType"`
	// List of components for this repository. Must contain at least one item.
	Components pulumi.StringArrayInput `pulumi:"components"`
	// Distribution of this repository.
	Distribution pulumi.StringInput `pulumi:"distribution"`
	// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
	GpgKey pulumi.StringInput `pulumi:"gpgKey"`
	// URI for this repository.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (OSPolicyResourceRepositoryResourceAptRepositoryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceAptRepositoryResponse)(nil)).Elem()
}

func (i OSPolicyResourceRepositoryResourceAptRepositoryResponseArgs) ToOSPolicyResourceRepositoryResourceAptRepositoryResponseOutput() OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput {
	return i.ToOSPolicyResourceRepositoryResourceAptRepositoryResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceAptRepositoryResponseArgs) ToOSPolicyResourceRepositoryResourceAptRepositoryResponseOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput)
}

// Represents a single apt package repository. These will be added to a repo file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`.
type OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceAptRepositoryResponse)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryResponseOutput() OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryResponseOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput {
	return o
}

// Type of archive files in this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) ArchiveType() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepositoryResponse) string { return v.ArchiveType }).(pulumi.StringOutput)
}

// List of components for this repository. Must contain at least one item.
func (o OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) Components() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepositoryResponse) []string { return v.Components }).(pulumi.StringArrayOutput)
}

// Distribution of this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) Distribution() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepositoryResponse) string { return v.Distribution }).(pulumi.StringOutput)
}

// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
func (o OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) GpgKey() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepositoryResponse) string { return v.GpgKey }).(pulumi.StringOutput)
}

// URI for this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepositoryResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Represents a Goo package repository. These are added to a repo file that is managed at `C:/ProgramData/GooGet/repos/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceGooRepository struct {
	// The name of the repository.
	Name string `pulumi:"name"`
	// The url of the repository.
	Url string `pulumi:"url"`
}

// OSPolicyResourceRepositoryResourceGooRepositoryInput is an input type that accepts OSPolicyResourceRepositoryResourceGooRepositoryArgs and OSPolicyResourceRepositoryResourceGooRepositoryOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceGooRepositoryInput` via:
//
//          OSPolicyResourceRepositoryResourceGooRepositoryArgs{...}
type OSPolicyResourceRepositoryResourceGooRepositoryInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceGooRepositoryOutput() OSPolicyResourceRepositoryResourceGooRepositoryOutput
	ToOSPolicyResourceRepositoryResourceGooRepositoryOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceGooRepositoryOutput
}

// Represents a Goo package repository. These are added to a repo file that is managed at `C:/ProgramData/GooGet/repos/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceGooRepositoryArgs struct {
	// The name of the repository.
	Name pulumi.StringInput `pulumi:"name"`
	// The url of the repository.
	Url pulumi.StringInput `pulumi:"url"`
}

func (OSPolicyResourceRepositoryResourceGooRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceGooRepository)(nil)).Elem()
}

func (i OSPolicyResourceRepositoryResourceGooRepositoryArgs) ToOSPolicyResourceRepositoryResourceGooRepositoryOutput() OSPolicyResourceRepositoryResourceGooRepositoryOutput {
	return i.ToOSPolicyResourceRepositoryResourceGooRepositoryOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceGooRepositoryArgs) ToOSPolicyResourceRepositoryResourceGooRepositoryOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceGooRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceGooRepositoryOutput)
}

func (i OSPolicyResourceRepositoryResourceGooRepositoryArgs) ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutput() OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return i.ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceGooRepositoryArgs) ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceGooRepositoryOutput).ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(ctx)
}

// OSPolicyResourceRepositoryResourceGooRepositoryPtrInput is an input type that accepts OSPolicyResourceRepositoryResourceGooRepositoryArgs, OSPolicyResourceRepositoryResourceGooRepositoryPtr and OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceGooRepositoryPtrInput` via:
//
//          OSPolicyResourceRepositoryResourceGooRepositoryArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourceRepositoryResourceGooRepositoryPtrInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutput() OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput
	ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput
}

type ospolicyResourceRepositoryResourceGooRepositoryPtrType OSPolicyResourceRepositoryResourceGooRepositoryArgs

func OSPolicyResourceRepositoryResourceGooRepositoryPtr(v *OSPolicyResourceRepositoryResourceGooRepositoryArgs) OSPolicyResourceRepositoryResourceGooRepositoryPtrInput {
	return (*ospolicyResourceRepositoryResourceGooRepositoryPtrType)(v)
}

func (*ospolicyResourceRepositoryResourceGooRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceGooRepository)(nil)).Elem()
}

func (i *ospolicyResourceRepositoryResourceGooRepositoryPtrType) ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutput() OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return i.ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceRepositoryResourceGooRepositoryPtrType) ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput)
}

// Represents a Goo package repository. These are added to a repo file that is managed at `C:/ProgramData/GooGet/repos/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceGooRepositoryOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceGooRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceGooRepository)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryOutput) ToOSPolicyResourceRepositoryResourceGooRepositoryOutput() OSPolicyResourceRepositoryResourceGooRepositoryOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryOutput) ToOSPolicyResourceRepositoryResourceGooRepositoryOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceGooRepositoryOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryOutput) ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutput() OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return o.ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryOutput) ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceGooRepository) *OSPolicyResourceRepositoryResourceGooRepository {
		return &v
	}).(OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput)
}

// The name of the repository.
func (o OSPolicyResourceRepositoryResourceGooRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceGooRepository) string { return v.Name }).(pulumi.StringOutput)
}

// The url of the repository.
func (o OSPolicyResourceRepositoryResourceGooRepositoryOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceGooRepository) string { return v.Url }).(pulumi.StringOutput)
}

type OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceGooRepository)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput) ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutput() OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput) ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput) Elem() OSPolicyResourceRepositoryResourceGooRepositoryOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceGooRepository) OSPolicyResourceRepositoryResourceGooRepository {
		return *v
	}).(OSPolicyResourceRepositoryResourceGooRepositoryOutput)
}

// The name of the repository.
func (o OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceGooRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The url of the repository.
func (o OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceGooRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// Represents a Goo package repository. These are added to a repo file that is managed at `C:/ProgramData/GooGet/repos/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceGooRepositoryResponse struct {
	// The name of the repository.
	Name string `pulumi:"name"`
	// The url of the repository.
	Url string `pulumi:"url"`
}

// OSPolicyResourceRepositoryResourceGooRepositoryResponseInput is an input type that accepts OSPolicyResourceRepositoryResourceGooRepositoryResponseArgs and OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceGooRepositoryResponseInput` via:
//
//          OSPolicyResourceRepositoryResourceGooRepositoryResponseArgs{...}
type OSPolicyResourceRepositoryResourceGooRepositoryResponseInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceGooRepositoryResponseOutput() OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput
	ToOSPolicyResourceRepositoryResourceGooRepositoryResponseOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput
}

// Represents a Goo package repository. These are added to a repo file that is managed at `C:/ProgramData/GooGet/repos/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceGooRepositoryResponseArgs struct {
	// The name of the repository.
	Name pulumi.StringInput `pulumi:"name"`
	// The url of the repository.
	Url pulumi.StringInput `pulumi:"url"`
}

func (OSPolicyResourceRepositoryResourceGooRepositoryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceGooRepositoryResponse)(nil)).Elem()
}

func (i OSPolicyResourceRepositoryResourceGooRepositoryResponseArgs) ToOSPolicyResourceRepositoryResourceGooRepositoryResponseOutput() OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput {
	return i.ToOSPolicyResourceRepositoryResourceGooRepositoryResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceGooRepositoryResponseArgs) ToOSPolicyResourceRepositoryResourceGooRepositoryResponseOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput)
}

// Represents a Goo package repository. These are added to a repo file that is managed at `C:/ProgramData/GooGet/repos/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceGooRepositoryResponse)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput) ToOSPolicyResourceRepositoryResourceGooRepositoryResponseOutput() OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput) ToOSPolicyResourceRepositoryResourceGooRepositoryResponseOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput {
	return o
}

// The name of the repository.
func (o OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceGooRepositoryResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The url of the repository.
func (o OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceGooRepositoryResponse) string { return v.Url }).(pulumi.StringOutput)
}

// A resource that manages a package repository.
type OSPolicyResourceRepositoryResourceResponse struct {
	// An Apt Repository.
	Apt OSPolicyResourceRepositoryResourceAptRepositoryResponse `pulumi:"apt"`
	// A Goo Repository.
	Goo OSPolicyResourceRepositoryResourceGooRepositoryResponse `pulumi:"goo"`
	// A Yum Repository.
	Yum OSPolicyResourceRepositoryResourceYumRepositoryResponse `pulumi:"yum"`
	// A Zypper Repository.
	Zypper OSPolicyResourceRepositoryResourceZypperRepositoryResponse `pulumi:"zypper"`
}

// OSPolicyResourceRepositoryResourceResponseInput is an input type that accepts OSPolicyResourceRepositoryResourceResponseArgs and OSPolicyResourceRepositoryResourceResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceResponseInput` via:
//
//          OSPolicyResourceRepositoryResourceResponseArgs{...}
type OSPolicyResourceRepositoryResourceResponseInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceResponseOutput() OSPolicyResourceRepositoryResourceResponseOutput
	ToOSPolicyResourceRepositoryResourceResponseOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceResponseOutput
}

// A resource that manages a package repository.
type OSPolicyResourceRepositoryResourceResponseArgs struct {
	// An Apt Repository.
	Apt OSPolicyResourceRepositoryResourceAptRepositoryResponseInput `pulumi:"apt"`
	// A Goo Repository.
	Goo OSPolicyResourceRepositoryResourceGooRepositoryResponseInput `pulumi:"goo"`
	// A Yum Repository.
	Yum OSPolicyResourceRepositoryResourceYumRepositoryResponseInput `pulumi:"yum"`
	// A Zypper Repository.
	Zypper OSPolicyResourceRepositoryResourceZypperRepositoryResponseInput `pulumi:"zypper"`
}

func (OSPolicyResourceRepositoryResourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceResponse)(nil)).Elem()
}

func (i OSPolicyResourceRepositoryResourceResponseArgs) ToOSPolicyResourceRepositoryResourceResponseOutput() OSPolicyResourceRepositoryResourceResponseOutput {
	return i.ToOSPolicyResourceRepositoryResourceResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceResponseArgs) ToOSPolicyResourceRepositoryResourceResponseOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceResponseOutput)
}

// A resource that manages a package repository.
type OSPolicyResourceRepositoryResourceResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceResponse)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceResponseOutput) ToOSPolicyResourceRepositoryResourceResponseOutput() OSPolicyResourceRepositoryResourceResponseOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceResponseOutput) ToOSPolicyResourceRepositoryResourceResponseOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceResponseOutput {
	return o
}

// An Apt Repository.
func (o OSPolicyResourceRepositoryResourceResponseOutput) Apt() OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceResponse) OSPolicyResourceRepositoryResourceAptRepositoryResponse {
		return v.Apt
	}).(OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput)
}

// A Goo Repository.
func (o OSPolicyResourceRepositoryResourceResponseOutput) Goo() OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceResponse) OSPolicyResourceRepositoryResourceGooRepositoryResponse {
		return v.Goo
	}).(OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput)
}

// A Yum Repository.
func (o OSPolicyResourceRepositoryResourceResponseOutput) Yum() OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceResponse) OSPolicyResourceRepositoryResourceYumRepositoryResponse {
		return v.Yum
	}).(OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput)
}

// A Zypper Repository.
func (o OSPolicyResourceRepositoryResourceResponseOutput) Zypper() OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceResponse) OSPolicyResourceRepositoryResourceZypperRepositoryResponse {
		return v.Zypper
	}).(OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput)
}

// Represents a single yum package repository. These are added to a repo file that is managed at `/etc/yum.repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceYumRepository struct {
	// The location of the repository directory.
	BaseUrl string `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName *string `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys []string `pulumi:"gpgKeys"`
	// A one word, unique name for this repository. This is the `repo id` in the yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for resource conflicts.
	Id string `pulumi:"id"`
}

// OSPolicyResourceRepositoryResourceYumRepositoryInput is an input type that accepts OSPolicyResourceRepositoryResourceYumRepositoryArgs and OSPolicyResourceRepositoryResourceYumRepositoryOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceYumRepositoryInput` via:
//
//          OSPolicyResourceRepositoryResourceYumRepositoryArgs{...}
type OSPolicyResourceRepositoryResourceYumRepositoryInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceYumRepositoryOutput() OSPolicyResourceRepositoryResourceYumRepositoryOutput
	ToOSPolicyResourceRepositoryResourceYumRepositoryOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceYumRepositoryOutput
}

// Represents a single yum package repository. These are added to a repo file that is managed at `/etc/yum.repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceYumRepositoryArgs struct {
	// The location of the repository directory.
	BaseUrl pulumi.StringInput `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys pulumi.StringArrayInput `pulumi:"gpgKeys"`
	// A one word, unique name for this repository. This is the `repo id` in the yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for resource conflicts.
	Id pulumi.StringInput `pulumi:"id"`
}

func (OSPolicyResourceRepositoryResourceYumRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceYumRepository)(nil)).Elem()
}

func (i OSPolicyResourceRepositoryResourceYumRepositoryArgs) ToOSPolicyResourceRepositoryResourceYumRepositoryOutput() OSPolicyResourceRepositoryResourceYumRepositoryOutput {
	return i.ToOSPolicyResourceRepositoryResourceYumRepositoryOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceYumRepositoryArgs) ToOSPolicyResourceRepositoryResourceYumRepositoryOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceYumRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceYumRepositoryOutput)
}

func (i OSPolicyResourceRepositoryResourceYumRepositoryArgs) ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutput() OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return i.ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceYumRepositoryArgs) ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceYumRepositoryOutput).ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(ctx)
}

// OSPolicyResourceRepositoryResourceYumRepositoryPtrInput is an input type that accepts OSPolicyResourceRepositoryResourceYumRepositoryArgs, OSPolicyResourceRepositoryResourceYumRepositoryPtr and OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceYumRepositoryPtrInput` via:
//
//          OSPolicyResourceRepositoryResourceYumRepositoryArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourceRepositoryResourceYumRepositoryPtrInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutput() OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput
	ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput
}

type ospolicyResourceRepositoryResourceYumRepositoryPtrType OSPolicyResourceRepositoryResourceYumRepositoryArgs

func OSPolicyResourceRepositoryResourceYumRepositoryPtr(v *OSPolicyResourceRepositoryResourceYumRepositoryArgs) OSPolicyResourceRepositoryResourceYumRepositoryPtrInput {
	return (*ospolicyResourceRepositoryResourceYumRepositoryPtrType)(v)
}

func (*ospolicyResourceRepositoryResourceYumRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceYumRepository)(nil)).Elem()
}

func (i *ospolicyResourceRepositoryResourceYumRepositoryPtrType) ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutput() OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return i.ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceRepositoryResourceYumRepositoryPtrType) ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput)
}

// Represents a single yum package repository. These are added to a repo file that is managed at `/etc/yum.repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceYumRepositoryOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceYumRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceYumRepository)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) ToOSPolicyResourceRepositoryResourceYumRepositoryOutput() OSPolicyResourceRepositoryResourceYumRepositoryOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) ToOSPolicyResourceRepositoryResourceYumRepositoryOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceYumRepositoryOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutput() OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return o.ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceYumRepository) *OSPolicyResourceRepositoryResourceYumRepository {
		return &v
	}).(OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput)
}

// The location of the repository directory.
func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceYumRepository) string { return v.BaseUrl }).(pulumi.StringOutput)
}

// The display name of the repository.
func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceYumRepository) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// URIs of GPG keys.
func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) GpgKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceYumRepository) []string { return v.GpgKeys }).(pulumi.StringArrayOutput)
}

// A one word, unique name for this repository. This is the `repo id` in the yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for resource conflicts.
func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceYumRepository) string { return v.Id }).(pulumi.StringOutput)
}

type OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceYumRepository)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutput() OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) Elem() OSPolicyResourceRepositoryResourceYumRepositoryOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceYumRepository) OSPolicyResourceRepositoryResourceYumRepository {
		return *v
	}).(OSPolicyResourceRepositoryResourceYumRepositoryOutput)
}

// The location of the repository directory.
func (o OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceYumRepository) *string {
		if v == nil {
			return nil
		}
		return &v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// The display name of the repository.
func (o OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceYumRepository) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// URIs of GPG keys.
func (o OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) GpgKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceYumRepository) []string {
		if v == nil {
			return nil
		}
		return v.GpgKeys
	}).(pulumi.StringArrayOutput)
}

// A one word, unique name for this repository. This is the `repo id` in the yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for resource conflicts.
func (o OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceYumRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Represents a single yum package repository. These are added to a repo file that is managed at `/etc/yum.repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceYumRepositoryResponse struct {
	// The location of the repository directory.
	BaseUrl string `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName string `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys []string `pulumi:"gpgKeys"`
}

// OSPolicyResourceRepositoryResourceYumRepositoryResponseInput is an input type that accepts OSPolicyResourceRepositoryResourceYumRepositoryResponseArgs and OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceYumRepositoryResponseInput` via:
//
//          OSPolicyResourceRepositoryResourceYumRepositoryResponseArgs{...}
type OSPolicyResourceRepositoryResourceYumRepositoryResponseInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceYumRepositoryResponseOutput() OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput
	ToOSPolicyResourceRepositoryResourceYumRepositoryResponseOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput
}

// Represents a single yum package repository. These are added to a repo file that is managed at `/etc/yum.repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceYumRepositoryResponseArgs struct {
	// The location of the repository directory.
	BaseUrl pulumi.StringInput `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys pulumi.StringArrayInput `pulumi:"gpgKeys"`
}

func (OSPolicyResourceRepositoryResourceYumRepositoryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceYumRepositoryResponse)(nil)).Elem()
}

func (i OSPolicyResourceRepositoryResourceYumRepositoryResponseArgs) ToOSPolicyResourceRepositoryResourceYumRepositoryResponseOutput() OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput {
	return i.ToOSPolicyResourceRepositoryResourceYumRepositoryResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceYumRepositoryResponseArgs) ToOSPolicyResourceRepositoryResourceYumRepositoryResponseOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput)
}

// Represents a single yum package repository. These are added to a repo file that is managed at `/etc/yum.repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceYumRepositoryResponse)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput) ToOSPolicyResourceRepositoryResourceYumRepositoryResponseOutput() OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput) ToOSPolicyResourceRepositoryResourceYumRepositoryResponseOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput {
	return o
}

// The location of the repository directory.
func (o OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceYumRepositoryResponse) string { return v.BaseUrl }).(pulumi.StringOutput)
}

// The display name of the repository.
func (o OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceYumRepositoryResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// URIs of GPG keys.
func (o OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput) GpgKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceYumRepositoryResponse) []string { return v.GpgKeys }).(pulumi.StringArrayOutput)
}

// Represents a single zypper package repository. These are added to a repo file that is managed at `/etc/zypp/repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceZypperRepository struct {
	// The location of the repository directory.
	BaseUrl string `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName *string `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys []string `pulumi:"gpgKeys"`
	// A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.
	Id string `pulumi:"id"`
}

// OSPolicyResourceRepositoryResourceZypperRepositoryInput is an input type that accepts OSPolicyResourceRepositoryResourceZypperRepositoryArgs and OSPolicyResourceRepositoryResourceZypperRepositoryOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceZypperRepositoryInput` via:
//
//          OSPolicyResourceRepositoryResourceZypperRepositoryArgs{...}
type OSPolicyResourceRepositoryResourceZypperRepositoryInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceZypperRepositoryOutput() OSPolicyResourceRepositoryResourceZypperRepositoryOutput
	ToOSPolicyResourceRepositoryResourceZypperRepositoryOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryOutput
}

// Represents a single zypper package repository. These are added to a repo file that is managed at `/etc/zypp/repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceZypperRepositoryArgs struct {
	// The location of the repository directory.
	BaseUrl pulumi.StringInput `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys pulumi.StringArrayInput `pulumi:"gpgKeys"`
	// A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.
	Id pulumi.StringInput `pulumi:"id"`
}

func (OSPolicyResourceRepositoryResourceZypperRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceZypperRepository)(nil)).Elem()
}

func (i OSPolicyResourceRepositoryResourceZypperRepositoryArgs) ToOSPolicyResourceRepositoryResourceZypperRepositoryOutput() OSPolicyResourceRepositoryResourceZypperRepositoryOutput {
	return i.ToOSPolicyResourceRepositoryResourceZypperRepositoryOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceZypperRepositoryArgs) ToOSPolicyResourceRepositoryResourceZypperRepositoryOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceZypperRepositoryOutput)
}

func (i OSPolicyResourceRepositoryResourceZypperRepositoryArgs) ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput() OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return i.ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceZypperRepositoryArgs) ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceZypperRepositoryOutput).ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(ctx)
}

// OSPolicyResourceRepositoryResourceZypperRepositoryPtrInput is an input type that accepts OSPolicyResourceRepositoryResourceZypperRepositoryArgs, OSPolicyResourceRepositoryResourceZypperRepositoryPtr and OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceZypperRepositoryPtrInput` via:
//
//          OSPolicyResourceRepositoryResourceZypperRepositoryArgs{...}
//
//  or:
//
//          nil
type OSPolicyResourceRepositoryResourceZypperRepositoryPtrInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput() OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput
	ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput
}

type ospolicyResourceRepositoryResourceZypperRepositoryPtrType OSPolicyResourceRepositoryResourceZypperRepositoryArgs

func OSPolicyResourceRepositoryResourceZypperRepositoryPtr(v *OSPolicyResourceRepositoryResourceZypperRepositoryArgs) OSPolicyResourceRepositoryResourceZypperRepositoryPtrInput {
	return (*ospolicyResourceRepositoryResourceZypperRepositoryPtrType)(v)
}

func (*ospolicyResourceRepositoryResourceZypperRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceZypperRepository)(nil)).Elem()
}

func (i *ospolicyResourceRepositoryResourceZypperRepositoryPtrType) ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput() OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return i.ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceRepositoryResourceZypperRepositoryPtrType) ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput)
}

// Represents a single zypper package repository. These are added to a repo file that is managed at `/etc/zypp/repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceZypperRepositoryOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceZypperRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceZypperRepository)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) ToOSPolicyResourceRepositoryResourceZypperRepositoryOutput() OSPolicyResourceRepositoryResourceZypperRepositoryOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) ToOSPolicyResourceRepositoryResourceZypperRepositoryOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput() OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return o.ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceZypperRepository) *OSPolicyResourceRepositoryResourceZypperRepository {
		return &v
	}).(OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput)
}

// The location of the repository directory.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceZypperRepository) string { return v.BaseUrl }).(pulumi.StringOutput)
}

// The display name of the repository.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceZypperRepository) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// URIs of GPG keys.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) GpgKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceZypperRepository) []string { return v.GpgKeys }).(pulumi.StringArrayOutput)
}

// A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceZypperRepository) string { return v.Id }).(pulumi.StringOutput)
}

type OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceZypperRepository)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput() OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) Elem() OSPolicyResourceRepositoryResourceZypperRepositoryOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceZypperRepository) OSPolicyResourceRepositoryResourceZypperRepository {
		return *v
	}).(OSPolicyResourceRepositoryResourceZypperRepositoryOutput)
}

// The location of the repository directory.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceZypperRepository) *string {
		if v == nil {
			return nil
		}
		return &v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// The display name of the repository.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceZypperRepository) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// URIs of GPG keys.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) GpgKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceZypperRepository) []string {
		if v == nil {
			return nil
		}
		return v.GpgKeys
	}).(pulumi.StringArrayOutput)
}

// A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceZypperRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Represents a single zypper package repository. These are added to a repo file that is managed at `/etc/zypp/repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceZypperRepositoryResponse struct {
	// The location of the repository directory.
	BaseUrl string `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName string `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys []string `pulumi:"gpgKeys"`
}

// OSPolicyResourceRepositoryResourceZypperRepositoryResponseInput is an input type that accepts OSPolicyResourceRepositoryResourceZypperRepositoryResponseArgs and OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceZypperRepositoryResponseInput` via:
//
//          OSPolicyResourceRepositoryResourceZypperRepositoryResponseArgs{...}
type OSPolicyResourceRepositoryResourceZypperRepositoryResponseInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput() OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput
	ToOSPolicyResourceRepositoryResourceZypperRepositoryResponseOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput
}

// Represents a single zypper package repository. These are added to a repo file that is managed at `/etc/zypp/repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceZypperRepositoryResponseArgs struct {
	// The location of the repository directory.
	BaseUrl pulumi.StringInput `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys pulumi.StringArrayInput `pulumi:"gpgKeys"`
}

func (OSPolicyResourceRepositoryResourceZypperRepositoryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceZypperRepositoryResponse)(nil)).Elem()
}

func (i OSPolicyResourceRepositoryResourceZypperRepositoryResponseArgs) ToOSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput() OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput {
	return i.ToOSPolicyResourceRepositoryResourceZypperRepositoryResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceZypperRepositoryResponseArgs) ToOSPolicyResourceRepositoryResourceZypperRepositoryResponseOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput)
}

// Represents a single zypper package repository. These are added to a repo file that is managed at `/etc/zypp/repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceZypperRepositoryResponse)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput) ToOSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput() OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput) ToOSPolicyResourceRepositoryResourceZypperRepositoryResponseOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput {
	return o
}

// The location of the repository directory.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceZypperRepositoryResponse) string { return v.BaseUrl }).(pulumi.StringOutput)
}

// The display name of the repository.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceZypperRepositoryResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// URIs of GPG keys.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput) GpgKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceZypperRepositoryResponse) []string { return v.GpgKeys }).(pulumi.StringArrayOutput)
}

// An OS policy resource is used to define the desired state configuration and provides a specific functionality like installing/removing packages, executing a script etc. The system ensures that resources are always in their desired state by taking necessary actions if they have drifted from their desired state.
type OSPolicyResourceResponse struct {
	// Exec resource
	Exec OSPolicyResourceExecResourceResponse `pulumi:"exec"`
	// File resource
	File OSPolicyResourceFileResourceResponse `pulumi:"file"`
	// Package resource
	Pkg OSPolicyResourcePackageResourceResponse `pulumi:"pkg"`
	// Package repository resource
	Repository OSPolicyResourceRepositoryResourceResponse `pulumi:"repository"`
}

// OSPolicyResourceResponseInput is an input type that accepts OSPolicyResourceResponseArgs and OSPolicyResourceResponseOutput values.
// You can construct a concrete instance of `OSPolicyResourceResponseInput` via:
//
//          OSPolicyResourceResponseArgs{...}
type OSPolicyResourceResponseInput interface {
	pulumi.Input

	ToOSPolicyResourceResponseOutput() OSPolicyResourceResponseOutput
	ToOSPolicyResourceResponseOutputWithContext(context.Context) OSPolicyResourceResponseOutput
}

// An OS policy resource is used to define the desired state configuration and provides a specific functionality like installing/removing packages, executing a script etc. The system ensures that resources are always in their desired state by taking necessary actions if they have drifted from their desired state.
type OSPolicyResourceResponseArgs struct {
	// Exec resource
	Exec OSPolicyResourceExecResourceResponseInput `pulumi:"exec"`
	// File resource
	File OSPolicyResourceFileResourceResponseInput `pulumi:"file"`
	// Package resource
	Pkg OSPolicyResourcePackageResourceResponseInput `pulumi:"pkg"`
	// Package repository resource
	Repository OSPolicyResourceRepositoryResourceResponseInput `pulumi:"repository"`
}

func (OSPolicyResourceResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceResponse)(nil)).Elem()
}

func (i OSPolicyResourceResponseArgs) ToOSPolicyResourceResponseOutput() OSPolicyResourceResponseOutput {
	return i.ToOSPolicyResourceResponseOutputWithContext(context.Background())
}

func (i OSPolicyResourceResponseArgs) ToOSPolicyResourceResponseOutputWithContext(ctx context.Context) OSPolicyResourceResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceResponseOutput)
}

// OSPolicyResourceResponseArrayInput is an input type that accepts OSPolicyResourceResponseArray and OSPolicyResourceResponseArrayOutput values.
// You can construct a concrete instance of `OSPolicyResourceResponseArrayInput` via:
//
//          OSPolicyResourceResponseArray{ OSPolicyResourceResponseArgs{...} }
type OSPolicyResourceResponseArrayInput interface {
	pulumi.Input

	ToOSPolicyResourceResponseArrayOutput() OSPolicyResourceResponseArrayOutput
	ToOSPolicyResourceResponseArrayOutputWithContext(context.Context) OSPolicyResourceResponseArrayOutput
}

type OSPolicyResourceResponseArray []OSPolicyResourceResponseInput

func (OSPolicyResourceResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResourceResponse)(nil)).Elem()
}

func (i OSPolicyResourceResponseArray) ToOSPolicyResourceResponseArrayOutput() OSPolicyResourceResponseArrayOutput {
	return i.ToOSPolicyResourceResponseArrayOutputWithContext(context.Background())
}

func (i OSPolicyResourceResponseArray) ToOSPolicyResourceResponseArrayOutputWithContext(ctx context.Context) OSPolicyResourceResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceResponseArrayOutput)
}

// An OS policy resource is used to define the desired state configuration and provides a specific functionality like installing/removing packages, executing a script etc. The system ensures that resources are always in their desired state by taking necessary actions if they have drifted from their desired state.
type OSPolicyResourceResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceResponse)(nil)).Elem()
}

func (o OSPolicyResourceResponseOutput) ToOSPolicyResourceResponseOutput() OSPolicyResourceResponseOutput {
	return o
}

func (o OSPolicyResourceResponseOutput) ToOSPolicyResourceResponseOutputWithContext(ctx context.Context) OSPolicyResourceResponseOutput {
	return o
}

// Exec resource
func (o OSPolicyResourceResponseOutput) Exec() OSPolicyResourceExecResourceResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceResponse) OSPolicyResourceExecResourceResponse { return v.Exec }).(OSPolicyResourceExecResourceResponseOutput)
}

// File resource
func (o OSPolicyResourceResponseOutput) File() OSPolicyResourceFileResourceResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceResponse) OSPolicyResourceFileResourceResponse { return v.File }).(OSPolicyResourceFileResourceResponseOutput)
}

// Package resource
func (o OSPolicyResourceResponseOutput) Pkg() OSPolicyResourcePackageResourceResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceResponse) OSPolicyResourcePackageResourceResponse { return v.Pkg }).(OSPolicyResourcePackageResourceResponseOutput)
}

// Package repository resource
func (o OSPolicyResourceResponseOutput) Repository() OSPolicyResourceRepositoryResourceResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceResponse) OSPolicyResourceRepositoryResourceResponse { return v.Repository }).(OSPolicyResourceRepositoryResourceResponseOutput)
}

type OSPolicyResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResourceResponse)(nil)).Elem()
}

func (o OSPolicyResourceResponseArrayOutput) ToOSPolicyResourceResponseArrayOutput() OSPolicyResourceResponseArrayOutput {
	return o
}

func (o OSPolicyResourceResponseArrayOutput) ToOSPolicyResourceResponseArrayOutputWithContext(ctx context.Context) OSPolicyResourceResponseArrayOutput {
	return o
}

func (o OSPolicyResourceResponseArrayOutput) Index(i pulumi.IntInput) OSPolicyResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyResourceResponse {
		return vs[0].([]OSPolicyResourceResponse)[vs[1].(int)]
	}).(OSPolicyResourceResponseOutput)
}

// An OS policy defines the desired state configuration for a VM.
type OSPolicyResponse struct {
	// This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.
	AllowNoResourceGroupMatch bool `pulumi:"allowNoResourceGroupMatch"`
	// Policy description. Length of the description is limited to 1024 characters.
	Description string `pulumi:"description"`
	// Policy mode
	Mode string `pulumi:"mode"`
	// List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`
	ResourceGroups []OSPolicyResourceGroupResponse `pulumi:"resourceGroups"`
}

// OSPolicyResponseInput is an input type that accepts OSPolicyResponseArgs and OSPolicyResponseOutput values.
// You can construct a concrete instance of `OSPolicyResponseInput` via:
//
//          OSPolicyResponseArgs{...}
type OSPolicyResponseInput interface {
	pulumi.Input

	ToOSPolicyResponseOutput() OSPolicyResponseOutput
	ToOSPolicyResponseOutputWithContext(context.Context) OSPolicyResponseOutput
}

// An OS policy defines the desired state configuration for a VM.
type OSPolicyResponseArgs struct {
	// This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.
	AllowNoResourceGroupMatch pulumi.BoolInput `pulumi:"allowNoResourceGroupMatch"`
	// Policy description. Length of the description is limited to 1024 characters.
	Description pulumi.StringInput `pulumi:"description"`
	// Policy mode
	Mode pulumi.StringInput `pulumi:"mode"`
	// List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`
	ResourceGroups OSPolicyResourceGroupResponseArrayInput `pulumi:"resourceGroups"`
}

func (OSPolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResponse)(nil)).Elem()
}

func (i OSPolicyResponseArgs) ToOSPolicyResponseOutput() OSPolicyResponseOutput {
	return i.ToOSPolicyResponseOutputWithContext(context.Background())
}

func (i OSPolicyResponseArgs) ToOSPolicyResponseOutputWithContext(ctx context.Context) OSPolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResponseOutput)
}

// OSPolicyResponseArrayInput is an input type that accepts OSPolicyResponseArray and OSPolicyResponseArrayOutput values.
// You can construct a concrete instance of `OSPolicyResponseArrayInput` via:
//
//          OSPolicyResponseArray{ OSPolicyResponseArgs{...} }
type OSPolicyResponseArrayInput interface {
	pulumi.Input

	ToOSPolicyResponseArrayOutput() OSPolicyResponseArrayOutput
	ToOSPolicyResponseArrayOutputWithContext(context.Context) OSPolicyResponseArrayOutput
}

type OSPolicyResponseArray []OSPolicyResponseInput

func (OSPolicyResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResponse)(nil)).Elem()
}

func (i OSPolicyResponseArray) ToOSPolicyResponseArrayOutput() OSPolicyResponseArrayOutput {
	return i.ToOSPolicyResponseArrayOutputWithContext(context.Background())
}

func (i OSPolicyResponseArray) ToOSPolicyResponseArrayOutputWithContext(ctx context.Context) OSPolicyResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResponseArrayOutput)
}

// An OS policy defines the desired state configuration for a VM.
type OSPolicyResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResponse)(nil)).Elem()
}

func (o OSPolicyResponseOutput) ToOSPolicyResponseOutput() OSPolicyResponseOutput {
	return o
}

func (o OSPolicyResponseOutput) ToOSPolicyResponseOutputWithContext(ctx context.Context) OSPolicyResponseOutput {
	return o
}

// This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.
func (o OSPolicyResponseOutput) AllowNoResourceGroupMatch() pulumi.BoolOutput {
	return o.ApplyT(func(v OSPolicyResponse) bool { return v.AllowNoResourceGroupMatch }).(pulumi.BoolOutput)
}

// Policy description. Length of the description is limited to 1024 characters.
func (o OSPolicyResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Policy mode
func (o OSPolicyResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`
func (o OSPolicyResponseOutput) ResourceGroups() OSPolicyResourceGroupResponseArrayOutput {
	return o.ApplyT(func(v OSPolicyResponse) []OSPolicyResourceGroupResponse { return v.ResourceGroups }).(OSPolicyResourceGroupResponseArrayOutput)
}

type OSPolicyResponseArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResponse)(nil)).Elem()
}

func (o OSPolicyResponseArrayOutput) ToOSPolicyResponseArrayOutput() OSPolicyResponseArrayOutput {
	return o
}

func (o OSPolicyResponseArrayOutput) ToOSPolicyResponseArrayOutputWithContext(ctx context.Context) OSPolicyResponseArrayOutput {
	return o
}

func (o OSPolicyResponseArrayOutput) Index(i pulumi.IntInput) OSPolicyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyResponse {
		return vs[0].([]OSPolicyResponse)[vs[1].(int)]
	}).(OSPolicyResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(FixedOrPercentOutput{})
	pulumi.RegisterOutputType(FixedOrPercentPtrOutput{})
	pulumi.RegisterOutputType(FixedOrPercentResponseOutput{})
	pulumi.RegisterOutputType(FixedOrPercentResponsePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyOutput{})
	pulumi.RegisterOutputType(OSPolicyArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentInstanceFilterOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentInstanceFilterPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentInstanceFilterResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentInstanceFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentLabelSetOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentLabelSetArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentLabelSetResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentLabelSetResponseArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentRolloutOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentRolloutPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentRolloutResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentRolloutResponsePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyOSFilterOutput{})
	pulumi.RegisterOutputType(OSPolicyOSFilterPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyOSFilterResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceExecResourceOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceExecResourcePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceExecResourceExecOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceExecResourceExecPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceExecResourceExecResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceExecResourceResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFilePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileGcsOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileGcsPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileGcsResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileRemoteOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileRemotePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileRemoteResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileResourceOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileResourcePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileResourceResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceGroupOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceGroupArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceGroupResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceGroupResponseArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourcePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceAPTOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceAPTPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceAPTResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceDebOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceDebPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceDebResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceGooGetOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceGooGetPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceGooGetResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceMSIOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceMSIPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceMSIResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceRPMOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceRPMPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceRPMResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceYUMOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceYUMPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceYUMResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceZypperOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceZypperPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceZypperResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourcePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceAptRepositoryOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceGooRepositoryOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceYumRepositoryOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceZypperRepositoryOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResponseArrayOutput{})
}
