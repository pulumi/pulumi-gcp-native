// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Required. Policy mode
type OSPolicyMode pulumi.String

const (
	// Invalid mode
	OSPolicyModeModeUnspecified = OSPolicyMode("MODE_UNSPECIFIED")
	// This mode checks if the configuration resources in the policy are in their desired state. No actions are performed if they are not in the desired state. This mode is used for reporting purposes.
	OSPolicyModeValidation = OSPolicyMode("VALIDATION")
	// This mode checks if the configuration resources in the policy are in their desired state, and if not, enforces the desired state.
	OSPolicyModeEnforcement = OSPolicyMode("ENFORCEMENT")
)

func (OSPolicyMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e OSPolicyMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OSPolicyMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Required. The script interpreter to use.
type OSPolicyResourceExecResourceExecInterpreter pulumi.String

const (
	// Defaults to NONE.
	OSPolicyResourceExecResourceExecInterpreterInterpreterUnspecified = OSPolicyResourceExecResourceExecInterpreter("INTERPRETER_UNSPECIFIED")
	// If an interpreter is not specified, the source is executed directly. This execution, without an interpreter, only succeeds for executables and scripts that have shebang lines.
	OSPolicyResourceExecResourceExecInterpreterNone = OSPolicyResourceExecResourceExecInterpreter("NONE")
	// Indicates that the script runs with `/bin/sh` on Linux and `cmd.exe` on Windows.
	OSPolicyResourceExecResourceExecInterpreterShell = OSPolicyResourceExecResourceExecInterpreter("SHELL")
	// Indicates that the script runs with PowerShell.
	OSPolicyResourceExecResourceExecInterpreterPowershell = OSPolicyResourceExecResourceExecInterpreter("POWERSHELL")
)

func (OSPolicyResourceExecResourceExecInterpreter) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e OSPolicyResourceExecResourceExecInterpreter) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyResourceExecResourceExecInterpreter) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyResourceExecResourceExecInterpreter) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OSPolicyResourceExecResourceExecInterpreter) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Required. Desired state of the file.
type OSPolicyResourceFileResourceState pulumi.String

const (
	// Unspecified is invalid.
	OSPolicyResourceFileResourceStateDesiredStateUnspecified = OSPolicyResourceFileResourceState("DESIRED_STATE_UNSPECIFIED")
	// Ensure file at path is present.
	OSPolicyResourceFileResourceStatePresent = OSPolicyResourceFileResourceState("PRESENT")
	// Ensure file at path is absent.
	OSPolicyResourceFileResourceStateAbsent = OSPolicyResourceFileResourceState("ABSENT")
	// Ensure the contents of the file at path matches. If the file does not exist it will be created.
	OSPolicyResourceFileResourceStateContentsMatch = OSPolicyResourceFileResourceState("CONTENTS_MATCH")
)

func (OSPolicyResourceFileResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e OSPolicyResourceFileResourceState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyResourceFileResourceState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyResourceFileResourceState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OSPolicyResourceFileResourceState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Required. The desired state the agent should maintain for this package.
type OSPolicyResourcePackageResourceDesiredState pulumi.String

const (
	// Unspecified is invalid.
	OSPolicyResourcePackageResourceDesiredStateDesiredStateUnspecified = OSPolicyResourcePackageResourceDesiredState("DESIRED_STATE_UNSPECIFIED")
	// Ensure that the package is installed.
	OSPolicyResourcePackageResourceDesiredStateInstalled = OSPolicyResourcePackageResourceDesiredState("INSTALLED")
	// The agent ensures that the package is not installed and uninstalls it if detected.
	OSPolicyResourcePackageResourceDesiredStateRemoved = OSPolicyResourcePackageResourceDesiredState("REMOVED")
)

func (OSPolicyResourcePackageResourceDesiredState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e OSPolicyResourcePackageResourceDesiredState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyResourcePackageResourceDesiredState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyResourcePackageResourceDesiredState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OSPolicyResourcePackageResourceDesiredState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Required. Type of archive files in this repository.
type OSPolicyResourceRepositoryResourceAptRepositoryArchiveType pulumi.String

const (
	// Unspecified is invalid.
	OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeArchiveTypeUnspecified = OSPolicyResourceRepositoryResourceAptRepositoryArchiveType("ARCHIVE_TYPE_UNSPECIFIED")
	// Deb indicates that the archive contains binary files.
	OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeDeb = OSPolicyResourceRepositoryResourceAptRepositoryArchiveType("DEB")
	// Deb-src indicates that the archive contains source files.
	OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeDebSrc = OSPolicyResourceRepositoryResourceAptRepositoryArchiveType("DEB_SRC")
)

func (OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
