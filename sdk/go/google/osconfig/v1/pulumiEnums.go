// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
type AptSettingsType string

const (
	// By default, upgrade will be performed.
	AptSettingsTypeTypeUnspecified = AptSettingsType("TYPE_UNSPECIFIED")
	// Runs `apt-get dist-upgrade`.
	AptSettingsTypeDist = AptSettingsType("DIST")
	// Runs `apt-get upgrade`.
	AptSettingsTypeUpgrade = AptSettingsType("UPGRADE")
)

func (AptSettingsType) ElementType() reflect.Type {
	return reflect.TypeOf((*AptSettingsType)(nil)).Elem()
}

func (e AptSettingsType) ToAptSettingsTypeOutput() AptSettingsTypeOutput {
	return pulumi.ToOutput(e).(AptSettingsTypeOutput)
}

func (e AptSettingsType) ToAptSettingsTypeOutputWithContext(ctx context.Context) AptSettingsTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AptSettingsTypeOutput)
}

func (e AptSettingsType) ToAptSettingsTypePtrOutput() AptSettingsTypePtrOutput {
	return e.ToAptSettingsTypePtrOutputWithContext(context.Background())
}

func (e AptSettingsType) ToAptSettingsTypePtrOutputWithContext(ctx context.Context) AptSettingsTypePtrOutput {
	return AptSettingsType(e).ToAptSettingsTypeOutputWithContext(ctx).ToAptSettingsTypePtrOutputWithContext(ctx)
}

func (e AptSettingsType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AptSettingsType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AptSettingsType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AptSettingsType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AptSettingsTypeOutput struct{ *pulumi.OutputState }

func (AptSettingsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AptSettingsType)(nil)).Elem()
}

func (o AptSettingsTypeOutput) ToAptSettingsTypeOutput() AptSettingsTypeOutput {
	return o
}

func (o AptSettingsTypeOutput) ToAptSettingsTypeOutputWithContext(ctx context.Context) AptSettingsTypeOutput {
	return o
}

func (o AptSettingsTypeOutput) ToAptSettingsTypePtrOutput() AptSettingsTypePtrOutput {
	return o.ToAptSettingsTypePtrOutputWithContext(context.Background())
}

func (o AptSettingsTypeOutput) ToAptSettingsTypePtrOutputWithContext(ctx context.Context) AptSettingsTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AptSettingsType) *AptSettingsType {
		return &v
	}).(AptSettingsTypePtrOutput)
}

func (o AptSettingsTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AptSettingsType] {
	return pulumix.Output[AptSettingsType]{
		OutputState: o.OutputState,
	}
}

func (o AptSettingsTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AptSettingsTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AptSettingsType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AptSettingsTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AptSettingsTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AptSettingsType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AptSettingsTypePtrOutput struct{ *pulumi.OutputState }

func (AptSettingsTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AptSettingsType)(nil)).Elem()
}

func (o AptSettingsTypePtrOutput) ToAptSettingsTypePtrOutput() AptSettingsTypePtrOutput {
	return o
}

func (o AptSettingsTypePtrOutput) ToAptSettingsTypePtrOutputWithContext(ctx context.Context) AptSettingsTypePtrOutput {
	return o
}

func (o AptSettingsTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AptSettingsType] {
	return pulumix.Output[*AptSettingsType]{
		OutputState: o.OutputState,
	}
}

func (o AptSettingsTypePtrOutput) Elem() AptSettingsTypeOutput {
	return o.ApplyT(func(v *AptSettingsType) AptSettingsType {
		if v != nil {
			return *v
		}
		var ret AptSettingsType
		return ret
	}).(AptSettingsTypeOutput)
}

func (o AptSettingsTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AptSettingsTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AptSettingsType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AptSettingsTypeInput is an input type that accepts AptSettingsTypeArgs and AptSettingsTypeOutput values.
// You can construct a concrete instance of `AptSettingsTypeInput` via:
//
//	AptSettingsTypeArgs{...}
type AptSettingsTypeInput interface {
	pulumi.Input

	ToAptSettingsTypeOutput() AptSettingsTypeOutput
	ToAptSettingsTypeOutputWithContext(context.Context) AptSettingsTypeOutput
}

var aptSettingsTypePtrType = reflect.TypeOf((**AptSettingsType)(nil)).Elem()

type AptSettingsTypePtrInput interface {
	pulumi.Input

	ToAptSettingsTypePtrOutput() AptSettingsTypePtrOutput
	ToAptSettingsTypePtrOutputWithContext(context.Context) AptSettingsTypePtrOutput
}

type aptSettingsTypePtr string

func AptSettingsTypePtr(v string) AptSettingsTypePtrInput {
	return (*aptSettingsTypePtr)(&v)
}

func (*aptSettingsTypePtr) ElementType() reflect.Type {
	return aptSettingsTypePtrType
}

func (in *aptSettingsTypePtr) ToAptSettingsTypePtrOutput() AptSettingsTypePtrOutput {
	return pulumi.ToOutput(in).(AptSettingsTypePtrOutput)
}

func (in *aptSettingsTypePtr) ToAptSettingsTypePtrOutputWithContext(ctx context.Context) AptSettingsTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AptSettingsTypePtrOutput)
}

func (in *aptSettingsTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AptSettingsType] {
	return pulumix.Output[*AptSettingsType]{
		OutputState: in.ToAptSettingsTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
type ExecStepConfigInterpreter string

const (
	// If the interpreter is not specified, the value defaults to `NONE`.
	ExecStepConfigInterpreterInterpreterUnspecified = ExecStepConfigInterpreter("INTERPRETER_UNSPECIFIED")
	// Indicates that the file is run as follows on each operating system: + For Linux VMs, the file is ran as an executable and the interpreter might be parsed from the [shebang line](<https://wikipedia.org/wiki/Shebang_(Unix)>) of the file. + For Windows VM, this value is not supported.
	ExecStepConfigInterpreterNone = ExecStepConfigInterpreter("NONE")
	// Indicates that the file is run with `/bin/sh` on Linux and `cmd` on Windows.
	ExecStepConfigInterpreterShell = ExecStepConfigInterpreter("SHELL")
	// Indicates that the file is run with PowerShell.
	ExecStepConfigInterpreterPowershell = ExecStepConfigInterpreter("POWERSHELL")
)

func (ExecStepConfigInterpreter) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStepConfigInterpreter)(nil)).Elem()
}

func (e ExecStepConfigInterpreter) ToExecStepConfigInterpreterOutput() ExecStepConfigInterpreterOutput {
	return pulumi.ToOutput(e).(ExecStepConfigInterpreterOutput)
}

func (e ExecStepConfigInterpreter) ToExecStepConfigInterpreterOutputWithContext(ctx context.Context) ExecStepConfigInterpreterOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ExecStepConfigInterpreterOutput)
}

func (e ExecStepConfigInterpreter) ToExecStepConfigInterpreterPtrOutput() ExecStepConfigInterpreterPtrOutput {
	return e.ToExecStepConfigInterpreterPtrOutputWithContext(context.Background())
}

func (e ExecStepConfigInterpreter) ToExecStepConfigInterpreterPtrOutputWithContext(ctx context.Context) ExecStepConfigInterpreterPtrOutput {
	return ExecStepConfigInterpreter(e).ToExecStepConfigInterpreterOutputWithContext(ctx).ToExecStepConfigInterpreterPtrOutputWithContext(ctx)
}

func (e ExecStepConfigInterpreter) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExecStepConfigInterpreter) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExecStepConfigInterpreter) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ExecStepConfigInterpreter) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ExecStepConfigInterpreterOutput struct{ *pulumi.OutputState }

func (ExecStepConfigInterpreterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStepConfigInterpreter)(nil)).Elem()
}

func (o ExecStepConfigInterpreterOutput) ToExecStepConfigInterpreterOutput() ExecStepConfigInterpreterOutput {
	return o
}

func (o ExecStepConfigInterpreterOutput) ToExecStepConfigInterpreterOutputWithContext(ctx context.Context) ExecStepConfigInterpreterOutput {
	return o
}

func (o ExecStepConfigInterpreterOutput) ToExecStepConfigInterpreterPtrOutput() ExecStepConfigInterpreterPtrOutput {
	return o.ToExecStepConfigInterpreterPtrOutputWithContext(context.Background())
}

func (o ExecStepConfigInterpreterOutput) ToExecStepConfigInterpreterPtrOutputWithContext(ctx context.Context) ExecStepConfigInterpreterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExecStepConfigInterpreter) *ExecStepConfigInterpreter {
		return &v
	}).(ExecStepConfigInterpreterPtrOutput)
}

func (o ExecStepConfigInterpreterOutput) ToOutput(ctx context.Context) pulumix.Output[ExecStepConfigInterpreter] {
	return pulumix.Output[ExecStepConfigInterpreter]{
		OutputState: o.OutputState,
	}
}

func (o ExecStepConfigInterpreterOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ExecStepConfigInterpreterOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExecStepConfigInterpreter) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ExecStepConfigInterpreterOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExecStepConfigInterpreterOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExecStepConfigInterpreter) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ExecStepConfigInterpreterPtrOutput struct{ *pulumi.OutputState }

func (ExecStepConfigInterpreterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecStepConfigInterpreter)(nil)).Elem()
}

func (o ExecStepConfigInterpreterPtrOutput) ToExecStepConfigInterpreterPtrOutput() ExecStepConfigInterpreterPtrOutput {
	return o
}

func (o ExecStepConfigInterpreterPtrOutput) ToExecStepConfigInterpreterPtrOutputWithContext(ctx context.Context) ExecStepConfigInterpreterPtrOutput {
	return o
}

func (o ExecStepConfigInterpreterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExecStepConfigInterpreter] {
	return pulumix.Output[*ExecStepConfigInterpreter]{
		OutputState: o.OutputState,
	}
}

func (o ExecStepConfigInterpreterPtrOutput) Elem() ExecStepConfigInterpreterOutput {
	return o.ApplyT(func(v *ExecStepConfigInterpreter) ExecStepConfigInterpreter {
		if v != nil {
			return *v
		}
		var ret ExecStepConfigInterpreter
		return ret
	}).(ExecStepConfigInterpreterOutput)
}

func (o ExecStepConfigInterpreterPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExecStepConfigInterpreterPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ExecStepConfigInterpreter) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ExecStepConfigInterpreterInput is an input type that accepts ExecStepConfigInterpreterArgs and ExecStepConfigInterpreterOutput values.
// You can construct a concrete instance of `ExecStepConfigInterpreterInput` via:
//
//	ExecStepConfigInterpreterArgs{...}
type ExecStepConfigInterpreterInput interface {
	pulumi.Input

	ToExecStepConfigInterpreterOutput() ExecStepConfigInterpreterOutput
	ToExecStepConfigInterpreterOutputWithContext(context.Context) ExecStepConfigInterpreterOutput
}

var execStepConfigInterpreterPtrType = reflect.TypeOf((**ExecStepConfigInterpreter)(nil)).Elem()

type ExecStepConfigInterpreterPtrInput interface {
	pulumi.Input

	ToExecStepConfigInterpreterPtrOutput() ExecStepConfigInterpreterPtrOutput
	ToExecStepConfigInterpreterPtrOutputWithContext(context.Context) ExecStepConfigInterpreterPtrOutput
}

type execStepConfigInterpreterPtr string

func ExecStepConfigInterpreterPtr(v string) ExecStepConfigInterpreterPtrInput {
	return (*execStepConfigInterpreterPtr)(&v)
}

func (*execStepConfigInterpreterPtr) ElementType() reflect.Type {
	return execStepConfigInterpreterPtrType
}

func (in *execStepConfigInterpreterPtr) ToExecStepConfigInterpreterPtrOutput() ExecStepConfigInterpreterPtrOutput {
	return pulumi.ToOutput(in).(ExecStepConfigInterpreterPtrOutput)
}

func (in *execStepConfigInterpreterPtr) ToExecStepConfigInterpreterPtrOutputWithContext(ctx context.Context) ExecStepConfigInterpreterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ExecStepConfigInterpreterPtrOutput)
}

func (in *execStepConfigInterpreterPtr) ToOutput(ctx context.Context) pulumix.Output[*ExecStepConfigInterpreter] {
	return pulumix.Output[*ExecStepConfigInterpreter]{
		OutputState: in.ToExecStepConfigInterpreterPtrOutputWithContext(ctx).OutputState,
	}
}

// Required. Policy mode
type OSPolicyMode string

const (
	// Invalid mode
	OSPolicyModeModeUnspecified = OSPolicyMode("MODE_UNSPECIFIED")
	// This mode checks if the configuration resources in the policy are in their desired state. No actions are performed if they are not in the desired state. This mode is used for reporting purposes.
	OSPolicyModeValidation = OSPolicyMode("VALIDATION")
	// This mode checks if the configuration resources in the policy are in their desired state, and if not, enforces the desired state.
	OSPolicyModeEnforcement = OSPolicyMode("ENFORCEMENT")
)

func (OSPolicyMode) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyMode)(nil)).Elem()
}

func (e OSPolicyMode) ToOSPolicyModeOutput() OSPolicyModeOutput {
	return pulumi.ToOutput(e).(OSPolicyModeOutput)
}

func (e OSPolicyMode) ToOSPolicyModeOutputWithContext(ctx context.Context) OSPolicyModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OSPolicyModeOutput)
}

func (e OSPolicyMode) ToOSPolicyModePtrOutput() OSPolicyModePtrOutput {
	return e.ToOSPolicyModePtrOutputWithContext(context.Background())
}

func (e OSPolicyMode) ToOSPolicyModePtrOutputWithContext(ctx context.Context) OSPolicyModePtrOutput {
	return OSPolicyMode(e).ToOSPolicyModeOutputWithContext(ctx).ToOSPolicyModePtrOutputWithContext(ctx)
}

func (e OSPolicyMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OSPolicyMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OSPolicyModeOutput struct{ *pulumi.OutputState }

func (OSPolicyModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyMode)(nil)).Elem()
}

func (o OSPolicyModeOutput) ToOSPolicyModeOutput() OSPolicyModeOutput {
	return o
}

func (o OSPolicyModeOutput) ToOSPolicyModeOutputWithContext(ctx context.Context) OSPolicyModeOutput {
	return o
}

func (o OSPolicyModeOutput) ToOSPolicyModePtrOutput() OSPolicyModePtrOutput {
	return o.ToOSPolicyModePtrOutputWithContext(context.Background())
}

func (o OSPolicyModeOutput) ToOSPolicyModePtrOutputWithContext(ctx context.Context) OSPolicyModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyMode) *OSPolicyMode {
		return &v
	}).(OSPolicyModePtrOutput)
}

func (o OSPolicyModeOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyMode] {
	return pulumix.Output[OSPolicyMode]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OSPolicyModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSPolicyMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OSPolicyModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSPolicyModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSPolicyMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OSPolicyModePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyMode)(nil)).Elem()
}

func (o OSPolicyModePtrOutput) ToOSPolicyModePtrOutput() OSPolicyModePtrOutput {
	return o
}

func (o OSPolicyModePtrOutput) ToOSPolicyModePtrOutputWithContext(ctx context.Context) OSPolicyModePtrOutput {
	return o
}

func (o OSPolicyModePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyMode] {
	return pulumix.Output[*OSPolicyMode]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyModePtrOutput) Elem() OSPolicyModeOutput {
	return o.ApplyT(func(v *OSPolicyMode) OSPolicyMode {
		if v != nil {
			return *v
		}
		var ret OSPolicyMode
		return ret
	}).(OSPolicyModeOutput)
}

func (o OSPolicyModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSPolicyModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OSPolicyMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OSPolicyModeInput is an input type that accepts OSPolicyModeArgs and OSPolicyModeOutput values.
// You can construct a concrete instance of `OSPolicyModeInput` via:
//
//	OSPolicyModeArgs{...}
type OSPolicyModeInput interface {
	pulumi.Input

	ToOSPolicyModeOutput() OSPolicyModeOutput
	ToOSPolicyModeOutputWithContext(context.Context) OSPolicyModeOutput
}

var ospolicyModePtrType = reflect.TypeOf((**OSPolicyMode)(nil)).Elem()

type OSPolicyModePtrInput interface {
	pulumi.Input

	ToOSPolicyModePtrOutput() OSPolicyModePtrOutput
	ToOSPolicyModePtrOutputWithContext(context.Context) OSPolicyModePtrOutput
}

type ospolicyModePtr string

func OSPolicyModePtr(v string) OSPolicyModePtrInput {
	return (*ospolicyModePtr)(&v)
}

func (*ospolicyModePtr) ElementType() reflect.Type {
	return ospolicyModePtrType
}

func (in *ospolicyModePtr) ToOSPolicyModePtrOutput() OSPolicyModePtrOutput {
	return pulumi.ToOutput(in).(OSPolicyModePtrOutput)
}

func (in *ospolicyModePtr) ToOSPolicyModePtrOutputWithContext(ctx context.Context) OSPolicyModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OSPolicyModePtrOutput)
}

func (in *ospolicyModePtr) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyMode] {
	return pulumix.Output[*OSPolicyMode]{
		OutputState: in.ToOSPolicyModePtrOutputWithContext(ctx).OutputState,
	}
}

// Required. The script interpreter to use.
type OSPolicyResourceExecResourceExecInterpreter string

const (
	// Invalid value, the request will return validation error.
	OSPolicyResourceExecResourceExecInterpreterInterpreterUnspecified = OSPolicyResourceExecResourceExecInterpreter("INTERPRETER_UNSPECIFIED")
	// If an interpreter is not specified, the source is executed directly. This execution, without an interpreter, only succeeds for executables and scripts that have shebang lines.
	OSPolicyResourceExecResourceExecInterpreterNone = OSPolicyResourceExecResourceExecInterpreter("NONE")
	// Indicates that the script runs with `/bin/sh` on Linux and `cmd.exe` on Windows.
	OSPolicyResourceExecResourceExecInterpreterShell = OSPolicyResourceExecResourceExecInterpreter("SHELL")
	// Indicates that the script runs with PowerShell.
	OSPolicyResourceExecResourceExecInterpreterPowershell = OSPolicyResourceExecResourceExecInterpreter("POWERSHELL")
)

func (OSPolicyResourceExecResourceExecInterpreter) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceExecResourceExecInterpreter)(nil)).Elem()
}

func (e OSPolicyResourceExecResourceExecInterpreter) ToOSPolicyResourceExecResourceExecInterpreterOutput() OSPolicyResourceExecResourceExecInterpreterOutput {
	return pulumi.ToOutput(e).(OSPolicyResourceExecResourceExecInterpreterOutput)
}

func (e OSPolicyResourceExecResourceExecInterpreter) ToOSPolicyResourceExecResourceExecInterpreterOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecInterpreterOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OSPolicyResourceExecResourceExecInterpreterOutput)
}

func (e OSPolicyResourceExecResourceExecInterpreter) ToOSPolicyResourceExecResourceExecInterpreterPtrOutput() OSPolicyResourceExecResourceExecInterpreterPtrOutput {
	return e.ToOSPolicyResourceExecResourceExecInterpreterPtrOutputWithContext(context.Background())
}

func (e OSPolicyResourceExecResourceExecInterpreter) ToOSPolicyResourceExecResourceExecInterpreterPtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecInterpreterPtrOutput {
	return OSPolicyResourceExecResourceExecInterpreter(e).ToOSPolicyResourceExecResourceExecInterpreterOutputWithContext(ctx).ToOSPolicyResourceExecResourceExecInterpreterPtrOutputWithContext(ctx)
}

func (e OSPolicyResourceExecResourceExecInterpreter) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyResourceExecResourceExecInterpreter) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyResourceExecResourceExecInterpreter) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OSPolicyResourceExecResourceExecInterpreter) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OSPolicyResourceExecResourceExecInterpreterOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceExecResourceExecInterpreterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceExecResourceExecInterpreter)(nil)).Elem()
}

func (o OSPolicyResourceExecResourceExecInterpreterOutput) ToOSPolicyResourceExecResourceExecInterpreterOutput() OSPolicyResourceExecResourceExecInterpreterOutput {
	return o
}

func (o OSPolicyResourceExecResourceExecInterpreterOutput) ToOSPolicyResourceExecResourceExecInterpreterOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecInterpreterOutput {
	return o
}

func (o OSPolicyResourceExecResourceExecInterpreterOutput) ToOSPolicyResourceExecResourceExecInterpreterPtrOutput() OSPolicyResourceExecResourceExecInterpreterPtrOutput {
	return o.ToOSPolicyResourceExecResourceExecInterpreterPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceExecResourceExecInterpreterOutput) ToOSPolicyResourceExecResourceExecInterpreterPtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecInterpreterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourceExecResourceExecInterpreter) *OSPolicyResourceExecResourceExecInterpreter {
		return &v
	}).(OSPolicyResourceExecResourceExecInterpreterPtrOutput)
}

func (o OSPolicyResourceExecResourceExecInterpreterOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceExecResourceExecInterpreter] {
	return pulumix.Output[OSPolicyResourceExecResourceExecInterpreter]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceExecResourceExecInterpreterOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OSPolicyResourceExecResourceExecInterpreterOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSPolicyResourceExecResourceExecInterpreter) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OSPolicyResourceExecResourceExecInterpreterOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceExecResourceExecInterpreterOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSPolicyResourceExecResourceExecInterpreter) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OSPolicyResourceExecResourceExecInterpreterPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceExecResourceExecInterpreterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceExecResourceExecInterpreter)(nil)).Elem()
}

func (o OSPolicyResourceExecResourceExecInterpreterPtrOutput) ToOSPolicyResourceExecResourceExecInterpreterPtrOutput() OSPolicyResourceExecResourceExecInterpreterPtrOutput {
	return o
}

func (o OSPolicyResourceExecResourceExecInterpreterPtrOutput) ToOSPolicyResourceExecResourceExecInterpreterPtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecInterpreterPtrOutput {
	return o
}

func (o OSPolicyResourceExecResourceExecInterpreterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceExecResourceExecInterpreter] {
	return pulumix.Output[*OSPolicyResourceExecResourceExecInterpreter]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceExecResourceExecInterpreterPtrOutput) Elem() OSPolicyResourceExecResourceExecInterpreterOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResourceExecInterpreter) OSPolicyResourceExecResourceExecInterpreter {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourceExecResourceExecInterpreter
		return ret
	}).(OSPolicyResourceExecResourceExecInterpreterOutput)
}

func (o OSPolicyResourceExecResourceExecInterpreterPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceExecResourceExecInterpreterPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OSPolicyResourceExecResourceExecInterpreter) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OSPolicyResourceExecResourceExecInterpreterInput is an input type that accepts OSPolicyResourceExecResourceExecInterpreterArgs and OSPolicyResourceExecResourceExecInterpreterOutput values.
// You can construct a concrete instance of `OSPolicyResourceExecResourceExecInterpreterInput` via:
//
//	OSPolicyResourceExecResourceExecInterpreterArgs{...}
type OSPolicyResourceExecResourceExecInterpreterInput interface {
	pulumi.Input

	ToOSPolicyResourceExecResourceExecInterpreterOutput() OSPolicyResourceExecResourceExecInterpreterOutput
	ToOSPolicyResourceExecResourceExecInterpreterOutputWithContext(context.Context) OSPolicyResourceExecResourceExecInterpreterOutput
}

var ospolicyResourceExecResourceExecInterpreterPtrType = reflect.TypeOf((**OSPolicyResourceExecResourceExecInterpreter)(nil)).Elem()

type OSPolicyResourceExecResourceExecInterpreterPtrInput interface {
	pulumi.Input

	ToOSPolicyResourceExecResourceExecInterpreterPtrOutput() OSPolicyResourceExecResourceExecInterpreterPtrOutput
	ToOSPolicyResourceExecResourceExecInterpreterPtrOutputWithContext(context.Context) OSPolicyResourceExecResourceExecInterpreterPtrOutput
}

type ospolicyResourceExecResourceExecInterpreterPtr string

func OSPolicyResourceExecResourceExecInterpreterPtr(v string) OSPolicyResourceExecResourceExecInterpreterPtrInput {
	return (*ospolicyResourceExecResourceExecInterpreterPtr)(&v)
}

func (*ospolicyResourceExecResourceExecInterpreterPtr) ElementType() reflect.Type {
	return ospolicyResourceExecResourceExecInterpreterPtrType
}

func (in *ospolicyResourceExecResourceExecInterpreterPtr) ToOSPolicyResourceExecResourceExecInterpreterPtrOutput() OSPolicyResourceExecResourceExecInterpreterPtrOutput {
	return pulumi.ToOutput(in).(OSPolicyResourceExecResourceExecInterpreterPtrOutput)
}

func (in *ospolicyResourceExecResourceExecInterpreterPtr) ToOSPolicyResourceExecResourceExecInterpreterPtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecInterpreterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OSPolicyResourceExecResourceExecInterpreterPtrOutput)
}

func (in *ospolicyResourceExecResourceExecInterpreterPtr) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceExecResourceExecInterpreter] {
	return pulumix.Output[*OSPolicyResourceExecResourceExecInterpreter]{
		OutputState: in.ToOSPolicyResourceExecResourceExecInterpreterPtrOutputWithContext(ctx).OutputState,
	}
}

// Required. Desired state of the file.
type OSPolicyResourceFileResourceState string

const (
	// Unspecified is invalid.
	OSPolicyResourceFileResourceStateDesiredStateUnspecified = OSPolicyResourceFileResourceState("DESIRED_STATE_UNSPECIFIED")
	// Ensure file at path is present.
	OSPolicyResourceFileResourceStatePresent = OSPolicyResourceFileResourceState("PRESENT")
	// Ensure file at path is absent.
	OSPolicyResourceFileResourceStateAbsent = OSPolicyResourceFileResourceState("ABSENT")
	// Ensure the contents of the file at path matches. If the file does not exist it will be created.
	OSPolicyResourceFileResourceStateContentsMatch = OSPolicyResourceFileResourceState("CONTENTS_MATCH")
)

func (OSPolicyResourceFileResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileResourceState)(nil)).Elem()
}

func (e OSPolicyResourceFileResourceState) ToOSPolicyResourceFileResourceStateOutput() OSPolicyResourceFileResourceStateOutput {
	return pulumi.ToOutput(e).(OSPolicyResourceFileResourceStateOutput)
}

func (e OSPolicyResourceFileResourceState) ToOSPolicyResourceFileResourceStateOutputWithContext(ctx context.Context) OSPolicyResourceFileResourceStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OSPolicyResourceFileResourceStateOutput)
}

func (e OSPolicyResourceFileResourceState) ToOSPolicyResourceFileResourceStatePtrOutput() OSPolicyResourceFileResourceStatePtrOutput {
	return e.ToOSPolicyResourceFileResourceStatePtrOutputWithContext(context.Background())
}

func (e OSPolicyResourceFileResourceState) ToOSPolicyResourceFileResourceStatePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileResourceStatePtrOutput {
	return OSPolicyResourceFileResourceState(e).ToOSPolicyResourceFileResourceStateOutputWithContext(ctx).ToOSPolicyResourceFileResourceStatePtrOutputWithContext(ctx)
}

func (e OSPolicyResourceFileResourceState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyResourceFileResourceState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyResourceFileResourceState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OSPolicyResourceFileResourceState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OSPolicyResourceFileResourceStateOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileResourceStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileResourceState)(nil)).Elem()
}

func (o OSPolicyResourceFileResourceStateOutput) ToOSPolicyResourceFileResourceStateOutput() OSPolicyResourceFileResourceStateOutput {
	return o
}

func (o OSPolicyResourceFileResourceStateOutput) ToOSPolicyResourceFileResourceStateOutputWithContext(ctx context.Context) OSPolicyResourceFileResourceStateOutput {
	return o
}

func (o OSPolicyResourceFileResourceStateOutput) ToOSPolicyResourceFileResourceStatePtrOutput() OSPolicyResourceFileResourceStatePtrOutput {
	return o.ToOSPolicyResourceFileResourceStatePtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceFileResourceStateOutput) ToOSPolicyResourceFileResourceStatePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileResourceStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourceFileResourceState) *OSPolicyResourceFileResourceState {
		return &v
	}).(OSPolicyResourceFileResourceStatePtrOutput)
}

func (o OSPolicyResourceFileResourceStateOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceFileResourceState] {
	return pulumix.Output[OSPolicyResourceFileResourceState]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceFileResourceStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OSPolicyResourceFileResourceStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSPolicyResourceFileResourceState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OSPolicyResourceFileResourceStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceFileResourceStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSPolicyResourceFileResourceState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OSPolicyResourceFileResourceStatePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileResourceStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFileResourceState)(nil)).Elem()
}

func (o OSPolicyResourceFileResourceStatePtrOutput) ToOSPolicyResourceFileResourceStatePtrOutput() OSPolicyResourceFileResourceStatePtrOutput {
	return o
}

func (o OSPolicyResourceFileResourceStatePtrOutput) ToOSPolicyResourceFileResourceStatePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileResourceStatePtrOutput {
	return o
}

func (o OSPolicyResourceFileResourceStatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceFileResourceState] {
	return pulumix.Output[*OSPolicyResourceFileResourceState]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceFileResourceStatePtrOutput) Elem() OSPolicyResourceFileResourceStateOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileResourceState) OSPolicyResourceFileResourceState {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourceFileResourceState
		return ret
	}).(OSPolicyResourceFileResourceStateOutput)
}

func (o OSPolicyResourceFileResourceStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceFileResourceStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OSPolicyResourceFileResourceState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OSPolicyResourceFileResourceStateInput is an input type that accepts OSPolicyResourceFileResourceStateArgs and OSPolicyResourceFileResourceStateOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileResourceStateInput` via:
//
//	OSPolicyResourceFileResourceStateArgs{...}
type OSPolicyResourceFileResourceStateInput interface {
	pulumi.Input

	ToOSPolicyResourceFileResourceStateOutput() OSPolicyResourceFileResourceStateOutput
	ToOSPolicyResourceFileResourceStateOutputWithContext(context.Context) OSPolicyResourceFileResourceStateOutput
}

var ospolicyResourceFileResourceStatePtrType = reflect.TypeOf((**OSPolicyResourceFileResourceState)(nil)).Elem()

type OSPolicyResourceFileResourceStatePtrInput interface {
	pulumi.Input

	ToOSPolicyResourceFileResourceStatePtrOutput() OSPolicyResourceFileResourceStatePtrOutput
	ToOSPolicyResourceFileResourceStatePtrOutputWithContext(context.Context) OSPolicyResourceFileResourceStatePtrOutput
}

type ospolicyResourceFileResourceStatePtr string

func OSPolicyResourceFileResourceStatePtr(v string) OSPolicyResourceFileResourceStatePtrInput {
	return (*ospolicyResourceFileResourceStatePtr)(&v)
}

func (*ospolicyResourceFileResourceStatePtr) ElementType() reflect.Type {
	return ospolicyResourceFileResourceStatePtrType
}

func (in *ospolicyResourceFileResourceStatePtr) ToOSPolicyResourceFileResourceStatePtrOutput() OSPolicyResourceFileResourceStatePtrOutput {
	return pulumi.ToOutput(in).(OSPolicyResourceFileResourceStatePtrOutput)
}

func (in *ospolicyResourceFileResourceStatePtr) ToOSPolicyResourceFileResourceStatePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileResourceStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OSPolicyResourceFileResourceStatePtrOutput)
}

func (in *ospolicyResourceFileResourceStatePtr) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceFileResourceState] {
	return pulumix.Output[*OSPolicyResourceFileResourceState]{
		OutputState: in.ToOSPolicyResourceFileResourceStatePtrOutputWithContext(ctx).OutputState,
	}
}

// Required. The desired state the agent should maintain for this package.
type OSPolicyResourcePackageResourceDesiredState string

const (
	// Unspecified is invalid.
	OSPolicyResourcePackageResourceDesiredStateDesiredStateUnspecified = OSPolicyResourcePackageResourceDesiredState("DESIRED_STATE_UNSPECIFIED")
	// Ensure that the package is installed.
	OSPolicyResourcePackageResourceDesiredStateInstalled = OSPolicyResourcePackageResourceDesiredState("INSTALLED")
	// The agent ensures that the package is not installed and uninstalls it if detected.
	OSPolicyResourcePackageResourceDesiredStateRemoved = OSPolicyResourcePackageResourceDesiredState("REMOVED")
)

func (OSPolicyResourcePackageResourceDesiredState) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceDesiredState)(nil)).Elem()
}

func (e OSPolicyResourcePackageResourceDesiredState) ToOSPolicyResourcePackageResourceDesiredStateOutput() OSPolicyResourcePackageResourceDesiredStateOutput {
	return pulumi.ToOutput(e).(OSPolicyResourcePackageResourceDesiredStateOutput)
}

func (e OSPolicyResourcePackageResourceDesiredState) ToOSPolicyResourcePackageResourceDesiredStateOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDesiredStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OSPolicyResourcePackageResourceDesiredStateOutput)
}

func (e OSPolicyResourcePackageResourceDesiredState) ToOSPolicyResourcePackageResourceDesiredStatePtrOutput() OSPolicyResourcePackageResourceDesiredStatePtrOutput {
	return e.ToOSPolicyResourcePackageResourceDesiredStatePtrOutputWithContext(context.Background())
}

func (e OSPolicyResourcePackageResourceDesiredState) ToOSPolicyResourcePackageResourceDesiredStatePtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDesiredStatePtrOutput {
	return OSPolicyResourcePackageResourceDesiredState(e).ToOSPolicyResourcePackageResourceDesiredStateOutputWithContext(ctx).ToOSPolicyResourcePackageResourceDesiredStatePtrOutputWithContext(ctx)
}

func (e OSPolicyResourcePackageResourceDesiredState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyResourcePackageResourceDesiredState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyResourcePackageResourceDesiredState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OSPolicyResourcePackageResourceDesiredState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OSPolicyResourcePackageResourceDesiredStateOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceDesiredStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceDesiredState)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceDesiredStateOutput) ToOSPolicyResourcePackageResourceDesiredStateOutput() OSPolicyResourcePackageResourceDesiredStateOutput {
	return o
}

func (o OSPolicyResourcePackageResourceDesiredStateOutput) ToOSPolicyResourcePackageResourceDesiredStateOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDesiredStateOutput {
	return o
}

func (o OSPolicyResourcePackageResourceDesiredStateOutput) ToOSPolicyResourcePackageResourceDesiredStatePtrOutput() OSPolicyResourcePackageResourceDesiredStatePtrOutput {
	return o.ToOSPolicyResourcePackageResourceDesiredStatePtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceDesiredStateOutput) ToOSPolicyResourcePackageResourceDesiredStatePtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDesiredStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourcePackageResourceDesiredState) *OSPolicyResourcePackageResourceDesiredState {
		return &v
	}).(OSPolicyResourcePackageResourceDesiredStatePtrOutput)
}

func (o OSPolicyResourcePackageResourceDesiredStateOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceDesiredState] {
	return pulumix.Output[OSPolicyResourcePackageResourceDesiredState]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourcePackageResourceDesiredStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceDesiredStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSPolicyResourcePackageResourceDesiredState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OSPolicyResourcePackageResourceDesiredStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceDesiredStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSPolicyResourcePackageResourceDesiredState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OSPolicyResourcePackageResourceDesiredStatePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceDesiredStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceDesiredState)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceDesiredStatePtrOutput) ToOSPolicyResourcePackageResourceDesiredStatePtrOutput() OSPolicyResourcePackageResourceDesiredStatePtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceDesiredStatePtrOutput) ToOSPolicyResourcePackageResourceDesiredStatePtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDesiredStatePtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceDesiredStatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResourceDesiredState] {
	return pulumix.Output[*OSPolicyResourcePackageResourceDesiredState]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourcePackageResourceDesiredStatePtrOutput) Elem() OSPolicyResourcePackageResourceDesiredStateOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceDesiredState) OSPolicyResourcePackageResourceDesiredState {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourcePackageResourceDesiredState
		return ret
	}).(OSPolicyResourcePackageResourceDesiredStateOutput)
}

func (o OSPolicyResourcePackageResourceDesiredStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceDesiredStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OSPolicyResourcePackageResourceDesiredState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OSPolicyResourcePackageResourceDesiredStateInput is an input type that accepts OSPolicyResourcePackageResourceDesiredStateArgs and OSPolicyResourcePackageResourceDesiredStateOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceDesiredStateInput` via:
//
//	OSPolicyResourcePackageResourceDesiredStateArgs{...}
type OSPolicyResourcePackageResourceDesiredStateInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceDesiredStateOutput() OSPolicyResourcePackageResourceDesiredStateOutput
	ToOSPolicyResourcePackageResourceDesiredStateOutputWithContext(context.Context) OSPolicyResourcePackageResourceDesiredStateOutput
}

var ospolicyResourcePackageResourceDesiredStatePtrType = reflect.TypeOf((**OSPolicyResourcePackageResourceDesiredState)(nil)).Elem()

type OSPolicyResourcePackageResourceDesiredStatePtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceDesiredStatePtrOutput() OSPolicyResourcePackageResourceDesiredStatePtrOutput
	ToOSPolicyResourcePackageResourceDesiredStatePtrOutputWithContext(context.Context) OSPolicyResourcePackageResourceDesiredStatePtrOutput
}

type ospolicyResourcePackageResourceDesiredStatePtr string

func OSPolicyResourcePackageResourceDesiredStatePtr(v string) OSPolicyResourcePackageResourceDesiredStatePtrInput {
	return (*ospolicyResourcePackageResourceDesiredStatePtr)(&v)
}

func (*ospolicyResourcePackageResourceDesiredStatePtr) ElementType() reflect.Type {
	return ospolicyResourcePackageResourceDesiredStatePtrType
}

func (in *ospolicyResourcePackageResourceDesiredStatePtr) ToOSPolicyResourcePackageResourceDesiredStatePtrOutput() OSPolicyResourcePackageResourceDesiredStatePtrOutput {
	return pulumi.ToOutput(in).(OSPolicyResourcePackageResourceDesiredStatePtrOutput)
}

func (in *ospolicyResourcePackageResourceDesiredStatePtr) ToOSPolicyResourcePackageResourceDesiredStatePtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDesiredStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OSPolicyResourcePackageResourceDesiredStatePtrOutput)
}

func (in *ospolicyResourcePackageResourceDesiredStatePtr) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResourceDesiredState] {
	return pulumix.Output[*OSPolicyResourcePackageResourceDesiredState]{
		OutputState: in.ToOSPolicyResourcePackageResourceDesiredStatePtrOutputWithContext(ctx).OutputState,
	}
}

// Required. Type of archive files in this repository.
type OSPolicyResourceRepositoryResourceAptRepositoryArchiveType string

const (
	// Unspecified is invalid.
	OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeArchiveTypeUnspecified = OSPolicyResourceRepositoryResourceAptRepositoryArchiveType("ARCHIVE_TYPE_UNSPECIFIED")
	// Deb indicates that the archive contains binary files.
	OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeDeb = OSPolicyResourceRepositoryResourceAptRepositoryArchiveType("DEB")
	// Deb-src indicates that the archive contains source files.
	OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeDebSrc = OSPolicyResourceRepositoryResourceAptRepositoryArchiveType("DEB_SRC")
)

func (OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceAptRepositoryArchiveType)(nil)).Elem()
}

func (e OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput() OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput {
	return pulumi.ToOutput(e).(OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput)
}

func (e OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput)
}

func (e OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput() OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput {
	return e.ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutputWithContext(context.Background())
}

func (e OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput {
	return OSPolicyResourceRepositoryResourceAptRepositoryArchiveType(e).ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutputWithContext(ctx).ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutputWithContext(ctx)
}

func (e OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceAptRepositoryArchiveType)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput() OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput() OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput {
	return o.ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) *OSPolicyResourceRepositoryResourceAptRepositoryArchiveType {
		return &v
	}).(OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput)
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceRepositoryResourceAptRepositoryArchiveType] {
	return pulumix.Output[OSPolicyResourceRepositoryResourceAptRepositoryArchiveType]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceAptRepositoryArchiveType)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput() OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceRepositoryResourceAptRepositoryArchiveType] {
	return pulumix.Output[*OSPolicyResourceRepositoryResourceAptRepositoryArchiveType]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput) Elem() OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) OSPolicyResourceRepositoryResourceAptRepositoryArchiveType {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourceRepositoryResourceAptRepositoryArchiveType
		return ret
	}).(OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput)
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OSPolicyResourceRepositoryResourceAptRepositoryArchiveType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeInput is an input type that accepts OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeArgs and OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeInput` via:
//
//	OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeArgs{...}
type OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput() OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput
	ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput
}

var ospolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrType = reflect.TypeOf((**OSPolicyResourceRepositoryResourceAptRepositoryArchiveType)(nil)).Elem()

type OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput() OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput
	ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput
}

type ospolicyResourceRepositoryResourceAptRepositoryArchiveTypePtr string

func OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtr(v string) OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrInput {
	return (*ospolicyResourceRepositoryResourceAptRepositoryArchiveTypePtr)(&v)
}

func (*ospolicyResourceRepositoryResourceAptRepositoryArchiveTypePtr) ElementType() reflect.Type {
	return ospolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrType
}

func (in *ospolicyResourceRepositoryResourceAptRepositoryArchiveTypePtr) ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput() OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput {
	return pulumi.ToOutput(in).(OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput)
}

func (in *ospolicyResourceRepositoryResourceAptRepositoryArchiveTypePtr) ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput)
}

func (in *ospolicyResourceRepositoryResourceAptRepositoryArchiveTypePtr) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceRepositoryResourceAptRepositoryArchiveType] {
	return pulumix.Output[*OSPolicyResourceRepositoryResourceAptRepositoryArchiveType]{
		OutputState: in.ToOSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Post-patch reboot settings.
type PatchConfigRebootConfig string

const (
	// The default behavior is DEFAULT.
	PatchConfigRebootConfigRebootConfigUnspecified = PatchConfigRebootConfig("REBOOT_CONFIG_UNSPECIFIED")
	// The agent decides if a reboot is necessary by checking signals such as registry keys on Windows or `/var/run/reboot-required` on APT based systems. On RPM based systems, a set of core system package install times are compared with system boot time.
	PatchConfigRebootConfigDefault = PatchConfigRebootConfig("DEFAULT")
	// Always reboot the machine after the update completes.
	PatchConfigRebootConfigAlways = PatchConfigRebootConfig("ALWAYS")
	// Never reboot the machine after the update completes.
	PatchConfigRebootConfigNever = PatchConfigRebootConfig("NEVER")
)

func (PatchConfigRebootConfig) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchConfigRebootConfig)(nil)).Elem()
}

func (e PatchConfigRebootConfig) ToPatchConfigRebootConfigOutput() PatchConfigRebootConfigOutput {
	return pulumi.ToOutput(e).(PatchConfigRebootConfigOutput)
}

func (e PatchConfigRebootConfig) ToPatchConfigRebootConfigOutputWithContext(ctx context.Context) PatchConfigRebootConfigOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PatchConfigRebootConfigOutput)
}

func (e PatchConfigRebootConfig) ToPatchConfigRebootConfigPtrOutput() PatchConfigRebootConfigPtrOutput {
	return e.ToPatchConfigRebootConfigPtrOutputWithContext(context.Background())
}

func (e PatchConfigRebootConfig) ToPatchConfigRebootConfigPtrOutputWithContext(ctx context.Context) PatchConfigRebootConfigPtrOutput {
	return PatchConfigRebootConfig(e).ToPatchConfigRebootConfigOutputWithContext(ctx).ToPatchConfigRebootConfigPtrOutputWithContext(ctx)
}

func (e PatchConfigRebootConfig) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PatchConfigRebootConfig) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PatchConfigRebootConfig) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PatchConfigRebootConfig) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PatchConfigRebootConfigOutput struct{ *pulumi.OutputState }

func (PatchConfigRebootConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchConfigRebootConfig)(nil)).Elem()
}

func (o PatchConfigRebootConfigOutput) ToPatchConfigRebootConfigOutput() PatchConfigRebootConfigOutput {
	return o
}

func (o PatchConfigRebootConfigOutput) ToPatchConfigRebootConfigOutputWithContext(ctx context.Context) PatchConfigRebootConfigOutput {
	return o
}

func (o PatchConfigRebootConfigOutput) ToPatchConfigRebootConfigPtrOutput() PatchConfigRebootConfigPtrOutput {
	return o.ToPatchConfigRebootConfigPtrOutputWithContext(context.Background())
}

func (o PatchConfigRebootConfigOutput) ToPatchConfigRebootConfigPtrOutputWithContext(ctx context.Context) PatchConfigRebootConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PatchConfigRebootConfig) *PatchConfigRebootConfig {
		return &v
	}).(PatchConfigRebootConfigPtrOutput)
}

func (o PatchConfigRebootConfigOutput) ToOutput(ctx context.Context) pulumix.Output[PatchConfigRebootConfig] {
	return pulumix.Output[PatchConfigRebootConfig]{
		OutputState: o.OutputState,
	}
}

func (o PatchConfigRebootConfigOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PatchConfigRebootConfigOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PatchConfigRebootConfig) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PatchConfigRebootConfigOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PatchConfigRebootConfigOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PatchConfigRebootConfig) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PatchConfigRebootConfigPtrOutput struct{ *pulumi.OutputState }

func (PatchConfigRebootConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchConfigRebootConfig)(nil)).Elem()
}

func (o PatchConfigRebootConfigPtrOutput) ToPatchConfigRebootConfigPtrOutput() PatchConfigRebootConfigPtrOutput {
	return o
}

func (o PatchConfigRebootConfigPtrOutput) ToPatchConfigRebootConfigPtrOutputWithContext(ctx context.Context) PatchConfigRebootConfigPtrOutput {
	return o
}

func (o PatchConfigRebootConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PatchConfigRebootConfig] {
	return pulumix.Output[*PatchConfigRebootConfig]{
		OutputState: o.OutputState,
	}
}

func (o PatchConfigRebootConfigPtrOutput) Elem() PatchConfigRebootConfigOutput {
	return o.ApplyT(func(v *PatchConfigRebootConfig) PatchConfigRebootConfig {
		if v != nil {
			return *v
		}
		var ret PatchConfigRebootConfig
		return ret
	}).(PatchConfigRebootConfigOutput)
}

func (o PatchConfigRebootConfigPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PatchConfigRebootConfigPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PatchConfigRebootConfig) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PatchConfigRebootConfigInput is an input type that accepts PatchConfigRebootConfigArgs and PatchConfigRebootConfigOutput values.
// You can construct a concrete instance of `PatchConfigRebootConfigInput` via:
//
//	PatchConfigRebootConfigArgs{...}
type PatchConfigRebootConfigInput interface {
	pulumi.Input

	ToPatchConfigRebootConfigOutput() PatchConfigRebootConfigOutput
	ToPatchConfigRebootConfigOutputWithContext(context.Context) PatchConfigRebootConfigOutput
}

var patchConfigRebootConfigPtrType = reflect.TypeOf((**PatchConfigRebootConfig)(nil)).Elem()

type PatchConfigRebootConfigPtrInput interface {
	pulumi.Input

	ToPatchConfigRebootConfigPtrOutput() PatchConfigRebootConfigPtrOutput
	ToPatchConfigRebootConfigPtrOutputWithContext(context.Context) PatchConfigRebootConfigPtrOutput
}

type patchConfigRebootConfigPtr string

func PatchConfigRebootConfigPtr(v string) PatchConfigRebootConfigPtrInput {
	return (*patchConfigRebootConfigPtr)(&v)
}

func (*patchConfigRebootConfigPtr) ElementType() reflect.Type {
	return patchConfigRebootConfigPtrType
}

func (in *patchConfigRebootConfigPtr) ToPatchConfigRebootConfigPtrOutput() PatchConfigRebootConfigPtrOutput {
	return pulumi.ToOutput(in).(PatchConfigRebootConfigPtrOutput)
}

func (in *patchConfigRebootConfigPtr) ToPatchConfigRebootConfigPtrOutputWithContext(ctx context.Context) PatchConfigRebootConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PatchConfigRebootConfigPtrOutput)
}

func (in *patchConfigRebootConfigPtr) ToOutput(ctx context.Context) pulumix.Output[*PatchConfigRebootConfig] {
	return pulumix.Output[*PatchConfigRebootConfig]{
		OutputState: in.ToPatchConfigRebootConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Mode of the patch rollout.
type PatchRolloutMode string

const (
	// Mode must be specified.
	PatchRolloutModeModeUnspecified = PatchRolloutMode("MODE_UNSPECIFIED")
	// Patches are applied one zone at a time. The patch job begins in the region with the lowest number of targeted VMs. Within the region, patching begins in the zone with the lowest number of targeted VMs. If multiple regions (or zones within a region) have the same number of targeted VMs, a tie-breaker is achieved by sorting the regions or zones in alphabetical order.
	PatchRolloutModeZoneByZone = PatchRolloutMode("ZONE_BY_ZONE")
	// Patches are applied to VMs in all zones at the same time.
	PatchRolloutModeConcurrentZones = PatchRolloutMode("CONCURRENT_ZONES")
)

func (PatchRolloutMode) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchRolloutMode)(nil)).Elem()
}

func (e PatchRolloutMode) ToPatchRolloutModeOutput() PatchRolloutModeOutput {
	return pulumi.ToOutput(e).(PatchRolloutModeOutput)
}

func (e PatchRolloutMode) ToPatchRolloutModeOutputWithContext(ctx context.Context) PatchRolloutModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PatchRolloutModeOutput)
}

func (e PatchRolloutMode) ToPatchRolloutModePtrOutput() PatchRolloutModePtrOutput {
	return e.ToPatchRolloutModePtrOutputWithContext(context.Background())
}

func (e PatchRolloutMode) ToPatchRolloutModePtrOutputWithContext(ctx context.Context) PatchRolloutModePtrOutput {
	return PatchRolloutMode(e).ToPatchRolloutModeOutputWithContext(ctx).ToPatchRolloutModePtrOutputWithContext(ctx)
}

func (e PatchRolloutMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PatchRolloutMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PatchRolloutMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PatchRolloutMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PatchRolloutModeOutput struct{ *pulumi.OutputState }

func (PatchRolloutModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchRolloutMode)(nil)).Elem()
}

func (o PatchRolloutModeOutput) ToPatchRolloutModeOutput() PatchRolloutModeOutput {
	return o
}

func (o PatchRolloutModeOutput) ToPatchRolloutModeOutputWithContext(ctx context.Context) PatchRolloutModeOutput {
	return o
}

func (o PatchRolloutModeOutput) ToPatchRolloutModePtrOutput() PatchRolloutModePtrOutput {
	return o.ToPatchRolloutModePtrOutputWithContext(context.Background())
}

func (o PatchRolloutModeOutput) ToPatchRolloutModePtrOutputWithContext(ctx context.Context) PatchRolloutModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PatchRolloutMode) *PatchRolloutMode {
		return &v
	}).(PatchRolloutModePtrOutput)
}

func (o PatchRolloutModeOutput) ToOutput(ctx context.Context) pulumix.Output[PatchRolloutMode] {
	return pulumix.Output[PatchRolloutMode]{
		OutputState: o.OutputState,
	}
}

func (o PatchRolloutModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PatchRolloutModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PatchRolloutMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PatchRolloutModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PatchRolloutModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PatchRolloutMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PatchRolloutModePtrOutput struct{ *pulumi.OutputState }

func (PatchRolloutModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchRolloutMode)(nil)).Elem()
}

func (o PatchRolloutModePtrOutput) ToPatchRolloutModePtrOutput() PatchRolloutModePtrOutput {
	return o
}

func (o PatchRolloutModePtrOutput) ToPatchRolloutModePtrOutputWithContext(ctx context.Context) PatchRolloutModePtrOutput {
	return o
}

func (o PatchRolloutModePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PatchRolloutMode] {
	return pulumix.Output[*PatchRolloutMode]{
		OutputState: o.OutputState,
	}
}

func (o PatchRolloutModePtrOutput) Elem() PatchRolloutModeOutput {
	return o.ApplyT(func(v *PatchRolloutMode) PatchRolloutMode {
		if v != nil {
			return *v
		}
		var ret PatchRolloutMode
		return ret
	}).(PatchRolloutModeOutput)
}

func (o PatchRolloutModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PatchRolloutModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PatchRolloutMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PatchRolloutModeInput is an input type that accepts PatchRolloutModeArgs and PatchRolloutModeOutput values.
// You can construct a concrete instance of `PatchRolloutModeInput` via:
//
//	PatchRolloutModeArgs{...}
type PatchRolloutModeInput interface {
	pulumi.Input

	ToPatchRolloutModeOutput() PatchRolloutModeOutput
	ToPatchRolloutModeOutputWithContext(context.Context) PatchRolloutModeOutput
}

var patchRolloutModePtrType = reflect.TypeOf((**PatchRolloutMode)(nil)).Elem()

type PatchRolloutModePtrInput interface {
	pulumi.Input

	ToPatchRolloutModePtrOutput() PatchRolloutModePtrOutput
	ToPatchRolloutModePtrOutputWithContext(context.Context) PatchRolloutModePtrOutput
}

type patchRolloutModePtr string

func PatchRolloutModePtr(v string) PatchRolloutModePtrInput {
	return (*patchRolloutModePtr)(&v)
}

func (*patchRolloutModePtr) ElementType() reflect.Type {
	return patchRolloutModePtrType
}

func (in *patchRolloutModePtr) ToPatchRolloutModePtrOutput() PatchRolloutModePtrOutput {
	return pulumi.ToOutput(in).(PatchRolloutModePtrOutput)
}

func (in *patchRolloutModePtr) ToPatchRolloutModePtrOutputWithContext(ctx context.Context) PatchRolloutModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PatchRolloutModePtrOutput)
}

func (in *patchRolloutModePtr) ToOutput(ctx context.Context) pulumix.Output[*PatchRolloutMode] {
	return pulumix.Output[*PatchRolloutMode]{
		OutputState: in.ToPatchRolloutModePtrOutputWithContext(ctx).OutputState,
	}
}

// Required. The frequency unit of this recurring schedule.
type RecurringScheduleFrequency string

const (
	// Invalid. A frequency must be specified.
	RecurringScheduleFrequencyFrequencyUnspecified = RecurringScheduleFrequency("FREQUENCY_UNSPECIFIED")
	// Indicates that the frequency of recurrence should be expressed in terms of weeks.
	RecurringScheduleFrequencyWeekly = RecurringScheduleFrequency("WEEKLY")
	// Indicates that the frequency of recurrence should be expressed in terms of months.
	RecurringScheduleFrequencyMonthly = RecurringScheduleFrequency("MONTHLY")
	// Indicates that the frequency of recurrence should be expressed in terms of days.
	RecurringScheduleFrequencyDaily = RecurringScheduleFrequency("DAILY")
)

func (RecurringScheduleFrequency) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringScheduleFrequency)(nil)).Elem()
}

func (e RecurringScheduleFrequency) ToRecurringScheduleFrequencyOutput() RecurringScheduleFrequencyOutput {
	return pulumi.ToOutput(e).(RecurringScheduleFrequencyOutput)
}

func (e RecurringScheduleFrequency) ToRecurringScheduleFrequencyOutputWithContext(ctx context.Context) RecurringScheduleFrequencyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RecurringScheduleFrequencyOutput)
}

func (e RecurringScheduleFrequency) ToRecurringScheduleFrequencyPtrOutput() RecurringScheduleFrequencyPtrOutput {
	return e.ToRecurringScheduleFrequencyPtrOutputWithContext(context.Background())
}

func (e RecurringScheduleFrequency) ToRecurringScheduleFrequencyPtrOutputWithContext(ctx context.Context) RecurringScheduleFrequencyPtrOutput {
	return RecurringScheduleFrequency(e).ToRecurringScheduleFrequencyOutputWithContext(ctx).ToRecurringScheduleFrequencyPtrOutputWithContext(ctx)
}

func (e RecurringScheduleFrequency) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RecurringScheduleFrequency) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RecurringScheduleFrequency) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RecurringScheduleFrequency) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RecurringScheduleFrequencyOutput struct{ *pulumi.OutputState }

func (RecurringScheduleFrequencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringScheduleFrequency)(nil)).Elem()
}

func (o RecurringScheduleFrequencyOutput) ToRecurringScheduleFrequencyOutput() RecurringScheduleFrequencyOutput {
	return o
}

func (o RecurringScheduleFrequencyOutput) ToRecurringScheduleFrequencyOutputWithContext(ctx context.Context) RecurringScheduleFrequencyOutput {
	return o
}

func (o RecurringScheduleFrequencyOutput) ToRecurringScheduleFrequencyPtrOutput() RecurringScheduleFrequencyPtrOutput {
	return o.ToRecurringScheduleFrequencyPtrOutputWithContext(context.Background())
}

func (o RecurringScheduleFrequencyOutput) ToRecurringScheduleFrequencyPtrOutputWithContext(ctx context.Context) RecurringScheduleFrequencyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurringScheduleFrequency) *RecurringScheduleFrequency {
		return &v
	}).(RecurringScheduleFrequencyPtrOutput)
}

func (o RecurringScheduleFrequencyOutput) ToOutput(ctx context.Context) pulumix.Output[RecurringScheduleFrequency] {
	return pulumix.Output[RecurringScheduleFrequency]{
		OutputState: o.OutputState,
	}
}

func (o RecurringScheduleFrequencyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RecurringScheduleFrequencyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RecurringScheduleFrequency) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RecurringScheduleFrequencyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RecurringScheduleFrequencyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RecurringScheduleFrequency) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RecurringScheduleFrequencyPtrOutput struct{ *pulumi.OutputState }

func (RecurringScheduleFrequencyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurringScheduleFrequency)(nil)).Elem()
}

func (o RecurringScheduleFrequencyPtrOutput) ToRecurringScheduleFrequencyPtrOutput() RecurringScheduleFrequencyPtrOutput {
	return o
}

func (o RecurringScheduleFrequencyPtrOutput) ToRecurringScheduleFrequencyPtrOutputWithContext(ctx context.Context) RecurringScheduleFrequencyPtrOutput {
	return o
}

func (o RecurringScheduleFrequencyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RecurringScheduleFrequency] {
	return pulumix.Output[*RecurringScheduleFrequency]{
		OutputState: o.OutputState,
	}
}

func (o RecurringScheduleFrequencyPtrOutput) Elem() RecurringScheduleFrequencyOutput {
	return o.ApplyT(func(v *RecurringScheduleFrequency) RecurringScheduleFrequency {
		if v != nil {
			return *v
		}
		var ret RecurringScheduleFrequency
		return ret
	}).(RecurringScheduleFrequencyOutput)
}

func (o RecurringScheduleFrequencyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RecurringScheduleFrequencyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RecurringScheduleFrequency) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RecurringScheduleFrequencyInput is an input type that accepts RecurringScheduleFrequencyArgs and RecurringScheduleFrequencyOutput values.
// You can construct a concrete instance of `RecurringScheduleFrequencyInput` via:
//
//	RecurringScheduleFrequencyArgs{...}
type RecurringScheduleFrequencyInput interface {
	pulumi.Input

	ToRecurringScheduleFrequencyOutput() RecurringScheduleFrequencyOutput
	ToRecurringScheduleFrequencyOutputWithContext(context.Context) RecurringScheduleFrequencyOutput
}

var recurringScheduleFrequencyPtrType = reflect.TypeOf((**RecurringScheduleFrequency)(nil)).Elem()

type RecurringScheduleFrequencyPtrInput interface {
	pulumi.Input

	ToRecurringScheduleFrequencyPtrOutput() RecurringScheduleFrequencyPtrOutput
	ToRecurringScheduleFrequencyPtrOutputWithContext(context.Context) RecurringScheduleFrequencyPtrOutput
}

type recurringScheduleFrequencyPtr string

func RecurringScheduleFrequencyPtr(v string) RecurringScheduleFrequencyPtrInput {
	return (*recurringScheduleFrequencyPtr)(&v)
}

func (*recurringScheduleFrequencyPtr) ElementType() reflect.Type {
	return recurringScheduleFrequencyPtrType
}

func (in *recurringScheduleFrequencyPtr) ToRecurringScheduleFrequencyPtrOutput() RecurringScheduleFrequencyPtrOutput {
	return pulumi.ToOutput(in).(RecurringScheduleFrequencyPtrOutput)
}

func (in *recurringScheduleFrequencyPtr) ToRecurringScheduleFrequencyPtrOutputWithContext(ctx context.Context) RecurringScheduleFrequencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RecurringScheduleFrequencyPtrOutput)
}

func (in *recurringScheduleFrequencyPtr) ToOutput(ctx context.Context) pulumix.Output[*RecurringScheduleFrequency] {
	return pulumix.Output[*RecurringScheduleFrequency]{
		OutputState: in.ToRecurringScheduleFrequencyPtrOutputWithContext(ctx).OutputState,
	}
}

// Required. A day of the week.
type WeekDayOfMonthDayOfWeek string

const (
	// The day of the week is unspecified.
	WeekDayOfMonthDayOfWeekDayOfWeekUnspecified = WeekDayOfMonthDayOfWeek("DAY_OF_WEEK_UNSPECIFIED")
	// Monday
	WeekDayOfMonthDayOfWeekMonday = WeekDayOfMonthDayOfWeek("MONDAY")
	// Tuesday
	WeekDayOfMonthDayOfWeekTuesday = WeekDayOfMonthDayOfWeek("TUESDAY")
	// Wednesday
	WeekDayOfMonthDayOfWeekWednesday = WeekDayOfMonthDayOfWeek("WEDNESDAY")
	// Thursday
	WeekDayOfMonthDayOfWeekThursday = WeekDayOfMonthDayOfWeek("THURSDAY")
	// Friday
	WeekDayOfMonthDayOfWeekFriday = WeekDayOfMonthDayOfWeek("FRIDAY")
	// Saturday
	WeekDayOfMonthDayOfWeekSaturday = WeekDayOfMonthDayOfWeek("SATURDAY")
	// Sunday
	WeekDayOfMonthDayOfWeekSunday = WeekDayOfMonthDayOfWeek("SUNDAY")
)

func (WeekDayOfMonthDayOfWeek) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDayOfMonthDayOfWeek)(nil)).Elem()
}

func (e WeekDayOfMonthDayOfWeek) ToWeekDayOfMonthDayOfWeekOutput() WeekDayOfMonthDayOfWeekOutput {
	return pulumi.ToOutput(e).(WeekDayOfMonthDayOfWeekOutput)
}

func (e WeekDayOfMonthDayOfWeek) ToWeekDayOfMonthDayOfWeekOutputWithContext(ctx context.Context) WeekDayOfMonthDayOfWeekOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WeekDayOfMonthDayOfWeekOutput)
}

func (e WeekDayOfMonthDayOfWeek) ToWeekDayOfMonthDayOfWeekPtrOutput() WeekDayOfMonthDayOfWeekPtrOutput {
	return e.ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(context.Background())
}

func (e WeekDayOfMonthDayOfWeek) ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(ctx context.Context) WeekDayOfMonthDayOfWeekPtrOutput {
	return WeekDayOfMonthDayOfWeek(e).ToWeekDayOfMonthDayOfWeekOutputWithContext(ctx).ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(ctx)
}

func (e WeekDayOfMonthDayOfWeek) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeekDayOfMonthDayOfWeek) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeekDayOfMonthDayOfWeek) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WeekDayOfMonthDayOfWeek) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WeekDayOfMonthDayOfWeekOutput struct{ *pulumi.OutputState }

func (WeekDayOfMonthDayOfWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDayOfMonthDayOfWeek)(nil)).Elem()
}

func (o WeekDayOfMonthDayOfWeekOutput) ToWeekDayOfMonthDayOfWeekOutput() WeekDayOfMonthDayOfWeekOutput {
	return o
}

func (o WeekDayOfMonthDayOfWeekOutput) ToWeekDayOfMonthDayOfWeekOutputWithContext(ctx context.Context) WeekDayOfMonthDayOfWeekOutput {
	return o
}

func (o WeekDayOfMonthDayOfWeekOutput) ToWeekDayOfMonthDayOfWeekPtrOutput() WeekDayOfMonthDayOfWeekPtrOutput {
	return o.ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(context.Background())
}

func (o WeekDayOfMonthDayOfWeekOutput) ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(ctx context.Context) WeekDayOfMonthDayOfWeekPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WeekDayOfMonthDayOfWeek) *WeekDayOfMonthDayOfWeek {
		return &v
	}).(WeekDayOfMonthDayOfWeekPtrOutput)
}

func (o WeekDayOfMonthDayOfWeekOutput) ToOutput(ctx context.Context) pulumix.Output[WeekDayOfMonthDayOfWeek] {
	return pulumix.Output[WeekDayOfMonthDayOfWeek]{
		OutputState: o.OutputState,
	}
}

func (o WeekDayOfMonthDayOfWeekOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WeekDayOfMonthDayOfWeekOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeekDayOfMonthDayOfWeek) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WeekDayOfMonthDayOfWeekOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeekDayOfMonthDayOfWeekOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeekDayOfMonthDayOfWeek) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WeekDayOfMonthDayOfWeekPtrOutput struct{ *pulumi.OutputState }

func (WeekDayOfMonthDayOfWeekPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeekDayOfMonthDayOfWeek)(nil)).Elem()
}

func (o WeekDayOfMonthDayOfWeekPtrOutput) ToWeekDayOfMonthDayOfWeekPtrOutput() WeekDayOfMonthDayOfWeekPtrOutput {
	return o
}

func (o WeekDayOfMonthDayOfWeekPtrOutput) ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(ctx context.Context) WeekDayOfMonthDayOfWeekPtrOutput {
	return o
}

func (o WeekDayOfMonthDayOfWeekPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*WeekDayOfMonthDayOfWeek] {
	return pulumix.Output[*WeekDayOfMonthDayOfWeek]{
		OutputState: o.OutputState,
	}
}

func (o WeekDayOfMonthDayOfWeekPtrOutput) Elem() WeekDayOfMonthDayOfWeekOutput {
	return o.ApplyT(func(v *WeekDayOfMonthDayOfWeek) WeekDayOfMonthDayOfWeek {
		if v != nil {
			return *v
		}
		var ret WeekDayOfMonthDayOfWeek
		return ret
	}).(WeekDayOfMonthDayOfWeekOutput)
}

func (o WeekDayOfMonthDayOfWeekPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeekDayOfMonthDayOfWeekPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WeekDayOfMonthDayOfWeek) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WeekDayOfMonthDayOfWeekInput is an input type that accepts WeekDayOfMonthDayOfWeekArgs and WeekDayOfMonthDayOfWeekOutput values.
// You can construct a concrete instance of `WeekDayOfMonthDayOfWeekInput` via:
//
//	WeekDayOfMonthDayOfWeekArgs{...}
type WeekDayOfMonthDayOfWeekInput interface {
	pulumi.Input

	ToWeekDayOfMonthDayOfWeekOutput() WeekDayOfMonthDayOfWeekOutput
	ToWeekDayOfMonthDayOfWeekOutputWithContext(context.Context) WeekDayOfMonthDayOfWeekOutput
}

var weekDayOfMonthDayOfWeekPtrType = reflect.TypeOf((**WeekDayOfMonthDayOfWeek)(nil)).Elem()

type WeekDayOfMonthDayOfWeekPtrInput interface {
	pulumi.Input

	ToWeekDayOfMonthDayOfWeekPtrOutput() WeekDayOfMonthDayOfWeekPtrOutput
	ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(context.Context) WeekDayOfMonthDayOfWeekPtrOutput
}

type weekDayOfMonthDayOfWeekPtr string

func WeekDayOfMonthDayOfWeekPtr(v string) WeekDayOfMonthDayOfWeekPtrInput {
	return (*weekDayOfMonthDayOfWeekPtr)(&v)
}

func (*weekDayOfMonthDayOfWeekPtr) ElementType() reflect.Type {
	return weekDayOfMonthDayOfWeekPtrType
}

func (in *weekDayOfMonthDayOfWeekPtr) ToWeekDayOfMonthDayOfWeekPtrOutput() WeekDayOfMonthDayOfWeekPtrOutput {
	return pulumi.ToOutput(in).(WeekDayOfMonthDayOfWeekPtrOutput)
}

func (in *weekDayOfMonthDayOfWeekPtr) ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(ctx context.Context) WeekDayOfMonthDayOfWeekPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WeekDayOfMonthDayOfWeekPtrOutput)
}

func (in *weekDayOfMonthDayOfWeekPtr) ToOutput(ctx context.Context) pulumix.Output[*WeekDayOfMonthDayOfWeek] {
	return pulumix.Output[*WeekDayOfMonthDayOfWeek]{
		OutputState: in.ToWeekDayOfMonthDayOfWeekPtrOutputWithContext(ctx).OutputState,
	}
}

// Required. Day of the week.
type WeeklyScheduleDayOfWeek string

const (
	// The day of the week is unspecified.
	WeeklyScheduleDayOfWeekDayOfWeekUnspecified = WeeklyScheduleDayOfWeek("DAY_OF_WEEK_UNSPECIFIED")
	// Monday
	WeeklyScheduleDayOfWeekMonday = WeeklyScheduleDayOfWeek("MONDAY")
	// Tuesday
	WeeklyScheduleDayOfWeekTuesday = WeeklyScheduleDayOfWeek("TUESDAY")
	// Wednesday
	WeeklyScheduleDayOfWeekWednesday = WeeklyScheduleDayOfWeek("WEDNESDAY")
	// Thursday
	WeeklyScheduleDayOfWeekThursday = WeeklyScheduleDayOfWeek("THURSDAY")
	// Friday
	WeeklyScheduleDayOfWeekFriday = WeeklyScheduleDayOfWeek("FRIDAY")
	// Saturday
	WeeklyScheduleDayOfWeekSaturday = WeeklyScheduleDayOfWeek("SATURDAY")
	// Sunday
	WeeklyScheduleDayOfWeekSunday = WeeklyScheduleDayOfWeek("SUNDAY")
)

func (WeeklyScheduleDayOfWeek) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyScheduleDayOfWeek)(nil)).Elem()
}

func (e WeeklyScheduleDayOfWeek) ToWeeklyScheduleDayOfWeekOutput() WeeklyScheduleDayOfWeekOutput {
	return pulumi.ToOutput(e).(WeeklyScheduleDayOfWeekOutput)
}

func (e WeeklyScheduleDayOfWeek) ToWeeklyScheduleDayOfWeekOutputWithContext(ctx context.Context) WeeklyScheduleDayOfWeekOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WeeklyScheduleDayOfWeekOutput)
}

func (e WeeklyScheduleDayOfWeek) ToWeeklyScheduleDayOfWeekPtrOutput() WeeklyScheduleDayOfWeekPtrOutput {
	return e.ToWeeklyScheduleDayOfWeekPtrOutputWithContext(context.Background())
}

func (e WeeklyScheduleDayOfWeek) ToWeeklyScheduleDayOfWeekPtrOutputWithContext(ctx context.Context) WeeklyScheduleDayOfWeekPtrOutput {
	return WeeklyScheduleDayOfWeek(e).ToWeeklyScheduleDayOfWeekOutputWithContext(ctx).ToWeeklyScheduleDayOfWeekPtrOutputWithContext(ctx)
}

func (e WeeklyScheduleDayOfWeek) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeeklyScheduleDayOfWeek) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeeklyScheduleDayOfWeek) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WeeklyScheduleDayOfWeek) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WeeklyScheduleDayOfWeekOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleDayOfWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyScheduleDayOfWeek)(nil)).Elem()
}

func (o WeeklyScheduleDayOfWeekOutput) ToWeeklyScheduleDayOfWeekOutput() WeeklyScheduleDayOfWeekOutput {
	return o
}

func (o WeeklyScheduleDayOfWeekOutput) ToWeeklyScheduleDayOfWeekOutputWithContext(ctx context.Context) WeeklyScheduleDayOfWeekOutput {
	return o
}

func (o WeeklyScheduleDayOfWeekOutput) ToWeeklyScheduleDayOfWeekPtrOutput() WeeklyScheduleDayOfWeekPtrOutput {
	return o.ToWeeklyScheduleDayOfWeekPtrOutputWithContext(context.Background())
}

func (o WeeklyScheduleDayOfWeekOutput) ToWeeklyScheduleDayOfWeekPtrOutputWithContext(ctx context.Context) WeeklyScheduleDayOfWeekPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WeeklyScheduleDayOfWeek) *WeeklyScheduleDayOfWeek {
		return &v
	}).(WeeklyScheduleDayOfWeekPtrOutput)
}

func (o WeeklyScheduleDayOfWeekOutput) ToOutput(ctx context.Context) pulumix.Output[WeeklyScheduleDayOfWeek] {
	return pulumix.Output[WeeklyScheduleDayOfWeek]{
		OutputState: o.OutputState,
	}
}

func (o WeeklyScheduleDayOfWeekOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WeeklyScheduleDayOfWeekOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeeklyScheduleDayOfWeek) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WeeklyScheduleDayOfWeekOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeeklyScheduleDayOfWeekOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeeklyScheduleDayOfWeek) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WeeklyScheduleDayOfWeekPtrOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleDayOfWeekPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklyScheduleDayOfWeek)(nil)).Elem()
}

func (o WeeklyScheduleDayOfWeekPtrOutput) ToWeeklyScheduleDayOfWeekPtrOutput() WeeklyScheduleDayOfWeekPtrOutput {
	return o
}

func (o WeeklyScheduleDayOfWeekPtrOutput) ToWeeklyScheduleDayOfWeekPtrOutputWithContext(ctx context.Context) WeeklyScheduleDayOfWeekPtrOutput {
	return o
}

func (o WeeklyScheduleDayOfWeekPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*WeeklyScheduleDayOfWeek] {
	return pulumix.Output[*WeeklyScheduleDayOfWeek]{
		OutputState: o.OutputState,
	}
}

func (o WeeklyScheduleDayOfWeekPtrOutput) Elem() WeeklyScheduleDayOfWeekOutput {
	return o.ApplyT(func(v *WeeklyScheduleDayOfWeek) WeeklyScheduleDayOfWeek {
		if v != nil {
			return *v
		}
		var ret WeeklyScheduleDayOfWeek
		return ret
	}).(WeeklyScheduleDayOfWeekOutput)
}

func (o WeeklyScheduleDayOfWeekPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeeklyScheduleDayOfWeekPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WeeklyScheduleDayOfWeek) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WeeklyScheduleDayOfWeekInput is an input type that accepts WeeklyScheduleDayOfWeekArgs and WeeklyScheduleDayOfWeekOutput values.
// You can construct a concrete instance of `WeeklyScheduleDayOfWeekInput` via:
//
//	WeeklyScheduleDayOfWeekArgs{...}
type WeeklyScheduleDayOfWeekInput interface {
	pulumi.Input

	ToWeeklyScheduleDayOfWeekOutput() WeeklyScheduleDayOfWeekOutput
	ToWeeklyScheduleDayOfWeekOutputWithContext(context.Context) WeeklyScheduleDayOfWeekOutput
}

var weeklyScheduleDayOfWeekPtrType = reflect.TypeOf((**WeeklyScheduleDayOfWeek)(nil)).Elem()

type WeeklyScheduleDayOfWeekPtrInput interface {
	pulumi.Input

	ToWeeklyScheduleDayOfWeekPtrOutput() WeeklyScheduleDayOfWeekPtrOutput
	ToWeeklyScheduleDayOfWeekPtrOutputWithContext(context.Context) WeeklyScheduleDayOfWeekPtrOutput
}

type weeklyScheduleDayOfWeekPtr string

func WeeklyScheduleDayOfWeekPtr(v string) WeeklyScheduleDayOfWeekPtrInput {
	return (*weeklyScheduleDayOfWeekPtr)(&v)
}

func (*weeklyScheduleDayOfWeekPtr) ElementType() reflect.Type {
	return weeklyScheduleDayOfWeekPtrType
}

func (in *weeklyScheduleDayOfWeekPtr) ToWeeklyScheduleDayOfWeekPtrOutput() WeeklyScheduleDayOfWeekPtrOutput {
	return pulumi.ToOutput(in).(WeeklyScheduleDayOfWeekPtrOutput)
}

func (in *weeklyScheduleDayOfWeekPtr) ToWeeklyScheduleDayOfWeekPtrOutputWithContext(ctx context.Context) WeeklyScheduleDayOfWeekPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WeeklyScheduleDayOfWeekPtrOutput)
}

func (in *weeklyScheduleDayOfWeekPtr) ToOutput(ctx context.Context) pulumix.Output[*WeeklyScheduleDayOfWeek] {
	return pulumix.Output[*WeeklyScheduleDayOfWeek]{
		OutputState: in.ToWeeklyScheduleDayOfWeekPtrOutputWithContext(ctx).OutputState,
	}
}

type WindowsUpdateSettingsClassificationsItem string

const (
	// Invalid. If classifications are included, they must be specified.
	WindowsUpdateSettingsClassificationsItemClassificationUnspecified = WindowsUpdateSettingsClassificationsItem("CLASSIFICATION_UNSPECIFIED")
	// "A widely released fix for a specific problem that addresses a critical, non-security-related bug." [1]
	WindowsUpdateSettingsClassificationsItemCritical = WindowsUpdateSettingsClassificationsItem("CRITICAL")
	// "A widely released fix for a product-specific, security-related vulnerability. Security vulnerabilities are rated by their severity. The severity rating is indicated in the Microsoft security bulletin as critical, important, moderate, or low." [1]
	WindowsUpdateSettingsClassificationsItemSecurity = WindowsUpdateSettingsClassificationsItem("SECURITY")
	// "A widely released and frequent software update that contains additions to a product's definition database. Definition databases are often used to detect objects that have specific attributes, such as malicious code, phishing websites, or junk mail." [1]
	WindowsUpdateSettingsClassificationsItemDefinition = WindowsUpdateSettingsClassificationsItem("DEFINITION")
	// "Software that controls the input and output of a device." [1]
	WindowsUpdateSettingsClassificationsItemDriver = WindowsUpdateSettingsClassificationsItem("DRIVER")
	// "New product functionality that is first distributed outside the context of a product release and that is typically included in the next full product release." [1]
	WindowsUpdateSettingsClassificationsItemFeaturePack = WindowsUpdateSettingsClassificationsItem("FEATURE_PACK")
	// "A tested, cumulative set of all hotfixes, security updates, critical updates, and updates. Additionally, service packs may contain additional fixes for problems that are found internally since the release of the product. Service packs my also contain a limited number of customer-requested design changes or features." [1]
	WindowsUpdateSettingsClassificationsItemServicePack = WindowsUpdateSettingsClassificationsItem("SERVICE_PACK")
	// "A utility or feature that helps complete a task or set of tasks." [1]
	WindowsUpdateSettingsClassificationsItemTool = WindowsUpdateSettingsClassificationsItem("TOOL")
	// "A tested, cumulative set of hotfixes, security updates, critical updates, and updates that are packaged together for easy deployment. A rollup generally targets a specific area, such as security, or a component of a product, such as Internet Information Services (IIS)." [1]
	WindowsUpdateSettingsClassificationsItemUpdateRollup = WindowsUpdateSettingsClassificationsItem("UPDATE_ROLLUP")
	// "A widely released fix for a specific problem. An update addresses a noncritical, non-security-related bug." [1]
	WindowsUpdateSettingsClassificationsItemUpdate = WindowsUpdateSettingsClassificationsItem("UPDATE")
)

func (WindowsUpdateSettingsClassificationsItem) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUpdateSettingsClassificationsItem)(nil)).Elem()
}

func (e WindowsUpdateSettingsClassificationsItem) ToWindowsUpdateSettingsClassificationsItemOutput() WindowsUpdateSettingsClassificationsItemOutput {
	return pulumi.ToOutput(e).(WindowsUpdateSettingsClassificationsItemOutput)
}

func (e WindowsUpdateSettingsClassificationsItem) ToWindowsUpdateSettingsClassificationsItemOutputWithContext(ctx context.Context) WindowsUpdateSettingsClassificationsItemOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WindowsUpdateSettingsClassificationsItemOutput)
}

func (e WindowsUpdateSettingsClassificationsItem) ToWindowsUpdateSettingsClassificationsItemPtrOutput() WindowsUpdateSettingsClassificationsItemPtrOutput {
	return e.ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(context.Background())
}

func (e WindowsUpdateSettingsClassificationsItem) ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsClassificationsItemPtrOutput {
	return WindowsUpdateSettingsClassificationsItem(e).ToWindowsUpdateSettingsClassificationsItemOutputWithContext(ctx).ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(ctx)
}

func (e WindowsUpdateSettingsClassificationsItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WindowsUpdateSettingsClassificationsItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WindowsUpdateSettingsClassificationsItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WindowsUpdateSettingsClassificationsItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WindowsUpdateSettingsClassificationsItemOutput struct{ *pulumi.OutputState }

func (WindowsUpdateSettingsClassificationsItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUpdateSettingsClassificationsItem)(nil)).Elem()
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToWindowsUpdateSettingsClassificationsItemOutput() WindowsUpdateSettingsClassificationsItemOutput {
	return o
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToWindowsUpdateSettingsClassificationsItemOutputWithContext(ctx context.Context) WindowsUpdateSettingsClassificationsItemOutput {
	return o
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToWindowsUpdateSettingsClassificationsItemPtrOutput() WindowsUpdateSettingsClassificationsItemPtrOutput {
	return o.ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(context.Background())
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsClassificationsItemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WindowsUpdateSettingsClassificationsItem) *WindowsUpdateSettingsClassificationsItem {
		return &v
	}).(WindowsUpdateSettingsClassificationsItemPtrOutput)
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToOutput(ctx context.Context) pulumix.Output[WindowsUpdateSettingsClassificationsItem] {
	return pulumix.Output[WindowsUpdateSettingsClassificationsItem]{
		OutputState: o.OutputState,
	}
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WindowsUpdateSettingsClassificationsItem) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WindowsUpdateSettingsClassificationsItemOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WindowsUpdateSettingsClassificationsItem) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WindowsUpdateSettingsClassificationsItemPtrOutput struct{ *pulumi.OutputState }

func (WindowsUpdateSettingsClassificationsItemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsUpdateSettingsClassificationsItem)(nil)).Elem()
}

func (o WindowsUpdateSettingsClassificationsItemPtrOutput) ToWindowsUpdateSettingsClassificationsItemPtrOutput() WindowsUpdateSettingsClassificationsItemPtrOutput {
	return o
}

func (o WindowsUpdateSettingsClassificationsItemPtrOutput) ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsClassificationsItemPtrOutput {
	return o
}

func (o WindowsUpdateSettingsClassificationsItemPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*WindowsUpdateSettingsClassificationsItem] {
	return pulumix.Output[*WindowsUpdateSettingsClassificationsItem]{
		OutputState: o.OutputState,
	}
}

func (o WindowsUpdateSettingsClassificationsItemPtrOutput) Elem() WindowsUpdateSettingsClassificationsItemOutput {
	return o.ApplyT(func(v *WindowsUpdateSettingsClassificationsItem) WindowsUpdateSettingsClassificationsItem {
		if v != nil {
			return *v
		}
		var ret WindowsUpdateSettingsClassificationsItem
		return ret
	}).(WindowsUpdateSettingsClassificationsItemOutput)
}

func (o WindowsUpdateSettingsClassificationsItemPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WindowsUpdateSettingsClassificationsItemPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WindowsUpdateSettingsClassificationsItem) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WindowsUpdateSettingsClassificationsItemInput is an input type that accepts WindowsUpdateSettingsClassificationsItemArgs and WindowsUpdateSettingsClassificationsItemOutput values.
// You can construct a concrete instance of `WindowsUpdateSettingsClassificationsItemInput` via:
//
//	WindowsUpdateSettingsClassificationsItemArgs{...}
type WindowsUpdateSettingsClassificationsItemInput interface {
	pulumi.Input

	ToWindowsUpdateSettingsClassificationsItemOutput() WindowsUpdateSettingsClassificationsItemOutput
	ToWindowsUpdateSettingsClassificationsItemOutputWithContext(context.Context) WindowsUpdateSettingsClassificationsItemOutput
}

var windowsUpdateSettingsClassificationsItemPtrType = reflect.TypeOf((**WindowsUpdateSettingsClassificationsItem)(nil)).Elem()

type WindowsUpdateSettingsClassificationsItemPtrInput interface {
	pulumi.Input

	ToWindowsUpdateSettingsClassificationsItemPtrOutput() WindowsUpdateSettingsClassificationsItemPtrOutput
	ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(context.Context) WindowsUpdateSettingsClassificationsItemPtrOutput
}

type windowsUpdateSettingsClassificationsItemPtr string

func WindowsUpdateSettingsClassificationsItemPtr(v string) WindowsUpdateSettingsClassificationsItemPtrInput {
	return (*windowsUpdateSettingsClassificationsItemPtr)(&v)
}

func (*windowsUpdateSettingsClassificationsItemPtr) ElementType() reflect.Type {
	return windowsUpdateSettingsClassificationsItemPtrType
}

func (in *windowsUpdateSettingsClassificationsItemPtr) ToWindowsUpdateSettingsClassificationsItemPtrOutput() WindowsUpdateSettingsClassificationsItemPtrOutput {
	return pulumi.ToOutput(in).(WindowsUpdateSettingsClassificationsItemPtrOutput)
}

func (in *windowsUpdateSettingsClassificationsItemPtr) ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsClassificationsItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WindowsUpdateSettingsClassificationsItemPtrOutput)
}

func (in *windowsUpdateSettingsClassificationsItemPtr) ToOutput(ctx context.Context) pulumix.Output[*WindowsUpdateSettingsClassificationsItem] {
	return pulumix.Output[*WindowsUpdateSettingsClassificationsItem]{
		OutputState: in.ToWindowsUpdateSettingsClassificationsItemPtrOutputWithContext(ctx).OutputState,
	}
}

// WindowsUpdateSettingsClassificationsItemArrayInput is an input type that accepts WindowsUpdateSettingsClassificationsItemArray and WindowsUpdateSettingsClassificationsItemArrayOutput values.
// You can construct a concrete instance of `WindowsUpdateSettingsClassificationsItemArrayInput` via:
//
//	WindowsUpdateSettingsClassificationsItemArray{ WindowsUpdateSettingsClassificationsItemArgs{...} }
type WindowsUpdateSettingsClassificationsItemArrayInput interface {
	pulumi.Input

	ToWindowsUpdateSettingsClassificationsItemArrayOutput() WindowsUpdateSettingsClassificationsItemArrayOutput
	ToWindowsUpdateSettingsClassificationsItemArrayOutputWithContext(context.Context) WindowsUpdateSettingsClassificationsItemArrayOutput
}

type WindowsUpdateSettingsClassificationsItemArray []WindowsUpdateSettingsClassificationsItem

func (WindowsUpdateSettingsClassificationsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsUpdateSettingsClassificationsItem)(nil)).Elem()
}

func (i WindowsUpdateSettingsClassificationsItemArray) ToWindowsUpdateSettingsClassificationsItemArrayOutput() WindowsUpdateSettingsClassificationsItemArrayOutput {
	return i.ToWindowsUpdateSettingsClassificationsItemArrayOutputWithContext(context.Background())
}

func (i WindowsUpdateSettingsClassificationsItemArray) ToWindowsUpdateSettingsClassificationsItemArrayOutputWithContext(ctx context.Context) WindowsUpdateSettingsClassificationsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUpdateSettingsClassificationsItemArrayOutput)
}

func (i WindowsUpdateSettingsClassificationsItemArray) ToOutput(ctx context.Context) pulumix.Output[[]WindowsUpdateSettingsClassificationsItem] {
	return pulumix.Output[[]WindowsUpdateSettingsClassificationsItem]{
		OutputState: i.ToWindowsUpdateSettingsClassificationsItemArrayOutputWithContext(ctx).OutputState,
	}
}

type WindowsUpdateSettingsClassificationsItemArrayOutput struct{ *pulumi.OutputState }

func (WindowsUpdateSettingsClassificationsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsUpdateSettingsClassificationsItem)(nil)).Elem()
}

func (o WindowsUpdateSettingsClassificationsItemArrayOutput) ToWindowsUpdateSettingsClassificationsItemArrayOutput() WindowsUpdateSettingsClassificationsItemArrayOutput {
	return o
}

func (o WindowsUpdateSettingsClassificationsItemArrayOutput) ToWindowsUpdateSettingsClassificationsItemArrayOutputWithContext(ctx context.Context) WindowsUpdateSettingsClassificationsItemArrayOutput {
	return o
}

func (o WindowsUpdateSettingsClassificationsItemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]WindowsUpdateSettingsClassificationsItem] {
	return pulumix.Output[[]WindowsUpdateSettingsClassificationsItem]{
		OutputState: o.OutputState,
	}
}

func (o WindowsUpdateSettingsClassificationsItemArrayOutput) Index(i pulumi.IntInput) WindowsUpdateSettingsClassificationsItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsUpdateSettingsClassificationsItem {
		return vs[0].([]WindowsUpdateSettingsClassificationsItem)[vs[1].(int)]
	}).(WindowsUpdateSettingsClassificationsItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AptSettingsTypeInput)(nil)).Elem(), AptSettingsType("TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AptSettingsTypePtrInput)(nil)).Elem(), AptSettingsType("TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ExecStepConfigInterpreterInput)(nil)).Elem(), ExecStepConfigInterpreter("INTERPRETER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ExecStepConfigInterpreterPtrInput)(nil)).Elem(), ExecStepConfigInterpreter("INTERPRETER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyModeInput)(nil)).Elem(), OSPolicyMode("MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyModePtrInput)(nil)).Elem(), OSPolicyMode("MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceExecResourceExecInterpreterInput)(nil)).Elem(), OSPolicyResourceExecResourceExecInterpreter("INTERPRETER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceExecResourceExecInterpreterPtrInput)(nil)).Elem(), OSPolicyResourceExecResourceExecInterpreter("INTERPRETER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceFileResourceStateInput)(nil)).Elem(), OSPolicyResourceFileResourceState("DESIRED_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceFileResourceStatePtrInput)(nil)).Elem(), OSPolicyResourceFileResourceState("DESIRED_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceDesiredStateInput)(nil)).Elem(), OSPolicyResourcePackageResourceDesiredState("DESIRED_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceDesiredStatePtrInput)(nil)).Elem(), OSPolicyResourcePackageResourceDesiredState("DESIRED_STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeInput)(nil)).Elem(), OSPolicyResourceRepositoryResourceAptRepositoryArchiveType("ARCHIVE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrInput)(nil)).Elem(), OSPolicyResourceRepositoryResourceAptRepositoryArchiveType("ARCHIVE_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PatchConfigRebootConfigInput)(nil)).Elem(), PatchConfigRebootConfig("REBOOT_CONFIG_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PatchConfigRebootConfigPtrInput)(nil)).Elem(), PatchConfigRebootConfig("REBOOT_CONFIG_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PatchRolloutModeInput)(nil)).Elem(), PatchRolloutMode("MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PatchRolloutModePtrInput)(nil)).Elem(), PatchRolloutMode("MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RecurringScheduleFrequencyInput)(nil)).Elem(), RecurringScheduleFrequency("FREQUENCY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RecurringScheduleFrequencyPtrInput)(nil)).Elem(), RecurringScheduleFrequency("FREQUENCY_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*WeekDayOfMonthDayOfWeekInput)(nil)).Elem(), WeekDayOfMonthDayOfWeek("DAY_OF_WEEK_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*WeekDayOfMonthDayOfWeekPtrInput)(nil)).Elem(), WeekDayOfMonthDayOfWeek("DAY_OF_WEEK_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*WeeklyScheduleDayOfWeekInput)(nil)).Elem(), WeeklyScheduleDayOfWeek("DAY_OF_WEEK_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*WeeklyScheduleDayOfWeekPtrInput)(nil)).Elem(), WeeklyScheduleDayOfWeek("DAY_OF_WEEK_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsUpdateSettingsClassificationsItemInput)(nil)).Elem(), WindowsUpdateSettingsClassificationsItem("CLASSIFICATION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsUpdateSettingsClassificationsItemPtrInput)(nil)).Elem(), WindowsUpdateSettingsClassificationsItem("CLASSIFICATION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsUpdateSettingsClassificationsItemArrayInput)(nil)).Elem(), WindowsUpdateSettingsClassificationsItemArray{})
	pulumi.RegisterOutputType(AptSettingsTypeOutput{})
	pulumi.RegisterOutputType(AptSettingsTypePtrOutput{})
	pulumi.RegisterOutputType(ExecStepConfigInterpreterOutput{})
	pulumi.RegisterOutputType(ExecStepConfigInterpreterPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyModeOutput{})
	pulumi.RegisterOutputType(OSPolicyModePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceExecResourceExecInterpreterOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceExecResourceExecInterpreterPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileResourceStateOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileResourceStatePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceDesiredStateOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceDesiredStatePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput{})
	pulumi.RegisterOutputType(PatchConfigRebootConfigOutput{})
	pulumi.RegisterOutputType(PatchConfigRebootConfigPtrOutput{})
	pulumi.RegisterOutputType(PatchRolloutModeOutput{})
	pulumi.RegisterOutputType(PatchRolloutModePtrOutput{})
	pulumi.RegisterOutputType(RecurringScheduleFrequencyOutput{})
	pulumi.RegisterOutputType(RecurringScheduleFrequencyPtrOutput{})
	pulumi.RegisterOutputType(WeekDayOfMonthDayOfWeekOutput{})
	pulumi.RegisterOutputType(WeekDayOfMonthDayOfWeekPtrOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleDayOfWeekOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleDayOfWeekPtrOutput{})
	pulumi.RegisterOutputType(WindowsUpdateSettingsClassificationsItemOutput{})
	pulumi.RegisterOutputType(WindowsUpdateSettingsClassificationsItemPtrOutput{})
	pulumi.RegisterOutputType(WindowsUpdateSettingsClassificationsItemArrayOutput{})
}
