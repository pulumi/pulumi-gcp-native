// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// Apt patching is completed by executing `apt-get update && apt-get upgrade`. Additional options can be set to control how this is executed.
type AptSettings struct {
	// List of packages to exclude from update. These packages will be excluded
	Excludes []string `pulumi:"excludes"`
	// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
	ExclusivePackages []string `pulumi:"exclusivePackages"`
	// By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
	Type *AptSettingsType `pulumi:"type"`
}

// AptSettingsInput is an input type that accepts AptSettingsArgs and AptSettingsOutput values.
// You can construct a concrete instance of `AptSettingsInput` via:
//
//	AptSettingsArgs{...}
type AptSettingsInput interface {
	pulumi.Input

	ToAptSettingsOutput() AptSettingsOutput
	ToAptSettingsOutputWithContext(context.Context) AptSettingsOutput
}

// Apt patching is completed by executing `apt-get update && apt-get upgrade`. Additional options can be set to control how this is executed.
type AptSettingsArgs struct {
	// List of packages to exclude from update. These packages will be excluded
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
	ExclusivePackages pulumi.StringArrayInput `pulumi:"exclusivePackages"`
	// By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
	Type AptSettingsTypePtrInput `pulumi:"type"`
}

func (AptSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AptSettings)(nil)).Elem()
}

func (i AptSettingsArgs) ToAptSettingsOutput() AptSettingsOutput {
	return i.ToAptSettingsOutputWithContext(context.Background())
}

func (i AptSettingsArgs) ToAptSettingsOutputWithContext(ctx context.Context) AptSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AptSettingsOutput)
}

func (i AptSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[AptSettings] {
	return pulumix.Output[AptSettings]{
		OutputState: i.ToAptSettingsOutputWithContext(ctx).OutputState,
	}
}

func (i AptSettingsArgs) ToAptSettingsPtrOutput() AptSettingsPtrOutput {
	return i.ToAptSettingsPtrOutputWithContext(context.Background())
}

func (i AptSettingsArgs) ToAptSettingsPtrOutputWithContext(ctx context.Context) AptSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AptSettingsOutput).ToAptSettingsPtrOutputWithContext(ctx)
}

// AptSettingsPtrInput is an input type that accepts AptSettingsArgs, AptSettingsPtr and AptSettingsPtrOutput values.
// You can construct a concrete instance of `AptSettingsPtrInput` via:
//
//	        AptSettingsArgs{...}
//
//	or:
//
//	        nil
type AptSettingsPtrInput interface {
	pulumi.Input

	ToAptSettingsPtrOutput() AptSettingsPtrOutput
	ToAptSettingsPtrOutputWithContext(context.Context) AptSettingsPtrOutput
}

type aptSettingsPtrType AptSettingsArgs

func AptSettingsPtr(v *AptSettingsArgs) AptSettingsPtrInput {
	return (*aptSettingsPtrType)(v)
}

func (*aptSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AptSettings)(nil)).Elem()
}

func (i *aptSettingsPtrType) ToAptSettingsPtrOutput() AptSettingsPtrOutput {
	return i.ToAptSettingsPtrOutputWithContext(context.Background())
}

func (i *aptSettingsPtrType) ToAptSettingsPtrOutputWithContext(ctx context.Context) AptSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AptSettingsPtrOutput)
}

func (i *aptSettingsPtrType) ToOutput(ctx context.Context) pulumix.Output[*AptSettings] {
	return pulumix.Output[*AptSettings]{
		OutputState: i.ToAptSettingsPtrOutputWithContext(ctx).OutputState,
	}
}

// Apt patching is completed by executing `apt-get update && apt-get upgrade`. Additional options can be set to control how this is executed.
type AptSettingsOutput struct{ *pulumi.OutputState }

func (AptSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AptSettings)(nil)).Elem()
}

func (o AptSettingsOutput) ToAptSettingsOutput() AptSettingsOutput {
	return o
}

func (o AptSettingsOutput) ToAptSettingsOutputWithContext(ctx context.Context) AptSettingsOutput {
	return o
}

func (o AptSettingsOutput) ToAptSettingsPtrOutput() AptSettingsPtrOutput {
	return o.ToAptSettingsPtrOutputWithContext(context.Background())
}

func (o AptSettingsOutput) ToAptSettingsPtrOutputWithContext(ctx context.Context) AptSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AptSettings) *AptSettings {
		return &v
	}).(AptSettingsPtrOutput)
}

func (o AptSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[AptSettings] {
	return pulumix.Output[AptSettings]{
		OutputState: o.OutputState,
	}
}

// List of packages to exclude from update. These packages will be excluded
func (o AptSettingsOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AptSettings) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
func (o AptSettingsOutput) ExclusivePackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AptSettings) []string { return v.ExclusivePackages }).(pulumi.StringArrayOutput)
}

// By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
func (o AptSettingsOutput) Type() AptSettingsTypePtrOutput {
	return o.ApplyT(func(v AptSettings) *AptSettingsType { return v.Type }).(AptSettingsTypePtrOutput)
}

type AptSettingsPtrOutput struct{ *pulumi.OutputState }

func (AptSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AptSettings)(nil)).Elem()
}

func (o AptSettingsPtrOutput) ToAptSettingsPtrOutput() AptSettingsPtrOutput {
	return o
}

func (o AptSettingsPtrOutput) ToAptSettingsPtrOutputWithContext(ctx context.Context) AptSettingsPtrOutput {
	return o
}

func (o AptSettingsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AptSettings] {
	return pulumix.Output[*AptSettings]{
		OutputState: o.OutputState,
	}
}

func (o AptSettingsPtrOutput) Elem() AptSettingsOutput {
	return o.ApplyT(func(v *AptSettings) AptSettings {
		if v != nil {
			return *v
		}
		var ret AptSettings
		return ret
	}).(AptSettingsOutput)
}

// List of packages to exclude from update. These packages will be excluded
func (o AptSettingsPtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AptSettings) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
func (o AptSettingsPtrOutput) ExclusivePackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AptSettings) []string {
		if v == nil {
			return nil
		}
		return v.ExclusivePackages
	}).(pulumi.StringArrayOutput)
}

// By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
func (o AptSettingsPtrOutput) Type() AptSettingsTypePtrOutput {
	return o.ApplyT(func(v *AptSettings) *AptSettingsType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(AptSettingsTypePtrOutput)
}

// Apt patching is completed by executing `apt-get update && apt-get upgrade`. Additional options can be set to control how this is executed.
type AptSettingsResponse struct {
	// List of packages to exclude from update. These packages will be excluded
	Excludes []string `pulumi:"excludes"`
	// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
	ExclusivePackages []string `pulumi:"exclusivePackages"`
	// By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
	Type string `pulumi:"type"`
}

// Apt patching is completed by executing `apt-get update && apt-get upgrade`. Additional options can be set to control how this is executed.
type AptSettingsResponseOutput struct{ *pulumi.OutputState }

func (AptSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AptSettingsResponse)(nil)).Elem()
}

func (o AptSettingsResponseOutput) ToAptSettingsResponseOutput() AptSettingsResponseOutput {
	return o
}

func (o AptSettingsResponseOutput) ToAptSettingsResponseOutputWithContext(ctx context.Context) AptSettingsResponseOutput {
	return o
}

func (o AptSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AptSettingsResponse] {
	return pulumix.Output[AptSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// List of packages to exclude from update. These packages will be excluded
func (o AptSettingsResponseOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AptSettingsResponse) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields.
func (o AptSettingsResponseOutput) ExclusivePackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AptSettingsResponse) []string { return v.ExclusivePackages }).(pulumi.StringArrayOutput)
}

// By changing the type to DIST, the patching is performed using `apt-get dist-upgrade` instead.
func (o AptSettingsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AptSettingsResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A step that runs an executable for a PatchJob.
type ExecStep struct {
	// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
	LinuxExecStepConfig *ExecStepConfig `pulumi:"linuxExecStepConfig"`
	// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
	WindowsExecStepConfig *ExecStepConfig `pulumi:"windowsExecStepConfig"`
}

// ExecStepInput is an input type that accepts ExecStepArgs and ExecStepOutput values.
// You can construct a concrete instance of `ExecStepInput` via:
//
//	ExecStepArgs{...}
type ExecStepInput interface {
	pulumi.Input

	ToExecStepOutput() ExecStepOutput
	ToExecStepOutputWithContext(context.Context) ExecStepOutput
}

// A step that runs an executable for a PatchJob.
type ExecStepArgs struct {
	// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
	LinuxExecStepConfig ExecStepConfigPtrInput `pulumi:"linuxExecStepConfig"`
	// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
	WindowsExecStepConfig ExecStepConfigPtrInput `pulumi:"windowsExecStepConfig"`
}

func (ExecStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStep)(nil)).Elem()
}

func (i ExecStepArgs) ToExecStepOutput() ExecStepOutput {
	return i.ToExecStepOutputWithContext(context.Background())
}

func (i ExecStepArgs) ToExecStepOutputWithContext(ctx context.Context) ExecStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepOutput)
}

func (i ExecStepArgs) ToOutput(ctx context.Context) pulumix.Output[ExecStep] {
	return pulumix.Output[ExecStep]{
		OutputState: i.ToExecStepOutputWithContext(ctx).OutputState,
	}
}

func (i ExecStepArgs) ToExecStepPtrOutput() ExecStepPtrOutput {
	return i.ToExecStepPtrOutputWithContext(context.Background())
}

func (i ExecStepArgs) ToExecStepPtrOutputWithContext(ctx context.Context) ExecStepPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepOutput).ToExecStepPtrOutputWithContext(ctx)
}

// ExecStepPtrInput is an input type that accepts ExecStepArgs, ExecStepPtr and ExecStepPtrOutput values.
// You can construct a concrete instance of `ExecStepPtrInput` via:
//
//	        ExecStepArgs{...}
//
//	or:
//
//	        nil
type ExecStepPtrInput interface {
	pulumi.Input

	ToExecStepPtrOutput() ExecStepPtrOutput
	ToExecStepPtrOutputWithContext(context.Context) ExecStepPtrOutput
}

type execStepPtrType ExecStepArgs

func ExecStepPtr(v *ExecStepArgs) ExecStepPtrInput {
	return (*execStepPtrType)(v)
}

func (*execStepPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecStep)(nil)).Elem()
}

func (i *execStepPtrType) ToExecStepPtrOutput() ExecStepPtrOutput {
	return i.ToExecStepPtrOutputWithContext(context.Background())
}

func (i *execStepPtrType) ToExecStepPtrOutputWithContext(ctx context.Context) ExecStepPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepPtrOutput)
}

func (i *execStepPtrType) ToOutput(ctx context.Context) pulumix.Output[*ExecStep] {
	return pulumix.Output[*ExecStep]{
		OutputState: i.ToExecStepPtrOutputWithContext(ctx).OutputState,
	}
}

// A step that runs an executable for a PatchJob.
type ExecStepOutput struct{ *pulumi.OutputState }

func (ExecStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStep)(nil)).Elem()
}

func (o ExecStepOutput) ToExecStepOutput() ExecStepOutput {
	return o
}

func (o ExecStepOutput) ToExecStepOutputWithContext(ctx context.Context) ExecStepOutput {
	return o
}

func (o ExecStepOutput) ToExecStepPtrOutput() ExecStepPtrOutput {
	return o.ToExecStepPtrOutputWithContext(context.Background())
}

func (o ExecStepOutput) ToExecStepPtrOutputWithContext(ctx context.Context) ExecStepPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExecStep) *ExecStep {
		return &v
	}).(ExecStepPtrOutput)
}

func (o ExecStepOutput) ToOutput(ctx context.Context) pulumix.Output[ExecStep] {
	return pulumix.Output[ExecStep]{
		OutputState: o.OutputState,
	}
}

// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
func (o ExecStepOutput) LinuxExecStepConfig() ExecStepConfigPtrOutput {
	return o.ApplyT(func(v ExecStep) *ExecStepConfig { return v.LinuxExecStepConfig }).(ExecStepConfigPtrOutput)
}

// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
func (o ExecStepOutput) WindowsExecStepConfig() ExecStepConfigPtrOutput {
	return o.ApplyT(func(v ExecStep) *ExecStepConfig { return v.WindowsExecStepConfig }).(ExecStepConfigPtrOutput)
}

type ExecStepPtrOutput struct{ *pulumi.OutputState }

func (ExecStepPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecStep)(nil)).Elem()
}

func (o ExecStepPtrOutput) ToExecStepPtrOutput() ExecStepPtrOutput {
	return o
}

func (o ExecStepPtrOutput) ToExecStepPtrOutputWithContext(ctx context.Context) ExecStepPtrOutput {
	return o
}

func (o ExecStepPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExecStep] {
	return pulumix.Output[*ExecStep]{
		OutputState: o.OutputState,
	}
}

func (o ExecStepPtrOutput) Elem() ExecStepOutput {
	return o.ApplyT(func(v *ExecStep) ExecStep {
		if v != nil {
			return *v
		}
		var ret ExecStep
		return ret
	}).(ExecStepOutput)
}

// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
func (o ExecStepPtrOutput) LinuxExecStepConfig() ExecStepConfigPtrOutput {
	return o.ApplyT(func(v *ExecStep) *ExecStepConfig {
		if v == nil {
			return nil
		}
		return v.LinuxExecStepConfig
	}).(ExecStepConfigPtrOutput)
}

// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
func (o ExecStepPtrOutput) WindowsExecStepConfig() ExecStepConfigPtrOutput {
	return o.ApplyT(func(v *ExecStep) *ExecStepConfig {
		if v == nil {
			return nil
		}
		return v.WindowsExecStepConfig
	}).(ExecStepConfigPtrOutput)
}

// Common configurations for an ExecStep.
type ExecStepConfig struct {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	AllowedSuccessCodes []int `pulumi:"allowedSuccessCodes"`
	// A Cloud Storage object containing the executable.
	GcsObject *GcsObject `pulumi:"gcsObject"`
	// The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
	Interpreter *ExecStepConfigInterpreter `pulumi:"interpreter"`
	// An absolute path to the executable on the VM.
	LocalPath *string `pulumi:"localPath"`
}

// ExecStepConfigInput is an input type that accepts ExecStepConfigArgs and ExecStepConfigOutput values.
// You can construct a concrete instance of `ExecStepConfigInput` via:
//
//	ExecStepConfigArgs{...}
type ExecStepConfigInput interface {
	pulumi.Input

	ToExecStepConfigOutput() ExecStepConfigOutput
	ToExecStepConfigOutputWithContext(context.Context) ExecStepConfigOutput
}

// Common configurations for an ExecStep.
type ExecStepConfigArgs struct {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	AllowedSuccessCodes pulumi.IntArrayInput `pulumi:"allowedSuccessCodes"`
	// A Cloud Storage object containing the executable.
	GcsObject GcsObjectPtrInput `pulumi:"gcsObject"`
	// The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
	Interpreter ExecStepConfigInterpreterPtrInput `pulumi:"interpreter"`
	// An absolute path to the executable on the VM.
	LocalPath pulumi.StringPtrInput `pulumi:"localPath"`
}

func (ExecStepConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStepConfig)(nil)).Elem()
}

func (i ExecStepConfigArgs) ToExecStepConfigOutput() ExecStepConfigOutput {
	return i.ToExecStepConfigOutputWithContext(context.Background())
}

func (i ExecStepConfigArgs) ToExecStepConfigOutputWithContext(ctx context.Context) ExecStepConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepConfigOutput)
}

func (i ExecStepConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ExecStepConfig] {
	return pulumix.Output[ExecStepConfig]{
		OutputState: i.ToExecStepConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ExecStepConfigArgs) ToExecStepConfigPtrOutput() ExecStepConfigPtrOutput {
	return i.ToExecStepConfigPtrOutputWithContext(context.Background())
}

func (i ExecStepConfigArgs) ToExecStepConfigPtrOutputWithContext(ctx context.Context) ExecStepConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepConfigOutput).ToExecStepConfigPtrOutputWithContext(ctx)
}

// ExecStepConfigPtrInput is an input type that accepts ExecStepConfigArgs, ExecStepConfigPtr and ExecStepConfigPtrOutput values.
// You can construct a concrete instance of `ExecStepConfigPtrInput` via:
//
//	        ExecStepConfigArgs{...}
//
//	or:
//
//	        nil
type ExecStepConfigPtrInput interface {
	pulumi.Input

	ToExecStepConfigPtrOutput() ExecStepConfigPtrOutput
	ToExecStepConfigPtrOutputWithContext(context.Context) ExecStepConfigPtrOutput
}

type execStepConfigPtrType ExecStepConfigArgs

func ExecStepConfigPtr(v *ExecStepConfigArgs) ExecStepConfigPtrInput {
	return (*execStepConfigPtrType)(v)
}

func (*execStepConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecStepConfig)(nil)).Elem()
}

func (i *execStepConfigPtrType) ToExecStepConfigPtrOutput() ExecStepConfigPtrOutput {
	return i.ToExecStepConfigPtrOutputWithContext(context.Background())
}

func (i *execStepConfigPtrType) ToExecStepConfigPtrOutputWithContext(ctx context.Context) ExecStepConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecStepConfigPtrOutput)
}

func (i *execStepConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ExecStepConfig] {
	return pulumix.Output[*ExecStepConfig]{
		OutputState: i.ToExecStepConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Common configurations for an ExecStep.
type ExecStepConfigOutput struct{ *pulumi.OutputState }

func (ExecStepConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStepConfig)(nil)).Elem()
}

func (o ExecStepConfigOutput) ToExecStepConfigOutput() ExecStepConfigOutput {
	return o
}

func (o ExecStepConfigOutput) ToExecStepConfigOutputWithContext(ctx context.Context) ExecStepConfigOutput {
	return o
}

func (o ExecStepConfigOutput) ToExecStepConfigPtrOutput() ExecStepConfigPtrOutput {
	return o.ToExecStepConfigPtrOutputWithContext(context.Background())
}

func (o ExecStepConfigOutput) ToExecStepConfigPtrOutputWithContext(ctx context.Context) ExecStepConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExecStepConfig) *ExecStepConfig {
		return &v
	}).(ExecStepConfigPtrOutput)
}

func (o ExecStepConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ExecStepConfig] {
	return pulumix.Output[ExecStepConfig]{
		OutputState: o.OutputState,
	}
}

// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
func (o ExecStepConfigOutput) AllowedSuccessCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ExecStepConfig) []int { return v.AllowedSuccessCodes }).(pulumi.IntArrayOutput)
}

// A Cloud Storage object containing the executable.
func (o ExecStepConfigOutput) GcsObject() GcsObjectPtrOutput {
	return o.ApplyT(func(v ExecStepConfig) *GcsObject { return v.GcsObject }).(GcsObjectPtrOutput)
}

// The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
func (o ExecStepConfigOutput) Interpreter() ExecStepConfigInterpreterPtrOutput {
	return o.ApplyT(func(v ExecStepConfig) *ExecStepConfigInterpreter { return v.Interpreter }).(ExecStepConfigInterpreterPtrOutput)
}

// An absolute path to the executable on the VM.
func (o ExecStepConfigOutput) LocalPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecStepConfig) *string { return v.LocalPath }).(pulumi.StringPtrOutput)
}

type ExecStepConfigPtrOutput struct{ *pulumi.OutputState }

func (ExecStepConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecStepConfig)(nil)).Elem()
}

func (o ExecStepConfigPtrOutput) ToExecStepConfigPtrOutput() ExecStepConfigPtrOutput {
	return o
}

func (o ExecStepConfigPtrOutput) ToExecStepConfigPtrOutputWithContext(ctx context.Context) ExecStepConfigPtrOutput {
	return o
}

func (o ExecStepConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExecStepConfig] {
	return pulumix.Output[*ExecStepConfig]{
		OutputState: o.OutputState,
	}
}

func (o ExecStepConfigPtrOutput) Elem() ExecStepConfigOutput {
	return o.ApplyT(func(v *ExecStepConfig) ExecStepConfig {
		if v != nil {
			return *v
		}
		var ret ExecStepConfig
		return ret
	}).(ExecStepConfigOutput)
}

// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
func (o ExecStepConfigPtrOutput) AllowedSuccessCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ExecStepConfig) []int {
		if v == nil {
			return nil
		}
		return v.AllowedSuccessCodes
	}).(pulumi.IntArrayOutput)
}

// A Cloud Storage object containing the executable.
func (o ExecStepConfigPtrOutput) GcsObject() GcsObjectPtrOutput {
	return o.ApplyT(func(v *ExecStepConfig) *GcsObject {
		if v == nil {
			return nil
		}
		return v.GcsObject
	}).(GcsObjectPtrOutput)
}

// The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
func (o ExecStepConfigPtrOutput) Interpreter() ExecStepConfigInterpreterPtrOutput {
	return o.ApplyT(func(v *ExecStepConfig) *ExecStepConfigInterpreter {
		if v == nil {
			return nil
		}
		return v.Interpreter
	}).(ExecStepConfigInterpreterPtrOutput)
}

// An absolute path to the executable on the VM.
func (o ExecStepConfigPtrOutput) LocalPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecStepConfig) *string {
		if v == nil {
			return nil
		}
		return v.LocalPath
	}).(pulumi.StringPtrOutput)
}

// Common configurations for an ExecStep.
type ExecStepConfigResponse struct {
	// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
	AllowedSuccessCodes []int `pulumi:"allowedSuccessCodes"`
	// A Cloud Storage object containing the executable.
	GcsObject GcsObjectResponse `pulumi:"gcsObject"`
	// The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
	Interpreter string `pulumi:"interpreter"`
	// An absolute path to the executable on the VM.
	LocalPath string `pulumi:"localPath"`
}

// Common configurations for an ExecStep.
type ExecStepConfigResponseOutput struct{ *pulumi.OutputState }

func (ExecStepConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStepConfigResponse)(nil)).Elem()
}

func (o ExecStepConfigResponseOutput) ToExecStepConfigResponseOutput() ExecStepConfigResponseOutput {
	return o
}

func (o ExecStepConfigResponseOutput) ToExecStepConfigResponseOutputWithContext(ctx context.Context) ExecStepConfigResponseOutput {
	return o
}

func (o ExecStepConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExecStepConfigResponse] {
	return pulumix.Output[ExecStepConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Defaults to [0]. A list of possible return values that the execution can return to indicate a success.
func (o ExecStepConfigResponseOutput) AllowedSuccessCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ExecStepConfigResponse) []int { return v.AllowedSuccessCodes }).(pulumi.IntArrayOutput)
}

// A Cloud Storage object containing the executable.
func (o ExecStepConfigResponseOutput) GcsObject() GcsObjectResponseOutput {
	return o.ApplyT(func(v ExecStepConfigResponse) GcsObjectResponse { return v.GcsObject }).(GcsObjectResponseOutput)
}

// The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\(Unix\)).
func (o ExecStepConfigResponseOutput) Interpreter() pulumi.StringOutput {
	return o.ApplyT(func(v ExecStepConfigResponse) string { return v.Interpreter }).(pulumi.StringOutput)
}

// An absolute path to the executable on the VM.
func (o ExecStepConfigResponseOutput) LocalPath() pulumi.StringOutput {
	return o.ApplyT(func(v ExecStepConfigResponse) string { return v.LocalPath }).(pulumi.StringOutput)
}

// A step that runs an executable for a PatchJob.
type ExecStepResponse struct {
	// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
	LinuxExecStepConfig ExecStepConfigResponse `pulumi:"linuxExecStepConfig"`
	// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
	WindowsExecStepConfig ExecStepConfigResponse `pulumi:"windowsExecStepConfig"`
}

// A step that runs an executable for a PatchJob.
type ExecStepResponseOutput struct{ *pulumi.OutputState }

func (ExecStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecStepResponse)(nil)).Elem()
}

func (o ExecStepResponseOutput) ToExecStepResponseOutput() ExecStepResponseOutput {
	return o
}

func (o ExecStepResponseOutput) ToExecStepResponseOutputWithContext(ctx context.Context) ExecStepResponseOutput {
	return o
}

func (o ExecStepResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExecStepResponse] {
	return pulumix.Output[ExecStepResponse]{
		OutputState: o.OutputState,
	}
}

// The ExecStepConfig for all Linux VMs targeted by the PatchJob.
func (o ExecStepResponseOutput) LinuxExecStepConfig() ExecStepConfigResponseOutput {
	return o.ApplyT(func(v ExecStepResponse) ExecStepConfigResponse { return v.LinuxExecStepConfig }).(ExecStepConfigResponseOutput)
}

// The ExecStepConfig for all Windows VMs targeted by the PatchJob.
func (o ExecStepResponseOutput) WindowsExecStepConfig() ExecStepConfigResponseOutput {
	return o.ApplyT(func(v ExecStepResponse) ExecStepConfigResponse { return v.WindowsExecStepConfig }).(ExecStepConfigResponseOutput)
}

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercent struct {
	// Specifies a fixed value.
	Fixed *int `pulumi:"fixed"`
	// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
	Percent *int `pulumi:"percent"`
}

// FixedOrPercentInput is an input type that accepts FixedOrPercentArgs and FixedOrPercentOutput values.
// You can construct a concrete instance of `FixedOrPercentInput` via:
//
//	FixedOrPercentArgs{...}
type FixedOrPercentInput interface {
	pulumi.Input

	ToFixedOrPercentOutput() FixedOrPercentOutput
	ToFixedOrPercentOutputWithContext(context.Context) FixedOrPercentOutput
}

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercentArgs struct {
	// Specifies a fixed value.
	Fixed pulumi.IntPtrInput `pulumi:"fixed"`
	// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
	Percent pulumi.IntPtrInput `pulumi:"percent"`
}

func (FixedOrPercentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedOrPercent)(nil)).Elem()
}

func (i FixedOrPercentArgs) ToFixedOrPercentOutput() FixedOrPercentOutput {
	return i.ToFixedOrPercentOutputWithContext(context.Background())
}

func (i FixedOrPercentArgs) ToFixedOrPercentOutputWithContext(ctx context.Context) FixedOrPercentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentOutput)
}

func (i FixedOrPercentArgs) ToOutput(ctx context.Context) pulumix.Output[FixedOrPercent] {
	return pulumix.Output[FixedOrPercent]{
		OutputState: i.ToFixedOrPercentOutputWithContext(ctx).OutputState,
	}
}

func (i FixedOrPercentArgs) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return i.ToFixedOrPercentPtrOutputWithContext(context.Background())
}

func (i FixedOrPercentArgs) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentOutput).ToFixedOrPercentPtrOutputWithContext(ctx)
}

// FixedOrPercentPtrInput is an input type that accepts FixedOrPercentArgs, FixedOrPercentPtr and FixedOrPercentPtrOutput values.
// You can construct a concrete instance of `FixedOrPercentPtrInput` via:
//
//	        FixedOrPercentArgs{...}
//
//	or:
//
//	        nil
type FixedOrPercentPtrInput interface {
	pulumi.Input

	ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput
	ToFixedOrPercentPtrOutputWithContext(context.Context) FixedOrPercentPtrOutput
}

type fixedOrPercentPtrType FixedOrPercentArgs

func FixedOrPercentPtr(v *FixedOrPercentArgs) FixedOrPercentPtrInput {
	return (*fixedOrPercentPtrType)(v)
}

func (*fixedOrPercentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedOrPercent)(nil)).Elem()
}

func (i *fixedOrPercentPtrType) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return i.ToFixedOrPercentPtrOutputWithContext(context.Background())
}

func (i *fixedOrPercentPtrType) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedOrPercentPtrOutput)
}

func (i *fixedOrPercentPtrType) ToOutput(ctx context.Context) pulumix.Output[*FixedOrPercent] {
	return pulumix.Output[*FixedOrPercent]{
		OutputState: i.ToFixedOrPercentPtrOutputWithContext(ctx).OutputState,
	}
}

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercentOutput struct{ *pulumi.OutputState }

func (FixedOrPercentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedOrPercent)(nil)).Elem()
}

func (o FixedOrPercentOutput) ToFixedOrPercentOutput() FixedOrPercentOutput {
	return o
}

func (o FixedOrPercentOutput) ToFixedOrPercentOutputWithContext(ctx context.Context) FixedOrPercentOutput {
	return o
}

func (o FixedOrPercentOutput) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return o.ToFixedOrPercentPtrOutputWithContext(context.Background())
}

func (o FixedOrPercentOutput) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FixedOrPercent) *FixedOrPercent {
		return &v
	}).(FixedOrPercentPtrOutput)
}

func (o FixedOrPercentOutput) ToOutput(ctx context.Context) pulumix.Output[FixedOrPercent] {
	return pulumix.Output[FixedOrPercent]{
		OutputState: o.OutputState,
	}
}

// Specifies a fixed value.
func (o FixedOrPercentOutput) Fixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FixedOrPercent) *int { return v.Fixed }).(pulumi.IntPtrOutput)
}

// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
func (o FixedOrPercentOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FixedOrPercent) *int { return v.Percent }).(pulumi.IntPtrOutput)
}

type FixedOrPercentPtrOutput struct{ *pulumi.OutputState }

func (FixedOrPercentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FixedOrPercent)(nil)).Elem()
}

func (o FixedOrPercentPtrOutput) ToFixedOrPercentPtrOutput() FixedOrPercentPtrOutput {
	return o
}

func (o FixedOrPercentPtrOutput) ToFixedOrPercentPtrOutputWithContext(ctx context.Context) FixedOrPercentPtrOutput {
	return o
}

func (o FixedOrPercentPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FixedOrPercent] {
	return pulumix.Output[*FixedOrPercent]{
		OutputState: o.OutputState,
	}
}

func (o FixedOrPercentPtrOutput) Elem() FixedOrPercentOutput {
	return o.ApplyT(func(v *FixedOrPercent) FixedOrPercent {
		if v != nil {
			return *v
		}
		var ret FixedOrPercent
		return ret
	}).(FixedOrPercentOutput)
}

// Specifies a fixed value.
func (o FixedOrPercentPtrOutput) Fixed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedOrPercent) *int {
		if v == nil {
			return nil
		}
		return v.Fixed
	}).(pulumi.IntPtrOutput)
}

// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
func (o FixedOrPercentPtrOutput) Percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FixedOrPercent) *int {
		if v == nil {
			return nil
		}
		return v.Percent
	}).(pulumi.IntPtrOutput)
}

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercentResponse struct {
	// Specifies a fixed value.
	Fixed int `pulumi:"fixed"`
	// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
	Percent int `pulumi:"percent"`
}

// Message encapsulating a value that can be either absolute ("fixed") or relative ("percent") to a value.
type FixedOrPercentResponseOutput struct{ *pulumi.OutputState }

func (FixedOrPercentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedOrPercentResponse)(nil)).Elem()
}

func (o FixedOrPercentResponseOutput) ToFixedOrPercentResponseOutput() FixedOrPercentResponseOutput {
	return o
}

func (o FixedOrPercentResponseOutput) ToFixedOrPercentResponseOutputWithContext(ctx context.Context) FixedOrPercentResponseOutput {
	return o
}

func (o FixedOrPercentResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FixedOrPercentResponse] {
	return pulumix.Output[FixedOrPercentResponse]{
		OutputState: o.OutputState,
	}
}

// Specifies a fixed value.
func (o FixedOrPercentResponseOutput) Fixed() pulumi.IntOutput {
	return o.ApplyT(func(v FixedOrPercentResponse) int { return v.Fixed }).(pulumi.IntOutput)
}

// Specifies the relative value defined as a percentage, which will be multiplied by a reference value.
func (o FixedOrPercentResponseOutput) Percent() pulumi.IntOutput {
	return o.ApplyT(func(v FixedOrPercentResponse) int { return v.Percent }).(pulumi.IntOutput)
}

// Cloud Storage object representation.
type GcsObject struct {
	// Bucket of the Cloud Storage object.
	Bucket string `pulumi:"bucket"`
	// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	GenerationNumber string `pulumi:"generationNumber"`
	// Name of the Cloud Storage object.
	Object string `pulumi:"object"`
}

// GcsObjectInput is an input type that accepts GcsObjectArgs and GcsObjectOutput values.
// You can construct a concrete instance of `GcsObjectInput` via:
//
//	GcsObjectArgs{...}
type GcsObjectInput interface {
	pulumi.Input

	ToGcsObjectOutput() GcsObjectOutput
	ToGcsObjectOutputWithContext(context.Context) GcsObjectOutput
}

// Cloud Storage object representation.
type GcsObjectArgs struct {
	// Bucket of the Cloud Storage object.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	GenerationNumber pulumi.StringInput `pulumi:"generationNumber"`
	// Name of the Cloud Storage object.
	Object pulumi.StringInput `pulumi:"object"`
}

func (GcsObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsObject)(nil)).Elem()
}

func (i GcsObjectArgs) ToGcsObjectOutput() GcsObjectOutput {
	return i.ToGcsObjectOutputWithContext(context.Background())
}

func (i GcsObjectArgs) ToGcsObjectOutputWithContext(ctx context.Context) GcsObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsObjectOutput)
}

func (i GcsObjectArgs) ToOutput(ctx context.Context) pulumix.Output[GcsObject] {
	return pulumix.Output[GcsObject]{
		OutputState: i.ToGcsObjectOutputWithContext(ctx).OutputState,
	}
}

func (i GcsObjectArgs) ToGcsObjectPtrOutput() GcsObjectPtrOutput {
	return i.ToGcsObjectPtrOutputWithContext(context.Background())
}

func (i GcsObjectArgs) ToGcsObjectPtrOutputWithContext(ctx context.Context) GcsObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsObjectOutput).ToGcsObjectPtrOutputWithContext(ctx)
}

// GcsObjectPtrInput is an input type that accepts GcsObjectArgs, GcsObjectPtr and GcsObjectPtrOutput values.
// You can construct a concrete instance of `GcsObjectPtrInput` via:
//
//	        GcsObjectArgs{...}
//
//	or:
//
//	        nil
type GcsObjectPtrInput interface {
	pulumi.Input

	ToGcsObjectPtrOutput() GcsObjectPtrOutput
	ToGcsObjectPtrOutputWithContext(context.Context) GcsObjectPtrOutput
}

type gcsObjectPtrType GcsObjectArgs

func GcsObjectPtr(v *GcsObjectArgs) GcsObjectPtrInput {
	return (*gcsObjectPtrType)(v)
}

func (*gcsObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsObject)(nil)).Elem()
}

func (i *gcsObjectPtrType) ToGcsObjectPtrOutput() GcsObjectPtrOutput {
	return i.ToGcsObjectPtrOutputWithContext(context.Background())
}

func (i *gcsObjectPtrType) ToGcsObjectPtrOutputWithContext(ctx context.Context) GcsObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsObjectPtrOutput)
}

func (i *gcsObjectPtrType) ToOutput(ctx context.Context) pulumix.Output[*GcsObject] {
	return pulumix.Output[*GcsObject]{
		OutputState: i.ToGcsObjectPtrOutputWithContext(ctx).OutputState,
	}
}

// Cloud Storage object representation.
type GcsObjectOutput struct{ *pulumi.OutputState }

func (GcsObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsObject)(nil)).Elem()
}

func (o GcsObjectOutput) ToGcsObjectOutput() GcsObjectOutput {
	return o
}

func (o GcsObjectOutput) ToGcsObjectOutputWithContext(ctx context.Context) GcsObjectOutput {
	return o
}

func (o GcsObjectOutput) ToGcsObjectPtrOutput() GcsObjectPtrOutput {
	return o.ToGcsObjectPtrOutputWithContext(context.Background())
}

func (o GcsObjectOutput) ToGcsObjectPtrOutputWithContext(ctx context.Context) GcsObjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GcsObject) *GcsObject {
		return &v
	}).(GcsObjectPtrOutput)
}

func (o GcsObjectOutput) ToOutput(ctx context.Context) pulumix.Output[GcsObject] {
	return pulumix.Output[GcsObject]{
		OutputState: o.OutputState,
	}
}

// Bucket of the Cloud Storage object.
func (o GcsObjectOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GcsObject) string { return v.Bucket }).(pulumi.StringOutput)
}

// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
func (o GcsObjectOutput) GenerationNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GcsObject) string { return v.GenerationNumber }).(pulumi.StringOutput)
}

// Name of the Cloud Storage object.
func (o GcsObjectOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v GcsObject) string { return v.Object }).(pulumi.StringOutput)
}

type GcsObjectPtrOutput struct{ *pulumi.OutputState }

func (GcsObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsObject)(nil)).Elem()
}

func (o GcsObjectPtrOutput) ToGcsObjectPtrOutput() GcsObjectPtrOutput {
	return o
}

func (o GcsObjectPtrOutput) ToGcsObjectPtrOutputWithContext(ctx context.Context) GcsObjectPtrOutput {
	return o
}

func (o GcsObjectPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GcsObject] {
	return pulumix.Output[*GcsObject]{
		OutputState: o.OutputState,
	}
}

func (o GcsObjectPtrOutput) Elem() GcsObjectOutput {
	return o.ApplyT(func(v *GcsObject) GcsObject {
		if v != nil {
			return *v
		}
		var ret GcsObject
		return ret
	}).(GcsObjectOutput)
}

// Bucket of the Cloud Storage object.
func (o GcsObjectPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsObject) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
func (o GcsObjectPtrOutput) GenerationNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsObject) *string {
		if v == nil {
			return nil
		}
		return &v.GenerationNumber
	}).(pulumi.StringPtrOutput)
}

// Name of the Cloud Storage object.
func (o GcsObjectPtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsObject) *string {
		if v == nil {
			return nil
		}
		return &v.Object
	}).(pulumi.StringPtrOutput)
}

// Cloud Storage object representation.
type GcsObjectResponse struct {
	// Bucket of the Cloud Storage object.
	Bucket string `pulumi:"bucket"`
	// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
	GenerationNumber string `pulumi:"generationNumber"`
	// Name of the Cloud Storage object.
	Object string `pulumi:"object"`
}

// Cloud Storage object representation.
type GcsObjectResponseOutput struct{ *pulumi.OutputState }

func (GcsObjectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsObjectResponse)(nil)).Elem()
}

func (o GcsObjectResponseOutput) ToGcsObjectResponseOutput() GcsObjectResponseOutput {
	return o
}

func (o GcsObjectResponseOutput) ToGcsObjectResponseOutputWithContext(ctx context.Context) GcsObjectResponseOutput {
	return o
}

func (o GcsObjectResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GcsObjectResponse] {
	return pulumix.Output[GcsObjectResponse]{
		OutputState: o.OutputState,
	}
}

// Bucket of the Cloud Storage object.
func (o GcsObjectResponseOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GcsObjectResponse) string { return v.Bucket }).(pulumi.StringOutput)
}

// Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change.
func (o GcsObjectResponseOutput) GenerationNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GcsObjectResponse) string { return v.GenerationNumber }).(pulumi.StringOutput)
}

// Name of the Cloud Storage object.
func (o GcsObjectResponseOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v GcsObjectResponse) string { return v.Object }).(pulumi.StringOutput)
}

// Googet patching is performed by running `googet update`.
type GooSettings struct {
}

// GooSettingsInput is an input type that accepts GooSettingsArgs and GooSettingsOutput values.
// You can construct a concrete instance of `GooSettingsInput` via:
//
//	GooSettingsArgs{...}
type GooSettingsInput interface {
	pulumi.Input

	ToGooSettingsOutput() GooSettingsOutput
	ToGooSettingsOutputWithContext(context.Context) GooSettingsOutput
}

// Googet patching is performed by running `googet update`.
type GooSettingsArgs struct {
}

func (GooSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GooSettings)(nil)).Elem()
}

func (i GooSettingsArgs) ToGooSettingsOutput() GooSettingsOutput {
	return i.ToGooSettingsOutputWithContext(context.Background())
}

func (i GooSettingsArgs) ToGooSettingsOutputWithContext(ctx context.Context) GooSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooSettingsOutput)
}

func (i GooSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[GooSettings] {
	return pulumix.Output[GooSettings]{
		OutputState: i.ToGooSettingsOutputWithContext(ctx).OutputState,
	}
}

func (i GooSettingsArgs) ToGooSettingsPtrOutput() GooSettingsPtrOutput {
	return i.ToGooSettingsPtrOutputWithContext(context.Background())
}

func (i GooSettingsArgs) ToGooSettingsPtrOutputWithContext(ctx context.Context) GooSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooSettingsOutput).ToGooSettingsPtrOutputWithContext(ctx)
}

// GooSettingsPtrInput is an input type that accepts GooSettingsArgs, GooSettingsPtr and GooSettingsPtrOutput values.
// You can construct a concrete instance of `GooSettingsPtrInput` via:
//
//	        GooSettingsArgs{...}
//
//	or:
//
//	        nil
type GooSettingsPtrInput interface {
	pulumi.Input

	ToGooSettingsPtrOutput() GooSettingsPtrOutput
	ToGooSettingsPtrOutputWithContext(context.Context) GooSettingsPtrOutput
}

type gooSettingsPtrType GooSettingsArgs

func GooSettingsPtr(v *GooSettingsArgs) GooSettingsPtrInput {
	return (*gooSettingsPtrType)(v)
}

func (*gooSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GooSettings)(nil)).Elem()
}

func (i *gooSettingsPtrType) ToGooSettingsPtrOutput() GooSettingsPtrOutput {
	return i.ToGooSettingsPtrOutputWithContext(context.Background())
}

func (i *gooSettingsPtrType) ToGooSettingsPtrOutputWithContext(ctx context.Context) GooSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooSettingsPtrOutput)
}

func (i *gooSettingsPtrType) ToOutput(ctx context.Context) pulumix.Output[*GooSettings] {
	return pulumix.Output[*GooSettings]{
		OutputState: i.ToGooSettingsPtrOutputWithContext(ctx).OutputState,
	}
}

// Googet patching is performed by running `googet update`.
type GooSettingsOutput struct{ *pulumi.OutputState }

func (GooSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooSettings)(nil)).Elem()
}

func (o GooSettingsOutput) ToGooSettingsOutput() GooSettingsOutput {
	return o
}

func (o GooSettingsOutput) ToGooSettingsOutputWithContext(ctx context.Context) GooSettingsOutput {
	return o
}

func (o GooSettingsOutput) ToGooSettingsPtrOutput() GooSettingsPtrOutput {
	return o.ToGooSettingsPtrOutputWithContext(context.Background())
}

func (o GooSettingsOutput) ToGooSettingsPtrOutputWithContext(ctx context.Context) GooSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GooSettings) *GooSettings {
		return &v
	}).(GooSettingsPtrOutput)
}

func (o GooSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[GooSettings] {
	return pulumix.Output[GooSettings]{
		OutputState: o.OutputState,
	}
}

type GooSettingsPtrOutput struct{ *pulumi.OutputState }

func (GooSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GooSettings)(nil)).Elem()
}

func (o GooSettingsPtrOutput) ToGooSettingsPtrOutput() GooSettingsPtrOutput {
	return o
}

func (o GooSettingsPtrOutput) ToGooSettingsPtrOutputWithContext(ctx context.Context) GooSettingsPtrOutput {
	return o
}

func (o GooSettingsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GooSettings] {
	return pulumix.Output[*GooSettings]{
		OutputState: o.OutputState,
	}
}

func (o GooSettingsPtrOutput) Elem() GooSettingsOutput {
	return o.ApplyT(func(v *GooSettings) GooSettings {
		if v != nil {
			return *v
		}
		var ret GooSettings
		return ret
	}).(GooSettingsOutput)
}

// Googet patching is performed by running `googet update`.
type GooSettingsResponse struct {
}

// Googet patching is performed by running `googet update`.
type GooSettingsResponseOutput struct{ *pulumi.OutputState }

func (GooSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GooSettingsResponse)(nil)).Elem()
}

func (o GooSettingsResponseOutput) ToGooSettingsResponseOutput() GooSettingsResponseOutput {
	return o
}

func (o GooSettingsResponseOutput) ToGooSettingsResponseOutputWithContext(ctx context.Context) GooSettingsResponseOutput {
	return o
}

func (o GooSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GooSettingsResponse] {
	return pulumix.Output[GooSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// Represents a monthly schedule. An example of a valid monthly schedule is "on the third Tuesday of the month" or "on the 15th of the month".
type MonthlySchedule struct {
	// One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run "every month on the 31st" will not run in February, April, June, etc.
	MonthDay int `pulumi:"monthDay"`
	// Week day in a month.
	WeekDayOfMonth WeekDayOfMonth `pulumi:"weekDayOfMonth"`
}

// MonthlyScheduleInput is an input type that accepts MonthlyScheduleArgs and MonthlyScheduleOutput values.
// You can construct a concrete instance of `MonthlyScheduleInput` via:
//
//	MonthlyScheduleArgs{...}
type MonthlyScheduleInput interface {
	pulumi.Input

	ToMonthlyScheduleOutput() MonthlyScheduleOutput
	ToMonthlyScheduleOutputWithContext(context.Context) MonthlyScheduleOutput
}

// Represents a monthly schedule. An example of a valid monthly schedule is "on the third Tuesday of the month" or "on the 15th of the month".
type MonthlyScheduleArgs struct {
	// One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run "every month on the 31st" will not run in February, April, June, etc.
	MonthDay pulumi.IntInput `pulumi:"monthDay"`
	// Week day in a month.
	WeekDayOfMonth WeekDayOfMonthInput `pulumi:"weekDayOfMonth"`
}

func (MonthlyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlySchedule)(nil)).Elem()
}

func (i MonthlyScheduleArgs) ToMonthlyScheduleOutput() MonthlyScheduleOutput {
	return i.ToMonthlyScheduleOutputWithContext(context.Background())
}

func (i MonthlyScheduleArgs) ToMonthlyScheduleOutputWithContext(ctx context.Context) MonthlyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlyScheduleOutput)
}

func (i MonthlyScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[MonthlySchedule] {
	return pulumix.Output[MonthlySchedule]{
		OutputState: i.ToMonthlyScheduleOutputWithContext(ctx).OutputState,
	}
}

// Represents a monthly schedule. An example of a valid monthly schedule is "on the third Tuesday of the month" or "on the 15th of the month".
type MonthlyScheduleOutput struct{ *pulumi.OutputState }

func (MonthlyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlySchedule)(nil)).Elem()
}

func (o MonthlyScheduleOutput) ToMonthlyScheduleOutput() MonthlyScheduleOutput {
	return o
}

func (o MonthlyScheduleOutput) ToMonthlyScheduleOutputWithContext(ctx context.Context) MonthlyScheduleOutput {
	return o
}

func (o MonthlyScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[MonthlySchedule] {
	return pulumix.Output[MonthlySchedule]{
		OutputState: o.OutputState,
	}
}

// One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run "every month on the 31st" will not run in February, April, June, etc.
func (o MonthlyScheduleOutput) MonthDay() pulumi.IntOutput {
	return o.ApplyT(func(v MonthlySchedule) int { return v.MonthDay }).(pulumi.IntOutput)
}

// Week day in a month.
func (o MonthlyScheduleOutput) WeekDayOfMonth() WeekDayOfMonthOutput {
	return o.ApplyT(func(v MonthlySchedule) WeekDayOfMonth { return v.WeekDayOfMonth }).(WeekDayOfMonthOutput)
}

// Represents a monthly schedule. An example of a valid monthly schedule is "on the third Tuesday of the month" or "on the 15th of the month".
type MonthlyScheduleResponse struct {
	// One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run "every month on the 31st" will not run in February, April, June, etc.
	MonthDay int `pulumi:"monthDay"`
	// Week day in a month.
	WeekDayOfMonth WeekDayOfMonthResponse `pulumi:"weekDayOfMonth"`
}

// Represents a monthly schedule. An example of a valid monthly schedule is "on the third Tuesday of the month" or "on the 15th of the month".
type MonthlyScheduleResponseOutput struct{ *pulumi.OutputState }

func (MonthlyScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlyScheduleResponse)(nil)).Elem()
}

func (o MonthlyScheduleResponseOutput) ToMonthlyScheduleResponseOutput() MonthlyScheduleResponseOutput {
	return o
}

func (o MonthlyScheduleResponseOutput) ToMonthlyScheduleResponseOutputWithContext(ctx context.Context) MonthlyScheduleResponseOutput {
	return o
}

func (o MonthlyScheduleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MonthlyScheduleResponse] {
	return pulumix.Output[MonthlyScheduleResponse]{
		OutputState: o.OutputState,
	}
}

// One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run "every month on the 31st" will not run in February, April, June, etc.
func (o MonthlyScheduleResponseOutput) MonthDay() pulumi.IntOutput {
	return o.ApplyT(func(v MonthlyScheduleResponse) int { return v.MonthDay }).(pulumi.IntOutput)
}

// Week day in a month.
func (o MonthlyScheduleResponseOutput) WeekDayOfMonth() WeekDayOfMonthResponseOutput {
	return o.ApplyT(func(v MonthlyScheduleResponse) WeekDayOfMonthResponse { return v.WeekDayOfMonth }).(WeekDayOfMonthResponseOutput)
}

// An OS policy defines the desired state configuration for a VM.
type OSPolicy struct {
	// This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.
	AllowNoResourceGroupMatch *bool `pulumi:"allowNoResourceGroupMatch"`
	// Policy description. Length of the description is limited to 1024 characters.
	Description *string `pulumi:"description"`
	// The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment.
	Id string `pulumi:"id"`
	// Policy mode
	Mode OSPolicyMode `pulumi:"mode"`
	// List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`
	ResourceGroups []OSPolicyResourceGroup `pulumi:"resourceGroups"`
}

// OSPolicyInput is an input type that accepts OSPolicyArgs and OSPolicyOutput values.
// You can construct a concrete instance of `OSPolicyInput` via:
//
//	OSPolicyArgs{...}
type OSPolicyInput interface {
	pulumi.Input

	ToOSPolicyOutput() OSPolicyOutput
	ToOSPolicyOutputWithContext(context.Context) OSPolicyOutput
}

// An OS policy defines the desired state configuration for a VM.
type OSPolicyArgs struct {
	// This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.
	AllowNoResourceGroupMatch pulumi.BoolPtrInput `pulumi:"allowNoResourceGroupMatch"`
	// Policy description. Length of the description is limited to 1024 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment.
	Id pulumi.StringInput `pulumi:"id"`
	// Policy mode
	Mode OSPolicyModeInput `pulumi:"mode"`
	// List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`
	ResourceGroups OSPolicyResourceGroupArrayInput `pulumi:"resourceGroups"`
}

func (OSPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicy)(nil)).Elem()
}

func (i OSPolicyArgs) ToOSPolicyOutput() OSPolicyOutput {
	return i.ToOSPolicyOutputWithContext(context.Background())
}

func (i OSPolicyArgs) ToOSPolicyOutputWithContext(ctx context.Context) OSPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyOutput)
}

func (i OSPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicy] {
	return pulumix.Output[OSPolicy]{
		OutputState: i.ToOSPolicyOutputWithContext(ctx).OutputState,
	}
}

// OSPolicyArrayInput is an input type that accepts OSPolicyArray and OSPolicyArrayOutput values.
// You can construct a concrete instance of `OSPolicyArrayInput` via:
//
//	OSPolicyArray{ OSPolicyArgs{...} }
type OSPolicyArrayInput interface {
	pulumi.Input

	ToOSPolicyArrayOutput() OSPolicyArrayOutput
	ToOSPolicyArrayOutputWithContext(context.Context) OSPolicyArrayOutput
}

type OSPolicyArray []OSPolicyInput

func (OSPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicy)(nil)).Elem()
}

func (i OSPolicyArray) ToOSPolicyArrayOutput() OSPolicyArrayOutput {
	return i.ToOSPolicyArrayOutputWithContext(context.Background())
}

func (i OSPolicyArray) ToOSPolicyArrayOutputWithContext(ctx context.Context) OSPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyArrayOutput)
}

func (i OSPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicy] {
	return pulumix.Output[[]OSPolicy]{
		OutputState: i.ToOSPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

// An OS policy defines the desired state configuration for a VM.
type OSPolicyOutput struct{ *pulumi.OutputState }

func (OSPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicy)(nil)).Elem()
}

func (o OSPolicyOutput) ToOSPolicyOutput() OSPolicyOutput {
	return o
}

func (o OSPolicyOutput) ToOSPolicyOutputWithContext(ctx context.Context) OSPolicyOutput {
	return o
}

func (o OSPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicy] {
	return pulumix.Output[OSPolicy]{
		OutputState: o.OutputState,
	}
}

// This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.
func (o OSPolicyOutput) AllowNoResourceGroupMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSPolicy) *bool { return v.AllowNoResourceGroupMatch }).(pulumi.BoolPtrOutput)
}

// Policy description. Length of the description is limited to 1024 characters.
func (o OSPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicy) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment.
func (o OSPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicy) string { return v.Id }).(pulumi.StringOutput)
}

// Policy mode
func (o OSPolicyOutput) Mode() OSPolicyModeOutput {
	return o.ApplyT(func(v OSPolicy) OSPolicyMode { return v.Mode }).(OSPolicyModeOutput)
}

// List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`
func (o OSPolicyOutput) ResourceGroups() OSPolicyResourceGroupArrayOutput {
	return o.ApplyT(func(v OSPolicy) []OSPolicyResourceGroup { return v.ResourceGroups }).(OSPolicyResourceGroupArrayOutput)
}

type OSPolicyArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicy)(nil)).Elem()
}

func (o OSPolicyArrayOutput) ToOSPolicyArrayOutput() OSPolicyArrayOutput {
	return o
}

func (o OSPolicyArrayOutput) ToOSPolicyArrayOutputWithContext(ctx context.Context) OSPolicyArrayOutput {
	return o
}

func (o OSPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicy] {
	return pulumix.Output[[]OSPolicy]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyArrayOutput) Index(i pulumi.IntInput) OSPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicy {
		return vs[0].([]OSPolicy)[vs[1].(int)]
	}).(OSPolicyOutput)
}

// Filters to select target VMs for an assignment. If more than one filter criteria is specified below, a VM will be selected if and only if it satisfies all of them.
type OSPolicyAssignmentInstanceFilter struct {
	// Target all VMs in the project. If true, no other criteria is permitted.
	All *bool `pulumi:"all"`
	// List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM.
	ExclusionLabels []OSPolicyAssignmentLabelSet `pulumi:"exclusionLabels"`
	// List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
	InclusionLabels []OSPolicyAssignmentLabelSet `pulumi:"inclusionLabels"`
	// List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories.
	Inventories []OSPolicyAssignmentInstanceFilterInventory `pulumi:"inventories"`
}

// OSPolicyAssignmentInstanceFilterInput is an input type that accepts OSPolicyAssignmentInstanceFilterArgs and OSPolicyAssignmentInstanceFilterOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentInstanceFilterInput` via:
//
//	OSPolicyAssignmentInstanceFilterArgs{...}
type OSPolicyAssignmentInstanceFilterInput interface {
	pulumi.Input

	ToOSPolicyAssignmentInstanceFilterOutput() OSPolicyAssignmentInstanceFilterOutput
	ToOSPolicyAssignmentInstanceFilterOutputWithContext(context.Context) OSPolicyAssignmentInstanceFilterOutput
}

// Filters to select target VMs for an assignment. If more than one filter criteria is specified below, a VM will be selected if and only if it satisfies all of them.
type OSPolicyAssignmentInstanceFilterArgs struct {
	// Target all VMs in the project. If true, no other criteria is permitted.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM.
	ExclusionLabels OSPolicyAssignmentLabelSetArrayInput `pulumi:"exclusionLabels"`
	// List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
	InclusionLabels OSPolicyAssignmentLabelSetArrayInput `pulumi:"inclusionLabels"`
	// List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories.
	Inventories OSPolicyAssignmentInstanceFilterInventoryArrayInput `pulumi:"inventories"`
}

func (OSPolicyAssignmentInstanceFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentInstanceFilter)(nil)).Elem()
}

func (i OSPolicyAssignmentInstanceFilterArgs) ToOSPolicyAssignmentInstanceFilterOutput() OSPolicyAssignmentInstanceFilterOutput {
	return i.ToOSPolicyAssignmentInstanceFilterOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentInstanceFilterArgs) ToOSPolicyAssignmentInstanceFilterOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentInstanceFilterOutput)
}

func (i OSPolicyAssignmentInstanceFilterArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyAssignmentInstanceFilter] {
	return pulumix.Output[OSPolicyAssignmentInstanceFilter]{
		OutputState: i.ToOSPolicyAssignmentInstanceFilterOutputWithContext(ctx).OutputState,
	}
}

// Filters to select target VMs for an assignment. If more than one filter criteria is specified below, a VM will be selected if and only if it satisfies all of them.
type OSPolicyAssignmentInstanceFilterOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentInstanceFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentInstanceFilter)(nil)).Elem()
}

func (o OSPolicyAssignmentInstanceFilterOutput) ToOSPolicyAssignmentInstanceFilterOutput() OSPolicyAssignmentInstanceFilterOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterOutput) ToOSPolicyAssignmentInstanceFilterOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyAssignmentInstanceFilter] {
	return pulumix.Output[OSPolicyAssignmentInstanceFilter]{
		OutputState: o.OutputState,
	}
}

// Target all VMs in the project. If true, no other criteria is permitted.
func (o OSPolicyAssignmentInstanceFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM.
func (o OSPolicyAssignmentInstanceFilterOutput) ExclusionLabels() OSPolicyAssignmentLabelSetArrayOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilter) []OSPolicyAssignmentLabelSet { return v.ExclusionLabels }).(OSPolicyAssignmentLabelSetArrayOutput)
}

// List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
func (o OSPolicyAssignmentInstanceFilterOutput) InclusionLabels() OSPolicyAssignmentLabelSetArrayOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilter) []OSPolicyAssignmentLabelSet { return v.InclusionLabels }).(OSPolicyAssignmentLabelSetArrayOutput)
}

// List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories.
func (o OSPolicyAssignmentInstanceFilterOutput) Inventories() OSPolicyAssignmentInstanceFilterInventoryArrayOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilter) []OSPolicyAssignmentInstanceFilterInventory {
		return v.Inventories
	}).(OSPolicyAssignmentInstanceFilterInventoryArrayOutput)
}

// VM inventory details.
type OSPolicyAssignmentInstanceFilterInventory struct {
	// The OS short name
	OsShortName string `pulumi:"osShortName"`
	// The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions.
	OsVersion *string `pulumi:"osVersion"`
}

// OSPolicyAssignmentInstanceFilterInventoryInput is an input type that accepts OSPolicyAssignmentInstanceFilterInventoryArgs and OSPolicyAssignmentInstanceFilterInventoryOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentInstanceFilterInventoryInput` via:
//
//	OSPolicyAssignmentInstanceFilterInventoryArgs{...}
type OSPolicyAssignmentInstanceFilterInventoryInput interface {
	pulumi.Input

	ToOSPolicyAssignmentInstanceFilterInventoryOutput() OSPolicyAssignmentInstanceFilterInventoryOutput
	ToOSPolicyAssignmentInstanceFilterInventoryOutputWithContext(context.Context) OSPolicyAssignmentInstanceFilterInventoryOutput
}

// VM inventory details.
type OSPolicyAssignmentInstanceFilterInventoryArgs struct {
	// The OS short name
	OsShortName pulumi.StringInput `pulumi:"osShortName"`
	// The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions.
	OsVersion pulumi.StringPtrInput `pulumi:"osVersion"`
}

func (OSPolicyAssignmentInstanceFilterInventoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentInstanceFilterInventory)(nil)).Elem()
}

func (i OSPolicyAssignmentInstanceFilterInventoryArgs) ToOSPolicyAssignmentInstanceFilterInventoryOutput() OSPolicyAssignmentInstanceFilterInventoryOutput {
	return i.ToOSPolicyAssignmentInstanceFilterInventoryOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentInstanceFilterInventoryArgs) ToOSPolicyAssignmentInstanceFilterInventoryOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterInventoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentInstanceFilterInventoryOutput)
}

func (i OSPolicyAssignmentInstanceFilterInventoryArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyAssignmentInstanceFilterInventory] {
	return pulumix.Output[OSPolicyAssignmentInstanceFilterInventory]{
		OutputState: i.ToOSPolicyAssignmentInstanceFilterInventoryOutputWithContext(ctx).OutputState,
	}
}

// OSPolicyAssignmentInstanceFilterInventoryArrayInput is an input type that accepts OSPolicyAssignmentInstanceFilterInventoryArray and OSPolicyAssignmentInstanceFilterInventoryArrayOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentInstanceFilterInventoryArrayInput` via:
//
//	OSPolicyAssignmentInstanceFilterInventoryArray{ OSPolicyAssignmentInstanceFilterInventoryArgs{...} }
type OSPolicyAssignmentInstanceFilterInventoryArrayInput interface {
	pulumi.Input

	ToOSPolicyAssignmentInstanceFilterInventoryArrayOutput() OSPolicyAssignmentInstanceFilterInventoryArrayOutput
	ToOSPolicyAssignmentInstanceFilterInventoryArrayOutputWithContext(context.Context) OSPolicyAssignmentInstanceFilterInventoryArrayOutput
}

type OSPolicyAssignmentInstanceFilterInventoryArray []OSPolicyAssignmentInstanceFilterInventoryInput

func (OSPolicyAssignmentInstanceFilterInventoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyAssignmentInstanceFilterInventory)(nil)).Elem()
}

func (i OSPolicyAssignmentInstanceFilterInventoryArray) ToOSPolicyAssignmentInstanceFilterInventoryArrayOutput() OSPolicyAssignmentInstanceFilterInventoryArrayOutput {
	return i.ToOSPolicyAssignmentInstanceFilterInventoryArrayOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentInstanceFilterInventoryArray) ToOSPolicyAssignmentInstanceFilterInventoryArrayOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterInventoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentInstanceFilterInventoryArrayOutput)
}

func (i OSPolicyAssignmentInstanceFilterInventoryArray) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicyAssignmentInstanceFilterInventory] {
	return pulumix.Output[[]OSPolicyAssignmentInstanceFilterInventory]{
		OutputState: i.ToOSPolicyAssignmentInstanceFilterInventoryArrayOutputWithContext(ctx).OutputState,
	}
}

// VM inventory details.
type OSPolicyAssignmentInstanceFilterInventoryOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentInstanceFilterInventoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentInstanceFilterInventory)(nil)).Elem()
}

func (o OSPolicyAssignmentInstanceFilterInventoryOutput) ToOSPolicyAssignmentInstanceFilterInventoryOutput() OSPolicyAssignmentInstanceFilterInventoryOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterInventoryOutput) ToOSPolicyAssignmentInstanceFilterInventoryOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterInventoryOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterInventoryOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyAssignmentInstanceFilterInventory] {
	return pulumix.Output[OSPolicyAssignmentInstanceFilterInventory]{
		OutputState: o.OutputState,
	}
}

// The OS short name
func (o OSPolicyAssignmentInstanceFilterInventoryOutput) OsShortName() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilterInventory) string { return v.OsShortName }).(pulumi.StringOutput)
}

// The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions.
func (o OSPolicyAssignmentInstanceFilterInventoryOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilterInventory) *string { return v.OsVersion }).(pulumi.StringPtrOutput)
}

type OSPolicyAssignmentInstanceFilterInventoryArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentInstanceFilterInventoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyAssignmentInstanceFilterInventory)(nil)).Elem()
}

func (o OSPolicyAssignmentInstanceFilterInventoryArrayOutput) ToOSPolicyAssignmentInstanceFilterInventoryArrayOutput() OSPolicyAssignmentInstanceFilterInventoryArrayOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterInventoryArrayOutput) ToOSPolicyAssignmentInstanceFilterInventoryArrayOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterInventoryArrayOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterInventoryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicyAssignmentInstanceFilterInventory] {
	return pulumix.Output[[]OSPolicyAssignmentInstanceFilterInventory]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyAssignmentInstanceFilterInventoryArrayOutput) Index(i pulumi.IntInput) OSPolicyAssignmentInstanceFilterInventoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyAssignmentInstanceFilterInventory {
		return vs[0].([]OSPolicyAssignmentInstanceFilterInventory)[vs[1].(int)]
	}).(OSPolicyAssignmentInstanceFilterInventoryOutput)
}

// VM inventory details.
type OSPolicyAssignmentInstanceFilterInventoryResponse struct {
	// The OS short name
	OsShortName string `pulumi:"osShortName"`
	// The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions.
	OsVersion string `pulumi:"osVersion"`
}

// VM inventory details.
type OSPolicyAssignmentInstanceFilterInventoryResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentInstanceFilterInventoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentInstanceFilterInventoryResponse)(nil)).Elem()
}

func (o OSPolicyAssignmentInstanceFilterInventoryResponseOutput) ToOSPolicyAssignmentInstanceFilterInventoryResponseOutput() OSPolicyAssignmentInstanceFilterInventoryResponseOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterInventoryResponseOutput) ToOSPolicyAssignmentInstanceFilterInventoryResponseOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterInventoryResponseOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterInventoryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyAssignmentInstanceFilterInventoryResponse] {
	return pulumix.Output[OSPolicyAssignmentInstanceFilterInventoryResponse]{
		OutputState: o.OutputState,
	}
}

// The OS short name
func (o OSPolicyAssignmentInstanceFilterInventoryResponseOutput) OsShortName() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilterInventoryResponse) string { return v.OsShortName }).(pulumi.StringOutput)
}

// The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions.
func (o OSPolicyAssignmentInstanceFilterInventoryResponseOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilterInventoryResponse) string { return v.OsVersion }).(pulumi.StringOutput)
}

type OSPolicyAssignmentInstanceFilterInventoryResponseArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentInstanceFilterInventoryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyAssignmentInstanceFilterInventoryResponse)(nil)).Elem()
}

func (o OSPolicyAssignmentInstanceFilterInventoryResponseArrayOutput) ToOSPolicyAssignmentInstanceFilterInventoryResponseArrayOutput() OSPolicyAssignmentInstanceFilterInventoryResponseArrayOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterInventoryResponseArrayOutput) ToOSPolicyAssignmentInstanceFilterInventoryResponseArrayOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterInventoryResponseArrayOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterInventoryResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicyAssignmentInstanceFilterInventoryResponse] {
	return pulumix.Output[[]OSPolicyAssignmentInstanceFilterInventoryResponse]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyAssignmentInstanceFilterInventoryResponseArrayOutput) Index(i pulumi.IntInput) OSPolicyAssignmentInstanceFilterInventoryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyAssignmentInstanceFilterInventoryResponse {
		return vs[0].([]OSPolicyAssignmentInstanceFilterInventoryResponse)[vs[1].(int)]
	}).(OSPolicyAssignmentInstanceFilterInventoryResponseOutput)
}

// Filters to select target VMs for an assignment. If more than one filter criteria is specified below, a VM will be selected if and only if it satisfies all of them.
type OSPolicyAssignmentInstanceFilterResponse struct {
	// Target all VMs in the project. If true, no other criteria is permitted.
	All bool `pulumi:"all"`
	// List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM.
	ExclusionLabels []OSPolicyAssignmentLabelSetResponse `pulumi:"exclusionLabels"`
	// List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
	InclusionLabels []OSPolicyAssignmentLabelSetResponse `pulumi:"inclusionLabels"`
	// List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories.
	Inventories []OSPolicyAssignmentInstanceFilterInventoryResponse `pulumi:"inventories"`
}

// Filters to select target VMs for an assignment. If more than one filter criteria is specified below, a VM will be selected if and only if it satisfies all of them.
type OSPolicyAssignmentInstanceFilterResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentInstanceFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentInstanceFilterResponse)(nil)).Elem()
}

func (o OSPolicyAssignmentInstanceFilterResponseOutput) ToOSPolicyAssignmentInstanceFilterResponseOutput() OSPolicyAssignmentInstanceFilterResponseOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterResponseOutput) ToOSPolicyAssignmentInstanceFilterResponseOutputWithContext(ctx context.Context) OSPolicyAssignmentInstanceFilterResponseOutput {
	return o
}

func (o OSPolicyAssignmentInstanceFilterResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyAssignmentInstanceFilterResponse] {
	return pulumix.Output[OSPolicyAssignmentInstanceFilterResponse]{
		OutputState: o.OutputState,
	}
}

// Target all VMs in the project. If true, no other criteria is permitted.
func (o OSPolicyAssignmentInstanceFilterResponseOutput) All() pulumi.BoolOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilterResponse) bool { return v.All }).(pulumi.BoolOutput)
}

// List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM.
func (o OSPolicyAssignmentInstanceFilterResponseOutput) ExclusionLabels() OSPolicyAssignmentLabelSetResponseArrayOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilterResponse) []OSPolicyAssignmentLabelSetResponse {
		return v.ExclusionLabels
	}).(OSPolicyAssignmentLabelSetResponseArrayOutput)
}

// List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.
func (o OSPolicyAssignmentInstanceFilterResponseOutput) InclusionLabels() OSPolicyAssignmentLabelSetResponseArrayOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilterResponse) []OSPolicyAssignmentLabelSetResponse {
		return v.InclusionLabels
	}).(OSPolicyAssignmentLabelSetResponseArrayOutput)
}

// List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories.
func (o OSPolicyAssignmentInstanceFilterResponseOutput) Inventories() OSPolicyAssignmentInstanceFilterInventoryResponseArrayOutput {
	return o.ApplyT(func(v OSPolicyAssignmentInstanceFilterResponse) []OSPolicyAssignmentInstanceFilterInventoryResponse {
		return v.Inventories
	}).(OSPolicyAssignmentInstanceFilterInventoryResponseArrayOutput)
}

// Message representing label set. * A label is a key value pair set for a VM. * A LabelSet is a set of labels. * Labels within a LabelSet are ANDed. In other words, a LabelSet is applicable for a VM only if it matches all the labels in the LabelSet. * Example: A LabelSet with 2 labels: `env=prod` and `type=webserver` will only be applicable for those VMs with both labels present.
type OSPolicyAssignmentLabelSet struct {
	// Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
	Labels map[string]string `pulumi:"labels"`
}

// OSPolicyAssignmentLabelSetInput is an input type that accepts OSPolicyAssignmentLabelSetArgs and OSPolicyAssignmentLabelSetOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentLabelSetInput` via:
//
//	OSPolicyAssignmentLabelSetArgs{...}
type OSPolicyAssignmentLabelSetInput interface {
	pulumi.Input

	ToOSPolicyAssignmentLabelSetOutput() OSPolicyAssignmentLabelSetOutput
	ToOSPolicyAssignmentLabelSetOutputWithContext(context.Context) OSPolicyAssignmentLabelSetOutput
}

// Message representing label set. * A label is a key value pair set for a VM. * A LabelSet is a set of labels. * Labels within a LabelSet are ANDed. In other words, a LabelSet is applicable for a VM only if it matches all the labels in the LabelSet. * Example: A LabelSet with 2 labels: `env=prod` and `type=webserver` will only be applicable for those VMs with both labels present.
type OSPolicyAssignmentLabelSetArgs struct {
	// Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (OSPolicyAssignmentLabelSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentLabelSet)(nil)).Elem()
}

func (i OSPolicyAssignmentLabelSetArgs) ToOSPolicyAssignmentLabelSetOutput() OSPolicyAssignmentLabelSetOutput {
	return i.ToOSPolicyAssignmentLabelSetOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentLabelSetArgs) ToOSPolicyAssignmentLabelSetOutputWithContext(ctx context.Context) OSPolicyAssignmentLabelSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentLabelSetOutput)
}

func (i OSPolicyAssignmentLabelSetArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyAssignmentLabelSet] {
	return pulumix.Output[OSPolicyAssignmentLabelSet]{
		OutputState: i.ToOSPolicyAssignmentLabelSetOutputWithContext(ctx).OutputState,
	}
}

// OSPolicyAssignmentLabelSetArrayInput is an input type that accepts OSPolicyAssignmentLabelSetArray and OSPolicyAssignmentLabelSetArrayOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentLabelSetArrayInput` via:
//
//	OSPolicyAssignmentLabelSetArray{ OSPolicyAssignmentLabelSetArgs{...} }
type OSPolicyAssignmentLabelSetArrayInput interface {
	pulumi.Input

	ToOSPolicyAssignmentLabelSetArrayOutput() OSPolicyAssignmentLabelSetArrayOutput
	ToOSPolicyAssignmentLabelSetArrayOutputWithContext(context.Context) OSPolicyAssignmentLabelSetArrayOutput
}

type OSPolicyAssignmentLabelSetArray []OSPolicyAssignmentLabelSetInput

func (OSPolicyAssignmentLabelSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyAssignmentLabelSet)(nil)).Elem()
}

func (i OSPolicyAssignmentLabelSetArray) ToOSPolicyAssignmentLabelSetArrayOutput() OSPolicyAssignmentLabelSetArrayOutput {
	return i.ToOSPolicyAssignmentLabelSetArrayOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentLabelSetArray) ToOSPolicyAssignmentLabelSetArrayOutputWithContext(ctx context.Context) OSPolicyAssignmentLabelSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentLabelSetArrayOutput)
}

func (i OSPolicyAssignmentLabelSetArray) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicyAssignmentLabelSet] {
	return pulumix.Output[[]OSPolicyAssignmentLabelSet]{
		OutputState: i.ToOSPolicyAssignmentLabelSetArrayOutputWithContext(ctx).OutputState,
	}
}

// Message representing label set. * A label is a key value pair set for a VM. * A LabelSet is a set of labels. * Labels within a LabelSet are ANDed. In other words, a LabelSet is applicable for a VM only if it matches all the labels in the LabelSet. * Example: A LabelSet with 2 labels: `env=prod` and `type=webserver` will only be applicable for those VMs with both labels present.
type OSPolicyAssignmentLabelSetOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentLabelSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentLabelSet)(nil)).Elem()
}

func (o OSPolicyAssignmentLabelSetOutput) ToOSPolicyAssignmentLabelSetOutput() OSPolicyAssignmentLabelSetOutput {
	return o
}

func (o OSPolicyAssignmentLabelSetOutput) ToOSPolicyAssignmentLabelSetOutputWithContext(ctx context.Context) OSPolicyAssignmentLabelSetOutput {
	return o
}

func (o OSPolicyAssignmentLabelSetOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyAssignmentLabelSet] {
	return pulumix.Output[OSPolicyAssignmentLabelSet]{
		OutputState: o.OutputState,
	}
}

// Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
func (o OSPolicyAssignmentLabelSetOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v OSPolicyAssignmentLabelSet) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type OSPolicyAssignmentLabelSetArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentLabelSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyAssignmentLabelSet)(nil)).Elem()
}

func (o OSPolicyAssignmentLabelSetArrayOutput) ToOSPolicyAssignmentLabelSetArrayOutput() OSPolicyAssignmentLabelSetArrayOutput {
	return o
}

func (o OSPolicyAssignmentLabelSetArrayOutput) ToOSPolicyAssignmentLabelSetArrayOutputWithContext(ctx context.Context) OSPolicyAssignmentLabelSetArrayOutput {
	return o
}

func (o OSPolicyAssignmentLabelSetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicyAssignmentLabelSet] {
	return pulumix.Output[[]OSPolicyAssignmentLabelSet]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyAssignmentLabelSetArrayOutput) Index(i pulumi.IntInput) OSPolicyAssignmentLabelSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyAssignmentLabelSet {
		return vs[0].([]OSPolicyAssignmentLabelSet)[vs[1].(int)]
	}).(OSPolicyAssignmentLabelSetOutput)
}

// Message representing label set. * A label is a key value pair set for a VM. * A LabelSet is a set of labels. * Labels within a LabelSet are ANDed. In other words, a LabelSet is applicable for a VM only if it matches all the labels in the LabelSet. * Example: A LabelSet with 2 labels: `env=prod` and `type=webserver` will only be applicable for those VMs with both labels present.
type OSPolicyAssignmentLabelSetResponse struct {
	// Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
	Labels map[string]string `pulumi:"labels"`
}

// Message representing label set. * A label is a key value pair set for a VM. * A LabelSet is a set of labels. * Labels within a LabelSet are ANDed. In other words, a LabelSet is applicable for a VM only if it matches all the labels in the LabelSet. * Example: A LabelSet with 2 labels: `env=prod` and `type=webserver` will only be applicable for those VMs with both labels present.
type OSPolicyAssignmentLabelSetResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentLabelSetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentLabelSetResponse)(nil)).Elem()
}

func (o OSPolicyAssignmentLabelSetResponseOutput) ToOSPolicyAssignmentLabelSetResponseOutput() OSPolicyAssignmentLabelSetResponseOutput {
	return o
}

func (o OSPolicyAssignmentLabelSetResponseOutput) ToOSPolicyAssignmentLabelSetResponseOutputWithContext(ctx context.Context) OSPolicyAssignmentLabelSetResponseOutput {
	return o
}

func (o OSPolicyAssignmentLabelSetResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyAssignmentLabelSetResponse] {
	return pulumix.Output[OSPolicyAssignmentLabelSetResponse]{
		OutputState: o.OutputState,
	}
}

// Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.
func (o OSPolicyAssignmentLabelSetResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v OSPolicyAssignmentLabelSetResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type OSPolicyAssignmentLabelSetResponseArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentLabelSetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyAssignmentLabelSetResponse)(nil)).Elem()
}

func (o OSPolicyAssignmentLabelSetResponseArrayOutput) ToOSPolicyAssignmentLabelSetResponseArrayOutput() OSPolicyAssignmentLabelSetResponseArrayOutput {
	return o
}

func (o OSPolicyAssignmentLabelSetResponseArrayOutput) ToOSPolicyAssignmentLabelSetResponseArrayOutputWithContext(ctx context.Context) OSPolicyAssignmentLabelSetResponseArrayOutput {
	return o
}

func (o OSPolicyAssignmentLabelSetResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicyAssignmentLabelSetResponse] {
	return pulumix.Output[[]OSPolicyAssignmentLabelSetResponse]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyAssignmentLabelSetResponseArrayOutput) Index(i pulumi.IntInput) OSPolicyAssignmentLabelSetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyAssignmentLabelSetResponse {
		return vs[0].([]OSPolicyAssignmentLabelSetResponse)[vs[1].(int)]
	}).(OSPolicyAssignmentLabelSetResponseOutput)
}

// Message to configure the rollout at the zonal level for the OS policy assignment.
type OSPolicyAssignmentRollout struct {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment.
	DisruptionBudget FixedOrPercent `pulumi:"disruptionBudget"`
	// This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.
	MinWaitDuration string `pulumi:"minWaitDuration"`
}

// OSPolicyAssignmentRolloutInput is an input type that accepts OSPolicyAssignmentRolloutArgs and OSPolicyAssignmentRolloutOutput values.
// You can construct a concrete instance of `OSPolicyAssignmentRolloutInput` via:
//
//	OSPolicyAssignmentRolloutArgs{...}
type OSPolicyAssignmentRolloutInput interface {
	pulumi.Input

	ToOSPolicyAssignmentRolloutOutput() OSPolicyAssignmentRolloutOutput
	ToOSPolicyAssignmentRolloutOutputWithContext(context.Context) OSPolicyAssignmentRolloutOutput
}

// Message to configure the rollout at the zonal level for the OS policy assignment.
type OSPolicyAssignmentRolloutArgs struct {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment.
	DisruptionBudget FixedOrPercentInput `pulumi:"disruptionBudget"`
	// This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.
	MinWaitDuration pulumi.StringInput `pulumi:"minWaitDuration"`
}

func (OSPolicyAssignmentRolloutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentRollout)(nil)).Elem()
}

func (i OSPolicyAssignmentRolloutArgs) ToOSPolicyAssignmentRolloutOutput() OSPolicyAssignmentRolloutOutput {
	return i.ToOSPolicyAssignmentRolloutOutputWithContext(context.Background())
}

func (i OSPolicyAssignmentRolloutArgs) ToOSPolicyAssignmentRolloutOutputWithContext(ctx context.Context) OSPolicyAssignmentRolloutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyAssignmentRolloutOutput)
}

func (i OSPolicyAssignmentRolloutArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyAssignmentRollout] {
	return pulumix.Output[OSPolicyAssignmentRollout]{
		OutputState: i.ToOSPolicyAssignmentRolloutOutputWithContext(ctx).OutputState,
	}
}

// Message to configure the rollout at the zonal level for the OS policy assignment.
type OSPolicyAssignmentRolloutOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentRolloutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentRollout)(nil)).Elem()
}

func (o OSPolicyAssignmentRolloutOutput) ToOSPolicyAssignmentRolloutOutput() OSPolicyAssignmentRolloutOutput {
	return o
}

func (o OSPolicyAssignmentRolloutOutput) ToOSPolicyAssignmentRolloutOutputWithContext(ctx context.Context) OSPolicyAssignmentRolloutOutput {
	return o
}

func (o OSPolicyAssignmentRolloutOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyAssignmentRollout] {
	return pulumix.Output[OSPolicyAssignmentRollout]{
		OutputState: o.OutputState,
	}
}

// The maximum number (or percentage) of VMs per zone to disrupt at any given moment.
func (o OSPolicyAssignmentRolloutOutput) DisruptionBudget() FixedOrPercentOutput {
	return o.ApplyT(func(v OSPolicyAssignmentRollout) FixedOrPercent { return v.DisruptionBudget }).(FixedOrPercentOutput)
}

// This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.
func (o OSPolicyAssignmentRolloutOutput) MinWaitDuration() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyAssignmentRollout) string { return v.MinWaitDuration }).(pulumi.StringOutput)
}

// Message to configure the rollout at the zonal level for the OS policy assignment.
type OSPolicyAssignmentRolloutResponse struct {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment.
	DisruptionBudget FixedOrPercentResponse `pulumi:"disruptionBudget"`
	// This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.
	MinWaitDuration string `pulumi:"minWaitDuration"`
}

// Message to configure the rollout at the zonal level for the OS policy assignment.
type OSPolicyAssignmentRolloutResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyAssignmentRolloutResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyAssignmentRolloutResponse)(nil)).Elem()
}

func (o OSPolicyAssignmentRolloutResponseOutput) ToOSPolicyAssignmentRolloutResponseOutput() OSPolicyAssignmentRolloutResponseOutput {
	return o
}

func (o OSPolicyAssignmentRolloutResponseOutput) ToOSPolicyAssignmentRolloutResponseOutputWithContext(ctx context.Context) OSPolicyAssignmentRolloutResponseOutput {
	return o
}

func (o OSPolicyAssignmentRolloutResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyAssignmentRolloutResponse] {
	return pulumix.Output[OSPolicyAssignmentRolloutResponse]{
		OutputState: o.OutputState,
	}
}

// The maximum number (or percentage) of VMs per zone to disrupt at any given moment.
func (o OSPolicyAssignmentRolloutResponseOutput) DisruptionBudget() FixedOrPercentResponseOutput {
	return o.ApplyT(func(v OSPolicyAssignmentRolloutResponse) FixedOrPercentResponse { return v.DisruptionBudget }).(FixedOrPercentResponseOutput)
}

// This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.
func (o OSPolicyAssignmentRolloutResponseOutput) MinWaitDuration() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyAssignmentRolloutResponse) string { return v.MinWaitDuration }).(pulumi.StringOutput)
}

// Filtering criteria to select VMs based on inventory details.
type OSPolicyInventoryFilter struct {
	// The OS short name
	OsShortName string `pulumi:"osShortName"`
	// The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions.
	OsVersion *string `pulumi:"osVersion"`
}

// OSPolicyInventoryFilterInput is an input type that accepts OSPolicyInventoryFilterArgs and OSPolicyInventoryFilterOutput values.
// You can construct a concrete instance of `OSPolicyInventoryFilterInput` via:
//
//	OSPolicyInventoryFilterArgs{...}
type OSPolicyInventoryFilterInput interface {
	pulumi.Input

	ToOSPolicyInventoryFilterOutput() OSPolicyInventoryFilterOutput
	ToOSPolicyInventoryFilterOutputWithContext(context.Context) OSPolicyInventoryFilterOutput
}

// Filtering criteria to select VMs based on inventory details.
type OSPolicyInventoryFilterArgs struct {
	// The OS short name
	OsShortName pulumi.StringInput `pulumi:"osShortName"`
	// The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions.
	OsVersion pulumi.StringPtrInput `pulumi:"osVersion"`
}

func (OSPolicyInventoryFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyInventoryFilter)(nil)).Elem()
}

func (i OSPolicyInventoryFilterArgs) ToOSPolicyInventoryFilterOutput() OSPolicyInventoryFilterOutput {
	return i.ToOSPolicyInventoryFilterOutputWithContext(context.Background())
}

func (i OSPolicyInventoryFilterArgs) ToOSPolicyInventoryFilterOutputWithContext(ctx context.Context) OSPolicyInventoryFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyInventoryFilterOutput)
}

func (i OSPolicyInventoryFilterArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyInventoryFilter] {
	return pulumix.Output[OSPolicyInventoryFilter]{
		OutputState: i.ToOSPolicyInventoryFilterOutputWithContext(ctx).OutputState,
	}
}

// OSPolicyInventoryFilterArrayInput is an input type that accepts OSPolicyInventoryFilterArray and OSPolicyInventoryFilterArrayOutput values.
// You can construct a concrete instance of `OSPolicyInventoryFilterArrayInput` via:
//
//	OSPolicyInventoryFilterArray{ OSPolicyInventoryFilterArgs{...} }
type OSPolicyInventoryFilterArrayInput interface {
	pulumi.Input

	ToOSPolicyInventoryFilterArrayOutput() OSPolicyInventoryFilterArrayOutput
	ToOSPolicyInventoryFilterArrayOutputWithContext(context.Context) OSPolicyInventoryFilterArrayOutput
}

type OSPolicyInventoryFilterArray []OSPolicyInventoryFilterInput

func (OSPolicyInventoryFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyInventoryFilter)(nil)).Elem()
}

func (i OSPolicyInventoryFilterArray) ToOSPolicyInventoryFilterArrayOutput() OSPolicyInventoryFilterArrayOutput {
	return i.ToOSPolicyInventoryFilterArrayOutputWithContext(context.Background())
}

func (i OSPolicyInventoryFilterArray) ToOSPolicyInventoryFilterArrayOutputWithContext(ctx context.Context) OSPolicyInventoryFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyInventoryFilterArrayOutput)
}

func (i OSPolicyInventoryFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicyInventoryFilter] {
	return pulumix.Output[[]OSPolicyInventoryFilter]{
		OutputState: i.ToOSPolicyInventoryFilterArrayOutputWithContext(ctx).OutputState,
	}
}

// Filtering criteria to select VMs based on inventory details.
type OSPolicyInventoryFilterOutput struct{ *pulumi.OutputState }

func (OSPolicyInventoryFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyInventoryFilter)(nil)).Elem()
}

func (o OSPolicyInventoryFilterOutput) ToOSPolicyInventoryFilterOutput() OSPolicyInventoryFilterOutput {
	return o
}

func (o OSPolicyInventoryFilterOutput) ToOSPolicyInventoryFilterOutputWithContext(ctx context.Context) OSPolicyInventoryFilterOutput {
	return o
}

func (o OSPolicyInventoryFilterOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyInventoryFilter] {
	return pulumix.Output[OSPolicyInventoryFilter]{
		OutputState: o.OutputState,
	}
}

// The OS short name
func (o OSPolicyInventoryFilterOutput) OsShortName() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyInventoryFilter) string { return v.OsShortName }).(pulumi.StringOutput)
}

// The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions.
func (o OSPolicyInventoryFilterOutput) OsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyInventoryFilter) *string { return v.OsVersion }).(pulumi.StringPtrOutput)
}

type OSPolicyInventoryFilterArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyInventoryFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyInventoryFilter)(nil)).Elem()
}

func (o OSPolicyInventoryFilterArrayOutput) ToOSPolicyInventoryFilterArrayOutput() OSPolicyInventoryFilterArrayOutput {
	return o
}

func (o OSPolicyInventoryFilterArrayOutput) ToOSPolicyInventoryFilterArrayOutputWithContext(ctx context.Context) OSPolicyInventoryFilterArrayOutput {
	return o
}

func (o OSPolicyInventoryFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicyInventoryFilter] {
	return pulumix.Output[[]OSPolicyInventoryFilter]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyInventoryFilterArrayOutput) Index(i pulumi.IntInput) OSPolicyInventoryFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyInventoryFilter {
		return vs[0].([]OSPolicyInventoryFilter)[vs[1].(int)]
	}).(OSPolicyInventoryFilterOutput)
}

// Filtering criteria to select VMs based on inventory details.
type OSPolicyInventoryFilterResponse struct {
	// The OS short name
	OsShortName string `pulumi:"osShortName"`
	// The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions.
	OsVersion string `pulumi:"osVersion"`
}

// Filtering criteria to select VMs based on inventory details.
type OSPolicyInventoryFilterResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyInventoryFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyInventoryFilterResponse)(nil)).Elem()
}

func (o OSPolicyInventoryFilterResponseOutput) ToOSPolicyInventoryFilterResponseOutput() OSPolicyInventoryFilterResponseOutput {
	return o
}

func (o OSPolicyInventoryFilterResponseOutput) ToOSPolicyInventoryFilterResponseOutputWithContext(ctx context.Context) OSPolicyInventoryFilterResponseOutput {
	return o
}

func (o OSPolicyInventoryFilterResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyInventoryFilterResponse] {
	return pulumix.Output[OSPolicyInventoryFilterResponse]{
		OutputState: o.OutputState,
	}
}

// The OS short name
func (o OSPolicyInventoryFilterResponseOutput) OsShortName() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyInventoryFilterResponse) string { return v.OsShortName }).(pulumi.StringOutput)
}

// The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions.
func (o OSPolicyInventoryFilterResponseOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyInventoryFilterResponse) string { return v.OsVersion }).(pulumi.StringOutput)
}

type OSPolicyInventoryFilterResponseArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyInventoryFilterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyInventoryFilterResponse)(nil)).Elem()
}

func (o OSPolicyInventoryFilterResponseArrayOutput) ToOSPolicyInventoryFilterResponseArrayOutput() OSPolicyInventoryFilterResponseArrayOutput {
	return o
}

func (o OSPolicyInventoryFilterResponseArrayOutput) ToOSPolicyInventoryFilterResponseArrayOutputWithContext(ctx context.Context) OSPolicyInventoryFilterResponseArrayOutput {
	return o
}

func (o OSPolicyInventoryFilterResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicyInventoryFilterResponse] {
	return pulumix.Output[[]OSPolicyInventoryFilterResponse]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyInventoryFilterResponseArrayOutput) Index(i pulumi.IntInput) OSPolicyInventoryFilterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyInventoryFilterResponse {
		return vs[0].([]OSPolicyInventoryFilterResponse)[vs[1].(int)]
	}).(OSPolicyInventoryFilterResponseOutput)
}

// An OS policy resource is used to define the desired state configuration and provides a specific functionality like installing/removing packages, executing a script etc. The system ensures that resources are always in their desired state by taking necessary actions if they have drifted from their desired state.
type OSPolicyResource struct {
	// Exec resource
	Exec *OSPolicyResourceExecResource `pulumi:"exec"`
	// File resource
	File *OSPolicyResourceFileResource `pulumi:"file"`
	// The id of the resource with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the OS policy.
	Id string `pulumi:"id"`
	// Package resource
	Pkg *OSPolicyResourcePackageResource `pulumi:"pkg"`
	// Package repository resource
	Repository *OSPolicyResourceRepositoryResource `pulumi:"repository"`
}

// OSPolicyResourceInput is an input type that accepts OSPolicyResourceArgs and OSPolicyResourceOutput values.
// You can construct a concrete instance of `OSPolicyResourceInput` via:
//
//	OSPolicyResourceArgs{...}
type OSPolicyResourceInput interface {
	pulumi.Input

	ToOSPolicyResourceOutput() OSPolicyResourceOutput
	ToOSPolicyResourceOutputWithContext(context.Context) OSPolicyResourceOutput
}

// An OS policy resource is used to define the desired state configuration and provides a specific functionality like installing/removing packages, executing a script etc. The system ensures that resources are always in their desired state by taking necessary actions if they have drifted from their desired state.
type OSPolicyResourceArgs struct {
	// Exec resource
	Exec OSPolicyResourceExecResourcePtrInput `pulumi:"exec"`
	// File resource
	File OSPolicyResourceFileResourcePtrInput `pulumi:"file"`
	// The id of the resource with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the OS policy.
	Id pulumi.StringInput `pulumi:"id"`
	// Package resource
	Pkg OSPolicyResourcePackageResourcePtrInput `pulumi:"pkg"`
	// Package repository resource
	Repository OSPolicyResourceRepositoryResourcePtrInput `pulumi:"repository"`
}

func (OSPolicyResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResource)(nil)).Elem()
}

func (i OSPolicyResourceArgs) ToOSPolicyResourceOutput() OSPolicyResourceOutput {
	return i.ToOSPolicyResourceOutputWithContext(context.Background())
}

func (i OSPolicyResourceArgs) ToOSPolicyResourceOutputWithContext(ctx context.Context) OSPolicyResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceOutput)
}

func (i OSPolicyResourceArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResource] {
	return pulumix.Output[OSPolicyResource]{
		OutputState: i.ToOSPolicyResourceOutputWithContext(ctx).OutputState,
	}
}

// OSPolicyResourceArrayInput is an input type that accepts OSPolicyResourceArray and OSPolicyResourceArrayOutput values.
// You can construct a concrete instance of `OSPolicyResourceArrayInput` via:
//
//	OSPolicyResourceArray{ OSPolicyResourceArgs{...} }
type OSPolicyResourceArrayInput interface {
	pulumi.Input

	ToOSPolicyResourceArrayOutput() OSPolicyResourceArrayOutput
	ToOSPolicyResourceArrayOutputWithContext(context.Context) OSPolicyResourceArrayOutput
}

type OSPolicyResourceArray []OSPolicyResourceInput

func (OSPolicyResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResource)(nil)).Elem()
}

func (i OSPolicyResourceArray) ToOSPolicyResourceArrayOutput() OSPolicyResourceArrayOutput {
	return i.ToOSPolicyResourceArrayOutputWithContext(context.Background())
}

func (i OSPolicyResourceArray) ToOSPolicyResourceArrayOutputWithContext(ctx context.Context) OSPolicyResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceArrayOutput)
}

func (i OSPolicyResourceArray) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicyResource] {
	return pulumix.Output[[]OSPolicyResource]{
		OutputState: i.ToOSPolicyResourceArrayOutputWithContext(ctx).OutputState,
	}
}

// An OS policy resource is used to define the desired state configuration and provides a specific functionality like installing/removing packages, executing a script etc. The system ensures that resources are always in their desired state by taking necessary actions if they have drifted from their desired state.
type OSPolicyResourceOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResource)(nil)).Elem()
}

func (o OSPolicyResourceOutput) ToOSPolicyResourceOutput() OSPolicyResourceOutput {
	return o
}

func (o OSPolicyResourceOutput) ToOSPolicyResourceOutputWithContext(ctx context.Context) OSPolicyResourceOutput {
	return o
}

func (o OSPolicyResourceOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResource] {
	return pulumix.Output[OSPolicyResource]{
		OutputState: o.OutputState,
	}
}

// Exec resource
func (o OSPolicyResourceOutput) Exec() OSPolicyResourceExecResourcePtrOutput {
	return o.ApplyT(func(v OSPolicyResource) *OSPolicyResourceExecResource { return v.Exec }).(OSPolicyResourceExecResourcePtrOutput)
}

// File resource
func (o OSPolicyResourceOutput) File() OSPolicyResourceFileResourcePtrOutput {
	return o.ApplyT(func(v OSPolicyResource) *OSPolicyResourceFileResource { return v.File }).(OSPolicyResourceFileResourcePtrOutput)
}

// The id of the resource with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the OS policy.
func (o OSPolicyResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResource) string { return v.Id }).(pulumi.StringOutput)
}

// Package resource
func (o OSPolicyResourceOutput) Pkg() OSPolicyResourcePackageResourcePtrOutput {
	return o.ApplyT(func(v OSPolicyResource) *OSPolicyResourcePackageResource { return v.Pkg }).(OSPolicyResourcePackageResourcePtrOutput)
}

// Package repository resource
func (o OSPolicyResourceOutput) Repository() OSPolicyResourceRepositoryResourcePtrOutput {
	return o.ApplyT(func(v OSPolicyResource) *OSPolicyResourceRepositoryResource { return v.Repository }).(OSPolicyResourceRepositoryResourcePtrOutput)
}

type OSPolicyResourceArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResource)(nil)).Elem()
}

func (o OSPolicyResourceArrayOutput) ToOSPolicyResourceArrayOutput() OSPolicyResourceArrayOutput {
	return o
}

func (o OSPolicyResourceArrayOutput) ToOSPolicyResourceArrayOutputWithContext(ctx context.Context) OSPolicyResourceArrayOutput {
	return o
}

func (o OSPolicyResourceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicyResource] {
	return pulumix.Output[[]OSPolicyResource]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceArrayOutput) Index(i pulumi.IntInput) OSPolicyResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyResource {
		return vs[0].([]OSPolicyResource)[vs[1].(int)]
	}).(OSPolicyResourceOutput)
}

// A resource that allows executing scripts on the VM. The `ExecResource` has 2 stages: `validate` and `enforce` and both stages accept a script as an argument to execute. When the `ExecResource` is applied by the agent, it first executes the script in the `validate` stage. The `validate` stage can signal that the `ExecResource` is already in the desired state by returning an exit code of `100`. If the `ExecResource` is not in the desired state, it should return an exit code of `101`. Any other exit code returned by this stage is considered an error. If the `ExecResource` is not in the desired state based on the exit code from the `validate` stage, the agent proceeds to execute the script from the `enforce` stage. If the `ExecResource` is already in the desired state, the `enforce` stage will not be run. Similar to `validate` stage, the `enforce` stage should return an exit code of `100` to indicate that the resource in now in its desired state. Any other exit code is considered an error. NOTE: An exit code of `100` was chosen over `0` (and `101` vs `1`) to have an explicit indicator of `in desired state`, `not in desired state` and errors. Because, for example, Powershell will always return an exit code of `0` unless an `exit` statement is provided in the script. So, for reasons of consistency and being explicit, exit codes `100` and `101` were chosen.
type OSPolicyResourceExecResource struct {
	// What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce.
	Enforce *OSPolicyResourceExecResourceExec `pulumi:"enforce"`
	// What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate.
	Validate OSPolicyResourceExecResourceExec `pulumi:"validate"`
}

// OSPolicyResourceExecResourceInput is an input type that accepts OSPolicyResourceExecResourceArgs and OSPolicyResourceExecResourceOutput values.
// You can construct a concrete instance of `OSPolicyResourceExecResourceInput` via:
//
//	OSPolicyResourceExecResourceArgs{...}
type OSPolicyResourceExecResourceInput interface {
	pulumi.Input

	ToOSPolicyResourceExecResourceOutput() OSPolicyResourceExecResourceOutput
	ToOSPolicyResourceExecResourceOutputWithContext(context.Context) OSPolicyResourceExecResourceOutput
}

// A resource that allows executing scripts on the VM. The `ExecResource` has 2 stages: `validate` and `enforce` and both stages accept a script as an argument to execute. When the `ExecResource` is applied by the agent, it first executes the script in the `validate` stage. The `validate` stage can signal that the `ExecResource` is already in the desired state by returning an exit code of `100`. If the `ExecResource` is not in the desired state, it should return an exit code of `101`. Any other exit code returned by this stage is considered an error. If the `ExecResource` is not in the desired state based on the exit code from the `validate` stage, the agent proceeds to execute the script from the `enforce` stage. If the `ExecResource` is already in the desired state, the `enforce` stage will not be run. Similar to `validate` stage, the `enforce` stage should return an exit code of `100` to indicate that the resource in now in its desired state. Any other exit code is considered an error. NOTE: An exit code of `100` was chosen over `0` (and `101` vs `1`) to have an explicit indicator of `in desired state`, `not in desired state` and errors. Because, for example, Powershell will always return an exit code of `0` unless an `exit` statement is provided in the script. So, for reasons of consistency and being explicit, exit codes `100` and `101` were chosen.
type OSPolicyResourceExecResourceArgs struct {
	// What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce.
	Enforce OSPolicyResourceExecResourceExecPtrInput `pulumi:"enforce"`
	// What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate.
	Validate OSPolicyResourceExecResourceExecInput `pulumi:"validate"`
}

func (OSPolicyResourceExecResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceExecResource)(nil)).Elem()
}

func (i OSPolicyResourceExecResourceArgs) ToOSPolicyResourceExecResourceOutput() OSPolicyResourceExecResourceOutput {
	return i.ToOSPolicyResourceExecResourceOutputWithContext(context.Background())
}

func (i OSPolicyResourceExecResourceArgs) ToOSPolicyResourceExecResourceOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceExecResourceOutput)
}

func (i OSPolicyResourceExecResourceArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceExecResource] {
	return pulumix.Output[OSPolicyResourceExecResource]{
		OutputState: i.ToOSPolicyResourceExecResourceOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourceExecResourceArgs) ToOSPolicyResourceExecResourcePtrOutput() OSPolicyResourceExecResourcePtrOutput {
	return i.ToOSPolicyResourceExecResourcePtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceExecResourceArgs) ToOSPolicyResourceExecResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceExecResourceOutput).ToOSPolicyResourceExecResourcePtrOutputWithContext(ctx)
}

// OSPolicyResourceExecResourcePtrInput is an input type that accepts OSPolicyResourceExecResourceArgs, OSPolicyResourceExecResourcePtr and OSPolicyResourceExecResourcePtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceExecResourcePtrInput` via:
//
//	        OSPolicyResourceExecResourceArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourceExecResourcePtrInput interface {
	pulumi.Input

	ToOSPolicyResourceExecResourcePtrOutput() OSPolicyResourceExecResourcePtrOutput
	ToOSPolicyResourceExecResourcePtrOutputWithContext(context.Context) OSPolicyResourceExecResourcePtrOutput
}

type ospolicyResourceExecResourcePtrType OSPolicyResourceExecResourceArgs

func OSPolicyResourceExecResourcePtr(v *OSPolicyResourceExecResourceArgs) OSPolicyResourceExecResourcePtrInput {
	return (*ospolicyResourceExecResourcePtrType)(v)
}

func (*ospolicyResourceExecResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceExecResource)(nil)).Elem()
}

func (i *ospolicyResourceExecResourcePtrType) ToOSPolicyResourceExecResourcePtrOutput() OSPolicyResourceExecResourcePtrOutput {
	return i.ToOSPolicyResourceExecResourcePtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceExecResourcePtrType) ToOSPolicyResourceExecResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceExecResourcePtrOutput)
}

func (i *ospolicyResourceExecResourcePtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceExecResource] {
	return pulumix.Output[*OSPolicyResourceExecResource]{
		OutputState: i.ToOSPolicyResourceExecResourcePtrOutputWithContext(ctx).OutputState,
	}
}

// A resource that allows executing scripts on the VM. The `ExecResource` has 2 stages: `validate` and `enforce` and both stages accept a script as an argument to execute. When the `ExecResource` is applied by the agent, it first executes the script in the `validate` stage. The `validate` stage can signal that the `ExecResource` is already in the desired state by returning an exit code of `100`. If the `ExecResource` is not in the desired state, it should return an exit code of `101`. Any other exit code returned by this stage is considered an error. If the `ExecResource` is not in the desired state based on the exit code from the `validate` stage, the agent proceeds to execute the script from the `enforce` stage. If the `ExecResource` is already in the desired state, the `enforce` stage will not be run. Similar to `validate` stage, the `enforce` stage should return an exit code of `100` to indicate that the resource in now in its desired state. Any other exit code is considered an error. NOTE: An exit code of `100` was chosen over `0` (and `101` vs `1`) to have an explicit indicator of `in desired state`, `not in desired state` and errors. Because, for example, Powershell will always return an exit code of `0` unless an `exit` statement is provided in the script. So, for reasons of consistency and being explicit, exit codes `100` and `101` were chosen.
type OSPolicyResourceExecResourceOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceExecResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceExecResource)(nil)).Elem()
}

func (o OSPolicyResourceExecResourceOutput) ToOSPolicyResourceExecResourceOutput() OSPolicyResourceExecResourceOutput {
	return o
}

func (o OSPolicyResourceExecResourceOutput) ToOSPolicyResourceExecResourceOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceOutput {
	return o
}

func (o OSPolicyResourceExecResourceOutput) ToOSPolicyResourceExecResourcePtrOutput() OSPolicyResourceExecResourcePtrOutput {
	return o.ToOSPolicyResourceExecResourcePtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceExecResourceOutput) ToOSPolicyResourceExecResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourceExecResource) *OSPolicyResourceExecResource {
		return &v
	}).(OSPolicyResourceExecResourcePtrOutput)
}

func (o OSPolicyResourceExecResourceOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceExecResource] {
	return pulumix.Output[OSPolicyResourceExecResource]{
		OutputState: o.OutputState,
	}
}

// What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce.
func (o OSPolicyResourceExecResourceOutput) Enforce() OSPolicyResourceExecResourceExecPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResource) *OSPolicyResourceExecResourceExec { return v.Enforce }).(OSPolicyResourceExecResourceExecPtrOutput)
}

// What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate.
func (o OSPolicyResourceExecResourceOutput) Validate() OSPolicyResourceExecResourceExecOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResource) OSPolicyResourceExecResourceExec { return v.Validate }).(OSPolicyResourceExecResourceExecOutput)
}

type OSPolicyResourceExecResourcePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceExecResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceExecResource)(nil)).Elem()
}

func (o OSPolicyResourceExecResourcePtrOutput) ToOSPolicyResourceExecResourcePtrOutput() OSPolicyResourceExecResourcePtrOutput {
	return o
}

func (o OSPolicyResourceExecResourcePtrOutput) ToOSPolicyResourceExecResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourcePtrOutput {
	return o
}

func (o OSPolicyResourceExecResourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceExecResource] {
	return pulumix.Output[*OSPolicyResourceExecResource]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceExecResourcePtrOutput) Elem() OSPolicyResourceExecResourceOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResource) OSPolicyResourceExecResource {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourceExecResource
		return ret
	}).(OSPolicyResourceExecResourceOutput)
}

// What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce.
func (o OSPolicyResourceExecResourcePtrOutput) Enforce() OSPolicyResourceExecResourceExecPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResource) *OSPolicyResourceExecResourceExec {
		if v == nil {
			return nil
		}
		return v.Enforce
	}).(OSPolicyResourceExecResourceExecPtrOutput)
}

// What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate.
func (o OSPolicyResourceExecResourcePtrOutput) Validate() OSPolicyResourceExecResourceExecPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResource) *OSPolicyResourceExecResourceExec {
		if v == nil {
			return nil
		}
		return &v.Validate
	}).(OSPolicyResourceExecResourceExecPtrOutput)
}

// A file or script to execute.
type OSPolicyResourceExecResourceExec struct {
	// Optional arguments to pass to the source during execution.
	Args []string `pulumi:"args"`
	// A remote or local file.
	File *OSPolicyResourceFile `pulumi:"file"`
	// The script interpreter to use.
	Interpreter OSPolicyResourceExecResourceExecInterpreter `pulumi:"interpreter"`
	// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
	OutputFilePath *string `pulumi:"outputFilePath"`
	// An inline script. The size of the script is limited to 32KiB.
	Script *string `pulumi:"script"`
}

// OSPolicyResourceExecResourceExecInput is an input type that accepts OSPolicyResourceExecResourceExecArgs and OSPolicyResourceExecResourceExecOutput values.
// You can construct a concrete instance of `OSPolicyResourceExecResourceExecInput` via:
//
//	OSPolicyResourceExecResourceExecArgs{...}
type OSPolicyResourceExecResourceExecInput interface {
	pulumi.Input

	ToOSPolicyResourceExecResourceExecOutput() OSPolicyResourceExecResourceExecOutput
	ToOSPolicyResourceExecResourceExecOutputWithContext(context.Context) OSPolicyResourceExecResourceExecOutput
}

// A file or script to execute.
type OSPolicyResourceExecResourceExecArgs struct {
	// Optional arguments to pass to the source during execution.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// A remote or local file.
	File OSPolicyResourceFilePtrInput `pulumi:"file"`
	// The script interpreter to use.
	Interpreter OSPolicyResourceExecResourceExecInterpreterInput `pulumi:"interpreter"`
	// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
	OutputFilePath pulumi.StringPtrInput `pulumi:"outputFilePath"`
	// An inline script. The size of the script is limited to 32KiB.
	Script pulumi.StringPtrInput `pulumi:"script"`
}

func (OSPolicyResourceExecResourceExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceExecResourceExec)(nil)).Elem()
}

func (i OSPolicyResourceExecResourceExecArgs) ToOSPolicyResourceExecResourceExecOutput() OSPolicyResourceExecResourceExecOutput {
	return i.ToOSPolicyResourceExecResourceExecOutputWithContext(context.Background())
}

func (i OSPolicyResourceExecResourceExecArgs) ToOSPolicyResourceExecResourceExecOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceExecResourceExecOutput)
}

func (i OSPolicyResourceExecResourceExecArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceExecResourceExec] {
	return pulumix.Output[OSPolicyResourceExecResourceExec]{
		OutputState: i.ToOSPolicyResourceExecResourceExecOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourceExecResourceExecArgs) ToOSPolicyResourceExecResourceExecPtrOutput() OSPolicyResourceExecResourceExecPtrOutput {
	return i.ToOSPolicyResourceExecResourceExecPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceExecResourceExecArgs) ToOSPolicyResourceExecResourceExecPtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceExecResourceExecOutput).ToOSPolicyResourceExecResourceExecPtrOutputWithContext(ctx)
}

// OSPolicyResourceExecResourceExecPtrInput is an input type that accepts OSPolicyResourceExecResourceExecArgs, OSPolicyResourceExecResourceExecPtr and OSPolicyResourceExecResourceExecPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceExecResourceExecPtrInput` via:
//
//	        OSPolicyResourceExecResourceExecArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourceExecResourceExecPtrInput interface {
	pulumi.Input

	ToOSPolicyResourceExecResourceExecPtrOutput() OSPolicyResourceExecResourceExecPtrOutput
	ToOSPolicyResourceExecResourceExecPtrOutputWithContext(context.Context) OSPolicyResourceExecResourceExecPtrOutput
}

type ospolicyResourceExecResourceExecPtrType OSPolicyResourceExecResourceExecArgs

func OSPolicyResourceExecResourceExecPtr(v *OSPolicyResourceExecResourceExecArgs) OSPolicyResourceExecResourceExecPtrInput {
	return (*ospolicyResourceExecResourceExecPtrType)(v)
}

func (*ospolicyResourceExecResourceExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceExecResourceExec)(nil)).Elem()
}

func (i *ospolicyResourceExecResourceExecPtrType) ToOSPolicyResourceExecResourceExecPtrOutput() OSPolicyResourceExecResourceExecPtrOutput {
	return i.ToOSPolicyResourceExecResourceExecPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceExecResourceExecPtrType) ToOSPolicyResourceExecResourceExecPtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceExecResourceExecPtrOutput)
}

func (i *ospolicyResourceExecResourceExecPtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceExecResourceExec] {
	return pulumix.Output[*OSPolicyResourceExecResourceExec]{
		OutputState: i.ToOSPolicyResourceExecResourceExecPtrOutputWithContext(ctx).OutputState,
	}
}

// A file or script to execute.
type OSPolicyResourceExecResourceExecOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceExecResourceExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceExecResourceExec)(nil)).Elem()
}

func (o OSPolicyResourceExecResourceExecOutput) ToOSPolicyResourceExecResourceExecOutput() OSPolicyResourceExecResourceExecOutput {
	return o
}

func (o OSPolicyResourceExecResourceExecOutput) ToOSPolicyResourceExecResourceExecOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecOutput {
	return o
}

func (o OSPolicyResourceExecResourceExecOutput) ToOSPolicyResourceExecResourceExecPtrOutput() OSPolicyResourceExecResourceExecPtrOutput {
	return o.ToOSPolicyResourceExecResourceExecPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceExecResourceExecOutput) ToOSPolicyResourceExecResourceExecPtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourceExecResourceExec) *OSPolicyResourceExecResourceExec {
		return &v
	}).(OSPolicyResourceExecResourceExecPtrOutput)
}

func (o OSPolicyResourceExecResourceExecOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceExecResourceExec] {
	return pulumix.Output[OSPolicyResourceExecResourceExec]{
		OutputState: o.OutputState,
	}
}

// Optional arguments to pass to the source during execution.
func (o OSPolicyResourceExecResourceExecOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExec) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// A remote or local file.
func (o OSPolicyResourceExecResourceExecOutput) File() OSPolicyResourceFilePtrOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExec) *OSPolicyResourceFile { return v.File }).(OSPolicyResourceFilePtrOutput)
}

// The script interpreter to use.
func (o OSPolicyResourceExecResourceExecOutput) Interpreter() OSPolicyResourceExecResourceExecInterpreterOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExec) OSPolicyResourceExecResourceExecInterpreter {
		return v.Interpreter
	}).(OSPolicyResourceExecResourceExecInterpreterOutput)
}

// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
func (o OSPolicyResourceExecResourceExecOutput) OutputFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExec) *string { return v.OutputFilePath }).(pulumi.StringPtrOutput)
}

// An inline script. The size of the script is limited to 32KiB.
func (o OSPolicyResourceExecResourceExecOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExec) *string { return v.Script }).(pulumi.StringPtrOutput)
}

type OSPolicyResourceExecResourceExecPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceExecResourceExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceExecResourceExec)(nil)).Elem()
}

func (o OSPolicyResourceExecResourceExecPtrOutput) ToOSPolicyResourceExecResourceExecPtrOutput() OSPolicyResourceExecResourceExecPtrOutput {
	return o
}

func (o OSPolicyResourceExecResourceExecPtrOutput) ToOSPolicyResourceExecResourceExecPtrOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecPtrOutput {
	return o
}

func (o OSPolicyResourceExecResourceExecPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceExecResourceExec] {
	return pulumix.Output[*OSPolicyResourceExecResourceExec]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceExecResourceExecPtrOutput) Elem() OSPolicyResourceExecResourceExecOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResourceExec) OSPolicyResourceExecResourceExec {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourceExecResourceExec
		return ret
	}).(OSPolicyResourceExecResourceExecOutput)
}

// Optional arguments to pass to the source during execution.
func (o OSPolicyResourceExecResourceExecPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResourceExec) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// A remote or local file.
func (o OSPolicyResourceExecResourceExecPtrOutput) File() OSPolicyResourceFilePtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResourceExec) *OSPolicyResourceFile {
		if v == nil {
			return nil
		}
		return v.File
	}).(OSPolicyResourceFilePtrOutput)
}

// The script interpreter to use.
func (o OSPolicyResourceExecResourceExecPtrOutput) Interpreter() OSPolicyResourceExecResourceExecInterpreterPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResourceExec) *OSPolicyResourceExecResourceExecInterpreter {
		if v == nil {
			return nil
		}
		return &v.Interpreter
	}).(OSPolicyResourceExecResourceExecInterpreterPtrOutput)
}

// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
func (o OSPolicyResourceExecResourceExecPtrOutput) OutputFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResourceExec) *string {
		if v == nil {
			return nil
		}
		return v.OutputFilePath
	}).(pulumi.StringPtrOutput)
}

// An inline script. The size of the script is limited to 32KiB.
func (o OSPolicyResourceExecResourceExecPtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceExecResourceExec) *string {
		if v == nil {
			return nil
		}
		return v.Script
	}).(pulumi.StringPtrOutput)
}

// A file or script to execute.
type OSPolicyResourceExecResourceExecResponse struct {
	// Optional arguments to pass to the source during execution.
	Args []string `pulumi:"args"`
	// A remote or local file.
	File OSPolicyResourceFileResponse `pulumi:"file"`
	// The script interpreter to use.
	Interpreter string `pulumi:"interpreter"`
	// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
	OutputFilePath string `pulumi:"outputFilePath"`
	// An inline script. The size of the script is limited to 32KiB.
	Script string `pulumi:"script"`
}

// A file or script to execute.
type OSPolicyResourceExecResourceExecResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceExecResourceExecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceExecResourceExecResponse)(nil)).Elem()
}

func (o OSPolicyResourceExecResourceExecResponseOutput) ToOSPolicyResourceExecResourceExecResponseOutput() OSPolicyResourceExecResourceExecResponseOutput {
	return o
}

func (o OSPolicyResourceExecResourceExecResponseOutput) ToOSPolicyResourceExecResourceExecResponseOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceExecResponseOutput {
	return o
}

func (o OSPolicyResourceExecResourceExecResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceExecResourceExecResponse] {
	return pulumix.Output[OSPolicyResourceExecResourceExecResponse]{
		OutputState: o.OutputState,
	}
}

// Optional arguments to pass to the source during execution.
func (o OSPolicyResourceExecResourceExecResponseOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExecResponse) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// A remote or local file.
func (o OSPolicyResourceExecResourceExecResponseOutput) File() OSPolicyResourceFileResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExecResponse) OSPolicyResourceFileResponse { return v.File }).(OSPolicyResourceFileResponseOutput)
}

// The script interpreter to use.
func (o OSPolicyResourceExecResourceExecResponseOutput) Interpreter() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExecResponse) string { return v.Interpreter }).(pulumi.StringOutput)
}

// Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.
func (o OSPolicyResourceExecResourceExecResponseOutput) OutputFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExecResponse) string { return v.OutputFilePath }).(pulumi.StringOutput)
}

// An inline script. The size of the script is limited to 32KiB.
func (o OSPolicyResourceExecResourceExecResponseOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceExecResponse) string { return v.Script }).(pulumi.StringOutput)
}

// A resource that allows executing scripts on the VM. The `ExecResource` has 2 stages: `validate` and `enforce` and both stages accept a script as an argument to execute. When the `ExecResource` is applied by the agent, it first executes the script in the `validate` stage. The `validate` stage can signal that the `ExecResource` is already in the desired state by returning an exit code of `100`. If the `ExecResource` is not in the desired state, it should return an exit code of `101`. Any other exit code returned by this stage is considered an error. If the `ExecResource` is not in the desired state based on the exit code from the `validate` stage, the agent proceeds to execute the script from the `enforce` stage. If the `ExecResource` is already in the desired state, the `enforce` stage will not be run. Similar to `validate` stage, the `enforce` stage should return an exit code of `100` to indicate that the resource in now in its desired state. Any other exit code is considered an error. NOTE: An exit code of `100` was chosen over `0` (and `101` vs `1`) to have an explicit indicator of `in desired state`, `not in desired state` and errors. Because, for example, Powershell will always return an exit code of `0` unless an `exit` statement is provided in the script. So, for reasons of consistency and being explicit, exit codes `100` and `101` were chosen.
type OSPolicyResourceExecResourceResponse struct {
	// What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce.
	Enforce OSPolicyResourceExecResourceExecResponse `pulumi:"enforce"`
	// What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate.
	Validate OSPolicyResourceExecResourceExecResponse `pulumi:"validate"`
}

// A resource that allows executing scripts on the VM. The `ExecResource` has 2 stages: `validate` and `enforce` and both stages accept a script as an argument to execute. When the `ExecResource` is applied by the agent, it first executes the script in the `validate` stage. The `validate` stage can signal that the `ExecResource` is already in the desired state by returning an exit code of `100`. If the `ExecResource` is not in the desired state, it should return an exit code of `101`. Any other exit code returned by this stage is considered an error. If the `ExecResource` is not in the desired state based on the exit code from the `validate` stage, the agent proceeds to execute the script from the `enforce` stage. If the `ExecResource` is already in the desired state, the `enforce` stage will not be run. Similar to `validate` stage, the `enforce` stage should return an exit code of `100` to indicate that the resource in now in its desired state. Any other exit code is considered an error. NOTE: An exit code of `100` was chosen over `0` (and `101` vs `1`) to have an explicit indicator of `in desired state`, `not in desired state` and errors. Because, for example, Powershell will always return an exit code of `0` unless an `exit` statement is provided in the script. So, for reasons of consistency and being explicit, exit codes `100` and `101` were chosen.
type OSPolicyResourceExecResourceResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceExecResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceExecResourceResponse)(nil)).Elem()
}

func (o OSPolicyResourceExecResourceResponseOutput) ToOSPolicyResourceExecResourceResponseOutput() OSPolicyResourceExecResourceResponseOutput {
	return o
}

func (o OSPolicyResourceExecResourceResponseOutput) ToOSPolicyResourceExecResourceResponseOutputWithContext(ctx context.Context) OSPolicyResourceExecResourceResponseOutput {
	return o
}

func (o OSPolicyResourceExecResourceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceExecResourceResponse] {
	return pulumix.Output[OSPolicyResourceExecResourceResponse]{
		OutputState: o.OutputState,
	}
}

// What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce.
func (o OSPolicyResourceExecResourceResponseOutput) Enforce() OSPolicyResourceExecResourceExecResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceResponse) OSPolicyResourceExecResourceExecResponse {
		return v.Enforce
	}).(OSPolicyResourceExecResourceExecResponseOutput)
}

// What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate.
func (o OSPolicyResourceExecResourceResponseOutput) Validate() OSPolicyResourceExecResourceExecResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceExecResourceResponse) OSPolicyResourceExecResourceExecResponse {
		return v.Validate
	}).(OSPolicyResourceExecResourceExecResponseOutput)
}

// A remote or local file.
type OSPolicyResourceFile struct {
	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	AllowInsecure *bool `pulumi:"allowInsecure"`
	// A Cloud Storage object.
	Gcs *OSPolicyResourceFileGcs `pulumi:"gcs"`
	// A local path within the VM to use.
	LocalPath *string `pulumi:"localPath"`
	// A generic remote file.
	Remote *OSPolicyResourceFileRemote `pulumi:"remote"`
}

// OSPolicyResourceFileInput is an input type that accepts OSPolicyResourceFileArgs and OSPolicyResourceFileOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileInput` via:
//
//	OSPolicyResourceFileArgs{...}
type OSPolicyResourceFileInput interface {
	pulumi.Input

	ToOSPolicyResourceFileOutput() OSPolicyResourceFileOutput
	ToOSPolicyResourceFileOutputWithContext(context.Context) OSPolicyResourceFileOutput
}

// A remote or local file.
type OSPolicyResourceFileArgs struct {
	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	AllowInsecure pulumi.BoolPtrInput `pulumi:"allowInsecure"`
	// A Cloud Storage object.
	Gcs OSPolicyResourceFileGcsPtrInput `pulumi:"gcs"`
	// A local path within the VM to use.
	LocalPath pulumi.StringPtrInput `pulumi:"localPath"`
	// A generic remote file.
	Remote OSPolicyResourceFileRemotePtrInput `pulumi:"remote"`
}

func (OSPolicyResourceFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFile)(nil)).Elem()
}

func (i OSPolicyResourceFileArgs) ToOSPolicyResourceFileOutput() OSPolicyResourceFileOutput {
	return i.ToOSPolicyResourceFileOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileArgs) ToOSPolicyResourceFileOutputWithContext(ctx context.Context) OSPolicyResourceFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileOutput)
}

func (i OSPolicyResourceFileArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceFile] {
	return pulumix.Output[OSPolicyResourceFile]{
		OutputState: i.ToOSPolicyResourceFileOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourceFileArgs) ToOSPolicyResourceFilePtrOutput() OSPolicyResourceFilePtrOutput {
	return i.ToOSPolicyResourceFilePtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileArgs) ToOSPolicyResourceFilePtrOutputWithContext(ctx context.Context) OSPolicyResourceFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileOutput).ToOSPolicyResourceFilePtrOutputWithContext(ctx)
}

// OSPolicyResourceFilePtrInput is an input type that accepts OSPolicyResourceFileArgs, OSPolicyResourceFilePtr and OSPolicyResourceFilePtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceFilePtrInput` via:
//
//	        OSPolicyResourceFileArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourceFilePtrInput interface {
	pulumi.Input

	ToOSPolicyResourceFilePtrOutput() OSPolicyResourceFilePtrOutput
	ToOSPolicyResourceFilePtrOutputWithContext(context.Context) OSPolicyResourceFilePtrOutput
}

type ospolicyResourceFilePtrType OSPolicyResourceFileArgs

func OSPolicyResourceFilePtr(v *OSPolicyResourceFileArgs) OSPolicyResourceFilePtrInput {
	return (*ospolicyResourceFilePtrType)(v)
}

func (*ospolicyResourceFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFile)(nil)).Elem()
}

func (i *ospolicyResourceFilePtrType) ToOSPolicyResourceFilePtrOutput() OSPolicyResourceFilePtrOutput {
	return i.ToOSPolicyResourceFilePtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceFilePtrType) ToOSPolicyResourceFilePtrOutputWithContext(ctx context.Context) OSPolicyResourceFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFilePtrOutput)
}

func (i *ospolicyResourceFilePtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceFile] {
	return pulumix.Output[*OSPolicyResourceFile]{
		OutputState: i.ToOSPolicyResourceFilePtrOutputWithContext(ctx).OutputState,
	}
}

// A remote or local file.
type OSPolicyResourceFileOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFile)(nil)).Elem()
}

func (o OSPolicyResourceFileOutput) ToOSPolicyResourceFileOutput() OSPolicyResourceFileOutput {
	return o
}

func (o OSPolicyResourceFileOutput) ToOSPolicyResourceFileOutputWithContext(ctx context.Context) OSPolicyResourceFileOutput {
	return o
}

func (o OSPolicyResourceFileOutput) ToOSPolicyResourceFilePtrOutput() OSPolicyResourceFilePtrOutput {
	return o.ToOSPolicyResourceFilePtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceFileOutput) ToOSPolicyResourceFilePtrOutputWithContext(ctx context.Context) OSPolicyResourceFilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourceFile) *OSPolicyResourceFile {
		return &v
	}).(OSPolicyResourceFilePtrOutput)
}

func (o OSPolicyResourceFileOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceFile] {
	return pulumix.Output[OSPolicyResourceFile]{
		OutputState: o.OutputState,
	}
}

// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
func (o OSPolicyResourceFileOutput) AllowInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFile) *bool { return v.AllowInsecure }).(pulumi.BoolPtrOutput)
}

// A Cloud Storage object.
func (o OSPolicyResourceFileOutput) Gcs() OSPolicyResourceFileGcsPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFile) *OSPolicyResourceFileGcs { return v.Gcs }).(OSPolicyResourceFileGcsPtrOutput)
}

// A local path within the VM to use.
func (o OSPolicyResourceFileOutput) LocalPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFile) *string { return v.LocalPath }).(pulumi.StringPtrOutput)
}

// A generic remote file.
func (o OSPolicyResourceFileOutput) Remote() OSPolicyResourceFileRemotePtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFile) *OSPolicyResourceFileRemote { return v.Remote }).(OSPolicyResourceFileRemotePtrOutput)
}

type OSPolicyResourceFilePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFile)(nil)).Elem()
}

func (o OSPolicyResourceFilePtrOutput) ToOSPolicyResourceFilePtrOutput() OSPolicyResourceFilePtrOutput {
	return o
}

func (o OSPolicyResourceFilePtrOutput) ToOSPolicyResourceFilePtrOutputWithContext(ctx context.Context) OSPolicyResourceFilePtrOutput {
	return o
}

func (o OSPolicyResourceFilePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceFile] {
	return pulumix.Output[*OSPolicyResourceFile]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceFilePtrOutput) Elem() OSPolicyResourceFileOutput {
	return o.ApplyT(func(v *OSPolicyResourceFile) OSPolicyResourceFile {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourceFile
		return ret
	}).(OSPolicyResourceFileOutput)
}

// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
func (o OSPolicyResourceFilePtrOutput) AllowInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFile) *bool {
		if v == nil {
			return nil
		}
		return v.AllowInsecure
	}).(pulumi.BoolPtrOutput)
}

// A Cloud Storage object.
func (o OSPolicyResourceFilePtrOutput) Gcs() OSPolicyResourceFileGcsPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFile) *OSPolicyResourceFileGcs {
		if v == nil {
			return nil
		}
		return v.Gcs
	}).(OSPolicyResourceFileGcsPtrOutput)
}

// A local path within the VM to use.
func (o OSPolicyResourceFilePtrOutput) LocalPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFile) *string {
		if v == nil {
			return nil
		}
		return v.LocalPath
	}).(pulumi.StringPtrOutput)
}

// A generic remote file.
func (o OSPolicyResourceFilePtrOutput) Remote() OSPolicyResourceFileRemotePtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFile) *OSPolicyResourceFileRemote {
		if v == nil {
			return nil
		}
		return v.Remote
	}).(OSPolicyResourceFileRemotePtrOutput)
}

// Specifies a file available as a Cloud Storage Object.
type OSPolicyResourceFileGcs struct {
	// Bucket of the Cloud Storage object.
	Bucket string `pulumi:"bucket"`
	// Generation number of the Cloud Storage object.
	Generation *string `pulumi:"generation"`
	// Name of the Cloud Storage object.
	Object string `pulumi:"object"`
}

// OSPolicyResourceFileGcsInput is an input type that accepts OSPolicyResourceFileGcsArgs and OSPolicyResourceFileGcsOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileGcsInput` via:
//
//	OSPolicyResourceFileGcsArgs{...}
type OSPolicyResourceFileGcsInput interface {
	pulumi.Input

	ToOSPolicyResourceFileGcsOutput() OSPolicyResourceFileGcsOutput
	ToOSPolicyResourceFileGcsOutputWithContext(context.Context) OSPolicyResourceFileGcsOutput
}

// Specifies a file available as a Cloud Storage Object.
type OSPolicyResourceFileGcsArgs struct {
	// Bucket of the Cloud Storage object.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// Generation number of the Cloud Storage object.
	Generation pulumi.StringPtrInput `pulumi:"generation"`
	// Name of the Cloud Storage object.
	Object pulumi.StringInput `pulumi:"object"`
}

func (OSPolicyResourceFileGcsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileGcs)(nil)).Elem()
}

func (i OSPolicyResourceFileGcsArgs) ToOSPolicyResourceFileGcsOutput() OSPolicyResourceFileGcsOutput {
	return i.ToOSPolicyResourceFileGcsOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileGcsArgs) ToOSPolicyResourceFileGcsOutputWithContext(ctx context.Context) OSPolicyResourceFileGcsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileGcsOutput)
}

func (i OSPolicyResourceFileGcsArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceFileGcs] {
	return pulumix.Output[OSPolicyResourceFileGcs]{
		OutputState: i.ToOSPolicyResourceFileGcsOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourceFileGcsArgs) ToOSPolicyResourceFileGcsPtrOutput() OSPolicyResourceFileGcsPtrOutput {
	return i.ToOSPolicyResourceFileGcsPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileGcsArgs) ToOSPolicyResourceFileGcsPtrOutputWithContext(ctx context.Context) OSPolicyResourceFileGcsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileGcsOutput).ToOSPolicyResourceFileGcsPtrOutputWithContext(ctx)
}

// OSPolicyResourceFileGcsPtrInput is an input type that accepts OSPolicyResourceFileGcsArgs, OSPolicyResourceFileGcsPtr and OSPolicyResourceFileGcsPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileGcsPtrInput` via:
//
//	        OSPolicyResourceFileGcsArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourceFileGcsPtrInput interface {
	pulumi.Input

	ToOSPolicyResourceFileGcsPtrOutput() OSPolicyResourceFileGcsPtrOutput
	ToOSPolicyResourceFileGcsPtrOutputWithContext(context.Context) OSPolicyResourceFileGcsPtrOutput
}

type ospolicyResourceFileGcsPtrType OSPolicyResourceFileGcsArgs

func OSPolicyResourceFileGcsPtr(v *OSPolicyResourceFileGcsArgs) OSPolicyResourceFileGcsPtrInput {
	return (*ospolicyResourceFileGcsPtrType)(v)
}

func (*ospolicyResourceFileGcsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFileGcs)(nil)).Elem()
}

func (i *ospolicyResourceFileGcsPtrType) ToOSPolicyResourceFileGcsPtrOutput() OSPolicyResourceFileGcsPtrOutput {
	return i.ToOSPolicyResourceFileGcsPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceFileGcsPtrType) ToOSPolicyResourceFileGcsPtrOutputWithContext(ctx context.Context) OSPolicyResourceFileGcsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileGcsPtrOutput)
}

func (i *ospolicyResourceFileGcsPtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceFileGcs] {
	return pulumix.Output[*OSPolicyResourceFileGcs]{
		OutputState: i.ToOSPolicyResourceFileGcsPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies a file available as a Cloud Storage Object.
type OSPolicyResourceFileGcsOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileGcsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileGcs)(nil)).Elem()
}

func (o OSPolicyResourceFileGcsOutput) ToOSPolicyResourceFileGcsOutput() OSPolicyResourceFileGcsOutput {
	return o
}

func (o OSPolicyResourceFileGcsOutput) ToOSPolicyResourceFileGcsOutputWithContext(ctx context.Context) OSPolicyResourceFileGcsOutput {
	return o
}

func (o OSPolicyResourceFileGcsOutput) ToOSPolicyResourceFileGcsPtrOutput() OSPolicyResourceFileGcsPtrOutput {
	return o.ToOSPolicyResourceFileGcsPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceFileGcsOutput) ToOSPolicyResourceFileGcsPtrOutputWithContext(ctx context.Context) OSPolicyResourceFileGcsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourceFileGcs) *OSPolicyResourceFileGcs {
		return &v
	}).(OSPolicyResourceFileGcsPtrOutput)
}

func (o OSPolicyResourceFileGcsOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceFileGcs] {
	return pulumix.Output[OSPolicyResourceFileGcs]{
		OutputState: o.OutputState,
	}
}

// Bucket of the Cloud Storage object.
func (o OSPolicyResourceFileGcsOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileGcs) string { return v.Bucket }).(pulumi.StringOutput)
}

// Generation number of the Cloud Storage object.
func (o OSPolicyResourceFileGcsOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFileGcs) *string { return v.Generation }).(pulumi.StringPtrOutput)
}

// Name of the Cloud Storage object.
func (o OSPolicyResourceFileGcsOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileGcs) string { return v.Object }).(pulumi.StringOutput)
}

type OSPolicyResourceFileGcsPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileGcsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFileGcs)(nil)).Elem()
}

func (o OSPolicyResourceFileGcsPtrOutput) ToOSPolicyResourceFileGcsPtrOutput() OSPolicyResourceFileGcsPtrOutput {
	return o
}

func (o OSPolicyResourceFileGcsPtrOutput) ToOSPolicyResourceFileGcsPtrOutputWithContext(ctx context.Context) OSPolicyResourceFileGcsPtrOutput {
	return o
}

func (o OSPolicyResourceFileGcsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceFileGcs] {
	return pulumix.Output[*OSPolicyResourceFileGcs]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceFileGcsPtrOutput) Elem() OSPolicyResourceFileGcsOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileGcs) OSPolicyResourceFileGcs {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourceFileGcs
		return ret
	}).(OSPolicyResourceFileGcsOutput)
}

// Bucket of the Cloud Storage object.
func (o OSPolicyResourceFileGcsPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileGcs) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Generation number of the Cloud Storage object.
func (o OSPolicyResourceFileGcsPtrOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileGcs) *string {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.StringPtrOutput)
}

// Name of the Cloud Storage object.
func (o OSPolicyResourceFileGcsPtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileGcs) *string {
		if v == nil {
			return nil
		}
		return &v.Object
	}).(pulumi.StringPtrOutput)
}

// Specifies a file available as a Cloud Storage Object.
type OSPolicyResourceFileGcsResponse struct {
	// Bucket of the Cloud Storage object.
	Bucket string `pulumi:"bucket"`
	// Generation number of the Cloud Storage object.
	Generation string `pulumi:"generation"`
	// Name of the Cloud Storage object.
	Object string `pulumi:"object"`
}

// Specifies a file available as a Cloud Storage Object.
type OSPolicyResourceFileGcsResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileGcsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileGcsResponse)(nil)).Elem()
}

func (o OSPolicyResourceFileGcsResponseOutput) ToOSPolicyResourceFileGcsResponseOutput() OSPolicyResourceFileGcsResponseOutput {
	return o
}

func (o OSPolicyResourceFileGcsResponseOutput) ToOSPolicyResourceFileGcsResponseOutputWithContext(ctx context.Context) OSPolicyResourceFileGcsResponseOutput {
	return o
}

func (o OSPolicyResourceFileGcsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceFileGcsResponse] {
	return pulumix.Output[OSPolicyResourceFileGcsResponse]{
		OutputState: o.OutputState,
	}
}

// Bucket of the Cloud Storage object.
func (o OSPolicyResourceFileGcsResponseOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileGcsResponse) string { return v.Bucket }).(pulumi.StringOutput)
}

// Generation number of the Cloud Storage object.
func (o OSPolicyResourceFileGcsResponseOutput) Generation() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileGcsResponse) string { return v.Generation }).(pulumi.StringOutput)
}

// Name of the Cloud Storage object.
func (o OSPolicyResourceFileGcsResponseOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileGcsResponse) string { return v.Object }).(pulumi.StringOutput)
}

// Specifies a file available via some URI.
type OSPolicyResourceFileRemote struct {
	// SHA256 checksum of the remote file.
	Sha256Checksum *string `pulumi:"sha256Checksum"`
	// URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`.
	Uri string `pulumi:"uri"`
}

// OSPolicyResourceFileRemoteInput is an input type that accepts OSPolicyResourceFileRemoteArgs and OSPolicyResourceFileRemoteOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileRemoteInput` via:
//
//	OSPolicyResourceFileRemoteArgs{...}
type OSPolicyResourceFileRemoteInput interface {
	pulumi.Input

	ToOSPolicyResourceFileRemoteOutput() OSPolicyResourceFileRemoteOutput
	ToOSPolicyResourceFileRemoteOutputWithContext(context.Context) OSPolicyResourceFileRemoteOutput
}

// Specifies a file available via some URI.
type OSPolicyResourceFileRemoteArgs struct {
	// SHA256 checksum of the remote file.
	Sha256Checksum pulumi.StringPtrInput `pulumi:"sha256Checksum"`
	// URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (OSPolicyResourceFileRemoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileRemote)(nil)).Elem()
}

func (i OSPolicyResourceFileRemoteArgs) ToOSPolicyResourceFileRemoteOutput() OSPolicyResourceFileRemoteOutput {
	return i.ToOSPolicyResourceFileRemoteOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileRemoteArgs) ToOSPolicyResourceFileRemoteOutputWithContext(ctx context.Context) OSPolicyResourceFileRemoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileRemoteOutput)
}

func (i OSPolicyResourceFileRemoteArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceFileRemote] {
	return pulumix.Output[OSPolicyResourceFileRemote]{
		OutputState: i.ToOSPolicyResourceFileRemoteOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourceFileRemoteArgs) ToOSPolicyResourceFileRemotePtrOutput() OSPolicyResourceFileRemotePtrOutput {
	return i.ToOSPolicyResourceFileRemotePtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileRemoteArgs) ToOSPolicyResourceFileRemotePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileRemotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileRemoteOutput).ToOSPolicyResourceFileRemotePtrOutputWithContext(ctx)
}

// OSPolicyResourceFileRemotePtrInput is an input type that accepts OSPolicyResourceFileRemoteArgs, OSPolicyResourceFileRemotePtr and OSPolicyResourceFileRemotePtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileRemotePtrInput` via:
//
//	        OSPolicyResourceFileRemoteArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourceFileRemotePtrInput interface {
	pulumi.Input

	ToOSPolicyResourceFileRemotePtrOutput() OSPolicyResourceFileRemotePtrOutput
	ToOSPolicyResourceFileRemotePtrOutputWithContext(context.Context) OSPolicyResourceFileRemotePtrOutput
}

type ospolicyResourceFileRemotePtrType OSPolicyResourceFileRemoteArgs

func OSPolicyResourceFileRemotePtr(v *OSPolicyResourceFileRemoteArgs) OSPolicyResourceFileRemotePtrInput {
	return (*ospolicyResourceFileRemotePtrType)(v)
}

func (*ospolicyResourceFileRemotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFileRemote)(nil)).Elem()
}

func (i *ospolicyResourceFileRemotePtrType) ToOSPolicyResourceFileRemotePtrOutput() OSPolicyResourceFileRemotePtrOutput {
	return i.ToOSPolicyResourceFileRemotePtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceFileRemotePtrType) ToOSPolicyResourceFileRemotePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileRemotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileRemotePtrOutput)
}

func (i *ospolicyResourceFileRemotePtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceFileRemote] {
	return pulumix.Output[*OSPolicyResourceFileRemote]{
		OutputState: i.ToOSPolicyResourceFileRemotePtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies a file available via some URI.
type OSPolicyResourceFileRemoteOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileRemoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileRemote)(nil)).Elem()
}

func (o OSPolicyResourceFileRemoteOutput) ToOSPolicyResourceFileRemoteOutput() OSPolicyResourceFileRemoteOutput {
	return o
}

func (o OSPolicyResourceFileRemoteOutput) ToOSPolicyResourceFileRemoteOutputWithContext(ctx context.Context) OSPolicyResourceFileRemoteOutput {
	return o
}

func (o OSPolicyResourceFileRemoteOutput) ToOSPolicyResourceFileRemotePtrOutput() OSPolicyResourceFileRemotePtrOutput {
	return o.ToOSPolicyResourceFileRemotePtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceFileRemoteOutput) ToOSPolicyResourceFileRemotePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileRemotePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourceFileRemote) *OSPolicyResourceFileRemote {
		return &v
	}).(OSPolicyResourceFileRemotePtrOutput)
}

func (o OSPolicyResourceFileRemoteOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceFileRemote] {
	return pulumix.Output[OSPolicyResourceFileRemote]{
		OutputState: o.OutputState,
	}
}

// SHA256 checksum of the remote file.
func (o OSPolicyResourceFileRemoteOutput) Sha256Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFileRemote) *string { return v.Sha256Checksum }).(pulumi.StringPtrOutput)
}

// URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`.
func (o OSPolicyResourceFileRemoteOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileRemote) string { return v.Uri }).(pulumi.StringOutput)
}

type OSPolicyResourceFileRemotePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileRemotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFileRemote)(nil)).Elem()
}

func (o OSPolicyResourceFileRemotePtrOutput) ToOSPolicyResourceFileRemotePtrOutput() OSPolicyResourceFileRemotePtrOutput {
	return o
}

func (o OSPolicyResourceFileRemotePtrOutput) ToOSPolicyResourceFileRemotePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileRemotePtrOutput {
	return o
}

func (o OSPolicyResourceFileRemotePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceFileRemote] {
	return pulumix.Output[*OSPolicyResourceFileRemote]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceFileRemotePtrOutput) Elem() OSPolicyResourceFileRemoteOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileRemote) OSPolicyResourceFileRemote {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourceFileRemote
		return ret
	}).(OSPolicyResourceFileRemoteOutput)
}

// SHA256 checksum of the remote file.
func (o OSPolicyResourceFileRemotePtrOutput) Sha256Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileRemote) *string {
		if v == nil {
			return nil
		}
		return v.Sha256Checksum
	}).(pulumi.StringPtrOutput)
}

// URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`.
func (o OSPolicyResourceFileRemotePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileRemote) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Specifies a file available via some URI.
type OSPolicyResourceFileRemoteResponse struct {
	// SHA256 checksum of the remote file.
	Sha256Checksum string `pulumi:"sha256Checksum"`
	// URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`.
	Uri string `pulumi:"uri"`
}

// Specifies a file available via some URI.
type OSPolicyResourceFileRemoteResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileRemoteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileRemoteResponse)(nil)).Elem()
}

func (o OSPolicyResourceFileRemoteResponseOutput) ToOSPolicyResourceFileRemoteResponseOutput() OSPolicyResourceFileRemoteResponseOutput {
	return o
}

func (o OSPolicyResourceFileRemoteResponseOutput) ToOSPolicyResourceFileRemoteResponseOutputWithContext(ctx context.Context) OSPolicyResourceFileRemoteResponseOutput {
	return o
}

func (o OSPolicyResourceFileRemoteResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceFileRemoteResponse] {
	return pulumix.Output[OSPolicyResourceFileRemoteResponse]{
		OutputState: o.OutputState,
	}
}

// SHA256 checksum of the remote file.
func (o OSPolicyResourceFileRemoteResponseOutput) Sha256Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileRemoteResponse) string { return v.Sha256Checksum }).(pulumi.StringOutput)
}

// URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`.
func (o OSPolicyResourceFileRemoteResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileRemoteResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// A resource that manages the state of a file.
type OSPolicyResourceFileResource struct {
	// A a file with this content. The size of the content is limited to 32KiB.
	Content *string `pulumi:"content"`
	// A remote or local source.
	File *OSPolicyResourceFile `pulumi:"file"`
	// The absolute path of the file within the VM.
	Path string `pulumi:"path"`
	// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
	Permissions *string `pulumi:"permissions"`
	// Desired state of the file.
	State OSPolicyResourceFileResourceState `pulumi:"state"`
}

// OSPolicyResourceFileResourceInput is an input type that accepts OSPolicyResourceFileResourceArgs and OSPolicyResourceFileResourceOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileResourceInput` via:
//
//	OSPolicyResourceFileResourceArgs{...}
type OSPolicyResourceFileResourceInput interface {
	pulumi.Input

	ToOSPolicyResourceFileResourceOutput() OSPolicyResourceFileResourceOutput
	ToOSPolicyResourceFileResourceOutputWithContext(context.Context) OSPolicyResourceFileResourceOutput
}

// A resource that manages the state of a file.
type OSPolicyResourceFileResourceArgs struct {
	// A a file with this content. The size of the content is limited to 32KiB.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// A remote or local source.
	File OSPolicyResourceFilePtrInput `pulumi:"file"`
	// The absolute path of the file within the VM.
	Path pulumi.StringInput `pulumi:"path"`
	// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
	Permissions pulumi.StringPtrInput `pulumi:"permissions"`
	// Desired state of the file.
	State OSPolicyResourceFileResourceStateInput `pulumi:"state"`
}

func (OSPolicyResourceFileResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileResource)(nil)).Elem()
}

func (i OSPolicyResourceFileResourceArgs) ToOSPolicyResourceFileResourceOutput() OSPolicyResourceFileResourceOutput {
	return i.ToOSPolicyResourceFileResourceOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileResourceArgs) ToOSPolicyResourceFileResourceOutputWithContext(ctx context.Context) OSPolicyResourceFileResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileResourceOutput)
}

func (i OSPolicyResourceFileResourceArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceFileResource] {
	return pulumix.Output[OSPolicyResourceFileResource]{
		OutputState: i.ToOSPolicyResourceFileResourceOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourceFileResourceArgs) ToOSPolicyResourceFileResourcePtrOutput() OSPolicyResourceFileResourcePtrOutput {
	return i.ToOSPolicyResourceFileResourcePtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceFileResourceArgs) ToOSPolicyResourceFileResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileResourceOutput).ToOSPolicyResourceFileResourcePtrOutputWithContext(ctx)
}

// OSPolicyResourceFileResourcePtrInput is an input type that accepts OSPolicyResourceFileResourceArgs, OSPolicyResourceFileResourcePtr and OSPolicyResourceFileResourcePtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceFileResourcePtrInput` via:
//
//	        OSPolicyResourceFileResourceArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourceFileResourcePtrInput interface {
	pulumi.Input

	ToOSPolicyResourceFileResourcePtrOutput() OSPolicyResourceFileResourcePtrOutput
	ToOSPolicyResourceFileResourcePtrOutputWithContext(context.Context) OSPolicyResourceFileResourcePtrOutput
}

type ospolicyResourceFileResourcePtrType OSPolicyResourceFileResourceArgs

func OSPolicyResourceFileResourcePtr(v *OSPolicyResourceFileResourceArgs) OSPolicyResourceFileResourcePtrInput {
	return (*ospolicyResourceFileResourcePtrType)(v)
}

func (*ospolicyResourceFileResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFileResource)(nil)).Elem()
}

func (i *ospolicyResourceFileResourcePtrType) ToOSPolicyResourceFileResourcePtrOutput() OSPolicyResourceFileResourcePtrOutput {
	return i.ToOSPolicyResourceFileResourcePtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceFileResourcePtrType) ToOSPolicyResourceFileResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceFileResourcePtrOutput)
}

func (i *ospolicyResourceFileResourcePtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceFileResource] {
	return pulumix.Output[*OSPolicyResourceFileResource]{
		OutputState: i.ToOSPolicyResourceFileResourcePtrOutputWithContext(ctx).OutputState,
	}
}

// A resource that manages the state of a file.
type OSPolicyResourceFileResourceOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileResource)(nil)).Elem()
}

func (o OSPolicyResourceFileResourceOutput) ToOSPolicyResourceFileResourceOutput() OSPolicyResourceFileResourceOutput {
	return o
}

func (o OSPolicyResourceFileResourceOutput) ToOSPolicyResourceFileResourceOutputWithContext(ctx context.Context) OSPolicyResourceFileResourceOutput {
	return o
}

func (o OSPolicyResourceFileResourceOutput) ToOSPolicyResourceFileResourcePtrOutput() OSPolicyResourceFileResourcePtrOutput {
	return o.ToOSPolicyResourceFileResourcePtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceFileResourceOutput) ToOSPolicyResourceFileResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourceFileResource) *OSPolicyResourceFileResource {
		return &v
	}).(OSPolicyResourceFileResourcePtrOutput)
}

func (o OSPolicyResourceFileResourceOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceFileResource] {
	return pulumix.Output[OSPolicyResourceFileResource]{
		OutputState: o.OutputState,
	}
}

// A a file with this content. The size of the content is limited to 32KiB.
func (o OSPolicyResourceFileResourceOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResource) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// A remote or local source.
func (o OSPolicyResourceFileResourceOutput) File() OSPolicyResourceFilePtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResource) *OSPolicyResourceFile { return v.File }).(OSPolicyResourceFilePtrOutput)
}

// The absolute path of the file within the VM.
func (o OSPolicyResourceFileResourceOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResource) string { return v.Path }).(pulumi.StringOutput)
}

// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
func (o OSPolicyResourceFileResourceOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResource) *string { return v.Permissions }).(pulumi.StringPtrOutput)
}

// Desired state of the file.
func (o OSPolicyResourceFileResourceOutput) State() OSPolicyResourceFileResourceStateOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResource) OSPolicyResourceFileResourceState { return v.State }).(OSPolicyResourceFileResourceStateOutput)
}

type OSPolicyResourceFileResourcePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceFileResource)(nil)).Elem()
}

func (o OSPolicyResourceFileResourcePtrOutput) ToOSPolicyResourceFileResourcePtrOutput() OSPolicyResourceFileResourcePtrOutput {
	return o
}

func (o OSPolicyResourceFileResourcePtrOutput) ToOSPolicyResourceFileResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceFileResourcePtrOutput {
	return o
}

func (o OSPolicyResourceFileResourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceFileResource] {
	return pulumix.Output[*OSPolicyResourceFileResource]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceFileResourcePtrOutput) Elem() OSPolicyResourceFileResourceOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileResource) OSPolicyResourceFileResource {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourceFileResource
		return ret
	}).(OSPolicyResourceFileResourceOutput)
}

// A a file with this content. The size of the content is limited to 32KiB.
func (o OSPolicyResourceFileResourcePtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileResource) *string {
		if v == nil {
			return nil
		}
		return v.Content
	}).(pulumi.StringPtrOutput)
}

// A remote or local source.
func (o OSPolicyResourceFileResourcePtrOutput) File() OSPolicyResourceFilePtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileResource) *OSPolicyResourceFile {
		if v == nil {
			return nil
		}
		return v.File
	}).(OSPolicyResourceFilePtrOutput)
}

// The absolute path of the file within the VM.
func (o OSPolicyResourceFileResourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileResource) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
func (o OSPolicyResourceFileResourcePtrOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileResource) *string {
		if v == nil {
			return nil
		}
		return v.Permissions
	}).(pulumi.StringPtrOutput)
}

// Desired state of the file.
func (o OSPolicyResourceFileResourcePtrOutput) State() OSPolicyResourceFileResourceStatePtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceFileResource) *OSPolicyResourceFileResourceState {
		if v == nil {
			return nil
		}
		return &v.State
	}).(OSPolicyResourceFileResourceStatePtrOutput)
}

// A resource that manages the state of a file.
type OSPolicyResourceFileResourceResponse struct {
	// A a file with this content. The size of the content is limited to 32KiB.
	Content string `pulumi:"content"`
	// A remote or local source.
	File OSPolicyResourceFileResponse `pulumi:"file"`
	// The absolute path of the file within the VM.
	Path string `pulumi:"path"`
	// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
	Permissions string `pulumi:"permissions"`
	// Desired state of the file.
	State string `pulumi:"state"`
}

// A resource that manages the state of a file.
type OSPolicyResourceFileResourceResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileResourceResponse)(nil)).Elem()
}

func (o OSPolicyResourceFileResourceResponseOutput) ToOSPolicyResourceFileResourceResponseOutput() OSPolicyResourceFileResourceResponseOutput {
	return o
}

func (o OSPolicyResourceFileResourceResponseOutput) ToOSPolicyResourceFileResourceResponseOutputWithContext(ctx context.Context) OSPolicyResourceFileResourceResponseOutput {
	return o
}

func (o OSPolicyResourceFileResourceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceFileResourceResponse] {
	return pulumix.Output[OSPolicyResourceFileResourceResponse]{
		OutputState: o.OutputState,
	}
}

// A a file with this content. The size of the content is limited to 32KiB.
func (o OSPolicyResourceFileResourceResponseOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResourceResponse) string { return v.Content }).(pulumi.StringOutput)
}

// A remote or local source.
func (o OSPolicyResourceFileResourceResponseOutput) File() OSPolicyResourceFileResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResourceResponse) OSPolicyResourceFileResponse { return v.File }).(OSPolicyResourceFileResponseOutput)
}

// The absolute path of the file within the VM.
func (o OSPolicyResourceFileResourceResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResourceResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4
func (o OSPolicyResourceFileResourceResponseOutput) Permissions() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResourceResponse) string { return v.Permissions }).(pulumi.StringOutput)
}

// Desired state of the file.
func (o OSPolicyResourceFileResourceResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResourceResponse) string { return v.State }).(pulumi.StringOutput)
}

// A remote or local file.
type OSPolicyResourceFileResponse struct {
	// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
	AllowInsecure bool `pulumi:"allowInsecure"`
	// A Cloud Storage object.
	Gcs OSPolicyResourceFileGcsResponse `pulumi:"gcs"`
	// A local path within the VM to use.
	LocalPath string `pulumi:"localPath"`
	// A generic remote file.
	Remote OSPolicyResourceFileRemoteResponse `pulumi:"remote"`
}

// A remote or local file.
type OSPolicyResourceFileResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceFileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceFileResponse)(nil)).Elem()
}

func (o OSPolicyResourceFileResponseOutput) ToOSPolicyResourceFileResponseOutput() OSPolicyResourceFileResponseOutput {
	return o
}

func (o OSPolicyResourceFileResponseOutput) ToOSPolicyResourceFileResponseOutputWithContext(ctx context.Context) OSPolicyResourceFileResponseOutput {
	return o
}

func (o OSPolicyResourceFileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceFileResponse] {
	return pulumix.Output[OSPolicyResourceFileResponse]{
		OutputState: o.OutputState,
	}
}

// Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.
func (o OSPolicyResourceFileResponseOutput) AllowInsecure() pulumi.BoolOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResponse) bool { return v.AllowInsecure }).(pulumi.BoolOutput)
}

// A Cloud Storage object.
func (o OSPolicyResourceFileResponseOutput) Gcs() OSPolicyResourceFileGcsResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResponse) OSPolicyResourceFileGcsResponse { return v.Gcs }).(OSPolicyResourceFileGcsResponseOutput)
}

// A local path within the VM to use.
func (o OSPolicyResourceFileResponseOutput) LocalPath() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResponse) string { return v.LocalPath }).(pulumi.StringOutput)
}

// A generic remote file.
func (o OSPolicyResourceFileResponseOutput) Remote() OSPolicyResourceFileRemoteResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceFileResponse) OSPolicyResourceFileRemoteResponse { return v.Remote }).(OSPolicyResourceFileRemoteResponseOutput)
}

// Resource groups provide a mechanism to group OS policy resources. Resource groups enable OS policy authors to create a single OS policy to be applied to VMs running different operating Systems. When the OS policy is applied to a target VM, the appropriate resource group within the OS policy is selected based on the `OSFilter` specified within the resource group.
type OSPolicyResourceGroup struct {
	// List of inventory filters for the resource group. The resources in this resource group are applied to the target VM if it satisfies at least one of the following inventory filters. For example, to apply this resource group to VMs running either `RHEL` or `CentOS` operating systems, specify 2 items for the list with following values: inventory_filters[0].os_short_name='rhel' and inventory_filters[1].os_short_name='centos' If the list is empty, this resource group will be applied to the target VM unconditionally.
	InventoryFilters []OSPolicyInventoryFilter `pulumi:"inventoryFilters"`
	// List of resources configured for this resource group. The resources are executed in the exact order specified here.
	Resources []OSPolicyResource `pulumi:"resources"`
}

// OSPolicyResourceGroupInput is an input type that accepts OSPolicyResourceGroupArgs and OSPolicyResourceGroupOutput values.
// You can construct a concrete instance of `OSPolicyResourceGroupInput` via:
//
//	OSPolicyResourceGroupArgs{...}
type OSPolicyResourceGroupInput interface {
	pulumi.Input

	ToOSPolicyResourceGroupOutput() OSPolicyResourceGroupOutput
	ToOSPolicyResourceGroupOutputWithContext(context.Context) OSPolicyResourceGroupOutput
}

// Resource groups provide a mechanism to group OS policy resources. Resource groups enable OS policy authors to create a single OS policy to be applied to VMs running different operating Systems. When the OS policy is applied to a target VM, the appropriate resource group within the OS policy is selected based on the `OSFilter` specified within the resource group.
type OSPolicyResourceGroupArgs struct {
	// List of inventory filters for the resource group. The resources in this resource group are applied to the target VM if it satisfies at least one of the following inventory filters. For example, to apply this resource group to VMs running either `RHEL` or `CentOS` operating systems, specify 2 items for the list with following values: inventory_filters[0].os_short_name='rhel' and inventory_filters[1].os_short_name='centos' If the list is empty, this resource group will be applied to the target VM unconditionally.
	InventoryFilters OSPolicyInventoryFilterArrayInput `pulumi:"inventoryFilters"`
	// List of resources configured for this resource group. The resources are executed in the exact order specified here.
	Resources OSPolicyResourceArrayInput `pulumi:"resources"`
}

func (OSPolicyResourceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceGroup)(nil)).Elem()
}

func (i OSPolicyResourceGroupArgs) ToOSPolicyResourceGroupOutput() OSPolicyResourceGroupOutput {
	return i.ToOSPolicyResourceGroupOutputWithContext(context.Background())
}

func (i OSPolicyResourceGroupArgs) ToOSPolicyResourceGroupOutputWithContext(ctx context.Context) OSPolicyResourceGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceGroupOutput)
}

func (i OSPolicyResourceGroupArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceGroup] {
	return pulumix.Output[OSPolicyResourceGroup]{
		OutputState: i.ToOSPolicyResourceGroupOutputWithContext(ctx).OutputState,
	}
}

// OSPolicyResourceGroupArrayInput is an input type that accepts OSPolicyResourceGroupArray and OSPolicyResourceGroupArrayOutput values.
// You can construct a concrete instance of `OSPolicyResourceGroupArrayInput` via:
//
//	OSPolicyResourceGroupArray{ OSPolicyResourceGroupArgs{...} }
type OSPolicyResourceGroupArrayInput interface {
	pulumi.Input

	ToOSPolicyResourceGroupArrayOutput() OSPolicyResourceGroupArrayOutput
	ToOSPolicyResourceGroupArrayOutputWithContext(context.Context) OSPolicyResourceGroupArrayOutput
}

type OSPolicyResourceGroupArray []OSPolicyResourceGroupInput

func (OSPolicyResourceGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResourceGroup)(nil)).Elem()
}

func (i OSPolicyResourceGroupArray) ToOSPolicyResourceGroupArrayOutput() OSPolicyResourceGroupArrayOutput {
	return i.ToOSPolicyResourceGroupArrayOutputWithContext(context.Background())
}

func (i OSPolicyResourceGroupArray) ToOSPolicyResourceGroupArrayOutputWithContext(ctx context.Context) OSPolicyResourceGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceGroupArrayOutput)
}

func (i OSPolicyResourceGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicyResourceGroup] {
	return pulumix.Output[[]OSPolicyResourceGroup]{
		OutputState: i.ToOSPolicyResourceGroupArrayOutputWithContext(ctx).OutputState,
	}
}

// Resource groups provide a mechanism to group OS policy resources. Resource groups enable OS policy authors to create a single OS policy to be applied to VMs running different operating Systems. When the OS policy is applied to a target VM, the appropriate resource group within the OS policy is selected based on the `OSFilter` specified within the resource group.
type OSPolicyResourceGroupOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceGroup)(nil)).Elem()
}

func (o OSPolicyResourceGroupOutput) ToOSPolicyResourceGroupOutput() OSPolicyResourceGroupOutput {
	return o
}

func (o OSPolicyResourceGroupOutput) ToOSPolicyResourceGroupOutputWithContext(ctx context.Context) OSPolicyResourceGroupOutput {
	return o
}

func (o OSPolicyResourceGroupOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceGroup] {
	return pulumix.Output[OSPolicyResourceGroup]{
		OutputState: o.OutputState,
	}
}

// List of inventory filters for the resource group. The resources in this resource group are applied to the target VM if it satisfies at least one of the following inventory filters. For example, to apply this resource group to VMs running either `RHEL` or `CentOS` operating systems, specify 2 items for the list with following values: inventory_filters[0].os_short_name='rhel' and inventory_filters[1].os_short_name='centos' If the list is empty, this resource group will be applied to the target VM unconditionally.
func (o OSPolicyResourceGroupOutput) InventoryFilters() OSPolicyInventoryFilterArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceGroup) []OSPolicyInventoryFilter { return v.InventoryFilters }).(OSPolicyInventoryFilterArrayOutput)
}

// List of resources configured for this resource group. The resources are executed in the exact order specified here.
func (o OSPolicyResourceGroupOutput) Resources() OSPolicyResourceArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceGroup) []OSPolicyResource { return v.Resources }).(OSPolicyResourceArrayOutput)
}

type OSPolicyResourceGroupArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResourceGroup)(nil)).Elem()
}

func (o OSPolicyResourceGroupArrayOutput) ToOSPolicyResourceGroupArrayOutput() OSPolicyResourceGroupArrayOutput {
	return o
}

func (o OSPolicyResourceGroupArrayOutput) ToOSPolicyResourceGroupArrayOutputWithContext(ctx context.Context) OSPolicyResourceGroupArrayOutput {
	return o
}

func (o OSPolicyResourceGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicyResourceGroup] {
	return pulumix.Output[[]OSPolicyResourceGroup]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceGroupArrayOutput) Index(i pulumi.IntInput) OSPolicyResourceGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyResourceGroup {
		return vs[0].([]OSPolicyResourceGroup)[vs[1].(int)]
	}).(OSPolicyResourceGroupOutput)
}

// Resource groups provide a mechanism to group OS policy resources. Resource groups enable OS policy authors to create a single OS policy to be applied to VMs running different operating Systems. When the OS policy is applied to a target VM, the appropriate resource group within the OS policy is selected based on the `OSFilter` specified within the resource group.
type OSPolicyResourceGroupResponse struct {
	// List of inventory filters for the resource group. The resources in this resource group are applied to the target VM if it satisfies at least one of the following inventory filters. For example, to apply this resource group to VMs running either `RHEL` or `CentOS` operating systems, specify 2 items for the list with following values: inventory_filters[0].os_short_name='rhel' and inventory_filters[1].os_short_name='centos' If the list is empty, this resource group will be applied to the target VM unconditionally.
	InventoryFilters []OSPolicyInventoryFilterResponse `pulumi:"inventoryFilters"`
	// List of resources configured for this resource group. The resources are executed in the exact order specified here.
	Resources []OSPolicyResourceResponse `pulumi:"resources"`
}

// Resource groups provide a mechanism to group OS policy resources. Resource groups enable OS policy authors to create a single OS policy to be applied to VMs running different operating Systems. When the OS policy is applied to a target VM, the appropriate resource group within the OS policy is selected based on the `OSFilter` specified within the resource group.
type OSPolicyResourceGroupResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceGroupResponse)(nil)).Elem()
}

func (o OSPolicyResourceGroupResponseOutput) ToOSPolicyResourceGroupResponseOutput() OSPolicyResourceGroupResponseOutput {
	return o
}

func (o OSPolicyResourceGroupResponseOutput) ToOSPolicyResourceGroupResponseOutputWithContext(ctx context.Context) OSPolicyResourceGroupResponseOutput {
	return o
}

func (o OSPolicyResourceGroupResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceGroupResponse] {
	return pulumix.Output[OSPolicyResourceGroupResponse]{
		OutputState: o.OutputState,
	}
}

// List of inventory filters for the resource group. The resources in this resource group are applied to the target VM if it satisfies at least one of the following inventory filters. For example, to apply this resource group to VMs running either `RHEL` or `CentOS` operating systems, specify 2 items for the list with following values: inventory_filters[0].os_short_name='rhel' and inventory_filters[1].os_short_name='centos' If the list is empty, this resource group will be applied to the target VM unconditionally.
func (o OSPolicyResourceGroupResponseOutput) InventoryFilters() OSPolicyInventoryFilterResponseArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceGroupResponse) []OSPolicyInventoryFilterResponse { return v.InventoryFilters }).(OSPolicyInventoryFilterResponseArrayOutput)
}

// List of resources configured for this resource group. The resources are executed in the exact order specified here.
func (o OSPolicyResourceGroupResponseOutput) Resources() OSPolicyResourceResponseArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceGroupResponse) []OSPolicyResourceResponse { return v.Resources }).(OSPolicyResourceResponseArrayOutput)
}

type OSPolicyResourceGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResourceGroupResponse)(nil)).Elem()
}

func (o OSPolicyResourceGroupResponseArrayOutput) ToOSPolicyResourceGroupResponseArrayOutput() OSPolicyResourceGroupResponseArrayOutput {
	return o
}

func (o OSPolicyResourceGroupResponseArrayOutput) ToOSPolicyResourceGroupResponseArrayOutputWithContext(ctx context.Context) OSPolicyResourceGroupResponseArrayOutput {
	return o
}

func (o OSPolicyResourceGroupResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicyResourceGroupResponse] {
	return pulumix.Output[[]OSPolicyResourceGroupResponse]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceGroupResponseArrayOutput) Index(i pulumi.IntInput) OSPolicyResourceGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyResourceGroupResponse {
		return vs[0].([]OSPolicyResourceGroupResponse)[vs[1].(int)]
	}).(OSPolicyResourceGroupResponseOutput)
}

// A resource that manages a system package.
type OSPolicyResourcePackageResource struct {
	// A package managed by Apt.
	Apt *OSPolicyResourcePackageResourceAPT `pulumi:"apt"`
	// A deb package file.
	Deb *OSPolicyResourcePackageResourceDeb `pulumi:"deb"`
	// The desired state the agent should maintain for this package.
	DesiredState OSPolicyResourcePackageResourceDesiredState `pulumi:"desiredState"`
	// A package managed by GooGet.
	Googet *OSPolicyResourcePackageResourceGooGet `pulumi:"googet"`
	// An MSI package.
	Msi *OSPolicyResourcePackageResourceMSI `pulumi:"msi"`
	// An rpm package file.
	Rpm *OSPolicyResourcePackageResourceRPM `pulumi:"rpm"`
	// A package managed by YUM.
	Yum *OSPolicyResourcePackageResourceYUM `pulumi:"yum"`
	// A package managed by Zypper.
	Zypper *OSPolicyResourcePackageResourceZypper `pulumi:"zypper"`
}

// OSPolicyResourcePackageResourceInput is an input type that accepts OSPolicyResourcePackageResourceArgs and OSPolicyResourcePackageResourceOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceInput` via:
//
//	OSPolicyResourcePackageResourceArgs{...}
type OSPolicyResourcePackageResourceInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceOutput() OSPolicyResourcePackageResourceOutput
	ToOSPolicyResourcePackageResourceOutputWithContext(context.Context) OSPolicyResourcePackageResourceOutput
}

// A resource that manages a system package.
type OSPolicyResourcePackageResourceArgs struct {
	// A package managed by Apt.
	Apt OSPolicyResourcePackageResourceAPTPtrInput `pulumi:"apt"`
	// A deb package file.
	Deb OSPolicyResourcePackageResourceDebPtrInput `pulumi:"deb"`
	// The desired state the agent should maintain for this package.
	DesiredState OSPolicyResourcePackageResourceDesiredStateInput `pulumi:"desiredState"`
	// A package managed by GooGet.
	Googet OSPolicyResourcePackageResourceGooGetPtrInput `pulumi:"googet"`
	// An MSI package.
	Msi OSPolicyResourcePackageResourceMSIPtrInput `pulumi:"msi"`
	// An rpm package file.
	Rpm OSPolicyResourcePackageResourceRPMPtrInput `pulumi:"rpm"`
	// A package managed by YUM.
	Yum OSPolicyResourcePackageResourceYUMPtrInput `pulumi:"yum"`
	// A package managed by Zypper.
	Zypper OSPolicyResourcePackageResourceZypperPtrInput `pulumi:"zypper"`
}

func (OSPolicyResourcePackageResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResource)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceArgs) ToOSPolicyResourcePackageResourceOutput() OSPolicyResourcePackageResourceOutput {
	return i.ToOSPolicyResourcePackageResourceOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceArgs) ToOSPolicyResourcePackageResourceOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceOutput)
}

func (i OSPolicyResourcePackageResourceArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResource] {
	return pulumix.Output[OSPolicyResourcePackageResource]{
		OutputState: i.ToOSPolicyResourcePackageResourceOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourcePackageResourceArgs) ToOSPolicyResourcePackageResourcePtrOutput() OSPolicyResourcePackageResourcePtrOutput {
	return i.ToOSPolicyResourcePackageResourcePtrOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceArgs) ToOSPolicyResourcePackageResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceOutput).ToOSPolicyResourcePackageResourcePtrOutputWithContext(ctx)
}

// OSPolicyResourcePackageResourcePtrInput is an input type that accepts OSPolicyResourcePackageResourceArgs, OSPolicyResourcePackageResourcePtr and OSPolicyResourcePackageResourcePtrOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourcePtrInput` via:
//
//	        OSPolicyResourcePackageResourceArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourcePackageResourcePtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourcePtrOutput() OSPolicyResourcePackageResourcePtrOutput
	ToOSPolicyResourcePackageResourcePtrOutputWithContext(context.Context) OSPolicyResourcePackageResourcePtrOutput
}

type ospolicyResourcePackageResourcePtrType OSPolicyResourcePackageResourceArgs

func OSPolicyResourcePackageResourcePtr(v *OSPolicyResourcePackageResourceArgs) OSPolicyResourcePackageResourcePtrInput {
	return (*ospolicyResourcePackageResourcePtrType)(v)
}

func (*ospolicyResourcePackageResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResource)(nil)).Elem()
}

func (i *ospolicyResourcePackageResourcePtrType) ToOSPolicyResourcePackageResourcePtrOutput() OSPolicyResourcePackageResourcePtrOutput {
	return i.ToOSPolicyResourcePackageResourcePtrOutputWithContext(context.Background())
}

func (i *ospolicyResourcePackageResourcePtrType) ToOSPolicyResourcePackageResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourcePtrOutput)
}

func (i *ospolicyResourcePackageResourcePtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResource] {
	return pulumix.Output[*OSPolicyResourcePackageResource]{
		OutputState: i.ToOSPolicyResourcePackageResourcePtrOutputWithContext(ctx).OutputState,
	}
}

// A resource that manages a system package.
type OSPolicyResourcePackageResourceOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResource)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceOutput) ToOSPolicyResourcePackageResourceOutput() OSPolicyResourcePackageResourceOutput {
	return o
}

func (o OSPolicyResourcePackageResourceOutput) ToOSPolicyResourcePackageResourceOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceOutput {
	return o
}

func (o OSPolicyResourcePackageResourceOutput) ToOSPolicyResourcePackageResourcePtrOutput() OSPolicyResourcePackageResourcePtrOutput {
	return o.ToOSPolicyResourcePackageResourcePtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceOutput) ToOSPolicyResourcePackageResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourcePackageResource) *OSPolicyResourcePackageResource {
		return &v
	}).(OSPolicyResourcePackageResourcePtrOutput)
}

func (o OSPolicyResourcePackageResourceOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResource] {
	return pulumix.Output[OSPolicyResourcePackageResource]{
		OutputState: o.OutputState,
	}
}

// A package managed by Apt.
func (o OSPolicyResourcePackageResourceOutput) Apt() OSPolicyResourcePackageResourceAPTPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceAPT { return v.Apt }).(OSPolicyResourcePackageResourceAPTPtrOutput)
}

// A deb package file.
func (o OSPolicyResourcePackageResourceOutput) Deb() OSPolicyResourcePackageResourceDebPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceDeb { return v.Deb }).(OSPolicyResourcePackageResourceDebPtrOutput)
}

// The desired state the agent should maintain for this package.
func (o OSPolicyResourcePackageResourceOutput) DesiredState() OSPolicyResourcePackageResourceDesiredStateOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) OSPolicyResourcePackageResourceDesiredState {
		return v.DesiredState
	}).(OSPolicyResourcePackageResourceDesiredStateOutput)
}

// A package managed by GooGet.
func (o OSPolicyResourcePackageResourceOutput) Googet() OSPolicyResourcePackageResourceGooGetPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceGooGet { return v.Googet }).(OSPolicyResourcePackageResourceGooGetPtrOutput)
}

// An MSI package.
func (o OSPolicyResourcePackageResourceOutput) Msi() OSPolicyResourcePackageResourceMSIPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceMSI { return v.Msi }).(OSPolicyResourcePackageResourceMSIPtrOutput)
}

// An rpm package file.
func (o OSPolicyResourcePackageResourceOutput) Rpm() OSPolicyResourcePackageResourceRPMPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceRPM { return v.Rpm }).(OSPolicyResourcePackageResourceRPMPtrOutput)
}

// A package managed by YUM.
func (o OSPolicyResourcePackageResourceOutput) Yum() OSPolicyResourcePackageResourceYUMPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceYUM { return v.Yum }).(OSPolicyResourcePackageResourceYUMPtrOutput)
}

// A package managed by Zypper.
func (o OSPolicyResourcePackageResourceOutput) Zypper() OSPolicyResourcePackageResourceZypperPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceZypper { return v.Zypper }).(OSPolicyResourcePackageResourceZypperPtrOutput)
}

type OSPolicyResourcePackageResourcePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResource)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourcePtrOutput) ToOSPolicyResourcePackageResourcePtrOutput() OSPolicyResourcePackageResourcePtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourcePtrOutput) ToOSPolicyResourcePackageResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourcePtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResource] {
	return pulumix.Output[*OSPolicyResourcePackageResource]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourcePackageResourcePtrOutput) Elem() OSPolicyResourcePackageResourceOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) OSPolicyResourcePackageResource {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourcePackageResource
		return ret
	}).(OSPolicyResourcePackageResourceOutput)
}

// A package managed by Apt.
func (o OSPolicyResourcePackageResourcePtrOutput) Apt() OSPolicyResourcePackageResourceAPTPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceAPT {
		if v == nil {
			return nil
		}
		return v.Apt
	}).(OSPolicyResourcePackageResourceAPTPtrOutput)
}

// A deb package file.
func (o OSPolicyResourcePackageResourcePtrOutput) Deb() OSPolicyResourcePackageResourceDebPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceDeb {
		if v == nil {
			return nil
		}
		return v.Deb
	}).(OSPolicyResourcePackageResourceDebPtrOutput)
}

// The desired state the agent should maintain for this package.
func (o OSPolicyResourcePackageResourcePtrOutput) DesiredState() OSPolicyResourcePackageResourceDesiredStatePtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceDesiredState {
		if v == nil {
			return nil
		}
		return &v.DesiredState
	}).(OSPolicyResourcePackageResourceDesiredStatePtrOutput)
}

// A package managed by GooGet.
func (o OSPolicyResourcePackageResourcePtrOutput) Googet() OSPolicyResourcePackageResourceGooGetPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceGooGet {
		if v == nil {
			return nil
		}
		return v.Googet
	}).(OSPolicyResourcePackageResourceGooGetPtrOutput)
}

// An MSI package.
func (o OSPolicyResourcePackageResourcePtrOutput) Msi() OSPolicyResourcePackageResourceMSIPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceMSI {
		if v == nil {
			return nil
		}
		return v.Msi
	}).(OSPolicyResourcePackageResourceMSIPtrOutput)
}

// An rpm package file.
func (o OSPolicyResourcePackageResourcePtrOutput) Rpm() OSPolicyResourcePackageResourceRPMPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceRPM {
		if v == nil {
			return nil
		}
		return v.Rpm
	}).(OSPolicyResourcePackageResourceRPMPtrOutput)
}

// A package managed by YUM.
func (o OSPolicyResourcePackageResourcePtrOutput) Yum() OSPolicyResourcePackageResourceYUMPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceYUM {
		if v == nil {
			return nil
		}
		return v.Yum
	}).(OSPolicyResourcePackageResourceYUMPtrOutput)
}

// A package managed by Zypper.
func (o OSPolicyResourcePackageResourcePtrOutput) Zypper() OSPolicyResourcePackageResourceZypperPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResource) *OSPolicyResourcePackageResourceZypper {
		if v == nil {
			return nil
		}
		return v.Zypper
	}).(OSPolicyResourcePackageResourceZypperPtrOutput)
}

// A package managed by APT. - install: `apt-get update && apt-get -y install [name]` - remove: `apt-get -y remove [name]`
type OSPolicyResourcePackageResourceAPT struct {
	// Package name.
	Name string `pulumi:"name"`
}

// OSPolicyResourcePackageResourceAPTInput is an input type that accepts OSPolicyResourcePackageResourceAPTArgs and OSPolicyResourcePackageResourceAPTOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceAPTInput` via:
//
//	OSPolicyResourcePackageResourceAPTArgs{...}
type OSPolicyResourcePackageResourceAPTInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceAPTOutput() OSPolicyResourcePackageResourceAPTOutput
	ToOSPolicyResourcePackageResourceAPTOutputWithContext(context.Context) OSPolicyResourcePackageResourceAPTOutput
}

// A package managed by APT. - install: `apt-get update && apt-get -y install [name]` - remove: `apt-get -y remove [name]`
type OSPolicyResourcePackageResourceAPTArgs struct {
	// Package name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (OSPolicyResourcePackageResourceAPTArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceAPT)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceAPTArgs) ToOSPolicyResourcePackageResourceAPTOutput() OSPolicyResourcePackageResourceAPTOutput {
	return i.ToOSPolicyResourcePackageResourceAPTOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceAPTArgs) ToOSPolicyResourcePackageResourceAPTOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceAPTOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceAPTOutput)
}

func (i OSPolicyResourcePackageResourceAPTArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceAPT] {
	return pulumix.Output[OSPolicyResourcePackageResourceAPT]{
		OutputState: i.ToOSPolicyResourcePackageResourceAPTOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourcePackageResourceAPTArgs) ToOSPolicyResourcePackageResourceAPTPtrOutput() OSPolicyResourcePackageResourceAPTPtrOutput {
	return i.ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceAPTArgs) ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceAPTPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceAPTOutput).ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(ctx)
}

// OSPolicyResourcePackageResourceAPTPtrInput is an input type that accepts OSPolicyResourcePackageResourceAPTArgs, OSPolicyResourcePackageResourceAPTPtr and OSPolicyResourcePackageResourceAPTPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceAPTPtrInput` via:
//
//	        OSPolicyResourcePackageResourceAPTArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourcePackageResourceAPTPtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceAPTPtrOutput() OSPolicyResourcePackageResourceAPTPtrOutput
	ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(context.Context) OSPolicyResourcePackageResourceAPTPtrOutput
}

type ospolicyResourcePackageResourceAPTPtrType OSPolicyResourcePackageResourceAPTArgs

func OSPolicyResourcePackageResourceAPTPtr(v *OSPolicyResourcePackageResourceAPTArgs) OSPolicyResourcePackageResourceAPTPtrInput {
	return (*ospolicyResourcePackageResourceAPTPtrType)(v)
}

func (*ospolicyResourcePackageResourceAPTPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceAPT)(nil)).Elem()
}

func (i *ospolicyResourcePackageResourceAPTPtrType) ToOSPolicyResourcePackageResourceAPTPtrOutput() OSPolicyResourcePackageResourceAPTPtrOutput {
	return i.ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourcePackageResourceAPTPtrType) ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceAPTPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceAPTPtrOutput)
}

func (i *ospolicyResourcePackageResourceAPTPtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResourceAPT] {
	return pulumix.Output[*OSPolicyResourcePackageResourceAPT]{
		OutputState: i.ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(ctx).OutputState,
	}
}

// A package managed by APT. - install: `apt-get update && apt-get -y install [name]` - remove: `apt-get -y remove [name]`
type OSPolicyResourcePackageResourceAPTOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceAPTOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceAPT)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceAPTOutput) ToOSPolicyResourcePackageResourceAPTOutput() OSPolicyResourcePackageResourceAPTOutput {
	return o
}

func (o OSPolicyResourcePackageResourceAPTOutput) ToOSPolicyResourcePackageResourceAPTOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceAPTOutput {
	return o
}

func (o OSPolicyResourcePackageResourceAPTOutput) ToOSPolicyResourcePackageResourceAPTPtrOutput() OSPolicyResourcePackageResourceAPTPtrOutput {
	return o.ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceAPTOutput) ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceAPTPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourcePackageResourceAPT) *OSPolicyResourcePackageResourceAPT {
		return &v
	}).(OSPolicyResourcePackageResourceAPTPtrOutput)
}

func (o OSPolicyResourcePackageResourceAPTOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceAPT] {
	return pulumix.Output[OSPolicyResourcePackageResourceAPT]{
		OutputState: o.OutputState,
	}
}

// Package name.
func (o OSPolicyResourcePackageResourceAPTOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceAPT) string { return v.Name }).(pulumi.StringOutput)
}

type OSPolicyResourcePackageResourceAPTPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceAPTPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceAPT)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceAPTPtrOutput) ToOSPolicyResourcePackageResourceAPTPtrOutput() OSPolicyResourcePackageResourceAPTPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceAPTPtrOutput) ToOSPolicyResourcePackageResourceAPTPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceAPTPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceAPTPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResourceAPT] {
	return pulumix.Output[*OSPolicyResourcePackageResourceAPT]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourcePackageResourceAPTPtrOutput) Elem() OSPolicyResourcePackageResourceAPTOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceAPT) OSPolicyResourcePackageResourceAPT {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourcePackageResourceAPT
		return ret
	}).(OSPolicyResourcePackageResourceAPTOutput)
}

// Package name.
func (o OSPolicyResourcePackageResourceAPTPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceAPT) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// A package managed by APT. - install: `apt-get update && apt-get -y install [name]` - remove: `apt-get -y remove [name]`
type OSPolicyResourcePackageResourceAPTResponse struct {
	// Package name.
	Name string `pulumi:"name"`
}

// A package managed by APT. - install: `apt-get update && apt-get -y install [name]` - remove: `apt-get -y remove [name]`
type OSPolicyResourcePackageResourceAPTResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceAPTResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceAPTResponse)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceAPTResponseOutput) ToOSPolicyResourcePackageResourceAPTResponseOutput() OSPolicyResourcePackageResourceAPTResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceAPTResponseOutput) ToOSPolicyResourcePackageResourceAPTResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceAPTResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceAPTResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceAPTResponse] {
	return pulumix.Output[OSPolicyResourcePackageResourceAPTResponse]{
		OutputState: o.OutputState,
	}
}

// Package name.
func (o OSPolicyResourcePackageResourceAPTResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceAPTResponse) string { return v.Name }).(pulumi.StringOutput)
}

// A deb package file. dpkg packages only support INSTALLED state.
type OSPolicyResourcePackageResourceDeb struct {
	// Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb`
	PullDeps *bool `pulumi:"pullDeps"`
	// A deb package.
	Source OSPolicyResourceFile `pulumi:"source"`
}

// OSPolicyResourcePackageResourceDebInput is an input type that accepts OSPolicyResourcePackageResourceDebArgs and OSPolicyResourcePackageResourceDebOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceDebInput` via:
//
//	OSPolicyResourcePackageResourceDebArgs{...}
type OSPolicyResourcePackageResourceDebInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceDebOutput() OSPolicyResourcePackageResourceDebOutput
	ToOSPolicyResourcePackageResourceDebOutputWithContext(context.Context) OSPolicyResourcePackageResourceDebOutput
}

// A deb package file. dpkg packages only support INSTALLED state.
type OSPolicyResourcePackageResourceDebArgs struct {
	// Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb`
	PullDeps pulumi.BoolPtrInput `pulumi:"pullDeps"`
	// A deb package.
	Source OSPolicyResourceFileInput `pulumi:"source"`
}

func (OSPolicyResourcePackageResourceDebArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceDeb)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceDebArgs) ToOSPolicyResourcePackageResourceDebOutput() OSPolicyResourcePackageResourceDebOutput {
	return i.ToOSPolicyResourcePackageResourceDebOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceDebArgs) ToOSPolicyResourcePackageResourceDebOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDebOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceDebOutput)
}

func (i OSPolicyResourcePackageResourceDebArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceDeb] {
	return pulumix.Output[OSPolicyResourcePackageResourceDeb]{
		OutputState: i.ToOSPolicyResourcePackageResourceDebOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourcePackageResourceDebArgs) ToOSPolicyResourcePackageResourceDebPtrOutput() OSPolicyResourcePackageResourceDebPtrOutput {
	return i.ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceDebArgs) ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDebPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceDebOutput).ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(ctx)
}

// OSPolicyResourcePackageResourceDebPtrInput is an input type that accepts OSPolicyResourcePackageResourceDebArgs, OSPolicyResourcePackageResourceDebPtr and OSPolicyResourcePackageResourceDebPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceDebPtrInput` via:
//
//	        OSPolicyResourcePackageResourceDebArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourcePackageResourceDebPtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceDebPtrOutput() OSPolicyResourcePackageResourceDebPtrOutput
	ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(context.Context) OSPolicyResourcePackageResourceDebPtrOutput
}

type ospolicyResourcePackageResourceDebPtrType OSPolicyResourcePackageResourceDebArgs

func OSPolicyResourcePackageResourceDebPtr(v *OSPolicyResourcePackageResourceDebArgs) OSPolicyResourcePackageResourceDebPtrInput {
	return (*ospolicyResourcePackageResourceDebPtrType)(v)
}

func (*ospolicyResourcePackageResourceDebPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceDeb)(nil)).Elem()
}

func (i *ospolicyResourcePackageResourceDebPtrType) ToOSPolicyResourcePackageResourceDebPtrOutput() OSPolicyResourcePackageResourceDebPtrOutput {
	return i.ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourcePackageResourceDebPtrType) ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDebPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceDebPtrOutput)
}

func (i *ospolicyResourcePackageResourceDebPtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResourceDeb] {
	return pulumix.Output[*OSPolicyResourcePackageResourceDeb]{
		OutputState: i.ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(ctx).OutputState,
	}
}

// A deb package file. dpkg packages only support INSTALLED state.
type OSPolicyResourcePackageResourceDebOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceDebOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceDeb)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceDebOutput) ToOSPolicyResourcePackageResourceDebOutput() OSPolicyResourcePackageResourceDebOutput {
	return o
}

func (o OSPolicyResourcePackageResourceDebOutput) ToOSPolicyResourcePackageResourceDebOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDebOutput {
	return o
}

func (o OSPolicyResourcePackageResourceDebOutput) ToOSPolicyResourcePackageResourceDebPtrOutput() OSPolicyResourcePackageResourceDebPtrOutput {
	return o.ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceDebOutput) ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDebPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourcePackageResourceDeb) *OSPolicyResourcePackageResourceDeb {
		return &v
	}).(OSPolicyResourcePackageResourceDebPtrOutput)
}

func (o OSPolicyResourcePackageResourceDebOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceDeb] {
	return pulumix.Output[OSPolicyResourcePackageResourceDeb]{
		OutputState: o.OutputState,
	}
}

// Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb`
func (o OSPolicyResourcePackageResourceDebOutput) PullDeps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceDeb) *bool { return v.PullDeps }).(pulumi.BoolPtrOutput)
}

// A deb package.
func (o OSPolicyResourcePackageResourceDebOutput) Source() OSPolicyResourceFileOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceDeb) OSPolicyResourceFile { return v.Source }).(OSPolicyResourceFileOutput)
}

type OSPolicyResourcePackageResourceDebPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceDebPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceDeb)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceDebPtrOutput) ToOSPolicyResourcePackageResourceDebPtrOutput() OSPolicyResourcePackageResourceDebPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceDebPtrOutput) ToOSPolicyResourcePackageResourceDebPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDebPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceDebPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResourceDeb] {
	return pulumix.Output[*OSPolicyResourcePackageResourceDeb]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourcePackageResourceDebPtrOutput) Elem() OSPolicyResourcePackageResourceDebOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceDeb) OSPolicyResourcePackageResourceDeb {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourcePackageResourceDeb
		return ret
	}).(OSPolicyResourcePackageResourceDebOutput)
}

// Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb`
func (o OSPolicyResourcePackageResourceDebPtrOutput) PullDeps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceDeb) *bool {
		if v == nil {
			return nil
		}
		return v.PullDeps
	}).(pulumi.BoolPtrOutput)
}

// A deb package.
func (o OSPolicyResourcePackageResourceDebPtrOutput) Source() OSPolicyResourceFilePtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceDeb) *OSPolicyResourceFile {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(OSPolicyResourceFilePtrOutput)
}

// A deb package file. dpkg packages only support INSTALLED state.
type OSPolicyResourcePackageResourceDebResponse struct {
	// Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb`
	PullDeps bool `pulumi:"pullDeps"`
	// A deb package.
	Source OSPolicyResourceFileResponse `pulumi:"source"`
}

// A deb package file. dpkg packages only support INSTALLED state.
type OSPolicyResourcePackageResourceDebResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceDebResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceDebResponse)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceDebResponseOutput) ToOSPolicyResourcePackageResourceDebResponseOutput() OSPolicyResourcePackageResourceDebResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceDebResponseOutput) ToOSPolicyResourcePackageResourceDebResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceDebResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceDebResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceDebResponse] {
	return pulumix.Output[OSPolicyResourcePackageResourceDebResponse]{
		OutputState: o.OutputState,
	}
}

// Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb`
func (o OSPolicyResourcePackageResourceDebResponseOutput) PullDeps() pulumi.BoolOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceDebResponse) bool { return v.PullDeps }).(pulumi.BoolOutput)
}

// A deb package.
func (o OSPolicyResourcePackageResourceDebResponseOutput) Source() OSPolicyResourceFileResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceDebResponse) OSPolicyResourceFileResponse { return v.Source }).(OSPolicyResourceFileResponseOutput)
}

// A package managed by GooGet. - install: `googet -noconfirm install package` - remove: `googet -noconfirm remove package`
type OSPolicyResourcePackageResourceGooGet struct {
	// Package name.
	Name string `pulumi:"name"`
}

// OSPolicyResourcePackageResourceGooGetInput is an input type that accepts OSPolicyResourcePackageResourceGooGetArgs and OSPolicyResourcePackageResourceGooGetOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceGooGetInput` via:
//
//	OSPolicyResourcePackageResourceGooGetArgs{...}
type OSPolicyResourcePackageResourceGooGetInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceGooGetOutput() OSPolicyResourcePackageResourceGooGetOutput
	ToOSPolicyResourcePackageResourceGooGetOutputWithContext(context.Context) OSPolicyResourcePackageResourceGooGetOutput
}

// A package managed by GooGet. - install: `googet -noconfirm install package` - remove: `googet -noconfirm remove package`
type OSPolicyResourcePackageResourceGooGetArgs struct {
	// Package name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (OSPolicyResourcePackageResourceGooGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceGooGet)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceGooGetArgs) ToOSPolicyResourcePackageResourceGooGetOutput() OSPolicyResourcePackageResourceGooGetOutput {
	return i.ToOSPolicyResourcePackageResourceGooGetOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceGooGetArgs) ToOSPolicyResourcePackageResourceGooGetOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceGooGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceGooGetOutput)
}

func (i OSPolicyResourcePackageResourceGooGetArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceGooGet] {
	return pulumix.Output[OSPolicyResourcePackageResourceGooGet]{
		OutputState: i.ToOSPolicyResourcePackageResourceGooGetOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourcePackageResourceGooGetArgs) ToOSPolicyResourcePackageResourceGooGetPtrOutput() OSPolicyResourcePackageResourceGooGetPtrOutput {
	return i.ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceGooGetArgs) ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceGooGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceGooGetOutput).ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(ctx)
}

// OSPolicyResourcePackageResourceGooGetPtrInput is an input type that accepts OSPolicyResourcePackageResourceGooGetArgs, OSPolicyResourcePackageResourceGooGetPtr and OSPolicyResourcePackageResourceGooGetPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceGooGetPtrInput` via:
//
//	        OSPolicyResourcePackageResourceGooGetArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourcePackageResourceGooGetPtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceGooGetPtrOutput() OSPolicyResourcePackageResourceGooGetPtrOutput
	ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(context.Context) OSPolicyResourcePackageResourceGooGetPtrOutput
}

type ospolicyResourcePackageResourceGooGetPtrType OSPolicyResourcePackageResourceGooGetArgs

func OSPolicyResourcePackageResourceGooGetPtr(v *OSPolicyResourcePackageResourceGooGetArgs) OSPolicyResourcePackageResourceGooGetPtrInput {
	return (*ospolicyResourcePackageResourceGooGetPtrType)(v)
}

func (*ospolicyResourcePackageResourceGooGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceGooGet)(nil)).Elem()
}

func (i *ospolicyResourcePackageResourceGooGetPtrType) ToOSPolicyResourcePackageResourceGooGetPtrOutput() OSPolicyResourcePackageResourceGooGetPtrOutput {
	return i.ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourcePackageResourceGooGetPtrType) ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceGooGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceGooGetPtrOutput)
}

func (i *ospolicyResourcePackageResourceGooGetPtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResourceGooGet] {
	return pulumix.Output[*OSPolicyResourcePackageResourceGooGet]{
		OutputState: i.ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(ctx).OutputState,
	}
}

// A package managed by GooGet. - install: `googet -noconfirm install package` - remove: `googet -noconfirm remove package`
type OSPolicyResourcePackageResourceGooGetOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceGooGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceGooGet)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceGooGetOutput) ToOSPolicyResourcePackageResourceGooGetOutput() OSPolicyResourcePackageResourceGooGetOutput {
	return o
}

func (o OSPolicyResourcePackageResourceGooGetOutput) ToOSPolicyResourcePackageResourceGooGetOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceGooGetOutput {
	return o
}

func (o OSPolicyResourcePackageResourceGooGetOutput) ToOSPolicyResourcePackageResourceGooGetPtrOutput() OSPolicyResourcePackageResourceGooGetPtrOutput {
	return o.ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceGooGetOutput) ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceGooGetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourcePackageResourceGooGet) *OSPolicyResourcePackageResourceGooGet {
		return &v
	}).(OSPolicyResourcePackageResourceGooGetPtrOutput)
}

func (o OSPolicyResourcePackageResourceGooGetOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceGooGet] {
	return pulumix.Output[OSPolicyResourcePackageResourceGooGet]{
		OutputState: o.OutputState,
	}
}

// Package name.
func (o OSPolicyResourcePackageResourceGooGetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceGooGet) string { return v.Name }).(pulumi.StringOutput)
}

type OSPolicyResourcePackageResourceGooGetPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceGooGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceGooGet)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceGooGetPtrOutput) ToOSPolicyResourcePackageResourceGooGetPtrOutput() OSPolicyResourcePackageResourceGooGetPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceGooGetPtrOutput) ToOSPolicyResourcePackageResourceGooGetPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceGooGetPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceGooGetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResourceGooGet] {
	return pulumix.Output[*OSPolicyResourcePackageResourceGooGet]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourcePackageResourceGooGetPtrOutput) Elem() OSPolicyResourcePackageResourceGooGetOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceGooGet) OSPolicyResourcePackageResourceGooGet {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourcePackageResourceGooGet
		return ret
	}).(OSPolicyResourcePackageResourceGooGetOutput)
}

// Package name.
func (o OSPolicyResourcePackageResourceGooGetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceGooGet) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// A package managed by GooGet. - install: `googet -noconfirm install package` - remove: `googet -noconfirm remove package`
type OSPolicyResourcePackageResourceGooGetResponse struct {
	// Package name.
	Name string `pulumi:"name"`
}

// A package managed by GooGet. - install: `googet -noconfirm install package` - remove: `googet -noconfirm remove package`
type OSPolicyResourcePackageResourceGooGetResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceGooGetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceGooGetResponse)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceGooGetResponseOutput) ToOSPolicyResourcePackageResourceGooGetResponseOutput() OSPolicyResourcePackageResourceGooGetResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceGooGetResponseOutput) ToOSPolicyResourcePackageResourceGooGetResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceGooGetResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceGooGetResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceGooGetResponse] {
	return pulumix.Output[OSPolicyResourcePackageResourceGooGetResponse]{
		OutputState: o.OutputState,
	}
}

// Package name.
func (o OSPolicyResourcePackageResourceGooGetResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceGooGetResponse) string { return v.Name }).(pulumi.StringOutput)
}

// An MSI package. MSI packages only support INSTALLED state.
type OSPolicyResourcePackageResourceMSI struct {
	// Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`.
	Properties []string `pulumi:"properties"`
	// The MSI package.
	Source OSPolicyResourceFile `pulumi:"source"`
}

// OSPolicyResourcePackageResourceMSIInput is an input type that accepts OSPolicyResourcePackageResourceMSIArgs and OSPolicyResourcePackageResourceMSIOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceMSIInput` via:
//
//	OSPolicyResourcePackageResourceMSIArgs{...}
type OSPolicyResourcePackageResourceMSIInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceMSIOutput() OSPolicyResourcePackageResourceMSIOutput
	ToOSPolicyResourcePackageResourceMSIOutputWithContext(context.Context) OSPolicyResourcePackageResourceMSIOutput
}

// An MSI package. MSI packages only support INSTALLED state.
type OSPolicyResourcePackageResourceMSIArgs struct {
	// Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`.
	Properties pulumi.StringArrayInput `pulumi:"properties"`
	// The MSI package.
	Source OSPolicyResourceFileInput `pulumi:"source"`
}

func (OSPolicyResourcePackageResourceMSIArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceMSI)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceMSIArgs) ToOSPolicyResourcePackageResourceMSIOutput() OSPolicyResourcePackageResourceMSIOutput {
	return i.ToOSPolicyResourcePackageResourceMSIOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceMSIArgs) ToOSPolicyResourcePackageResourceMSIOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceMSIOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceMSIOutput)
}

func (i OSPolicyResourcePackageResourceMSIArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceMSI] {
	return pulumix.Output[OSPolicyResourcePackageResourceMSI]{
		OutputState: i.ToOSPolicyResourcePackageResourceMSIOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourcePackageResourceMSIArgs) ToOSPolicyResourcePackageResourceMSIPtrOutput() OSPolicyResourcePackageResourceMSIPtrOutput {
	return i.ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceMSIArgs) ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceMSIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceMSIOutput).ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(ctx)
}

// OSPolicyResourcePackageResourceMSIPtrInput is an input type that accepts OSPolicyResourcePackageResourceMSIArgs, OSPolicyResourcePackageResourceMSIPtr and OSPolicyResourcePackageResourceMSIPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceMSIPtrInput` via:
//
//	        OSPolicyResourcePackageResourceMSIArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourcePackageResourceMSIPtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceMSIPtrOutput() OSPolicyResourcePackageResourceMSIPtrOutput
	ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(context.Context) OSPolicyResourcePackageResourceMSIPtrOutput
}

type ospolicyResourcePackageResourceMSIPtrType OSPolicyResourcePackageResourceMSIArgs

func OSPolicyResourcePackageResourceMSIPtr(v *OSPolicyResourcePackageResourceMSIArgs) OSPolicyResourcePackageResourceMSIPtrInput {
	return (*ospolicyResourcePackageResourceMSIPtrType)(v)
}

func (*ospolicyResourcePackageResourceMSIPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceMSI)(nil)).Elem()
}

func (i *ospolicyResourcePackageResourceMSIPtrType) ToOSPolicyResourcePackageResourceMSIPtrOutput() OSPolicyResourcePackageResourceMSIPtrOutput {
	return i.ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourcePackageResourceMSIPtrType) ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceMSIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceMSIPtrOutput)
}

func (i *ospolicyResourcePackageResourceMSIPtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResourceMSI] {
	return pulumix.Output[*OSPolicyResourcePackageResourceMSI]{
		OutputState: i.ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(ctx).OutputState,
	}
}

// An MSI package. MSI packages only support INSTALLED state.
type OSPolicyResourcePackageResourceMSIOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceMSIOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceMSI)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceMSIOutput) ToOSPolicyResourcePackageResourceMSIOutput() OSPolicyResourcePackageResourceMSIOutput {
	return o
}

func (o OSPolicyResourcePackageResourceMSIOutput) ToOSPolicyResourcePackageResourceMSIOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceMSIOutput {
	return o
}

func (o OSPolicyResourcePackageResourceMSIOutput) ToOSPolicyResourcePackageResourceMSIPtrOutput() OSPolicyResourcePackageResourceMSIPtrOutput {
	return o.ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceMSIOutput) ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceMSIPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourcePackageResourceMSI) *OSPolicyResourcePackageResourceMSI {
		return &v
	}).(OSPolicyResourcePackageResourceMSIPtrOutput)
}

func (o OSPolicyResourcePackageResourceMSIOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceMSI] {
	return pulumix.Output[OSPolicyResourcePackageResourceMSI]{
		OutputState: o.OutputState,
	}
}

// Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`.
func (o OSPolicyResourcePackageResourceMSIOutput) Properties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceMSI) []string { return v.Properties }).(pulumi.StringArrayOutput)
}

// The MSI package.
func (o OSPolicyResourcePackageResourceMSIOutput) Source() OSPolicyResourceFileOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceMSI) OSPolicyResourceFile { return v.Source }).(OSPolicyResourceFileOutput)
}

type OSPolicyResourcePackageResourceMSIPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceMSIPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceMSI)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceMSIPtrOutput) ToOSPolicyResourcePackageResourceMSIPtrOutput() OSPolicyResourcePackageResourceMSIPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceMSIPtrOutput) ToOSPolicyResourcePackageResourceMSIPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceMSIPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceMSIPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResourceMSI] {
	return pulumix.Output[*OSPolicyResourcePackageResourceMSI]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourcePackageResourceMSIPtrOutput) Elem() OSPolicyResourcePackageResourceMSIOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceMSI) OSPolicyResourcePackageResourceMSI {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourcePackageResourceMSI
		return ret
	}).(OSPolicyResourcePackageResourceMSIOutput)
}

// Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`.
func (o OSPolicyResourcePackageResourceMSIPtrOutput) Properties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceMSI) []string {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.StringArrayOutput)
}

// The MSI package.
func (o OSPolicyResourcePackageResourceMSIPtrOutput) Source() OSPolicyResourceFilePtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceMSI) *OSPolicyResourceFile {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(OSPolicyResourceFilePtrOutput)
}

// An MSI package. MSI packages only support INSTALLED state.
type OSPolicyResourcePackageResourceMSIResponse struct {
	// Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`.
	Properties []string `pulumi:"properties"`
	// The MSI package.
	Source OSPolicyResourceFileResponse `pulumi:"source"`
}

// An MSI package. MSI packages only support INSTALLED state.
type OSPolicyResourcePackageResourceMSIResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceMSIResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceMSIResponse)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceMSIResponseOutput) ToOSPolicyResourcePackageResourceMSIResponseOutput() OSPolicyResourcePackageResourceMSIResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceMSIResponseOutput) ToOSPolicyResourcePackageResourceMSIResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceMSIResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceMSIResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceMSIResponse] {
	return pulumix.Output[OSPolicyResourcePackageResourceMSIResponse]{
		OutputState: o.OutputState,
	}
}

// Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`.
func (o OSPolicyResourcePackageResourceMSIResponseOutput) Properties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceMSIResponse) []string { return v.Properties }).(pulumi.StringArrayOutput)
}

// The MSI package.
func (o OSPolicyResourcePackageResourceMSIResponseOutput) Source() OSPolicyResourceFileResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceMSIResponse) OSPolicyResourceFileResponse { return v.Source }).(OSPolicyResourceFileResponseOutput)
}

// An RPM package file. RPM packages only support INSTALLED state.
type OSPolicyResourcePackageResourceRPM struct {
	// Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm`
	PullDeps *bool `pulumi:"pullDeps"`
	// An rpm package.
	Source OSPolicyResourceFile `pulumi:"source"`
}

// OSPolicyResourcePackageResourceRPMInput is an input type that accepts OSPolicyResourcePackageResourceRPMArgs and OSPolicyResourcePackageResourceRPMOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceRPMInput` via:
//
//	OSPolicyResourcePackageResourceRPMArgs{...}
type OSPolicyResourcePackageResourceRPMInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceRPMOutput() OSPolicyResourcePackageResourceRPMOutput
	ToOSPolicyResourcePackageResourceRPMOutputWithContext(context.Context) OSPolicyResourcePackageResourceRPMOutput
}

// An RPM package file. RPM packages only support INSTALLED state.
type OSPolicyResourcePackageResourceRPMArgs struct {
	// Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm`
	PullDeps pulumi.BoolPtrInput `pulumi:"pullDeps"`
	// An rpm package.
	Source OSPolicyResourceFileInput `pulumi:"source"`
}

func (OSPolicyResourcePackageResourceRPMArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceRPM)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceRPMArgs) ToOSPolicyResourcePackageResourceRPMOutput() OSPolicyResourcePackageResourceRPMOutput {
	return i.ToOSPolicyResourcePackageResourceRPMOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceRPMArgs) ToOSPolicyResourcePackageResourceRPMOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceRPMOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceRPMOutput)
}

func (i OSPolicyResourcePackageResourceRPMArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceRPM] {
	return pulumix.Output[OSPolicyResourcePackageResourceRPM]{
		OutputState: i.ToOSPolicyResourcePackageResourceRPMOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourcePackageResourceRPMArgs) ToOSPolicyResourcePackageResourceRPMPtrOutput() OSPolicyResourcePackageResourceRPMPtrOutput {
	return i.ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceRPMArgs) ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceRPMPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceRPMOutput).ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(ctx)
}

// OSPolicyResourcePackageResourceRPMPtrInput is an input type that accepts OSPolicyResourcePackageResourceRPMArgs, OSPolicyResourcePackageResourceRPMPtr and OSPolicyResourcePackageResourceRPMPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceRPMPtrInput` via:
//
//	        OSPolicyResourcePackageResourceRPMArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourcePackageResourceRPMPtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceRPMPtrOutput() OSPolicyResourcePackageResourceRPMPtrOutput
	ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(context.Context) OSPolicyResourcePackageResourceRPMPtrOutput
}

type ospolicyResourcePackageResourceRPMPtrType OSPolicyResourcePackageResourceRPMArgs

func OSPolicyResourcePackageResourceRPMPtr(v *OSPolicyResourcePackageResourceRPMArgs) OSPolicyResourcePackageResourceRPMPtrInput {
	return (*ospolicyResourcePackageResourceRPMPtrType)(v)
}

func (*ospolicyResourcePackageResourceRPMPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceRPM)(nil)).Elem()
}

func (i *ospolicyResourcePackageResourceRPMPtrType) ToOSPolicyResourcePackageResourceRPMPtrOutput() OSPolicyResourcePackageResourceRPMPtrOutput {
	return i.ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourcePackageResourceRPMPtrType) ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceRPMPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceRPMPtrOutput)
}

func (i *ospolicyResourcePackageResourceRPMPtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResourceRPM] {
	return pulumix.Output[*OSPolicyResourcePackageResourceRPM]{
		OutputState: i.ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(ctx).OutputState,
	}
}

// An RPM package file. RPM packages only support INSTALLED state.
type OSPolicyResourcePackageResourceRPMOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceRPMOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceRPM)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceRPMOutput) ToOSPolicyResourcePackageResourceRPMOutput() OSPolicyResourcePackageResourceRPMOutput {
	return o
}

func (o OSPolicyResourcePackageResourceRPMOutput) ToOSPolicyResourcePackageResourceRPMOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceRPMOutput {
	return o
}

func (o OSPolicyResourcePackageResourceRPMOutput) ToOSPolicyResourcePackageResourceRPMPtrOutput() OSPolicyResourcePackageResourceRPMPtrOutput {
	return o.ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceRPMOutput) ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceRPMPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourcePackageResourceRPM) *OSPolicyResourcePackageResourceRPM {
		return &v
	}).(OSPolicyResourcePackageResourceRPMPtrOutput)
}

func (o OSPolicyResourcePackageResourceRPMOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceRPM] {
	return pulumix.Output[OSPolicyResourcePackageResourceRPM]{
		OutputState: o.OutputState,
	}
}

// Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm`
func (o OSPolicyResourcePackageResourceRPMOutput) PullDeps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceRPM) *bool { return v.PullDeps }).(pulumi.BoolPtrOutput)
}

// An rpm package.
func (o OSPolicyResourcePackageResourceRPMOutput) Source() OSPolicyResourceFileOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceRPM) OSPolicyResourceFile { return v.Source }).(OSPolicyResourceFileOutput)
}

type OSPolicyResourcePackageResourceRPMPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceRPMPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceRPM)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceRPMPtrOutput) ToOSPolicyResourcePackageResourceRPMPtrOutput() OSPolicyResourcePackageResourceRPMPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceRPMPtrOutput) ToOSPolicyResourcePackageResourceRPMPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceRPMPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceRPMPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResourceRPM] {
	return pulumix.Output[*OSPolicyResourcePackageResourceRPM]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourcePackageResourceRPMPtrOutput) Elem() OSPolicyResourcePackageResourceRPMOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceRPM) OSPolicyResourcePackageResourceRPM {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourcePackageResourceRPM
		return ret
	}).(OSPolicyResourcePackageResourceRPMOutput)
}

// Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm`
func (o OSPolicyResourcePackageResourceRPMPtrOutput) PullDeps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceRPM) *bool {
		if v == nil {
			return nil
		}
		return v.PullDeps
	}).(pulumi.BoolPtrOutput)
}

// An rpm package.
func (o OSPolicyResourcePackageResourceRPMPtrOutput) Source() OSPolicyResourceFilePtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceRPM) *OSPolicyResourceFile {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(OSPolicyResourceFilePtrOutput)
}

// An RPM package file. RPM packages only support INSTALLED state.
type OSPolicyResourcePackageResourceRPMResponse struct {
	// Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm`
	PullDeps bool `pulumi:"pullDeps"`
	// An rpm package.
	Source OSPolicyResourceFileResponse `pulumi:"source"`
}

// An RPM package file. RPM packages only support INSTALLED state.
type OSPolicyResourcePackageResourceRPMResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceRPMResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceRPMResponse)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceRPMResponseOutput) ToOSPolicyResourcePackageResourceRPMResponseOutput() OSPolicyResourcePackageResourceRPMResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceRPMResponseOutput) ToOSPolicyResourcePackageResourceRPMResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceRPMResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceRPMResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceRPMResponse] {
	return pulumix.Output[OSPolicyResourcePackageResourceRPMResponse]{
		OutputState: o.OutputState,
	}
}

// Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm`
func (o OSPolicyResourcePackageResourceRPMResponseOutput) PullDeps() pulumi.BoolOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceRPMResponse) bool { return v.PullDeps }).(pulumi.BoolOutput)
}

// An rpm package.
func (o OSPolicyResourcePackageResourceRPMResponseOutput) Source() OSPolicyResourceFileResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceRPMResponse) OSPolicyResourceFileResponse { return v.Source }).(OSPolicyResourceFileResponseOutput)
}

// A resource that manages a system package.
type OSPolicyResourcePackageResourceResponse struct {
	// A package managed by Apt.
	Apt OSPolicyResourcePackageResourceAPTResponse `pulumi:"apt"`
	// A deb package file.
	Deb OSPolicyResourcePackageResourceDebResponse `pulumi:"deb"`
	// The desired state the agent should maintain for this package.
	DesiredState string `pulumi:"desiredState"`
	// A package managed by GooGet.
	Googet OSPolicyResourcePackageResourceGooGetResponse `pulumi:"googet"`
	// An MSI package.
	Msi OSPolicyResourcePackageResourceMSIResponse `pulumi:"msi"`
	// An rpm package file.
	Rpm OSPolicyResourcePackageResourceRPMResponse `pulumi:"rpm"`
	// A package managed by YUM.
	Yum OSPolicyResourcePackageResourceYUMResponse `pulumi:"yum"`
	// A package managed by Zypper.
	Zypper OSPolicyResourcePackageResourceZypperResponse `pulumi:"zypper"`
}

// A resource that manages a system package.
type OSPolicyResourcePackageResourceResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceResponse)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceResponseOutput) ToOSPolicyResourcePackageResourceResponseOutput() OSPolicyResourcePackageResourceResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceResponseOutput) ToOSPolicyResourcePackageResourceResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceResponse] {
	return pulumix.Output[OSPolicyResourcePackageResourceResponse]{
		OutputState: o.OutputState,
	}
}

// A package managed by Apt.
func (o OSPolicyResourcePackageResourceResponseOutput) Apt() OSPolicyResourcePackageResourceAPTResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceResponse) OSPolicyResourcePackageResourceAPTResponse {
		return v.Apt
	}).(OSPolicyResourcePackageResourceAPTResponseOutput)
}

// A deb package file.
func (o OSPolicyResourcePackageResourceResponseOutput) Deb() OSPolicyResourcePackageResourceDebResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceResponse) OSPolicyResourcePackageResourceDebResponse {
		return v.Deb
	}).(OSPolicyResourcePackageResourceDebResponseOutput)
}

// The desired state the agent should maintain for this package.
func (o OSPolicyResourcePackageResourceResponseOutput) DesiredState() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceResponse) string { return v.DesiredState }).(pulumi.StringOutput)
}

// A package managed by GooGet.
func (o OSPolicyResourcePackageResourceResponseOutput) Googet() OSPolicyResourcePackageResourceGooGetResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceResponse) OSPolicyResourcePackageResourceGooGetResponse {
		return v.Googet
	}).(OSPolicyResourcePackageResourceGooGetResponseOutput)
}

// An MSI package.
func (o OSPolicyResourcePackageResourceResponseOutput) Msi() OSPolicyResourcePackageResourceMSIResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceResponse) OSPolicyResourcePackageResourceMSIResponse {
		return v.Msi
	}).(OSPolicyResourcePackageResourceMSIResponseOutput)
}

// An rpm package file.
func (o OSPolicyResourcePackageResourceResponseOutput) Rpm() OSPolicyResourcePackageResourceRPMResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceResponse) OSPolicyResourcePackageResourceRPMResponse {
		return v.Rpm
	}).(OSPolicyResourcePackageResourceRPMResponseOutput)
}

// A package managed by YUM.
func (o OSPolicyResourcePackageResourceResponseOutput) Yum() OSPolicyResourcePackageResourceYUMResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceResponse) OSPolicyResourcePackageResourceYUMResponse {
		return v.Yum
	}).(OSPolicyResourcePackageResourceYUMResponseOutput)
}

// A package managed by Zypper.
func (o OSPolicyResourcePackageResourceResponseOutput) Zypper() OSPolicyResourcePackageResourceZypperResponseOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceResponse) OSPolicyResourcePackageResourceZypperResponse {
		return v.Zypper
	}).(OSPolicyResourcePackageResourceZypperResponseOutput)
}

// A package managed by YUM. - install: `yum -y install package` - remove: `yum -y remove package`
type OSPolicyResourcePackageResourceYUM struct {
	// Package name.
	Name string `pulumi:"name"`
}

// OSPolicyResourcePackageResourceYUMInput is an input type that accepts OSPolicyResourcePackageResourceYUMArgs and OSPolicyResourcePackageResourceYUMOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceYUMInput` via:
//
//	OSPolicyResourcePackageResourceYUMArgs{...}
type OSPolicyResourcePackageResourceYUMInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceYUMOutput() OSPolicyResourcePackageResourceYUMOutput
	ToOSPolicyResourcePackageResourceYUMOutputWithContext(context.Context) OSPolicyResourcePackageResourceYUMOutput
}

// A package managed by YUM. - install: `yum -y install package` - remove: `yum -y remove package`
type OSPolicyResourcePackageResourceYUMArgs struct {
	// Package name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (OSPolicyResourcePackageResourceYUMArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceYUM)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceYUMArgs) ToOSPolicyResourcePackageResourceYUMOutput() OSPolicyResourcePackageResourceYUMOutput {
	return i.ToOSPolicyResourcePackageResourceYUMOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceYUMArgs) ToOSPolicyResourcePackageResourceYUMOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceYUMOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceYUMOutput)
}

func (i OSPolicyResourcePackageResourceYUMArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceYUM] {
	return pulumix.Output[OSPolicyResourcePackageResourceYUM]{
		OutputState: i.ToOSPolicyResourcePackageResourceYUMOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourcePackageResourceYUMArgs) ToOSPolicyResourcePackageResourceYUMPtrOutput() OSPolicyResourcePackageResourceYUMPtrOutput {
	return i.ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceYUMArgs) ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceYUMPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceYUMOutput).ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(ctx)
}

// OSPolicyResourcePackageResourceYUMPtrInput is an input type that accepts OSPolicyResourcePackageResourceYUMArgs, OSPolicyResourcePackageResourceYUMPtr and OSPolicyResourcePackageResourceYUMPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceYUMPtrInput` via:
//
//	        OSPolicyResourcePackageResourceYUMArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourcePackageResourceYUMPtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceYUMPtrOutput() OSPolicyResourcePackageResourceYUMPtrOutput
	ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(context.Context) OSPolicyResourcePackageResourceYUMPtrOutput
}

type ospolicyResourcePackageResourceYUMPtrType OSPolicyResourcePackageResourceYUMArgs

func OSPolicyResourcePackageResourceYUMPtr(v *OSPolicyResourcePackageResourceYUMArgs) OSPolicyResourcePackageResourceYUMPtrInput {
	return (*ospolicyResourcePackageResourceYUMPtrType)(v)
}

func (*ospolicyResourcePackageResourceYUMPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceYUM)(nil)).Elem()
}

func (i *ospolicyResourcePackageResourceYUMPtrType) ToOSPolicyResourcePackageResourceYUMPtrOutput() OSPolicyResourcePackageResourceYUMPtrOutput {
	return i.ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourcePackageResourceYUMPtrType) ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceYUMPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceYUMPtrOutput)
}

func (i *ospolicyResourcePackageResourceYUMPtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResourceYUM] {
	return pulumix.Output[*OSPolicyResourcePackageResourceYUM]{
		OutputState: i.ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(ctx).OutputState,
	}
}

// A package managed by YUM. - install: `yum -y install package` - remove: `yum -y remove package`
type OSPolicyResourcePackageResourceYUMOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceYUMOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceYUM)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceYUMOutput) ToOSPolicyResourcePackageResourceYUMOutput() OSPolicyResourcePackageResourceYUMOutput {
	return o
}

func (o OSPolicyResourcePackageResourceYUMOutput) ToOSPolicyResourcePackageResourceYUMOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceYUMOutput {
	return o
}

func (o OSPolicyResourcePackageResourceYUMOutput) ToOSPolicyResourcePackageResourceYUMPtrOutput() OSPolicyResourcePackageResourceYUMPtrOutput {
	return o.ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceYUMOutput) ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceYUMPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourcePackageResourceYUM) *OSPolicyResourcePackageResourceYUM {
		return &v
	}).(OSPolicyResourcePackageResourceYUMPtrOutput)
}

func (o OSPolicyResourcePackageResourceYUMOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceYUM] {
	return pulumix.Output[OSPolicyResourcePackageResourceYUM]{
		OutputState: o.OutputState,
	}
}

// Package name.
func (o OSPolicyResourcePackageResourceYUMOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceYUM) string { return v.Name }).(pulumi.StringOutput)
}

type OSPolicyResourcePackageResourceYUMPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceYUMPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceYUM)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceYUMPtrOutput) ToOSPolicyResourcePackageResourceYUMPtrOutput() OSPolicyResourcePackageResourceYUMPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceYUMPtrOutput) ToOSPolicyResourcePackageResourceYUMPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceYUMPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceYUMPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResourceYUM] {
	return pulumix.Output[*OSPolicyResourcePackageResourceYUM]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourcePackageResourceYUMPtrOutput) Elem() OSPolicyResourcePackageResourceYUMOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceYUM) OSPolicyResourcePackageResourceYUM {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourcePackageResourceYUM
		return ret
	}).(OSPolicyResourcePackageResourceYUMOutput)
}

// Package name.
func (o OSPolicyResourcePackageResourceYUMPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceYUM) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// A package managed by YUM. - install: `yum -y install package` - remove: `yum -y remove package`
type OSPolicyResourcePackageResourceYUMResponse struct {
	// Package name.
	Name string `pulumi:"name"`
}

// A package managed by YUM. - install: `yum -y install package` - remove: `yum -y remove package`
type OSPolicyResourcePackageResourceYUMResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceYUMResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceYUMResponse)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceYUMResponseOutput) ToOSPolicyResourcePackageResourceYUMResponseOutput() OSPolicyResourcePackageResourceYUMResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceYUMResponseOutput) ToOSPolicyResourcePackageResourceYUMResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceYUMResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceYUMResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceYUMResponse] {
	return pulumix.Output[OSPolicyResourcePackageResourceYUMResponse]{
		OutputState: o.OutputState,
	}
}

// Package name.
func (o OSPolicyResourcePackageResourceYUMResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceYUMResponse) string { return v.Name }).(pulumi.StringOutput)
}

// A package managed by Zypper. - install: `zypper -y install package` - remove: `zypper -y rm package`
type OSPolicyResourcePackageResourceZypper struct {
	// Package name.
	Name string `pulumi:"name"`
}

// OSPolicyResourcePackageResourceZypperInput is an input type that accepts OSPolicyResourcePackageResourceZypperArgs and OSPolicyResourcePackageResourceZypperOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceZypperInput` via:
//
//	OSPolicyResourcePackageResourceZypperArgs{...}
type OSPolicyResourcePackageResourceZypperInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceZypperOutput() OSPolicyResourcePackageResourceZypperOutput
	ToOSPolicyResourcePackageResourceZypperOutputWithContext(context.Context) OSPolicyResourcePackageResourceZypperOutput
}

// A package managed by Zypper. - install: `zypper -y install package` - remove: `zypper -y rm package`
type OSPolicyResourcePackageResourceZypperArgs struct {
	// Package name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (OSPolicyResourcePackageResourceZypperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceZypper)(nil)).Elem()
}

func (i OSPolicyResourcePackageResourceZypperArgs) ToOSPolicyResourcePackageResourceZypperOutput() OSPolicyResourcePackageResourceZypperOutput {
	return i.ToOSPolicyResourcePackageResourceZypperOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceZypperArgs) ToOSPolicyResourcePackageResourceZypperOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceZypperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceZypperOutput)
}

func (i OSPolicyResourcePackageResourceZypperArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceZypper] {
	return pulumix.Output[OSPolicyResourcePackageResourceZypper]{
		OutputState: i.ToOSPolicyResourcePackageResourceZypperOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourcePackageResourceZypperArgs) ToOSPolicyResourcePackageResourceZypperPtrOutput() OSPolicyResourcePackageResourceZypperPtrOutput {
	return i.ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourcePackageResourceZypperArgs) ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceZypperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceZypperOutput).ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(ctx)
}

// OSPolicyResourcePackageResourceZypperPtrInput is an input type that accepts OSPolicyResourcePackageResourceZypperArgs, OSPolicyResourcePackageResourceZypperPtr and OSPolicyResourcePackageResourceZypperPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourcePackageResourceZypperPtrInput` via:
//
//	        OSPolicyResourcePackageResourceZypperArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourcePackageResourceZypperPtrInput interface {
	pulumi.Input

	ToOSPolicyResourcePackageResourceZypperPtrOutput() OSPolicyResourcePackageResourceZypperPtrOutput
	ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(context.Context) OSPolicyResourcePackageResourceZypperPtrOutput
}

type ospolicyResourcePackageResourceZypperPtrType OSPolicyResourcePackageResourceZypperArgs

func OSPolicyResourcePackageResourceZypperPtr(v *OSPolicyResourcePackageResourceZypperArgs) OSPolicyResourcePackageResourceZypperPtrInput {
	return (*ospolicyResourcePackageResourceZypperPtrType)(v)
}

func (*ospolicyResourcePackageResourceZypperPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceZypper)(nil)).Elem()
}

func (i *ospolicyResourcePackageResourceZypperPtrType) ToOSPolicyResourcePackageResourceZypperPtrOutput() OSPolicyResourcePackageResourceZypperPtrOutput {
	return i.ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourcePackageResourceZypperPtrType) ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceZypperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourcePackageResourceZypperPtrOutput)
}

func (i *ospolicyResourcePackageResourceZypperPtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResourceZypper] {
	return pulumix.Output[*OSPolicyResourcePackageResourceZypper]{
		OutputState: i.ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(ctx).OutputState,
	}
}

// A package managed by Zypper. - install: `zypper -y install package` - remove: `zypper -y rm package`
type OSPolicyResourcePackageResourceZypperOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceZypperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceZypper)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceZypperOutput) ToOSPolicyResourcePackageResourceZypperOutput() OSPolicyResourcePackageResourceZypperOutput {
	return o
}

func (o OSPolicyResourcePackageResourceZypperOutput) ToOSPolicyResourcePackageResourceZypperOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceZypperOutput {
	return o
}

func (o OSPolicyResourcePackageResourceZypperOutput) ToOSPolicyResourcePackageResourceZypperPtrOutput() OSPolicyResourcePackageResourceZypperPtrOutput {
	return o.ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourcePackageResourceZypperOutput) ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceZypperPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourcePackageResourceZypper) *OSPolicyResourcePackageResourceZypper {
		return &v
	}).(OSPolicyResourcePackageResourceZypperPtrOutput)
}

func (o OSPolicyResourcePackageResourceZypperOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceZypper] {
	return pulumix.Output[OSPolicyResourcePackageResourceZypper]{
		OutputState: o.OutputState,
	}
}

// Package name.
func (o OSPolicyResourcePackageResourceZypperOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceZypper) string { return v.Name }).(pulumi.StringOutput)
}

type OSPolicyResourcePackageResourceZypperPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceZypperPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourcePackageResourceZypper)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceZypperPtrOutput) ToOSPolicyResourcePackageResourceZypperPtrOutput() OSPolicyResourcePackageResourceZypperPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceZypperPtrOutput) ToOSPolicyResourcePackageResourceZypperPtrOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceZypperPtrOutput {
	return o
}

func (o OSPolicyResourcePackageResourceZypperPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourcePackageResourceZypper] {
	return pulumix.Output[*OSPolicyResourcePackageResourceZypper]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourcePackageResourceZypperPtrOutput) Elem() OSPolicyResourcePackageResourceZypperOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceZypper) OSPolicyResourcePackageResourceZypper {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourcePackageResourceZypper
		return ret
	}).(OSPolicyResourcePackageResourceZypperOutput)
}

// Package name.
func (o OSPolicyResourcePackageResourceZypperPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourcePackageResourceZypper) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// A package managed by Zypper. - install: `zypper -y install package` - remove: `zypper -y rm package`
type OSPolicyResourcePackageResourceZypperResponse struct {
	// Package name.
	Name string `pulumi:"name"`
}

// A package managed by Zypper. - install: `zypper -y install package` - remove: `zypper -y rm package`
type OSPolicyResourcePackageResourceZypperResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourcePackageResourceZypperResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourcePackageResourceZypperResponse)(nil)).Elem()
}

func (o OSPolicyResourcePackageResourceZypperResponseOutput) ToOSPolicyResourcePackageResourceZypperResponseOutput() OSPolicyResourcePackageResourceZypperResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceZypperResponseOutput) ToOSPolicyResourcePackageResourceZypperResponseOutputWithContext(ctx context.Context) OSPolicyResourcePackageResourceZypperResponseOutput {
	return o
}

func (o OSPolicyResourcePackageResourceZypperResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourcePackageResourceZypperResponse] {
	return pulumix.Output[OSPolicyResourcePackageResourceZypperResponse]{
		OutputState: o.OutputState,
	}
}

// Package name.
func (o OSPolicyResourcePackageResourceZypperResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourcePackageResourceZypperResponse) string { return v.Name }).(pulumi.StringOutput)
}

// A resource that manages a package repository.
type OSPolicyResourceRepositoryResource struct {
	// An Apt Repository.
	Apt *OSPolicyResourceRepositoryResourceAptRepository `pulumi:"apt"`
	// A Goo Repository.
	Goo *OSPolicyResourceRepositoryResourceGooRepository `pulumi:"goo"`
	// A Yum Repository.
	Yum *OSPolicyResourceRepositoryResourceYumRepository `pulumi:"yum"`
	// A Zypper Repository.
	Zypper *OSPolicyResourceRepositoryResourceZypperRepository `pulumi:"zypper"`
}

// OSPolicyResourceRepositoryResourceInput is an input type that accepts OSPolicyResourceRepositoryResourceArgs and OSPolicyResourceRepositoryResourceOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceInput` via:
//
//	OSPolicyResourceRepositoryResourceArgs{...}
type OSPolicyResourceRepositoryResourceInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceOutput() OSPolicyResourceRepositoryResourceOutput
	ToOSPolicyResourceRepositoryResourceOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceOutput
}

// A resource that manages a package repository.
type OSPolicyResourceRepositoryResourceArgs struct {
	// An Apt Repository.
	Apt OSPolicyResourceRepositoryResourceAptRepositoryPtrInput `pulumi:"apt"`
	// A Goo Repository.
	Goo OSPolicyResourceRepositoryResourceGooRepositoryPtrInput `pulumi:"goo"`
	// A Yum Repository.
	Yum OSPolicyResourceRepositoryResourceYumRepositoryPtrInput `pulumi:"yum"`
	// A Zypper Repository.
	Zypper OSPolicyResourceRepositoryResourceZypperRepositoryPtrInput `pulumi:"zypper"`
}

func (OSPolicyResourceRepositoryResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResource)(nil)).Elem()
}

func (i OSPolicyResourceRepositoryResourceArgs) ToOSPolicyResourceRepositoryResourceOutput() OSPolicyResourceRepositoryResourceOutput {
	return i.ToOSPolicyResourceRepositoryResourceOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceArgs) ToOSPolicyResourceRepositoryResourceOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceOutput)
}

func (i OSPolicyResourceRepositoryResourceArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceRepositoryResource] {
	return pulumix.Output[OSPolicyResourceRepositoryResource]{
		OutputState: i.ToOSPolicyResourceRepositoryResourceOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourceRepositoryResourceArgs) ToOSPolicyResourceRepositoryResourcePtrOutput() OSPolicyResourceRepositoryResourcePtrOutput {
	return i.ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceArgs) ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceOutput).ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(ctx)
}

// OSPolicyResourceRepositoryResourcePtrInput is an input type that accepts OSPolicyResourceRepositoryResourceArgs, OSPolicyResourceRepositoryResourcePtr and OSPolicyResourceRepositoryResourcePtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourcePtrInput` via:
//
//	        OSPolicyResourceRepositoryResourceArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourceRepositoryResourcePtrInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourcePtrOutput() OSPolicyResourceRepositoryResourcePtrOutput
	ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(context.Context) OSPolicyResourceRepositoryResourcePtrOutput
}

type ospolicyResourceRepositoryResourcePtrType OSPolicyResourceRepositoryResourceArgs

func OSPolicyResourceRepositoryResourcePtr(v *OSPolicyResourceRepositoryResourceArgs) OSPolicyResourceRepositoryResourcePtrInput {
	return (*ospolicyResourceRepositoryResourcePtrType)(v)
}

func (*ospolicyResourceRepositoryResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResource)(nil)).Elem()
}

func (i *ospolicyResourceRepositoryResourcePtrType) ToOSPolicyResourceRepositoryResourcePtrOutput() OSPolicyResourceRepositoryResourcePtrOutput {
	return i.ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceRepositoryResourcePtrType) ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourcePtrOutput)
}

func (i *ospolicyResourceRepositoryResourcePtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceRepositoryResource] {
	return pulumix.Output[*OSPolicyResourceRepositoryResource]{
		OutputState: i.ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(ctx).OutputState,
	}
}

// A resource that manages a package repository.
type OSPolicyResourceRepositoryResourceOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResource)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceOutput) ToOSPolicyResourceRepositoryResourceOutput() OSPolicyResourceRepositoryResourceOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceOutput) ToOSPolicyResourceRepositoryResourceOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceOutput) ToOSPolicyResourceRepositoryResourcePtrOutput() OSPolicyResourceRepositoryResourcePtrOutput {
	return o.ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceRepositoryResourceOutput) ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResource {
		return &v
	}).(OSPolicyResourceRepositoryResourcePtrOutput)
}

func (o OSPolicyResourceRepositoryResourceOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceRepositoryResource] {
	return pulumix.Output[OSPolicyResourceRepositoryResource]{
		OutputState: o.OutputState,
	}
}

// An Apt Repository.
func (o OSPolicyResourceRepositoryResourceOutput) Apt() OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResourceAptRepository {
		return v.Apt
	}).(OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput)
}

// A Goo Repository.
func (o OSPolicyResourceRepositoryResourceOutput) Goo() OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResourceGooRepository {
		return v.Goo
	}).(OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput)
}

// A Yum Repository.
func (o OSPolicyResourceRepositoryResourceOutput) Yum() OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResourceYumRepository {
		return v.Yum
	}).(OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput)
}

// A Zypper Repository.
func (o OSPolicyResourceRepositoryResourceOutput) Zypper() OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResourceZypperRepository {
		return v.Zypper
	}).(OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput)
}

type OSPolicyResourceRepositoryResourcePtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResource)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourcePtrOutput) ToOSPolicyResourceRepositoryResourcePtrOutput() OSPolicyResourceRepositoryResourcePtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourcePtrOutput) ToOSPolicyResourceRepositoryResourcePtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourcePtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceRepositoryResource] {
	return pulumix.Output[*OSPolicyResourceRepositoryResource]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceRepositoryResourcePtrOutput) Elem() OSPolicyResourceRepositoryResourceOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResource) OSPolicyResourceRepositoryResource {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourceRepositoryResource
		return ret
	}).(OSPolicyResourceRepositoryResourceOutput)
}

// An Apt Repository.
func (o OSPolicyResourceRepositoryResourcePtrOutput) Apt() OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResourceAptRepository {
		if v == nil {
			return nil
		}
		return v.Apt
	}).(OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput)
}

// A Goo Repository.
func (o OSPolicyResourceRepositoryResourcePtrOutput) Goo() OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResourceGooRepository {
		if v == nil {
			return nil
		}
		return v.Goo
	}).(OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput)
}

// A Yum Repository.
func (o OSPolicyResourceRepositoryResourcePtrOutput) Yum() OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResourceYumRepository {
		if v == nil {
			return nil
		}
		return v.Yum
	}).(OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput)
}

// A Zypper Repository.
func (o OSPolicyResourceRepositoryResourcePtrOutput) Zypper() OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResource) *OSPolicyResourceRepositoryResourceZypperRepository {
		if v == nil {
			return nil
		}
		return v.Zypper
	}).(OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput)
}

// Represents a single apt package repository. These will be added to a repo file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`.
type OSPolicyResourceRepositoryResourceAptRepository struct {
	// Type of archive files in this repository.
	ArchiveType OSPolicyResourceRepositoryResourceAptRepositoryArchiveType `pulumi:"archiveType"`
	// List of components for this repository. Must contain at least one item.
	Components []string `pulumi:"components"`
	// Distribution of this repository.
	Distribution string `pulumi:"distribution"`
	// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
	GpgKey *string `pulumi:"gpgKey"`
	// URI for this repository.
	Uri string `pulumi:"uri"`
}

// OSPolicyResourceRepositoryResourceAptRepositoryInput is an input type that accepts OSPolicyResourceRepositoryResourceAptRepositoryArgs and OSPolicyResourceRepositoryResourceAptRepositoryOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceAptRepositoryInput` via:
//
//	OSPolicyResourceRepositoryResourceAptRepositoryArgs{...}
type OSPolicyResourceRepositoryResourceAptRepositoryInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceAptRepositoryOutput() OSPolicyResourceRepositoryResourceAptRepositoryOutput
	ToOSPolicyResourceRepositoryResourceAptRepositoryOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceAptRepositoryOutput
}

// Represents a single apt package repository. These will be added to a repo file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`.
type OSPolicyResourceRepositoryResourceAptRepositoryArgs struct {
	// Type of archive files in this repository.
	ArchiveType OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeInput `pulumi:"archiveType"`
	// List of components for this repository. Must contain at least one item.
	Components pulumi.StringArrayInput `pulumi:"components"`
	// Distribution of this repository.
	Distribution pulumi.StringInput `pulumi:"distribution"`
	// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
	GpgKey pulumi.StringPtrInput `pulumi:"gpgKey"`
	// URI for this repository.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (OSPolicyResourceRepositoryResourceAptRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceAptRepository)(nil)).Elem()
}

func (i OSPolicyResourceRepositoryResourceAptRepositoryArgs) ToOSPolicyResourceRepositoryResourceAptRepositoryOutput() OSPolicyResourceRepositoryResourceAptRepositoryOutput {
	return i.ToOSPolicyResourceRepositoryResourceAptRepositoryOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceAptRepositoryArgs) ToOSPolicyResourceRepositoryResourceAptRepositoryOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceAptRepositoryOutput)
}

func (i OSPolicyResourceRepositoryResourceAptRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceRepositoryResourceAptRepository] {
	return pulumix.Output[OSPolicyResourceRepositoryResourceAptRepository]{
		OutputState: i.ToOSPolicyResourceRepositoryResourceAptRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourceRepositoryResourceAptRepositoryArgs) ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutput() OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return i.ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceAptRepositoryArgs) ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceAptRepositoryOutput).ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(ctx)
}

// OSPolicyResourceRepositoryResourceAptRepositoryPtrInput is an input type that accepts OSPolicyResourceRepositoryResourceAptRepositoryArgs, OSPolicyResourceRepositoryResourceAptRepositoryPtr and OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceAptRepositoryPtrInput` via:
//
//	        OSPolicyResourceRepositoryResourceAptRepositoryArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourceRepositoryResourceAptRepositoryPtrInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutput() OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput
	ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput
}

type ospolicyResourceRepositoryResourceAptRepositoryPtrType OSPolicyResourceRepositoryResourceAptRepositoryArgs

func OSPolicyResourceRepositoryResourceAptRepositoryPtr(v *OSPolicyResourceRepositoryResourceAptRepositoryArgs) OSPolicyResourceRepositoryResourceAptRepositoryPtrInput {
	return (*ospolicyResourceRepositoryResourceAptRepositoryPtrType)(v)
}

func (*ospolicyResourceRepositoryResourceAptRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceAptRepository)(nil)).Elem()
}

func (i *ospolicyResourceRepositoryResourceAptRepositoryPtrType) ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutput() OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return i.ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceRepositoryResourceAptRepositoryPtrType) ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput)
}

func (i *ospolicyResourceRepositoryResourceAptRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceRepositoryResourceAptRepository] {
	return pulumix.Output[*OSPolicyResourceRepositoryResourceAptRepository]{
		OutputState: i.ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a single apt package repository. These will be added to a repo file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`.
type OSPolicyResourceRepositoryResourceAptRepositoryOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceAptRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceAptRepository)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryOutput() OSPolicyResourceRepositoryResourceAptRepositoryOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutput() OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return o.ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourceRepositoryResourceAptRepository) *OSPolicyResourceRepositoryResourceAptRepository {
		return &v
	}).(OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput)
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceRepositoryResourceAptRepository] {
	return pulumix.Output[OSPolicyResourceRepositoryResourceAptRepository]{
		OutputState: o.OutputState,
	}
}

// Type of archive files in this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) ArchiveType() OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepository) OSPolicyResourceRepositoryResourceAptRepositoryArchiveType {
		return v.ArchiveType
	}).(OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeOutput)
}

// List of components for this repository. Must contain at least one item.
func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) Components() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepository) []string { return v.Components }).(pulumi.StringArrayOutput)
}

// Distribution of this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) Distribution() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepository) string { return v.Distribution }).(pulumi.StringOutput)
}

// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) GpgKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepository) *string { return v.GpgKey }).(pulumi.StringPtrOutput)
}

// URI for this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepository) string { return v.Uri }).(pulumi.StringOutput)
}

type OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceAptRepository)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutput() OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceRepositoryResourceAptRepository] {
	return pulumix.Output[*OSPolicyResourceRepositoryResourceAptRepository]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) Elem() OSPolicyResourceRepositoryResourceAptRepositoryOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceAptRepository) OSPolicyResourceRepositoryResourceAptRepository {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourceRepositoryResourceAptRepository
		return ret
	}).(OSPolicyResourceRepositoryResourceAptRepositoryOutput)
}

// Type of archive files in this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) ArchiveType() OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceAptRepository) *OSPolicyResourceRepositoryResourceAptRepositoryArchiveType {
		if v == nil {
			return nil
		}
		return &v.ArchiveType
	}).(OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypePtrOutput)
}

// List of components for this repository. Must contain at least one item.
func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) Components() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceAptRepository) []string {
		if v == nil {
			return nil
		}
		return v.Components
	}).(pulumi.StringArrayOutput)
}

// Distribution of this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) Distribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceAptRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Distribution
	}).(pulumi.StringPtrOutput)
}

// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) GpgKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceAptRepository) *string {
		if v == nil {
			return nil
		}
		return v.GpgKey
	}).(pulumi.StringPtrOutput)
}

// URI for this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceAptRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Represents a single apt package repository. These will be added to a repo file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`.
type OSPolicyResourceRepositoryResourceAptRepositoryResponse struct {
	// Type of archive files in this repository.
	ArchiveType string `pulumi:"archiveType"`
	// List of components for this repository. Must contain at least one item.
	Components []string `pulumi:"components"`
	// Distribution of this repository.
	Distribution string `pulumi:"distribution"`
	// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
	GpgKey string `pulumi:"gpgKey"`
	// URI for this repository.
	Uri string `pulumi:"uri"`
}

// Represents a single apt package repository. These will be added to a repo file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`.
type OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceAptRepositoryResponse)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryResponseOutput() OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) ToOSPolicyResourceRepositoryResourceAptRepositoryResponseOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceRepositoryResourceAptRepositoryResponse] {
	return pulumix.Output[OSPolicyResourceRepositoryResourceAptRepositoryResponse]{
		OutputState: o.OutputState,
	}
}

// Type of archive files in this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) ArchiveType() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepositoryResponse) string { return v.ArchiveType }).(pulumi.StringOutput)
}

// List of components for this repository. Must contain at least one item.
func (o OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) Components() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepositoryResponse) []string { return v.Components }).(pulumi.StringArrayOutput)
}

// Distribution of this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) Distribution() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepositoryResponse) string { return v.Distribution }).(pulumi.StringOutput)
}

// URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.
func (o OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) GpgKey() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepositoryResponse) string { return v.GpgKey }).(pulumi.StringOutput)
}

// URI for this repository.
func (o OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceAptRepositoryResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Represents a Goo package repository. These are added to a repo file that is managed at `C:/ProgramData/GooGet/repos/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceGooRepository struct {
	// The name of the repository.
	Name string `pulumi:"name"`
	// The url of the repository.
	Url string `pulumi:"url"`
}

// OSPolicyResourceRepositoryResourceGooRepositoryInput is an input type that accepts OSPolicyResourceRepositoryResourceGooRepositoryArgs and OSPolicyResourceRepositoryResourceGooRepositoryOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceGooRepositoryInput` via:
//
//	OSPolicyResourceRepositoryResourceGooRepositoryArgs{...}
type OSPolicyResourceRepositoryResourceGooRepositoryInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceGooRepositoryOutput() OSPolicyResourceRepositoryResourceGooRepositoryOutput
	ToOSPolicyResourceRepositoryResourceGooRepositoryOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceGooRepositoryOutput
}

// Represents a Goo package repository. These are added to a repo file that is managed at `C:/ProgramData/GooGet/repos/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceGooRepositoryArgs struct {
	// The name of the repository.
	Name pulumi.StringInput `pulumi:"name"`
	// The url of the repository.
	Url pulumi.StringInput `pulumi:"url"`
}

func (OSPolicyResourceRepositoryResourceGooRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceGooRepository)(nil)).Elem()
}

func (i OSPolicyResourceRepositoryResourceGooRepositoryArgs) ToOSPolicyResourceRepositoryResourceGooRepositoryOutput() OSPolicyResourceRepositoryResourceGooRepositoryOutput {
	return i.ToOSPolicyResourceRepositoryResourceGooRepositoryOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceGooRepositoryArgs) ToOSPolicyResourceRepositoryResourceGooRepositoryOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceGooRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceGooRepositoryOutput)
}

func (i OSPolicyResourceRepositoryResourceGooRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceRepositoryResourceGooRepository] {
	return pulumix.Output[OSPolicyResourceRepositoryResourceGooRepository]{
		OutputState: i.ToOSPolicyResourceRepositoryResourceGooRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourceRepositoryResourceGooRepositoryArgs) ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutput() OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return i.ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceGooRepositoryArgs) ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceGooRepositoryOutput).ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(ctx)
}

// OSPolicyResourceRepositoryResourceGooRepositoryPtrInput is an input type that accepts OSPolicyResourceRepositoryResourceGooRepositoryArgs, OSPolicyResourceRepositoryResourceGooRepositoryPtr and OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceGooRepositoryPtrInput` via:
//
//	        OSPolicyResourceRepositoryResourceGooRepositoryArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourceRepositoryResourceGooRepositoryPtrInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutput() OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput
	ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput
}

type ospolicyResourceRepositoryResourceGooRepositoryPtrType OSPolicyResourceRepositoryResourceGooRepositoryArgs

func OSPolicyResourceRepositoryResourceGooRepositoryPtr(v *OSPolicyResourceRepositoryResourceGooRepositoryArgs) OSPolicyResourceRepositoryResourceGooRepositoryPtrInput {
	return (*ospolicyResourceRepositoryResourceGooRepositoryPtrType)(v)
}

func (*ospolicyResourceRepositoryResourceGooRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceGooRepository)(nil)).Elem()
}

func (i *ospolicyResourceRepositoryResourceGooRepositoryPtrType) ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutput() OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return i.ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceRepositoryResourceGooRepositoryPtrType) ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput)
}

func (i *ospolicyResourceRepositoryResourceGooRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceRepositoryResourceGooRepository] {
	return pulumix.Output[*OSPolicyResourceRepositoryResourceGooRepository]{
		OutputState: i.ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a Goo package repository. These are added to a repo file that is managed at `C:/ProgramData/GooGet/repos/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceGooRepositoryOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceGooRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceGooRepository)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryOutput) ToOSPolicyResourceRepositoryResourceGooRepositoryOutput() OSPolicyResourceRepositoryResourceGooRepositoryOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryOutput) ToOSPolicyResourceRepositoryResourceGooRepositoryOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceGooRepositoryOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryOutput) ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutput() OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return o.ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryOutput) ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourceRepositoryResourceGooRepository) *OSPolicyResourceRepositoryResourceGooRepository {
		return &v
	}).(OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput)
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceRepositoryResourceGooRepository] {
	return pulumix.Output[OSPolicyResourceRepositoryResourceGooRepository]{
		OutputState: o.OutputState,
	}
}

// The name of the repository.
func (o OSPolicyResourceRepositoryResourceGooRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceGooRepository) string { return v.Name }).(pulumi.StringOutput)
}

// The url of the repository.
func (o OSPolicyResourceRepositoryResourceGooRepositoryOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceGooRepository) string { return v.Url }).(pulumi.StringOutput)
}

type OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceGooRepository)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput) ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutput() OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput) ToOSPolicyResourceRepositoryResourceGooRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceRepositoryResourceGooRepository] {
	return pulumix.Output[*OSPolicyResourceRepositoryResourceGooRepository]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput) Elem() OSPolicyResourceRepositoryResourceGooRepositoryOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceGooRepository) OSPolicyResourceRepositoryResourceGooRepository {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourceRepositoryResourceGooRepository
		return ret
	}).(OSPolicyResourceRepositoryResourceGooRepositoryOutput)
}

// The name of the repository.
func (o OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceGooRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The url of the repository.
func (o OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceGooRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// Represents a Goo package repository. These are added to a repo file that is managed at `C:/ProgramData/GooGet/repos/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceGooRepositoryResponse struct {
	// The name of the repository.
	Name string `pulumi:"name"`
	// The url of the repository.
	Url string `pulumi:"url"`
}

// Represents a Goo package repository. These are added to a repo file that is managed at `C:/ProgramData/GooGet/repos/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceGooRepositoryResponse)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput) ToOSPolicyResourceRepositoryResourceGooRepositoryResponseOutput() OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput) ToOSPolicyResourceRepositoryResourceGooRepositoryResponseOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceRepositoryResourceGooRepositoryResponse] {
	return pulumix.Output[OSPolicyResourceRepositoryResourceGooRepositoryResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the repository.
func (o OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceGooRepositoryResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The url of the repository.
func (o OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceGooRepositoryResponse) string { return v.Url }).(pulumi.StringOutput)
}

// A resource that manages a package repository.
type OSPolicyResourceRepositoryResourceResponse struct {
	// An Apt Repository.
	Apt OSPolicyResourceRepositoryResourceAptRepositoryResponse `pulumi:"apt"`
	// A Goo Repository.
	Goo OSPolicyResourceRepositoryResourceGooRepositoryResponse `pulumi:"goo"`
	// A Yum Repository.
	Yum OSPolicyResourceRepositoryResourceYumRepositoryResponse `pulumi:"yum"`
	// A Zypper Repository.
	Zypper OSPolicyResourceRepositoryResourceZypperRepositoryResponse `pulumi:"zypper"`
}

// A resource that manages a package repository.
type OSPolicyResourceRepositoryResourceResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceResponse)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceResponseOutput) ToOSPolicyResourceRepositoryResourceResponseOutput() OSPolicyResourceRepositoryResourceResponseOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceResponseOutput) ToOSPolicyResourceRepositoryResourceResponseOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceResponseOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceRepositoryResourceResponse] {
	return pulumix.Output[OSPolicyResourceRepositoryResourceResponse]{
		OutputState: o.OutputState,
	}
}

// An Apt Repository.
func (o OSPolicyResourceRepositoryResourceResponseOutput) Apt() OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceResponse) OSPolicyResourceRepositoryResourceAptRepositoryResponse {
		return v.Apt
	}).(OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput)
}

// A Goo Repository.
func (o OSPolicyResourceRepositoryResourceResponseOutput) Goo() OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceResponse) OSPolicyResourceRepositoryResourceGooRepositoryResponse {
		return v.Goo
	}).(OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput)
}

// A Yum Repository.
func (o OSPolicyResourceRepositoryResourceResponseOutput) Yum() OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceResponse) OSPolicyResourceRepositoryResourceYumRepositoryResponse {
		return v.Yum
	}).(OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput)
}

// A Zypper Repository.
func (o OSPolicyResourceRepositoryResourceResponseOutput) Zypper() OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceResponse) OSPolicyResourceRepositoryResourceZypperRepositoryResponse {
		return v.Zypper
	}).(OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput)
}

// Represents a single yum package repository. These are added to a repo file that is managed at `/etc/yum.repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceYumRepository struct {
	// The location of the repository directory.
	BaseUrl string `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName *string `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys []string `pulumi:"gpgKeys"`
	// A one word, unique name for this repository. This is the `repo id` in the yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for resource conflicts.
	Id string `pulumi:"id"`
}

// OSPolicyResourceRepositoryResourceYumRepositoryInput is an input type that accepts OSPolicyResourceRepositoryResourceYumRepositoryArgs and OSPolicyResourceRepositoryResourceYumRepositoryOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceYumRepositoryInput` via:
//
//	OSPolicyResourceRepositoryResourceYumRepositoryArgs{...}
type OSPolicyResourceRepositoryResourceYumRepositoryInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceYumRepositoryOutput() OSPolicyResourceRepositoryResourceYumRepositoryOutput
	ToOSPolicyResourceRepositoryResourceYumRepositoryOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceYumRepositoryOutput
}

// Represents a single yum package repository. These are added to a repo file that is managed at `/etc/yum.repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceYumRepositoryArgs struct {
	// The location of the repository directory.
	BaseUrl pulumi.StringInput `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys pulumi.StringArrayInput `pulumi:"gpgKeys"`
	// A one word, unique name for this repository. This is the `repo id` in the yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for resource conflicts.
	Id pulumi.StringInput `pulumi:"id"`
}

func (OSPolicyResourceRepositoryResourceYumRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceYumRepository)(nil)).Elem()
}

func (i OSPolicyResourceRepositoryResourceYumRepositoryArgs) ToOSPolicyResourceRepositoryResourceYumRepositoryOutput() OSPolicyResourceRepositoryResourceYumRepositoryOutput {
	return i.ToOSPolicyResourceRepositoryResourceYumRepositoryOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceYumRepositoryArgs) ToOSPolicyResourceRepositoryResourceYumRepositoryOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceYumRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceYumRepositoryOutput)
}

func (i OSPolicyResourceRepositoryResourceYumRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceRepositoryResourceYumRepository] {
	return pulumix.Output[OSPolicyResourceRepositoryResourceYumRepository]{
		OutputState: i.ToOSPolicyResourceRepositoryResourceYumRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourceRepositoryResourceYumRepositoryArgs) ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutput() OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return i.ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceYumRepositoryArgs) ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceYumRepositoryOutput).ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(ctx)
}

// OSPolicyResourceRepositoryResourceYumRepositoryPtrInput is an input type that accepts OSPolicyResourceRepositoryResourceYumRepositoryArgs, OSPolicyResourceRepositoryResourceYumRepositoryPtr and OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceYumRepositoryPtrInput` via:
//
//	        OSPolicyResourceRepositoryResourceYumRepositoryArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourceRepositoryResourceYumRepositoryPtrInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutput() OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput
	ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput
}

type ospolicyResourceRepositoryResourceYumRepositoryPtrType OSPolicyResourceRepositoryResourceYumRepositoryArgs

func OSPolicyResourceRepositoryResourceYumRepositoryPtr(v *OSPolicyResourceRepositoryResourceYumRepositoryArgs) OSPolicyResourceRepositoryResourceYumRepositoryPtrInput {
	return (*ospolicyResourceRepositoryResourceYumRepositoryPtrType)(v)
}

func (*ospolicyResourceRepositoryResourceYumRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceYumRepository)(nil)).Elem()
}

func (i *ospolicyResourceRepositoryResourceYumRepositoryPtrType) ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutput() OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return i.ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceRepositoryResourceYumRepositoryPtrType) ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput)
}

func (i *ospolicyResourceRepositoryResourceYumRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceRepositoryResourceYumRepository] {
	return pulumix.Output[*OSPolicyResourceRepositoryResourceYumRepository]{
		OutputState: i.ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a single yum package repository. These are added to a repo file that is managed at `/etc/yum.repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceYumRepositoryOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceYumRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceYumRepository)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) ToOSPolicyResourceRepositoryResourceYumRepositoryOutput() OSPolicyResourceRepositoryResourceYumRepositoryOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) ToOSPolicyResourceRepositoryResourceYumRepositoryOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceYumRepositoryOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutput() OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return o.ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourceRepositoryResourceYumRepository) *OSPolicyResourceRepositoryResourceYumRepository {
		return &v
	}).(OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput)
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceRepositoryResourceYumRepository] {
	return pulumix.Output[OSPolicyResourceRepositoryResourceYumRepository]{
		OutputState: o.OutputState,
	}
}

// The location of the repository directory.
func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceYumRepository) string { return v.BaseUrl }).(pulumi.StringOutput)
}

// The display name of the repository.
func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceYumRepository) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// URIs of GPG keys.
func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) GpgKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceYumRepository) []string { return v.GpgKeys }).(pulumi.StringArrayOutput)
}

// A one word, unique name for this repository. This is the `repo id` in the yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for resource conflicts.
func (o OSPolicyResourceRepositoryResourceYumRepositoryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceYumRepository) string { return v.Id }).(pulumi.StringOutput)
}

type OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceYumRepository)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutput() OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) ToOSPolicyResourceRepositoryResourceYumRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceRepositoryResourceYumRepository] {
	return pulumix.Output[*OSPolicyResourceRepositoryResourceYumRepository]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) Elem() OSPolicyResourceRepositoryResourceYumRepositoryOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceYumRepository) OSPolicyResourceRepositoryResourceYumRepository {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourceRepositoryResourceYumRepository
		return ret
	}).(OSPolicyResourceRepositoryResourceYumRepositoryOutput)
}

// The location of the repository directory.
func (o OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceYumRepository) *string {
		if v == nil {
			return nil
		}
		return &v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// The display name of the repository.
func (o OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceYumRepository) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// URIs of GPG keys.
func (o OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) GpgKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceYumRepository) []string {
		if v == nil {
			return nil
		}
		return v.GpgKeys
	}).(pulumi.StringArrayOutput)
}

// A one word, unique name for this repository. This is the `repo id` in the yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for resource conflicts.
func (o OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceYumRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Represents a single yum package repository. These are added to a repo file that is managed at `/etc/yum.repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceYumRepositoryResponse struct {
	// The location of the repository directory.
	BaseUrl string `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName string `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys []string `pulumi:"gpgKeys"`
}

// Represents a single yum package repository. These are added to a repo file that is managed at `/etc/yum.repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceYumRepositoryResponse)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput) ToOSPolicyResourceRepositoryResourceYumRepositoryResponseOutput() OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput) ToOSPolicyResourceRepositoryResourceYumRepositoryResponseOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceRepositoryResourceYumRepositoryResponse] {
	return pulumix.Output[OSPolicyResourceRepositoryResourceYumRepositoryResponse]{
		OutputState: o.OutputState,
	}
}

// The location of the repository directory.
func (o OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceYumRepositoryResponse) string { return v.BaseUrl }).(pulumi.StringOutput)
}

// The display name of the repository.
func (o OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceYumRepositoryResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// URIs of GPG keys.
func (o OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput) GpgKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceYumRepositoryResponse) []string { return v.GpgKeys }).(pulumi.StringArrayOutput)
}

// Represents a single zypper package repository. These are added to a repo file that is managed at `/etc/zypp/repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceZypperRepository struct {
	// The location of the repository directory.
	BaseUrl string `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName *string `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys []string `pulumi:"gpgKeys"`
	// A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.
	Id string `pulumi:"id"`
}

// OSPolicyResourceRepositoryResourceZypperRepositoryInput is an input type that accepts OSPolicyResourceRepositoryResourceZypperRepositoryArgs and OSPolicyResourceRepositoryResourceZypperRepositoryOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceZypperRepositoryInput` via:
//
//	OSPolicyResourceRepositoryResourceZypperRepositoryArgs{...}
type OSPolicyResourceRepositoryResourceZypperRepositoryInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceZypperRepositoryOutput() OSPolicyResourceRepositoryResourceZypperRepositoryOutput
	ToOSPolicyResourceRepositoryResourceZypperRepositoryOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryOutput
}

// Represents a single zypper package repository. These are added to a repo file that is managed at `/etc/zypp/repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceZypperRepositoryArgs struct {
	// The location of the repository directory.
	BaseUrl pulumi.StringInput `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys pulumi.StringArrayInput `pulumi:"gpgKeys"`
	// A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.
	Id pulumi.StringInput `pulumi:"id"`
}

func (OSPolicyResourceRepositoryResourceZypperRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceZypperRepository)(nil)).Elem()
}

func (i OSPolicyResourceRepositoryResourceZypperRepositoryArgs) ToOSPolicyResourceRepositoryResourceZypperRepositoryOutput() OSPolicyResourceRepositoryResourceZypperRepositoryOutput {
	return i.ToOSPolicyResourceRepositoryResourceZypperRepositoryOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceZypperRepositoryArgs) ToOSPolicyResourceRepositoryResourceZypperRepositoryOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceZypperRepositoryOutput)
}

func (i OSPolicyResourceRepositoryResourceZypperRepositoryArgs) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceRepositoryResourceZypperRepository] {
	return pulumix.Output[OSPolicyResourceRepositoryResourceZypperRepository]{
		OutputState: i.ToOSPolicyResourceRepositoryResourceZypperRepositoryOutputWithContext(ctx).OutputState,
	}
}

func (i OSPolicyResourceRepositoryResourceZypperRepositoryArgs) ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput() OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return i.ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(context.Background())
}

func (i OSPolicyResourceRepositoryResourceZypperRepositoryArgs) ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceZypperRepositoryOutput).ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(ctx)
}

// OSPolicyResourceRepositoryResourceZypperRepositoryPtrInput is an input type that accepts OSPolicyResourceRepositoryResourceZypperRepositoryArgs, OSPolicyResourceRepositoryResourceZypperRepositoryPtr and OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput values.
// You can construct a concrete instance of `OSPolicyResourceRepositoryResourceZypperRepositoryPtrInput` via:
//
//	        OSPolicyResourceRepositoryResourceZypperRepositoryArgs{...}
//
//	or:
//
//	        nil
type OSPolicyResourceRepositoryResourceZypperRepositoryPtrInput interface {
	pulumi.Input

	ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput() OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput
	ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput
}

type ospolicyResourceRepositoryResourceZypperRepositoryPtrType OSPolicyResourceRepositoryResourceZypperRepositoryArgs

func OSPolicyResourceRepositoryResourceZypperRepositoryPtr(v *OSPolicyResourceRepositoryResourceZypperRepositoryArgs) OSPolicyResourceRepositoryResourceZypperRepositoryPtrInput {
	return (*ospolicyResourceRepositoryResourceZypperRepositoryPtrType)(v)
}

func (*ospolicyResourceRepositoryResourceZypperRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceZypperRepository)(nil)).Elem()
}

func (i *ospolicyResourceRepositoryResourceZypperRepositoryPtrType) ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput() OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return i.ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(context.Background())
}

func (i *ospolicyResourceRepositoryResourceZypperRepositoryPtrType) ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput)
}

func (i *ospolicyResourceRepositoryResourceZypperRepositoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceRepositoryResourceZypperRepository] {
	return pulumix.Output[*OSPolicyResourceRepositoryResourceZypperRepository]{
		OutputState: i.ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a single zypper package repository. These are added to a repo file that is managed at `/etc/zypp/repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceZypperRepositoryOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceZypperRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceZypperRepository)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) ToOSPolicyResourceRepositoryResourceZypperRepositoryOutput() OSPolicyResourceRepositoryResourceZypperRepositoryOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) ToOSPolicyResourceRepositoryResourceZypperRepositoryOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput() OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return o.ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(context.Background())
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSPolicyResourceRepositoryResourceZypperRepository) *OSPolicyResourceRepositoryResourceZypperRepository {
		return &v
	}).(OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput)
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceRepositoryResourceZypperRepository] {
	return pulumix.Output[OSPolicyResourceRepositoryResourceZypperRepository]{
		OutputState: o.OutputState,
	}
}

// The location of the repository directory.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceZypperRepository) string { return v.BaseUrl }).(pulumi.StringOutput)
}

// The display name of the repository.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceZypperRepository) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// URIs of GPG keys.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) GpgKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceZypperRepository) []string { return v.GpgKeys }).(pulumi.StringArrayOutput)
}

// A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceZypperRepository) string { return v.Id }).(pulumi.StringOutput)
}

type OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSPolicyResourceRepositoryResourceZypperRepository)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput() OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) ToOSPolicyResourceRepositoryResourceZypperRepositoryPtrOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OSPolicyResourceRepositoryResourceZypperRepository] {
	return pulumix.Output[*OSPolicyResourceRepositoryResourceZypperRepository]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) Elem() OSPolicyResourceRepositoryResourceZypperRepositoryOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceZypperRepository) OSPolicyResourceRepositoryResourceZypperRepository {
		if v != nil {
			return *v
		}
		var ret OSPolicyResourceRepositoryResourceZypperRepository
		return ret
	}).(OSPolicyResourceRepositoryResourceZypperRepositoryOutput)
}

// The location of the repository directory.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceZypperRepository) *string {
		if v == nil {
			return nil
		}
		return &v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// The display name of the repository.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceZypperRepository) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// URIs of GPG keys.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) GpgKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceZypperRepository) []string {
		if v == nil {
			return nil
		}
		return v.GpgKeys
	}).(pulumi.StringArrayOutput)
}

// A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSPolicyResourceRepositoryResourceZypperRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Represents a single zypper package repository. These are added to a repo file that is managed at `/etc/zypp/repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceZypperRepositoryResponse struct {
	// The location of the repository directory.
	BaseUrl string `pulumi:"baseUrl"`
	// The display name of the repository.
	DisplayName string `pulumi:"displayName"`
	// URIs of GPG keys.
	GpgKeys []string `pulumi:"gpgKeys"`
}

// Represents a single zypper package repository. These are added to a repo file that is managed at `/etc/zypp/repos.d/google_osconfig.repo`.
type OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceRepositoryResourceZypperRepositoryResponse)(nil)).Elem()
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput) ToOSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput() OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput) ToOSPolicyResourceRepositoryResourceZypperRepositoryResponseOutputWithContext(ctx context.Context) OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput {
	return o
}

func (o OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceRepositoryResourceZypperRepositoryResponse] {
	return pulumix.Output[OSPolicyResourceRepositoryResourceZypperRepositoryResponse]{
		OutputState: o.OutputState,
	}
}

// The location of the repository directory.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceZypperRepositoryResponse) string { return v.BaseUrl }).(pulumi.StringOutput)
}

// The display name of the repository.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceZypperRepositoryResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// URIs of GPG keys.
func (o OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput) GpgKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OSPolicyResourceRepositoryResourceZypperRepositoryResponse) []string { return v.GpgKeys }).(pulumi.StringArrayOutput)
}

// An OS policy resource is used to define the desired state configuration and provides a specific functionality like installing/removing packages, executing a script etc. The system ensures that resources are always in their desired state by taking necessary actions if they have drifted from their desired state.
type OSPolicyResourceResponse struct {
	// Exec resource
	Exec OSPolicyResourceExecResourceResponse `pulumi:"exec"`
	// File resource
	File OSPolicyResourceFileResourceResponse `pulumi:"file"`
	// Package resource
	Pkg OSPolicyResourcePackageResourceResponse `pulumi:"pkg"`
	// Package repository resource
	Repository OSPolicyResourceRepositoryResourceResponse `pulumi:"repository"`
}

// An OS policy resource is used to define the desired state configuration and provides a specific functionality like installing/removing packages, executing a script etc. The system ensures that resources are always in their desired state by taking necessary actions if they have drifted from their desired state.
type OSPolicyResourceResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResourceResponse)(nil)).Elem()
}

func (o OSPolicyResourceResponseOutput) ToOSPolicyResourceResponseOutput() OSPolicyResourceResponseOutput {
	return o
}

func (o OSPolicyResourceResponseOutput) ToOSPolicyResourceResponseOutputWithContext(ctx context.Context) OSPolicyResourceResponseOutput {
	return o
}

func (o OSPolicyResourceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResourceResponse] {
	return pulumix.Output[OSPolicyResourceResponse]{
		OutputState: o.OutputState,
	}
}

// Exec resource
func (o OSPolicyResourceResponseOutput) Exec() OSPolicyResourceExecResourceResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceResponse) OSPolicyResourceExecResourceResponse { return v.Exec }).(OSPolicyResourceExecResourceResponseOutput)
}

// File resource
func (o OSPolicyResourceResponseOutput) File() OSPolicyResourceFileResourceResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceResponse) OSPolicyResourceFileResourceResponse { return v.File }).(OSPolicyResourceFileResourceResponseOutput)
}

// Package resource
func (o OSPolicyResourceResponseOutput) Pkg() OSPolicyResourcePackageResourceResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceResponse) OSPolicyResourcePackageResourceResponse { return v.Pkg }).(OSPolicyResourcePackageResourceResponseOutput)
}

// Package repository resource
func (o OSPolicyResourceResponseOutput) Repository() OSPolicyResourceRepositoryResourceResponseOutput {
	return o.ApplyT(func(v OSPolicyResourceResponse) OSPolicyResourceRepositoryResourceResponse { return v.Repository }).(OSPolicyResourceRepositoryResourceResponseOutput)
}

type OSPolicyResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResourceResponse)(nil)).Elem()
}

func (o OSPolicyResourceResponseArrayOutput) ToOSPolicyResourceResponseArrayOutput() OSPolicyResourceResponseArrayOutput {
	return o
}

func (o OSPolicyResourceResponseArrayOutput) ToOSPolicyResourceResponseArrayOutputWithContext(ctx context.Context) OSPolicyResourceResponseArrayOutput {
	return o
}

func (o OSPolicyResourceResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicyResourceResponse] {
	return pulumix.Output[[]OSPolicyResourceResponse]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResourceResponseArrayOutput) Index(i pulumi.IntInput) OSPolicyResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyResourceResponse {
		return vs[0].([]OSPolicyResourceResponse)[vs[1].(int)]
	}).(OSPolicyResourceResponseOutput)
}

// An OS policy defines the desired state configuration for a VM.
type OSPolicyResponse struct {
	// This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.
	AllowNoResourceGroupMatch bool `pulumi:"allowNoResourceGroupMatch"`
	// Policy description. Length of the description is limited to 1024 characters.
	Description string `pulumi:"description"`
	// Policy mode
	Mode string `pulumi:"mode"`
	// List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`
	ResourceGroups []OSPolicyResourceGroupResponse `pulumi:"resourceGroups"`
}

// An OS policy defines the desired state configuration for a VM.
type OSPolicyResponseOutput struct{ *pulumi.OutputState }

func (OSPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSPolicyResponse)(nil)).Elem()
}

func (o OSPolicyResponseOutput) ToOSPolicyResponseOutput() OSPolicyResponseOutput {
	return o
}

func (o OSPolicyResponseOutput) ToOSPolicyResponseOutputWithContext(ctx context.Context) OSPolicyResponseOutput {
	return o
}

func (o OSPolicyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OSPolicyResponse] {
	return pulumix.Output[OSPolicyResponse]{
		OutputState: o.OutputState,
	}
}

// This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.
func (o OSPolicyResponseOutput) AllowNoResourceGroupMatch() pulumi.BoolOutput {
	return o.ApplyT(func(v OSPolicyResponse) bool { return v.AllowNoResourceGroupMatch }).(pulumi.BoolOutput)
}

// Policy description. Length of the description is limited to 1024 characters.
func (o OSPolicyResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Policy mode
func (o OSPolicyResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v OSPolicyResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`
func (o OSPolicyResponseOutput) ResourceGroups() OSPolicyResourceGroupResponseArrayOutput {
	return o.ApplyT(func(v OSPolicyResponse) []OSPolicyResourceGroupResponse { return v.ResourceGroups }).(OSPolicyResourceGroupResponseArrayOutput)
}

type OSPolicyResponseArrayOutput struct{ *pulumi.OutputState }

func (OSPolicyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OSPolicyResponse)(nil)).Elem()
}

func (o OSPolicyResponseArrayOutput) ToOSPolicyResponseArrayOutput() OSPolicyResponseArrayOutput {
	return o
}

func (o OSPolicyResponseArrayOutput) ToOSPolicyResponseArrayOutputWithContext(ctx context.Context) OSPolicyResponseArrayOutput {
	return o
}

func (o OSPolicyResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OSPolicyResponse] {
	return pulumix.Output[[]OSPolicyResponse]{
		OutputState: o.OutputState,
	}
}

func (o OSPolicyResponseArrayOutput) Index(i pulumi.IntInput) OSPolicyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OSPolicyResponse {
		return vs[0].([]OSPolicyResponse)[vs[1].(int)]
	}).(OSPolicyResponseOutput)
}

// Sets the time for a one time patch deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
type OneTimeSchedule struct {
	// The desired patch job execution time.
	ExecuteTime string `pulumi:"executeTime"`
}

// OneTimeScheduleInput is an input type that accepts OneTimeScheduleArgs and OneTimeScheduleOutput values.
// You can construct a concrete instance of `OneTimeScheduleInput` via:
//
//	OneTimeScheduleArgs{...}
type OneTimeScheduleInput interface {
	pulumi.Input

	ToOneTimeScheduleOutput() OneTimeScheduleOutput
	ToOneTimeScheduleOutputWithContext(context.Context) OneTimeScheduleOutput
}

// Sets the time for a one time patch deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
type OneTimeScheduleArgs struct {
	// The desired patch job execution time.
	ExecuteTime pulumi.StringInput `pulumi:"executeTime"`
}

func (OneTimeScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneTimeSchedule)(nil)).Elem()
}

func (i OneTimeScheduleArgs) ToOneTimeScheduleOutput() OneTimeScheduleOutput {
	return i.ToOneTimeScheduleOutputWithContext(context.Background())
}

func (i OneTimeScheduleArgs) ToOneTimeScheduleOutputWithContext(ctx context.Context) OneTimeScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneTimeScheduleOutput)
}

func (i OneTimeScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[OneTimeSchedule] {
	return pulumix.Output[OneTimeSchedule]{
		OutputState: i.ToOneTimeScheduleOutputWithContext(ctx).OutputState,
	}
}

// Sets the time for a one time patch deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
type OneTimeScheduleOutput struct{ *pulumi.OutputState }

func (OneTimeScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneTimeSchedule)(nil)).Elem()
}

func (o OneTimeScheduleOutput) ToOneTimeScheduleOutput() OneTimeScheduleOutput {
	return o
}

func (o OneTimeScheduleOutput) ToOneTimeScheduleOutputWithContext(ctx context.Context) OneTimeScheduleOutput {
	return o
}

func (o OneTimeScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[OneTimeSchedule] {
	return pulumix.Output[OneTimeSchedule]{
		OutputState: o.OutputState,
	}
}

// The desired patch job execution time.
func (o OneTimeScheduleOutput) ExecuteTime() pulumi.StringOutput {
	return o.ApplyT(func(v OneTimeSchedule) string { return v.ExecuteTime }).(pulumi.StringOutput)
}

// Sets the time for a one time patch deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
type OneTimeScheduleResponse struct {
	// The desired patch job execution time.
	ExecuteTime string `pulumi:"executeTime"`
}

// Sets the time for a one time patch deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
type OneTimeScheduleResponseOutput struct{ *pulumi.OutputState }

func (OneTimeScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneTimeScheduleResponse)(nil)).Elem()
}

func (o OneTimeScheduleResponseOutput) ToOneTimeScheduleResponseOutput() OneTimeScheduleResponseOutput {
	return o
}

func (o OneTimeScheduleResponseOutput) ToOneTimeScheduleResponseOutputWithContext(ctx context.Context) OneTimeScheduleResponseOutput {
	return o
}

func (o OneTimeScheduleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OneTimeScheduleResponse] {
	return pulumix.Output[OneTimeScheduleResponse]{
		OutputState: o.OutputState,
	}
}

// The desired patch job execution time.
func (o OneTimeScheduleResponseOutput) ExecuteTime() pulumi.StringOutput {
	return o.ApplyT(func(v OneTimeScheduleResponse) string { return v.ExecuteTime }).(pulumi.StringOutput)
}

// Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
type PatchConfig struct {
	// Apt update settings. Use this setting to override the default `apt` patch rules.
	Apt *AptSettings `pulumi:"apt"`
	// Goo update settings. Use this setting to override the default `goo` patch rules.
	Goo *GooSettings `pulumi:"goo"`
	// Allows the patch job to run on Managed instance groups (MIGs).
	MigInstancesAllowed *bool `pulumi:"migInstancesAllowed"`
	// The `ExecStep` to run after the patch update.
	PostStep *ExecStep `pulumi:"postStep"`
	// The `ExecStep` to run before the patch update.
	PreStep *ExecStep `pulumi:"preStep"`
	// Post-patch reboot settings.
	RebootConfig *PatchConfigRebootConfig `pulumi:"rebootConfig"`
	// Windows update settings. Use this override the default windows patch rules.
	WindowsUpdate *WindowsUpdateSettings `pulumi:"windowsUpdate"`
	// Yum update settings. Use this setting to override the default `yum` patch rules.
	Yum *YumSettings `pulumi:"yum"`
	// Zypper update settings. Use this setting to override the default `zypper` patch rules.
	Zypper *ZypperSettings `pulumi:"zypper"`
}

// PatchConfigInput is an input type that accepts PatchConfigArgs and PatchConfigOutput values.
// You can construct a concrete instance of `PatchConfigInput` via:
//
//	PatchConfigArgs{...}
type PatchConfigInput interface {
	pulumi.Input

	ToPatchConfigOutput() PatchConfigOutput
	ToPatchConfigOutputWithContext(context.Context) PatchConfigOutput
}

// Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
type PatchConfigArgs struct {
	// Apt update settings. Use this setting to override the default `apt` patch rules.
	Apt AptSettingsPtrInput `pulumi:"apt"`
	// Goo update settings. Use this setting to override the default `goo` patch rules.
	Goo GooSettingsPtrInput `pulumi:"goo"`
	// Allows the patch job to run on Managed instance groups (MIGs).
	MigInstancesAllowed pulumi.BoolPtrInput `pulumi:"migInstancesAllowed"`
	// The `ExecStep` to run after the patch update.
	PostStep ExecStepPtrInput `pulumi:"postStep"`
	// The `ExecStep` to run before the patch update.
	PreStep ExecStepPtrInput `pulumi:"preStep"`
	// Post-patch reboot settings.
	RebootConfig PatchConfigRebootConfigPtrInput `pulumi:"rebootConfig"`
	// Windows update settings. Use this override the default windows patch rules.
	WindowsUpdate WindowsUpdateSettingsPtrInput `pulumi:"windowsUpdate"`
	// Yum update settings. Use this setting to override the default `yum` patch rules.
	Yum YumSettingsPtrInput `pulumi:"yum"`
	// Zypper update settings. Use this setting to override the default `zypper` patch rules.
	Zypper ZypperSettingsPtrInput `pulumi:"zypper"`
}

func (PatchConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchConfig)(nil)).Elem()
}

func (i PatchConfigArgs) ToPatchConfigOutput() PatchConfigOutput {
	return i.ToPatchConfigOutputWithContext(context.Background())
}

func (i PatchConfigArgs) ToPatchConfigOutputWithContext(ctx context.Context) PatchConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchConfigOutput)
}

func (i PatchConfigArgs) ToOutput(ctx context.Context) pulumix.Output[PatchConfig] {
	return pulumix.Output[PatchConfig]{
		OutputState: i.ToPatchConfigOutputWithContext(ctx).OutputState,
	}
}

func (i PatchConfigArgs) ToPatchConfigPtrOutput() PatchConfigPtrOutput {
	return i.ToPatchConfigPtrOutputWithContext(context.Background())
}

func (i PatchConfigArgs) ToPatchConfigPtrOutputWithContext(ctx context.Context) PatchConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchConfigOutput).ToPatchConfigPtrOutputWithContext(ctx)
}

// PatchConfigPtrInput is an input type that accepts PatchConfigArgs, PatchConfigPtr and PatchConfigPtrOutput values.
// You can construct a concrete instance of `PatchConfigPtrInput` via:
//
//	        PatchConfigArgs{...}
//
//	or:
//
//	        nil
type PatchConfigPtrInput interface {
	pulumi.Input

	ToPatchConfigPtrOutput() PatchConfigPtrOutput
	ToPatchConfigPtrOutputWithContext(context.Context) PatchConfigPtrOutput
}

type patchConfigPtrType PatchConfigArgs

func PatchConfigPtr(v *PatchConfigArgs) PatchConfigPtrInput {
	return (*patchConfigPtrType)(v)
}

func (*patchConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchConfig)(nil)).Elem()
}

func (i *patchConfigPtrType) ToPatchConfigPtrOutput() PatchConfigPtrOutput {
	return i.ToPatchConfigPtrOutputWithContext(context.Background())
}

func (i *patchConfigPtrType) ToPatchConfigPtrOutputWithContext(ctx context.Context) PatchConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchConfigPtrOutput)
}

func (i *patchConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*PatchConfig] {
	return pulumix.Output[*PatchConfig]{
		OutputState: i.ToPatchConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
type PatchConfigOutput struct{ *pulumi.OutputState }

func (PatchConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchConfig)(nil)).Elem()
}

func (o PatchConfigOutput) ToPatchConfigOutput() PatchConfigOutput {
	return o
}

func (o PatchConfigOutput) ToPatchConfigOutputWithContext(ctx context.Context) PatchConfigOutput {
	return o
}

func (o PatchConfigOutput) ToPatchConfigPtrOutput() PatchConfigPtrOutput {
	return o.ToPatchConfigPtrOutputWithContext(context.Background())
}

func (o PatchConfigOutput) ToPatchConfigPtrOutputWithContext(ctx context.Context) PatchConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PatchConfig) *PatchConfig {
		return &v
	}).(PatchConfigPtrOutput)
}

func (o PatchConfigOutput) ToOutput(ctx context.Context) pulumix.Output[PatchConfig] {
	return pulumix.Output[PatchConfig]{
		OutputState: o.OutputState,
	}
}

// Apt update settings. Use this setting to override the default `apt` patch rules.
func (o PatchConfigOutput) Apt() AptSettingsPtrOutput {
	return o.ApplyT(func(v PatchConfig) *AptSettings { return v.Apt }).(AptSettingsPtrOutput)
}

// Goo update settings. Use this setting to override the default `goo` patch rules.
func (o PatchConfigOutput) Goo() GooSettingsPtrOutput {
	return o.ApplyT(func(v PatchConfig) *GooSettings { return v.Goo }).(GooSettingsPtrOutput)
}

// Allows the patch job to run on Managed instance groups (MIGs).
func (o PatchConfigOutput) MigInstancesAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PatchConfig) *bool { return v.MigInstancesAllowed }).(pulumi.BoolPtrOutput)
}

// The `ExecStep` to run after the patch update.
func (o PatchConfigOutput) PostStep() ExecStepPtrOutput {
	return o.ApplyT(func(v PatchConfig) *ExecStep { return v.PostStep }).(ExecStepPtrOutput)
}

// The `ExecStep` to run before the patch update.
func (o PatchConfigOutput) PreStep() ExecStepPtrOutput {
	return o.ApplyT(func(v PatchConfig) *ExecStep { return v.PreStep }).(ExecStepPtrOutput)
}

// Post-patch reboot settings.
func (o PatchConfigOutput) RebootConfig() PatchConfigRebootConfigPtrOutput {
	return o.ApplyT(func(v PatchConfig) *PatchConfigRebootConfig { return v.RebootConfig }).(PatchConfigRebootConfigPtrOutput)
}

// Windows update settings. Use this override the default windows patch rules.
func (o PatchConfigOutput) WindowsUpdate() WindowsUpdateSettingsPtrOutput {
	return o.ApplyT(func(v PatchConfig) *WindowsUpdateSettings { return v.WindowsUpdate }).(WindowsUpdateSettingsPtrOutput)
}

// Yum update settings. Use this setting to override the default `yum` patch rules.
func (o PatchConfigOutput) Yum() YumSettingsPtrOutput {
	return o.ApplyT(func(v PatchConfig) *YumSettings { return v.Yum }).(YumSettingsPtrOutput)
}

// Zypper update settings. Use this setting to override the default `zypper` patch rules.
func (o PatchConfigOutput) Zypper() ZypperSettingsPtrOutput {
	return o.ApplyT(func(v PatchConfig) *ZypperSettings { return v.Zypper }).(ZypperSettingsPtrOutput)
}

type PatchConfigPtrOutput struct{ *pulumi.OutputState }

func (PatchConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchConfig)(nil)).Elem()
}

func (o PatchConfigPtrOutput) ToPatchConfigPtrOutput() PatchConfigPtrOutput {
	return o
}

func (o PatchConfigPtrOutput) ToPatchConfigPtrOutputWithContext(ctx context.Context) PatchConfigPtrOutput {
	return o
}

func (o PatchConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PatchConfig] {
	return pulumix.Output[*PatchConfig]{
		OutputState: o.OutputState,
	}
}

func (o PatchConfigPtrOutput) Elem() PatchConfigOutput {
	return o.ApplyT(func(v *PatchConfig) PatchConfig {
		if v != nil {
			return *v
		}
		var ret PatchConfig
		return ret
	}).(PatchConfigOutput)
}

// Apt update settings. Use this setting to override the default `apt` patch rules.
func (o PatchConfigPtrOutput) Apt() AptSettingsPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *AptSettings {
		if v == nil {
			return nil
		}
		return v.Apt
	}).(AptSettingsPtrOutput)
}

// Goo update settings. Use this setting to override the default `goo` patch rules.
func (o PatchConfigPtrOutput) Goo() GooSettingsPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *GooSettings {
		if v == nil {
			return nil
		}
		return v.Goo
	}).(GooSettingsPtrOutput)
}

// Allows the patch job to run on Managed instance groups (MIGs).
func (o PatchConfigPtrOutput) MigInstancesAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *bool {
		if v == nil {
			return nil
		}
		return v.MigInstancesAllowed
	}).(pulumi.BoolPtrOutput)
}

// The `ExecStep` to run after the patch update.
func (o PatchConfigPtrOutput) PostStep() ExecStepPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *ExecStep {
		if v == nil {
			return nil
		}
		return v.PostStep
	}).(ExecStepPtrOutput)
}

// The `ExecStep` to run before the patch update.
func (o PatchConfigPtrOutput) PreStep() ExecStepPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *ExecStep {
		if v == nil {
			return nil
		}
		return v.PreStep
	}).(ExecStepPtrOutput)
}

// Post-patch reboot settings.
func (o PatchConfigPtrOutput) RebootConfig() PatchConfigRebootConfigPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *PatchConfigRebootConfig {
		if v == nil {
			return nil
		}
		return v.RebootConfig
	}).(PatchConfigRebootConfigPtrOutput)
}

// Windows update settings. Use this override the default windows patch rules.
func (o PatchConfigPtrOutput) WindowsUpdate() WindowsUpdateSettingsPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *WindowsUpdateSettings {
		if v == nil {
			return nil
		}
		return v.WindowsUpdate
	}).(WindowsUpdateSettingsPtrOutput)
}

// Yum update settings. Use this setting to override the default `yum` patch rules.
func (o PatchConfigPtrOutput) Yum() YumSettingsPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *YumSettings {
		if v == nil {
			return nil
		}
		return v.Yum
	}).(YumSettingsPtrOutput)
}

// Zypper update settings. Use this setting to override the default `zypper` patch rules.
func (o PatchConfigPtrOutput) Zypper() ZypperSettingsPtrOutput {
	return o.ApplyT(func(v *PatchConfig) *ZypperSettings {
		if v == nil {
			return nil
		}
		return v.Zypper
	}).(ZypperSettingsPtrOutput)
}

// Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
type PatchConfigResponse struct {
	// Apt update settings. Use this setting to override the default `apt` patch rules.
	Apt AptSettingsResponse `pulumi:"apt"`
	// Goo update settings. Use this setting to override the default `goo` patch rules.
	Goo GooSettingsResponse `pulumi:"goo"`
	// Allows the patch job to run on Managed instance groups (MIGs).
	MigInstancesAllowed bool `pulumi:"migInstancesAllowed"`
	// The `ExecStep` to run after the patch update.
	PostStep ExecStepResponse `pulumi:"postStep"`
	// The `ExecStep` to run before the patch update.
	PreStep ExecStepResponse `pulumi:"preStep"`
	// Post-patch reboot settings.
	RebootConfig string `pulumi:"rebootConfig"`
	// Windows update settings. Use this override the default windows patch rules.
	WindowsUpdate WindowsUpdateSettingsResponse `pulumi:"windowsUpdate"`
	// Yum update settings. Use this setting to override the default `yum` patch rules.
	Yum YumSettingsResponse `pulumi:"yum"`
	// Zypper update settings. Use this setting to override the default `zypper` patch rules.
	Zypper ZypperSettingsResponse `pulumi:"zypper"`
}

// Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
type PatchConfigResponseOutput struct{ *pulumi.OutputState }

func (PatchConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchConfigResponse)(nil)).Elem()
}

func (o PatchConfigResponseOutput) ToPatchConfigResponseOutput() PatchConfigResponseOutput {
	return o
}

func (o PatchConfigResponseOutput) ToPatchConfigResponseOutputWithContext(ctx context.Context) PatchConfigResponseOutput {
	return o
}

func (o PatchConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PatchConfigResponse] {
	return pulumix.Output[PatchConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Apt update settings. Use this setting to override the default `apt` patch rules.
func (o PatchConfigResponseOutput) Apt() AptSettingsResponseOutput {
	return o.ApplyT(func(v PatchConfigResponse) AptSettingsResponse { return v.Apt }).(AptSettingsResponseOutput)
}

// Goo update settings. Use this setting to override the default `goo` patch rules.
func (o PatchConfigResponseOutput) Goo() GooSettingsResponseOutput {
	return o.ApplyT(func(v PatchConfigResponse) GooSettingsResponse { return v.Goo }).(GooSettingsResponseOutput)
}

// Allows the patch job to run on Managed instance groups (MIGs).
func (o PatchConfigResponseOutput) MigInstancesAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v PatchConfigResponse) bool { return v.MigInstancesAllowed }).(pulumi.BoolOutput)
}

// The `ExecStep` to run after the patch update.
func (o PatchConfigResponseOutput) PostStep() ExecStepResponseOutput {
	return o.ApplyT(func(v PatchConfigResponse) ExecStepResponse { return v.PostStep }).(ExecStepResponseOutput)
}

// The `ExecStep` to run before the patch update.
func (o PatchConfigResponseOutput) PreStep() ExecStepResponseOutput {
	return o.ApplyT(func(v PatchConfigResponse) ExecStepResponse { return v.PreStep }).(ExecStepResponseOutput)
}

// Post-patch reboot settings.
func (o PatchConfigResponseOutput) RebootConfig() pulumi.StringOutput {
	return o.ApplyT(func(v PatchConfigResponse) string { return v.RebootConfig }).(pulumi.StringOutput)
}

// Windows update settings. Use this override the default windows patch rules.
func (o PatchConfigResponseOutput) WindowsUpdate() WindowsUpdateSettingsResponseOutput {
	return o.ApplyT(func(v PatchConfigResponse) WindowsUpdateSettingsResponse { return v.WindowsUpdate }).(WindowsUpdateSettingsResponseOutput)
}

// Yum update settings. Use this setting to override the default `yum` patch rules.
func (o PatchConfigResponseOutput) Yum() YumSettingsResponseOutput {
	return o.ApplyT(func(v PatchConfigResponse) YumSettingsResponse { return v.Yum }).(YumSettingsResponseOutput)
}

// Zypper update settings. Use this setting to override the default `zypper` patch rules.
func (o PatchConfigResponseOutput) Zypper() ZypperSettingsResponseOutput {
	return o.ApplyT(func(v PatchConfigResponse) ZypperSettingsResponse { return v.Zypper }).(ZypperSettingsResponseOutput)
}

// A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
type PatchInstanceFilter struct {
	// Target all VM instances in the project. If true, no other criteria is permitted.
	All *bool `pulumi:"all"`
	// Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.
	GroupLabels []PatchInstanceFilterGroupLabel `pulumi:"groupLabels"`
	// Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".
	InstanceNamePrefixes []string `pulumi:"instanceNamePrefixes"`
	// Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
	Instances []string `pulumi:"instances"`
	// Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
	Zones []string `pulumi:"zones"`
}

// PatchInstanceFilterInput is an input type that accepts PatchInstanceFilterArgs and PatchInstanceFilterOutput values.
// You can construct a concrete instance of `PatchInstanceFilterInput` via:
//
//	PatchInstanceFilterArgs{...}
type PatchInstanceFilterInput interface {
	pulumi.Input

	ToPatchInstanceFilterOutput() PatchInstanceFilterOutput
	ToPatchInstanceFilterOutputWithContext(context.Context) PatchInstanceFilterOutput
}

// A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
type PatchInstanceFilterArgs struct {
	// Target all VM instances in the project. If true, no other criteria is permitted.
	All pulumi.BoolPtrInput `pulumi:"all"`
	// Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.
	GroupLabels PatchInstanceFilterGroupLabelArrayInput `pulumi:"groupLabels"`
	// Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".
	InstanceNamePrefixes pulumi.StringArrayInput `pulumi:"instanceNamePrefixes"`
	// Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
	Instances pulumi.StringArrayInput `pulumi:"instances"`
	// Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (PatchInstanceFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchInstanceFilter)(nil)).Elem()
}

func (i PatchInstanceFilterArgs) ToPatchInstanceFilterOutput() PatchInstanceFilterOutput {
	return i.ToPatchInstanceFilterOutputWithContext(context.Background())
}

func (i PatchInstanceFilterArgs) ToPatchInstanceFilterOutputWithContext(ctx context.Context) PatchInstanceFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchInstanceFilterOutput)
}

func (i PatchInstanceFilterArgs) ToOutput(ctx context.Context) pulumix.Output[PatchInstanceFilter] {
	return pulumix.Output[PatchInstanceFilter]{
		OutputState: i.ToPatchInstanceFilterOutputWithContext(ctx).OutputState,
	}
}

// A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
type PatchInstanceFilterOutput struct{ *pulumi.OutputState }

func (PatchInstanceFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchInstanceFilter)(nil)).Elem()
}

func (o PatchInstanceFilterOutput) ToPatchInstanceFilterOutput() PatchInstanceFilterOutput {
	return o
}

func (o PatchInstanceFilterOutput) ToPatchInstanceFilterOutputWithContext(ctx context.Context) PatchInstanceFilterOutput {
	return o
}

func (o PatchInstanceFilterOutput) ToOutput(ctx context.Context) pulumix.Output[PatchInstanceFilter] {
	return pulumix.Output[PatchInstanceFilter]{
		OutputState: o.OutputState,
	}
}

// Target all VM instances in the project. If true, no other criteria is permitted.
func (o PatchInstanceFilterOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PatchInstanceFilter) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

// Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.
func (o PatchInstanceFilterOutput) GroupLabels() PatchInstanceFilterGroupLabelArrayOutput {
	return o.ApplyT(func(v PatchInstanceFilter) []PatchInstanceFilterGroupLabel { return v.GroupLabels }).(PatchInstanceFilterGroupLabelArrayOutput)
}

// Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".
func (o PatchInstanceFilterOutput) InstanceNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PatchInstanceFilter) []string { return v.InstanceNamePrefixes }).(pulumi.StringArrayOutput)
}

// Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
func (o PatchInstanceFilterOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PatchInstanceFilter) []string { return v.Instances }).(pulumi.StringArrayOutput)
}

// Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
func (o PatchInstanceFilterOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PatchInstanceFilter) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

// Targets a group of VM instances by using their [assigned labels](https://cloud.google.com/compute/docs/labeling-resources). Labels are key-value pairs. A `GroupLabel` is a combination of labels that is used to target VMs for a patch job. For example, a patch job can target VMs that have the following `GroupLabel`: `{"env":"test", "app":"web"}`. This means that the patch job is applied to VMs that have both the labels `env=test` and `app=web`.
type PatchInstanceFilterGroupLabel struct {
	// Compute Engine instance labels that must be present for a VM instance to be targeted by this filter.
	Labels map[string]string `pulumi:"labels"`
}

// PatchInstanceFilterGroupLabelInput is an input type that accepts PatchInstanceFilterGroupLabelArgs and PatchInstanceFilterGroupLabelOutput values.
// You can construct a concrete instance of `PatchInstanceFilterGroupLabelInput` via:
//
//	PatchInstanceFilterGroupLabelArgs{...}
type PatchInstanceFilterGroupLabelInput interface {
	pulumi.Input

	ToPatchInstanceFilterGroupLabelOutput() PatchInstanceFilterGroupLabelOutput
	ToPatchInstanceFilterGroupLabelOutputWithContext(context.Context) PatchInstanceFilterGroupLabelOutput
}

// Targets a group of VM instances by using their [assigned labels](https://cloud.google.com/compute/docs/labeling-resources). Labels are key-value pairs. A `GroupLabel` is a combination of labels that is used to target VMs for a patch job. For example, a patch job can target VMs that have the following `GroupLabel`: `{"env":"test", "app":"web"}`. This means that the patch job is applied to VMs that have both the labels `env=test` and `app=web`.
type PatchInstanceFilterGroupLabelArgs struct {
	// Compute Engine instance labels that must be present for a VM instance to be targeted by this filter.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (PatchInstanceFilterGroupLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchInstanceFilterGroupLabel)(nil)).Elem()
}

func (i PatchInstanceFilterGroupLabelArgs) ToPatchInstanceFilterGroupLabelOutput() PatchInstanceFilterGroupLabelOutput {
	return i.ToPatchInstanceFilterGroupLabelOutputWithContext(context.Background())
}

func (i PatchInstanceFilterGroupLabelArgs) ToPatchInstanceFilterGroupLabelOutputWithContext(ctx context.Context) PatchInstanceFilterGroupLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchInstanceFilterGroupLabelOutput)
}

func (i PatchInstanceFilterGroupLabelArgs) ToOutput(ctx context.Context) pulumix.Output[PatchInstanceFilterGroupLabel] {
	return pulumix.Output[PatchInstanceFilterGroupLabel]{
		OutputState: i.ToPatchInstanceFilterGroupLabelOutputWithContext(ctx).OutputState,
	}
}

// PatchInstanceFilterGroupLabelArrayInput is an input type that accepts PatchInstanceFilterGroupLabelArray and PatchInstanceFilterGroupLabelArrayOutput values.
// You can construct a concrete instance of `PatchInstanceFilterGroupLabelArrayInput` via:
//
//	PatchInstanceFilterGroupLabelArray{ PatchInstanceFilterGroupLabelArgs{...} }
type PatchInstanceFilterGroupLabelArrayInput interface {
	pulumi.Input

	ToPatchInstanceFilterGroupLabelArrayOutput() PatchInstanceFilterGroupLabelArrayOutput
	ToPatchInstanceFilterGroupLabelArrayOutputWithContext(context.Context) PatchInstanceFilterGroupLabelArrayOutput
}

type PatchInstanceFilterGroupLabelArray []PatchInstanceFilterGroupLabelInput

func (PatchInstanceFilterGroupLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PatchInstanceFilterGroupLabel)(nil)).Elem()
}

func (i PatchInstanceFilterGroupLabelArray) ToPatchInstanceFilterGroupLabelArrayOutput() PatchInstanceFilterGroupLabelArrayOutput {
	return i.ToPatchInstanceFilterGroupLabelArrayOutputWithContext(context.Background())
}

func (i PatchInstanceFilterGroupLabelArray) ToPatchInstanceFilterGroupLabelArrayOutputWithContext(ctx context.Context) PatchInstanceFilterGroupLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchInstanceFilterGroupLabelArrayOutput)
}

func (i PatchInstanceFilterGroupLabelArray) ToOutput(ctx context.Context) pulumix.Output[[]PatchInstanceFilterGroupLabel] {
	return pulumix.Output[[]PatchInstanceFilterGroupLabel]{
		OutputState: i.ToPatchInstanceFilterGroupLabelArrayOutputWithContext(ctx).OutputState,
	}
}

// Targets a group of VM instances by using their [assigned labels](https://cloud.google.com/compute/docs/labeling-resources). Labels are key-value pairs. A `GroupLabel` is a combination of labels that is used to target VMs for a patch job. For example, a patch job can target VMs that have the following `GroupLabel`: `{"env":"test", "app":"web"}`. This means that the patch job is applied to VMs that have both the labels `env=test` and `app=web`.
type PatchInstanceFilterGroupLabelOutput struct{ *pulumi.OutputState }

func (PatchInstanceFilterGroupLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchInstanceFilterGroupLabel)(nil)).Elem()
}

func (o PatchInstanceFilterGroupLabelOutput) ToPatchInstanceFilterGroupLabelOutput() PatchInstanceFilterGroupLabelOutput {
	return o
}

func (o PatchInstanceFilterGroupLabelOutput) ToPatchInstanceFilterGroupLabelOutputWithContext(ctx context.Context) PatchInstanceFilterGroupLabelOutput {
	return o
}

func (o PatchInstanceFilterGroupLabelOutput) ToOutput(ctx context.Context) pulumix.Output[PatchInstanceFilterGroupLabel] {
	return pulumix.Output[PatchInstanceFilterGroupLabel]{
		OutputState: o.OutputState,
	}
}

// Compute Engine instance labels that must be present for a VM instance to be targeted by this filter.
func (o PatchInstanceFilterGroupLabelOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PatchInstanceFilterGroupLabel) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type PatchInstanceFilterGroupLabelArrayOutput struct{ *pulumi.OutputState }

func (PatchInstanceFilterGroupLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PatchInstanceFilterGroupLabel)(nil)).Elem()
}

func (o PatchInstanceFilterGroupLabelArrayOutput) ToPatchInstanceFilterGroupLabelArrayOutput() PatchInstanceFilterGroupLabelArrayOutput {
	return o
}

func (o PatchInstanceFilterGroupLabelArrayOutput) ToPatchInstanceFilterGroupLabelArrayOutputWithContext(ctx context.Context) PatchInstanceFilterGroupLabelArrayOutput {
	return o
}

func (o PatchInstanceFilterGroupLabelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PatchInstanceFilterGroupLabel] {
	return pulumix.Output[[]PatchInstanceFilterGroupLabel]{
		OutputState: o.OutputState,
	}
}

func (o PatchInstanceFilterGroupLabelArrayOutput) Index(i pulumi.IntInput) PatchInstanceFilterGroupLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PatchInstanceFilterGroupLabel {
		return vs[0].([]PatchInstanceFilterGroupLabel)[vs[1].(int)]
	}).(PatchInstanceFilterGroupLabelOutput)
}

// Targets a group of VM instances by using their [assigned labels](https://cloud.google.com/compute/docs/labeling-resources). Labels are key-value pairs. A `GroupLabel` is a combination of labels that is used to target VMs for a patch job. For example, a patch job can target VMs that have the following `GroupLabel`: `{"env":"test", "app":"web"}`. This means that the patch job is applied to VMs that have both the labels `env=test` and `app=web`.
type PatchInstanceFilterGroupLabelResponse struct {
	// Compute Engine instance labels that must be present for a VM instance to be targeted by this filter.
	Labels map[string]string `pulumi:"labels"`
}

// Targets a group of VM instances by using their [assigned labels](https://cloud.google.com/compute/docs/labeling-resources). Labels are key-value pairs. A `GroupLabel` is a combination of labels that is used to target VMs for a patch job. For example, a patch job can target VMs that have the following `GroupLabel`: `{"env":"test", "app":"web"}`. This means that the patch job is applied to VMs that have both the labels `env=test` and `app=web`.
type PatchInstanceFilterGroupLabelResponseOutput struct{ *pulumi.OutputState }

func (PatchInstanceFilterGroupLabelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchInstanceFilterGroupLabelResponse)(nil)).Elem()
}

func (o PatchInstanceFilterGroupLabelResponseOutput) ToPatchInstanceFilterGroupLabelResponseOutput() PatchInstanceFilterGroupLabelResponseOutput {
	return o
}

func (o PatchInstanceFilterGroupLabelResponseOutput) ToPatchInstanceFilterGroupLabelResponseOutputWithContext(ctx context.Context) PatchInstanceFilterGroupLabelResponseOutput {
	return o
}

func (o PatchInstanceFilterGroupLabelResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PatchInstanceFilterGroupLabelResponse] {
	return pulumix.Output[PatchInstanceFilterGroupLabelResponse]{
		OutputState: o.OutputState,
	}
}

// Compute Engine instance labels that must be present for a VM instance to be targeted by this filter.
func (o PatchInstanceFilterGroupLabelResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v PatchInstanceFilterGroupLabelResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type PatchInstanceFilterGroupLabelResponseArrayOutput struct{ *pulumi.OutputState }

func (PatchInstanceFilterGroupLabelResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PatchInstanceFilterGroupLabelResponse)(nil)).Elem()
}

func (o PatchInstanceFilterGroupLabelResponseArrayOutput) ToPatchInstanceFilterGroupLabelResponseArrayOutput() PatchInstanceFilterGroupLabelResponseArrayOutput {
	return o
}

func (o PatchInstanceFilterGroupLabelResponseArrayOutput) ToPatchInstanceFilterGroupLabelResponseArrayOutputWithContext(ctx context.Context) PatchInstanceFilterGroupLabelResponseArrayOutput {
	return o
}

func (o PatchInstanceFilterGroupLabelResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PatchInstanceFilterGroupLabelResponse] {
	return pulumix.Output[[]PatchInstanceFilterGroupLabelResponse]{
		OutputState: o.OutputState,
	}
}

func (o PatchInstanceFilterGroupLabelResponseArrayOutput) Index(i pulumi.IntInput) PatchInstanceFilterGroupLabelResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PatchInstanceFilterGroupLabelResponse {
		return vs[0].([]PatchInstanceFilterGroupLabelResponse)[vs[1].(int)]
	}).(PatchInstanceFilterGroupLabelResponseOutput)
}

// A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
type PatchInstanceFilterResponse struct {
	// Target all VM instances in the project. If true, no other criteria is permitted.
	All bool `pulumi:"all"`
	// Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.
	GroupLabels []PatchInstanceFilterGroupLabelResponse `pulumi:"groupLabels"`
	// Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".
	InstanceNamePrefixes []string `pulumi:"instanceNamePrefixes"`
	// Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
	Instances []string `pulumi:"instances"`
	// Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
	Zones []string `pulumi:"zones"`
}

// A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
type PatchInstanceFilterResponseOutput struct{ *pulumi.OutputState }

func (PatchInstanceFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchInstanceFilterResponse)(nil)).Elem()
}

func (o PatchInstanceFilterResponseOutput) ToPatchInstanceFilterResponseOutput() PatchInstanceFilterResponseOutput {
	return o
}

func (o PatchInstanceFilterResponseOutput) ToPatchInstanceFilterResponseOutputWithContext(ctx context.Context) PatchInstanceFilterResponseOutput {
	return o
}

func (o PatchInstanceFilterResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PatchInstanceFilterResponse] {
	return pulumix.Output[PatchInstanceFilterResponse]{
		OutputState: o.OutputState,
	}
}

// Target all VM instances in the project. If true, no other criteria is permitted.
func (o PatchInstanceFilterResponseOutput) All() pulumi.BoolOutput {
	return o.ApplyT(func(v PatchInstanceFilterResponse) bool { return v.All }).(pulumi.BoolOutput)
}

// Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.
func (o PatchInstanceFilterResponseOutput) GroupLabels() PatchInstanceFilterGroupLabelResponseArrayOutput {
	return o.ApplyT(func(v PatchInstanceFilterResponse) []PatchInstanceFilterGroupLabelResponse { return v.GroupLabels }).(PatchInstanceFilterGroupLabelResponseArrayOutput)
}

// Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".
func (o PatchInstanceFilterResponseOutput) InstanceNamePrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PatchInstanceFilterResponse) []string { return v.InstanceNamePrefixes }).(pulumi.StringArrayOutput)
}

// Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
func (o PatchInstanceFilterResponseOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PatchInstanceFilterResponse) []string { return v.Instances }).(pulumi.StringArrayOutput)
}

// Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
func (o PatchInstanceFilterResponseOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PatchInstanceFilterResponse) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

// Patch rollout configuration specifications. Contains details on the concurrency control when applying patch(es) to all targeted VMs.
type PatchRollout struct {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
	DisruptionBudget *FixedOrPercent `pulumi:"disruptionBudget"`
	// Mode of the patch rollout.
	Mode *PatchRolloutMode `pulumi:"mode"`
}

// PatchRolloutInput is an input type that accepts PatchRolloutArgs and PatchRolloutOutput values.
// You can construct a concrete instance of `PatchRolloutInput` via:
//
//	PatchRolloutArgs{...}
type PatchRolloutInput interface {
	pulumi.Input

	ToPatchRolloutOutput() PatchRolloutOutput
	ToPatchRolloutOutputWithContext(context.Context) PatchRolloutOutput
}

// Patch rollout configuration specifications. Contains details on the concurrency control when applying patch(es) to all targeted VMs.
type PatchRolloutArgs struct {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
	DisruptionBudget FixedOrPercentPtrInput `pulumi:"disruptionBudget"`
	// Mode of the patch rollout.
	Mode PatchRolloutModePtrInput `pulumi:"mode"`
}

func (PatchRolloutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchRollout)(nil)).Elem()
}

func (i PatchRolloutArgs) ToPatchRolloutOutput() PatchRolloutOutput {
	return i.ToPatchRolloutOutputWithContext(context.Background())
}

func (i PatchRolloutArgs) ToPatchRolloutOutputWithContext(ctx context.Context) PatchRolloutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchRolloutOutput)
}

func (i PatchRolloutArgs) ToOutput(ctx context.Context) pulumix.Output[PatchRollout] {
	return pulumix.Output[PatchRollout]{
		OutputState: i.ToPatchRolloutOutputWithContext(ctx).OutputState,
	}
}

func (i PatchRolloutArgs) ToPatchRolloutPtrOutput() PatchRolloutPtrOutput {
	return i.ToPatchRolloutPtrOutputWithContext(context.Background())
}

func (i PatchRolloutArgs) ToPatchRolloutPtrOutputWithContext(ctx context.Context) PatchRolloutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchRolloutOutput).ToPatchRolloutPtrOutputWithContext(ctx)
}

// PatchRolloutPtrInput is an input type that accepts PatchRolloutArgs, PatchRolloutPtr and PatchRolloutPtrOutput values.
// You can construct a concrete instance of `PatchRolloutPtrInput` via:
//
//	        PatchRolloutArgs{...}
//
//	or:
//
//	        nil
type PatchRolloutPtrInput interface {
	pulumi.Input

	ToPatchRolloutPtrOutput() PatchRolloutPtrOutput
	ToPatchRolloutPtrOutputWithContext(context.Context) PatchRolloutPtrOutput
}

type patchRolloutPtrType PatchRolloutArgs

func PatchRolloutPtr(v *PatchRolloutArgs) PatchRolloutPtrInput {
	return (*patchRolloutPtrType)(v)
}

func (*patchRolloutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchRollout)(nil)).Elem()
}

func (i *patchRolloutPtrType) ToPatchRolloutPtrOutput() PatchRolloutPtrOutput {
	return i.ToPatchRolloutPtrOutputWithContext(context.Background())
}

func (i *patchRolloutPtrType) ToPatchRolloutPtrOutputWithContext(ctx context.Context) PatchRolloutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatchRolloutPtrOutput)
}

func (i *patchRolloutPtrType) ToOutput(ctx context.Context) pulumix.Output[*PatchRollout] {
	return pulumix.Output[*PatchRollout]{
		OutputState: i.ToPatchRolloutPtrOutputWithContext(ctx).OutputState,
	}
}

// Patch rollout configuration specifications. Contains details on the concurrency control when applying patch(es) to all targeted VMs.
type PatchRolloutOutput struct{ *pulumi.OutputState }

func (PatchRolloutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchRollout)(nil)).Elem()
}

func (o PatchRolloutOutput) ToPatchRolloutOutput() PatchRolloutOutput {
	return o
}

func (o PatchRolloutOutput) ToPatchRolloutOutputWithContext(ctx context.Context) PatchRolloutOutput {
	return o
}

func (o PatchRolloutOutput) ToPatchRolloutPtrOutput() PatchRolloutPtrOutput {
	return o.ToPatchRolloutPtrOutputWithContext(context.Background())
}

func (o PatchRolloutOutput) ToPatchRolloutPtrOutputWithContext(ctx context.Context) PatchRolloutPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PatchRollout) *PatchRollout {
		return &v
	}).(PatchRolloutPtrOutput)
}

func (o PatchRolloutOutput) ToOutput(ctx context.Context) pulumix.Output[PatchRollout] {
	return pulumix.Output[PatchRollout]{
		OutputState: o.OutputState,
	}
}

// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
func (o PatchRolloutOutput) DisruptionBudget() FixedOrPercentPtrOutput {
	return o.ApplyT(func(v PatchRollout) *FixedOrPercent { return v.DisruptionBudget }).(FixedOrPercentPtrOutput)
}

// Mode of the patch rollout.
func (o PatchRolloutOutput) Mode() PatchRolloutModePtrOutput {
	return o.ApplyT(func(v PatchRollout) *PatchRolloutMode { return v.Mode }).(PatchRolloutModePtrOutput)
}

type PatchRolloutPtrOutput struct{ *pulumi.OutputState }

func (PatchRolloutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PatchRollout)(nil)).Elem()
}

func (o PatchRolloutPtrOutput) ToPatchRolloutPtrOutput() PatchRolloutPtrOutput {
	return o
}

func (o PatchRolloutPtrOutput) ToPatchRolloutPtrOutputWithContext(ctx context.Context) PatchRolloutPtrOutput {
	return o
}

func (o PatchRolloutPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PatchRollout] {
	return pulumix.Output[*PatchRollout]{
		OutputState: o.OutputState,
	}
}

func (o PatchRolloutPtrOutput) Elem() PatchRolloutOutput {
	return o.ApplyT(func(v *PatchRollout) PatchRollout {
		if v != nil {
			return *v
		}
		var ret PatchRollout
		return ret
	}).(PatchRolloutOutput)
}

// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
func (o PatchRolloutPtrOutput) DisruptionBudget() FixedOrPercentPtrOutput {
	return o.ApplyT(func(v *PatchRollout) *FixedOrPercent {
		if v == nil {
			return nil
		}
		return v.DisruptionBudget
	}).(FixedOrPercentPtrOutput)
}

// Mode of the patch rollout.
func (o PatchRolloutPtrOutput) Mode() PatchRolloutModePtrOutput {
	return o.ApplyT(func(v *PatchRollout) *PatchRolloutMode {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(PatchRolloutModePtrOutput)
}

// Patch rollout configuration specifications. Contains details on the concurrency control when applying patch(es) to all targeted VMs.
type PatchRolloutResponse struct {
	// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
	DisruptionBudget FixedOrPercentResponse `pulumi:"disruptionBudget"`
	// Mode of the patch rollout.
	Mode string `pulumi:"mode"`
}

// Patch rollout configuration specifications. Contains details on the concurrency control when applying patch(es) to all targeted VMs.
type PatchRolloutResponseOutput struct{ *pulumi.OutputState }

func (PatchRolloutResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatchRolloutResponse)(nil)).Elem()
}

func (o PatchRolloutResponseOutput) ToPatchRolloutResponseOutput() PatchRolloutResponseOutput {
	return o
}

func (o PatchRolloutResponseOutput) ToPatchRolloutResponseOutputWithContext(ctx context.Context) PatchRolloutResponseOutput {
	return o
}

func (o PatchRolloutResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PatchRolloutResponse] {
	return pulumix.Output[PatchRolloutResponse]{
		OutputState: o.OutputState,
	}
}

// The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of `10`, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops.
func (o PatchRolloutResponseOutput) DisruptionBudget() FixedOrPercentResponseOutput {
	return o.ApplyT(func(v PatchRolloutResponse) FixedOrPercentResponse { return v.DisruptionBudget }).(FixedOrPercentResponseOutput)
}

// Mode of the patch rollout.
func (o PatchRolloutResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v PatchRolloutResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// Sets the time for recurring patch deployments.
type RecurringSchedule struct {
	// Optional. The end time at which a recurring patch deployment schedule is no longer active.
	EndTime *string `pulumi:"endTime"`
	// The frequency unit of this recurring schedule.
	Frequency RecurringScheduleFrequency `pulumi:"frequency"`
	// Schedule with monthly executions.
	Monthly MonthlySchedule `pulumi:"monthly"`
	// Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
	StartTime *string `pulumi:"startTime"`
	// Time of the day to run a recurring deployment.
	TimeOfDay TimeOfDay `pulumi:"timeOfDay"`
	// Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
	TimeZone TimeZone `pulumi:"timeZone"`
	// Schedule with weekly executions.
	Weekly WeeklySchedule `pulumi:"weekly"`
}

// RecurringScheduleInput is an input type that accepts RecurringScheduleArgs and RecurringScheduleOutput values.
// You can construct a concrete instance of `RecurringScheduleInput` via:
//
//	RecurringScheduleArgs{...}
type RecurringScheduleInput interface {
	pulumi.Input

	ToRecurringScheduleOutput() RecurringScheduleOutput
	ToRecurringScheduleOutputWithContext(context.Context) RecurringScheduleOutput
}

// Sets the time for recurring patch deployments.
type RecurringScheduleArgs struct {
	// Optional. The end time at which a recurring patch deployment schedule is no longer active.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The frequency unit of this recurring schedule.
	Frequency RecurringScheduleFrequencyInput `pulumi:"frequency"`
	// Schedule with monthly executions.
	Monthly MonthlyScheduleInput `pulumi:"monthly"`
	// Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Time of the day to run a recurring deployment.
	TimeOfDay TimeOfDayInput `pulumi:"timeOfDay"`
	// Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
	TimeZone TimeZoneInput `pulumi:"timeZone"`
	// Schedule with weekly executions.
	Weekly WeeklyScheduleInput `pulumi:"weekly"`
}

func (RecurringScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringSchedule)(nil)).Elem()
}

func (i RecurringScheduleArgs) ToRecurringScheduleOutput() RecurringScheduleOutput {
	return i.ToRecurringScheduleOutputWithContext(context.Background())
}

func (i RecurringScheduleArgs) ToRecurringScheduleOutputWithContext(ctx context.Context) RecurringScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurringScheduleOutput)
}

func (i RecurringScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[RecurringSchedule] {
	return pulumix.Output[RecurringSchedule]{
		OutputState: i.ToRecurringScheduleOutputWithContext(ctx).OutputState,
	}
}

// Sets the time for recurring patch deployments.
type RecurringScheduleOutput struct{ *pulumi.OutputState }

func (RecurringScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringSchedule)(nil)).Elem()
}

func (o RecurringScheduleOutput) ToRecurringScheduleOutput() RecurringScheduleOutput {
	return o
}

func (o RecurringScheduleOutput) ToRecurringScheduleOutputWithContext(ctx context.Context) RecurringScheduleOutput {
	return o
}

func (o RecurringScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[RecurringSchedule] {
	return pulumix.Output[RecurringSchedule]{
		OutputState: o.OutputState,
	}
}

// Optional. The end time at which a recurring patch deployment schedule is no longer active.
func (o RecurringScheduleOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The frequency unit of this recurring schedule.
func (o RecurringScheduleOutput) Frequency() RecurringScheduleFrequencyOutput {
	return o.ApplyT(func(v RecurringSchedule) RecurringScheduleFrequency { return v.Frequency }).(RecurringScheduleFrequencyOutput)
}

// Schedule with monthly executions.
func (o RecurringScheduleOutput) Monthly() MonthlyScheduleOutput {
	return o.ApplyT(func(v RecurringSchedule) MonthlySchedule { return v.Monthly }).(MonthlyScheduleOutput)
}

// Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
func (o RecurringScheduleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurringSchedule) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Time of the day to run a recurring deployment.
func (o RecurringScheduleOutput) TimeOfDay() TimeOfDayOutput {
	return o.ApplyT(func(v RecurringSchedule) TimeOfDay { return v.TimeOfDay }).(TimeOfDayOutput)
}

// Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
func (o RecurringScheduleOutput) TimeZone() TimeZoneOutput {
	return o.ApplyT(func(v RecurringSchedule) TimeZone { return v.TimeZone }).(TimeZoneOutput)
}

// Schedule with weekly executions.
func (o RecurringScheduleOutput) Weekly() WeeklyScheduleOutput {
	return o.ApplyT(func(v RecurringSchedule) WeeklySchedule { return v.Weekly }).(WeeklyScheduleOutput)
}

// Sets the time for recurring patch deployments.
type RecurringScheduleResponse struct {
	// Optional. The end time at which a recurring patch deployment schedule is no longer active.
	EndTime string `pulumi:"endTime"`
	// The frequency unit of this recurring schedule.
	Frequency string `pulumi:"frequency"`
	// The time the last patch job ran successfully.
	LastExecuteTime string `pulumi:"lastExecuteTime"`
	// Schedule with monthly executions.
	Monthly MonthlyScheduleResponse `pulumi:"monthly"`
	// The time the next patch job is scheduled to run.
	NextExecuteTime string `pulumi:"nextExecuteTime"`
	// Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
	StartTime string `pulumi:"startTime"`
	// Time of the day to run a recurring deployment.
	TimeOfDay TimeOfDayResponse `pulumi:"timeOfDay"`
	// Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
	TimeZone TimeZoneResponse `pulumi:"timeZone"`
	// Schedule with weekly executions.
	Weekly WeeklyScheduleResponse `pulumi:"weekly"`
}

// Sets the time for recurring patch deployments.
type RecurringScheduleResponseOutput struct{ *pulumi.OutputState }

func (RecurringScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurringScheduleResponse)(nil)).Elem()
}

func (o RecurringScheduleResponseOutput) ToRecurringScheduleResponseOutput() RecurringScheduleResponseOutput {
	return o
}

func (o RecurringScheduleResponseOutput) ToRecurringScheduleResponseOutputWithContext(ctx context.Context) RecurringScheduleResponseOutput {
	return o
}

func (o RecurringScheduleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RecurringScheduleResponse] {
	return pulumix.Output[RecurringScheduleResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. The end time at which a recurring patch deployment schedule is no longer active.
func (o RecurringScheduleResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v RecurringScheduleResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// The frequency unit of this recurring schedule.
func (o RecurringScheduleResponseOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v RecurringScheduleResponse) string { return v.Frequency }).(pulumi.StringOutput)
}

// The time the last patch job ran successfully.
func (o RecurringScheduleResponseOutput) LastExecuteTime() pulumi.StringOutput {
	return o.ApplyT(func(v RecurringScheduleResponse) string { return v.LastExecuteTime }).(pulumi.StringOutput)
}

// Schedule with monthly executions.
func (o RecurringScheduleResponseOutput) Monthly() MonthlyScheduleResponseOutput {
	return o.ApplyT(func(v RecurringScheduleResponse) MonthlyScheduleResponse { return v.Monthly }).(MonthlyScheduleResponseOutput)
}

// The time the next patch job is scheduled to run.
func (o RecurringScheduleResponseOutput) NextExecuteTime() pulumi.StringOutput {
	return o.ApplyT(func(v RecurringScheduleResponse) string { return v.NextExecuteTime }).(pulumi.StringOutput)
}

// Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
func (o RecurringScheduleResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v RecurringScheduleResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Time of the day to run a recurring deployment.
func (o RecurringScheduleResponseOutput) TimeOfDay() TimeOfDayResponseOutput {
	return o.ApplyT(func(v RecurringScheduleResponse) TimeOfDayResponse { return v.TimeOfDay }).(TimeOfDayResponseOutput)
}

// Defines the time zone that `time_of_day` is relative to. The rules for daylight saving time are determined by the chosen time zone.
func (o RecurringScheduleResponseOutput) TimeZone() TimeZoneResponseOutput {
	return o.ApplyT(func(v RecurringScheduleResponse) TimeZoneResponse { return v.TimeZone }).(TimeZoneResponseOutput)
}

// Schedule with weekly executions.
func (o RecurringScheduleResponseOutput) Weekly() WeeklyScheduleResponseOutput {
	return o.ApplyT(func(v RecurringScheduleResponse) WeeklyScheduleResponse { return v.Weekly }).(WeeklyScheduleResponseOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDay struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours *int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes *int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos *int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds *int `pulumi:"seconds"`
}

// TimeOfDayInput is an input type that accepts TimeOfDayArgs and TimeOfDayOutput values.
// You can construct a concrete instance of `TimeOfDayInput` via:
//
//	TimeOfDayArgs{...}
type TimeOfDayInput interface {
	pulumi.Input

	ToTimeOfDayOutput() TimeOfDayOutput
	ToTimeOfDayOutputWithContext(context.Context) TimeOfDayOutput
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayArgs struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours pulumi.IntPtrInput `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes pulumi.IntPtrInput `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds pulumi.IntPtrInput `pulumi:"seconds"`
}

func (TimeOfDayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDay)(nil)).Elem()
}

func (i TimeOfDayArgs) ToTimeOfDayOutput() TimeOfDayOutput {
	return i.ToTimeOfDayOutputWithContext(context.Background())
}

func (i TimeOfDayArgs) ToTimeOfDayOutputWithContext(ctx context.Context) TimeOfDayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOfDayOutput)
}

func (i TimeOfDayArgs) ToOutput(ctx context.Context) pulumix.Output[TimeOfDay] {
	return pulumix.Output[TimeOfDay]{
		OutputState: i.ToTimeOfDayOutputWithContext(ctx).OutputState,
	}
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayOutput struct{ *pulumi.OutputState }

func (TimeOfDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDay)(nil)).Elem()
}

func (o TimeOfDayOutput) ToTimeOfDayOutput() TimeOfDayOutput {
	return o
}

func (o TimeOfDayOutput) ToTimeOfDayOutputWithContext(ctx context.Context) TimeOfDayOutput {
	return o
}

func (o TimeOfDayOutput) ToOutput(ctx context.Context) pulumix.Output[TimeOfDay] {
	return pulumix.Output[TimeOfDay]{
		OutputState: o.OutputState,
	}
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayOutput) Hours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Hours }).(pulumi.IntPtrOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayOutput) Minutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Minutes }).(pulumi.IntPtrOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Seconds }).(pulumi.IntPtrOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayResponse struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds int `pulumi:"seconds"`
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayResponseOutput struct{ *pulumi.OutputState }

func (TimeOfDayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDayResponse)(nil)).Elem()
}

func (o TimeOfDayResponseOutput) ToTimeOfDayResponseOutput() TimeOfDayResponseOutput {
	return o
}

func (o TimeOfDayResponseOutput) ToTimeOfDayResponseOutputWithContext(ctx context.Context) TimeOfDayResponseOutput {
	return o
}

func (o TimeOfDayResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TimeOfDayResponse] {
	return pulumix.Output[TimeOfDayResponse]{
		OutputState: o.OutputState,
	}
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayResponseOutput) Hours() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Hours }).(pulumi.IntOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayResponseOutput) Minutes() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Minutes }).(pulumi.IntOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayResponseOutput) Nanos() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Nanos }).(pulumi.IntOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayResponseOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Seconds }).(pulumi.IntOutput)
}

// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
type TimeZone struct {
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	Id *string `pulumi:"id"`
	// Optional. IANA Time Zone Database version number, e.g. "2019a".
	Version *string `pulumi:"version"`
}

// TimeZoneInput is an input type that accepts TimeZoneArgs and TimeZoneOutput values.
// You can construct a concrete instance of `TimeZoneInput` via:
//
//	TimeZoneArgs{...}
type TimeZoneInput interface {
	pulumi.Input

	ToTimeZoneOutput() TimeZoneOutput
	ToTimeZoneOutputWithContext(context.Context) TimeZoneOutput
}

// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
type TimeZoneArgs struct {
	// IANA Time Zone Database time zone, e.g. "America/New_York".
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Optional. IANA Time Zone Database version number, e.g. "2019a".
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (TimeZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeZone)(nil)).Elem()
}

func (i TimeZoneArgs) ToTimeZoneOutput() TimeZoneOutput {
	return i.ToTimeZoneOutputWithContext(context.Background())
}

func (i TimeZoneArgs) ToTimeZoneOutputWithContext(ctx context.Context) TimeZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeZoneOutput)
}

func (i TimeZoneArgs) ToOutput(ctx context.Context) pulumix.Output[TimeZone] {
	return pulumix.Output[TimeZone]{
		OutputState: i.ToTimeZoneOutputWithContext(ctx).OutputState,
	}
}

// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
type TimeZoneOutput struct{ *pulumi.OutputState }

func (TimeZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeZone)(nil)).Elem()
}

func (o TimeZoneOutput) ToTimeZoneOutput() TimeZoneOutput {
	return o
}

func (o TimeZoneOutput) ToTimeZoneOutputWithContext(ctx context.Context) TimeZoneOutput {
	return o
}

func (o TimeZoneOutput) ToOutput(ctx context.Context) pulumix.Output[TimeZone] {
	return pulumix.Output[TimeZone]{
		OutputState: o.OutputState,
	}
}

// IANA Time Zone Database time zone, e.g. "America/New_York".
func (o TimeZoneOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeZone) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Optional. IANA Time Zone Database version number, e.g. "2019a".
func (o TimeZoneOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeZone) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
type TimeZoneResponse struct {
	// Optional. IANA Time Zone Database version number, e.g. "2019a".
	Version string `pulumi:"version"`
}

// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
type TimeZoneResponseOutput struct{ *pulumi.OutputState }

func (TimeZoneResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeZoneResponse)(nil)).Elem()
}

func (o TimeZoneResponseOutput) ToTimeZoneResponseOutput() TimeZoneResponseOutput {
	return o
}

func (o TimeZoneResponseOutput) ToTimeZoneResponseOutputWithContext(ctx context.Context) TimeZoneResponseOutput {
	return o
}

func (o TimeZoneResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TimeZoneResponse] {
	return pulumix.Output[TimeZoneResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. IANA Time Zone Database version number, e.g. "2019a".
func (o TimeZoneResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v TimeZoneResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Represents one week day in a month. An example is "the 4th Sunday".
type WeekDayOfMonth struct {
	// A day of the week.
	DayOfWeek WeekDayOfMonthDayOfWeek `pulumi:"dayOfWeek"`
	// Optional. Represents the number of days before or after the given week day of month that the patch deployment is scheduled for. For example if `week_ordinal` and `day_of_week` values point to the second day of the month and this `day_offset` value is set to `3`, the patch deployment takes place three days after the second Tuesday of the month. If this value is negative, for example -5, the patches are deployed five days before before the second Tuesday of the month. Allowed values are in range [-30, 30].
	DayOffset *int `pulumi:"dayOffset"`
	// Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
	WeekOrdinal int `pulumi:"weekOrdinal"`
}

// WeekDayOfMonthInput is an input type that accepts WeekDayOfMonthArgs and WeekDayOfMonthOutput values.
// You can construct a concrete instance of `WeekDayOfMonthInput` via:
//
//	WeekDayOfMonthArgs{...}
type WeekDayOfMonthInput interface {
	pulumi.Input

	ToWeekDayOfMonthOutput() WeekDayOfMonthOutput
	ToWeekDayOfMonthOutputWithContext(context.Context) WeekDayOfMonthOutput
}

// Represents one week day in a month. An example is "the 4th Sunday".
type WeekDayOfMonthArgs struct {
	// A day of the week.
	DayOfWeek WeekDayOfMonthDayOfWeekInput `pulumi:"dayOfWeek"`
	// Optional. Represents the number of days before or after the given week day of month that the patch deployment is scheduled for. For example if `week_ordinal` and `day_of_week` values point to the second day of the month and this `day_offset` value is set to `3`, the patch deployment takes place three days after the second Tuesday of the month. If this value is negative, for example -5, the patches are deployed five days before before the second Tuesday of the month. Allowed values are in range [-30, 30].
	DayOffset pulumi.IntPtrInput `pulumi:"dayOffset"`
	// Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
	WeekOrdinal pulumi.IntInput `pulumi:"weekOrdinal"`
}

func (WeekDayOfMonthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDayOfMonth)(nil)).Elem()
}

func (i WeekDayOfMonthArgs) ToWeekDayOfMonthOutput() WeekDayOfMonthOutput {
	return i.ToWeekDayOfMonthOutputWithContext(context.Background())
}

func (i WeekDayOfMonthArgs) ToWeekDayOfMonthOutputWithContext(ctx context.Context) WeekDayOfMonthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeekDayOfMonthOutput)
}

func (i WeekDayOfMonthArgs) ToOutput(ctx context.Context) pulumix.Output[WeekDayOfMonth] {
	return pulumix.Output[WeekDayOfMonth]{
		OutputState: i.ToWeekDayOfMonthOutputWithContext(ctx).OutputState,
	}
}

// Represents one week day in a month. An example is "the 4th Sunday".
type WeekDayOfMonthOutput struct{ *pulumi.OutputState }

func (WeekDayOfMonthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDayOfMonth)(nil)).Elem()
}

func (o WeekDayOfMonthOutput) ToWeekDayOfMonthOutput() WeekDayOfMonthOutput {
	return o
}

func (o WeekDayOfMonthOutput) ToWeekDayOfMonthOutputWithContext(ctx context.Context) WeekDayOfMonthOutput {
	return o
}

func (o WeekDayOfMonthOutput) ToOutput(ctx context.Context) pulumix.Output[WeekDayOfMonth] {
	return pulumix.Output[WeekDayOfMonth]{
		OutputState: o.OutputState,
	}
}

// A day of the week.
func (o WeekDayOfMonthOutput) DayOfWeek() WeekDayOfMonthDayOfWeekOutput {
	return o.ApplyT(func(v WeekDayOfMonth) WeekDayOfMonthDayOfWeek { return v.DayOfWeek }).(WeekDayOfMonthDayOfWeekOutput)
}

// Optional. Represents the number of days before or after the given week day of month that the patch deployment is scheduled for. For example if `week_ordinal` and `day_of_week` values point to the second day of the month and this `day_offset` value is set to `3`, the patch deployment takes place three days after the second Tuesday of the month. If this value is negative, for example -5, the patches are deployed five days before before the second Tuesday of the month. Allowed values are in range [-30, 30].
func (o WeekDayOfMonthOutput) DayOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WeekDayOfMonth) *int { return v.DayOffset }).(pulumi.IntPtrOutput)
}

// Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
func (o WeekDayOfMonthOutput) WeekOrdinal() pulumi.IntOutput {
	return o.ApplyT(func(v WeekDayOfMonth) int { return v.WeekOrdinal }).(pulumi.IntOutput)
}

// Represents one week day in a month. An example is "the 4th Sunday".
type WeekDayOfMonthResponse struct {
	// A day of the week.
	DayOfWeek string `pulumi:"dayOfWeek"`
	// Optional. Represents the number of days before or after the given week day of month that the patch deployment is scheduled for. For example if `week_ordinal` and `day_of_week` values point to the second day of the month and this `day_offset` value is set to `3`, the patch deployment takes place three days after the second Tuesday of the month. If this value is negative, for example -5, the patches are deployed five days before before the second Tuesday of the month. Allowed values are in range [-30, 30].
	DayOffset int `pulumi:"dayOffset"`
	// Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
	WeekOrdinal int `pulumi:"weekOrdinal"`
}

// Represents one week day in a month. An example is "the 4th Sunday".
type WeekDayOfMonthResponseOutput struct{ *pulumi.OutputState }

func (WeekDayOfMonthResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDayOfMonthResponse)(nil)).Elem()
}

func (o WeekDayOfMonthResponseOutput) ToWeekDayOfMonthResponseOutput() WeekDayOfMonthResponseOutput {
	return o
}

func (o WeekDayOfMonthResponseOutput) ToWeekDayOfMonthResponseOutputWithContext(ctx context.Context) WeekDayOfMonthResponseOutput {
	return o
}

func (o WeekDayOfMonthResponseOutput) ToOutput(ctx context.Context) pulumix.Output[WeekDayOfMonthResponse] {
	return pulumix.Output[WeekDayOfMonthResponse]{
		OutputState: o.OutputState,
	}
}

// A day of the week.
func (o WeekDayOfMonthResponseOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v WeekDayOfMonthResponse) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// Optional. Represents the number of days before or after the given week day of month that the patch deployment is scheduled for. For example if `week_ordinal` and `day_of_week` values point to the second day of the month and this `day_offset` value is set to `3`, the patch deployment takes place three days after the second Tuesday of the month. If this value is negative, for example -5, the patches are deployed five days before before the second Tuesday of the month. Allowed values are in range [-30, 30].
func (o WeekDayOfMonthResponseOutput) DayOffset() pulumi.IntOutput {
	return o.ApplyT(func(v WeekDayOfMonthResponse) int { return v.DayOffset }).(pulumi.IntOutput)
}

// Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month.
func (o WeekDayOfMonthResponseOutput) WeekOrdinal() pulumi.IntOutput {
	return o.ApplyT(func(v WeekDayOfMonthResponse) int { return v.WeekOrdinal }).(pulumi.IntOutput)
}

// Represents a weekly schedule.
type WeeklySchedule struct {
	// Day of the week.
	DayOfWeek WeeklyScheduleDayOfWeek `pulumi:"dayOfWeek"`
}

// WeeklyScheduleInput is an input type that accepts WeeklyScheduleArgs and WeeklyScheduleOutput values.
// You can construct a concrete instance of `WeeklyScheduleInput` via:
//
//	WeeklyScheduleArgs{...}
type WeeklyScheduleInput interface {
	pulumi.Input

	ToWeeklyScheduleOutput() WeeklyScheduleOutput
	ToWeeklyScheduleOutputWithContext(context.Context) WeeklyScheduleOutput
}

// Represents a weekly schedule.
type WeeklyScheduleArgs struct {
	// Day of the week.
	DayOfWeek WeeklyScheduleDayOfWeekInput `pulumi:"dayOfWeek"`
}

func (WeeklyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklySchedule)(nil)).Elem()
}

func (i WeeklyScheduleArgs) ToWeeklyScheduleOutput() WeeklyScheduleOutput {
	return i.ToWeeklyScheduleOutputWithContext(context.Background())
}

func (i WeeklyScheduleArgs) ToWeeklyScheduleOutputWithContext(ctx context.Context) WeeklyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyScheduleOutput)
}

func (i WeeklyScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[WeeklySchedule] {
	return pulumix.Output[WeeklySchedule]{
		OutputState: i.ToWeeklyScheduleOutputWithContext(ctx).OutputState,
	}
}

// Represents a weekly schedule.
type WeeklyScheduleOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklySchedule)(nil)).Elem()
}

func (o WeeklyScheduleOutput) ToWeeklyScheduleOutput() WeeklyScheduleOutput {
	return o
}

func (o WeeklyScheduleOutput) ToWeeklyScheduleOutputWithContext(ctx context.Context) WeeklyScheduleOutput {
	return o
}

func (o WeeklyScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[WeeklySchedule] {
	return pulumix.Output[WeeklySchedule]{
		OutputState: o.OutputState,
	}
}

// Day of the week.
func (o WeeklyScheduleOutput) DayOfWeek() WeeklyScheduleDayOfWeekOutput {
	return o.ApplyT(func(v WeeklySchedule) WeeklyScheduleDayOfWeek { return v.DayOfWeek }).(WeeklyScheduleDayOfWeekOutput)
}

// Represents a weekly schedule.
type WeeklyScheduleResponse struct {
	// Day of the week.
	DayOfWeek string `pulumi:"dayOfWeek"`
}

// Represents a weekly schedule.
type WeeklyScheduleResponseOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyScheduleResponse)(nil)).Elem()
}

func (o WeeklyScheduleResponseOutput) ToWeeklyScheduleResponseOutput() WeeklyScheduleResponseOutput {
	return o
}

func (o WeeklyScheduleResponseOutput) ToWeeklyScheduleResponseOutputWithContext(ctx context.Context) WeeklyScheduleResponseOutput {
	return o
}

func (o WeeklyScheduleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[WeeklyScheduleResponse] {
	return pulumix.Output[WeeklyScheduleResponse]{
		OutputState: o.OutputState,
	}
}

// Day of the week.
func (o WeeklyScheduleResponseOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v WeeklyScheduleResponse) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// Windows patching is performed using the Windows Update Agent.
type WindowsUpdateSettings struct {
	// Only apply updates of these windows update classifications. If empty, all updates are applied.
	Classifications []WindowsUpdateSettingsClassificationsItem `pulumi:"classifications"`
	// List of KBs to exclude from update.
	Excludes []string `pulumi:"excludes"`
	// An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.
	ExclusivePatches []string `pulumi:"exclusivePatches"`
}

// WindowsUpdateSettingsInput is an input type that accepts WindowsUpdateSettingsArgs and WindowsUpdateSettingsOutput values.
// You can construct a concrete instance of `WindowsUpdateSettingsInput` via:
//
//	WindowsUpdateSettingsArgs{...}
type WindowsUpdateSettingsInput interface {
	pulumi.Input

	ToWindowsUpdateSettingsOutput() WindowsUpdateSettingsOutput
	ToWindowsUpdateSettingsOutputWithContext(context.Context) WindowsUpdateSettingsOutput
}

// Windows patching is performed using the Windows Update Agent.
type WindowsUpdateSettingsArgs struct {
	// Only apply updates of these windows update classifications. If empty, all updates are applied.
	Classifications WindowsUpdateSettingsClassificationsItemArrayInput `pulumi:"classifications"`
	// List of KBs to exclude from update.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.
	ExclusivePatches pulumi.StringArrayInput `pulumi:"exclusivePatches"`
}

func (WindowsUpdateSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUpdateSettings)(nil)).Elem()
}

func (i WindowsUpdateSettingsArgs) ToWindowsUpdateSettingsOutput() WindowsUpdateSettingsOutput {
	return i.ToWindowsUpdateSettingsOutputWithContext(context.Background())
}

func (i WindowsUpdateSettingsArgs) ToWindowsUpdateSettingsOutputWithContext(ctx context.Context) WindowsUpdateSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUpdateSettingsOutput)
}

func (i WindowsUpdateSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[WindowsUpdateSettings] {
	return pulumix.Output[WindowsUpdateSettings]{
		OutputState: i.ToWindowsUpdateSettingsOutputWithContext(ctx).OutputState,
	}
}

func (i WindowsUpdateSettingsArgs) ToWindowsUpdateSettingsPtrOutput() WindowsUpdateSettingsPtrOutput {
	return i.ToWindowsUpdateSettingsPtrOutputWithContext(context.Background())
}

func (i WindowsUpdateSettingsArgs) ToWindowsUpdateSettingsPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUpdateSettingsOutput).ToWindowsUpdateSettingsPtrOutputWithContext(ctx)
}

// WindowsUpdateSettingsPtrInput is an input type that accepts WindowsUpdateSettingsArgs, WindowsUpdateSettingsPtr and WindowsUpdateSettingsPtrOutput values.
// You can construct a concrete instance of `WindowsUpdateSettingsPtrInput` via:
//
//	        WindowsUpdateSettingsArgs{...}
//
//	or:
//
//	        nil
type WindowsUpdateSettingsPtrInput interface {
	pulumi.Input

	ToWindowsUpdateSettingsPtrOutput() WindowsUpdateSettingsPtrOutput
	ToWindowsUpdateSettingsPtrOutputWithContext(context.Context) WindowsUpdateSettingsPtrOutput
}

type windowsUpdateSettingsPtrType WindowsUpdateSettingsArgs

func WindowsUpdateSettingsPtr(v *WindowsUpdateSettingsArgs) WindowsUpdateSettingsPtrInput {
	return (*windowsUpdateSettingsPtrType)(v)
}

func (*windowsUpdateSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsUpdateSettings)(nil)).Elem()
}

func (i *windowsUpdateSettingsPtrType) ToWindowsUpdateSettingsPtrOutput() WindowsUpdateSettingsPtrOutput {
	return i.ToWindowsUpdateSettingsPtrOutputWithContext(context.Background())
}

func (i *windowsUpdateSettingsPtrType) ToWindowsUpdateSettingsPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsUpdateSettingsPtrOutput)
}

func (i *windowsUpdateSettingsPtrType) ToOutput(ctx context.Context) pulumix.Output[*WindowsUpdateSettings] {
	return pulumix.Output[*WindowsUpdateSettings]{
		OutputState: i.ToWindowsUpdateSettingsPtrOutputWithContext(ctx).OutputState,
	}
}

// Windows patching is performed using the Windows Update Agent.
type WindowsUpdateSettingsOutput struct{ *pulumi.OutputState }

func (WindowsUpdateSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUpdateSettings)(nil)).Elem()
}

func (o WindowsUpdateSettingsOutput) ToWindowsUpdateSettingsOutput() WindowsUpdateSettingsOutput {
	return o
}

func (o WindowsUpdateSettingsOutput) ToWindowsUpdateSettingsOutputWithContext(ctx context.Context) WindowsUpdateSettingsOutput {
	return o
}

func (o WindowsUpdateSettingsOutput) ToWindowsUpdateSettingsPtrOutput() WindowsUpdateSettingsPtrOutput {
	return o.ToWindowsUpdateSettingsPtrOutputWithContext(context.Background())
}

func (o WindowsUpdateSettingsOutput) ToWindowsUpdateSettingsPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WindowsUpdateSettings) *WindowsUpdateSettings {
		return &v
	}).(WindowsUpdateSettingsPtrOutput)
}

func (o WindowsUpdateSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[WindowsUpdateSettings] {
	return pulumix.Output[WindowsUpdateSettings]{
		OutputState: o.OutputState,
	}
}

// Only apply updates of these windows update classifications. If empty, all updates are applied.
func (o WindowsUpdateSettingsOutput) Classifications() WindowsUpdateSettingsClassificationsItemArrayOutput {
	return o.ApplyT(func(v WindowsUpdateSettings) []WindowsUpdateSettingsClassificationsItem { return v.Classifications }).(WindowsUpdateSettingsClassificationsItemArrayOutput)
}

// List of KBs to exclude from update.
func (o WindowsUpdateSettingsOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsUpdateSettings) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.
func (o WindowsUpdateSettingsOutput) ExclusivePatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsUpdateSettings) []string { return v.ExclusivePatches }).(pulumi.StringArrayOutput)
}

type WindowsUpdateSettingsPtrOutput struct{ *pulumi.OutputState }

func (WindowsUpdateSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsUpdateSettings)(nil)).Elem()
}

func (o WindowsUpdateSettingsPtrOutput) ToWindowsUpdateSettingsPtrOutput() WindowsUpdateSettingsPtrOutput {
	return o
}

func (o WindowsUpdateSettingsPtrOutput) ToWindowsUpdateSettingsPtrOutputWithContext(ctx context.Context) WindowsUpdateSettingsPtrOutput {
	return o
}

func (o WindowsUpdateSettingsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*WindowsUpdateSettings] {
	return pulumix.Output[*WindowsUpdateSettings]{
		OutputState: o.OutputState,
	}
}

func (o WindowsUpdateSettingsPtrOutput) Elem() WindowsUpdateSettingsOutput {
	return o.ApplyT(func(v *WindowsUpdateSettings) WindowsUpdateSettings {
		if v != nil {
			return *v
		}
		var ret WindowsUpdateSettings
		return ret
	}).(WindowsUpdateSettingsOutput)
}

// Only apply updates of these windows update classifications. If empty, all updates are applied.
func (o WindowsUpdateSettingsPtrOutput) Classifications() WindowsUpdateSettingsClassificationsItemArrayOutput {
	return o.ApplyT(func(v *WindowsUpdateSettings) []WindowsUpdateSettingsClassificationsItem {
		if v == nil {
			return nil
		}
		return v.Classifications
	}).(WindowsUpdateSettingsClassificationsItemArrayOutput)
}

// List of KBs to exclude from update.
func (o WindowsUpdateSettingsPtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsUpdateSettings) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.
func (o WindowsUpdateSettingsPtrOutput) ExclusivePatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WindowsUpdateSettings) []string {
		if v == nil {
			return nil
		}
		return v.ExclusivePatches
	}).(pulumi.StringArrayOutput)
}

// Windows patching is performed using the Windows Update Agent.
type WindowsUpdateSettingsResponse struct {
	// Only apply updates of these windows update classifications. If empty, all updates are applied.
	Classifications []string `pulumi:"classifications"`
	// List of KBs to exclude from update.
	Excludes []string `pulumi:"excludes"`
	// An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.
	ExclusivePatches []string `pulumi:"exclusivePatches"`
}

// Windows patching is performed using the Windows Update Agent.
type WindowsUpdateSettingsResponseOutput struct{ *pulumi.OutputState }

func (WindowsUpdateSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsUpdateSettingsResponse)(nil)).Elem()
}

func (o WindowsUpdateSettingsResponseOutput) ToWindowsUpdateSettingsResponseOutput() WindowsUpdateSettingsResponseOutput {
	return o
}

func (o WindowsUpdateSettingsResponseOutput) ToWindowsUpdateSettingsResponseOutputWithContext(ctx context.Context) WindowsUpdateSettingsResponseOutput {
	return o
}

func (o WindowsUpdateSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[WindowsUpdateSettingsResponse] {
	return pulumix.Output[WindowsUpdateSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// Only apply updates of these windows update classifications. If empty, all updates are applied.
func (o WindowsUpdateSettingsResponseOutput) Classifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsUpdateSettingsResponse) []string { return v.Classifications }).(pulumi.StringArrayOutput)
}

// List of KBs to exclude from update.
func (o WindowsUpdateSettingsResponseOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsUpdateSettingsResponse) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations.
func (o WindowsUpdateSettingsResponseOutput) ExclusivePatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsUpdateSettingsResponse) []string { return v.ExclusivePatches }).(pulumi.StringArrayOutput)
}

// Yum patching is performed by executing `yum update`. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms.
type YumSettings struct {
	// List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.
	Excludes []string `pulumi:"excludes"`
	// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
	ExclusivePackages []string `pulumi:"exclusivePackages"`
	// Will cause patch to run `yum update-minimal` instead.
	Minimal *bool `pulumi:"minimal"`
	// Adds the `--security` flag to `yum update`. Not supported on all platforms.
	Security *bool `pulumi:"security"`
}

// YumSettingsInput is an input type that accepts YumSettingsArgs and YumSettingsOutput values.
// You can construct a concrete instance of `YumSettingsInput` via:
//
//	YumSettingsArgs{...}
type YumSettingsInput interface {
	pulumi.Input

	ToYumSettingsOutput() YumSettingsOutput
	ToYumSettingsOutputWithContext(context.Context) YumSettingsOutput
}

// Yum patching is performed by executing `yum update`. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms.
type YumSettingsArgs struct {
	// List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
	ExclusivePackages pulumi.StringArrayInput `pulumi:"exclusivePackages"`
	// Will cause patch to run `yum update-minimal` instead.
	Minimal pulumi.BoolPtrInput `pulumi:"minimal"`
	// Adds the `--security` flag to `yum update`. Not supported on all platforms.
	Security pulumi.BoolPtrInput `pulumi:"security"`
}

func (YumSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*YumSettings)(nil)).Elem()
}

func (i YumSettingsArgs) ToYumSettingsOutput() YumSettingsOutput {
	return i.ToYumSettingsOutputWithContext(context.Background())
}

func (i YumSettingsArgs) ToYumSettingsOutputWithContext(ctx context.Context) YumSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YumSettingsOutput)
}

func (i YumSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[YumSettings] {
	return pulumix.Output[YumSettings]{
		OutputState: i.ToYumSettingsOutputWithContext(ctx).OutputState,
	}
}

func (i YumSettingsArgs) ToYumSettingsPtrOutput() YumSettingsPtrOutput {
	return i.ToYumSettingsPtrOutputWithContext(context.Background())
}

func (i YumSettingsArgs) ToYumSettingsPtrOutputWithContext(ctx context.Context) YumSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YumSettingsOutput).ToYumSettingsPtrOutputWithContext(ctx)
}

// YumSettingsPtrInput is an input type that accepts YumSettingsArgs, YumSettingsPtr and YumSettingsPtrOutput values.
// You can construct a concrete instance of `YumSettingsPtrInput` via:
//
//	        YumSettingsArgs{...}
//
//	or:
//
//	        nil
type YumSettingsPtrInput interface {
	pulumi.Input

	ToYumSettingsPtrOutput() YumSettingsPtrOutput
	ToYumSettingsPtrOutputWithContext(context.Context) YumSettingsPtrOutput
}

type yumSettingsPtrType YumSettingsArgs

func YumSettingsPtr(v *YumSettingsArgs) YumSettingsPtrInput {
	return (*yumSettingsPtrType)(v)
}

func (*yumSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**YumSettings)(nil)).Elem()
}

func (i *yumSettingsPtrType) ToYumSettingsPtrOutput() YumSettingsPtrOutput {
	return i.ToYumSettingsPtrOutputWithContext(context.Background())
}

func (i *yumSettingsPtrType) ToYumSettingsPtrOutputWithContext(ctx context.Context) YumSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YumSettingsPtrOutput)
}

func (i *yumSettingsPtrType) ToOutput(ctx context.Context) pulumix.Output[*YumSettings] {
	return pulumix.Output[*YumSettings]{
		OutputState: i.ToYumSettingsPtrOutputWithContext(ctx).OutputState,
	}
}

// Yum patching is performed by executing `yum update`. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms.
type YumSettingsOutput struct{ *pulumi.OutputState }

func (YumSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*YumSettings)(nil)).Elem()
}

func (o YumSettingsOutput) ToYumSettingsOutput() YumSettingsOutput {
	return o
}

func (o YumSettingsOutput) ToYumSettingsOutputWithContext(ctx context.Context) YumSettingsOutput {
	return o
}

func (o YumSettingsOutput) ToYumSettingsPtrOutput() YumSettingsPtrOutput {
	return o.ToYumSettingsPtrOutputWithContext(context.Background())
}

func (o YumSettingsOutput) ToYumSettingsPtrOutputWithContext(ctx context.Context) YumSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v YumSettings) *YumSettings {
		return &v
	}).(YumSettingsPtrOutput)
}

func (o YumSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[YumSettings] {
	return pulumix.Output[YumSettings]{
		OutputState: o.OutputState,
	}
}

// List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.
func (o YumSettingsOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v YumSettings) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
func (o YumSettingsOutput) ExclusivePackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v YumSettings) []string { return v.ExclusivePackages }).(pulumi.StringArrayOutput)
}

// Will cause patch to run `yum update-minimal` instead.
func (o YumSettingsOutput) Minimal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v YumSettings) *bool { return v.Minimal }).(pulumi.BoolPtrOutput)
}

// Adds the `--security` flag to `yum update`. Not supported on all platforms.
func (o YumSettingsOutput) Security() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v YumSettings) *bool { return v.Security }).(pulumi.BoolPtrOutput)
}

type YumSettingsPtrOutput struct{ *pulumi.OutputState }

func (YumSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**YumSettings)(nil)).Elem()
}

func (o YumSettingsPtrOutput) ToYumSettingsPtrOutput() YumSettingsPtrOutput {
	return o
}

func (o YumSettingsPtrOutput) ToYumSettingsPtrOutputWithContext(ctx context.Context) YumSettingsPtrOutput {
	return o
}

func (o YumSettingsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*YumSettings] {
	return pulumix.Output[*YumSettings]{
		OutputState: o.OutputState,
	}
}

func (o YumSettingsPtrOutput) Elem() YumSettingsOutput {
	return o.ApplyT(func(v *YumSettings) YumSettings {
		if v != nil {
			return *v
		}
		var ret YumSettings
		return ret
	}).(YumSettingsOutput)
}

// List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.
func (o YumSettingsPtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *YumSettings) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
func (o YumSettingsPtrOutput) ExclusivePackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *YumSettings) []string {
		if v == nil {
			return nil
		}
		return v.ExclusivePackages
	}).(pulumi.StringArrayOutput)
}

// Will cause patch to run `yum update-minimal` instead.
func (o YumSettingsPtrOutput) Minimal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *YumSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Minimal
	}).(pulumi.BoolPtrOutput)
}

// Adds the `--security` flag to `yum update`. Not supported on all platforms.
func (o YumSettingsPtrOutput) Security() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *YumSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Security
	}).(pulumi.BoolPtrOutput)
}

// Yum patching is performed by executing `yum update`. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms.
type YumSettingsResponse struct {
	// List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.
	Excludes []string `pulumi:"excludes"`
	// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
	ExclusivePackages []string `pulumi:"exclusivePackages"`
	// Will cause patch to run `yum update-minimal` instead.
	Minimal bool `pulumi:"minimal"`
	// Adds the `--security` flag to `yum update`. Not supported on all platforms.
	Security bool `pulumi:"security"`
}

// Yum patching is performed by executing `yum update`. Additional options can be set to control how this is executed. Note that not all settings are supported on all platforms.
type YumSettingsResponseOutput struct{ *pulumi.OutputState }

func (YumSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*YumSettingsResponse)(nil)).Elem()
}

func (o YumSettingsResponseOutput) ToYumSettingsResponseOutput() YumSettingsResponseOutput {
	return o
}

func (o YumSettingsResponseOutput) ToYumSettingsResponseOutputWithContext(ctx context.Context) YumSettingsResponseOutput {
	return o
}

func (o YumSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[YumSettingsResponse] {
	return pulumix.Output[YumSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// List of packages to exclude from update. These packages are excluded by using the yum `--exclude` flag.
func (o YumSettingsResponseOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v YumSettingsResponse) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field must not be specified with any other patch configuration fields.
func (o YumSettingsResponseOutput) ExclusivePackages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v YumSettingsResponse) []string { return v.ExclusivePackages }).(pulumi.StringArrayOutput)
}

// Will cause patch to run `yum update-minimal` instead.
func (o YumSettingsResponseOutput) Minimal() pulumi.BoolOutput {
	return o.ApplyT(func(v YumSettingsResponse) bool { return v.Minimal }).(pulumi.BoolOutput)
}

// Adds the `--security` flag to `yum update`. Not supported on all platforms.
func (o YumSettingsResponseOutput) Security() pulumi.BoolOutput {
	return o.ApplyT(func(v YumSettingsResponse) bool { return v.Security }).(pulumi.BoolOutput)
}

// Zypper patching is performed by running `zypper patch`. See also https://en.opensuse.org/SDB:Zypper_manual.
type ZypperSettings struct {
	// Install only patches with these categories. Common categories include security, recommended, and feature.
	Categories []string `pulumi:"categories"`
	// List of patches to exclude from update.
	Excludes []string `pulumi:"excludes"`
	// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.
	ExclusivePatches []string `pulumi:"exclusivePatches"`
	// Install only patches with these severities. Common severities include critical, important, moderate, and low.
	Severities []string `pulumi:"severities"`
	// Adds the `--with-optional` flag to `zypper patch`.
	WithOptional *bool `pulumi:"withOptional"`
	// Adds the `--with-update` flag, to `zypper patch`.
	WithUpdate *bool `pulumi:"withUpdate"`
}

// ZypperSettingsInput is an input type that accepts ZypperSettingsArgs and ZypperSettingsOutput values.
// You can construct a concrete instance of `ZypperSettingsInput` via:
//
//	ZypperSettingsArgs{...}
type ZypperSettingsInput interface {
	pulumi.Input

	ToZypperSettingsOutput() ZypperSettingsOutput
	ToZypperSettingsOutputWithContext(context.Context) ZypperSettingsOutput
}

// Zypper patching is performed by running `zypper patch`. See also https://en.opensuse.org/SDB:Zypper_manual.
type ZypperSettingsArgs struct {
	// Install only patches with these categories. Common categories include security, recommended, and feature.
	Categories pulumi.StringArrayInput `pulumi:"categories"`
	// List of patches to exclude from update.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.
	ExclusivePatches pulumi.StringArrayInput `pulumi:"exclusivePatches"`
	// Install only patches with these severities. Common severities include critical, important, moderate, and low.
	Severities pulumi.StringArrayInput `pulumi:"severities"`
	// Adds the `--with-optional` flag to `zypper patch`.
	WithOptional pulumi.BoolPtrInput `pulumi:"withOptional"`
	// Adds the `--with-update` flag, to `zypper patch`.
	WithUpdate pulumi.BoolPtrInput `pulumi:"withUpdate"`
}

func (ZypperSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZypperSettings)(nil)).Elem()
}

func (i ZypperSettingsArgs) ToZypperSettingsOutput() ZypperSettingsOutput {
	return i.ToZypperSettingsOutputWithContext(context.Background())
}

func (i ZypperSettingsArgs) ToZypperSettingsOutputWithContext(ctx context.Context) ZypperSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZypperSettingsOutput)
}

func (i ZypperSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[ZypperSettings] {
	return pulumix.Output[ZypperSettings]{
		OutputState: i.ToZypperSettingsOutputWithContext(ctx).OutputState,
	}
}

func (i ZypperSettingsArgs) ToZypperSettingsPtrOutput() ZypperSettingsPtrOutput {
	return i.ToZypperSettingsPtrOutputWithContext(context.Background())
}

func (i ZypperSettingsArgs) ToZypperSettingsPtrOutputWithContext(ctx context.Context) ZypperSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZypperSettingsOutput).ToZypperSettingsPtrOutputWithContext(ctx)
}

// ZypperSettingsPtrInput is an input type that accepts ZypperSettingsArgs, ZypperSettingsPtr and ZypperSettingsPtrOutput values.
// You can construct a concrete instance of `ZypperSettingsPtrInput` via:
//
//	        ZypperSettingsArgs{...}
//
//	or:
//
//	        nil
type ZypperSettingsPtrInput interface {
	pulumi.Input

	ToZypperSettingsPtrOutput() ZypperSettingsPtrOutput
	ToZypperSettingsPtrOutputWithContext(context.Context) ZypperSettingsPtrOutput
}

type zypperSettingsPtrType ZypperSettingsArgs

func ZypperSettingsPtr(v *ZypperSettingsArgs) ZypperSettingsPtrInput {
	return (*zypperSettingsPtrType)(v)
}

func (*zypperSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ZypperSettings)(nil)).Elem()
}

func (i *zypperSettingsPtrType) ToZypperSettingsPtrOutput() ZypperSettingsPtrOutput {
	return i.ToZypperSettingsPtrOutputWithContext(context.Background())
}

func (i *zypperSettingsPtrType) ToZypperSettingsPtrOutputWithContext(ctx context.Context) ZypperSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZypperSettingsPtrOutput)
}

func (i *zypperSettingsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ZypperSettings] {
	return pulumix.Output[*ZypperSettings]{
		OutputState: i.ToZypperSettingsPtrOutputWithContext(ctx).OutputState,
	}
}

// Zypper patching is performed by running `zypper patch`. See also https://en.opensuse.org/SDB:Zypper_manual.
type ZypperSettingsOutput struct{ *pulumi.OutputState }

func (ZypperSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZypperSettings)(nil)).Elem()
}

func (o ZypperSettingsOutput) ToZypperSettingsOutput() ZypperSettingsOutput {
	return o
}

func (o ZypperSettingsOutput) ToZypperSettingsOutputWithContext(ctx context.Context) ZypperSettingsOutput {
	return o
}

func (o ZypperSettingsOutput) ToZypperSettingsPtrOutput() ZypperSettingsPtrOutput {
	return o.ToZypperSettingsPtrOutputWithContext(context.Background())
}

func (o ZypperSettingsOutput) ToZypperSettingsPtrOutputWithContext(ctx context.Context) ZypperSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ZypperSettings) *ZypperSettings {
		return &v
	}).(ZypperSettingsPtrOutput)
}

func (o ZypperSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ZypperSettings] {
	return pulumix.Output[ZypperSettings]{
		OutputState: o.OutputState,
	}
}

// Install only patches with these categories. Common categories include security, recommended, and feature.
func (o ZypperSettingsOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperSettings) []string { return v.Categories }).(pulumi.StringArrayOutput)
}

// List of patches to exclude from update.
func (o ZypperSettingsOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperSettings) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.
func (o ZypperSettingsOutput) ExclusivePatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperSettings) []string { return v.ExclusivePatches }).(pulumi.StringArrayOutput)
}

// Install only patches with these severities. Common severities include critical, important, moderate, and low.
func (o ZypperSettingsOutput) Severities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperSettings) []string { return v.Severities }).(pulumi.StringArrayOutput)
}

// Adds the `--with-optional` flag to `zypper patch`.
func (o ZypperSettingsOutput) WithOptional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ZypperSettings) *bool { return v.WithOptional }).(pulumi.BoolPtrOutput)
}

// Adds the `--with-update` flag, to `zypper patch`.
func (o ZypperSettingsOutput) WithUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ZypperSettings) *bool { return v.WithUpdate }).(pulumi.BoolPtrOutput)
}

type ZypperSettingsPtrOutput struct{ *pulumi.OutputState }

func (ZypperSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZypperSettings)(nil)).Elem()
}

func (o ZypperSettingsPtrOutput) ToZypperSettingsPtrOutput() ZypperSettingsPtrOutput {
	return o
}

func (o ZypperSettingsPtrOutput) ToZypperSettingsPtrOutputWithContext(ctx context.Context) ZypperSettingsPtrOutput {
	return o
}

func (o ZypperSettingsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ZypperSettings] {
	return pulumix.Output[*ZypperSettings]{
		OutputState: o.OutputState,
	}
}

func (o ZypperSettingsPtrOutput) Elem() ZypperSettingsOutput {
	return o.ApplyT(func(v *ZypperSettings) ZypperSettings {
		if v != nil {
			return *v
		}
		var ret ZypperSettings
		return ret
	}).(ZypperSettingsOutput)
}

// Install only patches with these categories. Common categories include security, recommended, and feature.
func (o ZypperSettingsPtrOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZypperSettings) []string {
		if v == nil {
			return nil
		}
		return v.Categories
	}).(pulumi.StringArrayOutput)
}

// List of patches to exclude from update.
func (o ZypperSettingsPtrOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZypperSettings) []string {
		if v == nil {
			return nil
		}
		return v.Excludes
	}).(pulumi.StringArrayOutput)
}

// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.
func (o ZypperSettingsPtrOutput) ExclusivePatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZypperSettings) []string {
		if v == nil {
			return nil
		}
		return v.ExclusivePatches
	}).(pulumi.StringArrayOutput)
}

// Install only patches with these severities. Common severities include critical, important, moderate, and low.
func (o ZypperSettingsPtrOutput) Severities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZypperSettings) []string {
		if v == nil {
			return nil
		}
		return v.Severities
	}).(pulumi.StringArrayOutput)
}

// Adds the `--with-optional` flag to `zypper patch`.
func (o ZypperSettingsPtrOutput) WithOptional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZypperSettings) *bool {
		if v == nil {
			return nil
		}
		return v.WithOptional
	}).(pulumi.BoolPtrOutput)
}

// Adds the `--with-update` flag, to `zypper patch`.
func (o ZypperSettingsPtrOutput) WithUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZypperSettings) *bool {
		if v == nil {
			return nil
		}
		return v.WithUpdate
	}).(pulumi.BoolPtrOutput)
}

// Zypper patching is performed by running `zypper patch`. See also https://en.opensuse.org/SDB:Zypper_manual.
type ZypperSettingsResponse struct {
	// Install only patches with these categories. Common categories include security, recommended, and feature.
	Categories []string `pulumi:"categories"`
	// List of patches to exclude from update.
	Excludes []string `pulumi:"excludes"`
	// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.
	ExclusivePatches []string `pulumi:"exclusivePatches"`
	// Install only patches with these severities. Common severities include critical, important, moderate, and low.
	Severities []string `pulumi:"severities"`
	// Adds the `--with-optional` flag to `zypper patch`.
	WithOptional bool `pulumi:"withOptional"`
	// Adds the `--with-update` flag, to `zypper patch`.
	WithUpdate bool `pulumi:"withUpdate"`
}

// Zypper patching is performed by running `zypper patch`. See also https://en.opensuse.org/SDB:Zypper_manual.
type ZypperSettingsResponseOutput struct{ *pulumi.OutputState }

func (ZypperSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZypperSettingsResponse)(nil)).Elem()
}

func (o ZypperSettingsResponseOutput) ToZypperSettingsResponseOutput() ZypperSettingsResponseOutput {
	return o
}

func (o ZypperSettingsResponseOutput) ToZypperSettingsResponseOutputWithContext(ctx context.Context) ZypperSettingsResponseOutput {
	return o
}

func (o ZypperSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ZypperSettingsResponse] {
	return pulumix.Output[ZypperSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// Install only patches with these categories. Common categories include security, recommended, and feature.
func (o ZypperSettingsResponseOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperSettingsResponse) []string { return v.Categories }).(pulumi.StringArrayOutput)
}

// List of patches to exclude from update.
func (o ZypperSettingsResponseOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperSettingsResponse) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.
func (o ZypperSettingsResponseOutput) ExclusivePatches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperSettingsResponse) []string { return v.ExclusivePatches }).(pulumi.StringArrayOutput)
}

// Install only patches with these severities. Common severities include critical, important, moderate, and low.
func (o ZypperSettingsResponseOutput) Severities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZypperSettingsResponse) []string { return v.Severities }).(pulumi.StringArrayOutput)
}

// Adds the `--with-optional` flag to `zypper patch`.
func (o ZypperSettingsResponseOutput) WithOptional() pulumi.BoolOutput {
	return o.ApplyT(func(v ZypperSettingsResponse) bool { return v.WithOptional }).(pulumi.BoolOutput)
}

// Adds the `--with-update` flag, to `zypper patch`.
func (o ZypperSettingsResponseOutput) WithUpdate() pulumi.BoolOutput {
	return o.ApplyT(func(v ZypperSettingsResponse) bool { return v.WithUpdate }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AptSettingsInput)(nil)).Elem(), AptSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AptSettingsPtrInput)(nil)).Elem(), AptSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecStepInput)(nil)).Elem(), ExecStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecStepPtrInput)(nil)).Elem(), ExecStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecStepConfigInput)(nil)).Elem(), ExecStepConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecStepConfigPtrInput)(nil)).Elem(), ExecStepConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FixedOrPercentInput)(nil)).Elem(), FixedOrPercentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FixedOrPercentPtrInput)(nil)).Elem(), FixedOrPercentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsObjectInput)(nil)).Elem(), GcsObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsObjectPtrInput)(nil)).Elem(), GcsObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooSettingsInput)(nil)).Elem(), GooSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GooSettingsPtrInput)(nil)).Elem(), GooSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonthlyScheduleInput)(nil)).Elem(), MonthlyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyInput)(nil)).Elem(), OSPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyArrayInput)(nil)).Elem(), OSPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyAssignmentInstanceFilterInput)(nil)).Elem(), OSPolicyAssignmentInstanceFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyAssignmentInstanceFilterInventoryInput)(nil)).Elem(), OSPolicyAssignmentInstanceFilterInventoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyAssignmentInstanceFilterInventoryArrayInput)(nil)).Elem(), OSPolicyAssignmentInstanceFilterInventoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyAssignmentLabelSetInput)(nil)).Elem(), OSPolicyAssignmentLabelSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyAssignmentLabelSetArrayInput)(nil)).Elem(), OSPolicyAssignmentLabelSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyAssignmentRolloutInput)(nil)).Elem(), OSPolicyAssignmentRolloutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyInventoryFilterInput)(nil)).Elem(), OSPolicyInventoryFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyInventoryFilterArrayInput)(nil)).Elem(), OSPolicyInventoryFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceInput)(nil)).Elem(), OSPolicyResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceArrayInput)(nil)).Elem(), OSPolicyResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceExecResourceInput)(nil)).Elem(), OSPolicyResourceExecResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceExecResourcePtrInput)(nil)).Elem(), OSPolicyResourceExecResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceExecResourceExecInput)(nil)).Elem(), OSPolicyResourceExecResourceExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceExecResourceExecPtrInput)(nil)).Elem(), OSPolicyResourceExecResourceExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceFileInput)(nil)).Elem(), OSPolicyResourceFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceFilePtrInput)(nil)).Elem(), OSPolicyResourceFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceFileGcsInput)(nil)).Elem(), OSPolicyResourceFileGcsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceFileGcsPtrInput)(nil)).Elem(), OSPolicyResourceFileGcsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceFileRemoteInput)(nil)).Elem(), OSPolicyResourceFileRemoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceFileRemotePtrInput)(nil)).Elem(), OSPolicyResourceFileRemoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceFileResourceInput)(nil)).Elem(), OSPolicyResourceFileResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceFileResourcePtrInput)(nil)).Elem(), OSPolicyResourceFileResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceGroupInput)(nil)).Elem(), OSPolicyResourceGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceGroupArrayInput)(nil)).Elem(), OSPolicyResourceGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceInput)(nil)).Elem(), OSPolicyResourcePackageResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourcePtrInput)(nil)).Elem(), OSPolicyResourcePackageResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceAPTInput)(nil)).Elem(), OSPolicyResourcePackageResourceAPTArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceAPTPtrInput)(nil)).Elem(), OSPolicyResourcePackageResourceAPTArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceDebInput)(nil)).Elem(), OSPolicyResourcePackageResourceDebArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceDebPtrInput)(nil)).Elem(), OSPolicyResourcePackageResourceDebArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceGooGetInput)(nil)).Elem(), OSPolicyResourcePackageResourceGooGetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceGooGetPtrInput)(nil)).Elem(), OSPolicyResourcePackageResourceGooGetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceMSIInput)(nil)).Elem(), OSPolicyResourcePackageResourceMSIArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceMSIPtrInput)(nil)).Elem(), OSPolicyResourcePackageResourceMSIArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceRPMInput)(nil)).Elem(), OSPolicyResourcePackageResourceRPMArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceRPMPtrInput)(nil)).Elem(), OSPolicyResourcePackageResourceRPMArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceYUMInput)(nil)).Elem(), OSPolicyResourcePackageResourceYUMArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceYUMPtrInput)(nil)).Elem(), OSPolicyResourcePackageResourceYUMArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceZypperInput)(nil)).Elem(), OSPolicyResourcePackageResourceZypperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourcePackageResourceZypperPtrInput)(nil)).Elem(), OSPolicyResourcePackageResourceZypperArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceRepositoryResourceInput)(nil)).Elem(), OSPolicyResourceRepositoryResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceRepositoryResourcePtrInput)(nil)).Elem(), OSPolicyResourceRepositoryResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceRepositoryResourceAptRepositoryInput)(nil)).Elem(), OSPolicyResourceRepositoryResourceAptRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceRepositoryResourceAptRepositoryPtrInput)(nil)).Elem(), OSPolicyResourceRepositoryResourceAptRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceRepositoryResourceGooRepositoryInput)(nil)).Elem(), OSPolicyResourceRepositoryResourceGooRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceRepositoryResourceGooRepositoryPtrInput)(nil)).Elem(), OSPolicyResourceRepositoryResourceGooRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceRepositoryResourceYumRepositoryInput)(nil)).Elem(), OSPolicyResourceRepositoryResourceYumRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceRepositoryResourceYumRepositoryPtrInput)(nil)).Elem(), OSPolicyResourceRepositoryResourceYumRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceRepositoryResourceZypperRepositoryInput)(nil)).Elem(), OSPolicyResourceRepositoryResourceZypperRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OSPolicyResourceRepositoryResourceZypperRepositoryPtrInput)(nil)).Elem(), OSPolicyResourceRepositoryResourceZypperRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OneTimeScheduleInput)(nil)).Elem(), OneTimeScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PatchConfigInput)(nil)).Elem(), PatchConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PatchConfigPtrInput)(nil)).Elem(), PatchConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PatchInstanceFilterInput)(nil)).Elem(), PatchInstanceFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PatchInstanceFilterGroupLabelInput)(nil)).Elem(), PatchInstanceFilterGroupLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PatchInstanceFilterGroupLabelArrayInput)(nil)).Elem(), PatchInstanceFilterGroupLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PatchRolloutInput)(nil)).Elem(), PatchRolloutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PatchRolloutPtrInput)(nil)).Elem(), PatchRolloutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecurringScheduleInput)(nil)).Elem(), RecurringScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeOfDayInput)(nil)).Elem(), TimeOfDayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeZoneInput)(nil)).Elem(), TimeZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WeekDayOfMonthInput)(nil)).Elem(), WeekDayOfMonthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WeeklyScheduleInput)(nil)).Elem(), WeeklyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsUpdateSettingsInput)(nil)).Elem(), WindowsUpdateSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WindowsUpdateSettingsPtrInput)(nil)).Elem(), WindowsUpdateSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*YumSettingsInput)(nil)).Elem(), YumSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*YumSettingsPtrInput)(nil)).Elem(), YumSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZypperSettingsInput)(nil)).Elem(), ZypperSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZypperSettingsPtrInput)(nil)).Elem(), ZypperSettingsArgs{})
	pulumi.RegisterOutputType(AptSettingsOutput{})
	pulumi.RegisterOutputType(AptSettingsPtrOutput{})
	pulumi.RegisterOutputType(AptSettingsResponseOutput{})
	pulumi.RegisterOutputType(ExecStepOutput{})
	pulumi.RegisterOutputType(ExecStepPtrOutput{})
	pulumi.RegisterOutputType(ExecStepConfigOutput{})
	pulumi.RegisterOutputType(ExecStepConfigPtrOutput{})
	pulumi.RegisterOutputType(ExecStepConfigResponseOutput{})
	pulumi.RegisterOutputType(ExecStepResponseOutput{})
	pulumi.RegisterOutputType(FixedOrPercentOutput{})
	pulumi.RegisterOutputType(FixedOrPercentPtrOutput{})
	pulumi.RegisterOutputType(FixedOrPercentResponseOutput{})
	pulumi.RegisterOutputType(GcsObjectOutput{})
	pulumi.RegisterOutputType(GcsObjectPtrOutput{})
	pulumi.RegisterOutputType(GcsObjectResponseOutput{})
	pulumi.RegisterOutputType(GooSettingsOutput{})
	pulumi.RegisterOutputType(GooSettingsPtrOutput{})
	pulumi.RegisterOutputType(GooSettingsResponseOutput{})
	pulumi.RegisterOutputType(MonthlyScheduleOutput{})
	pulumi.RegisterOutputType(MonthlyScheduleResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyOutput{})
	pulumi.RegisterOutputType(OSPolicyArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentInstanceFilterOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentInstanceFilterInventoryOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentInstanceFilterInventoryArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentInstanceFilterInventoryResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentInstanceFilterInventoryResponseArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentInstanceFilterResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentLabelSetOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentLabelSetArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentLabelSetResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentLabelSetResponseArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentRolloutOutput{})
	pulumi.RegisterOutputType(OSPolicyAssignmentRolloutResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyInventoryFilterOutput{})
	pulumi.RegisterOutputType(OSPolicyInventoryFilterArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyInventoryFilterResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyInventoryFilterResponseArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceExecResourceOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceExecResourcePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceExecResourceExecOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceExecResourceExecPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceExecResourceExecResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceExecResourceResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFilePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileGcsOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileGcsPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileGcsResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileRemoteOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileRemotePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileRemoteResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileResourceOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileResourcePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileResourceResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceFileResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceGroupOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceGroupArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceGroupResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceGroupResponseArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourcePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceAPTOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceAPTPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceAPTResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceDebOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceDebPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceDebResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceGooGetOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceGooGetPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceGooGetResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceMSIOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceMSIPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceMSIResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceRPMOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceRPMPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceRPMResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceYUMOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceYUMPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceYUMResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceZypperOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceZypperPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourcePackageResourceZypperResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourcePtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceAptRepositoryOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceAptRepositoryPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceAptRepositoryResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceGooRepositoryOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceGooRepositoryPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceGooRepositoryResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceYumRepositoryOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceYumRepositoryPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceYumRepositoryResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceZypperRepositoryOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceZypperRepositoryPtrOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceRepositoryResourceZypperRepositoryResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(OSPolicyResponseOutput{})
	pulumi.RegisterOutputType(OSPolicyResponseArrayOutput{})
	pulumi.RegisterOutputType(OneTimeScheduleOutput{})
	pulumi.RegisterOutputType(OneTimeScheduleResponseOutput{})
	pulumi.RegisterOutputType(PatchConfigOutput{})
	pulumi.RegisterOutputType(PatchConfigPtrOutput{})
	pulumi.RegisterOutputType(PatchConfigResponseOutput{})
	pulumi.RegisterOutputType(PatchInstanceFilterOutput{})
	pulumi.RegisterOutputType(PatchInstanceFilterGroupLabelOutput{})
	pulumi.RegisterOutputType(PatchInstanceFilterGroupLabelArrayOutput{})
	pulumi.RegisterOutputType(PatchInstanceFilterGroupLabelResponseOutput{})
	pulumi.RegisterOutputType(PatchInstanceFilterGroupLabelResponseArrayOutput{})
	pulumi.RegisterOutputType(PatchInstanceFilterResponseOutput{})
	pulumi.RegisterOutputType(PatchRolloutOutput{})
	pulumi.RegisterOutputType(PatchRolloutPtrOutput{})
	pulumi.RegisterOutputType(PatchRolloutResponseOutput{})
	pulumi.RegisterOutputType(RecurringScheduleOutput{})
	pulumi.RegisterOutputType(RecurringScheduleResponseOutput{})
	pulumi.RegisterOutputType(TimeOfDayOutput{})
	pulumi.RegisterOutputType(TimeOfDayResponseOutput{})
	pulumi.RegisterOutputType(TimeZoneOutput{})
	pulumi.RegisterOutputType(TimeZoneResponseOutput{})
	pulumi.RegisterOutputType(WeekDayOfMonthOutput{})
	pulumi.RegisterOutputType(WeekDayOfMonthResponseOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleResponseOutput{})
	pulumi.RegisterOutputType(WindowsUpdateSettingsOutput{})
	pulumi.RegisterOutputType(WindowsUpdateSettingsPtrOutput{})
	pulumi.RegisterOutputType(WindowsUpdateSettingsResponseOutput{})
	pulumi.RegisterOutputType(YumSettingsOutput{})
	pulumi.RegisterOutputType(YumSettingsPtrOutput{})
	pulumi.RegisterOutputType(YumSettingsResponseOutput{})
	pulumi.RegisterOutputType(ZypperSettingsOutput{})
	pulumi.RegisterOutputType(ZypperSettingsPtrOutput{})
	pulumi.RegisterOutputType(ZypperSettingsResponseOutput{})
}
