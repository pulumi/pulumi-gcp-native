// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Serverless VPC Access connector, returns an operation.
type Connector struct {
	pulumi.CustomResourceState

	// List of projects using the connector.
	ConnectedProjects pulumi.StringArrayOutput `pulumi:"connectedProjects"`
	// Required. The ID to use for this connector.
	ConnectorId pulumi.StringOutput `pulumi:"connectorId"`
	// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
	IpCidrRange pulumi.StringOutput `pulumi:"ipCidrRange"`
	Location    pulumi.StringOutput `pulumi:"location"`
	// Machine type of VM Instance underlying connector. Default is e2-micro
	MachineType pulumi.StringOutput `pulumi:"machineType"`
	// Maximum value of instances in autoscaling group underlying the connector.
	MaxInstances pulumi.IntOutput `pulumi:"maxInstances"`
	// Maximum throughput of the connector in Mbps. Default is 300, max is 1000. If both max-throughput and max-instances are provided, max-instances takes precedence over max-throughput.
	MaxThroughput pulumi.IntOutput `pulumi:"maxThroughput"`
	// Minimum value of instances in autoscaling group underlying the connector.
	MinInstances pulumi.IntOutput `pulumi:"minInstances"`
	// Minimum throughput of the connector in Mbps. Default and min is 200. If both min-throughput and min-instances are provided, min-instances takes precedence over min-throughput.
	MinThroughput pulumi.IntOutput `pulumi:"minThroughput"`
	// The resource name in the format `projects/*/locations/*/connectors/*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of a VPC network.
	Network pulumi.StringOutput `pulumi:"network"`
	Project pulumi.StringOutput `pulumi:"project"`
	// State of the VPC access connector.
	State pulumi.StringOutput `pulumi:"state"`
	// The subnet in which to house the VPC Access Connector.
	Subnet SubnetResponseOutput `pulumi:"subnet"`
}

// NewConnector registers a new resource with the given unique name, arguments, and options.
func NewConnector(ctx *pulumi.Context,
	name string, args *ConnectorArgs, opts ...pulumi.ResourceOption) (*Connector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"connectorId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connector
	err := ctx.RegisterResource("google-native:vpcaccess/v1beta1:Connector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnector gets an existing Connector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorState, opts ...pulumi.ResourceOption) (*Connector, error) {
	var resource Connector
	err := ctx.ReadResource("google-native:vpcaccess/v1beta1:Connector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connector resources.
type connectorState struct {
}

type ConnectorState struct {
}

func (ConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorState)(nil)).Elem()
}

type connectorArgs struct {
	// Required. The ID to use for this connector.
	ConnectorId string `pulumi:"connectorId"`
	// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
	IpCidrRange *string `pulumi:"ipCidrRange"`
	Location    *string `pulumi:"location"`
	// Machine type of VM Instance underlying connector. Default is e2-micro
	MachineType *string `pulumi:"machineType"`
	// Maximum value of instances in autoscaling group underlying the connector.
	MaxInstances *int `pulumi:"maxInstances"`
	// Maximum throughput of the connector in Mbps. Default is 300, max is 1000. If both max-throughput and max-instances are provided, max-instances takes precedence over max-throughput.
	MaxThroughput *int `pulumi:"maxThroughput"`
	// Minimum value of instances in autoscaling group underlying the connector.
	MinInstances *int `pulumi:"minInstances"`
	// Minimum throughput of the connector in Mbps. Default and min is 200. If both min-throughput and min-instances are provided, min-instances takes precedence over min-throughput.
	MinThroughput *int `pulumi:"minThroughput"`
	// The resource name in the format `projects/*/locations/*/connectors/*`.
	Name *string `pulumi:"name"`
	// Name of a VPC network.
	Network *string `pulumi:"network"`
	Project *string `pulumi:"project"`
	// The subnet in which to house the VPC Access Connector.
	Subnet *Subnet `pulumi:"subnet"`
}

// The set of arguments for constructing a Connector resource.
type ConnectorArgs struct {
	// Required. The ID to use for this connector.
	ConnectorId pulumi.StringInput
	// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
	IpCidrRange pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	// Machine type of VM Instance underlying connector. Default is e2-micro
	MachineType pulumi.StringPtrInput
	// Maximum value of instances in autoscaling group underlying the connector.
	MaxInstances pulumi.IntPtrInput
	// Maximum throughput of the connector in Mbps. Default is 300, max is 1000. If both max-throughput and max-instances are provided, max-instances takes precedence over max-throughput.
	MaxThroughput pulumi.IntPtrInput
	// Minimum value of instances in autoscaling group underlying the connector.
	MinInstances pulumi.IntPtrInput
	// Minimum throughput of the connector in Mbps. Default and min is 200. If both min-throughput and min-instances are provided, min-instances takes precedence over min-throughput.
	MinThroughput pulumi.IntPtrInput
	// The resource name in the format `projects/*/locations/*/connectors/*`.
	Name pulumi.StringPtrInput
	// Name of a VPC network.
	Network pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The subnet in which to house the VPC Access Connector.
	Subnet SubnetPtrInput
}

func (ConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorArgs)(nil)).Elem()
}

type ConnectorInput interface {
	pulumi.Input

	ToConnectorOutput() ConnectorOutput
	ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput
}

func (*Connector) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (i *Connector) ToConnectorOutput() ConnectorOutput {
	return i.ToConnectorOutputWithContext(context.Background())
}

func (i *Connector) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorOutput)
}

type ConnectorOutput struct{ *pulumi.OutputState }

func (ConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (o ConnectorOutput) ToConnectorOutput() ConnectorOutput {
	return o
}

func (o ConnectorOutput) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return o
}

// List of projects using the connector.
func (o ConnectorOutput) ConnectedProjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringArrayOutput { return v.ConnectedProjects }).(pulumi.StringArrayOutput)
}

// Required. The ID to use for this connector.
func (o ConnectorOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.ConnectorId }).(pulumi.StringOutput)
}

// The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
func (o ConnectorOutput) IpCidrRange() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.IpCidrRange }).(pulumi.StringOutput)
}

func (o ConnectorOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Machine type of VM Instance underlying connector. Default is e2-micro
func (o ConnectorOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.MachineType }).(pulumi.StringOutput)
}

// Maximum value of instances in autoscaling group underlying the connector.
func (o ConnectorOutput) MaxInstances() pulumi.IntOutput {
	return o.ApplyT(func(v *Connector) pulumi.IntOutput { return v.MaxInstances }).(pulumi.IntOutput)
}

// Maximum throughput of the connector in Mbps. Default is 300, max is 1000. If both max-throughput and max-instances are provided, max-instances takes precedence over max-throughput.
func (o ConnectorOutput) MaxThroughput() pulumi.IntOutput {
	return o.ApplyT(func(v *Connector) pulumi.IntOutput { return v.MaxThroughput }).(pulumi.IntOutput)
}

// Minimum value of instances in autoscaling group underlying the connector.
func (o ConnectorOutput) MinInstances() pulumi.IntOutput {
	return o.ApplyT(func(v *Connector) pulumi.IntOutput { return v.MinInstances }).(pulumi.IntOutput)
}

// Minimum throughput of the connector in Mbps. Default and min is 200. If both min-throughput and min-instances are provided, min-instances takes precedence over min-throughput.
func (o ConnectorOutput) MinThroughput() pulumi.IntOutput {
	return o.ApplyT(func(v *Connector) pulumi.IntOutput { return v.MinThroughput }).(pulumi.IntOutput)
}

// The resource name in the format `projects/*/locations/*/connectors/*`.
func (o ConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of a VPC network.
func (o ConnectorOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

func (o ConnectorOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// State of the VPC access connector.
func (o ConnectorOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The subnet in which to house the VPC Access Connector.
func (o ConnectorOutput) Subnet() SubnetResponseOutput {
	return o.ApplyT(func(v *Connector) SubnetResponseOutput { return v.Subnet }).(SubnetResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorInput)(nil)).Elem(), &Connector{})
	pulumi.RegisterOutputType(ConnectorOutput{})
}
