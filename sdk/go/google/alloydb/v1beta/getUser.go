// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets details of a single User.
func LookupUser(ctx *pulumi.Context, args *LookupUserArgs, opts ...pulumi.InvokeOption) (*LookupUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUserResult
	err := ctx.Invoke("google-native:alloydb/v1beta:getUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupUserArgs struct {
	ClusterId string  `pulumi:"clusterId"`
	Location  string  `pulumi:"location"`
	Project   *string `pulumi:"project"`
	UserId    string  `pulumi:"userId"`
}

type LookupUserResult struct {
	// Optional. List of database roles this user has. The database role strings are subject to the PostgreSQL naming conventions.
	DatabaseRoles []string `pulumi:"databaseRoles"`
	// Name of the resource in the form of projects/{project}/locations/{location}/cluster/{cluster}/users/{user}.
	Name string `pulumi:"name"`
	// Input only. Password for the user.
	Password string `pulumi:"password"`
	// Optional. Type of this user.
	UserType string `pulumi:"userType"`
}

func LookupUserOutput(ctx *pulumi.Context, args LookupUserOutputArgs, opts ...pulumi.InvokeOption) LookupUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUserResult, error) {
			args := v.(LookupUserArgs)
			r, err := LookupUser(ctx, &args, opts...)
			var s LookupUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUserResultOutput)
}

type LookupUserOutputArgs struct {
	ClusterId pulumi.StringInput    `pulumi:"clusterId"`
	Location  pulumi.StringInput    `pulumi:"location"`
	Project   pulumi.StringPtrInput `pulumi:"project"`
	UserId    pulumi.StringInput    `pulumi:"userId"`
}

func (LookupUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserArgs)(nil)).Elem()
}

type LookupUserResultOutput struct{ *pulumi.OutputState }

func (LookupUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUserResult)(nil)).Elem()
}

func (o LookupUserResultOutput) ToLookupUserResultOutput() LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToLookupUserResultOutputWithContext(ctx context.Context) LookupUserResultOutput {
	return o
}

func (o LookupUserResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupUserResult] {
	return pulumix.Output[LookupUserResult]{
		OutputState: o.OutputState,
	}
}

// Optional. List of database roles this user has. The database role strings are subject to the PostgreSQL naming conventions.
func (o LookupUserResultOutput) DatabaseRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUserResult) []string { return v.DatabaseRoles }).(pulumi.StringArrayOutput)
}

// Name of the resource in the form of projects/{project}/locations/{location}/cluster/{cluster}/users/{user}.
func (o LookupUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Name }).(pulumi.StringOutput)
}

// Input only. Password for the user.
func (o LookupUserResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.Password }).(pulumi.StringOutput)
}

// Optional. Type of this user.
func (o LookupUserResultOutput) UserType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUserResult) string { return v.UserType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUserResultOutput{})
}
