// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// Message describing the user-specified automated backup policy. All fields in the automated backup policy are optional. Defaults for each field are provided if they are not set.
type AutomatedBackupPolicy struct {
	// The length of the time window during which a backup can be taken. If a backup does not succeed within this time window, it will be canceled and considered failed. The backup window must be at least 5 minutes long. There is no upper bound on the window. If not set, it defaults to 1 hour.
	BackupWindow *string `pulumi:"backupWindow"`
	// Whether automated automated backups are enabled. If not set, defaults to true.
	Enabled *bool `pulumi:"enabled"`
	// Optional. The encryption config can be specified to encrypt the backups with a customer-managed encryption key (CMEK). When this field is not specified, the backup will then use default encryption scheme to protect the user data.
	EncryptionConfig *EncryptionConfig `pulumi:"encryptionConfig"`
	// Labels to apply to backups created using this configuration.
	Labels map[string]string `pulumi:"labels"`
	// The location where the backup will be stored. Currently, the only supported option is to store the backup in the same region as the cluster. If empty, defaults to the region of the cluster.
	Location *string `pulumi:"location"`
	// Quantity-based Backup retention policy to retain recent backups.
	QuantityBasedRetention *QuantityBasedRetention `pulumi:"quantityBasedRetention"`
	// Time-based Backup retention policy.
	TimeBasedRetention *TimeBasedRetention `pulumi:"timeBasedRetention"`
	// Weekly schedule for the Backup.
	WeeklySchedule *WeeklySchedule `pulumi:"weeklySchedule"`
}

// AutomatedBackupPolicyInput is an input type that accepts AutomatedBackupPolicyArgs and AutomatedBackupPolicyOutput values.
// You can construct a concrete instance of `AutomatedBackupPolicyInput` via:
//
//	AutomatedBackupPolicyArgs{...}
type AutomatedBackupPolicyInput interface {
	pulumi.Input

	ToAutomatedBackupPolicyOutput() AutomatedBackupPolicyOutput
	ToAutomatedBackupPolicyOutputWithContext(context.Context) AutomatedBackupPolicyOutput
}

// Message describing the user-specified automated backup policy. All fields in the automated backup policy are optional. Defaults for each field are provided if they are not set.
type AutomatedBackupPolicyArgs struct {
	// The length of the time window during which a backup can be taken. If a backup does not succeed within this time window, it will be canceled and considered failed. The backup window must be at least 5 minutes long. There is no upper bound on the window. If not set, it defaults to 1 hour.
	BackupWindow pulumi.StringPtrInput `pulumi:"backupWindow"`
	// Whether automated automated backups are enabled. If not set, defaults to true.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Optional. The encryption config can be specified to encrypt the backups with a customer-managed encryption key (CMEK). When this field is not specified, the backup will then use default encryption scheme to protect the user data.
	EncryptionConfig EncryptionConfigPtrInput `pulumi:"encryptionConfig"`
	// Labels to apply to backups created using this configuration.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The location where the backup will be stored. Currently, the only supported option is to store the backup in the same region as the cluster. If empty, defaults to the region of the cluster.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Quantity-based Backup retention policy to retain recent backups.
	QuantityBasedRetention QuantityBasedRetentionPtrInput `pulumi:"quantityBasedRetention"`
	// Time-based Backup retention policy.
	TimeBasedRetention TimeBasedRetentionPtrInput `pulumi:"timeBasedRetention"`
	// Weekly schedule for the Backup.
	WeeklySchedule WeeklySchedulePtrInput `pulumi:"weeklySchedule"`
}

func (AutomatedBackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomatedBackupPolicy)(nil)).Elem()
}

func (i AutomatedBackupPolicyArgs) ToAutomatedBackupPolicyOutput() AutomatedBackupPolicyOutput {
	return i.ToAutomatedBackupPolicyOutputWithContext(context.Background())
}

func (i AutomatedBackupPolicyArgs) ToAutomatedBackupPolicyOutputWithContext(ctx context.Context) AutomatedBackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomatedBackupPolicyOutput)
}

func (i AutomatedBackupPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[AutomatedBackupPolicy] {
	return pulumix.Output[AutomatedBackupPolicy]{
		OutputState: i.ToAutomatedBackupPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i AutomatedBackupPolicyArgs) ToAutomatedBackupPolicyPtrOutput() AutomatedBackupPolicyPtrOutput {
	return i.ToAutomatedBackupPolicyPtrOutputWithContext(context.Background())
}

func (i AutomatedBackupPolicyArgs) ToAutomatedBackupPolicyPtrOutputWithContext(ctx context.Context) AutomatedBackupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomatedBackupPolicyOutput).ToAutomatedBackupPolicyPtrOutputWithContext(ctx)
}

// AutomatedBackupPolicyPtrInput is an input type that accepts AutomatedBackupPolicyArgs, AutomatedBackupPolicyPtr and AutomatedBackupPolicyPtrOutput values.
// You can construct a concrete instance of `AutomatedBackupPolicyPtrInput` via:
//
//	        AutomatedBackupPolicyArgs{...}
//
//	or:
//
//	        nil
type AutomatedBackupPolicyPtrInput interface {
	pulumi.Input

	ToAutomatedBackupPolicyPtrOutput() AutomatedBackupPolicyPtrOutput
	ToAutomatedBackupPolicyPtrOutputWithContext(context.Context) AutomatedBackupPolicyPtrOutput
}

type automatedBackupPolicyPtrType AutomatedBackupPolicyArgs

func AutomatedBackupPolicyPtr(v *AutomatedBackupPolicyArgs) AutomatedBackupPolicyPtrInput {
	return (*automatedBackupPolicyPtrType)(v)
}

func (*automatedBackupPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomatedBackupPolicy)(nil)).Elem()
}

func (i *automatedBackupPolicyPtrType) ToAutomatedBackupPolicyPtrOutput() AutomatedBackupPolicyPtrOutput {
	return i.ToAutomatedBackupPolicyPtrOutputWithContext(context.Background())
}

func (i *automatedBackupPolicyPtrType) ToAutomatedBackupPolicyPtrOutputWithContext(ctx context.Context) AutomatedBackupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomatedBackupPolicyPtrOutput)
}

func (i *automatedBackupPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*AutomatedBackupPolicy] {
	return pulumix.Output[*AutomatedBackupPolicy]{
		OutputState: i.ToAutomatedBackupPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

// Message describing the user-specified automated backup policy. All fields in the automated backup policy are optional. Defaults for each field are provided if they are not set.
type AutomatedBackupPolicyOutput struct{ *pulumi.OutputState }

func (AutomatedBackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomatedBackupPolicy)(nil)).Elem()
}

func (o AutomatedBackupPolicyOutput) ToAutomatedBackupPolicyOutput() AutomatedBackupPolicyOutput {
	return o
}

func (o AutomatedBackupPolicyOutput) ToAutomatedBackupPolicyOutputWithContext(ctx context.Context) AutomatedBackupPolicyOutput {
	return o
}

func (o AutomatedBackupPolicyOutput) ToAutomatedBackupPolicyPtrOutput() AutomatedBackupPolicyPtrOutput {
	return o.ToAutomatedBackupPolicyPtrOutputWithContext(context.Background())
}

func (o AutomatedBackupPolicyOutput) ToAutomatedBackupPolicyPtrOutputWithContext(ctx context.Context) AutomatedBackupPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutomatedBackupPolicy) *AutomatedBackupPolicy {
		return &v
	}).(AutomatedBackupPolicyPtrOutput)
}

func (o AutomatedBackupPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[AutomatedBackupPolicy] {
	return pulumix.Output[AutomatedBackupPolicy]{
		OutputState: o.OutputState,
	}
}

// The length of the time window during which a backup can be taken. If a backup does not succeed within this time window, it will be canceled and considered failed. The backup window must be at least 5 minutes long. There is no upper bound on the window. If not set, it defaults to 1 hour.
func (o AutomatedBackupPolicyOutput) BackupWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomatedBackupPolicy) *string { return v.BackupWindow }).(pulumi.StringPtrOutput)
}

// Whether automated automated backups are enabled. If not set, defaults to true.
func (o AutomatedBackupPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomatedBackupPolicy) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Optional. The encryption config can be specified to encrypt the backups with a customer-managed encryption key (CMEK). When this field is not specified, the backup will then use default encryption scheme to protect the user data.
func (o AutomatedBackupPolicyOutput) EncryptionConfig() EncryptionConfigPtrOutput {
	return o.ApplyT(func(v AutomatedBackupPolicy) *EncryptionConfig { return v.EncryptionConfig }).(EncryptionConfigPtrOutput)
}

// Labels to apply to backups created using this configuration.
func (o AutomatedBackupPolicyOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutomatedBackupPolicy) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The location where the backup will be stored. Currently, the only supported option is to store the backup in the same region as the cluster. If empty, defaults to the region of the cluster.
func (o AutomatedBackupPolicyOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomatedBackupPolicy) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Quantity-based Backup retention policy to retain recent backups.
func (o AutomatedBackupPolicyOutput) QuantityBasedRetention() QuantityBasedRetentionPtrOutput {
	return o.ApplyT(func(v AutomatedBackupPolicy) *QuantityBasedRetention { return v.QuantityBasedRetention }).(QuantityBasedRetentionPtrOutput)
}

// Time-based Backup retention policy.
func (o AutomatedBackupPolicyOutput) TimeBasedRetention() TimeBasedRetentionPtrOutput {
	return o.ApplyT(func(v AutomatedBackupPolicy) *TimeBasedRetention { return v.TimeBasedRetention }).(TimeBasedRetentionPtrOutput)
}

// Weekly schedule for the Backup.
func (o AutomatedBackupPolicyOutput) WeeklySchedule() WeeklySchedulePtrOutput {
	return o.ApplyT(func(v AutomatedBackupPolicy) *WeeklySchedule { return v.WeeklySchedule }).(WeeklySchedulePtrOutput)
}

type AutomatedBackupPolicyPtrOutput struct{ *pulumi.OutputState }

func (AutomatedBackupPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutomatedBackupPolicy)(nil)).Elem()
}

func (o AutomatedBackupPolicyPtrOutput) ToAutomatedBackupPolicyPtrOutput() AutomatedBackupPolicyPtrOutput {
	return o
}

func (o AutomatedBackupPolicyPtrOutput) ToAutomatedBackupPolicyPtrOutputWithContext(ctx context.Context) AutomatedBackupPolicyPtrOutput {
	return o
}

func (o AutomatedBackupPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AutomatedBackupPolicy] {
	return pulumix.Output[*AutomatedBackupPolicy]{
		OutputState: o.OutputState,
	}
}

func (o AutomatedBackupPolicyPtrOutput) Elem() AutomatedBackupPolicyOutput {
	return o.ApplyT(func(v *AutomatedBackupPolicy) AutomatedBackupPolicy {
		if v != nil {
			return *v
		}
		var ret AutomatedBackupPolicy
		return ret
	}).(AutomatedBackupPolicyOutput)
}

// The length of the time window during which a backup can be taken. If a backup does not succeed within this time window, it will be canceled and considered failed. The backup window must be at least 5 minutes long. There is no upper bound on the window. If not set, it defaults to 1 hour.
func (o AutomatedBackupPolicyPtrOutput) BackupWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomatedBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return v.BackupWindow
	}).(pulumi.StringPtrOutput)
}

// Whether automated automated backups are enabled. If not set, defaults to true.
func (o AutomatedBackupPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutomatedBackupPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Optional. The encryption config can be specified to encrypt the backups with a customer-managed encryption key (CMEK). When this field is not specified, the backup will then use default encryption scheme to protect the user data.
func (o AutomatedBackupPolicyPtrOutput) EncryptionConfig() EncryptionConfigPtrOutput {
	return o.ApplyT(func(v *AutomatedBackupPolicy) *EncryptionConfig {
		if v == nil {
			return nil
		}
		return v.EncryptionConfig
	}).(EncryptionConfigPtrOutput)
}

// Labels to apply to backups created using this configuration.
func (o AutomatedBackupPolicyPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AutomatedBackupPolicy) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The location where the backup will be stored. Currently, the only supported option is to store the backup in the same region as the cluster. If empty, defaults to the region of the cluster.
func (o AutomatedBackupPolicyPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutomatedBackupPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Quantity-based Backup retention policy to retain recent backups.
func (o AutomatedBackupPolicyPtrOutput) QuantityBasedRetention() QuantityBasedRetentionPtrOutput {
	return o.ApplyT(func(v *AutomatedBackupPolicy) *QuantityBasedRetention {
		if v == nil {
			return nil
		}
		return v.QuantityBasedRetention
	}).(QuantityBasedRetentionPtrOutput)
}

// Time-based Backup retention policy.
func (o AutomatedBackupPolicyPtrOutput) TimeBasedRetention() TimeBasedRetentionPtrOutput {
	return o.ApplyT(func(v *AutomatedBackupPolicy) *TimeBasedRetention {
		if v == nil {
			return nil
		}
		return v.TimeBasedRetention
	}).(TimeBasedRetentionPtrOutput)
}

// Weekly schedule for the Backup.
func (o AutomatedBackupPolicyPtrOutput) WeeklySchedule() WeeklySchedulePtrOutput {
	return o.ApplyT(func(v *AutomatedBackupPolicy) *WeeklySchedule {
		if v == nil {
			return nil
		}
		return v.WeeklySchedule
	}).(WeeklySchedulePtrOutput)
}

// Message describing the user-specified automated backup policy. All fields in the automated backup policy are optional. Defaults for each field are provided if they are not set.
type AutomatedBackupPolicyResponse struct {
	// The length of the time window during which a backup can be taken. If a backup does not succeed within this time window, it will be canceled and considered failed. The backup window must be at least 5 minutes long. There is no upper bound on the window. If not set, it defaults to 1 hour.
	BackupWindow string `pulumi:"backupWindow"`
	// Whether automated automated backups are enabled. If not set, defaults to true.
	Enabled bool `pulumi:"enabled"`
	// Optional. The encryption config can be specified to encrypt the backups with a customer-managed encryption key (CMEK). When this field is not specified, the backup will then use default encryption scheme to protect the user data.
	EncryptionConfig EncryptionConfigResponse `pulumi:"encryptionConfig"`
	// Labels to apply to backups created using this configuration.
	Labels map[string]string `pulumi:"labels"`
	// The location where the backup will be stored. Currently, the only supported option is to store the backup in the same region as the cluster. If empty, defaults to the region of the cluster.
	Location string `pulumi:"location"`
	// Quantity-based Backup retention policy to retain recent backups.
	QuantityBasedRetention QuantityBasedRetentionResponse `pulumi:"quantityBasedRetention"`
	// Time-based Backup retention policy.
	TimeBasedRetention TimeBasedRetentionResponse `pulumi:"timeBasedRetention"`
	// Weekly schedule for the Backup.
	WeeklySchedule WeeklyScheduleResponse `pulumi:"weeklySchedule"`
}

// Message describing the user-specified automated backup policy. All fields in the automated backup policy are optional. Defaults for each field are provided if they are not set.
type AutomatedBackupPolicyResponseOutput struct{ *pulumi.OutputState }

func (AutomatedBackupPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomatedBackupPolicyResponse)(nil)).Elem()
}

func (o AutomatedBackupPolicyResponseOutput) ToAutomatedBackupPolicyResponseOutput() AutomatedBackupPolicyResponseOutput {
	return o
}

func (o AutomatedBackupPolicyResponseOutput) ToAutomatedBackupPolicyResponseOutputWithContext(ctx context.Context) AutomatedBackupPolicyResponseOutput {
	return o
}

func (o AutomatedBackupPolicyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AutomatedBackupPolicyResponse] {
	return pulumix.Output[AutomatedBackupPolicyResponse]{
		OutputState: o.OutputState,
	}
}

// The length of the time window during which a backup can be taken. If a backup does not succeed within this time window, it will be canceled and considered failed. The backup window must be at least 5 minutes long. There is no upper bound on the window. If not set, it defaults to 1 hour.
func (o AutomatedBackupPolicyResponseOutput) BackupWindow() pulumi.StringOutput {
	return o.ApplyT(func(v AutomatedBackupPolicyResponse) string { return v.BackupWindow }).(pulumi.StringOutput)
}

// Whether automated automated backups are enabled. If not set, defaults to true.
func (o AutomatedBackupPolicyResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v AutomatedBackupPolicyResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Optional. The encryption config can be specified to encrypt the backups with a customer-managed encryption key (CMEK). When this field is not specified, the backup will then use default encryption scheme to protect the user data.
func (o AutomatedBackupPolicyResponseOutput) EncryptionConfig() EncryptionConfigResponseOutput {
	return o.ApplyT(func(v AutomatedBackupPolicyResponse) EncryptionConfigResponse { return v.EncryptionConfig }).(EncryptionConfigResponseOutput)
}

// Labels to apply to backups created using this configuration.
func (o AutomatedBackupPolicyResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutomatedBackupPolicyResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The location where the backup will be stored. Currently, the only supported option is to store the backup in the same region as the cluster. If empty, defaults to the region of the cluster.
func (o AutomatedBackupPolicyResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v AutomatedBackupPolicyResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Quantity-based Backup retention policy to retain recent backups.
func (o AutomatedBackupPolicyResponseOutput) QuantityBasedRetention() QuantityBasedRetentionResponseOutput {
	return o.ApplyT(func(v AutomatedBackupPolicyResponse) QuantityBasedRetentionResponse { return v.QuantityBasedRetention }).(QuantityBasedRetentionResponseOutput)
}

// Time-based Backup retention policy.
func (o AutomatedBackupPolicyResponseOutput) TimeBasedRetention() TimeBasedRetentionResponseOutput {
	return o.ApplyT(func(v AutomatedBackupPolicyResponse) TimeBasedRetentionResponse { return v.TimeBasedRetention }).(TimeBasedRetentionResponseOutput)
}

// Weekly schedule for the Backup.
func (o AutomatedBackupPolicyResponseOutput) WeeklySchedule() WeeklyScheduleResponseOutput {
	return o.ApplyT(func(v AutomatedBackupPolicyResponse) WeeklyScheduleResponse { return v.WeeklySchedule }).(WeeklyScheduleResponseOutput)
}

// Message describing a BackupSource.
type BackupSourceResponse struct {
	// The name of the backup resource with the format: * projects/{project}/locations/{region}/backups/{backup_id}
	BackupName string `pulumi:"backupName"`
	// The system-generated UID of the backup which was used to create this resource. The UID is generated when the backup is created, and it is retained until the backup is deleted.
	BackupUid string `pulumi:"backupUid"`
}

// Message describing a BackupSource.
type BackupSourceResponseOutput struct{ *pulumi.OutputState }

func (BackupSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupSourceResponse)(nil)).Elem()
}

func (o BackupSourceResponseOutput) ToBackupSourceResponseOutput() BackupSourceResponseOutput {
	return o
}

func (o BackupSourceResponseOutput) ToBackupSourceResponseOutputWithContext(ctx context.Context) BackupSourceResponseOutput {
	return o
}

func (o BackupSourceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BackupSourceResponse] {
	return pulumix.Output[BackupSourceResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the backup resource with the format: * projects/{project}/locations/{region}/backups/{backup_id}
func (o BackupSourceResponseOutput) BackupName() pulumi.StringOutput {
	return o.ApplyT(func(v BackupSourceResponse) string { return v.BackupName }).(pulumi.StringOutput)
}

// The system-generated UID of the backup which was used to create this resource. The UID is generated when the backup is created, and it is retained until the backup is deleted.
func (o BackupSourceResponseOutput) BackupUid() pulumi.StringOutput {
	return o.ApplyT(func(v BackupSourceResponse) string { return v.BackupUid }).(pulumi.StringOutput)
}

// Client connection configuration
type ClientConnectionConfig struct {
	// Optional. Configuration to enforce connectors only (ex: AuthProxy) connections to the database.
	RequireConnectors *bool `pulumi:"requireConnectors"`
	// Optional. SSL config option for this instance.
	SslConfig *SslConfig `pulumi:"sslConfig"`
}

// ClientConnectionConfigInput is an input type that accepts ClientConnectionConfigArgs and ClientConnectionConfigOutput values.
// You can construct a concrete instance of `ClientConnectionConfigInput` via:
//
//	ClientConnectionConfigArgs{...}
type ClientConnectionConfigInput interface {
	pulumi.Input

	ToClientConnectionConfigOutput() ClientConnectionConfigOutput
	ToClientConnectionConfigOutputWithContext(context.Context) ClientConnectionConfigOutput
}

// Client connection configuration
type ClientConnectionConfigArgs struct {
	// Optional. Configuration to enforce connectors only (ex: AuthProxy) connections to the database.
	RequireConnectors pulumi.BoolPtrInput `pulumi:"requireConnectors"`
	// Optional. SSL config option for this instance.
	SslConfig SslConfigPtrInput `pulumi:"sslConfig"`
}

func (ClientConnectionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientConnectionConfig)(nil)).Elem()
}

func (i ClientConnectionConfigArgs) ToClientConnectionConfigOutput() ClientConnectionConfigOutput {
	return i.ToClientConnectionConfigOutputWithContext(context.Background())
}

func (i ClientConnectionConfigArgs) ToClientConnectionConfigOutputWithContext(ctx context.Context) ClientConnectionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientConnectionConfigOutput)
}

func (i ClientConnectionConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ClientConnectionConfig] {
	return pulumix.Output[ClientConnectionConfig]{
		OutputState: i.ToClientConnectionConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ClientConnectionConfigArgs) ToClientConnectionConfigPtrOutput() ClientConnectionConfigPtrOutput {
	return i.ToClientConnectionConfigPtrOutputWithContext(context.Background())
}

func (i ClientConnectionConfigArgs) ToClientConnectionConfigPtrOutputWithContext(ctx context.Context) ClientConnectionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientConnectionConfigOutput).ToClientConnectionConfigPtrOutputWithContext(ctx)
}

// ClientConnectionConfigPtrInput is an input type that accepts ClientConnectionConfigArgs, ClientConnectionConfigPtr and ClientConnectionConfigPtrOutput values.
// You can construct a concrete instance of `ClientConnectionConfigPtrInput` via:
//
//	        ClientConnectionConfigArgs{...}
//
//	or:
//
//	        nil
type ClientConnectionConfigPtrInput interface {
	pulumi.Input

	ToClientConnectionConfigPtrOutput() ClientConnectionConfigPtrOutput
	ToClientConnectionConfigPtrOutputWithContext(context.Context) ClientConnectionConfigPtrOutput
}

type clientConnectionConfigPtrType ClientConnectionConfigArgs

func ClientConnectionConfigPtr(v *ClientConnectionConfigArgs) ClientConnectionConfigPtrInput {
	return (*clientConnectionConfigPtrType)(v)
}

func (*clientConnectionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientConnectionConfig)(nil)).Elem()
}

func (i *clientConnectionConfigPtrType) ToClientConnectionConfigPtrOutput() ClientConnectionConfigPtrOutput {
	return i.ToClientConnectionConfigPtrOutputWithContext(context.Background())
}

func (i *clientConnectionConfigPtrType) ToClientConnectionConfigPtrOutputWithContext(ctx context.Context) ClientConnectionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientConnectionConfigPtrOutput)
}

func (i *clientConnectionConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClientConnectionConfig] {
	return pulumix.Output[*ClientConnectionConfig]{
		OutputState: i.ToClientConnectionConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Client connection configuration
type ClientConnectionConfigOutput struct{ *pulumi.OutputState }

func (ClientConnectionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientConnectionConfig)(nil)).Elem()
}

func (o ClientConnectionConfigOutput) ToClientConnectionConfigOutput() ClientConnectionConfigOutput {
	return o
}

func (o ClientConnectionConfigOutput) ToClientConnectionConfigOutputWithContext(ctx context.Context) ClientConnectionConfigOutput {
	return o
}

func (o ClientConnectionConfigOutput) ToClientConnectionConfigPtrOutput() ClientConnectionConfigPtrOutput {
	return o.ToClientConnectionConfigPtrOutputWithContext(context.Background())
}

func (o ClientConnectionConfigOutput) ToClientConnectionConfigPtrOutputWithContext(ctx context.Context) ClientConnectionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientConnectionConfig) *ClientConnectionConfig {
		return &v
	}).(ClientConnectionConfigPtrOutput)
}

func (o ClientConnectionConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ClientConnectionConfig] {
	return pulumix.Output[ClientConnectionConfig]{
		OutputState: o.OutputState,
	}
}

// Optional. Configuration to enforce connectors only (ex: AuthProxy) connections to the database.
func (o ClientConnectionConfigOutput) RequireConnectors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClientConnectionConfig) *bool { return v.RequireConnectors }).(pulumi.BoolPtrOutput)
}

// Optional. SSL config option for this instance.
func (o ClientConnectionConfigOutput) SslConfig() SslConfigPtrOutput {
	return o.ApplyT(func(v ClientConnectionConfig) *SslConfig { return v.SslConfig }).(SslConfigPtrOutput)
}

type ClientConnectionConfigPtrOutput struct{ *pulumi.OutputState }

func (ClientConnectionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientConnectionConfig)(nil)).Elem()
}

func (o ClientConnectionConfigPtrOutput) ToClientConnectionConfigPtrOutput() ClientConnectionConfigPtrOutput {
	return o
}

func (o ClientConnectionConfigPtrOutput) ToClientConnectionConfigPtrOutputWithContext(ctx context.Context) ClientConnectionConfigPtrOutput {
	return o
}

func (o ClientConnectionConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClientConnectionConfig] {
	return pulumix.Output[*ClientConnectionConfig]{
		OutputState: o.OutputState,
	}
}

func (o ClientConnectionConfigPtrOutput) Elem() ClientConnectionConfigOutput {
	return o.ApplyT(func(v *ClientConnectionConfig) ClientConnectionConfig {
		if v != nil {
			return *v
		}
		var ret ClientConnectionConfig
		return ret
	}).(ClientConnectionConfigOutput)
}

// Optional. Configuration to enforce connectors only (ex: AuthProxy) connections to the database.
func (o ClientConnectionConfigPtrOutput) RequireConnectors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClientConnectionConfig) *bool {
		if v == nil {
			return nil
		}
		return v.RequireConnectors
	}).(pulumi.BoolPtrOutput)
}

// Optional. SSL config option for this instance.
func (o ClientConnectionConfigPtrOutput) SslConfig() SslConfigPtrOutput {
	return o.ApplyT(func(v *ClientConnectionConfig) *SslConfig {
		if v == nil {
			return nil
		}
		return v.SslConfig
	}).(SslConfigPtrOutput)
}

// Client connection configuration
type ClientConnectionConfigResponse struct {
	// Optional. Configuration to enforce connectors only (ex: AuthProxy) connections to the database.
	RequireConnectors bool `pulumi:"requireConnectors"`
	// Optional. SSL config option for this instance.
	SslConfig SslConfigResponse `pulumi:"sslConfig"`
}

// Client connection configuration
type ClientConnectionConfigResponseOutput struct{ *pulumi.OutputState }

func (ClientConnectionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientConnectionConfigResponse)(nil)).Elem()
}

func (o ClientConnectionConfigResponseOutput) ToClientConnectionConfigResponseOutput() ClientConnectionConfigResponseOutput {
	return o
}

func (o ClientConnectionConfigResponseOutput) ToClientConnectionConfigResponseOutputWithContext(ctx context.Context) ClientConnectionConfigResponseOutput {
	return o
}

func (o ClientConnectionConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ClientConnectionConfigResponse] {
	return pulumix.Output[ClientConnectionConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Configuration to enforce connectors only (ex: AuthProxy) connections to the database.
func (o ClientConnectionConfigResponseOutput) RequireConnectors() pulumi.BoolOutput {
	return o.ApplyT(func(v ClientConnectionConfigResponse) bool { return v.RequireConnectors }).(pulumi.BoolOutput)
}

// Optional. SSL config option for this instance.
func (o ClientConnectionConfigResponseOutput) SslConfig() SslConfigResponseOutput {
	return o.ApplyT(func(v ClientConnectionConfigResponse) SslConfigResponse { return v.SslConfig }).(SslConfigResponseOutput)
}

// ContinuousBackupConfig describes the continuous backups recovery configurations of a cluster.
type ContinuousBackupConfig struct {
	// Whether ContinuousBackup is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The encryption config can be specified to encrypt the backups with a customer-managed encryption key (CMEK). When this field is not specified, the backup will then use default encryption scheme to protect the user data.
	EncryptionConfig *EncryptionConfig `pulumi:"encryptionConfig"`
	// The number of days that are eligible to restore from using PITR. To support the entire recovery window, backups and logs are retained for one day more than the recovery window. If not set, defaults to 14 days.
	RecoveryWindowDays *int `pulumi:"recoveryWindowDays"`
}

// ContinuousBackupConfigInput is an input type that accepts ContinuousBackupConfigArgs and ContinuousBackupConfigOutput values.
// You can construct a concrete instance of `ContinuousBackupConfigInput` via:
//
//	ContinuousBackupConfigArgs{...}
type ContinuousBackupConfigInput interface {
	pulumi.Input

	ToContinuousBackupConfigOutput() ContinuousBackupConfigOutput
	ToContinuousBackupConfigOutputWithContext(context.Context) ContinuousBackupConfigOutput
}

// ContinuousBackupConfig describes the continuous backups recovery configurations of a cluster.
type ContinuousBackupConfigArgs struct {
	// Whether ContinuousBackup is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The encryption config can be specified to encrypt the backups with a customer-managed encryption key (CMEK). When this field is not specified, the backup will then use default encryption scheme to protect the user data.
	EncryptionConfig EncryptionConfigPtrInput `pulumi:"encryptionConfig"`
	// The number of days that are eligible to restore from using PITR. To support the entire recovery window, backups and logs are retained for one day more than the recovery window. If not set, defaults to 14 days.
	RecoveryWindowDays pulumi.IntPtrInput `pulumi:"recoveryWindowDays"`
}

func (ContinuousBackupConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContinuousBackupConfig)(nil)).Elem()
}

func (i ContinuousBackupConfigArgs) ToContinuousBackupConfigOutput() ContinuousBackupConfigOutput {
	return i.ToContinuousBackupConfigOutputWithContext(context.Background())
}

func (i ContinuousBackupConfigArgs) ToContinuousBackupConfigOutputWithContext(ctx context.Context) ContinuousBackupConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContinuousBackupConfigOutput)
}

func (i ContinuousBackupConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ContinuousBackupConfig] {
	return pulumix.Output[ContinuousBackupConfig]{
		OutputState: i.ToContinuousBackupConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ContinuousBackupConfigArgs) ToContinuousBackupConfigPtrOutput() ContinuousBackupConfigPtrOutput {
	return i.ToContinuousBackupConfigPtrOutputWithContext(context.Background())
}

func (i ContinuousBackupConfigArgs) ToContinuousBackupConfigPtrOutputWithContext(ctx context.Context) ContinuousBackupConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContinuousBackupConfigOutput).ToContinuousBackupConfigPtrOutputWithContext(ctx)
}

// ContinuousBackupConfigPtrInput is an input type that accepts ContinuousBackupConfigArgs, ContinuousBackupConfigPtr and ContinuousBackupConfigPtrOutput values.
// You can construct a concrete instance of `ContinuousBackupConfigPtrInput` via:
//
//	        ContinuousBackupConfigArgs{...}
//
//	or:
//
//	        nil
type ContinuousBackupConfigPtrInput interface {
	pulumi.Input

	ToContinuousBackupConfigPtrOutput() ContinuousBackupConfigPtrOutput
	ToContinuousBackupConfigPtrOutputWithContext(context.Context) ContinuousBackupConfigPtrOutput
}

type continuousBackupConfigPtrType ContinuousBackupConfigArgs

func ContinuousBackupConfigPtr(v *ContinuousBackupConfigArgs) ContinuousBackupConfigPtrInput {
	return (*continuousBackupConfigPtrType)(v)
}

func (*continuousBackupConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContinuousBackupConfig)(nil)).Elem()
}

func (i *continuousBackupConfigPtrType) ToContinuousBackupConfigPtrOutput() ContinuousBackupConfigPtrOutput {
	return i.ToContinuousBackupConfigPtrOutputWithContext(context.Background())
}

func (i *continuousBackupConfigPtrType) ToContinuousBackupConfigPtrOutputWithContext(ctx context.Context) ContinuousBackupConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContinuousBackupConfigPtrOutput)
}

func (i *continuousBackupConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContinuousBackupConfig] {
	return pulumix.Output[*ContinuousBackupConfig]{
		OutputState: i.ToContinuousBackupConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// ContinuousBackupConfig describes the continuous backups recovery configurations of a cluster.
type ContinuousBackupConfigOutput struct{ *pulumi.OutputState }

func (ContinuousBackupConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContinuousBackupConfig)(nil)).Elem()
}

func (o ContinuousBackupConfigOutput) ToContinuousBackupConfigOutput() ContinuousBackupConfigOutput {
	return o
}

func (o ContinuousBackupConfigOutput) ToContinuousBackupConfigOutputWithContext(ctx context.Context) ContinuousBackupConfigOutput {
	return o
}

func (o ContinuousBackupConfigOutput) ToContinuousBackupConfigPtrOutput() ContinuousBackupConfigPtrOutput {
	return o.ToContinuousBackupConfigPtrOutputWithContext(context.Background())
}

func (o ContinuousBackupConfigOutput) ToContinuousBackupConfigPtrOutputWithContext(ctx context.Context) ContinuousBackupConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContinuousBackupConfig) *ContinuousBackupConfig {
		return &v
	}).(ContinuousBackupConfigPtrOutput)
}

func (o ContinuousBackupConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ContinuousBackupConfig] {
	return pulumix.Output[ContinuousBackupConfig]{
		OutputState: o.OutputState,
	}
}

// Whether ContinuousBackup is enabled.
func (o ContinuousBackupConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContinuousBackupConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The encryption config can be specified to encrypt the backups with a customer-managed encryption key (CMEK). When this field is not specified, the backup will then use default encryption scheme to protect the user data.
func (o ContinuousBackupConfigOutput) EncryptionConfig() EncryptionConfigPtrOutput {
	return o.ApplyT(func(v ContinuousBackupConfig) *EncryptionConfig { return v.EncryptionConfig }).(EncryptionConfigPtrOutput)
}

// The number of days that are eligible to restore from using PITR. To support the entire recovery window, backups and logs are retained for one day more than the recovery window. If not set, defaults to 14 days.
func (o ContinuousBackupConfigOutput) RecoveryWindowDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContinuousBackupConfig) *int { return v.RecoveryWindowDays }).(pulumi.IntPtrOutput)
}

type ContinuousBackupConfigPtrOutput struct{ *pulumi.OutputState }

func (ContinuousBackupConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContinuousBackupConfig)(nil)).Elem()
}

func (o ContinuousBackupConfigPtrOutput) ToContinuousBackupConfigPtrOutput() ContinuousBackupConfigPtrOutput {
	return o
}

func (o ContinuousBackupConfigPtrOutput) ToContinuousBackupConfigPtrOutputWithContext(ctx context.Context) ContinuousBackupConfigPtrOutput {
	return o
}

func (o ContinuousBackupConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContinuousBackupConfig] {
	return pulumix.Output[*ContinuousBackupConfig]{
		OutputState: o.OutputState,
	}
}

func (o ContinuousBackupConfigPtrOutput) Elem() ContinuousBackupConfigOutput {
	return o.ApplyT(func(v *ContinuousBackupConfig) ContinuousBackupConfig {
		if v != nil {
			return *v
		}
		var ret ContinuousBackupConfig
		return ret
	}).(ContinuousBackupConfigOutput)
}

// Whether ContinuousBackup is enabled.
func (o ContinuousBackupConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContinuousBackupConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The encryption config can be specified to encrypt the backups with a customer-managed encryption key (CMEK). When this field is not specified, the backup will then use default encryption scheme to protect the user data.
func (o ContinuousBackupConfigPtrOutput) EncryptionConfig() EncryptionConfigPtrOutput {
	return o.ApplyT(func(v *ContinuousBackupConfig) *EncryptionConfig {
		if v == nil {
			return nil
		}
		return v.EncryptionConfig
	}).(EncryptionConfigPtrOutput)
}

// The number of days that are eligible to restore from using PITR. To support the entire recovery window, backups and logs are retained for one day more than the recovery window. If not set, defaults to 14 days.
func (o ContinuousBackupConfigPtrOutput) RecoveryWindowDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContinuousBackupConfig) *int {
		if v == nil {
			return nil
		}
		return v.RecoveryWindowDays
	}).(pulumi.IntPtrOutput)
}

// ContinuousBackupConfig describes the continuous backups recovery configurations of a cluster.
type ContinuousBackupConfigResponse struct {
	// Whether ContinuousBackup is enabled.
	Enabled bool `pulumi:"enabled"`
	// The encryption config can be specified to encrypt the backups with a customer-managed encryption key (CMEK). When this field is not specified, the backup will then use default encryption scheme to protect the user data.
	EncryptionConfig EncryptionConfigResponse `pulumi:"encryptionConfig"`
	// The number of days that are eligible to restore from using PITR. To support the entire recovery window, backups and logs are retained for one day more than the recovery window. If not set, defaults to 14 days.
	RecoveryWindowDays int `pulumi:"recoveryWindowDays"`
}

// ContinuousBackupConfig describes the continuous backups recovery configurations of a cluster.
type ContinuousBackupConfigResponseOutput struct{ *pulumi.OutputState }

func (ContinuousBackupConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContinuousBackupConfigResponse)(nil)).Elem()
}

func (o ContinuousBackupConfigResponseOutput) ToContinuousBackupConfigResponseOutput() ContinuousBackupConfigResponseOutput {
	return o
}

func (o ContinuousBackupConfigResponseOutput) ToContinuousBackupConfigResponseOutputWithContext(ctx context.Context) ContinuousBackupConfigResponseOutput {
	return o
}

func (o ContinuousBackupConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContinuousBackupConfigResponse] {
	return pulumix.Output[ContinuousBackupConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Whether ContinuousBackup is enabled.
func (o ContinuousBackupConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ContinuousBackupConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The encryption config can be specified to encrypt the backups with a customer-managed encryption key (CMEK). When this field is not specified, the backup will then use default encryption scheme to protect the user data.
func (o ContinuousBackupConfigResponseOutput) EncryptionConfig() EncryptionConfigResponseOutput {
	return o.ApplyT(func(v ContinuousBackupConfigResponse) EncryptionConfigResponse { return v.EncryptionConfig }).(EncryptionConfigResponseOutput)
}

// The number of days that are eligible to restore from using PITR. To support the entire recovery window, backups and logs are retained for one day more than the recovery window. If not set, defaults to 14 days.
func (o ContinuousBackupConfigResponseOutput) RecoveryWindowDays() pulumi.IntOutput {
	return o.ApplyT(func(v ContinuousBackupConfigResponse) int { return v.RecoveryWindowDays }).(pulumi.IntOutput)
}

// ContinuousBackupInfo describes the continuous backup properties of a cluster.
type ContinuousBackupInfoResponse struct {
	// The earliest restorable time that can be restored to. Output only field.
	EarliestRestorableTime string `pulumi:"earliestRestorableTime"`
	// When ContinuousBackup was most recently enabled. Set to null if ContinuousBackup is not enabled.
	EnabledTime string `pulumi:"enabledTime"`
	// The encryption information for the WALs and backups required for ContinuousBackup.
	EncryptionInfo EncryptionInfoResponse `pulumi:"encryptionInfo"`
	// Days of the week on which a continuous backup is taken. Output only field. Ignored if passed into the request.
	Schedule []string `pulumi:"schedule"`
}

// ContinuousBackupInfo describes the continuous backup properties of a cluster.
type ContinuousBackupInfoResponseOutput struct{ *pulumi.OutputState }

func (ContinuousBackupInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContinuousBackupInfoResponse)(nil)).Elem()
}

func (o ContinuousBackupInfoResponseOutput) ToContinuousBackupInfoResponseOutput() ContinuousBackupInfoResponseOutput {
	return o
}

func (o ContinuousBackupInfoResponseOutput) ToContinuousBackupInfoResponseOutputWithContext(ctx context.Context) ContinuousBackupInfoResponseOutput {
	return o
}

func (o ContinuousBackupInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContinuousBackupInfoResponse] {
	return pulumix.Output[ContinuousBackupInfoResponse]{
		OutputState: o.OutputState,
	}
}

// The earliest restorable time that can be restored to. Output only field.
func (o ContinuousBackupInfoResponseOutput) EarliestRestorableTime() pulumi.StringOutput {
	return o.ApplyT(func(v ContinuousBackupInfoResponse) string { return v.EarliestRestorableTime }).(pulumi.StringOutput)
}

// When ContinuousBackup was most recently enabled. Set to null if ContinuousBackup is not enabled.
func (o ContinuousBackupInfoResponseOutput) EnabledTime() pulumi.StringOutput {
	return o.ApplyT(func(v ContinuousBackupInfoResponse) string { return v.EnabledTime }).(pulumi.StringOutput)
}

// The encryption information for the WALs and backups required for ContinuousBackup.
func (o ContinuousBackupInfoResponseOutput) EncryptionInfo() EncryptionInfoResponseOutput {
	return o.ApplyT(func(v ContinuousBackupInfoResponse) EncryptionInfoResponse { return v.EncryptionInfo }).(EncryptionInfoResponseOutput)
}

// Days of the week on which a continuous backup is taken. Output only field. Ignored if passed into the request.
func (o ContinuousBackupInfoResponseOutput) Schedule() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContinuousBackupInfoResponse) []string { return v.Schedule }).(pulumi.StringArrayOutput)
}

// EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
type EncryptionConfig struct {
	// The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// EncryptionConfigInput is an input type that accepts EncryptionConfigArgs and EncryptionConfigOutput values.
// You can construct a concrete instance of `EncryptionConfigInput` via:
//
//	EncryptionConfigArgs{...}
type EncryptionConfigInput interface {
	pulumi.Input

	ToEncryptionConfigOutput() EncryptionConfigOutput
	ToEncryptionConfigOutputWithContext(context.Context) EncryptionConfigOutput
}

// EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
type EncryptionConfigArgs struct {
	// The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (EncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return i.ToEncryptionConfigOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput)
}

func (i EncryptionConfigArgs) ToOutput(ctx context.Context) pulumix.Output[EncryptionConfig] {
	return pulumix.Output[EncryptionConfig]{
		OutputState: i.ToEncryptionConfigOutputWithContext(ctx).OutputState,
	}
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput).ToEncryptionConfigPtrOutputWithContext(ctx)
}

// EncryptionConfigPtrInput is an input type that accepts EncryptionConfigArgs, EncryptionConfigPtr and EncryptionConfigPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigPtrInput` via:
//
//	        EncryptionConfigArgs{...}
//
//	or:
//
//	        nil
type EncryptionConfigPtrInput interface {
	pulumi.Input

	ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput
	ToEncryptionConfigPtrOutputWithContext(context.Context) EncryptionConfigPtrOutput
}

type encryptionConfigPtrType EncryptionConfigArgs

func EncryptionConfigPtr(v *EncryptionConfigArgs) EncryptionConfigPtrInput {
	return (*encryptionConfigPtrType)(v)
}

func (*encryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigPtrOutput)
}

func (i *encryptionConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*EncryptionConfig] {
	return pulumix.Output[*EncryptionConfig]{
		OutputState: i.ToEncryptionConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
type EncryptionConfigOutput struct{ *pulumi.OutputState }

func (EncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionConfig) *EncryptionConfig {
		return &v
	}).(EncryptionConfigPtrOutput)
}

func (o EncryptionConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionConfig] {
	return pulumix.Output[EncryptionConfig]{
		OutputState: o.OutputState,
	}
}

// The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
func (o EncryptionConfigOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfig) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type EncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EncryptionConfig] {
	return pulumix.Output[*EncryptionConfig]{
		OutputState: o.OutputState,
	}
}

func (o EncryptionConfigPtrOutput) Elem() EncryptionConfigOutput {
	return o.ApplyT(func(v *EncryptionConfig) EncryptionConfig {
		if v != nil {
			return *v
		}
		var ret EncryptionConfig
		return ret
	}).(EncryptionConfigOutput)
}

// The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
func (o EncryptionConfigPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfig) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
type EncryptionConfigResponse struct {
	// The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
type EncryptionConfigResponseOutput struct{ *pulumi.OutputState }

func (EncryptionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfigResponse)(nil)).Elem()
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponseOutput() EncryptionConfigResponseOutput {
	return o
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponseOutputWithContext(ctx context.Context) EncryptionConfigResponseOutput {
	return o
}

func (o EncryptionConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionConfigResponse] {
	return pulumix.Output[EncryptionConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
func (o EncryptionConfigResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// EncryptionInfo describes the encryption information of a cluster or a backup.
type EncryptionInfoResponse struct {
	// Type of encryption.
	EncryptionType string `pulumi:"encryptionType"`
	// Cloud KMS key versions that are being used to protect the database or the backup.
	KmsKeyVersions []string `pulumi:"kmsKeyVersions"`
}

// EncryptionInfo describes the encryption information of a cluster or a backup.
type EncryptionInfoResponseOutput struct{ *pulumi.OutputState }

func (EncryptionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionInfoResponse)(nil)).Elem()
}

func (o EncryptionInfoResponseOutput) ToEncryptionInfoResponseOutput() EncryptionInfoResponseOutput {
	return o
}

func (o EncryptionInfoResponseOutput) ToEncryptionInfoResponseOutputWithContext(ctx context.Context) EncryptionInfoResponseOutput {
	return o
}

func (o EncryptionInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionInfoResponse] {
	return pulumix.Output[EncryptionInfoResponse]{
		OutputState: o.OutputState,
	}
}

// Type of encryption.
func (o EncryptionInfoResponseOutput) EncryptionType() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionInfoResponse) string { return v.EncryptionType }).(pulumi.StringOutput)
}

// Cloud KMS key versions that are being used to protect the database or the backup.
func (o EncryptionInfoResponseOutput) KmsKeyVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EncryptionInfoResponse) []string { return v.KmsKeyVersions }).(pulumi.StringArrayOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type GoogleTypeTimeOfDay struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours *int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes *int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos *int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds *int `pulumi:"seconds"`
}

// GoogleTypeTimeOfDayInput is an input type that accepts GoogleTypeTimeOfDayArgs and GoogleTypeTimeOfDayOutput values.
// You can construct a concrete instance of `GoogleTypeTimeOfDayInput` via:
//
//	GoogleTypeTimeOfDayArgs{...}
type GoogleTypeTimeOfDayInput interface {
	pulumi.Input

	ToGoogleTypeTimeOfDayOutput() GoogleTypeTimeOfDayOutput
	ToGoogleTypeTimeOfDayOutputWithContext(context.Context) GoogleTypeTimeOfDayOutput
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type GoogleTypeTimeOfDayArgs struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours pulumi.IntPtrInput `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes pulumi.IntPtrInput `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds pulumi.IntPtrInput `pulumi:"seconds"`
}

func (GoogleTypeTimeOfDayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeTimeOfDay)(nil)).Elem()
}

func (i GoogleTypeTimeOfDayArgs) ToGoogleTypeTimeOfDayOutput() GoogleTypeTimeOfDayOutput {
	return i.ToGoogleTypeTimeOfDayOutputWithContext(context.Background())
}

func (i GoogleTypeTimeOfDayArgs) ToGoogleTypeTimeOfDayOutputWithContext(ctx context.Context) GoogleTypeTimeOfDayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeTimeOfDayOutput)
}

func (i GoogleTypeTimeOfDayArgs) ToOutput(ctx context.Context) pulumix.Output[GoogleTypeTimeOfDay] {
	return pulumix.Output[GoogleTypeTimeOfDay]{
		OutputState: i.ToGoogleTypeTimeOfDayOutputWithContext(ctx).OutputState,
	}
}

// GoogleTypeTimeOfDayArrayInput is an input type that accepts GoogleTypeTimeOfDayArray and GoogleTypeTimeOfDayArrayOutput values.
// You can construct a concrete instance of `GoogleTypeTimeOfDayArrayInput` via:
//
//	GoogleTypeTimeOfDayArray{ GoogleTypeTimeOfDayArgs{...} }
type GoogleTypeTimeOfDayArrayInput interface {
	pulumi.Input

	ToGoogleTypeTimeOfDayArrayOutput() GoogleTypeTimeOfDayArrayOutput
	ToGoogleTypeTimeOfDayArrayOutputWithContext(context.Context) GoogleTypeTimeOfDayArrayOutput
}

type GoogleTypeTimeOfDayArray []GoogleTypeTimeOfDayInput

func (GoogleTypeTimeOfDayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleTypeTimeOfDay)(nil)).Elem()
}

func (i GoogleTypeTimeOfDayArray) ToGoogleTypeTimeOfDayArrayOutput() GoogleTypeTimeOfDayArrayOutput {
	return i.ToGoogleTypeTimeOfDayArrayOutputWithContext(context.Background())
}

func (i GoogleTypeTimeOfDayArray) ToGoogleTypeTimeOfDayArrayOutputWithContext(ctx context.Context) GoogleTypeTimeOfDayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeTimeOfDayArrayOutput)
}

func (i GoogleTypeTimeOfDayArray) ToOutput(ctx context.Context) pulumix.Output[[]GoogleTypeTimeOfDay] {
	return pulumix.Output[[]GoogleTypeTimeOfDay]{
		OutputState: i.ToGoogleTypeTimeOfDayArrayOutputWithContext(ctx).OutputState,
	}
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type GoogleTypeTimeOfDayOutput struct{ *pulumi.OutputState }

func (GoogleTypeTimeOfDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeTimeOfDay)(nil)).Elem()
}

func (o GoogleTypeTimeOfDayOutput) ToGoogleTypeTimeOfDayOutput() GoogleTypeTimeOfDayOutput {
	return o
}

func (o GoogleTypeTimeOfDayOutput) ToGoogleTypeTimeOfDayOutputWithContext(ctx context.Context) GoogleTypeTimeOfDayOutput {
	return o
}

func (o GoogleTypeTimeOfDayOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleTypeTimeOfDay] {
	return pulumix.Output[GoogleTypeTimeOfDay]{
		OutputState: o.OutputState,
	}
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o GoogleTypeTimeOfDayOutput) Hours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeTimeOfDay) *int { return v.Hours }).(pulumi.IntPtrOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o GoogleTypeTimeOfDayOutput) Minutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeTimeOfDay) *int { return v.Minutes }).(pulumi.IntPtrOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o GoogleTypeTimeOfDayOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeTimeOfDay) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o GoogleTypeTimeOfDayOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeTimeOfDay) *int { return v.Seconds }).(pulumi.IntPtrOutput)
}

type GoogleTypeTimeOfDayArrayOutput struct{ *pulumi.OutputState }

func (GoogleTypeTimeOfDayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleTypeTimeOfDay)(nil)).Elem()
}

func (o GoogleTypeTimeOfDayArrayOutput) ToGoogleTypeTimeOfDayArrayOutput() GoogleTypeTimeOfDayArrayOutput {
	return o
}

func (o GoogleTypeTimeOfDayArrayOutput) ToGoogleTypeTimeOfDayArrayOutputWithContext(ctx context.Context) GoogleTypeTimeOfDayArrayOutput {
	return o
}

func (o GoogleTypeTimeOfDayArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GoogleTypeTimeOfDay] {
	return pulumix.Output[[]GoogleTypeTimeOfDay]{
		OutputState: o.OutputState,
	}
}

func (o GoogleTypeTimeOfDayArrayOutput) Index(i pulumi.IntInput) GoogleTypeTimeOfDayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleTypeTimeOfDay {
		return vs[0].([]GoogleTypeTimeOfDay)[vs[1].(int)]
	}).(GoogleTypeTimeOfDayOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type GoogleTypeTimeOfDayResponse struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds int `pulumi:"seconds"`
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type GoogleTypeTimeOfDayResponseOutput struct{ *pulumi.OutputState }

func (GoogleTypeTimeOfDayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeTimeOfDayResponse)(nil)).Elem()
}

func (o GoogleTypeTimeOfDayResponseOutput) ToGoogleTypeTimeOfDayResponseOutput() GoogleTypeTimeOfDayResponseOutput {
	return o
}

func (o GoogleTypeTimeOfDayResponseOutput) ToGoogleTypeTimeOfDayResponseOutputWithContext(ctx context.Context) GoogleTypeTimeOfDayResponseOutput {
	return o
}

func (o GoogleTypeTimeOfDayResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleTypeTimeOfDayResponse] {
	return pulumix.Output[GoogleTypeTimeOfDayResponse]{
		OutputState: o.OutputState,
	}
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o GoogleTypeTimeOfDayResponseOutput) Hours() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleTypeTimeOfDayResponse) int { return v.Hours }).(pulumi.IntOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o GoogleTypeTimeOfDayResponseOutput) Minutes() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleTypeTimeOfDayResponse) int { return v.Minutes }).(pulumi.IntOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o GoogleTypeTimeOfDayResponseOutput) Nanos() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleTypeTimeOfDayResponse) int { return v.Nanos }).(pulumi.IntOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o GoogleTypeTimeOfDayResponseOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleTypeTimeOfDayResponse) int { return v.Seconds }).(pulumi.IntOutput)
}

type GoogleTypeTimeOfDayResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleTypeTimeOfDayResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleTypeTimeOfDayResponse)(nil)).Elem()
}

func (o GoogleTypeTimeOfDayResponseArrayOutput) ToGoogleTypeTimeOfDayResponseArrayOutput() GoogleTypeTimeOfDayResponseArrayOutput {
	return o
}

func (o GoogleTypeTimeOfDayResponseArrayOutput) ToGoogleTypeTimeOfDayResponseArrayOutputWithContext(ctx context.Context) GoogleTypeTimeOfDayResponseArrayOutput {
	return o
}

func (o GoogleTypeTimeOfDayResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GoogleTypeTimeOfDayResponse] {
	return pulumix.Output[[]GoogleTypeTimeOfDayResponse]{
		OutputState: o.OutputState,
	}
}

func (o GoogleTypeTimeOfDayResponseArrayOutput) Index(i pulumi.IntInput) GoogleTypeTimeOfDayResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleTypeTimeOfDayResponse {
		return vs[0].([]GoogleTypeTimeOfDayResponse)[vs[1].(int)]
	}).(GoogleTypeTimeOfDayResponseOutput)
}

// MachineConfig describes the configuration of a machine.
type MachineConfig struct {
	// The number of CPU's in the VM instance.
	CpuCount *int `pulumi:"cpuCount"`
}

// MachineConfigInput is an input type that accepts MachineConfigArgs and MachineConfigOutput values.
// You can construct a concrete instance of `MachineConfigInput` via:
//
//	MachineConfigArgs{...}
type MachineConfigInput interface {
	pulumi.Input

	ToMachineConfigOutput() MachineConfigOutput
	ToMachineConfigOutputWithContext(context.Context) MachineConfigOutput
}

// MachineConfig describes the configuration of a machine.
type MachineConfigArgs struct {
	// The number of CPU's in the VM instance.
	CpuCount pulumi.IntPtrInput `pulumi:"cpuCount"`
}

func (MachineConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineConfig)(nil)).Elem()
}

func (i MachineConfigArgs) ToMachineConfigOutput() MachineConfigOutput {
	return i.ToMachineConfigOutputWithContext(context.Background())
}

func (i MachineConfigArgs) ToMachineConfigOutputWithContext(ctx context.Context) MachineConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineConfigOutput)
}

func (i MachineConfigArgs) ToOutput(ctx context.Context) pulumix.Output[MachineConfig] {
	return pulumix.Output[MachineConfig]{
		OutputState: i.ToMachineConfigOutputWithContext(ctx).OutputState,
	}
}

func (i MachineConfigArgs) ToMachineConfigPtrOutput() MachineConfigPtrOutput {
	return i.ToMachineConfigPtrOutputWithContext(context.Background())
}

func (i MachineConfigArgs) ToMachineConfigPtrOutputWithContext(ctx context.Context) MachineConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineConfigOutput).ToMachineConfigPtrOutputWithContext(ctx)
}

// MachineConfigPtrInput is an input type that accepts MachineConfigArgs, MachineConfigPtr and MachineConfigPtrOutput values.
// You can construct a concrete instance of `MachineConfigPtrInput` via:
//
//	        MachineConfigArgs{...}
//
//	or:
//
//	        nil
type MachineConfigPtrInput interface {
	pulumi.Input

	ToMachineConfigPtrOutput() MachineConfigPtrOutput
	ToMachineConfigPtrOutputWithContext(context.Context) MachineConfigPtrOutput
}

type machineConfigPtrType MachineConfigArgs

func MachineConfigPtr(v *MachineConfigArgs) MachineConfigPtrInput {
	return (*machineConfigPtrType)(v)
}

func (*machineConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineConfig)(nil)).Elem()
}

func (i *machineConfigPtrType) ToMachineConfigPtrOutput() MachineConfigPtrOutput {
	return i.ToMachineConfigPtrOutputWithContext(context.Background())
}

func (i *machineConfigPtrType) ToMachineConfigPtrOutputWithContext(ctx context.Context) MachineConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineConfigPtrOutput)
}

func (i *machineConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*MachineConfig] {
	return pulumix.Output[*MachineConfig]{
		OutputState: i.ToMachineConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// MachineConfig describes the configuration of a machine.
type MachineConfigOutput struct{ *pulumi.OutputState }

func (MachineConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineConfig)(nil)).Elem()
}

func (o MachineConfigOutput) ToMachineConfigOutput() MachineConfigOutput {
	return o
}

func (o MachineConfigOutput) ToMachineConfigOutputWithContext(ctx context.Context) MachineConfigOutput {
	return o
}

func (o MachineConfigOutput) ToMachineConfigPtrOutput() MachineConfigPtrOutput {
	return o.ToMachineConfigPtrOutputWithContext(context.Background())
}

func (o MachineConfigOutput) ToMachineConfigPtrOutputWithContext(ctx context.Context) MachineConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineConfig) *MachineConfig {
		return &v
	}).(MachineConfigPtrOutput)
}

func (o MachineConfigOutput) ToOutput(ctx context.Context) pulumix.Output[MachineConfig] {
	return pulumix.Output[MachineConfig]{
		OutputState: o.OutputState,
	}
}

// The number of CPU's in the VM instance.
func (o MachineConfigOutput) CpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineConfig) *int { return v.CpuCount }).(pulumi.IntPtrOutput)
}

type MachineConfigPtrOutput struct{ *pulumi.OutputState }

func (MachineConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineConfig)(nil)).Elem()
}

func (o MachineConfigPtrOutput) ToMachineConfigPtrOutput() MachineConfigPtrOutput {
	return o
}

func (o MachineConfigPtrOutput) ToMachineConfigPtrOutputWithContext(ctx context.Context) MachineConfigPtrOutput {
	return o
}

func (o MachineConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MachineConfig] {
	return pulumix.Output[*MachineConfig]{
		OutputState: o.OutputState,
	}
}

func (o MachineConfigPtrOutput) Elem() MachineConfigOutput {
	return o.ApplyT(func(v *MachineConfig) MachineConfig {
		if v != nil {
			return *v
		}
		var ret MachineConfig
		return ret
	}).(MachineConfigOutput)
}

// The number of CPU's in the VM instance.
func (o MachineConfigPtrOutput) CpuCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineConfig) *int {
		if v == nil {
			return nil
		}
		return v.CpuCount
	}).(pulumi.IntPtrOutput)
}

// MachineConfig describes the configuration of a machine.
type MachineConfigResponse struct {
	// The number of CPU's in the VM instance.
	CpuCount int `pulumi:"cpuCount"`
}

// MachineConfig describes the configuration of a machine.
type MachineConfigResponseOutput struct{ *pulumi.OutputState }

func (MachineConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineConfigResponse)(nil)).Elem()
}

func (o MachineConfigResponseOutput) ToMachineConfigResponseOutput() MachineConfigResponseOutput {
	return o
}

func (o MachineConfigResponseOutput) ToMachineConfigResponseOutputWithContext(ctx context.Context) MachineConfigResponseOutput {
	return o
}

func (o MachineConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MachineConfigResponse] {
	return pulumix.Output[MachineConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The number of CPU's in the VM instance.
func (o MachineConfigResponseOutput) CpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v MachineConfigResponse) int { return v.CpuCount }).(pulumi.IntOutput)
}

// Subset of the source instance configuration that is available when reading the cluster resource.
type MigrationSourceResponse struct {
	// The host and port of the on-premises instance in host:port format
	HostPort string `pulumi:"hostPort"`
	// Place holder for the external source identifier(e.g DMS job name) that created the cluster.
	ReferenceId string `pulumi:"referenceId"`
	// Type of migration source.
	SourceType string `pulumi:"sourceType"`
}

// Subset of the source instance configuration that is available when reading the cluster resource.
type MigrationSourceResponseOutput struct{ *pulumi.OutputState }

func (MigrationSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationSourceResponse)(nil)).Elem()
}

func (o MigrationSourceResponseOutput) ToMigrationSourceResponseOutput() MigrationSourceResponseOutput {
	return o
}

func (o MigrationSourceResponseOutput) ToMigrationSourceResponseOutputWithContext(ctx context.Context) MigrationSourceResponseOutput {
	return o
}

func (o MigrationSourceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MigrationSourceResponse] {
	return pulumix.Output[MigrationSourceResponse]{
		OutputState: o.OutputState,
	}
}

// The host and port of the on-premises instance in host:port format
func (o MigrationSourceResponseOutput) HostPort() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationSourceResponse) string { return v.HostPort }).(pulumi.StringOutput)
}

// Place holder for the external source identifier(e.g DMS job name) that created the cluster.
func (o MigrationSourceResponseOutput) ReferenceId() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationSourceResponse) string { return v.ReferenceId }).(pulumi.StringOutput)
}

// Type of migration source.
func (o MigrationSourceResponseOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationSourceResponse) string { return v.SourceType }).(pulumi.StringOutput)
}

// Metadata related to network configuration.
type NetworkConfig struct {
	// Optional. Name of the allocated IP range for the private IP AlloyDB cluster, for example: "google-managed-services-default". If set, the instance IPs for this cluster will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. Field name is intended to be consistent with Cloud SQL.
	AllocatedIpRange *string `pulumi:"allocatedIpRange"`
	// The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
	Network string `pulumi:"network"`
}

// NetworkConfigInput is an input type that accepts NetworkConfigArgs and NetworkConfigOutput values.
// You can construct a concrete instance of `NetworkConfigInput` via:
//
//	NetworkConfigArgs{...}
type NetworkConfigInput interface {
	pulumi.Input

	ToNetworkConfigOutput() NetworkConfigOutput
	ToNetworkConfigOutputWithContext(context.Context) NetworkConfigOutput
}

// Metadata related to network configuration.
type NetworkConfigArgs struct {
	// Optional. Name of the allocated IP range for the private IP AlloyDB cluster, for example: "google-managed-services-default". If set, the instance IPs for this cluster will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. Field name is intended to be consistent with Cloud SQL.
	AllocatedIpRange pulumi.StringPtrInput `pulumi:"allocatedIpRange"`
	// The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
	Network pulumi.StringInput `pulumi:"network"`
}

func (NetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArgs) ToNetworkConfigOutput() NetworkConfigOutput {
	return i.ToNetworkConfigOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput)
}

func (i NetworkConfigArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkConfig] {
	return pulumix.Output[NetworkConfig]{
		OutputState: i.ToNetworkConfigOutputWithContext(ctx).OutputState,
	}
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput).ToNetworkConfigPtrOutputWithContext(ctx)
}

// NetworkConfigPtrInput is an input type that accepts NetworkConfigArgs, NetworkConfigPtr and NetworkConfigPtrOutput values.
// You can construct a concrete instance of `NetworkConfigPtrInput` via:
//
//	        NetworkConfigArgs{...}
//
//	or:
//
//	        nil
type NetworkConfigPtrInput interface {
	pulumi.Input

	ToNetworkConfigPtrOutput() NetworkConfigPtrOutput
	ToNetworkConfigPtrOutputWithContext(context.Context) NetworkConfigPtrOutput
}

type networkConfigPtrType NetworkConfigArgs

func NetworkConfigPtr(v *NetworkConfigArgs) NetworkConfigPtrInput {
	return (*networkConfigPtrType)(v)
}

func (*networkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigPtrOutput)
}

func (i *networkConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*NetworkConfig] {
	return pulumix.Output[*NetworkConfig]{
		OutputState: i.ToNetworkConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Metadata related to network configuration.
type NetworkConfigOutput struct{ *pulumi.OutputState }

func (NetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigOutput) ToNetworkConfigOutput() NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkConfig) *NetworkConfig {
		return &v
	}).(NetworkConfigPtrOutput)
}

func (o NetworkConfigOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkConfig] {
	return pulumix.Output[NetworkConfig]{
		OutputState: o.OutputState,
	}
}

// Optional. Name of the allocated IP range for the private IP AlloyDB cluster, for example: "google-managed-services-default". If set, the instance IPs for this cluster will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. Field name is intended to be consistent with Cloud SQL.
func (o NetworkConfigOutput) AllocatedIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.AllocatedIpRange }).(pulumi.StringPtrOutput)
}

// The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
func (o NetworkConfigOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfig) string { return v.Network }).(pulumi.StringOutput)
}

type NetworkConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkConfig] {
	return pulumix.Output[*NetworkConfig]{
		OutputState: o.OutputState,
	}
}

func (o NetworkConfigPtrOutput) Elem() NetworkConfigOutput {
	return o.ApplyT(func(v *NetworkConfig) NetworkConfig {
		if v != nil {
			return *v
		}
		var ret NetworkConfig
		return ret
	}).(NetworkConfigOutput)
}

// Optional. Name of the allocated IP range for the private IP AlloyDB cluster, for example: "google-managed-services-default". If set, the instance IPs for this cluster will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. Field name is intended to be consistent with Cloud SQL.
func (o NetworkConfigPtrOutput) AllocatedIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.AllocatedIpRange
	}).(pulumi.StringPtrOutput)
}

// The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
func (o NetworkConfigPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Network
	}).(pulumi.StringPtrOutput)
}

// Metadata related to network configuration.
type NetworkConfigResponse struct {
	// Optional. Name of the allocated IP range for the private IP AlloyDB cluster, for example: "google-managed-services-default". If set, the instance IPs for this cluster will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. Field name is intended to be consistent with Cloud SQL.
	AllocatedIpRange string `pulumi:"allocatedIpRange"`
	// The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
	Network string `pulumi:"network"`
}

// Metadata related to network configuration.
type NetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutput() NetworkConfigResponseOutput {
	return o
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutputWithContext(ctx context.Context) NetworkConfigResponseOutput {
	return o
}

func (o NetworkConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkConfigResponse] {
	return pulumix.Output[NetworkConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Name of the allocated IP range for the private IP AlloyDB cluster, for example: "google-managed-services-default". If set, the instance IPs for this cluster will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. Field name is intended to be consistent with Cloud SQL.
func (o NetworkConfigResponseOutput) AllocatedIpRange() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.AllocatedIpRange }).(pulumi.StringOutput)
}

// The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
func (o NetworkConfigResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Network }).(pulumi.StringOutput)
}

// Details of a single node in the instance. Nodes in an AlloyDB instance are ephemereal, they can change during update, failover, autohealing and resize operations.
type NodeResponse struct {
	// The private IP address of the VM e.g. "10.57.0.34".
	Ip string `pulumi:"ip"`
	// Determined by state of the compute VM and postgres-service health. Compute VM state can have values listed in https://cloud.google.com/compute/docs/instances/instance-life-cycle and postgres-service health can have values: HEALTHY and UNHEALTHY.
	State string `pulumi:"state"`
	// The Compute Engine zone of the VM e.g. "us-central1-b".
	Zone string `pulumi:"zone"`
}

// Details of a single node in the instance. Nodes in an AlloyDB instance are ephemereal, they can change during update, failover, autohealing and resize operations.
type NodeResponseOutput struct{ *pulumi.OutputState }

func (NodeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeResponse)(nil)).Elem()
}

func (o NodeResponseOutput) ToNodeResponseOutput() NodeResponseOutput {
	return o
}

func (o NodeResponseOutput) ToNodeResponseOutputWithContext(ctx context.Context) NodeResponseOutput {
	return o
}

func (o NodeResponseOutput) ToOutput(ctx context.Context) pulumix.Output[NodeResponse] {
	return pulumix.Output[NodeResponse]{
		OutputState: o.OutputState,
	}
}

// The private IP address of the VM e.g. "10.57.0.34".
func (o NodeResponseOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.Ip }).(pulumi.StringOutput)
}

// Determined by state of the compute VM and postgres-service health. Compute VM state can have values listed in https://cloud.google.com/compute/docs/instances/instance-life-cycle and postgres-service health can have values: HEALTHY and UNHEALTHY.
func (o NodeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.State }).(pulumi.StringOutput)
}

// The Compute Engine zone of the VM e.g. "us-central1-b".
func (o NodeResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.Zone }).(pulumi.StringOutput)
}

type NodeResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeResponse)(nil)).Elem()
}

func (o NodeResponseArrayOutput) ToNodeResponseArrayOutput() NodeResponseArrayOutput {
	return o
}

func (o NodeResponseArrayOutput) ToNodeResponseArrayOutputWithContext(ctx context.Context) NodeResponseArrayOutput {
	return o
}

func (o NodeResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NodeResponse] {
	return pulumix.Output[[]NodeResponse]{
		OutputState: o.OutputState,
	}
}

func (o NodeResponseArrayOutput) Index(i pulumi.IntInput) NodeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeResponse {
		return vs[0].([]NodeResponse)[vs[1].(int)]
	}).(NodeResponseOutput)
}

// Configuration for the primary cluster. It has the list of clusters that are replicating from this cluster. This should be set if and only if the cluster is of type PRIMARY.
type PrimaryConfigResponse struct {
	// Names of the clusters that are replicating from this cluster.
	SecondaryClusterNames []string `pulumi:"secondaryClusterNames"`
}

// Configuration for the primary cluster. It has the list of clusters that are replicating from this cluster. This should be set if and only if the cluster is of type PRIMARY.
type PrimaryConfigResponseOutput struct{ *pulumi.OutputState }

func (PrimaryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrimaryConfigResponse)(nil)).Elem()
}

func (o PrimaryConfigResponseOutput) ToPrimaryConfigResponseOutput() PrimaryConfigResponseOutput {
	return o
}

func (o PrimaryConfigResponseOutput) ToPrimaryConfigResponseOutputWithContext(ctx context.Context) PrimaryConfigResponseOutput {
	return o
}

func (o PrimaryConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PrimaryConfigResponse] {
	return pulumix.Output[PrimaryConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Names of the clusters that are replicating from this cluster.
func (o PrimaryConfigResponseOutput) SecondaryClusterNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrimaryConfigResponse) []string { return v.SecondaryClusterNames }).(pulumi.StringArrayOutput)
}

// A backup's position in a quantity-based retention queue, of backups with the same source cluster and type, with length, retention, specified by the backup's retention policy. Once the position is greater than the retention, the backup is eligible to be garbage collected. Example: 5 backups from the same source cluster and type with a quantity-based retention of 3 and denoted by backup_id (position, retention). Safe: backup_5 (1, 3), backup_4, (2, 3), backup_3 (3, 3). Awaiting garbage collection: backup_2 (4, 3), backup_1 (5, 3)
type QuantityBasedExpiryResponse struct {
	// The backup's position among its backups with the same source cluster and type, by descending chronological order create time(i.e. newest first).
	RetentionCount int `pulumi:"retentionCount"`
	// The length of the quantity-based queue, specified by the backup's retention policy.
	TotalRetentionCount int `pulumi:"totalRetentionCount"`
}

// A backup's position in a quantity-based retention queue, of backups with the same source cluster and type, with length, retention, specified by the backup's retention policy. Once the position is greater than the retention, the backup is eligible to be garbage collected. Example: 5 backups from the same source cluster and type with a quantity-based retention of 3 and denoted by backup_id (position, retention). Safe: backup_5 (1, 3), backup_4, (2, 3), backup_3 (3, 3). Awaiting garbage collection: backup_2 (4, 3), backup_1 (5, 3)
type QuantityBasedExpiryResponseOutput struct{ *pulumi.OutputState }

func (QuantityBasedExpiryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuantityBasedExpiryResponse)(nil)).Elem()
}

func (o QuantityBasedExpiryResponseOutput) ToQuantityBasedExpiryResponseOutput() QuantityBasedExpiryResponseOutput {
	return o
}

func (o QuantityBasedExpiryResponseOutput) ToQuantityBasedExpiryResponseOutputWithContext(ctx context.Context) QuantityBasedExpiryResponseOutput {
	return o
}

func (o QuantityBasedExpiryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[QuantityBasedExpiryResponse] {
	return pulumix.Output[QuantityBasedExpiryResponse]{
		OutputState: o.OutputState,
	}
}

// The backup's position among its backups with the same source cluster and type, by descending chronological order create time(i.e. newest first).
func (o QuantityBasedExpiryResponseOutput) RetentionCount() pulumi.IntOutput {
	return o.ApplyT(func(v QuantityBasedExpiryResponse) int { return v.RetentionCount }).(pulumi.IntOutput)
}

// The length of the quantity-based queue, specified by the backup's retention policy.
func (o QuantityBasedExpiryResponseOutput) TotalRetentionCount() pulumi.IntOutput {
	return o.ApplyT(func(v QuantityBasedExpiryResponse) int { return v.TotalRetentionCount }).(pulumi.IntOutput)
}

// A quantity based policy specifies that a certain number of the most recent successful backups should be retained.
type QuantityBasedRetention struct {
	// The number of backups to retain.
	Count *int `pulumi:"count"`
}

// QuantityBasedRetentionInput is an input type that accepts QuantityBasedRetentionArgs and QuantityBasedRetentionOutput values.
// You can construct a concrete instance of `QuantityBasedRetentionInput` via:
//
//	QuantityBasedRetentionArgs{...}
type QuantityBasedRetentionInput interface {
	pulumi.Input

	ToQuantityBasedRetentionOutput() QuantityBasedRetentionOutput
	ToQuantityBasedRetentionOutputWithContext(context.Context) QuantityBasedRetentionOutput
}

// A quantity based policy specifies that a certain number of the most recent successful backups should be retained.
type QuantityBasedRetentionArgs struct {
	// The number of backups to retain.
	Count pulumi.IntPtrInput `pulumi:"count"`
}

func (QuantityBasedRetentionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuantityBasedRetention)(nil)).Elem()
}

func (i QuantityBasedRetentionArgs) ToQuantityBasedRetentionOutput() QuantityBasedRetentionOutput {
	return i.ToQuantityBasedRetentionOutputWithContext(context.Background())
}

func (i QuantityBasedRetentionArgs) ToQuantityBasedRetentionOutputWithContext(ctx context.Context) QuantityBasedRetentionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuantityBasedRetentionOutput)
}

func (i QuantityBasedRetentionArgs) ToOutput(ctx context.Context) pulumix.Output[QuantityBasedRetention] {
	return pulumix.Output[QuantityBasedRetention]{
		OutputState: i.ToQuantityBasedRetentionOutputWithContext(ctx).OutputState,
	}
}

func (i QuantityBasedRetentionArgs) ToQuantityBasedRetentionPtrOutput() QuantityBasedRetentionPtrOutput {
	return i.ToQuantityBasedRetentionPtrOutputWithContext(context.Background())
}

func (i QuantityBasedRetentionArgs) ToQuantityBasedRetentionPtrOutputWithContext(ctx context.Context) QuantityBasedRetentionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuantityBasedRetentionOutput).ToQuantityBasedRetentionPtrOutputWithContext(ctx)
}

// QuantityBasedRetentionPtrInput is an input type that accepts QuantityBasedRetentionArgs, QuantityBasedRetentionPtr and QuantityBasedRetentionPtrOutput values.
// You can construct a concrete instance of `QuantityBasedRetentionPtrInput` via:
//
//	        QuantityBasedRetentionArgs{...}
//
//	or:
//
//	        nil
type QuantityBasedRetentionPtrInput interface {
	pulumi.Input

	ToQuantityBasedRetentionPtrOutput() QuantityBasedRetentionPtrOutput
	ToQuantityBasedRetentionPtrOutputWithContext(context.Context) QuantityBasedRetentionPtrOutput
}

type quantityBasedRetentionPtrType QuantityBasedRetentionArgs

func QuantityBasedRetentionPtr(v *QuantityBasedRetentionArgs) QuantityBasedRetentionPtrInput {
	return (*quantityBasedRetentionPtrType)(v)
}

func (*quantityBasedRetentionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QuantityBasedRetention)(nil)).Elem()
}

func (i *quantityBasedRetentionPtrType) ToQuantityBasedRetentionPtrOutput() QuantityBasedRetentionPtrOutput {
	return i.ToQuantityBasedRetentionPtrOutputWithContext(context.Background())
}

func (i *quantityBasedRetentionPtrType) ToQuantityBasedRetentionPtrOutputWithContext(ctx context.Context) QuantityBasedRetentionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuantityBasedRetentionPtrOutput)
}

func (i *quantityBasedRetentionPtrType) ToOutput(ctx context.Context) pulumix.Output[*QuantityBasedRetention] {
	return pulumix.Output[*QuantityBasedRetention]{
		OutputState: i.ToQuantityBasedRetentionPtrOutputWithContext(ctx).OutputState,
	}
}

// A quantity based policy specifies that a certain number of the most recent successful backups should be retained.
type QuantityBasedRetentionOutput struct{ *pulumi.OutputState }

func (QuantityBasedRetentionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuantityBasedRetention)(nil)).Elem()
}

func (o QuantityBasedRetentionOutput) ToQuantityBasedRetentionOutput() QuantityBasedRetentionOutput {
	return o
}

func (o QuantityBasedRetentionOutput) ToQuantityBasedRetentionOutputWithContext(ctx context.Context) QuantityBasedRetentionOutput {
	return o
}

func (o QuantityBasedRetentionOutput) ToQuantityBasedRetentionPtrOutput() QuantityBasedRetentionPtrOutput {
	return o.ToQuantityBasedRetentionPtrOutputWithContext(context.Background())
}

func (o QuantityBasedRetentionOutput) ToQuantityBasedRetentionPtrOutputWithContext(ctx context.Context) QuantityBasedRetentionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QuantityBasedRetention) *QuantityBasedRetention {
		return &v
	}).(QuantityBasedRetentionPtrOutput)
}

func (o QuantityBasedRetentionOutput) ToOutput(ctx context.Context) pulumix.Output[QuantityBasedRetention] {
	return pulumix.Output[QuantityBasedRetention]{
		OutputState: o.OutputState,
	}
}

// The number of backups to retain.
func (o QuantityBasedRetentionOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QuantityBasedRetention) *int { return v.Count }).(pulumi.IntPtrOutput)
}

type QuantityBasedRetentionPtrOutput struct{ *pulumi.OutputState }

func (QuantityBasedRetentionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QuantityBasedRetention)(nil)).Elem()
}

func (o QuantityBasedRetentionPtrOutput) ToQuantityBasedRetentionPtrOutput() QuantityBasedRetentionPtrOutput {
	return o
}

func (o QuantityBasedRetentionPtrOutput) ToQuantityBasedRetentionPtrOutputWithContext(ctx context.Context) QuantityBasedRetentionPtrOutput {
	return o
}

func (o QuantityBasedRetentionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*QuantityBasedRetention] {
	return pulumix.Output[*QuantityBasedRetention]{
		OutputState: o.OutputState,
	}
}

func (o QuantityBasedRetentionPtrOutput) Elem() QuantityBasedRetentionOutput {
	return o.ApplyT(func(v *QuantityBasedRetention) QuantityBasedRetention {
		if v != nil {
			return *v
		}
		var ret QuantityBasedRetention
		return ret
	}).(QuantityBasedRetentionOutput)
}

// The number of backups to retain.
func (o QuantityBasedRetentionPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QuantityBasedRetention) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// A quantity based policy specifies that a certain number of the most recent successful backups should be retained.
type QuantityBasedRetentionResponse struct {
	// The number of backups to retain.
	Count int `pulumi:"count"`
}

// A quantity based policy specifies that a certain number of the most recent successful backups should be retained.
type QuantityBasedRetentionResponseOutput struct{ *pulumi.OutputState }

func (QuantityBasedRetentionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuantityBasedRetentionResponse)(nil)).Elem()
}

func (o QuantityBasedRetentionResponseOutput) ToQuantityBasedRetentionResponseOutput() QuantityBasedRetentionResponseOutput {
	return o
}

func (o QuantityBasedRetentionResponseOutput) ToQuantityBasedRetentionResponseOutputWithContext(ctx context.Context) QuantityBasedRetentionResponseOutput {
	return o
}

func (o QuantityBasedRetentionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[QuantityBasedRetentionResponse] {
	return pulumix.Output[QuantityBasedRetentionResponse]{
		OutputState: o.OutputState,
	}
}

// The number of backups to retain.
func (o QuantityBasedRetentionResponseOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v QuantityBasedRetentionResponse) int { return v.Count }).(pulumi.IntOutput)
}

// QueryInsights Instance specific configuration.
type QueryInsightsInstanceConfig struct {
	// Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 20 is considered valid.
	QueryPlansPerMinute *int `pulumi:"queryPlansPerMinute"`
	// Query string length. The default value is 1024. Any integer between 256 and 4500 is considered valid.
	QueryStringLength *int `pulumi:"queryStringLength"`
	// Record application tags for an instance. This flag is turned "on" by default.
	RecordApplicationTags *bool `pulumi:"recordApplicationTags"`
	// Record client address for an instance. Client address is PII information. This flag is turned "on" by default.
	RecordClientAddress *bool `pulumi:"recordClientAddress"`
}

// QueryInsightsInstanceConfigInput is an input type that accepts QueryInsightsInstanceConfigArgs and QueryInsightsInstanceConfigOutput values.
// You can construct a concrete instance of `QueryInsightsInstanceConfigInput` via:
//
//	QueryInsightsInstanceConfigArgs{...}
type QueryInsightsInstanceConfigInput interface {
	pulumi.Input

	ToQueryInsightsInstanceConfigOutput() QueryInsightsInstanceConfigOutput
	ToQueryInsightsInstanceConfigOutputWithContext(context.Context) QueryInsightsInstanceConfigOutput
}

// QueryInsights Instance specific configuration.
type QueryInsightsInstanceConfigArgs struct {
	// Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 20 is considered valid.
	QueryPlansPerMinute pulumi.IntPtrInput `pulumi:"queryPlansPerMinute"`
	// Query string length. The default value is 1024. Any integer between 256 and 4500 is considered valid.
	QueryStringLength pulumi.IntPtrInput `pulumi:"queryStringLength"`
	// Record application tags for an instance. This flag is turned "on" by default.
	RecordApplicationTags pulumi.BoolPtrInput `pulumi:"recordApplicationTags"`
	// Record client address for an instance. Client address is PII information. This flag is turned "on" by default.
	RecordClientAddress pulumi.BoolPtrInput `pulumi:"recordClientAddress"`
}

func (QueryInsightsInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryInsightsInstanceConfig)(nil)).Elem()
}

func (i QueryInsightsInstanceConfigArgs) ToQueryInsightsInstanceConfigOutput() QueryInsightsInstanceConfigOutput {
	return i.ToQueryInsightsInstanceConfigOutputWithContext(context.Background())
}

func (i QueryInsightsInstanceConfigArgs) ToQueryInsightsInstanceConfigOutputWithContext(ctx context.Context) QueryInsightsInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryInsightsInstanceConfigOutput)
}

func (i QueryInsightsInstanceConfigArgs) ToOutput(ctx context.Context) pulumix.Output[QueryInsightsInstanceConfig] {
	return pulumix.Output[QueryInsightsInstanceConfig]{
		OutputState: i.ToQueryInsightsInstanceConfigOutputWithContext(ctx).OutputState,
	}
}

func (i QueryInsightsInstanceConfigArgs) ToQueryInsightsInstanceConfigPtrOutput() QueryInsightsInstanceConfigPtrOutput {
	return i.ToQueryInsightsInstanceConfigPtrOutputWithContext(context.Background())
}

func (i QueryInsightsInstanceConfigArgs) ToQueryInsightsInstanceConfigPtrOutputWithContext(ctx context.Context) QueryInsightsInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryInsightsInstanceConfigOutput).ToQueryInsightsInstanceConfigPtrOutputWithContext(ctx)
}

// QueryInsightsInstanceConfigPtrInput is an input type that accepts QueryInsightsInstanceConfigArgs, QueryInsightsInstanceConfigPtr and QueryInsightsInstanceConfigPtrOutput values.
// You can construct a concrete instance of `QueryInsightsInstanceConfigPtrInput` via:
//
//	        QueryInsightsInstanceConfigArgs{...}
//
//	or:
//
//	        nil
type QueryInsightsInstanceConfigPtrInput interface {
	pulumi.Input

	ToQueryInsightsInstanceConfigPtrOutput() QueryInsightsInstanceConfigPtrOutput
	ToQueryInsightsInstanceConfigPtrOutputWithContext(context.Context) QueryInsightsInstanceConfigPtrOutput
}

type queryInsightsInstanceConfigPtrType QueryInsightsInstanceConfigArgs

func QueryInsightsInstanceConfigPtr(v *QueryInsightsInstanceConfigArgs) QueryInsightsInstanceConfigPtrInput {
	return (*queryInsightsInstanceConfigPtrType)(v)
}

func (*queryInsightsInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryInsightsInstanceConfig)(nil)).Elem()
}

func (i *queryInsightsInstanceConfigPtrType) ToQueryInsightsInstanceConfigPtrOutput() QueryInsightsInstanceConfigPtrOutput {
	return i.ToQueryInsightsInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *queryInsightsInstanceConfigPtrType) ToQueryInsightsInstanceConfigPtrOutputWithContext(ctx context.Context) QueryInsightsInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryInsightsInstanceConfigPtrOutput)
}

func (i *queryInsightsInstanceConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*QueryInsightsInstanceConfig] {
	return pulumix.Output[*QueryInsightsInstanceConfig]{
		OutputState: i.ToQueryInsightsInstanceConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// QueryInsights Instance specific configuration.
type QueryInsightsInstanceConfigOutput struct{ *pulumi.OutputState }

func (QueryInsightsInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryInsightsInstanceConfig)(nil)).Elem()
}

func (o QueryInsightsInstanceConfigOutput) ToQueryInsightsInstanceConfigOutput() QueryInsightsInstanceConfigOutput {
	return o
}

func (o QueryInsightsInstanceConfigOutput) ToQueryInsightsInstanceConfigOutputWithContext(ctx context.Context) QueryInsightsInstanceConfigOutput {
	return o
}

func (o QueryInsightsInstanceConfigOutput) ToQueryInsightsInstanceConfigPtrOutput() QueryInsightsInstanceConfigPtrOutput {
	return o.ToQueryInsightsInstanceConfigPtrOutputWithContext(context.Background())
}

func (o QueryInsightsInstanceConfigOutput) ToQueryInsightsInstanceConfigPtrOutputWithContext(ctx context.Context) QueryInsightsInstanceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueryInsightsInstanceConfig) *QueryInsightsInstanceConfig {
		return &v
	}).(QueryInsightsInstanceConfigPtrOutput)
}

func (o QueryInsightsInstanceConfigOutput) ToOutput(ctx context.Context) pulumix.Output[QueryInsightsInstanceConfig] {
	return pulumix.Output[QueryInsightsInstanceConfig]{
		OutputState: o.OutputState,
	}
}

// Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 20 is considered valid.
func (o QueryInsightsInstanceConfigOutput) QueryPlansPerMinute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueryInsightsInstanceConfig) *int { return v.QueryPlansPerMinute }).(pulumi.IntPtrOutput)
}

// Query string length. The default value is 1024. Any integer between 256 and 4500 is considered valid.
func (o QueryInsightsInstanceConfigOutput) QueryStringLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueryInsightsInstanceConfig) *int { return v.QueryStringLength }).(pulumi.IntPtrOutput)
}

// Record application tags for an instance. This flag is turned "on" by default.
func (o QueryInsightsInstanceConfigOutput) RecordApplicationTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueryInsightsInstanceConfig) *bool { return v.RecordApplicationTags }).(pulumi.BoolPtrOutput)
}

// Record client address for an instance. Client address is PII information. This flag is turned "on" by default.
func (o QueryInsightsInstanceConfigOutput) RecordClientAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueryInsightsInstanceConfig) *bool { return v.RecordClientAddress }).(pulumi.BoolPtrOutput)
}

type QueryInsightsInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (QueryInsightsInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryInsightsInstanceConfig)(nil)).Elem()
}

func (o QueryInsightsInstanceConfigPtrOutput) ToQueryInsightsInstanceConfigPtrOutput() QueryInsightsInstanceConfigPtrOutput {
	return o
}

func (o QueryInsightsInstanceConfigPtrOutput) ToQueryInsightsInstanceConfigPtrOutputWithContext(ctx context.Context) QueryInsightsInstanceConfigPtrOutput {
	return o
}

func (o QueryInsightsInstanceConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*QueryInsightsInstanceConfig] {
	return pulumix.Output[*QueryInsightsInstanceConfig]{
		OutputState: o.OutputState,
	}
}

func (o QueryInsightsInstanceConfigPtrOutput) Elem() QueryInsightsInstanceConfigOutput {
	return o.ApplyT(func(v *QueryInsightsInstanceConfig) QueryInsightsInstanceConfig {
		if v != nil {
			return *v
		}
		var ret QueryInsightsInstanceConfig
		return ret
	}).(QueryInsightsInstanceConfigOutput)
}

// Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 20 is considered valid.
func (o QueryInsightsInstanceConfigPtrOutput) QueryPlansPerMinute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueryInsightsInstanceConfig) *int {
		if v == nil {
			return nil
		}
		return v.QueryPlansPerMinute
	}).(pulumi.IntPtrOutput)
}

// Query string length. The default value is 1024. Any integer between 256 and 4500 is considered valid.
func (o QueryInsightsInstanceConfigPtrOutput) QueryStringLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueryInsightsInstanceConfig) *int {
		if v == nil {
			return nil
		}
		return v.QueryStringLength
	}).(pulumi.IntPtrOutput)
}

// Record application tags for an instance. This flag is turned "on" by default.
func (o QueryInsightsInstanceConfigPtrOutput) RecordApplicationTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueryInsightsInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.RecordApplicationTags
	}).(pulumi.BoolPtrOutput)
}

// Record client address for an instance. Client address is PII information. This flag is turned "on" by default.
func (o QueryInsightsInstanceConfigPtrOutput) RecordClientAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueryInsightsInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.RecordClientAddress
	}).(pulumi.BoolPtrOutput)
}

// QueryInsights Instance specific configuration.
type QueryInsightsInstanceConfigResponse struct {
	// Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 20 is considered valid.
	QueryPlansPerMinute int `pulumi:"queryPlansPerMinute"`
	// Query string length. The default value is 1024. Any integer between 256 and 4500 is considered valid.
	QueryStringLength int `pulumi:"queryStringLength"`
	// Record application tags for an instance. This flag is turned "on" by default.
	RecordApplicationTags bool `pulumi:"recordApplicationTags"`
	// Record client address for an instance. Client address is PII information. This flag is turned "on" by default.
	RecordClientAddress bool `pulumi:"recordClientAddress"`
}

// QueryInsights Instance specific configuration.
type QueryInsightsInstanceConfigResponseOutput struct{ *pulumi.OutputState }

func (QueryInsightsInstanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryInsightsInstanceConfigResponse)(nil)).Elem()
}

func (o QueryInsightsInstanceConfigResponseOutput) ToQueryInsightsInstanceConfigResponseOutput() QueryInsightsInstanceConfigResponseOutput {
	return o
}

func (o QueryInsightsInstanceConfigResponseOutput) ToQueryInsightsInstanceConfigResponseOutputWithContext(ctx context.Context) QueryInsightsInstanceConfigResponseOutput {
	return o
}

func (o QueryInsightsInstanceConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[QueryInsightsInstanceConfigResponse] {
	return pulumix.Output[QueryInsightsInstanceConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Number of query execution plans captured by Insights per minute for all queries combined. The default value is 5. Any integer between 0 and 20 is considered valid.
func (o QueryInsightsInstanceConfigResponseOutput) QueryPlansPerMinute() pulumi.IntOutput {
	return o.ApplyT(func(v QueryInsightsInstanceConfigResponse) int { return v.QueryPlansPerMinute }).(pulumi.IntOutput)
}

// Query string length. The default value is 1024. Any integer between 256 and 4500 is considered valid.
func (o QueryInsightsInstanceConfigResponseOutput) QueryStringLength() pulumi.IntOutput {
	return o.ApplyT(func(v QueryInsightsInstanceConfigResponse) int { return v.QueryStringLength }).(pulumi.IntOutput)
}

// Record application tags for an instance. This flag is turned "on" by default.
func (o QueryInsightsInstanceConfigResponseOutput) RecordApplicationTags() pulumi.BoolOutput {
	return o.ApplyT(func(v QueryInsightsInstanceConfigResponse) bool { return v.RecordApplicationTags }).(pulumi.BoolOutput)
}

// Record client address for an instance. Client address is PII information. This flag is turned "on" by default.
func (o QueryInsightsInstanceConfigResponseOutput) RecordClientAddress() pulumi.BoolOutput {
	return o.ApplyT(func(v QueryInsightsInstanceConfigResponse) bool { return v.RecordClientAddress }).(pulumi.BoolOutput)
}

// Configuration for a read pool instance.
type ReadPoolConfig struct {
	// Read capacity, i.e. number of nodes in a read pool instance.
	NodeCount *int `pulumi:"nodeCount"`
}

// ReadPoolConfigInput is an input type that accepts ReadPoolConfigArgs and ReadPoolConfigOutput values.
// You can construct a concrete instance of `ReadPoolConfigInput` via:
//
//	ReadPoolConfigArgs{...}
type ReadPoolConfigInput interface {
	pulumi.Input

	ToReadPoolConfigOutput() ReadPoolConfigOutput
	ToReadPoolConfigOutputWithContext(context.Context) ReadPoolConfigOutput
}

// Configuration for a read pool instance.
type ReadPoolConfigArgs struct {
	// Read capacity, i.e. number of nodes in a read pool instance.
	NodeCount pulumi.IntPtrInput `pulumi:"nodeCount"`
}

func (ReadPoolConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadPoolConfig)(nil)).Elem()
}

func (i ReadPoolConfigArgs) ToReadPoolConfigOutput() ReadPoolConfigOutput {
	return i.ToReadPoolConfigOutputWithContext(context.Background())
}

func (i ReadPoolConfigArgs) ToReadPoolConfigOutputWithContext(ctx context.Context) ReadPoolConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadPoolConfigOutput)
}

func (i ReadPoolConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ReadPoolConfig] {
	return pulumix.Output[ReadPoolConfig]{
		OutputState: i.ToReadPoolConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ReadPoolConfigArgs) ToReadPoolConfigPtrOutput() ReadPoolConfigPtrOutput {
	return i.ToReadPoolConfigPtrOutputWithContext(context.Background())
}

func (i ReadPoolConfigArgs) ToReadPoolConfigPtrOutputWithContext(ctx context.Context) ReadPoolConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadPoolConfigOutput).ToReadPoolConfigPtrOutputWithContext(ctx)
}

// ReadPoolConfigPtrInput is an input type that accepts ReadPoolConfigArgs, ReadPoolConfigPtr and ReadPoolConfigPtrOutput values.
// You can construct a concrete instance of `ReadPoolConfigPtrInput` via:
//
//	        ReadPoolConfigArgs{...}
//
//	or:
//
//	        nil
type ReadPoolConfigPtrInput interface {
	pulumi.Input

	ToReadPoolConfigPtrOutput() ReadPoolConfigPtrOutput
	ToReadPoolConfigPtrOutputWithContext(context.Context) ReadPoolConfigPtrOutput
}

type readPoolConfigPtrType ReadPoolConfigArgs

func ReadPoolConfigPtr(v *ReadPoolConfigArgs) ReadPoolConfigPtrInput {
	return (*readPoolConfigPtrType)(v)
}

func (*readPoolConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadPoolConfig)(nil)).Elem()
}

func (i *readPoolConfigPtrType) ToReadPoolConfigPtrOutput() ReadPoolConfigPtrOutput {
	return i.ToReadPoolConfigPtrOutputWithContext(context.Background())
}

func (i *readPoolConfigPtrType) ToReadPoolConfigPtrOutputWithContext(ctx context.Context) ReadPoolConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadPoolConfigPtrOutput)
}

func (i *readPoolConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ReadPoolConfig] {
	return pulumix.Output[*ReadPoolConfig]{
		OutputState: i.ToReadPoolConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration for a read pool instance.
type ReadPoolConfigOutput struct{ *pulumi.OutputState }

func (ReadPoolConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadPoolConfig)(nil)).Elem()
}

func (o ReadPoolConfigOutput) ToReadPoolConfigOutput() ReadPoolConfigOutput {
	return o
}

func (o ReadPoolConfigOutput) ToReadPoolConfigOutputWithContext(ctx context.Context) ReadPoolConfigOutput {
	return o
}

func (o ReadPoolConfigOutput) ToReadPoolConfigPtrOutput() ReadPoolConfigPtrOutput {
	return o.ToReadPoolConfigPtrOutputWithContext(context.Background())
}

func (o ReadPoolConfigOutput) ToReadPoolConfigPtrOutputWithContext(ctx context.Context) ReadPoolConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReadPoolConfig) *ReadPoolConfig {
		return &v
	}).(ReadPoolConfigPtrOutput)
}

func (o ReadPoolConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ReadPoolConfig] {
	return pulumix.Output[ReadPoolConfig]{
		OutputState: o.OutputState,
	}
}

// Read capacity, i.e. number of nodes in a read pool instance.
func (o ReadPoolConfigOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReadPoolConfig) *int { return v.NodeCount }).(pulumi.IntPtrOutput)
}

type ReadPoolConfigPtrOutput struct{ *pulumi.OutputState }

func (ReadPoolConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReadPoolConfig)(nil)).Elem()
}

func (o ReadPoolConfigPtrOutput) ToReadPoolConfigPtrOutput() ReadPoolConfigPtrOutput {
	return o
}

func (o ReadPoolConfigPtrOutput) ToReadPoolConfigPtrOutputWithContext(ctx context.Context) ReadPoolConfigPtrOutput {
	return o
}

func (o ReadPoolConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ReadPoolConfig] {
	return pulumix.Output[*ReadPoolConfig]{
		OutputState: o.OutputState,
	}
}

func (o ReadPoolConfigPtrOutput) Elem() ReadPoolConfigOutput {
	return o.ApplyT(func(v *ReadPoolConfig) ReadPoolConfig {
		if v != nil {
			return *v
		}
		var ret ReadPoolConfig
		return ret
	}).(ReadPoolConfigOutput)
}

// Read capacity, i.e. number of nodes in a read pool instance.
func (o ReadPoolConfigPtrOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReadPoolConfig) *int {
		if v == nil {
			return nil
		}
		return v.NodeCount
	}).(pulumi.IntPtrOutput)
}

// Configuration for a read pool instance.
type ReadPoolConfigResponse struct {
	// Read capacity, i.e. number of nodes in a read pool instance.
	NodeCount int `pulumi:"nodeCount"`
}

// Configuration for a read pool instance.
type ReadPoolConfigResponseOutput struct{ *pulumi.OutputState }

func (ReadPoolConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadPoolConfigResponse)(nil)).Elem()
}

func (o ReadPoolConfigResponseOutput) ToReadPoolConfigResponseOutput() ReadPoolConfigResponseOutput {
	return o
}

func (o ReadPoolConfigResponseOutput) ToReadPoolConfigResponseOutputWithContext(ctx context.Context) ReadPoolConfigResponseOutput {
	return o
}

func (o ReadPoolConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ReadPoolConfigResponse] {
	return pulumix.Output[ReadPoolConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Read capacity, i.e. number of nodes in a read pool instance.
func (o ReadPoolConfigResponseOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v ReadPoolConfigResponse) int { return v.NodeCount }).(pulumi.IntOutput)
}

// Configuration information for the secondary cluster. This should be set if and only if the cluster is of type SECONDARY.
type SecondaryConfig struct {
	// The name of the primary cluster name with the format: * projects/{project}/locations/{region}/clusters/{cluster_id}
	PrimaryClusterName *string `pulumi:"primaryClusterName"`
}

// SecondaryConfigInput is an input type that accepts SecondaryConfigArgs and SecondaryConfigOutput values.
// You can construct a concrete instance of `SecondaryConfigInput` via:
//
//	SecondaryConfigArgs{...}
type SecondaryConfigInput interface {
	pulumi.Input

	ToSecondaryConfigOutput() SecondaryConfigOutput
	ToSecondaryConfigOutputWithContext(context.Context) SecondaryConfigOutput
}

// Configuration information for the secondary cluster. This should be set if and only if the cluster is of type SECONDARY.
type SecondaryConfigArgs struct {
	// The name of the primary cluster name with the format: * projects/{project}/locations/{region}/clusters/{cluster_id}
	PrimaryClusterName pulumi.StringPtrInput `pulumi:"primaryClusterName"`
}

func (SecondaryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecondaryConfig)(nil)).Elem()
}

func (i SecondaryConfigArgs) ToSecondaryConfigOutput() SecondaryConfigOutput {
	return i.ToSecondaryConfigOutputWithContext(context.Background())
}

func (i SecondaryConfigArgs) ToSecondaryConfigOutputWithContext(ctx context.Context) SecondaryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecondaryConfigOutput)
}

func (i SecondaryConfigArgs) ToOutput(ctx context.Context) pulumix.Output[SecondaryConfig] {
	return pulumix.Output[SecondaryConfig]{
		OutputState: i.ToSecondaryConfigOutputWithContext(ctx).OutputState,
	}
}

func (i SecondaryConfigArgs) ToSecondaryConfigPtrOutput() SecondaryConfigPtrOutput {
	return i.ToSecondaryConfigPtrOutputWithContext(context.Background())
}

func (i SecondaryConfigArgs) ToSecondaryConfigPtrOutputWithContext(ctx context.Context) SecondaryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecondaryConfigOutput).ToSecondaryConfigPtrOutputWithContext(ctx)
}

// SecondaryConfigPtrInput is an input type that accepts SecondaryConfigArgs, SecondaryConfigPtr and SecondaryConfigPtrOutput values.
// You can construct a concrete instance of `SecondaryConfigPtrInput` via:
//
//	        SecondaryConfigArgs{...}
//
//	or:
//
//	        nil
type SecondaryConfigPtrInput interface {
	pulumi.Input

	ToSecondaryConfigPtrOutput() SecondaryConfigPtrOutput
	ToSecondaryConfigPtrOutputWithContext(context.Context) SecondaryConfigPtrOutput
}

type secondaryConfigPtrType SecondaryConfigArgs

func SecondaryConfigPtr(v *SecondaryConfigArgs) SecondaryConfigPtrInput {
	return (*secondaryConfigPtrType)(v)
}

func (*secondaryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecondaryConfig)(nil)).Elem()
}

func (i *secondaryConfigPtrType) ToSecondaryConfigPtrOutput() SecondaryConfigPtrOutput {
	return i.ToSecondaryConfigPtrOutputWithContext(context.Background())
}

func (i *secondaryConfigPtrType) ToSecondaryConfigPtrOutputWithContext(ctx context.Context) SecondaryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecondaryConfigPtrOutput)
}

func (i *secondaryConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*SecondaryConfig] {
	return pulumix.Output[*SecondaryConfig]{
		OutputState: i.ToSecondaryConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration information for the secondary cluster. This should be set if and only if the cluster is of type SECONDARY.
type SecondaryConfigOutput struct{ *pulumi.OutputState }

func (SecondaryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecondaryConfig)(nil)).Elem()
}

func (o SecondaryConfigOutput) ToSecondaryConfigOutput() SecondaryConfigOutput {
	return o
}

func (o SecondaryConfigOutput) ToSecondaryConfigOutputWithContext(ctx context.Context) SecondaryConfigOutput {
	return o
}

func (o SecondaryConfigOutput) ToSecondaryConfigPtrOutput() SecondaryConfigPtrOutput {
	return o.ToSecondaryConfigPtrOutputWithContext(context.Background())
}

func (o SecondaryConfigOutput) ToSecondaryConfigPtrOutputWithContext(ctx context.Context) SecondaryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecondaryConfig) *SecondaryConfig {
		return &v
	}).(SecondaryConfigPtrOutput)
}

func (o SecondaryConfigOutput) ToOutput(ctx context.Context) pulumix.Output[SecondaryConfig] {
	return pulumix.Output[SecondaryConfig]{
		OutputState: o.OutputState,
	}
}

// The name of the primary cluster name with the format: * projects/{project}/locations/{region}/clusters/{cluster_id}
func (o SecondaryConfigOutput) PrimaryClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecondaryConfig) *string { return v.PrimaryClusterName }).(pulumi.StringPtrOutput)
}

type SecondaryConfigPtrOutput struct{ *pulumi.OutputState }

func (SecondaryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecondaryConfig)(nil)).Elem()
}

func (o SecondaryConfigPtrOutput) ToSecondaryConfigPtrOutput() SecondaryConfigPtrOutput {
	return o
}

func (o SecondaryConfigPtrOutput) ToSecondaryConfigPtrOutputWithContext(ctx context.Context) SecondaryConfigPtrOutput {
	return o
}

func (o SecondaryConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SecondaryConfig] {
	return pulumix.Output[*SecondaryConfig]{
		OutputState: o.OutputState,
	}
}

func (o SecondaryConfigPtrOutput) Elem() SecondaryConfigOutput {
	return o.ApplyT(func(v *SecondaryConfig) SecondaryConfig {
		if v != nil {
			return *v
		}
		var ret SecondaryConfig
		return ret
	}).(SecondaryConfigOutput)
}

// The name of the primary cluster name with the format: * projects/{project}/locations/{region}/clusters/{cluster_id}
func (o SecondaryConfigPtrOutput) PrimaryClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecondaryConfig) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryClusterName
	}).(pulumi.StringPtrOutput)
}

// Configuration information for the secondary cluster. This should be set if and only if the cluster is of type SECONDARY.
type SecondaryConfigResponse struct {
	// The name of the primary cluster name with the format: * projects/{project}/locations/{region}/clusters/{cluster_id}
	PrimaryClusterName string `pulumi:"primaryClusterName"`
}

// Configuration information for the secondary cluster. This should be set if and only if the cluster is of type SECONDARY.
type SecondaryConfigResponseOutput struct{ *pulumi.OutputState }

func (SecondaryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecondaryConfigResponse)(nil)).Elem()
}

func (o SecondaryConfigResponseOutput) ToSecondaryConfigResponseOutput() SecondaryConfigResponseOutput {
	return o
}

func (o SecondaryConfigResponseOutput) ToSecondaryConfigResponseOutputWithContext(ctx context.Context) SecondaryConfigResponseOutput {
	return o
}

func (o SecondaryConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SecondaryConfigResponse] {
	return pulumix.Output[SecondaryConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the primary cluster name with the format: * projects/{project}/locations/{region}/clusters/{cluster_id}
func (o SecondaryConfigResponseOutput) PrimaryClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v SecondaryConfigResponse) string { return v.PrimaryClusterName }).(pulumi.StringOutput)
}

// SSL configuration.
type SslConfig struct {
	// Optional. Certificate Authority (CA) source. Only CA_SOURCE_MANAGED is supported currently, and is the default value.
	CaSource *SslConfigCaSource `pulumi:"caSource"`
	// Optional. SSL mode. Specifies client-server SSL/TLS connection behavior.
	SslMode *SslConfigSslMode `pulumi:"sslMode"`
}

// SslConfigInput is an input type that accepts SslConfigArgs and SslConfigOutput values.
// You can construct a concrete instance of `SslConfigInput` via:
//
//	SslConfigArgs{...}
type SslConfigInput interface {
	pulumi.Input

	ToSslConfigOutput() SslConfigOutput
	ToSslConfigOutputWithContext(context.Context) SslConfigOutput
}

// SSL configuration.
type SslConfigArgs struct {
	// Optional. Certificate Authority (CA) source. Only CA_SOURCE_MANAGED is supported currently, and is the default value.
	CaSource SslConfigCaSourcePtrInput `pulumi:"caSource"`
	// Optional. SSL mode. Specifies client-server SSL/TLS connection behavior.
	SslMode SslConfigSslModePtrInput `pulumi:"sslMode"`
}

func (SslConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslConfig)(nil)).Elem()
}

func (i SslConfigArgs) ToSslConfigOutput() SslConfigOutput {
	return i.ToSslConfigOutputWithContext(context.Background())
}

func (i SslConfigArgs) ToSslConfigOutputWithContext(ctx context.Context) SslConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslConfigOutput)
}

func (i SslConfigArgs) ToOutput(ctx context.Context) pulumix.Output[SslConfig] {
	return pulumix.Output[SslConfig]{
		OutputState: i.ToSslConfigOutputWithContext(ctx).OutputState,
	}
}

func (i SslConfigArgs) ToSslConfigPtrOutput() SslConfigPtrOutput {
	return i.ToSslConfigPtrOutputWithContext(context.Background())
}

func (i SslConfigArgs) ToSslConfigPtrOutputWithContext(ctx context.Context) SslConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslConfigOutput).ToSslConfigPtrOutputWithContext(ctx)
}

// SslConfigPtrInput is an input type that accepts SslConfigArgs, SslConfigPtr and SslConfigPtrOutput values.
// You can construct a concrete instance of `SslConfigPtrInput` via:
//
//	        SslConfigArgs{...}
//
//	or:
//
//	        nil
type SslConfigPtrInput interface {
	pulumi.Input

	ToSslConfigPtrOutput() SslConfigPtrOutput
	ToSslConfigPtrOutputWithContext(context.Context) SslConfigPtrOutput
}

type sslConfigPtrType SslConfigArgs

func SslConfigPtr(v *SslConfigArgs) SslConfigPtrInput {
	return (*sslConfigPtrType)(v)
}

func (*sslConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SslConfig)(nil)).Elem()
}

func (i *sslConfigPtrType) ToSslConfigPtrOutput() SslConfigPtrOutput {
	return i.ToSslConfigPtrOutputWithContext(context.Background())
}

func (i *sslConfigPtrType) ToSslConfigPtrOutputWithContext(ctx context.Context) SslConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslConfigPtrOutput)
}

func (i *sslConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*SslConfig] {
	return pulumix.Output[*SslConfig]{
		OutputState: i.ToSslConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// SSL configuration.
type SslConfigOutput struct{ *pulumi.OutputState }

func (SslConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslConfig)(nil)).Elem()
}

func (o SslConfigOutput) ToSslConfigOutput() SslConfigOutput {
	return o
}

func (o SslConfigOutput) ToSslConfigOutputWithContext(ctx context.Context) SslConfigOutput {
	return o
}

func (o SslConfigOutput) ToSslConfigPtrOutput() SslConfigPtrOutput {
	return o.ToSslConfigPtrOutputWithContext(context.Background())
}

func (o SslConfigOutput) ToSslConfigPtrOutputWithContext(ctx context.Context) SslConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SslConfig) *SslConfig {
		return &v
	}).(SslConfigPtrOutput)
}

func (o SslConfigOutput) ToOutput(ctx context.Context) pulumix.Output[SslConfig] {
	return pulumix.Output[SslConfig]{
		OutputState: o.OutputState,
	}
}

// Optional. Certificate Authority (CA) source. Only CA_SOURCE_MANAGED is supported currently, and is the default value.
func (o SslConfigOutput) CaSource() SslConfigCaSourcePtrOutput {
	return o.ApplyT(func(v SslConfig) *SslConfigCaSource { return v.CaSource }).(SslConfigCaSourcePtrOutput)
}

// Optional. SSL mode. Specifies client-server SSL/TLS connection behavior.
func (o SslConfigOutput) SslMode() SslConfigSslModePtrOutput {
	return o.ApplyT(func(v SslConfig) *SslConfigSslMode { return v.SslMode }).(SslConfigSslModePtrOutput)
}

type SslConfigPtrOutput struct{ *pulumi.OutputState }

func (SslConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslConfig)(nil)).Elem()
}

func (o SslConfigPtrOutput) ToSslConfigPtrOutput() SslConfigPtrOutput {
	return o
}

func (o SslConfigPtrOutput) ToSslConfigPtrOutputWithContext(ctx context.Context) SslConfigPtrOutput {
	return o
}

func (o SslConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SslConfig] {
	return pulumix.Output[*SslConfig]{
		OutputState: o.OutputState,
	}
}

func (o SslConfigPtrOutput) Elem() SslConfigOutput {
	return o.ApplyT(func(v *SslConfig) SslConfig {
		if v != nil {
			return *v
		}
		var ret SslConfig
		return ret
	}).(SslConfigOutput)
}

// Optional. Certificate Authority (CA) source. Only CA_SOURCE_MANAGED is supported currently, and is the default value.
func (o SslConfigPtrOutput) CaSource() SslConfigCaSourcePtrOutput {
	return o.ApplyT(func(v *SslConfig) *SslConfigCaSource {
		if v == nil {
			return nil
		}
		return v.CaSource
	}).(SslConfigCaSourcePtrOutput)
}

// Optional. SSL mode. Specifies client-server SSL/TLS connection behavior.
func (o SslConfigPtrOutput) SslMode() SslConfigSslModePtrOutput {
	return o.ApplyT(func(v *SslConfig) *SslConfigSslMode {
		if v == nil {
			return nil
		}
		return v.SslMode
	}).(SslConfigSslModePtrOutput)
}

// SSL configuration.
type SslConfigResponse struct {
	// Optional. Certificate Authority (CA) source. Only CA_SOURCE_MANAGED is supported currently, and is the default value.
	CaSource string `pulumi:"caSource"`
	// Optional. SSL mode. Specifies client-server SSL/TLS connection behavior.
	SslMode string `pulumi:"sslMode"`
}

// SSL configuration.
type SslConfigResponseOutput struct{ *pulumi.OutputState }

func (SslConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslConfigResponse)(nil)).Elem()
}

func (o SslConfigResponseOutput) ToSslConfigResponseOutput() SslConfigResponseOutput {
	return o
}

func (o SslConfigResponseOutput) ToSslConfigResponseOutputWithContext(ctx context.Context) SslConfigResponseOutput {
	return o
}

func (o SslConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SslConfigResponse] {
	return pulumix.Output[SslConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Certificate Authority (CA) source. Only CA_SOURCE_MANAGED is supported currently, and is the default value.
func (o SslConfigResponseOutput) CaSource() pulumi.StringOutput {
	return o.ApplyT(func(v SslConfigResponse) string { return v.CaSource }).(pulumi.StringOutput)
}

// Optional. SSL mode. Specifies client-server SSL/TLS connection behavior.
func (o SslConfigResponseOutput) SslMode() pulumi.StringOutput {
	return o.ApplyT(func(v SslConfigResponse) string { return v.SslMode }).(pulumi.StringOutput)
}

// A time based retention policy specifies that all backups within a certain time period should be retained.
type TimeBasedRetention struct {
	// The retention period.
	RetentionPeriod *string `pulumi:"retentionPeriod"`
}

// TimeBasedRetentionInput is an input type that accepts TimeBasedRetentionArgs and TimeBasedRetentionOutput values.
// You can construct a concrete instance of `TimeBasedRetentionInput` via:
//
//	TimeBasedRetentionArgs{...}
type TimeBasedRetentionInput interface {
	pulumi.Input

	ToTimeBasedRetentionOutput() TimeBasedRetentionOutput
	ToTimeBasedRetentionOutputWithContext(context.Context) TimeBasedRetentionOutput
}

// A time based retention policy specifies that all backups within a certain time period should be retained.
type TimeBasedRetentionArgs struct {
	// The retention period.
	RetentionPeriod pulumi.StringPtrInput `pulumi:"retentionPeriod"`
}

func (TimeBasedRetentionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeBasedRetention)(nil)).Elem()
}

func (i TimeBasedRetentionArgs) ToTimeBasedRetentionOutput() TimeBasedRetentionOutput {
	return i.ToTimeBasedRetentionOutputWithContext(context.Background())
}

func (i TimeBasedRetentionArgs) ToTimeBasedRetentionOutputWithContext(ctx context.Context) TimeBasedRetentionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeBasedRetentionOutput)
}

func (i TimeBasedRetentionArgs) ToOutput(ctx context.Context) pulumix.Output[TimeBasedRetention] {
	return pulumix.Output[TimeBasedRetention]{
		OutputState: i.ToTimeBasedRetentionOutputWithContext(ctx).OutputState,
	}
}

func (i TimeBasedRetentionArgs) ToTimeBasedRetentionPtrOutput() TimeBasedRetentionPtrOutput {
	return i.ToTimeBasedRetentionPtrOutputWithContext(context.Background())
}

func (i TimeBasedRetentionArgs) ToTimeBasedRetentionPtrOutputWithContext(ctx context.Context) TimeBasedRetentionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeBasedRetentionOutput).ToTimeBasedRetentionPtrOutputWithContext(ctx)
}

// TimeBasedRetentionPtrInput is an input type that accepts TimeBasedRetentionArgs, TimeBasedRetentionPtr and TimeBasedRetentionPtrOutput values.
// You can construct a concrete instance of `TimeBasedRetentionPtrInput` via:
//
//	        TimeBasedRetentionArgs{...}
//
//	or:
//
//	        nil
type TimeBasedRetentionPtrInput interface {
	pulumi.Input

	ToTimeBasedRetentionPtrOutput() TimeBasedRetentionPtrOutput
	ToTimeBasedRetentionPtrOutputWithContext(context.Context) TimeBasedRetentionPtrOutput
}

type timeBasedRetentionPtrType TimeBasedRetentionArgs

func TimeBasedRetentionPtr(v *TimeBasedRetentionArgs) TimeBasedRetentionPtrInput {
	return (*timeBasedRetentionPtrType)(v)
}

func (*timeBasedRetentionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeBasedRetention)(nil)).Elem()
}

func (i *timeBasedRetentionPtrType) ToTimeBasedRetentionPtrOutput() TimeBasedRetentionPtrOutput {
	return i.ToTimeBasedRetentionPtrOutputWithContext(context.Background())
}

func (i *timeBasedRetentionPtrType) ToTimeBasedRetentionPtrOutputWithContext(ctx context.Context) TimeBasedRetentionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeBasedRetentionPtrOutput)
}

func (i *timeBasedRetentionPtrType) ToOutput(ctx context.Context) pulumix.Output[*TimeBasedRetention] {
	return pulumix.Output[*TimeBasedRetention]{
		OutputState: i.ToTimeBasedRetentionPtrOutputWithContext(ctx).OutputState,
	}
}

// A time based retention policy specifies that all backups within a certain time period should be retained.
type TimeBasedRetentionOutput struct{ *pulumi.OutputState }

func (TimeBasedRetentionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeBasedRetention)(nil)).Elem()
}

func (o TimeBasedRetentionOutput) ToTimeBasedRetentionOutput() TimeBasedRetentionOutput {
	return o
}

func (o TimeBasedRetentionOutput) ToTimeBasedRetentionOutputWithContext(ctx context.Context) TimeBasedRetentionOutput {
	return o
}

func (o TimeBasedRetentionOutput) ToTimeBasedRetentionPtrOutput() TimeBasedRetentionPtrOutput {
	return o.ToTimeBasedRetentionPtrOutputWithContext(context.Background())
}

func (o TimeBasedRetentionOutput) ToTimeBasedRetentionPtrOutputWithContext(ctx context.Context) TimeBasedRetentionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TimeBasedRetention) *TimeBasedRetention {
		return &v
	}).(TimeBasedRetentionPtrOutput)
}

func (o TimeBasedRetentionOutput) ToOutput(ctx context.Context) pulumix.Output[TimeBasedRetention] {
	return pulumix.Output[TimeBasedRetention]{
		OutputState: o.OutputState,
	}
}

// The retention period.
func (o TimeBasedRetentionOutput) RetentionPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeBasedRetention) *string { return v.RetentionPeriod }).(pulumi.StringPtrOutput)
}

type TimeBasedRetentionPtrOutput struct{ *pulumi.OutputState }

func (TimeBasedRetentionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeBasedRetention)(nil)).Elem()
}

func (o TimeBasedRetentionPtrOutput) ToTimeBasedRetentionPtrOutput() TimeBasedRetentionPtrOutput {
	return o
}

func (o TimeBasedRetentionPtrOutput) ToTimeBasedRetentionPtrOutputWithContext(ctx context.Context) TimeBasedRetentionPtrOutput {
	return o
}

func (o TimeBasedRetentionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TimeBasedRetention] {
	return pulumix.Output[*TimeBasedRetention]{
		OutputState: o.OutputState,
	}
}

func (o TimeBasedRetentionPtrOutput) Elem() TimeBasedRetentionOutput {
	return o.ApplyT(func(v *TimeBasedRetention) TimeBasedRetention {
		if v != nil {
			return *v
		}
		var ret TimeBasedRetention
		return ret
	}).(TimeBasedRetentionOutput)
}

// The retention period.
func (o TimeBasedRetentionPtrOutput) RetentionPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeBasedRetention) *string {
		if v == nil {
			return nil
		}
		return v.RetentionPeriod
	}).(pulumi.StringPtrOutput)
}

// A time based retention policy specifies that all backups within a certain time period should be retained.
type TimeBasedRetentionResponse struct {
	// The retention period.
	RetentionPeriod string `pulumi:"retentionPeriod"`
}

// A time based retention policy specifies that all backups within a certain time period should be retained.
type TimeBasedRetentionResponseOutput struct{ *pulumi.OutputState }

func (TimeBasedRetentionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeBasedRetentionResponse)(nil)).Elem()
}

func (o TimeBasedRetentionResponseOutput) ToTimeBasedRetentionResponseOutput() TimeBasedRetentionResponseOutput {
	return o
}

func (o TimeBasedRetentionResponseOutput) ToTimeBasedRetentionResponseOutputWithContext(ctx context.Context) TimeBasedRetentionResponseOutput {
	return o
}

func (o TimeBasedRetentionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TimeBasedRetentionResponse] {
	return pulumix.Output[TimeBasedRetentionResponse]{
		OutputState: o.OutputState,
	}
}

// The retention period.
func (o TimeBasedRetentionResponseOutput) RetentionPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v TimeBasedRetentionResponse) string { return v.RetentionPeriod }).(pulumi.StringOutput)
}

// Policy to be used while updating the instance.
type UpdatePolicy struct {
	// Mode for updating the instance.
	Mode *UpdatePolicyMode `pulumi:"mode"`
}

// UpdatePolicyInput is an input type that accepts UpdatePolicyArgs and UpdatePolicyOutput values.
// You can construct a concrete instance of `UpdatePolicyInput` via:
//
//	UpdatePolicyArgs{...}
type UpdatePolicyInput interface {
	pulumi.Input

	ToUpdatePolicyOutput() UpdatePolicyOutput
	ToUpdatePolicyOutputWithContext(context.Context) UpdatePolicyOutput
}

// Policy to be used while updating the instance.
type UpdatePolicyArgs struct {
	// Mode for updating the instance.
	Mode UpdatePolicyModePtrInput `pulumi:"mode"`
}

func (UpdatePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdatePolicy)(nil)).Elem()
}

func (i UpdatePolicyArgs) ToUpdatePolicyOutput() UpdatePolicyOutput {
	return i.ToUpdatePolicyOutputWithContext(context.Background())
}

func (i UpdatePolicyArgs) ToUpdatePolicyOutputWithContext(ctx context.Context) UpdatePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdatePolicyOutput)
}

func (i UpdatePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[UpdatePolicy] {
	return pulumix.Output[UpdatePolicy]{
		OutputState: i.ToUpdatePolicyOutputWithContext(ctx).OutputState,
	}
}

func (i UpdatePolicyArgs) ToUpdatePolicyPtrOutput() UpdatePolicyPtrOutput {
	return i.ToUpdatePolicyPtrOutputWithContext(context.Background())
}

func (i UpdatePolicyArgs) ToUpdatePolicyPtrOutputWithContext(ctx context.Context) UpdatePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdatePolicyOutput).ToUpdatePolicyPtrOutputWithContext(ctx)
}

// UpdatePolicyPtrInput is an input type that accepts UpdatePolicyArgs, UpdatePolicyPtr and UpdatePolicyPtrOutput values.
// You can construct a concrete instance of `UpdatePolicyPtrInput` via:
//
//	        UpdatePolicyArgs{...}
//
//	or:
//
//	        nil
type UpdatePolicyPtrInput interface {
	pulumi.Input

	ToUpdatePolicyPtrOutput() UpdatePolicyPtrOutput
	ToUpdatePolicyPtrOutputWithContext(context.Context) UpdatePolicyPtrOutput
}

type updatePolicyPtrType UpdatePolicyArgs

func UpdatePolicyPtr(v *UpdatePolicyArgs) UpdatePolicyPtrInput {
	return (*updatePolicyPtrType)(v)
}

func (*updatePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpdatePolicy)(nil)).Elem()
}

func (i *updatePolicyPtrType) ToUpdatePolicyPtrOutput() UpdatePolicyPtrOutput {
	return i.ToUpdatePolicyPtrOutputWithContext(context.Background())
}

func (i *updatePolicyPtrType) ToUpdatePolicyPtrOutputWithContext(ctx context.Context) UpdatePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdatePolicyPtrOutput)
}

func (i *updatePolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*UpdatePolicy] {
	return pulumix.Output[*UpdatePolicy]{
		OutputState: i.ToUpdatePolicyPtrOutputWithContext(ctx).OutputState,
	}
}

// Policy to be used while updating the instance.
type UpdatePolicyOutput struct{ *pulumi.OutputState }

func (UpdatePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdatePolicy)(nil)).Elem()
}

func (o UpdatePolicyOutput) ToUpdatePolicyOutput() UpdatePolicyOutput {
	return o
}

func (o UpdatePolicyOutput) ToUpdatePolicyOutputWithContext(ctx context.Context) UpdatePolicyOutput {
	return o
}

func (o UpdatePolicyOutput) ToUpdatePolicyPtrOutput() UpdatePolicyPtrOutput {
	return o.ToUpdatePolicyPtrOutputWithContext(context.Background())
}

func (o UpdatePolicyOutput) ToUpdatePolicyPtrOutputWithContext(ctx context.Context) UpdatePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpdatePolicy) *UpdatePolicy {
		return &v
	}).(UpdatePolicyPtrOutput)
}

func (o UpdatePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[UpdatePolicy] {
	return pulumix.Output[UpdatePolicy]{
		OutputState: o.OutputState,
	}
}

// Mode for updating the instance.
func (o UpdatePolicyOutput) Mode() UpdatePolicyModePtrOutput {
	return o.ApplyT(func(v UpdatePolicy) *UpdatePolicyMode { return v.Mode }).(UpdatePolicyModePtrOutput)
}

type UpdatePolicyPtrOutput struct{ *pulumi.OutputState }

func (UpdatePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpdatePolicy)(nil)).Elem()
}

func (o UpdatePolicyPtrOutput) ToUpdatePolicyPtrOutput() UpdatePolicyPtrOutput {
	return o
}

func (o UpdatePolicyPtrOutput) ToUpdatePolicyPtrOutputWithContext(ctx context.Context) UpdatePolicyPtrOutput {
	return o
}

func (o UpdatePolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UpdatePolicy] {
	return pulumix.Output[*UpdatePolicy]{
		OutputState: o.OutputState,
	}
}

func (o UpdatePolicyPtrOutput) Elem() UpdatePolicyOutput {
	return o.ApplyT(func(v *UpdatePolicy) UpdatePolicy {
		if v != nil {
			return *v
		}
		var ret UpdatePolicy
		return ret
	}).(UpdatePolicyOutput)
}

// Mode for updating the instance.
func (o UpdatePolicyPtrOutput) Mode() UpdatePolicyModePtrOutput {
	return o.ApplyT(func(v *UpdatePolicy) *UpdatePolicyMode {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(UpdatePolicyModePtrOutput)
}

// Policy to be used while updating the instance.
type UpdatePolicyResponse struct {
	// Mode for updating the instance.
	Mode string `pulumi:"mode"`
}

// Policy to be used while updating the instance.
type UpdatePolicyResponseOutput struct{ *pulumi.OutputState }

func (UpdatePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdatePolicyResponse)(nil)).Elem()
}

func (o UpdatePolicyResponseOutput) ToUpdatePolicyResponseOutput() UpdatePolicyResponseOutput {
	return o
}

func (o UpdatePolicyResponseOutput) ToUpdatePolicyResponseOutputWithContext(ctx context.Context) UpdatePolicyResponseOutput {
	return o
}

func (o UpdatePolicyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UpdatePolicyResponse] {
	return pulumix.Output[UpdatePolicyResponse]{
		OutputState: o.OutputState,
	}
}

// Mode for updating the instance.
func (o UpdatePolicyResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v UpdatePolicyResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// The username/password for a database user. Used for specifying initial users at cluster creation time.
type UserPassword struct {
	// The initial password for the user.
	Password *string `pulumi:"password"`
	// The database username.
	User *string `pulumi:"user"`
}

// UserPasswordInput is an input type that accepts UserPasswordArgs and UserPasswordOutput values.
// You can construct a concrete instance of `UserPasswordInput` via:
//
//	UserPasswordArgs{...}
type UserPasswordInput interface {
	pulumi.Input

	ToUserPasswordOutput() UserPasswordOutput
	ToUserPasswordOutputWithContext(context.Context) UserPasswordOutput
}

// The username/password for a database user. Used for specifying initial users at cluster creation time.
type UserPasswordArgs struct {
	// The initial password for the user.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The database username.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (UserPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPassword)(nil)).Elem()
}

func (i UserPasswordArgs) ToUserPasswordOutput() UserPasswordOutput {
	return i.ToUserPasswordOutputWithContext(context.Background())
}

func (i UserPasswordArgs) ToUserPasswordOutputWithContext(ctx context.Context) UserPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordOutput)
}

func (i UserPasswordArgs) ToOutput(ctx context.Context) pulumix.Output[UserPassword] {
	return pulumix.Output[UserPassword]{
		OutputState: i.ToUserPasswordOutputWithContext(ctx).OutputState,
	}
}

func (i UserPasswordArgs) ToUserPasswordPtrOutput() UserPasswordPtrOutput {
	return i.ToUserPasswordPtrOutputWithContext(context.Background())
}

func (i UserPasswordArgs) ToUserPasswordPtrOutputWithContext(ctx context.Context) UserPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordOutput).ToUserPasswordPtrOutputWithContext(ctx)
}

// UserPasswordPtrInput is an input type that accepts UserPasswordArgs, UserPasswordPtr and UserPasswordPtrOutput values.
// You can construct a concrete instance of `UserPasswordPtrInput` via:
//
//	        UserPasswordArgs{...}
//
//	or:
//
//	        nil
type UserPasswordPtrInput interface {
	pulumi.Input

	ToUserPasswordPtrOutput() UserPasswordPtrOutput
	ToUserPasswordPtrOutputWithContext(context.Context) UserPasswordPtrOutput
}

type userPasswordPtrType UserPasswordArgs

func UserPasswordPtr(v *UserPasswordArgs) UserPasswordPtrInput {
	return (*userPasswordPtrType)(v)
}

func (*userPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPassword)(nil)).Elem()
}

func (i *userPasswordPtrType) ToUserPasswordPtrOutput() UserPasswordPtrOutput {
	return i.ToUserPasswordPtrOutputWithContext(context.Background())
}

func (i *userPasswordPtrType) ToUserPasswordPtrOutputWithContext(ctx context.Context) UserPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordPtrOutput)
}

func (i *userPasswordPtrType) ToOutput(ctx context.Context) pulumix.Output[*UserPassword] {
	return pulumix.Output[*UserPassword]{
		OutputState: i.ToUserPasswordPtrOutputWithContext(ctx).OutputState,
	}
}

// The username/password for a database user. Used for specifying initial users at cluster creation time.
type UserPasswordOutput struct{ *pulumi.OutputState }

func (UserPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPassword)(nil)).Elem()
}

func (o UserPasswordOutput) ToUserPasswordOutput() UserPasswordOutput {
	return o
}

func (o UserPasswordOutput) ToUserPasswordOutputWithContext(ctx context.Context) UserPasswordOutput {
	return o
}

func (o UserPasswordOutput) ToUserPasswordPtrOutput() UserPasswordPtrOutput {
	return o.ToUserPasswordPtrOutputWithContext(context.Background())
}

func (o UserPasswordOutput) ToUserPasswordPtrOutputWithContext(ctx context.Context) UserPasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserPassword) *UserPassword {
		return &v
	}).(UserPasswordPtrOutput)
}

func (o UserPasswordOutput) ToOutput(ctx context.Context) pulumix.Output[UserPassword] {
	return pulumix.Output[UserPassword]{
		OutputState: o.OutputState,
	}
}

// The initial password for the user.
func (o UserPasswordOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPassword) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The database username.
func (o UserPasswordOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPassword) *string { return v.User }).(pulumi.StringPtrOutput)
}

type UserPasswordPtrOutput struct{ *pulumi.OutputState }

func (UserPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPassword)(nil)).Elem()
}

func (o UserPasswordPtrOutput) ToUserPasswordPtrOutput() UserPasswordPtrOutput {
	return o
}

func (o UserPasswordPtrOutput) ToUserPasswordPtrOutputWithContext(ctx context.Context) UserPasswordPtrOutput {
	return o
}

func (o UserPasswordPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UserPassword] {
	return pulumix.Output[*UserPassword]{
		OutputState: o.OutputState,
	}
}

func (o UserPasswordPtrOutput) Elem() UserPasswordOutput {
	return o.ApplyT(func(v *UserPassword) UserPassword {
		if v != nil {
			return *v
		}
		var ret UserPassword
		return ret
	}).(UserPasswordOutput)
}

// The initial password for the user.
func (o UserPasswordPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPassword) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The database username.
func (o UserPasswordPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPassword) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// The username/password for a database user. Used for specifying initial users at cluster creation time.
type UserPasswordResponse struct {
	// The initial password for the user.
	Password string `pulumi:"password"`
	// The database username.
	User string `pulumi:"user"`
}

// The username/password for a database user. Used for specifying initial users at cluster creation time.
type UserPasswordResponseOutput struct{ *pulumi.OutputState }

func (UserPasswordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPasswordResponse)(nil)).Elem()
}

func (o UserPasswordResponseOutput) ToUserPasswordResponseOutput() UserPasswordResponseOutput {
	return o
}

func (o UserPasswordResponseOutput) ToUserPasswordResponseOutputWithContext(ctx context.Context) UserPasswordResponseOutput {
	return o
}

func (o UserPasswordResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserPasswordResponse] {
	return pulumix.Output[UserPasswordResponse]{
		OutputState: o.OutputState,
	}
}

// The initial password for the user.
func (o UserPasswordResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v UserPasswordResponse) string { return v.Password }).(pulumi.StringOutput)
}

// The database username.
func (o UserPasswordResponseOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v UserPasswordResponse) string { return v.User }).(pulumi.StringOutput)
}

// A weekly schedule starts a backup at prescribed start times within a day, for the specified days of the week. The weekly schedule message is flexible and can be used to create many types of schedules. For example, to have a daily backup that starts at 22:00, configure the `start_times` field to have one element "22:00" and the `days_of_week` field to have all seven days of the week.
type WeeklySchedule struct {
	// The days of the week to perform a backup. If this field is left empty, the default of every day of the week is used.
	DaysOfWeek []WeeklyScheduleDaysOfWeekItem `pulumi:"daysOfWeek"`
	// The times during the day to start a backup. The start times are assumed to be in UTC and to be an exact hour (e.g., 04:00:00). If no start times are provided, a single fixed start time is chosen arbitrarily.
	StartTimes []GoogleTypeTimeOfDay `pulumi:"startTimes"`
}

// WeeklyScheduleInput is an input type that accepts WeeklyScheduleArgs and WeeklyScheduleOutput values.
// You can construct a concrete instance of `WeeklyScheduleInput` via:
//
//	WeeklyScheduleArgs{...}
type WeeklyScheduleInput interface {
	pulumi.Input

	ToWeeklyScheduleOutput() WeeklyScheduleOutput
	ToWeeklyScheduleOutputWithContext(context.Context) WeeklyScheduleOutput
}

// A weekly schedule starts a backup at prescribed start times within a day, for the specified days of the week. The weekly schedule message is flexible and can be used to create many types of schedules. For example, to have a daily backup that starts at 22:00, configure the `start_times` field to have one element "22:00" and the `days_of_week` field to have all seven days of the week.
type WeeklyScheduleArgs struct {
	// The days of the week to perform a backup. If this field is left empty, the default of every day of the week is used.
	DaysOfWeek WeeklyScheduleDaysOfWeekItemArrayInput `pulumi:"daysOfWeek"`
	// The times during the day to start a backup. The start times are assumed to be in UTC and to be an exact hour (e.g., 04:00:00). If no start times are provided, a single fixed start time is chosen arbitrarily.
	StartTimes GoogleTypeTimeOfDayArrayInput `pulumi:"startTimes"`
}

func (WeeklyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklySchedule)(nil)).Elem()
}

func (i WeeklyScheduleArgs) ToWeeklyScheduleOutput() WeeklyScheduleOutput {
	return i.ToWeeklyScheduleOutputWithContext(context.Background())
}

func (i WeeklyScheduleArgs) ToWeeklyScheduleOutputWithContext(ctx context.Context) WeeklyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyScheduleOutput)
}

func (i WeeklyScheduleArgs) ToOutput(ctx context.Context) pulumix.Output[WeeklySchedule] {
	return pulumix.Output[WeeklySchedule]{
		OutputState: i.ToWeeklyScheduleOutputWithContext(ctx).OutputState,
	}
}

func (i WeeklyScheduleArgs) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return i.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i WeeklyScheduleArgs) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyScheduleOutput).ToWeeklySchedulePtrOutputWithContext(ctx)
}

// WeeklySchedulePtrInput is an input type that accepts WeeklyScheduleArgs, WeeklySchedulePtr and WeeklySchedulePtrOutput values.
// You can construct a concrete instance of `WeeklySchedulePtrInput` via:
//
//	        WeeklyScheduleArgs{...}
//
//	or:
//
//	        nil
type WeeklySchedulePtrInput interface {
	pulumi.Input

	ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput
	ToWeeklySchedulePtrOutputWithContext(context.Context) WeeklySchedulePtrOutput
}

type weeklySchedulePtrType WeeklyScheduleArgs

func WeeklySchedulePtr(v *WeeklyScheduleArgs) WeeklySchedulePtrInput {
	return (*weeklySchedulePtrType)(v)
}

func (*weeklySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklySchedule)(nil)).Elem()
}

func (i *weeklySchedulePtrType) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return i.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i *weeklySchedulePtrType) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklySchedulePtrOutput)
}

func (i *weeklySchedulePtrType) ToOutput(ctx context.Context) pulumix.Output[*WeeklySchedule] {
	return pulumix.Output[*WeeklySchedule]{
		OutputState: i.ToWeeklySchedulePtrOutputWithContext(ctx).OutputState,
	}
}

// A weekly schedule starts a backup at prescribed start times within a day, for the specified days of the week. The weekly schedule message is flexible and can be used to create many types of schedules. For example, to have a daily backup that starts at 22:00, configure the `start_times` field to have one element "22:00" and the `days_of_week` field to have all seven days of the week.
type WeeklyScheduleOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklySchedule)(nil)).Elem()
}

func (o WeeklyScheduleOutput) ToWeeklyScheduleOutput() WeeklyScheduleOutput {
	return o
}

func (o WeeklyScheduleOutput) ToWeeklyScheduleOutputWithContext(ctx context.Context) WeeklyScheduleOutput {
	return o
}

func (o WeeklyScheduleOutput) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return o.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (o WeeklyScheduleOutput) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WeeklySchedule) *WeeklySchedule {
		return &v
	}).(WeeklySchedulePtrOutput)
}

func (o WeeklyScheduleOutput) ToOutput(ctx context.Context) pulumix.Output[WeeklySchedule] {
	return pulumix.Output[WeeklySchedule]{
		OutputState: o.OutputState,
	}
}

// The days of the week to perform a backup. If this field is left empty, the default of every day of the week is used.
func (o WeeklyScheduleOutput) DaysOfWeek() WeeklyScheduleDaysOfWeekItemArrayOutput {
	return o.ApplyT(func(v WeeklySchedule) []WeeklyScheduleDaysOfWeekItem { return v.DaysOfWeek }).(WeeklyScheduleDaysOfWeekItemArrayOutput)
}

// The times during the day to start a backup. The start times are assumed to be in UTC and to be an exact hour (e.g., 04:00:00). If no start times are provided, a single fixed start time is chosen arbitrarily.
func (o WeeklyScheduleOutput) StartTimes() GoogleTypeTimeOfDayArrayOutput {
	return o.ApplyT(func(v WeeklySchedule) []GoogleTypeTimeOfDay { return v.StartTimes }).(GoogleTypeTimeOfDayArrayOutput)
}

type WeeklySchedulePtrOutput struct{ *pulumi.OutputState }

func (WeeklySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklySchedule)(nil)).Elem()
}

func (o WeeklySchedulePtrOutput) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return o
}

func (o WeeklySchedulePtrOutput) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return o
}

func (o WeeklySchedulePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*WeeklySchedule] {
	return pulumix.Output[*WeeklySchedule]{
		OutputState: o.OutputState,
	}
}

func (o WeeklySchedulePtrOutput) Elem() WeeklyScheduleOutput {
	return o.ApplyT(func(v *WeeklySchedule) WeeklySchedule {
		if v != nil {
			return *v
		}
		var ret WeeklySchedule
		return ret
	}).(WeeklyScheduleOutput)
}

// The days of the week to perform a backup. If this field is left empty, the default of every day of the week is used.
func (o WeeklySchedulePtrOutput) DaysOfWeek() WeeklyScheduleDaysOfWeekItemArrayOutput {
	return o.ApplyT(func(v *WeeklySchedule) []WeeklyScheduleDaysOfWeekItem {
		if v == nil {
			return nil
		}
		return v.DaysOfWeek
	}).(WeeklyScheduleDaysOfWeekItemArrayOutput)
}

// The times during the day to start a backup. The start times are assumed to be in UTC and to be an exact hour (e.g., 04:00:00). If no start times are provided, a single fixed start time is chosen arbitrarily.
func (o WeeklySchedulePtrOutput) StartTimes() GoogleTypeTimeOfDayArrayOutput {
	return o.ApplyT(func(v *WeeklySchedule) []GoogleTypeTimeOfDay {
		if v == nil {
			return nil
		}
		return v.StartTimes
	}).(GoogleTypeTimeOfDayArrayOutput)
}

// A weekly schedule starts a backup at prescribed start times within a day, for the specified days of the week. The weekly schedule message is flexible and can be used to create many types of schedules. For example, to have a daily backup that starts at 22:00, configure the `start_times` field to have one element "22:00" and the `days_of_week` field to have all seven days of the week.
type WeeklyScheduleResponse struct {
	// The days of the week to perform a backup. If this field is left empty, the default of every day of the week is used.
	DaysOfWeek []string `pulumi:"daysOfWeek"`
	// The times during the day to start a backup. The start times are assumed to be in UTC and to be an exact hour (e.g., 04:00:00). If no start times are provided, a single fixed start time is chosen arbitrarily.
	StartTimes []GoogleTypeTimeOfDayResponse `pulumi:"startTimes"`
}

// A weekly schedule starts a backup at prescribed start times within a day, for the specified days of the week. The weekly schedule message is flexible and can be used to create many types of schedules. For example, to have a daily backup that starts at 22:00, configure the `start_times` field to have one element "22:00" and the `days_of_week` field to have all seven days of the week.
type WeeklyScheduleResponseOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyScheduleResponse)(nil)).Elem()
}

func (o WeeklyScheduleResponseOutput) ToWeeklyScheduleResponseOutput() WeeklyScheduleResponseOutput {
	return o
}

func (o WeeklyScheduleResponseOutput) ToWeeklyScheduleResponseOutputWithContext(ctx context.Context) WeeklyScheduleResponseOutput {
	return o
}

func (o WeeklyScheduleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[WeeklyScheduleResponse] {
	return pulumix.Output[WeeklyScheduleResponse]{
		OutputState: o.OutputState,
	}
}

// The days of the week to perform a backup. If this field is left empty, the default of every day of the week is used.
func (o WeeklyScheduleResponseOutput) DaysOfWeek() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WeeklyScheduleResponse) []string { return v.DaysOfWeek }).(pulumi.StringArrayOutput)
}

// The times during the day to start a backup. The start times are assumed to be in UTC and to be an exact hour (e.g., 04:00:00). If no start times are provided, a single fixed start time is chosen arbitrarily.
func (o WeeklyScheduleResponseOutput) StartTimes() GoogleTypeTimeOfDayResponseArrayOutput {
	return o.ApplyT(func(v WeeklyScheduleResponse) []GoogleTypeTimeOfDayResponse { return v.StartTimes }).(GoogleTypeTimeOfDayResponseArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutomatedBackupPolicyInput)(nil)).Elem(), AutomatedBackupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomatedBackupPolicyPtrInput)(nil)).Elem(), AutomatedBackupPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientConnectionConfigInput)(nil)).Elem(), ClientConnectionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientConnectionConfigPtrInput)(nil)).Elem(), ClientConnectionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContinuousBackupConfigInput)(nil)).Elem(), ContinuousBackupConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContinuousBackupConfigPtrInput)(nil)).Elem(), ContinuousBackupConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigInput)(nil)).Elem(), EncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigPtrInput)(nil)).Elem(), EncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleTypeTimeOfDayInput)(nil)).Elem(), GoogleTypeTimeOfDayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleTypeTimeOfDayArrayInput)(nil)).Elem(), GoogleTypeTimeOfDayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineConfigInput)(nil)).Elem(), MachineConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineConfigPtrInput)(nil)).Elem(), MachineConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigPtrInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuantityBasedRetentionInput)(nil)).Elem(), QuantityBasedRetentionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QuantityBasedRetentionPtrInput)(nil)).Elem(), QuantityBasedRetentionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryInsightsInstanceConfigInput)(nil)).Elem(), QueryInsightsInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryInsightsInstanceConfigPtrInput)(nil)).Elem(), QueryInsightsInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadPoolConfigInput)(nil)).Elem(), ReadPoolConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadPoolConfigPtrInput)(nil)).Elem(), ReadPoolConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecondaryConfigInput)(nil)).Elem(), SecondaryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecondaryConfigPtrInput)(nil)).Elem(), SecondaryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslConfigInput)(nil)).Elem(), SslConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslConfigPtrInput)(nil)).Elem(), SslConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeBasedRetentionInput)(nil)).Elem(), TimeBasedRetentionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeBasedRetentionPtrInput)(nil)).Elem(), TimeBasedRetentionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpdatePolicyInput)(nil)).Elem(), UpdatePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpdatePolicyPtrInput)(nil)).Elem(), UpdatePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordInput)(nil)).Elem(), UserPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordPtrInput)(nil)).Elem(), UserPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WeeklyScheduleInput)(nil)).Elem(), WeeklyScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WeeklySchedulePtrInput)(nil)).Elem(), WeeklyScheduleArgs{})
	pulumi.RegisterOutputType(AutomatedBackupPolicyOutput{})
	pulumi.RegisterOutputType(AutomatedBackupPolicyPtrOutput{})
	pulumi.RegisterOutputType(AutomatedBackupPolicyResponseOutput{})
	pulumi.RegisterOutputType(BackupSourceResponseOutput{})
	pulumi.RegisterOutputType(ClientConnectionConfigOutput{})
	pulumi.RegisterOutputType(ClientConnectionConfigPtrOutput{})
	pulumi.RegisterOutputType(ClientConnectionConfigResponseOutput{})
	pulumi.RegisterOutputType(ContinuousBackupConfigOutput{})
	pulumi.RegisterOutputType(ContinuousBackupConfigPtrOutput{})
	pulumi.RegisterOutputType(ContinuousBackupConfigResponseOutput{})
	pulumi.RegisterOutputType(ContinuousBackupInfoResponseOutput{})
	pulumi.RegisterOutputType(EncryptionConfigOutput{})
	pulumi.RegisterOutputType(EncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigResponseOutput{})
	pulumi.RegisterOutputType(EncryptionInfoResponseOutput{})
	pulumi.RegisterOutputType(GoogleTypeTimeOfDayOutput{})
	pulumi.RegisterOutputType(GoogleTypeTimeOfDayArrayOutput{})
	pulumi.RegisterOutputType(GoogleTypeTimeOfDayResponseOutput{})
	pulumi.RegisterOutputType(GoogleTypeTimeOfDayResponseArrayOutput{})
	pulumi.RegisterOutputType(MachineConfigOutput{})
	pulumi.RegisterOutputType(MachineConfigPtrOutput{})
	pulumi.RegisterOutputType(MachineConfigResponseOutput{})
	pulumi.RegisterOutputType(MigrationSourceResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigOutput{})
	pulumi.RegisterOutputType(NetworkConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(NodeResponseOutput{})
	pulumi.RegisterOutputType(NodeResponseArrayOutput{})
	pulumi.RegisterOutputType(PrimaryConfigResponseOutput{})
	pulumi.RegisterOutputType(QuantityBasedExpiryResponseOutput{})
	pulumi.RegisterOutputType(QuantityBasedRetentionOutput{})
	pulumi.RegisterOutputType(QuantityBasedRetentionPtrOutput{})
	pulumi.RegisterOutputType(QuantityBasedRetentionResponseOutput{})
	pulumi.RegisterOutputType(QueryInsightsInstanceConfigOutput{})
	pulumi.RegisterOutputType(QueryInsightsInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(QueryInsightsInstanceConfigResponseOutput{})
	pulumi.RegisterOutputType(ReadPoolConfigOutput{})
	pulumi.RegisterOutputType(ReadPoolConfigPtrOutput{})
	pulumi.RegisterOutputType(ReadPoolConfigResponseOutput{})
	pulumi.RegisterOutputType(SecondaryConfigOutput{})
	pulumi.RegisterOutputType(SecondaryConfigPtrOutput{})
	pulumi.RegisterOutputType(SecondaryConfigResponseOutput{})
	pulumi.RegisterOutputType(SslConfigOutput{})
	pulumi.RegisterOutputType(SslConfigPtrOutput{})
	pulumi.RegisterOutputType(SslConfigResponseOutput{})
	pulumi.RegisterOutputType(TimeBasedRetentionOutput{})
	pulumi.RegisterOutputType(TimeBasedRetentionPtrOutput{})
	pulumi.RegisterOutputType(TimeBasedRetentionResponseOutput{})
	pulumi.RegisterOutputType(UpdatePolicyOutput{})
	pulumi.RegisterOutputType(UpdatePolicyPtrOutput{})
	pulumi.RegisterOutputType(UpdatePolicyResponseOutput{})
	pulumi.RegisterOutputType(UserPasswordOutput{})
	pulumi.RegisterOutputType(UserPasswordPtrOutput{})
	pulumi.RegisterOutputType(UserPasswordResponseOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleOutput{})
	pulumi.RegisterOutputType(WeeklySchedulePtrOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleResponseOutput{})
}
