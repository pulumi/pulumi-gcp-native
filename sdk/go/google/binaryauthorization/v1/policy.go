// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a platform policy, and returns a copy of it. Returns `NOT_FOUND` if the project or platform doesn't exist, `INVALID_ARGUMENT` if the request is malformed, `ALREADY_EXISTS` if the policy already exists, and `INVALID_ARGUMENT` if the policy contains a platform-specific policy that does not match the platform value specified in the URL.
// Auto-naming is currently not supported for this resource.
type Policy struct {
	pulumi.CustomResourceState

	// Optional. A description comment about the policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// Optional. GKE platform-specific policy.
	GkePolicy GkePolicyResponseOutput `pulumi:"gkePolicy"`
	// The relative resource name of the Binary Authorization platform policy, in the form of `projects/*/platforms/*/policies/*`.
	Name       pulumi.StringOutput `pulumi:"name"`
	PlatformId pulumi.StringOutput `pulumi:"platformId"`
	// Required. The platform policy ID.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	Project  pulumi.StringOutput `pulumi:"project"`
	// Time when the policy was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlatformId == nil {
		return nil, errors.New("invalid value for required argument 'PlatformId'")
	}
	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"platformId",
		"policyId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Policy
	err := ctx.RegisterResource("google-native:binaryauthorization/v1:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("google-native:binaryauthorization/v1:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
}

type PolicyState struct {
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	// Optional. A description comment about the policy.
	Description *string `pulumi:"description"`
	// Optional. GKE platform-specific policy.
	GkePolicy  *GkePolicy `pulumi:"gkePolicy"`
	PlatformId string     `pulumi:"platformId"`
	// Required. The platform policy ID.
	PolicyId string  `pulumi:"policyId"`
	Project  *string `pulumi:"project"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// Optional. A description comment about the policy.
	Description pulumi.StringPtrInput
	// Optional. GKE platform-specific policy.
	GkePolicy  GkePolicyPtrInput
	PlatformId pulumi.StringInput
	// Required. The platform policy ID.
	PolicyId pulumi.StringInput
	Project  pulumi.StringPtrInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

// Optional. A description comment about the policy.
func (o PolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Optional. GKE platform-specific policy.
func (o PolicyOutput) GkePolicy() GkePolicyResponseOutput {
	return o.ApplyT(func(v *Policy) GkePolicyResponseOutput { return v.GkePolicy }).(GkePolicyResponseOutput)
}

// The relative resource name of the Binary Authorization platform policy, in the form of `projects/*/platforms/*/policies/*`.
func (o PolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PolicyOutput) PlatformId() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.PlatformId }).(pulumi.StringOutput)
}

// Required. The platform policy ID.
func (o PolicyOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

func (o PolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Time when the policy was last updated.
func (o PolicyOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyInput)(nil)).Elem(), &Policy{})
	pulumi.RegisterOutputType(PolicyOutput{})
}
