// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An attestor public key that will be used to verify attestations signed by this attestor.
type AttestorPublicKey struct {
	// ASCII-armored representation of a PGP public key, as the entire output by the command `gpg --export --armor foo@example.com` (either LF or CRLF line endings). When using this field, `id` should be left blank. The BinAuthz API handlers will calculate the ID and fill it in automatically. BinAuthz computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as upper-case hex. If `id` is provided by the caller, it will be overwritten by the API-calculated ID.
	AsciiArmoredPgpPublicKey *string `pulumi:"asciiArmoredPgpPublicKey"`
	// Optional. A descriptive comment. This field may be updated.
	Comment *string `pulumi:"comment"`
	// The ID of this public key. Signatures verified by BinAuthz must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. Additional restrictions on this field can be imposed based on which public key type is encapsulated. See the documentation on `public_key` cases below for details.
	Id *string `pulumi:"id"`
	// A raw PKIX SubjectPublicKeyInfo format public key. NOTE: `id` may be explicitly provided by the caller when using this type of public key, but it MUST be a valid RFC3986 URI. If `id` is left blank, a default one will be computed based on the digest of the DER encoding of the public key.
	PkixPublicKey *PkixPublicKey `pulumi:"pkixPublicKey"`
}

// AttestorPublicKeyInput is an input type that accepts AttestorPublicKeyArgs and AttestorPublicKeyOutput values.
// You can construct a concrete instance of `AttestorPublicKeyInput` via:
//
//          AttestorPublicKeyArgs{...}
type AttestorPublicKeyInput interface {
	pulumi.Input

	ToAttestorPublicKeyOutput() AttestorPublicKeyOutput
	ToAttestorPublicKeyOutputWithContext(context.Context) AttestorPublicKeyOutput
}

// An attestor public key that will be used to verify attestations signed by this attestor.
type AttestorPublicKeyArgs struct {
	// ASCII-armored representation of a PGP public key, as the entire output by the command `gpg --export --armor foo@example.com` (either LF or CRLF line endings). When using this field, `id` should be left blank. The BinAuthz API handlers will calculate the ID and fill it in automatically. BinAuthz computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as upper-case hex. If `id` is provided by the caller, it will be overwritten by the API-calculated ID.
	AsciiArmoredPgpPublicKey pulumi.StringPtrInput `pulumi:"asciiArmoredPgpPublicKey"`
	// Optional. A descriptive comment. This field may be updated.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// The ID of this public key. Signatures verified by BinAuthz must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. Additional restrictions on this field can be imposed based on which public key type is encapsulated. See the documentation on `public_key` cases below for details.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// A raw PKIX SubjectPublicKeyInfo format public key. NOTE: `id` may be explicitly provided by the caller when using this type of public key, but it MUST be a valid RFC3986 URI. If `id` is left blank, a default one will be computed based on the digest of the DER encoding of the public key.
	PkixPublicKey PkixPublicKeyPtrInput `pulumi:"pkixPublicKey"`
}

func (AttestorPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestorPublicKey)(nil)).Elem()
}

func (i AttestorPublicKeyArgs) ToAttestorPublicKeyOutput() AttestorPublicKeyOutput {
	return i.ToAttestorPublicKeyOutputWithContext(context.Background())
}

func (i AttestorPublicKeyArgs) ToAttestorPublicKeyOutputWithContext(ctx context.Context) AttestorPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestorPublicKeyOutput)
}

// AttestorPublicKeyArrayInput is an input type that accepts AttestorPublicKeyArray and AttestorPublicKeyArrayOutput values.
// You can construct a concrete instance of `AttestorPublicKeyArrayInput` via:
//
//          AttestorPublicKeyArray{ AttestorPublicKeyArgs{...} }
type AttestorPublicKeyArrayInput interface {
	pulumi.Input

	ToAttestorPublicKeyArrayOutput() AttestorPublicKeyArrayOutput
	ToAttestorPublicKeyArrayOutputWithContext(context.Context) AttestorPublicKeyArrayOutput
}

type AttestorPublicKeyArray []AttestorPublicKeyInput

func (AttestorPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttestorPublicKey)(nil)).Elem()
}

func (i AttestorPublicKeyArray) ToAttestorPublicKeyArrayOutput() AttestorPublicKeyArrayOutput {
	return i.ToAttestorPublicKeyArrayOutputWithContext(context.Background())
}

func (i AttestorPublicKeyArray) ToAttestorPublicKeyArrayOutputWithContext(ctx context.Context) AttestorPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestorPublicKeyArrayOutput)
}

// An attestor public key that will be used to verify attestations signed by this attestor.
type AttestorPublicKeyOutput struct{ *pulumi.OutputState }

func (AttestorPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestorPublicKey)(nil)).Elem()
}

func (o AttestorPublicKeyOutput) ToAttestorPublicKeyOutput() AttestorPublicKeyOutput {
	return o
}

func (o AttestorPublicKeyOutput) ToAttestorPublicKeyOutputWithContext(ctx context.Context) AttestorPublicKeyOutput {
	return o
}

// ASCII-armored representation of a PGP public key, as the entire output by the command `gpg --export --armor foo@example.com` (either LF or CRLF line endings). When using this field, `id` should be left blank. The BinAuthz API handlers will calculate the ID and fill it in automatically. BinAuthz computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as upper-case hex. If `id` is provided by the caller, it will be overwritten by the API-calculated ID.
func (o AttestorPublicKeyOutput) AsciiArmoredPgpPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttestorPublicKey) *string { return v.AsciiArmoredPgpPublicKey }).(pulumi.StringPtrOutput)
}

// Optional. A descriptive comment. This field may be updated.
func (o AttestorPublicKeyOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttestorPublicKey) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// The ID of this public key. Signatures verified by BinAuthz must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. Additional restrictions on this field can be imposed based on which public key type is encapsulated. See the documentation on `public_key` cases below for details.
func (o AttestorPublicKeyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttestorPublicKey) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// A raw PKIX SubjectPublicKeyInfo format public key. NOTE: `id` may be explicitly provided by the caller when using this type of public key, but it MUST be a valid RFC3986 URI. If `id` is left blank, a default one will be computed based on the digest of the DER encoding of the public key.
func (o AttestorPublicKeyOutput) PkixPublicKey() PkixPublicKeyPtrOutput {
	return o.ApplyT(func(v AttestorPublicKey) *PkixPublicKey { return v.PkixPublicKey }).(PkixPublicKeyPtrOutput)
}

type AttestorPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (AttestorPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttestorPublicKey)(nil)).Elem()
}

func (o AttestorPublicKeyArrayOutput) ToAttestorPublicKeyArrayOutput() AttestorPublicKeyArrayOutput {
	return o
}

func (o AttestorPublicKeyArrayOutput) ToAttestorPublicKeyArrayOutputWithContext(ctx context.Context) AttestorPublicKeyArrayOutput {
	return o
}

func (o AttestorPublicKeyArrayOutput) Index(i pulumi.IntInput) AttestorPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AttestorPublicKey {
		return vs[0].([]AttestorPublicKey)[vs[1].(int)]
	}).(AttestorPublicKeyOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type IamPolicy struct {
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings []Binding `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag *string `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int `pulumi:"version"`
}

// IamPolicyInput is an input type that accepts IamPolicyArgs and IamPolicyOutput values.
// You can construct a concrete instance of `IamPolicyInput` via:
//
//          IamPolicyArgs{...}
type IamPolicyInput interface {
	pulumi.Input

	ToIamPolicyOutput() IamPolicyOutput
	ToIamPolicyOutputWithContext(context.Context) IamPolicyOutput
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type IamPolicyArgs struct {
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings BindingArrayInput `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (IamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IamPolicy)(nil)).Elem()
}

func (i IamPolicyArgs) ToIamPolicyOutput() IamPolicyOutput {
	return i.ToIamPolicyOutputWithContext(context.Background())
}

func (i IamPolicyArgs) ToIamPolicyOutputWithContext(ctx context.Context) IamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyOutput)
}

func (i IamPolicyArgs) ToIamPolicyPtrOutput() IamPolicyPtrOutput {
	return i.ToIamPolicyPtrOutputWithContext(context.Background())
}

func (i IamPolicyArgs) ToIamPolicyPtrOutputWithContext(ctx context.Context) IamPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyOutput).ToIamPolicyPtrOutputWithContext(ctx)
}

// IamPolicyPtrInput is an input type that accepts IamPolicyArgs, IamPolicyPtr and IamPolicyPtrOutput values.
// You can construct a concrete instance of `IamPolicyPtrInput` via:
//
//          IamPolicyArgs{...}
//
//  or:
//
//          nil
type IamPolicyPtrInput interface {
	pulumi.Input

	ToIamPolicyPtrOutput() IamPolicyPtrOutput
	ToIamPolicyPtrOutputWithContext(context.Context) IamPolicyPtrOutput
}

type iamPolicyPtrType IamPolicyArgs

func IamPolicyPtr(v *IamPolicyArgs) IamPolicyPtrInput {
	return (*iamPolicyPtrType)(v)
}

func (*iamPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IamPolicy)(nil)).Elem()
}

func (i *iamPolicyPtrType) ToIamPolicyPtrOutput() IamPolicyPtrOutput {
	return i.ToIamPolicyPtrOutputWithContext(context.Background())
}

func (i *iamPolicyPtrType) ToIamPolicyPtrOutputWithContext(ctx context.Context) IamPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type IamPolicyOutput struct{ *pulumi.OutputState }

func (IamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IamPolicy)(nil)).Elem()
}

func (o IamPolicyOutput) ToIamPolicyOutput() IamPolicyOutput {
	return o
}

func (o IamPolicyOutput) ToIamPolicyOutputWithContext(ctx context.Context) IamPolicyOutput {
	return o
}

func (o IamPolicyOutput) ToIamPolicyPtrOutput() IamPolicyPtrOutput {
	return o.ToIamPolicyPtrOutputWithContext(context.Background())
}

func (o IamPolicyOutput) ToIamPolicyPtrOutputWithContext(ctx context.Context) IamPolicyPtrOutput {
	return o.ApplyT(func(v IamPolicy) *IamPolicy {
		return &v
	}).(IamPolicyPtrOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o IamPolicyOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v IamPolicy) []Binding { return v.Bindings }).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o IamPolicyOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IamPolicy) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o IamPolicyOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IamPolicy) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type IamPolicyPtrOutput struct{ *pulumi.OutputState }

func (IamPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamPolicy)(nil)).Elem()
}

func (o IamPolicyPtrOutput) ToIamPolicyPtrOutput() IamPolicyPtrOutput {
	return o
}

func (o IamPolicyPtrOutput) ToIamPolicyPtrOutputWithContext(ctx context.Context) IamPolicyPtrOutput {
	return o
}

func (o IamPolicyPtrOutput) Elem() IamPolicyOutput {
	return o.ApplyT(func(v *IamPolicy) IamPolicy { return *v }).(IamPolicyOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o IamPolicyPtrOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v *IamPolicy) []Binding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o IamPolicyPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o IamPolicyPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IamPolicy) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

// A public key in the PkixPublicKey format (see https://tools.ietf.org/html/rfc5280#section-4.1.2.7 for details). Public keys of this type are typically textually encoded using the PEM format.
type PkixPublicKey struct {
	// A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13
	PublicKeyPem *string `pulumi:"publicKeyPem"`
	// The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key).
	SignatureAlgorithm *string `pulumi:"signatureAlgorithm"`
}

// PkixPublicKeyInput is an input type that accepts PkixPublicKeyArgs and PkixPublicKeyOutput values.
// You can construct a concrete instance of `PkixPublicKeyInput` via:
//
//          PkixPublicKeyArgs{...}
type PkixPublicKeyInput interface {
	pulumi.Input

	ToPkixPublicKeyOutput() PkixPublicKeyOutput
	ToPkixPublicKeyOutputWithContext(context.Context) PkixPublicKeyOutput
}

// A public key in the PkixPublicKey format (see https://tools.ietf.org/html/rfc5280#section-4.1.2.7 for details). Public keys of this type are typically textually encoded using the PEM format.
type PkixPublicKeyArgs struct {
	// A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13
	PublicKeyPem pulumi.StringPtrInput `pulumi:"publicKeyPem"`
	// The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key).
	SignatureAlgorithm pulumi.StringPtrInput `pulumi:"signatureAlgorithm"`
}

func (PkixPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PkixPublicKey)(nil)).Elem()
}

func (i PkixPublicKeyArgs) ToPkixPublicKeyOutput() PkixPublicKeyOutput {
	return i.ToPkixPublicKeyOutputWithContext(context.Background())
}

func (i PkixPublicKeyArgs) ToPkixPublicKeyOutputWithContext(ctx context.Context) PkixPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PkixPublicKeyOutput)
}

func (i PkixPublicKeyArgs) ToPkixPublicKeyPtrOutput() PkixPublicKeyPtrOutput {
	return i.ToPkixPublicKeyPtrOutputWithContext(context.Background())
}

func (i PkixPublicKeyArgs) ToPkixPublicKeyPtrOutputWithContext(ctx context.Context) PkixPublicKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PkixPublicKeyOutput).ToPkixPublicKeyPtrOutputWithContext(ctx)
}

// PkixPublicKeyPtrInput is an input type that accepts PkixPublicKeyArgs, PkixPublicKeyPtr and PkixPublicKeyPtrOutput values.
// You can construct a concrete instance of `PkixPublicKeyPtrInput` via:
//
//          PkixPublicKeyArgs{...}
//
//  or:
//
//          nil
type PkixPublicKeyPtrInput interface {
	pulumi.Input

	ToPkixPublicKeyPtrOutput() PkixPublicKeyPtrOutput
	ToPkixPublicKeyPtrOutputWithContext(context.Context) PkixPublicKeyPtrOutput
}

type pkixPublicKeyPtrType PkixPublicKeyArgs

func PkixPublicKeyPtr(v *PkixPublicKeyArgs) PkixPublicKeyPtrInput {
	return (*pkixPublicKeyPtrType)(v)
}

func (*pkixPublicKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PkixPublicKey)(nil)).Elem()
}

func (i *pkixPublicKeyPtrType) ToPkixPublicKeyPtrOutput() PkixPublicKeyPtrOutput {
	return i.ToPkixPublicKeyPtrOutputWithContext(context.Background())
}

func (i *pkixPublicKeyPtrType) ToPkixPublicKeyPtrOutputWithContext(ctx context.Context) PkixPublicKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PkixPublicKeyPtrOutput)
}

// A public key in the PkixPublicKey format (see https://tools.ietf.org/html/rfc5280#section-4.1.2.7 for details). Public keys of this type are typically textually encoded using the PEM format.
type PkixPublicKeyOutput struct{ *pulumi.OutputState }

func (PkixPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PkixPublicKey)(nil)).Elem()
}

func (o PkixPublicKeyOutput) ToPkixPublicKeyOutput() PkixPublicKeyOutput {
	return o
}

func (o PkixPublicKeyOutput) ToPkixPublicKeyOutputWithContext(ctx context.Context) PkixPublicKeyOutput {
	return o
}

func (o PkixPublicKeyOutput) ToPkixPublicKeyPtrOutput() PkixPublicKeyPtrOutput {
	return o.ToPkixPublicKeyPtrOutputWithContext(context.Background())
}

func (o PkixPublicKeyOutput) ToPkixPublicKeyPtrOutputWithContext(ctx context.Context) PkixPublicKeyPtrOutput {
	return o.ApplyT(func(v PkixPublicKey) *PkixPublicKey {
		return &v
	}).(PkixPublicKeyPtrOutput)
}

// A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13
func (o PkixPublicKeyOutput) PublicKeyPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PkixPublicKey) *string { return v.PublicKeyPem }).(pulumi.StringPtrOutput)
}

// The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key).
func (o PkixPublicKeyOutput) SignatureAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PkixPublicKey) *string { return v.SignatureAlgorithm }).(pulumi.StringPtrOutput)
}

type PkixPublicKeyPtrOutput struct{ *pulumi.OutputState }

func (PkixPublicKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PkixPublicKey)(nil)).Elem()
}

func (o PkixPublicKeyPtrOutput) ToPkixPublicKeyPtrOutput() PkixPublicKeyPtrOutput {
	return o
}

func (o PkixPublicKeyPtrOutput) ToPkixPublicKeyPtrOutputWithContext(ctx context.Context) PkixPublicKeyPtrOutput {
	return o
}

func (o PkixPublicKeyPtrOutput) Elem() PkixPublicKeyOutput {
	return o.ApplyT(func(v *PkixPublicKey) PkixPublicKey { return *v }).(PkixPublicKeyOutput)
}

// A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13
func (o PkixPublicKeyPtrOutput) PublicKeyPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PkixPublicKey) *string {
		if v == nil {
			return nil
		}
		return v.PublicKeyPem
	}).(pulumi.StringPtrOutput)
}

// The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key).
func (o PkixPublicKeyPtrOutput) SignatureAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PkixPublicKey) *string {
		if v == nil {
			return nil
		}
		return v.SignatureAlgorithm
	}).(pulumi.StringPtrOutput)
}

// An user owned drydock note references a Drydock ATTESTATION_AUTHORITY Note created by the user.
type UserOwnedDrydockNote struct {
	// Output only. This field will contain the service account email address that this Attestor will use as the principal when querying Container Analysis. Attestor administrators must grant this service account the IAM role needed to read attestations from the note_reference in Container Analysis (`containeranalysis.notes.occurrences.viewer`). This email address is fixed for the lifetime of the Attestor, but callers should not make any other assumptions about the service account email; future versions may use an email based on a different naming pattern.
	DelegationServiceAccountEmail *string `pulumi:"delegationServiceAccountEmail"`
	// Required. The Drydock resource name of a ATTESTATION_AUTHORITY Note, created by the user, in the format: `projects/*/notes/*` (or the legacy `providers/*/notes/*`). This field may not be updated. An attestation by this attestor is stored as a Drydock ATTESTATION_AUTHORITY Occurrence that names a container image and that links to this Note. Drydock is an external dependency.
	NoteReference *string `pulumi:"noteReference"`
	// Optional. Public keys that verify attestations signed by this attestor. This field may be updated. If this field is non-empty, one of the specified public keys must verify that an attestation was signed by this attestor for the image specified in the admission request. If this field is empty, this attestor always returns that no valid attestations exist.
	PublicKeys []AttestorPublicKey `pulumi:"publicKeys"`
}

// UserOwnedDrydockNoteInput is an input type that accepts UserOwnedDrydockNoteArgs and UserOwnedDrydockNoteOutput values.
// You can construct a concrete instance of `UserOwnedDrydockNoteInput` via:
//
//          UserOwnedDrydockNoteArgs{...}
type UserOwnedDrydockNoteInput interface {
	pulumi.Input

	ToUserOwnedDrydockNoteOutput() UserOwnedDrydockNoteOutput
	ToUserOwnedDrydockNoteOutputWithContext(context.Context) UserOwnedDrydockNoteOutput
}

// An user owned drydock note references a Drydock ATTESTATION_AUTHORITY Note created by the user.
type UserOwnedDrydockNoteArgs struct {
	// Output only. This field will contain the service account email address that this Attestor will use as the principal when querying Container Analysis. Attestor administrators must grant this service account the IAM role needed to read attestations from the note_reference in Container Analysis (`containeranalysis.notes.occurrences.viewer`). This email address is fixed for the lifetime of the Attestor, but callers should not make any other assumptions about the service account email; future versions may use an email based on a different naming pattern.
	DelegationServiceAccountEmail pulumi.StringPtrInput `pulumi:"delegationServiceAccountEmail"`
	// Required. The Drydock resource name of a ATTESTATION_AUTHORITY Note, created by the user, in the format: `projects/*/notes/*` (or the legacy `providers/*/notes/*`). This field may not be updated. An attestation by this attestor is stored as a Drydock ATTESTATION_AUTHORITY Occurrence that names a container image and that links to this Note. Drydock is an external dependency.
	NoteReference pulumi.StringPtrInput `pulumi:"noteReference"`
	// Optional. Public keys that verify attestations signed by this attestor. This field may be updated. If this field is non-empty, one of the specified public keys must verify that an attestation was signed by this attestor for the image specified in the admission request. If this field is empty, this attestor always returns that no valid attestations exist.
	PublicKeys AttestorPublicKeyArrayInput `pulumi:"publicKeys"`
}

func (UserOwnedDrydockNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserOwnedDrydockNote)(nil)).Elem()
}

func (i UserOwnedDrydockNoteArgs) ToUserOwnedDrydockNoteOutput() UserOwnedDrydockNoteOutput {
	return i.ToUserOwnedDrydockNoteOutputWithContext(context.Background())
}

func (i UserOwnedDrydockNoteArgs) ToUserOwnedDrydockNoteOutputWithContext(ctx context.Context) UserOwnedDrydockNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOwnedDrydockNoteOutput)
}

func (i UserOwnedDrydockNoteArgs) ToUserOwnedDrydockNotePtrOutput() UserOwnedDrydockNotePtrOutput {
	return i.ToUserOwnedDrydockNotePtrOutputWithContext(context.Background())
}

func (i UserOwnedDrydockNoteArgs) ToUserOwnedDrydockNotePtrOutputWithContext(ctx context.Context) UserOwnedDrydockNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOwnedDrydockNoteOutput).ToUserOwnedDrydockNotePtrOutputWithContext(ctx)
}

// UserOwnedDrydockNotePtrInput is an input type that accepts UserOwnedDrydockNoteArgs, UserOwnedDrydockNotePtr and UserOwnedDrydockNotePtrOutput values.
// You can construct a concrete instance of `UserOwnedDrydockNotePtrInput` via:
//
//          UserOwnedDrydockNoteArgs{...}
//
//  or:
//
//          nil
type UserOwnedDrydockNotePtrInput interface {
	pulumi.Input

	ToUserOwnedDrydockNotePtrOutput() UserOwnedDrydockNotePtrOutput
	ToUserOwnedDrydockNotePtrOutputWithContext(context.Context) UserOwnedDrydockNotePtrOutput
}

type userOwnedDrydockNotePtrType UserOwnedDrydockNoteArgs

func UserOwnedDrydockNotePtr(v *UserOwnedDrydockNoteArgs) UserOwnedDrydockNotePtrInput {
	return (*userOwnedDrydockNotePtrType)(v)
}

func (*userOwnedDrydockNotePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserOwnedDrydockNote)(nil)).Elem()
}

func (i *userOwnedDrydockNotePtrType) ToUserOwnedDrydockNotePtrOutput() UserOwnedDrydockNotePtrOutput {
	return i.ToUserOwnedDrydockNotePtrOutputWithContext(context.Background())
}

func (i *userOwnedDrydockNotePtrType) ToUserOwnedDrydockNotePtrOutputWithContext(ctx context.Context) UserOwnedDrydockNotePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOwnedDrydockNotePtrOutput)
}

// An user owned drydock note references a Drydock ATTESTATION_AUTHORITY Note created by the user.
type UserOwnedDrydockNoteOutput struct{ *pulumi.OutputState }

func (UserOwnedDrydockNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserOwnedDrydockNote)(nil)).Elem()
}

func (o UserOwnedDrydockNoteOutput) ToUserOwnedDrydockNoteOutput() UserOwnedDrydockNoteOutput {
	return o
}

func (o UserOwnedDrydockNoteOutput) ToUserOwnedDrydockNoteOutputWithContext(ctx context.Context) UserOwnedDrydockNoteOutput {
	return o
}

func (o UserOwnedDrydockNoteOutput) ToUserOwnedDrydockNotePtrOutput() UserOwnedDrydockNotePtrOutput {
	return o.ToUserOwnedDrydockNotePtrOutputWithContext(context.Background())
}

func (o UserOwnedDrydockNoteOutput) ToUserOwnedDrydockNotePtrOutputWithContext(ctx context.Context) UserOwnedDrydockNotePtrOutput {
	return o.ApplyT(func(v UserOwnedDrydockNote) *UserOwnedDrydockNote {
		return &v
	}).(UserOwnedDrydockNotePtrOutput)
}

// Output only. This field will contain the service account email address that this Attestor will use as the principal when querying Container Analysis. Attestor administrators must grant this service account the IAM role needed to read attestations from the note_reference in Container Analysis (`containeranalysis.notes.occurrences.viewer`). This email address is fixed for the lifetime of the Attestor, but callers should not make any other assumptions about the service account email; future versions may use an email based on a different naming pattern.
func (o UserOwnedDrydockNoteOutput) DelegationServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserOwnedDrydockNote) *string { return v.DelegationServiceAccountEmail }).(pulumi.StringPtrOutput)
}

// Required. The Drydock resource name of a ATTESTATION_AUTHORITY Note, created by the user, in the format: `projects/*/notes/*` (or the legacy `providers/*/notes/*`). This field may not be updated. An attestation by this attestor is stored as a Drydock ATTESTATION_AUTHORITY Occurrence that names a container image and that links to this Note. Drydock is an external dependency.
func (o UserOwnedDrydockNoteOutput) NoteReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserOwnedDrydockNote) *string { return v.NoteReference }).(pulumi.StringPtrOutput)
}

// Optional. Public keys that verify attestations signed by this attestor. This field may be updated. If this field is non-empty, one of the specified public keys must verify that an attestation was signed by this attestor for the image specified in the admission request. If this field is empty, this attestor always returns that no valid attestations exist.
func (o UserOwnedDrydockNoteOutput) PublicKeys() AttestorPublicKeyArrayOutput {
	return o.ApplyT(func(v UserOwnedDrydockNote) []AttestorPublicKey { return v.PublicKeys }).(AttestorPublicKeyArrayOutput)
}

type UserOwnedDrydockNotePtrOutput struct{ *pulumi.OutputState }

func (UserOwnedDrydockNotePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserOwnedDrydockNote)(nil)).Elem()
}

func (o UserOwnedDrydockNotePtrOutput) ToUserOwnedDrydockNotePtrOutput() UserOwnedDrydockNotePtrOutput {
	return o
}

func (o UserOwnedDrydockNotePtrOutput) ToUserOwnedDrydockNotePtrOutputWithContext(ctx context.Context) UserOwnedDrydockNotePtrOutput {
	return o
}

func (o UserOwnedDrydockNotePtrOutput) Elem() UserOwnedDrydockNoteOutput {
	return o.ApplyT(func(v *UserOwnedDrydockNote) UserOwnedDrydockNote { return *v }).(UserOwnedDrydockNoteOutput)
}

// Output only. This field will contain the service account email address that this Attestor will use as the principal when querying Container Analysis. Attestor administrators must grant this service account the IAM role needed to read attestations from the note_reference in Container Analysis (`containeranalysis.notes.occurrences.viewer`). This email address is fixed for the lifetime of the Attestor, but callers should not make any other assumptions about the service account email; future versions may use an email based on a different naming pattern.
func (o UserOwnedDrydockNotePtrOutput) DelegationServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserOwnedDrydockNote) *string {
		if v == nil {
			return nil
		}
		return v.DelegationServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

// Required. The Drydock resource name of a ATTESTATION_AUTHORITY Note, created by the user, in the format: `projects/*/notes/*` (or the legacy `providers/*/notes/*`). This field may not be updated. An attestation by this attestor is stored as a Drydock ATTESTATION_AUTHORITY Occurrence that names a container image and that links to this Note. Drydock is an external dependency.
func (o UserOwnedDrydockNotePtrOutput) NoteReference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserOwnedDrydockNote) *string {
		if v == nil {
			return nil
		}
		return v.NoteReference
	}).(pulumi.StringPtrOutput)
}

// Optional. Public keys that verify attestations signed by this attestor. This field may be updated. If this field is non-empty, one of the specified public keys must verify that an attestation was signed by this attestor for the image specified in the admission request. If this field is empty, this attestor always returns that no valid attestations exist.
func (o UserOwnedDrydockNotePtrOutput) PublicKeys() AttestorPublicKeyArrayOutput {
	return o.ApplyT(func(v *UserOwnedDrydockNote) []AttestorPublicKey {
		if v == nil {
			return nil
		}
		return v.PublicKeys
	}).(AttestorPublicKeyArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(AttestorPublicKeyOutput{})
	pulumi.RegisterOutputType(AttestorPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(IamPolicyOutput{})
	pulumi.RegisterOutputType(IamPolicyPtrOutput{})
	pulumi.RegisterOutputType(PkixPublicKeyOutput{})
	pulumi.RegisterOutputType(PkixPublicKeyPtrOutput{})
	pulumi.RegisterOutputType(UserOwnedDrydockNoteOutput{})
	pulumi.RegisterOutputType(UserOwnedDrydockNotePtrOutput{})
}
