// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
type AttestorIamPolicy struct {
	pulumi.CustomResourceState
}

// NewAttestorIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewAttestorIamPolicy(ctx *pulumi.Context,
	name string, args *AttestorIamPolicyArgs, opts ...pulumi.ResourceOption) (*AttestorIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttestorsId == nil {
		return nil, errors.New("invalid value for required argument 'AttestorsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource AttestorIamPolicy
	err := ctx.RegisterResource("google-cloud:binaryauthorization/v1beta1:AttestorIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttestorIamPolicy gets an existing AttestorIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttestorIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttestorIamPolicyState, opts ...pulumi.ResourceOption) (*AttestorIamPolicy, error) {
	var resource AttestorIamPolicy
	err := ctx.ReadResource("google-cloud:binaryauthorization/v1beta1:AttestorIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AttestorIamPolicy resources.
type attestorIamPolicyState struct {
}

type AttestorIamPolicyState struct {
}

func (AttestorIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*attestorIamPolicyState)(nil)).Elem()
}

type attestorIamPolicyArgs struct {
	AttestorsId string `pulumi:"attestorsId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *IamPolicy `pulumi:"policy"`
	ProjectsId string     `pulumi:"projectsId"`
}

// The set of arguments for constructing a AttestorIamPolicy resource.
type AttestorIamPolicyArgs struct {
	AttestorsId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     IamPolicyPtrInput
	ProjectsId pulumi.StringInput
}

func (AttestorIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attestorIamPolicyArgs)(nil)).Elem()
}

type AttestorIamPolicyInput interface {
	pulumi.Input

	ToAttestorIamPolicyOutput() AttestorIamPolicyOutput
	ToAttestorIamPolicyOutputWithContext(ctx context.Context) AttestorIamPolicyOutput
}

func (*AttestorIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestorIamPolicy)(nil))
}

func (i *AttestorIamPolicy) ToAttestorIamPolicyOutput() AttestorIamPolicyOutput {
	return i.ToAttestorIamPolicyOutputWithContext(context.Background())
}

func (i *AttestorIamPolicy) ToAttestorIamPolicyOutputWithContext(ctx context.Context) AttestorIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttestorIamPolicyOutput)
}

type AttestorIamPolicyOutput struct {
	*pulumi.OutputState
}

func (AttestorIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttestorIamPolicy)(nil))
}

func (o AttestorIamPolicyOutput) ToAttestorIamPolicyOutput() AttestorIamPolicyOutput {
	return o
}

func (o AttestorIamPolicyOutput) ToAttestorIamPolicyOutputWithContext(ctx context.Context) AttestorIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AttestorIamPolicyOutput{})
}
