// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a lake resource.
// Auto-naming is currently not supported for this resource.
type Lake struct {
	pulumi.CustomResourceState

	// Aggregated status of the underlying assets of the lake.
	AssetStatus GoogleCloudDataplexV1AssetStatusResponseOutput `pulumi:"assetStatus"`
	// The time when the lake was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. Description of the lake.
	Description pulumi.StringOutput `pulumi:"description"`
	// Optional. User friendly display name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Optional. User-defined labels for the lake.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Required. Lake identifier. This ID will be used to generate names such as database and dataset names when publishing metadata to Hive Metastore and BigQuery. * Must contain only lowercase letters, numbers and hyphens. * Must start with a letter. * Must end with a number or a letter. * Must be between 1-63 characters. * Must be unique within the customer project / location.
	LakeId   pulumi.StringOutput `pulumi:"lakeId"`
	Location pulumi.StringOutput `pulumi:"location"`
	// Optional. Settings to manage lake and Dataproc Metastore service instance association.
	Metastore GoogleCloudDataplexV1LakeMetastoreResponseOutput `pulumi:"metastore"`
	// Metastore status of the lake.
	MetastoreStatus GoogleCloudDataplexV1LakeMetastoreStatusResponseOutput `pulumi:"metastoreStatus"`
	// The relative resource name of the lake, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Service account associated with this lake. This service account must be authorized to access or operate on resources managed by the lake.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// Current state of the lake.
	State pulumi.StringOutput `pulumi:"state"`
	// System generated globally unique ID for the lake. This ID will be different if the lake is deleted and re-created with the same name.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The time when the lake was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Optional. Only validate the request, but do not perform mutations. The default is false.
	ValidateOnly pulumi.StringPtrOutput `pulumi:"validateOnly"`
}

// NewLake registers a new resource with the given unique name, arguments, and options.
func NewLake(ctx *pulumi.Context,
	name string, args *LakeArgs, opts ...pulumi.ResourceOption) (*Lake, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LakeId == nil {
		return nil, errors.New("invalid value for required argument 'LakeId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"lakeId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource Lake
	err := ctx.RegisterResource("google-native:dataplex/v1:Lake", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLake gets an existing Lake resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLake(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LakeState, opts ...pulumi.ResourceOption) (*Lake, error) {
	var resource Lake
	err := ctx.ReadResource("google-native:dataplex/v1:Lake", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Lake resources.
type lakeState struct {
}

type LakeState struct {
}

func (LakeState) ElementType() reflect.Type {
	return reflect.TypeOf((*lakeState)(nil)).Elem()
}

type lakeArgs struct {
	// Optional. Description of the lake.
	Description *string `pulumi:"description"`
	// Optional. User friendly display name.
	DisplayName *string `pulumi:"displayName"`
	// Optional. User-defined labels for the lake.
	Labels map[string]string `pulumi:"labels"`
	// Required. Lake identifier. This ID will be used to generate names such as database and dataset names when publishing metadata to Hive Metastore and BigQuery. * Must contain only lowercase letters, numbers and hyphens. * Must start with a letter. * Must end with a number or a letter. * Must be between 1-63 characters. * Must be unique within the customer project / location.
	LakeId   string  `pulumi:"lakeId"`
	Location *string `pulumi:"location"`
	// Optional. Settings to manage lake and Dataproc Metastore service instance association.
	Metastore *GoogleCloudDataplexV1LakeMetastore `pulumi:"metastore"`
	Project   *string                             `pulumi:"project"`
	// Optional. Only validate the request, but do not perform mutations. The default is false.
	ValidateOnly *string `pulumi:"validateOnly"`
}

// The set of arguments for constructing a Lake resource.
type LakeArgs struct {
	// Optional. Description of the lake.
	Description pulumi.StringPtrInput
	// Optional. User friendly display name.
	DisplayName pulumi.StringPtrInput
	// Optional. User-defined labels for the lake.
	Labels pulumi.StringMapInput
	// Required. Lake identifier. This ID will be used to generate names such as database and dataset names when publishing metadata to Hive Metastore and BigQuery. * Must contain only lowercase letters, numbers and hyphens. * Must start with a letter. * Must end with a number or a letter. * Must be between 1-63 characters. * Must be unique within the customer project / location.
	LakeId   pulumi.StringInput
	Location pulumi.StringPtrInput
	// Optional. Settings to manage lake and Dataproc Metastore service instance association.
	Metastore GoogleCloudDataplexV1LakeMetastorePtrInput
	Project   pulumi.StringPtrInput
	// Optional. Only validate the request, but do not perform mutations. The default is false.
	ValidateOnly pulumi.StringPtrInput
}

func (LakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lakeArgs)(nil)).Elem()
}

type LakeInput interface {
	pulumi.Input

	ToLakeOutput() LakeOutput
	ToLakeOutputWithContext(ctx context.Context) LakeOutput
}

func (*Lake) ElementType() reflect.Type {
	return reflect.TypeOf((**Lake)(nil)).Elem()
}

func (i *Lake) ToLakeOutput() LakeOutput {
	return i.ToLakeOutputWithContext(context.Background())
}

func (i *Lake) ToLakeOutputWithContext(ctx context.Context) LakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeOutput)
}

type LakeOutput struct{ *pulumi.OutputState }

func (LakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Lake)(nil)).Elem()
}

func (o LakeOutput) ToLakeOutput() LakeOutput {
	return o
}

func (o LakeOutput) ToLakeOutputWithContext(ctx context.Context) LakeOutput {
	return o
}

// Aggregated status of the underlying assets of the lake.
func (o LakeOutput) AssetStatus() GoogleCloudDataplexV1AssetStatusResponseOutput {
	return o.ApplyT(func(v *Lake) GoogleCloudDataplexV1AssetStatusResponseOutput { return v.AssetStatus }).(GoogleCloudDataplexV1AssetStatusResponseOutput)
}

// The time when the lake was created.
func (o LakeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Lake) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Description of the lake.
func (o LakeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Lake) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Optional. User friendly display name.
func (o LakeOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Lake) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Optional. User-defined labels for the lake.
func (o LakeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Lake) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Required. Lake identifier. This ID will be used to generate names such as database and dataset names when publishing metadata to Hive Metastore and BigQuery. * Must contain only lowercase letters, numbers and hyphens. * Must start with a letter. * Must end with a number or a letter. * Must be between 1-63 characters. * Must be unique within the customer project / location.
func (o LakeOutput) LakeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Lake) pulumi.StringOutput { return v.LakeId }).(pulumi.StringOutput)
}

func (o LakeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Lake) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Optional. Settings to manage lake and Dataproc Metastore service instance association.
func (o LakeOutput) Metastore() GoogleCloudDataplexV1LakeMetastoreResponseOutput {
	return o.ApplyT(func(v *Lake) GoogleCloudDataplexV1LakeMetastoreResponseOutput { return v.Metastore }).(GoogleCloudDataplexV1LakeMetastoreResponseOutput)
}

// Metastore status of the lake.
func (o LakeOutput) MetastoreStatus() GoogleCloudDataplexV1LakeMetastoreStatusResponseOutput {
	return o.ApplyT(func(v *Lake) GoogleCloudDataplexV1LakeMetastoreStatusResponseOutput { return v.MetastoreStatus }).(GoogleCloudDataplexV1LakeMetastoreStatusResponseOutput)
}

// The relative resource name of the lake, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}.
func (o LakeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Lake) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LakeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Lake) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Service account associated with this lake. This service account must be authorized to access or operate on resources managed by the lake.
func (o LakeOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *Lake) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Current state of the lake.
func (o LakeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Lake) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// System generated globally unique ID for the lake. This ID will be different if the lake is deleted and re-created with the same name.
func (o LakeOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Lake) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The time when the lake was last updated.
func (o LakeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Lake) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Optional. Only validate the request, but do not perform mutations. The default is false.
func (o LakeOutput) ValidateOnly() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Lake) pulumi.StringPtrOutput { return v.ValidateOnly }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LakeInput)(nil)).Elem(), &Lake{})
	pulumi.RegisterOutputType(LakeOutput{})
}
