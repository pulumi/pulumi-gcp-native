// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a DataTaxonomy resource.
// Auto-naming is currently not supported for this resource.
type DataTaxonomy struct {
	pulumi.CustomResourceState

	// The number of attributes in the DataTaxonomy.
	AttributeCount pulumi.IntOutput `pulumi:"attributeCount"`
	// The number of classes in the DataTaxonomy.
	ClassCount pulumi.IntOutput `pulumi:"classCount"`
	// The time when the DataTaxonomy was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Required. DataTaxonomy identifier. * Must contain only lowercase letters, numbers and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the Project.
	DataTaxonomyId pulumi.StringOutput `pulumi:"dataTaxonomyId"`
	// Optional. Description of the DataTaxonomy.
	Description pulumi.StringOutput `pulumi:"description"`
	// Optional. User friendly display name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Optional. User-defined labels for the DataTaxonomy.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// The relative resource name of the DataTaxonomy, of the form: projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// System generated globally unique ID for the dataTaxonomy. This ID will be different if the DataTaxonomy is deleted and re-created with the same name.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The time when the DataTaxonomy was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDataTaxonomy registers a new resource with the given unique name, arguments, and options.
func NewDataTaxonomy(ctx *pulumi.Context,
	name string, args *DataTaxonomyArgs, opts ...pulumi.ResourceOption) (*DataTaxonomy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataTaxonomyId == nil {
		return nil, errors.New("invalid value for required argument 'DataTaxonomyId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"dataTaxonomyId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataTaxonomy
	err := ctx.RegisterResource("google-native:dataplex/v1:DataTaxonomy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataTaxonomy gets an existing DataTaxonomy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataTaxonomy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataTaxonomyState, opts ...pulumi.ResourceOption) (*DataTaxonomy, error) {
	var resource DataTaxonomy
	err := ctx.ReadResource("google-native:dataplex/v1:DataTaxonomy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataTaxonomy resources.
type dataTaxonomyState struct {
}

type DataTaxonomyState struct {
}

func (DataTaxonomyState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataTaxonomyState)(nil)).Elem()
}

type dataTaxonomyArgs struct {
	// Required. DataTaxonomy identifier. * Must contain only lowercase letters, numbers and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the Project.
	DataTaxonomyId string `pulumi:"dataTaxonomyId"`
	// Optional. Description of the DataTaxonomy.
	Description *string `pulumi:"description"`
	// Optional. User friendly display name.
	DisplayName *string `pulumi:"displayName"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Optional. User-defined labels for the DataTaxonomy.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	Project  *string           `pulumi:"project"`
}

// The set of arguments for constructing a DataTaxonomy resource.
type DataTaxonomyArgs struct {
	// Required. DataTaxonomy identifier. * Must contain only lowercase letters, numbers and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the Project.
	DataTaxonomyId pulumi.StringInput
	// Optional. Description of the DataTaxonomy.
	Description pulumi.StringPtrInput
	// Optional. User friendly display name.
	DisplayName pulumi.StringPtrInput
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Optional. User-defined labels for the DataTaxonomy.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
}

func (DataTaxonomyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataTaxonomyArgs)(nil)).Elem()
}

type DataTaxonomyInput interface {
	pulumi.Input

	ToDataTaxonomyOutput() DataTaxonomyOutput
	ToDataTaxonomyOutputWithContext(ctx context.Context) DataTaxonomyOutput
}

func (*DataTaxonomy) ElementType() reflect.Type {
	return reflect.TypeOf((**DataTaxonomy)(nil)).Elem()
}

func (i *DataTaxonomy) ToDataTaxonomyOutput() DataTaxonomyOutput {
	return i.ToDataTaxonomyOutputWithContext(context.Background())
}

func (i *DataTaxonomy) ToDataTaxonomyOutputWithContext(ctx context.Context) DataTaxonomyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataTaxonomyOutput)
}

type DataTaxonomyOutput struct{ *pulumi.OutputState }

func (DataTaxonomyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataTaxonomy)(nil)).Elem()
}

func (o DataTaxonomyOutput) ToDataTaxonomyOutput() DataTaxonomyOutput {
	return o
}

func (o DataTaxonomyOutput) ToDataTaxonomyOutputWithContext(ctx context.Context) DataTaxonomyOutput {
	return o
}

// The number of attributes in the DataTaxonomy.
func (o DataTaxonomyOutput) AttributeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *DataTaxonomy) pulumi.IntOutput { return v.AttributeCount }).(pulumi.IntOutput)
}

// The number of classes in the DataTaxonomy.
func (o DataTaxonomyOutput) ClassCount() pulumi.IntOutput {
	return o.ApplyT(func(v *DataTaxonomy) pulumi.IntOutput { return v.ClassCount }).(pulumi.IntOutput)
}

// The time when the DataTaxonomy was created.
func (o DataTaxonomyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTaxonomy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Required. DataTaxonomy identifier. * Must contain only lowercase letters, numbers and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the Project.
func (o DataTaxonomyOutput) DataTaxonomyId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTaxonomy) pulumi.StringOutput { return v.DataTaxonomyId }).(pulumi.StringOutput)
}

// Optional. Description of the DataTaxonomy.
func (o DataTaxonomyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTaxonomy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Optional. User friendly display name.
func (o DataTaxonomyOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTaxonomy) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
func (o DataTaxonomyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTaxonomy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Optional. User-defined labels for the DataTaxonomy.
func (o DataTaxonomyOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataTaxonomy) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o DataTaxonomyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTaxonomy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The relative resource name of the DataTaxonomy, of the form: projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}.
func (o DataTaxonomyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTaxonomy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DataTaxonomyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTaxonomy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// System generated globally unique ID for the dataTaxonomy. This ID will be different if the DataTaxonomy is deleted and re-created with the same name.
func (o DataTaxonomyOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTaxonomy) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The time when the DataTaxonomy was last updated.
func (o DataTaxonomyOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTaxonomy) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataTaxonomyInput)(nil)).Elem(), &DataTaxonomy{})
	pulumi.RegisterOutputType(DataTaxonomyOutput{})
}
