// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a lake resource.
func LookupLake(ctx *pulumi.Context, args *LookupLakeArgs, opts ...pulumi.InvokeOption) (*LookupLakeResult, error) {
	var rv LookupLakeResult
	err := ctx.Invoke("google-native:dataplex/v1:getLake", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupLakeArgs struct {
	LakeId   string  `pulumi:"lakeId"`
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
}

type LookupLakeResult struct {
	// Aggregated status of the underlying assets of the lake.
	AssetStatus GoogleCloudDataplexV1AssetStatusResponse `pulumi:"assetStatus"`
	// The time when the lake was created.
	CreateTime string `pulumi:"createTime"`
	// Optional. Description of the lake.
	Description string `pulumi:"description"`
	// Optional. User friendly display name.
	DisplayName string `pulumi:"displayName"`
	// Optional. User-defined labels for the lake.
	Labels map[string]string `pulumi:"labels"`
	// Optional. Settings to manage lake and Dataproc Metastore service instance association.
	Metastore GoogleCloudDataplexV1LakeMetastoreResponse `pulumi:"metastore"`
	// Metastore status of the lake.
	MetastoreStatus GoogleCloudDataplexV1LakeMetastoreStatusResponse `pulumi:"metastoreStatus"`
	// The relative resource name of the lake, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}.
	Name string `pulumi:"name"`
	// Service account associated with this lake. This service account must be authorized to access or operate on resources managed by the lake.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Current state of the lake.
	State string `pulumi:"state"`
	// System generated globally unique ID for the lake. This ID will be different if the lake is deleted and re-created with the same name.
	Uid string `pulumi:"uid"`
	// The time when the lake was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupLakeOutput(ctx *pulumi.Context, args LookupLakeOutputArgs, opts ...pulumi.InvokeOption) LookupLakeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLakeResult, error) {
			args := v.(LookupLakeArgs)
			r, err := LookupLake(ctx, &args, opts...)
			var s LookupLakeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLakeResultOutput)
}

type LookupLakeOutputArgs struct {
	LakeId   pulumi.StringInput    `pulumi:"lakeId"`
	Location pulumi.StringInput    `pulumi:"location"`
	Project  pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupLakeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLakeArgs)(nil)).Elem()
}

type LookupLakeResultOutput struct{ *pulumi.OutputState }

func (LookupLakeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLakeResult)(nil)).Elem()
}

func (o LookupLakeResultOutput) ToLookupLakeResultOutput() LookupLakeResultOutput {
	return o
}

func (o LookupLakeResultOutput) ToLookupLakeResultOutputWithContext(ctx context.Context) LookupLakeResultOutput {
	return o
}

// Aggregated status of the underlying assets of the lake.
func (o LookupLakeResultOutput) AssetStatus() GoogleCloudDataplexV1AssetStatusResponseOutput {
	return o.ApplyT(func(v LookupLakeResult) GoogleCloudDataplexV1AssetStatusResponse { return v.AssetStatus }).(GoogleCloudDataplexV1AssetStatusResponseOutput)
}

// The time when the lake was created.
func (o LookupLakeResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLakeResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Description of the lake.
func (o LookupLakeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLakeResult) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. User friendly display name.
func (o LookupLakeResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLakeResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Optional. User-defined labels for the lake.
func (o LookupLakeResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupLakeResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Optional. Settings to manage lake and Dataproc Metastore service instance association.
func (o LookupLakeResultOutput) Metastore() GoogleCloudDataplexV1LakeMetastoreResponseOutput {
	return o.ApplyT(func(v LookupLakeResult) GoogleCloudDataplexV1LakeMetastoreResponse { return v.Metastore }).(GoogleCloudDataplexV1LakeMetastoreResponseOutput)
}

// Metastore status of the lake.
func (o LookupLakeResultOutput) MetastoreStatus() GoogleCloudDataplexV1LakeMetastoreStatusResponseOutput {
	return o.ApplyT(func(v LookupLakeResult) GoogleCloudDataplexV1LakeMetastoreStatusResponse { return v.MetastoreStatus }).(GoogleCloudDataplexV1LakeMetastoreStatusResponseOutput)
}

// The relative resource name of the lake, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}.
func (o LookupLakeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLakeResult) string { return v.Name }).(pulumi.StringOutput)
}

// Service account associated with this lake. This service account must be authorized to access or operate on resources managed by the lake.
func (o LookupLakeResultOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLakeResult) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Current state of the lake.
func (o LookupLakeResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLakeResult) string { return v.State }).(pulumi.StringOutput)
}

// System generated globally unique ID for the lake. This ID will be different if the lake is deleted and re-created with the same name.
func (o LookupLakeResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLakeResult) string { return v.Uid }).(pulumi.StringOutput)
}

// The time when the lake was last updated.
func (o LookupLakeResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLakeResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLakeResultOutput{})
}
