// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get a metadata partition of an entity.
func LookupPartition(ctx *pulumi.Context, args *LookupPartitionArgs, opts ...pulumi.InvokeOption) (*LookupPartitionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPartitionResult
	err := ctx.Invoke("google-native:dataplex/v1:getPartition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPartitionArgs struct {
	EntityId    string  `pulumi:"entityId"`
	LakeId      string  `pulumi:"lakeId"`
	Location    string  `pulumi:"location"`
	PartitionId string  `pulumi:"partitionId"`
	Project     *string `pulumi:"project"`
	Zone        string  `pulumi:"zone"`
}

type LookupPartitionResult struct {
	// Optional. The etag for this partition.
	Etag string `pulumi:"etag"`
	// Immutable. The location of the entity data within the partition, for example, gs://bucket/path/to/entity/key1=value1/key2=value2. Or projects//datasets//tables/
	Location string `pulumi:"location"`
	// Partition values used in the HTTP URL must be double encoded. For example, url_encode(url_encode(value)) can be used to encode "US:CA/CA#Sunnyvale so that the request URL ends with "/partitions/US%253ACA/CA%2523Sunnyvale". The name field in the response retains the encoded format.
	Name string `pulumi:"name"`
	// Immutable. The set of values representing the partition, which correspond to the partition schema defined in the parent entity.
	Values []string `pulumi:"values"`
}

func LookupPartitionOutput(ctx *pulumi.Context, args LookupPartitionOutputArgs, opts ...pulumi.InvokeOption) LookupPartitionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPartitionResult, error) {
			args := v.(LookupPartitionArgs)
			r, err := LookupPartition(ctx, &args, opts...)
			var s LookupPartitionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPartitionResultOutput)
}

type LookupPartitionOutputArgs struct {
	EntityId    pulumi.StringInput    `pulumi:"entityId"`
	LakeId      pulumi.StringInput    `pulumi:"lakeId"`
	Location    pulumi.StringInput    `pulumi:"location"`
	PartitionId pulumi.StringInput    `pulumi:"partitionId"`
	Project     pulumi.StringPtrInput `pulumi:"project"`
	Zone        pulumi.StringInput    `pulumi:"zone"`
}

func (LookupPartitionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPartitionArgs)(nil)).Elem()
}

type LookupPartitionResultOutput struct{ *pulumi.OutputState }

func (LookupPartitionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPartitionResult)(nil)).Elem()
}

func (o LookupPartitionResultOutput) ToLookupPartitionResultOutput() LookupPartitionResultOutput {
	return o
}

func (o LookupPartitionResultOutput) ToLookupPartitionResultOutputWithContext(ctx context.Context) LookupPartitionResultOutput {
	return o
}

func (o LookupPartitionResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupPartitionResult] {
	return pulumix.Output[LookupPartitionResult]{
		OutputState: o.OutputState,
	}
}

// Optional. The etag for this partition.
func (o LookupPartitionResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartitionResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Immutable. The location of the entity data within the partition, for example, gs://bucket/path/to/entity/key1=value1/key2=value2. Or projects//datasets//tables/
func (o LookupPartitionResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartitionResult) string { return v.Location }).(pulumi.StringOutput)
}

// Partition values used in the HTTP URL must be double encoded. For example, url_encode(url_encode(value)) can be used to encode "US:CA/CA#Sunnyvale so that the request URL ends with "/partitions/US%253ACA/CA%2523Sunnyvale". The name field in the response retains the encoded format.
func (o LookupPartitionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPartitionResult) string { return v.Name }).(pulumi.StringOutput)
}

// Immutable. The set of values representing the partition, which correspond to the partition schema defined in the parent entity.
func (o LookupPartitionResultOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPartitionResult) []string { return v.Values }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPartitionResultOutput{})
}
