// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a DataTaxonomy resource.
func LookupDataTaxonomy(ctx *pulumi.Context, args *LookupDataTaxonomyArgs, opts ...pulumi.InvokeOption) (*LookupDataTaxonomyResult, error) {
	var rv LookupDataTaxonomyResult
	err := ctx.Invoke("google-native:dataplex/v1:getDataTaxonomy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDataTaxonomyArgs struct {
	DataTaxonomyId string  `pulumi:"dataTaxonomyId"`
	Location       string  `pulumi:"location"`
	Project        *string `pulumi:"project"`
}

type LookupDataTaxonomyResult struct {
	// The number of attributes in the DataTaxonomy.
	AttributeCount int `pulumi:"attributeCount"`
	// The time when the DataTaxonomy was created.
	CreateTime string `pulumi:"createTime"`
	// Optional. Description of the DataTaxonomy.
	Description string `pulumi:"description"`
	// Optional. User friendly display name.
	DisplayName string `pulumi:"displayName"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag string `pulumi:"etag"`
	// Optional. User-defined labels for the DataTaxonomy.
	Labels map[string]string `pulumi:"labels"`
	// The relative resource name of the DataTaxonomy, of the form: projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}.
	Name string `pulumi:"name"`
	// System generated globally unique ID for the dataTaxonomy. This ID will be different if the DataTaxonomy is deleted and re-created with the same name.
	Uid string `pulumi:"uid"`
	// The time when the DataTaxonomy was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupDataTaxonomyOutput(ctx *pulumi.Context, args LookupDataTaxonomyOutputArgs, opts ...pulumi.InvokeOption) LookupDataTaxonomyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDataTaxonomyResult, error) {
			args := v.(LookupDataTaxonomyArgs)
			r, err := LookupDataTaxonomy(ctx, &args, opts...)
			var s LookupDataTaxonomyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDataTaxonomyResultOutput)
}

type LookupDataTaxonomyOutputArgs struct {
	DataTaxonomyId pulumi.StringInput    `pulumi:"dataTaxonomyId"`
	Location       pulumi.StringInput    `pulumi:"location"`
	Project        pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupDataTaxonomyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataTaxonomyArgs)(nil)).Elem()
}

type LookupDataTaxonomyResultOutput struct{ *pulumi.OutputState }

func (LookupDataTaxonomyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataTaxonomyResult)(nil)).Elem()
}

func (o LookupDataTaxonomyResultOutput) ToLookupDataTaxonomyResultOutput() LookupDataTaxonomyResultOutput {
	return o
}

func (o LookupDataTaxonomyResultOutput) ToLookupDataTaxonomyResultOutputWithContext(ctx context.Context) LookupDataTaxonomyResultOutput {
	return o
}

// The number of attributes in the DataTaxonomy.
func (o LookupDataTaxonomyResultOutput) AttributeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDataTaxonomyResult) int { return v.AttributeCount }).(pulumi.IntOutput)
}

// The time when the DataTaxonomy was created.
func (o LookupDataTaxonomyResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataTaxonomyResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Description of the DataTaxonomy.
func (o LookupDataTaxonomyResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataTaxonomyResult) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. User friendly display name.
func (o LookupDataTaxonomyResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataTaxonomyResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
func (o LookupDataTaxonomyResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataTaxonomyResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Optional. User-defined labels for the DataTaxonomy.
func (o LookupDataTaxonomyResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDataTaxonomyResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The relative resource name of the DataTaxonomy, of the form: projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}.
func (o LookupDataTaxonomyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataTaxonomyResult) string { return v.Name }).(pulumi.StringOutput)
}

// System generated globally unique ID for the dataTaxonomy. This ID will be different if the DataTaxonomy is deleted and re-created with the same name.
func (o LookupDataTaxonomyResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataTaxonomyResult) string { return v.Uid }).(pulumi.StringOutput)
}

// The time when the DataTaxonomy was last updated.
func (o LookupDataTaxonomyResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataTaxonomyResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDataTaxonomyResultOutput{})
}
