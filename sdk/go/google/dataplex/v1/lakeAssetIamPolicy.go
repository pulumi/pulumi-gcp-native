// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type LakeAssetIamPolicy struct {
	pulumi.CustomResourceState

	AssetId pulumi.StringOutput `pulumi:"assetId"`
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs GoogleIamV1AuditConfigResponseArrayOutput `pulumi:"auditConfigs"`
	// Associates a list of members, or principals, with a role. Optionally, may specify a condition that determines how and when the bindings are applied. Each of the bindings must contain at least one principal.The bindings in a Policy can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the bindings grant 50 different roles to user:alice@example.com, and not to any other principal, then you can add another 1,450 principals to the bindings in the Policy.
	Bindings GoogleIamV1BindingResponseArrayOutput `pulumi:"bindings"`
	// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An etag is returned in the response to getIamPolicy, and systems are expected to put that etag in the request to setIamPolicy to ensure that their change will be applied to the same version of the policy.Important: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.
	Etag     pulumi.StringOutput `pulumi:"etag"`
	LakeId   pulumi.StringOutput `pulumi:"lakeId"`
	Location pulumi.StringOutput `pulumi:"location"`
	Project  pulumi.StringOutput `pulumi:"project"`
	// Specifies the format of the policy.Valid values are 0, 1, and 3. Requests that specify an invalid value are rejected.Any operation that affects conditional role bindings must specify version 3. This requirement applies to the following operations: Getting a policy that includes a conditional role binding Adding a conditional role binding to a policy Changing a conditional role binding in a policy Removing any role binding, with or without a condition, from a policy that includes conditionsImportant: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntOutput    `pulumi:"version"`
	Zone    pulumi.StringOutput `pulumi:"zone"`
}

// NewLakeAssetIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewLakeAssetIamPolicy(ctx *pulumi.Context,
	name string, args *LakeAssetIamPolicyArgs, opts ...pulumi.ResourceOption) (*LakeAssetIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssetId == nil {
		return nil, errors.New("invalid value for required argument 'AssetId'")
	}
	if args.LakeId == nil {
		return nil, errors.New("invalid value for required argument 'LakeId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"assetId",
		"lakeId",
		"location",
		"project",
		"zone",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LakeAssetIamPolicy
	err := ctx.RegisterResource("google-native:dataplex/v1:LakeAssetIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLakeAssetIamPolicy gets an existing LakeAssetIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLakeAssetIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LakeAssetIamPolicyState, opts ...pulumi.ResourceOption) (*LakeAssetIamPolicy, error) {
	var resource LakeAssetIamPolicy
	err := ctx.ReadResource("google-native:dataplex/v1:LakeAssetIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LakeAssetIamPolicy resources.
type lakeAssetIamPolicyState struct {
}

type LakeAssetIamPolicyState struct {
}

func (LakeAssetIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*lakeAssetIamPolicyState)(nil)).Elem()
}

type lakeAssetIamPolicyArgs struct {
	AssetId string `pulumi:"assetId"`
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs []GoogleIamV1AuditConfig `pulumi:"auditConfigs"`
	// Associates a list of members, or principals, with a role. Optionally, may specify a condition that determines how and when the bindings are applied. Each of the bindings must contain at least one principal.The bindings in a Policy can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the bindings grant 50 different roles to user:alice@example.com, and not to any other principal, then you can add another 1,450 principals to the bindings in the Policy.
	Bindings []GoogleIamV1Binding `pulumi:"bindings"`
	// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An etag is returned in the response to getIamPolicy, and systems are expected to put that etag in the request to setIamPolicy to ensure that their change will be applied to the same version of the policy.Important: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.
	Etag     *string `pulumi:"etag"`
	LakeId   string  `pulumi:"lakeId"`
	Location *string `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used:paths: "bindings, etag"
	UpdateMask *string `pulumi:"updateMask"`
	// Specifies the format of the policy.Valid values are 0, 1, and 3. Requests that specify an invalid value are rejected.Any operation that affects conditional role bindings must specify version 3. This requirement applies to the following operations: Getting a policy that includes a conditional role binding Adding a conditional role binding to a policy Changing a conditional role binding in a policy Removing any role binding, with or without a condition, from a policy that includes conditionsImportant: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int    `pulumi:"version"`
	Zone    *string `pulumi:"zone"`
}

// The set of arguments for constructing a LakeAssetIamPolicy resource.
type LakeAssetIamPolicyArgs struct {
	AssetId pulumi.StringInput
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs GoogleIamV1AuditConfigArrayInput
	// Associates a list of members, or principals, with a role. Optionally, may specify a condition that determines how and when the bindings are applied. Each of the bindings must contain at least one principal.The bindings in a Policy can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the bindings grant 50 different roles to user:alice@example.com, and not to any other principal, then you can add another 1,450 principals to the bindings in the Policy.
	Bindings GoogleIamV1BindingArrayInput
	// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An etag is returned in the response to getIamPolicy, and systems are expected to put that etag in the request to setIamPolicy to ensure that their change will be applied to the same version of the policy.Important: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.
	Etag     pulumi.StringPtrInput
	LakeId   pulumi.StringInput
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used:paths: "bindings, etag"
	UpdateMask pulumi.StringPtrInput
	// Specifies the format of the policy.Valid values are 0, 1, and 3. Requests that specify an invalid value are rejected.Any operation that affects conditional role bindings must specify version 3. This requirement applies to the following operations: Getting a policy that includes a conditional role binding Adding a conditional role binding to a policy Changing a conditional role binding in a policy Removing any role binding, with or without a condition, from a policy that includes conditionsImportant: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput
	Zone    pulumi.StringPtrInput
}

func (LakeAssetIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lakeAssetIamPolicyArgs)(nil)).Elem()
}

type LakeAssetIamPolicyInput interface {
	pulumi.Input

	ToLakeAssetIamPolicyOutput() LakeAssetIamPolicyOutput
	ToLakeAssetIamPolicyOutputWithContext(ctx context.Context) LakeAssetIamPolicyOutput
}

func (*LakeAssetIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**LakeAssetIamPolicy)(nil)).Elem()
}

func (i *LakeAssetIamPolicy) ToLakeAssetIamPolicyOutput() LakeAssetIamPolicyOutput {
	return i.ToLakeAssetIamPolicyOutputWithContext(context.Background())
}

func (i *LakeAssetIamPolicy) ToLakeAssetIamPolicyOutputWithContext(ctx context.Context) LakeAssetIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeAssetIamPolicyOutput)
}

type LakeAssetIamPolicyOutput struct{ *pulumi.OutputState }

func (LakeAssetIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LakeAssetIamPolicy)(nil)).Elem()
}

func (o LakeAssetIamPolicyOutput) ToLakeAssetIamPolicyOutput() LakeAssetIamPolicyOutput {
	return o
}

func (o LakeAssetIamPolicyOutput) ToLakeAssetIamPolicyOutputWithContext(ctx context.Context) LakeAssetIamPolicyOutput {
	return o
}

func (o LakeAssetIamPolicyOutput) AssetId() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeAssetIamPolicy) pulumi.StringOutput { return v.AssetId }).(pulumi.StringOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o LakeAssetIamPolicyOutput) AuditConfigs() GoogleIamV1AuditConfigResponseArrayOutput {
	return o.ApplyT(func(v *LakeAssetIamPolicy) GoogleIamV1AuditConfigResponseArrayOutput { return v.AuditConfigs }).(GoogleIamV1AuditConfigResponseArrayOutput)
}

// Associates a list of members, or principals, with a role. Optionally, may specify a condition that determines how and when the bindings are applied. Each of the bindings must contain at least one principal.The bindings in a Policy can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the bindings grant 50 different roles to user:alice@example.com, and not to any other principal, then you can add another 1,450 principals to the bindings in the Policy.
func (o LakeAssetIamPolicyOutput) Bindings() GoogleIamV1BindingResponseArrayOutput {
	return o.ApplyT(func(v *LakeAssetIamPolicy) GoogleIamV1BindingResponseArrayOutput { return v.Bindings }).(GoogleIamV1BindingResponseArrayOutput)
}

// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An etag is returned in the response to getIamPolicy, and systems are expected to put that etag in the request to setIamPolicy to ensure that their change will be applied to the same version of the policy.Important: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.
func (o LakeAssetIamPolicyOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeAssetIamPolicy) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o LakeAssetIamPolicyOutput) LakeId() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeAssetIamPolicy) pulumi.StringOutput { return v.LakeId }).(pulumi.StringOutput)
}

func (o LakeAssetIamPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeAssetIamPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o LakeAssetIamPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeAssetIamPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies the format of the policy.Valid values are 0, 1, and 3. Requests that specify an invalid value are rejected.Any operation that affects conditional role bindings must specify version 3. This requirement applies to the following operations: Getting a policy that includes a conditional role binding Adding a conditional role binding to a policy Changing a conditional role binding in a policy Removing any role binding, with or without a condition, from a policy that includes conditionsImportant: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).
func (o LakeAssetIamPolicyOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *LakeAssetIamPolicy) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

func (o LakeAssetIamPolicyOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *LakeAssetIamPolicy) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LakeAssetIamPolicyInput)(nil)).Elem(), &LakeAssetIamPolicy{})
	pulumi.RegisterOutputType(LakeAssetIamPolicyOutput{})
}
