// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the specified IosApp.
func LookupIosApp(ctx *pulumi.Context, args *LookupIosAppArgs, opts ...pulumi.InvokeOption) (*LookupIosAppResult, error) {
	var rv LookupIosAppResult
	err := ctx.Invoke("google-native:firebase/v1beta1:getIosApp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupIosAppArgs struct {
	IosAppId string  `pulumi:"iosAppId"`
	Project  *string `pulumi:"project"`
}

type LookupIosAppResult struct {
	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `IosApp`. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's [configuration artifact](../../rest/v1beta1/projects.iosApps/getConfig). If `api_key_id` is not set in requests to [`iosApps.Create`](../../rest/v1beta1/projects.iosApps/create), then Firebase automatically associates an `api_key_id` with the `IosApp`. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or only have restrictions that are valid for the associated `IosApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API keys.
	ApiKeyId string `pulumi:"apiKeyId"`
	// Immutable. The globally unique, Firebase-assigned identifier for the `IosApp`. This identifier should be treated as an opaque token, as the data format is not specified.
	AppId string `pulumi:"appId"`
	// The automatically generated Apple ID assigned to the iOS app by Apple in the iOS App Store.
	AppStoreId string `pulumi:"appStoreId"`
	// Immutable. The canonical bundle ID of the iOS app as it would appear in the iOS AppStore.
	BundleId string `pulumi:"bundleId"`
	// The user-assigned display name for the `IosApp`.
	DisplayName string `pulumi:"displayName"`
	// This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding. Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.
	Etag string `pulumi:"etag"`
	// Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state.
	ExpireTime string `pulumi:"expireTime"`
	// The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER /iosApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.iosApps#IosApp.FIELDS.app_id)).
	Name string `pulumi:"name"`
	// Immutable. A user-assigned unique identifier of the parent FirebaseProject for the `IosApp`.
	Project string `pulumi:"project"`
	// The lifecycle state of the App.
	State string `pulumi:"state"`
	// The Apple Developer Team ID associated with the App in the App Store.
	TeamId string `pulumi:"teamId"`
}

func LookupIosAppOutput(ctx *pulumi.Context, args LookupIosAppOutputArgs, opts ...pulumi.InvokeOption) LookupIosAppResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIosAppResult, error) {
			args := v.(LookupIosAppArgs)
			r, err := LookupIosApp(ctx, &args, opts...)
			var s LookupIosAppResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIosAppResultOutput)
}

type LookupIosAppOutputArgs struct {
	IosAppId pulumi.StringInput    `pulumi:"iosAppId"`
	Project  pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupIosAppOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIosAppArgs)(nil)).Elem()
}

type LookupIosAppResultOutput struct{ *pulumi.OutputState }

func (LookupIosAppResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIosAppResult)(nil)).Elem()
}

func (o LookupIosAppResultOutput) ToLookupIosAppResultOutput() LookupIosAppResultOutput {
	return o
}

func (o LookupIosAppResultOutput) ToLookupIosAppResultOutputWithContext(ctx context.Context) LookupIosAppResultOutput {
	return o
}

// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `IosApp`. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's [configuration artifact](../../rest/v1beta1/projects.iosApps/getConfig). If `api_key_id` is not set in requests to [`iosApps.Create`](../../rest/v1beta1/projects.iosApps/create), then Firebase automatically associates an `api_key_id` with the `IosApp`. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or only have restrictions that are valid for the associated `IosApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API keys.
func (o LookupIosAppResultOutput) ApiKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIosAppResult) string { return v.ApiKeyId }).(pulumi.StringOutput)
}

// Immutable. The globally unique, Firebase-assigned identifier for the `IosApp`. This identifier should be treated as an opaque token, as the data format is not specified.
func (o LookupIosAppResultOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIosAppResult) string { return v.AppId }).(pulumi.StringOutput)
}

// The automatically generated Apple ID assigned to the iOS app by Apple in the iOS App Store.
func (o LookupIosAppResultOutput) AppStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIosAppResult) string { return v.AppStoreId }).(pulumi.StringOutput)
}

// Immutable. The canonical bundle ID of the iOS app as it would appear in the iOS AppStore.
func (o LookupIosAppResultOutput) BundleId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIosAppResult) string { return v.BundleId }).(pulumi.StringOutput)
}

// The user-assigned display name for the `IosApp`.
func (o LookupIosAppResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIosAppResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding. Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.
func (o LookupIosAppResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIosAppResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state.
func (o LookupIosAppResultOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIosAppResult) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER /iosApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.iosApps#IosApp.FIELDS.app_id)).
func (o LookupIosAppResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIosAppResult) string { return v.Name }).(pulumi.StringOutput)
}

// Immutable. A user-assigned unique identifier of the parent FirebaseProject for the `IosApp`.
func (o LookupIosAppResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIosAppResult) string { return v.Project }).(pulumi.StringOutput)
}

// The lifecycle state of the App.
func (o LookupIosAppResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIosAppResult) string { return v.State }).(pulumi.StringOutput)
}

// The Apple Developer Team ID associated with the App in the App Store.
func (o LookupIosAppResultOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIosAppResult) string { return v.TeamId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIosAppResultOutput{})
}
