// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Requests the creation of a new AndroidApp in the specified FirebaseProject. The result of this call is an `Operation` which can be used to track the provisioning process. The `Operation` is automatically deleted after completion, so there is no need to call `DeleteOperation`.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type AndroidApp struct {
	pulumi.CustomResourceState

	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `AndroidApp`. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's [configuration artifact](../../rest/v1beta1/projects.androidApps/getConfig). If `api_key_id` is not set in requests to [`androidApps.Create`](../../rest/v1beta1/projects.androidApps/create), then Firebase automatically associates an `api_key_id` with the `AndroidApp`. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or only have restrictions that are valid for the associated `AndroidApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API keys.
	ApiKeyId pulumi.StringOutput `pulumi:"apiKeyId"`
	// Immutable. The globally unique, Firebase-assigned identifier for the `AndroidApp`. This identifier should be treated as an opaque token, as the data format is not specified.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The user-assigned display name for the `AndroidApp`.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding. Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).
	Name pulumi.StringOutput `pulumi:"name"`
	// Immutable. The canonical package name of the Android app as would appear in the Google Play Developer Console.
	PackageName pulumi.StringOutput `pulumi:"packageName"`
	Project     pulumi.StringOutput `pulumi:"project"`
	// The SHA1 certificate hashes for the AndroidApp.
	Sha1Hashes pulumi.StringArrayOutput `pulumi:"sha1Hashes"`
	// The SHA256 certificate hashes for the AndroidApp.
	Sha256Hashes pulumi.StringArrayOutput `pulumi:"sha256Hashes"`
	// The lifecycle state of the App.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewAndroidApp registers a new resource with the given unique name, arguments, and options.
func NewAndroidApp(ctx *pulumi.Context,
	name string, args *AndroidAppArgs, opts ...pulumi.ResourceOption) (*AndroidApp, error) {
	if args == nil {
		args = &AndroidAppArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AndroidApp
	err := ctx.RegisterResource("google-native:firebase/v1beta1:AndroidApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAndroidApp gets an existing AndroidApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAndroidApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AndroidAppState, opts ...pulumi.ResourceOption) (*AndroidApp, error) {
	var resource AndroidApp
	err := ctx.ReadResource("google-native:firebase/v1beta1:AndroidApp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AndroidApp resources.
type androidAppState struct {
}

type AndroidAppState struct {
}

func (AndroidAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*androidAppState)(nil)).Elem()
}

type androidAppArgs struct {
	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `AndroidApp`. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's [configuration artifact](../../rest/v1beta1/projects.androidApps/getConfig). If `api_key_id` is not set in requests to [`androidApps.Create`](../../rest/v1beta1/projects.androidApps/create), then Firebase automatically associates an `api_key_id` with the `AndroidApp`. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or only have restrictions that are valid for the associated `AndroidApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API keys.
	ApiKeyId *string `pulumi:"apiKeyId"`
	// The user-assigned display name for the `AndroidApp`.
	DisplayName *string `pulumi:"displayName"`
	// This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding. Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.
	Etag *string `pulumi:"etag"`
	// The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).
	Name *string `pulumi:"name"`
	// Immutable. The canonical package name of the Android app as would appear in the Google Play Developer Console.
	PackageName *string `pulumi:"packageName"`
	Project     *string `pulumi:"project"`
	// The SHA1 certificate hashes for the AndroidApp.
	Sha1Hashes []string `pulumi:"sha1Hashes"`
	// The SHA256 certificate hashes for the AndroidApp.
	Sha256Hashes []string `pulumi:"sha256Hashes"`
}

// The set of arguments for constructing a AndroidApp resource.
type AndroidAppArgs struct {
	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `AndroidApp`. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's [configuration artifact](../../rest/v1beta1/projects.androidApps/getConfig). If `api_key_id` is not set in requests to [`androidApps.Create`](../../rest/v1beta1/projects.androidApps/create), then Firebase automatically associates an `api_key_id` with the `AndroidApp`. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or only have restrictions that are valid for the associated `AndroidApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API keys.
	ApiKeyId pulumi.StringPtrInput
	// The user-assigned display name for the `AndroidApp`.
	DisplayName pulumi.StringPtrInput
	// This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding. Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.
	Etag pulumi.StringPtrInput
	// The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).
	Name pulumi.StringPtrInput
	// Immutable. The canonical package name of the Android app as would appear in the Google Play Developer Console.
	PackageName pulumi.StringPtrInput
	Project     pulumi.StringPtrInput
	// The SHA1 certificate hashes for the AndroidApp.
	Sha1Hashes pulumi.StringArrayInput
	// The SHA256 certificate hashes for the AndroidApp.
	Sha256Hashes pulumi.StringArrayInput
}

func (AndroidAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*androidAppArgs)(nil)).Elem()
}

type AndroidAppInput interface {
	pulumi.Input

	ToAndroidAppOutput() AndroidAppOutput
	ToAndroidAppOutputWithContext(ctx context.Context) AndroidAppOutput
}

func (*AndroidApp) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidApp)(nil)).Elem()
}

func (i *AndroidApp) ToAndroidAppOutput() AndroidAppOutput {
	return i.ToAndroidAppOutputWithContext(context.Background())
}

func (i *AndroidApp) ToAndroidAppOutputWithContext(ctx context.Context) AndroidAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AndroidAppOutput)
}

func (i *AndroidApp) ToOutput(ctx context.Context) pulumix.Output[*AndroidApp] {
	return pulumix.Output[*AndroidApp]{
		OutputState: i.ToAndroidAppOutputWithContext(ctx).OutputState,
	}
}

type AndroidAppOutput struct{ *pulumi.OutputState }

func (AndroidAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidApp)(nil)).Elem()
}

func (o AndroidAppOutput) ToAndroidAppOutput() AndroidAppOutput {
	return o
}

func (o AndroidAppOutput) ToAndroidAppOutputWithContext(ctx context.Context) AndroidAppOutput {
	return o
}

func (o AndroidAppOutput) ToOutput(ctx context.Context) pulumix.Output[*AndroidApp] {
	return pulumix.Output[*AndroidApp]{
		OutputState: o.OutputState,
	}
}

// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `AndroidApp`. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's [configuration artifact](../../rest/v1beta1/projects.androidApps/getConfig). If `api_key_id` is not set in requests to [`androidApps.Create`](../../rest/v1beta1/projects.androidApps/create), then Firebase automatically associates an `api_key_id` with the `AndroidApp`. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or only have restrictions that are valid for the associated `AndroidApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API keys.
func (o AndroidAppOutput) ApiKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AndroidApp) pulumi.StringOutput { return v.ApiKeyId }).(pulumi.StringOutput)
}

// Immutable. The globally unique, Firebase-assigned identifier for the `AndroidApp`. This identifier should be treated as an opaque token, as the data format is not specified.
func (o AndroidAppOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *AndroidApp) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The user-assigned display name for the `AndroidApp`.
func (o AndroidAppOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *AndroidApp) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding. Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.
func (o AndroidAppOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *AndroidApp) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state.
func (o AndroidAppOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AndroidApp) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

// The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).
func (o AndroidAppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AndroidApp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Immutable. The canonical package name of the Android app as would appear in the Google Play Developer Console.
func (o AndroidAppOutput) PackageName() pulumi.StringOutput {
	return o.ApplyT(func(v *AndroidApp) pulumi.StringOutput { return v.PackageName }).(pulumi.StringOutput)
}

func (o AndroidAppOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AndroidApp) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The SHA1 certificate hashes for the AndroidApp.
func (o AndroidAppOutput) Sha1Hashes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AndroidApp) pulumi.StringArrayOutput { return v.Sha1Hashes }).(pulumi.StringArrayOutput)
}

// The SHA256 certificate hashes for the AndroidApp.
func (o AndroidAppOutput) Sha256Hashes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AndroidApp) pulumi.StringArrayOutput { return v.Sha256Hashes }).(pulumi.StringArrayOutput)
}

// The lifecycle state of the App.
func (o AndroidAppOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AndroidApp) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AndroidAppInput)(nil)).Elem(), &AndroidApp{})
	pulumi.RegisterOutputType(AndroidAppOutput{})
}
