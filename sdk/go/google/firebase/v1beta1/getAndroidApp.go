// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the specified AndroidApp.
func LookupAndroidApp(ctx *pulumi.Context, args *LookupAndroidAppArgs, opts ...pulumi.InvokeOption) (*LookupAndroidAppResult, error) {
	var rv LookupAndroidAppResult
	err := ctx.Invoke("google-native:firebase/v1beta1:getAndroidApp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAndroidAppArgs struct {
	AndroidAppId string  `pulumi:"androidAppId"`
	Project      *string `pulumi:"project"`
}

type LookupAndroidAppResult struct {
	// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `AndroidApp`. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's [configuration artifact](../../rest/v1beta1/projects.androidApps/getConfig). If `api_key_id` is not set in requests to [`androidApps.Create`](../../rest/v1beta1/projects.androidApps/create), then Firebase automatically associates an `api_key_id` with the `AndroidApp`. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or only have restrictions that are valid for the associated `AndroidApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API keys.
	ApiKeyId string `pulumi:"apiKeyId"`
	// Immutable. The globally unique, Firebase-assigned identifier for the `AndroidApp`. This identifier should be treated as an opaque token, as the data format is not specified.
	AppId string `pulumi:"appId"`
	// The user-assigned display name for the `AndroidApp`.
	DisplayName string `pulumi:"displayName"`
	// The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).
	Name string `pulumi:"name"`
	// Immutable. The canonical package name of the Android app as would appear in the Google Play Developer Console.
	PackageName string `pulumi:"packageName"`
	// Immutable. A user-assigned unique identifier of the parent FirebaseProject for the `AndroidApp`.
	Project string `pulumi:"project"`
	// The SHA1 certificate hashes for the AndroidApp.
	Sha1Hashes []string `pulumi:"sha1Hashes"`
	// The SHA256 certificate hashes for the AndroidApp.
	Sha256Hashes []string `pulumi:"sha256Hashes"`
	// The lifecycle state of the App.
	State string `pulumi:"state"`
}

func LookupAndroidAppOutput(ctx *pulumi.Context, args LookupAndroidAppOutputArgs, opts ...pulumi.InvokeOption) LookupAndroidAppResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAndroidAppResult, error) {
			args := v.(LookupAndroidAppArgs)
			r, err := LookupAndroidApp(ctx, &args, opts...)
			var s LookupAndroidAppResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAndroidAppResultOutput)
}

type LookupAndroidAppOutputArgs struct {
	AndroidAppId pulumi.StringInput    `pulumi:"androidAppId"`
	Project      pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupAndroidAppOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAndroidAppArgs)(nil)).Elem()
}

type LookupAndroidAppResultOutput struct{ *pulumi.OutputState }

func (LookupAndroidAppResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAndroidAppResult)(nil)).Elem()
}

func (o LookupAndroidAppResultOutput) ToLookupAndroidAppResultOutput() LookupAndroidAppResultOutput {
	return o
}

func (o LookupAndroidAppResultOutput) ToLookupAndroidAppResultOutputWithContext(ctx context.Context) LookupAndroidAppResultOutput {
	return o
}

// The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `AndroidApp`. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's [configuration artifact](../../rest/v1beta1/projects.androidApps/getConfig). If `api_key_id` is not set in requests to [`androidApps.Create`](../../rest/v1beta1/projects.androidApps/create), then Firebase automatically associates an `api_key_id` with the `AndroidApp`. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or only have restrictions that are valid for the associated `AndroidApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API keys.
func (o LookupAndroidAppResultOutput) ApiKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAndroidAppResult) string { return v.ApiKeyId }).(pulumi.StringOutput)
}

// Immutable. The globally unique, Firebase-assigned identifier for the `AndroidApp`. This identifier should be treated as an opaque token, as the data format is not specified.
func (o LookupAndroidAppResultOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAndroidAppResult) string { return v.AppId }).(pulumi.StringOutput)
}

// The user-assigned display name for the `AndroidApp`.
func (o LookupAndroidAppResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAndroidAppResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).
func (o LookupAndroidAppResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAndroidAppResult) string { return v.Name }).(pulumi.StringOutput)
}

// Immutable. The canonical package name of the Android app as would appear in the Google Play Developer Console.
func (o LookupAndroidAppResultOutput) PackageName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAndroidAppResult) string { return v.PackageName }).(pulumi.StringOutput)
}

// Immutable. A user-assigned unique identifier of the parent FirebaseProject for the `AndroidApp`.
func (o LookupAndroidAppResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAndroidAppResult) string { return v.Project }).(pulumi.StringOutput)
}

// The SHA1 certificate hashes for the AndroidApp.
func (o LookupAndroidAppResultOutput) Sha1Hashes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAndroidAppResult) []string { return v.Sha1Hashes }).(pulumi.StringArrayOutput)
}

// The SHA256 certificate hashes for the AndroidApp.
func (o LookupAndroidAppResultOutput) Sha256Hashes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAndroidAppResult) []string { return v.Sha256Hashes }).(pulumi.StringArrayOutput)
}

// The lifecycle state of the App.
func (o LookupAndroidAppResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAndroidAppResult) string { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAndroidAppResultOutput{})
}
