// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns the specified snapshot resource. Returns INVALID_ARGUMENT if called for a non-boot volume.
func LookupSnapshot(ctx *pulumi.Context, args *LookupSnapshotArgs, opts ...pulumi.InvokeOption) (*LookupSnapshotResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSnapshotResult
	err := ctx.Invoke("google-native:baremetalsolution/v2:getSnapshot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSnapshotArgs struct {
	Location   string  `pulumi:"location"`
	Project    *string `pulumi:"project"`
	SnapshotId string  `pulumi:"snapshotId"`
	VolumeId   string  `pulumi:"volumeId"`
}

type LookupSnapshotResult struct {
	// The creation time of the snapshot.
	CreateTime string `pulumi:"createTime"`
	// The description of the snapshot.
	Description string `pulumi:"description"`
	// The name of the snapshot.
	Name string `pulumi:"name"`
	// The name of the volume which this snapshot belongs to.
	StorageVolume string `pulumi:"storageVolume"`
	// The type of the snapshot which indicates whether it was scheduled or manual/ad-hoc.
	Type string `pulumi:"type"`
}

func LookupSnapshotOutput(ctx *pulumi.Context, args LookupSnapshotOutputArgs, opts ...pulumi.InvokeOption) LookupSnapshotResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSnapshotResult, error) {
			args := v.(LookupSnapshotArgs)
			r, err := LookupSnapshot(ctx, &args, opts...)
			var s LookupSnapshotResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSnapshotResultOutput)
}

type LookupSnapshotOutputArgs struct {
	Location   pulumi.StringInput    `pulumi:"location"`
	Project    pulumi.StringPtrInput `pulumi:"project"`
	SnapshotId pulumi.StringInput    `pulumi:"snapshotId"`
	VolumeId   pulumi.StringInput    `pulumi:"volumeId"`
}

func (LookupSnapshotOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnapshotArgs)(nil)).Elem()
}

type LookupSnapshotResultOutput struct{ *pulumi.OutputState }

func (LookupSnapshotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnapshotResult)(nil)).Elem()
}

func (o LookupSnapshotResultOutput) ToLookupSnapshotResultOutput() LookupSnapshotResultOutput {
	return o
}

func (o LookupSnapshotResultOutput) ToLookupSnapshotResultOutputWithContext(ctx context.Context) LookupSnapshotResultOutput {
	return o
}

func (o LookupSnapshotResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupSnapshotResult] {
	return pulumix.Output[LookupSnapshotResult]{
		OutputState: o.OutputState,
	}
}

// The creation time of the snapshot.
func (o LookupSnapshotResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the snapshot.
func (o LookupSnapshotResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.Description }).(pulumi.StringOutput)
}

// The name of the snapshot.
func (o LookupSnapshotResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the volume which this snapshot belongs to.
func (o LookupSnapshotResultOutput) StorageVolume() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.StorageVolume }).(pulumi.StringOutput)
}

// The type of the snapshot which indicates whether it was scheduled or manual/ad-hoc.
func (o LookupSnapshotResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSnapshotResultOutput{})
}
