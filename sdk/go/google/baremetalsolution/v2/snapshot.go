// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a storage volume snapshot in a containing volume.
// Auto-naming is currently not supported for this resource.
type Snapshot struct {
	pulumi.CustomResourceState

	// The creation time of the storage volume snapshot.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the storage volume snapshot.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the storage volume snapshot.
	Name pulumi.StringOutput `pulumi:"name"`
	// The size of the storage volume snapshot, in bytes.
	SizeBytes pulumi.StringOutput `pulumi:"sizeBytes"`
	// The storage volume this snapshot belongs to.
	StorageVolume pulumi.StringOutput `pulumi:"storageVolume"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	var resource Snapshot
	err := ctx.RegisterResource("google-native:baremetalsolution/v2:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("google-native:baremetalsolution/v2:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
}

type SnapshotState struct {
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	// The description of the storage volume snapshot.
	Description *string `pulumi:"description"`
	// An identifier for the snapshot, generated by the backend.
	Id       *string `pulumi:"id"`
	Location *string `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// The size of the storage volume snapshot, in bytes.
	SizeBytes *string `pulumi:"sizeBytes"`
	// The storage volume this snapshot belongs to.
	StorageVolume *string `pulumi:"storageVolume"`
	VolumeId      string  `pulumi:"volumeId"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// The description of the storage volume snapshot.
	Description pulumi.StringPtrInput
	// An identifier for the snapshot, generated by the backend.
	Id       pulumi.StringPtrInput
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	// The size of the storage volume snapshot, in bytes.
	SizeBytes pulumi.StringPtrInput
	// The storage volume this snapshot belongs to.
	StorageVolume pulumi.StringPtrInput
	VolumeId      pulumi.StringInput
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}

type SnapshotInput interface {
	pulumi.Input

	ToSnapshotOutput() SnapshotOutput
	ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput
}

func (*Snapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (i *Snapshot) ToSnapshotOutput() SnapshotOutput {
	return i.ToSnapshotOutputWithContext(context.Background())
}

func (i *Snapshot) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotOutput)
}

type SnapshotOutput struct{ *pulumi.OutputState }

func (SnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (o SnapshotOutput) ToSnapshotOutput() SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotInput)(nil)).Elem(), &Snapshot{})
	pulumi.RegisterOutputType(SnapshotOutput{})
}
