// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Each logical interface represents a logical abstraction of the underlying physical interface (for eg. bond, nic) of the instance. Each logical interface can effectively map to multiple network-IP pairs and still be mapped to one underlying physical interface.
type GoogleCloudBaremetalsolutionV2LogicalInterface struct {
	// The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template.
	InterfaceIndex *int `pulumi:"interfaceIndex"`
	// List of logical network interfaces within a logical interface.
	LogicalNetworkInterfaces []LogicalNetworkInterface `pulumi:"logicalNetworkInterfaces"`
	// Interface name. This is of syntax or and forms part of the network template name.
	Name *string `pulumi:"name"`
}

// GoogleCloudBaremetalsolutionV2LogicalInterfaceInput is an input type that accepts GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs and GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput values.
// You can construct a concrete instance of `GoogleCloudBaremetalsolutionV2LogicalInterfaceInput` via:
//
//          GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs{...}
type GoogleCloudBaremetalsolutionV2LogicalInterfaceInput interface {
	pulumi.Input

	ToGoogleCloudBaremetalsolutionV2LogicalInterfaceOutput() GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput
	ToGoogleCloudBaremetalsolutionV2LogicalInterfaceOutputWithContext(context.Context) GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput
}

// Each logical interface represents a logical abstraction of the underlying physical interface (for eg. bond, nic) of the instance. Each logical interface can effectively map to multiple network-IP pairs and still be mapped to one underlying physical interface.
type GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs struct {
	// The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template.
	InterfaceIndex pulumi.IntPtrInput `pulumi:"interfaceIndex"`
	// List of logical network interfaces within a logical interface.
	LogicalNetworkInterfaces LogicalNetworkInterfaceArrayInput `pulumi:"logicalNetworkInterfaces"`
	// Interface name. This is of syntax or and forms part of the network template name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBaremetalsolutionV2LogicalInterface)(nil)).Elem()
}

func (i GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceOutput() GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput {
	return i.ToGoogleCloudBaremetalsolutionV2LogicalInterfaceOutputWithContext(context.Background())
}

func (i GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceOutputWithContext(ctx context.Context) GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput)
}

// GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayInput is an input type that accepts GoogleCloudBaremetalsolutionV2LogicalInterfaceArray and GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput values.
// You can construct a concrete instance of `GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayInput` via:
//
//          GoogleCloudBaremetalsolutionV2LogicalInterfaceArray{ GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs{...} }
type GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayInput interface {
	pulumi.Input

	ToGoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput() GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput
	ToGoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutputWithContext(context.Context) GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput
}

type GoogleCloudBaremetalsolutionV2LogicalInterfaceArray []GoogleCloudBaremetalsolutionV2LogicalInterfaceInput

func (GoogleCloudBaremetalsolutionV2LogicalInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudBaremetalsolutionV2LogicalInterface)(nil)).Elem()
}

func (i GoogleCloudBaremetalsolutionV2LogicalInterfaceArray) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput() GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput {
	return i.ToGoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutputWithContext(context.Background())
}

func (i GoogleCloudBaremetalsolutionV2LogicalInterfaceArray) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutputWithContext(ctx context.Context) GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput)
}

// Each logical interface represents a logical abstraction of the underlying physical interface (for eg. bond, nic) of the instance. Each logical interface can effectively map to multiple network-IP pairs and still be mapped to one underlying physical interface.
type GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput struct{ *pulumi.OutputState }

func (GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBaremetalsolutionV2LogicalInterface)(nil)).Elem()
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceOutput() GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput {
	return o
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceOutputWithContext(ctx context.Context) GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput {
	return o
}

// The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template.
func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput) InterfaceIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudBaremetalsolutionV2LogicalInterface) *int { return v.InterfaceIndex }).(pulumi.IntPtrOutput)
}

// List of logical network interfaces within a logical interface.
func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput) LogicalNetworkInterfaces() LogicalNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v GoogleCloudBaremetalsolutionV2LogicalInterface) []LogicalNetworkInterface {
		return v.LogicalNetworkInterfaces
	}).(LogicalNetworkInterfaceArrayOutput)
}

// Interface name. This is of syntax or and forms part of the network template name.
func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudBaremetalsolutionV2LogicalInterface) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudBaremetalsolutionV2LogicalInterface)(nil)).Elem()
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput() GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput {
	return o
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutputWithContext(ctx context.Context) GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput {
	return o
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput) Index(i pulumi.IntInput) GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudBaremetalsolutionV2LogicalInterface {
		return vs[0].([]GoogleCloudBaremetalsolutionV2LogicalInterface)[vs[1].(int)]
	}).(GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput)
}

// Each logical interface represents a logical abstraction of the underlying physical interface (for eg. bond, nic) of the instance. Each logical interface can effectively map to multiple network-IP pairs and still be mapped to one underlying physical interface.
type GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse struct {
	// The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template.
	InterfaceIndex int `pulumi:"interfaceIndex"`
	// List of logical network interfaces within a logical interface.
	LogicalNetworkInterfaces []LogicalNetworkInterfaceResponse `pulumi:"logicalNetworkInterfaces"`
	// Interface name. This is of syntax or and forms part of the network template name.
	Name string `pulumi:"name"`
}

// Each logical interface represents a logical abstraction of the underlying physical interface (for eg. bond, nic) of the instance. Each logical interface can effectively map to multiple network-IP pairs and still be mapped to one underlying physical interface.
type GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse)(nil)).Elem()
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput() GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput {
	return o
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutputWithContext(ctx context.Context) GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput {
	return o
}

// The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template.
func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput) InterfaceIndex() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse) int { return v.InterfaceIndex }).(pulumi.IntOutput)
}

// List of logical network interfaces within a logical interface.
func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput) LogicalNetworkInterfaces() LogicalNetworkInterfaceResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse) []LogicalNetworkInterfaceResponse {
		return v.LogicalNetworkInterfaces
	}).(LogicalNetworkInterfaceResponseArrayOutput)
}

// Interface name. This is of syntax or and forms part of the network template name.
func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse) string { return v.Name }).(pulumi.StringOutput)
}

type GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse)(nil)).Elem()
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput() GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput {
	return o
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutputWithContext(ctx context.Context) GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput {
	return o
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse {
		return vs[0].([]GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse)[vs[1].(int)]
	}).(GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput)
}

// Configuration parameters for a new instance.
type InstanceConfig struct {
	// If true networks can be from different projects of the same vendor account.
	AccountNetworksEnabled *bool `pulumi:"accountNetworksEnabled"`
	// Client network address. Filled if InstanceConfig.multivlan_config is false.
	ClientNetwork *NetworkAddress `pulumi:"clientNetwork"`
	// Whether the instance should be provisioned with Hyperthreading enabled.
	Hyperthreading *bool `pulumi:"hyperthreading"`
	// A transient unique identifier to idenfity an instance within an ProvisioningConfig request.
	Id *string `pulumi:"id"`
	// Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
	InstanceType *string `pulumi:"instanceType"`
	// List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.
	LogicalInterfaces []GoogleCloudBaremetalsolutionV2LogicalInterface `pulumi:"logicalInterfaces"`
	// The type of network configuration on the instance.
	NetworkConfig *InstanceConfigNetworkConfig `pulumi:"networkConfig"`
	// Server network template name. Filled if InstanceConfig.multivlan_config is true.
	NetworkTemplate *string `pulumi:"networkTemplate"`
	// OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
	OsImage *string `pulumi:"osImage"`
	// Private network address, if any. Filled if InstanceConfig.multivlan_config is false.
	PrivateNetwork *NetworkAddress `pulumi:"privateNetwork"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote *string `pulumi:"userNote"`
}

// InstanceConfigInput is an input type that accepts InstanceConfigArgs and InstanceConfigOutput values.
// You can construct a concrete instance of `InstanceConfigInput` via:
//
//          InstanceConfigArgs{...}
type InstanceConfigInput interface {
	pulumi.Input

	ToInstanceConfigOutput() InstanceConfigOutput
	ToInstanceConfigOutputWithContext(context.Context) InstanceConfigOutput
}

// Configuration parameters for a new instance.
type InstanceConfigArgs struct {
	// If true networks can be from different projects of the same vendor account.
	AccountNetworksEnabled pulumi.BoolPtrInput `pulumi:"accountNetworksEnabled"`
	// Client network address. Filled if InstanceConfig.multivlan_config is false.
	ClientNetwork NetworkAddressPtrInput `pulumi:"clientNetwork"`
	// Whether the instance should be provisioned with Hyperthreading enabled.
	Hyperthreading pulumi.BoolPtrInput `pulumi:"hyperthreading"`
	// A transient unique identifier to idenfity an instance within an ProvisioningConfig request.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.
	LogicalInterfaces GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayInput `pulumi:"logicalInterfaces"`
	// The type of network configuration on the instance.
	NetworkConfig InstanceConfigNetworkConfigPtrInput `pulumi:"networkConfig"`
	// Server network template name. Filled if InstanceConfig.multivlan_config is true.
	NetworkTemplate pulumi.StringPtrInput `pulumi:"networkTemplate"`
	// OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
	OsImage pulumi.StringPtrInput `pulumi:"osImage"`
	// Private network address, if any. Filled if InstanceConfig.multivlan_config is false.
	PrivateNetwork NetworkAddressPtrInput `pulumi:"privateNetwork"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote pulumi.StringPtrInput `pulumi:"userNote"`
}

func (InstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfig)(nil)).Elem()
}

func (i InstanceConfigArgs) ToInstanceConfigOutput() InstanceConfigOutput {
	return i.ToInstanceConfigOutputWithContext(context.Background())
}

func (i InstanceConfigArgs) ToInstanceConfigOutputWithContext(ctx context.Context) InstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigOutput)
}

// InstanceConfigArrayInput is an input type that accepts InstanceConfigArray and InstanceConfigArrayOutput values.
// You can construct a concrete instance of `InstanceConfigArrayInput` via:
//
//          InstanceConfigArray{ InstanceConfigArgs{...} }
type InstanceConfigArrayInput interface {
	pulumi.Input

	ToInstanceConfigArrayOutput() InstanceConfigArrayOutput
	ToInstanceConfigArrayOutputWithContext(context.Context) InstanceConfigArrayOutput
}

type InstanceConfigArray []InstanceConfigInput

func (InstanceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceConfig)(nil)).Elem()
}

func (i InstanceConfigArray) ToInstanceConfigArrayOutput() InstanceConfigArrayOutput {
	return i.ToInstanceConfigArrayOutputWithContext(context.Background())
}

func (i InstanceConfigArray) ToInstanceConfigArrayOutputWithContext(ctx context.Context) InstanceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigArrayOutput)
}

// Configuration parameters for a new instance.
type InstanceConfigOutput struct{ *pulumi.OutputState }

func (InstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfig)(nil)).Elem()
}

func (o InstanceConfigOutput) ToInstanceConfigOutput() InstanceConfigOutput {
	return o
}

func (o InstanceConfigOutput) ToInstanceConfigOutputWithContext(ctx context.Context) InstanceConfigOutput {
	return o
}

// If true networks can be from different projects of the same vendor account.
func (o InstanceConfigOutput) AccountNetworksEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *bool { return v.AccountNetworksEnabled }).(pulumi.BoolPtrOutput)
}

// Client network address. Filled if InstanceConfig.multivlan_config is false.
func (o InstanceConfigOutput) ClientNetwork() NetworkAddressPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *NetworkAddress { return v.ClientNetwork }).(NetworkAddressPtrOutput)
}

// Whether the instance should be provisioned with Hyperthreading enabled.
func (o InstanceConfigOutput) Hyperthreading() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *bool { return v.Hyperthreading }).(pulumi.BoolPtrOutput)
}

// A transient unique identifier to idenfity an instance within an ProvisioningConfig request.
func (o InstanceConfigOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
func (o InstanceConfigOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.
func (o InstanceConfigOutput) LogicalInterfaces() GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput {
	return o.ApplyT(func(v InstanceConfig) []GoogleCloudBaremetalsolutionV2LogicalInterface { return v.LogicalInterfaces }).(GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput)
}

// The type of network configuration on the instance.
func (o InstanceConfigOutput) NetworkConfig() InstanceConfigNetworkConfigPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *InstanceConfigNetworkConfig { return v.NetworkConfig }).(InstanceConfigNetworkConfigPtrOutput)
}

// Server network template name. Filled if InstanceConfig.multivlan_config is true.
func (o InstanceConfigOutput) NetworkTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *string { return v.NetworkTemplate }).(pulumi.StringPtrOutput)
}

// OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
func (o InstanceConfigOutput) OsImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *string { return v.OsImage }).(pulumi.StringPtrOutput)
}

// Private network address, if any. Filled if InstanceConfig.multivlan_config is false.
func (o InstanceConfigOutput) PrivateNetwork() NetworkAddressPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *NetworkAddress { return v.PrivateNetwork }).(NetworkAddressPtrOutput)
}

// User note field, it can be used by customers to add additional information for the BMS Ops team .
func (o InstanceConfigOutput) UserNote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *string { return v.UserNote }).(pulumi.StringPtrOutput)
}

type InstanceConfigArrayOutput struct{ *pulumi.OutputState }

func (InstanceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceConfig)(nil)).Elem()
}

func (o InstanceConfigArrayOutput) ToInstanceConfigArrayOutput() InstanceConfigArrayOutput {
	return o
}

func (o InstanceConfigArrayOutput) ToInstanceConfigArrayOutputWithContext(ctx context.Context) InstanceConfigArrayOutput {
	return o
}

func (o InstanceConfigArrayOutput) Index(i pulumi.IntInput) InstanceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceConfig {
		return vs[0].([]InstanceConfig)[vs[1].(int)]
	}).(InstanceConfigOutput)
}

// Configuration parameters for a new instance.
type InstanceConfigResponse struct {
	// If true networks can be from different projects of the same vendor account.
	AccountNetworksEnabled bool `pulumi:"accountNetworksEnabled"`
	// Client network address. Filled if InstanceConfig.multivlan_config is false.
	ClientNetwork NetworkAddressResponse `pulumi:"clientNetwork"`
	// Whether the instance should be provisioned with Hyperthreading enabled.
	Hyperthreading bool `pulumi:"hyperthreading"`
	// Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
	InstanceType string `pulumi:"instanceType"`
	// List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.
	LogicalInterfaces []GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse `pulumi:"logicalInterfaces"`
	// The name of the instance config.
	Name string `pulumi:"name"`
	// The type of network configuration on the instance.
	NetworkConfig string `pulumi:"networkConfig"`
	// Server network template name. Filled if InstanceConfig.multivlan_config is true.
	NetworkTemplate string `pulumi:"networkTemplate"`
	// OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
	OsImage string `pulumi:"osImage"`
	// Private network address, if any. Filled if InstanceConfig.multivlan_config is false.
	PrivateNetwork NetworkAddressResponse `pulumi:"privateNetwork"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote string `pulumi:"userNote"`
}

// Configuration parameters for a new instance.
type InstanceConfigResponseOutput struct{ *pulumi.OutputState }

func (InstanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigResponse)(nil)).Elem()
}

func (o InstanceConfigResponseOutput) ToInstanceConfigResponseOutput() InstanceConfigResponseOutput {
	return o
}

func (o InstanceConfigResponseOutput) ToInstanceConfigResponseOutputWithContext(ctx context.Context) InstanceConfigResponseOutput {
	return o
}

// If true networks can be from different projects of the same vendor account.
func (o InstanceConfigResponseOutput) AccountNetworksEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v InstanceConfigResponse) bool { return v.AccountNetworksEnabled }).(pulumi.BoolOutput)
}

// Client network address. Filled if InstanceConfig.multivlan_config is false.
func (o InstanceConfigResponseOutput) ClientNetwork() NetworkAddressResponseOutput {
	return o.ApplyT(func(v InstanceConfigResponse) NetworkAddressResponse { return v.ClientNetwork }).(NetworkAddressResponseOutput)
}

// Whether the instance should be provisioned with Hyperthreading enabled.
func (o InstanceConfigResponseOutput) Hyperthreading() pulumi.BoolOutput {
	return o.ApplyT(func(v InstanceConfigResponse) bool { return v.Hyperthreading }).(pulumi.BoolOutput)
}

// Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
func (o InstanceConfigResponseOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceConfigResponse) string { return v.InstanceType }).(pulumi.StringOutput)
}

// List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.
func (o InstanceConfigResponseOutput) LogicalInterfaces() GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput {
	return o.ApplyT(func(v InstanceConfigResponse) []GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse {
		return v.LogicalInterfaces
	}).(GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput)
}

// The name of the instance config.
func (o InstanceConfigResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceConfigResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of network configuration on the instance.
func (o InstanceConfigResponseOutput) NetworkConfig() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceConfigResponse) string { return v.NetworkConfig }).(pulumi.StringOutput)
}

// Server network template name. Filled if InstanceConfig.multivlan_config is true.
func (o InstanceConfigResponseOutput) NetworkTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceConfigResponse) string { return v.NetworkTemplate }).(pulumi.StringOutput)
}

// OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
func (o InstanceConfigResponseOutput) OsImage() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceConfigResponse) string { return v.OsImage }).(pulumi.StringOutput)
}

// Private network address, if any. Filled if InstanceConfig.multivlan_config is false.
func (o InstanceConfigResponseOutput) PrivateNetwork() NetworkAddressResponseOutput {
	return o.ApplyT(func(v InstanceConfigResponse) NetworkAddressResponse { return v.PrivateNetwork }).(NetworkAddressResponseOutput)
}

// User note field, it can be used by customers to add additional information for the BMS Ops team .
func (o InstanceConfigResponseOutput) UserNote() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceConfigResponse) string { return v.UserNote }).(pulumi.StringOutput)
}

type InstanceConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (InstanceConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceConfigResponse)(nil)).Elem()
}

func (o InstanceConfigResponseArrayOutput) ToInstanceConfigResponseArrayOutput() InstanceConfigResponseArrayOutput {
	return o
}

func (o InstanceConfigResponseArrayOutput) ToInstanceConfigResponseArrayOutputWithContext(ctx context.Context) InstanceConfigResponseArrayOutput {
	return o
}

func (o InstanceConfigResponseArrayOutput) Index(i pulumi.IntInput) InstanceConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceConfigResponse {
		return vs[0].([]InstanceConfigResponse)[vs[1].(int)]
	}).(InstanceConfigResponseOutput)
}

// A GCP vlan attachment.
type IntakeVlanAttachment struct {
	// Identifier of the VLAN attachment.
	Id *string `pulumi:"id"`
	// Attachment pairing key.
	PairingKey *string `pulumi:"pairingKey"`
}

// IntakeVlanAttachmentInput is an input type that accepts IntakeVlanAttachmentArgs and IntakeVlanAttachmentOutput values.
// You can construct a concrete instance of `IntakeVlanAttachmentInput` via:
//
//          IntakeVlanAttachmentArgs{...}
type IntakeVlanAttachmentInput interface {
	pulumi.Input

	ToIntakeVlanAttachmentOutput() IntakeVlanAttachmentOutput
	ToIntakeVlanAttachmentOutputWithContext(context.Context) IntakeVlanAttachmentOutput
}

// A GCP vlan attachment.
type IntakeVlanAttachmentArgs struct {
	// Identifier of the VLAN attachment.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Attachment pairing key.
	PairingKey pulumi.StringPtrInput `pulumi:"pairingKey"`
}

func (IntakeVlanAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntakeVlanAttachment)(nil)).Elem()
}

func (i IntakeVlanAttachmentArgs) ToIntakeVlanAttachmentOutput() IntakeVlanAttachmentOutput {
	return i.ToIntakeVlanAttachmentOutputWithContext(context.Background())
}

func (i IntakeVlanAttachmentArgs) ToIntakeVlanAttachmentOutputWithContext(ctx context.Context) IntakeVlanAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntakeVlanAttachmentOutput)
}

// IntakeVlanAttachmentArrayInput is an input type that accepts IntakeVlanAttachmentArray and IntakeVlanAttachmentArrayOutput values.
// You can construct a concrete instance of `IntakeVlanAttachmentArrayInput` via:
//
//          IntakeVlanAttachmentArray{ IntakeVlanAttachmentArgs{...} }
type IntakeVlanAttachmentArrayInput interface {
	pulumi.Input

	ToIntakeVlanAttachmentArrayOutput() IntakeVlanAttachmentArrayOutput
	ToIntakeVlanAttachmentArrayOutputWithContext(context.Context) IntakeVlanAttachmentArrayOutput
}

type IntakeVlanAttachmentArray []IntakeVlanAttachmentInput

func (IntakeVlanAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntakeVlanAttachment)(nil)).Elem()
}

func (i IntakeVlanAttachmentArray) ToIntakeVlanAttachmentArrayOutput() IntakeVlanAttachmentArrayOutput {
	return i.ToIntakeVlanAttachmentArrayOutputWithContext(context.Background())
}

func (i IntakeVlanAttachmentArray) ToIntakeVlanAttachmentArrayOutputWithContext(ctx context.Context) IntakeVlanAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntakeVlanAttachmentArrayOutput)
}

// A GCP vlan attachment.
type IntakeVlanAttachmentOutput struct{ *pulumi.OutputState }

func (IntakeVlanAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntakeVlanAttachment)(nil)).Elem()
}

func (o IntakeVlanAttachmentOutput) ToIntakeVlanAttachmentOutput() IntakeVlanAttachmentOutput {
	return o
}

func (o IntakeVlanAttachmentOutput) ToIntakeVlanAttachmentOutputWithContext(ctx context.Context) IntakeVlanAttachmentOutput {
	return o
}

// Identifier of the VLAN attachment.
func (o IntakeVlanAttachmentOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntakeVlanAttachment) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Attachment pairing key.
func (o IntakeVlanAttachmentOutput) PairingKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntakeVlanAttachment) *string { return v.PairingKey }).(pulumi.StringPtrOutput)
}

type IntakeVlanAttachmentArrayOutput struct{ *pulumi.OutputState }

func (IntakeVlanAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntakeVlanAttachment)(nil)).Elem()
}

func (o IntakeVlanAttachmentArrayOutput) ToIntakeVlanAttachmentArrayOutput() IntakeVlanAttachmentArrayOutput {
	return o
}

func (o IntakeVlanAttachmentArrayOutput) ToIntakeVlanAttachmentArrayOutputWithContext(ctx context.Context) IntakeVlanAttachmentArrayOutput {
	return o
}

func (o IntakeVlanAttachmentArrayOutput) Index(i pulumi.IntInput) IntakeVlanAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntakeVlanAttachment {
		return vs[0].([]IntakeVlanAttachment)[vs[1].(int)]
	}).(IntakeVlanAttachmentOutput)
}

// A GCP vlan attachment.
type IntakeVlanAttachmentResponse struct {
	// Attachment pairing key.
	PairingKey string `pulumi:"pairingKey"`
}

// A GCP vlan attachment.
type IntakeVlanAttachmentResponseOutput struct{ *pulumi.OutputState }

func (IntakeVlanAttachmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntakeVlanAttachmentResponse)(nil)).Elem()
}

func (o IntakeVlanAttachmentResponseOutput) ToIntakeVlanAttachmentResponseOutput() IntakeVlanAttachmentResponseOutput {
	return o
}

func (o IntakeVlanAttachmentResponseOutput) ToIntakeVlanAttachmentResponseOutputWithContext(ctx context.Context) IntakeVlanAttachmentResponseOutput {
	return o
}

// Attachment pairing key.
func (o IntakeVlanAttachmentResponseOutput) PairingKey() pulumi.StringOutput {
	return o.ApplyT(func(v IntakeVlanAttachmentResponse) string { return v.PairingKey }).(pulumi.StringOutput)
}

type IntakeVlanAttachmentResponseArrayOutput struct{ *pulumi.OutputState }

func (IntakeVlanAttachmentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntakeVlanAttachmentResponse)(nil)).Elem()
}

func (o IntakeVlanAttachmentResponseArrayOutput) ToIntakeVlanAttachmentResponseArrayOutput() IntakeVlanAttachmentResponseArrayOutput {
	return o
}

func (o IntakeVlanAttachmentResponseArrayOutput) ToIntakeVlanAttachmentResponseArrayOutputWithContext(ctx context.Context) IntakeVlanAttachmentResponseArrayOutput {
	return o
}

func (o IntakeVlanAttachmentResponseArrayOutput) Index(i pulumi.IntInput) IntakeVlanAttachmentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntakeVlanAttachmentResponse {
		return vs[0].([]IntakeVlanAttachmentResponse)[vs[1].(int)]
	}).(IntakeVlanAttachmentResponseOutput)
}

// Each logical network interface is effectively a network and IP pair.
type LogicalNetworkInterface struct {
	// Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.
	DefaultGateway *bool `pulumi:"defaultGateway"`
	// An identifier for the `Network`, generated by the backend.
	Id *string `pulumi:"id"`
	// IP address in the network
	IpAddress *string `pulumi:"ipAddress"`
	// Name of the network
	Network *string `pulumi:"network"`
	// Type of network.
	NetworkType *LogicalNetworkInterfaceNetworkType `pulumi:"networkType"`
}

// LogicalNetworkInterfaceInput is an input type that accepts LogicalNetworkInterfaceArgs and LogicalNetworkInterfaceOutput values.
// You can construct a concrete instance of `LogicalNetworkInterfaceInput` via:
//
//          LogicalNetworkInterfaceArgs{...}
type LogicalNetworkInterfaceInput interface {
	pulumi.Input

	ToLogicalNetworkInterfaceOutput() LogicalNetworkInterfaceOutput
	ToLogicalNetworkInterfaceOutputWithContext(context.Context) LogicalNetworkInterfaceOutput
}

// Each logical network interface is effectively a network and IP pair.
type LogicalNetworkInterfaceArgs struct {
	// Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.
	DefaultGateway pulumi.BoolPtrInput `pulumi:"defaultGateway"`
	// An identifier for the `Network`, generated by the backend.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// IP address in the network
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// Name of the network
	Network pulumi.StringPtrInput `pulumi:"network"`
	// Type of network.
	NetworkType LogicalNetworkInterfaceNetworkTypePtrInput `pulumi:"networkType"`
}

func (LogicalNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicalNetworkInterface)(nil)).Elem()
}

func (i LogicalNetworkInterfaceArgs) ToLogicalNetworkInterfaceOutput() LogicalNetworkInterfaceOutput {
	return i.ToLogicalNetworkInterfaceOutputWithContext(context.Background())
}

func (i LogicalNetworkInterfaceArgs) ToLogicalNetworkInterfaceOutputWithContext(ctx context.Context) LogicalNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicalNetworkInterfaceOutput)
}

// LogicalNetworkInterfaceArrayInput is an input type that accepts LogicalNetworkInterfaceArray and LogicalNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `LogicalNetworkInterfaceArrayInput` via:
//
//          LogicalNetworkInterfaceArray{ LogicalNetworkInterfaceArgs{...} }
type LogicalNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToLogicalNetworkInterfaceArrayOutput() LogicalNetworkInterfaceArrayOutput
	ToLogicalNetworkInterfaceArrayOutputWithContext(context.Context) LogicalNetworkInterfaceArrayOutput
}

type LogicalNetworkInterfaceArray []LogicalNetworkInterfaceInput

func (LogicalNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicalNetworkInterface)(nil)).Elem()
}

func (i LogicalNetworkInterfaceArray) ToLogicalNetworkInterfaceArrayOutput() LogicalNetworkInterfaceArrayOutput {
	return i.ToLogicalNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i LogicalNetworkInterfaceArray) ToLogicalNetworkInterfaceArrayOutputWithContext(ctx context.Context) LogicalNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicalNetworkInterfaceArrayOutput)
}

// Each logical network interface is effectively a network and IP pair.
type LogicalNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (LogicalNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicalNetworkInterface)(nil)).Elem()
}

func (o LogicalNetworkInterfaceOutput) ToLogicalNetworkInterfaceOutput() LogicalNetworkInterfaceOutput {
	return o
}

func (o LogicalNetworkInterfaceOutput) ToLogicalNetworkInterfaceOutputWithContext(ctx context.Context) LogicalNetworkInterfaceOutput {
	return o
}

// Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.
func (o LogicalNetworkInterfaceOutput) DefaultGateway() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogicalNetworkInterface) *bool { return v.DefaultGateway }).(pulumi.BoolPtrOutput)
}

// An identifier for the `Network`, generated by the backend.
func (o LogicalNetworkInterfaceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogicalNetworkInterface) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// IP address in the network
func (o LogicalNetworkInterfaceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogicalNetworkInterface) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Name of the network
func (o LogicalNetworkInterfaceOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogicalNetworkInterface) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Type of network.
func (o LogicalNetworkInterfaceOutput) NetworkType() LogicalNetworkInterfaceNetworkTypePtrOutput {
	return o.ApplyT(func(v LogicalNetworkInterface) *LogicalNetworkInterfaceNetworkType { return v.NetworkType }).(LogicalNetworkInterfaceNetworkTypePtrOutput)
}

type LogicalNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (LogicalNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicalNetworkInterface)(nil)).Elem()
}

func (o LogicalNetworkInterfaceArrayOutput) ToLogicalNetworkInterfaceArrayOutput() LogicalNetworkInterfaceArrayOutput {
	return o
}

func (o LogicalNetworkInterfaceArrayOutput) ToLogicalNetworkInterfaceArrayOutputWithContext(ctx context.Context) LogicalNetworkInterfaceArrayOutput {
	return o
}

func (o LogicalNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) LogicalNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogicalNetworkInterface {
		return vs[0].([]LogicalNetworkInterface)[vs[1].(int)]
	}).(LogicalNetworkInterfaceOutput)
}

// Each logical network interface is effectively a network and IP pair.
type LogicalNetworkInterfaceResponse struct {
	// Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.
	DefaultGateway bool `pulumi:"defaultGateway"`
	// IP address in the network
	IpAddress string `pulumi:"ipAddress"`
	// Name of the network
	Network string `pulumi:"network"`
	// Type of network.
	NetworkType string `pulumi:"networkType"`
}

// Each logical network interface is effectively a network and IP pair.
type LogicalNetworkInterfaceResponseOutput struct{ *pulumi.OutputState }

func (LogicalNetworkInterfaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicalNetworkInterfaceResponse)(nil)).Elem()
}

func (o LogicalNetworkInterfaceResponseOutput) ToLogicalNetworkInterfaceResponseOutput() LogicalNetworkInterfaceResponseOutput {
	return o
}

func (o LogicalNetworkInterfaceResponseOutput) ToLogicalNetworkInterfaceResponseOutputWithContext(ctx context.Context) LogicalNetworkInterfaceResponseOutput {
	return o
}

// Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.
func (o LogicalNetworkInterfaceResponseOutput) DefaultGateway() pulumi.BoolOutput {
	return o.ApplyT(func(v LogicalNetworkInterfaceResponse) bool { return v.DefaultGateway }).(pulumi.BoolOutput)
}

// IP address in the network
func (o LogicalNetworkInterfaceResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LogicalNetworkInterfaceResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Name of the network
func (o LogicalNetworkInterfaceResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v LogicalNetworkInterfaceResponse) string { return v.Network }).(pulumi.StringOutput)
}

// Type of network.
func (o LogicalNetworkInterfaceResponseOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v LogicalNetworkInterfaceResponse) string { return v.NetworkType }).(pulumi.StringOutput)
}

type LogicalNetworkInterfaceResponseArrayOutput struct{ *pulumi.OutputState }

func (LogicalNetworkInterfaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicalNetworkInterfaceResponse)(nil)).Elem()
}

func (o LogicalNetworkInterfaceResponseArrayOutput) ToLogicalNetworkInterfaceResponseArrayOutput() LogicalNetworkInterfaceResponseArrayOutput {
	return o
}

func (o LogicalNetworkInterfaceResponseArrayOutput) ToLogicalNetworkInterfaceResponseArrayOutputWithContext(ctx context.Context) LogicalNetworkInterfaceResponseArrayOutput {
	return o
}

func (o LogicalNetworkInterfaceResponseArrayOutput) Index(i pulumi.IntInput) LogicalNetworkInterfaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogicalNetworkInterfaceResponse {
		return vs[0].([]LogicalNetworkInterfaceResponse)[vs[1].(int)]
	}).(LogicalNetworkInterfaceResponseOutput)
}

// A LUN(Logical Unit Number) range.
type LunRange struct {
	// Number of LUNs to create.
	Quantity *int `pulumi:"quantity"`
	// The requested size of each LUN, in GB.
	SizeGb *int `pulumi:"sizeGb"`
}

// LunRangeInput is an input type that accepts LunRangeArgs and LunRangeOutput values.
// You can construct a concrete instance of `LunRangeInput` via:
//
//          LunRangeArgs{...}
type LunRangeInput interface {
	pulumi.Input

	ToLunRangeOutput() LunRangeOutput
	ToLunRangeOutputWithContext(context.Context) LunRangeOutput
}

// A LUN(Logical Unit Number) range.
type LunRangeArgs struct {
	// Number of LUNs to create.
	Quantity pulumi.IntPtrInput `pulumi:"quantity"`
	// The requested size of each LUN, in GB.
	SizeGb pulumi.IntPtrInput `pulumi:"sizeGb"`
}

func (LunRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LunRange)(nil)).Elem()
}

func (i LunRangeArgs) ToLunRangeOutput() LunRangeOutput {
	return i.ToLunRangeOutputWithContext(context.Background())
}

func (i LunRangeArgs) ToLunRangeOutputWithContext(ctx context.Context) LunRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LunRangeOutput)
}

// LunRangeArrayInput is an input type that accepts LunRangeArray and LunRangeArrayOutput values.
// You can construct a concrete instance of `LunRangeArrayInput` via:
//
//          LunRangeArray{ LunRangeArgs{...} }
type LunRangeArrayInput interface {
	pulumi.Input

	ToLunRangeArrayOutput() LunRangeArrayOutput
	ToLunRangeArrayOutputWithContext(context.Context) LunRangeArrayOutput
}

type LunRangeArray []LunRangeInput

func (LunRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LunRange)(nil)).Elem()
}

func (i LunRangeArray) ToLunRangeArrayOutput() LunRangeArrayOutput {
	return i.ToLunRangeArrayOutputWithContext(context.Background())
}

func (i LunRangeArray) ToLunRangeArrayOutputWithContext(ctx context.Context) LunRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LunRangeArrayOutput)
}

// A LUN(Logical Unit Number) range.
type LunRangeOutput struct{ *pulumi.OutputState }

func (LunRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LunRange)(nil)).Elem()
}

func (o LunRangeOutput) ToLunRangeOutput() LunRangeOutput {
	return o
}

func (o LunRangeOutput) ToLunRangeOutputWithContext(ctx context.Context) LunRangeOutput {
	return o
}

// Number of LUNs to create.
func (o LunRangeOutput) Quantity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LunRange) *int { return v.Quantity }).(pulumi.IntPtrOutput)
}

// The requested size of each LUN, in GB.
func (o LunRangeOutput) SizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LunRange) *int { return v.SizeGb }).(pulumi.IntPtrOutput)
}

type LunRangeArrayOutput struct{ *pulumi.OutputState }

func (LunRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LunRange)(nil)).Elem()
}

func (o LunRangeArrayOutput) ToLunRangeArrayOutput() LunRangeArrayOutput {
	return o
}

func (o LunRangeArrayOutput) ToLunRangeArrayOutputWithContext(ctx context.Context) LunRangeArrayOutput {
	return o
}

func (o LunRangeArrayOutput) Index(i pulumi.IntInput) LunRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LunRange {
		return vs[0].([]LunRange)[vs[1].(int)]
	}).(LunRangeOutput)
}

// A LUN(Logical Unit Number) range.
type LunRangeResponse struct {
	// Number of LUNs to create.
	Quantity int `pulumi:"quantity"`
	// The requested size of each LUN, in GB.
	SizeGb int `pulumi:"sizeGb"`
}

// A LUN(Logical Unit Number) range.
type LunRangeResponseOutput struct{ *pulumi.OutputState }

func (LunRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LunRangeResponse)(nil)).Elem()
}

func (o LunRangeResponseOutput) ToLunRangeResponseOutput() LunRangeResponseOutput {
	return o
}

func (o LunRangeResponseOutput) ToLunRangeResponseOutputWithContext(ctx context.Context) LunRangeResponseOutput {
	return o
}

// Number of LUNs to create.
func (o LunRangeResponseOutput) Quantity() pulumi.IntOutput {
	return o.ApplyT(func(v LunRangeResponse) int { return v.Quantity }).(pulumi.IntOutput)
}

// The requested size of each LUN, in GB.
func (o LunRangeResponseOutput) SizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v LunRangeResponse) int { return v.SizeGb }).(pulumi.IntOutput)
}

type LunRangeResponseArrayOutput struct{ *pulumi.OutputState }

func (LunRangeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LunRangeResponse)(nil)).Elem()
}

func (o LunRangeResponseArrayOutput) ToLunRangeResponseArrayOutput() LunRangeResponseArrayOutput {
	return o
}

func (o LunRangeResponseArrayOutput) ToLunRangeResponseArrayOutputWithContext(ctx context.Context) LunRangeResponseArrayOutput {
	return o
}

func (o LunRangeResponseArrayOutput) Index(i pulumi.IntInput) LunRangeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LunRangeResponse {
		return vs[0].([]LunRangeResponse)[vs[1].(int)]
	}).(LunRangeResponseOutput)
}

// A network.
type NetworkAddress struct {
	// IPv4 address to be assigned to the server.
	Address *string `pulumi:"address"`
	// Name of the existing network to use.
	ExistingNetworkId *string `pulumi:"existingNetworkId"`
	// Id of the network to use, within the same ProvisioningConfig request.
	NetworkId *string `pulumi:"networkId"`
}

// NetworkAddressInput is an input type that accepts NetworkAddressArgs and NetworkAddressOutput values.
// You can construct a concrete instance of `NetworkAddressInput` via:
//
//          NetworkAddressArgs{...}
type NetworkAddressInput interface {
	pulumi.Input

	ToNetworkAddressOutput() NetworkAddressOutput
	ToNetworkAddressOutputWithContext(context.Context) NetworkAddressOutput
}

// A network.
type NetworkAddressArgs struct {
	// IPv4 address to be assigned to the server.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// Name of the existing network to use.
	ExistingNetworkId pulumi.StringPtrInput `pulumi:"existingNetworkId"`
	// Id of the network to use, within the same ProvisioningConfig request.
	NetworkId pulumi.StringPtrInput `pulumi:"networkId"`
}

func (NetworkAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAddress)(nil)).Elem()
}

func (i NetworkAddressArgs) ToNetworkAddressOutput() NetworkAddressOutput {
	return i.ToNetworkAddressOutputWithContext(context.Background())
}

func (i NetworkAddressArgs) ToNetworkAddressOutputWithContext(ctx context.Context) NetworkAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAddressOutput)
}

func (i NetworkAddressArgs) ToNetworkAddressPtrOutput() NetworkAddressPtrOutput {
	return i.ToNetworkAddressPtrOutputWithContext(context.Background())
}

func (i NetworkAddressArgs) ToNetworkAddressPtrOutputWithContext(ctx context.Context) NetworkAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAddressOutput).ToNetworkAddressPtrOutputWithContext(ctx)
}

// NetworkAddressPtrInput is an input type that accepts NetworkAddressArgs, NetworkAddressPtr and NetworkAddressPtrOutput values.
// You can construct a concrete instance of `NetworkAddressPtrInput` via:
//
//          NetworkAddressArgs{...}
//
//  or:
//
//          nil
type NetworkAddressPtrInput interface {
	pulumi.Input

	ToNetworkAddressPtrOutput() NetworkAddressPtrOutput
	ToNetworkAddressPtrOutputWithContext(context.Context) NetworkAddressPtrOutput
}

type networkAddressPtrType NetworkAddressArgs

func NetworkAddressPtr(v *NetworkAddressArgs) NetworkAddressPtrInput {
	return (*networkAddressPtrType)(v)
}

func (*networkAddressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAddress)(nil)).Elem()
}

func (i *networkAddressPtrType) ToNetworkAddressPtrOutput() NetworkAddressPtrOutput {
	return i.ToNetworkAddressPtrOutputWithContext(context.Background())
}

func (i *networkAddressPtrType) ToNetworkAddressPtrOutputWithContext(ctx context.Context) NetworkAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAddressPtrOutput)
}

// A network.
type NetworkAddressOutput struct{ *pulumi.OutputState }

func (NetworkAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAddress)(nil)).Elem()
}

func (o NetworkAddressOutput) ToNetworkAddressOutput() NetworkAddressOutput {
	return o
}

func (o NetworkAddressOutput) ToNetworkAddressOutputWithContext(ctx context.Context) NetworkAddressOutput {
	return o
}

func (o NetworkAddressOutput) ToNetworkAddressPtrOutput() NetworkAddressPtrOutput {
	return o.ToNetworkAddressPtrOutputWithContext(context.Background())
}

func (o NetworkAddressOutput) ToNetworkAddressPtrOutputWithContext(ctx context.Context) NetworkAddressPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkAddress) *NetworkAddress {
		return &v
	}).(NetworkAddressPtrOutput)
}

// IPv4 address to be assigned to the server.
func (o NetworkAddressOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAddress) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Name of the existing network to use.
func (o NetworkAddressOutput) ExistingNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAddress) *string { return v.ExistingNetworkId }).(pulumi.StringPtrOutput)
}

// Id of the network to use, within the same ProvisioningConfig request.
func (o NetworkAddressOutput) NetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAddress) *string { return v.NetworkId }).(pulumi.StringPtrOutput)
}

type NetworkAddressPtrOutput struct{ *pulumi.OutputState }

func (NetworkAddressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAddress)(nil)).Elem()
}

func (o NetworkAddressPtrOutput) ToNetworkAddressPtrOutput() NetworkAddressPtrOutput {
	return o
}

func (o NetworkAddressPtrOutput) ToNetworkAddressPtrOutputWithContext(ctx context.Context) NetworkAddressPtrOutput {
	return o
}

func (o NetworkAddressPtrOutput) Elem() NetworkAddressOutput {
	return o.ApplyT(func(v *NetworkAddress) NetworkAddress {
		if v != nil {
			return *v
		}
		var ret NetworkAddress
		return ret
	}).(NetworkAddressOutput)
}

// IPv4 address to be assigned to the server.
func (o NetworkAddressPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAddress) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// Name of the existing network to use.
func (o NetworkAddressPtrOutput) ExistingNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAddress) *string {
		if v == nil {
			return nil
		}
		return v.ExistingNetworkId
	}).(pulumi.StringPtrOutput)
}

// Id of the network to use, within the same ProvisioningConfig request.
func (o NetworkAddressPtrOutput) NetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAddress) *string {
		if v == nil {
			return nil
		}
		return v.NetworkId
	}).(pulumi.StringPtrOutput)
}

// A network.
type NetworkAddressResponse struct {
	// IPv4 address to be assigned to the server.
	Address string `pulumi:"address"`
	// Name of the existing network to use.
	ExistingNetworkId string `pulumi:"existingNetworkId"`
	// Id of the network to use, within the same ProvisioningConfig request.
	NetworkId string `pulumi:"networkId"`
}

// A network.
type NetworkAddressResponseOutput struct{ *pulumi.OutputState }

func (NetworkAddressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAddressResponse)(nil)).Elem()
}

func (o NetworkAddressResponseOutput) ToNetworkAddressResponseOutput() NetworkAddressResponseOutput {
	return o
}

func (o NetworkAddressResponseOutput) ToNetworkAddressResponseOutputWithContext(ctx context.Context) NetworkAddressResponseOutput {
	return o
}

// IPv4 address to be assigned to the server.
func (o NetworkAddressResponseOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAddressResponse) string { return v.Address }).(pulumi.StringOutput)
}

// Name of the existing network to use.
func (o NetworkAddressResponseOutput) ExistingNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAddressResponse) string { return v.ExistingNetworkId }).(pulumi.StringOutput)
}

// Id of the network to use, within the same ProvisioningConfig request.
func (o NetworkAddressResponseOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAddressResponse) string { return v.NetworkId }).(pulumi.StringOutput)
}

// Configuration parameters for a new network.
type NetworkConfig struct {
	// Interconnect bandwidth. Set only when type is CLIENT.
	Bandwidth *NetworkConfigBandwidth `pulumi:"bandwidth"`
	// CIDR range of the network.
	Cidr *string `pulumi:"cidr"`
	// The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
	GcpService *string `pulumi:"gcpService"`
	// A transient unique identifier to identify a volume within an ProvisioningConfig request.
	Id *string `pulumi:"id"`
	// Service CIDR, if any.
	ServiceCidr *NetworkConfigServiceCidr `pulumi:"serviceCidr"`
	// The type of this network, either Client or Private.
	Type *NetworkConfigType `pulumi:"type"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote *string `pulumi:"userNote"`
	// List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
	VlanAttachments []IntakeVlanAttachment `pulumi:"vlanAttachments"`
	// Whether the VLAN attachment pair is located in the same project.
	VlanSameProject *bool `pulumi:"vlanSameProject"`
}

// NetworkConfigInput is an input type that accepts NetworkConfigArgs and NetworkConfigOutput values.
// You can construct a concrete instance of `NetworkConfigInput` via:
//
//          NetworkConfigArgs{...}
type NetworkConfigInput interface {
	pulumi.Input

	ToNetworkConfigOutput() NetworkConfigOutput
	ToNetworkConfigOutputWithContext(context.Context) NetworkConfigOutput
}

// Configuration parameters for a new network.
type NetworkConfigArgs struct {
	// Interconnect bandwidth. Set only when type is CLIENT.
	Bandwidth NetworkConfigBandwidthPtrInput `pulumi:"bandwidth"`
	// CIDR range of the network.
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
	GcpService pulumi.StringPtrInput `pulumi:"gcpService"`
	// A transient unique identifier to identify a volume within an ProvisioningConfig request.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Service CIDR, if any.
	ServiceCidr NetworkConfigServiceCidrPtrInput `pulumi:"serviceCidr"`
	// The type of this network, either Client or Private.
	Type NetworkConfigTypePtrInput `pulumi:"type"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote pulumi.StringPtrInput `pulumi:"userNote"`
	// List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
	VlanAttachments IntakeVlanAttachmentArrayInput `pulumi:"vlanAttachments"`
	// Whether the VLAN attachment pair is located in the same project.
	VlanSameProject pulumi.BoolPtrInput `pulumi:"vlanSameProject"`
}

func (NetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArgs) ToNetworkConfigOutput() NetworkConfigOutput {
	return i.ToNetworkConfigOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput)
}

// NetworkConfigArrayInput is an input type that accepts NetworkConfigArray and NetworkConfigArrayOutput values.
// You can construct a concrete instance of `NetworkConfigArrayInput` via:
//
//          NetworkConfigArray{ NetworkConfigArgs{...} }
type NetworkConfigArrayInput interface {
	pulumi.Input

	ToNetworkConfigArrayOutput() NetworkConfigArrayOutput
	ToNetworkConfigArrayOutputWithContext(context.Context) NetworkConfigArrayOutput
}

type NetworkConfigArray []NetworkConfigInput

func (NetworkConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArray) ToNetworkConfigArrayOutput() NetworkConfigArrayOutput {
	return i.ToNetworkConfigArrayOutputWithContext(context.Background())
}

func (i NetworkConfigArray) ToNetworkConfigArrayOutputWithContext(ctx context.Context) NetworkConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigArrayOutput)
}

// Configuration parameters for a new network.
type NetworkConfigOutput struct{ *pulumi.OutputState }

func (NetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigOutput) ToNetworkConfigOutput() NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return o
}

// Interconnect bandwidth. Set only when type is CLIENT.
func (o NetworkConfigOutput) Bandwidth() NetworkConfigBandwidthPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *NetworkConfigBandwidth { return v.Bandwidth }).(NetworkConfigBandwidthPtrOutput)
}

// CIDR range of the network.
func (o NetworkConfigOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
func (o NetworkConfigOutput) GcpService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.GcpService }).(pulumi.StringPtrOutput)
}

// A transient unique identifier to identify a volume within an ProvisioningConfig request.
func (o NetworkConfigOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Service CIDR, if any.
func (o NetworkConfigOutput) ServiceCidr() NetworkConfigServiceCidrPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *NetworkConfigServiceCidr { return v.ServiceCidr }).(NetworkConfigServiceCidrPtrOutput)
}

// The type of this network, either Client or Private.
func (o NetworkConfigOutput) Type() NetworkConfigTypePtrOutput {
	return o.ApplyT(func(v NetworkConfig) *NetworkConfigType { return v.Type }).(NetworkConfigTypePtrOutput)
}

// User note field, it can be used by customers to add additional information for the BMS Ops team .
func (o NetworkConfigOutput) UserNote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.UserNote }).(pulumi.StringPtrOutput)
}

// List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
func (o NetworkConfigOutput) VlanAttachments() IntakeVlanAttachmentArrayOutput {
	return o.ApplyT(func(v NetworkConfig) []IntakeVlanAttachment { return v.VlanAttachments }).(IntakeVlanAttachmentArrayOutput)
}

// Whether the VLAN attachment pair is located in the same project.
func (o NetworkConfigOutput) VlanSameProject() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *bool { return v.VlanSameProject }).(pulumi.BoolPtrOutput)
}

type NetworkConfigArrayOutput struct{ *pulumi.OutputState }

func (NetworkConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigArrayOutput) ToNetworkConfigArrayOutput() NetworkConfigArrayOutput {
	return o
}

func (o NetworkConfigArrayOutput) ToNetworkConfigArrayOutputWithContext(ctx context.Context) NetworkConfigArrayOutput {
	return o
}

func (o NetworkConfigArrayOutput) Index(i pulumi.IntInput) NetworkConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkConfig {
		return vs[0].([]NetworkConfig)[vs[1].(int)]
	}).(NetworkConfigOutput)
}

// Configuration parameters for a new network.
type NetworkConfigResponse struct {
	// Interconnect bandwidth. Set only when type is CLIENT.
	Bandwidth string `pulumi:"bandwidth"`
	// CIDR range of the network.
	Cidr string `pulumi:"cidr"`
	// The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
	GcpService string `pulumi:"gcpService"`
	// The name of the network config.
	Name string `pulumi:"name"`
	// Service CIDR, if any.
	ServiceCidr string `pulumi:"serviceCidr"`
	// The type of this network, either Client or Private.
	Type string `pulumi:"type"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote string `pulumi:"userNote"`
	// List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
	VlanAttachments []IntakeVlanAttachmentResponse `pulumi:"vlanAttachments"`
	// Whether the VLAN attachment pair is located in the same project.
	VlanSameProject bool `pulumi:"vlanSameProject"`
}

// Configuration parameters for a new network.
type NetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutput() NetworkConfigResponseOutput {
	return o
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutputWithContext(ctx context.Context) NetworkConfigResponseOutput {
	return o
}

// Interconnect bandwidth. Set only when type is CLIENT.
func (o NetworkConfigResponseOutput) Bandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Bandwidth }).(pulumi.StringOutput)
}

// CIDR range of the network.
func (o NetworkConfigResponseOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Cidr }).(pulumi.StringOutput)
}

// The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
func (o NetworkConfigResponseOutput) GcpService() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.GcpService }).(pulumi.StringOutput)
}

// The name of the network config.
func (o NetworkConfigResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Service CIDR, if any.
func (o NetworkConfigResponseOutput) ServiceCidr() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.ServiceCidr }).(pulumi.StringOutput)
}

// The type of this network, either Client or Private.
func (o NetworkConfigResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User note field, it can be used by customers to add additional information for the BMS Ops team .
func (o NetworkConfigResponseOutput) UserNote() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.UserNote }).(pulumi.StringOutput)
}

// List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
func (o NetworkConfigResponseOutput) VlanAttachments() IntakeVlanAttachmentResponseArrayOutput {
	return o.ApplyT(func(v NetworkConfigResponse) []IntakeVlanAttachmentResponse { return v.VlanAttachments }).(IntakeVlanAttachmentResponseArrayOutput)
}

// Whether the VLAN attachment pair is located in the same project.
func (o NetworkConfigResponseOutput) VlanSameProject() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkConfigResponse) bool { return v.VlanSameProject }).(pulumi.BoolOutput)
}

type NetworkConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponseArrayOutput) ToNetworkConfigResponseArrayOutput() NetworkConfigResponseArrayOutput {
	return o
}

func (o NetworkConfigResponseArrayOutput) ToNetworkConfigResponseArrayOutputWithContext(ctx context.Context) NetworkConfigResponseArrayOutput {
	return o
}

func (o NetworkConfigResponseArrayOutput) Index(i pulumi.IntInput) NetworkConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkConfigResponse {
		return vs[0].([]NetworkConfigResponse)[vs[1].(int)]
	}).(NetworkConfigResponseOutput)
}

// A NFS export entry.
type NfsExport struct {
	// Allow dev flag in NfsShare AllowedClientsRequest.
	AllowDev *bool `pulumi:"allowDev"`
	// Allow the setuid flag.
	AllowSuid *bool `pulumi:"allowSuid"`
	// A CIDR range.
	Cidr *string `pulumi:"cidr"`
	// Either a single machine, identified by an ID, or a comma-separated list of machine IDs.
	MachineId *string `pulumi:"machineId"`
	// Network to use to publish the export.
	NetworkId *string `pulumi:"networkId"`
	// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
	NoRootSquash *bool `pulumi:"noRootSquash"`
	// Export permissions.
	Permissions *NfsExportPermissions `pulumi:"permissions"`
}

// NfsExportInput is an input type that accepts NfsExportArgs and NfsExportOutput values.
// You can construct a concrete instance of `NfsExportInput` via:
//
//          NfsExportArgs{...}
type NfsExportInput interface {
	pulumi.Input

	ToNfsExportOutput() NfsExportOutput
	ToNfsExportOutputWithContext(context.Context) NfsExportOutput
}

// A NFS export entry.
type NfsExportArgs struct {
	// Allow dev flag in NfsShare AllowedClientsRequest.
	AllowDev pulumi.BoolPtrInput `pulumi:"allowDev"`
	// Allow the setuid flag.
	AllowSuid pulumi.BoolPtrInput `pulumi:"allowSuid"`
	// A CIDR range.
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// Either a single machine, identified by an ID, or a comma-separated list of machine IDs.
	MachineId pulumi.StringPtrInput `pulumi:"machineId"`
	// Network to use to publish the export.
	NetworkId pulumi.StringPtrInput `pulumi:"networkId"`
	// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
	NoRootSquash pulumi.BoolPtrInput `pulumi:"noRootSquash"`
	// Export permissions.
	Permissions NfsExportPermissionsPtrInput `pulumi:"permissions"`
}

func (NfsExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsExport)(nil)).Elem()
}

func (i NfsExportArgs) ToNfsExportOutput() NfsExportOutput {
	return i.ToNfsExportOutputWithContext(context.Background())
}

func (i NfsExportArgs) ToNfsExportOutputWithContext(ctx context.Context) NfsExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsExportOutput)
}

// NfsExportArrayInput is an input type that accepts NfsExportArray and NfsExportArrayOutput values.
// You can construct a concrete instance of `NfsExportArrayInput` via:
//
//          NfsExportArray{ NfsExportArgs{...} }
type NfsExportArrayInput interface {
	pulumi.Input

	ToNfsExportArrayOutput() NfsExportArrayOutput
	ToNfsExportArrayOutputWithContext(context.Context) NfsExportArrayOutput
}

type NfsExportArray []NfsExportInput

func (NfsExportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsExport)(nil)).Elem()
}

func (i NfsExportArray) ToNfsExportArrayOutput() NfsExportArrayOutput {
	return i.ToNfsExportArrayOutputWithContext(context.Background())
}

func (i NfsExportArray) ToNfsExportArrayOutputWithContext(ctx context.Context) NfsExportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsExportArrayOutput)
}

// A NFS export entry.
type NfsExportOutput struct{ *pulumi.OutputState }

func (NfsExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsExport)(nil)).Elem()
}

func (o NfsExportOutput) ToNfsExportOutput() NfsExportOutput {
	return o
}

func (o NfsExportOutput) ToNfsExportOutputWithContext(ctx context.Context) NfsExportOutput {
	return o
}

// Allow dev flag in NfsShare AllowedClientsRequest.
func (o NfsExportOutput) AllowDev() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsExport) *bool { return v.AllowDev }).(pulumi.BoolPtrOutput)
}

// Allow the setuid flag.
func (o NfsExportOutput) AllowSuid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsExport) *bool { return v.AllowSuid }).(pulumi.BoolPtrOutput)
}

// A CIDR range.
func (o NfsExportOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsExport) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// Either a single machine, identified by an ID, or a comma-separated list of machine IDs.
func (o NfsExportOutput) MachineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsExport) *string { return v.MachineId }).(pulumi.StringPtrOutput)
}

// Network to use to publish the export.
func (o NfsExportOutput) NetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsExport) *string { return v.NetworkId }).(pulumi.StringPtrOutput)
}

// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
func (o NfsExportOutput) NoRootSquash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsExport) *bool { return v.NoRootSquash }).(pulumi.BoolPtrOutput)
}

// Export permissions.
func (o NfsExportOutput) Permissions() NfsExportPermissionsPtrOutput {
	return o.ApplyT(func(v NfsExport) *NfsExportPermissions { return v.Permissions }).(NfsExportPermissionsPtrOutput)
}

type NfsExportArrayOutput struct{ *pulumi.OutputState }

func (NfsExportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsExport)(nil)).Elem()
}

func (o NfsExportArrayOutput) ToNfsExportArrayOutput() NfsExportArrayOutput {
	return o
}

func (o NfsExportArrayOutput) ToNfsExportArrayOutputWithContext(ctx context.Context) NfsExportArrayOutput {
	return o
}

func (o NfsExportArrayOutput) Index(i pulumi.IntInput) NfsExportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NfsExport {
		return vs[0].([]NfsExport)[vs[1].(int)]
	}).(NfsExportOutput)
}

// A NFS export entry.
type NfsExportResponse struct {
	// Allow dev flag in NfsShare AllowedClientsRequest.
	AllowDev bool `pulumi:"allowDev"`
	// Allow the setuid flag.
	AllowSuid bool `pulumi:"allowSuid"`
	// A CIDR range.
	Cidr string `pulumi:"cidr"`
	// Either a single machine, identified by an ID, or a comma-separated list of machine IDs.
	MachineId string `pulumi:"machineId"`
	// Network to use to publish the export.
	NetworkId string `pulumi:"networkId"`
	// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
	NoRootSquash bool `pulumi:"noRootSquash"`
	// Export permissions.
	Permissions string `pulumi:"permissions"`
}

// A NFS export entry.
type NfsExportResponseOutput struct{ *pulumi.OutputState }

func (NfsExportResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsExportResponse)(nil)).Elem()
}

func (o NfsExportResponseOutput) ToNfsExportResponseOutput() NfsExportResponseOutput {
	return o
}

func (o NfsExportResponseOutput) ToNfsExportResponseOutputWithContext(ctx context.Context) NfsExportResponseOutput {
	return o
}

// Allow dev flag in NfsShare AllowedClientsRequest.
func (o NfsExportResponseOutput) AllowDev() pulumi.BoolOutput {
	return o.ApplyT(func(v NfsExportResponse) bool { return v.AllowDev }).(pulumi.BoolOutput)
}

// Allow the setuid flag.
func (o NfsExportResponseOutput) AllowSuid() pulumi.BoolOutput {
	return o.ApplyT(func(v NfsExportResponse) bool { return v.AllowSuid }).(pulumi.BoolOutput)
}

// A CIDR range.
func (o NfsExportResponseOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v NfsExportResponse) string { return v.Cidr }).(pulumi.StringOutput)
}

// Either a single machine, identified by an ID, or a comma-separated list of machine IDs.
func (o NfsExportResponseOutput) MachineId() pulumi.StringOutput {
	return o.ApplyT(func(v NfsExportResponse) string { return v.MachineId }).(pulumi.StringOutput)
}

// Network to use to publish the export.
func (o NfsExportResponseOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v NfsExportResponse) string { return v.NetworkId }).(pulumi.StringOutput)
}

// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
func (o NfsExportResponseOutput) NoRootSquash() pulumi.BoolOutput {
	return o.ApplyT(func(v NfsExportResponse) bool { return v.NoRootSquash }).(pulumi.BoolOutput)
}

// Export permissions.
func (o NfsExportResponseOutput) Permissions() pulumi.StringOutput {
	return o.ApplyT(func(v NfsExportResponse) string { return v.Permissions }).(pulumi.StringOutput)
}

type NfsExportResponseArrayOutput struct{ *pulumi.OutputState }

func (NfsExportResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsExportResponse)(nil)).Elem()
}

func (o NfsExportResponseArrayOutput) ToNfsExportResponseArrayOutput() NfsExportResponseArrayOutput {
	return o
}

func (o NfsExportResponseArrayOutput) ToNfsExportResponseArrayOutputWithContext(ctx context.Context) NfsExportResponseArrayOutput {
	return o
}

func (o NfsExportResponseArrayOutput) Index(i pulumi.IntInput) NfsExportResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NfsExportResponse {
		return vs[0].([]NfsExportResponse)[vs[1].(int)]
	}).(NfsExportResponseOutput)
}

// Configuration parameters for a new volume.
type VolumeConfig struct {
	// The GCP service of the storage volume. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
	GcpService *string `pulumi:"gcpService"`
	// A transient unique identifier to identify a volume within an ProvisioningConfig request.
	Id *string `pulumi:"id"`
	// LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.
	LunRanges []LunRange `pulumi:"lunRanges"`
	// Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.
	MachineIds []string `pulumi:"machineIds"`
	// NFS exports. Set only when protocol is PROTOCOL_NFS.
	NfsExports []NfsExport `pulumi:"nfsExports"`
	// Volume protocol.
	Protocol *VolumeConfigProtocol `pulumi:"protocol"`
	// The requested size of this volume, in GB.
	SizeGb *int `pulumi:"sizeGb"`
	// Whether snapshots should be enabled.
	SnapshotsEnabled *bool `pulumi:"snapshotsEnabled"`
	// The type of this Volume.
	Type *VolumeConfigType `pulumi:"type"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote *string `pulumi:"userNote"`
}

// VolumeConfigInput is an input type that accepts VolumeConfigArgs and VolumeConfigOutput values.
// You can construct a concrete instance of `VolumeConfigInput` via:
//
//          VolumeConfigArgs{...}
type VolumeConfigInput interface {
	pulumi.Input

	ToVolumeConfigOutput() VolumeConfigOutput
	ToVolumeConfigOutputWithContext(context.Context) VolumeConfigOutput
}

// Configuration parameters for a new volume.
type VolumeConfigArgs struct {
	// The GCP service of the storage volume. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
	GcpService pulumi.StringPtrInput `pulumi:"gcpService"`
	// A transient unique identifier to identify a volume within an ProvisioningConfig request.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.
	LunRanges LunRangeArrayInput `pulumi:"lunRanges"`
	// Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.
	MachineIds pulumi.StringArrayInput `pulumi:"machineIds"`
	// NFS exports. Set only when protocol is PROTOCOL_NFS.
	NfsExports NfsExportArrayInput `pulumi:"nfsExports"`
	// Volume protocol.
	Protocol VolumeConfigProtocolPtrInput `pulumi:"protocol"`
	// The requested size of this volume, in GB.
	SizeGb pulumi.IntPtrInput `pulumi:"sizeGb"`
	// Whether snapshots should be enabled.
	SnapshotsEnabled pulumi.BoolPtrInput `pulumi:"snapshotsEnabled"`
	// The type of this Volume.
	Type VolumeConfigTypePtrInput `pulumi:"type"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote pulumi.StringPtrInput `pulumi:"userNote"`
}

func (VolumeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeConfig)(nil)).Elem()
}

func (i VolumeConfigArgs) ToVolumeConfigOutput() VolumeConfigOutput {
	return i.ToVolumeConfigOutputWithContext(context.Background())
}

func (i VolumeConfigArgs) ToVolumeConfigOutputWithContext(ctx context.Context) VolumeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeConfigOutput)
}

// VolumeConfigArrayInput is an input type that accepts VolumeConfigArray and VolumeConfigArrayOutput values.
// You can construct a concrete instance of `VolumeConfigArrayInput` via:
//
//          VolumeConfigArray{ VolumeConfigArgs{...} }
type VolumeConfigArrayInput interface {
	pulumi.Input

	ToVolumeConfigArrayOutput() VolumeConfigArrayOutput
	ToVolumeConfigArrayOutputWithContext(context.Context) VolumeConfigArrayOutput
}

type VolumeConfigArray []VolumeConfigInput

func (VolumeConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeConfig)(nil)).Elem()
}

func (i VolumeConfigArray) ToVolumeConfigArrayOutput() VolumeConfigArrayOutput {
	return i.ToVolumeConfigArrayOutputWithContext(context.Background())
}

func (i VolumeConfigArray) ToVolumeConfigArrayOutputWithContext(ctx context.Context) VolumeConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeConfigArrayOutput)
}

// Configuration parameters for a new volume.
type VolumeConfigOutput struct{ *pulumi.OutputState }

func (VolumeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeConfig)(nil)).Elem()
}

func (o VolumeConfigOutput) ToVolumeConfigOutput() VolumeConfigOutput {
	return o
}

func (o VolumeConfigOutput) ToVolumeConfigOutputWithContext(ctx context.Context) VolumeConfigOutput {
	return o
}

// The GCP service of the storage volume. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
func (o VolumeConfigOutput) GcpService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeConfig) *string { return v.GcpService }).(pulumi.StringPtrOutput)
}

// A transient unique identifier to identify a volume within an ProvisioningConfig request.
func (o VolumeConfigOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeConfig) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.
func (o VolumeConfigOutput) LunRanges() LunRangeArrayOutput {
	return o.ApplyT(func(v VolumeConfig) []LunRange { return v.LunRanges }).(LunRangeArrayOutput)
}

// Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.
func (o VolumeConfigOutput) MachineIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeConfig) []string { return v.MachineIds }).(pulumi.StringArrayOutput)
}

// NFS exports. Set only when protocol is PROTOCOL_NFS.
func (o VolumeConfigOutput) NfsExports() NfsExportArrayOutput {
	return o.ApplyT(func(v VolumeConfig) []NfsExport { return v.NfsExports }).(NfsExportArrayOutput)
}

// Volume protocol.
func (o VolumeConfigOutput) Protocol() VolumeConfigProtocolPtrOutput {
	return o.ApplyT(func(v VolumeConfig) *VolumeConfigProtocol { return v.Protocol }).(VolumeConfigProtocolPtrOutput)
}

// The requested size of this volume, in GB.
func (o VolumeConfigOutput) SizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeConfig) *int { return v.SizeGb }).(pulumi.IntPtrOutput)
}

// Whether snapshots should be enabled.
func (o VolumeConfigOutput) SnapshotsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeConfig) *bool { return v.SnapshotsEnabled }).(pulumi.BoolPtrOutput)
}

// The type of this Volume.
func (o VolumeConfigOutput) Type() VolumeConfigTypePtrOutput {
	return o.ApplyT(func(v VolumeConfig) *VolumeConfigType { return v.Type }).(VolumeConfigTypePtrOutput)
}

// User note field, it can be used by customers to add additional information for the BMS Ops team .
func (o VolumeConfigOutput) UserNote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeConfig) *string { return v.UserNote }).(pulumi.StringPtrOutput)
}

type VolumeConfigArrayOutput struct{ *pulumi.OutputState }

func (VolumeConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeConfig)(nil)).Elem()
}

func (o VolumeConfigArrayOutput) ToVolumeConfigArrayOutput() VolumeConfigArrayOutput {
	return o
}

func (o VolumeConfigArrayOutput) ToVolumeConfigArrayOutputWithContext(ctx context.Context) VolumeConfigArrayOutput {
	return o
}

func (o VolumeConfigArrayOutput) Index(i pulumi.IntInput) VolumeConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeConfig {
		return vs[0].([]VolumeConfig)[vs[1].(int)]
	}).(VolumeConfigOutput)
}

// Configuration parameters for a new volume.
type VolumeConfigResponse struct {
	// The GCP service of the storage volume. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
	GcpService string `pulumi:"gcpService"`
	// LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.
	LunRanges []LunRangeResponse `pulumi:"lunRanges"`
	// Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.
	MachineIds []string `pulumi:"machineIds"`
	// The name of the volume config.
	Name string `pulumi:"name"`
	// NFS exports. Set only when protocol is PROTOCOL_NFS.
	NfsExports []NfsExportResponse `pulumi:"nfsExports"`
	// Volume protocol.
	Protocol string `pulumi:"protocol"`
	// The requested size of this volume, in GB.
	SizeGb int `pulumi:"sizeGb"`
	// Whether snapshots should be enabled.
	SnapshotsEnabled bool `pulumi:"snapshotsEnabled"`
	// The type of this Volume.
	Type string `pulumi:"type"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote string `pulumi:"userNote"`
}

// Configuration parameters for a new volume.
type VolumeConfigResponseOutput struct{ *pulumi.OutputState }

func (VolumeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeConfigResponse)(nil)).Elem()
}

func (o VolumeConfigResponseOutput) ToVolumeConfigResponseOutput() VolumeConfigResponseOutput {
	return o
}

func (o VolumeConfigResponseOutput) ToVolumeConfigResponseOutputWithContext(ctx context.Context) VolumeConfigResponseOutput {
	return o
}

// The GCP service of the storage volume. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
func (o VolumeConfigResponseOutput) GcpService() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeConfigResponse) string { return v.GcpService }).(pulumi.StringOutput)
}

// LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.
func (o VolumeConfigResponseOutput) LunRanges() LunRangeResponseArrayOutput {
	return o.ApplyT(func(v VolumeConfigResponse) []LunRangeResponse { return v.LunRanges }).(LunRangeResponseArrayOutput)
}

// Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.
func (o VolumeConfigResponseOutput) MachineIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeConfigResponse) []string { return v.MachineIds }).(pulumi.StringArrayOutput)
}

// The name of the volume config.
func (o VolumeConfigResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeConfigResponse) string { return v.Name }).(pulumi.StringOutput)
}

// NFS exports. Set only when protocol is PROTOCOL_NFS.
func (o VolumeConfigResponseOutput) NfsExports() NfsExportResponseArrayOutput {
	return o.ApplyT(func(v VolumeConfigResponse) []NfsExportResponse { return v.NfsExports }).(NfsExportResponseArrayOutput)
}

// Volume protocol.
func (o VolumeConfigResponseOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeConfigResponse) string { return v.Protocol }).(pulumi.StringOutput)
}

// The requested size of this volume, in GB.
func (o VolumeConfigResponseOutput) SizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v VolumeConfigResponse) int { return v.SizeGb }).(pulumi.IntOutput)
}

// Whether snapshots should be enabled.
func (o VolumeConfigResponseOutput) SnapshotsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v VolumeConfigResponse) bool { return v.SnapshotsEnabled }).(pulumi.BoolOutput)
}

// The type of this Volume.
func (o VolumeConfigResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeConfigResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User note field, it can be used by customers to add additional information for the BMS Ops team .
func (o VolumeConfigResponseOutput) UserNote() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeConfigResponse) string { return v.UserNote }).(pulumi.StringOutput)
}

type VolumeConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeConfigResponse)(nil)).Elem()
}

func (o VolumeConfigResponseArrayOutput) ToVolumeConfigResponseArrayOutput() VolumeConfigResponseArrayOutput {
	return o
}

func (o VolumeConfigResponseArrayOutput) ToVolumeConfigResponseArrayOutputWithContext(ctx context.Context) VolumeConfigResponseArrayOutput {
	return o
}

func (o VolumeConfigResponseArrayOutput) Index(i pulumi.IntInput) VolumeConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeConfigResponse {
		return vs[0].([]VolumeConfigResponse)[vs[1].(int)]
	}).(VolumeConfigResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudBaremetalsolutionV2LogicalInterfaceInput)(nil)).Elem(), GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayInput)(nil)).Elem(), GoogleCloudBaremetalsolutionV2LogicalInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigInput)(nil)).Elem(), InstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigArrayInput)(nil)).Elem(), InstanceConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntakeVlanAttachmentInput)(nil)).Elem(), IntakeVlanAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntakeVlanAttachmentArrayInput)(nil)).Elem(), IntakeVlanAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogicalNetworkInterfaceInput)(nil)).Elem(), LogicalNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogicalNetworkInterfaceArrayInput)(nil)).Elem(), LogicalNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LunRangeInput)(nil)).Elem(), LunRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LunRangeArrayInput)(nil)).Elem(), LunRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAddressInput)(nil)).Elem(), NetworkAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAddressPtrInput)(nil)).Elem(), NetworkAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigArrayInput)(nil)).Elem(), NetworkConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NfsExportInput)(nil)).Elem(), NfsExportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NfsExportArrayInput)(nil)).Elem(), NfsExportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeConfigInput)(nil)).Elem(), VolumeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeConfigArrayInput)(nil)).Elem(), VolumeConfigArray{})
	pulumi.RegisterOutputType(GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput{})
	pulumi.RegisterOutputType(GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput{})
	pulumi.RegisterOutputType(InstanceConfigOutput{})
	pulumi.RegisterOutputType(InstanceConfigArrayOutput{})
	pulumi.RegisterOutputType(InstanceConfigResponseOutput{})
	pulumi.RegisterOutputType(InstanceConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(IntakeVlanAttachmentOutput{})
	pulumi.RegisterOutputType(IntakeVlanAttachmentArrayOutput{})
	pulumi.RegisterOutputType(IntakeVlanAttachmentResponseOutput{})
	pulumi.RegisterOutputType(IntakeVlanAttachmentResponseArrayOutput{})
	pulumi.RegisterOutputType(LogicalNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(LogicalNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(LogicalNetworkInterfaceResponseOutput{})
	pulumi.RegisterOutputType(LogicalNetworkInterfaceResponseArrayOutput{})
	pulumi.RegisterOutputType(LunRangeOutput{})
	pulumi.RegisterOutputType(LunRangeArrayOutput{})
	pulumi.RegisterOutputType(LunRangeResponseOutput{})
	pulumi.RegisterOutputType(LunRangeResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkAddressOutput{})
	pulumi.RegisterOutputType(NetworkAddressPtrOutput{})
	pulumi.RegisterOutputType(NetworkAddressResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigOutput{})
	pulumi.RegisterOutputType(NetworkConfigArrayOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(NfsExportOutput{})
	pulumi.RegisterOutputType(NfsExportArrayOutput{})
	pulumi.RegisterOutputType(NfsExportResponseOutput{})
	pulumi.RegisterOutputType(NfsExportResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeConfigOutput{})
	pulumi.RegisterOutputType(VolumeConfigArrayOutput{})
	pulumi.RegisterOutputType(VolumeConfigResponseOutput{})
	pulumi.RegisterOutputType(VolumeConfigResponseArrayOutput{})
}
