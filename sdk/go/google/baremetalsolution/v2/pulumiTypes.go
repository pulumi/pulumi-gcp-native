// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents an 'access point' for the share.
type AllowedClient struct {
	// Allow dev flag. Which controls whether to allow creation of devices.
	AllowDev *bool `pulumi:"allowDev"`
	// Allow the setuid flag.
	AllowSuid *bool `pulumi:"allowSuid"`
	// The subnet of IP addresses permitted to access the share.
	AllowedClientsCidr *string `pulumi:"allowedClientsCidr"`
	// Mount permissions.
	MountPermissions *AllowedClientMountPermissions `pulumi:"mountPermissions"`
	// The network the access point sits on.
	Network *string `pulumi:"network"`
	// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
	NoRootSquash *bool `pulumi:"noRootSquash"`
}

// AllowedClientInput is an input type that accepts AllowedClientArgs and AllowedClientOutput values.
// You can construct a concrete instance of `AllowedClientInput` via:
//
//	AllowedClientArgs{...}
type AllowedClientInput interface {
	pulumi.Input

	ToAllowedClientOutput() AllowedClientOutput
	ToAllowedClientOutputWithContext(context.Context) AllowedClientOutput
}

// Represents an 'access point' for the share.
type AllowedClientArgs struct {
	// Allow dev flag. Which controls whether to allow creation of devices.
	AllowDev pulumi.BoolPtrInput `pulumi:"allowDev"`
	// Allow the setuid flag.
	AllowSuid pulumi.BoolPtrInput `pulumi:"allowSuid"`
	// The subnet of IP addresses permitted to access the share.
	AllowedClientsCidr pulumi.StringPtrInput `pulumi:"allowedClientsCidr"`
	// Mount permissions.
	MountPermissions AllowedClientMountPermissionsPtrInput `pulumi:"mountPermissions"`
	// The network the access point sits on.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
	NoRootSquash pulumi.BoolPtrInput `pulumi:"noRootSquash"`
}

func (AllowedClientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedClient)(nil)).Elem()
}

func (i AllowedClientArgs) ToAllowedClientOutput() AllowedClientOutput {
	return i.ToAllowedClientOutputWithContext(context.Background())
}

func (i AllowedClientArgs) ToAllowedClientOutputWithContext(ctx context.Context) AllowedClientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedClientOutput)
}

// AllowedClientArrayInput is an input type that accepts AllowedClientArray and AllowedClientArrayOutput values.
// You can construct a concrete instance of `AllowedClientArrayInput` via:
//
//	AllowedClientArray{ AllowedClientArgs{...} }
type AllowedClientArrayInput interface {
	pulumi.Input

	ToAllowedClientArrayOutput() AllowedClientArrayOutput
	ToAllowedClientArrayOutputWithContext(context.Context) AllowedClientArrayOutput
}

type AllowedClientArray []AllowedClientInput

func (AllowedClientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedClient)(nil)).Elem()
}

func (i AllowedClientArray) ToAllowedClientArrayOutput() AllowedClientArrayOutput {
	return i.ToAllowedClientArrayOutputWithContext(context.Background())
}

func (i AllowedClientArray) ToAllowedClientArrayOutputWithContext(ctx context.Context) AllowedClientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedClientArrayOutput)
}

// Represents an 'access point' for the share.
type AllowedClientOutput struct{ *pulumi.OutputState }

func (AllowedClientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedClient)(nil)).Elem()
}

func (o AllowedClientOutput) ToAllowedClientOutput() AllowedClientOutput {
	return o
}

func (o AllowedClientOutput) ToAllowedClientOutputWithContext(ctx context.Context) AllowedClientOutput {
	return o
}

// Allow dev flag. Which controls whether to allow creation of devices.
func (o AllowedClientOutput) AllowDev() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AllowedClient) *bool { return v.AllowDev }).(pulumi.BoolPtrOutput)
}

// Allow the setuid flag.
func (o AllowedClientOutput) AllowSuid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AllowedClient) *bool { return v.AllowSuid }).(pulumi.BoolPtrOutput)
}

// The subnet of IP addresses permitted to access the share.
func (o AllowedClientOutput) AllowedClientsCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllowedClient) *string { return v.AllowedClientsCidr }).(pulumi.StringPtrOutput)
}

// Mount permissions.
func (o AllowedClientOutput) MountPermissions() AllowedClientMountPermissionsPtrOutput {
	return o.ApplyT(func(v AllowedClient) *AllowedClientMountPermissions { return v.MountPermissions }).(AllowedClientMountPermissionsPtrOutput)
}

// The network the access point sits on.
func (o AllowedClientOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllowedClient) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
func (o AllowedClientOutput) NoRootSquash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AllowedClient) *bool { return v.NoRootSquash }).(pulumi.BoolPtrOutput)
}

type AllowedClientArrayOutput struct{ *pulumi.OutputState }

func (AllowedClientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedClient)(nil)).Elem()
}

func (o AllowedClientArrayOutput) ToAllowedClientArrayOutput() AllowedClientArrayOutput {
	return o
}

func (o AllowedClientArrayOutput) ToAllowedClientArrayOutputWithContext(ctx context.Context) AllowedClientArrayOutput {
	return o
}

func (o AllowedClientArrayOutput) Index(i pulumi.IntInput) AllowedClientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowedClient {
		return vs[0].([]AllowedClient)[vs[1].(int)]
	}).(AllowedClientOutput)
}

// Represents an 'access point' for the share.
type AllowedClientResponse struct {
	// Allow dev flag. Which controls whether to allow creation of devices.
	AllowDev bool `pulumi:"allowDev"`
	// Allow the setuid flag.
	AllowSuid bool `pulumi:"allowSuid"`
	// The subnet of IP addresses permitted to access the share.
	AllowedClientsCidr string `pulumi:"allowedClientsCidr"`
	// Mount permissions.
	MountPermissions string `pulumi:"mountPermissions"`
	// The network the access point sits on.
	Network string `pulumi:"network"`
	// The path to access NFS, in format shareIP:/InstanceID InstanceID is the generated ID instead of customer provided name. example like "10.0.0.0:/g123456789-nfs001"
	NfsPath string `pulumi:"nfsPath"`
	// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
	NoRootSquash bool `pulumi:"noRootSquash"`
	// The IP address of the share on this network. Assigned automatically during provisioning based on the network's services_cidr.
	ShareIp string `pulumi:"shareIp"`
}

// Represents an 'access point' for the share.
type AllowedClientResponseOutput struct{ *pulumi.OutputState }

func (AllowedClientResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedClientResponse)(nil)).Elem()
}

func (o AllowedClientResponseOutput) ToAllowedClientResponseOutput() AllowedClientResponseOutput {
	return o
}

func (o AllowedClientResponseOutput) ToAllowedClientResponseOutputWithContext(ctx context.Context) AllowedClientResponseOutput {
	return o
}

// Allow dev flag. Which controls whether to allow creation of devices.
func (o AllowedClientResponseOutput) AllowDev() pulumi.BoolOutput {
	return o.ApplyT(func(v AllowedClientResponse) bool { return v.AllowDev }).(pulumi.BoolOutput)
}

// Allow the setuid flag.
func (o AllowedClientResponseOutput) AllowSuid() pulumi.BoolOutput {
	return o.ApplyT(func(v AllowedClientResponse) bool { return v.AllowSuid }).(pulumi.BoolOutput)
}

// The subnet of IP addresses permitted to access the share.
func (o AllowedClientResponseOutput) AllowedClientsCidr() pulumi.StringOutput {
	return o.ApplyT(func(v AllowedClientResponse) string { return v.AllowedClientsCidr }).(pulumi.StringOutput)
}

// Mount permissions.
func (o AllowedClientResponseOutput) MountPermissions() pulumi.StringOutput {
	return o.ApplyT(func(v AllowedClientResponse) string { return v.MountPermissions }).(pulumi.StringOutput)
}

// The network the access point sits on.
func (o AllowedClientResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v AllowedClientResponse) string { return v.Network }).(pulumi.StringOutput)
}

// The path to access NFS, in format shareIP:/InstanceID InstanceID is the generated ID instead of customer provided name. example like "10.0.0.0:/g123456789-nfs001"
func (o AllowedClientResponseOutput) NfsPath() pulumi.StringOutput {
	return o.ApplyT(func(v AllowedClientResponse) string { return v.NfsPath }).(pulumi.StringOutput)
}

// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
func (o AllowedClientResponseOutput) NoRootSquash() pulumi.BoolOutput {
	return o.ApplyT(func(v AllowedClientResponse) bool { return v.NoRootSquash }).(pulumi.BoolOutput)
}

// The IP address of the share on this network. Assigned automatically during provisioning based on the network's services_cidr.
func (o AllowedClientResponseOutput) ShareIp() pulumi.StringOutput {
	return o.ApplyT(func(v AllowedClientResponse) string { return v.ShareIp }).(pulumi.StringOutput)
}

type AllowedClientResponseArrayOutput struct{ *pulumi.OutputState }

func (AllowedClientResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedClientResponse)(nil)).Elem()
}

func (o AllowedClientResponseArrayOutput) ToAllowedClientResponseArrayOutput() AllowedClientResponseArrayOutput {
	return o
}

func (o AllowedClientResponseArrayOutput) ToAllowedClientResponseArrayOutputWithContext(ctx context.Context) AllowedClientResponseArrayOutput {
	return o
}

func (o AllowedClientResponseArrayOutput) Index(i pulumi.IntInput) AllowedClientResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowedClientResponse {
		return vs[0].([]AllowedClientResponse)[vs[1].(int)]
	}).(AllowedClientResponseOutput)
}

// Each logical interface represents a logical abstraction of the underlying physical interface (for eg. bond, nic) of the instance. Each logical interface can effectively map to multiple network-IP pairs and still be mapped to one underlying physical interface.
type GoogleCloudBaremetalsolutionV2LogicalInterface struct {
	// The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template. This field is deprecated.
	//
	// Deprecated: The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template. This field is deprecated.
	InterfaceIndex *int `pulumi:"interfaceIndex"`
	// List of logical network interfaces within a logical interface.
	LogicalNetworkInterfaces []LogicalNetworkInterface `pulumi:"logicalNetworkInterfaces"`
	// Interface name. This is of syntax or and forms part of the network template name.
	Name *string `pulumi:"name"`
}

// GoogleCloudBaremetalsolutionV2LogicalInterfaceInput is an input type that accepts GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs and GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput values.
// You can construct a concrete instance of `GoogleCloudBaremetalsolutionV2LogicalInterfaceInput` via:
//
//	GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs{...}
type GoogleCloudBaremetalsolutionV2LogicalInterfaceInput interface {
	pulumi.Input

	ToGoogleCloudBaremetalsolutionV2LogicalInterfaceOutput() GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput
	ToGoogleCloudBaremetalsolutionV2LogicalInterfaceOutputWithContext(context.Context) GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput
}

// Each logical interface represents a logical abstraction of the underlying physical interface (for eg. bond, nic) of the instance. Each logical interface can effectively map to multiple network-IP pairs and still be mapped to one underlying physical interface.
type GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs struct {
	// The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template. This field is deprecated.
	//
	// Deprecated: The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template. This field is deprecated.
	InterfaceIndex pulumi.IntPtrInput `pulumi:"interfaceIndex"`
	// List of logical network interfaces within a logical interface.
	LogicalNetworkInterfaces LogicalNetworkInterfaceArrayInput `pulumi:"logicalNetworkInterfaces"`
	// Interface name. This is of syntax or and forms part of the network template name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBaremetalsolutionV2LogicalInterface)(nil)).Elem()
}

func (i GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceOutput() GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput {
	return i.ToGoogleCloudBaremetalsolutionV2LogicalInterfaceOutputWithContext(context.Background())
}

func (i GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceOutputWithContext(ctx context.Context) GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput)
}

// GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayInput is an input type that accepts GoogleCloudBaremetalsolutionV2LogicalInterfaceArray and GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput values.
// You can construct a concrete instance of `GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayInput` via:
//
//	GoogleCloudBaremetalsolutionV2LogicalInterfaceArray{ GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs{...} }
type GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayInput interface {
	pulumi.Input

	ToGoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput() GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput
	ToGoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutputWithContext(context.Context) GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput
}

type GoogleCloudBaremetalsolutionV2LogicalInterfaceArray []GoogleCloudBaremetalsolutionV2LogicalInterfaceInput

func (GoogleCloudBaremetalsolutionV2LogicalInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudBaremetalsolutionV2LogicalInterface)(nil)).Elem()
}

func (i GoogleCloudBaremetalsolutionV2LogicalInterfaceArray) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput() GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput {
	return i.ToGoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutputWithContext(context.Background())
}

func (i GoogleCloudBaremetalsolutionV2LogicalInterfaceArray) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutputWithContext(ctx context.Context) GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput)
}

// Each logical interface represents a logical abstraction of the underlying physical interface (for eg. bond, nic) of the instance. Each logical interface can effectively map to multiple network-IP pairs and still be mapped to one underlying physical interface.
type GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput struct{ *pulumi.OutputState }

func (GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBaremetalsolutionV2LogicalInterface)(nil)).Elem()
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceOutput() GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput {
	return o
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceOutputWithContext(ctx context.Context) GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput {
	return o
}

// The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template. This field is deprecated.
//
// Deprecated: The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template. This field is deprecated.
func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput) InterfaceIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleCloudBaremetalsolutionV2LogicalInterface) *int { return v.InterfaceIndex }).(pulumi.IntPtrOutput)
}

// List of logical network interfaces within a logical interface.
func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput) LogicalNetworkInterfaces() LogicalNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v GoogleCloudBaremetalsolutionV2LogicalInterface) []LogicalNetworkInterface {
		return v.LogicalNetworkInterfaces
	}).(LogicalNetworkInterfaceArrayOutput)
}

// Interface name. This is of syntax or and forms part of the network template name.
func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudBaremetalsolutionV2LogicalInterface) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudBaremetalsolutionV2LogicalInterface)(nil)).Elem()
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput() GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput {
	return o
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutputWithContext(ctx context.Context) GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput {
	return o
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput) Index(i pulumi.IntInput) GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudBaremetalsolutionV2LogicalInterface {
		return vs[0].([]GoogleCloudBaremetalsolutionV2LogicalInterface)[vs[1].(int)]
	}).(GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput)
}

// Each logical interface represents a logical abstraction of the underlying physical interface (for eg. bond, nic) of the instance. Each logical interface can effectively map to multiple network-IP pairs and still be mapped to one underlying physical interface.
type GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse struct {
	// The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template. This field is deprecated.
	//
	// Deprecated: The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template. This field is deprecated.
	InterfaceIndex int `pulumi:"interfaceIndex"`
	// List of logical network interfaces within a logical interface.
	LogicalNetworkInterfaces []LogicalNetworkInterfaceResponse `pulumi:"logicalNetworkInterfaces"`
	// Interface name. This is of syntax or and forms part of the network template name.
	Name string `pulumi:"name"`
}

// Each logical interface represents a logical abstraction of the underlying physical interface (for eg. bond, nic) of the instance. Each logical interface can effectively map to multiple network-IP pairs and still be mapped to one underlying physical interface.
type GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse)(nil)).Elem()
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput() GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput {
	return o
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutputWithContext(ctx context.Context) GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput {
	return o
}

// The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template. This field is deprecated.
//
// Deprecated: The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template. This field is deprecated.
func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput) InterfaceIndex() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse) int { return v.InterfaceIndex }).(pulumi.IntOutput)
}

// List of logical network interfaces within a logical interface.
func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput) LogicalNetworkInterfaces() LogicalNetworkInterfaceResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse) []LogicalNetworkInterfaceResponse {
		return v.LogicalNetworkInterfaces
	}).(LogicalNetworkInterfaceResponseArrayOutput)
}

// Interface name. This is of syntax or and forms part of the network template name.
func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse) string { return v.Name }).(pulumi.StringOutput)
}

type GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse)(nil)).Elem()
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput() GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput {
	return o
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput) ToGoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutputWithContext(ctx context.Context) GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput {
	return o
}

func (o GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse {
		return vs[0].([]GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse)[vs[1].(int)]
	}).(GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput)
}

// Configuration parameters for a new instance.
type InstanceConfig struct {
	// If true networks can be from different projects of the same vendor account.
	AccountNetworksEnabled *bool `pulumi:"accountNetworksEnabled"`
	// Client network address. Filled if InstanceConfig.multivlan_config is false.
	ClientNetwork *NetworkAddress `pulumi:"clientNetwork"`
	// Whether the instance should be provisioned with Hyperthreading enabled.
	Hyperthreading *bool `pulumi:"hyperthreading"`
	// A transient unique identifier to idenfity an instance within an ProvisioningConfig request.
	Id *string `pulumi:"id"`
	// Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
	InstanceType *string `pulumi:"instanceType"`
	// List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.
	LogicalInterfaces []GoogleCloudBaremetalsolutionV2LogicalInterface `pulumi:"logicalInterfaces"`
	// The type of network configuration on the instance.
	NetworkConfig *InstanceConfigNetworkConfig `pulumi:"networkConfig"`
	// Server network template name. Filled if InstanceConfig.multivlan_config is true.
	NetworkTemplate *string `pulumi:"networkTemplate"`
	// OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
	OsImage *string `pulumi:"osImage"`
	// Private network address, if any. Filled if InstanceConfig.multivlan_config is false.
	PrivateNetwork *NetworkAddress `pulumi:"privateNetwork"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote *string `pulumi:"userNote"`
}

// InstanceConfigInput is an input type that accepts InstanceConfigArgs and InstanceConfigOutput values.
// You can construct a concrete instance of `InstanceConfigInput` via:
//
//	InstanceConfigArgs{...}
type InstanceConfigInput interface {
	pulumi.Input

	ToInstanceConfigOutput() InstanceConfigOutput
	ToInstanceConfigOutputWithContext(context.Context) InstanceConfigOutput
}

// Configuration parameters for a new instance.
type InstanceConfigArgs struct {
	// If true networks can be from different projects of the same vendor account.
	AccountNetworksEnabled pulumi.BoolPtrInput `pulumi:"accountNetworksEnabled"`
	// Client network address. Filled if InstanceConfig.multivlan_config is false.
	ClientNetwork NetworkAddressPtrInput `pulumi:"clientNetwork"`
	// Whether the instance should be provisioned with Hyperthreading enabled.
	Hyperthreading pulumi.BoolPtrInput `pulumi:"hyperthreading"`
	// A transient unique identifier to idenfity an instance within an ProvisioningConfig request.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.
	LogicalInterfaces GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayInput `pulumi:"logicalInterfaces"`
	// The type of network configuration on the instance.
	NetworkConfig InstanceConfigNetworkConfigPtrInput `pulumi:"networkConfig"`
	// Server network template name. Filled if InstanceConfig.multivlan_config is true.
	NetworkTemplate pulumi.StringPtrInput `pulumi:"networkTemplate"`
	// OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
	OsImage pulumi.StringPtrInput `pulumi:"osImage"`
	// Private network address, if any. Filled if InstanceConfig.multivlan_config is false.
	PrivateNetwork NetworkAddressPtrInput `pulumi:"privateNetwork"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote pulumi.StringPtrInput `pulumi:"userNote"`
}

func (InstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfig)(nil)).Elem()
}

func (i InstanceConfigArgs) ToInstanceConfigOutput() InstanceConfigOutput {
	return i.ToInstanceConfigOutputWithContext(context.Background())
}

func (i InstanceConfigArgs) ToInstanceConfigOutputWithContext(ctx context.Context) InstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigOutput)
}

// InstanceConfigArrayInput is an input type that accepts InstanceConfigArray and InstanceConfigArrayOutput values.
// You can construct a concrete instance of `InstanceConfigArrayInput` via:
//
//	InstanceConfigArray{ InstanceConfigArgs{...} }
type InstanceConfigArrayInput interface {
	pulumi.Input

	ToInstanceConfigArrayOutput() InstanceConfigArrayOutput
	ToInstanceConfigArrayOutputWithContext(context.Context) InstanceConfigArrayOutput
}

type InstanceConfigArray []InstanceConfigInput

func (InstanceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceConfig)(nil)).Elem()
}

func (i InstanceConfigArray) ToInstanceConfigArrayOutput() InstanceConfigArrayOutput {
	return i.ToInstanceConfigArrayOutputWithContext(context.Background())
}

func (i InstanceConfigArray) ToInstanceConfigArrayOutputWithContext(ctx context.Context) InstanceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigArrayOutput)
}

// Configuration parameters for a new instance.
type InstanceConfigOutput struct{ *pulumi.OutputState }

func (InstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfig)(nil)).Elem()
}

func (o InstanceConfigOutput) ToInstanceConfigOutput() InstanceConfigOutput {
	return o
}

func (o InstanceConfigOutput) ToInstanceConfigOutputWithContext(ctx context.Context) InstanceConfigOutput {
	return o
}

// If true networks can be from different projects of the same vendor account.
func (o InstanceConfigOutput) AccountNetworksEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *bool { return v.AccountNetworksEnabled }).(pulumi.BoolPtrOutput)
}

// Client network address. Filled if InstanceConfig.multivlan_config is false.
func (o InstanceConfigOutput) ClientNetwork() NetworkAddressPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *NetworkAddress { return v.ClientNetwork }).(NetworkAddressPtrOutput)
}

// Whether the instance should be provisioned with Hyperthreading enabled.
func (o InstanceConfigOutput) Hyperthreading() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *bool { return v.Hyperthreading }).(pulumi.BoolPtrOutput)
}

// A transient unique identifier to idenfity an instance within an ProvisioningConfig request.
func (o InstanceConfigOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
func (o InstanceConfigOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.
func (o InstanceConfigOutput) LogicalInterfaces() GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput {
	return o.ApplyT(func(v InstanceConfig) []GoogleCloudBaremetalsolutionV2LogicalInterface { return v.LogicalInterfaces }).(GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput)
}

// The type of network configuration on the instance.
func (o InstanceConfigOutput) NetworkConfig() InstanceConfigNetworkConfigPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *InstanceConfigNetworkConfig { return v.NetworkConfig }).(InstanceConfigNetworkConfigPtrOutput)
}

// Server network template name. Filled if InstanceConfig.multivlan_config is true.
func (o InstanceConfigOutput) NetworkTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *string { return v.NetworkTemplate }).(pulumi.StringPtrOutput)
}

// OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
func (o InstanceConfigOutput) OsImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *string { return v.OsImage }).(pulumi.StringPtrOutput)
}

// Private network address, if any. Filled if InstanceConfig.multivlan_config is false.
func (o InstanceConfigOutput) PrivateNetwork() NetworkAddressPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *NetworkAddress { return v.PrivateNetwork }).(NetworkAddressPtrOutput)
}

// User note field, it can be used by customers to add additional information for the BMS Ops team .
func (o InstanceConfigOutput) UserNote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfig) *string { return v.UserNote }).(pulumi.StringPtrOutput)
}

type InstanceConfigArrayOutput struct{ *pulumi.OutputState }

func (InstanceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceConfig)(nil)).Elem()
}

func (o InstanceConfigArrayOutput) ToInstanceConfigArrayOutput() InstanceConfigArrayOutput {
	return o
}

func (o InstanceConfigArrayOutput) ToInstanceConfigArrayOutputWithContext(ctx context.Context) InstanceConfigArrayOutput {
	return o
}

func (o InstanceConfigArrayOutput) Index(i pulumi.IntInput) InstanceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceConfig {
		return vs[0].([]InstanceConfig)[vs[1].(int)]
	}).(InstanceConfigOutput)
}

// Configuration parameters for a new instance.
type InstanceConfigResponse struct {
	// If true networks can be from different projects of the same vendor account.
	AccountNetworksEnabled bool `pulumi:"accountNetworksEnabled"`
	// Client network address. Filled if InstanceConfig.multivlan_config is false.
	ClientNetwork NetworkAddressResponse `pulumi:"clientNetwork"`
	// Whether the instance should be provisioned with Hyperthreading enabled.
	Hyperthreading bool `pulumi:"hyperthreading"`
	// Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
	InstanceType string `pulumi:"instanceType"`
	// List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.
	LogicalInterfaces []GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse `pulumi:"logicalInterfaces"`
	// The name of the instance config.
	Name string `pulumi:"name"`
	// The type of network configuration on the instance.
	NetworkConfig string `pulumi:"networkConfig"`
	// Server network template name. Filled if InstanceConfig.multivlan_config is true.
	NetworkTemplate string `pulumi:"networkTemplate"`
	// OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
	OsImage string `pulumi:"osImage"`
	// Private network address, if any. Filled if InstanceConfig.multivlan_config is false.
	PrivateNetwork NetworkAddressResponse `pulumi:"privateNetwork"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote string `pulumi:"userNote"`
}

// Configuration parameters for a new instance.
type InstanceConfigResponseOutput struct{ *pulumi.OutputState }

func (InstanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigResponse)(nil)).Elem()
}

func (o InstanceConfigResponseOutput) ToInstanceConfigResponseOutput() InstanceConfigResponseOutput {
	return o
}

func (o InstanceConfigResponseOutput) ToInstanceConfigResponseOutputWithContext(ctx context.Context) InstanceConfigResponseOutput {
	return o
}

// If true networks can be from different projects of the same vendor account.
func (o InstanceConfigResponseOutput) AccountNetworksEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v InstanceConfigResponse) bool { return v.AccountNetworksEnabled }).(pulumi.BoolOutput)
}

// Client network address. Filled if InstanceConfig.multivlan_config is false.
func (o InstanceConfigResponseOutput) ClientNetwork() NetworkAddressResponseOutput {
	return o.ApplyT(func(v InstanceConfigResponse) NetworkAddressResponse { return v.ClientNetwork }).(NetworkAddressResponseOutput)
}

// Whether the instance should be provisioned with Hyperthreading enabled.
func (o InstanceConfigResponseOutput) Hyperthreading() pulumi.BoolOutput {
	return o.ApplyT(func(v InstanceConfigResponse) bool { return v.Hyperthreading }).(pulumi.BoolOutput)
}

// Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
func (o InstanceConfigResponseOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceConfigResponse) string { return v.InstanceType }).(pulumi.StringOutput)
}

// List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.
func (o InstanceConfigResponseOutput) LogicalInterfaces() GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput {
	return o.ApplyT(func(v InstanceConfigResponse) []GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse {
		return v.LogicalInterfaces
	}).(GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput)
}

// The name of the instance config.
func (o InstanceConfigResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceConfigResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of network configuration on the instance.
func (o InstanceConfigResponseOutput) NetworkConfig() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceConfigResponse) string { return v.NetworkConfig }).(pulumi.StringOutput)
}

// Server network template name. Filled if InstanceConfig.multivlan_config is true.
func (o InstanceConfigResponseOutput) NetworkTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceConfigResponse) string { return v.NetworkTemplate }).(pulumi.StringOutput)
}

// OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
func (o InstanceConfigResponseOutput) OsImage() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceConfigResponse) string { return v.OsImage }).(pulumi.StringOutput)
}

// Private network address, if any. Filled if InstanceConfig.multivlan_config is false.
func (o InstanceConfigResponseOutput) PrivateNetwork() NetworkAddressResponseOutput {
	return o.ApplyT(func(v InstanceConfigResponse) NetworkAddressResponse { return v.PrivateNetwork }).(NetworkAddressResponseOutput)
}

// User note field, it can be used by customers to add additional information for the BMS Ops team .
func (o InstanceConfigResponseOutput) UserNote() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceConfigResponse) string { return v.UserNote }).(pulumi.StringOutput)
}

type InstanceConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (InstanceConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceConfigResponse)(nil)).Elem()
}

func (o InstanceConfigResponseArrayOutput) ToInstanceConfigResponseArrayOutput() InstanceConfigResponseArrayOutput {
	return o
}

func (o InstanceConfigResponseArrayOutput) ToInstanceConfigResponseArrayOutputWithContext(ctx context.Context) InstanceConfigResponseArrayOutput {
	return o
}

func (o InstanceConfigResponseArrayOutput) Index(i pulumi.IntInput) InstanceConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceConfigResponse {
		return vs[0].([]InstanceConfigResponse)[vs[1].(int)]
	}).(InstanceConfigResponseOutput)
}

// A GCP vlan attachment.
type IntakeVlanAttachment struct {
	// Identifier of the VLAN attachment.
	Id *string `pulumi:"id"`
	// Attachment pairing key.
	PairingKey *string `pulumi:"pairingKey"`
}

// IntakeVlanAttachmentInput is an input type that accepts IntakeVlanAttachmentArgs and IntakeVlanAttachmentOutput values.
// You can construct a concrete instance of `IntakeVlanAttachmentInput` via:
//
//	IntakeVlanAttachmentArgs{...}
type IntakeVlanAttachmentInput interface {
	pulumi.Input

	ToIntakeVlanAttachmentOutput() IntakeVlanAttachmentOutput
	ToIntakeVlanAttachmentOutputWithContext(context.Context) IntakeVlanAttachmentOutput
}

// A GCP vlan attachment.
type IntakeVlanAttachmentArgs struct {
	// Identifier of the VLAN attachment.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Attachment pairing key.
	PairingKey pulumi.StringPtrInput `pulumi:"pairingKey"`
}

func (IntakeVlanAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntakeVlanAttachment)(nil)).Elem()
}

func (i IntakeVlanAttachmentArgs) ToIntakeVlanAttachmentOutput() IntakeVlanAttachmentOutput {
	return i.ToIntakeVlanAttachmentOutputWithContext(context.Background())
}

func (i IntakeVlanAttachmentArgs) ToIntakeVlanAttachmentOutputWithContext(ctx context.Context) IntakeVlanAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntakeVlanAttachmentOutput)
}

// IntakeVlanAttachmentArrayInput is an input type that accepts IntakeVlanAttachmentArray and IntakeVlanAttachmentArrayOutput values.
// You can construct a concrete instance of `IntakeVlanAttachmentArrayInput` via:
//
//	IntakeVlanAttachmentArray{ IntakeVlanAttachmentArgs{...} }
type IntakeVlanAttachmentArrayInput interface {
	pulumi.Input

	ToIntakeVlanAttachmentArrayOutput() IntakeVlanAttachmentArrayOutput
	ToIntakeVlanAttachmentArrayOutputWithContext(context.Context) IntakeVlanAttachmentArrayOutput
}

type IntakeVlanAttachmentArray []IntakeVlanAttachmentInput

func (IntakeVlanAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntakeVlanAttachment)(nil)).Elem()
}

func (i IntakeVlanAttachmentArray) ToIntakeVlanAttachmentArrayOutput() IntakeVlanAttachmentArrayOutput {
	return i.ToIntakeVlanAttachmentArrayOutputWithContext(context.Background())
}

func (i IntakeVlanAttachmentArray) ToIntakeVlanAttachmentArrayOutputWithContext(ctx context.Context) IntakeVlanAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntakeVlanAttachmentArrayOutput)
}

// A GCP vlan attachment.
type IntakeVlanAttachmentOutput struct{ *pulumi.OutputState }

func (IntakeVlanAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntakeVlanAttachment)(nil)).Elem()
}

func (o IntakeVlanAttachmentOutput) ToIntakeVlanAttachmentOutput() IntakeVlanAttachmentOutput {
	return o
}

func (o IntakeVlanAttachmentOutput) ToIntakeVlanAttachmentOutputWithContext(ctx context.Context) IntakeVlanAttachmentOutput {
	return o
}

// Identifier of the VLAN attachment.
func (o IntakeVlanAttachmentOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntakeVlanAttachment) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Attachment pairing key.
func (o IntakeVlanAttachmentOutput) PairingKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntakeVlanAttachment) *string { return v.PairingKey }).(pulumi.StringPtrOutput)
}

type IntakeVlanAttachmentArrayOutput struct{ *pulumi.OutputState }

func (IntakeVlanAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntakeVlanAttachment)(nil)).Elem()
}

func (o IntakeVlanAttachmentArrayOutput) ToIntakeVlanAttachmentArrayOutput() IntakeVlanAttachmentArrayOutput {
	return o
}

func (o IntakeVlanAttachmentArrayOutput) ToIntakeVlanAttachmentArrayOutputWithContext(ctx context.Context) IntakeVlanAttachmentArrayOutput {
	return o
}

func (o IntakeVlanAttachmentArrayOutput) Index(i pulumi.IntInput) IntakeVlanAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntakeVlanAttachment {
		return vs[0].([]IntakeVlanAttachment)[vs[1].(int)]
	}).(IntakeVlanAttachmentOutput)
}

// A GCP vlan attachment.
type IntakeVlanAttachmentResponse struct {
	// Attachment pairing key.
	PairingKey string `pulumi:"pairingKey"`
}

// A GCP vlan attachment.
type IntakeVlanAttachmentResponseOutput struct{ *pulumi.OutputState }

func (IntakeVlanAttachmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntakeVlanAttachmentResponse)(nil)).Elem()
}

func (o IntakeVlanAttachmentResponseOutput) ToIntakeVlanAttachmentResponseOutput() IntakeVlanAttachmentResponseOutput {
	return o
}

func (o IntakeVlanAttachmentResponseOutput) ToIntakeVlanAttachmentResponseOutputWithContext(ctx context.Context) IntakeVlanAttachmentResponseOutput {
	return o
}

// Attachment pairing key.
func (o IntakeVlanAttachmentResponseOutput) PairingKey() pulumi.StringOutput {
	return o.ApplyT(func(v IntakeVlanAttachmentResponse) string { return v.PairingKey }).(pulumi.StringOutput)
}

type IntakeVlanAttachmentResponseArrayOutput struct{ *pulumi.OutputState }

func (IntakeVlanAttachmentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntakeVlanAttachmentResponse)(nil)).Elem()
}

func (o IntakeVlanAttachmentResponseArrayOutput) ToIntakeVlanAttachmentResponseArrayOutput() IntakeVlanAttachmentResponseArrayOutput {
	return o
}

func (o IntakeVlanAttachmentResponseArrayOutput) ToIntakeVlanAttachmentResponseArrayOutputWithContext(ctx context.Context) IntakeVlanAttachmentResponseArrayOutput {
	return o
}

func (o IntakeVlanAttachmentResponseArrayOutput) Index(i pulumi.IntInput) IntakeVlanAttachmentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntakeVlanAttachmentResponse {
		return vs[0].([]IntakeVlanAttachmentResponse)[vs[1].(int)]
	}).(IntakeVlanAttachmentResponseOutput)
}

// Each logical network interface is effectively a network and IP pair.
type LogicalNetworkInterface struct {
	// Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.
	DefaultGateway *bool `pulumi:"defaultGateway"`
	// An identifier for the `Network`, generated by the backend.
	Id *string `pulumi:"id"`
	// IP address in the network
	IpAddress *string `pulumi:"ipAddress"`
	// Name of the network
	Network *string `pulumi:"network"`
	// Type of network.
	NetworkType *LogicalNetworkInterfaceNetworkType `pulumi:"networkType"`
}

// LogicalNetworkInterfaceInput is an input type that accepts LogicalNetworkInterfaceArgs and LogicalNetworkInterfaceOutput values.
// You can construct a concrete instance of `LogicalNetworkInterfaceInput` via:
//
//	LogicalNetworkInterfaceArgs{...}
type LogicalNetworkInterfaceInput interface {
	pulumi.Input

	ToLogicalNetworkInterfaceOutput() LogicalNetworkInterfaceOutput
	ToLogicalNetworkInterfaceOutputWithContext(context.Context) LogicalNetworkInterfaceOutput
}

// Each logical network interface is effectively a network and IP pair.
type LogicalNetworkInterfaceArgs struct {
	// Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.
	DefaultGateway pulumi.BoolPtrInput `pulumi:"defaultGateway"`
	// An identifier for the `Network`, generated by the backend.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// IP address in the network
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// Name of the network
	Network pulumi.StringPtrInput `pulumi:"network"`
	// Type of network.
	NetworkType LogicalNetworkInterfaceNetworkTypePtrInput `pulumi:"networkType"`
}

func (LogicalNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicalNetworkInterface)(nil)).Elem()
}

func (i LogicalNetworkInterfaceArgs) ToLogicalNetworkInterfaceOutput() LogicalNetworkInterfaceOutput {
	return i.ToLogicalNetworkInterfaceOutputWithContext(context.Background())
}

func (i LogicalNetworkInterfaceArgs) ToLogicalNetworkInterfaceOutputWithContext(ctx context.Context) LogicalNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicalNetworkInterfaceOutput)
}

// LogicalNetworkInterfaceArrayInput is an input type that accepts LogicalNetworkInterfaceArray and LogicalNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `LogicalNetworkInterfaceArrayInput` via:
//
//	LogicalNetworkInterfaceArray{ LogicalNetworkInterfaceArgs{...} }
type LogicalNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToLogicalNetworkInterfaceArrayOutput() LogicalNetworkInterfaceArrayOutput
	ToLogicalNetworkInterfaceArrayOutputWithContext(context.Context) LogicalNetworkInterfaceArrayOutput
}

type LogicalNetworkInterfaceArray []LogicalNetworkInterfaceInput

func (LogicalNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicalNetworkInterface)(nil)).Elem()
}

func (i LogicalNetworkInterfaceArray) ToLogicalNetworkInterfaceArrayOutput() LogicalNetworkInterfaceArrayOutput {
	return i.ToLogicalNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i LogicalNetworkInterfaceArray) ToLogicalNetworkInterfaceArrayOutputWithContext(ctx context.Context) LogicalNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicalNetworkInterfaceArrayOutput)
}

// Each logical network interface is effectively a network and IP pair.
type LogicalNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (LogicalNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicalNetworkInterface)(nil)).Elem()
}

func (o LogicalNetworkInterfaceOutput) ToLogicalNetworkInterfaceOutput() LogicalNetworkInterfaceOutput {
	return o
}

func (o LogicalNetworkInterfaceOutput) ToLogicalNetworkInterfaceOutputWithContext(ctx context.Context) LogicalNetworkInterfaceOutput {
	return o
}

// Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.
func (o LogicalNetworkInterfaceOutput) DefaultGateway() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogicalNetworkInterface) *bool { return v.DefaultGateway }).(pulumi.BoolPtrOutput)
}

// An identifier for the `Network`, generated by the backend.
func (o LogicalNetworkInterfaceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogicalNetworkInterface) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// IP address in the network
func (o LogicalNetworkInterfaceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogicalNetworkInterface) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Name of the network
func (o LogicalNetworkInterfaceOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogicalNetworkInterface) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Type of network.
func (o LogicalNetworkInterfaceOutput) NetworkType() LogicalNetworkInterfaceNetworkTypePtrOutput {
	return o.ApplyT(func(v LogicalNetworkInterface) *LogicalNetworkInterfaceNetworkType { return v.NetworkType }).(LogicalNetworkInterfaceNetworkTypePtrOutput)
}

type LogicalNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (LogicalNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicalNetworkInterface)(nil)).Elem()
}

func (o LogicalNetworkInterfaceArrayOutput) ToLogicalNetworkInterfaceArrayOutput() LogicalNetworkInterfaceArrayOutput {
	return o
}

func (o LogicalNetworkInterfaceArrayOutput) ToLogicalNetworkInterfaceArrayOutputWithContext(ctx context.Context) LogicalNetworkInterfaceArrayOutput {
	return o
}

func (o LogicalNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) LogicalNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogicalNetworkInterface {
		return vs[0].([]LogicalNetworkInterface)[vs[1].(int)]
	}).(LogicalNetworkInterfaceOutput)
}

// Each logical network interface is effectively a network and IP pair.
type LogicalNetworkInterfaceResponse struct {
	// Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.
	DefaultGateway bool `pulumi:"defaultGateway"`
	// IP address in the network
	IpAddress string `pulumi:"ipAddress"`
	// Name of the network
	Network string `pulumi:"network"`
	// Type of network.
	NetworkType string `pulumi:"networkType"`
}

// Each logical network interface is effectively a network and IP pair.
type LogicalNetworkInterfaceResponseOutput struct{ *pulumi.OutputState }

func (LogicalNetworkInterfaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicalNetworkInterfaceResponse)(nil)).Elem()
}

func (o LogicalNetworkInterfaceResponseOutput) ToLogicalNetworkInterfaceResponseOutput() LogicalNetworkInterfaceResponseOutput {
	return o
}

func (o LogicalNetworkInterfaceResponseOutput) ToLogicalNetworkInterfaceResponseOutputWithContext(ctx context.Context) LogicalNetworkInterfaceResponseOutput {
	return o
}

// Whether this interface is the default gateway for the instance. Only one interface can be the default gateway for the instance.
func (o LogicalNetworkInterfaceResponseOutput) DefaultGateway() pulumi.BoolOutput {
	return o.ApplyT(func(v LogicalNetworkInterfaceResponse) bool { return v.DefaultGateway }).(pulumi.BoolOutput)
}

// IP address in the network
func (o LogicalNetworkInterfaceResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LogicalNetworkInterfaceResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Name of the network
func (o LogicalNetworkInterfaceResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v LogicalNetworkInterfaceResponse) string { return v.Network }).(pulumi.StringOutput)
}

// Type of network.
func (o LogicalNetworkInterfaceResponseOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v LogicalNetworkInterfaceResponse) string { return v.NetworkType }).(pulumi.StringOutput)
}

type LogicalNetworkInterfaceResponseArrayOutput struct{ *pulumi.OutputState }

func (LogicalNetworkInterfaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicalNetworkInterfaceResponse)(nil)).Elem()
}

func (o LogicalNetworkInterfaceResponseArrayOutput) ToLogicalNetworkInterfaceResponseArrayOutput() LogicalNetworkInterfaceResponseArrayOutput {
	return o
}

func (o LogicalNetworkInterfaceResponseArrayOutput) ToLogicalNetworkInterfaceResponseArrayOutputWithContext(ctx context.Context) LogicalNetworkInterfaceResponseArrayOutput {
	return o
}

func (o LogicalNetworkInterfaceResponseArrayOutput) Index(i pulumi.IntInput) LogicalNetworkInterfaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogicalNetworkInterfaceResponse {
		return vs[0].([]LogicalNetworkInterfaceResponse)[vs[1].(int)]
	}).(LogicalNetworkInterfaceResponseOutput)
}

// A storage volume logical unit number (LUN).
type Lun struct {
	// Display if this LUN is a boot LUN.
	BootLun *bool `pulumi:"bootLun"`
	// An identifier for the LUN, generated by the backend.
	Id *string `pulumi:"id"`
	// The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
	MultiprotocolType *LunMultiprotocolType `pulumi:"multiprotocolType"`
	// Display if this LUN can be shared between multiple physical servers.
	Shareable *bool `pulumi:"shareable"`
	// The size of this LUN, in gigabytes.
	SizeGb *string `pulumi:"sizeGb"`
	// The state of this storage volume.
	State *LunState `pulumi:"state"`
	// The storage type for this LUN.
	StorageType *LunStorageType `pulumi:"storageType"`
	// Display the storage volume for this LUN.
	StorageVolume *string `pulumi:"storageVolume"`
	// The WWID for this LUN.
	Wwid *string `pulumi:"wwid"`
}

// LunInput is an input type that accepts LunArgs and LunOutput values.
// You can construct a concrete instance of `LunInput` via:
//
//	LunArgs{...}
type LunInput interface {
	pulumi.Input

	ToLunOutput() LunOutput
	ToLunOutputWithContext(context.Context) LunOutput
}

// A storage volume logical unit number (LUN).
type LunArgs struct {
	// Display if this LUN is a boot LUN.
	BootLun pulumi.BoolPtrInput `pulumi:"bootLun"`
	// An identifier for the LUN, generated by the backend.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
	MultiprotocolType LunMultiprotocolTypePtrInput `pulumi:"multiprotocolType"`
	// Display if this LUN can be shared between multiple physical servers.
	Shareable pulumi.BoolPtrInput `pulumi:"shareable"`
	// The size of this LUN, in gigabytes.
	SizeGb pulumi.StringPtrInput `pulumi:"sizeGb"`
	// The state of this storage volume.
	State LunStatePtrInput `pulumi:"state"`
	// The storage type for this LUN.
	StorageType LunStorageTypePtrInput `pulumi:"storageType"`
	// Display the storage volume for this LUN.
	StorageVolume pulumi.StringPtrInput `pulumi:"storageVolume"`
	// The WWID for this LUN.
	Wwid pulumi.StringPtrInput `pulumi:"wwid"`
}

func (LunArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Lun)(nil)).Elem()
}

func (i LunArgs) ToLunOutput() LunOutput {
	return i.ToLunOutputWithContext(context.Background())
}

func (i LunArgs) ToLunOutputWithContext(ctx context.Context) LunOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LunOutput)
}

// LunArrayInput is an input type that accepts LunArray and LunArrayOutput values.
// You can construct a concrete instance of `LunArrayInput` via:
//
//	LunArray{ LunArgs{...} }
type LunArrayInput interface {
	pulumi.Input

	ToLunArrayOutput() LunArrayOutput
	ToLunArrayOutputWithContext(context.Context) LunArrayOutput
}

type LunArray []LunInput

func (LunArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Lun)(nil)).Elem()
}

func (i LunArray) ToLunArrayOutput() LunArrayOutput {
	return i.ToLunArrayOutputWithContext(context.Background())
}

func (i LunArray) ToLunArrayOutputWithContext(ctx context.Context) LunArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LunArrayOutput)
}

// A storage volume logical unit number (LUN).
type LunOutput struct{ *pulumi.OutputState }

func (LunOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Lun)(nil)).Elem()
}

func (o LunOutput) ToLunOutput() LunOutput {
	return o
}

func (o LunOutput) ToLunOutputWithContext(ctx context.Context) LunOutput {
	return o
}

// Display if this LUN is a boot LUN.
func (o LunOutput) BootLun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Lun) *bool { return v.BootLun }).(pulumi.BoolPtrOutput)
}

// An identifier for the LUN, generated by the backend.
func (o LunOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Lun) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
func (o LunOutput) MultiprotocolType() LunMultiprotocolTypePtrOutput {
	return o.ApplyT(func(v Lun) *LunMultiprotocolType { return v.MultiprotocolType }).(LunMultiprotocolTypePtrOutput)
}

// Display if this LUN can be shared between multiple physical servers.
func (o LunOutput) Shareable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Lun) *bool { return v.Shareable }).(pulumi.BoolPtrOutput)
}

// The size of this LUN, in gigabytes.
func (o LunOutput) SizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Lun) *string { return v.SizeGb }).(pulumi.StringPtrOutput)
}

// The state of this storage volume.
func (o LunOutput) State() LunStatePtrOutput {
	return o.ApplyT(func(v Lun) *LunState { return v.State }).(LunStatePtrOutput)
}

// The storage type for this LUN.
func (o LunOutput) StorageType() LunStorageTypePtrOutput {
	return o.ApplyT(func(v Lun) *LunStorageType { return v.StorageType }).(LunStorageTypePtrOutput)
}

// Display the storage volume for this LUN.
func (o LunOutput) StorageVolume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Lun) *string { return v.StorageVolume }).(pulumi.StringPtrOutput)
}

// The WWID for this LUN.
func (o LunOutput) Wwid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Lun) *string { return v.Wwid }).(pulumi.StringPtrOutput)
}

type LunArrayOutput struct{ *pulumi.OutputState }

func (LunArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Lun)(nil)).Elem()
}

func (o LunArrayOutput) ToLunArrayOutput() LunArrayOutput {
	return o
}

func (o LunArrayOutput) ToLunArrayOutputWithContext(ctx context.Context) LunArrayOutput {
	return o
}

func (o LunArrayOutput) Index(i pulumi.IntInput) LunOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Lun {
		return vs[0].([]Lun)[vs[1].(int)]
	}).(LunOutput)
}

// A LUN(Logical Unit Number) range.
type LunRange struct {
	// Number of LUNs to create.
	Quantity *int `pulumi:"quantity"`
	// The requested size of each LUN, in GB.
	SizeGb *int `pulumi:"sizeGb"`
}

// LunRangeInput is an input type that accepts LunRangeArgs and LunRangeOutput values.
// You can construct a concrete instance of `LunRangeInput` via:
//
//	LunRangeArgs{...}
type LunRangeInput interface {
	pulumi.Input

	ToLunRangeOutput() LunRangeOutput
	ToLunRangeOutputWithContext(context.Context) LunRangeOutput
}

// A LUN(Logical Unit Number) range.
type LunRangeArgs struct {
	// Number of LUNs to create.
	Quantity pulumi.IntPtrInput `pulumi:"quantity"`
	// The requested size of each LUN, in GB.
	SizeGb pulumi.IntPtrInput `pulumi:"sizeGb"`
}

func (LunRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LunRange)(nil)).Elem()
}

func (i LunRangeArgs) ToLunRangeOutput() LunRangeOutput {
	return i.ToLunRangeOutputWithContext(context.Background())
}

func (i LunRangeArgs) ToLunRangeOutputWithContext(ctx context.Context) LunRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LunRangeOutput)
}

// LunRangeArrayInput is an input type that accepts LunRangeArray and LunRangeArrayOutput values.
// You can construct a concrete instance of `LunRangeArrayInput` via:
//
//	LunRangeArray{ LunRangeArgs{...} }
type LunRangeArrayInput interface {
	pulumi.Input

	ToLunRangeArrayOutput() LunRangeArrayOutput
	ToLunRangeArrayOutputWithContext(context.Context) LunRangeArrayOutput
}

type LunRangeArray []LunRangeInput

func (LunRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LunRange)(nil)).Elem()
}

func (i LunRangeArray) ToLunRangeArrayOutput() LunRangeArrayOutput {
	return i.ToLunRangeArrayOutputWithContext(context.Background())
}

func (i LunRangeArray) ToLunRangeArrayOutputWithContext(ctx context.Context) LunRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LunRangeArrayOutput)
}

// A LUN(Logical Unit Number) range.
type LunRangeOutput struct{ *pulumi.OutputState }

func (LunRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LunRange)(nil)).Elem()
}

func (o LunRangeOutput) ToLunRangeOutput() LunRangeOutput {
	return o
}

func (o LunRangeOutput) ToLunRangeOutputWithContext(ctx context.Context) LunRangeOutput {
	return o
}

// Number of LUNs to create.
func (o LunRangeOutput) Quantity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LunRange) *int { return v.Quantity }).(pulumi.IntPtrOutput)
}

// The requested size of each LUN, in GB.
func (o LunRangeOutput) SizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LunRange) *int { return v.SizeGb }).(pulumi.IntPtrOutput)
}

type LunRangeArrayOutput struct{ *pulumi.OutputState }

func (LunRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LunRange)(nil)).Elem()
}

func (o LunRangeArrayOutput) ToLunRangeArrayOutput() LunRangeArrayOutput {
	return o
}

func (o LunRangeArrayOutput) ToLunRangeArrayOutputWithContext(ctx context.Context) LunRangeArrayOutput {
	return o
}

func (o LunRangeArrayOutput) Index(i pulumi.IntInput) LunRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LunRange {
		return vs[0].([]LunRange)[vs[1].(int)]
	}).(LunRangeOutput)
}

// A LUN(Logical Unit Number) range.
type LunRangeResponse struct {
	// Number of LUNs to create.
	Quantity int `pulumi:"quantity"`
	// The requested size of each LUN, in GB.
	SizeGb int `pulumi:"sizeGb"`
}

// A LUN(Logical Unit Number) range.
type LunRangeResponseOutput struct{ *pulumi.OutputState }

func (LunRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LunRangeResponse)(nil)).Elem()
}

func (o LunRangeResponseOutput) ToLunRangeResponseOutput() LunRangeResponseOutput {
	return o
}

func (o LunRangeResponseOutput) ToLunRangeResponseOutputWithContext(ctx context.Context) LunRangeResponseOutput {
	return o
}

// Number of LUNs to create.
func (o LunRangeResponseOutput) Quantity() pulumi.IntOutput {
	return o.ApplyT(func(v LunRangeResponse) int { return v.Quantity }).(pulumi.IntOutput)
}

// The requested size of each LUN, in GB.
func (o LunRangeResponseOutput) SizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v LunRangeResponse) int { return v.SizeGb }).(pulumi.IntOutput)
}

type LunRangeResponseArrayOutput struct{ *pulumi.OutputState }

func (LunRangeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LunRangeResponse)(nil)).Elem()
}

func (o LunRangeResponseArrayOutput) ToLunRangeResponseArrayOutput() LunRangeResponseArrayOutput {
	return o
}

func (o LunRangeResponseArrayOutput) ToLunRangeResponseArrayOutputWithContext(ctx context.Context) LunRangeResponseArrayOutput {
	return o
}

func (o LunRangeResponseArrayOutput) Index(i pulumi.IntInput) LunRangeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LunRangeResponse {
		return vs[0].([]LunRangeResponse)[vs[1].(int)]
	}).(LunRangeResponseOutput)
}

// A storage volume logical unit number (LUN).
type LunResponse struct {
	// Display if this LUN is a boot LUN.
	BootLun bool `pulumi:"bootLun"`
	// Time after which LUN will be fully deleted. It is filled only for LUNs in COOL_OFF state.
	ExpireTime string `pulumi:"expireTime"`
	// Instances this Lun is attached to.
	Instances []string `pulumi:"instances"`
	// The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
	MultiprotocolType string `pulumi:"multiprotocolType"`
	// The name of the LUN.
	Name string `pulumi:"name"`
	// Display if this LUN can be shared between multiple physical servers.
	Shareable bool `pulumi:"shareable"`
	// The size of this LUN, in gigabytes.
	SizeGb string `pulumi:"sizeGb"`
	// The state of this storage volume.
	State string `pulumi:"state"`
	// The storage type for this LUN.
	StorageType string `pulumi:"storageType"`
	// Display the storage volume for this LUN.
	StorageVolume string `pulumi:"storageVolume"`
	// The WWID for this LUN.
	Wwid string `pulumi:"wwid"`
}

// A storage volume logical unit number (LUN).
type LunResponseOutput struct{ *pulumi.OutputState }

func (LunResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LunResponse)(nil)).Elem()
}

func (o LunResponseOutput) ToLunResponseOutput() LunResponseOutput {
	return o
}

func (o LunResponseOutput) ToLunResponseOutputWithContext(ctx context.Context) LunResponseOutput {
	return o
}

// Display if this LUN is a boot LUN.
func (o LunResponseOutput) BootLun() pulumi.BoolOutput {
	return o.ApplyT(func(v LunResponse) bool { return v.BootLun }).(pulumi.BoolOutput)
}

// Time after which LUN will be fully deleted. It is filled only for LUNs in COOL_OFF state.
func (o LunResponseOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v LunResponse) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// Instances this Lun is attached to.
func (o LunResponseOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LunResponse) []string { return v.Instances }).(pulumi.StringArrayOutput)
}

// The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
func (o LunResponseOutput) MultiprotocolType() pulumi.StringOutput {
	return o.ApplyT(func(v LunResponse) string { return v.MultiprotocolType }).(pulumi.StringOutput)
}

// The name of the LUN.
func (o LunResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LunResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Display if this LUN can be shared between multiple physical servers.
func (o LunResponseOutput) Shareable() pulumi.BoolOutput {
	return o.ApplyT(func(v LunResponse) bool { return v.Shareable }).(pulumi.BoolOutput)
}

// The size of this LUN, in gigabytes.
func (o LunResponseOutput) SizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v LunResponse) string { return v.SizeGb }).(pulumi.StringOutput)
}

// The state of this storage volume.
func (o LunResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LunResponse) string { return v.State }).(pulumi.StringOutput)
}

// The storage type for this LUN.
func (o LunResponseOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v LunResponse) string { return v.StorageType }).(pulumi.StringOutput)
}

// Display the storage volume for this LUN.
func (o LunResponseOutput) StorageVolume() pulumi.StringOutput {
	return o.ApplyT(func(v LunResponse) string { return v.StorageVolume }).(pulumi.StringOutput)
}

// The WWID for this LUN.
func (o LunResponseOutput) Wwid() pulumi.StringOutput {
	return o.ApplyT(func(v LunResponse) string { return v.Wwid }).(pulumi.StringOutput)
}

type LunResponseArrayOutput struct{ *pulumi.OutputState }

func (LunResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LunResponse)(nil)).Elem()
}

func (o LunResponseArrayOutput) ToLunResponseArrayOutput() LunResponseArrayOutput {
	return o
}

func (o LunResponseArrayOutput) ToLunResponseArrayOutputWithContext(ctx context.Context) LunResponseArrayOutput {
	return o
}

func (o LunResponseArrayOutput) Index(i pulumi.IntInput) LunResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LunResponse {
		return vs[0].([]LunResponse)[vs[1].(int)]
	}).(LunResponseOutput)
}

// A network.
type NetworkAddress struct {
	// IPv4 address to be assigned to the server.
	Address *string `pulumi:"address"`
	// Name of the existing network to use.
	ExistingNetworkId *string `pulumi:"existingNetworkId"`
	// Id of the network to use, within the same ProvisioningConfig request.
	NetworkId *string `pulumi:"networkId"`
}

// NetworkAddressInput is an input type that accepts NetworkAddressArgs and NetworkAddressOutput values.
// You can construct a concrete instance of `NetworkAddressInput` via:
//
//	NetworkAddressArgs{...}
type NetworkAddressInput interface {
	pulumi.Input

	ToNetworkAddressOutput() NetworkAddressOutput
	ToNetworkAddressOutputWithContext(context.Context) NetworkAddressOutput
}

// A network.
type NetworkAddressArgs struct {
	// IPv4 address to be assigned to the server.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// Name of the existing network to use.
	ExistingNetworkId pulumi.StringPtrInput `pulumi:"existingNetworkId"`
	// Id of the network to use, within the same ProvisioningConfig request.
	NetworkId pulumi.StringPtrInput `pulumi:"networkId"`
}

func (NetworkAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAddress)(nil)).Elem()
}

func (i NetworkAddressArgs) ToNetworkAddressOutput() NetworkAddressOutput {
	return i.ToNetworkAddressOutputWithContext(context.Background())
}

func (i NetworkAddressArgs) ToNetworkAddressOutputWithContext(ctx context.Context) NetworkAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAddressOutput)
}

func (i NetworkAddressArgs) ToNetworkAddressPtrOutput() NetworkAddressPtrOutput {
	return i.ToNetworkAddressPtrOutputWithContext(context.Background())
}

func (i NetworkAddressArgs) ToNetworkAddressPtrOutputWithContext(ctx context.Context) NetworkAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAddressOutput).ToNetworkAddressPtrOutputWithContext(ctx)
}

// NetworkAddressPtrInput is an input type that accepts NetworkAddressArgs, NetworkAddressPtr and NetworkAddressPtrOutput values.
// You can construct a concrete instance of `NetworkAddressPtrInput` via:
//
//	        NetworkAddressArgs{...}
//
//	or:
//
//	        nil
type NetworkAddressPtrInput interface {
	pulumi.Input

	ToNetworkAddressPtrOutput() NetworkAddressPtrOutput
	ToNetworkAddressPtrOutputWithContext(context.Context) NetworkAddressPtrOutput
}

type networkAddressPtrType NetworkAddressArgs

func NetworkAddressPtr(v *NetworkAddressArgs) NetworkAddressPtrInput {
	return (*networkAddressPtrType)(v)
}

func (*networkAddressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAddress)(nil)).Elem()
}

func (i *networkAddressPtrType) ToNetworkAddressPtrOutput() NetworkAddressPtrOutput {
	return i.ToNetworkAddressPtrOutputWithContext(context.Background())
}

func (i *networkAddressPtrType) ToNetworkAddressPtrOutputWithContext(ctx context.Context) NetworkAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAddressPtrOutput)
}

// A network.
type NetworkAddressOutput struct{ *pulumi.OutputState }

func (NetworkAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAddress)(nil)).Elem()
}

func (o NetworkAddressOutput) ToNetworkAddressOutput() NetworkAddressOutput {
	return o
}

func (o NetworkAddressOutput) ToNetworkAddressOutputWithContext(ctx context.Context) NetworkAddressOutput {
	return o
}

func (o NetworkAddressOutput) ToNetworkAddressPtrOutput() NetworkAddressPtrOutput {
	return o.ToNetworkAddressPtrOutputWithContext(context.Background())
}

func (o NetworkAddressOutput) ToNetworkAddressPtrOutputWithContext(ctx context.Context) NetworkAddressPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkAddress) *NetworkAddress {
		return &v
	}).(NetworkAddressPtrOutput)
}

// IPv4 address to be assigned to the server.
func (o NetworkAddressOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAddress) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Name of the existing network to use.
func (o NetworkAddressOutput) ExistingNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAddress) *string { return v.ExistingNetworkId }).(pulumi.StringPtrOutput)
}

// Id of the network to use, within the same ProvisioningConfig request.
func (o NetworkAddressOutput) NetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAddress) *string { return v.NetworkId }).(pulumi.StringPtrOutput)
}

type NetworkAddressPtrOutput struct{ *pulumi.OutputState }

func (NetworkAddressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAddress)(nil)).Elem()
}

func (o NetworkAddressPtrOutput) ToNetworkAddressPtrOutput() NetworkAddressPtrOutput {
	return o
}

func (o NetworkAddressPtrOutput) ToNetworkAddressPtrOutputWithContext(ctx context.Context) NetworkAddressPtrOutput {
	return o
}

func (o NetworkAddressPtrOutput) Elem() NetworkAddressOutput {
	return o.ApplyT(func(v *NetworkAddress) NetworkAddress {
		if v != nil {
			return *v
		}
		var ret NetworkAddress
		return ret
	}).(NetworkAddressOutput)
}

// IPv4 address to be assigned to the server.
func (o NetworkAddressPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAddress) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// Name of the existing network to use.
func (o NetworkAddressPtrOutput) ExistingNetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAddress) *string {
		if v == nil {
			return nil
		}
		return v.ExistingNetworkId
	}).(pulumi.StringPtrOutput)
}

// Id of the network to use, within the same ProvisioningConfig request.
func (o NetworkAddressPtrOutput) NetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkAddress) *string {
		if v == nil {
			return nil
		}
		return v.NetworkId
	}).(pulumi.StringPtrOutput)
}

// A reservation of one or more addresses in a network.
type NetworkAddressReservationResponse struct {
	// The last address of this reservation block, inclusive. I.e., for cases when reservations are only single addresses, end_address and start_address will be the same. Must be specified as a single IPv4 address, e.g. 10.1.2.2.
	EndAddress string `pulumi:"endAddress"`
	// A note about this reservation, intended for human consumption.
	Note string `pulumi:"note"`
	// The first address of this reservation block. Must be specified as a single IPv4 address, e.g. 10.1.2.2.
	StartAddress string `pulumi:"startAddress"`
}

// A reservation of one or more addresses in a network.
type NetworkAddressReservationResponseOutput struct{ *pulumi.OutputState }

func (NetworkAddressReservationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAddressReservationResponse)(nil)).Elem()
}

func (o NetworkAddressReservationResponseOutput) ToNetworkAddressReservationResponseOutput() NetworkAddressReservationResponseOutput {
	return o
}

func (o NetworkAddressReservationResponseOutput) ToNetworkAddressReservationResponseOutputWithContext(ctx context.Context) NetworkAddressReservationResponseOutput {
	return o
}

// The last address of this reservation block, inclusive. I.e., for cases when reservations are only single addresses, end_address and start_address will be the same. Must be specified as a single IPv4 address, e.g. 10.1.2.2.
func (o NetworkAddressReservationResponseOutput) EndAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAddressReservationResponse) string { return v.EndAddress }).(pulumi.StringOutput)
}

// A note about this reservation, intended for human consumption.
func (o NetworkAddressReservationResponseOutput) Note() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAddressReservationResponse) string { return v.Note }).(pulumi.StringOutput)
}

// The first address of this reservation block. Must be specified as a single IPv4 address, e.g. 10.1.2.2.
func (o NetworkAddressReservationResponseOutput) StartAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAddressReservationResponse) string { return v.StartAddress }).(pulumi.StringOutput)
}

type NetworkAddressReservationResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkAddressReservationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAddressReservationResponse)(nil)).Elem()
}

func (o NetworkAddressReservationResponseArrayOutput) ToNetworkAddressReservationResponseArrayOutput() NetworkAddressReservationResponseArrayOutput {
	return o
}

func (o NetworkAddressReservationResponseArrayOutput) ToNetworkAddressReservationResponseArrayOutputWithContext(ctx context.Context) NetworkAddressReservationResponseArrayOutput {
	return o
}

func (o NetworkAddressReservationResponseArrayOutput) Index(i pulumi.IntInput) NetworkAddressReservationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAddressReservationResponse {
		return vs[0].([]NetworkAddressReservationResponse)[vs[1].(int)]
	}).(NetworkAddressReservationResponseOutput)
}

// A network.
type NetworkAddressResponse struct {
	// IPv4 address to be assigned to the server.
	Address string `pulumi:"address"`
	// Name of the existing network to use.
	ExistingNetworkId string `pulumi:"existingNetworkId"`
	// Id of the network to use, within the same ProvisioningConfig request.
	NetworkId string `pulumi:"networkId"`
}

// A network.
type NetworkAddressResponseOutput struct{ *pulumi.OutputState }

func (NetworkAddressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAddressResponse)(nil)).Elem()
}

func (o NetworkAddressResponseOutput) ToNetworkAddressResponseOutput() NetworkAddressResponseOutput {
	return o
}

func (o NetworkAddressResponseOutput) ToNetworkAddressResponseOutputWithContext(ctx context.Context) NetworkAddressResponseOutput {
	return o
}

// IPv4 address to be assigned to the server.
func (o NetworkAddressResponseOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAddressResponse) string { return v.Address }).(pulumi.StringOutput)
}

// Name of the existing network to use.
func (o NetworkAddressResponseOutput) ExistingNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAddressResponse) string { return v.ExistingNetworkId }).(pulumi.StringOutput)
}

// Id of the network to use, within the same ProvisioningConfig request.
func (o NetworkAddressResponseOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAddressResponse) string { return v.NetworkId }).(pulumi.StringOutput)
}

// Configuration parameters for a new network.
type NetworkConfig struct {
	// Interconnect bandwidth. Set only when type is CLIENT.
	Bandwidth *NetworkConfigBandwidth `pulumi:"bandwidth"`
	// CIDR range of the network.
	Cidr *string `pulumi:"cidr"`
	// The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
	GcpService *string `pulumi:"gcpService"`
	// A transient unique identifier to identify a volume within an ProvisioningConfig request.
	Id *string `pulumi:"id"`
	// The JumboFramesEnabled option for customer to set.
	JumboFramesEnabled *bool `pulumi:"jumboFramesEnabled"`
	// Service CIDR, if any.
	ServiceCidr *NetworkConfigServiceCidr `pulumi:"serviceCidr"`
	// The type of this network, either Client or Private.
	Type *NetworkConfigType `pulumi:"type"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote *string `pulumi:"userNote"`
	// List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
	VlanAttachments []IntakeVlanAttachment `pulumi:"vlanAttachments"`
	// Whether the VLAN attachment pair is located in the same project.
	VlanSameProject *bool `pulumi:"vlanSameProject"`
}

// NetworkConfigInput is an input type that accepts NetworkConfigArgs and NetworkConfigOutput values.
// You can construct a concrete instance of `NetworkConfigInput` via:
//
//	NetworkConfigArgs{...}
type NetworkConfigInput interface {
	pulumi.Input

	ToNetworkConfigOutput() NetworkConfigOutput
	ToNetworkConfigOutputWithContext(context.Context) NetworkConfigOutput
}

// Configuration parameters for a new network.
type NetworkConfigArgs struct {
	// Interconnect bandwidth. Set only when type is CLIENT.
	Bandwidth NetworkConfigBandwidthPtrInput `pulumi:"bandwidth"`
	// CIDR range of the network.
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
	GcpService pulumi.StringPtrInput `pulumi:"gcpService"`
	// A transient unique identifier to identify a volume within an ProvisioningConfig request.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The JumboFramesEnabled option for customer to set.
	JumboFramesEnabled pulumi.BoolPtrInput `pulumi:"jumboFramesEnabled"`
	// Service CIDR, if any.
	ServiceCidr NetworkConfigServiceCidrPtrInput `pulumi:"serviceCidr"`
	// The type of this network, either Client or Private.
	Type NetworkConfigTypePtrInput `pulumi:"type"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote pulumi.StringPtrInput `pulumi:"userNote"`
	// List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
	VlanAttachments IntakeVlanAttachmentArrayInput `pulumi:"vlanAttachments"`
	// Whether the VLAN attachment pair is located in the same project.
	VlanSameProject pulumi.BoolPtrInput `pulumi:"vlanSameProject"`
}

func (NetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArgs) ToNetworkConfigOutput() NetworkConfigOutput {
	return i.ToNetworkConfigOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput)
}

// NetworkConfigArrayInput is an input type that accepts NetworkConfigArray and NetworkConfigArrayOutput values.
// You can construct a concrete instance of `NetworkConfigArrayInput` via:
//
//	NetworkConfigArray{ NetworkConfigArgs{...} }
type NetworkConfigArrayInput interface {
	pulumi.Input

	ToNetworkConfigArrayOutput() NetworkConfigArrayOutput
	ToNetworkConfigArrayOutputWithContext(context.Context) NetworkConfigArrayOutput
}

type NetworkConfigArray []NetworkConfigInput

func (NetworkConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArray) ToNetworkConfigArrayOutput() NetworkConfigArrayOutput {
	return i.ToNetworkConfigArrayOutputWithContext(context.Background())
}

func (i NetworkConfigArray) ToNetworkConfigArrayOutputWithContext(ctx context.Context) NetworkConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigArrayOutput)
}

// Configuration parameters for a new network.
type NetworkConfigOutput struct{ *pulumi.OutputState }

func (NetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigOutput) ToNetworkConfigOutput() NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return o
}

// Interconnect bandwidth. Set only when type is CLIENT.
func (o NetworkConfigOutput) Bandwidth() NetworkConfigBandwidthPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *NetworkConfigBandwidth { return v.Bandwidth }).(NetworkConfigBandwidthPtrOutput)
}

// CIDR range of the network.
func (o NetworkConfigOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
func (o NetworkConfigOutput) GcpService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.GcpService }).(pulumi.StringPtrOutput)
}

// A transient unique identifier to identify a volume within an ProvisioningConfig request.
func (o NetworkConfigOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The JumboFramesEnabled option for customer to set.
func (o NetworkConfigOutput) JumboFramesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *bool { return v.JumboFramesEnabled }).(pulumi.BoolPtrOutput)
}

// Service CIDR, if any.
func (o NetworkConfigOutput) ServiceCidr() NetworkConfigServiceCidrPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *NetworkConfigServiceCidr { return v.ServiceCidr }).(NetworkConfigServiceCidrPtrOutput)
}

// The type of this network, either Client or Private.
func (o NetworkConfigOutput) Type() NetworkConfigTypePtrOutput {
	return o.ApplyT(func(v NetworkConfig) *NetworkConfigType { return v.Type }).(NetworkConfigTypePtrOutput)
}

// User note field, it can be used by customers to add additional information for the BMS Ops team .
func (o NetworkConfigOutput) UserNote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.UserNote }).(pulumi.StringPtrOutput)
}

// List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
func (o NetworkConfigOutput) VlanAttachments() IntakeVlanAttachmentArrayOutput {
	return o.ApplyT(func(v NetworkConfig) []IntakeVlanAttachment { return v.VlanAttachments }).(IntakeVlanAttachmentArrayOutput)
}

// Whether the VLAN attachment pair is located in the same project.
func (o NetworkConfigOutput) VlanSameProject() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *bool { return v.VlanSameProject }).(pulumi.BoolPtrOutput)
}

type NetworkConfigArrayOutput struct{ *pulumi.OutputState }

func (NetworkConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigArrayOutput) ToNetworkConfigArrayOutput() NetworkConfigArrayOutput {
	return o
}

func (o NetworkConfigArrayOutput) ToNetworkConfigArrayOutputWithContext(ctx context.Context) NetworkConfigArrayOutput {
	return o
}

func (o NetworkConfigArrayOutput) Index(i pulumi.IntInput) NetworkConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkConfig {
		return vs[0].([]NetworkConfig)[vs[1].(int)]
	}).(NetworkConfigOutput)
}

// Configuration parameters for a new network.
type NetworkConfigResponse struct {
	// Interconnect bandwidth. Set only when type is CLIENT.
	Bandwidth string `pulumi:"bandwidth"`
	// CIDR range of the network.
	Cidr string `pulumi:"cidr"`
	// The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
	GcpService string `pulumi:"gcpService"`
	// The JumboFramesEnabled option for customer to set.
	JumboFramesEnabled bool `pulumi:"jumboFramesEnabled"`
	// The name of the network config.
	Name string `pulumi:"name"`
	// Service CIDR, if any.
	ServiceCidr string `pulumi:"serviceCidr"`
	// The type of this network, either Client or Private.
	Type string `pulumi:"type"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote string `pulumi:"userNote"`
	// List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
	VlanAttachments []IntakeVlanAttachmentResponse `pulumi:"vlanAttachments"`
	// Whether the VLAN attachment pair is located in the same project.
	VlanSameProject bool `pulumi:"vlanSameProject"`
}

// Configuration parameters for a new network.
type NetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutput() NetworkConfigResponseOutput {
	return o
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutputWithContext(ctx context.Context) NetworkConfigResponseOutput {
	return o
}

// Interconnect bandwidth. Set only when type is CLIENT.
func (o NetworkConfigResponseOutput) Bandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Bandwidth }).(pulumi.StringOutput)
}

// CIDR range of the network.
func (o NetworkConfigResponseOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Cidr }).(pulumi.StringOutput)
}

// The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
func (o NetworkConfigResponseOutput) GcpService() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.GcpService }).(pulumi.StringOutput)
}

// The JumboFramesEnabled option for customer to set.
func (o NetworkConfigResponseOutput) JumboFramesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkConfigResponse) bool { return v.JumboFramesEnabled }).(pulumi.BoolOutput)
}

// The name of the network config.
func (o NetworkConfigResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Service CIDR, if any.
func (o NetworkConfigResponseOutput) ServiceCidr() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.ServiceCidr }).(pulumi.StringOutput)
}

// The type of this network, either Client or Private.
func (o NetworkConfigResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User note field, it can be used by customers to add additional information for the BMS Ops team .
func (o NetworkConfigResponseOutput) UserNote() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.UserNote }).(pulumi.StringOutput)
}

// List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
func (o NetworkConfigResponseOutput) VlanAttachments() IntakeVlanAttachmentResponseArrayOutput {
	return o.ApplyT(func(v NetworkConfigResponse) []IntakeVlanAttachmentResponse { return v.VlanAttachments }).(IntakeVlanAttachmentResponseArrayOutput)
}

// Whether the VLAN attachment pair is located in the same project.
func (o NetworkConfigResponseOutput) VlanSameProject() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkConfigResponse) bool { return v.VlanSameProject }).(pulumi.BoolOutput)
}

type NetworkConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponseArrayOutput) ToNetworkConfigResponseArrayOutput() NetworkConfigResponseArrayOutput {
	return o
}

func (o NetworkConfigResponseArrayOutput) ToNetworkConfigResponseArrayOutputWithContext(ctx context.Context) NetworkConfigResponseArrayOutput {
	return o
}

func (o NetworkConfigResponseArrayOutput) Index(i pulumi.IntInput) NetworkConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkConfigResponse {
		return vs[0].([]NetworkConfigResponse)[vs[1].(int)]
	}).(NetworkConfigResponseOutput)
}

// Mount point for a network.
type NetworkMountPointResponse struct {
	// Network should be a default gateway.
	DefaultGateway bool `pulumi:"defaultGateway"`
	// Instance to attach network to.
	Instance string `pulumi:"instance"`
	// Ip address of the server.
	IpAddress string `pulumi:"ipAddress"`
	// Logical interface to detach from.
	LogicalInterface string `pulumi:"logicalInterface"`
}

// Mount point for a network.
type NetworkMountPointResponseOutput struct{ *pulumi.OutputState }

func (NetworkMountPointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkMountPointResponse)(nil)).Elem()
}

func (o NetworkMountPointResponseOutput) ToNetworkMountPointResponseOutput() NetworkMountPointResponseOutput {
	return o
}

func (o NetworkMountPointResponseOutput) ToNetworkMountPointResponseOutputWithContext(ctx context.Context) NetworkMountPointResponseOutput {
	return o
}

// Network should be a default gateway.
func (o NetworkMountPointResponseOutput) DefaultGateway() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkMountPointResponse) bool { return v.DefaultGateway }).(pulumi.BoolOutput)
}

// Instance to attach network to.
func (o NetworkMountPointResponseOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkMountPointResponse) string { return v.Instance }).(pulumi.StringOutput)
}

// Ip address of the server.
func (o NetworkMountPointResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkMountPointResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Logical interface to detach from.
func (o NetworkMountPointResponseOutput) LogicalInterface() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkMountPointResponse) string { return v.LogicalInterface }).(pulumi.StringOutput)
}

type NetworkMountPointResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkMountPointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkMountPointResponse)(nil)).Elem()
}

func (o NetworkMountPointResponseArrayOutput) ToNetworkMountPointResponseArrayOutput() NetworkMountPointResponseArrayOutput {
	return o
}

func (o NetworkMountPointResponseArrayOutput) ToNetworkMountPointResponseArrayOutputWithContext(ctx context.Context) NetworkMountPointResponseArrayOutput {
	return o
}

func (o NetworkMountPointResponseArrayOutput) Index(i pulumi.IntInput) NetworkMountPointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkMountPointResponse {
		return vs[0].([]NetworkMountPointResponse)[vs[1].(int)]
	}).(NetworkMountPointResponseOutput)
}

// A Network.
type NetworkResponse struct {
	// The cidr of the Network.
	Cidr string `pulumi:"cidr"`
	// Gateway ip address.
	GatewayIp string `pulumi:"gatewayIp"`
	// IP address configured.
	IpAddress string `pulumi:"ipAddress"`
	// Whether network uses standard frames or jumbo ones.
	JumboFramesEnabled bool `pulumi:"jumboFramesEnabled"`
	// Labels as key value pairs.
	Labels map[string]string `pulumi:"labels"`
	// List of physical interfaces.
	MacAddress []string `pulumi:"macAddress"`
	// Input only. List of mount points to attach the network to.
	MountPoints []NetworkMountPointResponse `pulumi:"mountPoints"`
	// The resource name of this `Network`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/networks/{network}`
	Name string `pulumi:"name"`
	// Pod name.
	Pod string `pulumi:"pod"`
	// List of IP address reservations in this network. When updating this field, an error will be generated if a reservation conflicts with an IP address already allocated to a physical server.
	Reservations []NetworkAddressReservationResponse `pulumi:"reservations"`
	// IP range for reserved for services (e.g. NFS).
	ServicesCidr string `pulumi:"servicesCidr"`
	// The Network state.
	State string `pulumi:"state"`
	// The type of this network.
	Type string `pulumi:"type"`
	// The vlan id of the Network.
	VlanId string `pulumi:"vlanId"`
	// The vrf for the Network.
	Vrf VRFResponse `pulumi:"vrf"`
}

// A Network.
type NetworkResponseOutput struct{ *pulumi.OutputState }

func (NetworkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkResponse)(nil)).Elem()
}

func (o NetworkResponseOutput) ToNetworkResponseOutput() NetworkResponseOutput {
	return o
}

func (o NetworkResponseOutput) ToNetworkResponseOutputWithContext(ctx context.Context) NetworkResponseOutput {
	return o
}

// The cidr of the Network.
func (o NetworkResponseOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkResponse) string { return v.Cidr }).(pulumi.StringOutput)
}

// Gateway ip address.
func (o NetworkResponseOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkResponse) string { return v.GatewayIp }).(pulumi.StringOutput)
}

// IP address configured.
func (o NetworkResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Whether network uses standard frames or jumbo ones.
func (o NetworkResponseOutput) JumboFramesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkResponse) bool { return v.JumboFramesEnabled }).(pulumi.BoolOutput)
}

// Labels as key value pairs.
func (o NetworkResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v NetworkResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// List of physical interfaces.
func (o NetworkResponseOutput) MacAddress() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkResponse) []string { return v.MacAddress }).(pulumi.StringArrayOutput)
}

// Input only. List of mount points to attach the network to.
func (o NetworkResponseOutput) MountPoints() NetworkMountPointResponseArrayOutput {
	return o.ApplyT(func(v NetworkResponse) []NetworkMountPointResponse { return v.MountPoints }).(NetworkMountPointResponseArrayOutput)
}

// The resource name of this `Network`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/networks/{network}`
func (o NetworkResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Pod name.
func (o NetworkResponseOutput) Pod() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkResponse) string { return v.Pod }).(pulumi.StringOutput)
}

// List of IP address reservations in this network. When updating this field, an error will be generated if a reservation conflicts with an IP address already allocated to a physical server.
func (o NetworkResponseOutput) Reservations() NetworkAddressReservationResponseArrayOutput {
	return o.ApplyT(func(v NetworkResponse) []NetworkAddressReservationResponse { return v.Reservations }).(NetworkAddressReservationResponseArrayOutput)
}

// IP range for reserved for services (e.g. NFS).
func (o NetworkResponseOutput) ServicesCidr() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkResponse) string { return v.ServicesCidr }).(pulumi.StringOutput)
}

// The Network state.
func (o NetworkResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkResponse) string { return v.State }).(pulumi.StringOutput)
}

// The type of this network.
func (o NetworkResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The vlan id of the Network.
func (o NetworkResponseOutput) VlanId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkResponse) string { return v.VlanId }).(pulumi.StringOutput)
}

// The vrf for the Network.
func (o NetworkResponseOutput) Vrf() VRFResponseOutput {
	return o.ApplyT(func(v NetworkResponse) VRFResponse { return v.Vrf }).(VRFResponseOutput)
}

type NetworkResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkResponse)(nil)).Elem()
}

func (o NetworkResponseArrayOutput) ToNetworkResponseArrayOutput() NetworkResponseArrayOutput {
	return o
}

func (o NetworkResponseArrayOutput) ToNetworkResponseArrayOutputWithContext(ctx context.Context) NetworkResponseArrayOutput {
	return o
}

func (o NetworkResponseArrayOutput) Index(i pulumi.IntInput) NetworkResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkResponse {
		return vs[0].([]NetworkResponse)[vs[1].(int)]
	}).(NetworkResponseOutput)
}

// A NFS export entry.
type NfsExport struct {
	// Allow dev flag in NfsShare AllowedClientsRequest.
	AllowDev *bool `pulumi:"allowDev"`
	// Allow the setuid flag.
	AllowSuid *bool `pulumi:"allowSuid"`
	// A CIDR range.
	Cidr *string `pulumi:"cidr"`
	// Either a single machine, identified by an ID, or a comma-separated list of machine IDs.
	MachineId *string `pulumi:"machineId"`
	// Network to use to publish the export.
	NetworkId *string `pulumi:"networkId"`
	// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
	NoRootSquash *bool `pulumi:"noRootSquash"`
	// Export permissions.
	Permissions *NfsExportPermissions `pulumi:"permissions"`
}

// NfsExportInput is an input type that accepts NfsExportArgs and NfsExportOutput values.
// You can construct a concrete instance of `NfsExportInput` via:
//
//	NfsExportArgs{...}
type NfsExportInput interface {
	pulumi.Input

	ToNfsExportOutput() NfsExportOutput
	ToNfsExportOutputWithContext(context.Context) NfsExportOutput
}

// A NFS export entry.
type NfsExportArgs struct {
	// Allow dev flag in NfsShare AllowedClientsRequest.
	AllowDev pulumi.BoolPtrInput `pulumi:"allowDev"`
	// Allow the setuid flag.
	AllowSuid pulumi.BoolPtrInput `pulumi:"allowSuid"`
	// A CIDR range.
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// Either a single machine, identified by an ID, or a comma-separated list of machine IDs.
	MachineId pulumi.StringPtrInput `pulumi:"machineId"`
	// Network to use to publish the export.
	NetworkId pulumi.StringPtrInput `pulumi:"networkId"`
	// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
	NoRootSquash pulumi.BoolPtrInput `pulumi:"noRootSquash"`
	// Export permissions.
	Permissions NfsExportPermissionsPtrInput `pulumi:"permissions"`
}

func (NfsExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsExport)(nil)).Elem()
}

func (i NfsExportArgs) ToNfsExportOutput() NfsExportOutput {
	return i.ToNfsExportOutputWithContext(context.Background())
}

func (i NfsExportArgs) ToNfsExportOutputWithContext(ctx context.Context) NfsExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsExportOutput)
}

// NfsExportArrayInput is an input type that accepts NfsExportArray and NfsExportArrayOutput values.
// You can construct a concrete instance of `NfsExportArrayInput` via:
//
//	NfsExportArray{ NfsExportArgs{...} }
type NfsExportArrayInput interface {
	pulumi.Input

	ToNfsExportArrayOutput() NfsExportArrayOutput
	ToNfsExportArrayOutputWithContext(context.Context) NfsExportArrayOutput
}

type NfsExportArray []NfsExportInput

func (NfsExportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsExport)(nil)).Elem()
}

func (i NfsExportArray) ToNfsExportArrayOutput() NfsExportArrayOutput {
	return i.ToNfsExportArrayOutputWithContext(context.Background())
}

func (i NfsExportArray) ToNfsExportArrayOutputWithContext(ctx context.Context) NfsExportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsExportArrayOutput)
}

// A NFS export entry.
type NfsExportOutput struct{ *pulumi.OutputState }

func (NfsExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsExport)(nil)).Elem()
}

func (o NfsExportOutput) ToNfsExportOutput() NfsExportOutput {
	return o
}

func (o NfsExportOutput) ToNfsExportOutputWithContext(ctx context.Context) NfsExportOutput {
	return o
}

// Allow dev flag in NfsShare AllowedClientsRequest.
func (o NfsExportOutput) AllowDev() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsExport) *bool { return v.AllowDev }).(pulumi.BoolPtrOutput)
}

// Allow the setuid flag.
func (o NfsExportOutput) AllowSuid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsExport) *bool { return v.AllowSuid }).(pulumi.BoolPtrOutput)
}

// A CIDR range.
func (o NfsExportOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsExport) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// Either a single machine, identified by an ID, or a comma-separated list of machine IDs.
func (o NfsExportOutput) MachineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsExport) *string { return v.MachineId }).(pulumi.StringPtrOutput)
}

// Network to use to publish the export.
func (o NfsExportOutput) NetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsExport) *string { return v.NetworkId }).(pulumi.StringPtrOutput)
}

// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
func (o NfsExportOutput) NoRootSquash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NfsExport) *bool { return v.NoRootSquash }).(pulumi.BoolPtrOutput)
}

// Export permissions.
func (o NfsExportOutput) Permissions() NfsExportPermissionsPtrOutput {
	return o.ApplyT(func(v NfsExport) *NfsExportPermissions { return v.Permissions }).(NfsExportPermissionsPtrOutput)
}

type NfsExportArrayOutput struct{ *pulumi.OutputState }

func (NfsExportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsExport)(nil)).Elem()
}

func (o NfsExportArrayOutput) ToNfsExportArrayOutput() NfsExportArrayOutput {
	return o
}

func (o NfsExportArrayOutput) ToNfsExportArrayOutputWithContext(ctx context.Context) NfsExportArrayOutput {
	return o
}

func (o NfsExportArrayOutput) Index(i pulumi.IntInput) NfsExportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NfsExport {
		return vs[0].([]NfsExport)[vs[1].(int)]
	}).(NfsExportOutput)
}

// A NFS export entry.
type NfsExportResponse struct {
	// Allow dev flag in NfsShare AllowedClientsRequest.
	AllowDev bool `pulumi:"allowDev"`
	// Allow the setuid flag.
	AllowSuid bool `pulumi:"allowSuid"`
	// A CIDR range.
	Cidr string `pulumi:"cidr"`
	// Either a single machine, identified by an ID, or a comma-separated list of machine IDs.
	MachineId string `pulumi:"machineId"`
	// Network to use to publish the export.
	NetworkId string `pulumi:"networkId"`
	// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
	NoRootSquash bool `pulumi:"noRootSquash"`
	// Export permissions.
	Permissions string `pulumi:"permissions"`
}

// A NFS export entry.
type NfsExportResponseOutput struct{ *pulumi.OutputState }

func (NfsExportResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsExportResponse)(nil)).Elem()
}

func (o NfsExportResponseOutput) ToNfsExportResponseOutput() NfsExportResponseOutput {
	return o
}

func (o NfsExportResponseOutput) ToNfsExportResponseOutputWithContext(ctx context.Context) NfsExportResponseOutput {
	return o
}

// Allow dev flag in NfsShare AllowedClientsRequest.
func (o NfsExportResponseOutput) AllowDev() pulumi.BoolOutput {
	return o.ApplyT(func(v NfsExportResponse) bool { return v.AllowDev }).(pulumi.BoolOutput)
}

// Allow the setuid flag.
func (o NfsExportResponseOutput) AllowSuid() pulumi.BoolOutput {
	return o.ApplyT(func(v NfsExportResponse) bool { return v.AllowSuid }).(pulumi.BoolOutput)
}

// A CIDR range.
func (o NfsExportResponseOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v NfsExportResponse) string { return v.Cidr }).(pulumi.StringOutput)
}

// Either a single machine, identified by an ID, or a comma-separated list of machine IDs.
func (o NfsExportResponseOutput) MachineId() pulumi.StringOutput {
	return o.ApplyT(func(v NfsExportResponse) string { return v.MachineId }).(pulumi.StringOutput)
}

// Network to use to publish the export.
func (o NfsExportResponseOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v NfsExportResponse) string { return v.NetworkId }).(pulumi.StringOutput)
}

// Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
func (o NfsExportResponseOutput) NoRootSquash() pulumi.BoolOutput {
	return o.ApplyT(func(v NfsExportResponse) bool { return v.NoRootSquash }).(pulumi.BoolOutput)
}

// Export permissions.
func (o NfsExportResponseOutput) Permissions() pulumi.StringOutput {
	return o.ApplyT(func(v NfsExportResponse) string { return v.Permissions }).(pulumi.StringOutput)
}

type NfsExportResponseArrayOutput struct{ *pulumi.OutputState }

func (NfsExportResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsExportResponse)(nil)).Elem()
}

func (o NfsExportResponseArrayOutput) ToNfsExportResponseArrayOutput() NfsExportResponseArrayOutput {
	return o
}

func (o NfsExportResponseArrayOutput) ToNfsExportResponseArrayOutputWithContext(ctx context.Context) NfsExportResponseArrayOutput {
	return o
}

func (o NfsExportResponseArrayOutput) Index(i pulumi.IntInput) NfsExportResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NfsExportResponse {
		return vs[0].([]NfsExportResponse)[vs[1].(int)]
	}).(NfsExportResponseOutput)
}

// QOS policy parameters.
type QosPolicyResponse struct {
	// The bandwidth permitted by the QOS policy, in gbps.
	BandwidthGbps float64 `pulumi:"bandwidthGbps"`
}

// QOS policy parameters.
type QosPolicyResponseOutput struct{ *pulumi.OutputState }

func (QosPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QosPolicyResponse)(nil)).Elem()
}

func (o QosPolicyResponseOutput) ToQosPolicyResponseOutput() QosPolicyResponseOutput {
	return o
}

func (o QosPolicyResponseOutput) ToQosPolicyResponseOutputWithContext(ctx context.Context) QosPolicyResponseOutput {
	return o
}

// The bandwidth permitted by the QOS policy, in gbps.
func (o QosPolicyResponseOutput) BandwidthGbps() pulumi.Float64Output {
	return o.ApplyT(func(v QosPolicyResponse) float64 { return v.BandwidthGbps }).(pulumi.Float64Output)
}

// Details about snapshot space reservation and usage on the storage volume.
type SnapshotReservationDetail struct {
	// The space on this storage volume reserved for snapshots, shown in GiB.
	ReservedSpaceGib *string `pulumi:"reservedSpaceGib"`
	// Percent of the total Volume size reserved for snapshot copies. Enabling snapshots requires reserving 20% or more of the storage volume space for snapshots. Maximum reserved space for snapshots is 40%. Setting this field will effectively set snapshot_enabled to true.
	ReservedSpacePercent *int `pulumi:"reservedSpacePercent"`
	// The amount, in GiB, of available space in this storage volume's reserved snapshot space.
	ReservedSpaceRemainingGib *string `pulumi:"reservedSpaceRemainingGib"`
	// The percent of snapshot space on this storage volume actually being used by the snapshot copies. This value might be higher than 100% if the snapshot copies have overflowed into the data portion of the storage volume.
	ReservedSpaceUsedPercent *int `pulumi:"reservedSpaceUsedPercent"`
}

// SnapshotReservationDetailInput is an input type that accepts SnapshotReservationDetailArgs and SnapshotReservationDetailOutput values.
// You can construct a concrete instance of `SnapshotReservationDetailInput` via:
//
//	SnapshotReservationDetailArgs{...}
type SnapshotReservationDetailInput interface {
	pulumi.Input

	ToSnapshotReservationDetailOutput() SnapshotReservationDetailOutput
	ToSnapshotReservationDetailOutputWithContext(context.Context) SnapshotReservationDetailOutput
}

// Details about snapshot space reservation and usage on the storage volume.
type SnapshotReservationDetailArgs struct {
	// The space on this storage volume reserved for snapshots, shown in GiB.
	ReservedSpaceGib pulumi.StringPtrInput `pulumi:"reservedSpaceGib"`
	// Percent of the total Volume size reserved for snapshot copies. Enabling snapshots requires reserving 20% or more of the storage volume space for snapshots. Maximum reserved space for snapshots is 40%. Setting this field will effectively set snapshot_enabled to true.
	ReservedSpacePercent pulumi.IntPtrInput `pulumi:"reservedSpacePercent"`
	// The amount, in GiB, of available space in this storage volume's reserved snapshot space.
	ReservedSpaceRemainingGib pulumi.StringPtrInput `pulumi:"reservedSpaceRemainingGib"`
	// The percent of snapshot space on this storage volume actually being used by the snapshot copies. This value might be higher than 100% if the snapshot copies have overflowed into the data portion of the storage volume.
	ReservedSpaceUsedPercent pulumi.IntPtrInput `pulumi:"reservedSpaceUsedPercent"`
}

func (SnapshotReservationDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotReservationDetail)(nil)).Elem()
}

func (i SnapshotReservationDetailArgs) ToSnapshotReservationDetailOutput() SnapshotReservationDetailOutput {
	return i.ToSnapshotReservationDetailOutputWithContext(context.Background())
}

func (i SnapshotReservationDetailArgs) ToSnapshotReservationDetailOutputWithContext(ctx context.Context) SnapshotReservationDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotReservationDetailOutput)
}

func (i SnapshotReservationDetailArgs) ToSnapshotReservationDetailPtrOutput() SnapshotReservationDetailPtrOutput {
	return i.ToSnapshotReservationDetailPtrOutputWithContext(context.Background())
}

func (i SnapshotReservationDetailArgs) ToSnapshotReservationDetailPtrOutputWithContext(ctx context.Context) SnapshotReservationDetailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotReservationDetailOutput).ToSnapshotReservationDetailPtrOutputWithContext(ctx)
}

// SnapshotReservationDetailPtrInput is an input type that accepts SnapshotReservationDetailArgs, SnapshotReservationDetailPtr and SnapshotReservationDetailPtrOutput values.
// You can construct a concrete instance of `SnapshotReservationDetailPtrInput` via:
//
//	        SnapshotReservationDetailArgs{...}
//
//	or:
//
//	        nil
type SnapshotReservationDetailPtrInput interface {
	pulumi.Input

	ToSnapshotReservationDetailPtrOutput() SnapshotReservationDetailPtrOutput
	ToSnapshotReservationDetailPtrOutputWithContext(context.Context) SnapshotReservationDetailPtrOutput
}

type snapshotReservationDetailPtrType SnapshotReservationDetailArgs

func SnapshotReservationDetailPtr(v *SnapshotReservationDetailArgs) SnapshotReservationDetailPtrInput {
	return (*snapshotReservationDetailPtrType)(v)
}

func (*snapshotReservationDetailPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotReservationDetail)(nil)).Elem()
}

func (i *snapshotReservationDetailPtrType) ToSnapshotReservationDetailPtrOutput() SnapshotReservationDetailPtrOutput {
	return i.ToSnapshotReservationDetailPtrOutputWithContext(context.Background())
}

func (i *snapshotReservationDetailPtrType) ToSnapshotReservationDetailPtrOutputWithContext(ctx context.Context) SnapshotReservationDetailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotReservationDetailPtrOutput)
}

// Details about snapshot space reservation and usage on the storage volume.
type SnapshotReservationDetailOutput struct{ *pulumi.OutputState }

func (SnapshotReservationDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotReservationDetail)(nil)).Elem()
}

func (o SnapshotReservationDetailOutput) ToSnapshotReservationDetailOutput() SnapshotReservationDetailOutput {
	return o
}

func (o SnapshotReservationDetailOutput) ToSnapshotReservationDetailOutputWithContext(ctx context.Context) SnapshotReservationDetailOutput {
	return o
}

func (o SnapshotReservationDetailOutput) ToSnapshotReservationDetailPtrOutput() SnapshotReservationDetailPtrOutput {
	return o.ToSnapshotReservationDetailPtrOutputWithContext(context.Background())
}

func (o SnapshotReservationDetailOutput) ToSnapshotReservationDetailPtrOutputWithContext(ctx context.Context) SnapshotReservationDetailPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SnapshotReservationDetail) *SnapshotReservationDetail {
		return &v
	}).(SnapshotReservationDetailPtrOutput)
}

// The space on this storage volume reserved for snapshots, shown in GiB.
func (o SnapshotReservationDetailOutput) ReservedSpaceGib() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotReservationDetail) *string { return v.ReservedSpaceGib }).(pulumi.StringPtrOutput)
}

// Percent of the total Volume size reserved for snapshot copies. Enabling snapshots requires reserving 20% or more of the storage volume space for snapshots. Maximum reserved space for snapshots is 40%. Setting this field will effectively set snapshot_enabled to true.
func (o SnapshotReservationDetailOutput) ReservedSpacePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SnapshotReservationDetail) *int { return v.ReservedSpacePercent }).(pulumi.IntPtrOutput)
}

// The amount, in GiB, of available space in this storage volume's reserved snapshot space.
func (o SnapshotReservationDetailOutput) ReservedSpaceRemainingGib() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotReservationDetail) *string { return v.ReservedSpaceRemainingGib }).(pulumi.StringPtrOutput)
}

// The percent of snapshot space on this storage volume actually being used by the snapshot copies. This value might be higher than 100% if the snapshot copies have overflowed into the data portion of the storage volume.
func (o SnapshotReservationDetailOutput) ReservedSpaceUsedPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SnapshotReservationDetail) *int { return v.ReservedSpaceUsedPercent }).(pulumi.IntPtrOutput)
}

type SnapshotReservationDetailPtrOutput struct{ *pulumi.OutputState }

func (SnapshotReservationDetailPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotReservationDetail)(nil)).Elem()
}

func (o SnapshotReservationDetailPtrOutput) ToSnapshotReservationDetailPtrOutput() SnapshotReservationDetailPtrOutput {
	return o
}

func (o SnapshotReservationDetailPtrOutput) ToSnapshotReservationDetailPtrOutputWithContext(ctx context.Context) SnapshotReservationDetailPtrOutput {
	return o
}

func (o SnapshotReservationDetailPtrOutput) Elem() SnapshotReservationDetailOutput {
	return o.ApplyT(func(v *SnapshotReservationDetail) SnapshotReservationDetail {
		if v != nil {
			return *v
		}
		var ret SnapshotReservationDetail
		return ret
	}).(SnapshotReservationDetailOutput)
}

// The space on this storage volume reserved for snapshots, shown in GiB.
func (o SnapshotReservationDetailPtrOutput) ReservedSpaceGib() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotReservationDetail) *string {
		if v == nil {
			return nil
		}
		return v.ReservedSpaceGib
	}).(pulumi.StringPtrOutput)
}

// Percent of the total Volume size reserved for snapshot copies. Enabling snapshots requires reserving 20% or more of the storage volume space for snapshots. Maximum reserved space for snapshots is 40%. Setting this field will effectively set snapshot_enabled to true.
func (o SnapshotReservationDetailPtrOutput) ReservedSpacePercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotReservationDetail) *int {
		if v == nil {
			return nil
		}
		return v.ReservedSpacePercent
	}).(pulumi.IntPtrOutput)
}

// The amount, in GiB, of available space in this storage volume's reserved snapshot space.
func (o SnapshotReservationDetailPtrOutput) ReservedSpaceRemainingGib() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotReservationDetail) *string {
		if v == nil {
			return nil
		}
		return v.ReservedSpaceRemainingGib
	}).(pulumi.StringPtrOutput)
}

// The percent of snapshot space on this storage volume actually being used by the snapshot copies. This value might be higher than 100% if the snapshot copies have overflowed into the data portion of the storage volume.
func (o SnapshotReservationDetailPtrOutput) ReservedSpaceUsedPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotReservationDetail) *int {
		if v == nil {
			return nil
		}
		return v.ReservedSpaceUsedPercent
	}).(pulumi.IntPtrOutput)
}

// Details about snapshot space reservation and usage on the storage volume.
type SnapshotReservationDetailResponse struct {
	// The space on this storage volume reserved for snapshots, shown in GiB.
	ReservedSpaceGib string `pulumi:"reservedSpaceGib"`
	// Percent of the total Volume size reserved for snapshot copies. Enabling snapshots requires reserving 20% or more of the storage volume space for snapshots. Maximum reserved space for snapshots is 40%. Setting this field will effectively set snapshot_enabled to true.
	ReservedSpacePercent int `pulumi:"reservedSpacePercent"`
	// The amount, in GiB, of available space in this storage volume's reserved snapshot space.
	ReservedSpaceRemainingGib string `pulumi:"reservedSpaceRemainingGib"`
	// The percent of snapshot space on this storage volume actually being used by the snapshot copies. This value might be higher than 100% if the snapshot copies have overflowed into the data portion of the storage volume.
	ReservedSpaceUsedPercent int `pulumi:"reservedSpaceUsedPercent"`
}

// Details about snapshot space reservation and usage on the storage volume.
type SnapshotReservationDetailResponseOutput struct{ *pulumi.OutputState }

func (SnapshotReservationDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotReservationDetailResponse)(nil)).Elem()
}

func (o SnapshotReservationDetailResponseOutput) ToSnapshotReservationDetailResponseOutput() SnapshotReservationDetailResponseOutput {
	return o
}

func (o SnapshotReservationDetailResponseOutput) ToSnapshotReservationDetailResponseOutputWithContext(ctx context.Context) SnapshotReservationDetailResponseOutput {
	return o
}

// The space on this storage volume reserved for snapshots, shown in GiB.
func (o SnapshotReservationDetailResponseOutput) ReservedSpaceGib() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotReservationDetailResponse) string { return v.ReservedSpaceGib }).(pulumi.StringOutput)
}

// Percent of the total Volume size reserved for snapshot copies. Enabling snapshots requires reserving 20% or more of the storage volume space for snapshots. Maximum reserved space for snapshots is 40%. Setting this field will effectively set snapshot_enabled to true.
func (o SnapshotReservationDetailResponseOutput) ReservedSpacePercent() pulumi.IntOutput {
	return o.ApplyT(func(v SnapshotReservationDetailResponse) int { return v.ReservedSpacePercent }).(pulumi.IntOutput)
}

// The amount, in GiB, of available space in this storage volume's reserved snapshot space.
func (o SnapshotReservationDetailResponseOutput) ReservedSpaceRemainingGib() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotReservationDetailResponse) string { return v.ReservedSpaceRemainingGib }).(pulumi.StringOutput)
}

// The percent of snapshot space on this storage volume actually being used by the snapshot copies. This value might be higher than 100% if the snapshot copies have overflowed into the data portion of the storage volume.
func (o SnapshotReservationDetailResponseOutput) ReservedSpaceUsedPercent() pulumi.IntOutput {
	return o.ApplyT(func(v SnapshotReservationDetailResponse) int { return v.ReservedSpaceUsedPercent }).(pulumi.IntOutput)
}

// A network VRF.
type VRFResponse struct {
	// The name of the VRF.
	Name string `pulumi:"name"`
	// The QOS policy applied to this VRF. The value is only meaningful when all the vlan attachments have the same QoS. This field should not be used for new integrations, use vlan attachment level qos instead. The field is left for backward-compatibility.
	QosPolicy QosPolicyResponse `pulumi:"qosPolicy"`
	// The possible state of VRF.
	State string `pulumi:"state"`
	// The list of VLAN attachments for the VRF.
	VlanAttachments []VlanAttachmentResponse `pulumi:"vlanAttachments"`
}

// A network VRF.
type VRFResponseOutput struct{ *pulumi.OutputState }

func (VRFResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VRFResponse)(nil)).Elem()
}

func (o VRFResponseOutput) ToVRFResponseOutput() VRFResponseOutput {
	return o
}

func (o VRFResponseOutput) ToVRFResponseOutputWithContext(ctx context.Context) VRFResponseOutput {
	return o
}

// The name of the VRF.
func (o VRFResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VRFResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The QOS policy applied to this VRF. The value is only meaningful when all the vlan attachments have the same QoS. This field should not be used for new integrations, use vlan attachment level qos instead. The field is left for backward-compatibility.
func (o VRFResponseOutput) QosPolicy() QosPolicyResponseOutput {
	return o.ApplyT(func(v VRFResponse) QosPolicyResponse { return v.QosPolicy }).(QosPolicyResponseOutput)
}

// The possible state of VRF.
func (o VRFResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v VRFResponse) string { return v.State }).(pulumi.StringOutput)
}

// The list of VLAN attachments for the VRF.
func (o VRFResponseOutput) VlanAttachments() VlanAttachmentResponseArrayOutput {
	return o.ApplyT(func(v VRFResponse) []VlanAttachmentResponse { return v.VlanAttachments }).(VlanAttachmentResponseArrayOutput)
}

// VLAN attachment details.
type VlanAttachmentResponse struct {
	// Input only. Pairing key.
	PairingKey string `pulumi:"pairingKey"`
	// The peer IP of the attachment.
	PeerIp string `pulumi:"peerIp"`
	// The peer vlan ID of the attachment.
	PeerVlanId string `pulumi:"peerVlanId"`
	// The QOS policy applied to this VLAN attachment. This value should be preferred to using qos at vrf level.
	QosPolicy QosPolicyResponse `pulumi:"qosPolicy"`
	// The router IP of the attachment.
	RouterIp string `pulumi:"routerIp"`
}

// VLAN attachment details.
type VlanAttachmentResponseOutput struct{ *pulumi.OutputState }

func (VlanAttachmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VlanAttachmentResponse)(nil)).Elem()
}

func (o VlanAttachmentResponseOutput) ToVlanAttachmentResponseOutput() VlanAttachmentResponseOutput {
	return o
}

func (o VlanAttachmentResponseOutput) ToVlanAttachmentResponseOutputWithContext(ctx context.Context) VlanAttachmentResponseOutput {
	return o
}

// Input only. Pairing key.
func (o VlanAttachmentResponseOutput) PairingKey() pulumi.StringOutput {
	return o.ApplyT(func(v VlanAttachmentResponse) string { return v.PairingKey }).(pulumi.StringOutput)
}

// The peer IP of the attachment.
func (o VlanAttachmentResponseOutput) PeerIp() pulumi.StringOutput {
	return o.ApplyT(func(v VlanAttachmentResponse) string { return v.PeerIp }).(pulumi.StringOutput)
}

// The peer vlan ID of the attachment.
func (o VlanAttachmentResponseOutput) PeerVlanId() pulumi.StringOutput {
	return o.ApplyT(func(v VlanAttachmentResponse) string { return v.PeerVlanId }).(pulumi.StringOutput)
}

// The QOS policy applied to this VLAN attachment. This value should be preferred to using qos at vrf level.
func (o VlanAttachmentResponseOutput) QosPolicy() QosPolicyResponseOutput {
	return o.ApplyT(func(v VlanAttachmentResponse) QosPolicyResponse { return v.QosPolicy }).(QosPolicyResponseOutput)
}

// The router IP of the attachment.
func (o VlanAttachmentResponseOutput) RouterIp() pulumi.StringOutput {
	return o.ApplyT(func(v VlanAttachmentResponse) string { return v.RouterIp }).(pulumi.StringOutput)
}

type VlanAttachmentResponseArrayOutput struct{ *pulumi.OutputState }

func (VlanAttachmentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VlanAttachmentResponse)(nil)).Elem()
}

func (o VlanAttachmentResponseArrayOutput) ToVlanAttachmentResponseArrayOutput() VlanAttachmentResponseArrayOutput {
	return o
}

func (o VlanAttachmentResponseArrayOutput) ToVlanAttachmentResponseArrayOutputWithContext(ctx context.Context) VlanAttachmentResponseArrayOutput {
	return o
}

func (o VlanAttachmentResponseArrayOutput) Index(i pulumi.IntInput) VlanAttachmentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VlanAttachmentResponse {
		return vs[0].([]VlanAttachmentResponse)[vs[1].(int)]
	}).(VlanAttachmentResponseOutput)
}

// A storage volume.
type Volume struct {
	// The size, in GiB, that this storage volume has expanded as a result of an auto grow policy. In the absence of auto-grow, the value is 0.
	AutoGrownSizeGib *string `pulumi:"autoGrownSizeGib"`
	// The current size of this storage volume, in GiB, including space reserved for snapshots. This size might be different than the requested size if the storage volume has been configured with auto grow or auto shrink.
	CurrentSizeGib *string `pulumi:"currentSizeGib"`
	// Additional emergency size that was requested for this Volume, in GiB. current_size_gib includes this value.
	EmergencySizeGib *string `pulumi:"emergencySizeGib"`
	// An identifier for the `Volume`, generated by the backend.
	Id *string `pulumi:"id"`
	// Labels as key value pairs.
	Labels map[string]string `pulumi:"labels"`
	// Maximum size volume can be expanded to in case of evergency, in GiB.
	MaxSizeGib *string `pulumi:"maxSizeGib"`
	// Input only. User-specified notes for new Volume. Used to provision Volumes that require manual intervention.
	Notes *string `pulumi:"notes"`
	// Originally requested size, in GiB.
	OriginallyRequestedSizeGib *string `pulumi:"originallyRequestedSizeGib"`
	// Immutable. Performance tier of the Volume. Default is SHARED.
	PerformanceTier *VolumePerformanceTier `pulumi:"performanceTier"`
	// Immutable. Pod name.
	Pod *string `pulumi:"pod"`
	// The space remaining in the storage volume for new LUNs, in GiB, excluding space reserved for snapshots.
	RemainingSpaceGib *string `pulumi:"remainingSpaceGib"`
	// The requested size of this storage volume, in GiB.
	RequestedSizeGib *string `pulumi:"requestedSizeGib"`
	// The behavior to use when snapshot reserved space is full.
	SnapshotAutoDeleteBehavior *VolumeSnapshotAutoDeleteBehavior `pulumi:"snapshotAutoDeleteBehavior"`
	// Whether snapshots are enabled.
	SnapshotEnabled *bool `pulumi:"snapshotEnabled"`
	// Details about snapshot space reservation and usage on the storage volume.
	SnapshotReservationDetail *SnapshotReservationDetail `pulumi:"snapshotReservationDetail"`
	// The name of the snapshot schedule policy in use for this volume, if any.
	SnapshotSchedulePolicy *string `pulumi:"snapshotSchedulePolicy"`
	// The state of this storage volume.
	State *VolumeState `pulumi:"state"`
	// Input only. Name of the storage aggregate pool to allocate the volume in. Can be used only for VOLUME_PERFORMANCE_TIER_ASSIGNED volumes.
	StorageAggregatePool *string `pulumi:"storageAggregatePool"`
	// The storage type for this volume.
	StorageType *VolumeStorageType `pulumi:"storageType"`
	// The workload profile for the volume.
	WorkloadProfile *VolumeWorkloadProfile `pulumi:"workloadProfile"`
}

// VolumeInput is an input type that accepts VolumeArgs and VolumeOutput values.
// You can construct a concrete instance of `VolumeInput` via:
//
//	VolumeArgs{...}
type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(context.Context) VolumeOutput
}

// A storage volume.
type VolumeArgs struct {
	// The size, in GiB, that this storage volume has expanded as a result of an auto grow policy. In the absence of auto-grow, the value is 0.
	AutoGrownSizeGib pulumi.StringPtrInput `pulumi:"autoGrownSizeGib"`
	// The current size of this storage volume, in GiB, including space reserved for snapshots. This size might be different than the requested size if the storage volume has been configured with auto grow or auto shrink.
	CurrentSizeGib pulumi.StringPtrInput `pulumi:"currentSizeGib"`
	// Additional emergency size that was requested for this Volume, in GiB. current_size_gib includes this value.
	EmergencySizeGib pulumi.StringPtrInput `pulumi:"emergencySizeGib"`
	// An identifier for the `Volume`, generated by the backend.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Labels as key value pairs.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Maximum size volume can be expanded to in case of evergency, in GiB.
	MaxSizeGib pulumi.StringPtrInput `pulumi:"maxSizeGib"`
	// Input only. User-specified notes for new Volume. Used to provision Volumes that require manual intervention.
	Notes pulumi.StringPtrInput `pulumi:"notes"`
	// Originally requested size, in GiB.
	OriginallyRequestedSizeGib pulumi.StringPtrInput `pulumi:"originallyRequestedSizeGib"`
	// Immutable. Performance tier of the Volume. Default is SHARED.
	PerformanceTier VolumePerformanceTierPtrInput `pulumi:"performanceTier"`
	// Immutable. Pod name.
	Pod pulumi.StringPtrInput `pulumi:"pod"`
	// The space remaining in the storage volume for new LUNs, in GiB, excluding space reserved for snapshots.
	RemainingSpaceGib pulumi.StringPtrInput `pulumi:"remainingSpaceGib"`
	// The requested size of this storage volume, in GiB.
	RequestedSizeGib pulumi.StringPtrInput `pulumi:"requestedSizeGib"`
	// The behavior to use when snapshot reserved space is full.
	SnapshotAutoDeleteBehavior VolumeSnapshotAutoDeleteBehaviorPtrInput `pulumi:"snapshotAutoDeleteBehavior"`
	// Whether snapshots are enabled.
	SnapshotEnabled pulumi.BoolPtrInput `pulumi:"snapshotEnabled"`
	// Details about snapshot space reservation and usage on the storage volume.
	SnapshotReservationDetail SnapshotReservationDetailPtrInput `pulumi:"snapshotReservationDetail"`
	// The name of the snapshot schedule policy in use for this volume, if any.
	SnapshotSchedulePolicy pulumi.StringPtrInput `pulumi:"snapshotSchedulePolicy"`
	// The state of this storage volume.
	State VolumeStatePtrInput `pulumi:"state"`
	// Input only. Name of the storage aggregate pool to allocate the volume in. Can be used only for VOLUME_PERFORMANCE_TIER_ASSIGNED volumes.
	StorageAggregatePool pulumi.StringPtrInput `pulumi:"storageAggregatePool"`
	// The storage type for this volume.
	StorageType VolumeStorageTypePtrInput `pulumi:"storageType"`
	// The workload profile for the volume.
	WorkloadProfile VolumeWorkloadProfilePtrInput `pulumi:"workloadProfile"`
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (i VolumeArgs) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i VolumeArgs) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// A storage volume.
type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

// The size, in GiB, that this storage volume has expanded as a result of an auto grow policy. In the absence of auto-grow, the value is 0.
func (o VolumeOutput) AutoGrownSizeGib() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.AutoGrownSizeGib }).(pulumi.StringPtrOutput)
}

// The current size of this storage volume, in GiB, including space reserved for snapshots. This size might be different than the requested size if the storage volume has been configured with auto grow or auto shrink.
func (o VolumeOutput) CurrentSizeGib() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.CurrentSizeGib }).(pulumi.StringPtrOutput)
}

// Additional emergency size that was requested for this Volume, in GiB. current_size_gib includes this value.
func (o VolumeOutput) EmergencySizeGib() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.EmergencySizeGib }).(pulumi.StringPtrOutput)
}

// An identifier for the `Volume`, generated by the backend.
func (o VolumeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Labels as key value pairs.
func (o VolumeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v Volume) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Maximum size volume can be expanded to in case of evergency, in GiB.
func (o VolumeOutput) MaxSizeGib() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.MaxSizeGib }).(pulumi.StringPtrOutput)
}

// Input only. User-specified notes for new Volume. Used to provision Volumes that require manual intervention.
func (o VolumeOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.Notes }).(pulumi.StringPtrOutput)
}

// Originally requested size, in GiB.
func (o VolumeOutput) OriginallyRequestedSizeGib() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.OriginallyRequestedSizeGib }).(pulumi.StringPtrOutput)
}

// Immutable. Performance tier of the Volume. Default is SHARED.
func (o VolumeOutput) PerformanceTier() VolumePerformanceTierPtrOutput {
	return o.ApplyT(func(v Volume) *VolumePerformanceTier { return v.PerformanceTier }).(VolumePerformanceTierPtrOutput)
}

// Immutable. Pod name.
func (o VolumeOutput) Pod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.Pod }).(pulumi.StringPtrOutput)
}

// The space remaining in the storage volume for new LUNs, in GiB, excluding space reserved for snapshots.
func (o VolumeOutput) RemainingSpaceGib() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.RemainingSpaceGib }).(pulumi.StringPtrOutput)
}

// The requested size of this storage volume, in GiB.
func (o VolumeOutput) RequestedSizeGib() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.RequestedSizeGib }).(pulumi.StringPtrOutput)
}

// The behavior to use when snapshot reserved space is full.
func (o VolumeOutput) SnapshotAutoDeleteBehavior() VolumeSnapshotAutoDeleteBehaviorPtrOutput {
	return o.ApplyT(func(v Volume) *VolumeSnapshotAutoDeleteBehavior { return v.SnapshotAutoDeleteBehavior }).(VolumeSnapshotAutoDeleteBehaviorPtrOutput)
}

// Whether snapshots are enabled.
func (o VolumeOutput) SnapshotEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Volume) *bool { return v.SnapshotEnabled }).(pulumi.BoolPtrOutput)
}

// Details about snapshot space reservation and usage on the storage volume.
func (o VolumeOutput) SnapshotReservationDetail() SnapshotReservationDetailPtrOutput {
	return o.ApplyT(func(v Volume) *SnapshotReservationDetail { return v.SnapshotReservationDetail }).(SnapshotReservationDetailPtrOutput)
}

// The name of the snapshot schedule policy in use for this volume, if any.
func (o VolumeOutput) SnapshotSchedulePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.SnapshotSchedulePolicy }).(pulumi.StringPtrOutput)
}

// The state of this storage volume.
func (o VolumeOutput) State() VolumeStatePtrOutput {
	return o.ApplyT(func(v Volume) *VolumeState { return v.State }).(VolumeStatePtrOutput)
}

// Input only. Name of the storage aggregate pool to allocate the volume in. Can be used only for VOLUME_PERFORMANCE_TIER_ASSIGNED volumes.
func (o VolumeOutput) StorageAggregatePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.StorageAggregatePool }).(pulumi.StringPtrOutput)
}

// The storage type for this volume.
func (o VolumeOutput) StorageType() VolumeStorageTypePtrOutput {
	return o.ApplyT(func(v Volume) *VolumeStorageType { return v.StorageType }).(VolumeStorageTypePtrOutput)
}

// The workload profile for the volume.
func (o VolumeOutput) WorkloadProfile() VolumeWorkloadProfilePtrOutput {
	return o.ApplyT(func(v Volume) *VolumeWorkloadProfile { return v.WorkloadProfile }).(VolumeWorkloadProfilePtrOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Volume {
		return vs[0].([]Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

// Configuration parameters for a new volume.
type VolumeConfig struct {
	// The GCP service of the storage volume. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
	GcpService *string `pulumi:"gcpService"`
	// A transient unique identifier to identify a volume within an ProvisioningConfig request.
	Id *string `pulumi:"id"`
	// LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.
	LunRanges []LunRange `pulumi:"lunRanges"`
	// Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.
	MachineIds []string `pulumi:"machineIds"`
	// NFS exports. Set only when protocol is PROTOCOL_NFS.
	NfsExports []NfsExport `pulumi:"nfsExports"`
	// Performance tier of the Volume. Default is SHARED.
	PerformanceTier *VolumeConfigPerformanceTier `pulumi:"performanceTier"`
	// Volume protocol.
	Protocol *VolumeConfigProtocol `pulumi:"protocol"`
	// The requested size of this volume, in GB.
	SizeGb *int `pulumi:"sizeGb"`
	// Whether snapshots should be enabled.
	SnapshotsEnabled *bool `pulumi:"snapshotsEnabled"`
	// Input only. Name of the storage aggregate pool to allocate the volume in. Can be used only for VOLUME_PERFORMANCE_TIER_ASSIGNED volumes.
	StorageAggregatePool *string `pulumi:"storageAggregatePool"`
	// The type of this Volume.
	Type *VolumeConfigType `pulumi:"type"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote *string `pulumi:"userNote"`
}

// VolumeConfigInput is an input type that accepts VolumeConfigArgs and VolumeConfigOutput values.
// You can construct a concrete instance of `VolumeConfigInput` via:
//
//	VolumeConfigArgs{...}
type VolumeConfigInput interface {
	pulumi.Input

	ToVolumeConfigOutput() VolumeConfigOutput
	ToVolumeConfigOutputWithContext(context.Context) VolumeConfigOutput
}

// Configuration parameters for a new volume.
type VolumeConfigArgs struct {
	// The GCP service of the storage volume. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
	GcpService pulumi.StringPtrInput `pulumi:"gcpService"`
	// A transient unique identifier to identify a volume within an ProvisioningConfig request.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.
	LunRanges LunRangeArrayInput `pulumi:"lunRanges"`
	// Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.
	MachineIds pulumi.StringArrayInput `pulumi:"machineIds"`
	// NFS exports. Set only when protocol is PROTOCOL_NFS.
	NfsExports NfsExportArrayInput `pulumi:"nfsExports"`
	// Performance tier of the Volume. Default is SHARED.
	PerformanceTier VolumeConfigPerformanceTierPtrInput `pulumi:"performanceTier"`
	// Volume protocol.
	Protocol VolumeConfigProtocolPtrInput `pulumi:"protocol"`
	// The requested size of this volume, in GB.
	SizeGb pulumi.IntPtrInput `pulumi:"sizeGb"`
	// Whether snapshots should be enabled.
	SnapshotsEnabled pulumi.BoolPtrInput `pulumi:"snapshotsEnabled"`
	// Input only. Name of the storage aggregate pool to allocate the volume in. Can be used only for VOLUME_PERFORMANCE_TIER_ASSIGNED volumes.
	StorageAggregatePool pulumi.StringPtrInput `pulumi:"storageAggregatePool"`
	// The type of this Volume.
	Type VolumeConfigTypePtrInput `pulumi:"type"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote pulumi.StringPtrInput `pulumi:"userNote"`
}

func (VolumeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeConfig)(nil)).Elem()
}

func (i VolumeConfigArgs) ToVolumeConfigOutput() VolumeConfigOutput {
	return i.ToVolumeConfigOutputWithContext(context.Background())
}

func (i VolumeConfigArgs) ToVolumeConfigOutputWithContext(ctx context.Context) VolumeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeConfigOutput)
}

// VolumeConfigArrayInput is an input type that accepts VolumeConfigArray and VolumeConfigArrayOutput values.
// You can construct a concrete instance of `VolumeConfigArrayInput` via:
//
//	VolumeConfigArray{ VolumeConfigArgs{...} }
type VolumeConfigArrayInput interface {
	pulumi.Input

	ToVolumeConfigArrayOutput() VolumeConfigArrayOutput
	ToVolumeConfigArrayOutputWithContext(context.Context) VolumeConfigArrayOutput
}

type VolumeConfigArray []VolumeConfigInput

func (VolumeConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeConfig)(nil)).Elem()
}

func (i VolumeConfigArray) ToVolumeConfigArrayOutput() VolumeConfigArrayOutput {
	return i.ToVolumeConfigArrayOutputWithContext(context.Background())
}

func (i VolumeConfigArray) ToVolumeConfigArrayOutputWithContext(ctx context.Context) VolumeConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeConfigArrayOutput)
}

// Configuration parameters for a new volume.
type VolumeConfigOutput struct{ *pulumi.OutputState }

func (VolumeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeConfig)(nil)).Elem()
}

func (o VolumeConfigOutput) ToVolumeConfigOutput() VolumeConfigOutput {
	return o
}

func (o VolumeConfigOutput) ToVolumeConfigOutputWithContext(ctx context.Context) VolumeConfigOutput {
	return o
}

// The GCP service of the storage volume. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
func (o VolumeConfigOutput) GcpService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeConfig) *string { return v.GcpService }).(pulumi.StringPtrOutput)
}

// A transient unique identifier to identify a volume within an ProvisioningConfig request.
func (o VolumeConfigOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeConfig) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.
func (o VolumeConfigOutput) LunRanges() LunRangeArrayOutput {
	return o.ApplyT(func(v VolumeConfig) []LunRange { return v.LunRanges }).(LunRangeArrayOutput)
}

// Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.
func (o VolumeConfigOutput) MachineIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeConfig) []string { return v.MachineIds }).(pulumi.StringArrayOutput)
}

// NFS exports. Set only when protocol is PROTOCOL_NFS.
func (o VolumeConfigOutput) NfsExports() NfsExportArrayOutput {
	return o.ApplyT(func(v VolumeConfig) []NfsExport { return v.NfsExports }).(NfsExportArrayOutput)
}

// Performance tier of the Volume. Default is SHARED.
func (o VolumeConfigOutput) PerformanceTier() VolumeConfigPerformanceTierPtrOutput {
	return o.ApplyT(func(v VolumeConfig) *VolumeConfigPerformanceTier { return v.PerformanceTier }).(VolumeConfigPerformanceTierPtrOutput)
}

// Volume protocol.
func (o VolumeConfigOutput) Protocol() VolumeConfigProtocolPtrOutput {
	return o.ApplyT(func(v VolumeConfig) *VolumeConfigProtocol { return v.Protocol }).(VolumeConfigProtocolPtrOutput)
}

// The requested size of this volume, in GB.
func (o VolumeConfigOutput) SizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeConfig) *int { return v.SizeGb }).(pulumi.IntPtrOutput)
}

// Whether snapshots should be enabled.
func (o VolumeConfigOutput) SnapshotsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeConfig) *bool { return v.SnapshotsEnabled }).(pulumi.BoolPtrOutput)
}

// Input only. Name of the storage aggregate pool to allocate the volume in. Can be used only for VOLUME_PERFORMANCE_TIER_ASSIGNED volumes.
func (o VolumeConfigOutput) StorageAggregatePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeConfig) *string { return v.StorageAggregatePool }).(pulumi.StringPtrOutput)
}

// The type of this Volume.
func (o VolumeConfigOutput) Type() VolumeConfigTypePtrOutput {
	return o.ApplyT(func(v VolumeConfig) *VolumeConfigType { return v.Type }).(VolumeConfigTypePtrOutput)
}

// User note field, it can be used by customers to add additional information for the BMS Ops team .
func (o VolumeConfigOutput) UserNote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeConfig) *string { return v.UserNote }).(pulumi.StringPtrOutput)
}

type VolumeConfigArrayOutput struct{ *pulumi.OutputState }

func (VolumeConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeConfig)(nil)).Elem()
}

func (o VolumeConfigArrayOutput) ToVolumeConfigArrayOutput() VolumeConfigArrayOutput {
	return o
}

func (o VolumeConfigArrayOutput) ToVolumeConfigArrayOutputWithContext(ctx context.Context) VolumeConfigArrayOutput {
	return o
}

func (o VolumeConfigArrayOutput) Index(i pulumi.IntInput) VolumeConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeConfig {
		return vs[0].([]VolumeConfig)[vs[1].(int)]
	}).(VolumeConfigOutput)
}

// Configuration parameters for a new volume.
type VolumeConfigResponse struct {
	// The GCP service of the storage volume. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
	GcpService string `pulumi:"gcpService"`
	// LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.
	LunRanges []LunRangeResponse `pulumi:"lunRanges"`
	// Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.
	MachineIds []string `pulumi:"machineIds"`
	// The name of the volume config.
	Name string `pulumi:"name"`
	// NFS exports. Set only when protocol is PROTOCOL_NFS.
	NfsExports []NfsExportResponse `pulumi:"nfsExports"`
	// Performance tier of the Volume. Default is SHARED.
	PerformanceTier string `pulumi:"performanceTier"`
	// Volume protocol.
	Protocol string `pulumi:"protocol"`
	// The requested size of this volume, in GB.
	SizeGb int `pulumi:"sizeGb"`
	// Whether snapshots should be enabled.
	SnapshotsEnabled bool `pulumi:"snapshotsEnabled"`
	// Input only. Name of the storage aggregate pool to allocate the volume in. Can be used only for VOLUME_PERFORMANCE_TIER_ASSIGNED volumes.
	StorageAggregatePool string `pulumi:"storageAggregatePool"`
	// The type of this Volume.
	Type string `pulumi:"type"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote string `pulumi:"userNote"`
}

// Configuration parameters for a new volume.
type VolumeConfigResponseOutput struct{ *pulumi.OutputState }

func (VolumeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeConfigResponse)(nil)).Elem()
}

func (o VolumeConfigResponseOutput) ToVolumeConfigResponseOutput() VolumeConfigResponseOutput {
	return o
}

func (o VolumeConfigResponseOutput) ToVolumeConfigResponseOutputWithContext(ctx context.Context) VolumeConfigResponseOutput {
	return o
}

// The GCP service of the storage volume. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
func (o VolumeConfigResponseOutput) GcpService() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeConfigResponse) string { return v.GcpService }).(pulumi.StringOutput)
}

// LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.
func (o VolumeConfigResponseOutput) LunRanges() LunRangeResponseArrayOutput {
	return o.ApplyT(func(v VolumeConfigResponse) []LunRangeResponse { return v.LunRanges }).(LunRangeResponseArrayOutput)
}

// Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.
func (o VolumeConfigResponseOutput) MachineIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeConfigResponse) []string { return v.MachineIds }).(pulumi.StringArrayOutput)
}

// The name of the volume config.
func (o VolumeConfigResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeConfigResponse) string { return v.Name }).(pulumi.StringOutput)
}

// NFS exports. Set only when protocol is PROTOCOL_NFS.
func (o VolumeConfigResponseOutput) NfsExports() NfsExportResponseArrayOutput {
	return o.ApplyT(func(v VolumeConfigResponse) []NfsExportResponse { return v.NfsExports }).(NfsExportResponseArrayOutput)
}

// Performance tier of the Volume. Default is SHARED.
func (o VolumeConfigResponseOutput) PerformanceTier() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeConfigResponse) string { return v.PerformanceTier }).(pulumi.StringOutput)
}

// Volume protocol.
func (o VolumeConfigResponseOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeConfigResponse) string { return v.Protocol }).(pulumi.StringOutput)
}

// The requested size of this volume, in GB.
func (o VolumeConfigResponseOutput) SizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v VolumeConfigResponse) int { return v.SizeGb }).(pulumi.IntOutput)
}

// Whether snapshots should be enabled.
func (o VolumeConfigResponseOutput) SnapshotsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v VolumeConfigResponse) bool { return v.SnapshotsEnabled }).(pulumi.BoolOutput)
}

// Input only. Name of the storage aggregate pool to allocate the volume in. Can be used only for VOLUME_PERFORMANCE_TIER_ASSIGNED volumes.
func (o VolumeConfigResponseOutput) StorageAggregatePool() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeConfigResponse) string { return v.StorageAggregatePool }).(pulumi.StringOutput)
}

// The type of this Volume.
func (o VolumeConfigResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeConfigResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User note field, it can be used by customers to add additional information for the BMS Ops team .
func (o VolumeConfigResponseOutput) UserNote() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeConfigResponse) string { return v.UserNote }).(pulumi.StringOutput)
}

type VolumeConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeConfigResponse)(nil)).Elem()
}

func (o VolumeConfigResponseArrayOutput) ToVolumeConfigResponseArrayOutput() VolumeConfigResponseArrayOutput {
	return o
}

func (o VolumeConfigResponseArrayOutput) ToVolumeConfigResponseArrayOutputWithContext(ctx context.Context) VolumeConfigResponseArrayOutput {
	return o
}

func (o VolumeConfigResponseArrayOutput) Index(i pulumi.IntInput) VolumeConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeConfigResponse {
		return vs[0].([]VolumeConfigResponse)[vs[1].(int)]
	}).(VolumeConfigResponseOutput)
}

// A storage volume.
type VolumeResponse struct {
	// Is the Volume attached at at least one instance. This field is a lightweight counterpart of `instances` field. It is filled in List responses as well.
	Attached bool `pulumi:"attached"`
	// The size, in GiB, that this storage volume has expanded as a result of an auto grow policy. In the absence of auto-grow, the value is 0.
	AutoGrownSizeGib string `pulumi:"autoGrownSizeGib"`
	// Whether this volume is a boot volume. A boot volume is one which contains a boot LUN.
	BootVolume bool `pulumi:"bootVolume"`
	// The current size of this storage volume, in GiB, including space reserved for snapshots. This size might be different than the requested size if the storage volume has been configured with auto grow or auto shrink.
	CurrentSizeGib string `pulumi:"currentSizeGib"`
	// Additional emergency size that was requested for this Volume, in GiB. current_size_gib includes this value.
	EmergencySizeGib string `pulumi:"emergencySizeGib"`
	// Time after which volume will be fully deleted. It is filled only for volumes in COOLOFF state.
	ExpireTime string `pulumi:"expireTime"`
	// Instances this Volume is attached to. This field is set only in Get requests.
	Instances []string `pulumi:"instances"`
	// Labels as key value pairs.
	Labels map[string]string `pulumi:"labels"`
	// Maximum size volume can be expanded to in case of evergency, in GiB.
	MaxSizeGib string `pulumi:"maxSizeGib"`
	// The resource name of this `Volume`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/volumes/{volume}`
	Name string `pulumi:"name"`
	// Input only. User-specified notes for new Volume. Used to provision Volumes that require manual intervention.
	Notes string `pulumi:"notes"`
	// Originally requested size, in GiB.
	OriginallyRequestedSizeGib string `pulumi:"originallyRequestedSizeGib"`
	// Immutable. Performance tier of the Volume. Default is SHARED.
	PerformanceTier string `pulumi:"performanceTier"`
	// Immutable. Pod name.
	Pod string `pulumi:"pod"`
	// Storage protocol for the Volume.
	Protocol string `pulumi:"protocol"`
	// The space remaining in the storage volume for new LUNs, in GiB, excluding space reserved for snapshots.
	RemainingSpaceGib string `pulumi:"remainingSpaceGib"`
	// The requested size of this storage volume, in GiB.
	RequestedSizeGib string `pulumi:"requestedSizeGib"`
	// The behavior to use when snapshot reserved space is full.
	SnapshotAutoDeleteBehavior string `pulumi:"snapshotAutoDeleteBehavior"`
	// Whether snapshots are enabled.
	SnapshotEnabled bool `pulumi:"snapshotEnabled"`
	// Details about snapshot space reservation and usage on the storage volume.
	SnapshotReservationDetail SnapshotReservationDetailResponse `pulumi:"snapshotReservationDetail"`
	// The name of the snapshot schedule policy in use for this volume, if any.
	SnapshotSchedulePolicy string `pulumi:"snapshotSchedulePolicy"`
	// The state of this storage volume.
	State string `pulumi:"state"`
	// Input only. Name of the storage aggregate pool to allocate the volume in. Can be used only for VOLUME_PERFORMANCE_TIER_ASSIGNED volumes.
	StorageAggregatePool string `pulumi:"storageAggregatePool"`
	// The storage type for this volume.
	StorageType string `pulumi:"storageType"`
	// The workload profile for the volume.
	WorkloadProfile string `pulumi:"workloadProfile"`
}

// A storage volume.
type VolumeResponseOutput struct{ *pulumi.OutputState }

func (VolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseOutput) ToVolumeResponseOutput() VolumeResponseOutput {
	return o
}

func (o VolumeResponseOutput) ToVolumeResponseOutputWithContext(ctx context.Context) VolumeResponseOutput {
	return o
}

// Is the Volume attached at at least one instance. This field is a lightweight counterpart of `instances` field. It is filled in List responses as well.
func (o VolumeResponseOutput) Attached() pulumi.BoolOutput {
	return o.ApplyT(func(v VolumeResponse) bool { return v.Attached }).(pulumi.BoolOutput)
}

// The size, in GiB, that this storage volume has expanded as a result of an auto grow policy. In the absence of auto-grow, the value is 0.
func (o VolumeResponseOutput) AutoGrownSizeGib() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.AutoGrownSizeGib }).(pulumi.StringOutput)
}

// Whether this volume is a boot volume. A boot volume is one which contains a boot LUN.
func (o VolumeResponseOutput) BootVolume() pulumi.BoolOutput {
	return o.ApplyT(func(v VolumeResponse) bool { return v.BootVolume }).(pulumi.BoolOutput)
}

// The current size of this storage volume, in GiB, including space reserved for snapshots. This size might be different than the requested size if the storage volume has been configured with auto grow or auto shrink.
func (o VolumeResponseOutput) CurrentSizeGib() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.CurrentSizeGib }).(pulumi.StringOutput)
}

// Additional emergency size that was requested for this Volume, in GiB. current_size_gib includes this value.
func (o VolumeResponseOutput) EmergencySizeGib() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.EmergencySizeGib }).(pulumi.StringOutput)
}

// Time after which volume will be fully deleted. It is filled only for volumes in COOLOFF state.
func (o VolumeResponseOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// Instances this Volume is attached to. This field is set only in Get requests.
func (o VolumeResponseOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeResponse) []string { return v.Instances }).(pulumi.StringArrayOutput)
}

// Labels as key value pairs.
func (o VolumeResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Maximum size volume can be expanded to in case of evergency, in GiB.
func (o VolumeResponseOutput) MaxSizeGib() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.MaxSizeGib }).(pulumi.StringOutput)
}

// The resource name of this `Volume`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/volumes/{volume}`
func (o VolumeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Input only. User-specified notes for new Volume. Used to provision Volumes that require manual intervention.
func (o VolumeResponseOutput) Notes() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.Notes }).(pulumi.StringOutput)
}

// Originally requested size, in GiB.
func (o VolumeResponseOutput) OriginallyRequestedSizeGib() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.OriginallyRequestedSizeGib }).(pulumi.StringOutput)
}

// Immutable. Performance tier of the Volume. Default is SHARED.
func (o VolumeResponseOutput) PerformanceTier() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.PerformanceTier }).(pulumi.StringOutput)
}

// Immutable. Pod name.
func (o VolumeResponseOutput) Pod() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.Pod }).(pulumi.StringOutput)
}

// Storage protocol for the Volume.
func (o VolumeResponseOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.Protocol }).(pulumi.StringOutput)
}

// The space remaining in the storage volume for new LUNs, in GiB, excluding space reserved for snapshots.
func (o VolumeResponseOutput) RemainingSpaceGib() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.RemainingSpaceGib }).(pulumi.StringOutput)
}

// The requested size of this storage volume, in GiB.
func (o VolumeResponseOutput) RequestedSizeGib() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.RequestedSizeGib }).(pulumi.StringOutput)
}

// The behavior to use when snapshot reserved space is full.
func (o VolumeResponseOutput) SnapshotAutoDeleteBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.SnapshotAutoDeleteBehavior }).(pulumi.StringOutput)
}

// Whether snapshots are enabled.
func (o VolumeResponseOutput) SnapshotEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v VolumeResponse) bool { return v.SnapshotEnabled }).(pulumi.BoolOutput)
}

// Details about snapshot space reservation and usage on the storage volume.
func (o VolumeResponseOutput) SnapshotReservationDetail() SnapshotReservationDetailResponseOutput {
	return o.ApplyT(func(v VolumeResponse) SnapshotReservationDetailResponse { return v.SnapshotReservationDetail }).(SnapshotReservationDetailResponseOutput)
}

// The name of the snapshot schedule policy in use for this volume, if any.
func (o VolumeResponseOutput) SnapshotSchedulePolicy() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.SnapshotSchedulePolicy }).(pulumi.StringOutput)
}

// The state of this storage volume.
func (o VolumeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.State }).(pulumi.StringOutput)
}

// Input only. Name of the storage aggregate pool to allocate the volume in. Can be used only for VOLUME_PERFORMANCE_TIER_ASSIGNED volumes.
func (o VolumeResponseOutput) StorageAggregatePool() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.StorageAggregatePool }).(pulumi.StringOutput)
}

// The storage type for this volume.
func (o VolumeResponseOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.StorageType }).(pulumi.StringOutput)
}

// The workload profile for the volume.
func (o VolumeResponseOutput) WorkloadProfile() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.WorkloadProfile }).(pulumi.StringOutput)
}

type VolumeResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutput() VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutputWithContext(ctx context.Context) VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) Index(i pulumi.IntInput) VolumeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeResponse {
		return vs[0].([]VolumeResponse)[vs[1].(int)]
	}).(VolumeResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AllowedClientInput)(nil)).Elem(), AllowedClientArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowedClientArrayInput)(nil)).Elem(), AllowedClientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudBaremetalsolutionV2LogicalInterfaceInput)(nil)).Elem(), GoogleCloudBaremetalsolutionV2LogicalInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayInput)(nil)).Elem(), GoogleCloudBaremetalsolutionV2LogicalInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigInput)(nil)).Elem(), InstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigArrayInput)(nil)).Elem(), InstanceConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntakeVlanAttachmentInput)(nil)).Elem(), IntakeVlanAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntakeVlanAttachmentArrayInput)(nil)).Elem(), IntakeVlanAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogicalNetworkInterfaceInput)(nil)).Elem(), LogicalNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogicalNetworkInterfaceArrayInput)(nil)).Elem(), LogicalNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LunInput)(nil)).Elem(), LunArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LunArrayInput)(nil)).Elem(), LunArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LunRangeInput)(nil)).Elem(), LunRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LunRangeArrayInput)(nil)).Elem(), LunRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAddressInput)(nil)).Elem(), NetworkAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAddressPtrInput)(nil)).Elem(), NetworkAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigArrayInput)(nil)).Elem(), NetworkConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NfsExportInput)(nil)).Elem(), NfsExportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NfsExportArrayInput)(nil)).Elem(), NfsExportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotReservationDetailInput)(nil)).Elem(), SnapshotReservationDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotReservationDetailPtrInput)(nil)).Elem(), SnapshotReservationDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), VolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeConfigInput)(nil)).Elem(), VolumeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeConfigArrayInput)(nil)).Elem(), VolumeConfigArray{})
	pulumi.RegisterOutputType(AllowedClientOutput{})
	pulumi.RegisterOutputType(AllowedClientArrayOutput{})
	pulumi.RegisterOutputType(AllowedClientResponseOutput{})
	pulumi.RegisterOutputType(AllowedClientResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudBaremetalsolutionV2LogicalInterfaceOutput{})
	pulumi.RegisterOutputType(GoogleCloudBaremetalsolutionV2LogicalInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput{})
	pulumi.RegisterOutputType(InstanceConfigOutput{})
	pulumi.RegisterOutputType(InstanceConfigArrayOutput{})
	pulumi.RegisterOutputType(InstanceConfigResponseOutput{})
	pulumi.RegisterOutputType(InstanceConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(IntakeVlanAttachmentOutput{})
	pulumi.RegisterOutputType(IntakeVlanAttachmentArrayOutput{})
	pulumi.RegisterOutputType(IntakeVlanAttachmentResponseOutput{})
	pulumi.RegisterOutputType(IntakeVlanAttachmentResponseArrayOutput{})
	pulumi.RegisterOutputType(LogicalNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(LogicalNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(LogicalNetworkInterfaceResponseOutput{})
	pulumi.RegisterOutputType(LogicalNetworkInterfaceResponseArrayOutput{})
	pulumi.RegisterOutputType(LunOutput{})
	pulumi.RegisterOutputType(LunArrayOutput{})
	pulumi.RegisterOutputType(LunRangeOutput{})
	pulumi.RegisterOutputType(LunRangeArrayOutput{})
	pulumi.RegisterOutputType(LunRangeResponseOutput{})
	pulumi.RegisterOutputType(LunRangeResponseArrayOutput{})
	pulumi.RegisterOutputType(LunResponseOutput{})
	pulumi.RegisterOutputType(LunResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkAddressOutput{})
	pulumi.RegisterOutputType(NetworkAddressPtrOutput{})
	pulumi.RegisterOutputType(NetworkAddressReservationResponseOutput{})
	pulumi.RegisterOutputType(NetworkAddressReservationResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkAddressResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigOutput{})
	pulumi.RegisterOutputType(NetworkConfigArrayOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkMountPointResponseOutput{})
	pulumi.RegisterOutputType(NetworkMountPointResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkResponseOutput{})
	pulumi.RegisterOutputType(NetworkResponseArrayOutput{})
	pulumi.RegisterOutputType(NfsExportOutput{})
	pulumi.RegisterOutputType(NfsExportArrayOutput{})
	pulumi.RegisterOutputType(NfsExportResponseOutput{})
	pulumi.RegisterOutputType(NfsExportResponseArrayOutput{})
	pulumi.RegisterOutputType(QosPolicyResponseOutput{})
	pulumi.RegisterOutputType(SnapshotReservationDetailOutput{})
	pulumi.RegisterOutputType(SnapshotReservationDetailPtrOutput{})
	pulumi.RegisterOutputType(SnapshotReservationDetailResponseOutput{})
	pulumi.RegisterOutputType(VRFResponseOutput{})
	pulumi.RegisterOutputType(VlanAttachmentResponseOutput{})
	pulumi.RegisterOutputType(VlanAttachmentResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeConfigOutput{})
	pulumi.RegisterOutputType(VolumeConfigArrayOutput{})
	pulumi.RegisterOutputType(VolumeConfigResponseOutput{})
	pulumi.RegisterOutputType(VolumeConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeResponseOutput{})
	pulumi.RegisterOutputType(VolumeResponseArrayOutput{})
}
