// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create an NFS share.
type NfsShare struct {
	pulumi.CustomResourceState

	// List of allowed access points.
	AllowedClients AllowedClientResponseArrayOutput `pulumi:"allowedClients"`
	// Labels as key value pairs.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// Immutable. The name of the NFS share.
	Name pulumi.StringOutput `pulumi:"name"`
	// An identifier for the NFS share, generated by the backend. This field will be deprecated in the future, use `id` instead.
	NfsShareId pulumi.StringOutput `pulumi:"nfsShareId"`
	// Immutable. Pod name. Pod is an independent part of infrastructure. NFSShare can only be connected to the assets (networks, instances) allocated in the same pod.
	Pod     pulumi.StringOutput `pulumi:"pod"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The requested size, in GiB.
	RequestedSizeGib pulumi.StringOutput `pulumi:"requestedSizeGib"`
	// The state of the NFS share.
	State pulumi.StringOutput `pulumi:"state"`
	// Immutable. The storage type of the underlying volume.
	StorageType pulumi.StringOutput `pulumi:"storageType"`
	// The underlying volume of the share. Created automatically during provisioning.
	Volume pulumi.StringOutput `pulumi:"volume"`
}

// NewNfsShare registers a new resource with the given unique name, arguments, and options.
func NewNfsShare(ctx *pulumi.Context,
	name string, args *NfsShareArgs, opts ...pulumi.ResourceOption) (*NfsShare, error) {
	if args == nil {
		args = &NfsShareArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NfsShare
	err := ctx.RegisterResource("google-native:baremetalsolution/v2:NfsShare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNfsShare gets an existing NfsShare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNfsShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NfsShareState, opts ...pulumi.ResourceOption) (*NfsShare, error) {
	var resource NfsShare
	err := ctx.ReadResource("google-native:baremetalsolution/v2:NfsShare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NfsShare resources.
type nfsShareState struct {
}

type NfsShareState struct {
}

func (NfsShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*nfsShareState)(nil)).Elem()
}

type nfsShareArgs struct {
	// List of allowed access points.
	AllowedClients []AllowedClient `pulumi:"allowedClients"`
	// Labels as key value pairs.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Immutable. The name of the NFS share.
	Name *string `pulumi:"name"`
	// Immutable. Pod name. Pod is an independent part of infrastructure. NFSShare can only be connected to the assets (networks, instances) allocated in the same pod.
	Pod     *string `pulumi:"pod"`
	Project *string `pulumi:"project"`
	// The requested size, in GiB.
	RequestedSizeGib *string `pulumi:"requestedSizeGib"`
	// Immutable. The storage type of the underlying volume.
	StorageType *NfsShareStorageType `pulumi:"storageType"`
}

// The set of arguments for constructing a NfsShare resource.
type NfsShareArgs struct {
	// List of allowed access points.
	AllowedClients AllowedClientArrayInput
	// Labels as key value pairs.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Immutable. The name of the NFS share.
	Name pulumi.StringPtrInput
	// Immutable. Pod name. Pod is an independent part of infrastructure. NFSShare can only be connected to the assets (networks, instances) allocated in the same pod.
	Pod     pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The requested size, in GiB.
	RequestedSizeGib pulumi.StringPtrInput
	// Immutable. The storage type of the underlying volume.
	StorageType NfsShareStorageTypePtrInput
}

func (NfsShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nfsShareArgs)(nil)).Elem()
}

type NfsShareInput interface {
	pulumi.Input

	ToNfsShareOutput() NfsShareOutput
	ToNfsShareOutputWithContext(ctx context.Context) NfsShareOutput
}

func (*NfsShare) ElementType() reflect.Type {
	return reflect.TypeOf((**NfsShare)(nil)).Elem()
}

func (i *NfsShare) ToNfsShareOutput() NfsShareOutput {
	return i.ToNfsShareOutputWithContext(context.Background())
}

func (i *NfsShare) ToNfsShareOutputWithContext(ctx context.Context) NfsShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsShareOutput)
}

type NfsShareOutput struct{ *pulumi.OutputState }

func (NfsShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NfsShare)(nil)).Elem()
}

func (o NfsShareOutput) ToNfsShareOutput() NfsShareOutput {
	return o
}

func (o NfsShareOutput) ToNfsShareOutputWithContext(ctx context.Context) NfsShareOutput {
	return o
}

// List of allowed access points.
func (o NfsShareOutput) AllowedClients() AllowedClientResponseArrayOutput {
	return o.ApplyT(func(v *NfsShare) AllowedClientResponseArrayOutput { return v.AllowedClients }).(AllowedClientResponseArrayOutput)
}

// Labels as key value pairs.
func (o NfsShareOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NfsShare) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o NfsShareOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *NfsShare) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Immutable. The name of the NFS share.
func (o NfsShareOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NfsShare) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An identifier for the NFS share, generated by the backend. This field will be deprecated in the future, use `id` instead.
func (o NfsShareOutput) NfsShareId() pulumi.StringOutput {
	return o.ApplyT(func(v *NfsShare) pulumi.StringOutput { return v.NfsShareId }).(pulumi.StringOutput)
}

// Immutable. Pod name. Pod is an independent part of infrastructure. NFSShare can only be connected to the assets (networks, instances) allocated in the same pod.
func (o NfsShareOutput) Pod() pulumi.StringOutput {
	return o.ApplyT(func(v *NfsShare) pulumi.StringOutput { return v.Pod }).(pulumi.StringOutput)
}

func (o NfsShareOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NfsShare) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The requested size, in GiB.
func (o NfsShareOutput) RequestedSizeGib() pulumi.StringOutput {
	return o.ApplyT(func(v *NfsShare) pulumi.StringOutput { return v.RequestedSizeGib }).(pulumi.StringOutput)
}

// The state of the NFS share.
func (o NfsShareOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NfsShare) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Immutable. The storage type of the underlying volume.
func (o NfsShareOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *NfsShare) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

// The underlying volume of the share. Created automatically during provisioning.
func (o NfsShareOutput) Volume() pulumi.StringOutput {
	return o.ApplyT(func(v *NfsShare) pulumi.StringOutput { return v.Volume }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NfsShareInput)(nil)).Elem(), &NfsShare{})
	pulumi.RegisterOutputType(NfsShareOutput{})
}
