// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get details about a single server.
func LookupInstance(ctx *pulumi.Context, args *LookupInstanceArgs, opts ...pulumi.InvokeOption) (*LookupInstanceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInstanceResult
	err := ctx.Invoke("google-native:baremetalsolution/v2:getInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupInstanceArgs struct {
	InstanceId string  `pulumi:"instanceId"`
	Location   string  `pulumi:"location"`
	Project    *string `pulumi:"project"`
}

type LookupInstanceResult struct {
	// Create a time stamp.
	CreateTime string `pulumi:"createTime"`
	// The firmware version for the instance.
	FirmwareVersion string `pulumi:"firmwareVersion"`
	// True if you enable hyperthreading for the server, otherwise false. The default value is false.
	HyperthreadingEnabled bool `pulumi:"hyperthreadingEnabled"`
	// True if the interactive serial console feature is enabled for the instance, false otherwise. The default value is false.
	InteractiveSerialConsoleEnabled bool `pulumi:"interactiveSerialConsoleEnabled"`
	// Labels as key value pairs.
	Labels map[string]string `pulumi:"labels"`
	// List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.
	LogicalInterfaces []GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse `pulumi:"logicalInterfaces"`
	// Text field about info for logging in.
	LoginInfo string `pulumi:"loginInfo"`
	// Immutable. List of LUNs associated with this server.
	Luns []LunResponse `pulumi:"luns"`
	// Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
	MachineType string `pulumi:"machineType"`
	// Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}`
	Name string `pulumi:"name"`
	// Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of "bond" or "nic".
	NetworkTemplate string `pulumi:"networkTemplate"`
	// List of networks associated with this server.
	Networks []NetworkResponse `pulumi:"networks"`
	// The OS image currently installed on the server.
	OsImage string `pulumi:"osImage"`
	// Immutable. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes) allocated in the same pod only.
	Pod string `pulumi:"pod"`
	// The state of the server.
	State string `pulumi:"state"`
	// Update a time stamp.
	UpdateTime string `pulumi:"updateTime"`
	// Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.
	Volumes []VolumeResponse `pulumi:"volumes"`
	// The workload profile for the instance.
	WorkloadProfile string `pulumi:"workloadProfile"`
}

func LookupInstanceOutput(ctx *pulumi.Context, args LookupInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupInstanceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupInstanceResult, error) {
			args := v.(LookupInstanceArgs)
			r, err := LookupInstance(ctx, &args, opts...)
			var s LookupInstanceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupInstanceResultOutput)
}

type LookupInstanceOutputArgs struct {
	InstanceId pulumi.StringInput    `pulumi:"instanceId"`
	Location   pulumi.StringInput    `pulumi:"location"`
	Project    pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceArgs)(nil)).Elem()
}

type LookupInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceResult)(nil)).Elem()
}

func (o LookupInstanceResultOutput) ToLookupInstanceResultOutput() LookupInstanceResultOutput {
	return o
}

func (o LookupInstanceResultOutput) ToLookupInstanceResultOutputWithContext(ctx context.Context) LookupInstanceResultOutput {
	return o
}

func (o LookupInstanceResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupInstanceResult] {
	return pulumix.Output[LookupInstanceResult]{
		OutputState: o.OutputState,
	}
}

// Create a time stamp.
func (o LookupInstanceResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The firmware version for the instance.
func (o LookupInstanceResultOutput) FirmwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.FirmwareVersion }).(pulumi.StringOutput)
}

// True if you enable hyperthreading for the server, otherwise false. The default value is false.
func (o LookupInstanceResultOutput) HyperthreadingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInstanceResult) bool { return v.HyperthreadingEnabled }).(pulumi.BoolOutput)
}

// True if the interactive serial console feature is enabled for the instance, false otherwise. The default value is false.
func (o LookupInstanceResultOutput) InteractiveSerialConsoleEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInstanceResult) bool { return v.InteractiveSerialConsoleEnabled }).(pulumi.BoolOutput)
}

// Labels as key value pairs.
func (o LookupInstanceResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupInstanceResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.
func (o LookupInstanceResultOutput) LogicalInterfaces() GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []GoogleCloudBaremetalsolutionV2LogicalInterfaceResponse {
		return v.LogicalInterfaces
	}).(GoogleCloudBaremetalsolutionV2LogicalInterfaceResponseArrayOutput)
}

// Text field about info for logging in.
func (o LookupInstanceResultOutput) LoginInfo() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.LoginInfo }).(pulumi.StringOutput)
}

// Immutable. List of LUNs associated with this server.
func (o LookupInstanceResultOutput) Luns() LunResponseArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []LunResponse { return v.Luns }).(LunResponseArrayOutput)
}

// Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
func (o LookupInstanceResultOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.MachineType }).(pulumi.StringOutput)
}

// Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}`
func (o LookupInstanceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Name }).(pulumi.StringOutput)
}

// Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of "bond" or "nic".
func (o LookupInstanceResultOutput) NetworkTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.NetworkTemplate }).(pulumi.StringOutput)
}

// List of networks associated with this server.
func (o LookupInstanceResultOutput) Networks() NetworkResponseArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []NetworkResponse { return v.Networks }).(NetworkResponseArrayOutput)
}

// The OS image currently installed on the server.
func (o LookupInstanceResultOutput) OsImage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.OsImage }).(pulumi.StringOutput)
}

// Immutable. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes) allocated in the same pod only.
func (o LookupInstanceResultOutput) Pod() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Pod }).(pulumi.StringOutput)
}

// The state of the server.
func (o LookupInstanceResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.State }).(pulumi.StringOutput)
}

// Update a time stamp.
func (o LookupInstanceResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.
func (o LookupInstanceResultOutput) Volumes() VolumeResponseArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []VolumeResponse { return v.Volumes }).(VolumeResponseArrayOutput)
}

// The workload profile for the instance.
func (o LookupInstanceResultOutput) WorkloadProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.WorkloadProfile }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInstanceResultOutput{})
}
