// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new capacity commitment resource.
type CapacityCommitment struct {
	pulumi.CustomResourceState
}

// NewCapacityCommitment registers a new resource with the given unique name, arguments, and options.
func NewCapacityCommitment(ctx *pulumi.Context,
	name string, args *CapacityCommitmentArgs, opts ...pulumi.ResourceOption) (*CapacityCommitment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CapacityCommitmentsId == nil {
		return nil, errors.New("invalid value for required argument 'CapacityCommitmentsId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource CapacityCommitment
	err := ctx.RegisterResource("google-cloud:bigqueryreservation/v1:CapacityCommitment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCapacityCommitment gets an existing CapacityCommitment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCapacityCommitment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CapacityCommitmentState, opts ...pulumi.ResourceOption) (*CapacityCommitment, error) {
	var resource CapacityCommitment
	err := ctx.ReadResource("google-cloud:bigqueryreservation/v1:CapacityCommitment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CapacityCommitment resources.
type capacityCommitmentState struct {
}

type CapacityCommitmentState struct {
}

func (CapacityCommitmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityCommitmentState)(nil)).Elem()
}

type capacityCommitmentArgs struct {
	CapacityCommitmentsId string `pulumi:"capacityCommitmentsId"`
	// Output only. The end of the current commitment period. It is applicable only for ACTIVE capacity commitments.
	CommitmentEndTime *string `pulumi:"commitmentEndTime"`
	// Output only. The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
	CommitmentStartTime *string `pulumi:"commitmentStartTime"`
	// Output only. For FAILED commitment plan, provides the reason of failure.
	FailureStatus *Status `pulumi:"failureStatus"`
	LocationsId   string  `pulumi:"locationsId"`
	// Output only. The resource name of the capacity commitment, e.g., `projects/myproject/locations/US/capacityCommitments/123`
	Name *string `pulumi:"name"`
	// Capacity commitment commitment plan.
	Plan       *string `pulumi:"plan"`
	ProjectsId string  `pulumi:"projectsId"`
	// The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
	RenewalPlan *string `pulumi:"renewalPlan"`
	// Number of slots in this commitment.
	SlotCount *string `pulumi:"slotCount"`
	// Output only. State of the commitment.
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a CapacityCommitment resource.
type CapacityCommitmentArgs struct {
	CapacityCommitmentsId pulumi.StringInput
	// Output only. The end of the current commitment period. It is applicable only for ACTIVE capacity commitments.
	CommitmentEndTime pulumi.StringPtrInput
	// Output only. The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
	CommitmentStartTime pulumi.StringPtrInput
	// Output only. For FAILED commitment plan, provides the reason of failure.
	FailureStatus StatusPtrInput
	LocationsId   pulumi.StringInput
	// Output only. The resource name of the capacity commitment, e.g., `projects/myproject/locations/US/capacityCommitments/123`
	Name pulumi.StringPtrInput
	// Capacity commitment commitment plan.
	Plan       pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	// The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.
	RenewalPlan pulumi.StringPtrInput
	// Number of slots in this commitment.
	SlotCount pulumi.StringPtrInput
	// Output only. State of the commitment.
	State pulumi.StringPtrInput
}

func (CapacityCommitmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityCommitmentArgs)(nil)).Elem()
}

type CapacityCommitmentInput interface {
	pulumi.Input

	ToCapacityCommitmentOutput() CapacityCommitmentOutput
	ToCapacityCommitmentOutputWithContext(ctx context.Context) CapacityCommitmentOutput
}

func (*CapacityCommitment) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityCommitment)(nil))
}

func (i *CapacityCommitment) ToCapacityCommitmentOutput() CapacityCommitmentOutput {
	return i.ToCapacityCommitmentOutputWithContext(context.Background())
}

func (i *CapacityCommitment) ToCapacityCommitmentOutputWithContext(ctx context.Context) CapacityCommitmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityCommitmentOutput)
}

type CapacityCommitmentOutput struct {
	*pulumi.OutputState
}

func (CapacityCommitmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityCommitment)(nil))
}

func (o CapacityCommitmentOutput) ToCapacityCommitmentOutput() CapacityCommitmentOutput {
	return o
}

func (o CapacityCommitmentOutput) ToCapacityCommitmentOutputWithContext(ctx context.Context) CapacityCommitmentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(CapacityCommitmentOutput{})
}
