// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The log type that this config enables.
type AuditLogConfigLogType string

const (
	// Default case. Should never be this.
	AuditLogConfigLogTypeLogTypeUnspecified = AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED")
	// Admin reads. Example: CloudIAM getIamPolicy
	AuditLogConfigLogTypeAdminRead = AuditLogConfigLogType("ADMIN_READ")
	// Data writes. Example: CloudSQL Users create
	AuditLogConfigLogTypeDataWrite = AuditLogConfigLogType("DATA_WRITE")
	// Data reads. Example: CloudSQL Users list
	AuditLogConfigLogTypeDataRead = AuditLogConfigLogType("DATA_READ")
)

func (AuditLogConfigLogType) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigLogType)(nil)).Elem()
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput {
	return pulumi.ToOutput(e).(AuditLogConfigLogTypeOutput)
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypeOutputWithContext(ctx context.Context) AuditLogConfigLogTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AuditLogConfigLogTypeOutput)
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return e.ToAuditLogConfigLogTypePtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return AuditLogConfigLogType(e).ToAuditLogConfigLogTypeOutputWithContext(ctx).ToAuditLogConfigLogTypePtrOutputWithContext(ctx)
}

func (e AuditLogConfigLogType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AuditLogConfigLogTypeOutput struct{ *pulumi.OutputState }

func (AuditLogConfigLogTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigLogType)(nil)).Elem()
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput {
	return o
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypeOutputWithContext(ctx context.Context) AuditLogConfigLogTypeOutput {
	return o
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return o.ToAuditLogConfigLogTypePtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuditLogConfigLogType) *AuditLogConfigLogType {
		return &v
	}).(AuditLogConfigLogTypePtrOutput)
}

func (o AuditLogConfigLogTypeOutput) ToOutput(ctx context.Context) pulumix.Output[AuditLogConfigLogType] {
	return pulumix.Output[AuditLogConfigLogType]{
		OutputState: o.OutputState,
	}
}

func (o AuditLogConfigLogTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuditLogConfigLogType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AuditLogConfigLogTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuditLogConfigLogType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AuditLogConfigLogTypePtrOutput struct{ *pulumi.OutputState }

func (AuditLogConfigLogTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditLogConfigLogType)(nil)).Elem()
}

func (o AuditLogConfigLogTypePtrOutput) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return o
}

func (o AuditLogConfigLogTypePtrOutput) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return o
}

func (o AuditLogConfigLogTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AuditLogConfigLogType] {
	return pulumix.Output[*AuditLogConfigLogType]{
		OutputState: o.OutputState,
	}
}

func (o AuditLogConfigLogTypePtrOutput) Elem() AuditLogConfigLogTypeOutput {
	return o.ApplyT(func(v *AuditLogConfigLogType) AuditLogConfigLogType {
		if v != nil {
			return *v
		}
		var ret AuditLogConfigLogType
		return ret
	}).(AuditLogConfigLogTypeOutput)
}

func (o AuditLogConfigLogTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AuditLogConfigLogType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AuditLogConfigLogTypeInput is an input type that accepts AuditLogConfigLogTypeArgs and AuditLogConfigLogTypeOutput values.
// You can construct a concrete instance of `AuditLogConfigLogTypeInput` via:
//
//	AuditLogConfigLogTypeArgs{...}
type AuditLogConfigLogTypeInput interface {
	pulumi.Input

	ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput
	ToAuditLogConfigLogTypeOutputWithContext(context.Context) AuditLogConfigLogTypeOutput
}

var auditLogConfigLogTypePtrType = reflect.TypeOf((**AuditLogConfigLogType)(nil)).Elem()

type AuditLogConfigLogTypePtrInput interface {
	pulumi.Input

	ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput
	ToAuditLogConfigLogTypePtrOutputWithContext(context.Context) AuditLogConfigLogTypePtrOutput
}

type auditLogConfigLogTypePtr string

func AuditLogConfigLogTypePtr(v string) AuditLogConfigLogTypePtrInput {
	return (*auditLogConfigLogTypePtr)(&v)
}

func (*auditLogConfigLogTypePtr) ElementType() reflect.Type {
	return auditLogConfigLogTypePtrType
}

func (in *auditLogConfigLogTypePtr) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return pulumi.ToOutput(in).(AuditLogConfigLogTypePtrOutput)
}

func (in *auditLogConfigLogTypePtr) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AuditLogConfigLogTypePtrOutput)
}

func (in *auditLogConfigLogTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AuditLogConfigLogType] {
	return pulumix.Output[*AuditLogConfigLogType]{
		OutputState: in.ToAuditLogConfigLogTypePtrOutputWithContext(ctx).OutputState,
	}
}

// A predefined masking expression.
type DataMaskingPolicyPredefinedExpression string

const (
	// Default, unspecified predefined expression. No masking will take place since no expression is specified.
	DataMaskingPolicyPredefinedExpressionPredefinedExpressionUnspecified = DataMaskingPolicyPredefinedExpression("PREDEFINED_EXPRESSION_UNSPECIFIED")
	// Masking expression to replace data with SHA-256 hash.
	DataMaskingPolicyPredefinedExpressionSha256 = DataMaskingPolicyPredefinedExpression("SHA256")
	// Masking expression to replace data with NULLs.
	DataMaskingPolicyPredefinedExpressionAlwaysNull = DataMaskingPolicyPredefinedExpression("ALWAYS_NULL")
	// Masking expression to replace data with their default masking values. The default masking values for each type listed as below: * STRING: "" * BYTES: b'' * INTEGER: 0 * FLOAT: 0.0 * NUMERIC: 0 * BOOLEAN: FALSE * TIMESTAMP: 1970-01-01 00:00:00 UTC * DATE: 1970-01-01 * TIME: 00:00:00 * DATETIME: 1970-01-01T00:00:00 * GEOGRAPHY: POINT(0 0) * BIGNUMERIC: 0 * ARRAY: [] * STRUCT: NOT_APPLICABLE * JSON: NULL
	DataMaskingPolicyPredefinedExpressionDefaultMaskingValue = DataMaskingPolicyPredefinedExpression("DEFAULT_MASKING_VALUE")
	// Masking expression shows the last four characters of text. The masking behavior is as follows: * If text length > 4 characters: Replace text with XXXXX, append last four characters of original text. * If text length <= 4 characters: Apply SHA-256 hash.
	DataMaskingPolicyPredefinedExpressionLastFourCharacters = DataMaskingPolicyPredefinedExpression("LAST_FOUR_CHARACTERS")
	// Masking expression shows the first four characters of text. The masking behavior is as follows: * If text length > 4 characters: Replace text with XXXXX, prepend first four characters of original text. * If text length <= 4 characters: Apply SHA-256 hash.
	DataMaskingPolicyPredefinedExpressionFirstFourCharacters = DataMaskingPolicyPredefinedExpression("FIRST_FOUR_CHARACTERS")
	// Masking expression for email addresses. The masking behavior is as follows: * Syntax-valid email address: Replace username with XXXXX. For example, cloudysanfrancisco@gmail.com becomes XXXXX@gmail.com. * Syntax-invalid email address: Apply SHA-256 hash. For more information, see Email mask.
	DataMaskingPolicyPredefinedExpressionEmailMask = DataMaskingPolicyPredefinedExpression("EMAIL_MASK")
	// Masking expression to only show the *year* of `Date`, `DateTime` and `TimeStamp`. For example, with the year 2076: * DATE : 2076-01-01 * DATETIME : 2076-01-01T00:00:00 * TIMESTAMP : 2076-01-01 00:00:00 UTC Truncation occurs according to the UTC time zone. To change this, adjust the default time zone using the `time_zone` system variable. For more information, see the System variables reference.
	DataMaskingPolicyPredefinedExpressionDateYearMask = DataMaskingPolicyPredefinedExpression("DATE_YEAR_MASK")
)

func (DataMaskingPolicyPredefinedExpression) ElementType() reflect.Type {
	return reflect.TypeOf((*DataMaskingPolicyPredefinedExpression)(nil)).Elem()
}

func (e DataMaskingPolicyPredefinedExpression) ToDataMaskingPolicyPredefinedExpressionOutput() DataMaskingPolicyPredefinedExpressionOutput {
	return pulumi.ToOutput(e).(DataMaskingPolicyPredefinedExpressionOutput)
}

func (e DataMaskingPolicyPredefinedExpression) ToDataMaskingPolicyPredefinedExpressionOutputWithContext(ctx context.Context) DataMaskingPolicyPredefinedExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DataMaskingPolicyPredefinedExpressionOutput)
}

func (e DataMaskingPolicyPredefinedExpression) ToDataMaskingPolicyPredefinedExpressionPtrOutput() DataMaskingPolicyPredefinedExpressionPtrOutput {
	return e.ToDataMaskingPolicyPredefinedExpressionPtrOutputWithContext(context.Background())
}

func (e DataMaskingPolicyPredefinedExpression) ToDataMaskingPolicyPredefinedExpressionPtrOutputWithContext(ctx context.Context) DataMaskingPolicyPredefinedExpressionPtrOutput {
	return DataMaskingPolicyPredefinedExpression(e).ToDataMaskingPolicyPredefinedExpressionOutputWithContext(ctx).ToDataMaskingPolicyPredefinedExpressionPtrOutputWithContext(ctx)
}

func (e DataMaskingPolicyPredefinedExpression) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataMaskingPolicyPredefinedExpression) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataMaskingPolicyPredefinedExpression) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DataMaskingPolicyPredefinedExpression) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DataMaskingPolicyPredefinedExpressionOutput struct{ *pulumi.OutputState }

func (DataMaskingPolicyPredefinedExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataMaskingPolicyPredefinedExpression)(nil)).Elem()
}

func (o DataMaskingPolicyPredefinedExpressionOutput) ToDataMaskingPolicyPredefinedExpressionOutput() DataMaskingPolicyPredefinedExpressionOutput {
	return o
}

func (o DataMaskingPolicyPredefinedExpressionOutput) ToDataMaskingPolicyPredefinedExpressionOutputWithContext(ctx context.Context) DataMaskingPolicyPredefinedExpressionOutput {
	return o
}

func (o DataMaskingPolicyPredefinedExpressionOutput) ToDataMaskingPolicyPredefinedExpressionPtrOutput() DataMaskingPolicyPredefinedExpressionPtrOutput {
	return o.ToDataMaskingPolicyPredefinedExpressionPtrOutputWithContext(context.Background())
}

func (o DataMaskingPolicyPredefinedExpressionOutput) ToDataMaskingPolicyPredefinedExpressionPtrOutputWithContext(ctx context.Context) DataMaskingPolicyPredefinedExpressionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataMaskingPolicyPredefinedExpression) *DataMaskingPolicyPredefinedExpression {
		return &v
	}).(DataMaskingPolicyPredefinedExpressionPtrOutput)
}

func (o DataMaskingPolicyPredefinedExpressionOutput) ToOutput(ctx context.Context) pulumix.Output[DataMaskingPolicyPredefinedExpression] {
	return pulumix.Output[DataMaskingPolicyPredefinedExpression]{
		OutputState: o.OutputState,
	}
}

func (o DataMaskingPolicyPredefinedExpressionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DataMaskingPolicyPredefinedExpressionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataMaskingPolicyPredefinedExpression) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DataMaskingPolicyPredefinedExpressionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataMaskingPolicyPredefinedExpressionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataMaskingPolicyPredefinedExpression) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DataMaskingPolicyPredefinedExpressionPtrOutput struct{ *pulumi.OutputState }

func (DataMaskingPolicyPredefinedExpressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataMaskingPolicyPredefinedExpression)(nil)).Elem()
}

func (o DataMaskingPolicyPredefinedExpressionPtrOutput) ToDataMaskingPolicyPredefinedExpressionPtrOutput() DataMaskingPolicyPredefinedExpressionPtrOutput {
	return o
}

func (o DataMaskingPolicyPredefinedExpressionPtrOutput) ToDataMaskingPolicyPredefinedExpressionPtrOutputWithContext(ctx context.Context) DataMaskingPolicyPredefinedExpressionPtrOutput {
	return o
}

func (o DataMaskingPolicyPredefinedExpressionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataMaskingPolicyPredefinedExpression] {
	return pulumix.Output[*DataMaskingPolicyPredefinedExpression]{
		OutputState: o.OutputState,
	}
}

func (o DataMaskingPolicyPredefinedExpressionPtrOutput) Elem() DataMaskingPolicyPredefinedExpressionOutput {
	return o.ApplyT(func(v *DataMaskingPolicyPredefinedExpression) DataMaskingPolicyPredefinedExpression {
		if v != nil {
			return *v
		}
		var ret DataMaskingPolicyPredefinedExpression
		return ret
	}).(DataMaskingPolicyPredefinedExpressionOutput)
}

func (o DataMaskingPolicyPredefinedExpressionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataMaskingPolicyPredefinedExpressionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DataMaskingPolicyPredefinedExpression) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DataMaskingPolicyPredefinedExpressionInput is an input type that accepts DataMaskingPolicyPredefinedExpressionArgs and DataMaskingPolicyPredefinedExpressionOutput values.
// You can construct a concrete instance of `DataMaskingPolicyPredefinedExpressionInput` via:
//
//	DataMaskingPolicyPredefinedExpressionArgs{...}
type DataMaskingPolicyPredefinedExpressionInput interface {
	pulumi.Input

	ToDataMaskingPolicyPredefinedExpressionOutput() DataMaskingPolicyPredefinedExpressionOutput
	ToDataMaskingPolicyPredefinedExpressionOutputWithContext(context.Context) DataMaskingPolicyPredefinedExpressionOutput
}

var dataMaskingPolicyPredefinedExpressionPtrType = reflect.TypeOf((**DataMaskingPolicyPredefinedExpression)(nil)).Elem()

type DataMaskingPolicyPredefinedExpressionPtrInput interface {
	pulumi.Input

	ToDataMaskingPolicyPredefinedExpressionPtrOutput() DataMaskingPolicyPredefinedExpressionPtrOutput
	ToDataMaskingPolicyPredefinedExpressionPtrOutputWithContext(context.Context) DataMaskingPolicyPredefinedExpressionPtrOutput
}

type dataMaskingPolicyPredefinedExpressionPtr string

func DataMaskingPolicyPredefinedExpressionPtr(v string) DataMaskingPolicyPredefinedExpressionPtrInput {
	return (*dataMaskingPolicyPredefinedExpressionPtr)(&v)
}

func (*dataMaskingPolicyPredefinedExpressionPtr) ElementType() reflect.Type {
	return dataMaskingPolicyPredefinedExpressionPtrType
}

func (in *dataMaskingPolicyPredefinedExpressionPtr) ToDataMaskingPolicyPredefinedExpressionPtrOutput() DataMaskingPolicyPredefinedExpressionPtrOutput {
	return pulumi.ToOutput(in).(DataMaskingPolicyPredefinedExpressionPtrOutput)
}

func (in *dataMaskingPolicyPredefinedExpressionPtr) ToDataMaskingPolicyPredefinedExpressionPtrOutputWithContext(ctx context.Context) DataMaskingPolicyPredefinedExpressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DataMaskingPolicyPredefinedExpressionPtrOutput)
}

func (in *dataMaskingPolicyPredefinedExpressionPtr) ToOutput(ctx context.Context) pulumix.Output[*DataMaskingPolicyPredefinedExpression] {
	return pulumix.Output[*DataMaskingPolicyPredefinedExpression]{
		OutputState: in.ToDataMaskingPolicyPredefinedExpressionPtrOutputWithContext(ctx).OutputState,
	}
}

// Type of data policy.
type DataPolicyDataPolicyType string

const (
	// Default value for the data policy type. This should not be used.
	DataPolicyDataPolicyTypeDataPolicyTypeUnspecified = DataPolicyDataPolicyType("DATA_POLICY_TYPE_UNSPECIFIED")
	// Used to create a data policy for column-level security, without data masking.
	DataPolicyDataPolicyTypeColumnLevelSecurityPolicy = DataPolicyDataPolicyType("COLUMN_LEVEL_SECURITY_POLICY")
	// Used to create a data policy for data masking.
	DataPolicyDataPolicyTypeDataMaskingPolicy = DataPolicyDataPolicyType("DATA_MASKING_POLICY")
)

func (DataPolicyDataPolicyType) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPolicyDataPolicyType)(nil)).Elem()
}

func (e DataPolicyDataPolicyType) ToDataPolicyDataPolicyTypeOutput() DataPolicyDataPolicyTypeOutput {
	return pulumi.ToOutput(e).(DataPolicyDataPolicyTypeOutput)
}

func (e DataPolicyDataPolicyType) ToDataPolicyDataPolicyTypeOutputWithContext(ctx context.Context) DataPolicyDataPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DataPolicyDataPolicyTypeOutput)
}

func (e DataPolicyDataPolicyType) ToDataPolicyDataPolicyTypePtrOutput() DataPolicyDataPolicyTypePtrOutput {
	return e.ToDataPolicyDataPolicyTypePtrOutputWithContext(context.Background())
}

func (e DataPolicyDataPolicyType) ToDataPolicyDataPolicyTypePtrOutputWithContext(ctx context.Context) DataPolicyDataPolicyTypePtrOutput {
	return DataPolicyDataPolicyType(e).ToDataPolicyDataPolicyTypeOutputWithContext(ctx).ToDataPolicyDataPolicyTypePtrOutputWithContext(ctx)
}

func (e DataPolicyDataPolicyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataPolicyDataPolicyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataPolicyDataPolicyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DataPolicyDataPolicyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DataPolicyDataPolicyTypeOutput struct{ *pulumi.OutputState }

func (DataPolicyDataPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPolicyDataPolicyType)(nil)).Elem()
}

func (o DataPolicyDataPolicyTypeOutput) ToDataPolicyDataPolicyTypeOutput() DataPolicyDataPolicyTypeOutput {
	return o
}

func (o DataPolicyDataPolicyTypeOutput) ToDataPolicyDataPolicyTypeOutputWithContext(ctx context.Context) DataPolicyDataPolicyTypeOutput {
	return o
}

func (o DataPolicyDataPolicyTypeOutput) ToDataPolicyDataPolicyTypePtrOutput() DataPolicyDataPolicyTypePtrOutput {
	return o.ToDataPolicyDataPolicyTypePtrOutputWithContext(context.Background())
}

func (o DataPolicyDataPolicyTypeOutput) ToDataPolicyDataPolicyTypePtrOutputWithContext(ctx context.Context) DataPolicyDataPolicyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataPolicyDataPolicyType) *DataPolicyDataPolicyType {
		return &v
	}).(DataPolicyDataPolicyTypePtrOutput)
}

func (o DataPolicyDataPolicyTypeOutput) ToOutput(ctx context.Context) pulumix.Output[DataPolicyDataPolicyType] {
	return pulumix.Output[DataPolicyDataPolicyType]{
		OutputState: o.OutputState,
	}
}

func (o DataPolicyDataPolicyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DataPolicyDataPolicyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataPolicyDataPolicyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DataPolicyDataPolicyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataPolicyDataPolicyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataPolicyDataPolicyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DataPolicyDataPolicyTypePtrOutput struct{ *pulumi.OutputState }

func (DataPolicyDataPolicyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataPolicyDataPolicyType)(nil)).Elem()
}

func (o DataPolicyDataPolicyTypePtrOutput) ToDataPolicyDataPolicyTypePtrOutput() DataPolicyDataPolicyTypePtrOutput {
	return o
}

func (o DataPolicyDataPolicyTypePtrOutput) ToDataPolicyDataPolicyTypePtrOutputWithContext(ctx context.Context) DataPolicyDataPolicyTypePtrOutput {
	return o
}

func (o DataPolicyDataPolicyTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataPolicyDataPolicyType] {
	return pulumix.Output[*DataPolicyDataPolicyType]{
		OutputState: o.OutputState,
	}
}

func (o DataPolicyDataPolicyTypePtrOutput) Elem() DataPolicyDataPolicyTypeOutput {
	return o.ApplyT(func(v *DataPolicyDataPolicyType) DataPolicyDataPolicyType {
		if v != nil {
			return *v
		}
		var ret DataPolicyDataPolicyType
		return ret
	}).(DataPolicyDataPolicyTypeOutput)
}

func (o DataPolicyDataPolicyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataPolicyDataPolicyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DataPolicyDataPolicyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DataPolicyDataPolicyTypeInput is an input type that accepts DataPolicyDataPolicyTypeArgs and DataPolicyDataPolicyTypeOutput values.
// You can construct a concrete instance of `DataPolicyDataPolicyTypeInput` via:
//
//	DataPolicyDataPolicyTypeArgs{...}
type DataPolicyDataPolicyTypeInput interface {
	pulumi.Input

	ToDataPolicyDataPolicyTypeOutput() DataPolicyDataPolicyTypeOutput
	ToDataPolicyDataPolicyTypeOutputWithContext(context.Context) DataPolicyDataPolicyTypeOutput
}

var dataPolicyDataPolicyTypePtrType = reflect.TypeOf((**DataPolicyDataPolicyType)(nil)).Elem()

type DataPolicyDataPolicyTypePtrInput interface {
	pulumi.Input

	ToDataPolicyDataPolicyTypePtrOutput() DataPolicyDataPolicyTypePtrOutput
	ToDataPolicyDataPolicyTypePtrOutputWithContext(context.Context) DataPolicyDataPolicyTypePtrOutput
}

type dataPolicyDataPolicyTypePtr string

func DataPolicyDataPolicyTypePtr(v string) DataPolicyDataPolicyTypePtrInput {
	return (*dataPolicyDataPolicyTypePtr)(&v)
}

func (*dataPolicyDataPolicyTypePtr) ElementType() reflect.Type {
	return dataPolicyDataPolicyTypePtrType
}

func (in *dataPolicyDataPolicyTypePtr) ToDataPolicyDataPolicyTypePtrOutput() DataPolicyDataPolicyTypePtrOutput {
	return pulumi.ToOutput(in).(DataPolicyDataPolicyTypePtrOutput)
}

func (in *dataPolicyDataPolicyTypePtr) ToDataPolicyDataPolicyTypePtrOutputWithContext(ctx context.Context) DataPolicyDataPolicyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DataPolicyDataPolicyTypePtrOutput)
}

func (in *dataPolicyDataPolicyTypePtr) ToOutput(ctx context.Context) pulumix.Output[*DataPolicyDataPolicyType] {
	return pulumix.Output[*DataPolicyDataPolicyType]{
		OutputState: in.ToDataPolicyDataPolicyTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigLogTypeInput)(nil)).Elem(), AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigLogTypePtrInput)(nil)).Elem(), AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DataMaskingPolicyPredefinedExpressionInput)(nil)).Elem(), DataMaskingPolicyPredefinedExpression("PREDEFINED_EXPRESSION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DataMaskingPolicyPredefinedExpressionPtrInput)(nil)).Elem(), DataMaskingPolicyPredefinedExpression("PREDEFINED_EXPRESSION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DataPolicyDataPolicyTypeInput)(nil)).Elem(), DataPolicyDataPolicyType("DATA_POLICY_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DataPolicyDataPolicyTypePtrInput)(nil)).Elem(), DataPolicyDataPolicyType("DATA_POLICY_TYPE_UNSPECIFIED"))
	pulumi.RegisterOutputType(AuditLogConfigLogTypeOutput{})
	pulumi.RegisterOutputType(AuditLogConfigLogTypePtrOutput{})
	pulumi.RegisterOutputType(DataMaskingPolicyPredefinedExpressionOutput{})
	pulumi.RegisterOutputType(DataMaskingPolicyPredefinedExpressionPtrOutput{})
	pulumi.RegisterOutputType(DataPolicyDataPolicyTypeOutput{})
	pulumi.RegisterOutputType(DataPolicyDataPolicyTypePtrOutput{})
}
