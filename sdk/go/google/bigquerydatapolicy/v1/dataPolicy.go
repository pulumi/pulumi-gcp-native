// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new data policy under a project with the given `dataPolicyId` (used as the display name), policy tag, and data policy type.
// Auto-naming is currently not supported for this resource.
type DataPolicy struct {
	pulumi.CustomResourceState

	// The data masking policy that specifies the data masking rule to use.
	DataMaskingPolicy DataMaskingPolicyResponseOutput `pulumi:"dataMaskingPolicy"`
	// User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {data_policy_id} in part of the resource name.
	DataPolicyId pulumi.StringOutput `pulumi:"dataPolicyId"`
	// Type of data policy.
	DataPolicyType pulumi.StringOutput `pulumi:"dataPolicyType"`
	Location       pulumi.StringOutput `pulumi:"location"`
	// Resource name of this data policy, in the format of `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Policy tag resource name, in the format of `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.
	PolicyTag pulumi.StringOutput `pulumi:"policyTag"`
	Project   pulumi.StringOutput `pulumi:"project"`
}

// NewDataPolicy registers a new resource with the given unique name, arguments, and options.
func NewDataPolicy(ctx *pulumi.Context,
	name string, args *DataPolicyArgs, opts ...pulumi.ResourceOption) (*DataPolicy, error) {
	if args == nil {
		args = &DataPolicyArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataPolicy
	err := ctx.RegisterResource("google-native:bigquerydatapolicy/v1:DataPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataPolicy gets an existing DataPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataPolicyState, opts ...pulumi.ResourceOption) (*DataPolicy, error) {
	var resource DataPolicy
	err := ctx.ReadResource("google-native:bigquerydatapolicy/v1:DataPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataPolicy resources.
type dataPolicyState struct {
}

type DataPolicyState struct {
}

func (DataPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataPolicyState)(nil)).Elem()
}

type dataPolicyArgs struct {
	// The data masking policy that specifies the data masking rule to use.
	DataMaskingPolicy *DataMaskingPolicy `pulumi:"dataMaskingPolicy"`
	// User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {data_policy_id} in part of the resource name.
	DataPolicyId *string `pulumi:"dataPolicyId"`
	// Type of data policy.
	DataPolicyType *DataPolicyDataPolicyType `pulumi:"dataPolicyType"`
	Location       *string                   `pulumi:"location"`
	// Policy tag resource name, in the format of `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.
	PolicyTag *string `pulumi:"policyTag"`
	Project   *string `pulumi:"project"`
}

// The set of arguments for constructing a DataPolicy resource.
type DataPolicyArgs struct {
	// The data masking policy that specifies the data masking rule to use.
	DataMaskingPolicy DataMaskingPolicyPtrInput
	// User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {data_policy_id} in part of the resource name.
	DataPolicyId pulumi.StringPtrInput
	// Type of data policy.
	DataPolicyType DataPolicyDataPolicyTypePtrInput
	Location       pulumi.StringPtrInput
	// Policy tag resource name, in the format of `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.
	PolicyTag pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
}

func (DataPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataPolicyArgs)(nil)).Elem()
}

type DataPolicyInput interface {
	pulumi.Input

	ToDataPolicyOutput() DataPolicyOutput
	ToDataPolicyOutputWithContext(ctx context.Context) DataPolicyOutput
}

func (*DataPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**DataPolicy)(nil)).Elem()
}

func (i *DataPolicy) ToDataPolicyOutput() DataPolicyOutput {
	return i.ToDataPolicyOutputWithContext(context.Background())
}

func (i *DataPolicy) ToDataPolicyOutputWithContext(ctx context.Context) DataPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPolicyOutput)
}

type DataPolicyOutput struct{ *pulumi.OutputState }

func (DataPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataPolicy)(nil)).Elem()
}

func (o DataPolicyOutput) ToDataPolicyOutput() DataPolicyOutput {
	return o
}

func (o DataPolicyOutput) ToDataPolicyOutputWithContext(ctx context.Context) DataPolicyOutput {
	return o
}

// The data masking policy that specifies the data masking rule to use.
func (o DataPolicyOutput) DataMaskingPolicy() DataMaskingPolicyResponseOutput {
	return o.ApplyT(func(v *DataPolicy) DataMaskingPolicyResponseOutput { return v.DataMaskingPolicy }).(DataMaskingPolicyResponseOutput)
}

// User-assigned (human readable) ID of the data policy that needs to be unique within a project. Used as {data_policy_id} in part of the resource name.
func (o DataPolicyOutput) DataPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataPolicy) pulumi.StringOutput { return v.DataPolicyId }).(pulumi.StringOutput)
}

// Type of data policy.
func (o DataPolicyOutput) DataPolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *DataPolicy) pulumi.StringOutput { return v.DataPolicyType }).(pulumi.StringOutput)
}

func (o DataPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource name of this data policy, in the format of `projects/{project_number}/locations/{location_id}/dataPolicies/{data_policy_id}`.
func (o DataPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Policy tag resource name, in the format of `projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{policyTag_id}`.
func (o DataPolicyOutput) PolicyTag() pulumi.StringOutput {
	return o.ApplyT(func(v *DataPolicy) pulumi.StringOutput { return v.PolicyTag }).(pulumi.StringOutput)
}

func (o DataPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataPolicyInput)(nil)).Elem(), &DataPolicy{})
	pulumi.RegisterOutputType(DataPolicyOutput{})
}
