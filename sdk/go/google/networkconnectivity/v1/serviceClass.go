// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new ServiceClass in a given project and location.
type ServiceClass struct {
	pulumi.CustomResourceState

	// Time when the ServiceClass was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A description of this resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// User-defined labels.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// Immutable. The name of a ServiceClass resource. Format: projects/{project}/locations/{location}/serviceClasses/{service_class} See: https://google.aip.dev/122#fields-representing-resource-names
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// The generated service class name. Use this name to refer to the Service class in Service Connection Maps and Service Connection Policies.
	ServiceClass pulumi.StringOutput `pulumi:"serviceClass"`
	// Optional. Resource ID (i.e. 'foo' in '[...]/projects/p/locations/l/serviceClasses/foo') See https://google.aip.dev/122#resource-id-segments Unique per location. If one is not provided, one will be generated.
	ServiceClassId pulumi.StringPtrOutput `pulumi:"serviceClassId"`
	// URIs of all Service Connection Maps using this service class.
	ServiceConnectionMaps pulumi.StringArrayOutput `pulumi:"serviceConnectionMaps"`
	// Time when the ServiceClass was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewServiceClass registers a new resource with the given unique name, arguments, and options.
func NewServiceClass(ctx *pulumi.Context,
	name string, args *ServiceClassArgs, opts ...pulumi.ResourceOption) (*ServiceClass, error) {
	if args == nil {
		args = &ServiceClassArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceClass
	err := ctx.RegisterResource("google-native:networkconnectivity/v1:ServiceClass", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceClass gets an existing ServiceClass resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceClass(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceClassState, opts ...pulumi.ResourceOption) (*ServiceClass, error) {
	var resource ServiceClass
	err := ctx.ReadResource("google-native:networkconnectivity/v1:ServiceClass", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceClass resources.
type serviceClassState struct {
}

type ServiceClassState struct {
}

func (ServiceClassState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceClassState)(nil)).Elem()
}

type serviceClassArgs struct {
	// A description of this resource.
	Description *string `pulumi:"description"`
	// User-defined labels.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Immutable. The name of a ServiceClass resource. Format: projects/{project}/locations/{location}/serviceClasses/{service_class} See: https://google.aip.dev/122#fields-representing-resource-names
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Optional. Resource ID (i.e. 'foo' in '[...]/projects/p/locations/l/serviceClasses/foo') See https://google.aip.dev/122#resource-id-segments Unique per location. If one is not provided, one will be generated.
	ServiceClassId *string `pulumi:"serviceClassId"`
}

// The set of arguments for constructing a ServiceClass resource.
type ServiceClassArgs struct {
	// A description of this resource.
	Description pulumi.StringPtrInput
	// User-defined labels.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Immutable. The name of a ServiceClass resource. Format: projects/{project}/locations/{location}/serviceClasses/{service_class} See: https://google.aip.dev/122#fields-representing-resource-names
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Optional. Resource ID (i.e. 'foo' in '[...]/projects/p/locations/l/serviceClasses/foo') See https://google.aip.dev/122#resource-id-segments Unique per location. If one is not provided, one will be generated.
	ServiceClassId pulumi.StringPtrInput
}

func (ServiceClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceClassArgs)(nil)).Elem()
}

type ServiceClassInput interface {
	pulumi.Input

	ToServiceClassOutput() ServiceClassOutput
	ToServiceClassOutputWithContext(ctx context.Context) ServiceClassOutput
}

func (*ServiceClass) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceClass)(nil)).Elem()
}

func (i *ServiceClass) ToServiceClassOutput() ServiceClassOutput {
	return i.ToServiceClassOutputWithContext(context.Background())
}

func (i *ServiceClass) ToServiceClassOutputWithContext(ctx context.Context) ServiceClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceClassOutput)
}

func (i *ServiceClass) ToOutput(ctx context.Context) pulumix.Output[*ServiceClass] {
	return pulumix.Output[*ServiceClass]{
		OutputState: i.ToServiceClassOutputWithContext(ctx).OutputState,
	}
}

type ServiceClassOutput struct{ *pulumi.OutputState }

func (ServiceClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceClass)(nil)).Elem()
}

func (o ServiceClassOutput) ToServiceClassOutput() ServiceClassOutput {
	return o
}

func (o ServiceClassOutput) ToServiceClassOutputWithContext(ctx context.Context) ServiceClassOutput {
	return o
}

func (o ServiceClassOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceClass] {
	return pulumix.Output[*ServiceClass]{
		OutputState: o.OutputState,
	}
}

// Time when the ServiceClass was created.
func (o ServiceClassOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceClass) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A description of this resource.
func (o ServiceClassOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceClass) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// User-defined labels.
func (o ServiceClassOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceClass) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ServiceClassOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceClass) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Immutable. The name of a ServiceClass resource. Format: projects/{project}/locations/{location}/serviceClasses/{service_class} See: https://google.aip.dev/122#fields-representing-resource-names
func (o ServiceClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceClass) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceClassOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceClass) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o ServiceClassOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceClass) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// The generated service class name. Use this name to refer to the Service class in Service Connection Maps and Service Connection Policies.
func (o ServiceClassOutput) ServiceClass() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceClass) pulumi.StringOutput { return v.ServiceClass }).(pulumi.StringOutput)
}

// Optional. Resource ID (i.e. 'foo' in '[...]/projects/p/locations/l/serviceClasses/foo') See https://google.aip.dev/122#resource-id-segments Unique per location. If one is not provided, one will be generated.
func (o ServiceClassOutput) ServiceClassId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceClass) pulumi.StringPtrOutput { return v.ServiceClassId }).(pulumi.StringPtrOutput)
}

// URIs of all Service Connection Maps using this service class.
func (o ServiceClassOutput) ServiceConnectionMaps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceClass) pulumi.StringArrayOutput { return v.ServiceConnectionMaps }).(pulumi.StringArrayOutput)
}

// Time when the ServiceClass was updated.
func (o ServiceClassOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceClass) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceClassInput)(nil)).Elem(), &ServiceClass{})
	pulumi.RegisterOutputType(ServiceClassOutput{})
}
