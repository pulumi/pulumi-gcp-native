// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets details of a single policy-based route.
func LookupPolicyBasedRoute(ctx *pulumi.Context, args *LookupPolicyBasedRouteArgs, opts ...pulumi.InvokeOption) (*LookupPolicyBasedRouteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPolicyBasedRouteResult
	err := ctx.Invoke("google-native:networkconnectivity/v1:getPolicyBasedRoute", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPolicyBasedRouteArgs struct {
	PolicyBasedRouteId string  `pulumi:"policyBasedRouteId"`
	Project            *string `pulumi:"project"`
}

type LookupPolicyBasedRouteResult struct {
	// Time when the policy-based route was created.
	CreateTime string `pulumi:"createTime"`
	// Optional. An optional description of this resource. Provide this field when you create the resource.
	Description string `pulumi:"description"`
	// The filter to match L4 traffic.
	Filter FilterResponse `pulumi:"filter"`
	// Optional. The interconnect attachments that this policy-based route applies to.
	InterconnectAttachment InterconnectAttachmentResponse `pulumi:"interconnectAttachment"`
	// Type of this resource. Always networkconnectivity#policyBasedRoute for policy-based Route resources.
	Kind string `pulumi:"kind"`
	// User-defined labels.
	Labels map[string]string `pulumi:"labels"`
	// Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`
	Name string `pulumi:"name"`
	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	Network string `pulumi:"network"`
	// Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.
	NextHopIlbIp string `pulumi:"nextHopIlbIp"`
	// Optional. Other routes that will be referenced to determine the next hop of the packet.
	NextHopOtherRoutes string `pulumi:"nextHopOtherRoutes"`
	// Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
	Priority int `pulumi:"priority"`
	// Server-defined fully-qualified URL for this resource.
	SelfLink string `pulumi:"selfLink"`
	// Time when the policy-based route was updated.
	UpdateTime string `pulumi:"updateTime"`
	// Optional. VM instances to which this policy-based route applies to.
	VirtualMachine VirtualMachineResponse `pulumi:"virtualMachine"`
	// If potential misconfigurations are detected for this route, this field will be populated with warning messages.
	Warnings []WarningsResponse `pulumi:"warnings"`
}

func LookupPolicyBasedRouteOutput(ctx *pulumi.Context, args LookupPolicyBasedRouteOutputArgs, opts ...pulumi.InvokeOption) LookupPolicyBasedRouteResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPolicyBasedRouteResult, error) {
			args := v.(LookupPolicyBasedRouteArgs)
			r, err := LookupPolicyBasedRoute(ctx, &args, opts...)
			var s LookupPolicyBasedRouteResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPolicyBasedRouteResultOutput)
}

type LookupPolicyBasedRouteOutputArgs struct {
	PolicyBasedRouteId pulumi.StringInput    `pulumi:"policyBasedRouteId"`
	Project            pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupPolicyBasedRouteOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyBasedRouteArgs)(nil)).Elem()
}

type LookupPolicyBasedRouteResultOutput struct{ *pulumi.OutputState }

func (LookupPolicyBasedRouteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyBasedRouteResult)(nil)).Elem()
}

func (o LookupPolicyBasedRouteResultOutput) ToLookupPolicyBasedRouteResultOutput() LookupPolicyBasedRouteResultOutput {
	return o
}

func (o LookupPolicyBasedRouteResultOutput) ToLookupPolicyBasedRouteResultOutputWithContext(ctx context.Context) LookupPolicyBasedRouteResultOutput {
	return o
}

func (o LookupPolicyBasedRouteResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupPolicyBasedRouteResult] {
	return pulumix.Output[LookupPolicyBasedRouteResult]{
		OutputState: o.OutputState,
	}
}

// Time when the policy-based route was created.
func (o LookupPolicyBasedRouteResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyBasedRouteResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. An optional description of this resource. Provide this field when you create the resource.
func (o LookupPolicyBasedRouteResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyBasedRouteResult) string { return v.Description }).(pulumi.StringOutput)
}

// The filter to match L4 traffic.
func (o LookupPolicyBasedRouteResultOutput) Filter() FilterResponseOutput {
	return o.ApplyT(func(v LookupPolicyBasedRouteResult) FilterResponse { return v.Filter }).(FilterResponseOutput)
}

// Optional. The interconnect attachments that this policy-based route applies to.
func (o LookupPolicyBasedRouteResultOutput) InterconnectAttachment() InterconnectAttachmentResponseOutput {
	return o.ApplyT(func(v LookupPolicyBasedRouteResult) InterconnectAttachmentResponse { return v.InterconnectAttachment }).(InterconnectAttachmentResponseOutput)
}

// Type of this resource. Always networkconnectivity#policyBasedRoute for policy-based Route resources.
func (o LookupPolicyBasedRouteResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyBasedRouteResult) string { return v.Kind }).(pulumi.StringOutput)
}

// User-defined labels.
func (o LookupPolicyBasedRouteResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupPolicyBasedRouteResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`
func (o LookupPolicyBasedRouteResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyBasedRouteResult) string { return v.Name }).(pulumi.StringOutput)
}

// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
func (o LookupPolicyBasedRouteResultOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyBasedRouteResult) string { return v.Network }).(pulumi.StringOutput)
}

// Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.
func (o LookupPolicyBasedRouteResultOutput) NextHopIlbIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyBasedRouteResult) string { return v.NextHopIlbIp }).(pulumi.StringOutput)
}

// Optional. Other routes that will be referenced to determine the next hop of the packet.
func (o LookupPolicyBasedRouteResultOutput) NextHopOtherRoutes() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyBasedRouteResult) string { return v.NextHopOtherRoutes }).(pulumi.StringOutput)
}

// Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
func (o LookupPolicyBasedRouteResultOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPolicyBasedRouteResult) int { return v.Priority }).(pulumi.IntOutput)
}

// Server-defined fully-qualified URL for this resource.
func (o LookupPolicyBasedRouteResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyBasedRouteResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

// Time when the policy-based route was updated.
func (o LookupPolicyBasedRouteResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyBasedRouteResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Optional. VM instances to which this policy-based route applies to.
func (o LookupPolicyBasedRouteResultOutput) VirtualMachine() VirtualMachineResponseOutput {
	return o.ApplyT(func(v LookupPolicyBasedRouteResult) VirtualMachineResponse { return v.VirtualMachine }).(VirtualMachineResponseOutput)
}

// If potential misconfigurations are detected for this route, this field will be populated with warning messages.
func (o LookupPolicyBasedRouteResultOutput) Warnings() WarningsResponseArrayOutput {
	return o.ApplyT(func(v LookupPolicyBasedRouteResult) []WarningsResponse { return v.Warnings }).(WarningsResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicyBasedRouteResultOutput{})
}
