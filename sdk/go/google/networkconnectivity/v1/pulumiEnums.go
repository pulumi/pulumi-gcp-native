// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The log type that this config enables.
type AuditLogConfigLogType string

const (
	// Default case. Should never be this.
	AuditLogConfigLogTypeLogTypeUnspecified = AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED")
	// Admin reads. Example: CloudIAM getIamPolicy
	AuditLogConfigLogTypeAdminRead = AuditLogConfigLogType("ADMIN_READ")
	// Data writes. Example: CloudSQL Users create
	AuditLogConfigLogTypeDataWrite = AuditLogConfigLogType("DATA_WRITE")
	// Data reads. Example: CloudSQL Users list
	AuditLogConfigLogTypeDataRead = AuditLogConfigLogType("DATA_READ")
)

func (AuditLogConfigLogType) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigLogType)(nil)).Elem()
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput {
	return pulumi.ToOutput(e).(AuditLogConfigLogTypeOutput)
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypeOutputWithContext(ctx context.Context) AuditLogConfigLogTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AuditLogConfigLogTypeOutput)
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return e.ToAuditLogConfigLogTypePtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return AuditLogConfigLogType(e).ToAuditLogConfigLogTypeOutputWithContext(ctx).ToAuditLogConfigLogTypePtrOutputWithContext(ctx)
}

func (e AuditLogConfigLogType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AuditLogConfigLogTypeOutput struct{ *pulumi.OutputState }

func (AuditLogConfigLogTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigLogType)(nil)).Elem()
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput {
	return o
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypeOutputWithContext(ctx context.Context) AuditLogConfigLogTypeOutput {
	return o
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return o.ToAuditLogConfigLogTypePtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuditLogConfigLogType) *AuditLogConfigLogType {
		return &v
	}).(AuditLogConfigLogTypePtrOutput)
}

func (o AuditLogConfigLogTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuditLogConfigLogType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AuditLogConfigLogTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuditLogConfigLogType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AuditLogConfigLogTypePtrOutput struct{ *pulumi.OutputState }

func (AuditLogConfigLogTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditLogConfigLogType)(nil)).Elem()
}

func (o AuditLogConfigLogTypePtrOutput) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return o
}

func (o AuditLogConfigLogTypePtrOutput) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return o
}

func (o AuditLogConfigLogTypePtrOutput) Elem() AuditLogConfigLogTypeOutput {
	return o.ApplyT(func(v *AuditLogConfigLogType) AuditLogConfigLogType {
		if v != nil {
			return *v
		}
		var ret AuditLogConfigLogType
		return ret
	}).(AuditLogConfigLogTypeOutput)
}

func (o AuditLogConfigLogTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AuditLogConfigLogType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AuditLogConfigLogTypeInput is an input type that accepts AuditLogConfigLogTypeArgs and AuditLogConfigLogTypeOutput values.
// You can construct a concrete instance of `AuditLogConfigLogTypeInput` via:
//
//	AuditLogConfigLogTypeArgs{...}
type AuditLogConfigLogTypeInput interface {
	pulumi.Input

	ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput
	ToAuditLogConfigLogTypeOutputWithContext(context.Context) AuditLogConfigLogTypeOutput
}

var auditLogConfigLogTypePtrType = reflect.TypeOf((**AuditLogConfigLogType)(nil)).Elem()

type AuditLogConfigLogTypePtrInput interface {
	pulumi.Input

	ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput
	ToAuditLogConfigLogTypePtrOutputWithContext(context.Context) AuditLogConfigLogTypePtrOutput
}

type auditLogConfigLogTypePtr string

func AuditLogConfigLogTypePtr(v string) AuditLogConfigLogTypePtrInput {
	return (*auditLogConfigLogTypePtr)(&v)
}

func (*auditLogConfigLogTypePtr) ElementType() reflect.Type {
	return auditLogConfigLogTypePtrType
}

func (in *auditLogConfigLogTypePtr) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return pulumi.ToOutput(in).(AuditLogConfigLogTypePtrOutput)
}

func (in *auditLogConfigLogTypePtr) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AuditLogConfigLogTypePtrOutput)
}

type InternalRangeOverlapsItem string

const (
	// No overlap overrides.
	InternalRangeOverlapsItemOverlapUnspecified = InternalRangeOverlapsItem("OVERLAP_UNSPECIFIED")
	// Allow creation of static routes more specific that the current InternalRange.
	InternalRangeOverlapsItemOverlapRouteRange = InternalRangeOverlapsItem("OVERLAP_ROUTE_RANGE")
)

func (InternalRangeOverlapsItem) ElementType() reflect.Type {
	return reflect.TypeOf((*InternalRangeOverlapsItem)(nil)).Elem()
}

func (e InternalRangeOverlapsItem) ToInternalRangeOverlapsItemOutput() InternalRangeOverlapsItemOutput {
	return pulumi.ToOutput(e).(InternalRangeOverlapsItemOutput)
}

func (e InternalRangeOverlapsItem) ToInternalRangeOverlapsItemOutputWithContext(ctx context.Context) InternalRangeOverlapsItemOutput {
	return pulumi.ToOutputWithContext(ctx, e).(InternalRangeOverlapsItemOutput)
}

func (e InternalRangeOverlapsItem) ToInternalRangeOverlapsItemPtrOutput() InternalRangeOverlapsItemPtrOutput {
	return e.ToInternalRangeOverlapsItemPtrOutputWithContext(context.Background())
}

func (e InternalRangeOverlapsItem) ToInternalRangeOverlapsItemPtrOutputWithContext(ctx context.Context) InternalRangeOverlapsItemPtrOutput {
	return InternalRangeOverlapsItem(e).ToInternalRangeOverlapsItemOutputWithContext(ctx).ToInternalRangeOverlapsItemPtrOutputWithContext(ctx)
}

func (e InternalRangeOverlapsItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InternalRangeOverlapsItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InternalRangeOverlapsItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InternalRangeOverlapsItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type InternalRangeOverlapsItemOutput struct{ *pulumi.OutputState }

func (InternalRangeOverlapsItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InternalRangeOverlapsItem)(nil)).Elem()
}

func (o InternalRangeOverlapsItemOutput) ToInternalRangeOverlapsItemOutput() InternalRangeOverlapsItemOutput {
	return o
}

func (o InternalRangeOverlapsItemOutput) ToInternalRangeOverlapsItemOutputWithContext(ctx context.Context) InternalRangeOverlapsItemOutput {
	return o
}

func (o InternalRangeOverlapsItemOutput) ToInternalRangeOverlapsItemPtrOutput() InternalRangeOverlapsItemPtrOutput {
	return o.ToInternalRangeOverlapsItemPtrOutputWithContext(context.Background())
}

func (o InternalRangeOverlapsItemOutput) ToInternalRangeOverlapsItemPtrOutputWithContext(ctx context.Context) InternalRangeOverlapsItemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InternalRangeOverlapsItem) *InternalRangeOverlapsItem {
		return &v
	}).(InternalRangeOverlapsItemPtrOutput)
}

func (o InternalRangeOverlapsItemOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o InternalRangeOverlapsItemOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InternalRangeOverlapsItem) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o InternalRangeOverlapsItemOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InternalRangeOverlapsItemOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InternalRangeOverlapsItem) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type InternalRangeOverlapsItemPtrOutput struct{ *pulumi.OutputState }

func (InternalRangeOverlapsItemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalRangeOverlapsItem)(nil)).Elem()
}

func (o InternalRangeOverlapsItemPtrOutput) ToInternalRangeOverlapsItemPtrOutput() InternalRangeOverlapsItemPtrOutput {
	return o
}

func (o InternalRangeOverlapsItemPtrOutput) ToInternalRangeOverlapsItemPtrOutputWithContext(ctx context.Context) InternalRangeOverlapsItemPtrOutput {
	return o
}

func (o InternalRangeOverlapsItemPtrOutput) Elem() InternalRangeOverlapsItemOutput {
	return o.ApplyT(func(v *InternalRangeOverlapsItem) InternalRangeOverlapsItem {
		if v != nil {
			return *v
		}
		var ret InternalRangeOverlapsItem
		return ret
	}).(InternalRangeOverlapsItemOutput)
}

func (o InternalRangeOverlapsItemPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InternalRangeOverlapsItemPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *InternalRangeOverlapsItem) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// InternalRangeOverlapsItemInput is an input type that accepts InternalRangeOverlapsItemArgs and InternalRangeOverlapsItemOutput values.
// You can construct a concrete instance of `InternalRangeOverlapsItemInput` via:
//
//	InternalRangeOverlapsItemArgs{...}
type InternalRangeOverlapsItemInput interface {
	pulumi.Input

	ToInternalRangeOverlapsItemOutput() InternalRangeOverlapsItemOutput
	ToInternalRangeOverlapsItemOutputWithContext(context.Context) InternalRangeOverlapsItemOutput
}

var internalRangeOverlapsItemPtrType = reflect.TypeOf((**InternalRangeOverlapsItem)(nil)).Elem()

type InternalRangeOverlapsItemPtrInput interface {
	pulumi.Input

	ToInternalRangeOverlapsItemPtrOutput() InternalRangeOverlapsItemPtrOutput
	ToInternalRangeOverlapsItemPtrOutputWithContext(context.Context) InternalRangeOverlapsItemPtrOutput
}

type internalRangeOverlapsItemPtr string

func InternalRangeOverlapsItemPtr(v string) InternalRangeOverlapsItemPtrInput {
	return (*internalRangeOverlapsItemPtr)(&v)
}

func (*internalRangeOverlapsItemPtr) ElementType() reflect.Type {
	return internalRangeOverlapsItemPtrType
}

func (in *internalRangeOverlapsItemPtr) ToInternalRangeOverlapsItemPtrOutput() InternalRangeOverlapsItemPtrOutput {
	return pulumi.ToOutput(in).(InternalRangeOverlapsItemPtrOutput)
}

func (in *internalRangeOverlapsItemPtr) ToInternalRangeOverlapsItemPtrOutputWithContext(ctx context.Context) InternalRangeOverlapsItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(InternalRangeOverlapsItemPtrOutput)
}

// InternalRangeOverlapsItemArrayInput is an input type that accepts InternalRangeOverlapsItemArray and InternalRangeOverlapsItemArrayOutput values.
// You can construct a concrete instance of `InternalRangeOverlapsItemArrayInput` via:
//
//	InternalRangeOverlapsItemArray{ InternalRangeOverlapsItemArgs{...} }
type InternalRangeOverlapsItemArrayInput interface {
	pulumi.Input

	ToInternalRangeOverlapsItemArrayOutput() InternalRangeOverlapsItemArrayOutput
	ToInternalRangeOverlapsItemArrayOutputWithContext(context.Context) InternalRangeOverlapsItemArrayOutput
}

type InternalRangeOverlapsItemArray []InternalRangeOverlapsItem

func (InternalRangeOverlapsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InternalRangeOverlapsItem)(nil)).Elem()
}

func (i InternalRangeOverlapsItemArray) ToInternalRangeOverlapsItemArrayOutput() InternalRangeOverlapsItemArrayOutput {
	return i.ToInternalRangeOverlapsItemArrayOutputWithContext(context.Background())
}

func (i InternalRangeOverlapsItemArray) ToInternalRangeOverlapsItemArrayOutputWithContext(ctx context.Context) InternalRangeOverlapsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternalRangeOverlapsItemArrayOutput)
}

type InternalRangeOverlapsItemArrayOutput struct{ *pulumi.OutputState }

func (InternalRangeOverlapsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InternalRangeOverlapsItem)(nil)).Elem()
}

func (o InternalRangeOverlapsItemArrayOutput) ToInternalRangeOverlapsItemArrayOutput() InternalRangeOverlapsItemArrayOutput {
	return o
}

func (o InternalRangeOverlapsItemArrayOutput) ToInternalRangeOverlapsItemArrayOutputWithContext(ctx context.Context) InternalRangeOverlapsItemArrayOutput {
	return o
}

func (o InternalRangeOverlapsItemArrayOutput) Index(i pulumi.IntInput) InternalRangeOverlapsItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InternalRangeOverlapsItem {
		return vs[0].([]InternalRangeOverlapsItem)[vs[1].(int)]
	}).(InternalRangeOverlapsItemOutput)
}

// The type of peering set for this InternalRange.
type InternalRangePeering string

const (
	// If Peering is left unspecified in CreateInternalRange or UpdateInternalRange, it will be defaulted to FOR_SELF.
	InternalRangePeeringPeeringUnspecified = InternalRangePeering("PEERING_UNSPECIFIED")
	// This is the default behavior and represents the case that this InternalRange is intended to be used in the VPC on which it is created and is accessible from it’s peers. This implies that peers or peer-of-peer’s cannot use this range.
	InternalRangePeeringForSelf = InternalRangePeering("FOR_SELF")
	// This behavior can be set when the Internal Range is being reserved for usage by the peers. This means that no resource within the VPC in which it is being created can use this to associate with a GCP resource, but one of the peer’s can. This represents "donating" a range for peers to use.
	InternalRangePeeringForPeer = InternalRangePeering("FOR_PEER")
	// This behavior can be set when the Internal Range is being reserved for usage by the VPC on which it is created but not shared with the peers. In a sense it is local to the VPC. This can be used to create Internal Ranges for various purposes like HTTP_INTERNAL_LOAD_BALANCER or for interconnect routes that are not shared with peers. This also implies that peer’s cannot use this range in a way that is visible to this VPC, but can re-use this range as long as it is NOT_SHARED from the peer VPC too.
	InternalRangePeeringNotShared = InternalRangePeering("NOT_SHARED")
)

func (InternalRangePeering) ElementType() reflect.Type {
	return reflect.TypeOf((*InternalRangePeering)(nil)).Elem()
}

func (e InternalRangePeering) ToInternalRangePeeringOutput() InternalRangePeeringOutput {
	return pulumi.ToOutput(e).(InternalRangePeeringOutput)
}

func (e InternalRangePeering) ToInternalRangePeeringOutputWithContext(ctx context.Context) InternalRangePeeringOutput {
	return pulumi.ToOutputWithContext(ctx, e).(InternalRangePeeringOutput)
}

func (e InternalRangePeering) ToInternalRangePeeringPtrOutput() InternalRangePeeringPtrOutput {
	return e.ToInternalRangePeeringPtrOutputWithContext(context.Background())
}

func (e InternalRangePeering) ToInternalRangePeeringPtrOutputWithContext(ctx context.Context) InternalRangePeeringPtrOutput {
	return InternalRangePeering(e).ToInternalRangePeeringOutputWithContext(ctx).ToInternalRangePeeringPtrOutputWithContext(ctx)
}

func (e InternalRangePeering) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InternalRangePeering) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InternalRangePeering) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InternalRangePeering) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type InternalRangePeeringOutput struct{ *pulumi.OutputState }

func (InternalRangePeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InternalRangePeering)(nil)).Elem()
}

func (o InternalRangePeeringOutput) ToInternalRangePeeringOutput() InternalRangePeeringOutput {
	return o
}

func (o InternalRangePeeringOutput) ToInternalRangePeeringOutputWithContext(ctx context.Context) InternalRangePeeringOutput {
	return o
}

func (o InternalRangePeeringOutput) ToInternalRangePeeringPtrOutput() InternalRangePeeringPtrOutput {
	return o.ToInternalRangePeeringPtrOutputWithContext(context.Background())
}

func (o InternalRangePeeringOutput) ToInternalRangePeeringPtrOutputWithContext(ctx context.Context) InternalRangePeeringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InternalRangePeering) *InternalRangePeering {
		return &v
	}).(InternalRangePeeringPtrOutput)
}

func (o InternalRangePeeringOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o InternalRangePeeringOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InternalRangePeering) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o InternalRangePeeringOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InternalRangePeeringOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InternalRangePeering) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type InternalRangePeeringPtrOutput struct{ *pulumi.OutputState }

func (InternalRangePeeringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalRangePeering)(nil)).Elem()
}

func (o InternalRangePeeringPtrOutput) ToInternalRangePeeringPtrOutput() InternalRangePeeringPtrOutput {
	return o
}

func (o InternalRangePeeringPtrOutput) ToInternalRangePeeringPtrOutputWithContext(ctx context.Context) InternalRangePeeringPtrOutput {
	return o
}

func (o InternalRangePeeringPtrOutput) Elem() InternalRangePeeringOutput {
	return o.ApplyT(func(v *InternalRangePeering) InternalRangePeering {
		if v != nil {
			return *v
		}
		var ret InternalRangePeering
		return ret
	}).(InternalRangePeeringOutput)
}

func (o InternalRangePeeringPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InternalRangePeeringPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *InternalRangePeering) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// InternalRangePeeringInput is an input type that accepts InternalRangePeeringArgs and InternalRangePeeringOutput values.
// You can construct a concrete instance of `InternalRangePeeringInput` via:
//
//	InternalRangePeeringArgs{...}
type InternalRangePeeringInput interface {
	pulumi.Input

	ToInternalRangePeeringOutput() InternalRangePeeringOutput
	ToInternalRangePeeringOutputWithContext(context.Context) InternalRangePeeringOutput
}

var internalRangePeeringPtrType = reflect.TypeOf((**InternalRangePeering)(nil)).Elem()

type InternalRangePeeringPtrInput interface {
	pulumi.Input

	ToInternalRangePeeringPtrOutput() InternalRangePeeringPtrOutput
	ToInternalRangePeeringPtrOutputWithContext(context.Context) InternalRangePeeringPtrOutput
}

type internalRangePeeringPtr string

func InternalRangePeeringPtr(v string) InternalRangePeeringPtrInput {
	return (*internalRangePeeringPtr)(&v)
}

func (*internalRangePeeringPtr) ElementType() reflect.Type {
	return internalRangePeeringPtrType
}

func (in *internalRangePeeringPtr) ToInternalRangePeeringPtrOutput() InternalRangePeeringPtrOutput {
	return pulumi.ToOutput(in).(InternalRangePeeringPtrOutput)
}

func (in *internalRangePeeringPtr) ToInternalRangePeeringPtrOutputWithContext(ctx context.Context) InternalRangePeeringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(InternalRangePeeringPtrOutput)
}

// The type of usage set for this InternalRange.
type InternalRangeUsage string

const (
	// Unspecified usage is allowed in calls which identify the resource by other fields and do not need Usage set to complete. These are i.e.: GetInternalRange and DeleteInternalRange. Usage needs to be specified explicitly in CreateInternalRange or UpdateInternalRange calls.
	InternalRangeUsageUsageUnspecified = InternalRangeUsage("USAGE_UNSPECIFIED")
	// A GCP resource can use the reserved CIDR block by associating it with the Internal Range resource if usage is set to FOR_VPC.
	InternalRangeUsageForVpc = InternalRangeUsage("FOR_VPC")
	// Ranges created with EXTERNAL_TO_VPC cannot be associated with GCP resources and are meant to block out address ranges for various use cases, like for example, usage on-prem, with dynamic route announcements via interconnect.
	InternalRangeUsageExternalToVpc = InternalRangeUsage("EXTERNAL_TO_VPC")
)

func (InternalRangeUsage) ElementType() reflect.Type {
	return reflect.TypeOf((*InternalRangeUsage)(nil)).Elem()
}

func (e InternalRangeUsage) ToInternalRangeUsageOutput() InternalRangeUsageOutput {
	return pulumi.ToOutput(e).(InternalRangeUsageOutput)
}

func (e InternalRangeUsage) ToInternalRangeUsageOutputWithContext(ctx context.Context) InternalRangeUsageOutput {
	return pulumi.ToOutputWithContext(ctx, e).(InternalRangeUsageOutput)
}

func (e InternalRangeUsage) ToInternalRangeUsagePtrOutput() InternalRangeUsagePtrOutput {
	return e.ToInternalRangeUsagePtrOutputWithContext(context.Background())
}

func (e InternalRangeUsage) ToInternalRangeUsagePtrOutputWithContext(ctx context.Context) InternalRangeUsagePtrOutput {
	return InternalRangeUsage(e).ToInternalRangeUsageOutputWithContext(ctx).ToInternalRangeUsagePtrOutputWithContext(ctx)
}

func (e InternalRangeUsage) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InternalRangeUsage) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InternalRangeUsage) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InternalRangeUsage) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type InternalRangeUsageOutput struct{ *pulumi.OutputState }

func (InternalRangeUsageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InternalRangeUsage)(nil)).Elem()
}

func (o InternalRangeUsageOutput) ToInternalRangeUsageOutput() InternalRangeUsageOutput {
	return o
}

func (o InternalRangeUsageOutput) ToInternalRangeUsageOutputWithContext(ctx context.Context) InternalRangeUsageOutput {
	return o
}

func (o InternalRangeUsageOutput) ToInternalRangeUsagePtrOutput() InternalRangeUsagePtrOutput {
	return o.ToInternalRangeUsagePtrOutputWithContext(context.Background())
}

func (o InternalRangeUsageOutput) ToInternalRangeUsagePtrOutputWithContext(ctx context.Context) InternalRangeUsagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InternalRangeUsage) *InternalRangeUsage {
		return &v
	}).(InternalRangeUsagePtrOutput)
}

func (o InternalRangeUsageOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o InternalRangeUsageOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InternalRangeUsage) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o InternalRangeUsageOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InternalRangeUsageOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InternalRangeUsage) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type InternalRangeUsagePtrOutput struct{ *pulumi.OutputState }

func (InternalRangeUsagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalRangeUsage)(nil)).Elem()
}

func (o InternalRangeUsagePtrOutput) ToInternalRangeUsagePtrOutput() InternalRangeUsagePtrOutput {
	return o
}

func (o InternalRangeUsagePtrOutput) ToInternalRangeUsagePtrOutputWithContext(ctx context.Context) InternalRangeUsagePtrOutput {
	return o
}

func (o InternalRangeUsagePtrOutput) Elem() InternalRangeUsageOutput {
	return o.ApplyT(func(v *InternalRangeUsage) InternalRangeUsage {
		if v != nil {
			return *v
		}
		var ret InternalRangeUsage
		return ret
	}).(InternalRangeUsageOutput)
}

func (o InternalRangeUsagePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InternalRangeUsagePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *InternalRangeUsage) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// InternalRangeUsageInput is an input type that accepts InternalRangeUsageArgs and InternalRangeUsageOutput values.
// You can construct a concrete instance of `InternalRangeUsageInput` via:
//
//	InternalRangeUsageArgs{...}
type InternalRangeUsageInput interface {
	pulumi.Input

	ToInternalRangeUsageOutput() InternalRangeUsageOutput
	ToInternalRangeUsageOutputWithContext(context.Context) InternalRangeUsageOutput
}

var internalRangeUsagePtrType = reflect.TypeOf((**InternalRangeUsage)(nil)).Elem()

type InternalRangeUsagePtrInput interface {
	pulumi.Input

	ToInternalRangeUsagePtrOutput() InternalRangeUsagePtrOutput
	ToInternalRangeUsagePtrOutputWithContext(context.Context) InternalRangeUsagePtrOutput
}

type internalRangeUsagePtr string

func InternalRangeUsagePtr(v string) InternalRangeUsagePtrInput {
	return (*internalRangeUsagePtr)(&v)
}

func (*internalRangeUsagePtr) ElementType() reflect.Type {
	return internalRangeUsagePtrType
}

func (in *internalRangeUsagePtr) ToInternalRangeUsagePtrOutput() InternalRangeUsagePtrOutput {
	return pulumi.ToOutput(in).(InternalRangeUsagePtrOutput)
}

func (in *internalRangeUsagePtr) ToInternalRangeUsagePtrOutputWithContext(ctx context.Context) InternalRangeUsagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(InternalRangeUsagePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigLogTypeInput)(nil)).Elem(), AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigLogTypePtrInput)(nil)).Elem(), AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*InternalRangeOverlapsItemInput)(nil)).Elem(), InternalRangeOverlapsItem("OVERLAP_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*InternalRangeOverlapsItemPtrInput)(nil)).Elem(), InternalRangeOverlapsItem("OVERLAP_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*InternalRangeOverlapsItemArrayInput)(nil)).Elem(), InternalRangeOverlapsItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternalRangePeeringInput)(nil)).Elem(), InternalRangePeering("PEERING_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*InternalRangePeeringPtrInput)(nil)).Elem(), InternalRangePeering("PEERING_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*InternalRangeUsageInput)(nil)).Elem(), InternalRangeUsage("USAGE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*InternalRangeUsagePtrInput)(nil)).Elem(), InternalRangeUsage("USAGE_UNSPECIFIED"))
	pulumi.RegisterOutputType(AuditLogConfigLogTypeOutput{})
	pulumi.RegisterOutputType(AuditLogConfigLogTypePtrOutput{})
	pulumi.RegisterOutputType(InternalRangeOverlapsItemOutput{})
	pulumi.RegisterOutputType(InternalRangeOverlapsItemPtrOutput{})
	pulumi.RegisterOutputType(InternalRangeOverlapsItemArrayOutput{})
	pulumi.RegisterOutputType(InternalRangePeeringOutput{})
	pulumi.RegisterOutputType(InternalRangePeeringPtrOutput{})
	pulumi.RegisterOutputType(InternalRangeUsageOutput{})
	pulumi.RegisterOutputType(InternalRangeUsagePtrOutput{})
}
