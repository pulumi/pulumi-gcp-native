// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Allow the producer to specify which consumers can connect to it.
type ConsumerPscConfig struct {
	// This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
	DisableGlobalAccess *bool `pulumi:"disableGlobalAccess"`
	// The resource path of the consumer network where PSC connections are allowed to be created in. Note, this network does not need be in the ConsumerPscConfig.project in the case of SharedVPC. Example: projects/{projectNumOrId}/global/networks/{networkId}.
	Network *string `pulumi:"network"`
	// The consumer project where PSC connections are allowed to be created in.
	Project *string `pulumi:"project"`
}

// ConsumerPscConfigInput is an input type that accepts ConsumerPscConfigArgs and ConsumerPscConfigOutput values.
// You can construct a concrete instance of `ConsumerPscConfigInput` via:
//
//	ConsumerPscConfigArgs{...}
type ConsumerPscConfigInput interface {
	pulumi.Input

	ToConsumerPscConfigOutput() ConsumerPscConfigOutput
	ToConsumerPscConfigOutputWithContext(context.Context) ConsumerPscConfigOutput
}

// Allow the producer to specify which consumers can connect to it.
type ConsumerPscConfigArgs struct {
	// This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
	DisableGlobalAccess pulumi.BoolPtrInput `pulumi:"disableGlobalAccess"`
	// The resource path of the consumer network where PSC connections are allowed to be created in. Note, this network does not need be in the ConsumerPscConfig.project in the case of SharedVPC. Example: projects/{projectNumOrId}/global/networks/{networkId}.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// The consumer project where PSC connections are allowed to be created in.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (ConsumerPscConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumerPscConfig)(nil)).Elem()
}

func (i ConsumerPscConfigArgs) ToConsumerPscConfigOutput() ConsumerPscConfigOutput {
	return i.ToConsumerPscConfigOutputWithContext(context.Background())
}

func (i ConsumerPscConfigArgs) ToConsumerPscConfigOutputWithContext(ctx context.Context) ConsumerPscConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerPscConfigOutput)
}

// ConsumerPscConfigArrayInput is an input type that accepts ConsumerPscConfigArray and ConsumerPscConfigArrayOutput values.
// You can construct a concrete instance of `ConsumerPscConfigArrayInput` via:
//
//	ConsumerPscConfigArray{ ConsumerPscConfigArgs{...} }
type ConsumerPscConfigArrayInput interface {
	pulumi.Input

	ToConsumerPscConfigArrayOutput() ConsumerPscConfigArrayOutput
	ToConsumerPscConfigArrayOutputWithContext(context.Context) ConsumerPscConfigArrayOutput
}

type ConsumerPscConfigArray []ConsumerPscConfigInput

func (ConsumerPscConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConsumerPscConfig)(nil)).Elem()
}

func (i ConsumerPscConfigArray) ToConsumerPscConfigArrayOutput() ConsumerPscConfigArrayOutput {
	return i.ToConsumerPscConfigArrayOutputWithContext(context.Background())
}

func (i ConsumerPscConfigArray) ToConsumerPscConfigArrayOutputWithContext(ctx context.Context) ConsumerPscConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerPscConfigArrayOutput)
}

// Allow the producer to specify which consumers can connect to it.
type ConsumerPscConfigOutput struct{ *pulumi.OutputState }

func (ConsumerPscConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumerPscConfig)(nil)).Elem()
}

func (o ConsumerPscConfigOutput) ToConsumerPscConfigOutput() ConsumerPscConfigOutput {
	return o
}

func (o ConsumerPscConfigOutput) ToConsumerPscConfigOutputWithContext(ctx context.Context) ConsumerPscConfigOutput {
	return o
}

// This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
func (o ConsumerPscConfigOutput) DisableGlobalAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConsumerPscConfig) *bool { return v.DisableGlobalAccess }).(pulumi.BoolPtrOutput)
}

// The resource path of the consumer network where PSC connections are allowed to be created in. Note, this network does not need be in the ConsumerPscConfig.project in the case of SharedVPC. Example: projects/{projectNumOrId}/global/networks/{networkId}.
func (o ConsumerPscConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsumerPscConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// The consumer project where PSC connections are allowed to be created in.
func (o ConsumerPscConfigOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsumerPscConfig) *string { return v.Project }).(pulumi.StringPtrOutput)
}

type ConsumerPscConfigArrayOutput struct{ *pulumi.OutputState }

func (ConsumerPscConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConsumerPscConfig)(nil)).Elem()
}

func (o ConsumerPscConfigArrayOutput) ToConsumerPscConfigArrayOutput() ConsumerPscConfigArrayOutput {
	return o
}

func (o ConsumerPscConfigArrayOutput) ToConsumerPscConfigArrayOutputWithContext(ctx context.Context) ConsumerPscConfigArrayOutput {
	return o
}

func (o ConsumerPscConfigArrayOutput) Index(i pulumi.IntInput) ConsumerPscConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConsumerPscConfig {
		return vs[0].([]ConsumerPscConfig)[vs[1].(int)]
	}).(ConsumerPscConfigOutput)
}

// Allow the producer to specify which consumers can connect to it.
type ConsumerPscConfigResponse struct {
	// This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
	DisableGlobalAccess bool `pulumi:"disableGlobalAccess"`
	// The resource path of the consumer network where PSC connections are allowed to be created in. Note, this network does not need be in the ConsumerPscConfig.project in the case of SharedVPC. Example: projects/{projectNumOrId}/global/networks/{networkId}.
	Network string `pulumi:"network"`
	// The consumer project where PSC connections are allowed to be created in.
	Project string `pulumi:"project"`
	// Overall state of PSC Connections management for this consumer psc config.
	State string `pulumi:"state"`
}

// Allow the producer to specify which consumers can connect to it.
type ConsumerPscConfigResponseOutput struct{ *pulumi.OutputState }

func (ConsumerPscConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumerPscConfigResponse)(nil)).Elem()
}

func (o ConsumerPscConfigResponseOutput) ToConsumerPscConfigResponseOutput() ConsumerPscConfigResponseOutput {
	return o
}

func (o ConsumerPscConfigResponseOutput) ToConsumerPscConfigResponseOutputWithContext(ctx context.Context) ConsumerPscConfigResponseOutput {
	return o
}

// This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
func (o ConsumerPscConfigResponseOutput) DisableGlobalAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v ConsumerPscConfigResponse) bool { return v.DisableGlobalAccess }).(pulumi.BoolOutput)
}

// The resource path of the consumer network where PSC connections are allowed to be created in. Note, this network does not need be in the ConsumerPscConfig.project in the case of SharedVPC. Example: projects/{projectNumOrId}/global/networks/{networkId}.
func (o ConsumerPscConfigResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumerPscConfigResponse) string { return v.Network }).(pulumi.StringOutput)
}

// The consumer project where PSC connections are allowed to be created in.
func (o ConsumerPscConfigResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumerPscConfigResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Overall state of PSC Connections management for this consumer psc config.
func (o ConsumerPscConfigResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumerPscConfigResponse) string { return v.State }).(pulumi.StringOutput)
}

type ConsumerPscConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (ConsumerPscConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConsumerPscConfigResponse)(nil)).Elem()
}

func (o ConsumerPscConfigResponseArrayOutput) ToConsumerPscConfigResponseArrayOutput() ConsumerPscConfigResponseArrayOutput {
	return o
}

func (o ConsumerPscConfigResponseArrayOutput) ToConsumerPscConfigResponseArrayOutputWithContext(ctx context.Context) ConsumerPscConfigResponseArrayOutput {
	return o
}

func (o ConsumerPscConfigResponseArrayOutput) Index(i pulumi.IntInput) ConsumerPscConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConsumerPscConfigResponse {
		return vs[0].([]ConsumerPscConfigResponse)[vs[1].(int)]
	}).(ConsumerPscConfigResponseOutput)
}

// PSC connection details on consumer side.
type ConsumerPscConnectionResponse struct {
	// The most recent error during operating this connection.
	Error GoogleRpcStatusResponse `pulumi:"error"`
	// The error info for the latest error during operating this connection.
	ErrorInfo GoogleRpcErrorInfoResponse `pulumi:"errorInfo"`
	// The error type indicates whether the error is consumer facing, producer facing or system internal.
	ErrorType string `pulumi:"errorType"`
	// The URI of the consumer forwarding rule created. Example: projects/{projectNumOrId}/regions/us-east1/networks/{resourceId}.
	ForwardingRule string `pulumi:"forwardingRule"`
	// The last Compute Engine operation to setup PSC connection.
	GceOperation string `pulumi:"gceOperation"`
	// The IP literal allocated on the consumer network for the PSC forwarding rule that is created to connect to the producer service attachment in this service connection map.
	Ip string `pulumi:"ip"`
	// The consumer network whose PSC forwarding rule is connected to the service attachments in this service connection map. Note that the network could be on a different project (shared VPC).
	Network string `pulumi:"network"`
	// The consumer project whose PSC forwarding rule is connected to the service attachments in this service connection map.
	Project string `pulumi:"project"`
	// The PSC connection id of the PSC forwarding rule connected to the service attachments in this service connection map.
	PscConnectionId string `pulumi:"pscConnectionId"`
	// The URI of a service attachment which is the target of the PSC connection.
	ServiceAttachmentUri string `pulumi:"serviceAttachmentUri"`
	// The state of the PSC connection.
	State string `pulumi:"state"`
}

// PSC connection details on consumer side.
type ConsumerPscConnectionResponseOutput struct{ *pulumi.OutputState }

func (ConsumerPscConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumerPscConnectionResponse)(nil)).Elem()
}

func (o ConsumerPscConnectionResponseOutput) ToConsumerPscConnectionResponseOutput() ConsumerPscConnectionResponseOutput {
	return o
}

func (o ConsumerPscConnectionResponseOutput) ToConsumerPscConnectionResponseOutputWithContext(ctx context.Context) ConsumerPscConnectionResponseOutput {
	return o
}

// The most recent error during operating this connection.
func (o ConsumerPscConnectionResponseOutput) Error() GoogleRpcStatusResponseOutput {
	return o.ApplyT(func(v ConsumerPscConnectionResponse) GoogleRpcStatusResponse { return v.Error }).(GoogleRpcStatusResponseOutput)
}

// The error info for the latest error during operating this connection.
func (o ConsumerPscConnectionResponseOutput) ErrorInfo() GoogleRpcErrorInfoResponseOutput {
	return o.ApplyT(func(v ConsumerPscConnectionResponse) GoogleRpcErrorInfoResponse { return v.ErrorInfo }).(GoogleRpcErrorInfoResponseOutput)
}

// The error type indicates whether the error is consumer facing, producer facing or system internal.
func (o ConsumerPscConnectionResponseOutput) ErrorType() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumerPscConnectionResponse) string { return v.ErrorType }).(pulumi.StringOutput)
}

// The URI of the consumer forwarding rule created. Example: projects/{projectNumOrId}/regions/us-east1/networks/{resourceId}.
func (o ConsumerPscConnectionResponseOutput) ForwardingRule() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumerPscConnectionResponse) string { return v.ForwardingRule }).(pulumi.StringOutput)
}

// The last Compute Engine operation to setup PSC connection.
func (o ConsumerPscConnectionResponseOutput) GceOperation() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumerPscConnectionResponse) string { return v.GceOperation }).(pulumi.StringOutput)
}

// The IP literal allocated on the consumer network for the PSC forwarding rule that is created to connect to the producer service attachment in this service connection map.
func (o ConsumerPscConnectionResponseOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumerPscConnectionResponse) string { return v.Ip }).(pulumi.StringOutput)
}

// The consumer network whose PSC forwarding rule is connected to the service attachments in this service connection map. Note that the network could be on a different project (shared VPC).
func (o ConsumerPscConnectionResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumerPscConnectionResponse) string { return v.Network }).(pulumi.StringOutput)
}

// The consumer project whose PSC forwarding rule is connected to the service attachments in this service connection map.
func (o ConsumerPscConnectionResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumerPscConnectionResponse) string { return v.Project }).(pulumi.StringOutput)
}

// The PSC connection id of the PSC forwarding rule connected to the service attachments in this service connection map.
func (o ConsumerPscConnectionResponseOutput) PscConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumerPscConnectionResponse) string { return v.PscConnectionId }).(pulumi.StringOutput)
}

// The URI of a service attachment which is the target of the PSC connection.
func (o ConsumerPscConnectionResponseOutput) ServiceAttachmentUri() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumerPscConnectionResponse) string { return v.ServiceAttachmentUri }).(pulumi.StringOutput)
}

// The state of the PSC connection.
func (o ConsumerPscConnectionResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumerPscConnectionResponse) string { return v.State }).(pulumi.StringOutput)
}

type ConsumerPscConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (ConsumerPscConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConsumerPscConnectionResponse)(nil)).Elem()
}

func (o ConsumerPscConnectionResponseArrayOutput) ToConsumerPscConnectionResponseArrayOutput() ConsumerPscConnectionResponseArrayOutput {
	return o
}

func (o ConsumerPscConnectionResponseArrayOutput) ToConsumerPscConnectionResponseArrayOutputWithContext(ctx context.Context) ConsumerPscConnectionResponseArrayOutput {
	return o
}

func (o ConsumerPscConnectionResponseArrayOutput) Index(i pulumi.IntInput) ConsumerPscConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConsumerPscConnectionResponse {
		return vs[0].([]ConsumerPscConnectionResponse)[vs[1].(int)]
	}).(ConsumerPscConnectionResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Filter matches L4 traffic.
type Filter struct {
	// Optional. The destination IP range of outgoing packets that this policy-based route applies to. Default is "0.0.0.0/0" if protocol version is IPv4.
	DestRange *string `pulumi:"destRange"`
	// Optional. The IP protocol that this policy-based route applies to. Valid values are 'TCP', 'UDP', and 'ALL'. Default is 'ALL'.
	IpProtocol *string `pulumi:"ipProtocol"`
	// Internet protocol versions this policy-based route applies to. For this version, only IPV4 is supported.
	ProtocolVersion FilterProtocolVersion `pulumi:"protocolVersion"`
	// Optional. The source IP range of outgoing packets that this policy-based route applies to. Default is "0.0.0.0/0" if protocol version is IPv4.
	SrcRange *string `pulumi:"srcRange"`
}

// FilterInput is an input type that accepts FilterArgs and FilterOutput values.
// You can construct a concrete instance of `FilterInput` via:
//
//	FilterArgs{...}
type FilterInput interface {
	pulumi.Input

	ToFilterOutput() FilterOutput
	ToFilterOutputWithContext(context.Context) FilterOutput
}

// Filter matches L4 traffic.
type FilterArgs struct {
	// Optional. The destination IP range of outgoing packets that this policy-based route applies to. Default is "0.0.0.0/0" if protocol version is IPv4.
	DestRange pulumi.StringPtrInput `pulumi:"destRange"`
	// Optional. The IP protocol that this policy-based route applies to. Valid values are 'TCP', 'UDP', and 'ALL'. Default is 'ALL'.
	IpProtocol pulumi.StringPtrInput `pulumi:"ipProtocol"`
	// Internet protocol versions this policy-based route applies to. For this version, only IPV4 is supported.
	ProtocolVersion FilterProtocolVersionInput `pulumi:"protocolVersion"`
	// Optional. The source IP range of outgoing packets that this policy-based route applies to. Default is "0.0.0.0/0" if protocol version is IPv4.
	SrcRange pulumi.StringPtrInput `pulumi:"srcRange"`
}

func (FilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Filter)(nil)).Elem()
}

func (i FilterArgs) ToFilterOutput() FilterOutput {
	return i.ToFilterOutputWithContext(context.Background())
}

func (i FilterArgs) ToFilterOutputWithContext(ctx context.Context) FilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilterOutput)
}

// Filter matches L4 traffic.
type FilterOutput struct{ *pulumi.OutputState }

func (FilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Filter)(nil)).Elem()
}

func (o FilterOutput) ToFilterOutput() FilterOutput {
	return o
}

func (o FilterOutput) ToFilterOutputWithContext(ctx context.Context) FilterOutput {
	return o
}

// Optional. The destination IP range of outgoing packets that this policy-based route applies to. Default is "0.0.0.0/0" if protocol version is IPv4.
func (o FilterOutput) DestRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Filter) *string { return v.DestRange }).(pulumi.StringPtrOutput)
}

// Optional. The IP protocol that this policy-based route applies to. Valid values are 'TCP', 'UDP', and 'ALL'. Default is 'ALL'.
func (o FilterOutput) IpProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Filter) *string { return v.IpProtocol }).(pulumi.StringPtrOutput)
}

// Internet protocol versions this policy-based route applies to. For this version, only IPV4 is supported.
func (o FilterOutput) ProtocolVersion() FilterProtocolVersionOutput {
	return o.ApplyT(func(v Filter) FilterProtocolVersion { return v.ProtocolVersion }).(FilterProtocolVersionOutput)
}

// Optional. The source IP range of outgoing packets that this policy-based route applies to. Default is "0.0.0.0/0" if protocol version is IPv4.
func (o FilterOutput) SrcRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Filter) *string { return v.SrcRange }).(pulumi.StringPtrOutput)
}

// Filter matches L4 traffic.
type FilterResponse struct {
	// Optional. The destination IP range of outgoing packets that this policy-based route applies to. Default is "0.0.0.0/0" if protocol version is IPv4.
	DestRange string `pulumi:"destRange"`
	// Optional. The IP protocol that this policy-based route applies to. Valid values are 'TCP', 'UDP', and 'ALL'. Default is 'ALL'.
	IpProtocol string `pulumi:"ipProtocol"`
	// Internet protocol versions this policy-based route applies to. For this version, only IPV4 is supported.
	ProtocolVersion string `pulumi:"protocolVersion"`
	// Optional. The source IP range of outgoing packets that this policy-based route applies to. Default is "0.0.0.0/0" if protocol version is IPv4.
	SrcRange string `pulumi:"srcRange"`
}

// Filter matches L4 traffic.
type FilterResponseOutput struct{ *pulumi.OutputState }

func (FilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterResponse)(nil)).Elem()
}

func (o FilterResponseOutput) ToFilterResponseOutput() FilterResponseOutput {
	return o
}

func (o FilterResponseOutput) ToFilterResponseOutputWithContext(ctx context.Context) FilterResponseOutput {
	return o
}

// Optional. The destination IP range of outgoing packets that this policy-based route applies to. Default is "0.0.0.0/0" if protocol version is IPv4.
func (o FilterResponseOutput) DestRange() pulumi.StringOutput {
	return o.ApplyT(func(v FilterResponse) string { return v.DestRange }).(pulumi.StringOutput)
}

// Optional. The IP protocol that this policy-based route applies to. Valid values are 'TCP', 'UDP', and 'ALL'. Default is 'ALL'.
func (o FilterResponseOutput) IpProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v FilterResponse) string { return v.IpProtocol }).(pulumi.StringOutput)
}

// Internet protocol versions this policy-based route applies to. For this version, only IPV4 is supported.
func (o FilterResponseOutput) ProtocolVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FilterResponse) string { return v.ProtocolVersion }).(pulumi.StringOutput)
}

// Optional. The source IP range of outgoing packets that this policy-based route applies to. Default is "0.0.0.0/0" if protocol version is IPv4.
func (o FilterResponseOutput) SrcRange() pulumi.StringOutput {
	return o.ApplyT(func(v FilterResponse) string { return v.SrcRange }).(pulumi.StringOutput)
}

// Describes the cause of the error with structured details. Example of an error when contacting the "pubsub.googleapis.com" API when it is not enabled: { "reason": "API_DISABLED" "domain": "googleapis.com" "metadata": { "resource": "projects/123", "service": "pubsub.googleapis.com" } } This response indicates that the pubsub.googleapis.com API is not enabled. Example of an error that is returned when attempting to create a Spanner instance in a region that is out of stock: { "reason": "STOCKOUT" "domain": "spanner.googleapis.com", "metadata": { "availableRegions": "us-central1,us-east2" } }
type GoogleRpcErrorInfoResponse struct {
	// The logical grouping to which the "reason" belongs. The error domain is typically the registered service name of the tool or product that generates the error. Example: "pubsub.googleapis.com". If the error is generated by some common infrastructure, the error domain must be a globally unique value that identifies the infrastructure. For Google API infrastructure, the error domain is "googleapis.com".
	Domain string `pulumi:"domain"`
	// Additional structured details about this error. Keys should match /[a-zA-Z0-9-_]/ and be limited to 64 characters in length. When identifying the current value of an exceeded limit, the units should be contained in the key, not the value. For example, rather than {"instanceLimit": "100/request"}, should be returned as, {"instanceLimitPerRequest": "100"}, if the client exceeds the number of instances that can be created in a single (batch) request.
	Metadata map[string]string `pulumi:"metadata"`
	// The reason of the error. This is a constant value that identifies the proximate cause of the error. Error reasons are unique within a particular domain of errors. This should be at most 63 characters and match a regular expression of `A-Z+[A-Z0-9]`, which represents UPPER_SNAKE_CASE.
	Reason string `pulumi:"reason"`
}

// Describes the cause of the error with structured details. Example of an error when contacting the "pubsub.googleapis.com" API when it is not enabled: { "reason": "API_DISABLED" "domain": "googleapis.com" "metadata": { "resource": "projects/123", "service": "pubsub.googleapis.com" } } This response indicates that the pubsub.googleapis.com API is not enabled. Example of an error that is returned when attempting to create a Spanner instance in a region that is out of stock: { "reason": "STOCKOUT" "domain": "spanner.googleapis.com", "metadata": { "availableRegions": "us-central1,us-east2" } }
type GoogleRpcErrorInfoResponseOutput struct{ *pulumi.OutputState }

func (GoogleRpcErrorInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleRpcErrorInfoResponse)(nil)).Elem()
}

func (o GoogleRpcErrorInfoResponseOutput) ToGoogleRpcErrorInfoResponseOutput() GoogleRpcErrorInfoResponseOutput {
	return o
}

func (o GoogleRpcErrorInfoResponseOutput) ToGoogleRpcErrorInfoResponseOutputWithContext(ctx context.Context) GoogleRpcErrorInfoResponseOutput {
	return o
}

// The logical grouping to which the "reason" belongs. The error domain is typically the registered service name of the tool or product that generates the error. Example: "pubsub.googleapis.com". If the error is generated by some common infrastructure, the error domain must be a globally unique value that identifies the infrastructure. For Google API infrastructure, the error domain is "googleapis.com".
func (o GoogleRpcErrorInfoResponseOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleRpcErrorInfoResponse) string { return v.Domain }).(pulumi.StringOutput)
}

// Additional structured details about this error. Keys should match /[a-zA-Z0-9-_]/ and be limited to 64 characters in length. When identifying the current value of an exceeded limit, the units should be contained in the key, not the value. For example, rather than {"instanceLimit": "100/request"}, should be returned as, {"instanceLimitPerRequest": "100"}, if the client exceeds the number of instances that can be created in a single (batch) request.
func (o GoogleRpcErrorInfoResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v GoogleRpcErrorInfoResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The reason of the error. This is a constant value that identifies the proximate cause of the error. Error reasons are unique within a particular domain of errors. This should be at most 63 characters and match a regular expression of `A-Z+[A-Z0-9]`, which represents UPPER_SNAKE_CASE.
func (o GoogleRpcErrorInfoResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleRpcErrorInfoResponse) string { return v.Reason }).(pulumi.StringOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type GoogleRpcStatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type GoogleRpcStatusResponseOutput struct{ *pulumi.OutputState }

func (GoogleRpcStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleRpcStatusResponse)(nil)).Elem()
}

func (o GoogleRpcStatusResponseOutput) ToGoogleRpcStatusResponseOutput() GoogleRpcStatusResponseOutput {
	return o
}

func (o GoogleRpcStatusResponseOutput) ToGoogleRpcStatusResponseOutputWithContext(ctx context.Context) GoogleRpcStatusResponseOutput {
	return o
}

// The status code, which should be an enum value of google.rpc.Code.
func (o GoogleRpcStatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleRpcStatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o GoogleRpcStatusResponseOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v GoogleRpcStatusResponse) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o GoogleRpcStatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleRpcStatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

// InterconnectAttachment that this route applies to.
type InterconnectAttachment struct {
	// Optional. Cloud region to install this policy-based route on interconnect attachment. Use `all` to install it on all interconnect attachments.
	Region *string `pulumi:"region"`
}

// InterconnectAttachmentInput is an input type that accepts InterconnectAttachmentArgs and InterconnectAttachmentOutput values.
// You can construct a concrete instance of `InterconnectAttachmentInput` via:
//
//	InterconnectAttachmentArgs{...}
type InterconnectAttachmentInput interface {
	pulumi.Input

	ToInterconnectAttachmentOutput() InterconnectAttachmentOutput
	ToInterconnectAttachmentOutputWithContext(context.Context) InterconnectAttachmentOutput
}

// InterconnectAttachment that this route applies to.
type InterconnectAttachmentArgs struct {
	// Optional. Cloud region to install this policy-based route on interconnect attachment. Use `all` to install it on all interconnect attachments.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (InterconnectAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterconnectAttachment)(nil)).Elem()
}

func (i InterconnectAttachmentArgs) ToInterconnectAttachmentOutput() InterconnectAttachmentOutput {
	return i.ToInterconnectAttachmentOutputWithContext(context.Background())
}

func (i InterconnectAttachmentArgs) ToInterconnectAttachmentOutputWithContext(ctx context.Context) InterconnectAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentOutput)
}

func (i InterconnectAttachmentArgs) ToInterconnectAttachmentPtrOutput() InterconnectAttachmentPtrOutput {
	return i.ToInterconnectAttachmentPtrOutputWithContext(context.Background())
}

func (i InterconnectAttachmentArgs) ToInterconnectAttachmentPtrOutputWithContext(ctx context.Context) InterconnectAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentOutput).ToInterconnectAttachmentPtrOutputWithContext(ctx)
}

// InterconnectAttachmentPtrInput is an input type that accepts InterconnectAttachmentArgs, InterconnectAttachmentPtr and InterconnectAttachmentPtrOutput values.
// You can construct a concrete instance of `InterconnectAttachmentPtrInput` via:
//
//	        InterconnectAttachmentArgs{...}
//
//	or:
//
//	        nil
type InterconnectAttachmentPtrInput interface {
	pulumi.Input

	ToInterconnectAttachmentPtrOutput() InterconnectAttachmentPtrOutput
	ToInterconnectAttachmentPtrOutputWithContext(context.Context) InterconnectAttachmentPtrOutput
}

type interconnectAttachmentPtrType InterconnectAttachmentArgs

func InterconnectAttachmentPtr(v *InterconnectAttachmentArgs) InterconnectAttachmentPtrInput {
	return (*interconnectAttachmentPtrType)(v)
}

func (*interconnectAttachmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InterconnectAttachment)(nil)).Elem()
}

func (i *interconnectAttachmentPtrType) ToInterconnectAttachmentPtrOutput() InterconnectAttachmentPtrOutput {
	return i.ToInterconnectAttachmentPtrOutputWithContext(context.Background())
}

func (i *interconnectAttachmentPtrType) ToInterconnectAttachmentPtrOutputWithContext(ctx context.Context) InterconnectAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterconnectAttachmentPtrOutput)
}

// InterconnectAttachment that this route applies to.
type InterconnectAttachmentOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterconnectAttachment)(nil)).Elem()
}

func (o InterconnectAttachmentOutput) ToInterconnectAttachmentOutput() InterconnectAttachmentOutput {
	return o
}

func (o InterconnectAttachmentOutput) ToInterconnectAttachmentOutputWithContext(ctx context.Context) InterconnectAttachmentOutput {
	return o
}

func (o InterconnectAttachmentOutput) ToInterconnectAttachmentPtrOutput() InterconnectAttachmentPtrOutput {
	return o.ToInterconnectAttachmentPtrOutputWithContext(context.Background())
}

func (o InterconnectAttachmentOutput) ToInterconnectAttachmentPtrOutputWithContext(ctx context.Context) InterconnectAttachmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InterconnectAttachment) *InterconnectAttachment {
		return &v
	}).(InterconnectAttachmentPtrOutput)
}

// Optional. Cloud region to install this policy-based route on interconnect attachment. Use `all` to install it on all interconnect attachments.
func (o InterconnectAttachmentOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterconnectAttachment) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type InterconnectAttachmentPtrOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterconnectAttachment)(nil)).Elem()
}

func (o InterconnectAttachmentPtrOutput) ToInterconnectAttachmentPtrOutput() InterconnectAttachmentPtrOutput {
	return o
}

func (o InterconnectAttachmentPtrOutput) ToInterconnectAttachmentPtrOutputWithContext(ctx context.Context) InterconnectAttachmentPtrOutput {
	return o
}

func (o InterconnectAttachmentPtrOutput) Elem() InterconnectAttachmentOutput {
	return o.ApplyT(func(v *InterconnectAttachment) InterconnectAttachment {
		if v != nil {
			return *v
		}
		var ret InterconnectAttachment
		return ret
	}).(InterconnectAttachmentOutput)
}

// Optional. Cloud region to install this policy-based route on interconnect attachment. Use `all` to install it on all interconnect attachments.
func (o InterconnectAttachmentPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterconnectAttachment) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// InterconnectAttachment that this route applies to.
type InterconnectAttachmentResponse struct {
	// Optional. Cloud region to install this policy-based route on interconnect attachment. Use `all` to install it on all interconnect attachments.
	Region string `pulumi:"region"`
}

// InterconnectAttachment that this route applies to.
type InterconnectAttachmentResponseOutput struct{ *pulumi.OutputState }

func (InterconnectAttachmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterconnectAttachmentResponse)(nil)).Elem()
}

func (o InterconnectAttachmentResponseOutput) ToInterconnectAttachmentResponseOutput() InterconnectAttachmentResponseOutput {
	return o
}

func (o InterconnectAttachmentResponseOutput) ToInterconnectAttachmentResponseOutputWithContext(ctx context.Context) InterconnectAttachmentResponseOutput {
	return o
}

// Optional. Cloud region to install this policy-based route on interconnect attachment. Use `all` to install it on all interconnect attachments.
func (o InterconnectAttachmentResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v InterconnectAttachmentResponse) string { return v.Region }).(pulumi.StringOutput)
}

// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
type LinkedInterconnectAttachments struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer *bool `pulumi:"siteToSiteDataTransfer"`
	// The URIs of linked interconnect attachment resources
	Uris []string `pulumi:"uris"`
}

// LinkedInterconnectAttachmentsInput is an input type that accepts LinkedInterconnectAttachmentsArgs and LinkedInterconnectAttachmentsOutput values.
// You can construct a concrete instance of `LinkedInterconnectAttachmentsInput` via:
//
//	LinkedInterconnectAttachmentsArgs{...}
type LinkedInterconnectAttachmentsInput interface {
	pulumi.Input

	ToLinkedInterconnectAttachmentsOutput() LinkedInterconnectAttachmentsOutput
	ToLinkedInterconnectAttachmentsOutputWithContext(context.Context) LinkedInterconnectAttachmentsOutput
}

// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
type LinkedInterconnectAttachmentsArgs struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer pulumi.BoolPtrInput `pulumi:"siteToSiteDataTransfer"`
	// The URIs of linked interconnect attachment resources
	Uris pulumi.StringArrayInput `pulumi:"uris"`
}

func (LinkedInterconnectAttachmentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedInterconnectAttachments)(nil)).Elem()
}

func (i LinkedInterconnectAttachmentsArgs) ToLinkedInterconnectAttachmentsOutput() LinkedInterconnectAttachmentsOutput {
	return i.ToLinkedInterconnectAttachmentsOutputWithContext(context.Background())
}

func (i LinkedInterconnectAttachmentsArgs) ToLinkedInterconnectAttachmentsOutputWithContext(ctx context.Context) LinkedInterconnectAttachmentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedInterconnectAttachmentsOutput)
}

func (i LinkedInterconnectAttachmentsArgs) ToLinkedInterconnectAttachmentsPtrOutput() LinkedInterconnectAttachmentsPtrOutput {
	return i.ToLinkedInterconnectAttachmentsPtrOutputWithContext(context.Background())
}

func (i LinkedInterconnectAttachmentsArgs) ToLinkedInterconnectAttachmentsPtrOutputWithContext(ctx context.Context) LinkedInterconnectAttachmentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedInterconnectAttachmentsOutput).ToLinkedInterconnectAttachmentsPtrOutputWithContext(ctx)
}

// LinkedInterconnectAttachmentsPtrInput is an input type that accepts LinkedInterconnectAttachmentsArgs, LinkedInterconnectAttachmentsPtr and LinkedInterconnectAttachmentsPtrOutput values.
// You can construct a concrete instance of `LinkedInterconnectAttachmentsPtrInput` via:
//
//	        LinkedInterconnectAttachmentsArgs{...}
//
//	or:
//
//	        nil
type LinkedInterconnectAttachmentsPtrInput interface {
	pulumi.Input

	ToLinkedInterconnectAttachmentsPtrOutput() LinkedInterconnectAttachmentsPtrOutput
	ToLinkedInterconnectAttachmentsPtrOutputWithContext(context.Context) LinkedInterconnectAttachmentsPtrOutput
}

type linkedInterconnectAttachmentsPtrType LinkedInterconnectAttachmentsArgs

func LinkedInterconnectAttachmentsPtr(v *LinkedInterconnectAttachmentsArgs) LinkedInterconnectAttachmentsPtrInput {
	return (*linkedInterconnectAttachmentsPtrType)(v)
}

func (*linkedInterconnectAttachmentsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedInterconnectAttachments)(nil)).Elem()
}

func (i *linkedInterconnectAttachmentsPtrType) ToLinkedInterconnectAttachmentsPtrOutput() LinkedInterconnectAttachmentsPtrOutput {
	return i.ToLinkedInterconnectAttachmentsPtrOutputWithContext(context.Background())
}

func (i *linkedInterconnectAttachmentsPtrType) ToLinkedInterconnectAttachmentsPtrOutputWithContext(ctx context.Context) LinkedInterconnectAttachmentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedInterconnectAttachmentsPtrOutput)
}

// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
type LinkedInterconnectAttachmentsOutput struct{ *pulumi.OutputState }

func (LinkedInterconnectAttachmentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedInterconnectAttachments)(nil)).Elem()
}

func (o LinkedInterconnectAttachmentsOutput) ToLinkedInterconnectAttachmentsOutput() LinkedInterconnectAttachmentsOutput {
	return o
}

func (o LinkedInterconnectAttachmentsOutput) ToLinkedInterconnectAttachmentsOutputWithContext(ctx context.Context) LinkedInterconnectAttachmentsOutput {
	return o
}

func (o LinkedInterconnectAttachmentsOutput) ToLinkedInterconnectAttachmentsPtrOutput() LinkedInterconnectAttachmentsPtrOutput {
	return o.ToLinkedInterconnectAttachmentsPtrOutputWithContext(context.Background())
}

func (o LinkedInterconnectAttachmentsOutput) ToLinkedInterconnectAttachmentsPtrOutputWithContext(ctx context.Context) LinkedInterconnectAttachmentsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkedInterconnectAttachments) *LinkedInterconnectAttachments {
		return &v
	}).(LinkedInterconnectAttachmentsPtrOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedInterconnectAttachmentsOutput) SiteToSiteDataTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinkedInterconnectAttachments) *bool { return v.SiteToSiteDataTransfer }).(pulumi.BoolPtrOutput)
}

// The URIs of linked interconnect attachment resources
func (o LinkedInterconnectAttachmentsOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LinkedInterconnectAttachments) []string { return v.Uris }).(pulumi.StringArrayOutput)
}

type LinkedInterconnectAttachmentsPtrOutput struct{ *pulumi.OutputState }

func (LinkedInterconnectAttachmentsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedInterconnectAttachments)(nil)).Elem()
}

func (o LinkedInterconnectAttachmentsPtrOutput) ToLinkedInterconnectAttachmentsPtrOutput() LinkedInterconnectAttachmentsPtrOutput {
	return o
}

func (o LinkedInterconnectAttachmentsPtrOutput) ToLinkedInterconnectAttachmentsPtrOutputWithContext(ctx context.Context) LinkedInterconnectAttachmentsPtrOutput {
	return o
}

func (o LinkedInterconnectAttachmentsPtrOutput) Elem() LinkedInterconnectAttachmentsOutput {
	return o.ApplyT(func(v *LinkedInterconnectAttachments) LinkedInterconnectAttachments {
		if v != nil {
			return *v
		}
		var ret LinkedInterconnectAttachments
		return ret
	}).(LinkedInterconnectAttachmentsOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedInterconnectAttachmentsPtrOutput) SiteToSiteDataTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinkedInterconnectAttachments) *bool {
		if v == nil {
			return nil
		}
		return v.SiteToSiteDataTransfer
	}).(pulumi.BoolPtrOutput)
}

// The URIs of linked interconnect attachment resources
func (o LinkedInterconnectAttachmentsPtrOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinkedInterconnectAttachments) []string {
		if v == nil {
			return nil
		}
		return v.Uris
	}).(pulumi.StringArrayOutput)
}

// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
type LinkedInterconnectAttachmentsResponse struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer bool `pulumi:"siteToSiteDataTransfer"`
	// The URIs of linked interconnect attachment resources
	Uris []string `pulumi:"uris"`
	// The VPC network where these VLAN attachments are located.
	VpcNetwork string `pulumi:"vpcNetwork"`
}

// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
type LinkedInterconnectAttachmentsResponseOutput struct{ *pulumi.OutputState }

func (LinkedInterconnectAttachmentsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedInterconnectAttachmentsResponse)(nil)).Elem()
}

func (o LinkedInterconnectAttachmentsResponseOutput) ToLinkedInterconnectAttachmentsResponseOutput() LinkedInterconnectAttachmentsResponseOutput {
	return o
}

func (o LinkedInterconnectAttachmentsResponseOutput) ToLinkedInterconnectAttachmentsResponseOutputWithContext(ctx context.Context) LinkedInterconnectAttachmentsResponseOutput {
	return o
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedInterconnectAttachmentsResponseOutput) SiteToSiteDataTransfer() pulumi.BoolOutput {
	return o.ApplyT(func(v LinkedInterconnectAttachmentsResponse) bool { return v.SiteToSiteDataTransfer }).(pulumi.BoolOutput)
}

// The URIs of linked interconnect attachment resources
func (o LinkedInterconnectAttachmentsResponseOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LinkedInterconnectAttachmentsResponse) []string { return v.Uris }).(pulumi.StringArrayOutput)
}

// The VPC network where these VLAN attachments are located.
func (o LinkedInterconnectAttachmentsResponseOutput) VpcNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedInterconnectAttachmentsResponse) string { return v.VpcNetwork }).(pulumi.StringOutput)
}

// A collection of router appliance instances. If you configure multiple router appliance instances to receive data from the same set of sites outside of Google Cloud, we recommend that you associate those instances with the same spoke.
type LinkedRouterApplianceInstances struct {
	// The list of router appliance instances.
	Instances []RouterApplianceInstance `pulumi:"instances"`
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer *bool `pulumi:"siteToSiteDataTransfer"`
}

// LinkedRouterApplianceInstancesInput is an input type that accepts LinkedRouterApplianceInstancesArgs and LinkedRouterApplianceInstancesOutput values.
// You can construct a concrete instance of `LinkedRouterApplianceInstancesInput` via:
//
//	LinkedRouterApplianceInstancesArgs{...}
type LinkedRouterApplianceInstancesInput interface {
	pulumi.Input

	ToLinkedRouterApplianceInstancesOutput() LinkedRouterApplianceInstancesOutput
	ToLinkedRouterApplianceInstancesOutputWithContext(context.Context) LinkedRouterApplianceInstancesOutput
}

// A collection of router appliance instances. If you configure multiple router appliance instances to receive data from the same set of sites outside of Google Cloud, we recommend that you associate those instances with the same spoke.
type LinkedRouterApplianceInstancesArgs struct {
	// The list of router appliance instances.
	Instances RouterApplianceInstanceArrayInput `pulumi:"instances"`
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer pulumi.BoolPtrInput `pulumi:"siteToSiteDataTransfer"`
}

func (LinkedRouterApplianceInstancesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedRouterApplianceInstances)(nil)).Elem()
}

func (i LinkedRouterApplianceInstancesArgs) ToLinkedRouterApplianceInstancesOutput() LinkedRouterApplianceInstancesOutput {
	return i.ToLinkedRouterApplianceInstancesOutputWithContext(context.Background())
}

func (i LinkedRouterApplianceInstancesArgs) ToLinkedRouterApplianceInstancesOutputWithContext(ctx context.Context) LinkedRouterApplianceInstancesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedRouterApplianceInstancesOutput)
}

func (i LinkedRouterApplianceInstancesArgs) ToLinkedRouterApplianceInstancesPtrOutput() LinkedRouterApplianceInstancesPtrOutput {
	return i.ToLinkedRouterApplianceInstancesPtrOutputWithContext(context.Background())
}

func (i LinkedRouterApplianceInstancesArgs) ToLinkedRouterApplianceInstancesPtrOutputWithContext(ctx context.Context) LinkedRouterApplianceInstancesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedRouterApplianceInstancesOutput).ToLinkedRouterApplianceInstancesPtrOutputWithContext(ctx)
}

// LinkedRouterApplianceInstancesPtrInput is an input type that accepts LinkedRouterApplianceInstancesArgs, LinkedRouterApplianceInstancesPtr and LinkedRouterApplianceInstancesPtrOutput values.
// You can construct a concrete instance of `LinkedRouterApplianceInstancesPtrInput` via:
//
//	        LinkedRouterApplianceInstancesArgs{...}
//
//	or:
//
//	        nil
type LinkedRouterApplianceInstancesPtrInput interface {
	pulumi.Input

	ToLinkedRouterApplianceInstancesPtrOutput() LinkedRouterApplianceInstancesPtrOutput
	ToLinkedRouterApplianceInstancesPtrOutputWithContext(context.Context) LinkedRouterApplianceInstancesPtrOutput
}

type linkedRouterApplianceInstancesPtrType LinkedRouterApplianceInstancesArgs

func LinkedRouterApplianceInstancesPtr(v *LinkedRouterApplianceInstancesArgs) LinkedRouterApplianceInstancesPtrInput {
	return (*linkedRouterApplianceInstancesPtrType)(v)
}

func (*linkedRouterApplianceInstancesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedRouterApplianceInstances)(nil)).Elem()
}

func (i *linkedRouterApplianceInstancesPtrType) ToLinkedRouterApplianceInstancesPtrOutput() LinkedRouterApplianceInstancesPtrOutput {
	return i.ToLinkedRouterApplianceInstancesPtrOutputWithContext(context.Background())
}

func (i *linkedRouterApplianceInstancesPtrType) ToLinkedRouterApplianceInstancesPtrOutputWithContext(ctx context.Context) LinkedRouterApplianceInstancesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedRouterApplianceInstancesPtrOutput)
}

// A collection of router appliance instances. If you configure multiple router appliance instances to receive data from the same set of sites outside of Google Cloud, we recommend that you associate those instances with the same spoke.
type LinkedRouterApplianceInstancesOutput struct{ *pulumi.OutputState }

func (LinkedRouterApplianceInstancesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedRouterApplianceInstances)(nil)).Elem()
}

func (o LinkedRouterApplianceInstancesOutput) ToLinkedRouterApplianceInstancesOutput() LinkedRouterApplianceInstancesOutput {
	return o
}

func (o LinkedRouterApplianceInstancesOutput) ToLinkedRouterApplianceInstancesOutputWithContext(ctx context.Context) LinkedRouterApplianceInstancesOutput {
	return o
}

func (o LinkedRouterApplianceInstancesOutput) ToLinkedRouterApplianceInstancesPtrOutput() LinkedRouterApplianceInstancesPtrOutput {
	return o.ToLinkedRouterApplianceInstancesPtrOutputWithContext(context.Background())
}

func (o LinkedRouterApplianceInstancesOutput) ToLinkedRouterApplianceInstancesPtrOutputWithContext(ctx context.Context) LinkedRouterApplianceInstancesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkedRouterApplianceInstances) *LinkedRouterApplianceInstances {
		return &v
	}).(LinkedRouterApplianceInstancesPtrOutput)
}

// The list of router appliance instances.
func (o LinkedRouterApplianceInstancesOutput) Instances() RouterApplianceInstanceArrayOutput {
	return o.ApplyT(func(v LinkedRouterApplianceInstances) []RouterApplianceInstance { return v.Instances }).(RouterApplianceInstanceArrayOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedRouterApplianceInstancesOutput) SiteToSiteDataTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinkedRouterApplianceInstances) *bool { return v.SiteToSiteDataTransfer }).(pulumi.BoolPtrOutput)
}

type LinkedRouterApplianceInstancesPtrOutput struct{ *pulumi.OutputState }

func (LinkedRouterApplianceInstancesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedRouterApplianceInstances)(nil)).Elem()
}

func (o LinkedRouterApplianceInstancesPtrOutput) ToLinkedRouterApplianceInstancesPtrOutput() LinkedRouterApplianceInstancesPtrOutput {
	return o
}

func (o LinkedRouterApplianceInstancesPtrOutput) ToLinkedRouterApplianceInstancesPtrOutputWithContext(ctx context.Context) LinkedRouterApplianceInstancesPtrOutput {
	return o
}

func (o LinkedRouterApplianceInstancesPtrOutput) Elem() LinkedRouterApplianceInstancesOutput {
	return o.ApplyT(func(v *LinkedRouterApplianceInstances) LinkedRouterApplianceInstances {
		if v != nil {
			return *v
		}
		var ret LinkedRouterApplianceInstances
		return ret
	}).(LinkedRouterApplianceInstancesOutput)
}

// The list of router appliance instances.
func (o LinkedRouterApplianceInstancesPtrOutput) Instances() RouterApplianceInstanceArrayOutput {
	return o.ApplyT(func(v *LinkedRouterApplianceInstances) []RouterApplianceInstance {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(RouterApplianceInstanceArrayOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedRouterApplianceInstancesPtrOutput) SiteToSiteDataTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinkedRouterApplianceInstances) *bool {
		if v == nil {
			return nil
		}
		return v.SiteToSiteDataTransfer
	}).(pulumi.BoolPtrOutput)
}

// A collection of router appliance instances. If you configure multiple router appliance instances to receive data from the same set of sites outside of Google Cloud, we recommend that you associate those instances with the same spoke.
type LinkedRouterApplianceInstancesResponse struct {
	// The list of router appliance instances.
	Instances []RouterApplianceInstanceResponse `pulumi:"instances"`
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer bool `pulumi:"siteToSiteDataTransfer"`
	// The VPC network where these router appliance instances are located.
	VpcNetwork string `pulumi:"vpcNetwork"`
}

// A collection of router appliance instances. If you configure multiple router appliance instances to receive data from the same set of sites outside of Google Cloud, we recommend that you associate those instances with the same spoke.
type LinkedRouterApplianceInstancesResponseOutput struct{ *pulumi.OutputState }

func (LinkedRouterApplianceInstancesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedRouterApplianceInstancesResponse)(nil)).Elem()
}

func (o LinkedRouterApplianceInstancesResponseOutput) ToLinkedRouterApplianceInstancesResponseOutput() LinkedRouterApplianceInstancesResponseOutput {
	return o
}

func (o LinkedRouterApplianceInstancesResponseOutput) ToLinkedRouterApplianceInstancesResponseOutputWithContext(ctx context.Context) LinkedRouterApplianceInstancesResponseOutput {
	return o
}

// The list of router appliance instances.
func (o LinkedRouterApplianceInstancesResponseOutput) Instances() RouterApplianceInstanceResponseArrayOutput {
	return o.ApplyT(func(v LinkedRouterApplianceInstancesResponse) []RouterApplianceInstanceResponse { return v.Instances }).(RouterApplianceInstanceResponseArrayOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedRouterApplianceInstancesResponseOutput) SiteToSiteDataTransfer() pulumi.BoolOutput {
	return o.ApplyT(func(v LinkedRouterApplianceInstancesResponse) bool { return v.SiteToSiteDataTransfer }).(pulumi.BoolOutput)
}

// The VPC network where these router appliance instances are located.
func (o LinkedRouterApplianceInstancesResponseOutput) VpcNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedRouterApplianceInstancesResponse) string { return v.VpcNetwork }).(pulumi.StringOutput)
}

// An existing VPC network.
type LinkedVpcNetwork struct {
	// Optional. IP ranges encompassing the subnets to be excluded from peering.
	ExcludeExportRanges []string `pulumi:"excludeExportRanges"`
	// The URI of the VPC network resource.
	Uri string `pulumi:"uri"`
}

// LinkedVpcNetworkInput is an input type that accepts LinkedVpcNetworkArgs and LinkedVpcNetworkOutput values.
// You can construct a concrete instance of `LinkedVpcNetworkInput` via:
//
//	LinkedVpcNetworkArgs{...}
type LinkedVpcNetworkInput interface {
	pulumi.Input

	ToLinkedVpcNetworkOutput() LinkedVpcNetworkOutput
	ToLinkedVpcNetworkOutputWithContext(context.Context) LinkedVpcNetworkOutput
}

// An existing VPC network.
type LinkedVpcNetworkArgs struct {
	// Optional. IP ranges encompassing the subnets to be excluded from peering.
	ExcludeExportRanges pulumi.StringArrayInput `pulumi:"excludeExportRanges"`
	// The URI of the VPC network resource.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (LinkedVpcNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedVpcNetwork)(nil)).Elem()
}

func (i LinkedVpcNetworkArgs) ToLinkedVpcNetworkOutput() LinkedVpcNetworkOutput {
	return i.ToLinkedVpcNetworkOutputWithContext(context.Background())
}

func (i LinkedVpcNetworkArgs) ToLinkedVpcNetworkOutputWithContext(ctx context.Context) LinkedVpcNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedVpcNetworkOutput)
}

func (i LinkedVpcNetworkArgs) ToLinkedVpcNetworkPtrOutput() LinkedVpcNetworkPtrOutput {
	return i.ToLinkedVpcNetworkPtrOutputWithContext(context.Background())
}

func (i LinkedVpcNetworkArgs) ToLinkedVpcNetworkPtrOutputWithContext(ctx context.Context) LinkedVpcNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedVpcNetworkOutput).ToLinkedVpcNetworkPtrOutputWithContext(ctx)
}

// LinkedVpcNetworkPtrInput is an input type that accepts LinkedVpcNetworkArgs, LinkedVpcNetworkPtr and LinkedVpcNetworkPtrOutput values.
// You can construct a concrete instance of `LinkedVpcNetworkPtrInput` via:
//
//	        LinkedVpcNetworkArgs{...}
//
//	or:
//
//	        nil
type LinkedVpcNetworkPtrInput interface {
	pulumi.Input

	ToLinkedVpcNetworkPtrOutput() LinkedVpcNetworkPtrOutput
	ToLinkedVpcNetworkPtrOutputWithContext(context.Context) LinkedVpcNetworkPtrOutput
}

type linkedVpcNetworkPtrType LinkedVpcNetworkArgs

func LinkedVpcNetworkPtr(v *LinkedVpcNetworkArgs) LinkedVpcNetworkPtrInput {
	return (*linkedVpcNetworkPtrType)(v)
}

func (*linkedVpcNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedVpcNetwork)(nil)).Elem()
}

func (i *linkedVpcNetworkPtrType) ToLinkedVpcNetworkPtrOutput() LinkedVpcNetworkPtrOutput {
	return i.ToLinkedVpcNetworkPtrOutputWithContext(context.Background())
}

func (i *linkedVpcNetworkPtrType) ToLinkedVpcNetworkPtrOutputWithContext(ctx context.Context) LinkedVpcNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedVpcNetworkPtrOutput)
}

// An existing VPC network.
type LinkedVpcNetworkOutput struct{ *pulumi.OutputState }

func (LinkedVpcNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedVpcNetwork)(nil)).Elem()
}

func (o LinkedVpcNetworkOutput) ToLinkedVpcNetworkOutput() LinkedVpcNetworkOutput {
	return o
}

func (o LinkedVpcNetworkOutput) ToLinkedVpcNetworkOutputWithContext(ctx context.Context) LinkedVpcNetworkOutput {
	return o
}

func (o LinkedVpcNetworkOutput) ToLinkedVpcNetworkPtrOutput() LinkedVpcNetworkPtrOutput {
	return o.ToLinkedVpcNetworkPtrOutputWithContext(context.Background())
}

func (o LinkedVpcNetworkOutput) ToLinkedVpcNetworkPtrOutputWithContext(ctx context.Context) LinkedVpcNetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkedVpcNetwork) *LinkedVpcNetwork {
		return &v
	}).(LinkedVpcNetworkPtrOutput)
}

// Optional. IP ranges encompassing the subnets to be excluded from peering.
func (o LinkedVpcNetworkOutput) ExcludeExportRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LinkedVpcNetwork) []string { return v.ExcludeExportRanges }).(pulumi.StringArrayOutput)
}

// The URI of the VPC network resource.
func (o LinkedVpcNetworkOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedVpcNetwork) string { return v.Uri }).(pulumi.StringOutput)
}

type LinkedVpcNetworkPtrOutput struct{ *pulumi.OutputState }

func (LinkedVpcNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedVpcNetwork)(nil)).Elem()
}

func (o LinkedVpcNetworkPtrOutput) ToLinkedVpcNetworkPtrOutput() LinkedVpcNetworkPtrOutput {
	return o
}

func (o LinkedVpcNetworkPtrOutput) ToLinkedVpcNetworkPtrOutputWithContext(ctx context.Context) LinkedVpcNetworkPtrOutput {
	return o
}

func (o LinkedVpcNetworkPtrOutput) Elem() LinkedVpcNetworkOutput {
	return o.ApplyT(func(v *LinkedVpcNetwork) LinkedVpcNetwork {
		if v != nil {
			return *v
		}
		var ret LinkedVpcNetwork
		return ret
	}).(LinkedVpcNetworkOutput)
}

// Optional. IP ranges encompassing the subnets to be excluded from peering.
func (o LinkedVpcNetworkPtrOutput) ExcludeExportRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinkedVpcNetwork) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeExportRanges
	}).(pulumi.StringArrayOutput)
}

// The URI of the VPC network resource.
func (o LinkedVpcNetworkPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedVpcNetwork) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// An existing VPC network.
type LinkedVpcNetworkResponse struct {
	// Optional. IP ranges encompassing the subnets to be excluded from peering.
	ExcludeExportRanges []string `pulumi:"excludeExportRanges"`
	// The URI of the VPC network resource.
	Uri string `pulumi:"uri"`
}

// An existing VPC network.
type LinkedVpcNetworkResponseOutput struct{ *pulumi.OutputState }

func (LinkedVpcNetworkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedVpcNetworkResponse)(nil)).Elem()
}

func (o LinkedVpcNetworkResponseOutput) ToLinkedVpcNetworkResponseOutput() LinkedVpcNetworkResponseOutput {
	return o
}

func (o LinkedVpcNetworkResponseOutput) ToLinkedVpcNetworkResponseOutputWithContext(ctx context.Context) LinkedVpcNetworkResponseOutput {
	return o
}

// Optional. IP ranges encompassing the subnets to be excluded from peering.
func (o LinkedVpcNetworkResponseOutput) ExcludeExportRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LinkedVpcNetworkResponse) []string { return v.ExcludeExportRanges }).(pulumi.StringArrayOutput)
}

// The URI of the VPC network resource.
func (o LinkedVpcNetworkResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedVpcNetworkResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// A collection of Cloud VPN tunnel resources. These resources should be redundant HA VPN tunnels that all advertise the same prefixes to Google Cloud. Alternatively, in a passive/active configuration, all tunnels should be capable of advertising the same prefixes.
type LinkedVpnTunnels struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer *bool `pulumi:"siteToSiteDataTransfer"`
	// The URIs of linked VPN tunnel resources.
	Uris []string `pulumi:"uris"`
}

// LinkedVpnTunnelsInput is an input type that accepts LinkedVpnTunnelsArgs and LinkedVpnTunnelsOutput values.
// You can construct a concrete instance of `LinkedVpnTunnelsInput` via:
//
//	LinkedVpnTunnelsArgs{...}
type LinkedVpnTunnelsInput interface {
	pulumi.Input

	ToLinkedVpnTunnelsOutput() LinkedVpnTunnelsOutput
	ToLinkedVpnTunnelsOutputWithContext(context.Context) LinkedVpnTunnelsOutput
}

// A collection of Cloud VPN tunnel resources. These resources should be redundant HA VPN tunnels that all advertise the same prefixes to Google Cloud. Alternatively, in a passive/active configuration, all tunnels should be capable of advertising the same prefixes.
type LinkedVpnTunnelsArgs struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer pulumi.BoolPtrInput `pulumi:"siteToSiteDataTransfer"`
	// The URIs of linked VPN tunnel resources.
	Uris pulumi.StringArrayInput `pulumi:"uris"`
}

func (LinkedVpnTunnelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedVpnTunnels)(nil)).Elem()
}

func (i LinkedVpnTunnelsArgs) ToLinkedVpnTunnelsOutput() LinkedVpnTunnelsOutput {
	return i.ToLinkedVpnTunnelsOutputWithContext(context.Background())
}

func (i LinkedVpnTunnelsArgs) ToLinkedVpnTunnelsOutputWithContext(ctx context.Context) LinkedVpnTunnelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedVpnTunnelsOutput)
}

func (i LinkedVpnTunnelsArgs) ToLinkedVpnTunnelsPtrOutput() LinkedVpnTunnelsPtrOutput {
	return i.ToLinkedVpnTunnelsPtrOutputWithContext(context.Background())
}

func (i LinkedVpnTunnelsArgs) ToLinkedVpnTunnelsPtrOutputWithContext(ctx context.Context) LinkedVpnTunnelsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedVpnTunnelsOutput).ToLinkedVpnTunnelsPtrOutputWithContext(ctx)
}

// LinkedVpnTunnelsPtrInput is an input type that accepts LinkedVpnTunnelsArgs, LinkedVpnTunnelsPtr and LinkedVpnTunnelsPtrOutput values.
// You can construct a concrete instance of `LinkedVpnTunnelsPtrInput` via:
//
//	        LinkedVpnTunnelsArgs{...}
//
//	or:
//
//	        nil
type LinkedVpnTunnelsPtrInput interface {
	pulumi.Input

	ToLinkedVpnTunnelsPtrOutput() LinkedVpnTunnelsPtrOutput
	ToLinkedVpnTunnelsPtrOutputWithContext(context.Context) LinkedVpnTunnelsPtrOutput
}

type linkedVpnTunnelsPtrType LinkedVpnTunnelsArgs

func LinkedVpnTunnelsPtr(v *LinkedVpnTunnelsArgs) LinkedVpnTunnelsPtrInput {
	return (*linkedVpnTunnelsPtrType)(v)
}

func (*linkedVpnTunnelsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedVpnTunnels)(nil)).Elem()
}

func (i *linkedVpnTunnelsPtrType) ToLinkedVpnTunnelsPtrOutput() LinkedVpnTunnelsPtrOutput {
	return i.ToLinkedVpnTunnelsPtrOutputWithContext(context.Background())
}

func (i *linkedVpnTunnelsPtrType) ToLinkedVpnTunnelsPtrOutputWithContext(ctx context.Context) LinkedVpnTunnelsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedVpnTunnelsPtrOutput)
}

// A collection of Cloud VPN tunnel resources. These resources should be redundant HA VPN tunnels that all advertise the same prefixes to Google Cloud. Alternatively, in a passive/active configuration, all tunnels should be capable of advertising the same prefixes.
type LinkedVpnTunnelsOutput struct{ *pulumi.OutputState }

func (LinkedVpnTunnelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedVpnTunnels)(nil)).Elem()
}

func (o LinkedVpnTunnelsOutput) ToLinkedVpnTunnelsOutput() LinkedVpnTunnelsOutput {
	return o
}

func (o LinkedVpnTunnelsOutput) ToLinkedVpnTunnelsOutputWithContext(ctx context.Context) LinkedVpnTunnelsOutput {
	return o
}

func (o LinkedVpnTunnelsOutput) ToLinkedVpnTunnelsPtrOutput() LinkedVpnTunnelsPtrOutput {
	return o.ToLinkedVpnTunnelsPtrOutputWithContext(context.Background())
}

func (o LinkedVpnTunnelsOutput) ToLinkedVpnTunnelsPtrOutputWithContext(ctx context.Context) LinkedVpnTunnelsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkedVpnTunnels) *LinkedVpnTunnels {
		return &v
	}).(LinkedVpnTunnelsPtrOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedVpnTunnelsOutput) SiteToSiteDataTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinkedVpnTunnels) *bool { return v.SiteToSiteDataTransfer }).(pulumi.BoolPtrOutput)
}

// The URIs of linked VPN tunnel resources.
func (o LinkedVpnTunnelsOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LinkedVpnTunnels) []string { return v.Uris }).(pulumi.StringArrayOutput)
}

type LinkedVpnTunnelsPtrOutput struct{ *pulumi.OutputState }

func (LinkedVpnTunnelsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedVpnTunnels)(nil)).Elem()
}

func (o LinkedVpnTunnelsPtrOutput) ToLinkedVpnTunnelsPtrOutput() LinkedVpnTunnelsPtrOutput {
	return o
}

func (o LinkedVpnTunnelsPtrOutput) ToLinkedVpnTunnelsPtrOutputWithContext(ctx context.Context) LinkedVpnTunnelsPtrOutput {
	return o
}

func (o LinkedVpnTunnelsPtrOutput) Elem() LinkedVpnTunnelsOutput {
	return o.ApplyT(func(v *LinkedVpnTunnels) LinkedVpnTunnels {
		if v != nil {
			return *v
		}
		var ret LinkedVpnTunnels
		return ret
	}).(LinkedVpnTunnelsOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedVpnTunnelsPtrOutput) SiteToSiteDataTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinkedVpnTunnels) *bool {
		if v == nil {
			return nil
		}
		return v.SiteToSiteDataTransfer
	}).(pulumi.BoolPtrOutput)
}

// The URIs of linked VPN tunnel resources.
func (o LinkedVpnTunnelsPtrOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinkedVpnTunnels) []string {
		if v == nil {
			return nil
		}
		return v.Uris
	}).(pulumi.StringArrayOutput)
}

// A collection of Cloud VPN tunnel resources. These resources should be redundant HA VPN tunnels that all advertise the same prefixes to Google Cloud. Alternatively, in a passive/active configuration, all tunnels should be capable of advertising the same prefixes.
type LinkedVpnTunnelsResponse struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer bool `pulumi:"siteToSiteDataTransfer"`
	// The URIs of linked VPN tunnel resources.
	Uris []string `pulumi:"uris"`
	// The VPC network where these VPN tunnels are located.
	VpcNetwork string `pulumi:"vpcNetwork"`
}

// A collection of Cloud VPN tunnel resources. These resources should be redundant HA VPN tunnels that all advertise the same prefixes to Google Cloud. Alternatively, in a passive/active configuration, all tunnels should be capable of advertising the same prefixes.
type LinkedVpnTunnelsResponseOutput struct{ *pulumi.OutputState }

func (LinkedVpnTunnelsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedVpnTunnelsResponse)(nil)).Elem()
}

func (o LinkedVpnTunnelsResponseOutput) ToLinkedVpnTunnelsResponseOutput() LinkedVpnTunnelsResponseOutput {
	return o
}

func (o LinkedVpnTunnelsResponseOutput) ToLinkedVpnTunnelsResponseOutputWithContext(ctx context.Context) LinkedVpnTunnelsResponseOutput {
	return o
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedVpnTunnelsResponseOutput) SiteToSiteDataTransfer() pulumi.BoolOutput {
	return o.ApplyT(func(v LinkedVpnTunnelsResponse) bool { return v.SiteToSiteDataTransfer }).(pulumi.BoolOutput)
}

// The URIs of linked VPN tunnel resources.
func (o LinkedVpnTunnelsResponseOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LinkedVpnTunnelsResponse) []string { return v.Uris }).(pulumi.StringArrayOutput)
}

// The VPC network where these VPN tunnels are located.
func (o LinkedVpnTunnelsResponseOutput) VpcNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedVpnTunnelsResponse) string { return v.VpcNetwork }).(pulumi.StringOutput)
}

// The PSC configurations on producer side.
type ProducerPscConfig struct {
	// The resource path of a service attachment. Example: projects/{projectNumOrId}/regions/{region}/serviceAttachments/{resourceId}.
	ServiceAttachmentUri *string `pulumi:"serviceAttachmentUri"`
}

// ProducerPscConfigInput is an input type that accepts ProducerPscConfigArgs and ProducerPscConfigOutput values.
// You can construct a concrete instance of `ProducerPscConfigInput` via:
//
//	ProducerPscConfigArgs{...}
type ProducerPscConfigInput interface {
	pulumi.Input

	ToProducerPscConfigOutput() ProducerPscConfigOutput
	ToProducerPscConfigOutputWithContext(context.Context) ProducerPscConfigOutput
}

// The PSC configurations on producer side.
type ProducerPscConfigArgs struct {
	// The resource path of a service attachment. Example: projects/{projectNumOrId}/regions/{region}/serviceAttachments/{resourceId}.
	ServiceAttachmentUri pulumi.StringPtrInput `pulumi:"serviceAttachmentUri"`
}

func (ProducerPscConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProducerPscConfig)(nil)).Elem()
}

func (i ProducerPscConfigArgs) ToProducerPscConfigOutput() ProducerPscConfigOutput {
	return i.ToProducerPscConfigOutputWithContext(context.Background())
}

func (i ProducerPscConfigArgs) ToProducerPscConfigOutputWithContext(ctx context.Context) ProducerPscConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProducerPscConfigOutput)
}

// ProducerPscConfigArrayInput is an input type that accepts ProducerPscConfigArray and ProducerPscConfigArrayOutput values.
// You can construct a concrete instance of `ProducerPscConfigArrayInput` via:
//
//	ProducerPscConfigArray{ ProducerPscConfigArgs{...} }
type ProducerPscConfigArrayInput interface {
	pulumi.Input

	ToProducerPscConfigArrayOutput() ProducerPscConfigArrayOutput
	ToProducerPscConfigArrayOutputWithContext(context.Context) ProducerPscConfigArrayOutput
}

type ProducerPscConfigArray []ProducerPscConfigInput

func (ProducerPscConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProducerPscConfig)(nil)).Elem()
}

func (i ProducerPscConfigArray) ToProducerPscConfigArrayOutput() ProducerPscConfigArrayOutput {
	return i.ToProducerPscConfigArrayOutputWithContext(context.Background())
}

func (i ProducerPscConfigArray) ToProducerPscConfigArrayOutputWithContext(ctx context.Context) ProducerPscConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProducerPscConfigArrayOutput)
}

// The PSC configurations on producer side.
type ProducerPscConfigOutput struct{ *pulumi.OutputState }

func (ProducerPscConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProducerPscConfig)(nil)).Elem()
}

func (o ProducerPscConfigOutput) ToProducerPscConfigOutput() ProducerPscConfigOutput {
	return o
}

func (o ProducerPscConfigOutput) ToProducerPscConfigOutputWithContext(ctx context.Context) ProducerPscConfigOutput {
	return o
}

// The resource path of a service attachment. Example: projects/{projectNumOrId}/regions/{region}/serviceAttachments/{resourceId}.
func (o ProducerPscConfigOutput) ServiceAttachmentUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProducerPscConfig) *string { return v.ServiceAttachmentUri }).(pulumi.StringPtrOutput)
}

type ProducerPscConfigArrayOutput struct{ *pulumi.OutputState }

func (ProducerPscConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProducerPscConfig)(nil)).Elem()
}

func (o ProducerPscConfigArrayOutput) ToProducerPscConfigArrayOutput() ProducerPscConfigArrayOutput {
	return o
}

func (o ProducerPscConfigArrayOutput) ToProducerPscConfigArrayOutputWithContext(ctx context.Context) ProducerPscConfigArrayOutput {
	return o
}

func (o ProducerPscConfigArrayOutput) Index(i pulumi.IntInput) ProducerPscConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProducerPscConfig {
		return vs[0].([]ProducerPscConfig)[vs[1].(int)]
	}).(ProducerPscConfigOutput)
}

// The PSC configurations on producer side.
type ProducerPscConfigResponse struct {
	// The resource path of a service attachment. Example: projects/{projectNumOrId}/regions/{region}/serviceAttachments/{resourceId}.
	ServiceAttachmentUri string `pulumi:"serviceAttachmentUri"`
}

// The PSC configurations on producer side.
type ProducerPscConfigResponseOutput struct{ *pulumi.OutputState }

func (ProducerPscConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProducerPscConfigResponse)(nil)).Elem()
}

func (o ProducerPscConfigResponseOutput) ToProducerPscConfigResponseOutput() ProducerPscConfigResponseOutput {
	return o
}

func (o ProducerPscConfigResponseOutput) ToProducerPscConfigResponseOutputWithContext(ctx context.Context) ProducerPscConfigResponseOutput {
	return o
}

// The resource path of a service attachment. Example: projects/{projectNumOrId}/regions/{region}/serviceAttachments/{resourceId}.
func (o ProducerPscConfigResponseOutput) ServiceAttachmentUri() pulumi.StringOutput {
	return o.ApplyT(func(v ProducerPscConfigResponse) string { return v.ServiceAttachmentUri }).(pulumi.StringOutput)
}

type ProducerPscConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (ProducerPscConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProducerPscConfigResponse)(nil)).Elem()
}

func (o ProducerPscConfigResponseArrayOutput) ToProducerPscConfigResponseArrayOutput() ProducerPscConfigResponseArrayOutput {
	return o
}

func (o ProducerPscConfigResponseArrayOutput) ToProducerPscConfigResponseArrayOutputWithContext(ctx context.Context) ProducerPscConfigResponseArrayOutput {
	return o
}

func (o ProducerPscConfigResponseArrayOutput) Index(i pulumi.IntInput) ProducerPscConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProducerPscConfigResponse {
		return vs[0].([]ProducerPscConfigResponse)[vs[1].(int)]
	}).(ProducerPscConfigResponseOutput)
}

// Configuration used for Private Service Connect connections. Used when Infrastructure is PSC.
type PscConfig struct {
	// Optional. Max number of PSC connections for this policy.
	Limit *string `pulumi:"limit"`
	// The resource paths of subnetworks to use for IP address management. Example: projects/{projectNumOrId}/regions/{region}/subnetworks/{resourceId}.
	Subnetworks []string `pulumi:"subnetworks"`
}

// PscConfigInput is an input type that accepts PscConfigArgs and PscConfigOutput values.
// You can construct a concrete instance of `PscConfigInput` via:
//
//	PscConfigArgs{...}
type PscConfigInput interface {
	pulumi.Input

	ToPscConfigOutput() PscConfigOutput
	ToPscConfigOutputWithContext(context.Context) PscConfigOutput
}

// Configuration used for Private Service Connect connections. Used when Infrastructure is PSC.
type PscConfigArgs struct {
	// Optional. Max number of PSC connections for this policy.
	Limit pulumi.StringPtrInput `pulumi:"limit"`
	// The resource paths of subnetworks to use for IP address management. Example: projects/{projectNumOrId}/regions/{region}/subnetworks/{resourceId}.
	Subnetworks pulumi.StringArrayInput `pulumi:"subnetworks"`
}

func (PscConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PscConfig)(nil)).Elem()
}

func (i PscConfigArgs) ToPscConfigOutput() PscConfigOutput {
	return i.ToPscConfigOutputWithContext(context.Background())
}

func (i PscConfigArgs) ToPscConfigOutputWithContext(ctx context.Context) PscConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PscConfigOutput)
}

func (i PscConfigArgs) ToPscConfigPtrOutput() PscConfigPtrOutput {
	return i.ToPscConfigPtrOutputWithContext(context.Background())
}

func (i PscConfigArgs) ToPscConfigPtrOutputWithContext(ctx context.Context) PscConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PscConfigOutput).ToPscConfigPtrOutputWithContext(ctx)
}

// PscConfigPtrInput is an input type that accepts PscConfigArgs, PscConfigPtr and PscConfigPtrOutput values.
// You can construct a concrete instance of `PscConfigPtrInput` via:
//
//	        PscConfigArgs{...}
//
//	or:
//
//	        nil
type PscConfigPtrInput interface {
	pulumi.Input

	ToPscConfigPtrOutput() PscConfigPtrOutput
	ToPscConfigPtrOutputWithContext(context.Context) PscConfigPtrOutput
}

type pscConfigPtrType PscConfigArgs

func PscConfigPtr(v *PscConfigArgs) PscConfigPtrInput {
	return (*pscConfigPtrType)(v)
}

func (*pscConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PscConfig)(nil)).Elem()
}

func (i *pscConfigPtrType) ToPscConfigPtrOutput() PscConfigPtrOutput {
	return i.ToPscConfigPtrOutputWithContext(context.Background())
}

func (i *pscConfigPtrType) ToPscConfigPtrOutputWithContext(ctx context.Context) PscConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PscConfigPtrOutput)
}

// Configuration used for Private Service Connect connections. Used when Infrastructure is PSC.
type PscConfigOutput struct{ *pulumi.OutputState }

func (PscConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PscConfig)(nil)).Elem()
}

func (o PscConfigOutput) ToPscConfigOutput() PscConfigOutput {
	return o
}

func (o PscConfigOutput) ToPscConfigOutputWithContext(ctx context.Context) PscConfigOutput {
	return o
}

func (o PscConfigOutput) ToPscConfigPtrOutput() PscConfigPtrOutput {
	return o.ToPscConfigPtrOutputWithContext(context.Background())
}

func (o PscConfigOutput) ToPscConfigPtrOutputWithContext(ctx context.Context) PscConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PscConfig) *PscConfig {
		return &v
	}).(PscConfigPtrOutput)
}

// Optional. Max number of PSC connections for this policy.
func (o PscConfigOutput) Limit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PscConfig) *string { return v.Limit }).(pulumi.StringPtrOutput)
}

// The resource paths of subnetworks to use for IP address management. Example: projects/{projectNumOrId}/regions/{region}/subnetworks/{resourceId}.
func (o PscConfigOutput) Subnetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PscConfig) []string { return v.Subnetworks }).(pulumi.StringArrayOutput)
}

type PscConfigPtrOutput struct{ *pulumi.OutputState }

func (PscConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PscConfig)(nil)).Elem()
}

func (o PscConfigPtrOutput) ToPscConfigPtrOutput() PscConfigPtrOutput {
	return o
}

func (o PscConfigPtrOutput) ToPscConfigPtrOutputWithContext(ctx context.Context) PscConfigPtrOutput {
	return o
}

func (o PscConfigPtrOutput) Elem() PscConfigOutput {
	return o.ApplyT(func(v *PscConfig) PscConfig {
		if v != nil {
			return *v
		}
		var ret PscConfig
		return ret
	}).(PscConfigOutput)
}

// Optional. Max number of PSC connections for this policy.
func (o PscConfigPtrOutput) Limit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PscConfig) *string {
		if v == nil {
			return nil
		}
		return v.Limit
	}).(pulumi.StringPtrOutput)
}

// The resource paths of subnetworks to use for IP address management. Example: projects/{projectNumOrId}/regions/{region}/subnetworks/{resourceId}.
func (o PscConfigPtrOutput) Subnetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PscConfig) []string {
		if v == nil {
			return nil
		}
		return v.Subnetworks
	}).(pulumi.StringArrayOutput)
}

// Configuration used for Private Service Connect connections. Used when Infrastructure is PSC.
type PscConfigResponse struct {
	// Optional. Max number of PSC connections for this policy.
	Limit string `pulumi:"limit"`
	// The resource paths of subnetworks to use for IP address management. Example: projects/{projectNumOrId}/regions/{region}/subnetworks/{resourceId}.
	Subnetworks []string `pulumi:"subnetworks"`
}

// Configuration used for Private Service Connect connections. Used when Infrastructure is PSC.
type PscConfigResponseOutput struct{ *pulumi.OutputState }

func (PscConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PscConfigResponse)(nil)).Elem()
}

func (o PscConfigResponseOutput) ToPscConfigResponseOutput() PscConfigResponseOutput {
	return o
}

func (o PscConfigResponseOutput) ToPscConfigResponseOutputWithContext(ctx context.Context) PscConfigResponseOutput {
	return o
}

// Optional. Max number of PSC connections for this policy.
func (o PscConfigResponseOutput) Limit() pulumi.StringOutput {
	return o.ApplyT(func(v PscConfigResponse) string { return v.Limit }).(pulumi.StringOutput)
}

// The resource paths of subnetworks to use for IP address management. Example: projects/{projectNumOrId}/regions/{region}/subnetworks/{resourceId}.
func (o PscConfigResponseOutput) Subnetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PscConfigResponse) []string { return v.Subnetworks }).(pulumi.StringArrayOutput)
}

// Information about a specific Private Service Connect connection.
type PscConnectionResponse struct {
	// The resource reference of the consumer address.
	ConsumerAddress string `pulumi:"consumerAddress"`
	// The resource reference of the PSC Forwarding Rule within the consumer VPC.
	ConsumerForwardingRule string `pulumi:"consumerForwardingRule"`
	// The project where the PSC connection is created.
	ConsumerTargetProject string `pulumi:"consumerTargetProject"`
	// The most recent error during operating this connection.
	Error GoogleRpcStatusResponse `pulumi:"error"`
	// The error info for the latest error during operating this connection.
	ErrorInfo GoogleRpcErrorInfoResponse `pulumi:"errorInfo"`
	// The error type indicates whether the error is consumer facing, producer facing or system internal.
	ErrorType string `pulumi:"errorType"`
	// The last Compute Engine operation to setup PSC connection.
	GceOperation string `pulumi:"gceOperation"`
	// The PSC connection id of the PSC forwarding rule.
	PscConnectionId string `pulumi:"pscConnectionId"`
	// State of the PSC Connection
	State string `pulumi:"state"`
}

// Information about a specific Private Service Connect connection.
type PscConnectionResponseOutput struct{ *pulumi.OutputState }

func (PscConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PscConnectionResponse)(nil)).Elem()
}

func (o PscConnectionResponseOutput) ToPscConnectionResponseOutput() PscConnectionResponseOutput {
	return o
}

func (o PscConnectionResponseOutput) ToPscConnectionResponseOutputWithContext(ctx context.Context) PscConnectionResponseOutput {
	return o
}

// The resource reference of the consumer address.
func (o PscConnectionResponseOutput) ConsumerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v PscConnectionResponse) string { return v.ConsumerAddress }).(pulumi.StringOutput)
}

// The resource reference of the PSC Forwarding Rule within the consumer VPC.
func (o PscConnectionResponseOutput) ConsumerForwardingRule() pulumi.StringOutput {
	return o.ApplyT(func(v PscConnectionResponse) string { return v.ConsumerForwardingRule }).(pulumi.StringOutput)
}

// The project where the PSC connection is created.
func (o PscConnectionResponseOutput) ConsumerTargetProject() pulumi.StringOutput {
	return o.ApplyT(func(v PscConnectionResponse) string { return v.ConsumerTargetProject }).(pulumi.StringOutput)
}

// The most recent error during operating this connection.
func (o PscConnectionResponseOutput) Error() GoogleRpcStatusResponseOutput {
	return o.ApplyT(func(v PscConnectionResponse) GoogleRpcStatusResponse { return v.Error }).(GoogleRpcStatusResponseOutput)
}

// The error info for the latest error during operating this connection.
func (o PscConnectionResponseOutput) ErrorInfo() GoogleRpcErrorInfoResponseOutput {
	return o.ApplyT(func(v PscConnectionResponse) GoogleRpcErrorInfoResponse { return v.ErrorInfo }).(GoogleRpcErrorInfoResponseOutput)
}

// The error type indicates whether the error is consumer facing, producer facing or system internal.
func (o PscConnectionResponseOutput) ErrorType() pulumi.StringOutput {
	return o.ApplyT(func(v PscConnectionResponse) string { return v.ErrorType }).(pulumi.StringOutput)
}

// The last Compute Engine operation to setup PSC connection.
func (o PscConnectionResponseOutput) GceOperation() pulumi.StringOutput {
	return o.ApplyT(func(v PscConnectionResponse) string { return v.GceOperation }).(pulumi.StringOutput)
}

// The PSC connection id of the PSC forwarding rule.
func (o PscConnectionResponseOutput) PscConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v PscConnectionResponse) string { return v.PscConnectionId }).(pulumi.StringOutput)
}

// State of the PSC Connection
func (o PscConnectionResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v PscConnectionResponse) string { return v.State }).(pulumi.StringOutput)
}

type PscConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PscConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PscConnectionResponse)(nil)).Elem()
}

func (o PscConnectionResponseArrayOutput) ToPscConnectionResponseArrayOutput() PscConnectionResponseArrayOutput {
	return o
}

func (o PscConnectionResponseArrayOutput) ToPscConnectionResponseArrayOutputWithContext(ctx context.Context) PscConnectionResponseArrayOutput {
	return o
}

func (o PscConnectionResponseArrayOutput) Index(i pulumi.IntInput) PscConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PscConnectionResponse {
		return vs[0].([]PscConnectionResponse)[vs[1].(int)]
	}).(PscConnectionResponseOutput)
}

// A router appliance instance is a Compute Engine virtual machine (VM) instance that acts as a BGP speaker. A router appliance instance is specified by the URI of the VM and the internal IP address of one of the VM's network interfaces.
type RouterApplianceInstance struct {
	// The IP address on the VM to use for peering.
	IpAddress *string `pulumi:"ipAddress"`
	// The URI of the VM.
	VirtualMachine *string `pulumi:"virtualMachine"`
}

// RouterApplianceInstanceInput is an input type that accepts RouterApplianceInstanceArgs and RouterApplianceInstanceOutput values.
// You can construct a concrete instance of `RouterApplianceInstanceInput` via:
//
//	RouterApplianceInstanceArgs{...}
type RouterApplianceInstanceInput interface {
	pulumi.Input

	ToRouterApplianceInstanceOutput() RouterApplianceInstanceOutput
	ToRouterApplianceInstanceOutputWithContext(context.Context) RouterApplianceInstanceOutput
}

// A router appliance instance is a Compute Engine virtual machine (VM) instance that acts as a BGP speaker. A router appliance instance is specified by the URI of the VM and the internal IP address of one of the VM's network interfaces.
type RouterApplianceInstanceArgs struct {
	// The IP address on the VM to use for peering.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// The URI of the VM.
	VirtualMachine pulumi.StringPtrInput `pulumi:"virtualMachine"`
}

func (RouterApplianceInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterApplianceInstance)(nil)).Elem()
}

func (i RouterApplianceInstanceArgs) ToRouterApplianceInstanceOutput() RouterApplianceInstanceOutput {
	return i.ToRouterApplianceInstanceOutputWithContext(context.Background())
}

func (i RouterApplianceInstanceArgs) ToRouterApplianceInstanceOutputWithContext(ctx context.Context) RouterApplianceInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterApplianceInstanceOutput)
}

// RouterApplianceInstanceArrayInput is an input type that accepts RouterApplianceInstanceArray and RouterApplianceInstanceArrayOutput values.
// You can construct a concrete instance of `RouterApplianceInstanceArrayInput` via:
//
//	RouterApplianceInstanceArray{ RouterApplianceInstanceArgs{...} }
type RouterApplianceInstanceArrayInput interface {
	pulumi.Input

	ToRouterApplianceInstanceArrayOutput() RouterApplianceInstanceArrayOutput
	ToRouterApplianceInstanceArrayOutputWithContext(context.Context) RouterApplianceInstanceArrayOutput
}

type RouterApplianceInstanceArray []RouterApplianceInstanceInput

func (RouterApplianceInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterApplianceInstance)(nil)).Elem()
}

func (i RouterApplianceInstanceArray) ToRouterApplianceInstanceArrayOutput() RouterApplianceInstanceArrayOutput {
	return i.ToRouterApplianceInstanceArrayOutputWithContext(context.Background())
}

func (i RouterApplianceInstanceArray) ToRouterApplianceInstanceArrayOutputWithContext(ctx context.Context) RouterApplianceInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterApplianceInstanceArrayOutput)
}

// A router appliance instance is a Compute Engine virtual machine (VM) instance that acts as a BGP speaker. A router appliance instance is specified by the URI of the VM and the internal IP address of one of the VM's network interfaces.
type RouterApplianceInstanceOutput struct{ *pulumi.OutputState }

func (RouterApplianceInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterApplianceInstance)(nil)).Elem()
}

func (o RouterApplianceInstanceOutput) ToRouterApplianceInstanceOutput() RouterApplianceInstanceOutput {
	return o
}

func (o RouterApplianceInstanceOutput) ToRouterApplianceInstanceOutputWithContext(ctx context.Context) RouterApplianceInstanceOutput {
	return o
}

// The IP address on the VM to use for peering.
func (o RouterApplianceInstanceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterApplianceInstance) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// The URI of the VM.
func (o RouterApplianceInstanceOutput) VirtualMachine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterApplianceInstance) *string { return v.VirtualMachine }).(pulumi.StringPtrOutput)
}

type RouterApplianceInstanceArrayOutput struct{ *pulumi.OutputState }

func (RouterApplianceInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterApplianceInstance)(nil)).Elem()
}

func (o RouterApplianceInstanceArrayOutput) ToRouterApplianceInstanceArrayOutput() RouterApplianceInstanceArrayOutput {
	return o
}

func (o RouterApplianceInstanceArrayOutput) ToRouterApplianceInstanceArrayOutputWithContext(ctx context.Context) RouterApplianceInstanceArrayOutput {
	return o
}

func (o RouterApplianceInstanceArrayOutput) Index(i pulumi.IntInput) RouterApplianceInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterApplianceInstance {
		return vs[0].([]RouterApplianceInstance)[vs[1].(int)]
	}).(RouterApplianceInstanceOutput)
}

// A router appliance instance is a Compute Engine virtual machine (VM) instance that acts as a BGP speaker. A router appliance instance is specified by the URI of the VM and the internal IP address of one of the VM's network interfaces.
type RouterApplianceInstanceResponse struct {
	// The IP address on the VM to use for peering.
	IpAddress string `pulumi:"ipAddress"`
	// The URI of the VM.
	VirtualMachine string `pulumi:"virtualMachine"`
}

// A router appliance instance is a Compute Engine virtual machine (VM) instance that acts as a BGP speaker. A router appliance instance is specified by the URI of the VM and the internal IP address of one of the VM's network interfaces.
type RouterApplianceInstanceResponseOutput struct{ *pulumi.OutputState }

func (RouterApplianceInstanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterApplianceInstanceResponse)(nil)).Elem()
}

func (o RouterApplianceInstanceResponseOutput) ToRouterApplianceInstanceResponseOutput() RouterApplianceInstanceResponseOutput {
	return o
}

func (o RouterApplianceInstanceResponseOutput) ToRouterApplianceInstanceResponseOutputWithContext(ctx context.Context) RouterApplianceInstanceResponseOutput {
	return o
}

// The IP address on the VM to use for peering.
func (o RouterApplianceInstanceResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v RouterApplianceInstanceResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The URI of the VM.
func (o RouterApplianceInstanceResponseOutput) VirtualMachine() pulumi.StringOutput {
	return o.ApplyT(func(v RouterApplianceInstanceResponse) string { return v.VirtualMachine }).(pulumi.StringOutput)
}

type RouterApplianceInstanceResponseArrayOutput struct{ *pulumi.OutputState }

func (RouterApplianceInstanceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterApplianceInstanceResponse)(nil)).Elem()
}

func (o RouterApplianceInstanceResponseArrayOutput) ToRouterApplianceInstanceResponseArrayOutput() RouterApplianceInstanceResponseArrayOutput {
	return o
}

func (o RouterApplianceInstanceResponseArrayOutput) ToRouterApplianceInstanceResponseArrayOutputWithContext(ctx context.Context) RouterApplianceInstanceResponseArrayOutput {
	return o
}

func (o RouterApplianceInstanceResponseArrayOutput) Index(i pulumi.IntInput) RouterApplianceInstanceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterApplianceInstanceResponse {
		return vs[0].([]RouterApplianceInstanceResponse)[vs[1].(int)]
	}).(RouterApplianceInstanceResponseOutput)
}

// RoutingVPC contains information about the VPC networks associated with the spokes of a Network Connectivity Center hub.
type RoutingVPC struct {
	// The URI of the VPC network.
	Uri *string `pulumi:"uri"`
}

// RoutingVPCInput is an input type that accepts RoutingVPCArgs and RoutingVPCOutput values.
// You can construct a concrete instance of `RoutingVPCInput` via:
//
//	RoutingVPCArgs{...}
type RoutingVPCInput interface {
	pulumi.Input

	ToRoutingVPCOutput() RoutingVPCOutput
	ToRoutingVPCOutputWithContext(context.Context) RoutingVPCOutput
}

// RoutingVPC contains information about the VPC networks associated with the spokes of a Network Connectivity Center hub.
type RoutingVPCArgs struct {
	// The URI of the VPC network.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (RoutingVPCArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingVPC)(nil)).Elem()
}

func (i RoutingVPCArgs) ToRoutingVPCOutput() RoutingVPCOutput {
	return i.ToRoutingVPCOutputWithContext(context.Background())
}

func (i RoutingVPCArgs) ToRoutingVPCOutputWithContext(ctx context.Context) RoutingVPCOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingVPCOutput)
}

// RoutingVPCArrayInput is an input type that accepts RoutingVPCArray and RoutingVPCArrayOutput values.
// You can construct a concrete instance of `RoutingVPCArrayInput` via:
//
//	RoutingVPCArray{ RoutingVPCArgs{...} }
type RoutingVPCArrayInput interface {
	pulumi.Input

	ToRoutingVPCArrayOutput() RoutingVPCArrayOutput
	ToRoutingVPCArrayOutputWithContext(context.Context) RoutingVPCArrayOutput
}

type RoutingVPCArray []RoutingVPCInput

func (RoutingVPCArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingVPC)(nil)).Elem()
}

func (i RoutingVPCArray) ToRoutingVPCArrayOutput() RoutingVPCArrayOutput {
	return i.ToRoutingVPCArrayOutputWithContext(context.Background())
}

func (i RoutingVPCArray) ToRoutingVPCArrayOutputWithContext(ctx context.Context) RoutingVPCArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingVPCArrayOutput)
}

// RoutingVPC contains information about the VPC networks associated with the spokes of a Network Connectivity Center hub.
type RoutingVPCOutput struct{ *pulumi.OutputState }

func (RoutingVPCOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingVPC)(nil)).Elem()
}

func (o RoutingVPCOutput) ToRoutingVPCOutput() RoutingVPCOutput {
	return o
}

func (o RoutingVPCOutput) ToRoutingVPCOutputWithContext(ctx context.Context) RoutingVPCOutput {
	return o
}

// The URI of the VPC network.
func (o RoutingVPCOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingVPC) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type RoutingVPCArrayOutput struct{ *pulumi.OutputState }

func (RoutingVPCArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingVPC)(nil)).Elem()
}

func (o RoutingVPCArrayOutput) ToRoutingVPCArrayOutput() RoutingVPCArrayOutput {
	return o
}

func (o RoutingVPCArrayOutput) ToRoutingVPCArrayOutputWithContext(ctx context.Context) RoutingVPCArrayOutput {
	return o
}

func (o RoutingVPCArrayOutput) Index(i pulumi.IntInput) RoutingVPCOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoutingVPC {
		return vs[0].([]RoutingVPC)[vs[1].(int)]
	}).(RoutingVPCOutput)
}

// RoutingVPC contains information about the VPC networks associated with the spokes of a Network Connectivity Center hub.
type RoutingVPCResponse struct {
	// If true, indicates that this VPC network is currently associated with spokes that use the data transfer feature (spokes where the site_to_site_data_transfer field is set to true). If you create new spokes that use data transfer, they must be associated with this VPC network. At most, one VPC network will have this field set to true.
	RequiredForNewSiteToSiteDataTransferSpokes bool `pulumi:"requiredForNewSiteToSiteDataTransferSpokes"`
	// The URI of the VPC network.
	Uri string `pulumi:"uri"`
}

// RoutingVPC contains information about the VPC networks associated with the spokes of a Network Connectivity Center hub.
type RoutingVPCResponseOutput struct{ *pulumi.OutputState }

func (RoutingVPCResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingVPCResponse)(nil)).Elem()
}

func (o RoutingVPCResponseOutput) ToRoutingVPCResponseOutput() RoutingVPCResponseOutput {
	return o
}

func (o RoutingVPCResponseOutput) ToRoutingVPCResponseOutputWithContext(ctx context.Context) RoutingVPCResponseOutput {
	return o
}

// If true, indicates that this VPC network is currently associated with spokes that use the data transfer feature (spokes where the site_to_site_data_transfer field is set to true). If you create new spokes that use data transfer, they must be associated with this VPC network. At most, one VPC network will have this field set to true.
func (o RoutingVPCResponseOutput) RequiredForNewSiteToSiteDataTransferSpokes() pulumi.BoolOutput {
	return o.ApplyT(func(v RoutingVPCResponse) bool { return v.RequiredForNewSiteToSiteDataTransferSpokes }).(pulumi.BoolOutput)
}

// The URI of the VPC network.
func (o RoutingVPCResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v RoutingVPCResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type RoutingVPCResponseArrayOutput struct{ *pulumi.OutputState }

func (RoutingVPCResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingVPCResponse)(nil)).Elem()
}

func (o RoutingVPCResponseArrayOutput) ToRoutingVPCResponseArrayOutput() RoutingVPCResponseArrayOutput {
	return o
}

func (o RoutingVPCResponseArrayOutput) ToRoutingVPCResponseArrayOutputWithContext(ctx context.Context) RoutingVPCResponseArrayOutput {
	return o
}

func (o RoutingVPCResponseArrayOutput) Index(i pulumi.IntInput) RoutingVPCResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoutingVPCResponse {
		return vs[0].([]RoutingVPCResponse)[vs[1].(int)]
	}).(RoutingVPCResponseOutput)
}

// The number of spokes that are in a particular state and associated with a given hub.
type SpokeStateCountResponse struct {
	// The total number of spokes that are in this state and associated with a given hub.
	Count string `pulumi:"count"`
	// The state of the spokes.
	State string `pulumi:"state"`
}

// The number of spokes that are in a particular state and associated with a given hub.
type SpokeStateCountResponseOutput struct{ *pulumi.OutputState }

func (SpokeStateCountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpokeStateCountResponse)(nil)).Elem()
}

func (o SpokeStateCountResponseOutput) ToSpokeStateCountResponseOutput() SpokeStateCountResponseOutput {
	return o
}

func (o SpokeStateCountResponseOutput) ToSpokeStateCountResponseOutputWithContext(ctx context.Context) SpokeStateCountResponseOutput {
	return o
}

// The total number of spokes that are in this state and associated with a given hub.
func (o SpokeStateCountResponseOutput) Count() pulumi.StringOutput {
	return o.ApplyT(func(v SpokeStateCountResponse) string { return v.Count }).(pulumi.StringOutput)
}

// The state of the spokes.
func (o SpokeStateCountResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v SpokeStateCountResponse) string { return v.State }).(pulumi.StringOutput)
}

type SpokeStateCountResponseArrayOutput struct{ *pulumi.OutputState }

func (SpokeStateCountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpokeStateCountResponse)(nil)).Elem()
}

func (o SpokeStateCountResponseArrayOutput) ToSpokeStateCountResponseArrayOutput() SpokeStateCountResponseArrayOutput {
	return o
}

func (o SpokeStateCountResponseArrayOutput) ToSpokeStateCountResponseArrayOutputWithContext(ctx context.Context) SpokeStateCountResponseArrayOutput {
	return o
}

func (o SpokeStateCountResponseArrayOutput) Index(i pulumi.IntInput) SpokeStateCountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpokeStateCountResponse {
		return vs[0].([]SpokeStateCountResponse)[vs[1].(int)]
	}).(SpokeStateCountResponseOutput)
}

// The number of spokes in the hub that are inactive for this reason.
type SpokeStateReasonCountResponse struct {
	// The total number of spokes that are inactive for a particular reason and associated with a given hub.
	Count string `pulumi:"count"`
	// The reason that a spoke is inactive.
	StateReasonCode string `pulumi:"stateReasonCode"`
}

// The number of spokes in the hub that are inactive for this reason.
type SpokeStateReasonCountResponseOutput struct{ *pulumi.OutputState }

func (SpokeStateReasonCountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpokeStateReasonCountResponse)(nil)).Elem()
}

func (o SpokeStateReasonCountResponseOutput) ToSpokeStateReasonCountResponseOutput() SpokeStateReasonCountResponseOutput {
	return o
}

func (o SpokeStateReasonCountResponseOutput) ToSpokeStateReasonCountResponseOutputWithContext(ctx context.Context) SpokeStateReasonCountResponseOutput {
	return o
}

// The total number of spokes that are inactive for a particular reason and associated with a given hub.
func (o SpokeStateReasonCountResponseOutput) Count() pulumi.StringOutput {
	return o.ApplyT(func(v SpokeStateReasonCountResponse) string { return v.Count }).(pulumi.StringOutput)
}

// The reason that a spoke is inactive.
func (o SpokeStateReasonCountResponseOutput) StateReasonCode() pulumi.StringOutput {
	return o.ApplyT(func(v SpokeStateReasonCountResponse) string { return v.StateReasonCode }).(pulumi.StringOutput)
}

type SpokeStateReasonCountResponseArrayOutput struct{ *pulumi.OutputState }

func (SpokeStateReasonCountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpokeStateReasonCountResponse)(nil)).Elem()
}

func (o SpokeStateReasonCountResponseArrayOutput) ToSpokeStateReasonCountResponseArrayOutput() SpokeStateReasonCountResponseArrayOutput {
	return o
}

func (o SpokeStateReasonCountResponseArrayOutput) ToSpokeStateReasonCountResponseArrayOutputWithContext(ctx context.Context) SpokeStateReasonCountResponseArrayOutput {
	return o
}

func (o SpokeStateReasonCountResponseArrayOutput) Index(i pulumi.IntInput) SpokeStateReasonCountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpokeStateReasonCountResponse {
		return vs[0].([]SpokeStateReasonCountResponse)[vs[1].(int)]
	}).(SpokeStateReasonCountResponseOutput)
}

// Summarizes information about the spokes associated with a hub. The summary includes a count of spokes according to type and according to state. If any spokes are inactive, the summary also lists the reasons they are inactive, including a count for each reason.
type SpokeSummaryResponse struct {
	// Counts the number of spokes that are in each state and associated with a given hub.
	SpokeStateCounts []SpokeStateCountResponse `pulumi:"spokeStateCounts"`
	// Counts the number of spokes that are inactive for each possible reason and associated with a given hub.
	SpokeStateReasonCounts []SpokeStateReasonCountResponse `pulumi:"spokeStateReasonCounts"`
	// Counts the number of spokes of each type that are associated with a specific hub.
	SpokeTypeCounts []SpokeTypeCountResponse `pulumi:"spokeTypeCounts"`
}

// Summarizes information about the spokes associated with a hub. The summary includes a count of spokes according to type and according to state. If any spokes are inactive, the summary also lists the reasons they are inactive, including a count for each reason.
type SpokeSummaryResponseOutput struct{ *pulumi.OutputState }

func (SpokeSummaryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpokeSummaryResponse)(nil)).Elem()
}

func (o SpokeSummaryResponseOutput) ToSpokeSummaryResponseOutput() SpokeSummaryResponseOutput {
	return o
}

func (o SpokeSummaryResponseOutput) ToSpokeSummaryResponseOutputWithContext(ctx context.Context) SpokeSummaryResponseOutput {
	return o
}

// Counts the number of spokes that are in each state and associated with a given hub.
func (o SpokeSummaryResponseOutput) SpokeStateCounts() SpokeStateCountResponseArrayOutput {
	return o.ApplyT(func(v SpokeSummaryResponse) []SpokeStateCountResponse { return v.SpokeStateCounts }).(SpokeStateCountResponseArrayOutput)
}

// Counts the number of spokes that are inactive for each possible reason and associated with a given hub.
func (o SpokeSummaryResponseOutput) SpokeStateReasonCounts() SpokeStateReasonCountResponseArrayOutput {
	return o.ApplyT(func(v SpokeSummaryResponse) []SpokeStateReasonCountResponse { return v.SpokeStateReasonCounts }).(SpokeStateReasonCountResponseArrayOutput)
}

// Counts the number of spokes of each type that are associated with a specific hub.
func (o SpokeSummaryResponseOutput) SpokeTypeCounts() SpokeTypeCountResponseArrayOutput {
	return o.ApplyT(func(v SpokeSummaryResponse) []SpokeTypeCountResponse { return v.SpokeTypeCounts }).(SpokeTypeCountResponseArrayOutput)
}

// The number of spokes of a given type that are associated with a specific hub. The type indicates what kind of resource is associated with the spoke.
type SpokeTypeCountResponse struct {
	// The total number of spokes of this type that are associated with the hub.
	Count string `pulumi:"count"`
	// The type of the spokes.
	SpokeType string `pulumi:"spokeType"`
}

// The number of spokes of a given type that are associated with a specific hub. The type indicates what kind of resource is associated with the spoke.
type SpokeTypeCountResponseOutput struct{ *pulumi.OutputState }

func (SpokeTypeCountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpokeTypeCountResponse)(nil)).Elem()
}

func (o SpokeTypeCountResponseOutput) ToSpokeTypeCountResponseOutput() SpokeTypeCountResponseOutput {
	return o
}

func (o SpokeTypeCountResponseOutput) ToSpokeTypeCountResponseOutputWithContext(ctx context.Context) SpokeTypeCountResponseOutput {
	return o
}

// The total number of spokes of this type that are associated with the hub.
func (o SpokeTypeCountResponseOutput) Count() pulumi.StringOutput {
	return o.ApplyT(func(v SpokeTypeCountResponse) string { return v.Count }).(pulumi.StringOutput)
}

// The type of the spokes.
func (o SpokeTypeCountResponseOutput) SpokeType() pulumi.StringOutput {
	return o.ApplyT(func(v SpokeTypeCountResponse) string { return v.SpokeType }).(pulumi.StringOutput)
}

type SpokeTypeCountResponseArrayOutput struct{ *pulumi.OutputState }

func (SpokeTypeCountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpokeTypeCountResponse)(nil)).Elem()
}

func (o SpokeTypeCountResponseArrayOutput) ToSpokeTypeCountResponseArrayOutput() SpokeTypeCountResponseArrayOutput {
	return o
}

func (o SpokeTypeCountResponseArrayOutput) ToSpokeTypeCountResponseArrayOutputWithContext(ctx context.Context) SpokeTypeCountResponseArrayOutput {
	return o
}

func (o SpokeTypeCountResponseArrayOutput) Index(i pulumi.IntInput) SpokeTypeCountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpokeTypeCountResponse {
		return vs[0].([]SpokeTypeCountResponse)[vs[1].(int)]
	}).(SpokeTypeCountResponseOutput)
}

// The reason a spoke is inactive.
type StateReasonResponse struct {
	// The code associated with this reason.
	Code string `pulumi:"code"`
	// Human-readable details about this reason.
	Message string `pulumi:"message"`
	// Additional information provided by the user in the RejectSpoke call.
	UserDetails string `pulumi:"userDetails"`
}

// The reason a spoke is inactive.
type StateReasonResponseOutput struct{ *pulumi.OutputState }

func (StateReasonResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StateReasonResponse)(nil)).Elem()
}

func (o StateReasonResponseOutput) ToStateReasonResponseOutput() StateReasonResponseOutput {
	return o
}

func (o StateReasonResponseOutput) ToStateReasonResponseOutputWithContext(ctx context.Context) StateReasonResponseOutput {
	return o
}

// The code associated with this reason.
func (o StateReasonResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v StateReasonResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Human-readable details about this reason.
func (o StateReasonResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StateReasonResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Additional information provided by the user in the RejectSpoke call.
func (o StateReasonResponseOutput) UserDetails() pulumi.StringOutput {
	return o.ApplyT(func(v StateReasonResponse) string { return v.UserDetails }).(pulumi.StringOutput)
}

type StateReasonResponseArrayOutput struct{ *pulumi.OutputState }

func (StateReasonResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StateReasonResponse)(nil)).Elem()
}

func (o StateReasonResponseArrayOutput) ToStateReasonResponseArrayOutput() StateReasonResponseArrayOutput {
	return o
}

func (o StateReasonResponseArrayOutput) ToStateReasonResponseArrayOutputWithContext(ctx context.Context) StateReasonResponseArrayOutput {
	return o
}

func (o StateReasonResponseArrayOutput) Index(i pulumi.IntInput) StateReasonResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StateReasonResponse {
		return vs[0].([]StateReasonResponse)[vs[1].(int)]
	}).(StateReasonResponseOutput)
}

// VM instances to which this policy-based route applies to.
type VirtualMachine struct {
	// Optional. A list of VM instance tags the this policy-based route applies to. VM instances that have ANY of tags specified here will install this PBR.
	Tags []string `pulumi:"tags"`
}

// VirtualMachineInput is an input type that accepts VirtualMachineArgs and VirtualMachineOutput values.
// You can construct a concrete instance of `VirtualMachineInput` via:
//
//	VirtualMachineArgs{...}
type VirtualMachineInput interface {
	pulumi.Input

	ToVirtualMachineOutput() VirtualMachineOutput
	ToVirtualMachineOutputWithContext(context.Context) VirtualMachineOutput
}

// VM instances to which this policy-based route applies to.
type VirtualMachineArgs struct {
	// Optional. A list of VM instance tags the this policy-based route applies to. VM instances that have ANY of tags specified here will install this PBR.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (VirtualMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineArgs) ToVirtualMachineOutput() VirtualMachineOutput {
	return i.ToVirtualMachineOutputWithContext(context.Background())
}

func (i VirtualMachineArgs) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOutput)
}

func (i VirtualMachineArgs) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return i.ToVirtualMachinePtrOutputWithContext(context.Background())
}

func (i VirtualMachineArgs) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOutput).ToVirtualMachinePtrOutputWithContext(ctx)
}

// VirtualMachinePtrInput is an input type that accepts VirtualMachineArgs, VirtualMachinePtr and VirtualMachinePtrOutput values.
// You can construct a concrete instance of `VirtualMachinePtrInput` via:
//
//	        VirtualMachineArgs{...}
//
//	or:
//
//	        nil
type VirtualMachinePtrInput interface {
	pulumi.Input

	ToVirtualMachinePtrOutput() VirtualMachinePtrOutput
	ToVirtualMachinePtrOutputWithContext(context.Context) VirtualMachinePtrOutput
}

type virtualMachinePtrType VirtualMachineArgs

func VirtualMachinePtr(v *VirtualMachineArgs) VirtualMachinePtrInput {
	return (*virtualMachinePtrType)(v)
}

func (*virtualMachinePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (i *virtualMachinePtrType) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return i.ToVirtualMachinePtrOutputWithContext(context.Background())
}

func (i *virtualMachinePtrType) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePtrOutput)
}

// VM instances to which this policy-based route applies to.
type VirtualMachineOutput struct{ *pulumi.OutputState }

func (VirtualMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineOutput) ToVirtualMachineOutput() VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return o.ToVirtualMachinePtrOutputWithContext(context.Background())
}

func (o VirtualMachineOutput) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachine) *VirtualMachine {
		return &v
	}).(VirtualMachinePtrOutput)
}

// Optional. A list of VM instance tags the this policy-based route applies to. VM instances that have ANY of tags specified here will install this PBR.
func (o VirtualMachineOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachine) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type VirtualMachinePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachinePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (o VirtualMachinePtrOutput) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return o
}

func (o VirtualMachinePtrOutput) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return o
}

func (o VirtualMachinePtrOutput) Elem() VirtualMachineOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachine {
		if v != nil {
			return *v
		}
		var ret VirtualMachine
		return ret
	}).(VirtualMachineOutput)
}

// Optional. A list of VM instance tags the this policy-based route applies to. VM instances that have ANY of tags specified here will install this PBR.
func (o VirtualMachinePtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachine) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// VM instances to which this policy-based route applies to.
type VirtualMachineResponse struct {
	// Optional. A list of VM instance tags the this policy-based route applies to. VM instances that have ANY of tags specified here will install this PBR.
	Tags []string `pulumi:"tags"`
}

// VM instances to which this policy-based route applies to.
type VirtualMachineResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineResponse)(nil)).Elem()
}

func (o VirtualMachineResponseOutput) ToVirtualMachineResponseOutput() VirtualMachineResponseOutput {
	return o
}

func (o VirtualMachineResponseOutput) ToVirtualMachineResponseOutputWithContext(ctx context.Context) VirtualMachineResponseOutput {
	return o
}

// Optional. A list of VM instance tags the this policy-based route applies to. VM instances that have ANY of tags specified here will install this PBR.
func (o VirtualMachineResponseOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineResponse) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Informational warning message.
type WarningsResponse struct {
	// A warning code, if applicable.
	Code string `pulumi:"code"`
	// Metadata about this warning in key: value format. The key should provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement.
	Data map[string]string `pulumi:"data"`
	// A human-readable description of the warning code.
	WarningMessage string `pulumi:"warningMessage"`
}

// Informational warning message.
type WarningsResponseOutput struct{ *pulumi.OutputState }

func (WarningsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WarningsResponse)(nil)).Elem()
}

func (o WarningsResponseOutput) ToWarningsResponseOutput() WarningsResponseOutput {
	return o
}

func (o WarningsResponseOutput) ToWarningsResponseOutputWithContext(ctx context.Context) WarningsResponseOutput {
	return o
}

// A warning code, if applicable.
func (o WarningsResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v WarningsResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Metadata about this warning in key: value format. The key should provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement.
func (o WarningsResponseOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v WarningsResponse) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

// A human-readable description of the warning code.
func (o WarningsResponseOutput) WarningMessage() pulumi.StringOutput {
	return o.ApplyT(func(v WarningsResponse) string { return v.WarningMessage }).(pulumi.StringOutput)
}

type WarningsResponseArrayOutput struct{ *pulumi.OutputState }

func (WarningsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WarningsResponse)(nil)).Elem()
}

func (o WarningsResponseArrayOutput) ToWarningsResponseArrayOutput() WarningsResponseArrayOutput {
	return o
}

func (o WarningsResponseArrayOutput) ToWarningsResponseArrayOutputWithContext(ctx context.Context) WarningsResponseArrayOutput {
	return o
}

func (o WarningsResponseArrayOutput) Index(i pulumi.IntInput) WarningsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WarningsResponse {
		return vs[0].([]WarningsResponse)[vs[1].(int)]
	}).(WarningsResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerPscConfigInput)(nil)).Elem(), ConsumerPscConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerPscConfigArrayInput)(nil)).Elem(), ConsumerPscConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FilterInput)(nil)).Elem(), FilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterconnectAttachmentInput)(nil)).Elem(), InterconnectAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterconnectAttachmentPtrInput)(nil)).Elem(), InterconnectAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedInterconnectAttachmentsInput)(nil)).Elem(), LinkedInterconnectAttachmentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedInterconnectAttachmentsPtrInput)(nil)).Elem(), LinkedInterconnectAttachmentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedRouterApplianceInstancesInput)(nil)).Elem(), LinkedRouterApplianceInstancesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedRouterApplianceInstancesPtrInput)(nil)).Elem(), LinkedRouterApplianceInstancesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedVpcNetworkInput)(nil)).Elem(), LinkedVpcNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedVpcNetworkPtrInput)(nil)).Elem(), LinkedVpcNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedVpnTunnelsInput)(nil)).Elem(), LinkedVpnTunnelsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedVpnTunnelsPtrInput)(nil)).Elem(), LinkedVpnTunnelsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProducerPscConfigInput)(nil)).Elem(), ProducerPscConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProducerPscConfigArrayInput)(nil)).Elem(), ProducerPscConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PscConfigInput)(nil)).Elem(), PscConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PscConfigPtrInput)(nil)).Elem(), PscConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterApplianceInstanceInput)(nil)).Elem(), RouterApplianceInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterApplianceInstanceArrayInput)(nil)).Elem(), RouterApplianceInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingVPCInput)(nil)).Elem(), RoutingVPCArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingVPCArrayInput)(nil)).Elem(), RoutingVPCArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInput)(nil)).Elem(), VirtualMachineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachinePtrInput)(nil)).Elem(), VirtualMachineArgs{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ConsumerPscConfigOutput{})
	pulumi.RegisterOutputType(ConsumerPscConfigArrayOutput{})
	pulumi.RegisterOutputType(ConsumerPscConfigResponseOutput{})
	pulumi.RegisterOutputType(ConsumerPscConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(ConsumerPscConnectionResponseOutput{})
	pulumi.RegisterOutputType(ConsumerPscConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(FilterOutput{})
	pulumi.RegisterOutputType(FilterResponseOutput{})
	pulumi.RegisterOutputType(GoogleRpcErrorInfoResponseOutput{})
	pulumi.RegisterOutputType(GoogleRpcStatusResponseOutput{})
	pulumi.RegisterOutputType(InterconnectAttachmentOutput{})
	pulumi.RegisterOutputType(InterconnectAttachmentPtrOutput{})
	pulumi.RegisterOutputType(InterconnectAttachmentResponseOutput{})
	pulumi.RegisterOutputType(LinkedInterconnectAttachmentsOutput{})
	pulumi.RegisterOutputType(LinkedInterconnectAttachmentsPtrOutput{})
	pulumi.RegisterOutputType(LinkedInterconnectAttachmentsResponseOutput{})
	pulumi.RegisterOutputType(LinkedRouterApplianceInstancesOutput{})
	pulumi.RegisterOutputType(LinkedRouterApplianceInstancesPtrOutput{})
	pulumi.RegisterOutputType(LinkedRouterApplianceInstancesResponseOutput{})
	pulumi.RegisterOutputType(LinkedVpcNetworkOutput{})
	pulumi.RegisterOutputType(LinkedVpcNetworkPtrOutput{})
	pulumi.RegisterOutputType(LinkedVpcNetworkResponseOutput{})
	pulumi.RegisterOutputType(LinkedVpnTunnelsOutput{})
	pulumi.RegisterOutputType(LinkedVpnTunnelsPtrOutput{})
	pulumi.RegisterOutputType(LinkedVpnTunnelsResponseOutput{})
	pulumi.RegisterOutputType(ProducerPscConfigOutput{})
	pulumi.RegisterOutputType(ProducerPscConfigArrayOutput{})
	pulumi.RegisterOutputType(ProducerPscConfigResponseOutput{})
	pulumi.RegisterOutputType(ProducerPscConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(PscConfigOutput{})
	pulumi.RegisterOutputType(PscConfigPtrOutput{})
	pulumi.RegisterOutputType(PscConfigResponseOutput{})
	pulumi.RegisterOutputType(PscConnectionResponseOutput{})
	pulumi.RegisterOutputType(PscConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(RouterApplianceInstanceOutput{})
	pulumi.RegisterOutputType(RouterApplianceInstanceArrayOutput{})
	pulumi.RegisterOutputType(RouterApplianceInstanceResponseOutput{})
	pulumi.RegisterOutputType(RouterApplianceInstanceResponseArrayOutput{})
	pulumi.RegisterOutputType(RoutingVPCOutput{})
	pulumi.RegisterOutputType(RoutingVPCArrayOutput{})
	pulumi.RegisterOutputType(RoutingVPCResponseOutput{})
	pulumi.RegisterOutputType(RoutingVPCResponseArrayOutput{})
	pulumi.RegisterOutputType(SpokeStateCountResponseOutput{})
	pulumi.RegisterOutputType(SpokeStateCountResponseArrayOutput{})
	pulumi.RegisterOutputType(SpokeStateReasonCountResponseOutput{})
	pulumi.RegisterOutputType(SpokeStateReasonCountResponseArrayOutput{})
	pulumi.RegisterOutputType(SpokeSummaryResponseOutput{})
	pulumi.RegisterOutputType(SpokeTypeCountResponseOutput{})
	pulumi.RegisterOutputType(SpokeTypeCountResponseArrayOutput{})
	pulumi.RegisterOutputType(StateReasonResponseOutput{})
	pulumi.RegisterOutputType(StateReasonResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineOutput{})
	pulumi.RegisterOutputType(VirtualMachinePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineResponseOutput{})
	pulumi.RegisterOutputType(WarningsResponseOutput{})
	pulumi.RegisterOutputType(WarningsResponseArrayOutput{})
}
