// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
type LinkedInterconnectAttachments struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer *bool `pulumi:"siteToSiteDataTransfer"`
	// The URIs of linked interconnect attachment resources
	Uris []string `pulumi:"uris"`
}

// LinkedInterconnectAttachmentsInput is an input type that accepts LinkedInterconnectAttachmentsArgs and LinkedInterconnectAttachmentsOutput values.
// You can construct a concrete instance of `LinkedInterconnectAttachmentsInput` via:
//
//          LinkedInterconnectAttachmentsArgs{...}
type LinkedInterconnectAttachmentsInput interface {
	pulumi.Input

	ToLinkedInterconnectAttachmentsOutput() LinkedInterconnectAttachmentsOutput
	ToLinkedInterconnectAttachmentsOutputWithContext(context.Context) LinkedInterconnectAttachmentsOutput
}

// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
type LinkedInterconnectAttachmentsArgs struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer pulumi.BoolPtrInput `pulumi:"siteToSiteDataTransfer"`
	// The URIs of linked interconnect attachment resources
	Uris pulumi.StringArrayInput `pulumi:"uris"`
}

func (LinkedInterconnectAttachmentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedInterconnectAttachments)(nil)).Elem()
}

func (i LinkedInterconnectAttachmentsArgs) ToLinkedInterconnectAttachmentsOutput() LinkedInterconnectAttachmentsOutput {
	return i.ToLinkedInterconnectAttachmentsOutputWithContext(context.Background())
}

func (i LinkedInterconnectAttachmentsArgs) ToLinkedInterconnectAttachmentsOutputWithContext(ctx context.Context) LinkedInterconnectAttachmentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedInterconnectAttachmentsOutput)
}

func (i LinkedInterconnectAttachmentsArgs) ToLinkedInterconnectAttachmentsPtrOutput() LinkedInterconnectAttachmentsPtrOutput {
	return i.ToLinkedInterconnectAttachmentsPtrOutputWithContext(context.Background())
}

func (i LinkedInterconnectAttachmentsArgs) ToLinkedInterconnectAttachmentsPtrOutputWithContext(ctx context.Context) LinkedInterconnectAttachmentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedInterconnectAttachmentsOutput).ToLinkedInterconnectAttachmentsPtrOutputWithContext(ctx)
}

// LinkedInterconnectAttachmentsPtrInput is an input type that accepts LinkedInterconnectAttachmentsArgs, LinkedInterconnectAttachmentsPtr and LinkedInterconnectAttachmentsPtrOutput values.
// You can construct a concrete instance of `LinkedInterconnectAttachmentsPtrInput` via:
//
//          LinkedInterconnectAttachmentsArgs{...}
//
//  or:
//
//          nil
type LinkedInterconnectAttachmentsPtrInput interface {
	pulumi.Input

	ToLinkedInterconnectAttachmentsPtrOutput() LinkedInterconnectAttachmentsPtrOutput
	ToLinkedInterconnectAttachmentsPtrOutputWithContext(context.Context) LinkedInterconnectAttachmentsPtrOutput
}

type linkedInterconnectAttachmentsPtrType LinkedInterconnectAttachmentsArgs

func LinkedInterconnectAttachmentsPtr(v *LinkedInterconnectAttachmentsArgs) LinkedInterconnectAttachmentsPtrInput {
	return (*linkedInterconnectAttachmentsPtrType)(v)
}

func (*linkedInterconnectAttachmentsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedInterconnectAttachments)(nil)).Elem()
}

func (i *linkedInterconnectAttachmentsPtrType) ToLinkedInterconnectAttachmentsPtrOutput() LinkedInterconnectAttachmentsPtrOutput {
	return i.ToLinkedInterconnectAttachmentsPtrOutputWithContext(context.Background())
}

func (i *linkedInterconnectAttachmentsPtrType) ToLinkedInterconnectAttachmentsPtrOutputWithContext(ctx context.Context) LinkedInterconnectAttachmentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedInterconnectAttachmentsPtrOutput)
}

// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
type LinkedInterconnectAttachmentsOutput struct{ *pulumi.OutputState }

func (LinkedInterconnectAttachmentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedInterconnectAttachments)(nil)).Elem()
}

func (o LinkedInterconnectAttachmentsOutput) ToLinkedInterconnectAttachmentsOutput() LinkedInterconnectAttachmentsOutput {
	return o
}

func (o LinkedInterconnectAttachmentsOutput) ToLinkedInterconnectAttachmentsOutputWithContext(ctx context.Context) LinkedInterconnectAttachmentsOutput {
	return o
}

func (o LinkedInterconnectAttachmentsOutput) ToLinkedInterconnectAttachmentsPtrOutput() LinkedInterconnectAttachmentsPtrOutput {
	return o.ToLinkedInterconnectAttachmentsPtrOutputWithContext(context.Background())
}

func (o LinkedInterconnectAttachmentsOutput) ToLinkedInterconnectAttachmentsPtrOutputWithContext(ctx context.Context) LinkedInterconnectAttachmentsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkedInterconnectAttachments) *LinkedInterconnectAttachments {
		return &v
	}).(LinkedInterconnectAttachmentsPtrOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedInterconnectAttachmentsOutput) SiteToSiteDataTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinkedInterconnectAttachments) *bool { return v.SiteToSiteDataTransfer }).(pulumi.BoolPtrOutput)
}

// The URIs of linked interconnect attachment resources
func (o LinkedInterconnectAttachmentsOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LinkedInterconnectAttachments) []string { return v.Uris }).(pulumi.StringArrayOutput)
}

type LinkedInterconnectAttachmentsPtrOutput struct{ *pulumi.OutputState }

func (LinkedInterconnectAttachmentsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedInterconnectAttachments)(nil)).Elem()
}

func (o LinkedInterconnectAttachmentsPtrOutput) ToLinkedInterconnectAttachmentsPtrOutput() LinkedInterconnectAttachmentsPtrOutput {
	return o
}

func (o LinkedInterconnectAttachmentsPtrOutput) ToLinkedInterconnectAttachmentsPtrOutputWithContext(ctx context.Context) LinkedInterconnectAttachmentsPtrOutput {
	return o
}

func (o LinkedInterconnectAttachmentsPtrOutput) Elem() LinkedInterconnectAttachmentsOutput {
	return o.ApplyT(func(v *LinkedInterconnectAttachments) LinkedInterconnectAttachments {
		if v != nil {
			return *v
		}
		var ret LinkedInterconnectAttachments
		return ret
	}).(LinkedInterconnectAttachmentsOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedInterconnectAttachmentsPtrOutput) SiteToSiteDataTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinkedInterconnectAttachments) *bool {
		if v == nil {
			return nil
		}
		return v.SiteToSiteDataTransfer
	}).(pulumi.BoolPtrOutput)
}

// The URIs of linked interconnect attachment resources
func (o LinkedInterconnectAttachmentsPtrOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinkedInterconnectAttachments) []string {
		if v == nil {
			return nil
		}
		return v.Uris
	}).(pulumi.StringArrayOutput)
}

// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
type LinkedInterconnectAttachmentsResponse struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer bool `pulumi:"siteToSiteDataTransfer"`
	// The URIs of linked interconnect attachment resources
	Uris []string `pulumi:"uris"`
}

// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
type LinkedInterconnectAttachmentsResponseOutput struct{ *pulumi.OutputState }

func (LinkedInterconnectAttachmentsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedInterconnectAttachmentsResponse)(nil)).Elem()
}

func (o LinkedInterconnectAttachmentsResponseOutput) ToLinkedInterconnectAttachmentsResponseOutput() LinkedInterconnectAttachmentsResponseOutput {
	return o
}

func (o LinkedInterconnectAttachmentsResponseOutput) ToLinkedInterconnectAttachmentsResponseOutputWithContext(ctx context.Context) LinkedInterconnectAttachmentsResponseOutput {
	return o
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedInterconnectAttachmentsResponseOutput) SiteToSiteDataTransfer() pulumi.BoolOutput {
	return o.ApplyT(func(v LinkedInterconnectAttachmentsResponse) bool { return v.SiteToSiteDataTransfer }).(pulumi.BoolOutput)
}

// The URIs of linked interconnect attachment resources
func (o LinkedInterconnectAttachmentsResponseOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LinkedInterconnectAttachmentsResponse) []string { return v.Uris }).(pulumi.StringArrayOutput)
}

// A collection of router appliance instances. If you configure multiple router appliance instances to receive data from the same set of sites outside of Google Cloud, we recommend that you associate those instances with the same spoke.
type LinkedRouterApplianceInstances struct {
	// The list of router appliance instances.
	Instances []RouterApplianceInstance `pulumi:"instances"`
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer *bool `pulumi:"siteToSiteDataTransfer"`
}

// LinkedRouterApplianceInstancesInput is an input type that accepts LinkedRouterApplianceInstancesArgs and LinkedRouterApplianceInstancesOutput values.
// You can construct a concrete instance of `LinkedRouterApplianceInstancesInput` via:
//
//          LinkedRouterApplianceInstancesArgs{...}
type LinkedRouterApplianceInstancesInput interface {
	pulumi.Input

	ToLinkedRouterApplianceInstancesOutput() LinkedRouterApplianceInstancesOutput
	ToLinkedRouterApplianceInstancesOutputWithContext(context.Context) LinkedRouterApplianceInstancesOutput
}

// A collection of router appliance instances. If you configure multiple router appliance instances to receive data from the same set of sites outside of Google Cloud, we recommend that you associate those instances with the same spoke.
type LinkedRouterApplianceInstancesArgs struct {
	// The list of router appliance instances.
	Instances RouterApplianceInstanceArrayInput `pulumi:"instances"`
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer pulumi.BoolPtrInput `pulumi:"siteToSiteDataTransfer"`
}

func (LinkedRouterApplianceInstancesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedRouterApplianceInstances)(nil)).Elem()
}

func (i LinkedRouterApplianceInstancesArgs) ToLinkedRouterApplianceInstancesOutput() LinkedRouterApplianceInstancesOutput {
	return i.ToLinkedRouterApplianceInstancesOutputWithContext(context.Background())
}

func (i LinkedRouterApplianceInstancesArgs) ToLinkedRouterApplianceInstancesOutputWithContext(ctx context.Context) LinkedRouterApplianceInstancesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedRouterApplianceInstancesOutput)
}

func (i LinkedRouterApplianceInstancesArgs) ToLinkedRouterApplianceInstancesPtrOutput() LinkedRouterApplianceInstancesPtrOutput {
	return i.ToLinkedRouterApplianceInstancesPtrOutputWithContext(context.Background())
}

func (i LinkedRouterApplianceInstancesArgs) ToLinkedRouterApplianceInstancesPtrOutputWithContext(ctx context.Context) LinkedRouterApplianceInstancesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedRouterApplianceInstancesOutput).ToLinkedRouterApplianceInstancesPtrOutputWithContext(ctx)
}

// LinkedRouterApplianceInstancesPtrInput is an input type that accepts LinkedRouterApplianceInstancesArgs, LinkedRouterApplianceInstancesPtr and LinkedRouterApplianceInstancesPtrOutput values.
// You can construct a concrete instance of `LinkedRouterApplianceInstancesPtrInput` via:
//
//          LinkedRouterApplianceInstancesArgs{...}
//
//  or:
//
//          nil
type LinkedRouterApplianceInstancesPtrInput interface {
	pulumi.Input

	ToLinkedRouterApplianceInstancesPtrOutput() LinkedRouterApplianceInstancesPtrOutput
	ToLinkedRouterApplianceInstancesPtrOutputWithContext(context.Context) LinkedRouterApplianceInstancesPtrOutput
}

type linkedRouterApplianceInstancesPtrType LinkedRouterApplianceInstancesArgs

func LinkedRouterApplianceInstancesPtr(v *LinkedRouterApplianceInstancesArgs) LinkedRouterApplianceInstancesPtrInput {
	return (*linkedRouterApplianceInstancesPtrType)(v)
}

func (*linkedRouterApplianceInstancesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedRouterApplianceInstances)(nil)).Elem()
}

func (i *linkedRouterApplianceInstancesPtrType) ToLinkedRouterApplianceInstancesPtrOutput() LinkedRouterApplianceInstancesPtrOutput {
	return i.ToLinkedRouterApplianceInstancesPtrOutputWithContext(context.Background())
}

func (i *linkedRouterApplianceInstancesPtrType) ToLinkedRouterApplianceInstancesPtrOutputWithContext(ctx context.Context) LinkedRouterApplianceInstancesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedRouterApplianceInstancesPtrOutput)
}

// A collection of router appliance instances. If you configure multiple router appliance instances to receive data from the same set of sites outside of Google Cloud, we recommend that you associate those instances with the same spoke.
type LinkedRouterApplianceInstancesOutput struct{ *pulumi.OutputState }

func (LinkedRouterApplianceInstancesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedRouterApplianceInstances)(nil)).Elem()
}

func (o LinkedRouterApplianceInstancesOutput) ToLinkedRouterApplianceInstancesOutput() LinkedRouterApplianceInstancesOutput {
	return o
}

func (o LinkedRouterApplianceInstancesOutput) ToLinkedRouterApplianceInstancesOutputWithContext(ctx context.Context) LinkedRouterApplianceInstancesOutput {
	return o
}

func (o LinkedRouterApplianceInstancesOutput) ToLinkedRouterApplianceInstancesPtrOutput() LinkedRouterApplianceInstancesPtrOutput {
	return o.ToLinkedRouterApplianceInstancesPtrOutputWithContext(context.Background())
}

func (o LinkedRouterApplianceInstancesOutput) ToLinkedRouterApplianceInstancesPtrOutputWithContext(ctx context.Context) LinkedRouterApplianceInstancesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkedRouterApplianceInstances) *LinkedRouterApplianceInstances {
		return &v
	}).(LinkedRouterApplianceInstancesPtrOutput)
}

// The list of router appliance instances.
func (o LinkedRouterApplianceInstancesOutput) Instances() RouterApplianceInstanceArrayOutput {
	return o.ApplyT(func(v LinkedRouterApplianceInstances) []RouterApplianceInstance { return v.Instances }).(RouterApplianceInstanceArrayOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedRouterApplianceInstancesOutput) SiteToSiteDataTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinkedRouterApplianceInstances) *bool { return v.SiteToSiteDataTransfer }).(pulumi.BoolPtrOutput)
}

type LinkedRouterApplianceInstancesPtrOutput struct{ *pulumi.OutputState }

func (LinkedRouterApplianceInstancesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedRouterApplianceInstances)(nil)).Elem()
}

func (o LinkedRouterApplianceInstancesPtrOutput) ToLinkedRouterApplianceInstancesPtrOutput() LinkedRouterApplianceInstancesPtrOutput {
	return o
}

func (o LinkedRouterApplianceInstancesPtrOutput) ToLinkedRouterApplianceInstancesPtrOutputWithContext(ctx context.Context) LinkedRouterApplianceInstancesPtrOutput {
	return o
}

func (o LinkedRouterApplianceInstancesPtrOutput) Elem() LinkedRouterApplianceInstancesOutput {
	return o.ApplyT(func(v *LinkedRouterApplianceInstances) LinkedRouterApplianceInstances {
		if v != nil {
			return *v
		}
		var ret LinkedRouterApplianceInstances
		return ret
	}).(LinkedRouterApplianceInstancesOutput)
}

// The list of router appliance instances.
func (o LinkedRouterApplianceInstancesPtrOutput) Instances() RouterApplianceInstanceArrayOutput {
	return o.ApplyT(func(v *LinkedRouterApplianceInstances) []RouterApplianceInstance {
		if v == nil {
			return nil
		}
		return v.Instances
	}).(RouterApplianceInstanceArrayOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedRouterApplianceInstancesPtrOutput) SiteToSiteDataTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinkedRouterApplianceInstances) *bool {
		if v == nil {
			return nil
		}
		return v.SiteToSiteDataTransfer
	}).(pulumi.BoolPtrOutput)
}

// A collection of router appliance instances. If you configure multiple router appliance instances to receive data from the same set of sites outside of Google Cloud, we recommend that you associate those instances with the same spoke.
type LinkedRouterApplianceInstancesResponse struct {
	// The list of router appliance instances.
	Instances []RouterApplianceInstanceResponse `pulumi:"instances"`
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer bool `pulumi:"siteToSiteDataTransfer"`
}

// A collection of router appliance instances. If you configure multiple router appliance instances to receive data from the same set of sites outside of Google Cloud, we recommend that you associate those instances with the same spoke.
type LinkedRouterApplianceInstancesResponseOutput struct{ *pulumi.OutputState }

func (LinkedRouterApplianceInstancesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedRouterApplianceInstancesResponse)(nil)).Elem()
}

func (o LinkedRouterApplianceInstancesResponseOutput) ToLinkedRouterApplianceInstancesResponseOutput() LinkedRouterApplianceInstancesResponseOutput {
	return o
}

func (o LinkedRouterApplianceInstancesResponseOutput) ToLinkedRouterApplianceInstancesResponseOutputWithContext(ctx context.Context) LinkedRouterApplianceInstancesResponseOutput {
	return o
}

// The list of router appliance instances.
func (o LinkedRouterApplianceInstancesResponseOutput) Instances() RouterApplianceInstanceResponseArrayOutput {
	return o.ApplyT(func(v LinkedRouterApplianceInstancesResponse) []RouterApplianceInstanceResponse { return v.Instances }).(RouterApplianceInstanceResponseArrayOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedRouterApplianceInstancesResponseOutput) SiteToSiteDataTransfer() pulumi.BoolOutput {
	return o.ApplyT(func(v LinkedRouterApplianceInstancesResponse) bool { return v.SiteToSiteDataTransfer }).(pulumi.BoolOutput)
}

// A collection of Cloud VPN tunnel resources. These resources should be redundant HA VPN tunnels that all advertise the same prefixes to Google Cloud. Alternatively, in a passive/active configuration, all tunnels should be capable of advertising the same prefixes.
type LinkedVpnTunnels struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer *bool `pulumi:"siteToSiteDataTransfer"`
	// The URIs of linked VPN tunnel resources.
	Uris []string `pulumi:"uris"`
}

// LinkedVpnTunnelsInput is an input type that accepts LinkedVpnTunnelsArgs and LinkedVpnTunnelsOutput values.
// You can construct a concrete instance of `LinkedVpnTunnelsInput` via:
//
//          LinkedVpnTunnelsArgs{...}
type LinkedVpnTunnelsInput interface {
	pulumi.Input

	ToLinkedVpnTunnelsOutput() LinkedVpnTunnelsOutput
	ToLinkedVpnTunnelsOutputWithContext(context.Context) LinkedVpnTunnelsOutput
}

// A collection of Cloud VPN tunnel resources. These resources should be redundant HA VPN tunnels that all advertise the same prefixes to Google Cloud. Alternatively, in a passive/active configuration, all tunnels should be capable of advertising the same prefixes.
type LinkedVpnTunnelsArgs struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer pulumi.BoolPtrInput `pulumi:"siteToSiteDataTransfer"`
	// The URIs of linked VPN tunnel resources.
	Uris pulumi.StringArrayInput `pulumi:"uris"`
}

func (LinkedVpnTunnelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedVpnTunnels)(nil)).Elem()
}

func (i LinkedVpnTunnelsArgs) ToLinkedVpnTunnelsOutput() LinkedVpnTunnelsOutput {
	return i.ToLinkedVpnTunnelsOutputWithContext(context.Background())
}

func (i LinkedVpnTunnelsArgs) ToLinkedVpnTunnelsOutputWithContext(ctx context.Context) LinkedVpnTunnelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedVpnTunnelsOutput)
}

func (i LinkedVpnTunnelsArgs) ToLinkedVpnTunnelsPtrOutput() LinkedVpnTunnelsPtrOutput {
	return i.ToLinkedVpnTunnelsPtrOutputWithContext(context.Background())
}

func (i LinkedVpnTunnelsArgs) ToLinkedVpnTunnelsPtrOutputWithContext(ctx context.Context) LinkedVpnTunnelsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedVpnTunnelsOutput).ToLinkedVpnTunnelsPtrOutputWithContext(ctx)
}

// LinkedVpnTunnelsPtrInput is an input type that accepts LinkedVpnTunnelsArgs, LinkedVpnTunnelsPtr and LinkedVpnTunnelsPtrOutput values.
// You can construct a concrete instance of `LinkedVpnTunnelsPtrInput` via:
//
//          LinkedVpnTunnelsArgs{...}
//
//  or:
//
//          nil
type LinkedVpnTunnelsPtrInput interface {
	pulumi.Input

	ToLinkedVpnTunnelsPtrOutput() LinkedVpnTunnelsPtrOutput
	ToLinkedVpnTunnelsPtrOutputWithContext(context.Context) LinkedVpnTunnelsPtrOutput
}

type linkedVpnTunnelsPtrType LinkedVpnTunnelsArgs

func LinkedVpnTunnelsPtr(v *LinkedVpnTunnelsArgs) LinkedVpnTunnelsPtrInput {
	return (*linkedVpnTunnelsPtrType)(v)
}

func (*linkedVpnTunnelsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedVpnTunnels)(nil)).Elem()
}

func (i *linkedVpnTunnelsPtrType) ToLinkedVpnTunnelsPtrOutput() LinkedVpnTunnelsPtrOutput {
	return i.ToLinkedVpnTunnelsPtrOutputWithContext(context.Background())
}

func (i *linkedVpnTunnelsPtrType) ToLinkedVpnTunnelsPtrOutputWithContext(ctx context.Context) LinkedVpnTunnelsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedVpnTunnelsPtrOutput)
}

// A collection of Cloud VPN tunnel resources. These resources should be redundant HA VPN tunnels that all advertise the same prefixes to Google Cloud. Alternatively, in a passive/active configuration, all tunnels should be capable of advertising the same prefixes.
type LinkedVpnTunnelsOutput struct{ *pulumi.OutputState }

func (LinkedVpnTunnelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedVpnTunnels)(nil)).Elem()
}

func (o LinkedVpnTunnelsOutput) ToLinkedVpnTunnelsOutput() LinkedVpnTunnelsOutput {
	return o
}

func (o LinkedVpnTunnelsOutput) ToLinkedVpnTunnelsOutputWithContext(ctx context.Context) LinkedVpnTunnelsOutput {
	return o
}

func (o LinkedVpnTunnelsOutput) ToLinkedVpnTunnelsPtrOutput() LinkedVpnTunnelsPtrOutput {
	return o.ToLinkedVpnTunnelsPtrOutputWithContext(context.Background())
}

func (o LinkedVpnTunnelsOutput) ToLinkedVpnTunnelsPtrOutputWithContext(ctx context.Context) LinkedVpnTunnelsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkedVpnTunnels) *LinkedVpnTunnels {
		return &v
	}).(LinkedVpnTunnelsPtrOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedVpnTunnelsOutput) SiteToSiteDataTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinkedVpnTunnels) *bool { return v.SiteToSiteDataTransfer }).(pulumi.BoolPtrOutput)
}

// The URIs of linked VPN tunnel resources.
func (o LinkedVpnTunnelsOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LinkedVpnTunnels) []string { return v.Uris }).(pulumi.StringArrayOutput)
}

type LinkedVpnTunnelsPtrOutput struct{ *pulumi.OutputState }

func (LinkedVpnTunnelsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedVpnTunnels)(nil)).Elem()
}

func (o LinkedVpnTunnelsPtrOutput) ToLinkedVpnTunnelsPtrOutput() LinkedVpnTunnelsPtrOutput {
	return o
}

func (o LinkedVpnTunnelsPtrOutput) ToLinkedVpnTunnelsPtrOutputWithContext(ctx context.Context) LinkedVpnTunnelsPtrOutput {
	return o
}

func (o LinkedVpnTunnelsPtrOutput) Elem() LinkedVpnTunnelsOutput {
	return o.ApplyT(func(v *LinkedVpnTunnels) LinkedVpnTunnels {
		if v != nil {
			return *v
		}
		var ret LinkedVpnTunnels
		return ret
	}).(LinkedVpnTunnelsOutput)
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedVpnTunnelsPtrOutput) SiteToSiteDataTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinkedVpnTunnels) *bool {
		if v == nil {
			return nil
		}
		return v.SiteToSiteDataTransfer
	}).(pulumi.BoolPtrOutput)
}

// The URIs of linked VPN tunnel resources.
func (o LinkedVpnTunnelsPtrOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LinkedVpnTunnels) []string {
		if v == nil {
			return nil
		}
		return v.Uris
	}).(pulumi.StringArrayOutput)
}

// A collection of Cloud VPN tunnel resources. These resources should be redundant HA VPN tunnels that all advertise the same prefixes to Google Cloud. Alternatively, in a passive/active configuration, all tunnels should be capable of advertising the same prefixes.
type LinkedVpnTunnelsResponse struct {
	// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
	SiteToSiteDataTransfer bool `pulumi:"siteToSiteDataTransfer"`
	// The URIs of linked VPN tunnel resources.
	Uris []string `pulumi:"uris"`
}

// A collection of Cloud VPN tunnel resources. These resources should be redundant HA VPN tunnels that all advertise the same prefixes to Google Cloud. Alternatively, in a passive/active configuration, all tunnels should be capable of advertising the same prefixes.
type LinkedVpnTunnelsResponseOutput struct{ *pulumi.OutputState }

func (LinkedVpnTunnelsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedVpnTunnelsResponse)(nil)).Elem()
}

func (o LinkedVpnTunnelsResponseOutput) ToLinkedVpnTunnelsResponseOutput() LinkedVpnTunnelsResponseOutput {
	return o
}

func (o LinkedVpnTunnelsResponseOutput) ToLinkedVpnTunnelsResponseOutputWithContext(ctx context.Context) LinkedVpnTunnelsResponseOutput {
	return o
}

// A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
func (o LinkedVpnTunnelsResponseOutput) SiteToSiteDataTransfer() pulumi.BoolOutput {
	return o.ApplyT(func(v LinkedVpnTunnelsResponse) bool { return v.SiteToSiteDataTransfer }).(pulumi.BoolOutput)
}

// The URIs of linked VPN tunnel resources.
func (o LinkedVpnTunnelsResponseOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LinkedVpnTunnelsResponse) []string { return v.Uris }).(pulumi.StringArrayOutput)
}

// A router appliance instance is a Compute Engine virtual machine (VM) instance that acts as a BGP speaker. A router appliance instance is specified by the URI of the VM and the internal IP address of one of the VM's network interfaces.
type RouterApplianceInstance struct {
	// The IP address on the VM to use for peering.
	IpAddress *string `pulumi:"ipAddress"`
	// The URI of the VM.
	VirtualMachine *string `pulumi:"virtualMachine"`
}

// RouterApplianceInstanceInput is an input type that accepts RouterApplianceInstanceArgs and RouterApplianceInstanceOutput values.
// You can construct a concrete instance of `RouterApplianceInstanceInput` via:
//
//          RouterApplianceInstanceArgs{...}
type RouterApplianceInstanceInput interface {
	pulumi.Input

	ToRouterApplianceInstanceOutput() RouterApplianceInstanceOutput
	ToRouterApplianceInstanceOutputWithContext(context.Context) RouterApplianceInstanceOutput
}

// A router appliance instance is a Compute Engine virtual machine (VM) instance that acts as a BGP speaker. A router appliance instance is specified by the URI of the VM and the internal IP address of one of the VM's network interfaces.
type RouterApplianceInstanceArgs struct {
	// The IP address on the VM to use for peering.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// The URI of the VM.
	VirtualMachine pulumi.StringPtrInput `pulumi:"virtualMachine"`
}

func (RouterApplianceInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterApplianceInstance)(nil)).Elem()
}

func (i RouterApplianceInstanceArgs) ToRouterApplianceInstanceOutput() RouterApplianceInstanceOutput {
	return i.ToRouterApplianceInstanceOutputWithContext(context.Background())
}

func (i RouterApplianceInstanceArgs) ToRouterApplianceInstanceOutputWithContext(ctx context.Context) RouterApplianceInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterApplianceInstanceOutput)
}

// RouterApplianceInstanceArrayInput is an input type that accepts RouterApplianceInstanceArray and RouterApplianceInstanceArrayOutput values.
// You can construct a concrete instance of `RouterApplianceInstanceArrayInput` via:
//
//          RouterApplianceInstanceArray{ RouterApplianceInstanceArgs{...} }
type RouterApplianceInstanceArrayInput interface {
	pulumi.Input

	ToRouterApplianceInstanceArrayOutput() RouterApplianceInstanceArrayOutput
	ToRouterApplianceInstanceArrayOutputWithContext(context.Context) RouterApplianceInstanceArrayOutput
}

type RouterApplianceInstanceArray []RouterApplianceInstanceInput

func (RouterApplianceInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterApplianceInstance)(nil)).Elem()
}

func (i RouterApplianceInstanceArray) ToRouterApplianceInstanceArrayOutput() RouterApplianceInstanceArrayOutput {
	return i.ToRouterApplianceInstanceArrayOutputWithContext(context.Background())
}

func (i RouterApplianceInstanceArray) ToRouterApplianceInstanceArrayOutputWithContext(ctx context.Context) RouterApplianceInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouterApplianceInstanceArrayOutput)
}

// A router appliance instance is a Compute Engine virtual machine (VM) instance that acts as a BGP speaker. A router appliance instance is specified by the URI of the VM and the internal IP address of one of the VM's network interfaces.
type RouterApplianceInstanceOutput struct{ *pulumi.OutputState }

func (RouterApplianceInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterApplianceInstance)(nil)).Elem()
}

func (o RouterApplianceInstanceOutput) ToRouterApplianceInstanceOutput() RouterApplianceInstanceOutput {
	return o
}

func (o RouterApplianceInstanceOutput) ToRouterApplianceInstanceOutputWithContext(ctx context.Context) RouterApplianceInstanceOutput {
	return o
}

// The IP address on the VM to use for peering.
func (o RouterApplianceInstanceOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterApplianceInstance) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// The URI of the VM.
func (o RouterApplianceInstanceOutput) VirtualMachine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouterApplianceInstance) *string { return v.VirtualMachine }).(pulumi.StringPtrOutput)
}

type RouterApplianceInstanceArrayOutput struct{ *pulumi.OutputState }

func (RouterApplianceInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterApplianceInstance)(nil)).Elem()
}

func (o RouterApplianceInstanceArrayOutput) ToRouterApplianceInstanceArrayOutput() RouterApplianceInstanceArrayOutput {
	return o
}

func (o RouterApplianceInstanceArrayOutput) ToRouterApplianceInstanceArrayOutputWithContext(ctx context.Context) RouterApplianceInstanceArrayOutput {
	return o
}

func (o RouterApplianceInstanceArrayOutput) Index(i pulumi.IntInput) RouterApplianceInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterApplianceInstance {
		return vs[0].([]RouterApplianceInstance)[vs[1].(int)]
	}).(RouterApplianceInstanceOutput)
}

// A router appliance instance is a Compute Engine virtual machine (VM) instance that acts as a BGP speaker. A router appliance instance is specified by the URI of the VM and the internal IP address of one of the VM's network interfaces.
type RouterApplianceInstanceResponse struct {
	// The IP address on the VM to use for peering.
	IpAddress string `pulumi:"ipAddress"`
	// The URI of the VM.
	VirtualMachine string `pulumi:"virtualMachine"`
}

// A router appliance instance is a Compute Engine virtual machine (VM) instance that acts as a BGP speaker. A router appliance instance is specified by the URI of the VM and the internal IP address of one of the VM's network interfaces.
type RouterApplianceInstanceResponseOutput struct{ *pulumi.OutputState }

func (RouterApplianceInstanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouterApplianceInstanceResponse)(nil)).Elem()
}

func (o RouterApplianceInstanceResponseOutput) ToRouterApplianceInstanceResponseOutput() RouterApplianceInstanceResponseOutput {
	return o
}

func (o RouterApplianceInstanceResponseOutput) ToRouterApplianceInstanceResponseOutputWithContext(ctx context.Context) RouterApplianceInstanceResponseOutput {
	return o
}

// The IP address on the VM to use for peering.
func (o RouterApplianceInstanceResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v RouterApplianceInstanceResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The URI of the VM.
func (o RouterApplianceInstanceResponseOutput) VirtualMachine() pulumi.StringOutput {
	return o.ApplyT(func(v RouterApplianceInstanceResponse) string { return v.VirtualMachine }).(pulumi.StringOutput)
}

type RouterApplianceInstanceResponseArrayOutput struct{ *pulumi.OutputState }

func (RouterApplianceInstanceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouterApplianceInstanceResponse)(nil)).Elem()
}

func (o RouterApplianceInstanceResponseArrayOutput) ToRouterApplianceInstanceResponseArrayOutput() RouterApplianceInstanceResponseArrayOutput {
	return o
}

func (o RouterApplianceInstanceResponseArrayOutput) ToRouterApplianceInstanceResponseArrayOutputWithContext(ctx context.Context) RouterApplianceInstanceResponseArrayOutput {
	return o
}

func (o RouterApplianceInstanceResponseArrayOutput) Index(i pulumi.IntInput) RouterApplianceInstanceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouterApplianceInstanceResponse {
		return vs[0].([]RouterApplianceInstanceResponse)[vs[1].(int)]
	}).(RouterApplianceInstanceResponseOutput)
}

// RoutingVPC contains information about the VPC networks associated with the spokes of a Network Connectivity Center hub.
type RoutingVPC struct {
	// The URI of the VPC network.
	Uri *string `pulumi:"uri"`
}

// RoutingVPCInput is an input type that accepts RoutingVPCArgs and RoutingVPCOutput values.
// You can construct a concrete instance of `RoutingVPCInput` via:
//
//          RoutingVPCArgs{...}
type RoutingVPCInput interface {
	pulumi.Input

	ToRoutingVPCOutput() RoutingVPCOutput
	ToRoutingVPCOutputWithContext(context.Context) RoutingVPCOutput
}

// RoutingVPC contains information about the VPC networks associated with the spokes of a Network Connectivity Center hub.
type RoutingVPCArgs struct {
	// The URI of the VPC network.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (RoutingVPCArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingVPC)(nil)).Elem()
}

func (i RoutingVPCArgs) ToRoutingVPCOutput() RoutingVPCOutput {
	return i.ToRoutingVPCOutputWithContext(context.Background())
}

func (i RoutingVPCArgs) ToRoutingVPCOutputWithContext(ctx context.Context) RoutingVPCOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingVPCOutput)
}

// RoutingVPCArrayInput is an input type that accepts RoutingVPCArray and RoutingVPCArrayOutput values.
// You can construct a concrete instance of `RoutingVPCArrayInput` via:
//
//          RoutingVPCArray{ RoutingVPCArgs{...} }
type RoutingVPCArrayInput interface {
	pulumi.Input

	ToRoutingVPCArrayOutput() RoutingVPCArrayOutput
	ToRoutingVPCArrayOutputWithContext(context.Context) RoutingVPCArrayOutput
}

type RoutingVPCArray []RoutingVPCInput

func (RoutingVPCArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingVPC)(nil)).Elem()
}

func (i RoutingVPCArray) ToRoutingVPCArrayOutput() RoutingVPCArrayOutput {
	return i.ToRoutingVPCArrayOutputWithContext(context.Background())
}

func (i RoutingVPCArray) ToRoutingVPCArrayOutputWithContext(ctx context.Context) RoutingVPCArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingVPCArrayOutput)
}

// RoutingVPC contains information about the VPC networks associated with the spokes of a Network Connectivity Center hub.
type RoutingVPCOutput struct{ *pulumi.OutputState }

func (RoutingVPCOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingVPC)(nil)).Elem()
}

func (o RoutingVPCOutput) ToRoutingVPCOutput() RoutingVPCOutput {
	return o
}

func (o RoutingVPCOutput) ToRoutingVPCOutputWithContext(ctx context.Context) RoutingVPCOutput {
	return o
}

// The URI of the VPC network.
func (o RoutingVPCOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoutingVPC) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type RoutingVPCArrayOutput struct{ *pulumi.OutputState }

func (RoutingVPCArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingVPC)(nil)).Elem()
}

func (o RoutingVPCArrayOutput) ToRoutingVPCArrayOutput() RoutingVPCArrayOutput {
	return o
}

func (o RoutingVPCArrayOutput) ToRoutingVPCArrayOutputWithContext(ctx context.Context) RoutingVPCArrayOutput {
	return o
}

func (o RoutingVPCArrayOutput) Index(i pulumi.IntInput) RoutingVPCOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoutingVPC {
		return vs[0].([]RoutingVPC)[vs[1].(int)]
	}).(RoutingVPCOutput)
}

// RoutingVPC contains information about the VPC networks associated with the spokes of a Network Connectivity Center hub.
type RoutingVPCResponse struct {
	// If true, indicates that this VPC network is currently associated with spokes that use the data transfer feature (spokes where the site_to_site_data_transfer field is set to true). If you create new spokes that use data transfer, they must be associated with this VPC network. At most, one VPC network will have this field set to true.
	RequiredForNewSiteToSiteDataTransferSpokes bool `pulumi:"requiredForNewSiteToSiteDataTransferSpokes"`
	// The URI of the VPC network.
	Uri string `pulumi:"uri"`
}

// RoutingVPC contains information about the VPC networks associated with the spokes of a Network Connectivity Center hub.
type RoutingVPCResponseOutput struct{ *pulumi.OutputState }

func (RoutingVPCResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingVPCResponse)(nil)).Elem()
}

func (o RoutingVPCResponseOutput) ToRoutingVPCResponseOutput() RoutingVPCResponseOutput {
	return o
}

func (o RoutingVPCResponseOutput) ToRoutingVPCResponseOutputWithContext(ctx context.Context) RoutingVPCResponseOutput {
	return o
}

// If true, indicates that this VPC network is currently associated with spokes that use the data transfer feature (spokes where the site_to_site_data_transfer field is set to true). If you create new spokes that use data transfer, they must be associated with this VPC network. At most, one VPC network will have this field set to true.
func (o RoutingVPCResponseOutput) RequiredForNewSiteToSiteDataTransferSpokes() pulumi.BoolOutput {
	return o.ApplyT(func(v RoutingVPCResponse) bool { return v.RequiredForNewSiteToSiteDataTransferSpokes }).(pulumi.BoolOutput)
}

// The URI of the VPC network.
func (o RoutingVPCResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v RoutingVPCResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type RoutingVPCResponseArrayOutput struct{ *pulumi.OutputState }

func (RoutingVPCResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutingVPCResponse)(nil)).Elem()
}

func (o RoutingVPCResponseArrayOutput) ToRoutingVPCResponseArrayOutput() RoutingVPCResponseArrayOutput {
	return o
}

func (o RoutingVPCResponseArrayOutput) ToRoutingVPCResponseArrayOutputWithContext(ctx context.Context) RoutingVPCResponseArrayOutput {
	return o
}

func (o RoutingVPCResponseArrayOutput) Index(i pulumi.IntInput) RoutingVPCResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoutingVPCResponse {
		return vs[0].([]RoutingVPCResponse)[vs[1].(int)]
	}).(RoutingVPCResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedInterconnectAttachmentsInput)(nil)).Elem(), LinkedInterconnectAttachmentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedInterconnectAttachmentsPtrInput)(nil)).Elem(), LinkedInterconnectAttachmentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedRouterApplianceInstancesInput)(nil)).Elem(), LinkedRouterApplianceInstancesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedRouterApplianceInstancesPtrInput)(nil)).Elem(), LinkedRouterApplianceInstancesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedVpnTunnelsInput)(nil)).Elem(), LinkedVpnTunnelsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedVpnTunnelsPtrInput)(nil)).Elem(), LinkedVpnTunnelsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterApplianceInstanceInput)(nil)).Elem(), RouterApplianceInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouterApplianceInstanceArrayInput)(nil)).Elem(), RouterApplianceInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingVPCInput)(nil)).Elem(), RoutingVPCArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingVPCArrayInput)(nil)).Elem(), RoutingVPCArray{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(LinkedInterconnectAttachmentsOutput{})
	pulumi.RegisterOutputType(LinkedInterconnectAttachmentsPtrOutput{})
	pulumi.RegisterOutputType(LinkedInterconnectAttachmentsResponseOutput{})
	pulumi.RegisterOutputType(LinkedRouterApplianceInstancesOutput{})
	pulumi.RegisterOutputType(LinkedRouterApplianceInstancesPtrOutput{})
	pulumi.RegisterOutputType(LinkedRouterApplianceInstancesResponseOutput{})
	pulumi.RegisterOutputType(LinkedVpnTunnelsOutput{})
	pulumi.RegisterOutputType(LinkedVpnTunnelsPtrOutput{})
	pulumi.RegisterOutputType(LinkedVpnTunnelsResponseOutput{})
	pulumi.RegisterOutputType(RouterApplianceInstanceOutput{})
	pulumi.RegisterOutputType(RouterApplianceInstanceArrayOutput{})
	pulumi.RegisterOutputType(RouterApplianceInstanceResponseOutput{})
	pulumi.RegisterOutputType(RouterApplianceInstanceResponseArrayOutput{})
	pulumi.RegisterOutputType(RoutingVPCOutput{})
	pulumi.RegisterOutputType(RoutingVPCArrayOutput{})
	pulumi.RegisterOutputType(RoutingVPCResponseOutput{})
	pulumi.RegisterOutputType(RoutingVPCResponseArrayOutput{})
}
