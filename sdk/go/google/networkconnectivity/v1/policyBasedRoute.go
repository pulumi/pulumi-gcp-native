// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new policy-based route in a given project and location.
// Auto-naming is currently not supported for this resource.
type PolicyBasedRoute struct {
	pulumi.CustomResourceState

	// Time when the policy-based route was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. An optional description of this resource. Provide this field when you create the resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// The filter to match L4 traffic.
	Filter FilterResponseOutput `pulumi:"filter"`
	// Optional. The interconnect attachments that this policy-based route applies to.
	InterconnectAttachment InterconnectAttachmentResponseOutput `pulumi:"interconnectAttachment"`
	// Type of this resource. Always networkconnectivity#policyBasedRoute for policy-based Route resources.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// User-defined labels.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`
	Name pulumi.StringOutput `pulumi:"name"`
	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	Network pulumi.StringOutput `pulumi:"network"`
	// Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.
	NextHopIlbIp pulumi.StringOutput `pulumi:"nextHopIlbIp"`
	// Optional. Other routes that will be referenced to determine the next hop of the packet.
	NextHopOtherRoutes pulumi.StringOutput `pulumi:"nextHopOtherRoutes"`
	// Required. Unique id for the policy-based route to create.
	PolicyBasedRouteId pulumi.StringOutput `pulumi:"policyBasedRouteId"`
	// Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
	Priority pulumi.IntOutput    `pulumi:"priority"`
	Project  pulumi.StringOutput `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Server-defined fully-qualified URL for this resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Time when the policy-based route was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Optional. VM instances to which this policy-based route applies to.
	VirtualMachine VirtualMachineResponseOutput `pulumi:"virtualMachine"`
	// If potential misconfigurations are detected for this route, this field will be populated with warning messages.
	Warnings WarningsResponseArrayOutput `pulumi:"warnings"`
}

// NewPolicyBasedRoute registers a new resource with the given unique name, arguments, and options.
func NewPolicyBasedRoute(ctx *pulumi.Context,
	name string, args *PolicyBasedRouteArgs, opts ...pulumi.ResourceOption) (*PolicyBasedRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.PolicyBasedRouteId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyBasedRouteId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"policyBasedRouteId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyBasedRoute
	err := ctx.RegisterResource("google-native:networkconnectivity/v1:PolicyBasedRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyBasedRoute gets an existing PolicyBasedRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyBasedRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyBasedRouteState, opts ...pulumi.ResourceOption) (*PolicyBasedRoute, error) {
	var resource PolicyBasedRoute
	err := ctx.ReadResource("google-native:networkconnectivity/v1:PolicyBasedRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyBasedRoute resources.
type policyBasedRouteState struct {
}

type PolicyBasedRouteState struct {
}

func (PolicyBasedRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyBasedRouteState)(nil)).Elem()
}

type policyBasedRouteArgs struct {
	// Optional. An optional description of this resource. Provide this field when you create the resource.
	Description *string `pulumi:"description"`
	// The filter to match L4 traffic.
	Filter Filter `pulumi:"filter"`
	// Optional. The interconnect attachments that this policy-based route applies to.
	InterconnectAttachment *InterconnectAttachment `pulumi:"interconnectAttachment"`
	// User-defined labels.
	Labels map[string]string `pulumi:"labels"`
	// Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`
	Name *string `pulumi:"name"`
	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	Network string `pulumi:"network"`
	// Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.
	NextHopIlbIp *string `pulumi:"nextHopIlbIp"`
	// Optional. Other routes that will be referenced to determine the next hop of the packet.
	NextHopOtherRoutes *PolicyBasedRouteNextHopOtherRoutes `pulumi:"nextHopOtherRoutes"`
	// Required. Unique id for the policy-based route to create.
	PolicyBasedRouteId string `pulumi:"policyBasedRouteId"`
	// Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
	Priority *int    `pulumi:"priority"`
	Project  *string `pulumi:"project"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Optional. VM instances to which this policy-based route applies to.
	VirtualMachine *VirtualMachine `pulumi:"virtualMachine"`
}

// The set of arguments for constructing a PolicyBasedRoute resource.
type PolicyBasedRouteArgs struct {
	// Optional. An optional description of this resource. Provide this field when you create the resource.
	Description pulumi.StringPtrInput
	// The filter to match L4 traffic.
	Filter FilterInput
	// Optional. The interconnect attachments that this policy-based route applies to.
	InterconnectAttachment InterconnectAttachmentPtrInput
	// User-defined labels.
	Labels pulumi.StringMapInput
	// Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`
	Name pulumi.StringPtrInput
	// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
	Network pulumi.StringInput
	// Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.
	NextHopIlbIp pulumi.StringPtrInput
	// Optional. Other routes that will be referenced to determine the next hop of the packet.
	NextHopOtherRoutes PolicyBasedRouteNextHopOtherRoutesPtrInput
	// Required. Unique id for the policy-based route to create.
	PolicyBasedRouteId pulumi.StringInput
	// Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
	Priority pulumi.IntPtrInput
	Project  pulumi.StringPtrInput
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Optional. VM instances to which this policy-based route applies to.
	VirtualMachine VirtualMachinePtrInput
}

func (PolicyBasedRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyBasedRouteArgs)(nil)).Elem()
}

type PolicyBasedRouteInput interface {
	pulumi.Input

	ToPolicyBasedRouteOutput() PolicyBasedRouteOutput
	ToPolicyBasedRouteOutputWithContext(ctx context.Context) PolicyBasedRouteOutput
}

func (*PolicyBasedRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyBasedRoute)(nil)).Elem()
}

func (i *PolicyBasedRoute) ToPolicyBasedRouteOutput() PolicyBasedRouteOutput {
	return i.ToPolicyBasedRouteOutputWithContext(context.Background())
}

func (i *PolicyBasedRoute) ToPolicyBasedRouteOutputWithContext(ctx context.Context) PolicyBasedRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyBasedRouteOutput)
}

func (i *PolicyBasedRoute) ToOutput(ctx context.Context) pulumix.Output[*PolicyBasedRoute] {
	return pulumix.Output[*PolicyBasedRoute]{
		OutputState: i.ToPolicyBasedRouteOutputWithContext(ctx).OutputState,
	}
}

type PolicyBasedRouteOutput struct{ *pulumi.OutputState }

func (PolicyBasedRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyBasedRoute)(nil)).Elem()
}

func (o PolicyBasedRouteOutput) ToPolicyBasedRouteOutput() PolicyBasedRouteOutput {
	return o
}

func (o PolicyBasedRouteOutput) ToPolicyBasedRouteOutputWithContext(ctx context.Context) PolicyBasedRouteOutput {
	return o
}

func (o PolicyBasedRouteOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyBasedRoute] {
	return pulumix.Output[*PolicyBasedRoute]{
		OutputState: o.OutputState,
	}
}

// Time when the policy-based route was created.
func (o PolicyBasedRouteOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. An optional description of this resource. Provide this field when you create the resource.
func (o PolicyBasedRouteOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The filter to match L4 traffic.
func (o PolicyBasedRouteOutput) Filter() FilterResponseOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) FilterResponseOutput { return v.Filter }).(FilterResponseOutput)
}

// Optional. The interconnect attachments that this policy-based route applies to.
func (o PolicyBasedRouteOutput) InterconnectAttachment() InterconnectAttachmentResponseOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) InterconnectAttachmentResponseOutput { return v.InterconnectAttachment }).(InterconnectAttachmentResponseOutput)
}

// Type of this resource. Always networkconnectivity#policyBasedRoute for policy-based Route resources.
func (o PolicyBasedRouteOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// User-defined labels.
func (o PolicyBasedRouteOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`
func (o PolicyBasedRouteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
func (o PolicyBasedRouteOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.
func (o PolicyBasedRouteOutput) NextHopIlbIp() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.NextHopIlbIp }).(pulumi.StringOutput)
}

// Optional. Other routes that will be referenced to determine the next hop of the packet.
func (o PolicyBasedRouteOutput) NextHopOtherRoutes() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.NextHopOtherRoutes }).(pulumi.StringOutput)
}

// Required. Unique id for the policy-based route to create.
func (o PolicyBasedRouteOutput) PolicyBasedRouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.PolicyBasedRouteId }).(pulumi.StringOutput)
}

// Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
func (o PolicyBasedRouteOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

func (o PolicyBasedRouteOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o PolicyBasedRouteOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Server-defined fully-qualified URL for this resource.
func (o PolicyBasedRouteOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Time when the policy-based route was updated.
func (o PolicyBasedRouteOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Optional. VM instances to which this policy-based route applies to.
func (o PolicyBasedRouteOutput) VirtualMachine() VirtualMachineResponseOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) VirtualMachineResponseOutput { return v.VirtualMachine }).(VirtualMachineResponseOutput)
}

// If potential misconfigurations are detected for this route, this field will be populated with warning messages.
func (o PolicyBasedRouteOutput) Warnings() WarningsResponseArrayOutput {
	return o.ApplyT(func(v *PolicyBasedRoute) WarningsResponseArrayOutput { return v.Warnings }).(WarningsResponseArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyBasedRouteInput)(nil)).Elem(), &PolicyBasedRoute{})
	pulumi.RegisterOutputType(PolicyBasedRouteOutput{})
}
