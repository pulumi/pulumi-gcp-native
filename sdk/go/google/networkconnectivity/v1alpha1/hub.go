// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new Hub in a given project and location.
type Hub struct {
	pulumi.CustomResourceState

	// Time when the Hub was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Short description of the hub resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// User-defined labels.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Immutable. The name of a Hub resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The current lifecycle state of this Hub.
	State pulumi.StringOutput `pulumi:"state"`
	// Google-generated UUID for this resource. This is unique across all Hub resources. If a Hub resource is deleted and another with the same name is created, it gets a different unique_id.
	UniqueId pulumi.StringOutput `pulumi:"uniqueId"`
	// Time when the Hub was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewHub registers a new resource with the given unique name, arguments, and options.
func NewHub(ctx *pulumi.Context,
	name string, args *HubArgs, opts ...pulumi.ResourceOption) (*Hub, error) {
	if args == nil {
		args = &HubArgs{}
	}

	var resource Hub
	err := ctx.RegisterResource("google-native:networkconnectivity/v1alpha1:Hub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHub gets an existing Hub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HubState, opts ...pulumi.ResourceOption) (*Hub, error) {
	var resource Hub
	err := ctx.ReadResource("google-native:networkconnectivity/v1alpha1:Hub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hub resources.
type hubState struct {
}

type HubState struct {
}

func (HubState) ElementType() reflect.Type {
	return reflect.TypeOf((*hubState)(nil)).Elem()
}

type hubArgs struct {
	// Time when the Hub was created.
	CreateTime *string `pulumi:"createTime"`
	// Short description of the hub resource.
	Description *string `pulumi:"description"`
	HubId       *string `pulumi:"hubId"`
	// User-defined labels.
	Labels map[string]string `pulumi:"labels"`
	// Immutable. The name of a Hub resource.
	Name      *string `pulumi:"name"`
	Project   *string `pulumi:"project"`
	RequestId *string `pulumi:"requestId"`
	// Time when the Hub was updated.
	UpdateTime *string `pulumi:"updateTime"`
}

// The set of arguments for constructing a Hub resource.
type HubArgs struct {
	// Time when the Hub was created.
	CreateTime pulumi.StringPtrInput
	// Short description of the hub resource.
	Description pulumi.StringPtrInput
	HubId       pulumi.StringPtrInput
	// User-defined labels.
	Labels pulumi.StringMapInput
	// Immutable. The name of a Hub resource.
	Name      pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	RequestId pulumi.StringPtrInput
	// Time when the Hub was updated.
	UpdateTime pulumi.StringPtrInput
}

func (HubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hubArgs)(nil)).Elem()
}

type HubInput interface {
	pulumi.Input

	ToHubOutput() HubOutput
	ToHubOutputWithContext(ctx context.Context) HubOutput
}

func (*Hub) ElementType() reflect.Type {
	return reflect.TypeOf((**Hub)(nil)).Elem()
}

func (i *Hub) ToHubOutput() HubOutput {
	return i.ToHubOutputWithContext(context.Background())
}

func (i *Hub) ToHubOutputWithContext(ctx context.Context) HubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubOutput)
}

type HubOutput struct{ *pulumi.OutputState }

func (HubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hub)(nil)).Elem()
}

func (o HubOutput) ToHubOutput() HubOutput {
	return o
}

func (o HubOutput) ToHubOutputWithContext(ctx context.Context) HubOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HubInput)(nil)).Elem(), &Hub{})
	pulumi.RegisterOutputType(HubOutput{})
}
