// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a feed in a parent project/folder/organization to listen to its asset updates.
type Feed struct {
	pulumi.CustomResourceState
}

// NewFeed registers a new resource with the given unique name, arguments, and options.
func NewFeed(ctx *pulumi.Context,
	name string, args *FeedArgs, opts ...pulumi.ResourceOption) (*Feed, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeedsId == nil {
		return nil, errors.New("invalid value for required argument 'FeedsId'")
	}
	if args.V1Id == nil {
		return nil, errors.New("invalid value for required argument 'V1Id'")
	}
	if args.V1Id1 == nil {
		return nil, errors.New("invalid value for required argument 'V1Id1'")
	}
	var resource Feed
	err := ctx.RegisterResource("google-cloud:cloudasset/v1:Feed", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeed gets an existing Feed resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeed(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeedState, opts ...pulumi.ResourceOption) (*Feed, error) {
	var resource Feed
	err := ctx.ReadResource("google-cloud:cloudasset/v1:Feed", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Feed resources.
type feedState struct {
}

type FeedState struct {
}

func (FeedState) ElementType() reflect.Type {
	return reflect.TypeOf((*feedState)(nil)).Elem()
}

type feedArgs struct {
	// Required. The feed details. The field `name` must be empty and it will be generated in the format of: projects/project_number/feeds/feed_id folders/folder_number/feeds/feed_id organizations/organization_number/feeds/feed_id
	Feed *FeedType `pulumi:"feed"`
	// Required. This is the client-assigned asset feed identifier and it needs to be unique under a specific parent project/folder/organization.
	FeedId  *string `pulumi:"feedId"`
	FeedsId string  `pulumi:"feedsId"`
	V1Id    string  `pulumi:"v1Id"`
	V1Id1   string  `pulumi:"v1Id1"`
}

// The set of arguments for constructing a Feed resource.
type FeedArgs struct {
	// Required. The feed details. The field `name` must be empty and it will be generated in the format of: projects/project_number/feeds/feed_id folders/folder_number/feeds/feed_id organizations/organization_number/feeds/feed_id
	Feed FeedTypePtrInput
	// Required. This is the client-assigned asset feed identifier and it needs to be unique under a specific parent project/folder/organization.
	FeedId  pulumi.StringPtrInput
	FeedsId pulumi.StringInput
	V1Id    pulumi.StringInput
	V1Id1   pulumi.StringInput
}

func (FeedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*feedArgs)(nil)).Elem()
}

type FeedInput interface {
	pulumi.Input

	ToFeedOutput() FeedOutput
	ToFeedOutputWithContext(ctx context.Context) FeedOutput
}

func (*Feed) ElementType() reflect.Type {
	return reflect.TypeOf((*Feed)(nil))
}

func (i *Feed) ToFeedOutput() FeedOutput {
	return i.ToFeedOutputWithContext(context.Background())
}

func (i *Feed) ToFeedOutputWithContext(ctx context.Context) FeedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeedOutput)
}

type FeedOutput struct {
	*pulumi.OutputState
}

func (FeedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Feed)(nil))
}

func (o FeedOutput) ToFeedOutput() FeedOutput {
	return o
}

func (o FeedOutput) ToFeedOutputWithContext(ctx context.Context) FeedOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(FeedOutput{})
}
