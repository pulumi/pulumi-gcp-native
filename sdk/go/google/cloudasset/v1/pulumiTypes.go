// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies roles and/or permissions to analyze, to determine both the identities possessing them and the resources they control. If multiple values are specified, results will include roles or permissions matching any of them. The total number of roles and permissions should be equal or less than 10.
type AccessSelector struct {
	// Optional. The permissions to appear in result.
	Permissions []string `pulumi:"permissions"`
	// Optional. The roles to appear in result.
	Roles []string `pulumi:"roles"`
}

// AccessSelectorInput is an input type that accepts AccessSelectorArgs and AccessSelectorOutput values.
// You can construct a concrete instance of `AccessSelectorInput` via:
//
//          AccessSelectorArgs{...}
type AccessSelectorInput interface {
	pulumi.Input

	ToAccessSelectorOutput() AccessSelectorOutput
	ToAccessSelectorOutputWithContext(context.Context) AccessSelectorOutput
}

// Specifies roles and/or permissions to analyze, to determine both the identities possessing them and the resources they control. If multiple values are specified, results will include roles or permissions matching any of them. The total number of roles and permissions should be equal or less than 10.
type AccessSelectorArgs struct {
	// Optional. The permissions to appear in result.
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
	// Optional. The roles to appear in result.
	Roles pulumi.StringArrayInput `pulumi:"roles"`
}

func (AccessSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessSelector)(nil)).Elem()
}

func (i AccessSelectorArgs) ToAccessSelectorOutput() AccessSelectorOutput {
	return i.ToAccessSelectorOutputWithContext(context.Background())
}

func (i AccessSelectorArgs) ToAccessSelectorOutputWithContext(ctx context.Context) AccessSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessSelectorOutput)
}

func (i AccessSelectorArgs) ToAccessSelectorPtrOutput() AccessSelectorPtrOutput {
	return i.ToAccessSelectorPtrOutputWithContext(context.Background())
}

func (i AccessSelectorArgs) ToAccessSelectorPtrOutputWithContext(ctx context.Context) AccessSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessSelectorOutput).ToAccessSelectorPtrOutputWithContext(ctx)
}

// AccessSelectorPtrInput is an input type that accepts AccessSelectorArgs, AccessSelectorPtr and AccessSelectorPtrOutput values.
// You can construct a concrete instance of `AccessSelectorPtrInput` via:
//
//          AccessSelectorArgs{...}
//
//  or:
//
//          nil
type AccessSelectorPtrInput interface {
	pulumi.Input

	ToAccessSelectorPtrOutput() AccessSelectorPtrOutput
	ToAccessSelectorPtrOutputWithContext(context.Context) AccessSelectorPtrOutput
}

type accessSelectorPtrType AccessSelectorArgs

func AccessSelectorPtr(v *AccessSelectorArgs) AccessSelectorPtrInput {
	return (*accessSelectorPtrType)(v)
}

func (*accessSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessSelector)(nil)).Elem()
}

func (i *accessSelectorPtrType) ToAccessSelectorPtrOutput() AccessSelectorPtrOutput {
	return i.ToAccessSelectorPtrOutputWithContext(context.Background())
}

func (i *accessSelectorPtrType) ToAccessSelectorPtrOutputWithContext(ctx context.Context) AccessSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessSelectorPtrOutput)
}

// Specifies roles and/or permissions to analyze, to determine both the identities possessing them and the resources they control. If multiple values are specified, results will include roles or permissions matching any of them. The total number of roles and permissions should be equal or less than 10.
type AccessSelectorOutput struct{ *pulumi.OutputState }

func (AccessSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessSelector)(nil)).Elem()
}

func (o AccessSelectorOutput) ToAccessSelectorOutput() AccessSelectorOutput {
	return o
}

func (o AccessSelectorOutput) ToAccessSelectorOutputWithContext(ctx context.Context) AccessSelectorOutput {
	return o
}

func (o AccessSelectorOutput) ToAccessSelectorPtrOutput() AccessSelectorPtrOutput {
	return o.ToAccessSelectorPtrOutputWithContext(context.Background())
}

func (o AccessSelectorOutput) ToAccessSelectorPtrOutputWithContext(ctx context.Context) AccessSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessSelector) *AccessSelector {
		return &v
	}).(AccessSelectorPtrOutput)
}

// Optional. The permissions to appear in result.
func (o AccessSelectorOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessSelector) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

// Optional. The roles to appear in result.
func (o AccessSelectorOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessSelector) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

type AccessSelectorPtrOutput struct{ *pulumi.OutputState }

func (AccessSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessSelector)(nil)).Elem()
}

func (o AccessSelectorPtrOutput) ToAccessSelectorPtrOutput() AccessSelectorPtrOutput {
	return o
}

func (o AccessSelectorPtrOutput) ToAccessSelectorPtrOutputWithContext(ctx context.Context) AccessSelectorPtrOutput {
	return o
}

func (o AccessSelectorPtrOutput) Elem() AccessSelectorOutput {
	return o.ApplyT(func(v *AccessSelector) AccessSelector {
		if v != nil {
			return *v
		}
		var ret AccessSelector
		return ret
	}).(AccessSelectorOutput)
}

// Optional. The permissions to appear in result.
func (o AccessSelectorPtrOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessSelector) []string {
		if v == nil {
			return nil
		}
		return v.Permissions
	}).(pulumi.StringArrayOutput)
}

// Optional. The roles to appear in result.
func (o AccessSelectorPtrOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessSelector) []string {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(pulumi.StringArrayOutput)
}

// Specifies roles and/or permissions to analyze, to determine both the identities possessing them and the resources they control. If multiple values are specified, results will include roles or permissions matching any of them. The total number of roles and permissions should be equal or less than 10.
type AccessSelectorResponse struct {
	// Optional. The permissions to appear in result.
	Permissions []string `pulumi:"permissions"`
	// Optional. The roles to appear in result.
	Roles []string `pulumi:"roles"`
}

// Specifies roles and/or permissions to analyze, to determine both the identities possessing them and the resources they control. If multiple values are specified, results will include roles or permissions matching any of them. The total number of roles and permissions should be equal or less than 10.
type AccessSelectorResponseOutput struct{ *pulumi.OutputState }

func (AccessSelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessSelectorResponse)(nil)).Elem()
}

func (o AccessSelectorResponseOutput) ToAccessSelectorResponseOutput() AccessSelectorResponseOutput {
	return o
}

func (o AccessSelectorResponseOutput) ToAccessSelectorResponseOutputWithContext(ctx context.Context) AccessSelectorResponseOutput {
	return o
}

// Optional. The permissions to appear in result.
func (o AccessSelectorResponseOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessSelectorResponse) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

// Optional. The roles to appear in result.
func (o AccessSelectorResponseOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessSelectorResponse) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// The IAM conditions context.
type ConditionContext struct {
	// The hypothetical access timestamp to evaluate IAM conditions. Note that this value must not be earlier than the current time; otherwise, an INVALID_ARGUMENT error will be returned.
	AccessTime *string `pulumi:"accessTime"`
}

// ConditionContextInput is an input type that accepts ConditionContextArgs and ConditionContextOutput values.
// You can construct a concrete instance of `ConditionContextInput` via:
//
//          ConditionContextArgs{...}
type ConditionContextInput interface {
	pulumi.Input

	ToConditionContextOutput() ConditionContextOutput
	ToConditionContextOutputWithContext(context.Context) ConditionContextOutput
}

// The IAM conditions context.
type ConditionContextArgs struct {
	// The hypothetical access timestamp to evaluate IAM conditions. Note that this value must not be earlier than the current time; otherwise, an INVALID_ARGUMENT error will be returned.
	AccessTime pulumi.StringPtrInput `pulumi:"accessTime"`
}

func (ConditionContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionContext)(nil)).Elem()
}

func (i ConditionContextArgs) ToConditionContextOutput() ConditionContextOutput {
	return i.ToConditionContextOutputWithContext(context.Background())
}

func (i ConditionContextArgs) ToConditionContextOutputWithContext(ctx context.Context) ConditionContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionContextOutput)
}

func (i ConditionContextArgs) ToConditionContextPtrOutput() ConditionContextPtrOutput {
	return i.ToConditionContextPtrOutputWithContext(context.Background())
}

func (i ConditionContextArgs) ToConditionContextPtrOutputWithContext(ctx context.Context) ConditionContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionContextOutput).ToConditionContextPtrOutputWithContext(ctx)
}

// ConditionContextPtrInput is an input type that accepts ConditionContextArgs, ConditionContextPtr and ConditionContextPtrOutput values.
// You can construct a concrete instance of `ConditionContextPtrInput` via:
//
//          ConditionContextArgs{...}
//
//  or:
//
//          nil
type ConditionContextPtrInput interface {
	pulumi.Input

	ToConditionContextPtrOutput() ConditionContextPtrOutput
	ToConditionContextPtrOutputWithContext(context.Context) ConditionContextPtrOutput
}

type conditionContextPtrType ConditionContextArgs

func ConditionContextPtr(v *ConditionContextArgs) ConditionContextPtrInput {
	return (*conditionContextPtrType)(v)
}

func (*conditionContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionContext)(nil)).Elem()
}

func (i *conditionContextPtrType) ToConditionContextPtrOutput() ConditionContextPtrOutput {
	return i.ToConditionContextPtrOutputWithContext(context.Background())
}

func (i *conditionContextPtrType) ToConditionContextPtrOutputWithContext(ctx context.Context) ConditionContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionContextPtrOutput)
}

// The IAM conditions context.
type ConditionContextOutput struct{ *pulumi.OutputState }

func (ConditionContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionContext)(nil)).Elem()
}

func (o ConditionContextOutput) ToConditionContextOutput() ConditionContextOutput {
	return o
}

func (o ConditionContextOutput) ToConditionContextOutputWithContext(ctx context.Context) ConditionContextOutput {
	return o
}

func (o ConditionContextOutput) ToConditionContextPtrOutput() ConditionContextPtrOutput {
	return o.ToConditionContextPtrOutputWithContext(context.Background())
}

func (o ConditionContextOutput) ToConditionContextPtrOutputWithContext(ctx context.Context) ConditionContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConditionContext) *ConditionContext {
		return &v
	}).(ConditionContextPtrOutput)
}

// The hypothetical access timestamp to evaluate IAM conditions. Note that this value must not be earlier than the current time; otherwise, an INVALID_ARGUMENT error will be returned.
func (o ConditionContextOutput) AccessTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionContext) *string { return v.AccessTime }).(pulumi.StringPtrOutput)
}

type ConditionContextPtrOutput struct{ *pulumi.OutputState }

func (ConditionContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionContext)(nil)).Elem()
}

func (o ConditionContextPtrOutput) ToConditionContextPtrOutput() ConditionContextPtrOutput {
	return o
}

func (o ConditionContextPtrOutput) ToConditionContextPtrOutputWithContext(ctx context.Context) ConditionContextPtrOutput {
	return o
}

func (o ConditionContextPtrOutput) Elem() ConditionContextOutput {
	return o.ApplyT(func(v *ConditionContext) ConditionContext {
		if v != nil {
			return *v
		}
		var ret ConditionContext
		return ret
	}).(ConditionContextOutput)
}

// The hypothetical access timestamp to evaluate IAM conditions. Note that this value must not be earlier than the current time; otherwise, an INVALID_ARGUMENT error will be returned.
func (o ConditionContextPtrOutput) AccessTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConditionContext) *string {
		if v == nil {
			return nil
		}
		return v.AccessTime
	}).(pulumi.StringPtrOutput)
}

// The IAM conditions context.
type ConditionContextResponse struct {
	// The hypothetical access timestamp to evaluate IAM conditions. Note that this value must not be earlier than the current time; otherwise, an INVALID_ARGUMENT error will be returned.
	AccessTime string `pulumi:"accessTime"`
}

// The IAM conditions context.
type ConditionContextResponseOutput struct{ *pulumi.OutputState }

func (ConditionContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionContextResponse)(nil)).Elem()
}

func (o ConditionContextResponseOutput) ToConditionContextResponseOutput() ConditionContextResponseOutput {
	return o
}

func (o ConditionContextResponseOutput) ToConditionContextResponseOutputWithContext(ctx context.Context) ConditionContextResponseOutput {
	return o
}

// The hypothetical access timestamp to evaluate IAM conditions. Note that this value must not be earlier than the current time; otherwise, an INVALID_ARGUMENT error will be returned.
func (o ConditionContextResponseOutput) AccessTime() pulumi.StringOutput {
	return o.ApplyT(func(v ConditionContextResponse) string { return v.AccessTime }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Output configuration for asset feed destination.
type FeedOutputConfig struct {
	// Destination on Pub/Sub.
	PubsubDestination *PubsubDestination `pulumi:"pubsubDestination"`
}

// FeedOutputConfigInput is an input type that accepts FeedOutputConfigArgs and FeedOutputConfigOutput values.
// You can construct a concrete instance of `FeedOutputConfigInput` via:
//
//          FeedOutputConfigArgs{...}
type FeedOutputConfigInput interface {
	pulumi.Input

	ToFeedOutputConfigOutput() FeedOutputConfigOutput
	ToFeedOutputConfigOutputWithContext(context.Context) FeedOutputConfigOutput
}

// Output configuration for asset feed destination.
type FeedOutputConfigArgs struct {
	// Destination on Pub/Sub.
	PubsubDestination PubsubDestinationPtrInput `pulumi:"pubsubDestination"`
}

func (FeedOutputConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeedOutputConfig)(nil)).Elem()
}

func (i FeedOutputConfigArgs) ToFeedOutputConfigOutput() FeedOutputConfigOutput {
	return i.ToFeedOutputConfigOutputWithContext(context.Background())
}

func (i FeedOutputConfigArgs) ToFeedOutputConfigOutputWithContext(ctx context.Context) FeedOutputConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeedOutputConfigOutput)
}

// Output configuration for asset feed destination.
type FeedOutputConfigOutput struct{ *pulumi.OutputState }

func (FeedOutputConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeedOutputConfig)(nil)).Elem()
}

func (o FeedOutputConfigOutput) ToFeedOutputConfigOutput() FeedOutputConfigOutput {
	return o
}

func (o FeedOutputConfigOutput) ToFeedOutputConfigOutputWithContext(ctx context.Context) FeedOutputConfigOutput {
	return o
}

// Destination on Pub/Sub.
func (o FeedOutputConfigOutput) PubsubDestination() PubsubDestinationPtrOutput {
	return o.ApplyT(func(v FeedOutputConfig) *PubsubDestination { return v.PubsubDestination }).(PubsubDestinationPtrOutput)
}

// Output configuration for asset feed destination.
type FeedOutputConfigResponse struct {
	// Destination on Pub/Sub.
	PubsubDestination PubsubDestinationResponse `pulumi:"pubsubDestination"`
}

// Output configuration for asset feed destination.
type FeedOutputConfigResponseOutput struct{ *pulumi.OutputState }

func (FeedOutputConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeedOutputConfigResponse)(nil)).Elem()
}

func (o FeedOutputConfigResponseOutput) ToFeedOutputConfigResponseOutput() FeedOutputConfigResponseOutput {
	return o
}

func (o FeedOutputConfigResponseOutput) ToFeedOutputConfigResponseOutputWithContext(ctx context.Context) FeedOutputConfigResponseOutput {
	return o
}

// Destination on Pub/Sub.
func (o FeedOutputConfigResponseOutput) PubsubDestination() PubsubDestinationResponseOutput {
	return o.ApplyT(func(v FeedOutputConfigResponse) PubsubDestinationResponse { return v.PubsubDestination }).(PubsubDestinationResponseOutput)
}

// IAM policy analysis query message.
type IamPolicyAnalysisQuery struct {
	// Optional. Specifies roles or permissions for analysis. This is optional.
	AccessSelector *AccessSelector `pulumi:"accessSelector"`
	// Optional. The hypothetical context for IAM conditions evaluation.
	ConditionContext *ConditionContext `pulumi:"conditionContext"`
	// Optional. Specifies an identity for analysis.
	IdentitySelector *IdentitySelector `pulumi:"identitySelector"`
	// Optional. The query options.
	Options *Options `pulumi:"options"`
	// Optional. Specifies a resource for analysis.
	ResourceSelector *ResourceSelector `pulumi:"resourceSelector"`
	// The relative name of the root asset. Only resources and IAM policies within the scope will be analyzed. This can only be an organization number (such as "organizations/123"), a folder number (such as "folders/123"), a project ID (such as "projects/my-project-id"), or a project number (such as "projects/12345"). To know how to get organization id, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id). To know how to get folder or project id, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-folders#viewing_or_listing_folders_and_projects).
	Scope string `pulumi:"scope"`
}

// IamPolicyAnalysisQueryInput is an input type that accepts IamPolicyAnalysisQueryArgs and IamPolicyAnalysisQueryOutput values.
// You can construct a concrete instance of `IamPolicyAnalysisQueryInput` via:
//
//          IamPolicyAnalysisQueryArgs{...}
type IamPolicyAnalysisQueryInput interface {
	pulumi.Input

	ToIamPolicyAnalysisQueryOutput() IamPolicyAnalysisQueryOutput
	ToIamPolicyAnalysisQueryOutputWithContext(context.Context) IamPolicyAnalysisQueryOutput
}

// IAM policy analysis query message.
type IamPolicyAnalysisQueryArgs struct {
	// Optional. Specifies roles or permissions for analysis. This is optional.
	AccessSelector AccessSelectorPtrInput `pulumi:"accessSelector"`
	// Optional. The hypothetical context for IAM conditions evaluation.
	ConditionContext ConditionContextPtrInput `pulumi:"conditionContext"`
	// Optional. Specifies an identity for analysis.
	IdentitySelector IdentitySelectorPtrInput `pulumi:"identitySelector"`
	// Optional. The query options.
	Options OptionsPtrInput `pulumi:"options"`
	// Optional. Specifies a resource for analysis.
	ResourceSelector ResourceSelectorPtrInput `pulumi:"resourceSelector"`
	// The relative name of the root asset. Only resources and IAM policies within the scope will be analyzed. This can only be an organization number (such as "organizations/123"), a folder number (such as "folders/123"), a project ID (such as "projects/my-project-id"), or a project number (such as "projects/12345"). To know how to get organization id, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id). To know how to get folder or project id, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-folders#viewing_or_listing_folders_and_projects).
	Scope pulumi.StringInput `pulumi:"scope"`
}

func (IamPolicyAnalysisQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IamPolicyAnalysisQuery)(nil)).Elem()
}

func (i IamPolicyAnalysisQueryArgs) ToIamPolicyAnalysisQueryOutput() IamPolicyAnalysisQueryOutput {
	return i.ToIamPolicyAnalysisQueryOutputWithContext(context.Background())
}

func (i IamPolicyAnalysisQueryArgs) ToIamPolicyAnalysisQueryOutputWithContext(ctx context.Context) IamPolicyAnalysisQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyAnalysisQueryOutput)
}

func (i IamPolicyAnalysisQueryArgs) ToIamPolicyAnalysisQueryPtrOutput() IamPolicyAnalysisQueryPtrOutput {
	return i.ToIamPolicyAnalysisQueryPtrOutputWithContext(context.Background())
}

func (i IamPolicyAnalysisQueryArgs) ToIamPolicyAnalysisQueryPtrOutputWithContext(ctx context.Context) IamPolicyAnalysisQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyAnalysisQueryOutput).ToIamPolicyAnalysisQueryPtrOutputWithContext(ctx)
}

// IamPolicyAnalysisQueryPtrInput is an input type that accepts IamPolicyAnalysisQueryArgs, IamPolicyAnalysisQueryPtr and IamPolicyAnalysisQueryPtrOutput values.
// You can construct a concrete instance of `IamPolicyAnalysisQueryPtrInput` via:
//
//          IamPolicyAnalysisQueryArgs{...}
//
//  or:
//
//          nil
type IamPolicyAnalysisQueryPtrInput interface {
	pulumi.Input

	ToIamPolicyAnalysisQueryPtrOutput() IamPolicyAnalysisQueryPtrOutput
	ToIamPolicyAnalysisQueryPtrOutputWithContext(context.Context) IamPolicyAnalysisQueryPtrOutput
}

type iamPolicyAnalysisQueryPtrType IamPolicyAnalysisQueryArgs

func IamPolicyAnalysisQueryPtr(v *IamPolicyAnalysisQueryArgs) IamPolicyAnalysisQueryPtrInput {
	return (*iamPolicyAnalysisQueryPtrType)(v)
}

func (*iamPolicyAnalysisQueryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IamPolicyAnalysisQuery)(nil)).Elem()
}

func (i *iamPolicyAnalysisQueryPtrType) ToIamPolicyAnalysisQueryPtrOutput() IamPolicyAnalysisQueryPtrOutput {
	return i.ToIamPolicyAnalysisQueryPtrOutputWithContext(context.Background())
}

func (i *iamPolicyAnalysisQueryPtrType) ToIamPolicyAnalysisQueryPtrOutputWithContext(ctx context.Context) IamPolicyAnalysisQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyAnalysisQueryPtrOutput)
}

// IAM policy analysis query message.
type IamPolicyAnalysisQueryOutput struct{ *pulumi.OutputState }

func (IamPolicyAnalysisQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IamPolicyAnalysisQuery)(nil)).Elem()
}

func (o IamPolicyAnalysisQueryOutput) ToIamPolicyAnalysisQueryOutput() IamPolicyAnalysisQueryOutput {
	return o
}

func (o IamPolicyAnalysisQueryOutput) ToIamPolicyAnalysisQueryOutputWithContext(ctx context.Context) IamPolicyAnalysisQueryOutput {
	return o
}

func (o IamPolicyAnalysisQueryOutput) ToIamPolicyAnalysisQueryPtrOutput() IamPolicyAnalysisQueryPtrOutput {
	return o.ToIamPolicyAnalysisQueryPtrOutputWithContext(context.Background())
}

func (o IamPolicyAnalysisQueryOutput) ToIamPolicyAnalysisQueryPtrOutputWithContext(ctx context.Context) IamPolicyAnalysisQueryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IamPolicyAnalysisQuery) *IamPolicyAnalysisQuery {
		return &v
	}).(IamPolicyAnalysisQueryPtrOutput)
}

// Optional. Specifies roles or permissions for analysis. This is optional.
func (o IamPolicyAnalysisQueryOutput) AccessSelector() AccessSelectorPtrOutput {
	return o.ApplyT(func(v IamPolicyAnalysisQuery) *AccessSelector { return v.AccessSelector }).(AccessSelectorPtrOutput)
}

// Optional. The hypothetical context for IAM conditions evaluation.
func (o IamPolicyAnalysisQueryOutput) ConditionContext() ConditionContextPtrOutput {
	return o.ApplyT(func(v IamPolicyAnalysisQuery) *ConditionContext { return v.ConditionContext }).(ConditionContextPtrOutput)
}

// Optional. Specifies an identity for analysis.
func (o IamPolicyAnalysisQueryOutput) IdentitySelector() IdentitySelectorPtrOutput {
	return o.ApplyT(func(v IamPolicyAnalysisQuery) *IdentitySelector { return v.IdentitySelector }).(IdentitySelectorPtrOutput)
}

// Optional. The query options.
func (o IamPolicyAnalysisQueryOutput) Options() OptionsPtrOutput {
	return o.ApplyT(func(v IamPolicyAnalysisQuery) *Options { return v.Options }).(OptionsPtrOutput)
}

// Optional. Specifies a resource for analysis.
func (o IamPolicyAnalysisQueryOutput) ResourceSelector() ResourceSelectorPtrOutput {
	return o.ApplyT(func(v IamPolicyAnalysisQuery) *ResourceSelector { return v.ResourceSelector }).(ResourceSelectorPtrOutput)
}

// The relative name of the root asset. Only resources and IAM policies within the scope will be analyzed. This can only be an organization number (such as "organizations/123"), a folder number (such as "folders/123"), a project ID (such as "projects/my-project-id"), or a project number (such as "projects/12345"). To know how to get organization id, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id). To know how to get folder or project id, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-folders#viewing_or_listing_folders_and_projects).
func (o IamPolicyAnalysisQueryOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v IamPolicyAnalysisQuery) string { return v.Scope }).(pulumi.StringOutput)
}

type IamPolicyAnalysisQueryPtrOutput struct{ *pulumi.OutputState }

func (IamPolicyAnalysisQueryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamPolicyAnalysisQuery)(nil)).Elem()
}

func (o IamPolicyAnalysisQueryPtrOutput) ToIamPolicyAnalysisQueryPtrOutput() IamPolicyAnalysisQueryPtrOutput {
	return o
}

func (o IamPolicyAnalysisQueryPtrOutput) ToIamPolicyAnalysisQueryPtrOutputWithContext(ctx context.Context) IamPolicyAnalysisQueryPtrOutput {
	return o
}

func (o IamPolicyAnalysisQueryPtrOutput) Elem() IamPolicyAnalysisQueryOutput {
	return o.ApplyT(func(v *IamPolicyAnalysisQuery) IamPolicyAnalysisQuery {
		if v != nil {
			return *v
		}
		var ret IamPolicyAnalysisQuery
		return ret
	}).(IamPolicyAnalysisQueryOutput)
}

// Optional. Specifies roles or permissions for analysis. This is optional.
func (o IamPolicyAnalysisQueryPtrOutput) AccessSelector() AccessSelectorPtrOutput {
	return o.ApplyT(func(v *IamPolicyAnalysisQuery) *AccessSelector {
		if v == nil {
			return nil
		}
		return v.AccessSelector
	}).(AccessSelectorPtrOutput)
}

// Optional. The hypothetical context for IAM conditions evaluation.
func (o IamPolicyAnalysisQueryPtrOutput) ConditionContext() ConditionContextPtrOutput {
	return o.ApplyT(func(v *IamPolicyAnalysisQuery) *ConditionContext {
		if v == nil {
			return nil
		}
		return v.ConditionContext
	}).(ConditionContextPtrOutput)
}

// Optional. Specifies an identity for analysis.
func (o IamPolicyAnalysisQueryPtrOutput) IdentitySelector() IdentitySelectorPtrOutput {
	return o.ApplyT(func(v *IamPolicyAnalysisQuery) *IdentitySelector {
		if v == nil {
			return nil
		}
		return v.IdentitySelector
	}).(IdentitySelectorPtrOutput)
}

// Optional. The query options.
func (o IamPolicyAnalysisQueryPtrOutput) Options() OptionsPtrOutput {
	return o.ApplyT(func(v *IamPolicyAnalysisQuery) *Options {
		if v == nil {
			return nil
		}
		return v.Options
	}).(OptionsPtrOutput)
}

// Optional. Specifies a resource for analysis.
func (o IamPolicyAnalysisQueryPtrOutput) ResourceSelector() ResourceSelectorPtrOutput {
	return o.ApplyT(func(v *IamPolicyAnalysisQuery) *ResourceSelector {
		if v == nil {
			return nil
		}
		return v.ResourceSelector
	}).(ResourceSelectorPtrOutput)
}

// The relative name of the root asset. Only resources and IAM policies within the scope will be analyzed. This can only be an organization number (such as "organizations/123"), a folder number (such as "folders/123"), a project ID (such as "projects/my-project-id"), or a project number (such as "projects/12345"). To know how to get organization id, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id). To know how to get folder or project id, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-folders#viewing_or_listing_folders_and_projects).
func (o IamPolicyAnalysisQueryPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamPolicyAnalysisQuery) *string {
		if v == nil {
			return nil
		}
		return &v.Scope
	}).(pulumi.StringPtrOutput)
}

// IAM policy analysis query message.
type IamPolicyAnalysisQueryResponse struct {
	// Optional. Specifies roles or permissions for analysis. This is optional.
	AccessSelector AccessSelectorResponse `pulumi:"accessSelector"`
	// Optional. The hypothetical context for IAM conditions evaluation.
	ConditionContext ConditionContextResponse `pulumi:"conditionContext"`
	// Optional. Specifies an identity for analysis.
	IdentitySelector IdentitySelectorResponse `pulumi:"identitySelector"`
	// Optional. The query options.
	Options OptionsResponse `pulumi:"options"`
	// Optional. Specifies a resource for analysis.
	ResourceSelector ResourceSelectorResponse `pulumi:"resourceSelector"`
	// The relative name of the root asset. Only resources and IAM policies within the scope will be analyzed. This can only be an organization number (such as "organizations/123"), a folder number (such as "folders/123"), a project ID (such as "projects/my-project-id"), or a project number (such as "projects/12345"). To know how to get organization id, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id). To know how to get folder or project id, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-folders#viewing_or_listing_folders_and_projects).
	Scope string `pulumi:"scope"`
}

// IAM policy analysis query message.
type IamPolicyAnalysisQueryResponseOutput struct{ *pulumi.OutputState }

func (IamPolicyAnalysisQueryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IamPolicyAnalysisQueryResponse)(nil)).Elem()
}

func (o IamPolicyAnalysisQueryResponseOutput) ToIamPolicyAnalysisQueryResponseOutput() IamPolicyAnalysisQueryResponseOutput {
	return o
}

func (o IamPolicyAnalysisQueryResponseOutput) ToIamPolicyAnalysisQueryResponseOutputWithContext(ctx context.Context) IamPolicyAnalysisQueryResponseOutput {
	return o
}

// Optional. Specifies roles or permissions for analysis. This is optional.
func (o IamPolicyAnalysisQueryResponseOutput) AccessSelector() AccessSelectorResponseOutput {
	return o.ApplyT(func(v IamPolicyAnalysisQueryResponse) AccessSelectorResponse { return v.AccessSelector }).(AccessSelectorResponseOutput)
}

// Optional. The hypothetical context for IAM conditions evaluation.
func (o IamPolicyAnalysisQueryResponseOutput) ConditionContext() ConditionContextResponseOutput {
	return o.ApplyT(func(v IamPolicyAnalysisQueryResponse) ConditionContextResponse { return v.ConditionContext }).(ConditionContextResponseOutput)
}

// Optional. Specifies an identity for analysis.
func (o IamPolicyAnalysisQueryResponseOutput) IdentitySelector() IdentitySelectorResponseOutput {
	return o.ApplyT(func(v IamPolicyAnalysisQueryResponse) IdentitySelectorResponse { return v.IdentitySelector }).(IdentitySelectorResponseOutput)
}

// Optional. The query options.
func (o IamPolicyAnalysisQueryResponseOutput) Options() OptionsResponseOutput {
	return o.ApplyT(func(v IamPolicyAnalysisQueryResponse) OptionsResponse { return v.Options }).(OptionsResponseOutput)
}

// Optional. Specifies a resource for analysis.
func (o IamPolicyAnalysisQueryResponseOutput) ResourceSelector() ResourceSelectorResponseOutput {
	return o.ApplyT(func(v IamPolicyAnalysisQueryResponse) ResourceSelectorResponse { return v.ResourceSelector }).(ResourceSelectorResponseOutput)
}

// The relative name of the root asset. Only resources and IAM policies within the scope will be analyzed. This can only be an organization number (such as "organizations/123"), a folder number (such as "folders/123"), a project ID (such as "projects/my-project-id"), or a project number (such as "projects/12345"). To know how to get organization id, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id). To know how to get folder or project id, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-folders#viewing_or_listing_folders_and_projects).
func (o IamPolicyAnalysisQueryResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v IamPolicyAnalysisQueryResponse) string { return v.Scope }).(pulumi.StringOutput)
}

// Specifies an identity for which to determine resource access, based on roles assigned either directly to them or to the groups they belong to, directly or indirectly.
type IdentitySelector struct {
	// The identity appear in the form of principals in [IAM policy binding](https://cloud.google.com/iam/reference/rest/v1/Binding). The examples of supported forms are: "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com". Notice that wildcard characters (such as * and ?) are not supported. You must give a specific identity.
	Identity string `pulumi:"identity"`
}

// IdentitySelectorInput is an input type that accepts IdentitySelectorArgs and IdentitySelectorOutput values.
// You can construct a concrete instance of `IdentitySelectorInput` via:
//
//          IdentitySelectorArgs{...}
type IdentitySelectorInput interface {
	pulumi.Input

	ToIdentitySelectorOutput() IdentitySelectorOutput
	ToIdentitySelectorOutputWithContext(context.Context) IdentitySelectorOutput
}

// Specifies an identity for which to determine resource access, based on roles assigned either directly to them or to the groups they belong to, directly or indirectly.
type IdentitySelectorArgs struct {
	// The identity appear in the form of principals in [IAM policy binding](https://cloud.google.com/iam/reference/rest/v1/Binding). The examples of supported forms are: "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com". Notice that wildcard characters (such as * and ?) are not supported. You must give a specific identity.
	Identity pulumi.StringInput `pulumi:"identity"`
}

func (IdentitySelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentitySelector)(nil)).Elem()
}

func (i IdentitySelectorArgs) ToIdentitySelectorOutput() IdentitySelectorOutput {
	return i.ToIdentitySelectorOutputWithContext(context.Background())
}

func (i IdentitySelectorArgs) ToIdentitySelectorOutputWithContext(ctx context.Context) IdentitySelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySelectorOutput)
}

func (i IdentitySelectorArgs) ToIdentitySelectorPtrOutput() IdentitySelectorPtrOutput {
	return i.ToIdentitySelectorPtrOutputWithContext(context.Background())
}

func (i IdentitySelectorArgs) ToIdentitySelectorPtrOutputWithContext(ctx context.Context) IdentitySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySelectorOutput).ToIdentitySelectorPtrOutputWithContext(ctx)
}

// IdentitySelectorPtrInput is an input type that accepts IdentitySelectorArgs, IdentitySelectorPtr and IdentitySelectorPtrOutput values.
// You can construct a concrete instance of `IdentitySelectorPtrInput` via:
//
//          IdentitySelectorArgs{...}
//
//  or:
//
//          nil
type IdentitySelectorPtrInput interface {
	pulumi.Input

	ToIdentitySelectorPtrOutput() IdentitySelectorPtrOutput
	ToIdentitySelectorPtrOutputWithContext(context.Context) IdentitySelectorPtrOutput
}

type identitySelectorPtrType IdentitySelectorArgs

func IdentitySelectorPtr(v *IdentitySelectorArgs) IdentitySelectorPtrInput {
	return (*identitySelectorPtrType)(v)
}

func (*identitySelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentitySelector)(nil)).Elem()
}

func (i *identitySelectorPtrType) ToIdentitySelectorPtrOutput() IdentitySelectorPtrOutput {
	return i.ToIdentitySelectorPtrOutputWithContext(context.Background())
}

func (i *identitySelectorPtrType) ToIdentitySelectorPtrOutputWithContext(ctx context.Context) IdentitySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySelectorPtrOutput)
}

// Specifies an identity for which to determine resource access, based on roles assigned either directly to them or to the groups they belong to, directly or indirectly.
type IdentitySelectorOutput struct{ *pulumi.OutputState }

func (IdentitySelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentitySelector)(nil)).Elem()
}

func (o IdentitySelectorOutput) ToIdentitySelectorOutput() IdentitySelectorOutput {
	return o
}

func (o IdentitySelectorOutput) ToIdentitySelectorOutputWithContext(ctx context.Context) IdentitySelectorOutput {
	return o
}

func (o IdentitySelectorOutput) ToIdentitySelectorPtrOutput() IdentitySelectorPtrOutput {
	return o.ToIdentitySelectorPtrOutputWithContext(context.Background())
}

func (o IdentitySelectorOutput) ToIdentitySelectorPtrOutputWithContext(ctx context.Context) IdentitySelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentitySelector) *IdentitySelector {
		return &v
	}).(IdentitySelectorPtrOutput)
}

// The identity appear in the form of principals in [IAM policy binding](https://cloud.google.com/iam/reference/rest/v1/Binding). The examples of supported forms are: "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com". Notice that wildcard characters (such as * and ?) are not supported. You must give a specific identity.
func (o IdentitySelectorOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v IdentitySelector) string { return v.Identity }).(pulumi.StringOutput)
}

type IdentitySelectorPtrOutput struct{ *pulumi.OutputState }

func (IdentitySelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentitySelector)(nil)).Elem()
}

func (o IdentitySelectorPtrOutput) ToIdentitySelectorPtrOutput() IdentitySelectorPtrOutput {
	return o
}

func (o IdentitySelectorPtrOutput) ToIdentitySelectorPtrOutputWithContext(ctx context.Context) IdentitySelectorPtrOutput {
	return o
}

func (o IdentitySelectorPtrOutput) Elem() IdentitySelectorOutput {
	return o.ApplyT(func(v *IdentitySelector) IdentitySelector {
		if v != nil {
			return *v
		}
		var ret IdentitySelector
		return ret
	}).(IdentitySelectorOutput)
}

// The identity appear in the form of principals in [IAM policy binding](https://cloud.google.com/iam/reference/rest/v1/Binding). The examples of supported forms are: "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com". Notice that wildcard characters (such as * and ?) are not supported. You must give a specific identity.
func (o IdentitySelectorPtrOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentitySelector) *string {
		if v == nil {
			return nil
		}
		return &v.Identity
	}).(pulumi.StringPtrOutput)
}

// Specifies an identity for which to determine resource access, based on roles assigned either directly to them or to the groups they belong to, directly or indirectly.
type IdentitySelectorResponse struct {
	// The identity appear in the form of principals in [IAM policy binding](https://cloud.google.com/iam/reference/rest/v1/Binding). The examples of supported forms are: "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com". Notice that wildcard characters (such as * and ?) are not supported. You must give a specific identity.
	Identity string `pulumi:"identity"`
}

// Specifies an identity for which to determine resource access, based on roles assigned either directly to them or to the groups they belong to, directly or indirectly.
type IdentitySelectorResponseOutput struct{ *pulumi.OutputState }

func (IdentitySelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentitySelectorResponse)(nil)).Elem()
}

func (o IdentitySelectorResponseOutput) ToIdentitySelectorResponseOutput() IdentitySelectorResponseOutput {
	return o
}

func (o IdentitySelectorResponseOutput) ToIdentitySelectorResponseOutputWithContext(ctx context.Context) IdentitySelectorResponseOutput {
	return o
}

// The identity appear in the form of principals in [IAM policy binding](https://cloud.google.com/iam/reference/rest/v1/Binding). The examples of supported forms are: "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com". Notice that wildcard characters (such as * and ?) are not supported. You must give a specific identity.
func (o IdentitySelectorResponseOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v IdentitySelectorResponse) string { return v.Identity }).(pulumi.StringOutput)
}

// Contains query options.
type Options struct {
	// Optional. If true, the response will include access analysis from identities to resources via service account impersonation. This is a very expensive operation, because many derived queries will be executed. We highly recommend you use AssetService.AnalyzeIamPolicyLongrunning rpc instead. For example, if the request analyzes for which resources user A has permission P, and there's an IAM policy states user A has iam.serviceAccounts.getAccessToken permission to a service account SA, and there's another IAM policy states service account SA has permission P to a GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Another example, if the request analyzes for who has permission P to a GCP folder F, and there's an IAM policy states user A has iam.serviceAccounts.actAs permission to a service account SA, and there's another IAM policy states service account SA has permission P to the GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Only the following permissions are considered in this analysis: * `iam.serviceAccounts.actAs` * `iam.serviceAccounts.signBlob` * `iam.serviceAccounts.signJwt` * `iam.serviceAccounts.getAccessToken` * `iam.serviceAccounts.getOpenIdToken` * `iam.serviceAccounts.implicitDelegation` Default is false.
	AnalyzeServiceAccountImpersonation *bool `pulumi:"analyzeServiceAccountImpersonation"`
	// Optional. If true, the identities section of the result will expand any Google groups appearing in an IAM policy binding. If IamPolicyAnalysisQuery.identity_selector is specified, the identity in the result will be determined by the selector, and this flag is not allowed to set. Default is false.
	ExpandGroups *bool `pulumi:"expandGroups"`
	// Optional. If true and IamPolicyAnalysisQuery.resource_selector is not specified, the resource section of the result will expand any resource attached to an IAM policy to include resources lower in the resource hierarchy. For example, if the request analyzes for which resources user A has permission P, and the results include an IAM policy with P on a GCP folder, the results will also include resources in that folder with permission P. If true and IamPolicyAnalysisQuery.resource_selector is specified, the resource section of the result will expand the specified resource to include resources lower in the resource hierarchy. Only project or lower resources are supported. Folder and organization resource cannot be used together with this option. For example, if the request analyzes for which users have permission P on a GCP project with this option enabled, the results will include all users who have permission P on that project or any lower resource. Default is false.
	ExpandResources *bool `pulumi:"expandResources"`
	// Optional. If true, the access section of result will expand any roles appearing in IAM policy bindings to include their permissions. If IamPolicyAnalysisQuery.access_selector is specified, the access section of the result will be determined by the selector, and this flag is not allowed to set. Default is false.
	ExpandRoles *bool `pulumi:"expandRoles"`
	// Optional. If true, the result will output the relevant membership relationships between groups and other groups, and between groups and principals. Default is false.
	OutputGroupEdges *bool `pulumi:"outputGroupEdges"`
	// Optional. If true, the result will output the relevant parent/child relationships between resources. Default is false.
	OutputResourceEdges *bool `pulumi:"outputResourceEdges"`
}

// OptionsInput is an input type that accepts OptionsArgs and OptionsOutput values.
// You can construct a concrete instance of `OptionsInput` via:
//
//          OptionsArgs{...}
type OptionsInput interface {
	pulumi.Input

	ToOptionsOutput() OptionsOutput
	ToOptionsOutputWithContext(context.Context) OptionsOutput
}

// Contains query options.
type OptionsArgs struct {
	// Optional. If true, the response will include access analysis from identities to resources via service account impersonation. This is a very expensive operation, because many derived queries will be executed. We highly recommend you use AssetService.AnalyzeIamPolicyLongrunning rpc instead. For example, if the request analyzes for which resources user A has permission P, and there's an IAM policy states user A has iam.serviceAccounts.getAccessToken permission to a service account SA, and there's another IAM policy states service account SA has permission P to a GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Another example, if the request analyzes for who has permission P to a GCP folder F, and there's an IAM policy states user A has iam.serviceAccounts.actAs permission to a service account SA, and there's another IAM policy states service account SA has permission P to the GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Only the following permissions are considered in this analysis: * `iam.serviceAccounts.actAs` * `iam.serviceAccounts.signBlob` * `iam.serviceAccounts.signJwt` * `iam.serviceAccounts.getAccessToken` * `iam.serviceAccounts.getOpenIdToken` * `iam.serviceAccounts.implicitDelegation` Default is false.
	AnalyzeServiceAccountImpersonation pulumi.BoolPtrInput `pulumi:"analyzeServiceAccountImpersonation"`
	// Optional. If true, the identities section of the result will expand any Google groups appearing in an IAM policy binding. If IamPolicyAnalysisQuery.identity_selector is specified, the identity in the result will be determined by the selector, and this flag is not allowed to set. Default is false.
	ExpandGroups pulumi.BoolPtrInput `pulumi:"expandGroups"`
	// Optional. If true and IamPolicyAnalysisQuery.resource_selector is not specified, the resource section of the result will expand any resource attached to an IAM policy to include resources lower in the resource hierarchy. For example, if the request analyzes for which resources user A has permission P, and the results include an IAM policy with P on a GCP folder, the results will also include resources in that folder with permission P. If true and IamPolicyAnalysisQuery.resource_selector is specified, the resource section of the result will expand the specified resource to include resources lower in the resource hierarchy. Only project or lower resources are supported. Folder and organization resource cannot be used together with this option. For example, if the request analyzes for which users have permission P on a GCP project with this option enabled, the results will include all users who have permission P on that project or any lower resource. Default is false.
	ExpandResources pulumi.BoolPtrInput `pulumi:"expandResources"`
	// Optional. If true, the access section of result will expand any roles appearing in IAM policy bindings to include their permissions. If IamPolicyAnalysisQuery.access_selector is specified, the access section of the result will be determined by the selector, and this flag is not allowed to set. Default is false.
	ExpandRoles pulumi.BoolPtrInput `pulumi:"expandRoles"`
	// Optional. If true, the result will output the relevant membership relationships between groups and other groups, and between groups and principals. Default is false.
	OutputGroupEdges pulumi.BoolPtrInput `pulumi:"outputGroupEdges"`
	// Optional. If true, the result will output the relevant parent/child relationships between resources. Default is false.
	OutputResourceEdges pulumi.BoolPtrInput `pulumi:"outputResourceEdges"`
}

func (OptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Options)(nil)).Elem()
}

func (i OptionsArgs) ToOptionsOutput() OptionsOutput {
	return i.ToOptionsOutputWithContext(context.Background())
}

func (i OptionsArgs) ToOptionsOutputWithContext(ctx context.Context) OptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionsOutput)
}

func (i OptionsArgs) ToOptionsPtrOutput() OptionsPtrOutput {
	return i.ToOptionsPtrOutputWithContext(context.Background())
}

func (i OptionsArgs) ToOptionsPtrOutputWithContext(ctx context.Context) OptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionsOutput).ToOptionsPtrOutputWithContext(ctx)
}

// OptionsPtrInput is an input type that accepts OptionsArgs, OptionsPtr and OptionsPtrOutput values.
// You can construct a concrete instance of `OptionsPtrInput` via:
//
//          OptionsArgs{...}
//
//  or:
//
//          nil
type OptionsPtrInput interface {
	pulumi.Input

	ToOptionsPtrOutput() OptionsPtrOutput
	ToOptionsPtrOutputWithContext(context.Context) OptionsPtrOutput
}

type optionsPtrType OptionsArgs

func OptionsPtr(v *OptionsArgs) OptionsPtrInput {
	return (*optionsPtrType)(v)
}

func (*optionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Options)(nil)).Elem()
}

func (i *optionsPtrType) ToOptionsPtrOutput() OptionsPtrOutput {
	return i.ToOptionsPtrOutputWithContext(context.Background())
}

func (i *optionsPtrType) ToOptionsPtrOutputWithContext(ctx context.Context) OptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionsPtrOutput)
}

// Contains query options.
type OptionsOutput struct{ *pulumi.OutputState }

func (OptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Options)(nil)).Elem()
}

func (o OptionsOutput) ToOptionsOutput() OptionsOutput {
	return o
}

func (o OptionsOutput) ToOptionsOutputWithContext(ctx context.Context) OptionsOutput {
	return o
}

func (o OptionsOutput) ToOptionsPtrOutput() OptionsPtrOutput {
	return o.ToOptionsPtrOutputWithContext(context.Background())
}

func (o OptionsOutput) ToOptionsPtrOutputWithContext(ctx context.Context) OptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Options) *Options {
		return &v
	}).(OptionsPtrOutput)
}

// Optional. If true, the response will include access analysis from identities to resources via service account impersonation. This is a very expensive operation, because many derived queries will be executed. We highly recommend you use AssetService.AnalyzeIamPolicyLongrunning rpc instead. For example, if the request analyzes for which resources user A has permission P, and there's an IAM policy states user A has iam.serviceAccounts.getAccessToken permission to a service account SA, and there's another IAM policy states service account SA has permission P to a GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Another example, if the request analyzes for who has permission P to a GCP folder F, and there's an IAM policy states user A has iam.serviceAccounts.actAs permission to a service account SA, and there's another IAM policy states service account SA has permission P to the GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Only the following permissions are considered in this analysis: * `iam.serviceAccounts.actAs` * `iam.serviceAccounts.signBlob` * `iam.serviceAccounts.signJwt` * `iam.serviceAccounts.getAccessToken` * `iam.serviceAccounts.getOpenIdToken` * `iam.serviceAccounts.implicitDelegation` Default is false.
func (o OptionsOutput) AnalyzeServiceAccountImpersonation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Options) *bool { return v.AnalyzeServiceAccountImpersonation }).(pulumi.BoolPtrOutput)
}

// Optional. If true, the identities section of the result will expand any Google groups appearing in an IAM policy binding. If IamPolicyAnalysisQuery.identity_selector is specified, the identity in the result will be determined by the selector, and this flag is not allowed to set. Default is false.
func (o OptionsOutput) ExpandGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Options) *bool { return v.ExpandGroups }).(pulumi.BoolPtrOutput)
}

// Optional. If true and IamPolicyAnalysisQuery.resource_selector is not specified, the resource section of the result will expand any resource attached to an IAM policy to include resources lower in the resource hierarchy. For example, if the request analyzes for which resources user A has permission P, and the results include an IAM policy with P on a GCP folder, the results will also include resources in that folder with permission P. If true and IamPolicyAnalysisQuery.resource_selector is specified, the resource section of the result will expand the specified resource to include resources lower in the resource hierarchy. Only project or lower resources are supported. Folder and organization resource cannot be used together with this option. For example, if the request analyzes for which users have permission P on a GCP project with this option enabled, the results will include all users who have permission P on that project or any lower resource. Default is false.
func (o OptionsOutput) ExpandResources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Options) *bool { return v.ExpandResources }).(pulumi.BoolPtrOutput)
}

// Optional. If true, the access section of result will expand any roles appearing in IAM policy bindings to include their permissions. If IamPolicyAnalysisQuery.access_selector is specified, the access section of the result will be determined by the selector, and this flag is not allowed to set. Default is false.
func (o OptionsOutput) ExpandRoles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Options) *bool { return v.ExpandRoles }).(pulumi.BoolPtrOutput)
}

// Optional. If true, the result will output the relevant membership relationships between groups and other groups, and between groups and principals. Default is false.
func (o OptionsOutput) OutputGroupEdges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Options) *bool { return v.OutputGroupEdges }).(pulumi.BoolPtrOutput)
}

// Optional. If true, the result will output the relevant parent/child relationships between resources. Default is false.
func (o OptionsOutput) OutputResourceEdges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Options) *bool { return v.OutputResourceEdges }).(pulumi.BoolPtrOutput)
}

type OptionsPtrOutput struct{ *pulumi.OutputState }

func (OptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Options)(nil)).Elem()
}

func (o OptionsPtrOutput) ToOptionsPtrOutput() OptionsPtrOutput {
	return o
}

func (o OptionsPtrOutput) ToOptionsPtrOutputWithContext(ctx context.Context) OptionsPtrOutput {
	return o
}

func (o OptionsPtrOutput) Elem() OptionsOutput {
	return o.ApplyT(func(v *Options) Options {
		if v != nil {
			return *v
		}
		var ret Options
		return ret
	}).(OptionsOutput)
}

// Optional. If true, the response will include access analysis from identities to resources via service account impersonation. This is a very expensive operation, because many derived queries will be executed. We highly recommend you use AssetService.AnalyzeIamPolicyLongrunning rpc instead. For example, if the request analyzes for which resources user A has permission P, and there's an IAM policy states user A has iam.serviceAccounts.getAccessToken permission to a service account SA, and there's another IAM policy states service account SA has permission P to a GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Another example, if the request analyzes for who has permission P to a GCP folder F, and there's an IAM policy states user A has iam.serviceAccounts.actAs permission to a service account SA, and there's another IAM policy states service account SA has permission P to the GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Only the following permissions are considered in this analysis: * `iam.serviceAccounts.actAs` * `iam.serviceAccounts.signBlob` * `iam.serviceAccounts.signJwt` * `iam.serviceAccounts.getAccessToken` * `iam.serviceAccounts.getOpenIdToken` * `iam.serviceAccounts.implicitDelegation` Default is false.
func (o OptionsPtrOutput) AnalyzeServiceAccountImpersonation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Options) *bool {
		if v == nil {
			return nil
		}
		return v.AnalyzeServiceAccountImpersonation
	}).(pulumi.BoolPtrOutput)
}

// Optional. If true, the identities section of the result will expand any Google groups appearing in an IAM policy binding. If IamPolicyAnalysisQuery.identity_selector is specified, the identity in the result will be determined by the selector, and this flag is not allowed to set. Default is false.
func (o OptionsPtrOutput) ExpandGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Options) *bool {
		if v == nil {
			return nil
		}
		return v.ExpandGroups
	}).(pulumi.BoolPtrOutput)
}

// Optional. If true and IamPolicyAnalysisQuery.resource_selector is not specified, the resource section of the result will expand any resource attached to an IAM policy to include resources lower in the resource hierarchy. For example, if the request analyzes for which resources user A has permission P, and the results include an IAM policy with P on a GCP folder, the results will also include resources in that folder with permission P. If true and IamPolicyAnalysisQuery.resource_selector is specified, the resource section of the result will expand the specified resource to include resources lower in the resource hierarchy. Only project or lower resources are supported. Folder and organization resource cannot be used together with this option. For example, if the request analyzes for which users have permission P on a GCP project with this option enabled, the results will include all users who have permission P on that project or any lower resource. Default is false.
func (o OptionsPtrOutput) ExpandResources() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Options) *bool {
		if v == nil {
			return nil
		}
		return v.ExpandResources
	}).(pulumi.BoolPtrOutput)
}

// Optional. If true, the access section of result will expand any roles appearing in IAM policy bindings to include their permissions. If IamPolicyAnalysisQuery.access_selector is specified, the access section of the result will be determined by the selector, and this flag is not allowed to set. Default is false.
func (o OptionsPtrOutput) ExpandRoles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Options) *bool {
		if v == nil {
			return nil
		}
		return v.ExpandRoles
	}).(pulumi.BoolPtrOutput)
}

// Optional. If true, the result will output the relevant membership relationships between groups and other groups, and between groups and principals. Default is false.
func (o OptionsPtrOutput) OutputGroupEdges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Options) *bool {
		if v == nil {
			return nil
		}
		return v.OutputGroupEdges
	}).(pulumi.BoolPtrOutput)
}

// Optional. If true, the result will output the relevant parent/child relationships between resources. Default is false.
func (o OptionsPtrOutput) OutputResourceEdges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Options) *bool {
		if v == nil {
			return nil
		}
		return v.OutputResourceEdges
	}).(pulumi.BoolPtrOutput)
}

// Contains query options.
type OptionsResponse struct {
	// Optional. If true, the response will include access analysis from identities to resources via service account impersonation. This is a very expensive operation, because many derived queries will be executed. We highly recommend you use AssetService.AnalyzeIamPolicyLongrunning rpc instead. For example, if the request analyzes for which resources user A has permission P, and there's an IAM policy states user A has iam.serviceAccounts.getAccessToken permission to a service account SA, and there's another IAM policy states service account SA has permission P to a GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Another example, if the request analyzes for who has permission P to a GCP folder F, and there's an IAM policy states user A has iam.serviceAccounts.actAs permission to a service account SA, and there's another IAM policy states service account SA has permission P to the GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Only the following permissions are considered in this analysis: * `iam.serviceAccounts.actAs` * `iam.serviceAccounts.signBlob` * `iam.serviceAccounts.signJwt` * `iam.serviceAccounts.getAccessToken` * `iam.serviceAccounts.getOpenIdToken` * `iam.serviceAccounts.implicitDelegation` Default is false.
	AnalyzeServiceAccountImpersonation bool `pulumi:"analyzeServiceAccountImpersonation"`
	// Optional. If true, the identities section of the result will expand any Google groups appearing in an IAM policy binding. If IamPolicyAnalysisQuery.identity_selector is specified, the identity in the result will be determined by the selector, and this flag is not allowed to set. Default is false.
	ExpandGroups bool `pulumi:"expandGroups"`
	// Optional. If true and IamPolicyAnalysisQuery.resource_selector is not specified, the resource section of the result will expand any resource attached to an IAM policy to include resources lower in the resource hierarchy. For example, if the request analyzes for which resources user A has permission P, and the results include an IAM policy with P on a GCP folder, the results will also include resources in that folder with permission P. If true and IamPolicyAnalysisQuery.resource_selector is specified, the resource section of the result will expand the specified resource to include resources lower in the resource hierarchy. Only project or lower resources are supported. Folder and organization resource cannot be used together with this option. For example, if the request analyzes for which users have permission P on a GCP project with this option enabled, the results will include all users who have permission P on that project or any lower resource. Default is false.
	ExpandResources bool `pulumi:"expandResources"`
	// Optional. If true, the access section of result will expand any roles appearing in IAM policy bindings to include their permissions. If IamPolicyAnalysisQuery.access_selector is specified, the access section of the result will be determined by the selector, and this flag is not allowed to set. Default is false.
	ExpandRoles bool `pulumi:"expandRoles"`
	// Optional. If true, the result will output the relevant membership relationships between groups and other groups, and between groups and principals. Default is false.
	OutputGroupEdges bool `pulumi:"outputGroupEdges"`
	// Optional. If true, the result will output the relevant parent/child relationships between resources. Default is false.
	OutputResourceEdges bool `pulumi:"outputResourceEdges"`
}

// Contains query options.
type OptionsResponseOutput struct{ *pulumi.OutputState }

func (OptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptionsResponse)(nil)).Elem()
}

func (o OptionsResponseOutput) ToOptionsResponseOutput() OptionsResponseOutput {
	return o
}

func (o OptionsResponseOutput) ToOptionsResponseOutputWithContext(ctx context.Context) OptionsResponseOutput {
	return o
}

// Optional. If true, the response will include access analysis from identities to resources via service account impersonation. This is a very expensive operation, because many derived queries will be executed. We highly recommend you use AssetService.AnalyzeIamPolicyLongrunning rpc instead. For example, if the request analyzes for which resources user A has permission P, and there's an IAM policy states user A has iam.serviceAccounts.getAccessToken permission to a service account SA, and there's another IAM policy states service account SA has permission P to a GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Another example, if the request analyzes for who has permission P to a GCP folder F, and there's an IAM policy states user A has iam.serviceAccounts.actAs permission to a service account SA, and there's another IAM policy states service account SA has permission P to the GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Only the following permissions are considered in this analysis: * `iam.serviceAccounts.actAs` * `iam.serviceAccounts.signBlob` * `iam.serviceAccounts.signJwt` * `iam.serviceAccounts.getAccessToken` * `iam.serviceAccounts.getOpenIdToken` * `iam.serviceAccounts.implicitDelegation` Default is false.
func (o OptionsResponseOutput) AnalyzeServiceAccountImpersonation() pulumi.BoolOutput {
	return o.ApplyT(func(v OptionsResponse) bool { return v.AnalyzeServiceAccountImpersonation }).(pulumi.BoolOutput)
}

// Optional. If true, the identities section of the result will expand any Google groups appearing in an IAM policy binding. If IamPolicyAnalysisQuery.identity_selector is specified, the identity in the result will be determined by the selector, and this flag is not allowed to set. Default is false.
func (o OptionsResponseOutput) ExpandGroups() pulumi.BoolOutput {
	return o.ApplyT(func(v OptionsResponse) bool { return v.ExpandGroups }).(pulumi.BoolOutput)
}

// Optional. If true and IamPolicyAnalysisQuery.resource_selector is not specified, the resource section of the result will expand any resource attached to an IAM policy to include resources lower in the resource hierarchy. For example, if the request analyzes for which resources user A has permission P, and the results include an IAM policy with P on a GCP folder, the results will also include resources in that folder with permission P. If true and IamPolicyAnalysisQuery.resource_selector is specified, the resource section of the result will expand the specified resource to include resources lower in the resource hierarchy. Only project or lower resources are supported. Folder and organization resource cannot be used together with this option. For example, if the request analyzes for which users have permission P on a GCP project with this option enabled, the results will include all users who have permission P on that project or any lower resource. Default is false.
func (o OptionsResponseOutput) ExpandResources() pulumi.BoolOutput {
	return o.ApplyT(func(v OptionsResponse) bool { return v.ExpandResources }).(pulumi.BoolOutput)
}

// Optional. If true, the access section of result will expand any roles appearing in IAM policy bindings to include their permissions. If IamPolicyAnalysisQuery.access_selector is specified, the access section of the result will be determined by the selector, and this flag is not allowed to set. Default is false.
func (o OptionsResponseOutput) ExpandRoles() pulumi.BoolOutput {
	return o.ApplyT(func(v OptionsResponse) bool { return v.ExpandRoles }).(pulumi.BoolOutput)
}

// Optional. If true, the result will output the relevant membership relationships between groups and other groups, and between groups and principals. Default is false.
func (o OptionsResponseOutput) OutputGroupEdges() pulumi.BoolOutput {
	return o.ApplyT(func(v OptionsResponse) bool { return v.OutputGroupEdges }).(pulumi.BoolOutput)
}

// Optional. If true, the result will output the relevant parent/child relationships between resources. Default is false.
func (o OptionsResponseOutput) OutputResourceEdges() pulumi.BoolOutput {
	return o.ApplyT(func(v OptionsResponse) bool { return v.OutputResourceEdges }).(pulumi.BoolOutput)
}

// A Pub/Sub destination.
type PubsubDestination struct {
	// The name of the Pub/Sub topic to publish to. Example: `projects/PROJECT_ID/topics/TOPIC_ID`.
	Topic *string `pulumi:"topic"`
}

// PubsubDestinationInput is an input type that accepts PubsubDestinationArgs and PubsubDestinationOutput values.
// You can construct a concrete instance of `PubsubDestinationInput` via:
//
//          PubsubDestinationArgs{...}
type PubsubDestinationInput interface {
	pulumi.Input

	ToPubsubDestinationOutput() PubsubDestinationOutput
	ToPubsubDestinationOutputWithContext(context.Context) PubsubDestinationOutput
}

// A Pub/Sub destination.
type PubsubDestinationArgs struct {
	// The name of the Pub/Sub topic to publish to. Example: `projects/PROJECT_ID/topics/TOPIC_ID`.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (PubsubDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubDestination)(nil)).Elem()
}

func (i PubsubDestinationArgs) ToPubsubDestinationOutput() PubsubDestinationOutput {
	return i.ToPubsubDestinationOutputWithContext(context.Background())
}

func (i PubsubDestinationArgs) ToPubsubDestinationOutputWithContext(ctx context.Context) PubsubDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationOutput)
}

func (i PubsubDestinationArgs) ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput {
	return i.ToPubsubDestinationPtrOutputWithContext(context.Background())
}

func (i PubsubDestinationArgs) ToPubsubDestinationPtrOutputWithContext(ctx context.Context) PubsubDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationOutput).ToPubsubDestinationPtrOutputWithContext(ctx)
}

// PubsubDestinationPtrInput is an input type that accepts PubsubDestinationArgs, PubsubDestinationPtr and PubsubDestinationPtrOutput values.
// You can construct a concrete instance of `PubsubDestinationPtrInput` via:
//
//          PubsubDestinationArgs{...}
//
//  or:
//
//          nil
type PubsubDestinationPtrInput interface {
	pulumi.Input

	ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput
	ToPubsubDestinationPtrOutputWithContext(context.Context) PubsubDestinationPtrOutput
}

type pubsubDestinationPtrType PubsubDestinationArgs

func PubsubDestinationPtr(v *PubsubDestinationArgs) PubsubDestinationPtrInput {
	return (*pubsubDestinationPtrType)(v)
}

func (*pubsubDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubDestination)(nil)).Elem()
}

func (i *pubsubDestinationPtrType) ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput {
	return i.ToPubsubDestinationPtrOutputWithContext(context.Background())
}

func (i *pubsubDestinationPtrType) ToPubsubDestinationPtrOutputWithContext(ctx context.Context) PubsubDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationPtrOutput)
}

// A Pub/Sub destination.
type PubsubDestinationOutput struct{ *pulumi.OutputState }

func (PubsubDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubDestination)(nil)).Elem()
}

func (o PubsubDestinationOutput) ToPubsubDestinationOutput() PubsubDestinationOutput {
	return o
}

func (o PubsubDestinationOutput) ToPubsubDestinationOutputWithContext(ctx context.Context) PubsubDestinationOutput {
	return o
}

func (o PubsubDestinationOutput) ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput {
	return o.ToPubsubDestinationPtrOutputWithContext(context.Background())
}

func (o PubsubDestinationOutput) ToPubsubDestinationPtrOutputWithContext(ctx context.Context) PubsubDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PubsubDestination) *PubsubDestination {
		return &v
	}).(PubsubDestinationPtrOutput)
}

// The name of the Pub/Sub topic to publish to. Example: `projects/PROJECT_ID/topics/TOPIC_ID`.
func (o PubsubDestinationOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PubsubDestination) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type PubsubDestinationPtrOutput struct{ *pulumi.OutputState }

func (PubsubDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubDestination)(nil)).Elem()
}

func (o PubsubDestinationPtrOutput) ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput {
	return o
}

func (o PubsubDestinationPtrOutput) ToPubsubDestinationPtrOutputWithContext(ctx context.Context) PubsubDestinationPtrOutput {
	return o
}

func (o PubsubDestinationPtrOutput) Elem() PubsubDestinationOutput {
	return o.ApplyT(func(v *PubsubDestination) PubsubDestination {
		if v != nil {
			return *v
		}
		var ret PubsubDestination
		return ret
	}).(PubsubDestinationOutput)
}

// The name of the Pub/Sub topic to publish to. Example: `projects/PROJECT_ID/topics/TOPIC_ID`.
func (o PubsubDestinationPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubDestination) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

// A Pub/Sub destination.
type PubsubDestinationResponse struct {
	// The name of the Pub/Sub topic to publish to. Example: `projects/PROJECT_ID/topics/TOPIC_ID`.
	Topic string `pulumi:"topic"`
}

// A Pub/Sub destination.
type PubsubDestinationResponseOutput struct{ *pulumi.OutputState }

func (PubsubDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubDestinationResponse)(nil)).Elem()
}

func (o PubsubDestinationResponseOutput) ToPubsubDestinationResponseOutput() PubsubDestinationResponseOutput {
	return o
}

func (o PubsubDestinationResponseOutput) ToPubsubDestinationResponseOutputWithContext(ctx context.Context) PubsubDestinationResponseOutput {
	return o
}

// The name of the Pub/Sub topic to publish to. Example: `projects/PROJECT_ID/topics/TOPIC_ID`.
func (o PubsubDestinationResponseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v PubsubDestinationResponse) string { return v.Topic }).(pulumi.StringOutput)
}

// The query content.
type QueryContent struct {
	// An IAM Policy Analysis query, which could be used in the AssetService.AnalyzeIamPolicy rpc or the AssetService.AnalyzeIamPolicyLongrunning rpc.
	IamPolicyAnalysisQuery *IamPolicyAnalysisQuery `pulumi:"iamPolicyAnalysisQuery"`
}

// QueryContentInput is an input type that accepts QueryContentArgs and QueryContentOutput values.
// You can construct a concrete instance of `QueryContentInput` via:
//
//          QueryContentArgs{...}
type QueryContentInput interface {
	pulumi.Input

	ToQueryContentOutput() QueryContentOutput
	ToQueryContentOutputWithContext(context.Context) QueryContentOutput
}

// The query content.
type QueryContentArgs struct {
	// An IAM Policy Analysis query, which could be used in the AssetService.AnalyzeIamPolicy rpc or the AssetService.AnalyzeIamPolicyLongrunning rpc.
	IamPolicyAnalysisQuery IamPolicyAnalysisQueryPtrInput `pulumi:"iamPolicyAnalysisQuery"`
}

func (QueryContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryContent)(nil)).Elem()
}

func (i QueryContentArgs) ToQueryContentOutput() QueryContentOutput {
	return i.ToQueryContentOutputWithContext(context.Background())
}

func (i QueryContentArgs) ToQueryContentOutputWithContext(ctx context.Context) QueryContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryContentOutput)
}

func (i QueryContentArgs) ToQueryContentPtrOutput() QueryContentPtrOutput {
	return i.ToQueryContentPtrOutputWithContext(context.Background())
}

func (i QueryContentArgs) ToQueryContentPtrOutputWithContext(ctx context.Context) QueryContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryContentOutput).ToQueryContentPtrOutputWithContext(ctx)
}

// QueryContentPtrInput is an input type that accepts QueryContentArgs, QueryContentPtr and QueryContentPtrOutput values.
// You can construct a concrete instance of `QueryContentPtrInput` via:
//
//          QueryContentArgs{...}
//
//  or:
//
//          nil
type QueryContentPtrInput interface {
	pulumi.Input

	ToQueryContentPtrOutput() QueryContentPtrOutput
	ToQueryContentPtrOutputWithContext(context.Context) QueryContentPtrOutput
}

type queryContentPtrType QueryContentArgs

func QueryContentPtr(v *QueryContentArgs) QueryContentPtrInput {
	return (*queryContentPtrType)(v)
}

func (*queryContentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryContent)(nil)).Elem()
}

func (i *queryContentPtrType) ToQueryContentPtrOutput() QueryContentPtrOutput {
	return i.ToQueryContentPtrOutputWithContext(context.Background())
}

func (i *queryContentPtrType) ToQueryContentPtrOutputWithContext(ctx context.Context) QueryContentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryContentPtrOutput)
}

// The query content.
type QueryContentOutput struct{ *pulumi.OutputState }

func (QueryContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryContent)(nil)).Elem()
}

func (o QueryContentOutput) ToQueryContentOutput() QueryContentOutput {
	return o
}

func (o QueryContentOutput) ToQueryContentOutputWithContext(ctx context.Context) QueryContentOutput {
	return o
}

func (o QueryContentOutput) ToQueryContentPtrOutput() QueryContentPtrOutput {
	return o.ToQueryContentPtrOutputWithContext(context.Background())
}

func (o QueryContentOutput) ToQueryContentPtrOutputWithContext(ctx context.Context) QueryContentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueryContent) *QueryContent {
		return &v
	}).(QueryContentPtrOutput)
}

// An IAM Policy Analysis query, which could be used in the AssetService.AnalyzeIamPolicy rpc or the AssetService.AnalyzeIamPolicyLongrunning rpc.
func (o QueryContentOutput) IamPolicyAnalysisQuery() IamPolicyAnalysisQueryPtrOutput {
	return o.ApplyT(func(v QueryContent) *IamPolicyAnalysisQuery { return v.IamPolicyAnalysisQuery }).(IamPolicyAnalysisQueryPtrOutput)
}

type QueryContentPtrOutput struct{ *pulumi.OutputState }

func (QueryContentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryContent)(nil)).Elem()
}

func (o QueryContentPtrOutput) ToQueryContentPtrOutput() QueryContentPtrOutput {
	return o
}

func (o QueryContentPtrOutput) ToQueryContentPtrOutputWithContext(ctx context.Context) QueryContentPtrOutput {
	return o
}

func (o QueryContentPtrOutput) Elem() QueryContentOutput {
	return o.ApplyT(func(v *QueryContent) QueryContent {
		if v != nil {
			return *v
		}
		var ret QueryContent
		return ret
	}).(QueryContentOutput)
}

// An IAM Policy Analysis query, which could be used in the AssetService.AnalyzeIamPolicy rpc or the AssetService.AnalyzeIamPolicyLongrunning rpc.
func (o QueryContentPtrOutput) IamPolicyAnalysisQuery() IamPolicyAnalysisQueryPtrOutput {
	return o.ApplyT(func(v *QueryContent) *IamPolicyAnalysisQuery {
		if v == nil {
			return nil
		}
		return v.IamPolicyAnalysisQuery
	}).(IamPolicyAnalysisQueryPtrOutput)
}

// The query content.
type QueryContentResponse struct {
	// An IAM Policy Analysis query, which could be used in the AssetService.AnalyzeIamPolicy rpc or the AssetService.AnalyzeIamPolicyLongrunning rpc.
	IamPolicyAnalysisQuery IamPolicyAnalysisQueryResponse `pulumi:"iamPolicyAnalysisQuery"`
}

// The query content.
type QueryContentResponseOutput struct{ *pulumi.OutputState }

func (QueryContentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryContentResponse)(nil)).Elem()
}

func (o QueryContentResponseOutput) ToQueryContentResponseOutput() QueryContentResponseOutput {
	return o
}

func (o QueryContentResponseOutput) ToQueryContentResponseOutputWithContext(ctx context.Context) QueryContentResponseOutput {
	return o
}

// An IAM Policy Analysis query, which could be used in the AssetService.AnalyzeIamPolicy rpc or the AssetService.AnalyzeIamPolicyLongrunning rpc.
func (o QueryContentResponseOutput) IamPolicyAnalysisQuery() IamPolicyAnalysisQueryResponseOutput {
	return o.ApplyT(func(v QueryContentResponse) IamPolicyAnalysisQueryResponse { return v.IamPolicyAnalysisQuery }).(IamPolicyAnalysisQueryResponseOutput)
}

// Specifies the resource to analyze for access policies, which may be set directly on the resource, or on ancestors such as organizations, folders or projects.
type ResourceSelector struct {
	// The [full resource name] (https://cloud.google.com/asset-inventory/docs/resource-name-format) of a resource of [supported resource types](https://cloud.google.com/asset-inventory/docs/supported-asset-types#analyzable_asset_types).
	FullResourceName string `pulumi:"fullResourceName"`
}

// ResourceSelectorInput is an input type that accepts ResourceSelectorArgs and ResourceSelectorOutput values.
// You can construct a concrete instance of `ResourceSelectorInput` via:
//
//          ResourceSelectorArgs{...}
type ResourceSelectorInput interface {
	pulumi.Input

	ToResourceSelectorOutput() ResourceSelectorOutput
	ToResourceSelectorOutputWithContext(context.Context) ResourceSelectorOutput
}

// Specifies the resource to analyze for access policies, which may be set directly on the resource, or on ancestors such as organizations, folders or projects.
type ResourceSelectorArgs struct {
	// The [full resource name] (https://cloud.google.com/asset-inventory/docs/resource-name-format) of a resource of [supported resource types](https://cloud.google.com/asset-inventory/docs/supported-asset-types#analyzable_asset_types).
	FullResourceName pulumi.StringInput `pulumi:"fullResourceName"`
}

func (ResourceSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSelector)(nil)).Elem()
}

func (i ResourceSelectorArgs) ToResourceSelectorOutput() ResourceSelectorOutput {
	return i.ToResourceSelectorOutputWithContext(context.Background())
}

func (i ResourceSelectorArgs) ToResourceSelectorOutputWithContext(ctx context.Context) ResourceSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSelectorOutput)
}

func (i ResourceSelectorArgs) ToResourceSelectorPtrOutput() ResourceSelectorPtrOutput {
	return i.ToResourceSelectorPtrOutputWithContext(context.Background())
}

func (i ResourceSelectorArgs) ToResourceSelectorPtrOutputWithContext(ctx context.Context) ResourceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSelectorOutput).ToResourceSelectorPtrOutputWithContext(ctx)
}

// ResourceSelectorPtrInput is an input type that accepts ResourceSelectorArgs, ResourceSelectorPtr and ResourceSelectorPtrOutput values.
// You can construct a concrete instance of `ResourceSelectorPtrInput` via:
//
//          ResourceSelectorArgs{...}
//
//  or:
//
//          nil
type ResourceSelectorPtrInput interface {
	pulumi.Input

	ToResourceSelectorPtrOutput() ResourceSelectorPtrOutput
	ToResourceSelectorPtrOutputWithContext(context.Context) ResourceSelectorPtrOutput
}

type resourceSelectorPtrType ResourceSelectorArgs

func ResourceSelectorPtr(v *ResourceSelectorArgs) ResourceSelectorPtrInput {
	return (*resourceSelectorPtrType)(v)
}

func (*resourceSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSelector)(nil)).Elem()
}

func (i *resourceSelectorPtrType) ToResourceSelectorPtrOutput() ResourceSelectorPtrOutput {
	return i.ToResourceSelectorPtrOutputWithContext(context.Background())
}

func (i *resourceSelectorPtrType) ToResourceSelectorPtrOutputWithContext(ctx context.Context) ResourceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSelectorPtrOutput)
}

// Specifies the resource to analyze for access policies, which may be set directly on the resource, or on ancestors such as organizations, folders or projects.
type ResourceSelectorOutput struct{ *pulumi.OutputState }

func (ResourceSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSelector)(nil)).Elem()
}

func (o ResourceSelectorOutput) ToResourceSelectorOutput() ResourceSelectorOutput {
	return o
}

func (o ResourceSelectorOutput) ToResourceSelectorOutputWithContext(ctx context.Context) ResourceSelectorOutput {
	return o
}

func (o ResourceSelectorOutput) ToResourceSelectorPtrOutput() ResourceSelectorPtrOutput {
	return o.ToResourceSelectorPtrOutputWithContext(context.Background())
}

func (o ResourceSelectorOutput) ToResourceSelectorPtrOutputWithContext(ctx context.Context) ResourceSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSelector) *ResourceSelector {
		return &v
	}).(ResourceSelectorPtrOutput)
}

// The [full resource name] (https://cloud.google.com/asset-inventory/docs/resource-name-format) of a resource of [supported resource types](https://cloud.google.com/asset-inventory/docs/supported-asset-types#analyzable_asset_types).
func (o ResourceSelectorOutput) FullResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSelector) string { return v.FullResourceName }).(pulumi.StringOutput)
}

type ResourceSelectorPtrOutput struct{ *pulumi.OutputState }

func (ResourceSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSelector)(nil)).Elem()
}

func (o ResourceSelectorPtrOutput) ToResourceSelectorPtrOutput() ResourceSelectorPtrOutput {
	return o
}

func (o ResourceSelectorPtrOutput) ToResourceSelectorPtrOutputWithContext(ctx context.Context) ResourceSelectorPtrOutput {
	return o
}

func (o ResourceSelectorPtrOutput) Elem() ResourceSelectorOutput {
	return o.ApplyT(func(v *ResourceSelector) ResourceSelector {
		if v != nil {
			return *v
		}
		var ret ResourceSelector
		return ret
	}).(ResourceSelectorOutput)
}

// The [full resource name] (https://cloud.google.com/asset-inventory/docs/resource-name-format) of a resource of [supported resource types](https://cloud.google.com/asset-inventory/docs/supported-asset-types#analyzable_asset_types).
func (o ResourceSelectorPtrOutput) FullResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSelector) *string {
		if v == nil {
			return nil
		}
		return &v.FullResourceName
	}).(pulumi.StringPtrOutput)
}

// Specifies the resource to analyze for access policies, which may be set directly on the resource, or on ancestors such as organizations, folders or projects.
type ResourceSelectorResponse struct {
	// The [full resource name] (https://cloud.google.com/asset-inventory/docs/resource-name-format) of a resource of [supported resource types](https://cloud.google.com/asset-inventory/docs/supported-asset-types#analyzable_asset_types).
	FullResourceName string `pulumi:"fullResourceName"`
}

// Specifies the resource to analyze for access policies, which may be set directly on the resource, or on ancestors such as organizations, folders or projects.
type ResourceSelectorResponseOutput struct{ *pulumi.OutputState }

func (ResourceSelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSelectorResponse)(nil)).Elem()
}

func (o ResourceSelectorResponseOutput) ToResourceSelectorResponseOutput() ResourceSelectorResponseOutput {
	return o
}

func (o ResourceSelectorResponseOutput) ToResourceSelectorResponseOutputWithContext(ctx context.Context) ResourceSelectorResponseOutput {
	return o
}

// The [full resource name] (https://cloud.google.com/asset-inventory/docs/resource-name-format) of a resource of [supported resource types](https://cloud.google.com/asset-inventory/docs/supported-asset-types#analyzable_asset_types).
func (o ResourceSelectorResponseOutput) FullResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSelectorResponse) string { return v.FullResourceName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessSelectorInput)(nil)).Elem(), AccessSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessSelectorPtrInput)(nil)).Elem(), AccessSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionContextInput)(nil)).Elem(), ConditionContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConditionContextPtrInput)(nil)).Elem(), ConditionContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeedOutputConfigInput)(nil)).Elem(), FeedOutputConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyAnalysisQueryInput)(nil)).Elem(), IamPolicyAnalysisQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyAnalysisQueryPtrInput)(nil)).Elem(), IamPolicyAnalysisQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentitySelectorInput)(nil)).Elem(), IdentitySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentitySelectorPtrInput)(nil)).Elem(), IdentitySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OptionsInput)(nil)).Elem(), OptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OptionsPtrInput)(nil)).Elem(), OptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PubsubDestinationInput)(nil)).Elem(), PubsubDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PubsubDestinationPtrInput)(nil)).Elem(), PubsubDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryContentInput)(nil)).Elem(), QueryContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryContentPtrInput)(nil)).Elem(), QueryContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSelectorInput)(nil)).Elem(), ResourceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSelectorPtrInput)(nil)).Elem(), ResourceSelectorArgs{})
	pulumi.RegisterOutputType(AccessSelectorOutput{})
	pulumi.RegisterOutputType(AccessSelectorPtrOutput{})
	pulumi.RegisterOutputType(AccessSelectorResponseOutput{})
	pulumi.RegisterOutputType(ConditionContextOutput{})
	pulumi.RegisterOutputType(ConditionContextPtrOutput{})
	pulumi.RegisterOutputType(ConditionContextResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(FeedOutputConfigOutput{})
	pulumi.RegisterOutputType(FeedOutputConfigResponseOutput{})
	pulumi.RegisterOutputType(IamPolicyAnalysisQueryOutput{})
	pulumi.RegisterOutputType(IamPolicyAnalysisQueryPtrOutput{})
	pulumi.RegisterOutputType(IamPolicyAnalysisQueryResponseOutput{})
	pulumi.RegisterOutputType(IdentitySelectorOutput{})
	pulumi.RegisterOutputType(IdentitySelectorPtrOutput{})
	pulumi.RegisterOutputType(IdentitySelectorResponseOutput{})
	pulumi.RegisterOutputType(OptionsOutput{})
	pulumi.RegisterOutputType(OptionsPtrOutput{})
	pulumi.RegisterOutputType(OptionsResponseOutput{})
	pulumi.RegisterOutputType(PubsubDestinationOutput{})
	pulumi.RegisterOutputType(PubsubDestinationPtrOutput{})
	pulumi.RegisterOutputType(PubsubDestinationResponseOutput{})
	pulumi.RegisterOutputType(QueryContentOutput{})
	pulumi.RegisterOutputType(QueryContentPtrOutput{})
	pulumi.RegisterOutputType(QueryContentResponseOutput{})
	pulumi.RegisterOutputType(ResourceSelectorOutput{})
	pulumi.RegisterOutputType(ResourceSelectorPtrOutput{})
	pulumi.RegisterOutputType(ResourceSelectorResponseOutput{})
}
