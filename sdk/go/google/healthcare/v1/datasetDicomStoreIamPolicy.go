// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
type DatasetDicomStoreIamPolicy struct {
	pulumi.CustomResourceState
}

// NewDatasetDicomStoreIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewDatasetDicomStoreIamPolicy(ctx *pulumi.Context,
	name string, args *DatasetDicomStoreIamPolicyArgs, opts ...pulumi.ResourceOption) (*DatasetDicomStoreIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetsId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetsId'")
	}
	if args.DicomStoresId == nil {
		return nil, errors.New("invalid value for required argument 'DicomStoresId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource DatasetDicomStoreIamPolicy
	err := ctx.RegisterResource("google-cloud:healthcare/v1:DatasetDicomStoreIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetDicomStoreIamPolicy gets an existing DatasetDicomStoreIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetDicomStoreIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetDicomStoreIamPolicyState, opts ...pulumi.ResourceOption) (*DatasetDicomStoreIamPolicy, error) {
	var resource DatasetDicomStoreIamPolicy
	err := ctx.ReadResource("google-cloud:healthcare/v1:DatasetDicomStoreIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetDicomStoreIamPolicy resources.
type datasetDicomStoreIamPolicyState struct {
}

type DatasetDicomStoreIamPolicyState struct {
}

func (DatasetDicomStoreIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetDicomStoreIamPolicyState)(nil)).Elem()
}

type datasetDicomStoreIamPolicyArgs struct {
	DatasetsId    string `pulumi:"datasetsId"`
	DicomStoresId string `pulumi:"dicomStoresId"`
	LocationsId   string `pulumi:"locationsId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a DatasetDicomStoreIamPolicy resource.
type DatasetDicomStoreIamPolicyArgs struct {
	DatasetsId    pulumi.StringInput
	DicomStoresId pulumi.StringInput
	LocationsId   pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (DatasetDicomStoreIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetDicomStoreIamPolicyArgs)(nil)).Elem()
}

type DatasetDicomStoreIamPolicyInput interface {
	pulumi.Input

	ToDatasetDicomStoreIamPolicyOutput() DatasetDicomStoreIamPolicyOutput
	ToDatasetDicomStoreIamPolicyOutputWithContext(ctx context.Context) DatasetDicomStoreIamPolicyOutput
}

func (*DatasetDicomStoreIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDicomStoreIamPolicy)(nil))
}

func (i *DatasetDicomStoreIamPolicy) ToDatasetDicomStoreIamPolicyOutput() DatasetDicomStoreIamPolicyOutput {
	return i.ToDatasetDicomStoreIamPolicyOutputWithContext(context.Background())
}

func (i *DatasetDicomStoreIamPolicy) ToDatasetDicomStoreIamPolicyOutputWithContext(ctx context.Context) DatasetDicomStoreIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDicomStoreIamPolicyOutput)
}

type DatasetDicomStoreIamPolicyOutput struct {
	*pulumi.OutputState
}

func (DatasetDicomStoreIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetDicomStoreIamPolicy)(nil))
}

func (o DatasetDicomStoreIamPolicyOutput) ToDatasetDicomStoreIamPolicyOutput() DatasetDicomStoreIamPolicyOutput {
	return o
}

func (o DatasetDicomStoreIamPolicyOutput) ToDatasetDicomStoreIamPolicyOutputWithContext(ctx context.Context) DatasetDicomStoreIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DatasetDicomStoreIamPolicyOutput{})
}
