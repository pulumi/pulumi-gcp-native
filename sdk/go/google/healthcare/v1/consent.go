// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new Consent in the parent consent store.
type Consent struct {
	pulumi.CustomResourceState

	// The resource name of the Consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
	ConsentArtifact pulumi.StringOutput `pulumi:"consentArtifact"`
	ConsentStoreId  pulumi.StringOutput `pulumi:"consentStoreId"`
	DatasetId       pulumi.StringOutput `pulumi:"datasetId"`
	// Timestamp in UTC of when this Consent is considered expired.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	Location   pulumi.StringOutput `pulumi:"location"`
	// Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. Represents a user's consent in terms of the resources that can be accessed and under what conditions.
	Policies GoogleCloudHealthcareV1ConsentPolicyResponseArrayOutput `pulumi:"policies"`
	Project  pulumi.StringOutput                                     `pulumi:"project"`
	// The timestamp that the revision was created.
	RevisionCreateTime pulumi.StringOutput `pulumi:"revisionCreateTime"`
	// The revision ID of the Consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending `@{revision_id}` to the Consent's resource name.
	RevisionId pulumi.StringOutput `pulumi:"revisionId"`
	// Indicates the current state of this Consent.
	State pulumi.StringOutput `pulumi:"state"`
	// Input only. The time to live for this Consent from when it is created.
	Ttl pulumi.StringOutput `pulumi:"ttl"`
	// User's UUID provided by the client.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewConsent registers a new resource with the given unique name, arguments, and options.
func NewConsent(ctx *pulumi.Context,
	name string, args *ConsentArgs, opts ...pulumi.ResourceOption) (*Consent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsentArtifact == nil {
		return nil, errors.New("invalid value for required argument 'ConsentArtifact'")
	}
	if args.ConsentStoreId == nil {
		return nil, errors.New("invalid value for required argument 'ConsentStoreId'")
	}
	if args.DatasetId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetId'")
	}
	if args.State == nil {
		return nil, errors.New("invalid value for required argument 'State'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"consentStoreId",
		"datasetId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Consent
	err := ctx.RegisterResource("google-native:healthcare/v1:Consent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsent gets an existing Consent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsentState, opts ...pulumi.ResourceOption) (*Consent, error) {
	var resource Consent
	err := ctx.ReadResource("google-native:healthcare/v1:Consent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Consent resources.
type consentState struct {
}

type ConsentState struct {
}

func (ConsentState) ElementType() reflect.Type {
	return reflect.TypeOf((*consentState)(nil)).Elem()
}

type consentArgs struct {
	// The resource name of the Consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
	ConsentArtifact string `pulumi:"consentArtifact"`
	ConsentStoreId  string `pulumi:"consentStoreId"`
	DatasetId       string `pulumi:"datasetId"`
	// Timestamp in UTC of when this Consent is considered expired.
	ExpireTime *string `pulumi:"expireTime"`
	Location   *string `pulumi:"location"`
	// Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.
	Metadata map[string]string `pulumi:"metadata"`
	// Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation.
	Name *string `pulumi:"name"`
	// Optional. Represents a user's consent in terms of the resources that can be accessed and under what conditions.
	Policies []GoogleCloudHealthcareV1ConsentPolicy `pulumi:"policies"`
	Project  *string                                `pulumi:"project"`
	// Indicates the current state of this Consent.
	State ConsentStateEnum `pulumi:"state"`
	// Input only. The time to live for this Consent from when it is created.
	Ttl *string `pulumi:"ttl"`
	// User's UUID provided by the client.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a Consent resource.
type ConsentArgs struct {
	// The resource name of the Consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
	ConsentArtifact pulumi.StringInput
	ConsentStoreId  pulumi.StringInput
	DatasetId       pulumi.StringInput
	// Timestamp in UTC of when this Consent is considered expired.
	ExpireTime pulumi.StringPtrInput
	Location   pulumi.StringPtrInput
	// Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.
	Metadata pulumi.StringMapInput
	// Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation.
	Name pulumi.StringPtrInput
	// Optional. Represents a user's consent in terms of the resources that can be accessed and under what conditions.
	Policies GoogleCloudHealthcareV1ConsentPolicyArrayInput
	Project  pulumi.StringPtrInput
	// Indicates the current state of this Consent.
	State ConsentStateEnumInput
	// Input only. The time to live for this Consent from when it is created.
	Ttl pulumi.StringPtrInput
	// User's UUID provided by the client.
	UserId pulumi.StringInput
}

func (ConsentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consentArgs)(nil)).Elem()
}

type ConsentInput interface {
	pulumi.Input

	ToConsentOutput() ConsentOutput
	ToConsentOutputWithContext(ctx context.Context) ConsentOutput
}

func (*Consent) ElementType() reflect.Type {
	return reflect.TypeOf((**Consent)(nil)).Elem()
}

func (i *Consent) ToConsentOutput() ConsentOutput {
	return i.ToConsentOutputWithContext(context.Background())
}

func (i *Consent) ToConsentOutputWithContext(ctx context.Context) ConsentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsentOutput)
}

type ConsentOutput struct{ *pulumi.OutputState }

func (ConsentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Consent)(nil)).Elem()
}

func (o ConsentOutput) ToConsentOutput() ConsentOutput {
	return o
}

func (o ConsentOutput) ToConsentOutputWithContext(ctx context.Context) ConsentOutput {
	return o
}

// The resource name of the Consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
func (o ConsentOutput) ConsentArtifact() pulumi.StringOutput {
	return o.ApplyT(func(v *Consent) pulumi.StringOutput { return v.ConsentArtifact }).(pulumi.StringOutput)
}

func (o ConsentOutput) ConsentStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *Consent) pulumi.StringOutput { return v.ConsentStoreId }).(pulumi.StringOutput)
}

func (o ConsentOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Consent) pulumi.StringOutput { return v.DatasetId }).(pulumi.StringOutput)
}

// Timestamp in UTC of when this Consent is considered expired.
func (o ConsentOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Consent) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

func (o ConsentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Consent) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.
func (o ConsentOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Consent) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation.
func (o ConsentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Consent) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional. Represents a user's consent in terms of the resources that can be accessed and under what conditions.
func (o ConsentOutput) Policies() GoogleCloudHealthcareV1ConsentPolicyResponseArrayOutput {
	return o.ApplyT(func(v *Consent) GoogleCloudHealthcareV1ConsentPolicyResponseArrayOutput { return v.Policies }).(GoogleCloudHealthcareV1ConsentPolicyResponseArrayOutput)
}

func (o ConsentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Consent) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The timestamp that the revision was created.
func (o ConsentOutput) RevisionCreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Consent) pulumi.StringOutput { return v.RevisionCreateTime }).(pulumi.StringOutput)
}

// The revision ID of the Consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending `@{revision_id}` to the Consent's resource name.
func (o ConsentOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Consent) pulumi.StringOutput { return v.RevisionId }).(pulumi.StringOutput)
}

// Indicates the current state of this Consent.
func (o ConsentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Consent) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Input only. The time to live for this Consent from when it is created.
func (o ConsentOutput) Ttl() pulumi.StringOutput {
	return o.ApplyT(func(v *Consent) pulumi.StringOutput { return v.Ttl }).(pulumi.StringOutput)
}

// User's UUID provided by the client.
func (o ConsentOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *Consent) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConsentInput)(nil)).Elem(), &Consent{})
	pulumi.RegisterOutputType(ConsentOutput{})
}
