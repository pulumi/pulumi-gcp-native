// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Required. The category of the attribute. The value of this field cannot be changed after creation.
type AttributeDefinitionCategory pulumi.String

const (
	// No category specified. This option is invalid.
	AttributeDefinitionCategoryCategoryUnspecified = AttributeDefinitionCategory("CATEGORY_UNSPECIFIED")
	// Specify this category when this attribute describes the properties of resources. For example, data anonymity or data type.
	AttributeDefinitionCategoryResource = AttributeDefinitionCategory("RESOURCE")
	// Specify this category when this attribute describes the properties of requests. For example, requester's role or requester's organization.
	AttributeDefinitionCategoryRequest = AttributeDefinitionCategory("REQUEST")
)

func (AttributeDefinitionCategory) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AttributeDefinitionCategory) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttributeDefinitionCategory) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttributeDefinitionCategory) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AttributeDefinitionCategory) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The log type that this config enables.
type AuditLogConfigLogType pulumi.String

const (
	// Default case. Should never be this.
	AuditLogConfigLogTypeLogTypeUnspecified = AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED")
	// Admin reads. Example: CloudIAM getIamPolicy
	AuditLogConfigLogTypeAdminRead = AuditLogConfigLogType("ADMIN_READ")
	// Data writes. Example: CloudSQL Users create
	AuditLogConfigLogTypeDataWrite = AuditLogConfigLogType("DATA_WRITE")
	// Data reads. Example: CloudSQL Users list
	AuditLogConfigLogTypeDataRead = AuditLogConfigLogType("DATA_READ")
)

func (AuditLogConfigLogType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AuditLogConfigLogType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Required. Indicates the current state of this Consent.
type ConsentStateEnum pulumi.String

const (
	// No state specified.
	ConsentStateEnumStateUnspecified = ConsentStateEnum("STATE_UNSPECIFIED")
	// The Consent is active and is considered when evaluating a user's consent on resources.
	ConsentStateEnumActive = ConsentStateEnum("ACTIVE")
	// When a Consent is updated, the current version is archived and a new one is created with its state set to the updated Consent's previous state.
	ConsentStateEnumArchived = ConsentStateEnum("ARCHIVED")
	// A revoked Consent is not considered when evaluating a user's consent on resources.
	ConsentStateEnumRevoked = ConsentStateEnum("REVOKED")
	// A draft Consent is not considered when evaluating a user's consent on resources unless explicitly specified.
	ConsentStateEnumDraft = ConsentStateEnum("DRAFT")
	// When a draft Consent is rejected by a user, it is set to a rejected state. A rejected Consent is not considered when evaluating a user's consent on resources.
	ConsentStateEnumRejected = ConsentStateEnum("REJECTED")
)

func (ConsentStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ConsentStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConsentStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConsentStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConsentStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Immutable. The FHIR specification version that this FHIR store supports natively. This field is immutable after store creation. Requests are rejected if they contain FHIR resources of a different version. Version is required for every FHIR store.
type FhirStoreVersion pulumi.String

const (
	// Users must specify a version on store creation or an error is returned.
	FhirStoreVersionVersionUnspecified = FhirStoreVersion("VERSION_UNSPECIFIED")
	// Draft Standard for Trial Use, [Release 2](https://www.hl7.org/fhir/DSTU2)
	FhirStoreVersionDstu2 = FhirStoreVersion("DSTU2")
	// Standard for Trial Use, [Release 3](https://www.hl7.org/fhir/STU3)
	FhirStoreVersionStu3 = FhirStoreVersion("STU3")
	// [Release 4](https://www.hl7.org/fhir/R4)
	FhirStoreVersionR4 = FhirStoreVersion("R4")
)

func (FhirStoreVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e FhirStoreVersion) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FhirStoreVersion) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FhirStoreVersion) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FhirStoreVersion) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.
type GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDisposition pulumi.String

const (
	// Default behavior is the same as WRITE_EMPTY.
	GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDispositionWriteDispositionUnspecified = GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDisposition("WRITE_DISPOSITION_UNSPECIFIED")
	// Only export data if the destination tables are empty.
	GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDispositionWriteEmpty = GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDisposition("WRITE_EMPTY")
	// Erase all existing data in the tables before writing the instances.
	GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDispositionWriteTruncate = GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDisposition("WRITE_TRUNCATE")
	// Append data to the existing tables.
	GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDispositionWriteAppend = GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDisposition("WRITE_APPEND")
)

func (GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDisposition) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDisposition) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDisposition) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDisposition) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDisposition) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Specifies the output schema type. Schema type is required.
type SchemaConfigSchemaType pulumi.String

const (
	// No schema type specified. This type is unsupported.
	SchemaConfigSchemaTypeSchemaTypeUnspecified = SchemaConfigSchemaType("SCHEMA_TYPE_UNSPECIFIED")
	// Analytics schema defined by the FHIR community. See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md. BigQuery only allows a maximum of 10,000 columns per table. Due to this limitation, the server will not generate schemas for fields of type `Resource`, which can hold any resource type. The affected fields are `Parameters.parameter.resource`, `Bundle.entry.resource`, and `Bundle.entry.response.outcome`.
	SchemaConfigSchemaTypeAnalytics = SchemaConfigSchemaType("ANALYTICS")
)

func (SchemaConfigSchemaType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SchemaConfigSchemaType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchemaConfigSchemaType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchemaConfigSchemaType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SchemaConfigSchemaType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Determines how messages that fail to parse are handled.
type SchemaPackageSchematizedParsingType pulumi.String

const (
	// Unspecified schematized parsing type, equivalent to `SOFT_FAIL`.
	SchemaPackageSchematizedParsingTypeSchematizedParsingTypeUnspecified = SchemaPackageSchematizedParsingType("SCHEMATIZED_PARSING_TYPE_UNSPECIFIED")
	// Messages that fail to parse are still stored and ACKed but a parser error is stored in place of the schematized data.
	SchemaPackageSchematizedParsingTypeSoftFail = SchemaPackageSchematizedParsingType("SOFT_FAIL")
	// Messages that fail to parse are rejected from ingestion/insertion and return an error code.
	SchemaPackageSchematizedParsingTypeHardFail = SchemaPackageSchematizedParsingType("HARD_FAIL")
)

func (SchemaPackageSchematizedParsingType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SchemaPackageSchematizedParsingType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchemaPackageSchematizedParsingType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchemaPackageSchematizedParsingType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SchemaPackageSchematizedParsingType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types.
type TypePrimitive pulumi.String

const (
	// Not a primitive.
	TypePrimitivePrimitiveUnspecified = TypePrimitive("PRIMITIVE_UNSPECIFIED")
	// String primitive.
	TypePrimitiveString = TypePrimitive("STRING")
	// Element that can have unschematized children.
	TypePrimitiveVaries = TypePrimitive("VARIES")
	// Like STRING, but all delimiters below this element are ignored.
	TypePrimitiveUnescapedString = TypePrimitive("UNESCAPED_STRING")
)

func (TypePrimitive) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e TypePrimitive) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TypePrimitive) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TypePrimitive) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TypePrimitive) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
