// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Parses and stores an HL7v2 message. This method triggers an asynchronous notification to any Pub/Sub topic configured in Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the message. If an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter transmits the message when a notification is received.
type Message struct {
	pulumi.CustomResourceState
}

// NewMessage registers a new resource with the given unique name, arguments, and options.
func NewMessage(ctx *pulumi.Context,
	name string, args *MessageArgs, opts ...pulumi.ResourceOption) (*Message, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	var resource Message
	err := ctx.RegisterResource("google-cloud:healthcare/v1:Message", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMessage gets an existing Message resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMessage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MessageState, opts ...pulumi.ResourceOption) (*Message, error) {
	var resource Message
	err := ctx.ReadResource("google-cloud:healthcare/v1:Message", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Message resources.
type messageState struct {
}

type MessageState struct {
}

func (MessageState) ElementType() reflect.Type {
	return reflect.TypeOf((*messageState)(nil)).Elem()
}

type messageArgs struct {
	// HL7v2 message.
	Message *MessageType `pulumi:"message"`
	// The name of the dataset this message belongs to.
	Parent string `pulumi:"parent"`
}

// The set of arguments for constructing a Message resource.
type MessageArgs struct {
	// HL7v2 message.
	Message MessageTypePtrInput
	// The name of the dataset this message belongs to.
	Parent pulumi.StringInput
}

func (MessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*messageArgs)(nil)).Elem()
}

type MessageInput interface {
	pulumi.Input

	ToMessageOutput() MessageOutput
	ToMessageOutputWithContext(ctx context.Context) MessageOutput
}

func (*Message) ElementType() reflect.Type {
	return reflect.TypeOf((*Message)(nil))
}

func (i *Message) ToMessageOutput() MessageOutput {
	return i.ToMessageOutputWithContext(context.Background())
}

func (i *Message) ToMessageOutputWithContext(ctx context.Context) MessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageOutput)
}

type MessageOutput struct {
	*pulumi.OutputState
}

func (MessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Message)(nil))
}

func (o MessageOutput) ToMessageOutput() MessageOutput {
	return o
}

func (o MessageOutput) ToMessageOutputWithContext(ctx context.Context) MessageOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MessageOutput{})
}
