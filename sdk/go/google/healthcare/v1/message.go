// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Parses and stores an HL7v2 message. This method triggers an asynchronous notification to any Pub/Sub topic configured in Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the message. If an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter transmits the message when a notification is received.
type Message struct {
	pulumi.CustomResourceState

	// The datetime when the message was created. Set by the server.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Raw message bytes.
	Data pulumi.StringOutput `pulumi:"data"`
	// User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The message type for this message. MSH-9.1.
	MessageType pulumi.StringOutput `pulumi:"messageType"`
	// Resource name of the Message, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server.
	Name pulumi.StringOutput `pulumi:"name"`
	// The parsed version of the raw message data.
	ParsedData ParsedDataResponseOutput `pulumi:"parsedData"`
	// All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this message.
	PatientIds PatientIdResponseArrayOutput `pulumi:"patientIds"`
	// The parsed version of the raw message data schematized according to this store's schemas and type definitions.
	SchematizedData SchematizedDataResponseOutput `pulumi:"schematizedData"`
	// The hospital that this message came from. MSH-4.
	SendFacility pulumi.StringOutput `pulumi:"sendFacility"`
	// The datetime the sending application sent this message. MSH-7.
	SendTime pulumi.StringOutput `pulumi:"sendTime"`
}

// NewMessage registers a new resource with the given unique name, arguments, and options.
func NewMessage(ctx *pulumi.Context,
	name string, args *MessageArgs, opts ...pulumi.ResourceOption) (*Message, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetId'")
	}
	if args.Hl7V2StoreId == nil {
		return nil, errors.New("invalid value for required argument 'Hl7V2StoreId'")
	}
	var resource Message
	err := ctx.RegisterResource("google-native:healthcare/v1:Message", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMessage gets an existing Message resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMessage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MessageState, opts ...pulumi.ResourceOption) (*Message, error) {
	var resource Message
	err := ctx.ReadResource("google-native:healthcare/v1:Message", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Message resources.
type messageState struct {
}

type MessageState struct {
}

func (MessageState) ElementType() reflect.Type {
	return reflect.TypeOf((*messageState)(nil)).Elem()
}

type messageArgs struct {
	// Raw message bytes.
	Data         *string `pulumi:"data"`
	DatasetId    string  `pulumi:"datasetId"`
	Hl7V2StoreId string  `pulumi:"hl7V2StoreId"`
	// User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// The message type for this message. MSH-9.1.
	MessageType *string `pulumi:"messageType"`
	// Resource name of the Message, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server.
	Name *string `pulumi:"name"`
	// All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this message.
	PatientIds []PatientId `pulumi:"patientIds"`
	Project    *string     `pulumi:"project"`
	// The parsed version of the raw message data schematized according to this store's schemas and type definitions.
	SchematizedData *SchematizedData `pulumi:"schematizedData"`
	// The hospital that this message came from. MSH-4.
	SendFacility *string `pulumi:"sendFacility"`
	// The datetime the sending application sent this message. MSH-7.
	SendTime *string `pulumi:"sendTime"`
}

// The set of arguments for constructing a Message resource.
type MessageArgs struct {
	// Raw message bytes.
	Data         pulumi.StringPtrInput
	DatasetId    pulumi.StringInput
	Hl7V2StoreId pulumi.StringInput
	// User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// The message type for this message. MSH-9.1.
	MessageType pulumi.StringPtrInput
	// Resource name of the Message, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server.
	Name pulumi.StringPtrInput
	// All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this message.
	PatientIds PatientIdArrayInput
	Project    pulumi.StringPtrInput
	// The parsed version of the raw message data schematized according to this store's schemas and type definitions.
	SchematizedData SchematizedDataPtrInput
	// The hospital that this message came from. MSH-4.
	SendFacility pulumi.StringPtrInput
	// The datetime the sending application sent this message. MSH-7.
	SendTime pulumi.StringPtrInput
}

func (MessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*messageArgs)(nil)).Elem()
}

type MessageInput interface {
	pulumi.Input

	ToMessageOutput() MessageOutput
	ToMessageOutputWithContext(ctx context.Context) MessageOutput
}

func (*Message) ElementType() reflect.Type {
	return reflect.TypeOf((**Message)(nil)).Elem()
}

func (i *Message) ToMessageOutput() MessageOutput {
	return i.ToMessageOutputWithContext(context.Background())
}

func (i *Message) ToMessageOutputWithContext(ctx context.Context) MessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MessageOutput)
}

type MessageOutput struct{ *pulumi.OutputState }

func (MessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Message)(nil)).Elem()
}

func (o MessageOutput) ToMessageOutput() MessageOutput {
	return o
}

func (o MessageOutput) ToMessageOutputWithContext(ctx context.Context) MessageOutput {
	return o
}

// The datetime when the message was created. Set by the server.
func (o MessageOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Message) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Raw message bytes.
func (o MessageOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v *Message) pulumi.StringOutput { return v.Data }).(pulumi.StringOutput)
}

// User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
func (o MessageOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Message) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The message type for this message. MSH-9.1.
func (o MessageOutput) MessageType() pulumi.StringOutput {
	return o.ApplyT(func(v *Message) pulumi.StringOutput { return v.MessageType }).(pulumi.StringOutput)
}

// Resource name of the Message, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server.
func (o MessageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Message) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The parsed version of the raw message data.
func (o MessageOutput) ParsedData() ParsedDataResponseOutput {
	return o.ApplyT(func(v *Message) ParsedDataResponseOutput { return v.ParsedData }).(ParsedDataResponseOutput)
}

// All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this message.
func (o MessageOutput) PatientIds() PatientIdResponseArrayOutput {
	return o.ApplyT(func(v *Message) PatientIdResponseArrayOutput { return v.PatientIds }).(PatientIdResponseArrayOutput)
}

// The parsed version of the raw message data schematized according to this store's schemas and type definitions.
func (o MessageOutput) SchematizedData() SchematizedDataResponseOutput {
	return o.ApplyT(func(v *Message) SchematizedDataResponseOutput { return v.SchematizedData }).(SchematizedDataResponseOutput)
}

// The hospital that this message came from. MSH-4.
func (o MessageOutput) SendFacility() pulumi.StringOutput {
	return o.ApplyT(func(v *Message) pulumi.StringOutput { return v.SendFacility }).(pulumi.StringOutput)
}

// The datetime the sending application sent this message. MSH-7.
func (o MessageOutput) SendTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Message) pulumi.StringOutput { return v.SendTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MessageInput)(nil)).Elem(), &Message{})
	pulumi.RegisterOutputType(MessageOutput{})
}
