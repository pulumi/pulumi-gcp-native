// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a FHIR resource. Implements the FHIR standard create interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#create), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#create), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#create)), which creates a new resource with a server-assigned resource ID. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. On success, the response body contains a JSON-encoded representation of the resource as it was created on the server, including the server-assigned resource ID and version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `create`, see [Creating a FHIR resource](/healthcare/docs/how-tos/fhir-resources#creating_a_fhir_resource).
type HttpBody struct {
	pulumi.CustomResourceState
}

// NewHttpBody registers a new resource with the given unique name, arguments, and options.
func NewHttpBody(ctx *pulumi.Context,
	name string, args *HttpBodyArgs, opts ...pulumi.ResourceOption) (*HttpBody, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource HttpBody
	err := ctx.RegisterResource("google-cloud:healthcare/v1:HttpBody", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHttpBody gets an existing HttpBody resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHttpBody(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HttpBodyState, opts ...pulumi.ResourceOption) (*HttpBody, error) {
	var resource HttpBody
	err := ctx.ReadResource("google-cloud:healthcare/v1:HttpBody", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HttpBody resources.
type httpBodyState struct {
}

type HttpBodyState struct {
}

func (HttpBodyState) ElementType() reflect.Type {
	return reflect.TypeOf((*httpBodyState)(nil)).Elem()
}

type httpBodyArgs struct {
	// The HTTP Content-Type header value specifying the content type of the body.
	ContentType *string `pulumi:"contentType"`
	// The HTTP request/response body as raw binary.
	Data *string `pulumi:"data"`
	// Application specific response metadata. Must be set in the first response for streaming APIs.
	Extensions []map[string]string `pulumi:"extensions"`
	// The name of the FHIR store this resource belongs to.
	Parent string `pulumi:"parent"`
	// The FHIR resource type to create, such as Patient or Observation. For a complete list, see the FHIR Resource Index ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html), [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)). Must match the resource type in the provided content.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a HttpBody resource.
type HttpBodyArgs struct {
	// The HTTP Content-Type header value specifying the content type of the body.
	ContentType pulumi.StringPtrInput
	// The HTTP request/response body as raw binary.
	Data pulumi.StringPtrInput
	// Application specific response metadata. Must be set in the first response for streaming APIs.
	Extensions pulumi.StringMapArrayInput
	// The name of the FHIR store this resource belongs to.
	Parent pulumi.StringInput
	// The FHIR resource type to create, such as Patient or Observation. For a complete list, see the FHIR Resource Index ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html), [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)). Must match the resource type in the provided content.
	Type pulumi.StringInput
}

func (HttpBodyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httpBodyArgs)(nil)).Elem()
}

type HttpBodyInput interface {
	pulumi.Input

	ToHttpBodyOutput() HttpBodyOutput
	ToHttpBodyOutputWithContext(ctx context.Context) HttpBodyOutput
}

func (*HttpBody) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpBody)(nil))
}

func (i *HttpBody) ToHttpBodyOutput() HttpBodyOutput {
	return i.ToHttpBodyOutputWithContext(context.Background())
}

func (i *HttpBody) ToHttpBodyOutputWithContext(ctx context.Context) HttpBodyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpBodyOutput)
}

type HttpBodyOutput struct {
	*pulumi.OutputState
}

func (HttpBodyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpBody)(nil))
}

func (o HttpBodyOutput) ToHttpBodyOutput() HttpBodyOutput {
	return o
}

func (o HttpBodyOutput) ToHttpBodyOutputWithContext(ctx context.Context) HttpBodyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(HttpBodyOutput{})
}
