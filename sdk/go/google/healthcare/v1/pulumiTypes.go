// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// An attribute value for a Consent or User data mapping. Each Attribute must have a corresponding AttributeDefinition in the consent store that defines the default and allowed values.
type Attribute struct {
	// Indicates the name of an attribute defined in the consent store.
	AttributeDefinitionId *string `pulumi:"attributeDefinitionId"`
	// The value of the attribute. Must be an acceptable value as defined in the consent store. For example, if the consent store defines "data type" with acceptable values "questionnaire" and "step-count", when the attribute name is data type, this field must contain one of those values.
	Values []string `pulumi:"values"`
}

// AttributeInput is an input type that accepts AttributeArgs and AttributeOutput values.
// You can construct a concrete instance of `AttributeInput` via:
//
//	AttributeArgs{...}
type AttributeInput interface {
	pulumi.Input

	ToAttributeOutput() AttributeOutput
	ToAttributeOutputWithContext(context.Context) AttributeOutput
}

// An attribute value for a Consent or User data mapping. Each Attribute must have a corresponding AttributeDefinition in the consent store that defines the default and allowed values.
type AttributeArgs struct {
	// Indicates the name of an attribute defined in the consent store.
	AttributeDefinitionId pulumi.StringPtrInput `pulumi:"attributeDefinitionId"`
	// The value of the attribute. Must be an acceptable value as defined in the consent store. For example, if the consent store defines "data type" with acceptable values "questionnaire" and "step-count", when the attribute name is data type, this field must contain one of those values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (AttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Attribute)(nil)).Elem()
}

func (i AttributeArgs) ToAttributeOutput() AttributeOutput {
	return i.ToAttributeOutputWithContext(context.Background())
}

func (i AttributeArgs) ToAttributeOutputWithContext(ctx context.Context) AttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttributeOutput)
}

// AttributeArrayInput is an input type that accepts AttributeArray and AttributeArrayOutput values.
// You can construct a concrete instance of `AttributeArrayInput` via:
//
//	AttributeArray{ AttributeArgs{...} }
type AttributeArrayInput interface {
	pulumi.Input

	ToAttributeArrayOutput() AttributeArrayOutput
	ToAttributeArrayOutputWithContext(context.Context) AttributeArrayOutput
}

type AttributeArray []AttributeInput

func (AttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Attribute)(nil)).Elem()
}

func (i AttributeArray) ToAttributeArrayOutput() AttributeArrayOutput {
	return i.ToAttributeArrayOutputWithContext(context.Background())
}

func (i AttributeArray) ToAttributeArrayOutputWithContext(ctx context.Context) AttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttributeArrayOutput)
}

// An attribute value for a Consent or User data mapping. Each Attribute must have a corresponding AttributeDefinition in the consent store that defines the default and allowed values.
type AttributeOutput struct{ *pulumi.OutputState }

func (AttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Attribute)(nil)).Elem()
}

func (o AttributeOutput) ToAttributeOutput() AttributeOutput {
	return o
}

func (o AttributeOutput) ToAttributeOutputWithContext(ctx context.Context) AttributeOutput {
	return o
}

// Indicates the name of an attribute defined in the consent store.
func (o AttributeOutput) AttributeDefinitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Attribute) *string { return v.AttributeDefinitionId }).(pulumi.StringPtrOutput)
}

// The value of the attribute. Must be an acceptable value as defined in the consent store. For example, if the consent store defines "data type" with acceptable values "questionnaire" and "step-count", when the attribute name is data type, this field must contain one of those values.
func (o AttributeOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Attribute) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AttributeArrayOutput struct{ *pulumi.OutputState }

func (AttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Attribute)(nil)).Elem()
}

func (o AttributeArrayOutput) ToAttributeArrayOutput() AttributeArrayOutput {
	return o
}

func (o AttributeArrayOutput) ToAttributeArrayOutputWithContext(ctx context.Context) AttributeArrayOutput {
	return o
}

func (o AttributeArrayOutput) Index(i pulumi.IntInput) AttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Attribute {
		return vs[0].([]Attribute)[vs[1].(int)]
	}).(AttributeOutput)
}

// An attribute value for a Consent or User data mapping. Each Attribute must have a corresponding AttributeDefinition in the consent store that defines the default and allowed values.
type AttributeResponse struct {
	// Indicates the name of an attribute defined in the consent store.
	AttributeDefinitionId string `pulumi:"attributeDefinitionId"`
	// The value of the attribute. Must be an acceptable value as defined in the consent store. For example, if the consent store defines "data type" with acceptable values "questionnaire" and "step-count", when the attribute name is data type, this field must contain one of those values.
	Values []string `pulumi:"values"`
}

// An attribute value for a Consent or User data mapping. Each Attribute must have a corresponding AttributeDefinition in the consent store that defines the default and allowed values.
type AttributeResponseOutput struct{ *pulumi.OutputState }

func (AttributeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttributeResponse)(nil)).Elem()
}

func (o AttributeResponseOutput) ToAttributeResponseOutput() AttributeResponseOutput {
	return o
}

func (o AttributeResponseOutput) ToAttributeResponseOutputWithContext(ctx context.Context) AttributeResponseOutput {
	return o
}

// Indicates the name of an attribute defined in the consent store.
func (o AttributeResponseOutput) AttributeDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v AttributeResponse) string { return v.AttributeDefinitionId }).(pulumi.StringOutput)
}

// The value of the attribute. Must be an acceptable value as defined in the consent store. For example, if the consent store defines "data type" with acceptable values "questionnaire" and "step-count", when the attribute name is data type, this field must contain one of those values.
func (o AttributeResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AttributeResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type AttributeResponseArrayOutput struct{ *pulumi.OutputState }

func (AttributeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttributeResponse)(nil)).Elem()
}

func (o AttributeResponseArrayOutput) ToAttributeResponseArrayOutput() AttributeResponseArrayOutput {
	return o
}

func (o AttributeResponseArrayOutput) ToAttributeResponseArrayOutputWithContext(ctx context.Context) AttributeResponseArrayOutput {
	return o
}

func (o AttributeResponseArrayOutput) Index(i pulumi.IntInput) AttributeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AttributeResponse {
		return vs[0].([]AttributeResponse)[vs[1].(int)]
	}).(AttributeResponseOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Mask a string by replacing its characters with a fixed character.
type CharacterMaskConfig struct {
	// Character to mask the sensitive values. If not supplied, defaults to "*".
	MaskingCharacter *string `pulumi:"maskingCharacter"`
}

// CharacterMaskConfigInput is an input type that accepts CharacterMaskConfigArgs and CharacterMaskConfigOutput values.
// You can construct a concrete instance of `CharacterMaskConfigInput` via:
//
//	CharacterMaskConfigArgs{...}
type CharacterMaskConfigInput interface {
	pulumi.Input

	ToCharacterMaskConfigOutput() CharacterMaskConfigOutput
	ToCharacterMaskConfigOutputWithContext(context.Context) CharacterMaskConfigOutput
}

// Mask a string by replacing its characters with a fixed character.
type CharacterMaskConfigArgs struct {
	// Character to mask the sensitive values. If not supplied, defaults to "*".
	MaskingCharacter pulumi.StringPtrInput `pulumi:"maskingCharacter"`
}

func (CharacterMaskConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CharacterMaskConfig)(nil)).Elem()
}

func (i CharacterMaskConfigArgs) ToCharacterMaskConfigOutput() CharacterMaskConfigOutput {
	return i.ToCharacterMaskConfigOutputWithContext(context.Background())
}

func (i CharacterMaskConfigArgs) ToCharacterMaskConfigOutputWithContext(ctx context.Context) CharacterMaskConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CharacterMaskConfigOutput)
}

func (i CharacterMaskConfigArgs) ToCharacterMaskConfigPtrOutput() CharacterMaskConfigPtrOutput {
	return i.ToCharacterMaskConfigPtrOutputWithContext(context.Background())
}

func (i CharacterMaskConfigArgs) ToCharacterMaskConfigPtrOutputWithContext(ctx context.Context) CharacterMaskConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CharacterMaskConfigOutput).ToCharacterMaskConfigPtrOutputWithContext(ctx)
}

// CharacterMaskConfigPtrInput is an input type that accepts CharacterMaskConfigArgs, CharacterMaskConfigPtr and CharacterMaskConfigPtrOutput values.
// You can construct a concrete instance of `CharacterMaskConfigPtrInput` via:
//
//	        CharacterMaskConfigArgs{...}
//
//	or:
//
//	        nil
type CharacterMaskConfigPtrInput interface {
	pulumi.Input

	ToCharacterMaskConfigPtrOutput() CharacterMaskConfigPtrOutput
	ToCharacterMaskConfigPtrOutputWithContext(context.Context) CharacterMaskConfigPtrOutput
}

type characterMaskConfigPtrType CharacterMaskConfigArgs

func CharacterMaskConfigPtr(v *CharacterMaskConfigArgs) CharacterMaskConfigPtrInput {
	return (*characterMaskConfigPtrType)(v)
}

func (*characterMaskConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CharacterMaskConfig)(nil)).Elem()
}

func (i *characterMaskConfigPtrType) ToCharacterMaskConfigPtrOutput() CharacterMaskConfigPtrOutput {
	return i.ToCharacterMaskConfigPtrOutputWithContext(context.Background())
}

func (i *characterMaskConfigPtrType) ToCharacterMaskConfigPtrOutputWithContext(ctx context.Context) CharacterMaskConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CharacterMaskConfigPtrOutput)
}

// Mask a string by replacing its characters with a fixed character.
type CharacterMaskConfigOutput struct{ *pulumi.OutputState }

func (CharacterMaskConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CharacterMaskConfig)(nil)).Elem()
}

func (o CharacterMaskConfigOutput) ToCharacterMaskConfigOutput() CharacterMaskConfigOutput {
	return o
}

func (o CharacterMaskConfigOutput) ToCharacterMaskConfigOutputWithContext(ctx context.Context) CharacterMaskConfigOutput {
	return o
}

func (o CharacterMaskConfigOutput) ToCharacterMaskConfigPtrOutput() CharacterMaskConfigPtrOutput {
	return o.ToCharacterMaskConfigPtrOutputWithContext(context.Background())
}

func (o CharacterMaskConfigOutput) ToCharacterMaskConfigPtrOutputWithContext(ctx context.Context) CharacterMaskConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CharacterMaskConfig) *CharacterMaskConfig {
		return &v
	}).(CharacterMaskConfigPtrOutput)
}

// Character to mask the sensitive values. If not supplied, defaults to "*".
func (o CharacterMaskConfigOutput) MaskingCharacter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CharacterMaskConfig) *string { return v.MaskingCharacter }).(pulumi.StringPtrOutput)
}

type CharacterMaskConfigPtrOutput struct{ *pulumi.OutputState }

func (CharacterMaskConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CharacterMaskConfig)(nil)).Elem()
}

func (o CharacterMaskConfigPtrOutput) ToCharacterMaskConfigPtrOutput() CharacterMaskConfigPtrOutput {
	return o
}

func (o CharacterMaskConfigPtrOutput) ToCharacterMaskConfigPtrOutputWithContext(ctx context.Context) CharacterMaskConfigPtrOutput {
	return o
}

func (o CharacterMaskConfigPtrOutput) Elem() CharacterMaskConfigOutput {
	return o.ApplyT(func(v *CharacterMaskConfig) CharacterMaskConfig {
		if v != nil {
			return *v
		}
		var ret CharacterMaskConfig
		return ret
	}).(CharacterMaskConfigOutput)
}

// Character to mask the sensitive values. If not supplied, defaults to "*".
func (o CharacterMaskConfigPtrOutput) MaskingCharacter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CharacterMaskConfig) *string {
		if v == nil {
			return nil
		}
		return v.MaskingCharacter
	}).(pulumi.StringPtrOutput)
}

// Mask a string by replacing its characters with a fixed character.
type CharacterMaskConfigResponse struct {
	// Character to mask the sensitive values. If not supplied, defaults to "*".
	MaskingCharacter string `pulumi:"maskingCharacter"`
}

// Mask a string by replacing its characters with a fixed character.
type CharacterMaskConfigResponseOutput struct{ *pulumi.OutputState }

func (CharacterMaskConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CharacterMaskConfigResponse)(nil)).Elem()
}

func (o CharacterMaskConfigResponseOutput) ToCharacterMaskConfigResponseOutput() CharacterMaskConfigResponseOutput {
	return o
}

func (o CharacterMaskConfigResponseOutput) ToCharacterMaskConfigResponseOutputWithContext(ctx context.Context) CharacterMaskConfigResponseOutput {
	return o
}

// Character to mask the sensitive values. If not supplied, defaults to "*".
func (o CharacterMaskConfigResponseOutput) MaskingCharacter() pulumi.StringOutput {
	return o.ApplyT(func(v CharacterMaskConfigResponse) string { return v.MaskingCharacter }).(pulumi.StringOutput)
}

// Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. Outputs a base64-encoded representation of the hashed output (for example, `L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=`).
type CryptoHashConfig struct {
	// An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used when neither `crypto_key` nor `kms_wrapped` is specified. Must not be set if `kms_wrapped` is set.
	CryptoKey *string `pulumi:"cryptoKey"`
	// KMS wrapped key. Must not be set if `crypto_key` is set.
	KmsWrapped *KmsWrappedCryptoKey `pulumi:"kmsWrapped"`
}

// CryptoHashConfigInput is an input type that accepts CryptoHashConfigArgs and CryptoHashConfigOutput values.
// You can construct a concrete instance of `CryptoHashConfigInput` via:
//
//	CryptoHashConfigArgs{...}
type CryptoHashConfigInput interface {
	pulumi.Input

	ToCryptoHashConfigOutput() CryptoHashConfigOutput
	ToCryptoHashConfigOutputWithContext(context.Context) CryptoHashConfigOutput
}

// Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. Outputs a base64-encoded representation of the hashed output (for example, `L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=`).
type CryptoHashConfigArgs struct {
	// An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used when neither `crypto_key` nor `kms_wrapped` is specified. Must not be set if `kms_wrapped` is set.
	CryptoKey pulumi.StringPtrInput `pulumi:"cryptoKey"`
	// KMS wrapped key. Must not be set if `crypto_key` is set.
	KmsWrapped KmsWrappedCryptoKeyPtrInput `pulumi:"kmsWrapped"`
}

func (CryptoHashConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoHashConfig)(nil)).Elem()
}

func (i CryptoHashConfigArgs) ToCryptoHashConfigOutput() CryptoHashConfigOutput {
	return i.ToCryptoHashConfigOutputWithContext(context.Background())
}

func (i CryptoHashConfigArgs) ToCryptoHashConfigOutputWithContext(ctx context.Context) CryptoHashConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoHashConfigOutput)
}

func (i CryptoHashConfigArgs) ToCryptoHashConfigPtrOutput() CryptoHashConfigPtrOutput {
	return i.ToCryptoHashConfigPtrOutputWithContext(context.Background())
}

func (i CryptoHashConfigArgs) ToCryptoHashConfigPtrOutputWithContext(ctx context.Context) CryptoHashConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoHashConfigOutput).ToCryptoHashConfigPtrOutputWithContext(ctx)
}

// CryptoHashConfigPtrInput is an input type that accepts CryptoHashConfigArgs, CryptoHashConfigPtr and CryptoHashConfigPtrOutput values.
// You can construct a concrete instance of `CryptoHashConfigPtrInput` via:
//
//	        CryptoHashConfigArgs{...}
//
//	or:
//
//	        nil
type CryptoHashConfigPtrInput interface {
	pulumi.Input

	ToCryptoHashConfigPtrOutput() CryptoHashConfigPtrOutput
	ToCryptoHashConfigPtrOutputWithContext(context.Context) CryptoHashConfigPtrOutput
}

type cryptoHashConfigPtrType CryptoHashConfigArgs

func CryptoHashConfigPtr(v *CryptoHashConfigArgs) CryptoHashConfigPtrInput {
	return (*cryptoHashConfigPtrType)(v)
}

func (*cryptoHashConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoHashConfig)(nil)).Elem()
}

func (i *cryptoHashConfigPtrType) ToCryptoHashConfigPtrOutput() CryptoHashConfigPtrOutput {
	return i.ToCryptoHashConfigPtrOutputWithContext(context.Background())
}

func (i *cryptoHashConfigPtrType) ToCryptoHashConfigPtrOutputWithContext(ctx context.Context) CryptoHashConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoHashConfigPtrOutput)
}

// Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. Outputs a base64-encoded representation of the hashed output (for example, `L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=`).
type CryptoHashConfigOutput struct{ *pulumi.OutputState }

func (CryptoHashConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoHashConfig)(nil)).Elem()
}

func (o CryptoHashConfigOutput) ToCryptoHashConfigOutput() CryptoHashConfigOutput {
	return o
}

func (o CryptoHashConfigOutput) ToCryptoHashConfigOutputWithContext(ctx context.Context) CryptoHashConfigOutput {
	return o
}

func (o CryptoHashConfigOutput) ToCryptoHashConfigPtrOutput() CryptoHashConfigPtrOutput {
	return o.ToCryptoHashConfigPtrOutputWithContext(context.Background())
}

func (o CryptoHashConfigOutput) ToCryptoHashConfigPtrOutputWithContext(ctx context.Context) CryptoHashConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CryptoHashConfig) *CryptoHashConfig {
		return &v
	}).(CryptoHashConfigPtrOutput)
}

// An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used when neither `crypto_key` nor `kms_wrapped` is specified. Must not be set if `kms_wrapped` is set.
func (o CryptoHashConfigOutput) CryptoKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoHashConfig) *string { return v.CryptoKey }).(pulumi.StringPtrOutput)
}

// KMS wrapped key. Must not be set if `crypto_key` is set.
func (o CryptoHashConfigOutput) KmsWrapped() KmsWrappedCryptoKeyPtrOutput {
	return o.ApplyT(func(v CryptoHashConfig) *KmsWrappedCryptoKey { return v.KmsWrapped }).(KmsWrappedCryptoKeyPtrOutput)
}

type CryptoHashConfigPtrOutput struct{ *pulumi.OutputState }

func (CryptoHashConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoHashConfig)(nil)).Elem()
}

func (o CryptoHashConfigPtrOutput) ToCryptoHashConfigPtrOutput() CryptoHashConfigPtrOutput {
	return o
}

func (o CryptoHashConfigPtrOutput) ToCryptoHashConfigPtrOutputWithContext(ctx context.Context) CryptoHashConfigPtrOutput {
	return o
}

func (o CryptoHashConfigPtrOutput) Elem() CryptoHashConfigOutput {
	return o.ApplyT(func(v *CryptoHashConfig) CryptoHashConfig {
		if v != nil {
			return *v
		}
		var ret CryptoHashConfig
		return ret
	}).(CryptoHashConfigOutput)
}

// An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used when neither `crypto_key` nor `kms_wrapped` is specified. Must not be set if `kms_wrapped` is set.
func (o CryptoHashConfigPtrOutput) CryptoKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoHashConfig) *string {
		if v == nil {
			return nil
		}
		return v.CryptoKey
	}).(pulumi.StringPtrOutput)
}

// KMS wrapped key. Must not be set if `crypto_key` is set.
func (o CryptoHashConfigPtrOutput) KmsWrapped() KmsWrappedCryptoKeyPtrOutput {
	return o.ApplyT(func(v *CryptoHashConfig) *KmsWrappedCryptoKey {
		if v == nil {
			return nil
		}
		return v.KmsWrapped
	}).(KmsWrappedCryptoKeyPtrOutput)
}

// Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. Outputs a base64-encoded representation of the hashed output (for example, `L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=`).
type CryptoHashConfigResponse struct {
	// An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used when neither `crypto_key` nor `kms_wrapped` is specified. Must not be set if `kms_wrapped` is set.
	CryptoKey string `pulumi:"cryptoKey"`
	// KMS wrapped key. Must not be set if `crypto_key` is set.
	KmsWrapped KmsWrappedCryptoKeyResponse `pulumi:"kmsWrapped"`
}

// Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. Outputs a base64-encoded representation of the hashed output (for example, `L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=`).
type CryptoHashConfigResponseOutput struct{ *pulumi.OutputState }

func (CryptoHashConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoHashConfigResponse)(nil)).Elem()
}

func (o CryptoHashConfigResponseOutput) ToCryptoHashConfigResponseOutput() CryptoHashConfigResponseOutput {
	return o
}

func (o CryptoHashConfigResponseOutput) ToCryptoHashConfigResponseOutputWithContext(ctx context.Context) CryptoHashConfigResponseOutput {
	return o
}

// An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used when neither `crypto_key` nor `kms_wrapped` is specified. Must not be set if `kms_wrapped` is set.
func (o CryptoHashConfigResponseOutput) CryptoKey() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoHashConfigResponse) string { return v.CryptoKey }).(pulumi.StringOutput)
}

// KMS wrapped key. Must not be set if `crypto_key` is set.
func (o CryptoHashConfigResponseOutput) KmsWrapped() KmsWrappedCryptoKeyResponseOutput {
	return o.ApplyT(func(v CryptoHashConfigResponse) KmsWrappedCryptoKeyResponse { return v.KmsWrapped }).(KmsWrappedCryptoKeyResponseOutput)
}

// Shift a date forward or backward in time by a random amount which is consistent for a given patient and crypto key combination.
type DateShiftConfig struct {
	// An AES 128/192/256 bit key. The date shift is computed based on this key and the patient ID. If the patient ID is empty for a DICOM resource, the date shift is computed based on this key and the study instance UID. If `crypto_key` is not set, then `kms_wrapped` is used to calculate the date shift. If neither is set, a default key is generated for each de-identify operation. Must not be set if `kms_wrapped` is set.
	CryptoKey *string `pulumi:"cryptoKey"`
	// KMS wrapped key. If `kms_wrapped` is not set, then `crypto_key` is used to calculate the date shift. If neither is set, a default key is generated for each de-identify operation. Must not be set if `crypto_key` is set.
	KmsWrapped *KmsWrappedCryptoKey `pulumi:"kmsWrapped"`
}

// DateShiftConfigInput is an input type that accepts DateShiftConfigArgs and DateShiftConfigOutput values.
// You can construct a concrete instance of `DateShiftConfigInput` via:
//
//	DateShiftConfigArgs{...}
type DateShiftConfigInput interface {
	pulumi.Input

	ToDateShiftConfigOutput() DateShiftConfigOutput
	ToDateShiftConfigOutputWithContext(context.Context) DateShiftConfigOutput
}

// Shift a date forward or backward in time by a random amount which is consistent for a given patient and crypto key combination.
type DateShiftConfigArgs struct {
	// An AES 128/192/256 bit key. The date shift is computed based on this key and the patient ID. If the patient ID is empty for a DICOM resource, the date shift is computed based on this key and the study instance UID. If `crypto_key` is not set, then `kms_wrapped` is used to calculate the date shift. If neither is set, a default key is generated for each de-identify operation. Must not be set if `kms_wrapped` is set.
	CryptoKey pulumi.StringPtrInput `pulumi:"cryptoKey"`
	// KMS wrapped key. If `kms_wrapped` is not set, then `crypto_key` is used to calculate the date shift. If neither is set, a default key is generated for each de-identify operation. Must not be set if `crypto_key` is set.
	KmsWrapped KmsWrappedCryptoKeyPtrInput `pulumi:"kmsWrapped"`
}

func (DateShiftConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DateShiftConfig)(nil)).Elem()
}

func (i DateShiftConfigArgs) ToDateShiftConfigOutput() DateShiftConfigOutput {
	return i.ToDateShiftConfigOutputWithContext(context.Background())
}

func (i DateShiftConfigArgs) ToDateShiftConfigOutputWithContext(ctx context.Context) DateShiftConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DateShiftConfigOutput)
}

func (i DateShiftConfigArgs) ToDateShiftConfigPtrOutput() DateShiftConfigPtrOutput {
	return i.ToDateShiftConfigPtrOutputWithContext(context.Background())
}

func (i DateShiftConfigArgs) ToDateShiftConfigPtrOutputWithContext(ctx context.Context) DateShiftConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DateShiftConfigOutput).ToDateShiftConfigPtrOutputWithContext(ctx)
}

// DateShiftConfigPtrInput is an input type that accepts DateShiftConfigArgs, DateShiftConfigPtr and DateShiftConfigPtrOutput values.
// You can construct a concrete instance of `DateShiftConfigPtrInput` via:
//
//	        DateShiftConfigArgs{...}
//
//	or:
//
//	        nil
type DateShiftConfigPtrInput interface {
	pulumi.Input

	ToDateShiftConfigPtrOutput() DateShiftConfigPtrOutput
	ToDateShiftConfigPtrOutputWithContext(context.Context) DateShiftConfigPtrOutput
}

type dateShiftConfigPtrType DateShiftConfigArgs

func DateShiftConfigPtr(v *DateShiftConfigArgs) DateShiftConfigPtrInput {
	return (*dateShiftConfigPtrType)(v)
}

func (*dateShiftConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DateShiftConfig)(nil)).Elem()
}

func (i *dateShiftConfigPtrType) ToDateShiftConfigPtrOutput() DateShiftConfigPtrOutput {
	return i.ToDateShiftConfigPtrOutputWithContext(context.Background())
}

func (i *dateShiftConfigPtrType) ToDateShiftConfigPtrOutputWithContext(ctx context.Context) DateShiftConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DateShiftConfigPtrOutput)
}

// Shift a date forward or backward in time by a random amount which is consistent for a given patient and crypto key combination.
type DateShiftConfigOutput struct{ *pulumi.OutputState }

func (DateShiftConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DateShiftConfig)(nil)).Elem()
}

func (o DateShiftConfigOutput) ToDateShiftConfigOutput() DateShiftConfigOutput {
	return o
}

func (o DateShiftConfigOutput) ToDateShiftConfigOutputWithContext(ctx context.Context) DateShiftConfigOutput {
	return o
}

func (o DateShiftConfigOutput) ToDateShiftConfigPtrOutput() DateShiftConfigPtrOutput {
	return o.ToDateShiftConfigPtrOutputWithContext(context.Background())
}

func (o DateShiftConfigOutput) ToDateShiftConfigPtrOutputWithContext(ctx context.Context) DateShiftConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DateShiftConfig) *DateShiftConfig {
		return &v
	}).(DateShiftConfigPtrOutput)
}

// An AES 128/192/256 bit key. The date shift is computed based on this key and the patient ID. If the patient ID is empty for a DICOM resource, the date shift is computed based on this key and the study instance UID. If `crypto_key` is not set, then `kms_wrapped` is used to calculate the date shift. If neither is set, a default key is generated for each de-identify operation. Must not be set if `kms_wrapped` is set.
func (o DateShiftConfigOutput) CryptoKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DateShiftConfig) *string { return v.CryptoKey }).(pulumi.StringPtrOutput)
}

// KMS wrapped key. If `kms_wrapped` is not set, then `crypto_key` is used to calculate the date shift. If neither is set, a default key is generated for each de-identify operation. Must not be set if `crypto_key` is set.
func (o DateShiftConfigOutput) KmsWrapped() KmsWrappedCryptoKeyPtrOutput {
	return o.ApplyT(func(v DateShiftConfig) *KmsWrappedCryptoKey { return v.KmsWrapped }).(KmsWrappedCryptoKeyPtrOutput)
}

type DateShiftConfigPtrOutput struct{ *pulumi.OutputState }

func (DateShiftConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DateShiftConfig)(nil)).Elem()
}

func (o DateShiftConfigPtrOutput) ToDateShiftConfigPtrOutput() DateShiftConfigPtrOutput {
	return o
}

func (o DateShiftConfigPtrOutput) ToDateShiftConfigPtrOutputWithContext(ctx context.Context) DateShiftConfigPtrOutput {
	return o
}

func (o DateShiftConfigPtrOutput) Elem() DateShiftConfigOutput {
	return o.ApplyT(func(v *DateShiftConfig) DateShiftConfig {
		if v != nil {
			return *v
		}
		var ret DateShiftConfig
		return ret
	}).(DateShiftConfigOutput)
}

// An AES 128/192/256 bit key. The date shift is computed based on this key and the patient ID. If the patient ID is empty for a DICOM resource, the date shift is computed based on this key and the study instance UID. If `crypto_key` is not set, then `kms_wrapped` is used to calculate the date shift. If neither is set, a default key is generated for each de-identify operation. Must not be set if `kms_wrapped` is set.
func (o DateShiftConfigPtrOutput) CryptoKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DateShiftConfig) *string {
		if v == nil {
			return nil
		}
		return v.CryptoKey
	}).(pulumi.StringPtrOutput)
}

// KMS wrapped key. If `kms_wrapped` is not set, then `crypto_key` is used to calculate the date shift. If neither is set, a default key is generated for each de-identify operation. Must not be set if `crypto_key` is set.
func (o DateShiftConfigPtrOutput) KmsWrapped() KmsWrappedCryptoKeyPtrOutput {
	return o.ApplyT(func(v *DateShiftConfig) *KmsWrappedCryptoKey {
		if v == nil {
			return nil
		}
		return v.KmsWrapped
	}).(KmsWrappedCryptoKeyPtrOutput)
}

// Shift a date forward or backward in time by a random amount which is consistent for a given patient and crypto key combination.
type DateShiftConfigResponse struct {
	// An AES 128/192/256 bit key. The date shift is computed based on this key and the patient ID. If the patient ID is empty for a DICOM resource, the date shift is computed based on this key and the study instance UID. If `crypto_key` is not set, then `kms_wrapped` is used to calculate the date shift. If neither is set, a default key is generated for each de-identify operation. Must not be set if `kms_wrapped` is set.
	CryptoKey string `pulumi:"cryptoKey"`
	// KMS wrapped key. If `kms_wrapped` is not set, then `crypto_key` is used to calculate the date shift. If neither is set, a default key is generated for each de-identify operation. Must not be set if `crypto_key` is set.
	KmsWrapped KmsWrappedCryptoKeyResponse `pulumi:"kmsWrapped"`
}

// Shift a date forward or backward in time by a random amount which is consistent for a given patient and crypto key combination.
type DateShiftConfigResponseOutput struct{ *pulumi.OutputState }

func (DateShiftConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DateShiftConfigResponse)(nil)).Elem()
}

func (o DateShiftConfigResponseOutput) ToDateShiftConfigResponseOutput() DateShiftConfigResponseOutput {
	return o
}

func (o DateShiftConfigResponseOutput) ToDateShiftConfigResponseOutputWithContext(ctx context.Context) DateShiftConfigResponseOutput {
	return o
}

// An AES 128/192/256 bit key. The date shift is computed based on this key and the patient ID. If the patient ID is empty for a DICOM resource, the date shift is computed based on this key and the study instance UID. If `crypto_key` is not set, then `kms_wrapped` is used to calculate the date shift. If neither is set, a default key is generated for each de-identify operation. Must not be set if `kms_wrapped` is set.
func (o DateShiftConfigResponseOutput) CryptoKey() pulumi.StringOutput {
	return o.ApplyT(func(v DateShiftConfigResponse) string { return v.CryptoKey }).(pulumi.StringOutput)
}

// KMS wrapped key. If `kms_wrapped` is not set, then `crypto_key` is used to calculate the date shift. If neither is set, a default key is generated for each de-identify operation. Must not be set if `crypto_key` is set.
func (o DateShiftConfigResponseOutput) KmsWrapped() KmsWrappedCryptoKeyResponseOutput {
	return o.ApplyT(func(v DateShiftConfigResponse) KmsWrappedCryptoKeyResponse { return v.KmsWrapped }).(KmsWrappedCryptoKeyResponseOutput)
}

// Contains configuration for streaming de-identified FHIR export.
type DeidentifiedStoreDestination struct {
	// The configuration to use when de-identifying resources that are added to this store.
	Config *DeidentifyConfig `pulumi:"config"`
	// The full resource name of a Cloud Healthcare FHIR store, for example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
	Store *string `pulumi:"store"`
}

// DeidentifiedStoreDestinationInput is an input type that accepts DeidentifiedStoreDestinationArgs and DeidentifiedStoreDestinationOutput values.
// You can construct a concrete instance of `DeidentifiedStoreDestinationInput` via:
//
//	DeidentifiedStoreDestinationArgs{...}
type DeidentifiedStoreDestinationInput interface {
	pulumi.Input

	ToDeidentifiedStoreDestinationOutput() DeidentifiedStoreDestinationOutput
	ToDeidentifiedStoreDestinationOutputWithContext(context.Context) DeidentifiedStoreDestinationOutput
}

// Contains configuration for streaming de-identified FHIR export.
type DeidentifiedStoreDestinationArgs struct {
	// The configuration to use when de-identifying resources that are added to this store.
	Config DeidentifyConfigPtrInput `pulumi:"config"`
	// The full resource name of a Cloud Healthcare FHIR store, for example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
	Store pulumi.StringPtrInput `pulumi:"store"`
}

func (DeidentifiedStoreDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeidentifiedStoreDestination)(nil)).Elem()
}

func (i DeidentifiedStoreDestinationArgs) ToDeidentifiedStoreDestinationOutput() DeidentifiedStoreDestinationOutput {
	return i.ToDeidentifiedStoreDestinationOutputWithContext(context.Background())
}

func (i DeidentifiedStoreDestinationArgs) ToDeidentifiedStoreDestinationOutputWithContext(ctx context.Context) DeidentifiedStoreDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeidentifiedStoreDestinationOutput)
}

func (i DeidentifiedStoreDestinationArgs) ToDeidentifiedStoreDestinationPtrOutput() DeidentifiedStoreDestinationPtrOutput {
	return i.ToDeidentifiedStoreDestinationPtrOutputWithContext(context.Background())
}

func (i DeidentifiedStoreDestinationArgs) ToDeidentifiedStoreDestinationPtrOutputWithContext(ctx context.Context) DeidentifiedStoreDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeidentifiedStoreDestinationOutput).ToDeidentifiedStoreDestinationPtrOutputWithContext(ctx)
}

// DeidentifiedStoreDestinationPtrInput is an input type that accepts DeidentifiedStoreDestinationArgs, DeidentifiedStoreDestinationPtr and DeidentifiedStoreDestinationPtrOutput values.
// You can construct a concrete instance of `DeidentifiedStoreDestinationPtrInput` via:
//
//	        DeidentifiedStoreDestinationArgs{...}
//
//	or:
//
//	        nil
type DeidentifiedStoreDestinationPtrInput interface {
	pulumi.Input

	ToDeidentifiedStoreDestinationPtrOutput() DeidentifiedStoreDestinationPtrOutput
	ToDeidentifiedStoreDestinationPtrOutputWithContext(context.Context) DeidentifiedStoreDestinationPtrOutput
}

type deidentifiedStoreDestinationPtrType DeidentifiedStoreDestinationArgs

func DeidentifiedStoreDestinationPtr(v *DeidentifiedStoreDestinationArgs) DeidentifiedStoreDestinationPtrInput {
	return (*deidentifiedStoreDestinationPtrType)(v)
}

func (*deidentifiedStoreDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeidentifiedStoreDestination)(nil)).Elem()
}

func (i *deidentifiedStoreDestinationPtrType) ToDeidentifiedStoreDestinationPtrOutput() DeidentifiedStoreDestinationPtrOutput {
	return i.ToDeidentifiedStoreDestinationPtrOutputWithContext(context.Background())
}

func (i *deidentifiedStoreDestinationPtrType) ToDeidentifiedStoreDestinationPtrOutputWithContext(ctx context.Context) DeidentifiedStoreDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeidentifiedStoreDestinationPtrOutput)
}

// Contains configuration for streaming de-identified FHIR export.
type DeidentifiedStoreDestinationOutput struct{ *pulumi.OutputState }

func (DeidentifiedStoreDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeidentifiedStoreDestination)(nil)).Elem()
}

func (o DeidentifiedStoreDestinationOutput) ToDeidentifiedStoreDestinationOutput() DeidentifiedStoreDestinationOutput {
	return o
}

func (o DeidentifiedStoreDestinationOutput) ToDeidentifiedStoreDestinationOutputWithContext(ctx context.Context) DeidentifiedStoreDestinationOutput {
	return o
}

func (o DeidentifiedStoreDestinationOutput) ToDeidentifiedStoreDestinationPtrOutput() DeidentifiedStoreDestinationPtrOutput {
	return o.ToDeidentifiedStoreDestinationPtrOutputWithContext(context.Background())
}

func (o DeidentifiedStoreDestinationOutput) ToDeidentifiedStoreDestinationPtrOutputWithContext(ctx context.Context) DeidentifiedStoreDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeidentifiedStoreDestination) *DeidentifiedStoreDestination {
		return &v
	}).(DeidentifiedStoreDestinationPtrOutput)
}

// The configuration to use when de-identifying resources that are added to this store.
func (o DeidentifiedStoreDestinationOutput) Config() DeidentifyConfigPtrOutput {
	return o.ApplyT(func(v DeidentifiedStoreDestination) *DeidentifyConfig { return v.Config }).(DeidentifyConfigPtrOutput)
}

// The full resource name of a Cloud Healthcare FHIR store, for example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
func (o DeidentifiedStoreDestinationOutput) Store() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeidentifiedStoreDestination) *string { return v.Store }).(pulumi.StringPtrOutput)
}

type DeidentifiedStoreDestinationPtrOutput struct{ *pulumi.OutputState }

func (DeidentifiedStoreDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeidentifiedStoreDestination)(nil)).Elem()
}

func (o DeidentifiedStoreDestinationPtrOutput) ToDeidentifiedStoreDestinationPtrOutput() DeidentifiedStoreDestinationPtrOutput {
	return o
}

func (o DeidentifiedStoreDestinationPtrOutput) ToDeidentifiedStoreDestinationPtrOutputWithContext(ctx context.Context) DeidentifiedStoreDestinationPtrOutput {
	return o
}

func (o DeidentifiedStoreDestinationPtrOutput) Elem() DeidentifiedStoreDestinationOutput {
	return o.ApplyT(func(v *DeidentifiedStoreDestination) DeidentifiedStoreDestination {
		if v != nil {
			return *v
		}
		var ret DeidentifiedStoreDestination
		return ret
	}).(DeidentifiedStoreDestinationOutput)
}

// The configuration to use when de-identifying resources that are added to this store.
func (o DeidentifiedStoreDestinationPtrOutput) Config() DeidentifyConfigPtrOutput {
	return o.ApplyT(func(v *DeidentifiedStoreDestination) *DeidentifyConfig {
		if v == nil {
			return nil
		}
		return v.Config
	}).(DeidentifyConfigPtrOutput)
}

// The full resource name of a Cloud Healthcare FHIR store, for example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
func (o DeidentifiedStoreDestinationPtrOutput) Store() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeidentifiedStoreDestination) *string {
		if v == nil {
			return nil
		}
		return v.Store
	}).(pulumi.StringPtrOutput)
}

// Contains configuration for streaming de-identified FHIR export.
type DeidentifiedStoreDestinationResponse struct {
	// The configuration to use when de-identifying resources that are added to this store.
	Config DeidentifyConfigResponse `pulumi:"config"`
	// The full resource name of a Cloud Healthcare FHIR store, for example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
	Store string `pulumi:"store"`
}

// Contains configuration for streaming de-identified FHIR export.
type DeidentifiedStoreDestinationResponseOutput struct{ *pulumi.OutputState }

func (DeidentifiedStoreDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeidentifiedStoreDestinationResponse)(nil)).Elem()
}

func (o DeidentifiedStoreDestinationResponseOutput) ToDeidentifiedStoreDestinationResponseOutput() DeidentifiedStoreDestinationResponseOutput {
	return o
}

func (o DeidentifiedStoreDestinationResponseOutput) ToDeidentifiedStoreDestinationResponseOutputWithContext(ctx context.Context) DeidentifiedStoreDestinationResponseOutput {
	return o
}

// The configuration to use when de-identifying resources that are added to this store.
func (o DeidentifiedStoreDestinationResponseOutput) Config() DeidentifyConfigResponseOutput {
	return o.ApplyT(func(v DeidentifiedStoreDestinationResponse) DeidentifyConfigResponse { return v.Config }).(DeidentifyConfigResponseOutput)
}

// The full resource name of a Cloud Healthcare FHIR store, for example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
func (o DeidentifiedStoreDestinationResponseOutput) Store() pulumi.StringOutput {
	return o.ApplyT(func(v DeidentifiedStoreDestinationResponse) string { return v.Store }).(pulumi.StringOutput)
}

// Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.
type DeidentifyConfig struct {
	// Configures de-id of application/DICOM content.
	Dicom *DicomConfig `pulumi:"dicom"`
	// Configures de-id of application/FHIR content.
	Fhir *FhirConfig `pulumi:"fhir"`
	// Configures de-identification of image pixels wherever they are found in the source_dataset.
	Image *ImageConfig `pulumi:"image"`
	// Configures de-identification of text wherever it is found in the source_dataset.
	Text *TextConfig `pulumi:"text"`
	// Ensures in-flight data remains in the region of origin during de-identification. Using this option results in a significant reduction of throughput, and is not compatible with `LOCATION` or `ORGANIZATION_NAME` infoTypes. `LOCATION` must be excluded within TextConfig, and must also be excluded within ImageConfig if image redaction is required.
	UseRegionalDataProcessing *bool `pulumi:"useRegionalDataProcessing"`
}

// DeidentifyConfigInput is an input type that accepts DeidentifyConfigArgs and DeidentifyConfigOutput values.
// You can construct a concrete instance of `DeidentifyConfigInput` via:
//
//	DeidentifyConfigArgs{...}
type DeidentifyConfigInput interface {
	pulumi.Input

	ToDeidentifyConfigOutput() DeidentifyConfigOutput
	ToDeidentifyConfigOutputWithContext(context.Context) DeidentifyConfigOutput
}

// Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.
type DeidentifyConfigArgs struct {
	// Configures de-id of application/DICOM content.
	Dicom DicomConfigPtrInput `pulumi:"dicom"`
	// Configures de-id of application/FHIR content.
	Fhir FhirConfigPtrInput `pulumi:"fhir"`
	// Configures de-identification of image pixels wherever they are found in the source_dataset.
	Image ImageConfigPtrInput `pulumi:"image"`
	// Configures de-identification of text wherever it is found in the source_dataset.
	Text TextConfigPtrInput `pulumi:"text"`
	// Ensures in-flight data remains in the region of origin during de-identification. Using this option results in a significant reduction of throughput, and is not compatible with `LOCATION` or `ORGANIZATION_NAME` infoTypes. `LOCATION` must be excluded within TextConfig, and must also be excluded within ImageConfig if image redaction is required.
	UseRegionalDataProcessing pulumi.BoolPtrInput `pulumi:"useRegionalDataProcessing"`
}

func (DeidentifyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeidentifyConfig)(nil)).Elem()
}

func (i DeidentifyConfigArgs) ToDeidentifyConfigOutput() DeidentifyConfigOutput {
	return i.ToDeidentifyConfigOutputWithContext(context.Background())
}

func (i DeidentifyConfigArgs) ToDeidentifyConfigOutputWithContext(ctx context.Context) DeidentifyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeidentifyConfigOutput)
}

func (i DeidentifyConfigArgs) ToDeidentifyConfigPtrOutput() DeidentifyConfigPtrOutput {
	return i.ToDeidentifyConfigPtrOutputWithContext(context.Background())
}

func (i DeidentifyConfigArgs) ToDeidentifyConfigPtrOutputWithContext(ctx context.Context) DeidentifyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeidentifyConfigOutput).ToDeidentifyConfigPtrOutputWithContext(ctx)
}

// DeidentifyConfigPtrInput is an input type that accepts DeidentifyConfigArgs, DeidentifyConfigPtr and DeidentifyConfigPtrOutput values.
// You can construct a concrete instance of `DeidentifyConfigPtrInput` via:
//
//	        DeidentifyConfigArgs{...}
//
//	or:
//
//	        nil
type DeidentifyConfigPtrInput interface {
	pulumi.Input

	ToDeidentifyConfigPtrOutput() DeidentifyConfigPtrOutput
	ToDeidentifyConfigPtrOutputWithContext(context.Context) DeidentifyConfigPtrOutput
}

type deidentifyConfigPtrType DeidentifyConfigArgs

func DeidentifyConfigPtr(v *DeidentifyConfigArgs) DeidentifyConfigPtrInput {
	return (*deidentifyConfigPtrType)(v)
}

func (*deidentifyConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeidentifyConfig)(nil)).Elem()
}

func (i *deidentifyConfigPtrType) ToDeidentifyConfigPtrOutput() DeidentifyConfigPtrOutput {
	return i.ToDeidentifyConfigPtrOutputWithContext(context.Background())
}

func (i *deidentifyConfigPtrType) ToDeidentifyConfigPtrOutputWithContext(ctx context.Context) DeidentifyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeidentifyConfigPtrOutput)
}

// Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.
type DeidentifyConfigOutput struct{ *pulumi.OutputState }

func (DeidentifyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeidentifyConfig)(nil)).Elem()
}

func (o DeidentifyConfigOutput) ToDeidentifyConfigOutput() DeidentifyConfigOutput {
	return o
}

func (o DeidentifyConfigOutput) ToDeidentifyConfigOutputWithContext(ctx context.Context) DeidentifyConfigOutput {
	return o
}

func (o DeidentifyConfigOutput) ToDeidentifyConfigPtrOutput() DeidentifyConfigPtrOutput {
	return o.ToDeidentifyConfigPtrOutputWithContext(context.Background())
}

func (o DeidentifyConfigOutput) ToDeidentifyConfigPtrOutputWithContext(ctx context.Context) DeidentifyConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeidentifyConfig) *DeidentifyConfig {
		return &v
	}).(DeidentifyConfigPtrOutput)
}

// Configures de-id of application/DICOM content.
func (o DeidentifyConfigOutput) Dicom() DicomConfigPtrOutput {
	return o.ApplyT(func(v DeidentifyConfig) *DicomConfig { return v.Dicom }).(DicomConfigPtrOutput)
}

// Configures de-id of application/FHIR content.
func (o DeidentifyConfigOutput) Fhir() FhirConfigPtrOutput {
	return o.ApplyT(func(v DeidentifyConfig) *FhirConfig { return v.Fhir }).(FhirConfigPtrOutput)
}

// Configures de-identification of image pixels wherever they are found in the source_dataset.
func (o DeidentifyConfigOutput) Image() ImageConfigPtrOutput {
	return o.ApplyT(func(v DeidentifyConfig) *ImageConfig { return v.Image }).(ImageConfigPtrOutput)
}

// Configures de-identification of text wherever it is found in the source_dataset.
func (o DeidentifyConfigOutput) Text() TextConfigPtrOutput {
	return o.ApplyT(func(v DeidentifyConfig) *TextConfig { return v.Text }).(TextConfigPtrOutput)
}

// Ensures in-flight data remains in the region of origin during de-identification. Using this option results in a significant reduction of throughput, and is not compatible with `LOCATION` or `ORGANIZATION_NAME` infoTypes. `LOCATION` must be excluded within TextConfig, and must also be excluded within ImageConfig if image redaction is required.
func (o DeidentifyConfigOutput) UseRegionalDataProcessing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeidentifyConfig) *bool { return v.UseRegionalDataProcessing }).(pulumi.BoolPtrOutput)
}

type DeidentifyConfigPtrOutput struct{ *pulumi.OutputState }

func (DeidentifyConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeidentifyConfig)(nil)).Elem()
}

func (o DeidentifyConfigPtrOutput) ToDeidentifyConfigPtrOutput() DeidentifyConfigPtrOutput {
	return o
}

func (o DeidentifyConfigPtrOutput) ToDeidentifyConfigPtrOutputWithContext(ctx context.Context) DeidentifyConfigPtrOutput {
	return o
}

func (o DeidentifyConfigPtrOutput) Elem() DeidentifyConfigOutput {
	return o.ApplyT(func(v *DeidentifyConfig) DeidentifyConfig {
		if v != nil {
			return *v
		}
		var ret DeidentifyConfig
		return ret
	}).(DeidentifyConfigOutput)
}

// Configures de-id of application/DICOM content.
func (o DeidentifyConfigPtrOutput) Dicom() DicomConfigPtrOutput {
	return o.ApplyT(func(v *DeidentifyConfig) *DicomConfig {
		if v == nil {
			return nil
		}
		return v.Dicom
	}).(DicomConfigPtrOutput)
}

// Configures de-id of application/FHIR content.
func (o DeidentifyConfigPtrOutput) Fhir() FhirConfigPtrOutput {
	return o.ApplyT(func(v *DeidentifyConfig) *FhirConfig {
		if v == nil {
			return nil
		}
		return v.Fhir
	}).(FhirConfigPtrOutput)
}

// Configures de-identification of image pixels wherever they are found in the source_dataset.
func (o DeidentifyConfigPtrOutput) Image() ImageConfigPtrOutput {
	return o.ApplyT(func(v *DeidentifyConfig) *ImageConfig {
		if v == nil {
			return nil
		}
		return v.Image
	}).(ImageConfigPtrOutput)
}

// Configures de-identification of text wherever it is found in the source_dataset.
func (o DeidentifyConfigPtrOutput) Text() TextConfigPtrOutput {
	return o.ApplyT(func(v *DeidentifyConfig) *TextConfig {
		if v == nil {
			return nil
		}
		return v.Text
	}).(TextConfigPtrOutput)
}

// Ensures in-flight data remains in the region of origin during de-identification. Using this option results in a significant reduction of throughput, and is not compatible with `LOCATION` or `ORGANIZATION_NAME` infoTypes. `LOCATION` must be excluded within TextConfig, and must also be excluded within ImageConfig if image redaction is required.
func (o DeidentifyConfigPtrOutput) UseRegionalDataProcessing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeidentifyConfig) *bool {
		if v == nil {
			return nil
		}
		return v.UseRegionalDataProcessing
	}).(pulumi.BoolPtrOutput)
}

// Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.
type DeidentifyConfigResponse struct {
	// Configures de-id of application/DICOM content.
	Dicom DicomConfigResponse `pulumi:"dicom"`
	// Configures de-id of application/FHIR content.
	Fhir FhirConfigResponse `pulumi:"fhir"`
	// Configures de-identification of image pixels wherever they are found in the source_dataset.
	Image ImageConfigResponse `pulumi:"image"`
	// Configures de-identification of text wherever it is found in the source_dataset.
	Text TextConfigResponse `pulumi:"text"`
	// Ensures in-flight data remains in the region of origin during de-identification. Using this option results in a significant reduction of throughput, and is not compatible with `LOCATION` or `ORGANIZATION_NAME` infoTypes. `LOCATION` must be excluded within TextConfig, and must also be excluded within ImageConfig if image redaction is required.
	UseRegionalDataProcessing bool `pulumi:"useRegionalDataProcessing"`
}

// Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.
type DeidentifyConfigResponseOutput struct{ *pulumi.OutputState }

func (DeidentifyConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeidentifyConfigResponse)(nil)).Elem()
}

func (o DeidentifyConfigResponseOutput) ToDeidentifyConfigResponseOutput() DeidentifyConfigResponseOutput {
	return o
}

func (o DeidentifyConfigResponseOutput) ToDeidentifyConfigResponseOutputWithContext(ctx context.Context) DeidentifyConfigResponseOutput {
	return o
}

// Configures de-id of application/DICOM content.
func (o DeidentifyConfigResponseOutput) Dicom() DicomConfigResponseOutput {
	return o.ApplyT(func(v DeidentifyConfigResponse) DicomConfigResponse { return v.Dicom }).(DicomConfigResponseOutput)
}

// Configures de-id of application/FHIR content.
func (o DeidentifyConfigResponseOutput) Fhir() FhirConfigResponseOutput {
	return o.ApplyT(func(v DeidentifyConfigResponse) FhirConfigResponse { return v.Fhir }).(FhirConfigResponseOutput)
}

// Configures de-identification of image pixels wherever they are found in the source_dataset.
func (o DeidentifyConfigResponseOutput) Image() ImageConfigResponseOutput {
	return o.ApplyT(func(v DeidentifyConfigResponse) ImageConfigResponse { return v.Image }).(ImageConfigResponseOutput)
}

// Configures de-identification of text wherever it is found in the source_dataset.
func (o DeidentifyConfigResponseOutput) Text() TextConfigResponseOutput {
	return o.ApplyT(func(v DeidentifyConfigResponse) TextConfigResponse { return v.Text }).(TextConfigResponseOutput)
}

// Ensures in-flight data remains in the region of origin during de-identification. Using this option results in a significant reduction of throughput, and is not compatible with `LOCATION` or `ORGANIZATION_NAME` infoTypes. `LOCATION` must be excluded within TextConfig, and must also be excluded within ImageConfig if image redaction is required.
func (o DeidentifyConfigResponseOutput) UseRegionalDataProcessing() pulumi.BoolOutput {
	return o.ApplyT(func(v DeidentifyConfigResponse) bool { return v.UseRegionalDataProcessing }).(pulumi.BoolOutput)
}

// Specifies the parameters needed for de-identification of DICOM stores.
type DicomConfig struct {
	// Tag filtering profile that determines which tags to keep/remove.
	FilterProfile *DicomConfigFilterProfile `pulumi:"filterProfile"`
	// List of tags to keep. Remove all other tags.
	KeepList *TagFilterList `pulumi:"keepList"`
	// List of tags to remove. Keep all other tags.
	RemoveList *TagFilterList `pulumi:"removeList"`
	// If true, skip replacing StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID, and MediaStorageSOPInstanceUID and leave them untouched. The Cloud Healthcare API regenerates these UIDs by default based on the DICOM Standard's reasoning: "Whilst these UIDs cannot be mapped directly to an individual out of context, given access to the original images, or to a database of the original images containing the UIDs, it would be possible to recover the individual's identity." http://dicom.nema.org/medical/dicom/current/output/chtml/part15/sect_E.3.9.html
	SkipIdRedaction *bool `pulumi:"skipIdRedaction"`
}

// DicomConfigInput is an input type that accepts DicomConfigArgs and DicomConfigOutput values.
// You can construct a concrete instance of `DicomConfigInput` via:
//
//	DicomConfigArgs{...}
type DicomConfigInput interface {
	pulumi.Input

	ToDicomConfigOutput() DicomConfigOutput
	ToDicomConfigOutputWithContext(context.Context) DicomConfigOutput
}

// Specifies the parameters needed for de-identification of DICOM stores.
type DicomConfigArgs struct {
	// Tag filtering profile that determines which tags to keep/remove.
	FilterProfile DicomConfigFilterProfilePtrInput `pulumi:"filterProfile"`
	// List of tags to keep. Remove all other tags.
	KeepList TagFilterListPtrInput `pulumi:"keepList"`
	// List of tags to remove. Keep all other tags.
	RemoveList TagFilterListPtrInput `pulumi:"removeList"`
	// If true, skip replacing StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID, and MediaStorageSOPInstanceUID and leave them untouched. The Cloud Healthcare API regenerates these UIDs by default based on the DICOM Standard's reasoning: "Whilst these UIDs cannot be mapped directly to an individual out of context, given access to the original images, or to a database of the original images containing the UIDs, it would be possible to recover the individual's identity." http://dicom.nema.org/medical/dicom/current/output/chtml/part15/sect_E.3.9.html
	SkipIdRedaction pulumi.BoolPtrInput `pulumi:"skipIdRedaction"`
}

func (DicomConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DicomConfig)(nil)).Elem()
}

func (i DicomConfigArgs) ToDicomConfigOutput() DicomConfigOutput {
	return i.ToDicomConfigOutputWithContext(context.Background())
}

func (i DicomConfigArgs) ToDicomConfigOutputWithContext(ctx context.Context) DicomConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomConfigOutput)
}

func (i DicomConfigArgs) ToDicomConfigPtrOutput() DicomConfigPtrOutput {
	return i.ToDicomConfigPtrOutputWithContext(context.Background())
}

func (i DicomConfigArgs) ToDicomConfigPtrOutputWithContext(ctx context.Context) DicomConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomConfigOutput).ToDicomConfigPtrOutputWithContext(ctx)
}

// DicomConfigPtrInput is an input type that accepts DicomConfigArgs, DicomConfigPtr and DicomConfigPtrOutput values.
// You can construct a concrete instance of `DicomConfigPtrInput` via:
//
//	        DicomConfigArgs{...}
//
//	or:
//
//	        nil
type DicomConfigPtrInput interface {
	pulumi.Input

	ToDicomConfigPtrOutput() DicomConfigPtrOutput
	ToDicomConfigPtrOutputWithContext(context.Context) DicomConfigPtrOutput
}

type dicomConfigPtrType DicomConfigArgs

func DicomConfigPtr(v *DicomConfigArgs) DicomConfigPtrInput {
	return (*dicomConfigPtrType)(v)
}

func (*dicomConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DicomConfig)(nil)).Elem()
}

func (i *dicomConfigPtrType) ToDicomConfigPtrOutput() DicomConfigPtrOutput {
	return i.ToDicomConfigPtrOutputWithContext(context.Background())
}

func (i *dicomConfigPtrType) ToDicomConfigPtrOutputWithContext(ctx context.Context) DicomConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DicomConfigPtrOutput)
}

// Specifies the parameters needed for de-identification of DICOM stores.
type DicomConfigOutput struct{ *pulumi.OutputState }

func (DicomConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DicomConfig)(nil)).Elem()
}

func (o DicomConfigOutput) ToDicomConfigOutput() DicomConfigOutput {
	return o
}

func (o DicomConfigOutput) ToDicomConfigOutputWithContext(ctx context.Context) DicomConfigOutput {
	return o
}

func (o DicomConfigOutput) ToDicomConfigPtrOutput() DicomConfigPtrOutput {
	return o.ToDicomConfigPtrOutputWithContext(context.Background())
}

func (o DicomConfigOutput) ToDicomConfigPtrOutputWithContext(ctx context.Context) DicomConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DicomConfig) *DicomConfig {
		return &v
	}).(DicomConfigPtrOutput)
}

// Tag filtering profile that determines which tags to keep/remove.
func (o DicomConfigOutput) FilterProfile() DicomConfigFilterProfilePtrOutput {
	return o.ApplyT(func(v DicomConfig) *DicomConfigFilterProfile { return v.FilterProfile }).(DicomConfigFilterProfilePtrOutput)
}

// List of tags to keep. Remove all other tags.
func (o DicomConfigOutput) KeepList() TagFilterListPtrOutput {
	return o.ApplyT(func(v DicomConfig) *TagFilterList { return v.KeepList }).(TagFilterListPtrOutput)
}

// List of tags to remove. Keep all other tags.
func (o DicomConfigOutput) RemoveList() TagFilterListPtrOutput {
	return o.ApplyT(func(v DicomConfig) *TagFilterList { return v.RemoveList }).(TagFilterListPtrOutput)
}

// If true, skip replacing StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID, and MediaStorageSOPInstanceUID and leave them untouched. The Cloud Healthcare API regenerates these UIDs by default based on the DICOM Standard's reasoning: "Whilst these UIDs cannot be mapped directly to an individual out of context, given access to the original images, or to a database of the original images containing the UIDs, it would be possible to recover the individual's identity." http://dicom.nema.org/medical/dicom/current/output/chtml/part15/sect_E.3.9.html
func (o DicomConfigOutput) SkipIdRedaction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DicomConfig) *bool { return v.SkipIdRedaction }).(pulumi.BoolPtrOutput)
}

type DicomConfigPtrOutput struct{ *pulumi.OutputState }

func (DicomConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DicomConfig)(nil)).Elem()
}

func (o DicomConfigPtrOutput) ToDicomConfigPtrOutput() DicomConfigPtrOutput {
	return o
}

func (o DicomConfigPtrOutput) ToDicomConfigPtrOutputWithContext(ctx context.Context) DicomConfigPtrOutput {
	return o
}

func (o DicomConfigPtrOutput) Elem() DicomConfigOutput {
	return o.ApplyT(func(v *DicomConfig) DicomConfig {
		if v != nil {
			return *v
		}
		var ret DicomConfig
		return ret
	}).(DicomConfigOutput)
}

// Tag filtering profile that determines which tags to keep/remove.
func (o DicomConfigPtrOutput) FilterProfile() DicomConfigFilterProfilePtrOutput {
	return o.ApplyT(func(v *DicomConfig) *DicomConfigFilterProfile {
		if v == nil {
			return nil
		}
		return v.FilterProfile
	}).(DicomConfigFilterProfilePtrOutput)
}

// List of tags to keep. Remove all other tags.
func (o DicomConfigPtrOutput) KeepList() TagFilterListPtrOutput {
	return o.ApplyT(func(v *DicomConfig) *TagFilterList {
		if v == nil {
			return nil
		}
		return v.KeepList
	}).(TagFilterListPtrOutput)
}

// List of tags to remove. Keep all other tags.
func (o DicomConfigPtrOutput) RemoveList() TagFilterListPtrOutput {
	return o.ApplyT(func(v *DicomConfig) *TagFilterList {
		if v == nil {
			return nil
		}
		return v.RemoveList
	}).(TagFilterListPtrOutput)
}

// If true, skip replacing StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID, and MediaStorageSOPInstanceUID and leave them untouched. The Cloud Healthcare API regenerates these UIDs by default based on the DICOM Standard's reasoning: "Whilst these UIDs cannot be mapped directly to an individual out of context, given access to the original images, or to a database of the original images containing the UIDs, it would be possible to recover the individual's identity." http://dicom.nema.org/medical/dicom/current/output/chtml/part15/sect_E.3.9.html
func (o DicomConfigPtrOutput) SkipIdRedaction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DicomConfig) *bool {
		if v == nil {
			return nil
		}
		return v.SkipIdRedaction
	}).(pulumi.BoolPtrOutput)
}

// Specifies the parameters needed for de-identification of DICOM stores.
type DicomConfigResponse struct {
	// Tag filtering profile that determines which tags to keep/remove.
	FilterProfile string `pulumi:"filterProfile"`
	// List of tags to keep. Remove all other tags.
	KeepList TagFilterListResponse `pulumi:"keepList"`
	// List of tags to remove. Keep all other tags.
	RemoveList TagFilterListResponse `pulumi:"removeList"`
	// If true, skip replacing StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID, and MediaStorageSOPInstanceUID and leave them untouched. The Cloud Healthcare API regenerates these UIDs by default based on the DICOM Standard's reasoning: "Whilst these UIDs cannot be mapped directly to an individual out of context, given access to the original images, or to a database of the original images containing the UIDs, it would be possible to recover the individual's identity." http://dicom.nema.org/medical/dicom/current/output/chtml/part15/sect_E.3.9.html
	SkipIdRedaction bool `pulumi:"skipIdRedaction"`
}

// Specifies the parameters needed for de-identification of DICOM stores.
type DicomConfigResponseOutput struct{ *pulumi.OutputState }

func (DicomConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DicomConfigResponse)(nil)).Elem()
}

func (o DicomConfigResponseOutput) ToDicomConfigResponseOutput() DicomConfigResponseOutput {
	return o
}

func (o DicomConfigResponseOutput) ToDicomConfigResponseOutputWithContext(ctx context.Context) DicomConfigResponseOutput {
	return o
}

// Tag filtering profile that determines which tags to keep/remove.
func (o DicomConfigResponseOutput) FilterProfile() pulumi.StringOutput {
	return o.ApplyT(func(v DicomConfigResponse) string { return v.FilterProfile }).(pulumi.StringOutput)
}

// List of tags to keep. Remove all other tags.
func (o DicomConfigResponseOutput) KeepList() TagFilterListResponseOutput {
	return o.ApplyT(func(v DicomConfigResponse) TagFilterListResponse { return v.KeepList }).(TagFilterListResponseOutput)
}

// List of tags to remove. Keep all other tags.
func (o DicomConfigResponseOutput) RemoveList() TagFilterListResponseOutput {
	return o.ApplyT(func(v DicomConfigResponse) TagFilterListResponse { return v.RemoveList }).(TagFilterListResponseOutput)
}

// If true, skip replacing StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID, and MediaStorageSOPInstanceUID and leave them untouched. The Cloud Healthcare API regenerates these UIDs by default based on the DICOM Standard's reasoning: "Whilst these UIDs cannot be mapped directly to an individual out of context, given access to the original images, or to a database of the original images containing the UIDs, it would be possible to recover the individual's identity." http://dicom.nema.org/medical/dicom/current/output/chtml/part15/sect_E.3.9.html
func (o DicomConfigResponseOutput) SkipIdRedaction() pulumi.BoolOutput {
	return o.ApplyT(func(v DicomConfigResponse) bool { return v.SkipIdRedaction }).(pulumi.BoolOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Specifies how to handle de-identification of a FHIR store.
type FhirConfig struct {
	// The behaviour for handling FHIR extensions that aren't otherwise specified for de-identification. If true, all extensions are preserved during de-identification by default. If false or unspecified, all extensions are removed during de-identification by default.
	DefaultKeepExtensions *bool `pulumi:"defaultKeepExtensions"`
	// Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions will be processed according to `default_keep_extensions`.
	FieldMetadataList []FieldMetadata `pulumi:"fieldMetadataList"`
}

// FhirConfigInput is an input type that accepts FhirConfigArgs and FhirConfigOutput values.
// You can construct a concrete instance of `FhirConfigInput` via:
//
//	FhirConfigArgs{...}
type FhirConfigInput interface {
	pulumi.Input

	ToFhirConfigOutput() FhirConfigOutput
	ToFhirConfigOutputWithContext(context.Context) FhirConfigOutput
}

// Specifies how to handle de-identification of a FHIR store.
type FhirConfigArgs struct {
	// The behaviour for handling FHIR extensions that aren't otherwise specified for de-identification. If true, all extensions are preserved during de-identification by default. If false or unspecified, all extensions are removed during de-identification by default.
	DefaultKeepExtensions pulumi.BoolPtrInput `pulumi:"defaultKeepExtensions"`
	// Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions will be processed according to `default_keep_extensions`.
	FieldMetadataList FieldMetadataArrayInput `pulumi:"fieldMetadataList"`
}

func (FhirConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirConfig)(nil)).Elem()
}

func (i FhirConfigArgs) ToFhirConfigOutput() FhirConfigOutput {
	return i.ToFhirConfigOutputWithContext(context.Background())
}

func (i FhirConfigArgs) ToFhirConfigOutputWithContext(ctx context.Context) FhirConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirConfigOutput)
}

func (i FhirConfigArgs) ToFhirConfigPtrOutput() FhirConfigPtrOutput {
	return i.ToFhirConfigPtrOutputWithContext(context.Background())
}

func (i FhirConfigArgs) ToFhirConfigPtrOutputWithContext(ctx context.Context) FhirConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirConfigOutput).ToFhirConfigPtrOutputWithContext(ctx)
}

// FhirConfigPtrInput is an input type that accepts FhirConfigArgs, FhirConfigPtr and FhirConfigPtrOutput values.
// You can construct a concrete instance of `FhirConfigPtrInput` via:
//
//	        FhirConfigArgs{...}
//
//	or:
//
//	        nil
type FhirConfigPtrInput interface {
	pulumi.Input

	ToFhirConfigPtrOutput() FhirConfigPtrOutput
	ToFhirConfigPtrOutputWithContext(context.Context) FhirConfigPtrOutput
}

type fhirConfigPtrType FhirConfigArgs

func FhirConfigPtr(v *FhirConfigArgs) FhirConfigPtrInput {
	return (*fhirConfigPtrType)(v)
}

func (*fhirConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirConfig)(nil)).Elem()
}

func (i *fhirConfigPtrType) ToFhirConfigPtrOutput() FhirConfigPtrOutput {
	return i.ToFhirConfigPtrOutputWithContext(context.Background())
}

func (i *fhirConfigPtrType) ToFhirConfigPtrOutputWithContext(ctx context.Context) FhirConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirConfigPtrOutput)
}

// Specifies how to handle de-identification of a FHIR store.
type FhirConfigOutput struct{ *pulumi.OutputState }

func (FhirConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirConfig)(nil)).Elem()
}

func (o FhirConfigOutput) ToFhirConfigOutput() FhirConfigOutput {
	return o
}

func (o FhirConfigOutput) ToFhirConfigOutputWithContext(ctx context.Context) FhirConfigOutput {
	return o
}

func (o FhirConfigOutput) ToFhirConfigPtrOutput() FhirConfigPtrOutput {
	return o.ToFhirConfigPtrOutputWithContext(context.Background())
}

func (o FhirConfigOutput) ToFhirConfigPtrOutputWithContext(ctx context.Context) FhirConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FhirConfig) *FhirConfig {
		return &v
	}).(FhirConfigPtrOutput)
}

// The behaviour for handling FHIR extensions that aren't otherwise specified for de-identification. If true, all extensions are preserved during de-identification by default. If false or unspecified, all extensions are removed during de-identification by default.
func (o FhirConfigOutput) DefaultKeepExtensions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FhirConfig) *bool { return v.DefaultKeepExtensions }).(pulumi.BoolPtrOutput)
}

// Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions will be processed according to `default_keep_extensions`.
func (o FhirConfigOutput) FieldMetadataList() FieldMetadataArrayOutput {
	return o.ApplyT(func(v FhirConfig) []FieldMetadata { return v.FieldMetadataList }).(FieldMetadataArrayOutput)
}

type FhirConfigPtrOutput struct{ *pulumi.OutputState }

func (FhirConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FhirConfig)(nil)).Elem()
}

func (o FhirConfigPtrOutput) ToFhirConfigPtrOutput() FhirConfigPtrOutput {
	return o
}

func (o FhirConfigPtrOutput) ToFhirConfigPtrOutputWithContext(ctx context.Context) FhirConfigPtrOutput {
	return o
}

func (o FhirConfigPtrOutput) Elem() FhirConfigOutput {
	return o.ApplyT(func(v *FhirConfig) FhirConfig {
		if v != nil {
			return *v
		}
		var ret FhirConfig
		return ret
	}).(FhirConfigOutput)
}

// The behaviour for handling FHIR extensions that aren't otherwise specified for de-identification. If true, all extensions are preserved during de-identification by default. If false or unspecified, all extensions are removed during de-identification by default.
func (o FhirConfigPtrOutput) DefaultKeepExtensions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FhirConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DefaultKeepExtensions
	}).(pulumi.BoolPtrOutput)
}

// Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions will be processed according to `default_keep_extensions`.
func (o FhirConfigPtrOutput) FieldMetadataList() FieldMetadataArrayOutput {
	return o.ApplyT(func(v *FhirConfig) []FieldMetadata {
		if v == nil {
			return nil
		}
		return v.FieldMetadataList
	}).(FieldMetadataArrayOutput)
}

// Specifies how to handle de-identification of a FHIR store.
type FhirConfigResponse struct {
	// The behaviour for handling FHIR extensions that aren't otherwise specified for de-identification. If true, all extensions are preserved during de-identification by default. If false or unspecified, all extensions are removed during de-identification by default.
	DefaultKeepExtensions bool `pulumi:"defaultKeepExtensions"`
	// Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions will be processed according to `default_keep_extensions`.
	FieldMetadataList []FieldMetadataResponse `pulumi:"fieldMetadataList"`
}

// Specifies how to handle de-identification of a FHIR store.
type FhirConfigResponseOutput struct{ *pulumi.OutputState }

func (FhirConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirConfigResponse)(nil)).Elem()
}

func (o FhirConfigResponseOutput) ToFhirConfigResponseOutput() FhirConfigResponseOutput {
	return o
}

func (o FhirConfigResponseOutput) ToFhirConfigResponseOutputWithContext(ctx context.Context) FhirConfigResponseOutput {
	return o
}

// The behaviour for handling FHIR extensions that aren't otherwise specified for de-identification. If true, all extensions are preserved during de-identification by default. If false or unspecified, all extensions are removed during de-identification by default.
func (o FhirConfigResponseOutput) DefaultKeepExtensions() pulumi.BoolOutput {
	return o.ApplyT(func(v FhirConfigResponse) bool { return v.DefaultKeepExtensions }).(pulumi.BoolOutput)
}

// Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions will be processed according to `default_keep_extensions`.
func (o FhirConfigResponseOutput) FieldMetadataList() FieldMetadataResponseArrayOutput {
	return o.ApplyT(func(v FhirConfigResponse) []FieldMetadataResponse { return v.FieldMetadataList }).(FieldMetadataResponseArrayOutput)
}

// Contains the configuration for FHIR notifications.
type FhirNotificationConfig struct {
	// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It is guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail (https://cloud.google.com/healthcare-api/docs/permissions-healthcare-api-gcp-products#dicom_fhir_and_hl7v2_store_cloud_pubsub_permissions). If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare-api/docs/how-tos/logging).
	PubsubTopic *string `pulumi:"pubsubTopic"`
	// Whether to send full FHIR resource to this Pub/Sub topic.
	SendFullResource *bool `pulumi:"sendFullResource"`
	// Whether to send full FHIR resource to this Pub/Sub topic for deleting FHIR resource. Note that setting this to true does not guarantee that all previous resources will be sent in the format of full FHIR resource. When a resource change is too large or during heavy traffic, only the resource name will be sent. Clients should always check the "payloadType" label from a Pub/Sub message to determine whether it needs to fetch the full previous resource as a separate operation.
	SendPreviousResourceOnDelete *bool `pulumi:"sendPreviousResourceOnDelete"`
}

// FhirNotificationConfigInput is an input type that accepts FhirNotificationConfigArgs and FhirNotificationConfigOutput values.
// You can construct a concrete instance of `FhirNotificationConfigInput` via:
//
//	FhirNotificationConfigArgs{...}
type FhirNotificationConfigInput interface {
	pulumi.Input

	ToFhirNotificationConfigOutput() FhirNotificationConfigOutput
	ToFhirNotificationConfigOutputWithContext(context.Context) FhirNotificationConfigOutput
}

// Contains the configuration for FHIR notifications.
type FhirNotificationConfigArgs struct {
	// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It is guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail (https://cloud.google.com/healthcare-api/docs/permissions-healthcare-api-gcp-products#dicom_fhir_and_hl7v2_store_cloud_pubsub_permissions). If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare-api/docs/how-tos/logging).
	PubsubTopic pulumi.StringPtrInput `pulumi:"pubsubTopic"`
	// Whether to send full FHIR resource to this Pub/Sub topic.
	SendFullResource pulumi.BoolPtrInput `pulumi:"sendFullResource"`
	// Whether to send full FHIR resource to this Pub/Sub topic for deleting FHIR resource. Note that setting this to true does not guarantee that all previous resources will be sent in the format of full FHIR resource. When a resource change is too large or during heavy traffic, only the resource name will be sent. Clients should always check the "payloadType" label from a Pub/Sub message to determine whether it needs to fetch the full previous resource as a separate operation.
	SendPreviousResourceOnDelete pulumi.BoolPtrInput `pulumi:"sendPreviousResourceOnDelete"`
}

func (FhirNotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirNotificationConfig)(nil)).Elem()
}

func (i FhirNotificationConfigArgs) ToFhirNotificationConfigOutput() FhirNotificationConfigOutput {
	return i.ToFhirNotificationConfigOutputWithContext(context.Background())
}

func (i FhirNotificationConfigArgs) ToFhirNotificationConfigOutputWithContext(ctx context.Context) FhirNotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirNotificationConfigOutput)
}

// FhirNotificationConfigArrayInput is an input type that accepts FhirNotificationConfigArray and FhirNotificationConfigArrayOutput values.
// You can construct a concrete instance of `FhirNotificationConfigArrayInput` via:
//
//	FhirNotificationConfigArray{ FhirNotificationConfigArgs{...} }
type FhirNotificationConfigArrayInput interface {
	pulumi.Input

	ToFhirNotificationConfigArrayOutput() FhirNotificationConfigArrayOutput
	ToFhirNotificationConfigArrayOutputWithContext(context.Context) FhirNotificationConfigArrayOutput
}

type FhirNotificationConfigArray []FhirNotificationConfigInput

func (FhirNotificationConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FhirNotificationConfig)(nil)).Elem()
}

func (i FhirNotificationConfigArray) ToFhirNotificationConfigArrayOutput() FhirNotificationConfigArrayOutput {
	return i.ToFhirNotificationConfigArrayOutputWithContext(context.Background())
}

func (i FhirNotificationConfigArray) ToFhirNotificationConfigArrayOutputWithContext(ctx context.Context) FhirNotificationConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FhirNotificationConfigArrayOutput)
}

// Contains the configuration for FHIR notifications.
type FhirNotificationConfigOutput struct{ *pulumi.OutputState }

func (FhirNotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirNotificationConfig)(nil)).Elem()
}

func (o FhirNotificationConfigOutput) ToFhirNotificationConfigOutput() FhirNotificationConfigOutput {
	return o
}

func (o FhirNotificationConfigOutput) ToFhirNotificationConfigOutputWithContext(ctx context.Context) FhirNotificationConfigOutput {
	return o
}

// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It is guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail (https://cloud.google.com/healthcare-api/docs/permissions-healthcare-api-gcp-products#dicom_fhir_and_hl7v2_store_cloud_pubsub_permissions). If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare-api/docs/how-tos/logging).
func (o FhirNotificationConfigOutput) PubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FhirNotificationConfig) *string { return v.PubsubTopic }).(pulumi.StringPtrOutput)
}

// Whether to send full FHIR resource to this Pub/Sub topic.
func (o FhirNotificationConfigOutput) SendFullResource() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FhirNotificationConfig) *bool { return v.SendFullResource }).(pulumi.BoolPtrOutput)
}

// Whether to send full FHIR resource to this Pub/Sub topic for deleting FHIR resource. Note that setting this to true does not guarantee that all previous resources will be sent in the format of full FHIR resource. When a resource change is too large or during heavy traffic, only the resource name will be sent. Clients should always check the "payloadType" label from a Pub/Sub message to determine whether it needs to fetch the full previous resource as a separate operation.
func (o FhirNotificationConfigOutput) SendPreviousResourceOnDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FhirNotificationConfig) *bool { return v.SendPreviousResourceOnDelete }).(pulumi.BoolPtrOutput)
}

type FhirNotificationConfigArrayOutput struct{ *pulumi.OutputState }

func (FhirNotificationConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FhirNotificationConfig)(nil)).Elem()
}

func (o FhirNotificationConfigArrayOutput) ToFhirNotificationConfigArrayOutput() FhirNotificationConfigArrayOutput {
	return o
}

func (o FhirNotificationConfigArrayOutput) ToFhirNotificationConfigArrayOutputWithContext(ctx context.Context) FhirNotificationConfigArrayOutput {
	return o
}

func (o FhirNotificationConfigArrayOutput) Index(i pulumi.IntInput) FhirNotificationConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FhirNotificationConfig {
		return vs[0].([]FhirNotificationConfig)[vs[1].(int)]
	}).(FhirNotificationConfigOutput)
}

// Contains the configuration for FHIR notifications.
type FhirNotificationConfigResponse struct {
	// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It is guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail (https://cloud.google.com/healthcare-api/docs/permissions-healthcare-api-gcp-products#dicom_fhir_and_hl7v2_store_cloud_pubsub_permissions). If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare-api/docs/how-tos/logging).
	PubsubTopic string `pulumi:"pubsubTopic"`
	// Whether to send full FHIR resource to this Pub/Sub topic.
	SendFullResource bool `pulumi:"sendFullResource"`
	// Whether to send full FHIR resource to this Pub/Sub topic for deleting FHIR resource. Note that setting this to true does not guarantee that all previous resources will be sent in the format of full FHIR resource. When a resource change is too large or during heavy traffic, only the resource name will be sent. Clients should always check the "payloadType" label from a Pub/Sub message to determine whether it needs to fetch the full previous resource as a separate operation.
	SendPreviousResourceOnDelete bool `pulumi:"sendPreviousResourceOnDelete"`
}

// Contains the configuration for FHIR notifications.
type FhirNotificationConfigResponseOutput struct{ *pulumi.OutputState }

func (FhirNotificationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FhirNotificationConfigResponse)(nil)).Elem()
}

func (o FhirNotificationConfigResponseOutput) ToFhirNotificationConfigResponseOutput() FhirNotificationConfigResponseOutput {
	return o
}

func (o FhirNotificationConfigResponseOutput) ToFhirNotificationConfigResponseOutputWithContext(ctx context.Context) FhirNotificationConfigResponseOutput {
	return o
}

// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It is guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail (https://cloud.google.com/healthcare-api/docs/permissions-healthcare-api-gcp-products#dicom_fhir_and_hl7v2_store_cloud_pubsub_permissions). If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare-api/docs/how-tos/logging).
func (o FhirNotificationConfigResponseOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v FhirNotificationConfigResponse) string { return v.PubsubTopic }).(pulumi.StringOutput)
}

// Whether to send full FHIR resource to this Pub/Sub topic.
func (o FhirNotificationConfigResponseOutput) SendFullResource() pulumi.BoolOutput {
	return o.ApplyT(func(v FhirNotificationConfigResponse) bool { return v.SendFullResource }).(pulumi.BoolOutput)
}

// Whether to send full FHIR resource to this Pub/Sub topic for deleting FHIR resource. Note that setting this to true does not guarantee that all previous resources will be sent in the format of full FHIR resource. When a resource change is too large or during heavy traffic, only the resource name will be sent. Clients should always check the "payloadType" label from a Pub/Sub message to determine whether it needs to fetch the full previous resource as a separate operation.
func (o FhirNotificationConfigResponseOutput) SendPreviousResourceOnDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v FhirNotificationConfigResponse) bool { return v.SendPreviousResourceOnDelete }).(pulumi.BoolOutput)
}

type FhirNotificationConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (FhirNotificationConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FhirNotificationConfigResponse)(nil)).Elem()
}

func (o FhirNotificationConfigResponseArrayOutput) ToFhirNotificationConfigResponseArrayOutput() FhirNotificationConfigResponseArrayOutput {
	return o
}

func (o FhirNotificationConfigResponseArrayOutput) ToFhirNotificationConfigResponseArrayOutputWithContext(ctx context.Context) FhirNotificationConfigResponseArrayOutput {
	return o
}

func (o FhirNotificationConfigResponseArrayOutput) Index(i pulumi.IntInput) FhirNotificationConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FhirNotificationConfigResponse {
		return vs[0].([]FhirNotificationConfigResponse)[vs[1].(int)]
	}).(FhirNotificationConfigResponseOutput)
}

// A (sub) field of a type.
type Field struct {
	// The maximum number of times this field can be repeated. 0 or -1 means unbounded.
	MaxOccurs *int `pulumi:"maxOccurs"`
	// The minimum number of times this field must be present/repeated.
	MinOccurs *int `pulumi:"minOccurs"`
	// The name of the field. For example, "PID-1" or just "1".
	Name *string `pulumi:"name"`
	// The HL7v2 table this field refers to. For example, PID-15 (Patient's Primary Language) usually refers to table "0296".
	Table *string `pulumi:"table"`
	// The type of this field. A Type with this name must be defined in an Hl7TypesConfig.
	Type *string `pulumi:"type"`
}

// FieldInput is an input type that accepts FieldArgs and FieldOutput values.
// You can construct a concrete instance of `FieldInput` via:
//
//	FieldArgs{...}
type FieldInput interface {
	pulumi.Input

	ToFieldOutput() FieldOutput
	ToFieldOutputWithContext(context.Context) FieldOutput
}

// A (sub) field of a type.
type FieldArgs struct {
	// The maximum number of times this field can be repeated. 0 or -1 means unbounded.
	MaxOccurs pulumi.IntPtrInput `pulumi:"maxOccurs"`
	// The minimum number of times this field must be present/repeated.
	MinOccurs pulumi.IntPtrInput `pulumi:"minOccurs"`
	// The name of the field. For example, "PID-1" or just "1".
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The HL7v2 table this field refers to. For example, PID-15 (Patient's Primary Language) usually refers to table "0296".
	Table pulumi.StringPtrInput `pulumi:"table"`
	// The type of this field. A Type with this name must be defined in an Hl7TypesConfig.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (FieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Field)(nil)).Elem()
}

func (i FieldArgs) ToFieldOutput() FieldOutput {
	return i.ToFieldOutputWithContext(context.Background())
}

func (i FieldArgs) ToFieldOutputWithContext(ctx context.Context) FieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldOutput)
}

// FieldArrayInput is an input type that accepts FieldArray and FieldArrayOutput values.
// You can construct a concrete instance of `FieldArrayInput` via:
//
//	FieldArray{ FieldArgs{...} }
type FieldArrayInput interface {
	pulumi.Input

	ToFieldArrayOutput() FieldArrayOutput
	ToFieldArrayOutputWithContext(context.Context) FieldArrayOutput
}

type FieldArray []FieldInput

func (FieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Field)(nil)).Elem()
}

func (i FieldArray) ToFieldArrayOutput() FieldArrayOutput {
	return i.ToFieldArrayOutputWithContext(context.Background())
}

func (i FieldArray) ToFieldArrayOutputWithContext(ctx context.Context) FieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldArrayOutput)
}

// A (sub) field of a type.
type FieldOutput struct{ *pulumi.OutputState }

func (FieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Field)(nil)).Elem()
}

func (o FieldOutput) ToFieldOutput() FieldOutput {
	return o
}

func (o FieldOutput) ToFieldOutputWithContext(ctx context.Context) FieldOutput {
	return o
}

// The maximum number of times this field can be repeated. 0 or -1 means unbounded.
func (o FieldOutput) MaxOccurs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Field) *int { return v.MaxOccurs }).(pulumi.IntPtrOutput)
}

// The minimum number of times this field must be present/repeated.
func (o FieldOutput) MinOccurs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Field) *int { return v.MinOccurs }).(pulumi.IntPtrOutput)
}

// The name of the field. For example, "PID-1" or just "1".
func (o FieldOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Field) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The HL7v2 table this field refers to. For example, PID-15 (Patient's Primary Language) usually refers to table "0296".
func (o FieldOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Field) *string { return v.Table }).(pulumi.StringPtrOutput)
}

// The type of this field. A Type with this name must be defined in an Hl7TypesConfig.
func (o FieldOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Field) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FieldArrayOutput struct{ *pulumi.OutputState }

func (FieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Field)(nil)).Elem()
}

func (o FieldArrayOutput) ToFieldArrayOutput() FieldArrayOutput {
	return o
}

func (o FieldArrayOutput) ToFieldArrayOutputWithContext(ctx context.Context) FieldArrayOutput {
	return o
}

func (o FieldArrayOutput) Index(i pulumi.IntInput) FieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Field {
		return vs[0].([]Field)[vs[1].(int)]
	}).(FieldOutput)
}

// Specifies FHIR paths to match, and how to handle de-identification of matching fields.
type FieldMetadata struct {
	// Deidentify action for one field.
	Action *FieldMetadataAction `pulumi:"action"`
	// List of paths to FHIR fields to be redacted. Each path is a period-separated list where each component is either a field name or FHIR type name, for example: Patient, HumanName. For "choice" types (those defined in the FHIR spec with the form: field[x]) we use two separate components. For example, "deceasedAge.unit" is matched by "Deceased.Age.unit". Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml.
	Paths []string `pulumi:"paths"`
}

// FieldMetadataInput is an input type that accepts FieldMetadataArgs and FieldMetadataOutput values.
// You can construct a concrete instance of `FieldMetadataInput` via:
//
//	FieldMetadataArgs{...}
type FieldMetadataInput interface {
	pulumi.Input

	ToFieldMetadataOutput() FieldMetadataOutput
	ToFieldMetadataOutputWithContext(context.Context) FieldMetadataOutput
}

// Specifies FHIR paths to match, and how to handle de-identification of matching fields.
type FieldMetadataArgs struct {
	// Deidentify action for one field.
	Action FieldMetadataActionPtrInput `pulumi:"action"`
	// List of paths to FHIR fields to be redacted. Each path is a period-separated list where each component is either a field name or FHIR type name, for example: Patient, HumanName. For "choice" types (those defined in the FHIR spec with the form: field[x]) we use two separate components. For example, "deceasedAge.unit" is matched by "Deceased.Age.unit". Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml.
	Paths pulumi.StringArrayInput `pulumi:"paths"`
}

func (FieldMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldMetadata)(nil)).Elem()
}

func (i FieldMetadataArgs) ToFieldMetadataOutput() FieldMetadataOutput {
	return i.ToFieldMetadataOutputWithContext(context.Background())
}

func (i FieldMetadataArgs) ToFieldMetadataOutputWithContext(ctx context.Context) FieldMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldMetadataOutput)
}

// FieldMetadataArrayInput is an input type that accepts FieldMetadataArray and FieldMetadataArrayOutput values.
// You can construct a concrete instance of `FieldMetadataArrayInput` via:
//
//	FieldMetadataArray{ FieldMetadataArgs{...} }
type FieldMetadataArrayInput interface {
	pulumi.Input

	ToFieldMetadataArrayOutput() FieldMetadataArrayOutput
	ToFieldMetadataArrayOutputWithContext(context.Context) FieldMetadataArrayOutput
}

type FieldMetadataArray []FieldMetadataInput

func (FieldMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FieldMetadata)(nil)).Elem()
}

func (i FieldMetadataArray) ToFieldMetadataArrayOutput() FieldMetadataArrayOutput {
	return i.ToFieldMetadataArrayOutputWithContext(context.Background())
}

func (i FieldMetadataArray) ToFieldMetadataArrayOutputWithContext(ctx context.Context) FieldMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldMetadataArrayOutput)
}

// Specifies FHIR paths to match, and how to handle de-identification of matching fields.
type FieldMetadataOutput struct{ *pulumi.OutputState }

func (FieldMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldMetadata)(nil)).Elem()
}

func (o FieldMetadataOutput) ToFieldMetadataOutput() FieldMetadataOutput {
	return o
}

func (o FieldMetadataOutput) ToFieldMetadataOutputWithContext(ctx context.Context) FieldMetadataOutput {
	return o
}

// Deidentify action for one field.
func (o FieldMetadataOutput) Action() FieldMetadataActionPtrOutput {
	return o.ApplyT(func(v FieldMetadata) *FieldMetadataAction { return v.Action }).(FieldMetadataActionPtrOutput)
}

// List of paths to FHIR fields to be redacted. Each path is a period-separated list where each component is either a field name or FHIR type name, for example: Patient, HumanName. For "choice" types (those defined in the FHIR spec with the form: field[x]) we use two separate components. For example, "deceasedAge.unit" is matched by "Deceased.Age.unit". Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml.
func (o FieldMetadataOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FieldMetadata) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

type FieldMetadataArrayOutput struct{ *pulumi.OutputState }

func (FieldMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FieldMetadata)(nil)).Elem()
}

func (o FieldMetadataArrayOutput) ToFieldMetadataArrayOutput() FieldMetadataArrayOutput {
	return o
}

func (o FieldMetadataArrayOutput) ToFieldMetadataArrayOutputWithContext(ctx context.Context) FieldMetadataArrayOutput {
	return o
}

func (o FieldMetadataArrayOutput) Index(i pulumi.IntInput) FieldMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FieldMetadata {
		return vs[0].([]FieldMetadata)[vs[1].(int)]
	}).(FieldMetadataOutput)
}

// Specifies FHIR paths to match, and how to handle de-identification of matching fields.
type FieldMetadataResponse struct {
	// Deidentify action for one field.
	Action string `pulumi:"action"`
	// List of paths to FHIR fields to be redacted. Each path is a period-separated list where each component is either a field name or FHIR type name, for example: Patient, HumanName. For "choice" types (those defined in the FHIR spec with the form: field[x]) we use two separate components. For example, "deceasedAge.unit" is matched by "Deceased.Age.unit". Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml.
	Paths []string `pulumi:"paths"`
}

// Specifies FHIR paths to match, and how to handle de-identification of matching fields.
type FieldMetadataResponseOutput struct{ *pulumi.OutputState }

func (FieldMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldMetadataResponse)(nil)).Elem()
}

func (o FieldMetadataResponseOutput) ToFieldMetadataResponseOutput() FieldMetadataResponseOutput {
	return o
}

func (o FieldMetadataResponseOutput) ToFieldMetadataResponseOutputWithContext(ctx context.Context) FieldMetadataResponseOutput {
	return o
}

// Deidentify action for one field.
func (o FieldMetadataResponseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v FieldMetadataResponse) string { return v.Action }).(pulumi.StringOutput)
}

// List of paths to FHIR fields to be redacted. Each path is a period-separated list where each component is either a field name or FHIR type name, for example: Patient, HumanName. For "choice" types (those defined in the FHIR spec with the form: field[x]) we use two separate components. For example, "deceasedAge.unit" is matched by "Deceased.Age.unit". Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml.
func (o FieldMetadataResponseOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FieldMetadataResponse) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

type FieldMetadataResponseArrayOutput struct{ *pulumi.OutputState }

func (FieldMetadataResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FieldMetadataResponse)(nil)).Elem()
}

func (o FieldMetadataResponseArrayOutput) ToFieldMetadataResponseArrayOutput() FieldMetadataResponseArrayOutput {
	return o
}

func (o FieldMetadataResponseArrayOutput) ToFieldMetadataResponseArrayOutputWithContext(ctx context.Context) FieldMetadataResponseArrayOutput {
	return o
}

func (o FieldMetadataResponseArrayOutput) Index(i pulumi.IntInput) FieldMetadataResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FieldMetadataResponse {
		return vs[0].([]FieldMetadataResponse)[vs[1].(int)]
	}).(FieldMetadataResponseOutput)
}

// A (sub) field of a type.
type FieldResponse struct {
	// The maximum number of times this field can be repeated. 0 or -1 means unbounded.
	MaxOccurs int `pulumi:"maxOccurs"`
	// The minimum number of times this field must be present/repeated.
	MinOccurs int `pulumi:"minOccurs"`
	// The name of the field. For example, "PID-1" or just "1".
	Name string `pulumi:"name"`
	// The HL7v2 table this field refers to. For example, PID-15 (Patient's Primary Language) usually refers to table "0296".
	Table string `pulumi:"table"`
	// The type of this field. A Type with this name must be defined in an Hl7TypesConfig.
	Type string `pulumi:"type"`
}

// A (sub) field of a type.
type FieldResponseOutput struct{ *pulumi.OutputState }

func (FieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldResponse)(nil)).Elem()
}

func (o FieldResponseOutput) ToFieldResponseOutput() FieldResponseOutput {
	return o
}

func (o FieldResponseOutput) ToFieldResponseOutputWithContext(ctx context.Context) FieldResponseOutput {
	return o
}

// The maximum number of times this field can be repeated. 0 or -1 means unbounded.
func (o FieldResponseOutput) MaxOccurs() pulumi.IntOutput {
	return o.ApplyT(func(v FieldResponse) int { return v.MaxOccurs }).(pulumi.IntOutput)
}

// The minimum number of times this field must be present/repeated.
func (o FieldResponseOutput) MinOccurs() pulumi.IntOutput {
	return o.ApplyT(func(v FieldResponse) int { return v.MinOccurs }).(pulumi.IntOutput)
}

// The name of the field. For example, "PID-1" or just "1".
func (o FieldResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FieldResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The HL7v2 table this field refers to. For example, PID-15 (Patient's Primary Language) usually refers to table "0296".
func (o FieldResponseOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v FieldResponse) string { return v.Table }).(pulumi.StringOutput)
}

// The type of this field. A Type with this name must be defined in an Hl7TypesConfig.
func (o FieldResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FieldResponse) string { return v.Type }).(pulumi.StringOutput)
}

type FieldResponseArrayOutput struct{ *pulumi.OutputState }

func (FieldResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FieldResponse)(nil)).Elem()
}

func (o FieldResponseArrayOutput) ToFieldResponseArrayOutput() FieldResponseArrayOutput {
	return o
}

func (o FieldResponseArrayOutput) ToFieldResponseArrayOutputWithContext(ctx context.Context) FieldResponseArrayOutput {
	return o
}

func (o FieldResponseArrayOutput) Index(i pulumi.IntInput) FieldResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FieldResponse {
		return vs[0].([]FieldResponse)[vs[1].(int)]
	}).(FieldResponseOutput)
}

// Represents a user's consent in terms of the resources that can be accessed and under what conditions.
type GoogleCloudHealthcareV1ConsentPolicy struct {
	// The request conditions to meet to grant access. In addition to any supported comparison operators, authorization rules may have `IN` operator as well as at most 10 logical operators that are limited to `AND` (`&&`), `OR` (`||`).
	AuthorizationRule Expr `pulumi:"authorizationRule"`
	// The resources that this policy applies to. A resource is a match if it matches all the attributes listed here. If empty, this policy applies to all User data mappings for the given user.
	ResourceAttributes []Attribute `pulumi:"resourceAttributes"`
}

// GoogleCloudHealthcareV1ConsentPolicyInput is an input type that accepts GoogleCloudHealthcareV1ConsentPolicyArgs and GoogleCloudHealthcareV1ConsentPolicyOutput values.
// You can construct a concrete instance of `GoogleCloudHealthcareV1ConsentPolicyInput` via:
//
//	GoogleCloudHealthcareV1ConsentPolicyArgs{...}
type GoogleCloudHealthcareV1ConsentPolicyInput interface {
	pulumi.Input

	ToGoogleCloudHealthcareV1ConsentPolicyOutput() GoogleCloudHealthcareV1ConsentPolicyOutput
	ToGoogleCloudHealthcareV1ConsentPolicyOutputWithContext(context.Context) GoogleCloudHealthcareV1ConsentPolicyOutput
}

// Represents a user's consent in terms of the resources that can be accessed and under what conditions.
type GoogleCloudHealthcareV1ConsentPolicyArgs struct {
	// The request conditions to meet to grant access. In addition to any supported comparison operators, authorization rules may have `IN` operator as well as at most 10 logical operators that are limited to `AND` (`&&`), `OR` (`||`).
	AuthorizationRule ExprInput `pulumi:"authorizationRule"`
	// The resources that this policy applies to. A resource is a match if it matches all the attributes listed here. If empty, this policy applies to all User data mappings for the given user.
	ResourceAttributes AttributeArrayInput `pulumi:"resourceAttributes"`
}

func (GoogleCloudHealthcareV1ConsentPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudHealthcareV1ConsentPolicy)(nil)).Elem()
}

func (i GoogleCloudHealthcareV1ConsentPolicyArgs) ToGoogleCloudHealthcareV1ConsentPolicyOutput() GoogleCloudHealthcareV1ConsentPolicyOutput {
	return i.ToGoogleCloudHealthcareV1ConsentPolicyOutputWithContext(context.Background())
}

func (i GoogleCloudHealthcareV1ConsentPolicyArgs) ToGoogleCloudHealthcareV1ConsentPolicyOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1ConsentPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudHealthcareV1ConsentPolicyOutput)
}

// GoogleCloudHealthcareV1ConsentPolicyArrayInput is an input type that accepts GoogleCloudHealthcareV1ConsentPolicyArray and GoogleCloudHealthcareV1ConsentPolicyArrayOutput values.
// You can construct a concrete instance of `GoogleCloudHealthcareV1ConsentPolicyArrayInput` via:
//
//	GoogleCloudHealthcareV1ConsentPolicyArray{ GoogleCloudHealthcareV1ConsentPolicyArgs{...} }
type GoogleCloudHealthcareV1ConsentPolicyArrayInput interface {
	pulumi.Input

	ToGoogleCloudHealthcareV1ConsentPolicyArrayOutput() GoogleCloudHealthcareV1ConsentPolicyArrayOutput
	ToGoogleCloudHealthcareV1ConsentPolicyArrayOutputWithContext(context.Context) GoogleCloudHealthcareV1ConsentPolicyArrayOutput
}

type GoogleCloudHealthcareV1ConsentPolicyArray []GoogleCloudHealthcareV1ConsentPolicyInput

func (GoogleCloudHealthcareV1ConsentPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudHealthcareV1ConsentPolicy)(nil)).Elem()
}

func (i GoogleCloudHealthcareV1ConsentPolicyArray) ToGoogleCloudHealthcareV1ConsentPolicyArrayOutput() GoogleCloudHealthcareV1ConsentPolicyArrayOutput {
	return i.ToGoogleCloudHealthcareV1ConsentPolicyArrayOutputWithContext(context.Background())
}

func (i GoogleCloudHealthcareV1ConsentPolicyArray) ToGoogleCloudHealthcareV1ConsentPolicyArrayOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1ConsentPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudHealthcareV1ConsentPolicyArrayOutput)
}

// Represents a user's consent in terms of the resources that can be accessed and under what conditions.
type GoogleCloudHealthcareV1ConsentPolicyOutput struct{ *pulumi.OutputState }

func (GoogleCloudHealthcareV1ConsentPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudHealthcareV1ConsentPolicy)(nil)).Elem()
}

func (o GoogleCloudHealthcareV1ConsentPolicyOutput) ToGoogleCloudHealthcareV1ConsentPolicyOutput() GoogleCloudHealthcareV1ConsentPolicyOutput {
	return o
}

func (o GoogleCloudHealthcareV1ConsentPolicyOutput) ToGoogleCloudHealthcareV1ConsentPolicyOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1ConsentPolicyOutput {
	return o
}

// The request conditions to meet to grant access. In addition to any supported comparison operators, authorization rules may have `IN` operator as well as at most 10 logical operators that are limited to `AND` (`&&`), `OR` (`||`).
func (o GoogleCloudHealthcareV1ConsentPolicyOutput) AuthorizationRule() ExprOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1ConsentPolicy) Expr { return v.AuthorizationRule }).(ExprOutput)
}

// The resources that this policy applies to. A resource is a match if it matches all the attributes listed here. If empty, this policy applies to all User data mappings for the given user.
func (o GoogleCloudHealthcareV1ConsentPolicyOutput) ResourceAttributes() AttributeArrayOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1ConsentPolicy) []Attribute { return v.ResourceAttributes }).(AttributeArrayOutput)
}

type GoogleCloudHealthcareV1ConsentPolicyArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudHealthcareV1ConsentPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudHealthcareV1ConsentPolicy)(nil)).Elem()
}

func (o GoogleCloudHealthcareV1ConsentPolicyArrayOutput) ToGoogleCloudHealthcareV1ConsentPolicyArrayOutput() GoogleCloudHealthcareV1ConsentPolicyArrayOutput {
	return o
}

func (o GoogleCloudHealthcareV1ConsentPolicyArrayOutput) ToGoogleCloudHealthcareV1ConsentPolicyArrayOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1ConsentPolicyArrayOutput {
	return o
}

func (o GoogleCloudHealthcareV1ConsentPolicyArrayOutput) Index(i pulumi.IntInput) GoogleCloudHealthcareV1ConsentPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudHealthcareV1ConsentPolicy {
		return vs[0].([]GoogleCloudHealthcareV1ConsentPolicy)[vs[1].(int)]
	}).(GoogleCloudHealthcareV1ConsentPolicyOutput)
}

// Represents a user's consent in terms of the resources that can be accessed and under what conditions.
type GoogleCloudHealthcareV1ConsentPolicyResponse struct {
	// The request conditions to meet to grant access. In addition to any supported comparison operators, authorization rules may have `IN` operator as well as at most 10 logical operators that are limited to `AND` (`&&`), `OR` (`||`).
	AuthorizationRule ExprResponse `pulumi:"authorizationRule"`
	// The resources that this policy applies to. A resource is a match if it matches all the attributes listed here. If empty, this policy applies to all User data mappings for the given user.
	ResourceAttributes []AttributeResponse `pulumi:"resourceAttributes"`
}

// Represents a user's consent in terms of the resources that can be accessed and under what conditions.
type GoogleCloudHealthcareV1ConsentPolicyResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudHealthcareV1ConsentPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudHealthcareV1ConsentPolicyResponse)(nil)).Elem()
}

func (o GoogleCloudHealthcareV1ConsentPolicyResponseOutput) ToGoogleCloudHealthcareV1ConsentPolicyResponseOutput() GoogleCloudHealthcareV1ConsentPolicyResponseOutput {
	return o
}

func (o GoogleCloudHealthcareV1ConsentPolicyResponseOutput) ToGoogleCloudHealthcareV1ConsentPolicyResponseOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1ConsentPolicyResponseOutput {
	return o
}

// The request conditions to meet to grant access. In addition to any supported comparison operators, authorization rules may have `IN` operator as well as at most 10 logical operators that are limited to `AND` (`&&`), `OR` (`||`).
func (o GoogleCloudHealthcareV1ConsentPolicyResponseOutput) AuthorizationRule() ExprResponseOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1ConsentPolicyResponse) ExprResponse { return v.AuthorizationRule }).(ExprResponseOutput)
}

// The resources that this policy applies to. A resource is a match if it matches all the attributes listed here. If empty, this policy applies to all User data mappings for the given user.
func (o GoogleCloudHealthcareV1ConsentPolicyResponseOutput) ResourceAttributes() AttributeResponseArrayOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1ConsentPolicyResponse) []AttributeResponse { return v.ResourceAttributes }).(AttributeResponseArrayOutput)
}

type GoogleCloudHealthcareV1ConsentPolicyResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudHealthcareV1ConsentPolicyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudHealthcareV1ConsentPolicyResponse)(nil)).Elem()
}

func (o GoogleCloudHealthcareV1ConsentPolicyResponseArrayOutput) ToGoogleCloudHealthcareV1ConsentPolicyResponseArrayOutput() GoogleCloudHealthcareV1ConsentPolicyResponseArrayOutput {
	return o
}

func (o GoogleCloudHealthcareV1ConsentPolicyResponseArrayOutput) ToGoogleCloudHealthcareV1ConsentPolicyResponseArrayOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1ConsentPolicyResponseArrayOutput {
	return o
}

func (o GoogleCloudHealthcareV1ConsentPolicyResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudHealthcareV1ConsentPolicyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudHealthcareV1ConsentPolicyResponse {
		return vs[0].([]GoogleCloudHealthcareV1ConsentPolicyResponse)[vs[1].(int)]
	}).(GoogleCloudHealthcareV1ConsentPolicyResponseOutput)
}

// The BigQuery table where the server writes the output.
type GoogleCloudHealthcareV1DicomBigQueryDestination struct {
	// Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
	Force *bool `pulumi:"force"`
	// BigQuery URI to a table, up to 2000 characters long, in the format `bq://projectId.bqDatasetId.tableId`
	TableUri *string `pulumi:"tableUri"`
	// Determines whether the existing table in the destination is to be overwritten or appended to. If a write_disposition is specified, the `force` parameter is ignored.
	WriteDisposition *GoogleCloudHealthcareV1DicomBigQueryDestinationWriteDisposition `pulumi:"writeDisposition"`
}

// GoogleCloudHealthcareV1DicomBigQueryDestinationInput is an input type that accepts GoogleCloudHealthcareV1DicomBigQueryDestinationArgs and GoogleCloudHealthcareV1DicomBigQueryDestinationOutput values.
// You can construct a concrete instance of `GoogleCloudHealthcareV1DicomBigQueryDestinationInput` via:
//
//	GoogleCloudHealthcareV1DicomBigQueryDestinationArgs{...}
type GoogleCloudHealthcareV1DicomBigQueryDestinationInput interface {
	pulumi.Input

	ToGoogleCloudHealthcareV1DicomBigQueryDestinationOutput() GoogleCloudHealthcareV1DicomBigQueryDestinationOutput
	ToGoogleCloudHealthcareV1DicomBigQueryDestinationOutputWithContext(context.Context) GoogleCloudHealthcareV1DicomBigQueryDestinationOutput
}

// The BigQuery table where the server writes the output.
type GoogleCloudHealthcareV1DicomBigQueryDestinationArgs struct {
	// Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
	Force pulumi.BoolPtrInput `pulumi:"force"`
	// BigQuery URI to a table, up to 2000 characters long, in the format `bq://projectId.bqDatasetId.tableId`
	TableUri pulumi.StringPtrInput `pulumi:"tableUri"`
	// Determines whether the existing table in the destination is to be overwritten or appended to. If a write_disposition is specified, the `force` parameter is ignored.
	WriteDisposition GoogleCloudHealthcareV1DicomBigQueryDestinationWriteDispositionPtrInput `pulumi:"writeDisposition"`
}

func (GoogleCloudHealthcareV1DicomBigQueryDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudHealthcareV1DicomBigQueryDestination)(nil)).Elem()
}

func (i GoogleCloudHealthcareV1DicomBigQueryDestinationArgs) ToGoogleCloudHealthcareV1DicomBigQueryDestinationOutput() GoogleCloudHealthcareV1DicomBigQueryDestinationOutput {
	return i.ToGoogleCloudHealthcareV1DicomBigQueryDestinationOutputWithContext(context.Background())
}

func (i GoogleCloudHealthcareV1DicomBigQueryDestinationArgs) ToGoogleCloudHealthcareV1DicomBigQueryDestinationOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1DicomBigQueryDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudHealthcareV1DicomBigQueryDestinationOutput)
}

func (i GoogleCloudHealthcareV1DicomBigQueryDestinationArgs) ToGoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput() GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput {
	return i.ToGoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutputWithContext(context.Background())
}

func (i GoogleCloudHealthcareV1DicomBigQueryDestinationArgs) ToGoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudHealthcareV1DicomBigQueryDestinationOutput).ToGoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutputWithContext(ctx)
}

// GoogleCloudHealthcareV1DicomBigQueryDestinationPtrInput is an input type that accepts GoogleCloudHealthcareV1DicomBigQueryDestinationArgs, GoogleCloudHealthcareV1DicomBigQueryDestinationPtr and GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput values.
// You can construct a concrete instance of `GoogleCloudHealthcareV1DicomBigQueryDestinationPtrInput` via:
//
//	        GoogleCloudHealthcareV1DicomBigQueryDestinationArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudHealthcareV1DicomBigQueryDestinationPtrInput interface {
	pulumi.Input

	ToGoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput() GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput
	ToGoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutputWithContext(context.Context) GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput
}

type googleCloudHealthcareV1DicomBigQueryDestinationPtrType GoogleCloudHealthcareV1DicomBigQueryDestinationArgs

func GoogleCloudHealthcareV1DicomBigQueryDestinationPtr(v *GoogleCloudHealthcareV1DicomBigQueryDestinationArgs) GoogleCloudHealthcareV1DicomBigQueryDestinationPtrInput {
	return (*googleCloudHealthcareV1DicomBigQueryDestinationPtrType)(v)
}

func (*googleCloudHealthcareV1DicomBigQueryDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudHealthcareV1DicomBigQueryDestination)(nil)).Elem()
}

func (i *googleCloudHealthcareV1DicomBigQueryDestinationPtrType) ToGoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput() GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput {
	return i.ToGoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutputWithContext(context.Background())
}

func (i *googleCloudHealthcareV1DicomBigQueryDestinationPtrType) ToGoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput)
}

// The BigQuery table where the server writes the output.
type GoogleCloudHealthcareV1DicomBigQueryDestinationOutput struct{ *pulumi.OutputState }

func (GoogleCloudHealthcareV1DicomBigQueryDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudHealthcareV1DicomBigQueryDestination)(nil)).Elem()
}

func (o GoogleCloudHealthcareV1DicomBigQueryDestinationOutput) ToGoogleCloudHealthcareV1DicomBigQueryDestinationOutput() GoogleCloudHealthcareV1DicomBigQueryDestinationOutput {
	return o
}

func (o GoogleCloudHealthcareV1DicomBigQueryDestinationOutput) ToGoogleCloudHealthcareV1DicomBigQueryDestinationOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1DicomBigQueryDestinationOutput {
	return o
}

func (o GoogleCloudHealthcareV1DicomBigQueryDestinationOutput) ToGoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput() GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput {
	return o.ToGoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutputWithContext(context.Background())
}

func (o GoogleCloudHealthcareV1DicomBigQueryDestinationOutput) ToGoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudHealthcareV1DicomBigQueryDestination) *GoogleCloudHealthcareV1DicomBigQueryDestination {
		return &v
	}).(GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput)
}

// Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
func (o GoogleCloudHealthcareV1DicomBigQueryDestinationOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1DicomBigQueryDestination) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

// BigQuery URI to a table, up to 2000 characters long, in the format `bq://projectId.bqDatasetId.tableId`
func (o GoogleCloudHealthcareV1DicomBigQueryDestinationOutput) TableUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1DicomBigQueryDestination) *string { return v.TableUri }).(pulumi.StringPtrOutput)
}

// Determines whether the existing table in the destination is to be overwritten or appended to. If a write_disposition is specified, the `force` parameter is ignored.
func (o GoogleCloudHealthcareV1DicomBigQueryDestinationOutput) WriteDisposition() GoogleCloudHealthcareV1DicomBigQueryDestinationWriteDispositionPtrOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1DicomBigQueryDestination) *GoogleCloudHealthcareV1DicomBigQueryDestinationWriteDisposition {
		return v.WriteDisposition
	}).(GoogleCloudHealthcareV1DicomBigQueryDestinationWriteDispositionPtrOutput)
}

type GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudHealthcareV1DicomBigQueryDestination)(nil)).Elem()
}

func (o GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput) ToGoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput() GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput {
	return o
}

func (o GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput) ToGoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput {
	return o
}

func (o GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput) Elem() GoogleCloudHealthcareV1DicomBigQueryDestinationOutput {
	return o.ApplyT(func(v *GoogleCloudHealthcareV1DicomBigQueryDestination) GoogleCloudHealthcareV1DicomBigQueryDestination {
		if v != nil {
			return *v
		}
		var ret GoogleCloudHealthcareV1DicomBigQueryDestination
		return ret
	}).(GoogleCloudHealthcareV1DicomBigQueryDestinationOutput)
}

// Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
func (o GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleCloudHealthcareV1DicomBigQueryDestination) *bool {
		if v == nil {
			return nil
		}
		return v.Force
	}).(pulumi.BoolPtrOutput)
}

// BigQuery URI to a table, up to 2000 characters long, in the format `bq://projectId.bqDatasetId.tableId`
func (o GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput) TableUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudHealthcareV1DicomBigQueryDestination) *string {
		if v == nil {
			return nil
		}
		return v.TableUri
	}).(pulumi.StringPtrOutput)
}

// Determines whether the existing table in the destination is to be overwritten or appended to. If a write_disposition is specified, the `force` parameter is ignored.
func (o GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput) WriteDisposition() GoogleCloudHealthcareV1DicomBigQueryDestinationWriteDispositionPtrOutput {
	return o.ApplyT(func(v *GoogleCloudHealthcareV1DicomBigQueryDestination) *GoogleCloudHealthcareV1DicomBigQueryDestinationWriteDisposition {
		if v == nil {
			return nil
		}
		return v.WriteDisposition
	}).(GoogleCloudHealthcareV1DicomBigQueryDestinationWriteDispositionPtrOutput)
}

// The BigQuery table where the server writes the output.
type GoogleCloudHealthcareV1DicomBigQueryDestinationResponse struct {
	// Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
	Force bool `pulumi:"force"`
	// BigQuery URI to a table, up to 2000 characters long, in the format `bq://projectId.bqDatasetId.tableId`
	TableUri string `pulumi:"tableUri"`
	// Determines whether the existing table in the destination is to be overwritten or appended to. If a write_disposition is specified, the `force` parameter is ignored.
	WriteDisposition string `pulumi:"writeDisposition"`
}

// The BigQuery table where the server writes the output.
type GoogleCloudHealthcareV1DicomBigQueryDestinationResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudHealthcareV1DicomBigQueryDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudHealthcareV1DicomBigQueryDestinationResponse)(nil)).Elem()
}

func (o GoogleCloudHealthcareV1DicomBigQueryDestinationResponseOutput) ToGoogleCloudHealthcareV1DicomBigQueryDestinationResponseOutput() GoogleCloudHealthcareV1DicomBigQueryDestinationResponseOutput {
	return o
}

func (o GoogleCloudHealthcareV1DicomBigQueryDestinationResponseOutput) ToGoogleCloudHealthcareV1DicomBigQueryDestinationResponseOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1DicomBigQueryDestinationResponseOutput {
	return o
}

// Use `write_disposition` instead. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
func (o GoogleCloudHealthcareV1DicomBigQueryDestinationResponseOutput) Force() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1DicomBigQueryDestinationResponse) bool { return v.Force }).(pulumi.BoolOutput)
}

// BigQuery URI to a table, up to 2000 characters long, in the format `bq://projectId.bqDatasetId.tableId`
func (o GoogleCloudHealthcareV1DicomBigQueryDestinationResponseOutput) TableUri() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1DicomBigQueryDestinationResponse) string { return v.TableUri }).(pulumi.StringOutput)
}

// Determines whether the existing table in the destination is to be overwritten or appended to. If a write_disposition is specified, the `force` parameter is ignored.
func (o GoogleCloudHealthcareV1DicomBigQueryDestinationResponseOutput) WriteDisposition() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1DicomBigQueryDestinationResponse) string { return v.WriteDisposition }).(pulumi.StringOutput)
}

// StreamConfig specifies configuration for a streaming DICOM export.
type GoogleCloudHealthcareV1DicomStreamConfig struct {
	// Results are appended to this table. The server creates a new table in the given BigQuery dataset if the specified table does not exist. To enable the Cloud Healthcare API to write to your BigQuery table, you must give the Cloud Healthcare API service account the bigquery.dataEditor role. The service account is: `service-{PROJECT_NUMBER}@gcp-sa-healthcare.iam.gserviceaccount.com`. The PROJECT_NUMBER identifies the project that the DICOM store resides in. To get the project number, go to the Cloud Console Dashboard. It is recommended to not have a custom schema in the destination table which could conflict with the schema created by the Cloud Healthcare API. Instance deletions are not applied to the destination table. The destination's table schema will be automatically updated in case a new instance's data is incompatible with the current schema. The schema should not be updated manually as this can cause incompatibilies that cannot be resolved automatically. One resolution in this case is to delete the incompatible table and let the server recreate one, though the newly created table only contains data after the table recreation. BigQuery imposes a 1 MB limit on streaming insert row size, therefore any instance that generates more than 1 MB of BigQuery data will not be streamed. If an instance cannot be streamed to BigQuery, errors will be logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
	BigqueryDestination *GoogleCloudHealthcareV1DicomBigQueryDestination `pulumi:"bigqueryDestination"`
}

// GoogleCloudHealthcareV1DicomStreamConfigInput is an input type that accepts GoogleCloudHealthcareV1DicomStreamConfigArgs and GoogleCloudHealthcareV1DicomStreamConfigOutput values.
// You can construct a concrete instance of `GoogleCloudHealthcareV1DicomStreamConfigInput` via:
//
//	GoogleCloudHealthcareV1DicomStreamConfigArgs{...}
type GoogleCloudHealthcareV1DicomStreamConfigInput interface {
	pulumi.Input

	ToGoogleCloudHealthcareV1DicomStreamConfigOutput() GoogleCloudHealthcareV1DicomStreamConfigOutput
	ToGoogleCloudHealthcareV1DicomStreamConfigOutputWithContext(context.Context) GoogleCloudHealthcareV1DicomStreamConfigOutput
}

// StreamConfig specifies configuration for a streaming DICOM export.
type GoogleCloudHealthcareV1DicomStreamConfigArgs struct {
	// Results are appended to this table. The server creates a new table in the given BigQuery dataset if the specified table does not exist. To enable the Cloud Healthcare API to write to your BigQuery table, you must give the Cloud Healthcare API service account the bigquery.dataEditor role. The service account is: `service-{PROJECT_NUMBER}@gcp-sa-healthcare.iam.gserviceaccount.com`. The PROJECT_NUMBER identifies the project that the DICOM store resides in. To get the project number, go to the Cloud Console Dashboard. It is recommended to not have a custom schema in the destination table which could conflict with the schema created by the Cloud Healthcare API. Instance deletions are not applied to the destination table. The destination's table schema will be automatically updated in case a new instance's data is incompatible with the current schema. The schema should not be updated manually as this can cause incompatibilies that cannot be resolved automatically. One resolution in this case is to delete the incompatible table and let the server recreate one, though the newly created table only contains data after the table recreation. BigQuery imposes a 1 MB limit on streaming insert row size, therefore any instance that generates more than 1 MB of BigQuery data will not be streamed. If an instance cannot be streamed to BigQuery, errors will be logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
	BigqueryDestination GoogleCloudHealthcareV1DicomBigQueryDestinationPtrInput `pulumi:"bigqueryDestination"`
}

func (GoogleCloudHealthcareV1DicomStreamConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudHealthcareV1DicomStreamConfig)(nil)).Elem()
}

func (i GoogleCloudHealthcareV1DicomStreamConfigArgs) ToGoogleCloudHealthcareV1DicomStreamConfigOutput() GoogleCloudHealthcareV1DicomStreamConfigOutput {
	return i.ToGoogleCloudHealthcareV1DicomStreamConfigOutputWithContext(context.Background())
}

func (i GoogleCloudHealthcareV1DicomStreamConfigArgs) ToGoogleCloudHealthcareV1DicomStreamConfigOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1DicomStreamConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudHealthcareV1DicomStreamConfigOutput)
}

// GoogleCloudHealthcareV1DicomStreamConfigArrayInput is an input type that accepts GoogleCloudHealthcareV1DicomStreamConfigArray and GoogleCloudHealthcareV1DicomStreamConfigArrayOutput values.
// You can construct a concrete instance of `GoogleCloudHealthcareV1DicomStreamConfigArrayInput` via:
//
//	GoogleCloudHealthcareV1DicomStreamConfigArray{ GoogleCloudHealthcareV1DicomStreamConfigArgs{...} }
type GoogleCloudHealthcareV1DicomStreamConfigArrayInput interface {
	pulumi.Input

	ToGoogleCloudHealthcareV1DicomStreamConfigArrayOutput() GoogleCloudHealthcareV1DicomStreamConfigArrayOutput
	ToGoogleCloudHealthcareV1DicomStreamConfigArrayOutputWithContext(context.Context) GoogleCloudHealthcareV1DicomStreamConfigArrayOutput
}

type GoogleCloudHealthcareV1DicomStreamConfigArray []GoogleCloudHealthcareV1DicomStreamConfigInput

func (GoogleCloudHealthcareV1DicomStreamConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudHealthcareV1DicomStreamConfig)(nil)).Elem()
}

func (i GoogleCloudHealthcareV1DicomStreamConfigArray) ToGoogleCloudHealthcareV1DicomStreamConfigArrayOutput() GoogleCloudHealthcareV1DicomStreamConfigArrayOutput {
	return i.ToGoogleCloudHealthcareV1DicomStreamConfigArrayOutputWithContext(context.Background())
}

func (i GoogleCloudHealthcareV1DicomStreamConfigArray) ToGoogleCloudHealthcareV1DicomStreamConfigArrayOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1DicomStreamConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudHealthcareV1DicomStreamConfigArrayOutput)
}

// StreamConfig specifies configuration for a streaming DICOM export.
type GoogleCloudHealthcareV1DicomStreamConfigOutput struct{ *pulumi.OutputState }

func (GoogleCloudHealthcareV1DicomStreamConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudHealthcareV1DicomStreamConfig)(nil)).Elem()
}

func (o GoogleCloudHealthcareV1DicomStreamConfigOutput) ToGoogleCloudHealthcareV1DicomStreamConfigOutput() GoogleCloudHealthcareV1DicomStreamConfigOutput {
	return o
}

func (o GoogleCloudHealthcareV1DicomStreamConfigOutput) ToGoogleCloudHealthcareV1DicomStreamConfigOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1DicomStreamConfigOutput {
	return o
}

// Results are appended to this table. The server creates a new table in the given BigQuery dataset if the specified table does not exist. To enable the Cloud Healthcare API to write to your BigQuery table, you must give the Cloud Healthcare API service account the bigquery.dataEditor role. The service account is: `service-{PROJECT_NUMBER}@gcp-sa-healthcare.iam.gserviceaccount.com`. The PROJECT_NUMBER identifies the project that the DICOM store resides in. To get the project number, go to the Cloud Console Dashboard. It is recommended to not have a custom schema in the destination table which could conflict with the schema created by the Cloud Healthcare API. Instance deletions are not applied to the destination table. The destination's table schema will be automatically updated in case a new instance's data is incompatible with the current schema. The schema should not be updated manually as this can cause incompatibilies that cannot be resolved automatically. One resolution in this case is to delete the incompatible table and let the server recreate one, though the newly created table only contains data after the table recreation. BigQuery imposes a 1 MB limit on streaming insert row size, therefore any instance that generates more than 1 MB of BigQuery data will not be streamed. If an instance cannot be streamed to BigQuery, errors will be logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
func (o GoogleCloudHealthcareV1DicomStreamConfigOutput) BigqueryDestination() GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1DicomStreamConfig) *GoogleCloudHealthcareV1DicomBigQueryDestination {
		return v.BigqueryDestination
	}).(GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput)
}

type GoogleCloudHealthcareV1DicomStreamConfigArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudHealthcareV1DicomStreamConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudHealthcareV1DicomStreamConfig)(nil)).Elem()
}

func (o GoogleCloudHealthcareV1DicomStreamConfigArrayOutput) ToGoogleCloudHealthcareV1DicomStreamConfigArrayOutput() GoogleCloudHealthcareV1DicomStreamConfigArrayOutput {
	return o
}

func (o GoogleCloudHealthcareV1DicomStreamConfigArrayOutput) ToGoogleCloudHealthcareV1DicomStreamConfigArrayOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1DicomStreamConfigArrayOutput {
	return o
}

func (o GoogleCloudHealthcareV1DicomStreamConfigArrayOutput) Index(i pulumi.IntInput) GoogleCloudHealthcareV1DicomStreamConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudHealthcareV1DicomStreamConfig {
		return vs[0].([]GoogleCloudHealthcareV1DicomStreamConfig)[vs[1].(int)]
	}).(GoogleCloudHealthcareV1DicomStreamConfigOutput)
}

// StreamConfig specifies configuration for a streaming DICOM export.
type GoogleCloudHealthcareV1DicomStreamConfigResponse struct {
	// Results are appended to this table. The server creates a new table in the given BigQuery dataset if the specified table does not exist. To enable the Cloud Healthcare API to write to your BigQuery table, you must give the Cloud Healthcare API service account the bigquery.dataEditor role. The service account is: `service-{PROJECT_NUMBER}@gcp-sa-healthcare.iam.gserviceaccount.com`. The PROJECT_NUMBER identifies the project that the DICOM store resides in. To get the project number, go to the Cloud Console Dashboard. It is recommended to not have a custom schema in the destination table which could conflict with the schema created by the Cloud Healthcare API. Instance deletions are not applied to the destination table. The destination's table schema will be automatically updated in case a new instance's data is incompatible with the current schema. The schema should not be updated manually as this can cause incompatibilies that cannot be resolved automatically. One resolution in this case is to delete the incompatible table and let the server recreate one, though the newly created table only contains data after the table recreation. BigQuery imposes a 1 MB limit on streaming insert row size, therefore any instance that generates more than 1 MB of BigQuery data will not be streamed. If an instance cannot be streamed to BigQuery, errors will be logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
	BigqueryDestination GoogleCloudHealthcareV1DicomBigQueryDestinationResponse `pulumi:"bigqueryDestination"`
}

// StreamConfig specifies configuration for a streaming DICOM export.
type GoogleCloudHealthcareV1DicomStreamConfigResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudHealthcareV1DicomStreamConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudHealthcareV1DicomStreamConfigResponse)(nil)).Elem()
}

func (o GoogleCloudHealthcareV1DicomStreamConfigResponseOutput) ToGoogleCloudHealthcareV1DicomStreamConfigResponseOutput() GoogleCloudHealthcareV1DicomStreamConfigResponseOutput {
	return o
}

func (o GoogleCloudHealthcareV1DicomStreamConfigResponseOutput) ToGoogleCloudHealthcareV1DicomStreamConfigResponseOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1DicomStreamConfigResponseOutput {
	return o
}

// Results are appended to this table. The server creates a new table in the given BigQuery dataset if the specified table does not exist. To enable the Cloud Healthcare API to write to your BigQuery table, you must give the Cloud Healthcare API service account the bigquery.dataEditor role. The service account is: `service-{PROJECT_NUMBER}@gcp-sa-healthcare.iam.gserviceaccount.com`. The PROJECT_NUMBER identifies the project that the DICOM store resides in. To get the project number, go to the Cloud Console Dashboard. It is recommended to not have a custom schema in the destination table which could conflict with the schema created by the Cloud Healthcare API. Instance deletions are not applied to the destination table. The destination's table schema will be automatically updated in case a new instance's data is incompatible with the current schema. The schema should not be updated manually as this can cause incompatibilies that cannot be resolved automatically. One resolution in this case is to delete the incompatible table and let the server recreate one, though the newly created table only contains data after the table recreation. BigQuery imposes a 1 MB limit on streaming insert row size, therefore any instance that generates more than 1 MB of BigQuery data will not be streamed. If an instance cannot be streamed to BigQuery, errors will be logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
func (o GoogleCloudHealthcareV1DicomStreamConfigResponseOutput) BigqueryDestination() GoogleCloudHealthcareV1DicomBigQueryDestinationResponseOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1DicomStreamConfigResponse) GoogleCloudHealthcareV1DicomBigQueryDestinationResponse {
		return v.BigqueryDestination
	}).(GoogleCloudHealthcareV1DicomBigQueryDestinationResponseOutput)
}

type GoogleCloudHealthcareV1DicomStreamConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudHealthcareV1DicomStreamConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudHealthcareV1DicomStreamConfigResponse)(nil)).Elem()
}

func (o GoogleCloudHealthcareV1DicomStreamConfigResponseArrayOutput) ToGoogleCloudHealthcareV1DicomStreamConfigResponseArrayOutput() GoogleCloudHealthcareV1DicomStreamConfigResponseArrayOutput {
	return o
}

func (o GoogleCloudHealthcareV1DicomStreamConfigResponseArrayOutput) ToGoogleCloudHealthcareV1DicomStreamConfigResponseArrayOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1DicomStreamConfigResponseArrayOutput {
	return o
}

func (o GoogleCloudHealthcareV1DicomStreamConfigResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudHealthcareV1DicomStreamConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudHealthcareV1DicomStreamConfigResponse {
		return vs[0].([]GoogleCloudHealthcareV1DicomStreamConfigResponse)[vs[1].(int)]
	}).(GoogleCloudHealthcareV1DicomStreamConfigResponseOutput)
}

// The configuration for exporting to BigQuery.
type GoogleCloudHealthcareV1FhirBigQueryDestination struct {
	// BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.
	DatasetUri *string `pulumi:"datasetUri"`
	// If this flag is `TRUE`, all tables are deleted from the dataset before the new exported tables are written. If the flag is not set and the destination dataset contains tables, the export call returns an error. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
	Force *bool `pulumi:"force"`
	// The configuration for the exported BigQuery schema.
	SchemaConfig *SchemaConfig `pulumi:"schemaConfig"`
	// Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.
	WriteDisposition *GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDisposition `pulumi:"writeDisposition"`
}

// GoogleCloudHealthcareV1FhirBigQueryDestinationInput is an input type that accepts GoogleCloudHealthcareV1FhirBigQueryDestinationArgs and GoogleCloudHealthcareV1FhirBigQueryDestinationOutput values.
// You can construct a concrete instance of `GoogleCloudHealthcareV1FhirBigQueryDestinationInput` via:
//
//	GoogleCloudHealthcareV1FhirBigQueryDestinationArgs{...}
type GoogleCloudHealthcareV1FhirBigQueryDestinationInput interface {
	pulumi.Input

	ToGoogleCloudHealthcareV1FhirBigQueryDestinationOutput() GoogleCloudHealthcareV1FhirBigQueryDestinationOutput
	ToGoogleCloudHealthcareV1FhirBigQueryDestinationOutputWithContext(context.Context) GoogleCloudHealthcareV1FhirBigQueryDestinationOutput
}

// The configuration for exporting to BigQuery.
type GoogleCloudHealthcareV1FhirBigQueryDestinationArgs struct {
	// BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.
	DatasetUri pulumi.StringPtrInput `pulumi:"datasetUri"`
	// If this flag is `TRUE`, all tables are deleted from the dataset before the new exported tables are written. If the flag is not set and the destination dataset contains tables, the export call returns an error. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
	Force pulumi.BoolPtrInput `pulumi:"force"`
	// The configuration for the exported BigQuery schema.
	SchemaConfig SchemaConfigPtrInput `pulumi:"schemaConfig"`
	// Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.
	WriteDisposition GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDispositionPtrInput `pulumi:"writeDisposition"`
}

func (GoogleCloudHealthcareV1FhirBigQueryDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudHealthcareV1FhirBigQueryDestination)(nil)).Elem()
}

func (i GoogleCloudHealthcareV1FhirBigQueryDestinationArgs) ToGoogleCloudHealthcareV1FhirBigQueryDestinationOutput() GoogleCloudHealthcareV1FhirBigQueryDestinationOutput {
	return i.ToGoogleCloudHealthcareV1FhirBigQueryDestinationOutputWithContext(context.Background())
}

func (i GoogleCloudHealthcareV1FhirBigQueryDestinationArgs) ToGoogleCloudHealthcareV1FhirBigQueryDestinationOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1FhirBigQueryDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudHealthcareV1FhirBigQueryDestinationOutput)
}

func (i GoogleCloudHealthcareV1FhirBigQueryDestinationArgs) ToGoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput() GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput {
	return i.ToGoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutputWithContext(context.Background())
}

func (i GoogleCloudHealthcareV1FhirBigQueryDestinationArgs) ToGoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudHealthcareV1FhirBigQueryDestinationOutput).ToGoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutputWithContext(ctx)
}

// GoogleCloudHealthcareV1FhirBigQueryDestinationPtrInput is an input type that accepts GoogleCloudHealthcareV1FhirBigQueryDestinationArgs, GoogleCloudHealthcareV1FhirBigQueryDestinationPtr and GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput values.
// You can construct a concrete instance of `GoogleCloudHealthcareV1FhirBigQueryDestinationPtrInput` via:
//
//	        GoogleCloudHealthcareV1FhirBigQueryDestinationArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudHealthcareV1FhirBigQueryDestinationPtrInput interface {
	pulumi.Input

	ToGoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput() GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput
	ToGoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutputWithContext(context.Context) GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput
}

type googleCloudHealthcareV1FhirBigQueryDestinationPtrType GoogleCloudHealthcareV1FhirBigQueryDestinationArgs

func GoogleCloudHealthcareV1FhirBigQueryDestinationPtr(v *GoogleCloudHealthcareV1FhirBigQueryDestinationArgs) GoogleCloudHealthcareV1FhirBigQueryDestinationPtrInput {
	return (*googleCloudHealthcareV1FhirBigQueryDestinationPtrType)(v)
}

func (*googleCloudHealthcareV1FhirBigQueryDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudHealthcareV1FhirBigQueryDestination)(nil)).Elem()
}

func (i *googleCloudHealthcareV1FhirBigQueryDestinationPtrType) ToGoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput() GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput {
	return i.ToGoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutputWithContext(context.Background())
}

func (i *googleCloudHealthcareV1FhirBigQueryDestinationPtrType) ToGoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput)
}

// The configuration for exporting to BigQuery.
type GoogleCloudHealthcareV1FhirBigQueryDestinationOutput struct{ *pulumi.OutputState }

func (GoogleCloudHealthcareV1FhirBigQueryDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudHealthcareV1FhirBigQueryDestination)(nil)).Elem()
}

func (o GoogleCloudHealthcareV1FhirBigQueryDestinationOutput) ToGoogleCloudHealthcareV1FhirBigQueryDestinationOutput() GoogleCloudHealthcareV1FhirBigQueryDestinationOutput {
	return o
}

func (o GoogleCloudHealthcareV1FhirBigQueryDestinationOutput) ToGoogleCloudHealthcareV1FhirBigQueryDestinationOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1FhirBigQueryDestinationOutput {
	return o
}

func (o GoogleCloudHealthcareV1FhirBigQueryDestinationOutput) ToGoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput() GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput {
	return o.ToGoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutputWithContext(context.Background())
}

func (o GoogleCloudHealthcareV1FhirBigQueryDestinationOutput) ToGoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudHealthcareV1FhirBigQueryDestination) *GoogleCloudHealthcareV1FhirBigQueryDestination {
		return &v
	}).(GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput)
}

// BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.
func (o GoogleCloudHealthcareV1FhirBigQueryDestinationOutput) DatasetUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1FhirBigQueryDestination) *string { return v.DatasetUri }).(pulumi.StringPtrOutput)
}

// If this flag is `TRUE`, all tables are deleted from the dataset before the new exported tables are written. If the flag is not set and the destination dataset contains tables, the export call returns an error. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
func (o GoogleCloudHealthcareV1FhirBigQueryDestinationOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1FhirBigQueryDestination) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

// The configuration for the exported BigQuery schema.
func (o GoogleCloudHealthcareV1FhirBigQueryDestinationOutput) SchemaConfig() SchemaConfigPtrOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1FhirBigQueryDestination) *SchemaConfig { return v.SchemaConfig }).(SchemaConfigPtrOutput)
}

// Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.
func (o GoogleCloudHealthcareV1FhirBigQueryDestinationOutput) WriteDisposition() GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDispositionPtrOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1FhirBigQueryDestination) *GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDisposition {
		return v.WriteDisposition
	}).(GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDispositionPtrOutput)
}

type GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudHealthcareV1FhirBigQueryDestination)(nil)).Elem()
}

func (o GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput) ToGoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput() GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput {
	return o
}

func (o GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput) ToGoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput {
	return o
}

func (o GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput) Elem() GoogleCloudHealthcareV1FhirBigQueryDestinationOutput {
	return o.ApplyT(func(v *GoogleCloudHealthcareV1FhirBigQueryDestination) GoogleCloudHealthcareV1FhirBigQueryDestination {
		if v != nil {
			return *v
		}
		var ret GoogleCloudHealthcareV1FhirBigQueryDestination
		return ret
	}).(GoogleCloudHealthcareV1FhirBigQueryDestinationOutput)
}

// BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.
func (o GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput) DatasetUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudHealthcareV1FhirBigQueryDestination) *string {
		if v == nil {
			return nil
		}
		return v.DatasetUri
	}).(pulumi.StringPtrOutput)
}

// If this flag is `TRUE`, all tables are deleted from the dataset before the new exported tables are written. If the flag is not set and the destination dataset contains tables, the export call returns an error. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
func (o GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleCloudHealthcareV1FhirBigQueryDestination) *bool {
		if v == nil {
			return nil
		}
		return v.Force
	}).(pulumi.BoolPtrOutput)
}

// The configuration for the exported BigQuery schema.
func (o GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput) SchemaConfig() SchemaConfigPtrOutput {
	return o.ApplyT(func(v *GoogleCloudHealthcareV1FhirBigQueryDestination) *SchemaConfig {
		if v == nil {
			return nil
		}
		return v.SchemaConfig
	}).(SchemaConfigPtrOutput)
}

// Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.
func (o GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput) WriteDisposition() GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDispositionPtrOutput {
	return o.ApplyT(func(v *GoogleCloudHealthcareV1FhirBigQueryDestination) *GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDisposition {
		if v == nil {
			return nil
		}
		return v.WriteDisposition
	}).(GoogleCloudHealthcareV1FhirBigQueryDestinationWriteDispositionPtrOutput)
}

// The configuration for exporting to BigQuery.
type GoogleCloudHealthcareV1FhirBigQueryDestinationResponse struct {
	// BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.
	DatasetUri string `pulumi:"datasetUri"`
	// If this flag is `TRUE`, all tables are deleted from the dataset before the new exported tables are written. If the flag is not set and the destination dataset contains tables, the export call returns an error. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
	Force bool `pulumi:"force"`
	// The configuration for the exported BigQuery schema.
	SchemaConfig SchemaConfigResponse `pulumi:"schemaConfig"`
	// Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.
	WriteDisposition string `pulumi:"writeDisposition"`
}

// The configuration for exporting to BigQuery.
type GoogleCloudHealthcareV1FhirBigQueryDestinationResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudHealthcareV1FhirBigQueryDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudHealthcareV1FhirBigQueryDestinationResponse)(nil)).Elem()
}

func (o GoogleCloudHealthcareV1FhirBigQueryDestinationResponseOutput) ToGoogleCloudHealthcareV1FhirBigQueryDestinationResponseOutput() GoogleCloudHealthcareV1FhirBigQueryDestinationResponseOutput {
	return o
}

func (o GoogleCloudHealthcareV1FhirBigQueryDestinationResponseOutput) ToGoogleCloudHealthcareV1FhirBigQueryDestinationResponseOutputWithContext(ctx context.Context) GoogleCloudHealthcareV1FhirBigQueryDestinationResponseOutput {
	return o
}

// BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.
func (o GoogleCloudHealthcareV1FhirBigQueryDestinationResponseOutput) DatasetUri() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1FhirBigQueryDestinationResponse) string { return v.DatasetUri }).(pulumi.StringOutput)
}

// If this flag is `TRUE`, all tables are deleted from the dataset before the new exported tables are written. If the flag is not set and the destination dataset contains tables, the export call returns an error. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.
func (o GoogleCloudHealthcareV1FhirBigQueryDestinationResponseOutput) Force() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1FhirBigQueryDestinationResponse) bool { return v.Force }).(pulumi.BoolOutput)
}

// The configuration for the exported BigQuery schema.
func (o GoogleCloudHealthcareV1FhirBigQueryDestinationResponseOutput) SchemaConfig() SchemaConfigResponseOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1FhirBigQueryDestinationResponse) SchemaConfigResponse {
		return v.SchemaConfig
	}).(SchemaConfigResponseOutput)
}

// Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.
func (o GoogleCloudHealthcareV1FhirBigQueryDestinationResponseOutput) WriteDisposition() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudHealthcareV1FhirBigQueryDestinationResponse) string { return v.WriteDisposition }).(pulumi.StringOutput)
}

// Construct representing a logical group or a segment.
type GroupOrSegment struct {
	Group   *SchemaGroup   `pulumi:"group"`
	Segment *SchemaSegment `pulumi:"segment"`
}

// GroupOrSegmentInput is an input type that accepts GroupOrSegmentArgs and GroupOrSegmentOutput values.
// You can construct a concrete instance of `GroupOrSegmentInput` via:
//
//	GroupOrSegmentArgs{...}
type GroupOrSegmentInput interface {
	pulumi.Input

	ToGroupOrSegmentOutput() GroupOrSegmentOutput
	ToGroupOrSegmentOutputWithContext(context.Context) GroupOrSegmentOutput
}

// Construct representing a logical group or a segment.
type GroupOrSegmentArgs struct {
	Group   SchemaGroupPtrInput   `pulumi:"group"`
	Segment SchemaSegmentPtrInput `pulumi:"segment"`
}

func (GroupOrSegmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupOrSegment)(nil)).Elem()
}

func (i GroupOrSegmentArgs) ToGroupOrSegmentOutput() GroupOrSegmentOutput {
	return i.ToGroupOrSegmentOutputWithContext(context.Background())
}

func (i GroupOrSegmentArgs) ToGroupOrSegmentOutputWithContext(ctx context.Context) GroupOrSegmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupOrSegmentOutput)
}

// GroupOrSegmentArrayInput is an input type that accepts GroupOrSegmentArray and GroupOrSegmentArrayOutput values.
// You can construct a concrete instance of `GroupOrSegmentArrayInput` via:
//
//	GroupOrSegmentArray{ GroupOrSegmentArgs{...} }
type GroupOrSegmentArrayInput interface {
	pulumi.Input

	ToGroupOrSegmentArrayOutput() GroupOrSegmentArrayOutput
	ToGroupOrSegmentArrayOutputWithContext(context.Context) GroupOrSegmentArrayOutput
}

type GroupOrSegmentArray []GroupOrSegmentInput

func (GroupOrSegmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupOrSegment)(nil)).Elem()
}

func (i GroupOrSegmentArray) ToGroupOrSegmentArrayOutput() GroupOrSegmentArrayOutput {
	return i.ToGroupOrSegmentArrayOutputWithContext(context.Background())
}

func (i GroupOrSegmentArray) ToGroupOrSegmentArrayOutputWithContext(ctx context.Context) GroupOrSegmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupOrSegmentArrayOutput)
}

// Construct representing a logical group or a segment.
type GroupOrSegmentOutput struct{ *pulumi.OutputState }

func (GroupOrSegmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupOrSegment)(nil)).Elem()
}

func (o GroupOrSegmentOutput) ToGroupOrSegmentOutput() GroupOrSegmentOutput {
	return o
}

func (o GroupOrSegmentOutput) ToGroupOrSegmentOutputWithContext(ctx context.Context) GroupOrSegmentOutput {
	return o
}

func (o GroupOrSegmentOutput) Group() SchemaGroupPtrOutput {
	return o.ApplyT(func(v GroupOrSegment) *SchemaGroup { return v.Group }).(SchemaGroupPtrOutput)
}

func (o GroupOrSegmentOutput) Segment() SchemaSegmentPtrOutput {
	return o.ApplyT(func(v GroupOrSegment) *SchemaSegment { return v.Segment }).(SchemaSegmentPtrOutput)
}

type GroupOrSegmentArrayOutput struct{ *pulumi.OutputState }

func (GroupOrSegmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupOrSegment)(nil)).Elem()
}

func (o GroupOrSegmentArrayOutput) ToGroupOrSegmentArrayOutput() GroupOrSegmentArrayOutput {
	return o
}

func (o GroupOrSegmentArrayOutput) ToGroupOrSegmentArrayOutputWithContext(ctx context.Context) GroupOrSegmentArrayOutput {
	return o
}

func (o GroupOrSegmentArrayOutput) Index(i pulumi.IntInput) GroupOrSegmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupOrSegment {
		return vs[0].([]GroupOrSegment)[vs[1].(int)]
	}).(GroupOrSegmentOutput)
}

// Construct representing a logical group or a segment.
type GroupOrSegmentResponse struct {
	Group   SchemaGroupResponse   `pulumi:"group"`
	Segment SchemaSegmentResponse `pulumi:"segment"`
}

// Construct representing a logical group or a segment.
type GroupOrSegmentResponseOutput struct{ *pulumi.OutputState }

func (GroupOrSegmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupOrSegmentResponse)(nil)).Elem()
}

func (o GroupOrSegmentResponseOutput) ToGroupOrSegmentResponseOutput() GroupOrSegmentResponseOutput {
	return o
}

func (o GroupOrSegmentResponseOutput) ToGroupOrSegmentResponseOutputWithContext(ctx context.Context) GroupOrSegmentResponseOutput {
	return o
}

func (o GroupOrSegmentResponseOutput) Group() SchemaGroupResponseOutput {
	return o.ApplyT(func(v GroupOrSegmentResponse) SchemaGroupResponse { return v.Group }).(SchemaGroupResponseOutput)
}

func (o GroupOrSegmentResponseOutput) Segment() SchemaSegmentResponseOutput {
	return o.ApplyT(func(v GroupOrSegmentResponse) SchemaSegmentResponse { return v.Segment }).(SchemaSegmentResponseOutput)
}

type GroupOrSegmentResponseArrayOutput struct{ *pulumi.OutputState }

func (GroupOrSegmentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupOrSegmentResponse)(nil)).Elem()
}

func (o GroupOrSegmentResponseArrayOutput) ToGroupOrSegmentResponseArrayOutput() GroupOrSegmentResponseArrayOutput {
	return o
}

func (o GroupOrSegmentResponseArrayOutput) ToGroupOrSegmentResponseArrayOutputWithContext(ctx context.Context) GroupOrSegmentResponseArrayOutput {
	return o
}

func (o GroupOrSegmentResponseArrayOutput) Index(i pulumi.IntInput) GroupOrSegmentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupOrSegmentResponse {
		return vs[0].([]GroupOrSegmentResponse)[vs[1].(int)]
	}).(GroupOrSegmentResponseOutput)
}

// Root config message for HL7v2 schema. This contains a schema structure of groups and segments, and filters that determine which messages to apply the schema structure to.
type Hl7SchemaConfig struct {
	// Map from each HL7v2 message type and trigger event pair, such as ADT_A04, to its schema configuration root group.
	MessageSchemaConfigs *SchemaGroup `pulumi:"messageSchemaConfigs"`
	// Each VersionSource is tested and only if they all match is the schema used for the message.
	Version []VersionSource `pulumi:"version"`
}

// Hl7SchemaConfigInput is an input type that accepts Hl7SchemaConfigArgs and Hl7SchemaConfigOutput values.
// You can construct a concrete instance of `Hl7SchemaConfigInput` via:
//
//	Hl7SchemaConfigArgs{...}
type Hl7SchemaConfigInput interface {
	pulumi.Input

	ToHl7SchemaConfigOutput() Hl7SchemaConfigOutput
	ToHl7SchemaConfigOutputWithContext(context.Context) Hl7SchemaConfigOutput
}

// Root config message for HL7v2 schema. This contains a schema structure of groups and segments, and filters that determine which messages to apply the schema structure to.
type Hl7SchemaConfigArgs struct {
	// Map from each HL7v2 message type and trigger event pair, such as ADT_A04, to its schema configuration root group.
	MessageSchemaConfigs SchemaGroupPtrInput `pulumi:"messageSchemaConfigs"`
	// Each VersionSource is tested and only if they all match is the schema used for the message.
	Version VersionSourceArrayInput `pulumi:"version"`
}

func (Hl7SchemaConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7SchemaConfig)(nil)).Elem()
}

func (i Hl7SchemaConfigArgs) ToHl7SchemaConfigOutput() Hl7SchemaConfigOutput {
	return i.ToHl7SchemaConfigOutputWithContext(context.Background())
}

func (i Hl7SchemaConfigArgs) ToHl7SchemaConfigOutputWithContext(ctx context.Context) Hl7SchemaConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7SchemaConfigOutput)
}

// Hl7SchemaConfigArrayInput is an input type that accepts Hl7SchemaConfigArray and Hl7SchemaConfigArrayOutput values.
// You can construct a concrete instance of `Hl7SchemaConfigArrayInput` via:
//
//	Hl7SchemaConfigArray{ Hl7SchemaConfigArgs{...} }
type Hl7SchemaConfigArrayInput interface {
	pulumi.Input

	ToHl7SchemaConfigArrayOutput() Hl7SchemaConfigArrayOutput
	ToHl7SchemaConfigArrayOutputWithContext(context.Context) Hl7SchemaConfigArrayOutput
}

type Hl7SchemaConfigArray []Hl7SchemaConfigInput

func (Hl7SchemaConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hl7SchemaConfig)(nil)).Elem()
}

func (i Hl7SchemaConfigArray) ToHl7SchemaConfigArrayOutput() Hl7SchemaConfigArrayOutput {
	return i.ToHl7SchemaConfigArrayOutputWithContext(context.Background())
}

func (i Hl7SchemaConfigArray) ToHl7SchemaConfigArrayOutputWithContext(ctx context.Context) Hl7SchemaConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7SchemaConfigArrayOutput)
}

// Root config message for HL7v2 schema. This contains a schema structure of groups and segments, and filters that determine which messages to apply the schema structure to.
type Hl7SchemaConfigOutput struct{ *pulumi.OutputState }

func (Hl7SchemaConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7SchemaConfig)(nil)).Elem()
}

func (o Hl7SchemaConfigOutput) ToHl7SchemaConfigOutput() Hl7SchemaConfigOutput {
	return o
}

func (o Hl7SchemaConfigOutput) ToHl7SchemaConfigOutputWithContext(ctx context.Context) Hl7SchemaConfigOutput {
	return o
}

// Map from each HL7v2 message type and trigger event pair, such as ADT_A04, to its schema configuration root group.
func (o Hl7SchemaConfigOutput) MessageSchemaConfigs() SchemaGroupPtrOutput {
	return o.ApplyT(func(v Hl7SchemaConfig) *SchemaGroup { return v.MessageSchemaConfigs }).(SchemaGroupPtrOutput)
}

// Each VersionSource is tested and only if they all match is the schema used for the message.
func (o Hl7SchemaConfigOutput) Version() VersionSourceArrayOutput {
	return o.ApplyT(func(v Hl7SchemaConfig) []VersionSource { return v.Version }).(VersionSourceArrayOutput)
}

type Hl7SchemaConfigArrayOutput struct{ *pulumi.OutputState }

func (Hl7SchemaConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hl7SchemaConfig)(nil)).Elem()
}

func (o Hl7SchemaConfigArrayOutput) ToHl7SchemaConfigArrayOutput() Hl7SchemaConfigArrayOutput {
	return o
}

func (o Hl7SchemaConfigArrayOutput) ToHl7SchemaConfigArrayOutputWithContext(ctx context.Context) Hl7SchemaConfigArrayOutput {
	return o
}

func (o Hl7SchemaConfigArrayOutput) Index(i pulumi.IntInput) Hl7SchemaConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Hl7SchemaConfig {
		return vs[0].([]Hl7SchemaConfig)[vs[1].(int)]
	}).(Hl7SchemaConfigOutput)
}

// Root config message for HL7v2 schema. This contains a schema structure of groups and segments, and filters that determine which messages to apply the schema structure to.
type Hl7SchemaConfigResponse struct {
	// Map from each HL7v2 message type and trigger event pair, such as ADT_A04, to its schema configuration root group.
	MessageSchemaConfigs SchemaGroupResponse `pulumi:"messageSchemaConfigs"`
	// Each VersionSource is tested and only if they all match is the schema used for the message.
	Version []VersionSourceResponse `pulumi:"version"`
}

// Root config message for HL7v2 schema. This contains a schema structure of groups and segments, and filters that determine which messages to apply the schema structure to.
type Hl7SchemaConfigResponseOutput struct{ *pulumi.OutputState }

func (Hl7SchemaConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7SchemaConfigResponse)(nil)).Elem()
}

func (o Hl7SchemaConfigResponseOutput) ToHl7SchemaConfigResponseOutput() Hl7SchemaConfigResponseOutput {
	return o
}

func (o Hl7SchemaConfigResponseOutput) ToHl7SchemaConfigResponseOutputWithContext(ctx context.Context) Hl7SchemaConfigResponseOutput {
	return o
}

// Map from each HL7v2 message type and trigger event pair, such as ADT_A04, to its schema configuration root group.
func (o Hl7SchemaConfigResponseOutput) MessageSchemaConfigs() SchemaGroupResponseOutput {
	return o.ApplyT(func(v Hl7SchemaConfigResponse) SchemaGroupResponse { return v.MessageSchemaConfigs }).(SchemaGroupResponseOutput)
}

// Each VersionSource is tested and only if they all match is the schema used for the message.
func (o Hl7SchemaConfigResponseOutput) Version() VersionSourceResponseArrayOutput {
	return o.ApplyT(func(v Hl7SchemaConfigResponse) []VersionSourceResponse { return v.Version }).(VersionSourceResponseArrayOutput)
}

type Hl7SchemaConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (Hl7SchemaConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hl7SchemaConfigResponse)(nil)).Elem()
}

func (o Hl7SchemaConfigResponseArrayOutput) ToHl7SchemaConfigResponseArrayOutput() Hl7SchemaConfigResponseArrayOutput {
	return o
}

func (o Hl7SchemaConfigResponseArrayOutput) ToHl7SchemaConfigResponseArrayOutputWithContext(ctx context.Context) Hl7SchemaConfigResponseArrayOutput {
	return o
}

func (o Hl7SchemaConfigResponseArrayOutput) Index(i pulumi.IntInput) Hl7SchemaConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Hl7SchemaConfigResponse {
		return vs[0].([]Hl7SchemaConfigResponse)[vs[1].(int)]
	}).(Hl7SchemaConfigResponseOutput)
}

// Root config for HL7v2 datatype definitions for a specific HL7v2 version.
type Hl7TypesConfig struct {
	// The HL7v2 type definitions.
	Type []Type `pulumi:"type"`
	// The version selectors that this config applies to. A message must match ALL version sources to apply.
	Version []VersionSource `pulumi:"version"`
}

// Hl7TypesConfigInput is an input type that accepts Hl7TypesConfigArgs and Hl7TypesConfigOutput values.
// You can construct a concrete instance of `Hl7TypesConfigInput` via:
//
//	Hl7TypesConfigArgs{...}
type Hl7TypesConfigInput interface {
	pulumi.Input

	ToHl7TypesConfigOutput() Hl7TypesConfigOutput
	ToHl7TypesConfigOutputWithContext(context.Context) Hl7TypesConfigOutput
}

// Root config for HL7v2 datatype definitions for a specific HL7v2 version.
type Hl7TypesConfigArgs struct {
	// The HL7v2 type definitions.
	Type TypeArrayInput `pulumi:"type"`
	// The version selectors that this config applies to. A message must match ALL version sources to apply.
	Version VersionSourceArrayInput `pulumi:"version"`
}

func (Hl7TypesConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7TypesConfig)(nil)).Elem()
}

func (i Hl7TypesConfigArgs) ToHl7TypesConfigOutput() Hl7TypesConfigOutput {
	return i.ToHl7TypesConfigOutputWithContext(context.Background())
}

func (i Hl7TypesConfigArgs) ToHl7TypesConfigOutputWithContext(ctx context.Context) Hl7TypesConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7TypesConfigOutput)
}

// Hl7TypesConfigArrayInput is an input type that accepts Hl7TypesConfigArray and Hl7TypesConfigArrayOutput values.
// You can construct a concrete instance of `Hl7TypesConfigArrayInput` via:
//
//	Hl7TypesConfigArray{ Hl7TypesConfigArgs{...} }
type Hl7TypesConfigArrayInput interface {
	pulumi.Input

	ToHl7TypesConfigArrayOutput() Hl7TypesConfigArrayOutput
	ToHl7TypesConfigArrayOutputWithContext(context.Context) Hl7TypesConfigArrayOutput
}

type Hl7TypesConfigArray []Hl7TypesConfigInput

func (Hl7TypesConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hl7TypesConfig)(nil)).Elem()
}

func (i Hl7TypesConfigArray) ToHl7TypesConfigArrayOutput() Hl7TypesConfigArrayOutput {
	return i.ToHl7TypesConfigArrayOutputWithContext(context.Background())
}

func (i Hl7TypesConfigArray) ToHl7TypesConfigArrayOutputWithContext(ctx context.Context) Hl7TypesConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7TypesConfigArrayOutput)
}

// Root config for HL7v2 datatype definitions for a specific HL7v2 version.
type Hl7TypesConfigOutput struct{ *pulumi.OutputState }

func (Hl7TypesConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7TypesConfig)(nil)).Elem()
}

func (o Hl7TypesConfigOutput) ToHl7TypesConfigOutput() Hl7TypesConfigOutput {
	return o
}

func (o Hl7TypesConfigOutput) ToHl7TypesConfigOutputWithContext(ctx context.Context) Hl7TypesConfigOutput {
	return o
}

// The HL7v2 type definitions.
func (o Hl7TypesConfigOutput) Type() TypeArrayOutput {
	return o.ApplyT(func(v Hl7TypesConfig) []Type { return v.Type }).(TypeArrayOutput)
}

// The version selectors that this config applies to. A message must match ALL version sources to apply.
func (o Hl7TypesConfigOutput) Version() VersionSourceArrayOutput {
	return o.ApplyT(func(v Hl7TypesConfig) []VersionSource { return v.Version }).(VersionSourceArrayOutput)
}

type Hl7TypesConfigArrayOutput struct{ *pulumi.OutputState }

func (Hl7TypesConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hl7TypesConfig)(nil)).Elem()
}

func (o Hl7TypesConfigArrayOutput) ToHl7TypesConfigArrayOutput() Hl7TypesConfigArrayOutput {
	return o
}

func (o Hl7TypesConfigArrayOutput) ToHl7TypesConfigArrayOutputWithContext(ctx context.Context) Hl7TypesConfigArrayOutput {
	return o
}

func (o Hl7TypesConfigArrayOutput) Index(i pulumi.IntInput) Hl7TypesConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Hl7TypesConfig {
		return vs[0].([]Hl7TypesConfig)[vs[1].(int)]
	}).(Hl7TypesConfigOutput)
}

// Root config for HL7v2 datatype definitions for a specific HL7v2 version.
type Hl7TypesConfigResponse struct {
	// The HL7v2 type definitions.
	Type []TypeResponse `pulumi:"type"`
	// The version selectors that this config applies to. A message must match ALL version sources to apply.
	Version []VersionSourceResponse `pulumi:"version"`
}

// Root config for HL7v2 datatype definitions for a specific HL7v2 version.
type Hl7TypesConfigResponseOutput struct{ *pulumi.OutputState }

func (Hl7TypesConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7TypesConfigResponse)(nil)).Elem()
}

func (o Hl7TypesConfigResponseOutput) ToHl7TypesConfigResponseOutput() Hl7TypesConfigResponseOutput {
	return o
}

func (o Hl7TypesConfigResponseOutput) ToHl7TypesConfigResponseOutputWithContext(ctx context.Context) Hl7TypesConfigResponseOutput {
	return o
}

// The HL7v2 type definitions.
func (o Hl7TypesConfigResponseOutput) Type() TypeResponseArrayOutput {
	return o.ApplyT(func(v Hl7TypesConfigResponse) []TypeResponse { return v.Type }).(TypeResponseArrayOutput)
}

// The version selectors that this config applies to. A message must match ALL version sources to apply.
func (o Hl7TypesConfigResponseOutput) Version() VersionSourceResponseArrayOutput {
	return o.ApplyT(func(v Hl7TypesConfigResponse) []VersionSourceResponse { return v.Version }).(VersionSourceResponseArrayOutput)
}

type Hl7TypesConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (Hl7TypesConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hl7TypesConfigResponse)(nil)).Elem()
}

func (o Hl7TypesConfigResponseArrayOutput) ToHl7TypesConfigResponseArrayOutput() Hl7TypesConfigResponseArrayOutput {
	return o
}

func (o Hl7TypesConfigResponseArrayOutput) ToHl7TypesConfigResponseArrayOutputWithContext(ctx context.Context) Hl7TypesConfigResponseArrayOutput {
	return o
}

func (o Hl7TypesConfigResponseArrayOutput) Index(i pulumi.IntInput) Hl7TypesConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Hl7TypesConfigResponse {
		return vs[0].([]Hl7TypesConfigResponse)[vs[1].(int)]
	}).(Hl7TypesConfigResponseOutput)
}

// Specifies where and whether to send notifications upon changes to a data store.
type Hl7V2NotificationConfig struct {
	// Restricts notifications sent for messages matching a filter. If this is empty, all messages are matched. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The following fields and functions are available for filtering: * `message_type`, from the MSH-9.1 field. For example, `NOT message_type = "ADT"`. * `send_date` or `sendDate`, the YYYY-MM-DD date the message was sent in the dataset's time_zone, from the MSH-7 segment. For example, `send_date < "2017-01-02"`. * `send_time`, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, `send_time < "2017-01-02T00:00:00-05:00"`. * `create_time`, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, `create_time < "2017-01-02T00:00:00-05:00"`. * `send_facility`, the care center that the message came from, from the MSH-4 segment. For example, `send_facility = "ABC"`. * `PatientId(value, type)`, which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, `PatientId("123456", "MRN")`. * `labels.x`, a string value of the label with key `x` as set using the Message.labels map. For example, `labels."priority"="high"`. The operator `:*` can be used to assert the existence of a label. For example, `labels."priority":*`.
	Filter *string `pulumi:"filter"`
	// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It's guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification cannot be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
	PubsubTopic *string `pulumi:"pubsubTopic"`
}

// Hl7V2NotificationConfigInput is an input type that accepts Hl7V2NotificationConfigArgs and Hl7V2NotificationConfigOutput values.
// You can construct a concrete instance of `Hl7V2NotificationConfigInput` via:
//
//	Hl7V2NotificationConfigArgs{...}
type Hl7V2NotificationConfigInput interface {
	pulumi.Input

	ToHl7V2NotificationConfigOutput() Hl7V2NotificationConfigOutput
	ToHl7V2NotificationConfigOutputWithContext(context.Context) Hl7V2NotificationConfigOutput
}

// Specifies where and whether to send notifications upon changes to a data store.
type Hl7V2NotificationConfigArgs struct {
	// Restricts notifications sent for messages matching a filter. If this is empty, all messages are matched. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The following fields and functions are available for filtering: * `message_type`, from the MSH-9.1 field. For example, `NOT message_type = "ADT"`. * `send_date` or `sendDate`, the YYYY-MM-DD date the message was sent in the dataset's time_zone, from the MSH-7 segment. For example, `send_date < "2017-01-02"`. * `send_time`, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, `send_time < "2017-01-02T00:00:00-05:00"`. * `create_time`, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, `create_time < "2017-01-02T00:00:00-05:00"`. * `send_facility`, the care center that the message came from, from the MSH-4 segment. For example, `send_facility = "ABC"`. * `PatientId(value, type)`, which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, `PatientId("123456", "MRN")`. * `labels.x`, a string value of the label with key `x` as set using the Message.labels map. For example, `labels."priority"="high"`. The operator `:*` can be used to assert the existence of a label. For example, `labels."priority":*`.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It's guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification cannot be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
	PubsubTopic pulumi.StringPtrInput `pulumi:"pubsubTopic"`
}

func (Hl7V2NotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7V2NotificationConfig)(nil)).Elem()
}

func (i Hl7V2NotificationConfigArgs) ToHl7V2NotificationConfigOutput() Hl7V2NotificationConfigOutput {
	return i.ToHl7V2NotificationConfigOutputWithContext(context.Background())
}

func (i Hl7V2NotificationConfigArgs) ToHl7V2NotificationConfigOutputWithContext(ctx context.Context) Hl7V2NotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7V2NotificationConfigOutput)
}

// Hl7V2NotificationConfigArrayInput is an input type that accepts Hl7V2NotificationConfigArray and Hl7V2NotificationConfigArrayOutput values.
// You can construct a concrete instance of `Hl7V2NotificationConfigArrayInput` via:
//
//	Hl7V2NotificationConfigArray{ Hl7V2NotificationConfigArgs{...} }
type Hl7V2NotificationConfigArrayInput interface {
	pulumi.Input

	ToHl7V2NotificationConfigArrayOutput() Hl7V2NotificationConfigArrayOutput
	ToHl7V2NotificationConfigArrayOutputWithContext(context.Context) Hl7V2NotificationConfigArrayOutput
}

type Hl7V2NotificationConfigArray []Hl7V2NotificationConfigInput

func (Hl7V2NotificationConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hl7V2NotificationConfig)(nil)).Elem()
}

func (i Hl7V2NotificationConfigArray) ToHl7V2NotificationConfigArrayOutput() Hl7V2NotificationConfigArrayOutput {
	return i.ToHl7V2NotificationConfigArrayOutputWithContext(context.Background())
}

func (i Hl7V2NotificationConfigArray) ToHl7V2NotificationConfigArrayOutputWithContext(ctx context.Context) Hl7V2NotificationConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Hl7V2NotificationConfigArrayOutput)
}

// Specifies where and whether to send notifications upon changes to a data store.
type Hl7V2NotificationConfigOutput struct{ *pulumi.OutputState }

func (Hl7V2NotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7V2NotificationConfig)(nil)).Elem()
}

func (o Hl7V2NotificationConfigOutput) ToHl7V2NotificationConfigOutput() Hl7V2NotificationConfigOutput {
	return o
}

func (o Hl7V2NotificationConfigOutput) ToHl7V2NotificationConfigOutputWithContext(ctx context.Context) Hl7V2NotificationConfigOutput {
	return o
}

// Restricts notifications sent for messages matching a filter. If this is empty, all messages are matched. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The following fields and functions are available for filtering: * `message_type`, from the MSH-9.1 field. For example, `NOT message_type = "ADT"`. * `send_date` or `sendDate`, the YYYY-MM-DD date the message was sent in the dataset's time_zone, from the MSH-7 segment. For example, `send_date < "2017-01-02"`. * `send_time`, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, `send_time < "2017-01-02T00:00:00-05:00"`. * `create_time`, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, `create_time < "2017-01-02T00:00:00-05:00"`. * `send_facility`, the care center that the message came from, from the MSH-4 segment. For example, `send_facility = "ABC"`. * `PatientId(value, type)`, which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, `PatientId("123456", "MRN")`. * `labels.x`, a string value of the label with key `x` as set using the Message.labels map. For example, `labels."priority"="high"`. The operator `:*` can be used to assert the existence of a label. For example, `labels."priority":*`.
func (o Hl7V2NotificationConfigOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Hl7V2NotificationConfig) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It's guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification cannot be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
func (o Hl7V2NotificationConfigOutput) PubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Hl7V2NotificationConfig) *string { return v.PubsubTopic }).(pulumi.StringPtrOutput)
}

type Hl7V2NotificationConfigArrayOutput struct{ *pulumi.OutputState }

func (Hl7V2NotificationConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hl7V2NotificationConfig)(nil)).Elem()
}

func (o Hl7V2NotificationConfigArrayOutput) ToHl7V2NotificationConfigArrayOutput() Hl7V2NotificationConfigArrayOutput {
	return o
}

func (o Hl7V2NotificationConfigArrayOutput) ToHl7V2NotificationConfigArrayOutputWithContext(ctx context.Context) Hl7V2NotificationConfigArrayOutput {
	return o
}

func (o Hl7V2NotificationConfigArrayOutput) Index(i pulumi.IntInput) Hl7V2NotificationConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Hl7V2NotificationConfig {
		return vs[0].([]Hl7V2NotificationConfig)[vs[1].(int)]
	}).(Hl7V2NotificationConfigOutput)
}

// Specifies where and whether to send notifications upon changes to a data store.
type Hl7V2NotificationConfigResponse struct {
	// Restricts notifications sent for messages matching a filter. If this is empty, all messages are matched. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The following fields and functions are available for filtering: * `message_type`, from the MSH-9.1 field. For example, `NOT message_type = "ADT"`. * `send_date` or `sendDate`, the YYYY-MM-DD date the message was sent in the dataset's time_zone, from the MSH-7 segment. For example, `send_date < "2017-01-02"`. * `send_time`, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, `send_time < "2017-01-02T00:00:00-05:00"`. * `create_time`, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, `create_time < "2017-01-02T00:00:00-05:00"`. * `send_facility`, the care center that the message came from, from the MSH-4 segment. For example, `send_facility = "ABC"`. * `PatientId(value, type)`, which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, `PatientId("123456", "MRN")`. * `labels.x`, a string value of the label with key `x` as set using the Message.labels map. For example, `labels."priority"="high"`. The operator `:*` can be used to assert the existence of a label. For example, `labels."priority":*`.
	Filter string `pulumi:"filter"`
	// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It's guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification cannot be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
	PubsubTopic string `pulumi:"pubsubTopic"`
}

// Specifies where and whether to send notifications upon changes to a data store.
type Hl7V2NotificationConfigResponseOutput struct{ *pulumi.OutputState }

func (Hl7V2NotificationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Hl7V2NotificationConfigResponse)(nil)).Elem()
}

func (o Hl7V2NotificationConfigResponseOutput) ToHl7V2NotificationConfigResponseOutput() Hl7V2NotificationConfigResponseOutput {
	return o
}

func (o Hl7V2NotificationConfigResponseOutput) ToHl7V2NotificationConfigResponseOutputWithContext(ctx context.Context) Hl7V2NotificationConfigResponseOutput {
	return o
}

// Restricts notifications sent for messages matching a filter. If this is empty, all messages are matched. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `"query text"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `"Comment = great"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The following fields and functions are available for filtering: * `message_type`, from the MSH-9.1 field. For example, `NOT message_type = "ADT"`. * `send_date` or `sendDate`, the YYYY-MM-DD date the message was sent in the dataset's time_zone, from the MSH-7 segment. For example, `send_date < "2017-01-02"`. * `send_time`, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, `send_time < "2017-01-02T00:00:00-05:00"`. * `create_time`, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, `create_time < "2017-01-02T00:00:00-05:00"`. * `send_facility`, the care center that the message came from, from the MSH-4 segment. For example, `send_facility = "ABC"`. * `PatientId(value, type)`, which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, `PatientId("123456", "MRN")`. * `labels.x`, a string value of the label with key `x` as set using the Message.labels map. For example, `labels."priority"="high"`. The operator `:*` can be used to assert the existence of a label. For example, `labels."priority":*`.
func (o Hl7V2NotificationConfigResponseOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v Hl7V2NotificationConfigResponse) string { return v.Filter }).(pulumi.StringOutput)
}

// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It's guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification cannot be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
func (o Hl7V2NotificationConfigResponseOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v Hl7V2NotificationConfigResponse) string { return v.PubsubTopic }).(pulumi.StringOutput)
}

type Hl7V2NotificationConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (Hl7V2NotificationConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Hl7V2NotificationConfigResponse)(nil)).Elem()
}

func (o Hl7V2NotificationConfigResponseArrayOutput) ToHl7V2NotificationConfigResponseArrayOutput() Hl7V2NotificationConfigResponseArrayOutput {
	return o
}

func (o Hl7V2NotificationConfigResponseArrayOutput) ToHl7V2NotificationConfigResponseArrayOutputWithContext(ctx context.Context) Hl7V2NotificationConfigResponseArrayOutput {
	return o
}

func (o Hl7V2NotificationConfigResponseArrayOutput) Index(i pulumi.IntInput) Hl7V2NotificationConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Hl7V2NotificationConfigResponse {
		return vs[0].([]Hl7V2NotificationConfigResponse)[vs[1].(int)]
	}).(Hl7V2NotificationConfigResponseOutput)
}

// Raw bytes representing consent artifact content.
type Image struct {
	// Input only. Points to a Cloud Storage URI containing the consent artifact content. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The Cloud Healthcare API service account must have the `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage location. The consent artifact content at this URI is copied to a Cloud Storage location managed by the Cloud Healthcare API. Responses to fetching requests return the consent artifact content in raw_bytes.
	GcsUri *string `pulumi:"gcsUri"`
	// Consent artifact content represented as a stream of bytes. This field is populated when returned in GetConsentArtifact response, but not included in CreateConsentArtifact and ListConsentArtifact response.
	RawBytes *string `pulumi:"rawBytes"`
}

// ImageInput is an input type that accepts ImageArgs and ImageOutput values.
// You can construct a concrete instance of `ImageInput` via:
//
//	ImageArgs{...}
type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(context.Context) ImageOutput
}

// Raw bytes representing consent artifact content.
type ImageArgs struct {
	// Input only. Points to a Cloud Storage URI containing the consent artifact content. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The Cloud Healthcare API service account must have the `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage location. The consent artifact content at this URI is copied to a Cloud Storage location managed by the Cloud Healthcare API. Responses to fetching requests return the consent artifact content in raw_bytes.
	GcsUri pulumi.StringPtrInput `pulumi:"gcsUri"`
	// Consent artifact content represented as a stream of bytes. This field is populated when returned in GetConsentArtifact response, but not included in CreateConsentArtifact and ListConsentArtifact response.
	RawBytes pulumi.StringPtrInput `pulumi:"rawBytes"`
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Image)(nil)).Elem()
}

func (i ImageArgs) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i ImageArgs) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

func (i ImageArgs) ToImagePtrOutput() ImagePtrOutput {
	return i.ToImagePtrOutputWithContext(context.Background())
}

func (i ImageArgs) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput).ToImagePtrOutputWithContext(ctx)
}

// ImagePtrInput is an input type that accepts ImageArgs, ImagePtr and ImagePtrOutput values.
// You can construct a concrete instance of `ImagePtrInput` via:
//
//	        ImageArgs{...}
//
//	or:
//
//	        nil
type ImagePtrInput interface {
	pulumi.Input

	ToImagePtrOutput() ImagePtrOutput
	ToImagePtrOutputWithContext(context.Context) ImagePtrOutput
}

type imagePtrType ImageArgs

func ImagePtr(v *ImageArgs) ImagePtrInput {
	return (*imagePtrType)(v)
}

func (*imagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *imagePtrType) ToImagePtrOutput() ImagePtrOutput {
	return i.ToImagePtrOutputWithContext(context.Background())
}

func (i *imagePtrType) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePtrOutput)
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//	ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

// Raw bytes representing consent artifact content.
type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

func (o ImageOutput) ToImagePtrOutput() ImagePtrOutput {
	return o.ToImagePtrOutputWithContext(context.Background())
}

func (o ImageOutput) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Image) *Image {
		return &v
	}).(ImagePtrOutput)
}

// Input only. Points to a Cloud Storage URI containing the consent artifact content. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The Cloud Healthcare API service account must have the `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage location. The consent artifact content at this URI is copied to a Cloud Storage location managed by the Cloud Healthcare API. Responses to fetching requests return the consent artifact content in raw_bytes.
func (o ImageOutput) GcsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Image) *string { return v.GcsUri }).(pulumi.StringPtrOutput)
}

// Consent artifact content represented as a stream of bytes. This field is populated when returned in GetConsentArtifact response, but not included in CreateConsentArtifact and ListConsentArtifact response.
func (o ImageOutput) RawBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Image) *string { return v.RawBytes }).(pulumi.StringPtrOutput)
}

type ImagePtrOutput struct{ *pulumi.OutputState }

func (ImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImagePtrOutput) ToImagePtrOutput() ImagePtrOutput {
	return o
}

func (o ImagePtrOutput) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return o
}

func (o ImagePtrOutput) Elem() ImageOutput {
	return o.ApplyT(func(v *Image) Image {
		if v != nil {
			return *v
		}
		var ret Image
		return ret
	}).(ImageOutput)
}

// Input only. Points to a Cloud Storage URI containing the consent artifact content. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The Cloud Healthcare API service account must have the `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage location. The consent artifact content at this URI is copied to a Cloud Storage location managed by the Cloud Healthcare API. Responses to fetching requests return the consent artifact content in raw_bytes.
func (o ImagePtrOutput) GcsUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) *string {
		if v == nil {
			return nil
		}
		return v.GcsUri
	}).(pulumi.StringPtrOutput)
}

// Consent artifact content represented as a stream of bytes. This field is populated when returned in GetConsentArtifact response, but not included in CreateConsentArtifact and ListConsentArtifact response.
func (o ImagePtrOutput) RawBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) *string {
		if v == nil {
			return nil
		}
		return v.RawBytes
	}).(pulumi.StringPtrOutput)
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Image)(nil)).Elem()
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Image {
		return vs[0].([]Image)[vs[1].(int)]
	}).(ImageOutput)
}

// Specifies how to handle de-identification of image pixels.
type ImageConfig struct {
	// Determines how to redact text from image.
	TextRedactionMode *ImageConfigTextRedactionMode `pulumi:"textRedactionMode"`
}

// ImageConfigInput is an input type that accepts ImageConfigArgs and ImageConfigOutput values.
// You can construct a concrete instance of `ImageConfigInput` via:
//
//	ImageConfigArgs{...}
type ImageConfigInput interface {
	pulumi.Input

	ToImageConfigOutput() ImageConfigOutput
	ToImageConfigOutputWithContext(context.Context) ImageConfigOutput
}

// Specifies how to handle de-identification of image pixels.
type ImageConfigArgs struct {
	// Determines how to redact text from image.
	TextRedactionMode ImageConfigTextRedactionModePtrInput `pulumi:"textRedactionMode"`
}

func (ImageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageConfig)(nil)).Elem()
}

func (i ImageConfigArgs) ToImageConfigOutput() ImageConfigOutput {
	return i.ToImageConfigOutputWithContext(context.Background())
}

func (i ImageConfigArgs) ToImageConfigOutputWithContext(ctx context.Context) ImageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageConfigOutput)
}

func (i ImageConfigArgs) ToImageConfigPtrOutput() ImageConfigPtrOutput {
	return i.ToImageConfigPtrOutputWithContext(context.Background())
}

func (i ImageConfigArgs) ToImageConfigPtrOutputWithContext(ctx context.Context) ImageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageConfigOutput).ToImageConfigPtrOutputWithContext(ctx)
}

// ImageConfigPtrInput is an input type that accepts ImageConfigArgs, ImageConfigPtr and ImageConfigPtrOutput values.
// You can construct a concrete instance of `ImageConfigPtrInput` via:
//
//	        ImageConfigArgs{...}
//
//	or:
//
//	        nil
type ImageConfigPtrInput interface {
	pulumi.Input

	ToImageConfigPtrOutput() ImageConfigPtrOutput
	ToImageConfigPtrOutputWithContext(context.Context) ImageConfigPtrOutput
}

type imageConfigPtrType ImageConfigArgs

func ImageConfigPtr(v *ImageConfigArgs) ImageConfigPtrInput {
	return (*imageConfigPtrType)(v)
}

func (*imageConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageConfig)(nil)).Elem()
}

func (i *imageConfigPtrType) ToImageConfigPtrOutput() ImageConfigPtrOutput {
	return i.ToImageConfigPtrOutputWithContext(context.Background())
}

func (i *imageConfigPtrType) ToImageConfigPtrOutputWithContext(ctx context.Context) ImageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageConfigPtrOutput)
}

// Specifies how to handle de-identification of image pixels.
type ImageConfigOutput struct{ *pulumi.OutputState }

func (ImageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageConfig)(nil)).Elem()
}

func (o ImageConfigOutput) ToImageConfigOutput() ImageConfigOutput {
	return o
}

func (o ImageConfigOutput) ToImageConfigOutputWithContext(ctx context.Context) ImageConfigOutput {
	return o
}

func (o ImageConfigOutput) ToImageConfigPtrOutput() ImageConfigPtrOutput {
	return o.ToImageConfigPtrOutputWithContext(context.Background())
}

func (o ImageConfigOutput) ToImageConfigPtrOutputWithContext(ctx context.Context) ImageConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageConfig) *ImageConfig {
		return &v
	}).(ImageConfigPtrOutput)
}

// Determines how to redact text from image.
func (o ImageConfigOutput) TextRedactionMode() ImageConfigTextRedactionModePtrOutput {
	return o.ApplyT(func(v ImageConfig) *ImageConfigTextRedactionMode { return v.TextRedactionMode }).(ImageConfigTextRedactionModePtrOutput)
}

type ImageConfigPtrOutput struct{ *pulumi.OutputState }

func (ImageConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageConfig)(nil)).Elem()
}

func (o ImageConfigPtrOutput) ToImageConfigPtrOutput() ImageConfigPtrOutput {
	return o
}

func (o ImageConfigPtrOutput) ToImageConfigPtrOutputWithContext(ctx context.Context) ImageConfigPtrOutput {
	return o
}

func (o ImageConfigPtrOutput) Elem() ImageConfigOutput {
	return o.ApplyT(func(v *ImageConfig) ImageConfig {
		if v != nil {
			return *v
		}
		var ret ImageConfig
		return ret
	}).(ImageConfigOutput)
}

// Determines how to redact text from image.
func (o ImageConfigPtrOutput) TextRedactionMode() ImageConfigTextRedactionModePtrOutput {
	return o.ApplyT(func(v *ImageConfig) *ImageConfigTextRedactionMode {
		if v == nil {
			return nil
		}
		return v.TextRedactionMode
	}).(ImageConfigTextRedactionModePtrOutput)
}

// Specifies how to handle de-identification of image pixels.
type ImageConfigResponse struct {
	// Determines how to redact text from image.
	TextRedactionMode string `pulumi:"textRedactionMode"`
}

// Specifies how to handle de-identification of image pixels.
type ImageConfigResponseOutput struct{ *pulumi.OutputState }

func (ImageConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageConfigResponse)(nil)).Elem()
}

func (o ImageConfigResponseOutput) ToImageConfigResponseOutput() ImageConfigResponseOutput {
	return o
}

func (o ImageConfigResponseOutput) ToImageConfigResponseOutputWithContext(ctx context.Context) ImageConfigResponseOutput {
	return o
}

// Determines how to redact text from image.
func (o ImageConfigResponseOutput) TextRedactionMode() pulumi.StringOutput {
	return o.ApplyT(func(v ImageConfigResponse) string { return v.TextRedactionMode }).(pulumi.StringOutput)
}

// Raw bytes representing consent artifact content.
type ImageResponse struct {
	// Input only. Points to a Cloud Storage URI containing the consent artifact content. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The Cloud Healthcare API service account must have the `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage location. The consent artifact content at this URI is copied to a Cloud Storage location managed by the Cloud Healthcare API. Responses to fetching requests return the consent artifact content in raw_bytes.
	GcsUri string `pulumi:"gcsUri"`
	// Consent artifact content represented as a stream of bytes. This field is populated when returned in GetConsentArtifact response, but not included in CreateConsentArtifact and ListConsentArtifact response.
	RawBytes string `pulumi:"rawBytes"`
}

// Raw bytes representing consent artifact content.
type ImageResponseOutput struct{ *pulumi.OutputState }

func (ImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageResponse)(nil)).Elem()
}

func (o ImageResponseOutput) ToImageResponseOutput() ImageResponseOutput {
	return o
}

func (o ImageResponseOutput) ToImageResponseOutputWithContext(ctx context.Context) ImageResponseOutput {
	return o
}

// Input only. Points to a Cloud Storage URI containing the consent artifact content. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The Cloud Healthcare API service account must have the `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage location. The consent artifact content at this URI is copied to a Cloud Storage location managed by the Cloud Healthcare API. Responses to fetching requests return the consent artifact content in raw_bytes.
func (o ImageResponseOutput) GcsUri() pulumi.StringOutput {
	return o.ApplyT(func(v ImageResponse) string { return v.GcsUri }).(pulumi.StringOutput)
}

// Consent artifact content represented as a stream of bytes. This field is populated when returned in GetConsentArtifact response, but not included in CreateConsentArtifact and ListConsentArtifact response.
func (o ImageResponseOutput) RawBytes() pulumi.StringOutput {
	return o.ApplyT(func(v ImageResponse) string { return v.RawBytes }).(pulumi.StringOutput)
}

type ImageResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageResponse)(nil)).Elem()
}

func (o ImageResponseArrayOutput) ToImageResponseArrayOutput() ImageResponseArrayOutput {
	return o
}

func (o ImageResponseArrayOutput) ToImageResponseArrayOutputWithContext(ctx context.Context) ImageResponseArrayOutput {
	return o
}

func (o ImageResponseArrayOutput) Index(i pulumi.IntInput) ImageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageResponse {
		return vs[0].([]ImageResponse)[vs[1].(int)]
	}).(ImageResponseOutput)
}

// A transformation to apply to text that is identified as a specific info_type.
type InfoTypeTransformation struct {
	// Config for character mask.
	CharacterMaskConfig *CharacterMaskConfig `pulumi:"characterMaskConfig"`
	// Config for crypto hash.
	CryptoHashConfig *CryptoHashConfig `pulumi:"cryptoHashConfig"`
	// Config for date shift.
	DateShiftConfig *DateShiftConfig `pulumi:"dateShiftConfig"`
	// InfoTypes to apply this transformation to. If this is not specified, the transformation applies to any info_type.
	InfoTypes []string `pulumi:"infoTypes"`
	// Config for text redaction.
	RedactConfig *RedactConfig `pulumi:"redactConfig"`
	// Config for replace with InfoType.
	ReplaceWithInfoTypeConfig *ReplaceWithInfoTypeConfig `pulumi:"replaceWithInfoTypeConfig"`
}

// InfoTypeTransformationInput is an input type that accepts InfoTypeTransformationArgs and InfoTypeTransformationOutput values.
// You can construct a concrete instance of `InfoTypeTransformationInput` via:
//
//	InfoTypeTransformationArgs{...}
type InfoTypeTransformationInput interface {
	pulumi.Input

	ToInfoTypeTransformationOutput() InfoTypeTransformationOutput
	ToInfoTypeTransformationOutputWithContext(context.Context) InfoTypeTransformationOutput
}

// A transformation to apply to text that is identified as a specific info_type.
type InfoTypeTransformationArgs struct {
	// Config for character mask.
	CharacterMaskConfig CharacterMaskConfigPtrInput `pulumi:"characterMaskConfig"`
	// Config for crypto hash.
	CryptoHashConfig CryptoHashConfigPtrInput `pulumi:"cryptoHashConfig"`
	// Config for date shift.
	DateShiftConfig DateShiftConfigPtrInput `pulumi:"dateShiftConfig"`
	// InfoTypes to apply this transformation to. If this is not specified, the transformation applies to any info_type.
	InfoTypes pulumi.StringArrayInput `pulumi:"infoTypes"`
	// Config for text redaction.
	RedactConfig RedactConfigPtrInput `pulumi:"redactConfig"`
	// Config for replace with InfoType.
	ReplaceWithInfoTypeConfig ReplaceWithInfoTypeConfigPtrInput `pulumi:"replaceWithInfoTypeConfig"`
}

func (InfoTypeTransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InfoTypeTransformation)(nil)).Elem()
}

func (i InfoTypeTransformationArgs) ToInfoTypeTransformationOutput() InfoTypeTransformationOutput {
	return i.ToInfoTypeTransformationOutputWithContext(context.Background())
}

func (i InfoTypeTransformationArgs) ToInfoTypeTransformationOutputWithContext(ctx context.Context) InfoTypeTransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfoTypeTransformationOutput)
}

// InfoTypeTransformationArrayInput is an input type that accepts InfoTypeTransformationArray and InfoTypeTransformationArrayOutput values.
// You can construct a concrete instance of `InfoTypeTransformationArrayInput` via:
//
//	InfoTypeTransformationArray{ InfoTypeTransformationArgs{...} }
type InfoTypeTransformationArrayInput interface {
	pulumi.Input

	ToInfoTypeTransformationArrayOutput() InfoTypeTransformationArrayOutput
	ToInfoTypeTransformationArrayOutputWithContext(context.Context) InfoTypeTransformationArrayOutput
}

type InfoTypeTransformationArray []InfoTypeTransformationInput

func (InfoTypeTransformationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InfoTypeTransformation)(nil)).Elem()
}

func (i InfoTypeTransformationArray) ToInfoTypeTransformationArrayOutput() InfoTypeTransformationArrayOutput {
	return i.ToInfoTypeTransformationArrayOutputWithContext(context.Background())
}

func (i InfoTypeTransformationArray) ToInfoTypeTransformationArrayOutputWithContext(ctx context.Context) InfoTypeTransformationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InfoTypeTransformationArrayOutput)
}

// A transformation to apply to text that is identified as a specific info_type.
type InfoTypeTransformationOutput struct{ *pulumi.OutputState }

func (InfoTypeTransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfoTypeTransformation)(nil)).Elem()
}

func (o InfoTypeTransformationOutput) ToInfoTypeTransformationOutput() InfoTypeTransformationOutput {
	return o
}

func (o InfoTypeTransformationOutput) ToInfoTypeTransformationOutputWithContext(ctx context.Context) InfoTypeTransformationOutput {
	return o
}

// Config for character mask.
func (o InfoTypeTransformationOutput) CharacterMaskConfig() CharacterMaskConfigPtrOutput {
	return o.ApplyT(func(v InfoTypeTransformation) *CharacterMaskConfig { return v.CharacterMaskConfig }).(CharacterMaskConfigPtrOutput)
}

// Config for crypto hash.
func (o InfoTypeTransformationOutput) CryptoHashConfig() CryptoHashConfigPtrOutput {
	return o.ApplyT(func(v InfoTypeTransformation) *CryptoHashConfig { return v.CryptoHashConfig }).(CryptoHashConfigPtrOutput)
}

// Config for date shift.
func (o InfoTypeTransformationOutput) DateShiftConfig() DateShiftConfigPtrOutput {
	return o.ApplyT(func(v InfoTypeTransformation) *DateShiftConfig { return v.DateShiftConfig }).(DateShiftConfigPtrOutput)
}

// InfoTypes to apply this transformation to. If this is not specified, the transformation applies to any info_type.
func (o InfoTypeTransformationOutput) InfoTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InfoTypeTransformation) []string { return v.InfoTypes }).(pulumi.StringArrayOutput)
}

// Config for text redaction.
func (o InfoTypeTransformationOutput) RedactConfig() RedactConfigPtrOutput {
	return o.ApplyT(func(v InfoTypeTransformation) *RedactConfig { return v.RedactConfig }).(RedactConfigPtrOutput)
}

// Config for replace with InfoType.
func (o InfoTypeTransformationOutput) ReplaceWithInfoTypeConfig() ReplaceWithInfoTypeConfigPtrOutput {
	return o.ApplyT(func(v InfoTypeTransformation) *ReplaceWithInfoTypeConfig { return v.ReplaceWithInfoTypeConfig }).(ReplaceWithInfoTypeConfigPtrOutput)
}

type InfoTypeTransformationArrayOutput struct{ *pulumi.OutputState }

func (InfoTypeTransformationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InfoTypeTransformation)(nil)).Elem()
}

func (o InfoTypeTransformationArrayOutput) ToInfoTypeTransformationArrayOutput() InfoTypeTransformationArrayOutput {
	return o
}

func (o InfoTypeTransformationArrayOutput) ToInfoTypeTransformationArrayOutputWithContext(ctx context.Context) InfoTypeTransformationArrayOutput {
	return o
}

func (o InfoTypeTransformationArrayOutput) Index(i pulumi.IntInput) InfoTypeTransformationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InfoTypeTransformation {
		return vs[0].([]InfoTypeTransformation)[vs[1].(int)]
	}).(InfoTypeTransformationOutput)
}

// A transformation to apply to text that is identified as a specific info_type.
type InfoTypeTransformationResponse struct {
	// Config for character mask.
	CharacterMaskConfig CharacterMaskConfigResponse `pulumi:"characterMaskConfig"`
	// Config for crypto hash.
	CryptoHashConfig CryptoHashConfigResponse `pulumi:"cryptoHashConfig"`
	// Config for date shift.
	DateShiftConfig DateShiftConfigResponse `pulumi:"dateShiftConfig"`
	// InfoTypes to apply this transformation to. If this is not specified, the transformation applies to any info_type.
	InfoTypes []string `pulumi:"infoTypes"`
	// Config for text redaction.
	RedactConfig RedactConfigResponse `pulumi:"redactConfig"`
	// Config for replace with InfoType.
	ReplaceWithInfoTypeConfig ReplaceWithInfoTypeConfigResponse `pulumi:"replaceWithInfoTypeConfig"`
}

// A transformation to apply to text that is identified as a specific info_type.
type InfoTypeTransformationResponseOutput struct{ *pulumi.OutputState }

func (InfoTypeTransformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InfoTypeTransformationResponse)(nil)).Elem()
}

func (o InfoTypeTransformationResponseOutput) ToInfoTypeTransformationResponseOutput() InfoTypeTransformationResponseOutput {
	return o
}

func (o InfoTypeTransformationResponseOutput) ToInfoTypeTransformationResponseOutputWithContext(ctx context.Context) InfoTypeTransformationResponseOutput {
	return o
}

// Config for character mask.
func (o InfoTypeTransformationResponseOutput) CharacterMaskConfig() CharacterMaskConfigResponseOutput {
	return o.ApplyT(func(v InfoTypeTransformationResponse) CharacterMaskConfigResponse { return v.CharacterMaskConfig }).(CharacterMaskConfigResponseOutput)
}

// Config for crypto hash.
func (o InfoTypeTransformationResponseOutput) CryptoHashConfig() CryptoHashConfigResponseOutput {
	return o.ApplyT(func(v InfoTypeTransformationResponse) CryptoHashConfigResponse { return v.CryptoHashConfig }).(CryptoHashConfigResponseOutput)
}

// Config for date shift.
func (o InfoTypeTransformationResponseOutput) DateShiftConfig() DateShiftConfigResponseOutput {
	return o.ApplyT(func(v InfoTypeTransformationResponse) DateShiftConfigResponse { return v.DateShiftConfig }).(DateShiftConfigResponseOutput)
}

// InfoTypes to apply this transformation to. If this is not specified, the transformation applies to any info_type.
func (o InfoTypeTransformationResponseOutput) InfoTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InfoTypeTransformationResponse) []string { return v.InfoTypes }).(pulumi.StringArrayOutput)
}

// Config for text redaction.
func (o InfoTypeTransformationResponseOutput) RedactConfig() RedactConfigResponseOutput {
	return o.ApplyT(func(v InfoTypeTransformationResponse) RedactConfigResponse { return v.RedactConfig }).(RedactConfigResponseOutput)
}

// Config for replace with InfoType.
func (o InfoTypeTransformationResponseOutput) ReplaceWithInfoTypeConfig() ReplaceWithInfoTypeConfigResponseOutput {
	return o.ApplyT(func(v InfoTypeTransformationResponse) ReplaceWithInfoTypeConfigResponse {
		return v.ReplaceWithInfoTypeConfig
	}).(ReplaceWithInfoTypeConfigResponseOutput)
}

type InfoTypeTransformationResponseArrayOutput struct{ *pulumi.OutputState }

func (InfoTypeTransformationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InfoTypeTransformationResponse)(nil)).Elem()
}

func (o InfoTypeTransformationResponseArrayOutput) ToInfoTypeTransformationResponseArrayOutput() InfoTypeTransformationResponseArrayOutput {
	return o
}

func (o InfoTypeTransformationResponseArrayOutput) ToInfoTypeTransformationResponseArrayOutputWithContext(ctx context.Context) InfoTypeTransformationResponseArrayOutput {
	return o
}

func (o InfoTypeTransformationResponseArrayOutput) Index(i pulumi.IntInput) InfoTypeTransformationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InfoTypeTransformationResponse {
		return vs[0].([]InfoTypeTransformationResponse)[vs[1].(int)]
	}).(InfoTypeTransformationResponseOutput)
}

// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. The key must grant the Cloud IAM permission `cloudkms.cryptoKeyVersions.useToDecrypt` to the project's Cloud Healthcare Service Agent service account. For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key).
type KmsWrappedCryptoKey struct {
	// The resource name of the KMS CryptoKey to use for unwrapping. For example, `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.
	CryptoKey string `pulumi:"cryptoKey"`
	// The wrapped data crypto key.
	WrappedKey string `pulumi:"wrappedKey"`
}

// KmsWrappedCryptoKeyInput is an input type that accepts KmsWrappedCryptoKeyArgs and KmsWrappedCryptoKeyOutput values.
// You can construct a concrete instance of `KmsWrappedCryptoKeyInput` via:
//
//	KmsWrappedCryptoKeyArgs{...}
type KmsWrappedCryptoKeyInput interface {
	pulumi.Input

	ToKmsWrappedCryptoKeyOutput() KmsWrappedCryptoKeyOutput
	ToKmsWrappedCryptoKeyOutputWithContext(context.Context) KmsWrappedCryptoKeyOutput
}

// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. The key must grant the Cloud IAM permission `cloudkms.cryptoKeyVersions.useToDecrypt` to the project's Cloud Healthcare Service Agent service account. For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key).
type KmsWrappedCryptoKeyArgs struct {
	// The resource name of the KMS CryptoKey to use for unwrapping. For example, `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.
	CryptoKey pulumi.StringInput `pulumi:"cryptoKey"`
	// The wrapped data crypto key.
	WrappedKey pulumi.StringInput `pulumi:"wrappedKey"`
}

func (KmsWrappedCryptoKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KmsWrappedCryptoKey)(nil)).Elem()
}

func (i KmsWrappedCryptoKeyArgs) ToKmsWrappedCryptoKeyOutput() KmsWrappedCryptoKeyOutput {
	return i.ToKmsWrappedCryptoKeyOutputWithContext(context.Background())
}

func (i KmsWrappedCryptoKeyArgs) ToKmsWrappedCryptoKeyOutputWithContext(ctx context.Context) KmsWrappedCryptoKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsWrappedCryptoKeyOutput)
}

func (i KmsWrappedCryptoKeyArgs) ToKmsWrappedCryptoKeyPtrOutput() KmsWrappedCryptoKeyPtrOutput {
	return i.ToKmsWrappedCryptoKeyPtrOutputWithContext(context.Background())
}

func (i KmsWrappedCryptoKeyArgs) ToKmsWrappedCryptoKeyPtrOutputWithContext(ctx context.Context) KmsWrappedCryptoKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsWrappedCryptoKeyOutput).ToKmsWrappedCryptoKeyPtrOutputWithContext(ctx)
}

// KmsWrappedCryptoKeyPtrInput is an input type that accepts KmsWrappedCryptoKeyArgs, KmsWrappedCryptoKeyPtr and KmsWrappedCryptoKeyPtrOutput values.
// You can construct a concrete instance of `KmsWrappedCryptoKeyPtrInput` via:
//
//	        KmsWrappedCryptoKeyArgs{...}
//
//	or:
//
//	        nil
type KmsWrappedCryptoKeyPtrInput interface {
	pulumi.Input

	ToKmsWrappedCryptoKeyPtrOutput() KmsWrappedCryptoKeyPtrOutput
	ToKmsWrappedCryptoKeyPtrOutputWithContext(context.Context) KmsWrappedCryptoKeyPtrOutput
}

type kmsWrappedCryptoKeyPtrType KmsWrappedCryptoKeyArgs

func KmsWrappedCryptoKeyPtr(v *KmsWrappedCryptoKeyArgs) KmsWrappedCryptoKeyPtrInput {
	return (*kmsWrappedCryptoKeyPtrType)(v)
}

func (*kmsWrappedCryptoKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsWrappedCryptoKey)(nil)).Elem()
}

func (i *kmsWrappedCryptoKeyPtrType) ToKmsWrappedCryptoKeyPtrOutput() KmsWrappedCryptoKeyPtrOutput {
	return i.ToKmsWrappedCryptoKeyPtrOutputWithContext(context.Background())
}

func (i *kmsWrappedCryptoKeyPtrType) ToKmsWrappedCryptoKeyPtrOutputWithContext(ctx context.Context) KmsWrappedCryptoKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsWrappedCryptoKeyPtrOutput)
}

// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. The key must grant the Cloud IAM permission `cloudkms.cryptoKeyVersions.useToDecrypt` to the project's Cloud Healthcare Service Agent service account. For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key).
type KmsWrappedCryptoKeyOutput struct{ *pulumi.OutputState }

func (KmsWrappedCryptoKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KmsWrappedCryptoKey)(nil)).Elem()
}

func (o KmsWrappedCryptoKeyOutput) ToKmsWrappedCryptoKeyOutput() KmsWrappedCryptoKeyOutput {
	return o
}

func (o KmsWrappedCryptoKeyOutput) ToKmsWrappedCryptoKeyOutputWithContext(ctx context.Context) KmsWrappedCryptoKeyOutput {
	return o
}

func (o KmsWrappedCryptoKeyOutput) ToKmsWrappedCryptoKeyPtrOutput() KmsWrappedCryptoKeyPtrOutput {
	return o.ToKmsWrappedCryptoKeyPtrOutputWithContext(context.Background())
}

func (o KmsWrappedCryptoKeyOutput) ToKmsWrappedCryptoKeyPtrOutputWithContext(ctx context.Context) KmsWrappedCryptoKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KmsWrappedCryptoKey) *KmsWrappedCryptoKey {
		return &v
	}).(KmsWrappedCryptoKeyPtrOutput)
}

// The resource name of the KMS CryptoKey to use for unwrapping. For example, `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.
func (o KmsWrappedCryptoKeyOutput) CryptoKey() pulumi.StringOutput {
	return o.ApplyT(func(v KmsWrappedCryptoKey) string { return v.CryptoKey }).(pulumi.StringOutput)
}

// The wrapped data crypto key.
func (o KmsWrappedCryptoKeyOutput) WrappedKey() pulumi.StringOutput {
	return o.ApplyT(func(v KmsWrappedCryptoKey) string { return v.WrappedKey }).(pulumi.StringOutput)
}

type KmsWrappedCryptoKeyPtrOutput struct{ *pulumi.OutputState }

func (KmsWrappedCryptoKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsWrappedCryptoKey)(nil)).Elem()
}

func (o KmsWrappedCryptoKeyPtrOutput) ToKmsWrappedCryptoKeyPtrOutput() KmsWrappedCryptoKeyPtrOutput {
	return o
}

func (o KmsWrappedCryptoKeyPtrOutput) ToKmsWrappedCryptoKeyPtrOutputWithContext(ctx context.Context) KmsWrappedCryptoKeyPtrOutput {
	return o
}

func (o KmsWrappedCryptoKeyPtrOutput) Elem() KmsWrappedCryptoKeyOutput {
	return o.ApplyT(func(v *KmsWrappedCryptoKey) KmsWrappedCryptoKey {
		if v != nil {
			return *v
		}
		var ret KmsWrappedCryptoKey
		return ret
	}).(KmsWrappedCryptoKeyOutput)
}

// The resource name of the KMS CryptoKey to use for unwrapping. For example, `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.
func (o KmsWrappedCryptoKeyPtrOutput) CryptoKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KmsWrappedCryptoKey) *string {
		if v == nil {
			return nil
		}
		return &v.CryptoKey
	}).(pulumi.StringPtrOutput)
}

// The wrapped data crypto key.
func (o KmsWrappedCryptoKeyPtrOutput) WrappedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KmsWrappedCryptoKey) *string {
		if v == nil {
			return nil
		}
		return &v.WrappedKey
	}).(pulumi.StringPtrOutput)
}

// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. The key must grant the Cloud IAM permission `cloudkms.cryptoKeyVersions.useToDecrypt` to the project's Cloud Healthcare Service Agent service account. For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key).
type KmsWrappedCryptoKeyResponse struct {
	// The resource name of the KMS CryptoKey to use for unwrapping. For example, `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.
	CryptoKey string `pulumi:"cryptoKey"`
	// The wrapped data crypto key.
	WrappedKey string `pulumi:"wrappedKey"`
}

// Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. The key must grant the Cloud IAM permission `cloudkms.cryptoKeyVersions.useToDecrypt` to the project's Cloud Healthcare Service Agent service account. For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key).
type KmsWrappedCryptoKeyResponseOutput struct{ *pulumi.OutputState }

func (KmsWrappedCryptoKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KmsWrappedCryptoKeyResponse)(nil)).Elem()
}

func (o KmsWrappedCryptoKeyResponseOutput) ToKmsWrappedCryptoKeyResponseOutput() KmsWrappedCryptoKeyResponseOutput {
	return o
}

func (o KmsWrappedCryptoKeyResponseOutput) ToKmsWrappedCryptoKeyResponseOutputWithContext(ctx context.Context) KmsWrappedCryptoKeyResponseOutput {
	return o
}

// The resource name of the KMS CryptoKey to use for unwrapping. For example, `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.
func (o KmsWrappedCryptoKeyResponseOutput) CryptoKey() pulumi.StringOutput {
	return o.ApplyT(func(v KmsWrappedCryptoKeyResponse) string { return v.CryptoKey }).(pulumi.StringOutput)
}

// The wrapped data crypto key.
func (o KmsWrappedCryptoKeyResponseOutput) WrappedKey() pulumi.StringOutput {
	return o.ApplyT(func(v KmsWrappedCryptoKeyResponse) string { return v.WrappedKey }).(pulumi.StringOutput)
}

// Specifies where to send notifications upon changes to a data store.
type NotificationConfig struct {
	// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.
	PubsubTopic *string `pulumi:"pubsubTopic"`
	// Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports.
	SendForBulkImport *bool `pulumi:"sendForBulkImport"`
}

// NotificationConfigInput is an input type that accepts NotificationConfigArgs and NotificationConfigOutput values.
// You can construct a concrete instance of `NotificationConfigInput` via:
//
//	NotificationConfigArgs{...}
type NotificationConfigInput interface {
	pulumi.Input

	ToNotificationConfigOutput() NotificationConfigOutput
	ToNotificationConfigOutputWithContext(context.Context) NotificationConfigOutput
}

// Specifies where to send notifications upon changes to a data store.
type NotificationConfigArgs struct {
	// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.
	PubsubTopic pulumi.StringPtrInput `pulumi:"pubsubTopic"`
	// Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports.
	SendForBulkImport pulumi.BoolPtrInput `pulumi:"sendForBulkImport"`
}

func (NotificationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationConfig)(nil)).Elem()
}

func (i NotificationConfigArgs) ToNotificationConfigOutput() NotificationConfigOutput {
	return i.ToNotificationConfigOutputWithContext(context.Background())
}

func (i NotificationConfigArgs) ToNotificationConfigOutputWithContext(ctx context.Context) NotificationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigOutput)
}

func (i NotificationConfigArgs) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return i.ToNotificationConfigPtrOutputWithContext(context.Background())
}

func (i NotificationConfigArgs) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigOutput).ToNotificationConfigPtrOutputWithContext(ctx)
}

// NotificationConfigPtrInput is an input type that accepts NotificationConfigArgs, NotificationConfigPtr and NotificationConfigPtrOutput values.
// You can construct a concrete instance of `NotificationConfigPtrInput` via:
//
//	        NotificationConfigArgs{...}
//
//	or:
//
//	        nil
type NotificationConfigPtrInput interface {
	pulumi.Input

	ToNotificationConfigPtrOutput() NotificationConfigPtrOutput
	ToNotificationConfigPtrOutputWithContext(context.Context) NotificationConfigPtrOutput
}

type notificationConfigPtrType NotificationConfigArgs

func NotificationConfigPtr(v *NotificationConfigArgs) NotificationConfigPtrInput {
	return (*notificationConfigPtrType)(v)
}

func (*notificationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationConfig)(nil)).Elem()
}

func (i *notificationConfigPtrType) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return i.ToNotificationConfigPtrOutputWithContext(context.Background())
}

func (i *notificationConfigPtrType) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationConfigPtrOutput)
}

// Specifies where to send notifications upon changes to a data store.
type NotificationConfigOutput struct{ *pulumi.OutputState }

func (NotificationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationConfig)(nil)).Elem()
}

func (o NotificationConfigOutput) ToNotificationConfigOutput() NotificationConfigOutput {
	return o
}

func (o NotificationConfigOutput) ToNotificationConfigOutputWithContext(ctx context.Context) NotificationConfigOutput {
	return o
}

func (o NotificationConfigOutput) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return o.ToNotificationConfigPtrOutputWithContext(context.Background())
}

func (o NotificationConfigOutput) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotificationConfig) *NotificationConfig {
		return &v
	}).(NotificationConfigPtrOutput)
}

// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.
func (o NotificationConfigOutput) PubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationConfig) *string { return v.PubsubTopic }).(pulumi.StringPtrOutput)
}

// Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports.
func (o NotificationConfigOutput) SendForBulkImport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationConfig) *bool { return v.SendForBulkImport }).(pulumi.BoolPtrOutput)
}

type NotificationConfigPtrOutput struct{ *pulumi.OutputState }

func (NotificationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationConfig)(nil)).Elem()
}

func (o NotificationConfigPtrOutput) ToNotificationConfigPtrOutput() NotificationConfigPtrOutput {
	return o
}

func (o NotificationConfigPtrOutput) ToNotificationConfigPtrOutputWithContext(ctx context.Context) NotificationConfigPtrOutput {
	return o
}

func (o NotificationConfigPtrOutput) Elem() NotificationConfigOutput {
	return o.ApplyT(func(v *NotificationConfig) NotificationConfig {
		if v != nil {
			return *v
		}
		var ret NotificationConfig
		return ret
	}).(NotificationConfigOutput)
}

// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.
func (o NotificationConfigPtrOutput) PubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationConfig) *string {
		if v == nil {
			return nil
		}
		return v.PubsubTopic
	}).(pulumi.StringPtrOutput)
}

// Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports.
func (o NotificationConfigPtrOutput) SendForBulkImport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NotificationConfig) *bool {
		if v == nil {
			return nil
		}
		return v.SendForBulkImport
	}).(pulumi.BoolPtrOutput)
}

// Specifies where to send notifications upon changes to a data store.
type NotificationConfigResponse struct {
	// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.
	PubsubTopic string `pulumi:"pubsubTopic"`
	// Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports.
	SendForBulkImport bool `pulumi:"sendForBulkImport"`
}

// Specifies where to send notifications upon changes to a data store.
type NotificationConfigResponseOutput struct{ *pulumi.OutputState }

func (NotificationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationConfigResponse)(nil)).Elem()
}

func (o NotificationConfigResponseOutput) ToNotificationConfigResponseOutput() NotificationConfigResponseOutput {
	return o
}

func (o NotificationConfigResponseOutput) ToNotificationConfigResponseOutputWithContext(ctx context.Context) NotificationConfigResponseOutput {
	return o
}

// The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.
func (o NotificationConfigResponseOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationConfigResponse) string { return v.PubsubTopic }).(pulumi.StringOutput)
}

// Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports.
func (o NotificationConfigResponseOutput) SendForBulkImport() pulumi.BoolOutput {
	return o.ApplyT(func(v NotificationConfigResponse) bool { return v.SendForBulkImport }).(pulumi.BoolOutput)
}

// The content of a HL7v2 message in a structured format.
type ParsedDataResponse struct {
	Segments []SegmentResponse `pulumi:"segments"`
}

// The content of a HL7v2 message in a structured format.
type ParsedDataResponseOutput struct{ *pulumi.OutputState }

func (ParsedDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParsedDataResponse)(nil)).Elem()
}

func (o ParsedDataResponseOutput) ToParsedDataResponseOutput() ParsedDataResponseOutput {
	return o
}

func (o ParsedDataResponseOutput) ToParsedDataResponseOutputWithContext(ctx context.Context) ParsedDataResponseOutput {
	return o
}

func (o ParsedDataResponseOutput) Segments() SegmentResponseArrayOutput {
	return o.ApplyT(func(v ParsedDataResponse) []SegmentResponse { return v.Segments }).(SegmentResponseArrayOutput)
}

// The configuration for the parser. It determines how the server parses the messages.
type ParserConfig struct {
	// Determines whether messages with no header are allowed.
	AllowNullHeader *bool `pulumi:"allowNullHeader"`
	// Schemas used to parse messages in this store, if schematized parsing is desired.
	Schema *SchemaPackage `pulumi:"schema"`
	// Byte(s) to use as the segment terminator. If this is unset, '\r' is used as segment terminator, matching the HL7 version 2 specification.
	SegmentTerminator *string `pulumi:"segmentTerminator"`
	// Immutable. Determines the version of both the default parser to be used when `schema` is not given, as well as the schematized parser used when `schema` is specified. This field is immutable after HL7v2 store creation.
	Version *ParserConfigVersion `pulumi:"version"`
}

// ParserConfigInput is an input type that accepts ParserConfigArgs and ParserConfigOutput values.
// You can construct a concrete instance of `ParserConfigInput` via:
//
//	ParserConfigArgs{...}
type ParserConfigInput interface {
	pulumi.Input

	ToParserConfigOutput() ParserConfigOutput
	ToParserConfigOutputWithContext(context.Context) ParserConfigOutput
}

// The configuration for the parser. It determines how the server parses the messages.
type ParserConfigArgs struct {
	// Determines whether messages with no header are allowed.
	AllowNullHeader pulumi.BoolPtrInput `pulumi:"allowNullHeader"`
	// Schemas used to parse messages in this store, if schematized parsing is desired.
	Schema SchemaPackagePtrInput `pulumi:"schema"`
	// Byte(s) to use as the segment terminator. If this is unset, '\r' is used as segment terminator, matching the HL7 version 2 specification.
	SegmentTerminator pulumi.StringPtrInput `pulumi:"segmentTerminator"`
	// Immutable. Determines the version of both the default parser to be used when `schema` is not given, as well as the schematized parser used when `schema` is specified. This field is immutable after HL7v2 store creation.
	Version ParserConfigVersionPtrInput `pulumi:"version"`
}

func (ParserConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParserConfig)(nil)).Elem()
}

func (i ParserConfigArgs) ToParserConfigOutput() ParserConfigOutput {
	return i.ToParserConfigOutputWithContext(context.Background())
}

func (i ParserConfigArgs) ToParserConfigOutputWithContext(ctx context.Context) ParserConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParserConfigOutput)
}

func (i ParserConfigArgs) ToParserConfigPtrOutput() ParserConfigPtrOutput {
	return i.ToParserConfigPtrOutputWithContext(context.Background())
}

func (i ParserConfigArgs) ToParserConfigPtrOutputWithContext(ctx context.Context) ParserConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParserConfigOutput).ToParserConfigPtrOutputWithContext(ctx)
}

// ParserConfigPtrInput is an input type that accepts ParserConfigArgs, ParserConfigPtr and ParserConfigPtrOutput values.
// You can construct a concrete instance of `ParserConfigPtrInput` via:
//
//	        ParserConfigArgs{...}
//
//	or:
//
//	        nil
type ParserConfigPtrInput interface {
	pulumi.Input

	ToParserConfigPtrOutput() ParserConfigPtrOutput
	ToParserConfigPtrOutputWithContext(context.Context) ParserConfigPtrOutput
}

type parserConfigPtrType ParserConfigArgs

func ParserConfigPtr(v *ParserConfigArgs) ParserConfigPtrInput {
	return (*parserConfigPtrType)(v)
}

func (*parserConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParserConfig)(nil)).Elem()
}

func (i *parserConfigPtrType) ToParserConfigPtrOutput() ParserConfigPtrOutput {
	return i.ToParserConfigPtrOutputWithContext(context.Background())
}

func (i *parserConfigPtrType) ToParserConfigPtrOutputWithContext(ctx context.Context) ParserConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParserConfigPtrOutput)
}

// The configuration for the parser. It determines how the server parses the messages.
type ParserConfigOutput struct{ *pulumi.OutputState }

func (ParserConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParserConfig)(nil)).Elem()
}

func (o ParserConfigOutput) ToParserConfigOutput() ParserConfigOutput {
	return o
}

func (o ParserConfigOutput) ToParserConfigOutputWithContext(ctx context.Context) ParserConfigOutput {
	return o
}

func (o ParserConfigOutput) ToParserConfigPtrOutput() ParserConfigPtrOutput {
	return o.ToParserConfigPtrOutputWithContext(context.Background())
}

func (o ParserConfigOutput) ToParserConfigPtrOutputWithContext(ctx context.Context) ParserConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParserConfig) *ParserConfig {
		return &v
	}).(ParserConfigPtrOutput)
}

// Determines whether messages with no header are allowed.
func (o ParserConfigOutput) AllowNullHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ParserConfig) *bool { return v.AllowNullHeader }).(pulumi.BoolPtrOutput)
}

// Schemas used to parse messages in this store, if schematized parsing is desired.
func (o ParserConfigOutput) Schema() SchemaPackagePtrOutput {
	return o.ApplyT(func(v ParserConfig) *SchemaPackage { return v.Schema }).(SchemaPackagePtrOutput)
}

// Byte(s) to use as the segment terminator. If this is unset, '\r' is used as segment terminator, matching the HL7 version 2 specification.
func (o ParserConfigOutput) SegmentTerminator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParserConfig) *string { return v.SegmentTerminator }).(pulumi.StringPtrOutput)
}

// Immutable. Determines the version of both the default parser to be used when `schema` is not given, as well as the schematized parser used when `schema` is specified. This field is immutable after HL7v2 store creation.
func (o ParserConfigOutput) Version() ParserConfigVersionPtrOutput {
	return o.ApplyT(func(v ParserConfig) *ParserConfigVersion { return v.Version }).(ParserConfigVersionPtrOutput)
}

type ParserConfigPtrOutput struct{ *pulumi.OutputState }

func (ParserConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParserConfig)(nil)).Elem()
}

func (o ParserConfigPtrOutput) ToParserConfigPtrOutput() ParserConfigPtrOutput {
	return o
}

func (o ParserConfigPtrOutput) ToParserConfigPtrOutputWithContext(ctx context.Context) ParserConfigPtrOutput {
	return o
}

func (o ParserConfigPtrOutput) Elem() ParserConfigOutput {
	return o.ApplyT(func(v *ParserConfig) ParserConfig {
		if v != nil {
			return *v
		}
		var ret ParserConfig
		return ret
	}).(ParserConfigOutput)
}

// Determines whether messages with no header are allowed.
func (o ParserConfigPtrOutput) AllowNullHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ParserConfig) *bool {
		if v == nil {
			return nil
		}
		return v.AllowNullHeader
	}).(pulumi.BoolPtrOutput)
}

// Schemas used to parse messages in this store, if schematized parsing is desired.
func (o ParserConfigPtrOutput) Schema() SchemaPackagePtrOutput {
	return o.ApplyT(func(v *ParserConfig) *SchemaPackage {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(SchemaPackagePtrOutput)
}

// Byte(s) to use as the segment terminator. If this is unset, '\r' is used as segment terminator, matching the HL7 version 2 specification.
func (o ParserConfigPtrOutput) SegmentTerminator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParserConfig) *string {
		if v == nil {
			return nil
		}
		return v.SegmentTerminator
	}).(pulumi.StringPtrOutput)
}

// Immutable. Determines the version of both the default parser to be used when `schema` is not given, as well as the schematized parser used when `schema` is specified. This field is immutable after HL7v2 store creation.
func (o ParserConfigPtrOutput) Version() ParserConfigVersionPtrOutput {
	return o.ApplyT(func(v *ParserConfig) *ParserConfigVersion {
		if v == nil {
			return nil
		}
		return v.Version
	}).(ParserConfigVersionPtrOutput)
}

// The configuration for the parser. It determines how the server parses the messages.
type ParserConfigResponse struct {
	// Determines whether messages with no header are allowed.
	AllowNullHeader bool `pulumi:"allowNullHeader"`
	// Schemas used to parse messages in this store, if schematized parsing is desired.
	Schema SchemaPackageResponse `pulumi:"schema"`
	// Byte(s) to use as the segment terminator. If this is unset, '\r' is used as segment terminator, matching the HL7 version 2 specification.
	SegmentTerminator string `pulumi:"segmentTerminator"`
	// Immutable. Determines the version of both the default parser to be used when `schema` is not given, as well as the schematized parser used when `schema` is specified. This field is immutable after HL7v2 store creation.
	Version string `pulumi:"version"`
}

// The configuration for the parser. It determines how the server parses the messages.
type ParserConfigResponseOutput struct{ *pulumi.OutputState }

func (ParserConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParserConfigResponse)(nil)).Elem()
}

func (o ParserConfigResponseOutput) ToParserConfigResponseOutput() ParserConfigResponseOutput {
	return o
}

func (o ParserConfigResponseOutput) ToParserConfigResponseOutputWithContext(ctx context.Context) ParserConfigResponseOutput {
	return o
}

// Determines whether messages with no header are allowed.
func (o ParserConfigResponseOutput) AllowNullHeader() pulumi.BoolOutput {
	return o.ApplyT(func(v ParserConfigResponse) bool { return v.AllowNullHeader }).(pulumi.BoolOutput)
}

// Schemas used to parse messages in this store, if schematized parsing is desired.
func (o ParserConfigResponseOutput) Schema() SchemaPackageResponseOutput {
	return o.ApplyT(func(v ParserConfigResponse) SchemaPackageResponse { return v.Schema }).(SchemaPackageResponseOutput)
}

// Byte(s) to use as the segment terminator. If this is unset, '\r' is used as segment terminator, matching the HL7 version 2 specification.
func (o ParserConfigResponseOutput) SegmentTerminator() pulumi.StringOutput {
	return o.ApplyT(func(v ParserConfigResponse) string { return v.SegmentTerminator }).(pulumi.StringOutput)
}

// Immutable. Determines the version of both the default parser to be used when `schema` is not given, as well as the schematized parser used when `schema` is specified. This field is immutable after HL7v2 store creation.
func (o ParserConfigResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ParserConfigResponse) string { return v.Version }).(pulumi.StringOutput)
}

// A patient identifier and associated type.
type PatientId struct {
	// ID type. For example, MRN or NHS.
	Type *string `pulumi:"type"`
	// The patient's unique identifier.
	Value *string `pulumi:"value"`
}

// PatientIdInput is an input type that accepts PatientIdArgs and PatientIdOutput values.
// You can construct a concrete instance of `PatientIdInput` via:
//
//	PatientIdArgs{...}
type PatientIdInput interface {
	pulumi.Input

	ToPatientIdOutput() PatientIdOutput
	ToPatientIdOutputWithContext(context.Context) PatientIdOutput
}

// A patient identifier and associated type.
type PatientIdArgs struct {
	// ID type. For example, MRN or NHS.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The patient's unique identifier.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PatientIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PatientId)(nil)).Elem()
}

func (i PatientIdArgs) ToPatientIdOutput() PatientIdOutput {
	return i.ToPatientIdOutputWithContext(context.Background())
}

func (i PatientIdArgs) ToPatientIdOutputWithContext(ctx context.Context) PatientIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatientIdOutput)
}

// PatientIdArrayInput is an input type that accepts PatientIdArray and PatientIdArrayOutput values.
// You can construct a concrete instance of `PatientIdArrayInput` via:
//
//	PatientIdArray{ PatientIdArgs{...} }
type PatientIdArrayInput interface {
	pulumi.Input

	ToPatientIdArrayOutput() PatientIdArrayOutput
	ToPatientIdArrayOutputWithContext(context.Context) PatientIdArrayOutput
}

type PatientIdArray []PatientIdInput

func (PatientIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PatientId)(nil)).Elem()
}

func (i PatientIdArray) ToPatientIdArrayOutput() PatientIdArrayOutput {
	return i.ToPatientIdArrayOutputWithContext(context.Background())
}

func (i PatientIdArray) ToPatientIdArrayOutputWithContext(ctx context.Context) PatientIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PatientIdArrayOutput)
}

// A patient identifier and associated type.
type PatientIdOutput struct{ *pulumi.OutputState }

func (PatientIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatientId)(nil)).Elem()
}

func (o PatientIdOutput) ToPatientIdOutput() PatientIdOutput {
	return o
}

func (o PatientIdOutput) ToPatientIdOutputWithContext(ctx context.Context) PatientIdOutput {
	return o
}

// ID type. For example, MRN or NHS.
func (o PatientIdOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PatientId) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The patient's unique identifier.
func (o PatientIdOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PatientId) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PatientIdArrayOutput struct{ *pulumi.OutputState }

func (PatientIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PatientId)(nil)).Elem()
}

func (o PatientIdArrayOutput) ToPatientIdArrayOutput() PatientIdArrayOutput {
	return o
}

func (o PatientIdArrayOutput) ToPatientIdArrayOutputWithContext(ctx context.Context) PatientIdArrayOutput {
	return o
}

func (o PatientIdArrayOutput) Index(i pulumi.IntInput) PatientIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PatientId {
		return vs[0].([]PatientId)[vs[1].(int)]
	}).(PatientIdOutput)
}

// A patient identifier and associated type.
type PatientIdResponse struct {
	// ID type. For example, MRN or NHS.
	Type string `pulumi:"type"`
	// The patient's unique identifier.
	Value string `pulumi:"value"`
}

// A patient identifier and associated type.
type PatientIdResponseOutput struct{ *pulumi.OutputState }

func (PatientIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PatientIdResponse)(nil)).Elem()
}

func (o PatientIdResponseOutput) ToPatientIdResponseOutput() PatientIdResponseOutput {
	return o
}

func (o PatientIdResponseOutput) ToPatientIdResponseOutputWithContext(ctx context.Context) PatientIdResponseOutput {
	return o
}

// ID type. For example, MRN or NHS.
func (o PatientIdResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PatientIdResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The patient's unique identifier.
func (o PatientIdResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PatientIdResponse) string { return v.Value }).(pulumi.StringOutput)
}

type PatientIdResponseArrayOutput struct{ *pulumi.OutputState }

func (PatientIdResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PatientIdResponse)(nil)).Elem()
}

func (o PatientIdResponseArrayOutput) ToPatientIdResponseArrayOutput() PatientIdResponseArrayOutput {
	return o
}

func (o PatientIdResponseArrayOutput) ToPatientIdResponseArrayOutputWithContext(ctx context.Context) PatientIdResponseArrayOutput {
	return o
}

func (o PatientIdResponseArrayOutput) Index(i pulumi.IntInput) PatientIdResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PatientIdResponse {
		return vs[0].([]PatientIdResponse)[vs[1].(int)]
	}).(PatientIdResponseOutput)
}

// Define how to redact sensitive values. Default behaviour is erase. For example, "My name is Jane." becomes "My name is ."
type RedactConfig struct {
}

// RedactConfigInput is an input type that accepts RedactConfigArgs and RedactConfigOutput values.
// You can construct a concrete instance of `RedactConfigInput` via:
//
//	RedactConfigArgs{...}
type RedactConfigInput interface {
	pulumi.Input

	ToRedactConfigOutput() RedactConfigOutput
	ToRedactConfigOutputWithContext(context.Context) RedactConfigOutput
}

// Define how to redact sensitive values. Default behaviour is erase. For example, "My name is Jane." becomes "My name is ."
type RedactConfigArgs struct {
}

func (RedactConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RedactConfig)(nil)).Elem()
}

func (i RedactConfigArgs) ToRedactConfigOutput() RedactConfigOutput {
	return i.ToRedactConfigOutputWithContext(context.Background())
}

func (i RedactConfigArgs) ToRedactConfigOutputWithContext(ctx context.Context) RedactConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedactConfigOutput)
}

func (i RedactConfigArgs) ToRedactConfigPtrOutput() RedactConfigPtrOutput {
	return i.ToRedactConfigPtrOutputWithContext(context.Background())
}

func (i RedactConfigArgs) ToRedactConfigPtrOutputWithContext(ctx context.Context) RedactConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedactConfigOutput).ToRedactConfigPtrOutputWithContext(ctx)
}

// RedactConfigPtrInput is an input type that accepts RedactConfigArgs, RedactConfigPtr and RedactConfigPtrOutput values.
// You can construct a concrete instance of `RedactConfigPtrInput` via:
//
//	        RedactConfigArgs{...}
//
//	or:
//
//	        nil
type RedactConfigPtrInput interface {
	pulumi.Input

	ToRedactConfigPtrOutput() RedactConfigPtrOutput
	ToRedactConfigPtrOutputWithContext(context.Context) RedactConfigPtrOutput
}

type redactConfigPtrType RedactConfigArgs

func RedactConfigPtr(v *RedactConfigArgs) RedactConfigPtrInput {
	return (*redactConfigPtrType)(v)
}

func (*redactConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RedactConfig)(nil)).Elem()
}

func (i *redactConfigPtrType) ToRedactConfigPtrOutput() RedactConfigPtrOutput {
	return i.ToRedactConfigPtrOutputWithContext(context.Background())
}

func (i *redactConfigPtrType) ToRedactConfigPtrOutputWithContext(ctx context.Context) RedactConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedactConfigPtrOutput)
}

// Define how to redact sensitive values. Default behaviour is erase. For example, "My name is Jane." becomes "My name is ."
type RedactConfigOutput struct{ *pulumi.OutputState }

func (RedactConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedactConfig)(nil)).Elem()
}

func (o RedactConfigOutput) ToRedactConfigOutput() RedactConfigOutput {
	return o
}

func (o RedactConfigOutput) ToRedactConfigOutputWithContext(ctx context.Context) RedactConfigOutput {
	return o
}

func (o RedactConfigOutput) ToRedactConfigPtrOutput() RedactConfigPtrOutput {
	return o.ToRedactConfigPtrOutputWithContext(context.Background())
}

func (o RedactConfigOutput) ToRedactConfigPtrOutputWithContext(ctx context.Context) RedactConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RedactConfig) *RedactConfig {
		return &v
	}).(RedactConfigPtrOutput)
}

type RedactConfigPtrOutput struct{ *pulumi.OutputState }

func (RedactConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedactConfig)(nil)).Elem()
}

func (o RedactConfigPtrOutput) ToRedactConfigPtrOutput() RedactConfigPtrOutput {
	return o
}

func (o RedactConfigPtrOutput) ToRedactConfigPtrOutputWithContext(ctx context.Context) RedactConfigPtrOutput {
	return o
}

func (o RedactConfigPtrOutput) Elem() RedactConfigOutput {
	return o.ApplyT(func(v *RedactConfig) RedactConfig {
		if v != nil {
			return *v
		}
		var ret RedactConfig
		return ret
	}).(RedactConfigOutput)
}

// Define how to redact sensitive values. Default behaviour is erase. For example, "My name is Jane." becomes "My name is ."
type RedactConfigResponse struct {
}

// Define how to redact sensitive values. Default behaviour is erase. For example, "My name is Jane." becomes "My name is ."
type RedactConfigResponseOutput struct{ *pulumi.OutputState }

func (RedactConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedactConfigResponse)(nil)).Elem()
}

func (o RedactConfigResponseOutput) ToRedactConfigResponseOutput() RedactConfigResponseOutput {
	return o
}

func (o RedactConfigResponseOutput) ToRedactConfigResponseOutputWithContext(ctx context.Context) RedactConfigResponseOutput {
	return o
}

// When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, "My name is Jane" becomes "My name is [PERSON_NAME]." The TRANSFORM action is equivalent to redacting.
type ReplaceWithInfoTypeConfig struct {
}

// ReplaceWithInfoTypeConfigInput is an input type that accepts ReplaceWithInfoTypeConfigArgs and ReplaceWithInfoTypeConfigOutput values.
// You can construct a concrete instance of `ReplaceWithInfoTypeConfigInput` via:
//
//	ReplaceWithInfoTypeConfigArgs{...}
type ReplaceWithInfoTypeConfigInput interface {
	pulumi.Input

	ToReplaceWithInfoTypeConfigOutput() ReplaceWithInfoTypeConfigOutput
	ToReplaceWithInfoTypeConfigOutputWithContext(context.Context) ReplaceWithInfoTypeConfigOutput
}

// When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, "My name is Jane" becomes "My name is [PERSON_NAME]." The TRANSFORM action is equivalent to redacting.
type ReplaceWithInfoTypeConfigArgs struct {
}

func (ReplaceWithInfoTypeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplaceWithInfoTypeConfig)(nil)).Elem()
}

func (i ReplaceWithInfoTypeConfigArgs) ToReplaceWithInfoTypeConfigOutput() ReplaceWithInfoTypeConfigOutput {
	return i.ToReplaceWithInfoTypeConfigOutputWithContext(context.Background())
}

func (i ReplaceWithInfoTypeConfigArgs) ToReplaceWithInfoTypeConfigOutputWithContext(ctx context.Context) ReplaceWithInfoTypeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplaceWithInfoTypeConfigOutput)
}

func (i ReplaceWithInfoTypeConfigArgs) ToReplaceWithInfoTypeConfigPtrOutput() ReplaceWithInfoTypeConfigPtrOutput {
	return i.ToReplaceWithInfoTypeConfigPtrOutputWithContext(context.Background())
}

func (i ReplaceWithInfoTypeConfigArgs) ToReplaceWithInfoTypeConfigPtrOutputWithContext(ctx context.Context) ReplaceWithInfoTypeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplaceWithInfoTypeConfigOutput).ToReplaceWithInfoTypeConfigPtrOutputWithContext(ctx)
}

// ReplaceWithInfoTypeConfigPtrInput is an input type that accepts ReplaceWithInfoTypeConfigArgs, ReplaceWithInfoTypeConfigPtr and ReplaceWithInfoTypeConfigPtrOutput values.
// You can construct a concrete instance of `ReplaceWithInfoTypeConfigPtrInput` via:
//
//	        ReplaceWithInfoTypeConfigArgs{...}
//
//	or:
//
//	        nil
type ReplaceWithInfoTypeConfigPtrInput interface {
	pulumi.Input

	ToReplaceWithInfoTypeConfigPtrOutput() ReplaceWithInfoTypeConfigPtrOutput
	ToReplaceWithInfoTypeConfigPtrOutputWithContext(context.Context) ReplaceWithInfoTypeConfigPtrOutput
}

type replaceWithInfoTypeConfigPtrType ReplaceWithInfoTypeConfigArgs

func ReplaceWithInfoTypeConfigPtr(v *ReplaceWithInfoTypeConfigArgs) ReplaceWithInfoTypeConfigPtrInput {
	return (*replaceWithInfoTypeConfigPtrType)(v)
}

func (*replaceWithInfoTypeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplaceWithInfoTypeConfig)(nil)).Elem()
}

func (i *replaceWithInfoTypeConfigPtrType) ToReplaceWithInfoTypeConfigPtrOutput() ReplaceWithInfoTypeConfigPtrOutput {
	return i.ToReplaceWithInfoTypeConfigPtrOutputWithContext(context.Background())
}

func (i *replaceWithInfoTypeConfigPtrType) ToReplaceWithInfoTypeConfigPtrOutputWithContext(ctx context.Context) ReplaceWithInfoTypeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplaceWithInfoTypeConfigPtrOutput)
}

// When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, "My name is Jane" becomes "My name is [PERSON_NAME]." The TRANSFORM action is equivalent to redacting.
type ReplaceWithInfoTypeConfigOutput struct{ *pulumi.OutputState }

func (ReplaceWithInfoTypeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplaceWithInfoTypeConfig)(nil)).Elem()
}

func (o ReplaceWithInfoTypeConfigOutput) ToReplaceWithInfoTypeConfigOutput() ReplaceWithInfoTypeConfigOutput {
	return o
}

func (o ReplaceWithInfoTypeConfigOutput) ToReplaceWithInfoTypeConfigOutputWithContext(ctx context.Context) ReplaceWithInfoTypeConfigOutput {
	return o
}

func (o ReplaceWithInfoTypeConfigOutput) ToReplaceWithInfoTypeConfigPtrOutput() ReplaceWithInfoTypeConfigPtrOutput {
	return o.ToReplaceWithInfoTypeConfigPtrOutputWithContext(context.Background())
}

func (o ReplaceWithInfoTypeConfigOutput) ToReplaceWithInfoTypeConfigPtrOutputWithContext(ctx context.Context) ReplaceWithInfoTypeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReplaceWithInfoTypeConfig) *ReplaceWithInfoTypeConfig {
		return &v
	}).(ReplaceWithInfoTypeConfigPtrOutput)
}

type ReplaceWithInfoTypeConfigPtrOutput struct{ *pulumi.OutputState }

func (ReplaceWithInfoTypeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplaceWithInfoTypeConfig)(nil)).Elem()
}

func (o ReplaceWithInfoTypeConfigPtrOutput) ToReplaceWithInfoTypeConfigPtrOutput() ReplaceWithInfoTypeConfigPtrOutput {
	return o
}

func (o ReplaceWithInfoTypeConfigPtrOutput) ToReplaceWithInfoTypeConfigPtrOutputWithContext(ctx context.Context) ReplaceWithInfoTypeConfigPtrOutput {
	return o
}

func (o ReplaceWithInfoTypeConfigPtrOutput) Elem() ReplaceWithInfoTypeConfigOutput {
	return o.ApplyT(func(v *ReplaceWithInfoTypeConfig) ReplaceWithInfoTypeConfig {
		if v != nil {
			return *v
		}
		var ret ReplaceWithInfoTypeConfig
		return ret
	}).(ReplaceWithInfoTypeConfigOutput)
}

// When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, "My name is Jane" becomes "My name is [PERSON_NAME]." The TRANSFORM action is equivalent to redacting.
type ReplaceWithInfoTypeConfigResponse struct {
}

// When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, "My name is Jane" becomes "My name is [PERSON_NAME]." The TRANSFORM action is equivalent to redacting.
type ReplaceWithInfoTypeConfigResponseOutput struct{ *pulumi.OutputState }

func (ReplaceWithInfoTypeConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplaceWithInfoTypeConfigResponse)(nil)).Elem()
}

func (o ReplaceWithInfoTypeConfigResponseOutput) ToReplaceWithInfoTypeConfigResponseOutput() ReplaceWithInfoTypeConfigResponseOutput {
	return o
}

func (o ReplaceWithInfoTypeConfigResponseOutput) ToReplaceWithInfoTypeConfigResponseOutputWithContext(ctx context.Context) ReplaceWithInfoTypeConfigResponseOutput {
	return o
}

// Configuration for the FHIR BigQuery schema. Determines how the server generates the schema.
type SchemaConfig struct {
	// The configuration for exported BigQuery tables to be partitioned by FHIR resource's last updated time column.
	LastUpdatedPartitionConfig *TimePartitioning `pulumi:"lastUpdatedPartitionConfig"`
	// The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.
	RecursiveStructureDepth *string `pulumi:"recursiveStructureDepth"`
	// Specifies the output schema type. Schema type is required.
	SchemaType *SchemaConfigSchemaType `pulumi:"schemaType"`
}

// SchemaConfigInput is an input type that accepts SchemaConfigArgs and SchemaConfigOutput values.
// You can construct a concrete instance of `SchemaConfigInput` via:
//
//	SchemaConfigArgs{...}
type SchemaConfigInput interface {
	pulumi.Input

	ToSchemaConfigOutput() SchemaConfigOutput
	ToSchemaConfigOutputWithContext(context.Context) SchemaConfigOutput
}

// Configuration for the FHIR BigQuery schema. Determines how the server generates the schema.
type SchemaConfigArgs struct {
	// The configuration for exported BigQuery tables to be partitioned by FHIR resource's last updated time column.
	LastUpdatedPartitionConfig TimePartitioningPtrInput `pulumi:"lastUpdatedPartitionConfig"`
	// The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.
	RecursiveStructureDepth pulumi.StringPtrInput `pulumi:"recursiveStructureDepth"`
	// Specifies the output schema type. Schema type is required.
	SchemaType SchemaConfigSchemaTypePtrInput `pulumi:"schemaType"`
}

func (SchemaConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaConfig)(nil)).Elem()
}

func (i SchemaConfigArgs) ToSchemaConfigOutput() SchemaConfigOutput {
	return i.ToSchemaConfigOutputWithContext(context.Background())
}

func (i SchemaConfigArgs) ToSchemaConfigOutputWithContext(ctx context.Context) SchemaConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaConfigOutput)
}

func (i SchemaConfigArgs) ToSchemaConfigPtrOutput() SchemaConfigPtrOutput {
	return i.ToSchemaConfigPtrOutputWithContext(context.Background())
}

func (i SchemaConfigArgs) ToSchemaConfigPtrOutputWithContext(ctx context.Context) SchemaConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaConfigOutput).ToSchemaConfigPtrOutputWithContext(ctx)
}

// SchemaConfigPtrInput is an input type that accepts SchemaConfigArgs, SchemaConfigPtr and SchemaConfigPtrOutput values.
// You can construct a concrete instance of `SchemaConfigPtrInput` via:
//
//	        SchemaConfigArgs{...}
//
//	or:
//
//	        nil
type SchemaConfigPtrInput interface {
	pulumi.Input

	ToSchemaConfigPtrOutput() SchemaConfigPtrOutput
	ToSchemaConfigPtrOutputWithContext(context.Context) SchemaConfigPtrOutput
}

type schemaConfigPtrType SchemaConfigArgs

func SchemaConfigPtr(v *SchemaConfigArgs) SchemaConfigPtrInput {
	return (*schemaConfigPtrType)(v)
}

func (*schemaConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaConfig)(nil)).Elem()
}

func (i *schemaConfigPtrType) ToSchemaConfigPtrOutput() SchemaConfigPtrOutput {
	return i.ToSchemaConfigPtrOutputWithContext(context.Background())
}

func (i *schemaConfigPtrType) ToSchemaConfigPtrOutputWithContext(ctx context.Context) SchemaConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaConfigPtrOutput)
}

// Configuration for the FHIR BigQuery schema. Determines how the server generates the schema.
type SchemaConfigOutput struct{ *pulumi.OutputState }

func (SchemaConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaConfig)(nil)).Elem()
}

func (o SchemaConfigOutput) ToSchemaConfigOutput() SchemaConfigOutput {
	return o
}

func (o SchemaConfigOutput) ToSchemaConfigOutputWithContext(ctx context.Context) SchemaConfigOutput {
	return o
}

func (o SchemaConfigOutput) ToSchemaConfigPtrOutput() SchemaConfigPtrOutput {
	return o.ToSchemaConfigPtrOutputWithContext(context.Background())
}

func (o SchemaConfigOutput) ToSchemaConfigPtrOutputWithContext(ctx context.Context) SchemaConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaConfig) *SchemaConfig {
		return &v
	}).(SchemaConfigPtrOutput)
}

// The configuration for exported BigQuery tables to be partitioned by FHIR resource's last updated time column.
func (o SchemaConfigOutput) LastUpdatedPartitionConfig() TimePartitioningPtrOutput {
	return o.ApplyT(func(v SchemaConfig) *TimePartitioning { return v.LastUpdatedPartitionConfig }).(TimePartitioningPtrOutput)
}

// The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.
func (o SchemaConfigOutput) RecursiveStructureDepth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaConfig) *string { return v.RecursiveStructureDepth }).(pulumi.StringPtrOutput)
}

// Specifies the output schema type. Schema type is required.
func (o SchemaConfigOutput) SchemaType() SchemaConfigSchemaTypePtrOutput {
	return o.ApplyT(func(v SchemaConfig) *SchemaConfigSchemaType { return v.SchemaType }).(SchemaConfigSchemaTypePtrOutput)
}

type SchemaConfigPtrOutput struct{ *pulumi.OutputState }

func (SchemaConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaConfig)(nil)).Elem()
}

func (o SchemaConfigPtrOutput) ToSchemaConfigPtrOutput() SchemaConfigPtrOutput {
	return o
}

func (o SchemaConfigPtrOutput) ToSchemaConfigPtrOutputWithContext(ctx context.Context) SchemaConfigPtrOutput {
	return o
}

func (o SchemaConfigPtrOutput) Elem() SchemaConfigOutput {
	return o.ApplyT(func(v *SchemaConfig) SchemaConfig {
		if v != nil {
			return *v
		}
		var ret SchemaConfig
		return ret
	}).(SchemaConfigOutput)
}

// The configuration for exported BigQuery tables to be partitioned by FHIR resource's last updated time column.
func (o SchemaConfigPtrOutput) LastUpdatedPartitionConfig() TimePartitioningPtrOutput {
	return o.ApplyT(func(v *SchemaConfig) *TimePartitioning {
		if v == nil {
			return nil
		}
		return v.LastUpdatedPartitionConfig
	}).(TimePartitioningPtrOutput)
}

// The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.
func (o SchemaConfigPtrOutput) RecursiveStructureDepth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaConfig) *string {
		if v == nil {
			return nil
		}
		return v.RecursiveStructureDepth
	}).(pulumi.StringPtrOutput)
}

// Specifies the output schema type. Schema type is required.
func (o SchemaConfigPtrOutput) SchemaType() SchemaConfigSchemaTypePtrOutput {
	return o.ApplyT(func(v *SchemaConfig) *SchemaConfigSchemaType {
		if v == nil {
			return nil
		}
		return v.SchemaType
	}).(SchemaConfigSchemaTypePtrOutput)
}

// Configuration for the FHIR BigQuery schema. Determines how the server generates the schema.
type SchemaConfigResponse struct {
	// The configuration for exported BigQuery tables to be partitioned by FHIR resource's last updated time column.
	LastUpdatedPartitionConfig TimePartitioningResponse `pulumi:"lastUpdatedPartitionConfig"`
	// The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.
	RecursiveStructureDepth string `pulumi:"recursiveStructureDepth"`
	// Specifies the output schema type. Schema type is required.
	SchemaType string `pulumi:"schemaType"`
}

// Configuration for the FHIR BigQuery schema. Determines how the server generates the schema.
type SchemaConfigResponseOutput struct{ *pulumi.OutputState }

func (SchemaConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaConfigResponse)(nil)).Elem()
}

func (o SchemaConfigResponseOutput) ToSchemaConfigResponseOutput() SchemaConfigResponseOutput {
	return o
}

func (o SchemaConfigResponseOutput) ToSchemaConfigResponseOutputWithContext(ctx context.Context) SchemaConfigResponseOutput {
	return o
}

// The configuration for exported BigQuery tables to be partitioned by FHIR resource's last updated time column.
func (o SchemaConfigResponseOutput) LastUpdatedPartitionConfig() TimePartitioningResponseOutput {
	return o.ApplyT(func(v SchemaConfigResponse) TimePartitioningResponse { return v.LastUpdatedPartitionConfig }).(TimePartitioningResponseOutput)
}

// The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.
func (o SchemaConfigResponseOutput) RecursiveStructureDepth() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaConfigResponse) string { return v.RecursiveStructureDepth }).(pulumi.StringOutput)
}

// Specifies the output schema type. Schema type is required.
func (o SchemaConfigResponseOutput) SchemaType() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaConfigResponse) string { return v.SchemaType }).(pulumi.StringOutput)
}

// An HL7v2 logical group construct.
type SchemaGroup struct {
	// True indicates that this is a choice group, meaning that only one of its segments can exist in a given message.
	Choice *bool `pulumi:"choice"`
	// The maximum number of times this group can be repeated. 0 or -1 means unbounded.
	MaxOccurs *int `pulumi:"maxOccurs"`
	// Nested groups and/or segments.
	Members []GroupOrSegment `pulumi:"members"`
	// The minimum number of times this group must be present/repeated.
	MinOccurs *int `pulumi:"minOccurs"`
	// The name of this group. For example, "ORDER_DETAIL".
	Name *string `pulumi:"name"`
}

// SchemaGroupInput is an input type that accepts SchemaGroupArgs and SchemaGroupOutput values.
// You can construct a concrete instance of `SchemaGroupInput` via:
//
//	SchemaGroupArgs{...}
type SchemaGroupInput interface {
	pulumi.Input

	ToSchemaGroupOutput() SchemaGroupOutput
	ToSchemaGroupOutputWithContext(context.Context) SchemaGroupOutput
}

// An HL7v2 logical group construct.
type SchemaGroupArgs struct {
	// True indicates that this is a choice group, meaning that only one of its segments can exist in a given message.
	Choice pulumi.BoolPtrInput `pulumi:"choice"`
	// The maximum number of times this group can be repeated. 0 or -1 means unbounded.
	MaxOccurs pulumi.IntPtrInput `pulumi:"maxOccurs"`
	// Nested groups and/or segments.
	Members GroupOrSegmentArrayInput `pulumi:"members"`
	// The minimum number of times this group must be present/repeated.
	MinOccurs pulumi.IntPtrInput `pulumi:"minOccurs"`
	// The name of this group. For example, "ORDER_DETAIL".
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SchemaGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaGroup)(nil)).Elem()
}

func (i SchemaGroupArgs) ToSchemaGroupOutput() SchemaGroupOutput {
	return i.ToSchemaGroupOutputWithContext(context.Background())
}

func (i SchemaGroupArgs) ToSchemaGroupOutputWithContext(ctx context.Context) SchemaGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaGroupOutput)
}

func (i SchemaGroupArgs) ToSchemaGroupPtrOutput() SchemaGroupPtrOutput {
	return i.ToSchemaGroupPtrOutputWithContext(context.Background())
}

func (i SchemaGroupArgs) ToSchemaGroupPtrOutputWithContext(ctx context.Context) SchemaGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaGroupOutput).ToSchemaGroupPtrOutputWithContext(ctx)
}

// SchemaGroupPtrInput is an input type that accepts SchemaGroupArgs, SchemaGroupPtr and SchemaGroupPtrOutput values.
// You can construct a concrete instance of `SchemaGroupPtrInput` via:
//
//	        SchemaGroupArgs{...}
//
//	or:
//
//	        nil
type SchemaGroupPtrInput interface {
	pulumi.Input

	ToSchemaGroupPtrOutput() SchemaGroupPtrOutput
	ToSchemaGroupPtrOutputWithContext(context.Context) SchemaGroupPtrOutput
}

type schemaGroupPtrType SchemaGroupArgs

func SchemaGroupPtr(v *SchemaGroupArgs) SchemaGroupPtrInput {
	return (*schemaGroupPtrType)(v)
}

func (*schemaGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaGroup)(nil)).Elem()
}

func (i *schemaGroupPtrType) ToSchemaGroupPtrOutput() SchemaGroupPtrOutput {
	return i.ToSchemaGroupPtrOutputWithContext(context.Background())
}

func (i *schemaGroupPtrType) ToSchemaGroupPtrOutputWithContext(ctx context.Context) SchemaGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaGroupPtrOutput)
}

// An HL7v2 logical group construct.
type SchemaGroupOutput struct{ *pulumi.OutputState }

func (SchemaGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaGroup)(nil)).Elem()
}

func (o SchemaGroupOutput) ToSchemaGroupOutput() SchemaGroupOutput {
	return o
}

func (o SchemaGroupOutput) ToSchemaGroupOutputWithContext(ctx context.Context) SchemaGroupOutput {
	return o
}

func (o SchemaGroupOutput) ToSchemaGroupPtrOutput() SchemaGroupPtrOutput {
	return o.ToSchemaGroupPtrOutputWithContext(context.Background())
}

func (o SchemaGroupOutput) ToSchemaGroupPtrOutputWithContext(ctx context.Context) SchemaGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaGroup) *SchemaGroup {
		return &v
	}).(SchemaGroupPtrOutput)
}

// True indicates that this is a choice group, meaning that only one of its segments can exist in a given message.
func (o SchemaGroupOutput) Choice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchemaGroup) *bool { return v.Choice }).(pulumi.BoolPtrOutput)
}

// The maximum number of times this group can be repeated. 0 or -1 means unbounded.
func (o SchemaGroupOutput) MaxOccurs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SchemaGroup) *int { return v.MaxOccurs }).(pulumi.IntPtrOutput)
}

// Nested groups and/or segments.
func (o SchemaGroupOutput) Members() GroupOrSegmentArrayOutput {
	return o.ApplyT(func(v SchemaGroup) []GroupOrSegment { return v.Members }).(GroupOrSegmentArrayOutput)
}

// The minimum number of times this group must be present/repeated.
func (o SchemaGroupOutput) MinOccurs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SchemaGroup) *int { return v.MinOccurs }).(pulumi.IntPtrOutput)
}

// The name of this group. For example, "ORDER_DETAIL".
func (o SchemaGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SchemaGroupPtrOutput struct{ *pulumi.OutputState }

func (SchemaGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaGroup)(nil)).Elem()
}

func (o SchemaGroupPtrOutput) ToSchemaGroupPtrOutput() SchemaGroupPtrOutput {
	return o
}

func (o SchemaGroupPtrOutput) ToSchemaGroupPtrOutputWithContext(ctx context.Context) SchemaGroupPtrOutput {
	return o
}

func (o SchemaGroupPtrOutput) Elem() SchemaGroupOutput {
	return o.ApplyT(func(v *SchemaGroup) SchemaGroup {
		if v != nil {
			return *v
		}
		var ret SchemaGroup
		return ret
	}).(SchemaGroupOutput)
}

// True indicates that this is a choice group, meaning that only one of its segments can exist in a given message.
func (o SchemaGroupPtrOutput) Choice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchemaGroup) *bool {
		if v == nil {
			return nil
		}
		return v.Choice
	}).(pulumi.BoolPtrOutput)
}

// The maximum number of times this group can be repeated. 0 or -1 means unbounded.
func (o SchemaGroupPtrOutput) MaxOccurs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SchemaGroup) *int {
		if v == nil {
			return nil
		}
		return v.MaxOccurs
	}).(pulumi.IntPtrOutput)
}

// Nested groups and/or segments.
func (o SchemaGroupPtrOutput) Members() GroupOrSegmentArrayOutput {
	return o.ApplyT(func(v *SchemaGroup) []GroupOrSegment {
		if v == nil {
			return nil
		}
		return v.Members
	}).(GroupOrSegmentArrayOutput)
}

// The minimum number of times this group must be present/repeated.
func (o SchemaGroupPtrOutput) MinOccurs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SchemaGroup) *int {
		if v == nil {
			return nil
		}
		return v.MinOccurs
	}).(pulumi.IntPtrOutput)
}

// The name of this group. For example, "ORDER_DETAIL".
func (o SchemaGroupPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaGroup) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// An HL7v2 logical group construct.
type SchemaGroupResponse struct {
	// True indicates that this is a choice group, meaning that only one of its segments can exist in a given message.
	Choice bool `pulumi:"choice"`
	// The maximum number of times this group can be repeated. 0 or -1 means unbounded.
	MaxOccurs int `pulumi:"maxOccurs"`
	// Nested groups and/or segments.
	Members []GroupOrSegmentResponse `pulumi:"members"`
	// The minimum number of times this group must be present/repeated.
	MinOccurs int `pulumi:"minOccurs"`
	// The name of this group. For example, "ORDER_DETAIL".
	Name string `pulumi:"name"`
}

// An HL7v2 logical group construct.
type SchemaGroupResponseOutput struct{ *pulumi.OutputState }

func (SchemaGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaGroupResponse)(nil)).Elem()
}

func (o SchemaGroupResponseOutput) ToSchemaGroupResponseOutput() SchemaGroupResponseOutput {
	return o
}

func (o SchemaGroupResponseOutput) ToSchemaGroupResponseOutputWithContext(ctx context.Context) SchemaGroupResponseOutput {
	return o
}

// True indicates that this is a choice group, meaning that only one of its segments can exist in a given message.
func (o SchemaGroupResponseOutput) Choice() pulumi.BoolOutput {
	return o.ApplyT(func(v SchemaGroupResponse) bool { return v.Choice }).(pulumi.BoolOutput)
}

// The maximum number of times this group can be repeated. 0 or -1 means unbounded.
func (o SchemaGroupResponseOutput) MaxOccurs() pulumi.IntOutput {
	return o.ApplyT(func(v SchemaGroupResponse) int { return v.MaxOccurs }).(pulumi.IntOutput)
}

// Nested groups and/or segments.
func (o SchemaGroupResponseOutput) Members() GroupOrSegmentResponseArrayOutput {
	return o.ApplyT(func(v SchemaGroupResponse) []GroupOrSegmentResponse { return v.Members }).(GroupOrSegmentResponseArrayOutput)
}

// The minimum number of times this group must be present/repeated.
func (o SchemaGroupResponseOutput) MinOccurs() pulumi.IntOutput {
	return o.ApplyT(func(v SchemaGroupResponse) int { return v.MinOccurs }).(pulumi.IntOutput)
}

// The name of this group. For example, "ORDER_DETAIL".
func (o SchemaGroupResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaGroupResponse) string { return v.Name }).(pulumi.StringOutput)
}

// A schema package contains a set of schemas and type definitions.
type SchemaPackage struct {
	// Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.
	IgnoreMinOccurs *bool `pulumi:"ignoreMinOccurs"`
	// Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.
	Schemas []Hl7SchemaConfig `pulumi:"schemas"`
	// Determines how messages that fail to parse are handled.
	SchematizedParsingType *SchemaPackageSchematizedParsingType `pulumi:"schematizedParsingType"`
	// Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.
	Types []Hl7TypesConfig `pulumi:"types"`
	// Determines how unexpected segments (segments not matched to the schema) are handled.
	UnexpectedSegmentHandling *SchemaPackageUnexpectedSegmentHandling `pulumi:"unexpectedSegmentHandling"`
}

// SchemaPackageInput is an input type that accepts SchemaPackageArgs and SchemaPackageOutput values.
// You can construct a concrete instance of `SchemaPackageInput` via:
//
//	SchemaPackageArgs{...}
type SchemaPackageInput interface {
	pulumi.Input

	ToSchemaPackageOutput() SchemaPackageOutput
	ToSchemaPackageOutputWithContext(context.Context) SchemaPackageOutput
}

// A schema package contains a set of schemas and type definitions.
type SchemaPackageArgs struct {
	// Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.
	IgnoreMinOccurs pulumi.BoolPtrInput `pulumi:"ignoreMinOccurs"`
	// Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.
	Schemas Hl7SchemaConfigArrayInput `pulumi:"schemas"`
	// Determines how messages that fail to parse are handled.
	SchematizedParsingType SchemaPackageSchematizedParsingTypePtrInput `pulumi:"schematizedParsingType"`
	// Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.
	Types Hl7TypesConfigArrayInput `pulumi:"types"`
	// Determines how unexpected segments (segments not matched to the schema) are handled.
	UnexpectedSegmentHandling SchemaPackageUnexpectedSegmentHandlingPtrInput `pulumi:"unexpectedSegmentHandling"`
}

func (SchemaPackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaPackage)(nil)).Elem()
}

func (i SchemaPackageArgs) ToSchemaPackageOutput() SchemaPackageOutput {
	return i.ToSchemaPackageOutputWithContext(context.Background())
}

func (i SchemaPackageArgs) ToSchemaPackageOutputWithContext(ctx context.Context) SchemaPackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaPackageOutput)
}

func (i SchemaPackageArgs) ToSchemaPackagePtrOutput() SchemaPackagePtrOutput {
	return i.ToSchemaPackagePtrOutputWithContext(context.Background())
}

func (i SchemaPackageArgs) ToSchemaPackagePtrOutputWithContext(ctx context.Context) SchemaPackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaPackageOutput).ToSchemaPackagePtrOutputWithContext(ctx)
}

// SchemaPackagePtrInput is an input type that accepts SchemaPackageArgs, SchemaPackagePtr and SchemaPackagePtrOutput values.
// You can construct a concrete instance of `SchemaPackagePtrInput` via:
//
//	        SchemaPackageArgs{...}
//
//	or:
//
//	        nil
type SchemaPackagePtrInput interface {
	pulumi.Input

	ToSchemaPackagePtrOutput() SchemaPackagePtrOutput
	ToSchemaPackagePtrOutputWithContext(context.Context) SchemaPackagePtrOutput
}

type schemaPackagePtrType SchemaPackageArgs

func SchemaPackagePtr(v *SchemaPackageArgs) SchemaPackagePtrInput {
	return (*schemaPackagePtrType)(v)
}

func (*schemaPackagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaPackage)(nil)).Elem()
}

func (i *schemaPackagePtrType) ToSchemaPackagePtrOutput() SchemaPackagePtrOutput {
	return i.ToSchemaPackagePtrOutputWithContext(context.Background())
}

func (i *schemaPackagePtrType) ToSchemaPackagePtrOutputWithContext(ctx context.Context) SchemaPackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaPackagePtrOutput)
}

// A schema package contains a set of schemas and type definitions.
type SchemaPackageOutput struct{ *pulumi.OutputState }

func (SchemaPackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaPackage)(nil)).Elem()
}

func (o SchemaPackageOutput) ToSchemaPackageOutput() SchemaPackageOutput {
	return o
}

func (o SchemaPackageOutput) ToSchemaPackageOutputWithContext(ctx context.Context) SchemaPackageOutput {
	return o
}

func (o SchemaPackageOutput) ToSchemaPackagePtrOutput() SchemaPackagePtrOutput {
	return o.ToSchemaPackagePtrOutputWithContext(context.Background())
}

func (o SchemaPackageOutput) ToSchemaPackagePtrOutputWithContext(ctx context.Context) SchemaPackagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaPackage) *SchemaPackage {
		return &v
	}).(SchemaPackagePtrOutput)
}

// Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.
func (o SchemaPackageOutput) IgnoreMinOccurs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchemaPackage) *bool { return v.IgnoreMinOccurs }).(pulumi.BoolPtrOutput)
}

// Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.
func (o SchemaPackageOutput) Schemas() Hl7SchemaConfigArrayOutput {
	return o.ApplyT(func(v SchemaPackage) []Hl7SchemaConfig { return v.Schemas }).(Hl7SchemaConfigArrayOutput)
}

// Determines how messages that fail to parse are handled.
func (o SchemaPackageOutput) SchematizedParsingType() SchemaPackageSchematizedParsingTypePtrOutput {
	return o.ApplyT(func(v SchemaPackage) *SchemaPackageSchematizedParsingType { return v.SchematizedParsingType }).(SchemaPackageSchematizedParsingTypePtrOutput)
}

// Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.
func (o SchemaPackageOutput) Types() Hl7TypesConfigArrayOutput {
	return o.ApplyT(func(v SchemaPackage) []Hl7TypesConfig { return v.Types }).(Hl7TypesConfigArrayOutput)
}

// Determines how unexpected segments (segments not matched to the schema) are handled.
func (o SchemaPackageOutput) UnexpectedSegmentHandling() SchemaPackageUnexpectedSegmentHandlingPtrOutput {
	return o.ApplyT(func(v SchemaPackage) *SchemaPackageUnexpectedSegmentHandling { return v.UnexpectedSegmentHandling }).(SchemaPackageUnexpectedSegmentHandlingPtrOutput)
}

type SchemaPackagePtrOutput struct{ *pulumi.OutputState }

func (SchemaPackagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaPackage)(nil)).Elem()
}

func (o SchemaPackagePtrOutput) ToSchemaPackagePtrOutput() SchemaPackagePtrOutput {
	return o
}

func (o SchemaPackagePtrOutput) ToSchemaPackagePtrOutputWithContext(ctx context.Context) SchemaPackagePtrOutput {
	return o
}

func (o SchemaPackagePtrOutput) Elem() SchemaPackageOutput {
	return o.ApplyT(func(v *SchemaPackage) SchemaPackage {
		if v != nil {
			return *v
		}
		var ret SchemaPackage
		return ret
	}).(SchemaPackageOutput)
}

// Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.
func (o SchemaPackagePtrOutput) IgnoreMinOccurs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchemaPackage) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreMinOccurs
	}).(pulumi.BoolPtrOutput)
}

// Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.
func (o SchemaPackagePtrOutput) Schemas() Hl7SchemaConfigArrayOutput {
	return o.ApplyT(func(v *SchemaPackage) []Hl7SchemaConfig {
		if v == nil {
			return nil
		}
		return v.Schemas
	}).(Hl7SchemaConfigArrayOutput)
}

// Determines how messages that fail to parse are handled.
func (o SchemaPackagePtrOutput) SchematizedParsingType() SchemaPackageSchematizedParsingTypePtrOutput {
	return o.ApplyT(func(v *SchemaPackage) *SchemaPackageSchematizedParsingType {
		if v == nil {
			return nil
		}
		return v.SchematizedParsingType
	}).(SchemaPackageSchematizedParsingTypePtrOutput)
}

// Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.
func (o SchemaPackagePtrOutput) Types() Hl7TypesConfigArrayOutput {
	return o.ApplyT(func(v *SchemaPackage) []Hl7TypesConfig {
		if v == nil {
			return nil
		}
		return v.Types
	}).(Hl7TypesConfigArrayOutput)
}

// Determines how unexpected segments (segments not matched to the schema) are handled.
func (o SchemaPackagePtrOutput) UnexpectedSegmentHandling() SchemaPackageUnexpectedSegmentHandlingPtrOutput {
	return o.ApplyT(func(v *SchemaPackage) *SchemaPackageUnexpectedSegmentHandling {
		if v == nil {
			return nil
		}
		return v.UnexpectedSegmentHandling
	}).(SchemaPackageUnexpectedSegmentHandlingPtrOutput)
}

// A schema package contains a set of schemas and type definitions.
type SchemaPackageResponse struct {
	// Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.
	IgnoreMinOccurs bool `pulumi:"ignoreMinOccurs"`
	// Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.
	Schemas []Hl7SchemaConfigResponse `pulumi:"schemas"`
	// Determines how messages that fail to parse are handled.
	SchematizedParsingType string `pulumi:"schematizedParsingType"`
	// Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.
	Types []Hl7TypesConfigResponse `pulumi:"types"`
	// Determines how unexpected segments (segments not matched to the schema) are handled.
	UnexpectedSegmentHandling string `pulumi:"unexpectedSegmentHandling"`
}

// A schema package contains a set of schemas and type definitions.
type SchemaPackageResponseOutput struct{ *pulumi.OutputState }

func (SchemaPackageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaPackageResponse)(nil)).Elem()
}

func (o SchemaPackageResponseOutput) ToSchemaPackageResponseOutput() SchemaPackageResponseOutput {
	return o
}

func (o SchemaPackageResponseOutput) ToSchemaPackageResponseOutputWithContext(ctx context.Context) SchemaPackageResponseOutput {
	return o
}

// Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.
func (o SchemaPackageResponseOutput) IgnoreMinOccurs() pulumi.BoolOutput {
	return o.ApplyT(func(v SchemaPackageResponse) bool { return v.IgnoreMinOccurs }).(pulumi.BoolOutput)
}

// Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.
func (o SchemaPackageResponseOutput) Schemas() Hl7SchemaConfigResponseArrayOutput {
	return o.ApplyT(func(v SchemaPackageResponse) []Hl7SchemaConfigResponse { return v.Schemas }).(Hl7SchemaConfigResponseArrayOutput)
}

// Determines how messages that fail to parse are handled.
func (o SchemaPackageResponseOutput) SchematizedParsingType() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaPackageResponse) string { return v.SchematizedParsingType }).(pulumi.StringOutput)
}

// Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.
func (o SchemaPackageResponseOutput) Types() Hl7TypesConfigResponseArrayOutput {
	return o.ApplyT(func(v SchemaPackageResponse) []Hl7TypesConfigResponse { return v.Types }).(Hl7TypesConfigResponseArrayOutput)
}

// Determines how unexpected segments (segments not matched to the schema) are handled.
func (o SchemaPackageResponseOutput) UnexpectedSegmentHandling() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaPackageResponse) string { return v.UnexpectedSegmentHandling }).(pulumi.StringOutput)
}

// An HL7v2 Segment.
type SchemaSegment struct {
	// The maximum number of times this segment can be present in this group. 0 or -1 means unbounded.
	MaxOccurs *int `pulumi:"maxOccurs"`
	// The minimum number of times this segment can be present in this group.
	MinOccurs *int `pulumi:"minOccurs"`
	// The Segment type. For example, "PID".
	Type *string `pulumi:"type"`
}

// SchemaSegmentInput is an input type that accepts SchemaSegmentArgs and SchemaSegmentOutput values.
// You can construct a concrete instance of `SchemaSegmentInput` via:
//
//	SchemaSegmentArgs{...}
type SchemaSegmentInput interface {
	pulumi.Input

	ToSchemaSegmentOutput() SchemaSegmentOutput
	ToSchemaSegmentOutputWithContext(context.Context) SchemaSegmentOutput
}

// An HL7v2 Segment.
type SchemaSegmentArgs struct {
	// The maximum number of times this segment can be present in this group. 0 or -1 means unbounded.
	MaxOccurs pulumi.IntPtrInput `pulumi:"maxOccurs"`
	// The minimum number of times this segment can be present in this group.
	MinOccurs pulumi.IntPtrInput `pulumi:"minOccurs"`
	// The Segment type. For example, "PID".
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SchemaSegmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaSegment)(nil)).Elem()
}

func (i SchemaSegmentArgs) ToSchemaSegmentOutput() SchemaSegmentOutput {
	return i.ToSchemaSegmentOutputWithContext(context.Background())
}

func (i SchemaSegmentArgs) ToSchemaSegmentOutputWithContext(ctx context.Context) SchemaSegmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaSegmentOutput)
}

func (i SchemaSegmentArgs) ToSchemaSegmentPtrOutput() SchemaSegmentPtrOutput {
	return i.ToSchemaSegmentPtrOutputWithContext(context.Background())
}

func (i SchemaSegmentArgs) ToSchemaSegmentPtrOutputWithContext(ctx context.Context) SchemaSegmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaSegmentOutput).ToSchemaSegmentPtrOutputWithContext(ctx)
}

// SchemaSegmentPtrInput is an input type that accepts SchemaSegmentArgs, SchemaSegmentPtr and SchemaSegmentPtrOutput values.
// You can construct a concrete instance of `SchemaSegmentPtrInput` via:
//
//	        SchemaSegmentArgs{...}
//
//	or:
//
//	        nil
type SchemaSegmentPtrInput interface {
	pulumi.Input

	ToSchemaSegmentPtrOutput() SchemaSegmentPtrOutput
	ToSchemaSegmentPtrOutputWithContext(context.Context) SchemaSegmentPtrOutput
}

type schemaSegmentPtrType SchemaSegmentArgs

func SchemaSegmentPtr(v *SchemaSegmentArgs) SchemaSegmentPtrInput {
	return (*schemaSegmentPtrType)(v)
}

func (*schemaSegmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaSegment)(nil)).Elem()
}

func (i *schemaSegmentPtrType) ToSchemaSegmentPtrOutput() SchemaSegmentPtrOutput {
	return i.ToSchemaSegmentPtrOutputWithContext(context.Background())
}

func (i *schemaSegmentPtrType) ToSchemaSegmentPtrOutputWithContext(ctx context.Context) SchemaSegmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaSegmentPtrOutput)
}

// An HL7v2 Segment.
type SchemaSegmentOutput struct{ *pulumi.OutputState }

func (SchemaSegmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaSegment)(nil)).Elem()
}

func (o SchemaSegmentOutput) ToSchemaSegmentOutput() SchemaSegmentOutput {
	return o
}

func (o SchemaSegmentOutput) ToSchemaSegmentOutputWithContext(ctx context.Context) SchemaSegmentOutput {
	return o
}

func (o SchemaSegmentOutput) ToSchemaSegmentPtrOutput() SchemaSegmentPtrOutput {
	return o.ToSchemaSegmentPtrOutputWithContext(context.Background())
}

func (o SchemaSegmentOutput) ToSchemaSegmentPtrOutputWithContext(ctx context.Context) SchemaSegmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaSegment) *SchemaSegment {
		return &v
	}).(SchemaSegmentPtrOutput)
}

// The maximum number of times this segment can be present in this group. 0 or -1 means unbounded.
func (o SchemaSegmentOutput) MaxOccurs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SchemaSegment) *int { return v.MaxOccurs }).(pulumi.IntPtrOutput)
}

// The minimum number of times this segment can be present in this group.
func (o SchemaSegmentOutput) MinOccurs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SchemaSegment) *int { return v.MinOccurs }).(pulumi.IntPtrOutput)
}

// The Segment type. For example, "PID".
func (o SchemaSegmentOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaSegment) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SchemaSegmentPtrOutput struct{ *pulumi.OutputState }

func (SchemaSegmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaSegment)(nil)).Elem()
}

func (o SchemaSegmentPtrOutput) ToSchemaSegmentPtrOutput() SchemaSegmentPtrOutput {
	return o
}

func (o SchemaSegmentPtrOutput) ToSchemaSegmentPtrOutputWithContext(ctx context.Context) SchemaSegmentPtrOutput {
	return o
}

func (o SchemaSegmentPtrOutput) Elem() SchemaSegmentOutput {
	return o.ApplyT(func(v *SchemaSegment) SchemaSegment {
		if v != nil {
			return *v
		}
		var ret SchemaSegment
		return ret
	}).(SchemaSegmentOutput)
}

// The maximum number of times this segment can be present in this group. 0 or -1 means unbounded.
func (o SchemaSegmentPtrOutput) MaxOccurs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SchemaSegment) *int {
		if v == nil {
			return nil
		}
		return v.MaxOccurs
	}).(pulumi.IntPtrOutput)
}

// The minimum number of times this segment can be present in this group.
func (o SchemaSegmentPtrOutput) MinOccurs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SchemaSegment) *int {
		if v == nil {
			return nil
		}
		return v.MinOccurs
	}).(pulumi.IntPtrOutput)
}

// The Segment type. For example, "PID".
func (o SchemaSegmentPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaSegment) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// An HL7v2 Segment.
type SchemaSegmentResponse struct {
	// The maximum number of times this segment can be present in this group. 0 or -1 means unbounded.
	MaxOccurs int `pulumi:"maxOccurs"`
	// The minimum number of times this segment can be present in this group.
	MinOccurs int `pulumi:"minOccurs"`
	// The Segment type. For example, "PID".
	Type string `pulumi:"type"`
}

// An HL7v2 Segment.
type SchemaSegmentResponseOutput struct{ *pulumi.OutputState }

func (SchemaSegmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaSegmentResponse)(nil)).Elem()
}

func (o SchemaSegmentResponseOutput) ToSchemaSegmentResponseOutput() SchemaSegmentResponseOutput {
	return o
}

func (o SchemaSegmentResponseOutput) ToSchemaSegmentResponseOutputWithContext(ctx context.Context) SchemaSegmentResponseOutput {
	return o
}

// The maximum number of times this segment can be present in this group. 0 or -1 means unbounded.
func (o SchemaSegmentResponseOutput) MaxOccurs() pulumi.IntOutput {
	return o.ApplyT(func(v SchemaSegmentResponse) int { return v.MaxOccurs }).(pulumi.IntOutput)
}

// The minimum number of times this segment can be present in this group.
func (o SchemaSegmentResponseOutput) MinOccurs() pulumi.IntOutput {
	return o.ApplyT(func(v SchemaSegmentResponse) int { return v.MinOccurs }).(pulumi.IntOutput)
}

// The Segment type. For example, "PID".
func (o SchemaSegmentResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaSegmentResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The content of an HL7v2 message in a structured format as specified by a schema.
type SchematizedData struct {
	// JSON output of the parser.
	Data *string `pulumi:"data"`
	// The error output of the parser.
	Error *string `pulumi:"error"`
}

// SchematizedDataInput is an input type that accepts SchematizedDataArgs and SchematizedDataOutput values.
// You can construct a concrete instance of `SchematizedDataInput` via:
//
//	SchematizedDataArgs{...}
type SchematizedDataInput interface {
	pulumi.Input

	ToSchematizedDataOutput() SchematizedDataOutput
	ToSchematizedDataOutputWithContext(context.Context) SchematizedDataOutput
}

// The content of an HL7v2 message in a structured format as specified by a schema.
type SchematizedDataArgs struct {
	// JSON output of the parser.
	Data pulumi.StringPtrInput `pulumi:"data"`
	// The error output of the parser.
	Error pulumi.StringPtrInput `pulumi:"error"`
}

func (SchematizedDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchematizedData)(nil)).Elem()
}

func (i SchematizedDataArgs) ToSchematizedDataOutput() SchematizedDataOutput {
	return i.ToSchematizedDataOutputWithContext(context.Background())
}

func (i SchematizedDataArgs) ToSchematizedDataOutputWithContext(ctx context.Context) SchematizedDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchematizedDataOutput)
}

func (i SchematizedDataArgs) ToSchematizedDataPtrOutput() SchematizedDataPtrOutput {
	return i.ToSchematizedDataPtrOutputWithContext(context.Background())
}

func (i SchematizedDataArgs) ToSchematizedDataPtrOutputWithContext(ctx context.Context) SchematizedDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchematizedDataOutput).ToSchematizedDataPtrOutputWithContext(ctx)
}

// SchematizedDataPtrInput is an input type that accepts SchematizedDataArgs, SchematizedDataPtr and SchematizedDataPtrOutput values.
// You can construct a concrete instance of `SchematizedDataPtrInput` via:
//
//	        SchematizedDataArgs{...}
//
//	or:
//
//	        nil
type SchematizedDataPtrInput interface {
	pulumi.Input

	ToSchematizedDataPtrOutput() SchematizedDataPtrOutput
	ToSchematizedDataPtrOutputWithContext(context.Context) SchematizedDataPtrOutput
}

type schematizedDataPtrType SchematizedDataArgs

func SchematizedDataPtr(v *SchematizedDataArgs) SchematizedDataPtrInput {
	return (*schematizedDataPtrType)(v)
}

func (*schematizedDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchematizedData)(nil)).Elem()
}

func (i *schematizedDataPtrType) ToSchematizedDataPtrOutput() SchematizedDataPtrOutput {
	return i.ToSchematizedDataPtrOutputWithContext(context.Background())
}

func (i *schematizedDataPtrType) ToSchematizedDataPtrOutputWithContext(ctx context.Context) SchematizedDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchematizedDataPtrOutput)
}

// The content of an HL7v2 message in a structured format as specified by a schema.
type SchematizedDataOutput struct{ *pulumi.OutputState }

func (SchematizedDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchematizedData)(nil)).Elem()
}

func (o SchematizedDataOutput) ToSchematizedDataOutput() SchematizedDataOutput {
	return o
}

func (o SchematizedDataOutput) ToSchematizedDataOutputWithContext(ctx context.Context) SchematizedDataOutput {
	return o
}

func (o SchematizedDataOutput) ToSchematizedDataPtrOutput() SchematizedDataPtrOutput {
	return o.ToSchematizedDataPtrOutputWithContext(context.Background())
}

func (o SchematizedDataOutput) ToSchematizedDataPtrOutputWithContext(ctx context.Context) SchematizedDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchematizedData) *SchematizedData {
		return &v
	}).(SchematizedDataPtrOutput)
}

// JSON output of the parser.
func (o SchematizedDataOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchematizedData) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// The error output of the parser.
func (o SchematizedDataOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchematizedData) *string { return v.Error }).(pulumi.StringPtrOutput)
}

type SchematizedDataPtrOutput struct{ *pulumi.OutputState }

func (SchematizedDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchematizedData)(nil)).Elem()
}

func (o SchematizedDataPtrOutput) ToSchematizedDataPtrOutput() SchematizedDataPtrOutput {
	return o
}

func (o SchematizedDataPtrOutput) ToSchematizedDataPtrOutputWithContext(ctx context.Context) SchematizedDataPtrOutput {
	return o
}

func (o SchematizedDataPtrOutput) Elem() SchematizedDataOutput {
	return o.ApplyT(func(v *SchematizedData) SchematizedData {
		if v != nil {
			return *v
		}
		var ret SchematizedData
		return ret
	}).(SchematizedDataOutput)
}

// JSON output of the parser.
func (o SchematizedDataPtrOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchematizedData) *string {
		if v == nil {
			return nil
		}
		return v.Data
	}).(pulumi.StringPtrOutput)
}

// The error output of the parser.
func (o SchematizedDataPtrOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchematizedData) *string {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.StringPtrOutput)
}

// The content of an HL7v2 message in a structured format as specified by a schema.
type SchematizedDataResponse struct {
	// JSON output of the parser.
	Data string `pulumi:"data"`
	// The error output of the parser.
	Error string `pulumi:"error"`
}

// The content of an HL7v2 message in a structured format as specified by a schema.
type SchematizedDataResponseOutput struct{ *pulumi.OutputState }

func (SchematizedDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchematizedDataResponse)(nil)).Elem()
}

func (o SchematizedDataResponseOutput) ToSchematizedDataResponseOutput() SchematizedDataResponseOutput {
	return o
}

func (o SchematizedDataResponseOutput) ToSchematizedDataResponseOutputWithContext(ctx context.Context) SchematizedDataResponseOutput {
	return o
}

// JSON output of the parser.
func (o SchematizedDataResponseOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v SchematizedDataResponse) string { return v.Data }).(pulumi.StringOutput)
}

// The error output of the parser.
func (o SchematizedDataResponseOutput) Error() pulumi.StringOutput {
	return o.ApplyT(func(v SchematizedDataResponse) string { return v.Error }).(pulumi.StringOutput)
}

// A segment in a structured format.
type SegmentResponse struct {
	// A mapping from the positional location to the value. The key string uses zero-based indexes separated by dots to identify Fields, components and sub-components. A bracket notation is also used to identify different instances of a repeated field. Regex for key: (\d+)(\[\d+\])?(.\d+)?(.\d+)? Examples of (key, value) pairs: * (0.1, "hemoglobin") denotes that the first component of Field 0 has the value "hemoglobin". * (1.1.2, "CBC") denotes that the second sub-component of the first component of Field 1 has the value "CBC". * (1[0].1, "HbA1c") denotes that the first component of the first Instance of Field 1, which is repeated, has the value "HbA1c".
	Fields map[string]string `pulumi:"fields"`
	// A string that indicates the type of segment. For example, EVN or PID.
	SegmentId string `pulumi:"segmentId"`
	// Set ID for segments that can be in a set. This can be empty if it's missing or isn't applicable.
	SetId string `pulumi:"setId"`
}

// A segment in a structured format.
type SegmentResponseOutput struct{ *pulumi.OutputState }

func (SegmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentResponse)(nil)).Elem()
}

func (o SegmentResponseOutput) ToSegmentResponseOutput() SegmentResponseOutput {
	return o
}

func (o SegmentResponseOutput) ToSegmentResponseOutputWithContext(ctx context.Context) SegmentResponseOutput {
	return o
}

// A mapping from the positional location to the value. The key string uses zero-based indexes separated by dots to identify Fields, components and sub-components. A bracket notation is also used to identify different instances of a repeated field. Regex for key: (\d+)(\[\d+\])?(.\d+)?(.\d+)? Examples of (key, value) pairs: * (0.1, "hemoglobin") denotes that the first component of Field 0 has the value "hemoglobin". * (1.1.2, "CBC") denotes that the second sub-component of the first component of Field 1 has the value "CBC". * (1[0].1, "HbA1c") denotes that the first component of the first Instance of Field 1, which is repeated, has the value "HbA1c".
func (o SegmentResponseOutput) Fields() pulumi.StringMapOutput {
	return o.ApplyT(func(v SegmentResponse) map[string]string { return v.Fields }).(pulumi.StringMapOutput)
}

// A string that indicates the type of segment. For example, EVN or PID.
func (o SegmentResponseOutput) SegmentId() pulumi.StringOutput {
	return o.ApplyT(func(v SegmentResponse) string { return v.SegmentId }).(pulumi.StringOutput)
}

// Set ID for segments that can be in a set. This can be empty if it's missing or isn't applicable.
func (o SegmentResponseOutput) SetId() pulumi.StringOutput {
	return o.ApplyT(func(v SegmentResponse) string { return v.SetId }).(pulumi.StringOutput)
}

type SegmentResponseArrayOutput struct{ *pulumi.OutputState }

func (SegmentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SegmentResponse)(nil)).Elem()
}

func (o SegmentResponseArrayOutput) ToSegmentResponseArrayOutput() SegmentResponseArrayOutput {
	return o
}

func (o SegmentResponseArrayOutput) ToSegmentResponseArrayOutputWithContext(ctx context.Context) SegmentResponseArrayOutput {
	return o
}

func (o SegmentResponseArrayOutput) Index(i pulumi.IntInput) SegmentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SegmentResponse {
		return vs[0].([]SegmentResponse)[vs[1].(int)]
	}).(SegmentResponseOutput)
}

// User signature.
type Signature struct {
	// Optional. An image of the user's signature.
	Image *Image `pulumi:"image"`
	// Optional. Metadata associated with the user's signature. For example, the user's name or the user's title.
	Metadata map[string]string `pulumi:"metadata"`
	// Optional. Timestamp of the signature.
	SignatureTime *string `pulumi:"signatureTime"`
	// User's UUID provided by the client.
	UserId string `pulumi:"userId"`
}

// SignatureInput is an input type that accepts SignatureArgs and SignatureOutput values.
// You can construct a concrete instance of `SignatureInput` via:
//
//	SignatureArgs{...}
type SignatureInput interface {
	pulumi.Input

	ToSignatureOutput() SignatureOutput
	ToSignatureOutputWithContext(context.Context) SignatureOutput
}

// User signature.
type SignatureArgs struct {
	// Optional. An image of the user's signature.
	Image ImagePtrInput `pulumi:"image"`
	// Optional. Metadata associated with the user's signature. For example, the user's name or the user's title.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Optional. Timestamp of the signature.
	SignatureTime pulumi.StringPtrInput `pulumi:"signatureTime"`
	// User's UUID provided by the client.
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (SignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Signature)(nil)).Elem()
}

func (i SignatureArgs) ToSignatureOutput() SignatureOutput {
	return i.ToSignatureOutputWithContext(context.Background())
}

func (i SignatureArgs) ToSignatureOutputWithContext(ctx context.Context) SignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignatureOutput)
}

func (i SignatureArgs) ToSignaturePtrOutput() SignaturePtrOutput {
	return i.ToSignaturePtrOutputWithContext(context.Background())
}

func (i SignatureArgs) ToSignaturePtrOutputWithContext(ctx context.Context) SignaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignatureOutput).ToSignaturePtrOutputWithContext(ctx)
}

// SignaturePtrInput is an input type that accepts SignatureArgs, SignaturePtr and SignaturePtrOutput values.
// You can construct a concrete instance of `SignaturePtrInput` via:
//
//	        SignatureArgs{...}
//
//	or:
//
//	        nil
type SignaturePtrInput interface {
	pulumi.Input

	ToSignaturePtrOutput() SignaturePtrOutput
	ToSignaturePtrOutputWithContext(context.Context) SignaturePtrOutput
}

type signaturePtrType SignatureArgs

func SignaturePtr(v *SignatureArgs) SignaturePtrInput {
	return (*signaturePtrType)(v)
}

func (*signaturePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Signature)(nil)).Elem()
}

func (i *signaturePtrType) ToSignaturePtrOutput() SignaturePtrOutput {
	return i.ToSignaturePtrOutputWithContext(context.Background())
}

func (i *signaturePtrType) ToSignaturePtrOutputWithContext(ctx context.Context) SignaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignaturePtrOutput)
}

// User signature.
type SignatureOutput struct{ *pulumi.OutputState }

func (SignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Signature)(nil)).Elem()
}

func (o SignatureOutput) ToSignatureOutput() SignatureOutput {
	return o
}

func (o SignatureOutput) ToSignatureOutputWithContext(ctx context.Context) SignatureOutput {
	return o
}

func (o SignatureOutput) ToSignaturePtrOutput() SignaturePtrOutput {
	return o.ToSignaturePtrOutputWithContext(context.Background())
}

func (o SignatureOutput) ToSignaturePtrOutputWithContext(ctx context.Context) SignaturePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Signature) *Signature {
		return &v
	}).(SignaturePtrOutput)
}

// Optional. An image of the user's signature.
func (o SignatureOutput) Image() ImagePtrOutput {
	return o.ApplyT(func(v Signature) *Image { return v.Image }).(ImagePtrOutput)
}

// Optional. Metadata associated with the user's signature. For example, the user's name or the user's title.
func (o SignatureOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v Signature) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Optional. Timestamp of the signature.
func (o SignatureOutput) SignatureTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Signature) *string { return v.SignatureTime }).(pulumi.StringPtrOutput)
}

// User's UUID provided by the client.
func (o SignatureOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v Signature) string { return v.UserId }).(pulumi.StringOutput)
}

type SignaturePtrOutput struct{ *pulumi.OutputState }

func (SignaturePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Signature)(nil)).Elem()
}

func (o SignaturePtrOutput) ToSignaturePtrOutput() SignaturePtrOutput {
	return o
}

func (o SignaturePtrOutput) ToSignaturePtrOutputWithContext(ctx context.Context) SignaturePtrOutput {
	return o
}

func (o SignaturePtrOutput) Elem() SignatureOutput {
	return o.ApplyT(func(v *Signature) Signature {
		if v != nil {
			return *v
		}
		var ret Signature
		return ret
	}).(SignatureOutput)
}

// Optional. An image of the user's signature.
func (o SignaturePtrOutput) Image() ImagePtrOutput {
	return o.ApplyT(func(v *Signature) *Image {
		if v == nil {
			return nil
		}
		return v.Image
	}).(ImagePtrOutput)
}

// Optional. Metadata associated with the user's signature. For example, the user's name or the user's title.
func (o SignaturePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Signature) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Optional. Timestamp of the signature.
func (o SignaturePtrOutput) SignatureTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Signature) *string {
		if v == nil {
			return nil
		}
		return v.SignatureTime
	}).(pulumi.StringPtrOutput)
}

// User's UUID provided by the client.
func (o SignaturePtrOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Signature) *string {
		if v == nil {
			return nil
		}
		return &v.UserId
	}).(pulumi.StringPtrOutput)
}

// User signature.
type SignatureResponse struct {
	// Optional. An image of the user's signature.
	Image ImageResponse `pulumi:"image"`
	// Optional. Metadata associated with the user's signature. For example, the user's name or the user's title.
	Metadata map[string]string `pulumi:"metadata"`
	// Optional. Timestamp of the signature.
	SignatureTime string `pulumi:"signatureTime"`
	// User's UUID provided by the client.
	UserId string `pulumi:"userId"`
}

// User signature.
type SignatureResponseOutput struct{ *pulumi.OutputState }

func (SignatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignatureResponse)(nil)).Elem()
}

func (o SignatureResponseOutput) ToSignatureResponseOutput() SignatureResponseOutput {
	return o
}

func (o SignatureResponseOutput) ToSignatureResponseOutputWithContext(ctx context.Context) SignatureResponseOutput {
	return o
}

// Optional. An image of the user's signature.
func (o SignatureResponseOutput) Image() ImageResponseOutput {
	return o.ApplyT(func(v SignatureResponse) ImageResponse { return v.Image }).(ImageResponseOutput)
}

// Optional. Metadata associated with the user's signature. For example, the user's name or the user's title.
func (o SignatureResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v SignatureResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Optional. Timestamp of the signature.
func (o SignatureResponseOutput) SignatureTime() pulumi.StringOutput {
	return o.ApplyT(func(v SignatureResponse) string { return v.SignatureTime }).(pulumi.StringOutput)
}

// User's UUID provided by the client.
func (o SignatureResponseOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v SignatureResponse) string { return v.UserId }).(pulumi.StringOutput)
}

// Contains configuration for streaming FHIR export.
type StreamConfig struct {
	// The destination BigQuery structure that contains both the dataset location and corresponding schema config. The output is organized in one table per resource type. The server reuses the existing tables (if any) that are named after the resource types. For example, "Patient", "Observation". When there is no existing table for a given resource type, the server attempts to create one. When a table schema doesn't align with the schema config, either because of existing incompatible schema or out of band incompatible modification, the server does not stream in new data. BigQuery imposes a 1 MB limit on streaming insert row size, therefore any resource mutation that generates more than 1 MB of BigQuery data is not streamed. One resolution in this case is to delete the incompatible table and let the server recreate one, though the newly created table only contains data after the table recreation. Results are written to BigQuery tables according to the parameters in BigQueryDestination.WriteDisposition. Different versions of the same resource are distinguishable by the meta.versionId and meta.lastUpdated columns. The operation (CREATE/UPDATE/DELETE) that results in the new version is recorded in the meta.tag. The tables contain all historical resource versions since streaming was enabled. For query convenience, the server also creates one view per table of the same name containing only the current resource version. The streamed data in the BigQuery dataset is not guaranteed to be completely unique. The combination of the id and meta.versionId columns should ideally identify a single unique row. But in rare cases, duplicates may exist. At query time, users may use the SQL select statement to keep only one of the duplicate rows given an id and meta.versionId pair. Alternatively, the server created view mentioned above also filters out duplicates. If a resource mutation cannot be streamed to BigQuery, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
	BigqueryDestination *GoogleCloudHealthcareV1FhirBigQueryDestination `pulumi:"bigqueryDestination"`
	// The destination FHIR store for de-identified resources. After this field is added, all subsequent creates/updates/patches to the source store will be de-identified using the provided configuration and applied to the destination store. Importing resources to the source store will not trigger the streaming. If the source store already contains resources when this option is enabled, those resources will not be copied to the destination store unless they are subsequently updated. This may result in invalid references in the destination store. Before adding this config, you must grant the healthcare.fhirResources.update permission on the destination store to your project's **Cloud Healthcare Service Agent** [service account](https://cloud.google.com/healthcare/docs/how-tos/permissions-healthcare-api-gcp-products#the_cloud_healthcare_service_agent). The destination store must set enable_update_create to true. The destination store must have disable_referential_integrity set to true. If a resource cannot be de-identified, errors will be logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
	DeidentifiedStoreDestination *DeidentifiedStoreDestination `pulumi:"deidentifiedStoreDestination"`
	// Supply a FHIR resource type (such as "Patient" or "Observation"). See https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats an empty list as an intent to stream all the supported resource types in this FHIR store.
	ResourceTypes []string `pulumi:"resourceTypes"`
}

// StreamConfigInput is an input type that accepts StreamConfigArgs and StreamConfigOutput values.
// You can construct a concrete instance of `StreamConfigInput` via:
//
//	StreamConfigArgs{...}
type StreamConfigInput interface {
	pulumi.Input

	ToStreamConfigOutput() StreamConfigOutput
	ToStreamConfigOutputWithContext(context.Context) StreamConfigOutput
}

// Contains configuration for streaming FHIR export.
type StreamConfigArgs struct {
	// The destination BigQuery structure that contains both the dataset location and corresponding schema config. The output is organized in one table per resource type. The server reuses the existing tables (if any) that are named after the resource types. For example, "Patient", "Observation". When there is no existing table for a given resource type, the server attempts to create one. When a table schema doesn't align with the schema config, either because of existing incompatible schema or out of band incompatible modification, the server does not stream in new data. BigQuery imposes a 1 MB limit on streaming insert row size, therefore any resource mutation that generates more than 1 MB of BigQuery data is not streamed. One resolution in this case is to delete the incompatible table and let the server recreate one, though the newly created table only contains data after the table recreation. Results are written to BigQuery tables according to the parameters in BigQueryDestination.WriteDisposition. Different versions of the same resource are distinguishable by the meta.versionId and meta.lastUpdated columns. The operation (CREATE/UPDATE/DELETE) that results in the new version is recorded in the meta.tag. The tables contain all historical resource versions since streaming was enabled. For query convenience, the server also creates one view per table of the same name containing only the current resource version. The streamed data in the BigQuery dataset is not guaranteed to be completely unique. The combination of the id and meta.versionId columns should ideally identify a single unique row. But in rare cases, duplicates may exist. At query time, users may use the SQL select statement to keep only one of the duplicate rows given an id and meta.versionId pair. Alternatively, the server created view mentioned above also filters out duplicates. If a resource mutation cannot be streamed to BigQuery, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
	BigqueryDestination GoogleCloudHealthcareV1FhirBigQueryDestinationPtrInput `pulumi:"bigqueryDestination"`
	// The destination FHIR store for de-identified resources. After this field is added, all subsequent creates/updates/patches to the source store will be de-identified using the provided configuration and applied to the destination store. Importing resources to the source store will not trigger the streaming. If the source store already contains resources when this option is enabled, those resources will not be copied to the destination store unless they are subsequently updated. This may result in invalid references in the destination store. Before adding this config, you must grant the healthcare.fhirResources.update permission on the destination store to your project's **Cloud Healthcare Service Agent** [service account](https://cloud.google.com/healthcare/docs/how-tos/permissions-healthcare-api-gcp-products#the_cloud_healthcare_service_agent). The destination store must set enable_update_create to true. The destination store must have disable_referential_integrity set to true. If a resource cannot be de-identified, errors will be logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
	DeidentifiedStoreDestination DeidentifiedStoreDestinationPtrInput `pulumi:"deidentifiedStoreDestination"`
	// Supply a FHIR resource type (such as "Patient" or "Observation"). See https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats an empty list as an intent to stream all the supported resource types in this FHIR store.
	ResourceTypes pulumi.StringArrayInput `pulumi:"resourceTypes"`
}

func (StreamConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamConfig)(nil)).Elem()
}

func (i StreamConfigArgs) ToStreamConfigOutput() StreamConfigOutput {
	return i.ToStreamConfigOutputWithContext(context.Background())
}

func (i StreamConfigArgs) ToStreamConfigOutputWithContext(ctx context.Context) StreamConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamConfigOutput)
}

// StreamConfigArrayInput is an input type that accepts StreamConfigArray and StreamConfigArrayOutput values.
// You can construct a concrete instance of `StreamConfigArrayInput` via:
//
//	StreamConfigArray{ StreamConfigArgs{...} }
type StreamConfigArrayInput interface {
	pulumi.Input

	ToStreamConfigArrayOutput() StreamConfigArrayOutput
	ToStreamConfigArrayOutputWithContext(context.Context) StreamConfigArrayOutput
}

type StreamConfigArray []StreamConfigInput

func (StreamConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamConfig)(nil)).Elem()
}

func (i StreamConfigArray) ToStreamConfigArrayOutput() StreamConfigArrayOutput {
	return i.ToStreamConfigArrayOutputWithContext(context.Background())
}

func (i StreamConfigArray) ToStreamConfigArrayOutputWithContext(ctx context.Context) StreamConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamConfigArrayOutput)
}

// Contains configuration for streaming FHIR export.
type StreamConfigOutput struct{ *pulumi.OutputState }

func (StreamConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamConfig)(nil)).Elem()
}

func (o StreamConfigOutput) ToStreamConfigOutput() StreamConfigOutput {
	return o
}

func (o StreamConfigOutput) ToStreamConfigOutputWithContext(ctx context.Context) StreamConfigOutput {
	return o
}

// The destination BigQuery structure that contains both the dataset location and corresponding schema config. The output is organized in one table per resource type. The server reuses the existing tables (if any) that are named after the resource types. For example, "Patient", "Observation". When there is no existing table for a given resource type, the server attempts to create one. When a table schema doesn't align with the schema config, either because of existing incompatible schema or out of band incompatible modification, the server does not stream in new data. BigQuery imposes a 1 MB limit on streaming insert row size, therefore any resource mutation that generates more than 1 MB of BigQuery data is not streamed. One resolution in this case is to delete the incompatible table and let the server recreate one, though the newly created table only contains data after the table recreation. Results are written to BigQuery tables according to the parameters in BigQueryDestination.WriteDisposition. Different versions of the same resource are distinguishable by the meta.versionId and meta.lastUpdated columns. The operation (CREATE/UPDATE/DELETE) that results in the new version is recorded in the meta.tag. The tables contain all historical resource versions since streaming was enabled. For query convenience, the server also creates one view per table of the same name containing only the current resource version. The streamed data in the BigQuery dataset is not guaranteed to be completely unique. The combination of the id and meta.versionId columns should ideally identify a single unique row. But in rare cases, duplicates may exist. At query time, users may use the SQL select statement to keep only one of the duplicate rows given an id and meta.versionId pair. Alternatively, the server created view mentioned above also filters out duplicates. If a resource mutation cannot be streamed to BigQuery, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
func (o StreamConfigOutput) BigqueryDestination() GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput {
	return o.ApplyT(func(v StreamConfig) *GoogleCloudHealthcareV1FhirBigQueryDestination { return v.BigqueryDestination }).(GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput)
}

// The destination FHIR store for de-identified resources. After this field is added, all subsequent creates/updates/patches to the source store will be de-identified using the provided configuration and applied to the destination store. Importing resources to the source store will not trigger the streaming. If the source store already contains resources when this option is enabled, those resources will not be copied to the destination store unless they are subsequently updated. This may result in invalid references in the destination store. Before adding this config, you must grant the healthcare.fhirResources.update permission on the destination store to your project's **Cloud Healthcare Service Agent** [service account](https://cloud.google.com/healthcare/docs/how-tos/permissions-healthcare-api-gcp-products#the_cloud_healthcare_service_agent). The destination store must set enable_update_create to true. The destination store must have disable_referential_integrity set to true. If a resource cannot be de-identified, errors will be logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
func (o StreamConfigOutput) DeidentifiedStoreDestination() DeidentifiedStoreDestinationPtrOutput {
	return o.ApplyT(func(v StreamConfig) *DeidentifiedStoreDestination { return v.DeidentifiedStoreDestination }).(DeidentifiedStoreDestinationPtrOutput)
}

// Supply a FHIR resource type (such as "Patient" or "Observation"). See https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats an empty list as an intent to stream all the supported resource types in this FHIR store.
func (o StreamConfigOutput) ResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StreamConfig) []string { return v.ResourceTypes }).(pulumi.StringArrayOutput)
}

type StreamConfigArrayOutput struct{ *pulumi.OutputState }

func (StreamConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamConfig)(nil)).Elem()
}

func (o StreamConfigArrayOutput) ToStreamConfigArrayOutput() StreamConfigArrayOutput {
	return o
}

func (o StreamConfigArrayOutput) ToStreamConfigArrayOutputWithContext(ctx context.Context) StreamConfigArrayOutput {
	return o
}

func (o StreamConfigArrayOutput) Index(i pulumi.IntInput) StreamConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamConfig {
		return vs[0].([]StreamConfig)[vs[1].(int)]
	}).(StreamConfigOutput)
}

// Contains configuration for streaming FHIR export.
type StreamConfigResponse struct {
	// The destination BigQuery structure that contains both the dataset location and corresponding schema config. The output is organized in one table per resource type. The server reuses the existing tables (if any) that are named after the resource types. For example, "Patient", "Observation". When there is no existing table for a given resource type, the server attempts to create one. When a table schema doesn't align with the schema config, either because of existing incompatible schema or out of band incompatible modification, the server does not stream in new data. BigQuery imposes a 1 MB limit on streaming insert row size, therefore any resource mutation that generates more than 1 MB of BigQuery data is not streamed. One resolution in this case is to delete the incompatible table and let the server recreate one, though the newly created table only contains data after the table recreation. Results are written to BigQuery tables according to the parameters in BigQueryDestination.WriteDisposition. Different versions of the same resource are distinguishable by the meta.versionId and meta.lastUpdated columns. The operation (CREATE/UPDATE/DELETE) that results in the new version is recorded in the meta.tag. The tables contain all historical resource versions since streaming was enabled. For query convenience, the server also creates one view per table of the same name containing only the current resource version. The streamed data in the BigQuery dataset is not guaranteed to be completely unique. The combination of the id and meta.versionId columns should ideally identify a single unique row. But in rare cases, duplicates may exist. At query time, users may use the SQL select statement to keep only one of the duplicate rows given an id and meta.versionId pair. Alternatively, the server created view mentioned above also filters out duplicates. If a resource mutation cannot be streamed to BigQuery, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
	BigqueryDestination GoogleCloudHealthcareV1FhirBigQueryDestinationResponse `pulumi:"bigqueryDestination"`
	// The destination FHIR store for de-identified resources. After this field is added, all subsequent creates/updates/patches to the source store will be de-identified using the provided configuration and applied to the destination store. Importing resources to the source store will not trigger the streaming. If the source store already contains resources when this option is enabled, those resources will not be copied to the destination store unless they are subsequently updated. This may result in invalid references in the destination store. Before adding this config, you must grant the healthcare.fhirResources.update permission on the destination store to your project's **Cloud Healthcare Service Agent** [service account](https://cloud.google.com/healthcare/docs/how-tos/permissions-healthcare-api-gcp-products#the_cloud_healthcare_service_agent). The destination store must set enable_update_create to true. The destination store must have disable_referential_integrity set to true. If a resource cannot be de-identified, errors will be logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
	DeidentifiedStoreDestination DeidentifiedStoreDestinationResponse `pulumi:"deidentifiedStoreDestination"`
	// Supply a FHIR resource type (such as "Patient" or "Observation"). See https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats an empty list as an intent to stream all the supported resource types in this FHIR store.
	ResourceTypes []string `pulumi:"resourceTypes"`
}

// Contains configuration for streaming FHIR export.
type StreamConfigResponseOutput struct{ *pulumi.OutputState }

func (StreamConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamConfigResponse)(nil)).Elem()
}

func (o StreamConfigResponseOutput) ToStreamConfigResponseOutput() StreamConfigResponseOutput {
	return o
}

func (o StreamConfigResponseOutput) ToStreamConfigResponseOutputWithContext(ctx context.Context) StreamConfigResponseOutput {
	return o
}

// The destination BigQuery structure that contains both the dataset location and corresponding schema config. The output is organized in one table per resource type. The server reuses the existing tables (if any) that are named after the resource types. For example, "Patient", "Observation". When there is no existing table for a given resource type, the server attempts to create one. When a table schema doesn't align with the schema config, either because of existing incompatible schema or out of band incompatible modification, the server does not stream in new data. BigQuery imposes a 1 MB limit on streaming insert row size, therefore any resource mutation that generates more than 1 MB of BigQuery data is not streamed. One resolution in this case is to delete the incompatible table and let the server recreate one, though the newly created table only contains data after the table recreation. Results are written to BigQuery tables according to the parameters in BigQueryDestination.WriteDisposition. Different versions of the same resource are distinguishable by the meta.versionId and meta.lastUpdated columns. The operation (CREATE/UPDATE/DELETE) that results in the new version is recorded in the meta.tag. The tables contain all historical resource versions since streaming was enabled. For query convenience, the server also creates one view per table of the same name containing only the current resource version. The streamed data in the BigQuery dataset is not guaranteed to be completely unique. The combination of the id and meta.versionId columns should ideally identify a single unique row. But in rare cases, duplicates may exist. At query time, users may use the SQL select statement to keep only one of the duplicate rows given an id and meta.versionId pair. Alternatively, the server created view mentioned above also filters out duplicates. If a resource mutation cannot be streamed to BigQuery, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
func (o StreamConfigResponseOutput) BigqueryDestination() GoogleCloudHealthcareV1FhirBigQueryDestinationResponseOutput {
	return o.ApplyT(func(v StreamConfigResponse) GoogleCloudHealthcareV1FhirBigQueryDestinationResponse {
		return v.BigqueryDestination
	}).(GoogleCloudHealthcareV1FhirBigQueryDestinationResponseOutput)
}

// The destination FHIR store for de-identified resources. After this field is added, all subsequent creates/updates/patches to the source store will be de-identified using the provided configuration and applied to the destination store. Importing resources to the source store will not trigger the streaming. If the source store already contains resources when this option is enabled, those resources will not be copied to the destination store unless they are subsequently updated. This may result in invalid references in the destination store. Before adding this config, you must grant the healthcare.fhirResources.update permission on the destination store to your project's **Cloud Healthcare Service Agent** [service account](https://cloud.google.com/healthcare/docs/how-tos/permissions-healthcare-api-gcp-products#the_cloud_healthcare_service_agent). The destination store must set enable_update_create to true. The destination store must have disable_referential_integrity set to true. If a resource cannot be de-identified, errors will be logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
func (o StreamConfigResponseOutput) DeidentifiedStoreDestination() DeidentifiedStoreDestinationResponseOutput {
	return o.ApplyT(func(v StreamConfigResponse) DeidentifiedStoreDestinationResponse {
		return v.DeidentifiedStoreDestination
	}).(DeidentifiedStoreDestinationResponseOutput)
}

// Supply a FHIR resource type (such as "Patient" or "Observation"). See https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats an empty list as an intent to stream all the supported resource types in this FHIR store.
func (o StreamConfigResponseOutput) ResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StreamConfigResponse) []string { return v.ResourceTypes }).(pulumi.StringArrayOutput)
}

type StreamConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (StreamConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamConfigResponse)(nil)).Elem()
}

func (o StreamConfigResponseArrayOutput) ToStreamConfigResponseArrayOutput() StreamConfigResponseArrayOutput {
	return o
}

func (o StreamConfigResponseArrayOutput) ToStreamConfigResponseArrayOutputWithContext(ctx context.Context) StreamConfigResponseArrayOutput {
	return o
}

func (o StreamConfigResponseArrayOutput) Index(i pulumi.IntInput) StreamConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamConfigResponse {
		return vs[0].([]StreamConfigResponse)[vs[1].(int)]
	}).(StreamConfigResponseOutput)
}

// List of tags to be filtered.
type TagFilterList struct {
	// Tags to be filtered. Tags must be DICOM Data Elements, File Meta Elements, or Directory Structuring Elements, as defined at: http://dicom.nema.org/medical/dicom/current/output/html/part06.html#table_6-1,. They may be provided by "Keyword" or "Tag". For example "PatientID", "00100010".
	Tags []string `pulumi:"tags"`
}

// TagFilterListInput is an input type that accepts TagFilterListArgs and TagFilterListOutput values.
// You can construct a concrete instance of `TagFilterListInput` via:
//
//	TagFilterListArgs{...}
type TagFilterListInput interface {
	pulumi.Input

	ToTagFilterListOutput() TagFilterListOutput
	ToTagFilterListOutputWithContext(context.Context) TagFilterListOutput
}

// List of tags to be filtered.
type TagFilterListArgs struct {
	// Tags to be filtered. Tags must be DICOM Data Elements, File Meta Elements, or Directory Structuring Elements, as defined at: http://dicom.nema.org/medical/dicom/current/output/html/part06.html#table_6-1,. They may be provided by "Keyword" or "Tag". For example "PatientID", "00100010".
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (TagFilterListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagFilterList)(nil)).Elem()
}

func (i TagFilterListArgs) ToTagFilterListOutput() TagFilterListOutput {
	return i.ToTagFilterListOutputWithContext(context.Background())
}

func (i TagFilterListArgs) ToTagFilterListOutputWithContext(ctx context.Context) TagFilterListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagFilterListOutput)
}

func (i TagFilterListArgs) ToTagFilterListPtrOutput() TagFilterListPtrOutput {
	return i.ToTagFilterListPtrOutputWithContext(context.Background())
}

func (i TagFilterListArgs) ToTagFilterListPtrOutputWithContext(ctx context.Context) TagFilterListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagFilterListOutput).ToTagFilterListPtrOutputWithContext(ctx)
}

// TagFilterListPtrInput is an input type that accepts TagFilterListArgs, TagFilterListPtr and TagFilterListPtrOutput values.
// You can construct a concrete instance of `TagFilterListPtrInput` via:
//
//	        TagFilterListArgs{...}
//
//	or:
//
//	        nil
type TagFilterListPtrInput interface {
	pulumi.Input

	ToTagFilterListPtrOutput() TagFilterListPtrOutput
	ToTagFilterListPtrOutputWithContext(context.Context) TagFilterListPtrOutput
}

type tagFilterListPtrType TagFilterListArgs

func TagFilterListPtr(v *TagFilterListArgs) TagFilterListPtrInput {
	return (*tagFilterListPtrType)(v)
}

func (*tagFilterListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TagFilterList)(nil)).Elem()
}

func (i *tagFilterListPtrType) ToTagFilterListPtrOutput() TagFilterListPtrOutput {
	return i.ToTagFilterListPtrOutputWithContext(context.Background())
}

func (i *tagFilterListPtrType) ToTagFilterListPtrOutputWithContext(ctx context.Context) TagFilterListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagFilterListPtrOutput)
}

// List of tags to be filtered.
type TagFilterListOutput struct{ *pulumi.OutputState }

func (TagFilterListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagFilterList)(nil)).Elem()
}

func (o TagFilterListOutput) ToTagFilterListOutput() TagFilterListOutput {
	return o
}

func (o TagFilterListOutput) ToTagFilterListOutputWithContext(ctx context.Context) TagFilterListOutput {
	return o
}

func (o TagFilterListOutput) ToTagFilterListPtrOutput() TagFilterListPtrOutput {
	return o.ToTagFilterListPtrOutputWithContext(context.Background())
}

func (o TagFilterListOutput) ToTagFilterListPtrOutputWithContext(ctx context.Context) TagFilterListPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TagFilterList) *TagFilterList {
		return &v
	}).(TagFilterListPtrOutput)
}

// Tags to be filtered. Tags must be DICOM Data Elements, File Meta Elements, or Directory Structuring Elements, as defined at: http://dicom.nema.org/medical/dicom/current/output/html/part06.html#table_6-1,. They may be provided by "Keyword" or "Tag". For example "PatientID", "00100010".
func (o TagFilterListOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TagFilterList) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type TagFilterListPtrOutput struct{ *pulumi.OutputState }

func (TagFilterListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagFilterList)(nil)).Elem()
}

func (o TagFilterListPtrOutput) ToTagFilterListPtrOutput() TagFilterListPtrOutput {
	return o
}

func (o TagFilterListPtrOutput) ToTagFilterListPtrOutputWithContext(ctx context.Context) TagFilterListPtrOutput {
	return o
}

func (o TagFilterListPtrOutput) Elem() TagFilterListOutput {
	return o.ApplyT(func(v *TagFilterList) TagFilterList {
		if v != nil {
			return *v
		}
		var ret TagFilterList
		return ret
	}).(TagFilterListOutput)
}

// Tags to be filtered. Tags must be DICOM Data Elements, File Meta Elements, or Directory Structuring Elements, as defined at: http://dicom.nema.org/medical/dicom/current/output/html/part06.html#table_6-1,. They may be provided by "Keyword" or "Tag". For example "PatientID", "00100010".
func (o TagFilterListPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TagFilterList) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// List of tags to be filtered.
type TagFilterListResponse struct {
	// Tags to be filtered. Tags must be DICOM Data Elements, File Meta Elements, or Directory Structuring Elements, as defined at: http://dicom.nema.org/medical/dicom/current/output/html/part06.html#table_6-1,. They may be provided by "Keyword" or "Tag". For example "PatientID", "00100010".
	Tags []string `pulumi:"tags"`
}

// List of tags to be filtered.
type TagFilterListResponseOutput struct{ *pulumi.OutputState }

func (TagFilterListResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagFilterListResponse)(nil)).Elem()
}

func (o TagFilterListResponseOutput) ToTagFilterListResponseOutput() TagFilterListResponseOutput {
	return o
}

func (o TagFilterListResponseOutput) ToTagFilterListResponseOutputWithContext(ctx context.Context) TagFilterListResponseOutput {
	return o
}

// Tags to be filtered. Tags must be DICOM Data Elements, File Meta Elements, or Directory Structuring Elements, as defined at: http://dicom.nema.org/medical/dicom/current/output/html/part06.html#table_6-1,. They may be provided by "Keyword" or "Tag". For example "PatientID", "00100010".
func (o TagFilterListResponseOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TagFilterListResponse) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type TextConfig struct {
	// Transformations to apply to the detected data, overridden by `exclude_info_types`.
	AdditionalTransformations []InfoTypeTransformation `pulumi:"additionalTransformations"`
	// InfoTypes to skip transforming, overriding `additional_transformations`.
	ExcludeInfoTypes []string `pulumi:"excludeInfoTypes"`
	// The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.
	//
	// Deprecated: The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.
	Transformations []InfoTypeTransformation `pulumi:"transformations"`
}

// TextConfigInput is an input type that accepts TextConfigArgs and TextConfigOutput values.
// You can construct a concrete instance of `TextConfigInput` via:
//
//	TextConfigArgs{...}
type TextConfigInput interface {
	pulumi.Input

	ToTextConfigOutput() TextConfigOutput
	ToTextConfigOutputWithContext(context.Context) TextConfigOutput
}

type TextConfigArgs struct {
	// Transformations to apply to the detected data, overridden by `exclude_info_types`.
	AdditionalTransformations InfoTypeTransformationArrayInput `pulumi:"additionalTransformations"`
	// InfoTypes to skip transforming, overriding `additional_transformations`.
	ExcludeInfoTypes pulumi.StringArrayInput `pulumi:"excludeInfoTypes"`
	// The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.
	//
	// Deprecated: The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.
	Transformations InfoTypeTransformationArrayInput `pulumi:"transformations"`
}

func (TextConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextConfig)(nil)).Elem()
}

func (i TextConfigArgs) ToTextConfigOutput() TextConfigOutput {
	return i.ToTextConfigOutputWithContext(context.Background())
}

func (i TextConfigArgs) ToTextConfigOutputWithContext(ctx context.Context) TextConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextConfigOutput)
}

func (i TextConfigArgs) ToTextConfigPtrOutput() TextConfigPtrOutput {
	return i.ToTextConfigPtrOutputWithContext(context.Background())
}

func (i TextConfigArgs) ToTextConfigPtrOutputWithContext(ctx context.Context) TextConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextConfigOutput).ToTextConfigPtrOutputWithContext(ctx)
}

// TextConfigPtrInput is an input type that accepts TextConfigArgs, TextConfigPtr and TextConfigPtrOutput values.
// You can construct a concrete instance of `TextConfigPtrInput` via:
//
//	        TextConfigArgs{...}
//
//	or:
//
//	        nil
type TextConfigPtrInput interface {
	pulumi.Input

	ToTextConfigPtrOutput() TextConfigPtrOutput
	ToTextConfigPtrOutputWithContext(context.Context) TextConfigPtrOutput
}

type textConfigPtrType TextConfigArgs

func TextConfigPtr(v *TextConfigArgs) TextConfigPtrInput {
	return (*textConfigPtrType)(v)
}

func (*textConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TextConfig)(nil)).Elem()
}

func (i *textConfigPtrType) ToTextConfigPtrOutput() TextConfigPtrOutput {
	return i.ToTextConfigPtrOutputWithContext(context.Background())
}

func (i *textConfigPtrType) ToTextConfigPtrOutputWithContext(ctx context.Context) TextConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextConfigPtrOutput)
}

type TextConfigOutput struct{ *pulumi.OutputState }

func (TextConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextConfig)(nil)).Elem()
}

func (o TextConfigOutput) ToTextConfigOutput() TextConfigOutput {
	return o
}

func (o TextConfigOutput) ToTextConfigOutputWithContext(ctx context.Context) TextConfigOutput {
	return o
}

func (o TextConfigOutput) ToTextConfigPtrOutput() TextConfigPtrOutput {
	return o.ToTextConfigPtrOutputWithContext(context.Background())
}

func (o TextConfigOutput) ToTextConfigPtrOutputWithContext(ctx context.Context) TextConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TextConfig) *TextConfig {
		return &v
	}).(TextConfigPtrOutput)
}

// Transformations to apply to the detected data, overridden by `exclude_info_types`.
func (o TextConfigOutput) AdditionalTransformations() InfoTypeTransformationArrayOutput {
	return o.ApplyT(func(v TextConfig) []InfoTypeTransformation { return v.AdditionalTransformations }).(InfoTypeTransformationArrayOutput)
}

// InfoTypes to skip transforming, overriding `additional_transformations`.
func (o TextConfigOutput) ExcludeInfoTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TextConfig) []string { return v.ExcludeInfoTypes }).(pulumi.StringArrayOutput)
}

// The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.
//
// Deprecated: The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.
func (o TextConfigOutput) Transformations() InfoTypeTransformationArrayOutput {
	return o.ApplyT(func(v TextConfig) []InfoTypeTransformation { return v.Transformations }).(InfoTypeTransformationArrayOutput)
}

type TextConfigPtrOutput struct{ *pulumi.OutputState }

func (TextConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TextConfig)(nil)).Elem()
}

func (o TextConfigPtrOutput) ToTextConfigPtrOutput() TextConfigPtrOutput {
	return o
}

func (o TextConfigPtrOutput) ToTextConfigPtrOutputWithContext(ctx context.Context) TextConfigPtrOutput {
	return o
}

func (o TextConfigPtrOutput) Elem() TextConfigOutput {
	return o.ApplyT(func(v *TextConfig) TextConfig {
		if v != nil {
			return *v
		}
		var ret TextConfig
		return ret
	}).(TextConfigOutput)
}

// Transformations to apply to the detected data, overridden by `exclude_info_types`.
func (o TextConfigPtrOutput) AdditionalTransformations() InfoTypeTransformationArrayOutput {
	return o.ApplyT(func(v *TextConfig) []InfoTypeTransformation {
		if v == nil {
			return nil
		}
		return v.AdditionalTransformations
	}).(InfoTypeTransformationArrayOutput)
}

// InfoTypes to skip transforming, overriding `additional_transformations`.
func (o TextConfigPtrOutput) ExcludeInfoTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TextConfig) []string {
		if v == nil {
			return nil
		}
		return v.ExcludeInfoTypes
	}).(pulumi.StringArrayOutput)
}

// The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.
//
// Deprecated: The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.
func (o TextConfigPtrOutput) Transformations() InfoTypeTransformationArrayOutput {
	return o.ApplyT(func(v *TextConfig) []InfoTypeTransformation {
		if v == nil {
			return nil
		}
		return v.Transformations
	}).(InfoTypeTransformationArrayOutput)
}

type TextConfigResponse struct {
	// Transformations to apply to the detected data, overridden by `exclude_info_types`.
	AdditionalTransformations []InfoTypeTransformationResponse `pulumi:"additionalTransformations"`
	// InfoTypes to skip transforming, overriding `additional_transformations`.
	ExcludeInfoTypes []string `pulumi:"excludeInfoTypes"`
	// The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.
	//
	// Deprecated: The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.
	Transformations []InfoTypeTransformationResponse `pulumi:"transformations"`
}

type TextConfigResponseOutput struct{ *pulumi.OutputState }

func (TextConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextConfigResponse)(nil)).Elem()
}

func (o TextConfigResponseOutput) ToTextConfigResponseOutput() TextConfigResponseOutput {
	return o
}

func (o TextConfigResponseOutput) ToTextConfigResponseOutputWithContext(ctx context.Context) TextConfigResponseOutput {
	return o
}

// Transformations to apply to the detected data, overridden by `exclude_info_types`.
func (o TextConfigResponseOutput) AdditionalTransformations() InfoTypeTransformationResponseArrayOutput {
	return o.ApplyT(func(v TextConfigResponse) []InfoTypeTransformationResponse { return v.AdditionalTransformations }).(InfoTypeTransformationResponseArrayOutput)
}

// InfoTypes to skip transforming, overriding `additional_transformations`.
func (o TextConfigResponseOutput) ExcludeInfoTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TextConfigResponse) []string { return v.ExcludeInfoTypes }).(pulumi.StringArrayOutput)
}

// The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.
//
// Deprecated: The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.
func (o TextConfigResponseOutput) Transformations() InfoTypeTransformationResponseArrayOutput {
	return o.ApplyT(func(v TextConfigResponse) []InfoTypeTransformationResponse { return v.Transformations }).(InfoTypeTransformationResponseArrayOutput)
}

// Configuration for FHIR BigQuery time-partitioned tables.
type TimePartitioning struct {
	// Number of milliseconds for which to keep the storage for a partition.
	ExpirationMs *string `pulumi:"expirationMs"`
	// Type of partitioning.
	Type *TimePartitioningType `pulumi:"type"`
}

// TimePartitioningInput is an input type that accepts TimePartitioningArgs and TimePartitioningOutput values.
// You can construct a concrete instance of `TimePartitioningInput` via:
//
//	TimePartitioningArgs{...}
type TimePartitioningInput interface {
	pulumi.Input

	ToTimePartitioningOutput() TimePartitioningOutput
	ToTimePartitioningOutputWithContext(context.Context) TimePartitioningOutput
}

// Configuration for FHIR BigQuery time-partitioned tables.
type TimePartitioningArgs struct {
	// Number of milliseconds for which to keep the storage for a partition.
	ExpirationMs pulumi.StringPtrInput `pulumi:"expirationMs"`
	// Type of partitioning.
	Type TimePartitioningTypePtrInput `pulumi:"type"`
}

func (TimePartitioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimePartitioning)(nil)).Elem()
}

func (i TimePartitioningArgs) ToTimePartitioningOutput() TimePartitioningOutput {
	return i.ToTimePartitioningOutputWithContext(context.Background())
}

func (i TimePartitioningArgs) ToTimePartitioningOutputWithContext(ctx context.Context) TimePartitioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimePartitioningOutput)
}

func (i TimePartitioningArgs) ToTimePartitioningPtrOutput() TimePartitioningPtrOutput {
	return i.ToTimePartitioningPtrOutputWithContext(context.Background())
}

func (i TimePartitioningArgs) ToTimePartitioningPtrOutputWithContext(ctx context.Context) TimePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimePartitioningOutput).ToTimePartitioningPtrOutputWithContext(ctx)
}

// TimePartitioningPtrInput is an input type that accepts TimePartitioningArgs, TimePartitioningPtr and TimePartitioningPtrOutput values.
// You can construct a concrete instance of `TimePartitioningPtrInput` via:
//
//	        TimePartitioningArgs{...}
//
//	or:
//
//	        nil
type TimePartitioningPtrInput interface {
	pulumi.Input

	ToTimePartitioningPtrOutput() TimePartitioningPtrOutput
	ToTimePartitioningPtrOutputWithContext(context.Context) TimePartitioningPtrOutput
}

type timePartitioningPtrType TimePartitioningArgs

func TimePartitioningPtr(v *TimePartitioningArgs) TimePartitioningPtrInput {
	return (*timePartitioningPtrType)(v)
}

func (*timePartitioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimePartitioning)(nil)).Elem()
}

func (i *timePartitioningPtrType) ToTimePartitioningPtrOutput() TimePartitioningPtrOutput {
	return i.ToTimePartitioningPtrOutputWithContext(context.Background())
}

func (i *timePartitioningPtrType) ToTimePartitioningPtrOutputWithContext(ctx context.Context) TimePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimePartitioningPtrOutput)
}

// Configuration for FHIR BigQuery time-partitioned tables.
type TimePartitioningOutput struct{ *pulumi.OutputState }

func (TimePartitioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimePartitioning)(nil)).Elem()
}

func (o TimePartitioningOutput) ToTimePartitioningOutput() TimePartitioningOutput {
	return o
}

func (o TimePartitioningOutput) ToTimePartitioningOutputWithContext(ctx context.Context) TimePartitioningOutput {
	return o
}

func (o TimePartitioningOutput) ToTimePartitioningPtrOutput() TimePartitioningPtrOutput {
	return o.ToTimePartitioningPtrOutputWithContext(context.Background())
}

func (o TimePartitioningOutput) ToTimePartitioningPtrOutputWithContext(ctx context.Context) TimePartitioningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TimePartitioning) *TimePartitioning {
		return &v
	}).(TimePartitioningPtrOutput)
}

// Number of milliseconds for which to keep the storage for a partition.
func (o TimePartitioningOutput) ExpirationMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimePartitioning) *string { return v.ExpirationMs }).(pulumi.StringPtrOutput)
}

// Type of partitioning.
func (o TimePartitioningOutput) Type() TimePartitioningTypePtrOutput {
	return o.ApplyT(func(v TimePartitioning) *TimePartitioningType { return v.Type }).(TimePartitioningTypePtrOutput)
}

type TimePartitioningPtrOutput struct{ *pulumi.OutputState }

func (TimePartitioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimePartitioning)(nil)).Elem()
}

func (o TimePartitioningPtrOutput) ToTimePartitioningPtrOutput() TimePartitioningPtrOutput {
	return o
}

func (o TimePartitioningPtrOutput) ToTimePartitioningPtrOutputWithContext(ctx context.Context) TimePartitioningPtrOutput {
	return o
}

func (o TimePartitioningPtrOutput) Elem() TimePartitioningOutput {
	return o.ApplyT(func(v *TimePartitioning) TimePartitioning {
		if v != nil {
			return *v
		}
		var ret TimePartitioning
		return ret
	}).(TimePartitioningOutput)
}

// Number of milliseconds for which to keep the storage for a partition.
func (o TimePartitioningPtrOutput) ExpirationMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimePartitioning) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationMs
	}).(pulumi.StringPtrOutput)
}

// Type of partitioning.
func (o TimePartitioningPtrOutput) Type() TimePartitioningTypePtrOutput {
	return o.ApplyT(func(v *TimePartitioning) *TimePartitioningType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(TimePartitioningTypePtrOutput)
}

// Configuration for FHIR BigQuery time-partitioned tables.
type TimePartitioningResponse struct {
	// Number of milliseconds for which to keep the storage for a partition.
	ExpirationMs string `pulumi:"expirationMs"`
	// Type of partitioning.
	Type string `pulumi:"type"`
}

// Configuration for FHIR BigQuery time-partitioned tables.
type TimePartitioningResponseOutput struct{ *pulumi.OutputState }

func (TimePartitioningResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimePartitioningResponse)(nil)).Elem()
}

func (o TimePartitioningResponseOutput) ToTimePartitioningResponseOutput() TimePartitioningResponseOutput {
	return o
}

func (o TimePartitioningResponseOutput) ToTimePartitioningResponseOutputWithContext(ctx context.Context) TimePartitioningResponseOutput {
	return o
}

// Number of milliseconds for which to keep the storage for a partition.
func (o TimePartitioningResponseOutput) ExpirationMs() pulumi.StringOutput {
	return o.ApplyT(func(v TimePartitioningResponse) string { return v.ExpirationMs }).(pulumi.StringOutput)
}

// Type of partitioning.
func (o TimePartitioningResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TimePartitioningResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A type definition for some HL7v2 type (incl. Segments and Datatypes).
type Type struct {
	// The (sub) fields this type has (if not primitive).
	Fields []Field `pulumi:"fields"`
	// The name of this type. This would be the segment or datatype name. For example, "PID" or "XPN".
	Name *string `pulumi:"name"`
	// If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types.
	Primitive *TypePrimitive `pulumi:"primitive"`
}

// TypeInput is an input type that accepts TypeArgs and TypeOutput values.
// You can construct a concrete instance of `TypeInput` via:
//
//	TypeArgs{...}
type TypeInput interface {
	pulumi.Input

	ToTypeOutput() TypeOutput
	ToTypeOutputWithContext(context.Context) TypeOutput
}

// A type definition for some HL7v2 type (incl. Segments and Datatypes).
type TypeArgs struct {
	// The (sub) fields this type has (if not primitive).
	Fields FieldArrayInput `pulumi:"fields"`
	// The name of this type. This would be the segment or datatype name. For example, "PID" or "XPN".
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types.
	Primitive TypePrimitivePtrInput `pulumi:"primitive"`
}

func (TypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Type)(nil)).Elem()
}

func (i TypeArgs) ToTypeOutput() TypeOutput {
	return i.ToTypeOutputWithContext(context.Background())
}

func (i TypeArgs) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeOutput)
}

// TypeArrayInput is an input type that accepts TypeArray and TypeArrayOutput values.
// You can construct a concrete instance of `TypeArrayInput` via:
//
//	TypeArray{ TypeArgs{...} }
type TypeArrayInput interface {
	pulumi.Input

	ToTypeArrayOutput() TypeArrayOutput
	ToTypeArrayOutputWithContext(context.Context) TypeArrayOutput
}

type TypeArray []TypeInput

func (TypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Type)(nil)).Elem()
}

func (i TypeArray) ToTypeArrayOutput() TypeArrayOutput {
	return i.ToTypeArrayOutputWithContext(context.Background())
}

func (i TypeArray) ToTypeArrayOutputWithContext(ctx context.Context) TypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeArrayOutput)
}

// A type definition for some HL7v2 type (incl. Segments and Datatypes).
type TypeOutput struct{ *pulumi.OutputState }

func (TypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Type)(nil)).Elem()
}

func (o TypeOutput) ToTypeOutput() TypeOutput {
	return o
}

func (o TypeOutput) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return o
}

// The (sub) fields this type has (if not primitive).
func (o TypeOutput) Fields() FieldArrayOutput {
	return o.ApplyT(func(v Type) []Field { return v.Fields }).(FieldArrayOutput)
}

// The name of this type. This would be the segment or datatype name. For example, "PID" or "XPN".
func (o TypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Type) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types.
func (o TypeOutput) Primitive() TypePrimitivePtrOutput {
	return o.ApplyT(func(v Type) *TypePrimitive { return v.Primitive }).(TypePrimitivePtrOutput)
}

type TypeArrayOutput struct{ *pulumi.OutputState }

func (TypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Type)(nil)).Elem()
}

func (o TypeArrayOutput) ToTypeArrayOutput() TypeArrayOutput {
	return o
}

func (o TypeArrayOutput) ToTypeArrayOutputWithContext(ctx context.Context) TypeArrayOutput {
	return o
}

func (o TypeArrayOutput) Index(i pulumi.IntInput) TypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Type {
		return vs[0].([]Type)[vs[1].(int)]
	}).(TypeOutput)
}

// A type definition for some HL7v2 type (incl. Segments and Datatypes).
type TypeResponse struct {
	// The (sub) fields this type has (if not primitive).
	Fields []FieldResponse `pulumi:"fields"`
	// The name of this type. This would be the segment or datatype name. For example, "PID" or "XPN".
	Name string `pulumi:"name"`
	// If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types.
	Primitive string `pulumi:"primitive"`
}

// A type definition for some HL7v2 type (incl. Segments and Datatypes).
type TypeResponseOutput struct{ *pulumi.OutputState }

func (TypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TypeResponse)(nil)).Elem()
}

func (o TypeResponseOutput) ToTypeResponseOutput() TypeResponseOutput {
	return o
}

func (o TypeResponseOutput) ToTypeResponseOutputWithContext(ctx context.Context) TypeResponseOutput {
	return o
}

// The (sub) fields this type has (if not primitive).
func (o TypeResponseOutput) Fields() FieldResponseArrayOutput {
	return o.ApplyT(func(v TypeResponse) []FieldResponse { return v.Fields }).(FieldResponseArrayOutput)
}

// The name of this type. This would be the segment or datatype name. For example, "PID" or "XPN".
func (o TypeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TypeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types.
func (o TypeResponseOutput) Primitive() pulumi.StringOutput {
	return o.ApplyT(func(v TypeResponse) string { return v.Primitive }).(pulumi.StringOutput)
}

type TypeResponseArrayOutput struct{ *pulumi.OutputState }

func (TypeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TypeResponse)(nil)).Elem()
}

func (o TypeResponseArrayOutput) ToTypeResponseArrayOutput() TypeResponseArrayOutput {
	return o
}

func (o TypeResponseArrayOutput) ToTypeResponseArrayOutputWithContext(ctx context.Context) TypeResponseArrayOutput {
	return o
}

func (o TypeResponseArrayOutput) Index(i pulumi.IntInput) TypeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TypeResponse {
		return vs[0].([]TypeResponse)[vs[1].(int)]
	}).(TypeResponseOutput)
}

// Contains the configuration for FHIR profiles and validation.
type ValidationConfig struct {
	// Whether to disable FHIRPath validation for incoming resources. Set this to true to disable checking incoming resources for conformance against FHIRPath requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
	DisableFhirpathValidation *bool `pulumi:"disableFhirpathValidation"`
	// Whether to disable profile validation for this FHIR store. Set this to true to disable checking incoming resources for conformance against structure definitions in this FHIR store.
	DisableProfileValidation *bool `pulumi:"disableProfileValidation"`
	// Whether to disable reference type validation for incoming resources. Set this to true to disable checking incoming resources for conformance against reference type requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
	DisableReferenceTypeValidation *bool `pulumi:"disableReferenceTypeValidation"`
	// Whether to disable required fields validation for incoming resources. Set this to true to disable checking incoming resources for conformance against required fields requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
	DisableRequiredFieldValidation *bool `pulumi:"disableRequiredFieldValidation"`
	// A list of implementation guide URLs in this FHIR store that are used to configure the profiles to use for validation. For example, to use the US Core profiles for validation, set `enabled_implementation_guides` to `["http://hl7.org/fhir/us/core/ImplementationGuide/ig"]`. If `enabled_implementation_guides` is empty or omitted, then incoming resources are only required to conform to the base FHIR profiles. Otherwise, a resource must conform to at least one profile listed in the `global` property of one of the enabled ImplementationGuides. The Cloud Healthcare API does not currently enforce all of the rules in a StructureDefinition. The following rules are supported: - min/max - minValue/maxValue - maxLength - type - fixed[x] - pattern[x] on simple types - slicing, when using "value" as the discriminator type When a URL cannot be resolved (for example, in a type assertion), the server does not return an error.
	EnabledImplementationGuides []string `pulumi:"enabledImplementationGuides"`
}

// ValidationConfigInput is an input type that accepts ValidationConfigArgs and ValidationConfigOutput values.
// You can construct a concrete instance of `ValidationConfigInput` via:
//
//	ValidationConfigArgs{...}
type ValidationConfigInput interface {
	pulumi.Input

	ToValidationConfigOutput() ValidationConfigOutput
	ToValidationConfigOutputWithContext(context.Context) ValidationConfigOutput
}

// Contains the configuration for FHIR profiles and validation.
type ValidationConfigArgs struct {
	// Whether to disable FHIRPath validation for incoming resources. Set this to true to disable checking incoming resources for conformance against FHIRPath requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
	DisableFhirpathValidation pulumi.BoolPtrInput `pulumi:"disableFhirpathValidation"`
	// Whether to disable profile validation for this FHIR store. Set this to true to disable checking incoming resources for conformance against structure definitions in this FHIR store.
	DisableProfileValidation pulumi.BoolPtrInput `pulumi:"disableProfileValidation"`
	// Whether to disable reference type validation for incoming resources. Set this to true to disable checking incoming resources for conformance against reference type requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
	DisableReferenceTypeValidation pulumi.BoolPtrInput `pulumi:"disableReferenceTypeValidation"`
	// Whether to disable required fields validation for incoming resources. Set this to true to disable checking incoming resources for conformance against required fields requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
	DisableRequiredFieldValidation pulumi.BoolPtrInput `pulumi:"disableRequiredFieldValidation"`
	// A list of implementation guide URLs in this FHIR store that are used to configure the profiles to use for validation. For example, to use the US Core profiles for validation, set `enabled_implementation_guides` to `["http://hl7.org/fhir/us/core/ImplementationGuide/ig"]`. If `enabled_implementation_guides` is empty or omitted, then incoming resources are only required to conform to the base FHIR profiles. Otherwise, a resource must conform to at least one profile listed in the `global` property of one of the enabled ImplementationGuides. The Cloud Healthcare API does not currently enforce all of the rules in a StructureDefinition. The following rules are supported: - min/max - minValue/maxValue - maxLength - type - fixed[x] - pattern[x] on simple types - slicing, when using "value" as the discriminator type When a URL cannot be resolved (for example, in a type assertion), the server does not return an error.
	EnabledImplementationGuides pulumi.StringArrayInput `pulumi:"enabledImplementationGuides"`
}

func (ValidationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationConfig)(nil)).Elem()
}

func (i ValidationConfigArgs) ToValidationConfigOutput() ValidationConfigOutput {
	return i.ToValidationConfigOutputWithContext(context.Background())
}

func (i ValidationConfigArgs) ToValidationConfigOutputWithContext(ctx context.Context) ValidationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidationConfigOutput)
}

func (i ValidationConfigArgs) ToValidationConfigPtrOutput() ValidationConfigPtrOutput {
	return i.ToValidationConfigPtrOutputWithContext(context.Background())
}

func (i ValidationConfigArgs) ToValidationConfigPtrOutputWithContext(ctx context.Context) ValidationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidationConfigOutput).ToValidationConfigPtrOutputWithContext(ctx)
}

// ValidationConfigPtrInput is an input type that accepts ValidationConfigArgs, ValidationConfigPtr and ValidationConfigPtrOutput values.
// You can construct a concrete instance of `ValidationConfigPtrInput` via:
//
//	        ValidationConfigArgs{...}
//
//	or:
//
//	        nil
type ValidationConfigPtrInput interface {
	pulumi.Input

	ToValidationConfigPtrOutput() ValidationConfigPtrOutput
	ToValidationConfigPtrOutputWithContext(context.Context) ValidationConfigPtrOutput
}

type validationConfigPtrType ValidationConfigArgs

func ValidationConfigPtr(v *ValidationConfigArgs) ValidationConfigPtrInput {
	return (*validationConfigPtrType)(v)
}

func (*validationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidationConfig)(nil)).Elem()
}

func (i *validationConfigPtrType) ToValidationConfigPtrOutput() ValidationConfigPtrOutput {
	return i.ToValidationConfigPtrOutputWithContext(context.Background())
}

func (i *validationConfigPtrType) ToValidationConfigPtrOutputWithContext(ctx context.Context) ValidationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidationConfigPtrOutput)
}

// Contains the configuration for FHIR profiles and validation.
type ValidationConfigOutput struct{ *pulumi.OutputState }

func (ValidationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationConfig)(nil)).Elem()
}

func (o ValidationConfigOutput) ToValidationConfigOutput() ValidationConfigOutput {
	return o
}

func (o ValidationConfigOutput) ToValidationConfigOutputWithContext(ctx context.Context) ValidationConfigOutput {
	return o
}

func (o ValidationConfigOutput) ToValidationConfigPtrOutput() ValidationConfigPtrOutput {
	return o.ToValidationConfigPtrOutputWithContext(context.Background())
}

func (o ValidationConfigOutput) ToValidationConfigPtrOutputWithContext(ctx context.Context) ValidationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValidationConfig) *ValidationConfig {
		return &v
	}).(ValidationConfigPtrOutput)
}

// Whether to disable FHIRPath validation for incoming resources. Set this to true to disable checking incoming resources for conformance against FHIRPath requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
func (o ValidationConfigOutput) DisableFhirpathValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ValidationConfig) *bool { return v.DisableFhirpathValidation }).(pulumi.BoolPtrOutput)
}

// Whether to disable profile validation for this FHIR store. Set this to true to disable checking incoming resources for conformance against structure definitions in this FHIR store.
func (o ValidationConfigOutput) DisableProfileValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ValidationConfig) *bool { return v.DisableProfileValidation }).(pulumi.BoolPtrOutput)
}

// Whether to disable reference type validation for incoming resources. Set this to true to disable checking incoming resources for conformance against reference type requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
func (o ValidationConfigOutput) DisableReferenceTypeValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ValidationConfig) *bool { return v.DisableReferenceTypeValidation }).(pulumi.BoolPtrOutput)
}

// Whether to disable required fields validation for incoming resources. Set this to true to disable checking incoming resources for conformance against required fields requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
func (o ValidationConfigOutput) DisableRequiredFieldValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ValidationConfig) *bool { return v.DisableRequiredFieldValidation }).(pulumi.BoolPtrOutput)
}

// A list of implementation guide URLs in this FHIR store that are used to configure the profiles to use for validation. For example, to use the US Core profiles for validation, set `enabled_implementation_guides` to `["http://hl7.org/fhir/us/core/ImplementationGuide/ig"]`. If `enabled_implementation_guides` is empty or omitted, then incoming resources are only required to conform to the base FHIR profiles. Otherwise, a resource must conform to at least one profile listed in the `global` property of one of the enabled ImplementationGuides. The Cloud Healthcare API does not currently enforce all of the rules in a StructureDefinition. The following rules are supported: - min/max - minValue/maxValue - maxLength - type - fixed[x] - pattern[x] on simple types - slicing, when using "value" as the discriminator type When a URL cannot be resolved (for example, in a type assertion), the server does not return an error.
func (o ValidationConfigOutput) EnabledImplementationGuides() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ValidationConfig) []string { return v.EnabledImplementationGuides }).(pulumi.StringArrayOutput)
}

type ValidationConfigPtrOutput struct{ *pulumi.OutputState }

func (ValidationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidationConfig)(nil)).Elem()
}

func (o ValidationConfigPtrOutput) ToValidationConfigPtrOutput() ValidationConfigPtrOutput {
	return o
}

func (o ValidationConfigPtrOutput) ToValidationConfigPtrOutputWithContext(ctx context.Context) ValidationConfigPtrOutput {
	return o
}

func (o ValidationConfigPtrOutput) Elem() ValidationConfigOutput {
	return o.ApplyT(func(v *ValidationConfig) ValidationConfig {
		if v != nil {
			return *v
		}
		var ret ValidationConfig
		return ret
	}).(ValidationConfigOutput)
}

// Whether to disable FHIRPath validation for incoming resources. Set this to true to disable checking incoming resources for conformance against FHIRPath requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
func (o ValidationConfigPtrOutput) DisableFhirpathValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ValidationConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DisableFhirpathValidation
	}).(pulumi.BoolPtrOutput)
}

// Whether to disable profile validation for this FHIR store. Set this to true to disable checking incoming resources for conformance against structure definitions in this FHIR store.
func (o ValidationConfigPtrOutput) DisableProfileValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ValidationConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DisableProfileValidation
	}).(pulumi.BoolPtrOutput)
}

// Whether to disable reference type validation for incoming resources. Set this to true to disable checking incoming resources for conformance against reference type requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
func (o ValidationConfigPtrOutput) DisableReferenceTypeValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ValidationConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DisableReferenceTypeValidation
	}).(pulumi.BoolPtrOutput)
}

// Whether to disable required fields validation for incoming resources. Set this to true to disable checking incoming resources for conformance against required fields requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
func (o ValidationConfigPtrOutput) DisableRequiredFieldValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ValidationConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DisableRequiredFieldValidation
	}).(pulumi.BoolPtrOutput)
}

// A list of implementation guide URLs in this FHIR store that are used to configure the profiles to use for validation. For example, to use the US Core profiles for validation, set `enabled_implementation_guides` to `["http://hl7.org/fhir/us/core/ImplementationGuide/ig"]`. If `enabled_implementation_guides` is empty or omitted, then incoming resources are only required to conform to the base FHIR profiles. Otherwise, a resource must conform to at least one profile listed in the `global` property of one of the enabled ImplementationGuides. The Cloud Healthcare API does not currently enforce all of the rules in a StructureDefinition. The following rules are supported: - min/max - minValue/maxValue - maxLength - type - fixed[x] - pattern[x] on simple types - slicing, when using "value" as the discriminator type When a URL cannot be resolved (for example, in a type assertion), the server does not return an error.
func (o ValidationConfigPtrOutput) EnabledImplementationGuides() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ValidationConfig) []string {
		if v == nil {
			return nil
		}
		return v.EnabledImplementationGuides
	}).(pulumi.StringArrayOutput)
}

// Contains the configuration for FHIR profiles and validation.
type ValidationConfigResponse struct {
	// Whether to disable FHIRPath validation for incoming resources. Set this to true to disable checking incoming resources for conformance against FHIRPath requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
	DisableFhirpathValidation bool `pulumi:"disableFhirpathValidation"`
	// Whether to disable profile validation for this FHIR store. Set this to true to disable checking incoming resources for conformance against structure definitions in this FHIR store.
	DisableProfileValidation bool `pulumi:"disableProfileValidation"`
	// Whether to disable reference type validation for incoming resources. Set this to true to disable checking incoming resources for conformance against reference type requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
	DisableReferenceTypeValidation bool `pulumi:"disableReferenceTypeValidation"`
	// Whether to disable required fields validation for incoming resources. Set this to true to disable checking incoming resources for conformance against required fields requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
	DisableRequiredFieldValidation bool `pulumi:"disableRequiredFieldValidation"`
	// A list of implementation guide URLs in this FHIR store that are used to configure the profiles to use for validation. For example, to use the US Core profiles for validation, set `enabled_implementation_guides` to `["http://hl7.org/fhir/us/core/ImplementationGuide/ig"]`. If `enabled_implementation_guides` is empty or omitted, then incoming resources are only required to conform to the base FHIR profiles. Otherwise, a resource must conform to at least one profile listed in the `global` property of one of the enabled ImplementationGuides. The Cloud Healthcare API does not currently enforce all of the rules in a StructureDefinition. The following rules are supported: - min/max - minValue/maxValue - maxLength - type - fixed[x] - pattern[x] on simple types - slicing, when using "value" as the discriminator type When a URL cannot be resolved (for example, in a type assertion), the server does not return an error.
	EnabledImplementationGuides []string `pulumi:"enabledImplementationGuides"`
}

// Contains the configuration for FHIR profiles and validation.
type ValidationConfigResponseOutput struct{ *pulumi.OutputState }

func (ValidationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationConfigResponse)(nil)).Elem()
}

func (o ValidationConfigResponseOutput) ToValidationConfigResponseOutput() ValidationConfigResponseOutput {
	return o
}

func (o ValidationConfigResponseOutput) ToValidationConfigResponseOutputWithContext(ctx context.Context) ValidationConfigResponseOutput {
	return o
}

// Whether to disable FHIRPath validation for incoming resources. Set this to true to disable checking incoming resources for conformance against FHIRPath requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
func (o ValidationConfigResponseOutput) DisableFhirpathValidation() pulumi.BoolOutput {
	return o.ApplyT(func(v ValidationConfigResponse) bool { return v.DisableFhirpathValidation }).(pulumi.BoolOutput)
}

// Whether to disable profile validation for this FHIR store. Set this to true to disable checking incoming resources for conformance against structure definitions in this FHIR store.
func (o ValidationConfigResponseOutput) DisableProfileValidation() pulumi.BoolOutput {
	return o.ApplyT(func(v ValidationConfigResponse) bool { return v.DisableProfileValidation }).(pulumi.BoolOutput)
}

// Whether to disable reference type validation for incoming resources. Set this to true to disable checking incoming resources for conformance against reference type requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
func (o ValidationConfigResponseOutput) DisableReferenceTypeValidation() pulumi.BoolOutput {
	return o.ApplyT(func(v ValidationConfigResponse) bool { return v.DisableReferenceTypeValidation }).(pulumi.BoolOutput)
}

// Whether to disable required fields validation for incoming resources. Set this to true to disable checking incoming resources for conformance against required fields requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.
func (o ValidationConfigResponseOutput) DisableRequiredFieldValidation() pulumi.BoolOutput {
	return o.ApplyT(func(v ValidationConfigResponse) bool { return v.DisableRequiredFieldValidation }).(pulumi.BoolOutput)
}

// A list of implementation guide URLs in this FHIR store that are used to configure the profiles to use for validation. For example, to use the US Core profiles for validation, set `enabled_implementation_guides` to `["http://hl7.org/fhir/us/core/ImplementationGuide/ig"]`. If `enabled_implementation_guides` is empty or omitted, then incoming resources are only required to conform to the base FHIR profiles. Otherwise, a resource must conform to at least one profile listed in the `global` property of one of the enabled ImplementationGuides. The Cloud Healthcare API does not currently enforce all of the rules in a StructureDefinition. The following rules are supported: - min/max - minValue/maxValue - maxLength - type - fixed[x] - pattern[x] on simple types - slicing, when using "value" as the discriminator type When a URL cannot be resolved (for example, in a type assertion), the server does not return an error.
func (o ValidationConfigResponseOutput) EnabledImplementationGuides() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ValidationConfigResponse) []string { return v.EnabledImplementationGuides }).(pulumi.StringArrayOutput)
}

// Describes a selector for extracting and matching an MSH field to a value.
type VersionSource struct {
	// The field to extract from the MSH segment. For example, "3.1" or "18[1].1".
	MshField *string `pulumi:"mshField"`
	// The value to match with the field. For example, "My Application Name" or "2.3".
	Value *string `pulumi:"value"`
}

// VersionSourceInput is an input type that accepts VersionSourceArgs and VersionSourceOutput values.
// You can construct a concrete instance of `VersionSourceInput` via:
//
//	VersionSourceArgs{...}
type VersionSourceInput interface {
	pulumi.Input

	ToVersionSourceOutput() VersionSourceOutput
	ToVersionSourceOutputWithContext(context.Context) VersionSourceOutput
}

// Describes a selector for extracting and matching an MSH field to a value.
type VersionSourceArgs struct {
	// The field to extract from the MSH segment. For example, "3.1" or "18[1].1".
	MshField pulumi.StringPtrInput `pulumi:"mshField"`
	// The value to match with the field. For example, "My Application Name" or "2.3".
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (VersionSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VersionSource)(nil)).Elem()
}

func (i VersionSourceArgs) ToVersionSourceOutput() VersionSourceOutput {
	return i.ToVersionSourceOutputWithContext(context.Background())
}

func (i VersionSourceArgs) ToVersionSourceOutputWithContext(ctx context.Context) VersionSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionSourceOutput)
}

// VersionSourceArrayInput is an input type that accepts VersionSourceArray and VersionSourceArrayOutput values.
// You can construct a concrete instance of `VersionSourceArrayInput` via:
//
//	VersionSourceArray{ VersionSourceArgs{...} }
type VersionSourceArrayInput interface {
	pulumi.Input

	ToVersionSourceArrayOutput() VersionSourceArrayOutput
	ToVersionSourceArrayOutputWithContext(context.Context) VersionSourceArrayOutput
}

type VersionSourceArray []VersionSourceInput

func (VersionSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VersionSource)(nil)).Elem()
}

func (i VersionSourceArray) ToVersionSourceArrayOutput() VersionSourceArrayOutput {
	return i.ToVersionSourceArrayOutputWithContext(context.Background())
}

func (i VersionSourceArray) ToVersionSourceArrayOutputWithContext(ctx context.Context) VersionSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionSourceArrayOutput)
}

// Describes a selector for extracting and matching an MSH field to a value.
type VersionSourceOutput struct{ *pulumi.OutputState }

func (VersionSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VersionSource)(nil)).Elem()
}

func (o VersionSourceOutput) ToVersionSourceOutput() VersionSourceOutput {
	return o
}

func (o VersionSourceOutput) ToVersionSourceOutputWithContext(ctx context.Context) VersionSourceOutput {
	return o
}

// The field to extract from the MSH segment. For example, "3.1" or "18[1].1".
func (o VersionSourceOutput) MshField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VersionSource) *string { return v.MshField }).(pulumi.StringPtrOutput)
}

// The value to match with the field. For example, "My Application Name" or "2.3".
func (o VersionSourceOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VersionSource) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type VersionSourceArrayOutput struct{ *pulumi.OutputState }

func (VersionSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VersionSource)(nil)).Elem()
}

func (o VersionSourceArrayOutput) ToVersionSourceArrayOutput() VersionSourceArrayOutput {
	return o
}

func (o VersionSourceArrayOutput) ToVersionSourceArrayOutputWithContext(ctx context.Context) VersionSourceArrayOutput {
	return o
}

func (o VersionSourceArrayOutput) Index(i pulumi.IntInput) VersionSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VersionSource {
		return vs[0].([]VersionSource)[vs[1].(int)]
	}).(VersionSourceOutput)
}

// Describes a selector for extracting and matching an MSH field to a value.
type VersionSourceResponse struct {
	// The field to extract from the MSH segment. For example, "3.1" or "18[1].1".
	MshField string `pulumi:"mshField"`
	// The value to match with the field. For example, "My Application Name" or "2.3".
	Value string `pulumi:"value"`
}

// Describes a selector for extracting and matching an MSH field to a value.
type VersionSourceResponseOutput struct{ *pulumi.OutputState }

func (VersionSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VersionSourceResponse)(nil)).Elem()
}

func (o VersionSourceResponseOutput) ToVersionSourceResponseOutput() VersionSourceResponseOutput {
	return o
}

func (o VersionSourceResponseOutput) ToVersionSourceResponseOutputWithContext(ctx context.Context) VersionSourceResponseOutput {
	return o
}

// The field to extract from the MSH segment. For example, "3.1" or "18[1].1".
func (o VersionSourceResponseOutput) MshField() pulumi.StringOutput {
	return o.ApplyT(func(v VersionSourceResponse) string { return v.MshField }).(pulumi.StringOutput)
}

// The value to match with the field. For example, "My Application Name" or "2.3".
func (o VersionSourceResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VersionSourceResponse) string { return v.Value }).(pulumi.StringOutput)
}

type VersionSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (VersionSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VersionSourceResponse)(nil)).Elem()
}

func (o VersionSourceResponseArrayOutput) ToVersionSourceResponseArrayOutput() VersionSourceResponseArrayOutput {
	return o
}

func (o VersionSourceResponseArrayOutput) ToVersionSourceResponseArrayOutputWithContext(ctx context.Context) VersionSourceResponseArrayOutput {
	return o
}

func (o VersionSourceResponseArrayOutput) Index(i pulumi.IntInput) VersionSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VersionSourceResponse {
		return vs[0].([]VersionSourceResponse)[vs[1].(int)]
	}).(VersionSourceResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttributeInput)(nil)).Elem(), AttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttributeArrayInput)(nil)).Elem(), AttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CharacterMaskConfigInput)(nil)).Elem(), CharacterMaskConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CharacterMaskConfigPtrInput)(nil)).Elem(), CharacterMaskConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoHashConfigInput)(nil)).Elem(), CryptoHashConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoHashConfigPtrInput)(nil)).Elem(), CryptoHashConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DateShiftConfigInput)(nil)).Elem(), DateShiftConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DateShiftConfigPtrInput)(nil)).Elem(), DateShiftConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeidentifiedStoreDestinationInput)(nil)).Elem(), DeidentifiedStoreDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeidentifiedStoreDestinationPtrInput)(nil)).Elem(), DeidentifiedStoreDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeidentifyConfigInput)(nil)).Elem(), DeidentifyConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeidentifyConfigPtrInput)(nil)).Elem(), DeidentifyConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DicomConfigInput)(nil)).Elem(), DicomConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DicomConfigPtrInput)(nil)).Elem(), DicomConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FhirConfigInput)(nil)).Elem(), FhirConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FhirConfigPtrInput)(nil)).Elem(), FhirConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FhirNotificationConfigInput)(nil)).Elem(), FhirNotificationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FhirNotificationConfigArrayInput)(nil)).Elem(), FhirNotificationConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldInput)(nil)).Elem(), FieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldArrayInput)(nil)).Elem(), FieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldMetadataInput)(nil)).Elem(), FieldMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FieldMetadataArrayInput)(nil)).Elem(), FieldMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudHealthcareV1ConsentPolicyInput)(nil)).Elem(), GoogleCloudHealthcareV1ConsentPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudHealthcareV1ConsentPolicyArrayInput)(nil)).Elem(), GoogleCloudHealthcareV1ConsentPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudHealthcareV1DicomBigQueryDestinationInput)(nil)).Elem(), GoogleCloudHealthcareV1DicomBigQueryDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudHealthcareV1DicomBigQueryDestinationPtrInput)(nil)).Elem(), GoogleCloudHealthcareV1DicomBigQueryDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudHealthcareV1DicomStreamConfigInput)(nil)).Elem(), GoogleCloudHealthcareV1DicomStreamConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudHealthcareV1DicomStreamConfigArrayInput)(nil)).Elem(), GoogleCloudHealthcareV1DicomStreamConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudHealthcareV1FhirBigQueryDestinationInput)(nil)).Elem(), GoogleCloudHealthcareV1FhirBigQueryDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudHealthcareV1FhirBigQueryDestinationPtrInput)(nil)).Elem(), GoogleCloudHealthcareV1FhirBigQueryDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupOrSegmentInput)(nil)).Elem(), GroupOrSegmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupOrSegmentArrayInput)(nil)).Elem(), GroupOrSegmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Hl7SchemaConfigInput)(nil)).Elem(), Hl7SchemaConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Hl7SchemaConfigArrayInput)(nil)).Elem(), Hl7SchemaConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Hl7TypesConfigInput)(nil)).Elem(), Hl7TypesConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Hl7TypesConfigArrayInput)(nil)).Elem(), Hl7TypesConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Hl7V2NotificationConfigInput)(nil)).Elem(), Hl7V2NotificationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Hl7V2NotificationConfigArrayInput)(nil)).Elem(), Hl7V2NotificationConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), ImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePtrInput)(nil)).Elem(), ImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageArrayInput)(nil)).Elem(), ImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageConfigInput)(nil)).Elem(), ImageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageConfigPtrInput)(nil)).Elem(), ImageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfoTypeTransformationInput)(nil)).Elem(), InfoTypeTransformationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InfoTypeTransformationArrayInput)(nil)).Elem(), InfoTypeTransformationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KmsWrappedCryptoKeyInput)(nil)).Elem(), KmsWrappedCryptoKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KmsWrappedCryptoKeyPtrInput)(nil)).Elem(), KmsWrappedCryptoKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationConfigInput)(nil)).Elem(), NotificationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationConfigPtrInput)(nil)).Elem(), NotificationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParserConfigInput)(nil)).Elem(), ParserConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParserConfigPtrInput)(nil)).Elem(), ParserConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PatientIdInput)(nil)).Elem(), PatientIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PatientIdArrayInput)(nil)).Elem(), PatientIdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedactConfigInput)(nil)).Elem(), RedactConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedactConfigPtrInput)(nil)).Elem(), RedactConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplaceWithInfoTypeConfigInput)(nil)).Elem(), ReplaceWithInfoTypeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplaceWithInfoTypeConfigPtrInput)(nil)).Elem(), ReplaceWithInfoTypeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaConfigInput)(nil)).Elem(), SchemaConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaConfigPtrInput)(nil)).Elem(), SchemaConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaGroupInput)(nil)).Elem(), SchemaGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaGroupPtrInput)(nil)).Elem(), SchemaGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaPackageInput)(nil)).Elem(), SchemaPackageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaPackagePtrInput)(nil)).Elem(), SchemaPackageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaSegmentInput)(nil)).Elem(), SchemaSegmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaSegmentPtrInput)(nil)).Elem(), SchemaSegmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchematizedDataInput)(nil)).Elem(), SchematizedDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchematizedDataPtrInput)(nil)).Elem(), SchematizedDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignatureInput)(nil)).Elem(), SignatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SignaturePtrInput)(nil)).Elem(), SignatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamConfigInput)(nil)).Elem(), StreamConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamConfigArrayInput)(nil)).Elem(), StreamConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagFilterListInput)(nil)).Elem(), TagFilterListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagFilterListPtrInput)(nil)).Elem(), TagFilterListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TextConfigInput)(nil)).Elem(), TextConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TextConfigPtrInput)(nil)).Elem(), TextConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimePartitioningInput)(nil)).Elem(), TimePartitioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimePartitioningPtrInput)(nil)).Elem(), TimePartitioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypeInput)(nil)).Elem(), TypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypeArrayInput)(nil)).Elem(), TypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidationConfigInput)(nil)).Elem(), ValidationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidationConfigPtrInput)(nil)).Elem(), ValidationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionSourceInput)(nil)).Elem(), VersionSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VersionSourceArrayInput)(nil)).Elem(), VersionSourceArray{})
	pulumi.RegisterOutputType(AttributeOutput{})
	pulumi.RegisterOutputType(AttributeArrayOutput{})
	pulumi.RegisterOutputType(AttributeResponseOutput{})
	pulumi.RegisterOutputType(AttributeResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(CharacterMaskConfigOutput{})
	pulumi.RegisterOutputType(CharacterMaskConfigPtrOutput{})
	pulumi.RegisterOutputType(CharacterMaskConfigResponseOutput{})
	pulumi.RegisterOutputType(CryptoHashConfigOutput{})
	pulumi.RegisterOutputType(CryptoHashConfigPtrOutput{})
	pulumi.RegisterOutputType(CryptoHashConfigResponseOutput{})
	pulumi.RegisterOutputType(DateShiftConfigOutput{})
	pulumi.RegisterOutputType(DateShiftConfigPtrOutput{})
	pulumi.RegisterOutputType(DateShiftConfigResponseOutput{})
	pulumi.RegisterOutputType(DeidentifiedStoreDestinationOutput{})
	pulumi.RegisterOutputType(DeidentifiedStoreDestinationPtrOutput{})
	pulumi.RegisterOutputType(DeidentifiedStoreDestinationResponseOutput{})
	pulumi.RegisterOutputType(DeidentifyConfigOutput{})
	pulumi.RegisterOutputType(DeidentifyConfigPtrOutput{})
	pulumi.RegisterOutputType(DeidentifyConfigResponseOutput{})
	pulumi.RegisterOutputType(DicomConfigOutput{})
	pulumi.RegisterOutputType(DicomConfigPtrOutput{})
	pulumi.RegisterOutputType(DicomConfigResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(FhirConfigOutput{})
	pulumi.RegisterOutputType(FhirConfigPtrOutput{})
	pulumi.RegisterOutputType(FhirConfigResponseOutput{})
	pulumi.RegisterOutputType(FhirNotificationConfigOutput{})
	pulumi.RegisterOutputType(FhirNotificationConfigArrayOutput{})
	pulumi.RegisterOutputType(FhirNotificationConfigResponseOutput{})
	pulumi.RegisterOutputType(FhirNotificationConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(FieldOutput{})
	pulumi.RegisterOutputType(FieldArrayOutput{})
	pulumi.RegisterOutputType(FieldMetadataOutput{})
	pulumi.RegisterOutputType(FieldMetadataArrayOutput{})
	pulumi.RegisterOutputType(FieldMetadataResponseOutput{})
	pulumi.RegisterOutputType(FieldMetadataResponseArrayOutput{})
	pulumi.RegisterOutputType(FieldResponseOutput{})
	pulumi.RegisterOutputType(FieldResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudHealthcareV1ConsentPolicyOutput{})
	pulumi.RegisterOutputType(GoogleCloudHealthcareV1ConsentPolicyArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudHealthcareV1ConsentPolicyResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudHealthcareV1ConsentPolicyResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudHealthcareV1DicomBigQueryDestinationOutput{})
	pulumi.RegisterOutputType(GoogleCloudHealthcareV1DicomBigQueryDestinationPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudHealthcareV1DicomBigQueryDestinationResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudHealthcareV1DicomStreamConfigOutput{})
	pulumi.RegisterOutputType(GoogleCloudHealthcareV1DicomStreamConfigArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudHealthcareV1DicomStreamConfigResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudHealthcareV1DicomStreamConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudHealthcareV1FhirBigQueryDestinationOutput{})
	pulumi.RegisterOutputType(GoogleCloudHealthcareV1FhirBigQueryDestinationPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudHealthcareV1FhirBigQueryDestinationResponseOutput{})
	pulumi.RegisterOutputType(GroupOrSegmentOutput{})
	pulumi.RegisterOutputType(GroupOrSegmentArrayOutput{})
	pulumi.RegisterOutputType(GroupOrSegmentResponseOutput{})
	pulumi.RegisterOutputType(GroupOrSegmentResponseArrayOutput{})
	pulumi.RegisterOutputType(Hl7SchemaConfigOutput{})
	pulumi.RegisterOutputType(Hl7SchemaConfigArrayOutput{})
	pulumi.RegisterOutputType(Hl7SchemaConfigResponseOutput{})
	pulumi.RegisterOutputType(Hl7SchemaConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(Hl7TypesConfigOutput{})
	pulumi.RegisterOutputType(Hl7TypesConfigArrayOutput{})
	pulumi.RegisterOutputType(Hl7TypesConfigResponseOutput{})
	pulumi.RegisterOutputType(Hl7TypesConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(Hl7V2NotificationConfigOutput{})
	pulumi.RegisterOutputType(Hl7V2NotificationConfigArrayOutput{})
	pulumi.RegisterOutputType(Hl7V2NotificationConfigResponseOutput{})
	pulumi.RegisterOutputType(Hl7V2NotificationConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImagePtrOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageConfigOutput{})
	pulumi.RegisterOutputType(ImageConfigPtrOutput{})
	pulumi.RegisterOutputType(ImageConfigResponseOutput{})
	pulumi.RegisterOutputType(ImageResponseOutput{})
	pulumi.RegisterOutputType(ImageResponseArrayOutput{})
	pulumi.RegisterOutputType(InfoTypeTransformationOutput{})
	pulumi.RegisterOutputType(InfoTypeTransformationArrayOutput{})
	pulumi.RegisterOutputType(InfoTypeTransformationResponseOutput{})
	pulumi.RegisterOutputType(InfoTypeTransformationResponseArrayOutput{})
	pulumi.RegisterOutputType(KmsWrappedCryptoKeyOutput{})
	pulumi.RegisterOutputType(KmsWrappedCryptoKeyPtrOutput{})
	pulumi.RegisterOutputType(KmsWrappedCryptoKeyResponseOutput{})
	pulumi.RegisterOutputType(NotificationConfigOutput{})
	pulumi.RegisterOutputType(NotificationConfigPtrOutput{})
	pulumi.RegisterOutputType(NotificationConfigResponseOutput{})
	pulumi.RegisterOutputType(ParsedDataResponseOutput{})
	pulumi.RegisterOutputType(ParserConfigOutput{})
	pulumi.RegisterOutputType(ParserConfigPtrOutput{})
	pulumi.RegisterOutputType(ParserConfigResponseOutput{})
	pulumi.RegisterOutputType(PatientIdOutput{})
	pulumi.RegisterOutputType(PatientIdArrayOutput{})
	pulumi.RegisterOutputType(PatientIdResponseOutput{})
	pulumi.RegisterOutputType(PatientIdResponseArrayOutput{})
	pulumi.RegisterOutputType(RedactConfigOutput{})
	pulumi.RegisterOutputType(RedactConfigPtrOutput{})
	pulumi.RegisterOutputType(RedactConfigResponseOutput{})
	pulumi.RegisterOutputType(ReplaceWithInfoTypeConfigOutput{})
	pulumi.RegisterOutputType(ReplaceWithInfoTypeConfigPtrOutput{})
	pulumi.RegisterOutputType(ReplaceWithInfoTypeConfigResponseOutput{})
	pulumi.RegisterOutputType(SchemaConfigOutput{})
	pulumi.RegisterOutputType(SchemaConfigPtrOutput{})
	pulumi.RegisterOutputType(SchemaConfigResponseOutput{})
	pulumi.RegisterOutputType(SchemaGroupOutput{})
	pulumi.RegisterOutputType(SchemaGroupPtrOutput{})
	pulumi.RegisterOutputType(SchemaGroupResponseOutput{})
	pulumi.RegisterOutputType(SchemaPackageOutput{})
	pulumi.RegisterOutputType(SchemaPackagePtrOutput{})
	pulumi.RegisterOutputType(SchemaPackageResponseOutput{})
	pulumi.RegisterOutputType(SchemaSegmentOutput{})
	pulumi.RegisterOutputType(SchemaSegmentPtrOutput{})
	pulumi.RegisterOutputType(SchemaSegmentResponseOutput{})
	pulumi.RegisterOutputType(SchematizedDataOutput{})
	pulumi.RegisterOutputType(SchematizedDataPtrOutput{})
	pulumi.RegisterOutputType(SchematizedDataResponseOutput{})
	pulumi.RegisterOutputType(SegmentResponseOutput{})
	pulumi.RegisterOutputType(SegmentResponseArrayOutput{})
	pulumi.RegisterOutputType(SignatureOutput{})
	pulumi.RegisterOutputType(SignaturePtrOutput{})
	pulumi.RegisterOutputType(SignatureResponseOutput{})
	pulumi.RegisterOutputType(StreamConfigOutput{})
	pulumi.RegisterOutputType(StreamConfigArrayOutput{})
	pulumi.RegisterOutputType(StreamConfigResponseOutput{})
	pulumi.RegisterOutputType(StreamConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(TagFilterListOutput{})
	pulumi.RegisterOutputType(TagFilterListPtrOutput{})
	pulumi.RegisterOutputType(TagFilterListResponseOutput{})
	pulumi.RegisterOutputType(TextConfigOutput{})
	pulumi.RegisterOutputType(TextConfigPtrOutput{})
	pulumi.RegisterOutputType(TextConfigResponseOutput{})
	pulumi.RegisterOutputType(TimePartitioningOutput{})
	pulumi.RegisterOutputType(TimePartitioningPtrOutput{})
	pulumi.RegisterOutputType(TimePartitioningResponseOutput{})
	pulumi.RegisterOutputType(TypeOutput{})
	pulumi.RegisterOutputType(TypeArrayOutput{})
	pulumi.RegisterOutputType(TypeResponseOutput{})
	pulumi.RegisterOutputType(TypeResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidationConfigOutput{})
	pulumi.RegisterOutputType(ValidationConfigPtrOutput{})
	pulumi.RegisterOutputType(ValidationConfigResponseOutput{})
	pulumi.RegisterOutputType(VersionSourceOutput{})
	pulumi.RegisterOutputType(VersionSourceArrayOutput{})
	pulumi.RegisterOutputType(VersionSourceResponseOutput{})
	pulumi.RegisterOutputType(VersionSourceResponseArrayOutput{})
}
