// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new HL7v2 store within the parent dataset.
type DatasetHl7V2Store struct {
	pulumi.CustomResourceState

	// User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource name of the HL7v2 store, of the form `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of notification configs. Each configuration uses a filter to determine whether to publish a message (both Ingest & Create) on the corresponding notification destination. Only the message name is sent as part of the notification. Supplied by the client.
	NotificationConfigs Hl7V2NotificationConfigResponseArrayOutput `pulumi:"notificationConfigs"`
	// The configuration for the parser. It determines how the server parses the messages.
	ParserConfig ParserConfigResponseOutput `pulumi:"parserConfig"`
	// Determines whether to reject duplicate messages. A duplicate message is a message with the same raw bytes as a message that has already been ingested/created in this HL7v2 store. The default value is false, meaning that the store accepts the duplicate messages and it also returns the same ACK message in the IngestMessageResponse as has been returned previously. Note that only one resource is created in the store. When this field is set to true, CreateMessage/IngestMessage requests with a duplicate message will be rejected by the store, and IngestMessageErrorDetail returns a NACK message upon rejection.
	RejectDuplicateMessage pulumi.BoolOutput `pulumi:"rejectDuplicateMessage"`
}

// NewDatasetHl7V2Store registers a new resource with the given unique name, arguments, and options.
func NewDatasetHl7V2Store(ctx *pulumi.Context,
	name string, args *DatasetHl7V2StoreArgs, opts ...pulumi.ResourceOption) (*DatasetHl7V2Store, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetsId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetsId'")
	}
	if args.Hl7V2StoresId == nil {
		return nil, errors.New("invalid value for required argument 'Hl7V2StoresId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource DatasetHl7V2Store
	err := ctx.RegisterResource("google-cloud:healthcare/v1:DatasetHl7V2Store", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetHl7V2Store gets an existing DatasetHl7V2Store resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetHl7V2Store(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetHl7V2StoreState, opts ...pulumi.ResourceOption) (*DatasetHl7V2Store, error) {
	var resource DatasetHl7V2Store
	err := ctx.ReadResource("google-cloud:healthcare/v1:DatasetHl7V2Store", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetHl7V2Store resources.
type datasetHl7V2StoreState struct {
	// User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
	Labels map[string]string `pulumi:"labels"`
	// Resource name of the HL7v2 store, of the form `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
	Name *string `pulumi:"name"`
	// A list of notification configs. Each configuration uses a filter to determine whether to publish a message (both Ingest & Create) on the corresponding notification destination. Only the message name is sent as part of the notification. Supplied by the client.
	NotificationConfigs []Hl7V2NotificationConfigResponse `pulumi:"notificationConfigs"`
	// The configuration for the parser. It determines how the server parses the messages.
	ParserConfig *ParserConfigResponse `pulumi:"parserConfig"`
	// Determines whether to reject duplicate messages. A duplicate message is a message with the same raw bytes as a message that has already been ingested/created in this HL7v2 store. The default value is false, meaning that the store accepts the duplicate messages and it also returns the same ACK message in the IngestMessageResponse as has been returned previously. Note that only one resource is created in the store. When this field is set to true, CreateMessage/IngestMessage requests with a duplicate message will be rejected by the store, and IngestMessageErrorDetail returns a NACK message upon rejection.
	RejectDuplicateMessage *bool `pulumi:"rejectDuplicateMessage"`
}

type DatasetHl7V2StoreState struct {
	// User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
	Labels pulumi.StringMapInput
	// Resource name of the HL7v2 store, of the form `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
	Name pulumi.StringPtrInput
	// A list of notification configs. Each configuration uses a filter to determine whether to publish a message (both Ingest & Create) on the corresponding notification destination. Only the message name is sent as part of the notification. Supplied by the client.
	NotificationConfigs Hl7V2NotificationConfigResponseArrayInput
	// The configuration for the parser. It determines how the server parses the messages.
	ParserConfig ParserConfigResponsePtrInput
	// Determines whether to reject duplicate messages. A duplicate message is a message with the same raw bytes as a message that has already been ingested/created in this HL7v2 store. The default value is false, meaning that the store accepts the duplicate messages and it also returns the same ACK message in the IngestMessageResponse as has been returned previously. Note that only one resource is created in the store. When this field is set to true, CreateMessage/IngestMessage requests with a duplicate message will be rejected by the store, and IngestMessageErrorDetail returns a NACK message upon rejection.
	RejectDuplicateMessage pulumi.BoolPtrInput
}

func (DatasetHl7V2StoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetHl7V2StoreState)(nil)).Elem()
}

type datasetHl7V2StoreArgs struct {
	DatasetsId    string `pulumi:"datasetsId"`
	Hl7V2StoresId string `pulumi:"hl7V2StoresId"`
	// User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
	Labels      map[string]string `pulumi:"labels"`
	LocationsId string            `pulumi:"locationsId"`
	// Resource name of the HL7v2 store, of the form `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
	Name *string `pulumi:"name"`
	// A list of notification configs. Each configuration uses a filter to determine whether to publish a message (both Ingest & Create) on the corresponding notification destination. Only the message name is sent as part of the notification. Supplied by the client.
	NotificationConfigs []Hl7V2NotificationConfig `pulumi:"notificationConfigs"`
	// The configuration for the parser. It determines how the server parses the messages.
	ParserConfig *ParserConfig `pulumi:"parserConfig"`
	ProjectsId   string        `pulumi:"projectsId"`
	// Determines whether to reject duplicate messages. A duplicate message is a message with the same raw bytes as a message that has already been ingested/created in this HL7v2 store. The default value is false, meaning that the store accepts the duplicate messages and it also returns the same ACK message in the IngestMessageResponse as has been returned previously. Note that only one resource is created in the store. When this field is set to true, CreateMessage/IngestMessage requests with a duplicate message will be rejected by the store, and IngestMessageErrorDetail returns a NACK message upon rejection.
	RejectDuplicateMessage *bool `pulumi:"rejectDuplicateMessage"`
}

// The set of arguments for constructing a DatasetHl7V2Store resource.
type DatasetHl7V2StoreArgs struct {
	DatasetsId    pulumi.StringInput
	Hl7V2StoresId pulumi.StringInput
	// User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
	Labels      pulumi.StringMapInput
	LocationsId pulumi.StringInput
	// Resource name of the HL7v2 store, of the form `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
	Name pulumi.StringPtrInput
	// A list of notification configs. Each configuration uses a filter to determine whether to publish a message (both Ingest & Create) on the corresponding notification destination. Only the message name is sent as part of the notification. Supplied by the client.
	NotificationConfigs Hl7V2NotificationConfigArrayInput
	// The configuration for the parser. It determines how the server parses the messages.
	ParserConfig ParserConfigPtrInput
	ProjectsId   pulumi.StringInput
	// Determines whether to reject duplicate messages. A duplicate message is a message with the same raw bytes as a message that has already been ingested/created in this HL7v2 store. The default value is false, meaning that the store accepts the duplicate messages and it also returns the same ACK message in the IngestMessageResponse as has been returned previously. Note that only one resource is created in the store. When this field is set to true, CreateMessage/IngestMessage requests with a duplicate message will be rejected by the store, and IngestMessageErrorDetail returns a NACK message upon rejection.
	RejectDuplicateMessage pulumi.BoolPtrInput
}

func (DatasetHl7V2StoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetHl7V2StoreArgs)(nil)).Elem()
}

type DatasetHl7V2StoreInput interface {
	pulumi.Input

	ToDatasetHl7V2StoreOutput() DatasetHl7V2StoreOutput
	ToDatasetHl7V2StoreOutputWithContext(ctx context.Context) DatasetHl7V2StoreOutput
}

func (*DatasetHl7V2Store) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetHl7V2Store)(nil))
}

func (i *DatasetHl7V2Store) ToDatasetHl7V2StoreOutput() DatasetHl7V2StoreOutput {
	return i.ToDatasetHl7V2StoreOutputWithContext(context.Background())
}

func (i *DatasetHl7V2Store) ToDatasetHl7V2StoreOutputWithContext(ctx context.Context) DatasetHl7V2StoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetHl7V2StoreOutput)
}

type DatasetHl7V2StoreOutput struct {
	*pulumi.OutputState
}

func (DatasetHl7V2StoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetHl7V2Store)(nil))
}

func (o DatasetHl7V2StoreOutput) ToDatasetHl7V2StoreOutput() DatasetHl7V2StoreOutput {
	return o
}

func (o DatasetHl7V2StoreOutput) ToDatasetHl7V2StoreOutputWithContext(ctx context.Context) DatasetHl7V2StoreOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DatasetHl7V2StoreOutput{})
}
