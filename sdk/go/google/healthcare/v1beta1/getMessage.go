// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets an HL7v2 message.
func LookupMessage(ctx *pulumi.Context, args *LookupMessageArgs, opts ...pulumi.InvokeOption) (*LookupMessageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMessageResult
	err := ctx.Invoke("google-native:healthcare/v1beta1:getMessage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupMessageArgs struct {
	DatasetId    string  `pulumi:"datasetId"`
	Hl7V2StoreId string  `pulumi:"hl7V2StoreId"`
	Location     string  `pulumi:"location"`
	MessageId    string  `pulumi:"messageId"`
	Project      *string `pulumi:"project"`
	View         *string `pulumi:"view"`
}

type LookupMessageResult struct {
	// The datetime when the message was created. Set by the server.
	CreateTime string `pulumi:"createTime"`
	// Raw message bytes.
	Data string `pulumi:"data"`
	// User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
	Labels map[string]string `pulumi:"labels"`
	// The message type for this message. MSH-9.1.
	MessageType string `pulumi:"messageType"`
	// Resource name of the Message, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server.
	Name string `pulumi:"name"`
	// The parsed version of the raw message data.
	ParsedData ParsedDataResponse `pulumi:"parsedData"`
	// All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this message.
	PatientIds []PatientIdResponse `pulumi:"patientIds"`
	// The parsed version of the raw message data schematized according to this store's schemas and type definitions.
	SchematizedData SchematizedDataResponse `pulumi:"schematizedData"`
	// The hospital that this message came from. MSH-4.
	SendFacility string `pulumi:"sendFacility"`
	// The datetime the sending application sent this message. MSH-7.
	SendTime string `pulumi:"sendTime"`
}

func LookupMessageOutput(ctx *pulumi.Context, args LookupMessageOutputArgs, opts ...pulumi.InvokeOption) LookupMessageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMessageResult, error) {
			args := v.(LookupMessageArgs)
			r, err := LookupMessage(ctx, &args, opts...)
			var s LookupMessageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMessageResultOutput)
}

type LookupMessageOutputArgs struct {
	DatasetId    pulumi.StringInput    `pulumi:"datasetId"`
	Hl7V2StoreId pulumi.StringInput    `pulumi:"hl7V2StoreId"`
	Location     pulumi.StringInput    `pulumi:"location"`
	MessageId    pulumi.StringInput    `pulumi:"messageId"`
	Project      pulumi.StringPtrInput `pulumi:"project"`
	View         pulumi.StringPtrInput `pulumi:"view"`
}

func (LookupMessageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMessageArgs)(nil)).Elem()
}

type LookupMessageResultOutput struct{ *pulumi.OutputState }

func (LookupMessageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMessageResult)(nil)).Elem()
}

func (o LookupMessageResultOutput) ToLookupMessageResultOutput() LookupMessageResultOutput {
	return o
}

func (o LookupMessageResultOutput) ToLookupMessageResultOutputWithContext(ctx context.Context) LookupMessageResultOutput {
	return o
}

func (o LookupMessageResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupMessageResult] {
	return pulumix.Output[LookupMessageResult]{
		OutputState: o.OutputState,
	}
}

// The datetime when the message was created. Set by the server.
func (o LookupMessageResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMessageResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Raw message bytes.
func (o LookupMessageResultOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMessageResult) string { return v.Data }).(pulumi.StringOutput)
}

// User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
func (o LookupMessageResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMessageResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The message type for this message. MSH-9.1.
func (o LookupMessageResultOutput) MessageType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMessageResult) string { return v.MessageType }).(pulumi.StringOutput)
}

// Resource name of the Message, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server.
func (o LookupMessageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMessageResult) string { return v.Name }).(pulumi.StringOutput)
}

// The parsed version of the raw message data.
func (o LookupMessageResultOutput) ParsedData() ParsedDataResponseOutput {
	return o.ApplyT(func(v LookupMessageResult) ParsedDataResponse { return v.ParsedData }).(ParsedDataResponseOutput)
}

// All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this message.
func (o LookupMessageResultOutput) PatientIds() PatientIdResponseArrayOutput {
	return o.ApplyT(func(v LookupMessageResult) []PatientIdResponse { return v.PatientIds }).(PatientIdResponseArrayOutput)
}

// The parsed version of the raw message data schematized according to this store's schemas and type definitions.
func (o LookupMessageResultOutput) SchematizedData() SchematizedDataResponseOutput {
	return o.ApplyT(func(v LookupMessageResult) SchematizedDataResponse { return v.SchematizedData }).(SchematizedDataResponseOutput)
}

// The hospital that this message came from. MSH-4.
func (o LookupMessageResultOutput) SendFacility() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMessageResult) string { return v.SendFacility }).(pulumi.StringOutput)
}

// The datetime the sending application sent this message. MSH-7.
func (o LookupMessageResultOutput) SendTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMessageResult) string { return v.SendTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMessageResultOutput{})
}
