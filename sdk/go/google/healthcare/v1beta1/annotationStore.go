// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new Annotation store within the parent dataset.
type AnnotationStore struct {
	pulumi.CustomResourceState

	// The ID of the Annotation store that is being created. The string must match the following regex: `[\p{L}\p{N}_\-\.]{1,256}`.
	AnnotationStoreId pulumi.StringPtrOutput `pulumi:"annotationStoreId"`
	DatasetId         pulumi.StringOutput    `pulumi:"datasetId"`
	// Optional. User-supplied key-value pairs used to organize Annotation stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// Resource name of the Annotation store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewAnnotationStore registers a new resource with the given unique name, arguments, and options.
func NewAnnotationStore(ctx *pulumi.Context,
	name string, args *AnnotationStoreArgs, opts ...pulumi.ResourceOption) (*AnnotationStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"datasetId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource AnnotationStore
	err := ctx.RegisterResource("google-native:healthcare/v1beta1:AnnotationStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnnotationStore gets an existing AnnotationStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnnotationStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnnotationStoreState, opts ...pulumi.ResourceOption) (*AnnotationStore, error) {
	var resource AnnotationStore
	err := ctx.ReadResource("google-native:healthcare/v1beta1:AnnotationStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnnotationStore resources.
type annotationStoreState struct {
}

type AnnotationStoreState struct {
}

func (AnnotationStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*annotationStoreState)(nil)).Elem()
}

type annotationStoreArgs struct {
	// The ID of the Annotation store that is being created. The string must match the following regex: `[\p{L}\p{N}_\-\.]{1,256}`.
	AnnotationStoreId *string `pulumi:"annotationStoreId"`
	DatasetId         string  `pulumi:"datasetId"`
	// Optional. User-supplied key-value pairs used to organize Annotation stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Resource name of the Annotation store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a AnnotationStore resource.
type AnnotationStoreArgs struct {
	// The ID of the Annotation store that is being created. The string must match the following regex: `[\p{L}\p{N}_\-\.]{1,256}`.
	AnnotationStoreId pulumi.StringPtrInput
	DatasetId         pulumi.StringInput
	// Optional. User-supplied key-value pairs used to organize Annotation stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Resource name of the Annotation store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (AnnotationStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*annotationStoreArgs)(nil)).Elem()
}

type AnnotationStoreInput interface {
	pulumi.Input

	ToAnnotationStoreOutput() AnnotationStoreOutput
	ToAnnotationStoreOutputWithContext(ctx context.Context) AnnotationStoreOutput
}

func (*AnnotationStore) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStore)(nil)).Elem()
}

func (i *AnnotationStore) ToAnnotationStoreOutput() AnnotationStoreOutput {
	return i.ToAnnotationStoreOutputWithContext(context.Background())
}

func (i *AnnotationStore) ToAnnotationStoreOutputWithContext(ctx context.Context) AnnotationStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreOutput)
}

type AnnotationStoreOutput struct{ *pulumi.OutputState }

func (AnnotationStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStore)(nil)).Elem()
}

func (o AnnotationStoreOutput) ToAnnotationStoreOutput() AnnotationStoreOutput {
	return o
}

func (o AnnotationStoreOutput) ToAnnotationStoreOutputWithContext(ctx context.Context) AnnotationStoreOutput {
	return o
}

// The ID of the Annotation store that is being created. The string must match the following regex: `[\p{L}\p{N}_\-\.]{1,256}`.
func (o AnnotationStoreOutput) AnnotationStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringPtrOutput { return v.AnnotationStoreId }).(pulumi.StringPtrOutput)
}

func (o AnnotationStoreOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringOutput { return v.DatasetId }).(pulumi.StringOutput)
}

// Optional. User-supplied key-value pairs used to organize Annotation stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
func (o AnnotationStoreOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o AnnotationStoreOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Resource name of the Annotation store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.
func (o AnnotationStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AnnotationStoreOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *AnnotationStore) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreInput)(nil)).Elem(), &AnnotationStore{})
	pulumi.RegisterOutputType(AnnotationStoreOutput{})
}
