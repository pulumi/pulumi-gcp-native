// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new Consent in the parent consent store.
type DatasetConsentStoreConsent struct {
	pulumi.CustomResourceState
}

// NewDatasetConsentStoreConsent registers a new resource with the given unique name, arguments, and options.
func NewDatasetConsentStoreConsent(ctx *pulumi.Context,
	name string, args *DatasetConsentStoreConsentArgs, opts ...pulumi.ResourceOption) (*DatasetConsentStoreConsent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsentStoresId == nil {
		return nil, errors.New("invalid value for required argument 'ConsentStoresId'")
	}
	if args.ConsentsId == nil {
		return nil, errors.New("invalid value for required argument 'ConsentsId'")
	}
	if args.DatasetsId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetsId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource DatasetConsentStoreConsent
	err := ctx.RegisterResource("google-cloud:healthcare/v1beta1:DatasetConsentStoreConsent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetConsentStoreConsent gets an existing DatasetConsentStoreConsent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetConsentStoreConsent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetConsentStoreConsentState, opts ...pulumi.ResourceOption) (*DatasetConsentStoreConsent, error) {
	var resource DatasetConsentStoreConsent
	err := ctx.ReadResource("google-cloud:healthcare/v1beta1:DatasetConsentStoreConsent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetConsentStoreConsent resources.
type datasetConsentStoreConsentState struct {
}

type DatasetConsentStoreConsentState struct {
}

func (DatasetConsentStoreConsentState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetConsentStoreConsentState)(nil)).Elem()
}

type datasetConsentStoreConsentArgs struct {
	// Required. The resource name of the Consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
	ConsentArtifact *string `pulumi:"consentArtifact"`
	ConsentStoresId string  `pulumi:"consentStoresId"`
	ConsentsId      string  `pulumi:"consentsId"`
	DatasetsId      string  `pulumi:"datasetsId"`
	// Timestamp in UTC of when this Consent is considered expired.
	ExpireTime  *string `pulumi:"expireTime"`
	LocationsId string  `pulumi:"locationsId"`
	// Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.
	Metadata map[string]string `pulumi:"metadata"`
	// Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation.
	Name *string `pulumi:"name"`
	// Optional. Represents a user's consent in terms of the resources that can be accessed and under what conditions.
	Policies   []GoogleCloudHealthcareV1beta1ConsentPolicy `pulumi:"policies"`
	ProjectsId string                                      `pulumi:"projectsId"`
	// Output only. The timestamp that the revision was created.
	RevisionCreateTime *string `pulumi:"revisionCreateTime"`
	// Output only. The revision ID of the Consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending `@{revision_id}` to the Consent's resource name.
	RevisionId *string `pulumi:"revisionId"`
	// Required. Indicates the current state of this Consent.
	State *string `pulumi:"state"`
	// Input only. The time to live for this Consent from when it is created.
	Ttl *string `pulumi:"ttl"`
	// Required. User's UUID provided by the client.
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a DatasetConsentStoreConsent resource.
type DatasetConsentStoreConsentArgs struct {
	// Required. The resource name of the Consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`.
	ConsentArtifact pulumi.StringPtrInput
	ConsentStoresId pulumi.StringInput
	ConsentsId      pulumi.StringInput
	DatasetsId      pulumi.StringInput
	// Timestamp in UTC of when this Consent is considered expired.
	ExpireTime  pulumi.StringPtrInput
	LocationsId pulumi.StringInput
	// Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.
	Metadata pulumi.StringMapInput
	// Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation.
	Name pulumi.StringPtrInput
	// Optional. Represents a user's consent in terms of the resources that can be accessed and under what conditions.
	Policies   GoogleCloudHealthcareV1beta1ConsentPolicyArrayInput
	ProjectsId pulumi.StringInput
	// Output only. The timestamp that the revision was created.
	RevisionCreateTime pulumi.StringPtrInput
	// Output only. The revision ID of the Consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending `@{revision_id}` to the Consent's resource name.
	RevisionId pulumi.StringPtrInput
	// Required. Indicates the current state of this Consent.
	State pulumi.StringPtrInput
	// Input only. The time to live for this Consent from when it is created.
	Ttl pulumi.StringPtrInput
	// Required. User's UUID provided by the client.
	UserId pulumi.StringPtrInput
}

func (DatasetConsentStoreConsentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetConsentStoreConsentArgs)(nil)).Elem()
}

type DatasetConsentStoreConsentInput interface {
	pulumi.Input

	ToDatasetConsentStoreConsentOutput() DatasetConsentStoreConsentOutput
	ToDatasetConsentStoreConsentOutputWithContext(ctx context.Context) DatasetConsentStoreConsentOutput
}

func (*DatasetConsentStoreConsent) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetConsentStoreConsent)(nil))
}

func (i *DatasetConsentStoreConsent) ToDatasetConsentStoreConsentOutput() DatasetConsentStoreConsentOutput {
	return i.ToDatasetConsentStoreConsentOutputWithContext(context.Background())
}

func (i *DatasetConsentStoreConsent) ToDatasetConsentStoreConsentOutputWithContext(ctx context.Context) DatasetConsentStoreConsentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetConsentStoreConsentOutput)
}

type DatasetConsentStoreConsentOutput struct {
	*pulumi.OutputState
}

func (DatasetConsentStoreConsentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetConsentStoreConsent)(nil))
}

func (o DatasetConsentStoreConsentOutput) ToDatasetConsentStoreConsentOutput() DatasetConsentStoreConsentOutput {
	return o
}

func (o DatasetConsentStoreConsentOutput) ToDatasetConsentStoreConsentOutputWithContext(ctx context.Context) DatasetConsentStoreConsentOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DatasetConsentStoreConsentOutput{})
}
