// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a FHIR resource. Implements the FHIR standard create interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#create), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#create), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#create)), which creates a new resource with a server-assigned resource ID. Also supports the FHIR standard conditional create interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#ccreate), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#ccreate), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#ccreate)), specified by supplying an `If-None-Exist` header containing a FHIR search query. If no resources match this search query, the server processes the create operation as normal. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. On success, the response body contains a JSON-encoded representation of the resource as it was created on the server, including the server-assigned resource ID and version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `create`, see [Creating a FHIR resource](/healthcare/docs/how-tos/fhir-resources#creating_a_fhir_resource).
type DatasetFhirStoreFhir struct {
	pulumi.CustomResourceState
}

// NewDatasetFhirStoreFhir registers a new resource with the given unique name, arguments, and options.
func NewDatasetFhirStoreFhir(ctx *pulumi.Context,
	name string, args *DatasetFhirStoreFhirArgs, opts ...pulumi.ResourceOption) (*DatasetFhirStoreFhir, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasetsId == nil {
		return nil, errors.New("invalid value for required argument 'DatasetsId'")
	}
	if args.FhirId == nil {
		return nil, errors.New("invalid value for required argument 'FhirId'")
	}
	if args.FhirId1 == nil {
		return nil, errors.New("invalid value for required argument 'FhirId1'")
	}
	if args.FhirStoresId == nil {
		return nil, errors.New("invalid value for required argument 'FhirStoresId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource DatasetFhirStoreFhir
	err := ctx.RegisterResource("google-cloud:healthcare/v1beta1:DatasetFhirStoreFhir", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetFhirStoreFhir gets an existing DatasetFhirStoreFhir resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetFhirStoreFhir(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetFhirStoreFhirState, opts ...pulumi.ResourceOption) (*DatasetFhirStoreFhir, error) {
	var resource DatasetFhirStoreFhir
	err := ctx.ReadResource("google-cloud:healthcare/v1beta1:DatasetFhirStoreFhir", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetFhirStoreFhir resources.
type datasetFhirStoreFhirState struct {
}

type DatasetFhirStoreFhirState struct {
}

func (DatasetFhirStoreFhirState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetFhirStoreFhirState)(nil)).Elem()
}

type datasetFhirStoreFhirArgs struct {
	// The HTTP Content-Type header value specifying the content type of the body.
	ContentType *string `pulumi:"contentType"`
	// The HTTP request/response body as raw binary.
	Data       *string `pulumi:"data"`
	DatasetsId string  `pulumi:"datasetsId"`
	// Application specific response metadata. Must be set in the first response for streaming APIs.
	Extensions   []map[string]string `pulumi:"extensions"`
	FhirId       string              `pulumi:"fhirId"`
	FhirId1      string              `pulumi:"fhirId1"`
	FhirStoresId string              `pulumi:"fhirStoresId"`
	LocationsId  string              `pulumi:"locationsId"`
	ProjectsId   string              `pulumi:"projectsId"`
}

// The set of arguments for constructing a DatasetFhirStoreFhir resource.
type DatasetFhirStoreFhirArgs struct {
	// The HTTP Content-Type header value specifying the content type of the body.
	ContentType pulumi.StringPtrInput
	// The HTTP request/response body as raw binary.
	Data       pulumi.StringPtrInput
	DatasetsId pulumi.StringInput
	// Application specific response metadata. Must be set in the first response for streaming APIs.
	Extensions   pulumi.StringMapArrayInput
	FhirId       pulumi.StringInput
	FhirId1      pulumi.StringInput
	FhirStoresId pulumi.StringInput
	LocationsId  pulumi.StringInput
	ProjectsId   pulumi.StringInput
}

func (DatasetFhirStoreFhirArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetFhirStoreFhirArgs)(nil)).Elem()
}

type DatasetFhirStoreFhirInput interface {
	pulumi.Input

	ToDatasetFhirStoreFhirOutput() DatasetFhirStoreFhirOutput
	ToDatasetFhirStoreFhirOutputWithContext(ctx context.Context) DatasetFhirStoreFhirOutput
}

func (*DatasetFhirStoreFhir) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetFhirStoreFhir)(nil))
}

func (i *DatasetFhirStoreFhir) ToDatasetFhirStoreFhirOutput() DatasetFhirStoreFhirOutput {
	return i.ToDatasetFhirStoreFhirOutputWithContext(context.Background())
}

func (i *DatasetFhirStoreFhir) ToDatasetFhirStoreFhirOutputWithContext(ctx context.Context) DatasetFhirStoreFhirOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetFhirStoreFhirOutput)
}

type DatasetFhirStoreFhirOutput struct {
	*pulumi.OutputState
}

func (DatasetFhirStoreFhirOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetFhirStoreFhir)(nil))
}

func (o DatasetFhirStoreFhirOutput) ToDatasetFhirStoreFhirOutput() DatasetFhirStoreFhirOutput {
	return o
}

func (o DatasetFhirStoreFhirOutput) ToDatasetFhirStoreFhirOutputWithContext(ctx context.Context) DatasetFhirStoreFhirOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DatasetFhirStoreFhirOutput{})
}
