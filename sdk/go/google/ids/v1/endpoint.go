// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new Endpoint in a given project and location.
// Auto-naming is currently not supported for this resource.
type Endpoint struct {
	pulumi.CustomResourceState

	// The create time timestamp.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User-provided description of the endpoint
	Description pulumi.StringOutput `pulumi:"description"`
	// The fully qualified URL of the endpoint's ILB Forwarding Rule.
	EndpointForwardingRule pulumi.StringOutput `pulumi:"endpointForwardingRule"`
	// The IP address of the IDS Endpoint's ILB.
	EndpointIp pulumi.StringOutput `pulumi:"endpointIp"`
	// The labels of the endpoint.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the endpoint.
	Name pulumi.StringOutput `pulumi:"name"`
	// The fully qualified URL of the network to which the IDS Endpoint is attached.
	Network pulumi.StringOutput `pulumi:"network"`
	// Lowest threat severity that this endpoint will alert on.
	Severity pulumi.StringOutput `pulumi:"severity"`
	// Current state of the endpoint.
	State pulumi.StringOutput `pulumi:"state"`
	// Whether the endpoint should report traffic logs in addition to threat logs.
	TrafficLogs pulumi.BoolOutput `pulumi:"trafficLogs"`
	// The update time timestamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEndpoint(ctx *pulumi.Context,
	name string, args *EndpointArgs, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndpointId == nil {
		return nil, errors.New("invalid value for required argument 'EndpointId'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.Severity == nil {
		return nil, errors.New("invalid value for required argument 'Severity'")
	}
	var resource Endpoint
	err := ctx.RegisterResource("google-native:ids/v1:Endpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpoint gets an existing Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointState, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	var resource Endpoint
	err := ctx.ReadResource("google-native:ids/v1:Endpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Endpoint resources.
type endpointState struct {
}

type EndpointState struct {
}

func (EndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointState)(nil)).Elem()
}

type endpointArgs struct {
	// User-provided description of the endpoint
	Description *string `pulumi:"description"`
	// Required. The endpoint identifier. This will be part of the endpoint's resource name. This value must start with a lowercase letter followed by up to 62 lowercase letters, numbers, or hyphens, and cannot end with a hyphen. Values that do not match this pattern will trigger an INVALID_ARGUMENT error.
	EndpointId string `pulumi:"endpointId"`
	// The labels of the endpoint.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// The fully qualified URL of the network to which the IDS Endpoint is attached.
	Network string  `pulumi:"network"`
	Project *string `pulumi:"project"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Lowest threat severity that this endpoint will alert on.
	Severity EndpointSeverity `pulumi:"severity"`
	// Whether the endpoint should report traffic logs in addition to threat logs.
	TrafficLogs *bool `pulumi:"trafficLogs"`
}

// The set of arguments for constructing a Endpoint resource.
type EndpointArgs struct {
	// User-provided description of the endpoint
	Description pulumi.StringPtrInput
	// Required. The endpoint identifier. This will be part of the endpoint's resource name. This value must start with a lowercase letter followed by up to 62 lowercase letters, numbers, or hyphens, and cannot end with a hyphen. Values that do not match this pattern will trigger an INVALID_ARGUMENT error.
	EndpointId pulumi.StringInput
	// The labels of the endpoint.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// The fully qualified URL of the network to which the IDS Endpoint is attached.
	Network pulumi.StringInput
	Project pulumi.StringPtrInput
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and t he request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Lowest threat severity that this endpoint will alert on.
	Severity EndpointSeverityInput
	// Whether the endpoint should report traffic logs in addition to threat logs.
	TrafficLogs pulumi.BoolPtrInput
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointArgs)(nil)).Elem()
}

type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(ctx context.Context) EndpointOutput
}

func (*Endpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (i *Endpoint) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i *Endpoint) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

// The create time timestamp.
func (o EndpointOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// User-provided description of the endpoint
func (o EndpointOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The fully qualified URL of the endpoint's ILB Forwarding Rule.
func (o EndpointOutput) EndpointForwardingRule() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.EndpointForwardingRule }).(pulumi.StringOutput)
}

// The IP address of the IDS Endpoint's ILB.
func (o EndpointOutput) EndpointIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.EndpointIp }).(pulumi.StringOutput)
}

// The labels of the endpoint.
func (o EndpointOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the endpoint.
func (o EndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The fully qualified URL of the network to which the IDS Endpoint is attached.
func (o EndpointOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// Lowest threat severity that this endpoint will alert on.
func (o EndpointOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Severity }).(pulumi.StringOutput)
}

// Current state of the endpoint.
func (o EndpointOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Whether the endpoint should report traffic logs in addition to threat logs.
func (o EndpointOutput) TrafficLogs() pulumi.BoolOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.BoolOutput { return v.TrafficLogs }).(pulumi.BoolOutput)
}

// The update time timestamp.
func (o EndpointOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointInput)(nil)).Elem(), &Endpoint{})
	pulumi.RegisterOutputType(EndpointOutput{})
}
