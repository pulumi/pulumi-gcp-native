// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new Endpoint in a given project and location.
// Auto-naming is currently not supported for this resource.
type Endpoint struct {
	pulumi.CustomResourceState

	// The create time timestamp.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User-provided description of the endpoint
	Description pulumi.StringOutput `pulumi:"description"`
	// The fully qualified URL of the endpoint's ILB Forwarding Rule.
	EndpointForwardingRule pulumi.StringOutput `pulumi:"endpointForwardingRule"`
	// The IP address of the IDS Endpoint's ILB.
	EndpointIp pulumi.StringOutput `pulumi:"endpointIp"`
	// The labels of the endpoint.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the endpoint.
	Name pulumi.StringOutput `pulumi:"name"`
	// The fully qualified URL of the network to which the IDS Endpoint is attached.
	Network pulumi.StringOutput `pulumi:"network"`
	// Lowest threat severity that this endpoint will alert on.
	Severity pulumi.StringOutput `pulumi:"severity"`
	// Current state of the endpoint.
	State pulumi.StringOutput `pulumi:"state"`
	// Whether the endpoint should report traffic logs in addition to threat logs.
	TrafficLogs pulumi.BoolOutput `pulumi:"trafficLogs"`
	// The update time timestamp.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEndpoint(ctx *pulumi.Context,
	name string, args *EndpointArgs, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndpointId == nil {
		return nil, errors.New("invalid value for required argument 'EndpointId'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.Severity == nil {
		return nil, errors.New("invalid value for required argument 'Severity'")
	}
	var resource Endpoint
	err := ctx.RegisterResource("google-native:ids/v1:Endpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpoint gets an existing Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointState, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	var resource Endpoint
	err := ctx.ReadResource("google-native:ids/v1:Endpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Endpoint resources.
type endpointState struct {
}

type EndpointState struct {
}

func (EndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointState)(nil)).Elem()
}

type endpointArgs struct {
	// User-provided description of the endpoint
	Description *string `pulumi:"description"`
	EndpointId  string  `pulumi:"endpointId"`
	// The labels of the endpoint.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// The fully qualified URL of the network to which the IDS Endpoint is attached.
	Network   string  `pulumi:"network"`
	Project   *string `pulumi:"project"`
	RequestId *string `pulumi:"requestId"`
	// Lowest threat severity that this endpoint will alert on.
	Severity EndpointSeverity `pulumi:"severity"`
	// Whether the endpoint should report traffic logs in addition to threat logs.
	TrafficLogs *bool `pulumi:"trafficLogs"`
}

// The set of arguments for constructing a Endpoint resource.
type EndpointArgs struct {
	// User-provided description of the endpoint
	Description pulumi.StringPtrInput
	EndpointId  pulumi.StringInput
	// The labels of the endpoint.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// The fully qualified URL of the network to which the IDS Endpoint is attached.
	Network   pulumi.StringInput
	Project   pulumi.StringPtrInput
	RequestId pulumi.StringPtrInput
	// Lowest threat severity that this endpoint will alert on.
	Severity EndpointSeverityInput
	// Whether the endpoint should report traffic logs in addition to threat logs.
	TrafficLogs pulumi.BoolPtrInput
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointArgs)(nil)).Elem()
}

type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(ctx context.Context) EndpointOutput
}

func (*Endpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (i *Endpoint) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i *Endpoint) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointInput)(nil)).Elem(), &Endpoint{})
	pulumi.RegisterOutputType(EndpointOutput{})
}
