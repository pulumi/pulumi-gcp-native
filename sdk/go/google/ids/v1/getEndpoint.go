// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a single Endpoint.
func LookupEndpoint(ctx *pulumi.Context, args *LookupEndpointArgs, opts ...pulumi.InvokeOption) (*LookupEndpointResult, error) {
	var rv LookupEndpointResult
	err := ctx.Invoke("google-native:ids/v1:getEndpoint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEndpointArgs struct {
	EndpointId string  `pulumi:"endpointId"`
	Location   string  `pulumi:"location"`
	Project    *string `pulumi:"project"`
}

type LookupEndpointResult struct {
	// The create time timestamp.
	CreateTime string `pulumi:"createTime"`
	// User-provided description of the endpoint
	Description string `pulumi:"description"`
	// The fully qualified URL of the endpoint's ILB Forwarding Rule.
	EndpointForwardingRule string `pulumi:"endpointForwardingRule"`
	// The IP address of the IDS Endpoint's ILB.
	EndpointIp string `pulumi:"endpointIp"`
	// The labels of the endpoint.
	Labels map[string]string `pulumi:"labels"`
	// The name of the endpoint.
	Name string `pulumi:"name"`
	// The fully qualified URL of the network to which the IDS Endpoint is attached.
	Network string `pulumi:"network"`
	// Lowest threat severity that this endpoint will alert on.
	Severity string `pulumi:"severity"`
	// Current state of the endpoint.
	State string `pulumi:"state"`
	// Whether the endpoint should report traffic logs in addition to threat logs.
	TrafficLogs bool `pulumi:"trafficLogs"`
	// The update time timestamp.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupEndpointOutput(ctx *pulumi.Context, args LookupEndpointOutputArgs, opts ...pulumi.InvokeOption) LookupEndpointResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEndpointResult, error) {
			args := v.(LookupEndpointArgs)
			r, err := LookupEndpoint(ctx, &args, opts...)
			var s LookupEndpointResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEndpointResultOutput)
}

type LookupEndpointOutputArgs struct {
	EndpointId pulumi.StringInput    `pulumi:"endpointId"`
	Location   pulumi.StringInput    `pulumi:"location"`
	Project    pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupEndpointOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEndpointArgs)(nil)).Elem()
}

type LookupEndpointResultOutput struct{ *pulumi.OutputState }

func (LookupEndpointResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEndpointResult)(nil)).Elem()
}

func (o LookupEndpointResultOutput) ToLookupEndpointResultOutput() LookupEndpointResultOutput {
	return o
}

func (o LookupEndpointResultOutput) ToLookupEndpointResultOutputWithContext(ctx context.Context) LookupEndpointResultOutput {
	return o
}

// The create time timestamp.
func (o LookupEndpointResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// User-provided description of the endpoint
func (o LookupEndpointResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.Description }).(pulumi.StringOutput)
}

// The fully qualified URL of the endpoint's ILB Forwarding Rule.
func (o LookupEndpointResultOutput) EndpointForwardingRule() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.EndpointForwardingRule }).(pulumi.StringOutput)
}

// The IP address of the IDS Endpoint's ILB.
func (o LookupEndpointResultOutput) EndpointIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.EndpointIp }).(pulumi.StringOutput)
}

// The labels of the endpoint.
func (o LookupEndpointResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupEndpointResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the endpoint.
func (o LookupEndpointResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.Name }).(pulumi.StringOutput)
}

// The fully qualified URL of the network to which the IDS Endpoint is attached.
func (o LookupEndpointResultOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.Network }).(pulumi.StringOutput)
}

// Lowest threat severity that this endpoint will alert on.
func (o LookupEndpointResultOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.Severity }).(pulumi.StringOutput)
}

// Current state of the endpoint.
func (o LookupEndpointResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.State }).(pulumi.StringOutput)
}

// Whether the endpoint should report traffic logs in addition to threat logs.
func (o LookupEndpointResultOutput) TrafficLogs() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEndpointResult) bool { return v.TrafficLogs }).(pulumi.BoolOutput)
}

// The update time timestamp.
func (o LookupEndpointResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEndpointResultOutput{})
}
