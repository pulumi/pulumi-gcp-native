// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
type ServiceConsumerIamPolicy struct {
	pulumi.CustomResourceState
}

// NewServiceConsumerIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewServiceConsumerIamPolicy(ctx *pulumi.Context,
	name string, args *ServiceConsumerIamPolicyArgs, opts ...pulumi.ResourceOption) (*ServiceConsumerIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumersId == nil {
		return nil, errors.New("invalid value for required argument 'ConsumersId'")
	}
	if args.ServicesId == nil {
		return nil, errors.New("invalid value for required argument 'ServicesId'")
	}
	var resource ServiceConsumerIamPolicy
	err := ctx.RegisterResource("google-cloud:servicemanagement/v1:ServiceConsumerIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceConsumerIamPolicy gets an existing ServiceConsumerIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceConsumerIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceConsumerIamPolicyState, opts ...pulumi.ResourceOption) (*ServiceConsumerIamPolicy, error) {
	var resource ServiceConsumerIamPolicy
	err := ctx.ReadResource("google-cloud:servicemanagement/v1:ServiceConsumerIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceConsumerIamPolicy resources.
type serviceConsumerIamPolicyState struct {
}

type ServiceConsumerIamPolicyState struct {
}

func (ServiceConsumerIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceConsumerIamPolicyState)(nil)).Elem()
}

type serviceConsumerIamPolicyArgs struct {
	ConsumersId string `pulumi:"consumersId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ServicesId string  `pulumi:"servicesId"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `pulumi:"updateMask"`
}

// The set of arguments for constructing a ServiceConsumerIamPolicy resource.
type ServiceConsumerIamPolicyArgs struct {
	ConsumersId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ServicesId pulumi.StringInput
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask pulumi.StringPtrInput
}

func (ServiceConsumerIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceConsumerIamPolicyArgs)(nil)).Elem()
}

type ServiceConsumerIamPolicyInput interface {
	pulumi.Input

	ToServiceConsumerIamPolicyOutput() ServiceConsumerIamPolicyOutput
	ToServiceConsumerIamPolicyOutputWithContext(ctx context.Context) ServiceConsumerIamPolicyOutput
}

func (*ServiceConsumerIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConsumerIamPolicy)(nil))
}

func (i *ServiceConsumerIamPolicy) ToServiceConsumerIamPolicyOutput() ServiceConsumerIamPolicyOutput {
	return i.ToServiceConsumerIamPolicyOutputWithContext(context.Background())
}

func (i *ServiceConsumerIamPolicy) ToServiceConsumerIamPolicyOutputWithContext(ctx context.Context) ServiceConsumerIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConsumerIamPolicyOutput)
}

type ServiceConsumerIamPolicyOutput struct {
	*pulumi.OutputState
}

func (ServiceConsumerIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceConsumerIamPolicy)(nil))
}

func (o ServiceConsumerIamPolicyOutput) ToServiceConsumerIamPolicyOutput() ServiceConsumerIamPolicyOutput {
	return o
}

func (o ServiceConsumerIamPolicyOutput) ToServiceConsumerIamPolicyOutputWithContext(ctx context.Context) ServiceConsumerIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ServiceConsumerIamPolicyOutput{})
}
