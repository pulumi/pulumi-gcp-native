// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Api is a light-weight descriptor for an API Interface. Interfaces are also described as "protocol buffer services" in some contexts, such as by the "service" keyword in a .proto file, but they are different from API Services, which represent a concrete implementation of an interface as opposed to simply a description of methods and bindings. They are also sometimes simply referred to as "APIs" in other contexts, such as the name of this message itself. See https://cloud.google.com/apis/design/glossary for detailed terminology.
type Api struct {
	// The methods of this interface, in unspecified order.
	Methods []Method `pulumi:"methods"`
	// Included interfaces. See Mixin.
	Mixins []Mixin `pulumi:"mixins"`
	// The fully qualified name of this interface, including package name followed by the interface's simple name.
	Name *string `pulumi:"name"`
	// Any metadata attached to the interface.
	Options []Option `pulumi:"options"`
	// Source context for the protocol buffer service represented by this message.
	SourceContext *SourceContext `pulumi:"sourceContext"`
	// The source syntax of the service.
	Syntax *string `pulumi:"syntax"`
	// A version string for this interface. If specified, must have the form `major-version.minor-version`, as in `1.10`. If the minor version is omitted, it defaults to zero. If the entire version field is empty, the major version is derived from the package name, as outlined below. If the field is not empty, the version in the package name will be verified to be consistent with what is provided here. The versioning schema uses [semantic versioning](http://semver.org) where the major version number indicates a breaking change and the minor version an additive, non-breaking change. Both version numbers are signals to users what to expect from different versions, and should be carefully chosen based on the product plan. The major version is also reflected in the package name of the interface, which must end in `v`, as in `google.feature.v1`. For major versions 0 and 1, the suffix can be omitted. Zero major versions must only be used for experimental, non-GA interfaces.
	Version *string `pulumi:"version"`
}

// ApiInput is an input type that accepts ApiArgs and ApiOutput values.
// You can construct a concrete instance of `ApiInput` via:
//
//          ApiArgs{...}
type ApiInput interface {
	pulumi.Input

	ToApiOutput() ApiOutput
	ToApiOutputWithContext(context.Context) ApiOutput
}

// Api is a light-weight descriptor for an API Interface. Interfaces are also described as "protocol buffer services" in some contexts, such as by the "service" keyword in a .proto file, but they are different from API Services, which represent a concrete implementation of an interface as opposed to simply a description of methods and bindings. They are also sometimes simply referred to as "APIs" in other contexts, such as the name of this message itself. See https://cloud.google.com/apis/design/glossary for detailed terminology.
type ApiArgs struct {
	// The methods of this interface, in unspecified order.
	Methods MethodArrayInput `pulumi:"methods"`
	// Included interfaces. See Mixin.
	Mixins MixinArrayInput `pulumi:"mixins"`
	// The fully qualified name of this interface, including package name followed by the interface's simple name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Any metadata attached to the interface.
	Options OptionArrayInput `pulumi:"options"`
	// Source context for the protocol buffer service represented by this message.
	SourceContext SourceContextPtrInput `pulumi:"sourceContext"`
	// The source syntax of the service.
	Syntax pulumi.StringPtrInput `pulumi:"syntax"`
	// A version string for this interface. If specified, must have the form `major-version.minor-version`, as in `1.10`. If the minor version is omitted, it defaults to zero. If the entire version field is empty, the major version is derived from the package name, as outlined below. If the field is not empty, the version in the package name will be verified to be consistent with what is provided here. The versioning schema uses [semantic versioning](http://semver.org) where the major version number indicates a breaking change and the minor version an additive, non-breaking change. Both version numbers are signals to users what to expect from different versions, and should be carefully chosen based on the product plan. The major version is also reflected in the package name of the interface, which must end in `v`, as in `google.feature.v1`. For major versions 0 and 1, the suffix can be omitted. Zero major versions must only be used for experimental, non-GA interfaces.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Api)(nil)).Elem()
}

func (i ApiArgs) ToApiOutput() ApiOutput {
	return i.ToApiOutputWithContext(context.Background())
}

func (i ApiArgs) ToApiOutputWithContext(ctx context.Context) ApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiOutput)
}

// ApiArrayInput is an input type that accepts ApiArray and ApiArrayOutput values.
// You can construct a concrete instance of `ApiArrayInput` via:
//
//          ApiArray{ ApiArgs{...} }
type ApiArrayInput interface {
	pulumi.Input

	ToApiArrayOutput() ApiArrayOutput
	ToApiArrayOutputWithContext(context.Context) ApiArrayOutput
}

type ApiArray []ApiInput

func (ApiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Api)(nil)).Elem()
}

func (i ApiArray) ToApiArrayOutput() ApiArrayOutput {
	return i.ToApiArrayOutputWithContext(context.Background())
}

func (i ApiArray) ToApiArrayOutputWithContext(ctx context.Context) ApiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiArrayOutput)
}

// Api is a light-weight descriptor for an API Interface. Interfaces are also described as "protocol buffer services" in some contexts, such as by the "service" keyword in a .proto file, but they are different from API Services, which represent a concrete implementation of an interface as opposed to simply a description of methods and bindings. They are also sometimes simply referred to as "APIs" in other contexts, such as the name of this message itself. See https://cloud.google.com/apis/design/glossary for detailed terminology.
type ApiOutput struct{ *pulumi.OutputState }

func (ApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Api)(nil)).Elem()
}

func (o ApiOutput) ToApiOutput() ApiOutput {
	return o
}

func (o ApiOutput) ToApiOutputWithContext(ctx context.Context) ApiOutput {
	return o
}

// The methods of this interface, in unspecified order.
func (o ApiOutput) Methods() MethodArrayOutput {
	return o.ApplyT(func(v Api) []Method { return v.Methods }).(MethodArrayOutput)
}

// Included interfaces. See Mixin.
func (o ApiOutput) Mixins() MixinArrayOutput {
	return o.ApplyT(func(v Api) []Mixin { return v.Mixins }).(MixinArrayOutput)
}

// The fully qualified name of this interface, including package name followed by the interface's simple name.
func (o ApiOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Api) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Any metadata attached to the interface.
func (o ApiOutput) Options() OptionArrayOutput {
	return o.ApplyT(func(v Api) []Option { return v.Options }).(OptionArrayOutput)
}

// Source context for the protocol buffer service represented by this message.
func (o ApiOutput) SourceContext() SourceContextPtrOutput {
	return o.ApplyT(func(v Api) *SourceContext { return v.SourceContext }).(SourceContextPtrOutput)
}

// The source syntax of the service.
func (o ApiOutput) Syntax() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Api) *string { return v.Syntax }).(pulumi.StringPtrOutput)
}

// A version string for this interface. If specified, must have the form `major-version.minor-version`, as in `1.10`. If the minor version is omitted, it defaults to zero. If the entire version field is empty, the major version is derived from the package name, as outlined below. If the field is not empty, the version in the package name will be verified to be consistent with what is provided here. The versioning schema uses [semantic versioning](http://semver.org) where the major version number indicates a breaking change and the minor version an additive, non-breaking change. Both version numbers are signals to users what to expect from different versions, and should be carefully chosen based on the product plan. The major version is also reflected in the package name of the interface, which must end in `v`, as in `google.feature.v1`. For major versions 0 and 1, the suffix can be omitted. Zero major versions must only be used for experimental, non-GA interfaces.
func (o ApiOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Api) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApiArrayOutput struct{ *pulumi.OutputState }

func (ApiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Api)(nil)).Elem()
}

func (o ApiArrayOutput) ToApiArrayOutput() ApiArrayOutput {
	return o
}

func (o ApiArrayOutput) ToApiArrayOutputWithContext(ctx context.Context) ApiArrayOutput {
	return o
}

func (o ApiArrayOutput) Index(i pulumi.IntInput) ApiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Api {
		return vs[0].([]Api)[vs[1].(int)]
	}).(ApiOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *string `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType pulumi.StringPtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Configuration for an authentication provider, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
type AuthProvider struct {
	// The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, JWTs with audiences: - "https://[service.name]/[google.protobuf.Api.name]" - "https://[service.name]/" will be accepted. For example, if no audiences are in the setting, LibraryService API will accept JWTs with the following audiences: - https://library-example.googleapis.com/google.example.library.v1.LibraryService - https://library-example.googleapis.com/ Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
	Audiences *string `pulumi:"audiences"`
	// Redirect URL if JWT token is required but not present or is expired. Implement authorizationUrl of securityDefinitions in OpenAPI spec.
	AuthorizationUrl *string `pulumi:"authorizationUrl"`
	// The unique identifier of the auth provider. It will be referred to by `AuthRequirement.provider_id`. Example: "bookstore_auth".
	Id *string `pulumi:"id"`
	// Identifies the principal that issued the JWT. See https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1 Usually a URL or an email address. Example: https://securetoken.google.com Example: 1234567-compute@developer.gserviceaccount.com
	Issuer *string `pulumi:"issuer"`
	// URL of the provider's public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). Optional if the key set document: - can be retrieved from [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of the issuer. - can be inferred from the email domain of the issuer (e.g. a Google service account). Example: https://www.googleapis.com/oauth2/v1/certs
	JwksUri *string `pulumi:"jwksUri"`
	// Defines the locations to extract the JWT. JWT locations can be either from HTTP headers or URL query parameters. The rule is that the first match wins. The checking order is: checking all headers first, then URL query parameters. If not specified, default to use following 3 locations: 1) Authorization: Bearer 2) x-goog-iap-jwt-assertion 3) access_token query parameter Default locations can be specified as followings: jwt_locations: - header: Authorization value_prefix: "Bearer " - header: x-goog-iap-jwt-assertion - query: access_token
	JwtLocations []JwtLocation `pulumi:"jwtLocations"`
}

// AuthProviderInput is an input type that accepts AuthProviderArgs and AuthProviderOutput values.
// You can construct a concrete instance of `AuthProviderInput` via:
//
//          AuthProviderArgs{...}
type AuthProviderInput interface {
	pulumi.Input

	ToAuthProviderOutput() AuthProviderOutput
	ToAuthProviderOutputWithContext(context.Context) AuthProviderOutput
}

// Configuration for an authentication provider, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
type AuthProviderArgs struct {
	// The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, JWTs with audiences: - "https://[service.name]/[google.protobuf.Api.name]" - "https://[service.name]/" will be accepted. For example, if no audiences are in the setting, LibraryService API will accept JWTs with the following audiences: - https://library-example.googleapis.com/google.example.library.v1.LibraryService - https://library-example.googleapis.com/ Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
	Audiences pulumi.StringPtrInput `pulumi:"audiences"`
	// Redirect URL if JWT token is required but not present or is expired. Implement authorizationUrl of securityDefinitions in OpenAPI spec.
	AuthorizationUrl pulumi.StringPtrInput `pulumi:"authorizationUrl"`
	// The unique identifier of the auth provider. It will be referred to by `AuthRequirement.provider_id`. Example: "bookstore_auth".
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Identifies the principal that issued the JWT. See https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1 Usually a URL or an email address. Example: https://securetoken.google.com Example: 1234567-compute@developer.gserviceaccount.com
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// URL of the provider's public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). Optional if the key set document: - can be retrieved from [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of the issuer. - can be inferred from the email domain of the issuer (e.g. a Google service account). Example: https://www.googleapis.com/oauth2/v1/certs
	JwksUri pulumi.StringPtrInput `pulumi:"jwksUri"`
	// Defines the locations to extract the JWT. JWT locations can be either from HTTP headers or URL query parameters. The rule is that the first match wins. The checking order is: checking all headers first, then URL query parameters. If not specified, default to use following 3 locations: 1) Authorization: Bearer 2) x-goog-iap-jwt-assertion 3) access_token query parameter Default locations can be specified as followings: jwt_locations: - header: Authorization value_prefix: "Bearer " - header: x-goog-iap-jwt-assertion - query: access_token
	JwtLocations JwtLocationArrayInput `pulumi:"jwtLocations"`
}

func (AuthProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthProvider)(nil)).Elem()
}

func (i AuthProviderArgs) ToAuthProviderOutput() AuthProviderOutput {
	return i.ToAuthProviderOutputWithContext(context.Background())
}

func (i AuthProviderArgs) ToAuthProviderOutputWithContext(ctx context.Context) AuthProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthProviderOutput)
}

// AuthProviderArrayInput is an input type that accepts AuthProviderArray and AuthProviderArrayOutput values.
// You can construct a concrete instance of `AuthProviderArrayInput` via:
//
//          AuthProviderArray{ AuthProviderArgs{...} }
type AuthProviderArrayInput interface {
	pulumi.Input

	ToAuthProviderArrayOutput() AuthProviderArrayOutput
	ToAuthProviderArrayOutputWithContext(context.Context) AuthProviderArrayOutput
}

type AuthProviderArray []AuthProviderInput

func (AuthProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthProvider)(nil)).Elem()
}

func (i AuthProviderArray) ToAuthProviderArrayOutput() AuthProviderArrayOutput {
	return i.ToAuthProviderArrayOutputWithContext(context.Background())
}

func (i AuthProviderArray) ToAuthProviderArrayOutputWithContext(ctx context.Context) AuthProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthProviderArrayOutput)
}

// Configuration for an authentication provider, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
type AuthProviderOutput struct{ *pulumi.OutputState }

func (AuthProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthProvider)(nil)).Elem()
}

func (o AuthProviderOutput) ToAuthProviderOutput() AuthProviderOutput {
	return o
}

func (o AuthProviderOutput) ToAuthProviderOutputWithContext(ctx context.Context) AuthProviderOutput {
	return o
}

// The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, JWTs with audiences: - "https://[service.name]/[google.protobuf.Api.name]" - "https://[service.name]/" will be accepted. For example, if no audiences are in the setting, LibraryService API will accept JWTs with the following audiences: - https://library-example.googleapis.com/google.example.library.v1.LibraryService - https://library-example.googleapis.com/ Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
func (o AuthProviderOutput) Audiences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthProvider) *string { return v.Audiences }).(pulumi.StringPtrOutput)
}

// Redirect URL if JWT token is required but not present or is expired. Implement authorizationUrl of securityDefinitions in OpenAPI spec.
func (o AuthProviderOutput) AuthorizationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthProvider) *string { return v.AuthorizationUrl }).(pulumi.StringPtrOutput)
}

// The unique identifier of the auth provider. It will be referred to by `AuthRequirement.provider_id`. Example: "bookstore_auth".
func (o AuthProviderOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthProvider) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Identifies the principal that issued the JWT. See https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1 Usually a URL or an email address. Example: https://securetoken.google.com Example: 1234567-compute@developer.gserviceaccount.com
func (o AuthProviderOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthProvider) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// URL of the provider's public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). Optional if the key set document: - can be retrieved from [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of the issuer. - can be inferred from the email domain of the issuer (e.g. a Google service account). Example: https://www.googleapis.com/oauth2/v1/certs
func (o AuthProviderOutput) JwksUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthProvider) *string { return v.JwksUri }).(pulumi.StringPtrOutput)
}

// Defines the locations to extract the JWT. JWT locations can be either from HTTP headers or URL query parameters. The rule is that the first match wins. The checking order is: checking all headers first, then URL query parameters. If not specified, default to use following 3 locations: 1) Authorization: Bearer 2) x-goog-iap-jwt-assertion 3) access_token query parameter Default locations can be specified as followings: jwt_locations: - header: Authorization value_prefix: "Bearer " - header: x-goog-iap-jwt-assertion - query: access_token
func (o AuthProviderOutput) JwtLocations() JwtLocationArrayOutput {
	return o.ApplyT(func(v AuthProvider) []JwtLocation { return v.JwtLocations }).(JwtLocationArrayOutput)
}

type AuthProviderArrayOutput struct{ *pulumi.OutputState }

func (AuthProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthProvider)(nil)).Elem()
}

func (o AuthProviderArrayOutput) ToAuthProviderArrayOutput() AuthProviderArrayOutput {
	return o
}

func (o AuthProviderArrayOutput) ToAuthProviderArrayOutputWithContext(ctx context.Context) AuthProviderArrayOutput {
	return o
}

func (o AuthProviderArrayOutput) Index(i pulumi.IntInput) AuthProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthProvider {
		return vs[0].([]AuthProvider)[vs[1].(int)]
	}).(AuthProviderOutput)
}

// User-defined authentication requirements, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
type AuthRequirement struct {
	// NOTE: This will be deprecated soon, once AuthProvider.audiences is implemented and accepted in all the runtime components. The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, only JWTs with audience "https://Service_name/API_name" will be accepted. For example, if no audiences are in the setting, LibraryService API will only accept JWTs with the following audience "https://library-example.googleapis.com/google.example.library.v1.LibraryService". Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
	Audiences *string `pulumi:"audiences"`
	// id from authentication provider. Example: provider_id: bookstore_auth
	ProviderId *string `pulumi:"providerId"`
}

// AuthRequirementInput is an input type that accepts AuthRequirementArgs and AuthRequirementOutput values.
// You can construct a concrete instance of `AuthRequirementInput` via:
//
//          AuthRequirementArgs{...}
type AuthRequirementInput interface {
	pulumi.Input

	ToAuthRequirementOutput() AuthRequirementOutput
	ToAuthRequirementOutputWithContext(context.Context) AuthRequirementOutput
}

// User-defined authentication requirements, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
type AuthRequirementArgs struct {
	// NOTE: This will be deprecated soon, once AuthProvider.audiences is implemented and accepted in all the runtime components. The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, only JWTs with audience "https://Service_name/API_name" will be accepted. For example, if no audiences are in the setting, LibraryService API will only accept JWTs with the following audience "https://library-example.googleapis.com/google.example.library.v1.LibraryService". Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
	Audiences pulumi.StringPtrInput `pulumi:"audiences"`
	// id from authentication provider. Example: provider_id: bookstore_auth
	ProviderId pulumi.StringPtrInput `pulumi:"providerId"`
}

func (AuthRequirementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthRequirement)(nil)).Elem()
}

func (i AuthRequirementArgs) ToAuthRequirementOutput() AuthRequirementOutput {
	return i.ToAuthRequirementOutputWithContext(context.Background())
}

func (i AuthRequirementArgs) ToAuthRequirementOutputWithContext(ctx context.Context) AuthRequirementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthRequirementOutput)
}

// AuthRequirementArrayInput is an input type that accepts AuthRequirementArray and AuthRequirementArrayOutput values.
// You can construct a concrete instance of `AuthRequirementArrayInput` via:
//
//          AuthRequirementArray{ AuthRequirementArgs{...} }
type AuthRequirementArrayInput interface {
	pulumi.Input

	ToAuthRequirementArrayOutput() AuthRequirementArrayOutput
	ToAuthRequirementArrayOutputWithContext(context.Context) AuthRequirementArrayOutput
}

type AuthRequirementArray []AuthRequirementInput

func (AuthRequirementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthRequirement)(nil)).Elem()
}

func (i AuthRequirementArray) ToAuthRequirementArrayOutput() AuthRequirementArrayOutput {
	return i.ToAuthRequirementArrayOutputWithContext(context.Background())
}

func (i AuthRequirementArray) ToAuthRequirementArrayOutputWithContext(ctx context.Context) AuthRequirementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthRequirementArrayOutput)
}

// User-defined authentication requirements, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
type AuthRequirementOutput struct{ *pulumi.OutputState }

func (AuthRequirementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthRequirement)(nil)).Elem()
}

func (o AuthRequirementOutput) ToAuthRequirementOutput() AuthRequirementOutput {
	return o
}

func (o AuthRequirementOutput) ToAuthRequirementOutputWithContext(ctx context.Context) AuthRequirementOutput {
	return o
}

// NOTE: This will be deprecated soon, once AuthProvider.audiences is implemented and accepted in all the runtime components. The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, only JWTs with audience "https://Service_name/API_name" will be accepted. For example, if no audiences are in the setting, LibraryService API will only accept JWTs with the following audience "https://library-example.googleapis.com/google.example.library.v1.LibraryService". Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
func (o AuthRequirementOutput) Audiences() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthRequirement) *string { return v.Audiences }).(pulumi.StringPtrOutput)
}

// id from authentication provider. Example: provider_id: bookstore_auth
func (o AuthRequirementOutput) ProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthRequirement) *string { return v.ProviderId }).(pulumi.StringPtrOutput)
}

type AuthRequirementArrayOutput struct{ *pulumi.OutputState }

func (AuthRequirementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthRequirement)(nil)).Elem()
}

func (o AuthRequirementArrayOutput) ToAuthRequirementArrayOutput() AuthRequirementArrayOutput {
	return o
}

func (o AuthRequirementArrayOutput) ToAuthRequirementArrayOutputWithContext(ctx context.Context) AuthRequirementArrayOutput {
	return o
}

func (o AuthRequirementArrayOutput) Index(i pulumi.IntInput) AuthRequirementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthRequirement {
		return vs[0].([]AuthRequirement)[vs[1].(int)]
	}).(AuthRequirementOutput)
}

// `Authentication` defines the authentication configuration for an API. Example for an API targeted for external use: name: calendar.googleapis.com authentication: providers: - id: google_calendar_auth jwks_uri: https://www.googleapis.com/oauth2/v1/certs issuer: https://securetoken.google.com rules: - selector: "*" requirements: provider_id: google_calendar_auth
type Authentication struct {
	// Defines a set of authentication providers that a service supports.
	Providers []AuthProvider `pulumi:"providers"`
	// A list of authentication rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
	Rules []AuthenticationRule `pulumi:"rules"`
}

// AuthenticationInput is an input type that accepts AuthenticationArgs and AuthenticationOutput values.
// You can construct a concrete instance of `AuthenticationInput` via:
//
//          AuthenticationArgs{...}
type AuthenticationInput interface {
	pulumi.Input

	ToAuthenticationOutput() AuthenticationOutput
	ToAuthenticationOutputWithContext(context.Context) AuthenticationOutput
}

// `Authentication` defines the authentication configuration for an API. Example for an API targeted for external use: name: calendar.googleapis.com authentication: providers: - id: google_calendar_auth jwks_uri: https://www.googleapis.com/oauth2/v1/certs issuer: https://securetoken.google.com rules: - selector: "*" requirements: provider_id: google_calendar_auth
type AuthenticationArgs struct {
	// Defines a set of authentication providers that a service supports.
	Providers AuthProviderArrayInput `pulumi:"providers"`
	// A list of authentication rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
	Rules AuthenticationRuleArrayInput `pulumi:"rules"`
}

func (AuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Authentication)(nil)).Elem()
}

func (i AuthenticationArgs) ToAuthenticationOutput() AuthenticationOutput {
	return i.ToAuthenticationOutputWithContext(context.Background())
}

func (i AuthenticationArgs) ToAuthenticationOutputWithContext(ctx context.Context) AuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationOutput)
}

func (i AuthenticationArgs) ToAuthenticationPtrOutput() AuthenticationPtrOutput {
	return i.ToAuthenticationPtrOutputWithContext(context.Background())
}

func (i AuthenticationArgs) ToAuthenticationPtrOutputWithContext(ctx context.Context) AuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationOutput).ToAuthenticationPtrOutputWithContext(ctx)
}

// AuthenticationPtrInput is an input type that accepts AuthenticationArgs, AuthenticationPtr and AuthenticationPtrOutput values.
// You can construct a concrete instance of `AuthenticationPtrInput` via:
//
//          AuthenticationArgs{...}
//
//  or:
//
//          nil
type AuthenticationPtrInput interface {
	pulumi.Input

	ToAuthenticationPtrOutput() AuthenticationPtrOutput
	ToAuthenticationPtrOutputWithContext(context.Context) AuthenticationPtrOutput
}

type authenticationPtrType AuthenticationArgs

func AuthenticationPtr(v *AuthenticationArgs) AuthenticationPtrInput {
	return (*authenticationPtrType)(v)
}

func (*authenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Authentication)(nil)).Elem()
}

func (i *authenticationPtrType) ToAuthenticationPtrOutput() AuthenticationPtrOutput {
	return i.ToAuthenticationPtrOutputWithContext(context.Background())
}

func (i *authenticationPtrType) ToAuthenticationPtrOutputWithContext(ctx context.Context) AuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationPtrOutput)
}

// `Authentication` defines the authentication configuration for an API. Example for an API targeted for external use: name: calendar.googleapis.com authentication: providers: - id: google_calendar_auth jwks_uri: https://www.googleapis.com/oauth2/v1/certs issuer: https://securetoken.google.com rules: - selector: "*" requirements: provider_id: google_calendar_auth
type AuthenticationOutput struct{ *pulumi.OutputState }

func (AuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Authentication)(nil)).Elem()
}

func (o AuthenticationOutput) ToAuthenticationOutput() AuthenticationOutput {
	return o
}

func (o AuthenticationOutput) ToAuthenticationOutputWithContext(ctx context.Context) AuthenticationOutput {
	return o
}

func (o AuthenticationOutput) ToAuthenticationPtrOutput() AuthenticationPtrOutput {
	return o.ToAuthenticationPtrOutputWithContext(context.Background())
}

func (o AuthenticationOutput) ToAuthenticationPtrOutputWithContext(ctx context.Context) AuthenticationPtrOutput {
	return o.ApplyT(func(v Authentication) *Authentication {
		return &v
	}).(AuthenticationPtrOutput)
}

// Defines a set of authentication providers that a service supports.
func (o AuthenticationOutput) Providers() AuthProviderArrayOutput {
	return o.ApplyT(func(v Authentication) []AuthProvider { return v.Providers }).(AuthProviderArrayOutput)
}

// A list of authentication rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
func (o AuthenticationOutput) Rules() AuthenticationRuleArrayOutput {
	return o.ApplyT(func(v Authentication) []AuthenticationRule { return v.Rules }).(AuthenticationRuleArrayOutput)
}

type AuthenticationPtrOutput struct{ *pulumi.OutputState }

func (AuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Authentication)(nil)).Elem()
}

func (o AuthenticationPtrOutput) ToAuthenticationPtrOutput() AuthenticationPtrOutput {
	return o
}

func (o AuthenticationPtrOutput) ToAuthenticationPtrOutputWithContext(ctx context.Context) AuthenticationPtrOutput {
	return o
}

func (o AuthenticationPtrOutput) Elem() AuthenticationOutput {
	return o.ApplyT(func(v *Authentication) Authentication { return *v }).(AuthenticationOutput)
}

// Defines a set of authentication providers that a service supports.
func (o AuthenticationPtrOutput) Providers() AuthProviderArrayOutput {
	return o.ApplyT(func(v *Authentication) []AuthProvider {
		if v == nil {
			return nil
		}
		return v.Providers
	}).(AuthProviderArrayOutput)
}

// A list of authentication rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
func (o AuthenticationPtrOutput) Rules() AuthenticationRuleArrayOutput {
	return o.ApplyT(func(v *Authentication) []AuthenticationRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(AuthenticationRuleArrayOutput)
}

// Authentication rules for the service. By default, if a method has any authentication requirements, every request must include a valid credential matching one of the requirements. It's an error to include more than one kind of credential in a single request. If a method doesn't have any auth requirements, request credentials will be ignored.
type AuthenticationRule struct {
	// If true, the service accepts API keys without any other credential. This flag only applies to HTTP and gRPC requests.
	AllowWithoutCredential *bool `pulumi:"allowWithoutCredential"`
	// The requirements for OAuth credentials.
	Oauth *OAuthRequirements `pulumi:"oauth"`
	// Requirements for additional authentication providers.
	Requirements []AuthRequirement `pulumi:"requirements"`
	// Selects the methods to which this rule applies. Refer to selector for syntax details.
	Selector *string `pulumi:"selector"`
}

// AuthenticationRuleInput is an input type that accepts AuthenticationRuleArgs and AuthenticationRuleOutput values.
// You can construct a concrete instance of `AuthenticationRuleInput` via:
//
//          AuthenticationRuleArgs{...}
type AuthenticationRuleInput interface {
	pulumi.Input

	ToAuthenticationRuleOutput() AuthenticationRuleOutput
	ToAuthenticationRuleOutputWithContext(context.Context) AuthenticationRuleOutput
}

// Authentication rules for the service. By default, if a method has any authentication requirements, every request must include a valid credential matching one of the requirements. It's an error to include more than one kind of credential in a single request. If a method doesn't have any auth requirements, request credentials will be ignored.
type AuthenticationRuleArgs struct {
	// If true, the service accepts API keys without any other credential. This flag only applies to HTTP and gRPC requests.
	AllowWithoutCredential pulumi.BoolPtrInput `pulumi:"allowWithoutCredential"`
	// The requirements for OAuth credentials.
	Oauth OAuthRequirementsPtrInput `pulumi:"oauth"`
	// Requirements for additional authentication providers.
	Requirements AuthRequirementArrayInput `pulumi:"requirements"`
	// Selects the methods to which this rule applies. Refer to selector for syntax details.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
}

func (AuthenticationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticationRule)(nil)).Elem()
}

func (i AuthenticationRuleArgs) ToAuthenticationRuleOutput() AuthenticationRuleOutput {
	return i.ToAuthenticationRuleOutputWithContext(context.Background())
}

func (i AuthenticationRuleArgs) ToAuthenticationRuleOutputWithContext(ctx context.Context) AuthenticationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationRuleOutput)
}

// AuthenticationRuleArrayInput is an input type that accepts AuthenticationRuleArray and AuthenticationRuleArrayOutput values.
// You can construct a concrete instance of `AuthenticationRuleArrayInput` via:
//
//          AuthenticationRuleArray{ AuthenticationRuleArgs{...} }
type AuthenticationRuleArrayInput interface {
	pulumi.Input

	ToAuthenticationRuleArrayOutput() AuthenticationRuleArrayOutput
	ToAuthenticationRuleArrayOutputWithContext(context.Context) AuthenticationRuleArrayOutput
}

type AuthenticationRuleArray []AuthenticationRuleInput

func (AuthenticationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthenticationRule)(nil)).Elem()
}

func (i AuthenticationRuleArray) ToAuthenticationRuleArrayOutput() AuthenticationRuleArrayOutput {
	return i.ToAuthenticationRuleArrayOutputWithContext(context.Background())
}

func (i AuthenticationRuleArray) ToAuthenticationRuleArrayOutputWithContext(ctx context.Context) AuthenticationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationRuleArrayOutput)
}

// Authentication rules for the service. By default, if a method has any authentication requirements, every request must include a valid credential matching one of the requirements. It's an error to include more than one kind of credential in a single request. If a method doesn't have any auth requirements, request credentials will be ignored.
type AuthenticationRuleOutput struct{ *pulumi.OutputState }

func (AuthenticationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticationRule)(nil)).Elem()
}

func (o AuthenticationRuleOutput) ToAuthenticationRuleOutput() AuthenticationRuleOutput {
	return o
}

func (o AuthenticationRuleOutput) ToAuthenticationRuleOutputWithContext(ctx context.Context) AuthenticationRuleOutput {
	return o
}

// If true, the service accepts API keys without any other credential. This flag only applies to HTTP and gRPC requests.
func (o AuthenticationRuleOutput) AllowWithoutCredential() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthenticationRule) *bool { return v.AllowWithoutCredential }).(pulumi.BoolPtrOutput)
}

// The requirements for OAuth credentials.
func (o AuthenticationRuleOutput) Oauth() OAuthRequirementsPtrOutput {
	return o.ApplyT(func(v AuthenticationRule) *OAuthRequirements { return v.Oauth }).(OAuthRequirementsPtrOutput)
}

// Requirements for additional authentication providers.
func (o AuthenticationRuleOutput) Requirements() AuthRequirementArrayOutput {
	return o.ApplyT(func(v AuthenticationRule) []AuthRequirement { return v.Requirements }).(AuthRequirementArrayOutput)
}

// Selects the methods to which this rule applies. Refer to selector for syntax details.
func (o AuthenticationRuleOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthenticationRule) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

type AuthenticationRuleArrayOutput struct{ *pulumi.OutputState }

func (AuthenticationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthenticationRule)(nil)).Elem()
}

func (o AuthenticationRuleArrayOutput) ToAuthenticationRuleArrayOutput() AuthenticationRuleArrayOutput {
	return o
}

func (o AuthenticationRuleArrayOutput) ToAuthenticationRuleArrayOutputWithContext(ctx context.Context) AuthenticationRuleArrayOutput {
	return o
}

func (o AuthenticationRuleArrayOutput) Index(i pulumi.IntInput) AuthenticationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthenticationRule {
		return vs[0].([]AuthenticationRule)[vs[1].(int)]
	}).(AuthenticationRuleOutput)
}

// `Backend` defines the backend configuration for a service.
type Backend struct {
	// A list of API backend rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
	Rules []BackendRule `pulumi:"rules"`
}

// BackendInput is an input type that accepts BackendArgs and BackendOutput values.
// You can construct a concrete instance of `BackendInput` via:
//
//          BackendArgs{...}
type BackendInput interface {
	pulumi.Input

	ToBackendOutput() BackendOutput
	ToBackendOutputWithContext(context.Context) BackendOutput
}

// `Backend` defines the backend configuration for a service.
type BackendArgs struct {
	// A list of API backend rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
	Rules BackendRuleArrayInput `pulumi:"rules"`
}

func (BackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Backend)(nil)).Elem()
}

func (i BackendArgs) ToBackendOutput() BackendOutput {
	return i.ToBackendOutputWithContext(context.Background())
}

func (i BackendArgs) ToBackendOutputWithContext(ctx context.Context) BackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendOutput)
}

func (i BackendArgs) ToBackendPtrOutput() BackendPtrOutput {
	return i.ToBackendPtrOutputWithContext(context.Background())
}

func (i BackendArgs) ToBackendPtrOutputWithContext(ctx context.Context) BackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendOutput).ToBackendPtrOutputWithContext(ctx)
}

// BackendPtrInput is an input type that accepts BackendArgs, BackendPtr and BackendPtrOutput values.
// You can construct a concrete instance of `BackendPtrInput` via:
//
//          BackendArgs{...}
//
//  or:
//
//          nil
type BackendPtrInput interface {
	pulumi.Input

	ToBackendPtrOutput() BackendPtrOutput
	ToBackendPtrOutputWithContext(context.Context) BackendPtrOutput
}

type backendPtrType BackendArgs

func BackendPtr(v *BackendArgs) BackendPtrInput {
	return (*backendPtrType)(v)
}

func (*backendPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Backend)(nil)).Elem()
}

func (i *backendPtrType) ToBackendPtrOutput() BackendPtrOutput {
	return i.ToBackendPtrOutputWithContext(context.Background())
}

func (i *backendPtrType) ToBackendPtrOutputWithContext(ctx context.Context) BackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendPtrOutput)
}

// `Backend` defines the backend configuration for a service.
type BackendOutput struct{ *pulumi.OutputState }

func (BackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Backend)(nil)).Elem()
}

func (o BackendOutput) ToBackendOutput() BackendOutput {
	return o
}

func (o BackendOutput) ToBackendOutputWithContext(ctx context.Context) BackendOutput {
	return o
}

func (o BackendOutput) ToBackendPtrOutput() BackendPtrOutput {
	return o.ToBackendPtrOutputWithContext(context.Background())
}

func (o BackendOutput) ToBackendPtrOutputWithContext(ctx context.Context) BackendPtrOutput {
	return o.ApplyT(func(v Backend) *Backend {
		return &v
	}).(BackendPtrOutput)
}

// A list of API backend rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
func (o BackendOutput) Rules() BackendRuleArrayOutput {
	return o.ApplyT(func(v Backend) []BackendRule { return v.Rules }).(BackendRuleArrayOutput)
}

type BackendPtrOutput struct{ *pulumi.OutputState }

func (BackendPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Backend)(nil)).Elem()
}

func (o BackendPtrOutput) ToBackendPtrOutput() BackendPtrOutput {
	return o
}

func (o BackendPtrOutput) ToBackendPtrOutputWithContext(ctx context.Context) BackendPtrOutput {
	return o
}

func (o BackendPtrOutput) Elem() BackendOutput {
	return o.ApplyT(func(v *Backend) Backend { return *v }).(BackendOutput)
}

// A list of API backend rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
func (o BackendPtrOutput) Rules() BackendRuleArrayOutput {
	return o.ApplyT(func(v *Backend) []BackendRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(BackendRuleArrayOutput)
}

// A backend rule provides configuration for an individual API element.
type BackendRule struct {
	// The address of the API backend. The scheme is used to determine the backend protocol and security. The following schemes are accepted: SCHEME PROTOCOL SECURITY http:// HTTP None https:// HTTP TLS grpc:// gRPC None grpcs:// gRPC TLS It is recommended to explicitly include a scheme. Leaving out the scheme may cause constrasting behaviors across platforms. If the port is unspecified, the default is: - 80 for schemes without TLS - 443 for schemes with TLS For HTTP backends, use protocol to specify the protocol version.
	Address *string `pulumi:"address"`
	// The number of seconds to wait for a response from a request. The default varies based on the request protocol and deployment environment.
	Deadline *float64 `pulumi:"deadline"`
	// When disable_auth is true, a JWT ID token won't be generated and the original "Authorization" HTTP header will be preserved. If the header is used to carry the original token and is expected by the backend, this field must be set to true to preserve the header.
	DisableAuth *bool `pulumi:"disableAuth"`
	// The JWT audience is used when generating a JWT ID token for the backend. This ID token will be added in the HTTP "authorization" header, and sent to the backend.
	JwtAudience *string `pulumi:"jwtAudience"`
	// Minimum deadline in seconds needed for this method. Calls having deadline value lower than this will be rejected.
	MinDeadline *float64 `pulumi:"minDeadline"`
	// The number of seconds to wait for the completion of a long running operation. The default is no deadline.
	OperationDeadline *float64 `pulumi:"operationDeadline"`
	PathTranslation   *string  `pulumi:"pathTranslation"`
	// The protocol used for sending a request to the backend. The supported values are "http/1.1" and "h2". The default value is inferred from the scheme in the address field: SCHEME PROTOCOL http:// http/1.1 https:// http/1.1 grpc:// h2 grpcs:// h2 For secure HTTP backends (https://) that support HTTP/2, set this field to "h2" for improved performance. Configuring this field to non-default values is only supported for secure HTTP backends. This field will be ignored for all other backends. See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for more details on the supported values.
	Protocol *string `pulumi:"protocol"`
	// Selects the methods to which this rule applies. Refer to selector for syntax details.
	Selector *string `pulumi:"selector"`
}

// BackendRuleInput is an input type that accepts BackendRuleArgs and BackendRuleOutput values.
// You can construct a concrete instance of `BackendRuleInput` via:
//
//          BackendRuleArgs{...}
type BackendRuleInput interface {
	pulumi.Input

	ToBackendRuleOutput() BackendRuleOutput
	ToBackendRuleOutputWithContext(context.Context) BackendRuleOutput
}

// A backend rule provides configuration for an individual API element.
type BackendRuleArgs struct {
	// The address of the API backend. The scheme is used to determine the backend protocol and security. The following schemes are accepted: SCHEME PROTOCOL SECURITY http:// HTTP None https:// HTTP TLS grpc:// gRPC None grpcs:// gRPC TLS It is recommended to explicitly include a scheme. Leaving out the scheme may cause constrasting behaviors across platforms. If the port is unspecified, the default is: - 80 for schemes without TLS - 443 for schemes with TLS For HTTP backends, use protocol to specify the protocol version.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The number of seconds to wait for a response from a request. The default varies based on the request protocol and deployment environment.
	Deadline pulumi.Float64PtrInput `pulumi:"deadline"`
	// When disable_auth is true, a JWT ID token won't be generated and the original "Authorization" HTTP header will be preserved. If the header is used to carry the original token and is expected by the backend, this field must be set to true to preserve the header.
	DisableAuth pulumi.BoolPtrInput `pulumi:"disableAuth"`
	// The JWT audience is used when generating a JWT ID token for the backend. This ID token will be added in the HTTP "authorization" header, and sent to the backend.
	JwtAudience pulumi.StringPtrInput `pulumi:"jwtAudience"`
	// Minimum deadline in seconds needed for this method. Calls having deadline value lower than this will be rejected.
	MinDeadline pulumi.Float64PtrInput `pulumi:"minDeadline"`
	// The number of seconds to wait for the completion of a long running operation. The default is no deadline.
	OperationDeadline pulumi.Float64PtrInput `pulumi:"operationDeadline"`
	PathTranslation   pulumi.StringPtrInput  `pulumi:"pathTranslation"`
	// The protocol used for sending a request to the backend. The supported values are "http/1.1" and "h2". The default value is inferred from the scheme in the address field: SCHEME PROTOCOL http:// http/1.1 https:// http/1.1 grpc:// h2 grpcs:// h2 For secure HTTP backends (https://) that support HTTP/2, set this field to "h2" for improved performance. Configuring this field to non-default values is only supported for secure HTTP backends. This field will be ignored for all other backends. See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for more details on the supported values.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Selects the methods to which this rule applies. Refer to selector for syntax details.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
}

func (BackendRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendRule)(nil)).Elem()
}

func (i BackendRuleArgs) ToBackendRuleOutput() BackendRuleOutput {
	return i.ToBackendRuleOutputWithContext(context.Background())
}

func (i BackendRuleArgs) ToBackendRuleOutputWithContext(ctx context.Context) BackendRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendRuleOutput)
}

// BackendRuleArrayInput is an input type that accepts BackendRuleArray and BackendRuleArrayOutput values.
// You can construct a concrete instance of `BackendRuleArrayInput` via:
//
//          BackendRuleArray{ BackendRuleArgs{...} }
type BackendRuleArrayInput interface {
	pulumi.Input

	ToBackendRuleArrayOutput() BackendRuleArrayOutput
	ToBackendRuleArrayOutputWithContext(context.Context) BackendRuleArrayOutput
}

type BackendRuleArray []BackendRuleInput

func (BackendRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendRule)(nil)).Elem()
}

func (i BackendRuleArray) ToBackendRuleArrayOutput() BackendRuleArrayOutput {
	return i.ToBackendRuleArrayOutputWithContext(context.Background())
}

func (i BackendRuleArray) ToBackendRuleArrayOutputWithContext(ctx context.Context) BackendRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendRuleArrayOutput)
}

// A backend rule provides configuration for an individual API element.
type BackendRuleOutput struct{ *pulumi.OutputState }

func (BackendRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackendRule)(nil)).Elem()
}

func (o BackendRuleOutput) ToBackendRuleOutput() BackendRuleOutput {
	return o
}

func (o BackendRuleOutput) ToBackendRuleOutputWithContext(ctx context.Context) BackendRuleOutput {
	return o
}

// The address of the API backend. The scheme is used to determine the backend protocol and security. The following schemes are accepted: SCHEME PROTOCOL SECURITY http:// HTTP None https:// HTTP TLS grpc:// gRPC None grpcs:// gRPC TLS It is recommended to explicitly include a scheme. Leaving out the scheme may cause constrasting behaviors across platforms. If the port is unspecified, the default is: - 80 for schemes without TLS - 443 for schemes with TLS For HTTP backends, use protocol to specify the protocol version.
func (o BackendRuleOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendRule) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The number of seconds to wait for a response from a request. The default varies based on the request protocol and deployment environment.
func (o BackendRuleOutput) Deadline() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BackendRule) *float64 { return v.Deadline }).(pulumi.Float64PtrOutput)
}

// When disable_auth is true, a JWT ID token won't be generated and the original "Authorization" HTTP header will be preserved. If the header is used to carry the original token and is expected by the backend, this field must be set to true to preserve the header.
func (o BackendRuleOutput) DisableAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackendRule) *bool { return v.DisableAuth }).(pulumi.BoolPtrOutput)
}

// The JWT audience is used when generating a JWT ID token for the backend. This ID token will be added in the HTTP "authorization" header, and sent to the backend.
func (o BackendRuleOutput) JwtAudience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendRule) *string { return v.JwtAudience }).(pulumi.StringPtrOutput)
}

// Minimum deadline in seconds needed for this method. Calls having deadline value lower than this will be rejected.
func (o BackendRuleOutput) MinDeadline() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BackendRule) *float64 { return v.MinDeadline }).(pulumi.Float64PtrOutput)
}

// The number of seconds to wait for the completion of a long running operation. The default is no deadline.
func (o BackendRuleOutput) OperationDeadline() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BackendRule) *float64 { return v.OperationDeadline }).(pulumi.Float64PtrOutput)
}

func (o BackendRuleOutput) PathTranslation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendRule) *string { return v.PathTranslation }).(pulumi.StringPtrOutput)
}

// The protocol used for sending a request to the backend. The supported values are "http/1.1" and "h2". The default value is inferred from the scheme in the address field: SCHEME PROTOCOL http:// http/1.1 https:// http/1.1 grpc:// h2 grpcs:// h2 For secure HTTP backends (https://) that support HTTP/2, set this field to "h2" for improved performance. Configuring this field to non-default values is only supported for secure HTTP backends. This field will be ignored for all other backends. See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for more details on the supported values.
func (o BackendRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendRule) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Selects the methods to which this rule applies. Refer to selector for syntax details.
func (o BackendRuleOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackendRule) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

type BackendRuleArrayOutput struct{ *pulumi.OutputState }

func (BackendRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackendRule)(nil)).Elem()
}

func (o BackendRuleArrayOutput) ToBackendRuleArrayOutput() BackendRuleArrayOutput {
	return o
}

func (o BackendRuleArrayOutput) ToBackendRuleArrayOutputWithContext(ctx context.Context) BackendRuleArrayOutput {
	return o
}

func (o BackendRuleArrayOutput) Index(i pulumi.IntInput) BackendRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackendRule {
		return vs[0].([]BackendRule)[vs[1].(int)]
	}).(BackendRuleOutput)
}

// Billing related configuration of the service. The following example shows how to configure monitored resources and metrics for billing, `consumer_destinations` is the only supported destination and the monitored resources need at least one label key `cloud.googleapis.com/location` to indicate the location of the billing usage, using different monitored resources between monitoring and billing is recommended so they can be evolved independently: monitored_resources: - type: library.googleapis.com/billing_branch labels: - key: cloud.googleapis.com/location description: | Predefined label to support billing location restriction. - key: city description: | Custom label to define the city where the library branch is located in. - key: name description: Custom label to define the name of the library branch. metrics: - name: library.googleapis.com/book/borrowed_count metric_kind: DELTA value_type: INT64 unit: "1" billing: consumer_destinations: - monitored_resource: library.googleapis.com/billing_branch metrics: - library.googleapis.com/book/borrowed_count
type Billing struct {
	// Billing configurations for sending metrics to the consumer project. There can be multiple consumer destinations per service, each one must have a different monitored resource type. A metric can be used in at most one consumer destination.
	ConsumerDestinations []BillingDestination `pulumi:"consumerDestinations"`
}

// BillingInput is an input type that accepts BillingArgs and BillingOutput values.
// You can construct a concrete instance of `BillingInput` via:
//
//          BillingArgs{...}
type BillingInput interface {
	pulumi.Input

	ToBillingOutput() BillingOutput
	ToBillingOutputWithContext(context.Context) BillingOutput
}

// Billing related configuration of the service. The following example shows how to configure monitored resources and metrics for billing, `consumer_destinations` is the only supported destination and the monitored resources need at least one label key `cloud.googleapis.com/location` to indicate the location of the billing usage, using different monitored resources between monitoring and billing is recommended so they can be evolved independently: monitored_resources: - type: library.googleapis.com/billing_branch labels: - key: cloud.googleapis.com/location description: | Predefined label to support billing location restriction. - key: city description: | Custom label to define the city where the library branch is located in. - key: name description: Custom label to define the name of the library branch. metrics: - name: library.googleapis.com/book/borrowed_count metric_kind: DELTA value_type: INT64 unit: "1" billing: consumer_destinations: - monitored_resource: library.googleapis.com/billing_branch metrics: - library.googleapis.com/book/borrowed_count
type BillingArgs struct {
	// Billing configurations for sending metrics to the consumer project. There can be multiple consumer destinations per service, each one must have a different monitored resource type. A metric can be used in at most one consumer destination.
	ConsumerDestinations BillingDestinationArrayInput `pulumi:"consumerDestinations"`
}

func (BillingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Billing)(nil)).Elem()
}

func (i BillingArgs) ToBillingOutput() BillingOutput {
	return i.ToBillingOutputWithContext(context.Background())
}

func (i BillingArgs) ToBillingOutputWithContext(ctx context.Context) BillingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingOutput)
}

func (i BillingArgs) ToBillingPtrOutput() BillingPtrOutput {
	return i.ToBillingPtrOutputWithContext(context.Background())
}

func (i BillingArgs) ToBillingPtrOutputWithContext(ctx context.Context) BillingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingOutput).ToBillingPtrOutputWithContext(ctx)
}

// BillingPtrInput is an input type that accepts BillingArgs, BillingPtr and BillingPtrOutput values.
// You can construct a concrete instance of `BillingPtrInput` via:
//
//          BillingArgs{...}
//
//  or:
//
//          nil
type BillingPtrInput interface {
	pulumi.Input

	ToBillingPtrOutput() BillingPtrOutput
	ToBillingPtrOutputWithContext(context.Context) BillingPtrOutput
}

type billingPtrType BillingArgs

func BillingPtr(v *BillingArgs) BillingPtrInput {
	return (*billingPtrType)(v)
}

func (*billingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Billing)(nil)).Elem()
}

func (i *billingPtrType) ToBillingPtrOutput() BillingPtrOutput {
	return i.ToBillingPtrOutputWithContext(context.Background())
}

func (i *billingPtrType) ToBillingPtrOutputWithContext(ctx context.Context) BillingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingPtrOutput)
}

// Billing related configuration of the service. The following example shows how to configure monitored resources and metrics for billing, `consumer_destinations` is the only supported destination and the monitored resources need at least one label key `cloud.googleapis.com/location` to indicate the location of the billing usage, using different monitored resources between monitoring and billing is recommended so they can be evolved independently: monitored_resources: - type: library.googleapis.com/billing_branch labels: - key: cloud.googleapis.com/location description: | Predefined label to support billing location restriction. - key: city description: | Custom label to define the city where the library branch is located in. - key: name description: Custom label to define the name of the library branch. metrics: - name: library.googleapis.com/book/borrowed_count metric_kind: DELTA value_type: INT64 unit: "1" billing: consumer_destinations: - monitored_resource: library.googleapis.com/billing_branch metrics: - library.googleapis.com/book/borrowed_count
type BillingOutput struct{ *pulumi.OutputState }

func (BillingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Billing)(nil)).Elem()
}

func (o BillingOutput) ToBillingOutput() BillingOutput {
	return o
}

func (o BillingOutput) ToBillingOutputWithContext(ctx context.Context) BillingOutput {
	return o
}

func (o BillingOutput) ToBillingPtrOutput() BillingPtrOutput {
	return o.ToBillingPtrOutputWithContext(context.Background())
}

func (o BillingOutput) ToBillingPtrOutputWithContext(ctx context.Context) BillingPtrOutput {
	return o.ApplyT(func(v Billing) *Billing {
		return &v
	}).(BillingPtrOutput)
}

// Billing configurations for sending metrics to the consumer project. There can be multiple consumer destinations per service, each one must have a different monitored resource type. A metric can be used in at most one consumer destination.
func (o BillingOutput) ConsumerDestinations() BillingDestinationArrayOutput {
	return o.ApplyT(func(v Billing) []BillingDestination { return v.ConsumerDestinations }).(BillingDestinationArrayOutput)
}

type BillingPtrOutput struct{ *pulumi.OutputState }

func (BillingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Billing)(nil)).Elem()
}

func (o BillingPtrOutput) ToBillingPtrOutput() BillingPtrOutput {
	return o
}

func (o BillingPtrOutput) ToBillingPtrOutputWithContext(ctx context.Context) BillingPtrOutput {
	return o
}

func (o BillingPtrOutput) Elem() BillingOutput {
	return o.ApplyT(func(v *Billing) Billing { return *v }).(BillingOutput)
}

// Billing configurations for sending metrics to the consumer project. There can be multiple consumer destinations per service, each one must have a different monitored resource type. A metric can be used in at most one consumer destination.
func (o BillingPtrOutput) ConsumerDestinations() BillingDestinationArrayOutput {
	return o.ApplyT(func(v *Billing) []BillingDestination {
		if v == nil {
			return nil
		}
		return v.ConsumerDestinations
	}).(BillingDestinationArrayOutput)
}

// Configuration of a specific billing destination (Currently only support bill against consumer project).
type BillingDestination struct {
	// Names of the metrics to report to this billing destination. Each name must be defined in Service.metrics section.
	Metrics []string `pulumi:"metrics"`
	// The monitored resource type. The type must be defined in Service.monitored_resources section.
	MonitoredResource *string `pulumi:"monitoredResource"`
}

// BillingDestinationInput is an input type that accepts BillingDestinationArgs and BillingDestinationOutput values.
// You can construct a concrete instance of `BillingDestinationInput` via:
//
//          BillingDestinationArgs{...}
type BillingDestinationInput interface {
	pulumi.Input

	ToBillingDestinationOutput() BillingDestinationOutput
	ToBillingDestinationOutputWithContext(context.Context) BillingDestinationOutput
}

// Configuration of a specific billing destination (Currently only support bill against consumer project).
type BillingDestinationArgs struct {
	// Names of the metrics to report to this billing destination. Each name must be defined in Service.metrics section.
	Metrics pulumi.StringArrayInput `pulumi:"metrics"`
	// The monitored resource type. The type must be defined in Service.monitored_resources section.
	MonitoredResource pulumi.StringPtrInput `pulumi:"monitoredResource"`
}

func (BillingDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingDestination)(nil)).Elem()
}

func (i BillingDestinationArgs) ToBillingDestinationOutput() BillingDestinationOutput {
	return i.ToBillingDestinationOutputWithContext(context.Background())
}

func (i BillingDestinationArgs) ToBillingDestinationOutputWithContext(ctx context.Context) BillingDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingDestinationOutput)
}

// BillingDestinationArrayInput is an input type that accepts BillingDestinationArray and BillingDestinationArrayOutput values.
// You can construct a concrete instance of `BillingDestinationArrayInput` via:
//
//          BillingDestinationArray{ BillingDestinationArgs{...} }
type BillingDestinationArrayInput interface {
	pulumi.Input

	ToBillingDestinationArrayOutput() BillingDestinationArrayOutput
	ToBillingDestinationArrayOutputWithContext(context.Context) BillingDestinationArrayOutput
}

type BillingDestinationArray []BillingDestinationInput

func (BillingDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BillingDestination)(nil)).Elem()
}

func (i BillingDestinationArray) ToBillingDestinationArrayOutput() BillingDestinationArrayOutput {
	return i.ToBillingDestinationArrayOutputWithContext(context.Background())
}

func (i BillingDestinationArray) ToBillingDestinationArrayOutputWithContext(ctx context.Context) BillingDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BillingDestinationArrayOutput)
}

// Configuration of a specific billing destination (Currently only support bill against consumer project).
type BillingDestinationOutput struct{ *pulumi.OutputState }

func (BillingDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingDestination)(nil)).Elem()
}

func (o BillingDestinationOutput) ToBillingDestinationOutput() BillingDestinationOutput {
	return o
}

func (o BillingDestinationOutput) ToBillingDestinationOutputWithContext(ctx context.Context) BillingDestinationOutput {
	return o
}

// Names of the metrics to report to this billing destination. Each name must be defined in Service.metrics section.
func (o BillingDestinationOutput) Metrics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BillingDestination) []string { return v.Metrics }).(pulumi.StringArrayOutput)
}

// The monitored resource type. The type must be defined in Service.monitored_resources section.
func (o BillingDestinationOutput) MonitoredResource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BillingDestination) *string { return v.MonitoredResource }).(pulumi.StringPtrOutput)
}

type BillingDestinationArrayOutput struct{ *pulumi.OutputState }

func (BillingDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BillingDestination)(nil)).Elem()
}

func (o BillingDestinationArrayOutput) ToBillingDestinationArrayOutput() BillingDestinationArrayOutput {
	return o
}

func (o BillingDestinationArrayOutput) ToBillingDestinationArrayOutputWithContext(ctx context.Context) BillingDestinationArrayOutput {
	return o
}

func (o BillingDestinationArrayOutput) Index(i pulumi.IntInput) BillingDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BillingDestination {
		return vs[0].([]BillingDestination)[vs[1].(int)]
	}).(BillingDestinationOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// `Context` defines which contexts an API requests. Example: context: rules: - selector: "*" requested: - google.rpc.context.ProjectContext - google.rpc.context.OriginContext The above specifies that all methods in the API request `google.rpc.context.ProjectContext` and `google.rpc.context.OriginContext`. Available context types are defined in package `google.rpc.context`. This also provides mechanism to allowlist any protobuf message extension that can be sent in grpc metadata using “x-goog-ext--bin” and “x-goog-ext--jspb” format. For example, list any service specific protobuf types that can appear in grpc metadata as follows in your yaml file: Example: context: rules: - selector: "google.example.library.v1.LibraryService.CreateBook" allowed_request_extensions: - google.foo.v1.NewExtension allowed_response_extensions: - google.foo.v1.NewExtension You can also specify extension ID instead of fully qualified extension name here.
type Context struct {
	// A list of RPC context rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
	Rules []ContextRule `pulumi:"rules"`
}

// ContextInput is an input type that accepts ContextArgs and ContextOutput values.
// You can construct a concrete instance of `ContextInput` via:
//
//          ContextArgs{...}
type ContextInput interface {
	pulumi.Input

	ToContextOutput() ContextOutput
	ToContextOutputWithContext(context.Context) ContextOutput
}

// `Context` defines which contexts an API requests. Example: context: rules: - selector: "*" requested: - google.rpc.context.ProjectContext - google.rpc.context.OriginContext The above specifies that all methods in the API request `google.rpc.context.ProjectContext` and `google.rpc.context.OriginContext`. Available context types are defined in package `google.rpc.context`. This also provides mechanism to allowlist any protobuf message extension that can be sent in grpc metadata using “x-goog-ext--bin” and “x-goog-ext--jspb” format. For example, list any service specific protobuf types that can appear in grpc metadata as follows in your yaml file: Example: context: rules: - selector: "google.example.library.v1.LibraryService.CreateBook" allowed_request_extensions: - google.foo.v1.NewExtension allowed_response_extensions: - google.foo.v1.NewExtension You can also specify extension ID instead of fully qualified extension name here.
type ContextArgs struct {
	// A list of RPC context rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
	Rules ContextRuleArrayInput `pulumi:"rules"`
}

func (ContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Context)(nil)).Elem()
}

func (i ContextArgs) ToContextOutput() ContextOutput {
	return i.ToContextOutputWithContext(context.Background())
}

func (i ContextArgs) ToContextOutputWithContext(ctx context.Context) ContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextOutput)
}

func (i ContextArgs) ToContextPtrOutput() ContextPtrOutput {
	return i.ToContextPtrOutputWithContext(context.Background())
}

func (i ContextArgs) ToContextPtrOutputWithContext(ctx context.Context) ContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextOutput).ToContextPtrOutputWithContext(ctx)
}

// ContextPtrInput is an input type that accepts ContextArgs, ContextPtr and ContextPtrOutput values.
// You can construct a concrete instance of `ContextPtrInput` via:
//
//          ContextArgs{...}
//
//  or:
//
//          nil
type ContextPtrInput interface {
	pulumi.Input

	ToContextPtrOutput() ContextPtrOutput
	ToContextPtrOutputWithContext(context.Context) ContextPtrOutput
}

type contextPtrType ContextArgs

func ContextPtr(v *ContextArgs) ContextPtrInput {
	return (*contextPtrType)(v)
}

func (*contextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Context)(nil)).Elem()
}

func (i *contextPtrType) ToContextPtrOutput() ContextPtrOutput {
	return i.ToContextPtrOutputWithContext(context.Background())
}

func (i *contextPtrType) ToContextPtrOutputWithContext(ctx context.Context) ContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextPtrOutput)
}

// `Context` defines which contexts an API requests. Example: context: rules: - selector: "*" requested: - google.rpc.context.ProjectContext - google.rpc.context.OriginContext The above specifies that all methods in the API request `google.rpc.context.ProjectContext` and `google.rpc.context.OriginContext`. Available context types are defined in package `google.rpc.context`. This also provides mechanism to allowlist any protobuf message extension that can be sent in grpc metadata using “x-goog-ext--bin” and “x-goog-ext--jspb” format. For example, list any service specific protobuf types that can appear in grpc metadata as follows in your yaml file: Example: context: rules: - selector: "google.example.library.v1.LibraryService.CreateBook" allowed_request_extensions: - google.foo.v1.NewExtension allowed_response_extensions: - google.foo.v1.NewExtension You can also specify extension ID instead of fully qualified extension name here.
type ContextOutput struct{ *pulumi.OutputState }

func (ContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Context)(nil)).Elem()
}

func (o ContextOutput) ToContextOutput() ContextOutput {
	return o
}

func (o ContextOutput) ToContextOutputWithContext(ctx context.Context) ContextOutput {
	return o
}

func (o ContextOutput) ToContextPtrOutput() ContextPtrOutput {
	return o.ToContextPtrOutputWithContext(context.Background())
}

func (o ContextOutput) ToContextPtrOutputWithContext(ctx context.Context) ContextPtrOutput {
	return o.ApplyT(func(v Context) *Context {
		return &v
	}).(ContextPtrOutput)
}

// A list of RPC context rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
func (o ContextOutput) Rules() ContextRuleArrayOutput {
	return o.ApplyT(func(v Context) []ContextRule { return v.Rules }).(ContextRuleArrayOutput)
}

type ContextPtrOutput struct{ *pulumi.OutputState }

func (ContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Context)(nil)).Elem()
}

func (o ContextPtrOutput) ToContextPtrOutput() ContextPtrOutput {
	return o
}

func (o ContextPtrOutput) ToContextPtrOutputWithContext(ctx context.Context) ContextPtrOutput {
	return o
}

func (o ContextPtrOutput) Elem() ContextOutput {
	return o.ApplyT(func(v *Context) Context { return *v }).(ContextOutput)
}

// A list of RPC context rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
func (o ContextPtrOutput) Rules() ContextRuleArrayOutput {
	return o.ApplyT(func(v *Context) []ContextRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(ContextRuleArrayOutput)
}

// A context rule provides information about the context for an individual API element.
type ContextRule struct {
	// A list of full type names or extension IDs of extensions allowed in grpc side channel from client to backend.
	AllowedRequestExtensions []string `pulumi:"allowedRequestExtensions"`
	// A list of full type names or extension IDs of extensions allowed in grpc side channel from backend to client.
	AllowedResponseExtensions []string `pulumi:"allowedResponseExtensions"`
	// A list of full type names of provided contexts.
	Provided []string `pulumi:"provided"`
	// A list of full type names of requested contexts.
	Requested []string `pulumi:"requested"`
	// Selects the methods to which this rule applies. Refer to selector for syntax details.
	Selector *string `pulumi:"selector"`
}

// ContextRuleInput is an input type that accepts ContextRuleArgs and ContextRuleOutput values.
// You can construct a concrete instance of `ContextRuleInput` via:
//
//          ContextRuleArgs{...}
type ContextRuleInput interface {
	pulumi.Input

	ToContextRuleOutput() ContextRuleOutput
	ToContextRuleOutputWithContext(context.Context) ContextRuleOutput
}

// A context rule provides information about the context for an individual API element.
type ContextRuleArgs struct {
	// A list of full type names or extension IDs of extensions allowed in grpc side channel from client to backend.
	AllowedRequestExtensions pulumi.StringArrayInput `pulumi:"allowedRequestExtensions"`
	// A list of full type names or extension IDs of extensions allowed in grpc side channel from backend to client.
	AllowedResponseExtensions pulumi.StringArrayInput `pulumi:"allowedResponseExtensions"`
	// A list of full type names of provided contexts.
	Provided pulumi.StringArrayInput `pulumi:"provided"`
	// A list of full type names of requested contexts.
	Requested pulumi.StringArrayInput `pulumi:"requested"`
	// Selects the methods to which this rule applies. Refer to selector for syntax details.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
}

func (ContextRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextRule)(nil)).Elem()
}

func (i ContextRuleArgs) ToContextRuleOutput() ContextRuleOutput {
	return i.ToContextRuleOutputWithContext(context.Background())
}

func (i ContextRuleArgs) ToContextRuleOutputWithContext(ctx context.Context) ContextRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextRuleOutput)
}

// ContextRuleArrayInput is an input type that accepts ContextRuleArray and ContextRuleArrayOutput values.
// You can construct a concrete instance of `ContextRuleArrayInput` via:
//
//          ContextRuleArray{ ContextRuleArgs{...} }
type ContextRuleArrayInput interface {
	pulumi.Input

	ToContextRuleArrayOutput() ContextRuleArrayOutput
	ToContextRuleArrayOutputWithContext(context.Context) ContextRuleArrayOutput
}

type ContextRuleArray []ContextRuleInput

func (ContextRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContextRule)(nil)).Elem()
}

func (i ContextRuleArray) ToContextRuleArrayOutput() ContextRuleArrayOutput {
	return i.ToContextRuleArrayOutputWithContext(context.Background())
}

func (i ContextRuleArray) ToContextRuleArrayOutputWithContext(ctx context.Context) ContextRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContextRuleArrayOutput)
}

// A context rule provides information about the context for an individual API element.
type ContextRuleOutput struct{ *pulumi.OutputState }

func (ContextRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContextRule)(nil)).Elem()
}

func (o ContextRuleOutput) ToContextRuleOutput() ContextRuleOutput {
	return o
}

func (o ContextRuleOutput) ToContextRuleOutputWithContext(ctx context.Context) ContextRuleOutput {
	return o
}

// A list of full type names or extension IDs of extensions allowed in grpc side channel from client to backend.
func (o ContextRuleOutput) AllowedRequestExtensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContextRule) []string { return v.AllowedRequestExtensions }).(pulumi.StringArrayOutput)
}

// A list of full type names or extension IDs of extensions allowed in grpc side channel from backend to client.
func (o ContextRuleOutput) AllowedResponseExtensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContextRule) []string { return v.AllowedResponseExtensions }).(pulumi.StringArrayOutput)
}

// A list of full type names of provided contexts.
func (o ContextRuleOutput) Provided() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContextRule) []string { return v.Provided }).(pulumi.StringArrayOutput)
}

// A list of full type names of requested contexts.
func (o ContextRuleOutput) Requested() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContextRule) []string { return v.Requested }).(pulumi.StringArrayOutput)
}

// Selects the methods to which this rule applies. Refer to selector for syntax details.
func (o ContextRuleOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContextRule) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

type ContextRuleArrayOutput struct{ *pulumi.OutputState }

func (ContextRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContextRule)(nil)).Elem()
}

func (o ContextRuleArrayOutput) ToContextRuleArrayOutput() ContextRuleArrayOutput {
	return o
}

func (o ContextRuleArrayOutput) ToContextRuleArrayOutputWithContext(ctx context.Context) ContextRuleArrayOutput {
	return o
}

func (o ContextRuleArrayOutput) Index(i pulumi.IntInput) ContextRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContextRule {
		return vs[0].([]ContextRule)[vs[1].(int)]
	}).(ContextRuleOutput)
}

// Selects and configures the service controller used by the service. The service controller handles features like abuse, quota, billing, logging, monitoring, etc.
type Control struct {
	// The service control environment to use. If empty, no control plane feature (like quota and billing) will be enabled.
	Environment *string `pulumi:"environment"`
}

// ControlInput is an input type that accepts ControlArgs and ControlOutput values.
// You can construct a concrete instance of `ControlInput` via:
//
//          ControlArgs{...}
type ControlInput interface {
	pulumi.Input

	ToControlOutput() ControlOutput
	ToControlOutputWithContext(context.Context) ControlOutput
}

// Selects and configures the service controller used by the service. The service controller handles features like abuse, quota, billing, logging, monitoring, etc.
type ControlArgs struct {
	// The service control environment to use. If empty, no control plane feature (like quota and billing) will be enabled.
	Environment pulumi.StringPtrInput `pulumi:"environment"`
}

func (ControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Control)(nil)).Elem()
}

func (i ControlArgs) ToControlOutput() ControlOutput {
	return i.ToControlOutputWithContext(context.Background())
}

func (i ControlArgs) ToControlOutputWithContext(ctx context.Context) ControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlOutput)
}

func (i ControlArgs) ToControlPtrOutput() ControlPtrOutput {
	return i.ToControlPtrOutputWithContext(context.Background())
}

func (i ControlArgs) ToControlPtrOutputWithContext(ctx context.Context) ControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlOutput).ToControlPtrOutputWithContext(ctx)
}

// ControlPtrInput is an input type that accepts ControlArgs, ControlPtr and ControlPtrOutput values.
// You can construct a concrete instance of `ControlPtrInput` via:
//
//          ControlArgs{...}
//
//  or:
//
//          nil
type ControlPtrInput interface {
	pulumi.Input

	ToControlPtrOutput() ControlPtrOutput
	ToControlPtrOutputWithContext(context.Context) ControlPtrOutput
}

type controlPtrType ControlArgs

func ControlPtr(v *ControlArgs) ControlPtrInput {
	return (*controlPtrType)(v)
}

func (*controlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Control)(nil)).Elem()
}

func (i *controlPtrType) ToControlPtrOutput() ControlPtrOutput {
	return i.ToControlPtrOutputWithContext(context.Background())
}

func (i *controlPtrType) ToControlPtrOutputWithContext(ctx context.Context) ControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPtrOutput)
}

// Selects and configures the service controller used by the service. The service controller handles features like abuse, quota, billing, logging, monitoring, etc.
type ControlOutput struct{ *pulumi.OutputState }

func (ControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Control)(nil)).Elem()
}

func (o ControlOutput) ToControlOutput() ControlOutput {
	return o
}

func (o ControlOutput) ToControlOutputWithContext(ctx context.Context) ControlOutput {
	return o
}

func (o ControlOutput) ToControlPtrOutput() ControlPtrOutput {
	return o.ToControlPtrOutputWithContext(context.Background())
}

func (o ControlOutput) ToControlPtrOutputWithContext(ctx context.Context) ControlPtrOutput {
	return o.ApplyT(func(v Control) *Control {
		return &v
	}).(ControlPtrOutput)
}

// The service control environment to use. If empty, no control plane feature (like quota and billing) will be enabled.
func (o ControlOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Control) *string { return v.Environment }).(pulumi.StringPtrOutput)
}

type ControlPtrOutput struct{ *pulumi.OutputState }

func (ControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Control)(nil)).Elem()
}

func (o ControlPtrOutput) ToControlPtrOutput() ControlPtrOutput {
	return o
}

func (o ControlPtrOutput) ToControlPtrOutputWithContext(ctx context.Context) ControlPtrOutput {
	return o
}

func (o ControlPtrOutput) Elem() ControlOutput {
	return o.ApplyT(func(v *Control) Control { return *v }).(ControlOutput)
}

// The service control environment to use. If empty, no control plane feature (like quota and billing) will be enabled.
func (o ControlPtrOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Control) *string {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.StringPtrOutput)
}

// Customize service error responses. For example, list any service specific protobuf types that can appear in error detail lists of error responses. Example: custom_error: types: - google.foo.v1.CustomError - google.foo.v1.AnotherError
type CustomError struct {
	// The list of custom error rules that apply to individual API messages. **NOTE:** All service configuration rules follow "last one wins" order.
	Rules []CustomErrorRule `pulumi:"rules"`
	// The list of custom error detail types, e.g. 'google.foo.v1.CustomError'.
	Types []string `pulumi:"types"`
}

// CustomErrorInput is an input type that accepts CustomErrorArgs and CustomErrorOutput values.
// You can construct a concrete instance of `CustomErrorInput` via:
//
//          CustomErrorArgs{...}
type CustomErrorInput interface {
	pulumi.Input

	ToCustomErrorOutput() CustomErrorOutput
	ToCustomErrorOutputWithContext(context.Context) CustomErrorOutput
}

// Customize service error responses. For example, list any service specific protobuf types that can appear in error detail lists of error responses. Example: custom_error: types: - google.foo.v1.CustomError - google.foo.v1.AnotherError
type CustomErrorArgs struct {
	// The list of custom error rules that apply to individual API messages. **NOTE:** All service configuration rules follow "last one wins" order.
	Rules CustomErrorRuleArrayInput `pulumi:"rules"`
	// The list of custom error detail types, e.g. 'google.foo.v1.CustomError'.
	Types pulumi.StringArrayInput `pulumi:"types"`
}

func (CustomErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomError)(nil)).Elem()
}

func (i CustomErrorArgs) ToCustomErrorOutput() CustomErrorOutput {
	return i.ToCustomErrorOutputWithContext(context.Background())
}

func (i CustomErrorArgs) ToCustomErrorOutputWithContext(ctx context.Context) CustomErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomErrorOutput)
}

func (i CustomErrorArgs) ToCustomErrorPtrOutput() CustomErrorPtrOutput {
	return i.ToCustomErrorPtrOutputWithContext(context.Background())
}

func (i CustomErrorArgs) ToCustomErrorPtrOutputWithContext(ctx context.Context) CustomErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomErrorOutput).ToCustomErrorPtrOutputWithContext(ctx)
}

// CustomErrorPtrInput is an input type that accepts CustomErrorArgs, CustomErrorPtr and CustomErrorPtrOutput values.
// You can construct a concrete instance of `CustomErrorPtrInput` via:
//
//          CustomErrorArgs{...}
//
//  or:
//
//          nil
type CustomErrorPtrInput interface {
	pulumi.Input

	ToCustomErrorPtrOutput() CustomErrorPtrOutput
	ToCustomErrorPtrOutputWithContext(context.Context) CustomErrorPtrOutput
}

type customErrorPtrType CustomErrorArgs

func CustomErrorPtr(v *CustomErrorArgs) CustomErrorPtrInput {
	return (*customErrorPtrType)(v)
}

func (*customErrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomError)(nil)).Elem()
}

func (i *customErrorPtrType) ToCustomErrorPtrOutput() CustomErrorPtrOutput {
	return i.ToCustomErrorPtrOutputWithContext(context.Background())
}

func (i *customErrorPtrType) ToCustomErrorPtrOutputWithContext(ctx context.Context) CustomErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomErrorPtrOutput)
}

// Customize service error responses. For example, list any service specific protobuf types that can appear in error detail lists of error responses. Example: custom_error: types: - google.foo.v1.CustomError - google.foo.v1.AnotherError
type CustomErrorOutput struct{ *pulumi.OutputState }

func (CustomErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomError)(nil)).Elem()
}

func (o CustomErrorOutput) ToCustomErrorOutput() CustomErrorOutput {
	return o
}

func (o CustomErrorOutput) ToCustomErrorOutputWithContext(ctx context.Context) CustomErrorOutput {
	return o
}

func (o CustomErrorOutput) ToCustomErrorPtrOutput() CustomErrorPtrOutput {
	return o.ToCustomErrorPtrOutputWithContext(context.Background())
}

func (o CustomErrorOutput) ToCustomErrorPtrOutputWithContext(ctx context.Context) CustomErrorPtrOutput {
	return o.ApplyT(func(v CustomError) *CustomError {
		return &v
	}).(CustomErrorPtrOutput)
}

// The list of custom error rules that apply to individual API messages. **NOTE:** All service configuration rules follow "last one wins" order.
func (o CustomErrorOutput) Rules() CustomErrorRuleArrayOutput {
	return o.ApplyT(func(v CustomError) []CustomErrorRule { return v.Rules }).(CustomErrorRuleArrayOutput)
}

// The list of custom error detail types, e.g. 'google.foo.v1.CustomError'.
func (o CustomErrorOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CustomError) []string { return v.Types }).(pulumi.StringArrayOutput)
}

type CustomErrorPtrOutput struct{ *pulumi.OutputState }

func (CustomErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomError)(nil)).Elem()
}

func (o CustomErrorPtrOutput) ToCustomErrorPtrOutput() CustomErrorPtrOutput {
	return o
}

func (o CustomErrorPtrOutput) ToCustomErrorPtrOutputWithContext(ctx context.Context) CustomErrorPtrOutput {
	return o
}

func (o CustomErrorPtrOutput) Elem() CustomErrorOutput {
	return o.ApplyT(func(v *CustomError) CustomError { return *v }).(CustomErrorOutput)
}

// The list of custom error rules that apply to individual API messages. **NOTE:** All service configuration rules follow "last one wins" order.
func (o CustomErrorPtrOutput) Rules() CustomErrorRuleArrayOutput {
	return o.ApplyT(func(v *CustomError) []CustomErrorRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(CustomErrorRuleArrayOutput)
}

// The list of custom error detail types, e.g. 'google.foo.v1.CustomError'.
func (o CustomErrorPtrOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CustomError) []string {
		if v == nil {
			return nil
		}
		return v.Types
	}).(pulumi.StringArrayOutput)
}

// A custom error rule.
type CustomErrorRule struct {
	// Mark this message as possible payload in error response. Otherwise, objects of this type will be filtered when they appear in error payload.
	IsErrorType *bool `pulumi:"isErrorType"`
	// Selects messages to which this rule applies. Refer to selector for syntax details.
	Selector *string `pulumi:"selector"`
}

// CustomErrorRuleInput is an input type that accepts CustomErrorRuleArgs and CustomErrorRuleOutput values.
// You can construct a concrete instance of `CustomErrorRuleInput` via:
//
//          CustomErrorRuleArgs{...}
type CustomErrorRuleInput interface {
	pulumi.Input

	ToCustomErrorRuleOutput() CustomErrorRuleOutput
	ToCustomErrorRuleOutputWithContext(context.Context) CustomErrorRuleOutput
}

// A custom error rule.
type CustomErrorRuleArgs struct {
	// Mark this message as possible payload in error response. Otherwise, objects of this type will be filtered when they appear in error payload.
	IsErrorType pulumi.BoolPtrInput `pulumi:"isErrorType"`
	// Selects messages to which this rule applies. Refer to selector for syntax details.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
}

func (CustomErrorRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomErrorRule)(nil)).Elem()
}

func (i CustomErrorRuleArgs) ToCustomErrorRuleOutput() CustomErrorRuleOutput {
	return i.ToCustomErrorRuleOutputWithContext(context.Background())
}

func (i CustomErrorRuleArgs) ToCustomErrorRuleOutputWithContext(ctx context.Context) CustomErrorRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomErrorRuleOutput)
}

// CustomErrorRuleArrayInput is an input type that accepts CustomErrorRuleArray and CustomErrorRuleArrayOutput values.
// You can construct a concrete instance of `CustomErrorRuleArrayInput` via:
//
//          CustomErrorRuleArray{ CustomErrorRuleArgs{...} }
type CustomErrorRuleArrayInput interface {
	pulumi.Input

	ToCustomErrorRuleArrayOutput() CustomErrorRuleArrayOutput
	ToCustomErrorRuleArrayOutputWithContext(context.Context) CustomErrorRuleArrayOutput
}

type CustomErrorRuleArray []CustomErrorRuleInput

func (CustomErrorRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomErrorRule)(nil)).Elem()
}

func (i CustomErrorRuleArray) ToCustomErrorRuleArrayOutput() CustomErrorRuleArrayOutput {
	return i.ToCustomErrorRuleArrayOutputWithContext(context.Background())
}

func (i CustomErrorRuleArray) ToCustomErrorRuleArrayOutputWithContext(ctx context.Context) CustomErrorRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomErrorRuleArrayOutput)
}

// A custom error rule.
type CustomErrorRuleOutput struct{ *pulumi.OutputState }

func (CustomErrorRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomErrorRule)(nil)).Elem()
}

func (o CustomErrorRuleOutput) ToCustomErrorRuleOutput() CustomErrorRuleOutput {
	return o
}

func (o CustomErrorRuleOutput) ToCustomErrorRuleOutputWithContext(ctx context.Context) CustomErrorRuleOutput {
	return o
}

// Mark this message as possible payload in error response. Otherwise, objects of this type will be filtered when they appear in error payload.
func (o CustomErrorRuleOutput) IsErrorType() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CustomErrorRule) *bool { return v.IsErrorType }).(pulumi.BoolPtrOutput)
}

// Selects messages to which this rule applies. Refer to selector for syntax details.
func (o CustomErrorRuleOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomErrorRule) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

type CustomErrorRuleArrayOutput struct{ *pulumi.OutputState }

func (CustomErrorRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomErrorRule)(nil)).Elem()
}

func (o CustomErrorRuleArrayOutput) ToCustomErrorRuleArrayOutput() CustomErrorRuleArrayOutput {
	return o
}

func (o CustomErrorRuleArrayOutput) ToCustomErrorRuleArrayOutputWithContext(ctx context.Context) CustomErrorRuleArrayOutput {
	return o
}

func (o CustomErrorRuleArrayOutput) Index(i pulumi.IntInput) CustomErrorRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomErrorRule {
		return vs[0].([]CustomErrorRule)[vs[1].(int)]
	}).(CustomErrorRuleOutput)
}

// A custom pattern is used for defining custom HTTP verb.
type CustomHttpPattern struct {
	// The name of this custom HTTP verb.
	Kind *string `pulumi:"kind"`
	// The path matched by this custom verb.
	Path *string `pulumi:"path"`
}

// CustomHttpPatternInput is an input type that accepts CustomHttpPatternArgs and CustomHttpPatternOutput values.
// You can construct a concrete instance of `CustomHttpPatternInput` via:
//
//          CustomHttpPatternArgs{...}
type CustomHttpPatternInput interface {
	pulumi.Input

	ToCustomHttpPatternOutput() CustomHttpPatternOutput
	ToCustomHttpPatternOutputWithContext(context.Context) CustomHttpPatternOutput
}

// A custom pattern is used for defining custom HTTP verb.
type CustomHttpPatternArgs struct {
	// The name of this custom HTTP verb.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The path matched by this custom verb.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (CustomHttpPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomHttpPattern)(nil)).Elem()
}

func (i CustomHttpPatternArgs) ToCustomHttpPatternOutput() CustomHttpPatternOutput {
	return i.ToCustomHttpPatternOutputWithContext(context.Background())
}

func (i CustomHttpPatternArgs) ToCustomHttpPatternOutputWithContext(ctx context.Context) CustomHttpPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomHttpPatternOutput)
}

func (i CustomHttpPatternArgs) ToCustomHttpPatternPtrOutput() CustomHttpPatternPtrOutput {
	return i.ToCustomHttpPatternPtrOutputWithContext(context.Background())
}

func (i CustomHttpPatternArgs) ToCustomHttpPatternPtrOutputWithContext(ctx context.Context) CustomHttpPatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomHttpPatternOutput).ToCustomHttpPatternPtrOutputWithContext(ctx)
}

// CustomHttpPatternPtrInput is an input type that accepts CustomHttpPatternArgs, CustomHttpPatternPtr and CustomHttpPatternPtrOutput values.
// You can construct a concrete instance of `CustomHttpPatternPtrInput` via:
//
//          CustomHttpPatternArgs{...}
//
//  or:
//
//          nil
type CustomHttpPatternPtrInput interface {
	pulumi.Input

	ToCustomHttpPatternPtrOutput() CustomHttpPatternPtrOutput
	ToCustomHttpPatternPtrOutputWithContext(context.Context) CustomHttpPatternPtrOutput
}

type customHttpPatternPtrType CustomHttpPatternArgs

func CustomHttpPatternPtr(v *CustomHttpPatternArgs) CustomHttpPatternPtrInput {
	return (*customHttpPatternPtrType)(v)
}

func (*customHttpPatternPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomHttpPattern)(nil)).Elem()
}

func (i *customHttpPatternPtrType) ToCustomHttpPatternPtrOutput() CustomHttpPatternPtrOutput {
	return i.ToCustomHttpPatternPtrOutputWithContext(context.Background())
}

func (i *customHttpPatternPtrType) ToCustomHttpPatternPtrOutputWithContext(ctx context.Context) CustomHttpPatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomHttpPatternPtrOutput)
}

// A custom pattern is used for defining custom HTTP verb.
type CustomHttpPatternOutput struct{ *pulumi.OutputState }

func (CustomHttpPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomHttpPattern)(nil)).Elem()
}

func (o CustomHttpPatternOutput) ToCustomHttpPatternOutput() CustomHttpPatternOutput {
	return o
}

func (o CustomHttpPatternOutput) ToCustomHttpPatternOutputWithContext(ctx context.Context) CustomHttpPatternOutput {
	return o
}

func (o CustomHttpPatternOutput) ToCustomHttpPatternPtrOutput() CustomHttpPatternPtrOutput {
	return o.ToCustomHttpPatternPtrOutputWithContext(context.Background())
}

func (o CustomHttpPatternOutput) ToCustomHttpPatternPtrOutputWithContext(ctx context.Context) CustomHttpPatternPtrOutput {
	return o.ApplyT(func(v CustomHttpPattern) *CustomHttpPattern {
		return &v
	}).(CustomHttpPatternPtrOutput)
}

// The name of this custom HTTP verb.
func (o CustomHttpPatternOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomHttpPattern) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The path matched by this custom verb.
func (o CustomHttpPatternOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomHttpPattern) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type CustomHttpPatternPtrOutput struct{ *pulumi.OutputState }

func (CustomHttpPatternPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomHttpPattern)(nil)).Elem()
}

func (o CustomHttpPatternPtrOutput) ToCustomHttpPatternPtrOutput() CustomHttpPatternPtrOutput {
	return o
}

func (o CustomHttpPatternPtrOutput) ToCustomHttpPatternPtrOutputWithContext(ctx context.Context) CustomHttpPatternPtrOutput {
	return o
}

func (o CustomHttpPatternPtrOutput) Elem() CustomHttpPatternOutput {
	return o.ApplyT(func(v *CustomHttpPattern) CustomHttpPattern { return *v }).(CustomHttpPatternOutput)
}

// The name of this custom HTTP verb.
func (o CustomHttpPatternPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomHttpPattern) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The path matched by this custom verb.
func (o CustomHttpPatternPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomHttpPattern) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Strategy used to delete a service. This strategy is a placeholder only used by the system generated rollout to delete a service.
type DeleteServiceStrategy struct {
}

// DeleteServiceStrategyInput is an input type that accepts DeleteServiceStrategyArgs and DeleteServiceStrategyOutput values.
// You can construct a concrete instance of `DeleteServiceStrategyInput` via:
//
//          DeleteServiceStrategyArgs{...}
type DeleteServiceStrategyInput interface {
	pulumi.Input

	ToDeleteServiceStrategyOutput() DeleteServiceStrategyOutput
	ToDeleteServiceStrategyOutputWithContext(context.Context) DeleteServiceStrategyOutput
}

// Strategy used to delete a service. This strategy is a placeholder only used by the system generated rollout to delete a service.
type DeleteServiceStrategyArgs struct {
}

func (DeleteServiceStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteServiceStrategy)(nil)).Elem()
}

func (i DeleteServiceStrategyArgs) ToDeleteServiceStrategyOutput() DeleteServiceStrategyOutput {
	return i.ToDeleteServiceStrategyOutputWithContext(context.Background())
}

func (i DeleteServiceStrategyArgs) ToDeleteServiceStrategyOutputWithContext(ctx context.Context) DeleteServiceStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteServiceStrategyOutput)
}

func (i DeleteServiceStrategyArgs) ToDeleteServiceStrategyPtrOutput() DeleteServiceStrategyPtrOutput {
	return i.ToDeleteServiceStrategyPtrOutputWithContext(context.Background())
}

func (i DeleteServiceStrategyArgs) ToDeleteServiceStrategyPtrOutputWithContext(ctx context.Context) DeleteServiceStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteServiceStrategyOutput).ToDeleteServiceStrategyPtrOutputWithContext(ctx)
}

// DeleteServiceStrategyPtrInput is an input type that accepts DeleteServiceStrategyArgs, DeleteServiceStrategyPtr and DeleteServiceStrategyPtrOutput values.
// You can construct a concrete instance of `DeleteServiceStrategyPtrInput` via:
//
//          DeleteServiceStrategyArgs{...}
//
//  or:
//
//          nil
type DeleteServiceStrategyPtrInput interface {
	pulumi.Input

	ToDeleteServiceStrategyPtrOutput() DeleteServiceStrategyPtrOutput
	ToDeleteServiceStrategyPtrOutputWithContext(context.Context) DeleteServiceStrategyPtrOutput
}

type deleteServiceStrategyPtrType DeleteServiceStrategyArgs

func DeleteServiceStrategyPtr(v *DeleteServiceStrategyArgs) DeleteServiceStrategyPtrInput {
	return (*deleteServiceStrategyPtrType)(v)
}

func (*deleteServiceStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeleteServiceStrategy)(nil)).Elem()
}

func (i *deleteServiceStrategyPtrType) ToDeleteServiceStrategyPtrOutput() DeleteServiceStrategyPtrOutput {
	return i.ToDeleteServiceStrategyPtrOutputWithContext(context.Background())
}

func (i *deleteServiceStrategyPtrType) ToDeleteServiceStrategyPtrOutputWithContext(ctx context.Context) DeleteServiceStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteServiceStrategyPtrOutput)
}

// Strategy used to delete a service. This strategy is a placeholder only used by the system generated rollout to delete a service.
type DeleteServiceStrategyOutput struct{ *pulumi.OutputState }

func (DeleteServiceStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteServiceStrategy)(nil)).Elem()
}

func (o DeleteServiceStrategyOutput) ToDeleteServiceStrategyOutput() DeleteServiceStrategyOutput {
	return o
}

func (o DeleteServiceStrategyOutput) ToDeleteServiceStrategyOutputWithContext(ctx context.Context) DeleteServiceStrategyOutput {
	return o
}

func (o DeleteServiceStrategyOutput) ToDeleteServiceStrategyPtrOutput() DeleteServiceStrategyPtrOutput {
	return o.ToDeleteServiceStrategyPtrOutputWithContext(context.Background())
}

func (o DeleteServiceStrategyOutput) ToDeleteServiceStrategyPtrOutputWithContext(ctx context.Context) DeleteServiceStrategyPtrOutput {
	return o.ApplyT(func(v DeleteServiceStrategy) *DeleteServiceStrategy {
		return &v
	}).(DeleteServiceStrategyPtrOutput)
}

type DeleteServiceStrategyPtrOutput struct{ *pulumi.OutputState }

func (DeleteServiceStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeleteServiceStrategy)(nil)).Elem()
}

func (o DeleteServiceStrategyPtrOutput) ToDeleteServiceStrategyPtrOutput() DeleteServiceStrategyPtrOutput {
	return o
}

func (o DeleteServiceStrategyPtrOutput) ToDeleteServiceStrategyPtrOutputWithContext(ctx context.Context) DeleteServiceStrategyPtrOutput {
	return o
}

func (o DeleteServiceStrategyPtrOutput) Elem() DeleteServiceStrategyOutput {
	return o.ApplyT(func(v *DeleteServiceStrategy) DeleteServiceStrategy { return *v }).(DeleteServiceStrategyOutput)
}

// `Documentation` provides the information for describing a service. Example: documentation: summary: > The Google Calendar API gives access to most calendar features. pages: - name: Overview content: (== include google/foo/overview.md ==) - name: Tutorial content: (== include google/foo/tutorial.md ==) subpages; - name: Java content: (== include google/foo/tutorial_java.md ==) rules: - selector: google.calendar.Calendar.Get description: > ... - selector: google.calendar.Calendar.Put description: > ... Documentation is provided in markdown syntax. In addition to standard markdown features, definition lists, tables and fenced code blocks are supported. Section headers can be provided and are interpreted relative to the section nesting of the context where a documentation fragment is embedded. Documentation from the IDL is merged with documentation defined via the config at normalization time, where documentation provided by config rules overrides IDL provided. A number of constructs specific to the API platform are supported in documentation text. In order to reference a proto element, the following notation can be used: [fully.qualified.proto.name][] To override the display text used for the link, this can be used: [display text][fully.qualified.proto.name] Text can be excluded from doc using the following notation: (-- internal comment --) A few directives are available in documentation. Note that directives must appear on a single line to be properly identified. The `include` directive includes a markdown file from an external source: (== include path/to/file ==) The `resource_for` directive marks a message to be the resource of a collection in REST view. If it is not specified, tools attempt to infer the resource from the operations in a collection: (== resource_for v1.shelves.books ==) The directive `suppress_warning` does not directly affect documentation and is documented together with service config validation.
type Documentation struct {
	// The URL to the root of documentation.
	DocumentationRootUrl *string `pulumi:"documentationRootUrl"`
	// Declares a single overview page. For example: documentation: summary: ... overview: (== include overview.md ==) This is a shortcut for the following declaration (using pages style): documentation: summary: ... pages: - name: Overview content: (== include overview.md ==) Note: you cannot specify both `overview` field and `pages` field.
	Overview *string `pulumi:"overview"`
	// The top level pages for the documentation set.
	Pages []Page `pulumi:"pages"`
	// A list of documentation rules that apply to individual API elements. **NOTE:** All service configuration rules follow "last one wins" order.
	Rules []DocumentationRule `pulumi:"rules"`
	// Specifies the service root url if the default one (the service name from the yaml file) is not suitable. This can be seen in any fully specified service urls as well as sections that show a base that other urls are relative to.
	ServiceRootUrl *string `pulumi:"serviceRootUrl"`
	// A short summary of what the service does. Can only be provided by plain text.
	Summary *string `pulumi:"summary"`
}

// DocumentationInput is an input type that accepts DocumentationArgs and DocumentationOutput values.
// You can construct a concrete instance of `DocumentationInput` via:
//
//          DocumentationArgs{...}
type DocumentationInput interface {
	pulumi.Input

	ToDocumentationOutput() DocumentationOutput
	ToDocumentationOutputWithContext(context.Context) DocumentationOutput
}

// `Documentation` provides the information for describing a service. Example: documentation: summary: > The Google Calendar API gives access to most calendar features. pages: - name: Overview content: (== include google/foo/overview.md ==) - name: Tutorial content: (== include google/foo/tutorial.md ==) subpages; - name: Java content: (== include google/foo/tutorial_java.md ==) rules: - selector: google.calendar.Calendar.Get description: > ... - selector: google.calendar.Calendar.Put description: > ... Documentation is provided in markdown syntax. In addition to standard markdown features, definition lists, tables and fenced code blocks are supported. Section headers can be provided and are interpreted relative to the section nesting of the context where a documentation fragment is embedded. Documentation from the IDL is merged with documentation defined via the config at normalization time, where documentation provided by config rules overrides IDL provided. A number of constructs specific to the API platform are supported in documentation text. In order to reference a proto element, the following notation can be used: [fully.qualified.proto.name][] To override the display text used for the link, this can be used: [display text][fully.qualified.proto.name] Text can be excluded from doc using the following notation: (-- internal comment --) A few directives are available in documentation. Note that directives must appear on a single line to be properly identified. The `include` directive includes a markdown file from an external source: (== include path/to/file ==) The `resource_for` directive marks a message to be the resource of a collection in REST view. If it is not specified, tools attempt to infer the resource from the operations in a collection: (== resource_for v1.shelves.books ==) The directive `suppress_warning` does not directly affect documentation and is documented together with service config validation.
type DocumentationArgs struct {
	// The URL to the root of documentation.
	DocumentationRootUrl pulumi.StringPtrInput `pulumi:"documentationRootUrl"`
	// Declares a single overview page. For example: documentation: summary: ... overview: (== include overview.md ==) This is a shortcut for the following declaration (using pages style): documentation: summary: ... pages: - name: Overview content: (== include overview.md ==) Note: you cannot specify both `overview` field and `pages` field.
	Overview pulumi.StringPtrInput `pulumi:"overview"`
	// The top level pages for the documentation set.
	Pages PageArrayInput `pulumi:"pages"`
	// A list of documentation rules that apply to individual API elements. **NOTE:** All service configuration rules follow "last one wins" order.
	Rules DocumentationRuleArrayInput `pulumi:"rules"`
	// Specifies the service root url if the default one (the service name from the yaml file) is not suitable. This can be seen in any fully specified service urls as well as sections that show a base that other urls are relative to.
	ServiceRootUrl pulumi.StringPtrInput `pulumi:"serviceRootUrl"`
	// A short summary of what the service does. Can only be provided by plain text.
	Summary pulumi.StringPtrInput `pulumi:"summary"`
}

func (DocumentationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Documentation)(nil)).Elem()
}

func (i DocumentationArgs) ToDocumentationOutput() DocumentationOutput {
	return i.ToDocumentationOutputWithContext(context.Background())
}

func (i DocumentationArgs) ToDocumentationOutputWithContext(ctx context.Context) DocumentationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentationOutput)
}

func (i DocumentationArgs) ToDocumentationPtrOutput() DocumentationPtrOutput {
	return i.ToDocumentationPtrOutputWithContext(context.Background())
}

func (i DocumentationArgs) ToDocumentationPtrOutputWithContext(ctx context.Context) DocumentationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentationOutput).ToDocumentationPtrOutputWithContext(ctx)
}

// DocumentationPtrInput is an input type that accepts DocumentationArgs, DocumentationPtr and DocumentationPtrOutput values.
// You can construct a concrete instance of `DocumentationPtrInput` via:
//
//          DocumentationArgs{...}
//
//  or:
//
//          nil
type DocumentationPtrInput interface {
	pulumi.Input

	ToDocumentationPtrOutput() DocumentationPtrOutput
	ToDocumentationPtrOutputWithContext(context.Context) DocumentationPtrOutput
}

type documentationPtrType DocumentationArgs

func DocumentationPtr(v *DocumentationArgs) DocumentationPtrInput {
	return (*documentationPtrType)(v)
}

func (*documentationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Documentation)(nil)).Elem()
}

func (i *documentationPtrType) ToDocumentationPtrOutput() DocumentationPtrOutput {
	return i.ToDocumentationPtrOutputWithContext(context.Background())
}

func (i *documentationPtrType) ToDocumentationPtrOutputWithContext(ctx context.Context) DocumentationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentationPtrOutput)
}

// `Documentation` provides the information for describing a service. Example: documentation: summary: > The Google Calendar API gives access to most calendar features. pages: - name: Overview content: (== include google/foo/overview.md ==) - name: Tutorial content: (== include google/foo/tutorial.md ==) subpages; - name: Java content: (== include google/foo/tutorial_java.md ==) rules: - selector: google.calendar.Calendar.Get description: > ... - selector: google.calendar.Calendar.Put description: > ... Documentation is provided in markdown syntax. In addition to standard markdown features, definition lists, tables and fenced code blocks are supported. Section headers can be provided and are interpreted relative to the section nesting of the context where a documentation fragment is embedded. Documentation from the IDL is merged with documentation defined via the config at normalization time, where documentation provided by config rules overrides IDL provided. A number of constructs specific to the API platform are supported in documentation text. In order to reference a proto element, the following notation can be used: [fully.qualified.proto.name][] To override the display text used for the link, this can be used: [display text][fully.qualified.proto.name] Text can be excluded from doc using the following notation: (-- internal comment --) A few directives are available in documentation. Note that directives must appear on a single line to be properly identified. The `include` directive includes a markdown file from an external source: (== include path/to/file ==) The `resource_for` directive marks a message to be the resource of a collection in REST view. If it is not specified, tools attempt to infer the resource from the operations in a collection: (== resource_for v1.shelves.books ==) The directive `suppress_warning` does not directly affect documentation and is documented together with service config validation.
type DocumentationOutput struct{ *pulumi.OutputState }

func (DocumentationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Documentation)(nil)).Elem()
}

func (o DocumentationOutput) ToDocumentationOutput() DocumentationOutput {
	return o
}

func (o DocumentationOutput) ToDocumentationOutputWithContext(ctx context.Context) DocumentationOutput {
	return o
}

func (o DocumentationOutput) ToDocumentationPtrOutput() DocumentationPtrOutput {
	return o.ToDocumentationPtrOutputWithContext(context.Background())
}

func (o DocumentationOutput) ToDocumentationPtrOutputWithContext(ctx context.Context) DocumentationPtrOutput {
	return o.ApplyT(func(v Documentation) *Documentation {
		return &v
	}).(DocumentationPtrOutput)
}

// The URL to the root of documentation.
func (o DocumentationOutput) DocumentationRootUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Documentation) *string { return v.DocumentationRootUrl }).(pulumi.StringPtrOutput)
}

// Declares a single overview page. For example: documentation: summary: ... overview: (== include overview.md ==) This is a shortcut for the following declaration (using pages style): documentation: summary: ... pages: - name: Overview content: (== include overview.md ==) Note: you cannot specify both `overview` field and `pages` field.
func (o DocumentationOutput) Overview() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Documentation) *string { return v.Overview }).(pulumi.StringPtrOutput)
}

// The top level pages for the documentation set.
func (o DocumentationOutput) Pages() PageArrayOutput {
	return o.ApplyT(func(v Documentation) []Page { return v.Pages }).(PageArrayOutput)
}

// A list of documentation rules that apply to individual API elements. **NOTE:** All service configuration rules follow "last one wins" order.
func (o DocumentationOutput) Rules() DocumentationRuleArrayOutput {
	return o.ApplyT(func(v Documentation) []DocumentationRule { return v.Rules }).(DocumentationRuleArrayOutput)
}

// Specifies the service root url if the default one (the service name from the yaml file) is not suitable. This can be seen in any fully specified service urls as well as sections that show a base that other urls are relative to.
func (o DocumentationOutput) ServiceRootUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Documentation) *string { return v.ServiceRootUrl }).(pulumi.StringPtrOutput)
}

// A short summary of what the service does. Can only be provided by plain text.
func (o DocumentationOutput) Summary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Documentation) *string { return v.Summary }).(pulumi.StringPtrOutput)
}

type DocumentationPtrOutput struct{ *pulumi.OutputState }

func (DocumentationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Documentation)(nil)).Elem()
}

func (o DocumentationPtrOutput) ToDocumentationPtrOutput() DocumentationPtrOutput {
	return o
}

func (o DocumentationPtrOutput) ToDocumentationPtrOutputWithContext(ctx context.Context) DocumentationPtrOutput {
	return o
}

func (o DocumentationPtrOutput) Elem() DocumentationOutput {
	return o.ApplyT(func(v *Documentation) Documentation { return *v }).(DocumentationOutput)
}

// The URL to the root of documentation.
func (o DocumentationPtrOutput) DocumentationRootUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Documentation) *string {
		if v == nil {
			return nil
		}
		return v.DocumentationRootUrl
	}).(pulumi.StringPtrOutput)
}

// Declares a single overview page. For example: documentation: summary: ... overview: (== include overview.md ==) This is a shortcut for the following declaration (using pages style): documentation: summary: ... pages: - name: Overview content: (== include overview.md ==) Note: you cannot specify both `overview` field and `pages` field.
func (o DocumentationPtrOutput) Overview() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Documentation) *string {
		if v == nil {
			return nil
		}
		return v.Overview
	}).(pulumi.StringPtrOutput)
}

// The top level pages for the documentation set.
func (o DocumentationPtrOutput) Pages() PageArrayOutput {
	return o.ApplyT(func(v *Documentation) []Page {
		if v == nil {
			return nil
		}
		return v.Pages
	}).(PageArrayOutput)
}

// A list of documentation rules that apply to individual API elements. **NOTE:** All service configuration rules follow "last one wins" order.
func (o DocumentationPtrOutput) Rules() DocumentationRuleArrayOutput {
	return o.ApplyT(func(v *Documentation) []DocumentationRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(DocumentationRuleArrayOutput)
}

// Specifies the service root url if the default one (the service name from the yaml file) is not suitable. This can be seen in any fully specified service urls as well as sections that show a base that other urls are relative to.
func (o DocumentationPtrOutput) ServiceRootUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Documentation) *string {
		if v == nil {
			return nil
		}
		return v.ServiceRootUrl
	}).(pulumi.StringPtrOutput)
}

// A short summary of what the service does. Can only be provided by plain text.
func (o DocumentationPtrOutput) Summary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Documentation) *string {
		if v == nil {
			return nil
		}
		return v.Summary
	}).(pulumi.StringPtrOutput)
}

// A documentation rule provides information about individual API elements.
type DocumentationRule struct {
	// Deprecation description of the selected element(s). It can be provided if an element is marked as `deprecated`.
	DeprecationDescription *string `pulumi:"deprecationDescription"`
	// Description of the selected API(s).
	Description *string `pulumi:"description"`
	// The selector is a comma-separated list of patterns. Each pattern is a qualified name of the element which may end in "*", indicating a wildcard. Wildcards are only allowed at the end and for a whole component of the qualified name, i.e. "foo.*" is ok, but not "foo.b*" or "foo.*.bar". A wildcard will match one or more components. To specify a default for all applicable elements, the whole pattern "*" is used.
	Selector *string `pulumi:"selector"`
}

// DocumentationRuleInput is an input type that accepts DocumentationRuleArgs and DocumentationRuleOutput values.
// You can construct a concrete instance of `DocumentationRuleInput` via:
//
//          DocumentationRuleArgs{...}
type DocumentationRuleInput interface {
	pulumi.Input

	ToDocumentationRuleOutput() DocumentationRuleOutput
	ToDocumentationRuleOutputWithContext(context.Context) DocumentationRuleOutput
}

// A documentation rule provides information about individual API elements.
type DocumentationRuleArgs struct {
	// Deprecation description of the selected element(s). It can be provided if an element is marked as `deprecated`.
	DeprecationDescription pulumi.StringPtrInput `pulumi:"deprecationDescription"`
	// Description of the selected API(s).
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The selector is a comma-separated list of patterns. Each pattern is a qualified name of the element which may end in "*", indicating a wildcard. Wildcards are only allowed at the end and for a whole component of the qualified name, i.e. "foo.*" is ok, but not "foo.b*" or "foo.*.bar". A wildcard will match one or more components. To specify a default for all applicable elements, the whole pattern "*" is used.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
}

func (DocumentationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentationRule)(nil)).Elem()
}

func (i DocumentationRuleArgs) ToDocumentationRuleOutput() DocumentationRuleOutput {
	return i.ToDocumentationRuleOutputWithContext(context.Background())
}

func (i DocumentationRuleArgs) ToDocumentationRuleOutputWithContext(ctx context.Context) DocumentationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentationRuleOutput)
}

// DocumentationRuleArrayInput is an input type that accepts DocumentationRuleArray and DocumentationRuleArrayOutput values.
// You can construct a concrete instance of `DocumentationRuleArrayInput` via:
//
//          DocumentationRuleArray{ DocumentationRuleArgs{...} }
type DocumentationRuleArrayInput interface {
	pulumi.Input

	ToDocumentationRuleArrayOutput() DocumentationRuleArrayOutput
	ToDocumentationRuleArrayOutputWithContext(context.Context) DocumentationRuleArrayOutput
}

type DocumentationRuleArray []DocumentationRuleInput

func (DocumentationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DocumentationRule)(nil)).Elem()
}

func (i DocumentationRuleArray) ToDocumentationRuleArrayOutput() DocumentationRuleArrayOutput {
	return i.ToDocumentationRuleArrayOutputWithContext(context.Background())
}

func (i DocumentationRuleArray) ToDocumentationRuleArrayOutputWithContext(ctx context.Context) DocumentationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentationRuleArrayOutput)
}

// A documentation rule provides information about individual API elements.
type DocumentationRuleOutput struct{ *pulumi.OutputState }

func (DocumentationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentationRule)(nil)).Elem()
}

func (o DocumentationRuleOutput) ToDocumentationRuleOutput() DocumentationRuleOutput {
	return o
}

func (o DocumentationRuleOutput) ToDocumentationRuleOutputWithContext(ctx context.Context) DocumentationRuleOutput {
	return o
}

// Deprecation description of the selected element(s). It can be provided if an element is marked as `deprecated`.
func (o DocumentationRuleOutput) DeprecationDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentationRule) *string { return v.DeprecationDescription }).(pulumi.StringPtrOutput)
}

// Description of the selected API(s).
func (o DocumentationRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentationRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The selector is a comma-separated list of patterns. Each pattern is a qualified name of the element which may end in "*", indicating a wildcard. Wildcards are only allowed at the end and for a whole component of the qualified name, i.e. "foo.*" is ok, but not "foo.b*" or "foo.*.bar". A wildcard will match one or more components. To specify a default for all applicable elements, the whole pattern "*" is used.
func (o DocumentationRuleOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentationRule) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

type DocumentationRuleArrayOutput struct{ *pulumi.OutputState }

func (DocumentationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DocumentationRule)(nil)).Elem()
}

func (o DocumentationRuleArrayOutput) ToDocumentationRuleArrayOutput() DocumentationRuleArrayOutput {
	return o
}

func (o DocumentationRuleArrayOutput) ToDocumentationRuleArrayOutputWithContext(ctx context.Context) DocumentationRuleArrayOutput {
	return o
}

func (o DocumentationRuleArrayOutput) Index(i pulumi.IntInput) DocumentationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DocumentationRule {
		return vs[0].([]DocumentationRule)[vs[1].(int)]
	}).(DocumentationRuleOutput)
}

// `Endpoint` describes a network endpoint of a service that serves a set of APIs. It is commonly known as a service endpoint. A service may expose any number of service endpoints, and all service endpoints share the same service definition, such as quota limits and monitoring metrics. Example service configuration: name: library-example.googleapis.com endpoints: # Below entry makes 'google.example.library.v1.Library' # API be served from endpoint address library-example.googleapis.com. # It also allows HTTP OPTIONS calls to be passed to the backend, for # it to decide whether the subsequent cross-origin request is # allowed to proceed. - name: library-example.googleapis.com allow_cors: true
type Endpoint struct {
	// DEPRECATED: This field is no longer supported. Instead of using aliases, please specify multiple google.api.Endpoint for each of the intended aliases. Additional names that this endpoint will be hosted on.
	Aliases []string `pulumi:"aliases"`
	// Allowing [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing), aka cross-domain traffic, would allow the backends served from this endpoint to receive and respond to HTTP OPTIONS requests. The response will be used by the browser to determine whether the subsequent cross-origin request is allowed to proceed.
	AllowCors *bool `pulumi:"allowCors"`
	// The canonical name of this endpoint.
	Name *string `pulumi:"name"`
	// The specification of an Internet routable address of API frontend that will handle requests to this [API Endpoint](https://cloud.google.com/apis/design/glossary). It should be either a valid IPv4 address or a fully-qualified domain name. For example, "8.8.8.8" or "myservice.appspot.com".
	Target *string `pulumi:"target"`
}

// EndpointInput is an input type that accepts EndpointArgs and EndpointOutput values.
// You can construct a concrete instance of `EndpointInput` via:
//
//          EndpointArgs{...}
type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(context.Context) EndpointOutput
}

// `Endpoint` describes a network endpoint of a service that serves a set of APIs. It is commonly known as a service endpoint. A service may expose any number of service endpoints, and all service endpoints share the same service definition, such as quota limits and monitoring metrics. Example service configuration: name: library-example.googleapis.com endpoints: # Below entry makes 'google.example.library.v1.Library' # API be served from endpoint address library-example.googleapis.com. # It also allows HTTP OPTIONS calls to be passed to the backend, for # it to decide whether the subsequent cross-origin request is # allowed to proceed. - name: library-example.googleapis.com allow_cors: true
type EndpointArgs struct {
	// DEPRECATED: This field is no longer supported. Instead of using aliases, please specify multiple google.api.Endpoint for each of the intended aliases. Additional names that this endpoint will be hosted on.
	Aliases pulumi.StringArrayInput `pulumi:"aliases"`
	// Allowing [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing), aka cross-domain traffic, would allow the backends served from this endpoint to receive and respond to HTTP OPTIONS requests. The response will be used by the browser to determine whether the subsequent cross-origin request is allowed to proceed.
	AllowCors pulumi.BoolPtrInput `pulumi:"allowCors"`
	// The canonical name of this endpoint.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The specification of an Internet routable address of API frontend that will handle requests to this [API Endpoint](https://cloud.google.com/apis/design/glossary). It should be either a valid IPv4 address or a fully-qualified domain name. For example, "8.8.8.8" or "myservice.appspot.com".
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (i EndpointArgs) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i EndpointArgs) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

// EndpointArrayInput is an input type that accepts EndpointArray and EndpointArrayOutput values.
// You can construct a concrete instance of `EndpointArrayInput` via:
//
//          EndpointArray{ EndpointArgs{...} }
type EndpointArrayInput interface {
	pulumi.Input

	ToEndpointArrayOutput() EndpointArrayOutput
	ToEndpointArrayOutputWithContext(context.Context) EndpointArrayOutput
}

type EndpointArray []EndpointInput

func (EndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Endpoint)(nil)).Elem()
}

func (i EndpointArray) ToEndpointArrayOutput() EndpointArrayOutput {
	return i.ToEndpointArrayOutputWithContext(context.Background())
}

func (i EndpointArray) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointArrayOutput)
}

// `Endpoint` describes a network endpoint of a service that serves a set of APIs. It is commonly known as a service endpoint. A service may expose any number of service endpoints, and all service endpoints share the same service definition, such as quota limits and monitoring metrics. Example service configuration: name: library-example.googleapis.com endpoints: # Below entry makes 'google.example.library.v1.Library' # API be served from endpoint address library-example.googleapis.com. # It also allows HTTP OPTIONS calls to be passed to the backend, for # it to decide whether the subsequent cross-origin request is # allowed to proceed. - name: library-example.googleapis.com allow_cors: true
type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

// DEPRECATED: This field is no longer supported. Instead of using aliases, please specify multiple google.api.Endpoint for each of the intended aliases. Additional names that this endpoint will be hosted on.
func (o EndpointOutput) Aliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Endpoint) []string { return v.Aliases }).(pulumi.StringArrayOutput)
}

// Allowing [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing), aka cross-domain traffic, would allow the backends served from this endpoint to receive and respond to HTTP OPTIONS requests. The response will be used by the browser to determine whether the subsequent cross-origin request is allowed to proceed.
func (o EndpointOutput) AllowCors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Endpoint) *bool { return v.AllowCors }).(pulumi.BoolPtrOutput)
}

// The canonical name of this endpoint.
func (o EndpointOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The specification of an Internet routable address of API frontend that will handle requests to this [API Endpoint](https://cloud.google.com/apis/design/glossary). It should be either a valid IPv4 address or a fully-qualified domain name. For example, "8.8.8.8" or "myservice.appspot.com".
func (o EndpointOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type EndpointArrayOutput struct{ *pulumi.OutputState }

func (EndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Endpoint)(nil)).Elem()
}

func (o EndpointArrayOutput) ToEndpointArrayOutput() EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) Index(i pulumi.IntInput) EndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Endpoint {
		return vs[0].([]Endpoint)[vs[1].(int)]
	}).(EndpointOutput)
}

// Enum type definition.
type Enum struct {
	// Enum value definitions.
	Enumvalue []EnumValue `pulumi:"enumvalue"`
	// Enum type name.
	Name *string `pulumi:"name"`
	// Protocol buffer options.
	Options []Option `pulumi:"options"`
	// The source context.
	SourceContext *SourceContext `pulumi:"sourceContext"`
	// The source syntax.
	Syntax *string `pulumi:"syntax"`
}

// EnumInput is an input type that accepts EnumArgs and EnumOutput values.
// You can construct a concrete instance of `EnumInput` via:
//
//          EnumArgs{...}
type EnumInput interface {
	pulumi.Input

	ToEnumOutput() EnumOutput
	ToEnumOutputWithContext(context.Context) EnumOutput
}

// Enum type definition.
type EnumArgs struct {
	// Enum value definitions.
	Enumvalue EnumValueArrayInput `pulumi:"enumvalue"`
	// Enum type name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Protocol buffer options.
	Options OptionArrayInput `pulumi:"options"`
	// The source context.
	SourceContext SourceContextPtrInput `pulumi:"sourceContext"`
	// The source syntax.
	Syntax pulumi.StringPtrInput `pulumi:"syntax"`
}

func (EnumArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Enum)(nil)).Elem()
}

func (i EnumArgs) ToEnumOutput() EnumOutput {
	return i.ToEnumOutputWithContext(context.Background())
}

func (i EnumArgs) ToEnumOutputWithContext(ctx context.Context) EnumOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnumOutput)
}

// EnumArrayInput is an input type that accepts EnumArray and EnumArrayOutput values.
// You can construct a concrete instance of `EnumArrayInput` via:
//
//          EnumArray{ EnumArgs{...} }
type EnumArrayInput interface {
	pulumi.Input

	ToEnumArrayOutput() EnumArrayOutput
	ToEnumArrayOutputWithContext(context.Context) EnumArrayOutput
}

type EnumArray []EnumInput

func (EnumArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Enum)(nil)).Elem()
}

func (i EnumArray) ToEnumArrayOutput() EnumArrayOutput {
	return i.ToEnumArrayOutputWithContext(context.Background())
}

func (i EnumArray) ToEnumArrayOutputWithContext(ctx context.Context) EnumArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnumArrayOutput)
}

// Enum type definition.
type EnumOutput struct{ *pulumi.OutputState }

func (EnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Enum)(nil)).Elem()
}

func (o EnumOutput) ToEnumOutput() EnumOutput {
	return o
}

func (o EnumOutput) ToEnumOutputWithContext(ctx context.Context) EnumOutput {
	return o
}

// Enum value definitions.
func (o EnumOutput) Enumvalue() EnumValueArrayOutput {
	return o.ApplyT(func(v Enum) []EnumValue { return v.Enumvalue }).(EnumValueArrayOutput)
}

// Enum type name.
func (o EnumOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Enum) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Protocol buffer options.
func (o EnumOutput) Options() OptionArrayOutput {
	return o.ApplyT(func(v Enum) []Option { return v.Options }).(OptionArrayOutput)
}

// The source context.
func (o EnumOutput) SourceContext() SourceContextPtrOutput {
	return o.ApplyT(func(v Enum) *SourceContext { return v.SourceContext }).(SourceContextPtrOutput)
}

// The source syntax.
func (o EnumOutput) Syntax() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Enum) *string { return v.Syntax }).(pulumi.StringPtrOutput)
}

type EnumArrayOutput struct{ *pulumi.OutputState }

func (EnumArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Enum)(nil)).Elem()
}

func (o EnumArrayOutput) ToEnumArrayOutput() EnumArrayOutput {
	return o
}

func (o EnumArrayOutput) ToEnumArrayOutputWithContext(ctx context.Context) EnumArrayOutput {
	return o
}

func (o EnumArrayOutput) Index(i pulumi.IntInput) EnumOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Enum {
		return vs[0].([]Enum)[vs[1].(int)]
	}).(EnumOutput)
}

// Enum value definition.
type EnumValue struct {
	// Enum value name.
	Name *string `pulumi:"name"`
	// Enum value number.
	Number *int `pulumi:"number"`
	// Protocol buffer options.
	Options []Option `pulumi:"options"`
}

// EnumValueInput is an input type that accepts EnumValueArgs and EnumValueOutput values.
// You can construct a concrete instance of `EnumValueInput` via:
//
//          EnumValueArgs{...}
type EnumValueInput interface {
	pulumi.Input

	ToEnumValueOutput() EnumValueOutput
	ToEnumValueOutputWithContext(context.Context) EnumValueOutput
}

// Enum value definition.
type EnumValueArgs struct {
	// Enum value name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Enum value number.
	Number pulumi.IntPtrInput `pulumi:"number"`
	// Protocol buffer options.
	Options OptionArrayInput `pulumi:"options"`
}

func (EnumValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnumValue)(nil)).Elem()
}

func (i EnumValueArgs) ToEnumValueOutput() EnumValueOutput {
	return i.ToEnumValueOutputWithContext(context.Background())
}

func (i EnumValueArgs) ToEnumValueOutputWithContext(ctx context.Context) EnumValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnumValueOutput)
}

// EnumValueArrayInput is an input type that accepts EnumValueArray and EnumValueArrayOutput values.
// You can construct a concrete instance of `EnumValueArrayInput` via:
//
//          EnumValueArray{ EnumValueArgs{...} }
type EnumValueArrayInput interface {
	pulumi.Input

	ToEnumValueArrayOutput() EnumValueArrayOutput
	ToEnumValueArrayOutputWithContext(context.Context) EnumValueArrayOutput
}

type EnumValueArray []EnumValueInput

func (EnumValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnumValue)(nil)).Elem()
}

func (i EnumValueArray) ToEnumValueArrayOutput() EnumValueArrayOutput {
	return i.ToEnumValueArrayOutputWithContext(context.Background())
}

func (i EnumValueArray) ToEnumValueArrayOutputWithContext(ctx context.Context) EnumValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnumValueArrayOutput)
}

// Enum value definition.
type EnumValueOutput struct{ *pulumi.OutputState }

func (EnumValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnumValue)(nil)).Elem()
}

func (o EnumValueOutput) ToEnumValueOutput() EnumValueOutput {
	return o
}

func (o EnumValueOutput) ToEnumValueOutputWithContext(ctx context.Context) EnumValueOutput {
	return o
}

// Enum value name.
func (o EnumValueOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnumValue) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Enum value number.
func (o EnumValueOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnumValue) *int { return v.Number }).(pulumi.IntPtrOutput)
}

// Protocol buffer options.
func (o EnumValueOutput) Options() OptionArrayOutput {
	return o.ApplyT(func(v EnumValue) []Option { return v.Options }).(OptionArrayOutput)
}

type EnumValueArrayOutput struct{ *pulumi.OutputState }

func (EnumValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnumValue)(nil)).Elem()
}

func (o EnumValueArrayOutput) ToEnumValueArrayOutput() EnumValueArrayOutput {
	return o
}

func (o EnumValueArrayOutput) ToEnumValueArrayOutputWithContext(ctx context.Context) EnumValueArrayOutput {
	return o
}

func (o EnumValueArrayOutput) Index(i pulumi.IntInput) EnumValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnumValue {
		return vs[0].([]EnumValue)[vs[1].(int)]
	}).(EnumValueOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// A single field of a message type.
type Field struct {
	// The field cardinality.
	Cardinality *string `pulumi:"cardinality"`
	// The string value of the default value of this field. Proto2 syntax only.
	DefaultValue *string `pulumi:"defaultValue"`
	// The field JSON name.
	JsonName *string `pulumi:"jsonName"`
	// The field type.
	Kind *string `pulumi:"kind"`
	// The field name.
	Name *string `pulumi:"name"`
	// The field number.
	Number *int `pulumi:"number"`
	// The index of the field type in `Type.oneofs`, for message or enumeration types. The first type has index 1; zero means the type is not in the list.
	OneofIndex *int `pulumi:"oneofIndex"`
	// The protocol buffer options.
	Options []Option `pulumi:"options"`
	// Whether to use alternative packed wire representation.
	Packed *bool `pulumi:"packed"`
	// The field type URL, without the scheme, for message or enumeration types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
	TypeUrl *string `pulumi:"typeUrl"`
}

// FieldInput is an input type that accepts FieldArgs and FieldOutput values.
// You can construct a concrete instance of `FieldInput` via:
//
//          FieldArgs{...}
type FieldInput interface {
	pulumi.Input

	ToFieldOutput() FieldOutput
	ToFieldOutputWithContext(context.Context) FieldOutput
}

// A single field of a message type.
type FieldArgs struct {
	// The field cardinality.
	Cardinality pulumi.StringPtrInput `pulumi:"cardinality"`
	// The string value of the default value of this field. Proto2 syntax only.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// The field JSON name.
	JsonName pulumi.StringPtrInput `pulumi:"jsonName"`
	// The field type.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The field name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The field number.
	Number pulumi.IntPtrInput `pulumi:"number"`
	// The index of the field type in `Type.oneofs`, for message or enumeration types. The first type has index 1; zero means the type is not in the list.
	OneofIndex pulumi.IntPtrInput `pulumi:"oneofIndex"`
	// The protocol buffer options.
	Options OptionArrayInput `pulumi:"options"`
	// Whether to use alternative packed wire representation.
	Packed pulumi.BoolPtrInput `pulumi:"packed"`
	// The field type URL, without the scheme, for message or enumeration types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
	TypeUrl pulumi.StringPtrInput `pulumi:"typeUrl"`
}

func (FieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Field)(nil)).Elem()
}

func (i FieldArgs) ToFieldOutput() FieldOutput {
	return i.ToFieldOutputWithContext(context.Background())
}

func (i FieldArgs) ToFieldOutputWithContext(ctx context.Context) FieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldOutput)
}

// FieldArrayInput is an input type that accepts FieldArray and FieldArrayOutput values.
// You can construct a concrete instance of `FieldArrayInput` via:
//
//          FieldArray{ FieldArgs{...} }
type FieldArrayInput interface {
	pulumi.Input

	ToFieldArrayOutput() FieldArrayOutput
	ToFieldArrayOutputWithContext(context.Context) FieldArrayOutput
}

type FieldArray []FieldInput

func (FieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Field)(nil)).Elem()
}

func (i FieldArray) ToFieldArrayOutput() FieldArrayOutput {
	return i.ToFieldArrayOutputWithContext(context.Background())
}

func (i FieldArray) ToFieldArrayOutputWithContext(ctx context.Context) FieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldArrayOutput)
}

// A single field of a message type.
type FieldOutput struct{ *pulumi.OutputState }

func (FieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Field)(nil)).Elem()
}

func (o FieldOutput) ToFieldOutput() FieldOutput {
	return o
}

func (o FieldOutput) ToFieldOutputWithContext(ctx context.Context) FieldOutput {
	return o
}

// The field cardinality.
func (o FieldOutput) Cardinality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Field) *string { return v.Cardinality }).(pulumi.StringPtrOutput)
}

// The string value of the default value of this field. Proto2 syntax only.
func (o FieldOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Field) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// The field JSON name.
func (o FieldOutput) JsonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Field) *string { return v.JsonName }).(pulumi.StringPtrOutput)
}

// The field type.
func (o FieldOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Field) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The field name.
func (o FieldOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Field) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The field number.
func (o FieldOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Field) *int { return v.Number }).(pulumi.IntPtrOutput)
}

// The index of the field type in `Type.oneofs`, for message or enumeration types. The first type has index 1; zero means the type is not in the list.
func (o FieldOutput) OneofIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Field) *int { return v.OneofIndex }).(pulumi.IntPtrOutput)
}

// The protocol buffer options.
func (o FieldOutput) Options() OptionArrayOutput {
	return o.ApplyT(func(v Field) []Option { return v.Options }).(OptionArrayOutput)
}

// Whether to use alternative packed wire representation.
func (o FieldOutput) Packed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Field) *bool { return v.Packed }).(pulumi.BoolPtrOutput)
}

// The field type URL, without the scheme, for message or enumeration types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
func (o FieldOutput) TypeUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Field) *string { return v.TypeUrl }).(pulumi.StringPtrOutput)
}

type FieldArrayOutput struct{ *pulumi.OutputState }

func (FieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Field)(nil)).Elem()
}

func (o FieldArrayOutput) ToFieldArrayOutput() FieldArrayOutput {
	return o
}

func (o FieldArrayOutput) ToFieldArrayOutputWithContext(ctx context.Context) FieldArrayOutput {
	return o
}

func (o FieldArrayOutput) Index(i pulumi.IntInput) FieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Field {
		return vs[0].([]Field)[vs[1].(int)]
	}).(FieldOutput)
}

// Defines the HTTP configuration for an API service. It contains a list of HttpRule, each specifying the mapping of an RPC method to one or more HTTP REST API methods.
type Http struct {
	// When set to true, URL path parameters will be fully URI-decoded except in cases of single segment matches in reserved expansion, where "%2F" will be left encoded. The default behavior is to not decode RFC 6570 reserved characters in multi segment matches.
	FullyDecodeReservedExpansion *bool `pulumi:"fullyDecodeReservedExpansion"`
	// A list of HTTP configuration rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
	Rules []HttpRule `pulumi:"rules"`
}

// HttpInput is an input type that accepts HttpArgs and HttpOutput values.
// You can construct a concrete instance of `HttpInput` via:
//
//          HttpArgs{...}
type HttpInput interface {
	pulumi.Input

	ToHttpOutput() HttpOutput
	ToHttpOutputWithContext(context.Context) HttpOutput
}

// Defines the HTTP configuration for an API service. It contains a list of HttpRule, each specifying the mapping of an RPC method to one or more HTTP REST API methods.
type HttpArgs struct {
	// When set to true, URL path parameters will be fully URI-decoded except in cases of single segment matches in reserved expansion, where "%2F" will be left encoded. The default behavior is to not decode RFC 6570 reserved characters in multi segment matches.
	FullyDecodeReservedExpansion pulumi.BoolPtrInput `pulumi:"fullyDecodeReservedExpansion"`
	// A list of HTTP configuration rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
	Rules HttpRuleArrayInput `pulumi:"rules"`
}

func (HttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Http)(nil)).Elem()
}

func (i HttpArgs) ToHttpOutput() HttpOutput {
	return i.ToHttpOutputWithContext(context.Background())
}

func (i HttpArgs) ToHttpOutputWithContext(ctx context.Context) HttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpOutput)
}

func (i HttpArgs) ToHttpPtrOutput() HttpPtrOutput {
	return i.ToHttpPtrOutputWithContext(context.Background())
}

func (i HttpArgs) ToHttpPtrOutputWithContext(ctx context.Context) HttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpOutput).ToHttpPtrOutputWithContext(ctx)
}

// HttpPtrInput is an input type that accepts HttpArgs, HttpPtr and HttpPtrOutput values.
// You can construct a concrete instance of `HttpPtrInput` via:
//
//          HttpArgs{...}
//
//  or:
//
//          nil
type HttpPtrInput interface {
	pulumi.Input

	ToHttpPtrOutput() HttpPtrOutput
	ToHttpPtrOutputWithContext(context.Context) HttpPtrOutput
}

type httpPtrType HttpArgs

func HttpPtr(v *HttpArgs) HttpPtrInput {
	return (*httpPtrType)(v)
}

func (*httpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Http)(nil)).Elem()
}

func (i *httpPtrType) ToHttpPtrOutput() HttpPtrOutput {
	return i.ToHttpPtrOutputWithContext(context.Background())
}

func (i *httpPtrType) ToHttpPtrOutputWithContext(ctx context.Context) HttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpPtrOutput)
}

// Defines the HTTP configuration for an API service. It contains a list of HttpRule, each specifying the mapping of an RPC method to one or more HTTP REST API methods.
type HttpOutput struct{ *pulumi.OutputState }

func (HttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Http)(nil)).Elem()
}

func (o HttpOutput) ToHttpOutput() HttpOutput {
	return o
}

func (o HttpOutput) ToHttpOutputWithContext(ctx context.Context) HttpOutput {
	return o
}

func (o HttpOutput) ToHttpPtrOutput() HttpPtrOutput {
	return o.ToHttpPtrOutputWithContext(context.Background())
}

func (o HttpOutput) ToHttpPtrOutputWithContext(ctx context.Context) HttpPtrOutput {
	return o.ApplyT(func(v Http) *Http {
		return &v
	}).(HttpPtrOutput)
}

// When set to true, URL path parameters will be fully URI-decoded except in cases of single segment matches in reserved expansion, where "%2F" will be left encoded. The default behavior is to not decode RFC 6570 reserved characters in multi segment matches.
func (o HttpOutput) FullyDecodeReservedExpansion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Http) *bool { return v.FullyDecodeReservedExpansion }).(pulumi.BoolPtrOutput)
}

// A list of HTTP configuration rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
func (o HttpOutput) Rules() HttpRuleArrayOutput {
	return o.ApplyT(func(v Http) []HttpRule { return v.Rules }).(HttpRuleArrayOutput)
}

type HttpPtrOutput struct{ *pulumi.OutputState }

func (HttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Http)(nil)).Elem()
}

func (o HttpPtrOutput) ToHttpPtrOutput() HttpPtrOutput {
	return o
}

func (o HttpPtrOutput) ToHttpPtrOutputWithContext(ctx context.Context) HttpPtrOutput {
	return o
}

func (o HttpPtrOutput) Elem() HttpOutput {
	return o.ApplyT(func(v *Http) Http { return *v }).(HttpOutput)
}

// When set to true, URL path parameters will be fully URI-decoded except in cases of single segment matches in reserved expansion, where "%2F" will be left encoded. The default behavior is to not decode RFC 6570 reserved characters in multi segment matches.
func (o HttpPtrOutput) FullyDecodeReservedExpansion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Http) *bool {
		if v == nil {
			return nil
		}
		return v.FullyDecodeReservedExpansion
	}).(pulumi.BoolPtrOutput)
}

// A list of HTTP configuration rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
func (o HttpPtrOutput) Rules() HttpRuleArrayOutput {
	return o.ApplyT(func(v *Http) []HttpRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(HttpRuleArrayOutput)
}

// # gRPC Transcoding gRPC Transcoding is a feature for mapping between a gRPC method and one or more HTTP REST endpoints. It allows developers to build a single API service that supports both gRPC APIs and REST APIs. Many systems, including [Google APIs](https://github.com/googleapis/googleapis), [Cloud Endpoints](https://cloud.google.com/endpoints), [gRPC Gateway](https://github.com/grpc-ecosystem/grpc-gateway), and [Envoy](https://github.com/envoyproxy/envoy) proxy support this feature and use it for large scale production services. `HttpRule` defines the schema of the gRPC/REST mapping. The mapping specifies how different portions of the gRPC request message are mapped to the URL path, URL query parameters, and HTTP request body. It also controls how the gRPC response message is mapped to the HTTP response body. `HttpRule` is typically specified as an `google.api.http` annotation on the gRPC method. Each mapping specifies a URL path template and an HTTP method. The path template may refer to one or more fields in the gRPC request message, as long as each field is a non-repeated field with a primitive (non-message) type. The path template controls how fields of the request message are mapped to the URL path. Example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) = { get: "/v1/{name=messages/*}" }; } } message GetMessageRequest { string name = 1; // Mapped to URL path. } message Message { string text = 1; // The resource content. } This enables an HTTP REST to gRPC mapping as below: HTTP | gRPC -----|----- `GET /v1/messages/123456` | `GetMessage(name: "messages/123456")` Any fields in the request message which are not bound by the path template automatically become HTTP query parameters if there is no HTTP request body. For example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) = { get:"/v1/messages/{message_id}" }; } } message GetMessageRequest { message SubMessage { string subfield = 1; } string message_id = 1; // Mapped to URL path. int64 revision = 2; // Mapped to URL query parameter `revision`. SubMessage sub = 3; // Mapped to URL query parameter `sub.subfield`. } This enables a HTTP JSON to RPC mapping as below: HTTP | gRPC -----|----- `GET /v1/messages/123456?revision=2&sub.subfield=foo` | `GetMessage(message_id: "123456" revision: 2 sub: SubMessage(subfield: "foo"))` Note that fields which are mapped to URL query parameters must have a primitive type or a repeated primitive type or a non-repeated message type. In the case of a repeated type, the parameter can be repeated in the URL as `...?param=A&param=B`. In the case of a message type, each field of the message is mapped to a separate parameter, such as `...?foo.a=A&foo.b=B&foo.c=C`. For HTTP methods that allow a request body, the `body` field specifies the mapping. Consider a REST update method on the message resource collection: service Messaging { rpc UpdateMessage(UpdateMessageRequest) returns (Message) { option (google.api.http) = { patch: "/v1/messages/{message_id}" body: "message" }; } } message UpdateMessageRequest { string message_id = 1; // mapped to the URL Message message = 2; // mapped to the body } The following HTTP JSON to RPC mapping is enabled, where the representation of the JSON in the request body is determined by protos JSON encoding: HTTP | gRPC -----|----- `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" message { text: "Hi!" })` The special name `*` can be used in the body mapping to define that every field not bound by the path template should be mapped to the request body. This enables the following alternative definition of the update method: service Messaging { rpc UpdateMessage(Message) returns (Message) { option (google.api.http) = { patch: "/v1/messages/{message_id}" body: "*" }; } } message Message { string message_id = 1; string text = 2; } The following HTTP JSON to RPC mapping is enabled: HTTP | gRPC -----|----- `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" text: "Hi!")` Note that when using `*` in the body mapping, it is not possible to have HTTP parameters, as all fields not bound by the path end in the body. This makes this option more rarely used in practice when defining REST APIs. The common usage of `*` is in custom methods which don't use the URL at all for transferring data. It is possible to define multiple HTTP methods for one RPC by using the `additional_bindings` option. Example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) = { get: "/v1/messages/{message_id}" additional_bindings { get: "/v1/users/{user_id}/messages/{message_id}" } }; } } message GetMessageRequest { string message_id = 1; string user_id = 2; } This enables the following two alternative HTTP JSON to RPC mappings: HTTP | gRPC -----|----- `GET /v1/messages/123456` | `GetMessage(message_id: "123456")` `GET /v1/users/me/messages/123456` | `GetMessage(user_id: "me" message_id: "123456")` ## Rules for HTTP mapping 1. Leaf request fields (recursive expansion nested messages in the request message) are classified into three categories: - Fields referred by the path template. They are passed via the URL path. - Fields referred by the HttpRule.body. They are passed via the HTTP request body. - All other fields are passed via the URL query parameters, and the parameter name is the field path in the request message. A repeated field can be represented as multiple query parameters under the same name. 2. If HttpRule.body is "*", there is no URL query parameter, all fields are passed via URL path and HTTP request body. 3. If HttpRule.body is omitted, there is no HTTP request body, all fields are passed via URL path and URL query parameters. ### Path template syntax Template = "/" Segments [ Verb ] ; Segments = Segment { "/" Segment } ; Segment = "*" | "**" | LITERAL | Variable ; Variable = "{" FieldPath [ "=" Segments ] "}" ; FieldPath = IDENT { "." IDENT } ; Verb = ":" LITERAL ; The syntax `*` matches a single URL path segment. The syntax `**` matches zero or more URL path segments, which must be the last part of the URL path except the `Verb`. The syntax `Variable` matches part of the URL path as specified by its template. A variable template must not contain other variables. If a variable matches a single path segment, its template may be omitted, e.g. `{var}` is equivalent to `{var=*}`. The syntax `LITERAL` matches literal text in the URL path. If the `LITERAL` contains any reserved character, such characters should be percent-encoded before the matching. If a variable contains exactly one path segment, such as `"{var}"` or `"{var=*}"`, when such a variable is expanded into a URL path on the client side, all characters except `[-_.~0-9a-zA-Z]` are percent-encoded. The server side does the reverse decoding. Such variables show up in the [Discovery Document](https://developers.google.com/discovery/v1/reference/apis) as `{var}`. If a variable contains multiple path segments, such as `"{var=foo/*}"` or `"{var=**}"`, when such a variable is expanded into a URL path on the client side, all characters except `[-_.~/0-9a-zA-Z]` are percent-encoded. The server side does the reverse decoding, except "%2F" and "%2f" are left unchanged. Such variables show up in the [Discovery Document](https://developers.google.com/discovery/v1/reference/apis) as `{+var}`. ## Using gRPC API Service Configuration gRPC API Service Configuration (service config) is a configuration language for configuring a gRPC service to become a user-facing product. The service config is simply the YAML representation of the `google.api.Service` proto message. As an alternative to annotating your proto file, you can configure gRPC transcoding in your service config YAML files. You do this by specifying a `HttpRule` that maps the gRPC method to a REST endpoint, achieving the same effect as the proto annotation. This can be particularly useful if you have a proto that is reused in multiple services. Note that any transcoding specified in the service config will override any matching transcoding configuration in the proto. Example: http: rules: # Selects a gRPC method and applies HttpRule to it. - selector: example.v1.Messaging.GetMessage get: /v1/messages/{message_id}/{sub.subfield} ## Special notes When gRPC Transcoding is used to map a gRPC to JSON REST endpoints, the proto to JSON conversion must follow the [proto3 specification](https://developers.google.com/protocol-buffers/docs/proto3#json). While the single segment variable follows the semantics of [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2 Simple String Expansion, the multi segment variable **does not** follow RFC 6570 Section 3.2.3 Reserved Expansion. The reason is that the Reserved Expansion does not expand special characters like `?` and `#`, which would lead to invalid URLs. As the result, gRPC Transcoding uses a custom encoding for multi segment variables. The path variables **must not** refer to any repeated or mapped field, because client libraries are not capable of handling such variable expansion. The path variables **must not** capture the leading "/" character. The reason is that the most common use case "{var}" does not capture the leading "/" character. For consistency, all path variables must share the same behavior. Repeated message fields must not be mapped to URL query parameters, because no client library can support such complicated mapping. If an API needs to use a JSON array for request or response body, it can map the request or response body to a repeated field. However, some gRPC Transcoding implementations may not support this feature.
type HttpRule struct {
	// Additional HTTP bindings for the selector. Nested bindings must not contain an `additional_bindings` field themselves (that is, the nesting may only be one level deep).
	AdditionalBindings []HttpRule `pulumi:"additionalBindings"`
	// The name of the request field whose value is mapped to the HTTP request body, or `*` for mapping all request fields not captured by the path pattern to the HTTP body, or omitted for not having any HTTP request body. NOTE: the referred field must be present at the top-level of the request message type.
	Body *string `pulumi:"body"`
	// The custom pattern is used for specifying an HTTP method that is not included in the `pattern` field, such as HEAD, or "*" to leave the HTTP method unspecified for this rule. The wild-card rule is useful for services that provide content to Web (HTML) clients.
	Custom *CustomHttpPattern `pulumi:"custom"`
	// Maps to HTTP DELETE. Used for deleting a resource.
	Delete *string `pulumi:"delete"`
	// Maps to HTTP GET. Used for listing and getting information about resources.
	Get *string `pulumi:"get"`
	// Maps to HTTP PATCH. Used for updating a resource.
	Patch *string `pulumi:"patch"`
	// Maps to HTTP POST. Used for creating a resource or performing an action.
	Post *string `pulumi:"post"`
	// Maps to HTTP PUT. Used for replacing a resource.
	Put *string `pulumi:"put"`
	// Optional. The name of the response field whose value is mapped to the HTTP response body. When omitted, the entire response message will be used as the HTTP response body. NOTE: The referred field must be present at the top-level of the response message type.
	ResponseBody *string `pulumi:"responseBody"`
	// Selects a method to which this rule applies. Refer to selector for syntax details.
	Selector *string `pulumi:"selector"`
}

// HttpRuleInput is an input type that accepts HttpRuleArgs and HttpRuleOutput values.
// You can construct a concrete instance of `HttpRuleInput` via:
//
//          HttpRuleArgs{...}
type HttpRuleInput interface {
	pulumi.Input

	ToHttpRuleOutput() HttpRuleOutput
	ToHttpRuleOutputWithContext(context.Context) HttpRuleOutput
}

// # gRPC Transcoding gRPC Transcoding is a feature for mapping between a gRPC method and one or more HTTP REST endpoints. It allows developers to build a single API service that supports both gRPC APIs and REST APIs. Many systems, including [Google APIs](https://github.com/googleapis/googleapis), [Cloud Endpoints](https://cloud.google.com/endpoints), [gRPC Gateway](https://github.com/grpc-ecosystem/grpc-gateway), and [Envoy](https://github.com/envoyproxy/envoy) proxy support this feature and use it for large scale production services. `HttpRule` defines the schema of the gRPC/REST mapping. The mapping specifies how different portions of the gRPC request message are mapped to the URL path, URL query parameters, and HTTP request body. It also controls how the gRPC response message is mapped to the HTTP response body. `HttpRule` is typically specified as an `google.api.http` annotation on the gRPC method. Each mapping specifies a URL path template and an HTTP method. The path template may refer to one or more fields in the gRPC request message, as long as each field is a non-repeated field with a primitive (non-message) type. The path template controls how fields of the request message are mapped to the URL path. Example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) = { get: "/v1/{name=messages/*}" }; } } message GetMessageRequest { string name = 1; // Mapped to URL path. } message Message { string text = 1; // The resource content. } This enables an HTTP REST to gRPC mapping as below: HTTP | gRPC -----|----- `GET /v1/messages/123456` | `GetMessage(name: "messages/123456")` Any fields in the request message which are not bound by the path template automatically become HTTP query parameters if there is no HTTP request body. For example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) = { get:"/v1/messages/{message_id}" }; } } message GetMessageRequest { message SubMessage { string subfield = 1; } string message_id = 1; // Mapped to URL path. int64 revision = 2; // Mapped to URL query parameter `revision`. SubMessage sub = 3; // Mapped to URL query parameter `sub.subfield`. } This enables a HTTP JSON to RPC mapping as below: HTTP | gRPC -----|----- `GET /v1/messages/123456?revision=2&sub.subfield=foo` | `GetMessage(message_id: "123456" revision: 2 sub: SubMessage(subfield: "foo"))` Note that fields which are mapped to URL query parameters must have a primitive type or a repeated primitive type or a non-repeated message type. In the case of a repeated type, the parameter can be repeated in the URL as `...?param=A&param=B`. In the case of a message type, each field of the message is mapped to a separate parameter, such as `...?foo.a=A&foo.b=B&foo.c=C`. For HTTP methods that allow a request body, the `body` field specifies the mapping. Consider a REST update method on the message resource collection: service Messaging { rpc UpdateMessage(UpdateMessageRequest) returns (Message) { option (google.api.http) = { patch: "/v1/messages/{message_id}" body: "message" }; } } message UpdateMessageRequest { string message_id = 1; // mapped to the URL Message message = 2; // mapped to the body } The following HTTP JSON to RPC mapping is enabled, where the representation of the JSON in the request body is determined by protos JSON encoding: HTTP | gRPC -----|----- `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" message { text: "Hi!" })` The special name `*` can be used in the body mapping to define that every field not bound by the path template should be mapped to the request body. This enables the following alternative definition of the update method: service Messaging { rpc UpdateMessage(Message) returns (Message) { option (google.api.http) = { patch: "/v1/messages/{message_id}" body: "*" }; } } message Message { string message_id = 1; string text = 2; } The following HTTP JSON to RPC mapping is enabled: HTTP | gRPC -----|----- `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" text: "Hi!")` Note that when using `*` in the body mapping, it is not possible to have HTTP parameters, as all fields not bound by the path end in the body. This makes this option more rarely used in practice when defining REST APIs. The common usage of `*` is in custom methods which don't use the URL at all for transferring data. It is possible to define multiple HTTP methods for one RPC by using the `additional_bindings` option. Example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) = { get: "/v1/messages/{message_id}" additional_bindings { get: "/v1/users/{user_id}/messages/{message_id}" } }; } } message GetMessageRequest { string message_id = 1; string user_id = 2; } This enables the following two alternative HTTP JSON to RPC mappings: HTTP | gRPC -----|----- `GET /v1/messages/123456` | `GetMessage(message_id: "123456")` `GET /v1/users/me/messages/123456` | `GetMessage(user_id: "me" message_id: "123456")` ## Rules for HTTP mapping 1. Leaf request fields (recursive expansion nested messages in the request message) are classified into three categories: - Fields referred by the path template. They are passed via the URL path. - Fields referred by the HttpRule.body. They are passed via the HTTP request body. - All other fields are passed via the URL query parameters, and the parameter name is the field path in the request message. A repeated field can be represented as multiple query parameters under the same name. 2. If HttpRule.body is "*", there is no URL query parameter, all fields are passed via URL path and HTTP request body. 3. If HttpRule.body is omitted, there is no HTTP request body, all fields are passed via URL path and URL query parameters. ### Path template syntax Template = "/" Segments [ Verb ] ; Segments = Segment { "/" Segment } ; Segment = "*" | "**" | LITERAL | Variable ; Variable = "{" FieldPath [ "=" Segments ] "}" ; FieldPath = IDENT { "." IDENT } ; Verb = ":" LITERAL ; The syntax `*` matches a single URL path segment. The syntax `**` matches zero or more URL path segments, which must be the last part of the URL path except the `Verb`. The syntax `Variable` matches part of the URL path as specified by its template. A variable template must not contain other variables. If a variable matches a single path segment, its template may be omitted, e.g. `{var}` is equivalent to `{var=*}`. The syntax `LITERAL` matches literal text in the URL path. If the `LITERAL` contains any reserved character, such characters should be percent-encoded before the matching. If a variable contains exactly one path segment, such as `"{var}"` or `"{var=*}"`, when such a variable is expanded into a URL path on the client side, all characters except `[-_.~0-9a-zA-Z]` are percent-encoded. The server side does the reverse decoding. Such variables show up in the [Discovery Document](https://developers.google.com/discovery/v1/reference/apis) as `{var}`. If a variable contains multiple path segments, such as `"{var=foo/*}"` or `"{var=**}"`, when such a variable is expanded into a URL path on the client side, all characters except `[-_.~/0-9a-zA-Z]` are percent-encoded. The server side does the reverse decoding, except "%2F" and "%2f" are left unchanged. Such variables show up in the [Discovery Document](https://developers.google.com/discovery/v1/reference/apis) as `{+var}`. ## Using gRPC API Service Configuration gRPC API Service Configuration (service config) is a configuration language for configuring a gRPC service to become a user-facing product. The service config is simply the YAML representation of the `google.api.Service` proto message. As an alternative to annotating your proto file, you can configure gRPC transcoding in your service config YAML files. You do this by specifying a `HttpRule` that maps the gRPC method to a REST endpoint, achieving the same effect as the proto annotation. This can be particularly useful if you have a proto that is reused in multiple services. Note that any transcoding specified in the service config will override any matching transcoding configuration in the proto. Example: http: rules: # Selects a gRPC method and applies HttpRule to it. - selector: example.v1.Messaging.GetMessage get: /v1/messages/{message_id}/{sub.subfield} ## Special notes When gRPC Transcoding is used to map a gRPC to JSON REST endpoints, the proto to JSON conversion must follow the [proto3 specification](https://developers.google.com/protocol-buffers/docs/proto3#json). While the single segment variable follows the semantics of [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2 Simple String Expansion, the multi segment variable **does not** follow RFC 6570 Section 3.2.3 Reserved Expansion. The reason is that the Reserved Expansion does not expand special characters like `?` and `#`, which would lead to invalid URLs. As the result, gRPC Transcoding uses a custom encoding for multi segment variables. The path variables **must not** refer to any repeated or mapped field, because client libraries are not capable of handling such variable expansion. The path variables **must not** capture the leading "/" character. The reason is that the most common use case "{var}" does not capture the leading "/" character. For consistency, all path variables must share the same behavior. Repeated message fields must not be mapped to URL query parameters, because no client library can support such complicated mapping. If an API needs to use a JSON array for request or response body, it can map the request or response body to a repeated field. However, some gRPC Transcoding implementations may not support this feature.
type HttpRuleArgs struct {
	// Additional HTTP bindings for the selector. Nested bindings must not contain an `additional_bindings` field themselves (that is, the nesting may only be one level deep).
	AdditionalBindings HttpRuleArrayInput `pulumi:"additionalBindings"`
	// The name of the request field whose value is mapped to the HTTP request body, or `*` for mapping all request fields not captured by the path pattern to the HTTP body, or omitted for not having any HTTP request body. NOTE: the referred field must be present at the top-level of the request message type.
	Body pulumi.StringPtrInput `pulumi:"body"`
	// The custom pattern is used for specifying an HTTP method that is not included in the `pattern` field, such as HEAD, or "*" to leave the HTTP method unspecified for this rule. The wild-card rule is useful for services that provide content to Web (HTML) clients.
	Custom CustomHttpPatternPtrInput `pulumi:"custom"`
	// Maps to HTTP DELETE. Used for deleting a resource.
	Delete pulumi.StringPtrInput `pulumi:"delete"`
	// Maps to HTTP GET. Used for listing and getting information about resources.
	Get pulumi.StringPtrInput `pulumi:"get"`
	// Maps to HTTP PATCH. Used for updating a resource.
	Patch pulumi.StringPtrInput `pulumi:"patch"`
	// Maps to HTTP POST. Used for creating a resource or performing an action.
	Post pulumi.StringPtrInput `pulumi:"post"`
	// Maps to HTTP PUT. Used for replacing a resource.
	Put pulumi.StringPtrInput `pulumi:"put"`
	// Optional. The name of the response field whose value is mapped to the HTTP response body. When omitted, the entire response message will be used as the HTTP response body. NOTE: The referred field must be present at the top-level of the response message type.
	ResponseBody pulumi.StringPtrInput `pulumi:"responseBody"`
	// Selects a method to which this rule applies. Refer to selector for syntax details.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
}

func (HttpRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRule)(nil)).Elem()
}

func (i HttpRuleArgs) ToHttpRuleOutput() HttpRuleOutput {
	return i.ToHttpRuleOutputWithContext(context.Background())
}

func (i HttpRuleArgs) ToHttpRuleOutputWithContext(ctx context.Context) HttpRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRuleOutput)
}

// HttpRuleArrayInput is an input type that accepts HttpRuleArray and HttpRuleArrayOutput values.
// You can construct a concrete instance of `HttpRuleArrayInput` via:
//
//          HttpRuleArray{ HttpRuleArgs{...} }
type HttpRuleArrayInput interface {
	pulumi.Input

	ToHttpRuleArrayOutput() HttpRuleArrayOutput
	ToHttpRuleArrayOutputWithContext(context.Context) HttpRuleArrayOutput
}

type HttpRuleArray []HttpRuleInput

func (HttpRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRule)(nil)).Elem()
}

func (i HttpRuleArray) ToHttpRuleArrayOutput() HttpRuleArrayOutput {
	return i.ToHttpRuleArrayOutputWithContext(context.Background())
}

func (i HttpRuleArray) ToHttpRuleArrayOutputWithContext(ctx context.Context) HttpRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRuleArrayOutput)
}

// # gRPC Transcoding gRPC Transcoding is a feature for mapping between a gRPC method and one or more HTTP REST endpoints. It allows developers to build a single API service that supports both gRPC APIs and REST APIs. Many systems, including [Google APIs](https://github.com/googleapis/googleapis), [Cloud Endpoints](https://cloud.google.com/endpoints), [gRPC Gateway](https://github.com/grpc-ecosystem/grpc-gateway), and [Envoy](https://github.com/envoyproxy/envoy) proxy support this feature and use it for large scale production services. `HttpRule` defines the schema of the gRPC/REST mapping. The mapping specifies how different portions of the gRPC request message are mapped to the URL path, URL query parameters, and HTTP request body. It also controls how the gRPC response message is mapped to the HTTP response body. `HttpRule` is typically specified as an `google.api.http` annotation on the gRPC method. Each mapping specifies a URL path template and an HTTP method. The path template may refer to one or more fields in the gRPC request message, as long as each field is a non-repeated field with a primitive (non-message) type. The path template controls how fields of the request message are mapped to the URL path. Example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) = { get: "/v1/{name=messages/*}" }; } } message GetMessageRequest { string name = 1; // Mapped to URL path. } message Message { string text = 1; // The resource content. } This enables an HTTP REST to gRPC mapping as below: HTTP | gRPC -----|----- `GET /v1/messages/123456` | `GetMessage(name: "messages/123456")` Any fields in the request message which are not bound by the path template automatically become HTTP query parameters if there is no HTTP request body. For example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) = { get:"/v1/messages/{message_id}" }; } } message GetMessageRequest { message SubMessage { string subfield = 1; } string message_id = 1; // Mapped to URL path. int64 revision = 2; // Mapped to URL query parameter `revision`. SubMessage sub = 3; // Mapped to URL query parameter `sub.subfield`. } This enables a HTTP JSON to RPC mapping as below: HTTP | gRPC -----|----- `GET /v1/messages/123456?revision=2&sub.subfield=foo` | `GetMessage(message_id: "123456" revision: 2 sub: SubMessage(subfield: "foo"))` Note that fields which are mapped to URL query parameters must have a primitive type or a repeated primitive type or a non-repeated message type. In the case of a repeated type, the parameter can be repeated in the URL as `...?param=A&param=B`. In the case of a message type, each field of the message is mapped to a separate parameter, such as `...?foo.a=A&foo.b=B&foo.c=C`. For HTTP methods that allow a request body, the `body` field specifies the mapping. Consider a REST update method on the message resource collection: service Messaging { rpc UpdateMessage(UpdateMessageRequest) returns (Message) { option (google.api.http) = { patch: "/v1/messages/{message_id}" body: "message" }; } } message UpdateMessageRequest { string message_id = 1; // mapped to the URL Message message = 2; // mapped to the body } The following HTTP JSON to RPC mapping is enabled, where the representation of the JSON in the request body is determined by protos JSON encoding: HTTP | gRPC -----|----- `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" message { text: "Hi!" })` The special name `*` can be used in the body mapping to define that every field not bound by the path template should be mapped to the request body. This enables the following alternative definition of the update method: service Messaging { rpc UpdateMessage(Message) returns (Message) { option (google.api.http) = { patch: "/v1/messages/{message_id}" body: "*" }; } } message Message { string message_id = 1; string text = 2; } The following HTTP JSON to RPC mapping is enabled: HTTP | gRPC -----|----- `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456" text: "Hi!")` Note that when using `*` in the body mapping, it is not possible to have HTTP parameters, as all fields not bound by the path end in the body. This makes this option more rarely used in practice when defining REST APIs. The common usage of `*` is in custom methods which don't use the URL at all for transferring data. It is possible to define multiple HTTP methods for one RPC by using the `additional_bindings` option. Example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) = { get: "/v1/messages/{message_id}" additional_bindings { get: "/v1/users/{user_id}/messages/{message_id}" } }; } } message GetMessageRequest { string message_id = 1; string user_id = 2; } This enables the following two alternative HTTP JSON to RPC mappings: HTTP | gRPC -----|----- `GET /v1/messages/123456` | `GetMessage(message_id: "123456")` `GET /v1/users/me/messages/123456` | `GetMessage(user_id: "me" message_id: "123456")` ## Rules for HTTP mapping 1. Leaf request fields (recursive expansion nested messages in the request message) are classified into three categories: - Fields referred by the path template. They are passed via the URL path. - Fields referred by the HttpRule.body. They are passed via the HTTP request body. - All other fields are passed via the URL query parameters, and the parameter name is the field path in the request message. A repeated field can be represented as multiple query parameters under the same name. 2. If HttpRule.body is "*", there is no URL query parameter, all fields are passed via URL path and HTTP request body. 3. If HttpRule.body is omitted, there is no HTTP request body, all fields are passed via URL path and URL query parameters. ### Path template syntax Template = "/" Segments [ Verb ] ; Segments = Segment { "/" Segment } ; Segment = "*" | "**" | LITERAL | Variable ; Variable = "{" FieldPath [ "=" Segments ] "}" ; FieldPath = IDENT { "." IDENT } ; Verb = ":" LITERAL ; The syntax `*` matches a single URL path segment. The syntax `**` matches zero or more URL path segments, which must be the last part of the URL path except the `Verb`. The syntax `Variable` matches part of the URL path as specified by its template. A variable template must not contain other variables. If a variable matches a single path segment, its template may be omitted, e.g. `{var}` is equivalent to `{var=*}`. The syntax `LITERAL` matches literal text in the URL path. If the `LITERAL` contains any reserved character, such characters should be percent-encoded before the matching. If a variable contains exactly one path segment, such as `"{var}"` or `"{var=*}"`, when such a variable is expanded into a URL path on the client side, all characters except `[-_.~0-9a-zA-Z]` are percent-encoded. The server side does the reverse decoding. Such variables show up in the [Discovery Document](https://developers.google.com/discovery/v1/reference/apis) as `{var}`. If a variable contains multiple path segments, such as `"{var=foo/*}"` or `"{var=**}"`, when such a variable is expanded into a URL path on the client side, all characters except `[-_.~/0-9a-zA-Z]` are percent-encoded. The server side does the reverse decoding, except "%2F" and "%2f" are left unchanged. Such variables show up in the [Discovery Document](https://developers.google.com/discovery/v1/reference/apis) as `{+var}`. ## Using gRPC API Service Configuration gRPC API Service Configuration (service config) is a configuration language for configuring a gRPC service to become a user-facing product. The service config is simply the YAML representation of the `google.api.Service` proto message. As an alternative to annotating your proto file, you can configure gRPC transcoding in your service config YAML files. You do this by specifying a `HttpRule` that maps the gRPC method to a REST endpoint, achieving the same effect as the proto annotation. This can be particularly useful if you have a proto that is reused in multiple services. Note that any transcoding specified in the service config will override any matching transcoding configuration in the proto. Example: http: rules: # Selects a gRPC method and applies HttpRule to it. - selector: example.v1.Messaging.GetMessage get: /v1/messages/{message_id}/{sub.subfield} ## Special notes When gRPC Transcoding is used to map a gRPC to JSON REST endpoints, the proto to JSON conversion must follow the [proto3 specification](https://developers.google.com/protocol-buffers/docs/proto3#json). While the single segment variable follows the semantics of [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2 Simple String Expansion, the multi segment variable **does not** follow RFC 6570 Section 3.2.3 Reserved Expansion. The reason is that the Reserved Expansion does not expand special characters like `?` and `#`, which would lead to invalid URLs. As the result, gRPC Transcoding uses a custom encoding for multi segment variables. The path variables **must not** refer to any repeated or mapped field, because client libraries are not capable of handling such variable expansion. The path variables **must not** capture the leading "/" character. The reason is that the most common use case "{var}" does not capture the leading "/" character. For consistency, all path variables must share the same behavior. Repeated message fields must not be mapped to URL query parameters, because no client library can support such complicated mapping. If an API needs to use a JSON array for request or response body, it can map the request or response body to a repeated field. However, some gRPC Transcoding implementations may not support this feature.
type HttpRuleOutput struct{ *pulumi.OutputState }

func (HttpRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRule)(nil)).Elem()
}

func (o HttpRuleOutput) ToHttpRuleOutput() HttpRuleOutput {
	return o
}

func (o HttpRuleOutput) ToHttpRuleOutputWithContext(ctx context.Context) HttpRuleOutput {
	return o
}

// Additional HTTP bindings for the selector. Nested bindings must not contain an `additional_bindings` field themselves (that is, the nesting may only be one level deep).
func (o HttpRuleOutput) AdditionalBindings() HttpRuleArrayOutput {
	return o.ApplyT(func(v HttpRule) []HttpRule { return v.AdditionalBindings }).(HttpRuleArrayOutput)
}

// The name of the request field whose value is mapped to the HTTP request body, or `*` for mapping all request fields not captured by the path pattern to the HTTP body, or omitted for not having any HTTP request body. NOTE: the referred field must be present at the top-level of the request message type.
func (o HttpRuleOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRule) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// The custom pattern is used for specifying an HTTP method that is not included in the `pattern` field, such as HEAD, or "*" to leave the HTTP method unspecified for this rule. The wild-card rule is useful for services that provide content to Web (HTML) clients.
func (o HttpRuleOutput) Custom() CustomHttpPatternPtrOutput {
	return o.ApplyT(func(v HttpRule) *CustomHttpPattern { return v.Custom }).(CustomHttpPatternPtrOutput)
}

// Maps to HTTP DELETE. Used for deleting a resource.
func (o HttpRuleOutput) Delete() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRule) *string { return v.Delete }).(pulumi.StringPtrOutput)
}

// Maps to HTTP GET. Used for listing and getting information about resources.
func (o HttpRuleOutput) Get() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRule) *string { return v.Get }).(pulumi.StringPtrOutput)
}

// Maps to HTTP PATCH. Used for updating a resource.
func (o HttpRuleOutput) Patch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRule) *string { return v.Patch }).(pulumi.StringPtrOutput)
}

// Maps to HTTP POST. Used for creating a resource or performing an action.
func (o HttpRuleOutput) Post() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRule) *string { return v.Post }).(pulumi.StringPtrOutput)
}

// Maps to HTTP PUT. Used for replacing a resource.
func (o HttpRuleOutput) Put() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRule) *string { return v.Put }).(pulumi.StringPtrOutput)
}

// Optional. The name of the response field whose value is mapped to the HTTP response body. When omitted, the entire response message will be used as the HTTP response body. NOTE: The referred field must be present at the top-level of the response message type.
func (o HttpRuleOutput) ResponseBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRule) *string { return v.ResponseBody }).(pulumi.StringPtrOutput)
}

// Selects a method to which this rule applies. Refer to selector for syntax details.
func (o HttpRuleOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRule) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

type HttpRuleArrayOutput struct{ *pulumi.OutputState }

func (HttpRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRule)(nil)).Elem()
}

func (o HttpRuleArrayOutput) ToHttpRuleArrayOutput() HttpRuleArrayOutput {
	return o
}

func (o HttpRuleArrayOutput) ToHttpRuleArrayOutputWithContext(ctx context.Context) HttpRuleArrayOutput {
	return o
}

func (o HttpRuleArrayOutput) Index(i pulumi.IntInput) HttpRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRule {
		return vs[0].([]HttpRule)[vs[1].(int)]
	}).(HttpRuleOutput)
}

// Specifies a location to extract JWT from an API request.
type JwtLocation struct {
	// Specifies HTTP header name to extract JWT token.
	Header *string `pulumi:"header"`
	// Specifies URL query parameter name to extract JWT token.
	Query *string `pulumi:"query"`
	// The value prefix. The value format is "value_prefix{token}" Only applies to "in" header type. Must be empty for "in" query type. If not empty, the header value has to match (case sensitive) this prefix. If not matched, JWT will not be extracted. If matched, JWT will be extracted after the prefix is removed. For example, for "Authorization: Bearer {JWT}", value_prefix="Bearer " with a space at the end.
	ValuePrefix *string `pulumi:"valuePrefix"`
}

// JwtLocationInput is an input type that accepts JwtLocationArgs and JwtLocationOutput values.
// You can construct a concrete instance of `JwtLocationInput` via:
//
//          JwtLocationArgs{...}
type JwtLocationInput interface {
	pulumi.Input

	ToJwtLocationOutput() JwtLocationOutput
	ToJwtLocationOutputWithContext(context.Context) JwtLocationOutput
}

// Specifies a location to extract JWT from an API request.
type JwtLocationArgs struct {
	// Specifies HTTP header name to extract JWT token.
	Header pulumi.StringPtrInput `pulumi:"header"`
	// Specifies URL query parameter name to extract JWT token.
	Query pulumi.StringPtrInput `pulumi:"query"`
	// The value prefix. The value format is "value_prefix{token}" Only applies to "in" header type. Must be empty for "in" query type. If not empty, the header value has to match (case sensitive) this prefix. If not matched, JWT will not be extracted. If matched, JWT will be extracted after the prefix is removed. For example, for "Authorization: Bearer {JWT}", value_prefix="Bearer " with a space at the end.
	ValuePrefix pulumi.StringPtrInput `pulumi:"valuePrefix"`
}

func (JwtLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JwtLocation)(nil)).Elem()
}

func (i JwtLocationArgs) ToJwtLocationOutput() JwtLocationOutput {
	return i.ToJwtLocationOutputWithContext(context.Background())
}

func (i JwtLocationArgs) ToJwtLocationOutputWithContext(ctx context.Context) JwtLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JwtLocationOutput)
}

// JwtLocationArrayInput is an input type that accepts JwtLocationArray and JwtLocationArrayOutput values.
// You can construct a concrete instance of `JwtLocationArrayInput` via:
//
//          JwtLocationArray{ JwtLocationArgs{...} }
type JwtLocationArrayInput interface {
	pulumi.Input

	ToJwtLocationArrayOutput() JwtLocationArrayOutput
	ToJwtLocationArrayOutputWithContext(context.Context) JwtLocationArrayOutput
}

type JwtLocationArray []JwtLocationInput

func (JwtLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JwtLocation)(nil)).Elem()
}

func (i JwtLocationArray) ToJwtLocationArrayOutput() JwtLocationArrayOutput {
	return i.ToJwtLocationArrayOutputWithContext(context.Background())
}

func (i JwtLocationArray) ToJwtLocationArrayOutputWithContext(ctx context.Context) JwtLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JwtLocationArrayOutput)
}

// Specifies a location to extract JWT from an API request.
type JwtLocationOutput struct{ *pulumi.OutputState }

func (JwtLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JwtLocation)(nil)).Elem()
}

func (o JwtLocationOutput) ToJwtLocationOutput() JwtLocationOutput {
	return o
}

func (o JwtLocationOutput) ToJwtLocationOutputWithContext(ctx context.Context) JwtLocationOutput {
	return o
}

// Specifies HTTP header name to extract JWT token.
func (o JwtLocationOutput) Header() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JwtLocation) *string { return v.Header }).(pulumi.StringPtrOutput)
}

// Specifies URL query parameter name to extract JWT token.
func (o JwtLocationOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JwtLocation) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// The value prefix. The value format is "value_prefix{token}" Only applies to "in" header type. Must be empty for "in" query type. If not empty, the header value has to match (case sensitive) this prefix. If not matched, JWT will not be extracted. If matched, JWT will be extracted after the prefix is removed. For example, for "Authorization: Bearer {JWT}", value_prefix="Bearer " with a space at the end.
func (o JwtLocationOutput) ValuePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JwtLocation) *string { return v.ValuePrefix }).(pulumi.StringPtrOutput)
}

type JwtLocationArrayOutput struct{ *pulumi.OutputState }

func (JwtLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JwtLocation)(nil)).Elem()
}

func (o JwtLocationArrayOutput) ToJwtLocationArrayOutput() JwtLocationArrayOutput {
	return o
}

func (o JwtLocationArrayOutput) ToJwtLocationArrayOutputWithContext(ctx context.Context) JwtLocationArrayOutput {
	return o
}

func (o JwtLocationArrayOutput) Index(i pulumi.IntInput) JwtLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JwtLocation {
		return vs[0].([]JwtLocation)[vs[1].(int)]
	}).(JwtLocationOutput)
}

// A description of a label.
type LabelDescriptor struct {
	// A human-readable description for the label.
	Description *string `pulumi:"description"`
	// The label key.
	Key *string `pulumi:"key"`
	// The type of data that can be assigned to the label.
	ValueType *string `pulumi:"valueType"`
}

// LabelDescriptorInput is an input type that accepts LabelDescriptorArgs and LabelDescriptorOutput values.
// You can construct a concrete instance of `LabelDescriptorInput` via:
//
//          LabelDescriptorArgs{...}
type LabelDescriptorInput interface {
	pulumi.Input

	ToLabelDescriptorOutput() LabelDescriptorOutput
	ToLabelDescriptorOutputWithContext(context.Context) LabelDescriptorOutput
}

// A description of a label.
type LabelDescriptorArgs struct {
	// A human-readable description for the label.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The label key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The type of data that can be assigned to the label.
	ValueType pulumi.StringPtrInput `pulumi:"valueType"`
}

func (LabelDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelDescriptor)(nil)).Elem()
}

func (i LabelDescriptorArgs) ToLabelDescriptorOutput() LabelDescriptorOutput {
	return i.ToLabelDescriptorOutputWithContext(context.Background())
}

func (i LabelDescriptorArgs) ToLabelDescriptorOutputWithContext(ctx context.Context) LabelDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelDescriptorOutput)
}

// LabelDescriptorArrayInput is an input type that accepts LabelDescriptorArray and LabelDescriptorArrayOutput values.
// You can construct a concrete instance of `LabelDescriptorArrayInput` via:
//
//          LabelDescriptorArray{ LabelDescriptorArgs{...} }
type LabelDescriptorArrayInput interface {
	pulumi.Input

	ToLabelDescriptorArrayOutput() LabelDescriptorArrayOutput
	ToLabelDescriptorArrayOutputWithContext(context.Context) LabelDescriptorArrayOutput
}

type LabelDescriptorArray []LabelDescriptorInput

func (LabelDescriptorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LabelDescriptor)(nil)).Elem()
}

func (i LabelDescriptorArray) ToLabelDescriptorArrayOutput() LabelDescriptorArrayOutput {
	return i.ToLabelDescriptorArrayOutputWithContext(context.Background())
}

func (i LabelDescriptorArray) ToLabelDescriptorArrayOutputWithContext(ctx context.Context) LabelDescriptorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelDescriptorArrayOutput)
}

// A description of a label.
type LabelDescriptorOutput struct{ *pulumi.OutputState }

func (LabelDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelDescriptor)(nil)).Elem()
}

func (o LabelDescriptorOutput) ToLabelDescriptorOutput() LabelDescriptorOutput {
	return o
}

func (o LabelDescriptorOutput) ToLabelDescriptorOutputWithContext(ctx context.Context) LabelDescriptorOutput {
	return o
}

// A human-readable description for the label.
func (o LabelDescriptorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelDescriptor) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The label key.
func (o LabelDescriptorOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelDescriptor) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The type of data that can be assigned to the label.
func (o LabelDescriptorOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelDescriptor) *string { return v.ValueType }).(pulumi.StringPtrOutput)
}

type LabelDescriptorArrayOutput struct{ *pulumi.OutputState }

func (LabelDescriptorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LabelDescriptor)(nil)).Elem()
}

func (o LabelDescriptorArrayOutput) ToLabelDescriptorArrayOutput() LabelDescriptorArrayOutput {
	return o
}

func (o LabelDescriptorArrayOutput) ToLabelDescriptorArrayOutputWithContext(ctx context.Context) LabelDescriptorArrayOutput {
	return o
}

func (o LabelDescriptorArrayOutput) Index(i pulumi.IntInput) LabelDescriptorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LabelDescriptor {
		return vs[0].([]LabelDescriptor)[vs[1].(int)]
	}).(LabelDescriptorOutput)
}

// A description of a log type. Example in YAML format: - name: library.googleapis.com/activity_history description: The history of borrowing and returning library items. display_name: Activity labels: - key: /customer_id description: Identifier of a library customer
type LogDescriptor struct {
	// A human-readable description of this log. This information appears in the documentation and can contain details.
	Description *string `pulumi:"description"`
	// The human-readable name for this log. This information appears on the user interface and should be concise.
	DisplayName *string `pulumi:"displayName"`
	// The set of labels that are available to describe a specific log entry. Runtime requests that contain labels not specified here are considered invalid.
	Labels []LabelDescriptor `pulumi:"labels"`
	// The name of the log. It must be less than 512 characters long and can include the following characters: upper- and lower-case alphanumeric characters [A-Za-z0-9], and punctuation characters including slash, underscore, hyphen, period [/_-.].
	Name *string `pulumi:"name"`
}

// LogDescriptorInput is an input type that accepts LogDescriptorArgs and LogDescriptorOutput values.
// You can construct a concrete instance of `LogDescriptorInput` via:
//
//          LogDescriptorArgs{...}
type LogDescriptorInput interface {
	pulumi.Input

	ToLogDescriptorOutput() LogDescriptorOutput
	ToLogDescriptorOutputWithContext(context.Context) LogDescriptorOutput
}

// A description of a log type. Example in YAML format: - name: library.googleapis.com/activity_history description: The history of borrowing and returning library items. display_name: Activity labels: - key: /customer_id description: Identifier of a library customer
type LogDescriptorArgs struct {
	// A human-readable description of this log. This information appears in the documentation and can contain details.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The human-readable name for this log. This information appears on the user interface and should be concise.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The set of labels that are available to describe a specific log entry. Runtime requests that contain labels not specified here are considered invalid.
	Labels LabelDescriptorArrayInput `pulumi:"labels"`
	// The name of the log. It must be less than 512 characters long and can include the following characters: upper- and lower-case alphanumeric characters [A-Za-z0-9], and punctuation characters including slash, underscore, hyphen, period [/_-.].
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LogDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogDescriptor)(nil)).Elem()
}

func (i LogDescriptorArgs) ToLogDescriptorOutput() LogDescriptorOutput {
	return i.ToLogDescriptorOutputWithContext(context.Background())
}

func (i LogDescriptorArgs) ToLogDescriptorOutputWithContext(ctx context.Context) LogDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDescriptorOutput)
}

// LogDescriptorArrayInput is an input type that accepts LogDescriptorArray and LogDescriptorArrayOutput values.
// You can construct a concrete instance of `LogDescriptorArrayInput` via:
//
//          LogDescriptorArray{ LogDescriptorArgs{...} }
type LogDescriptorArrayInput interface {
	pulumi.Input

	ToLogDescriptorArrayOutput() LogDescriptorArrayOutput
	ToLogDescriptorArrayOutputWithContext(context.Context) LogDescriptorArrayOutput
}

type LogDescriptorArray []LogDescriptorInput

func (LogDescriptorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogDescriptor)(nil)).Elem()
}

func (i LogDescriptorArray) ToLogDescriptorArrayOutput() LogDescriptorArrayOutput {
	return i.ToLogDescriptorArrayOutputWithContext(context.Background())
}

func (i LogDescriptorArray) ToLogDescriptorArrayOutputWithContext(ctx context.Context) LogDescriptorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogDescriptorArrayOutput)
}

// A description of a log type. Example in YAML format: - name: library.googleapis.com/activity_history description: The history of borrowing and returning library items. display_name: Activity labels: - key: /customer_id description: Identifier of a library customer
type LogDescriptorOutput struct{ *pulumi.OutputState }

func (LogDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogDescriptor)(nil)).Elem()
}

func (o LogDescriptorOutput) ToLogDescriptorOutput() LogDescriptorOutput {
	return o
}

func (o LogDescriptorOutput) ToLogDescriptorOutputWithContext(ctx context.Context) LogDescriptorOutput {
	return o
}

// A human-readable description of this log. This information appears in the documentation and can contain details.
func (o LogDescriptorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogDescriptor) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The human-readable name for this log. This information appears on the user interface and should be concise.
func (o LogDescriptorOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogDescriptor) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The set of labels that are available to describe a specific log entry. Runtime requests that contain labels not specified here are considered invalid.
func (o LogDescriptorOutput) Labels() LabelDescriptorArrayOutput {
	return o.ApplyT(func(v LogDescriptor) []LabelDescriptor { return v.Labels }).(LabelDescriptorArrayOutput)
}

// The name of the log. It must be less than 512 characters long and can include the following characters: upper- and lower-case alphanumeric characters [A-Za-z0-9], and punctuation characters including slash, underscore, hyphen, period [/_-.].
func (o LogDescriptorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogDescriptor) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type LogDescriptorArrayOutput struct{ *pulumi.OutputState }

func (LogDescriptorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogDescriptor)(nil)).Elem()
}

func (o LogDescriptorArrayOutput) ToLogDescriptorArrayOutput() LogDescriptorArrayOutput {
	return o
}

func (o LogDescriptorArrayOutput) ToLogDescriptorArrayOutputWithContext(ctx context.Context) LogDescriptorArrayOutput {
	return o
}

func (o LogDescriptorArrayOutput) Index(i pulumi.IntInput) LogDescriptorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogDescriptor {
		return vs[0].([]LogDescriptor)[vs[1].(int)]
	}).(LogDescriptorOutput)
}

// Logging configuration of the service. The following example shows how to configure logs to be sent to the producer and consumer projects. In the example, the `activity_history` log is sent to both the producer and consumer projects, whereas the `purchase_history` log is only sent to the producer project. monitored_resources: - type: library.googleapis.com/branch labels: - key: /city description: The city where the library branch is located in. - key: /name description: The name of the branch. logs: - name: activity_history labels: - key: /customer_id - name: purchase_history logging: producer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history - purchase_history consumer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history
type Logging struct {
	// Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
	ConsumerDestinations []LoggingDestination `pulumi:"consumerDestinations"`
	// Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
	ProducerDestinations []LoggingDestination `pulumi:"producerDestinations"`
}

// LoggingInput is an input type that accepts LoggingArgs and LoggingOutput values.
// You can construct a concrete instance of `LoggingInput` via:
//
//          LoggingArgs{...}
type LoggingInput interface {
	pulumi.Input

	ToLoggingOutput() LoggingOutput
	ToLoggingOutputWithContext(context.Context) LoggingOutput
}

// Logging configuration of the service. The following example shows how to configure logs to be sent to the producer and consumer projects. In the example, the `activity_history` log is sent to both the producer and consumer projects, whereas the `purchase_history` log is only sent to the producer project. monitored_resources: - type: library.googleapis.com/branch labels: - key: /city description: The city where the library branch is located in. - key: /name description: The name of the branch. logs: - name: activity_history labels: - key: /customer_id - name: purchase_history logging: producer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history - purchase_history consumer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history
type LoggingArgs struct {
	// Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
	ConsumerDestinations LoggingDestinationArrayInput `pulumi:"consumerDestinations"`
	// Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
	ProducerDestinations LoggingDestinationArrayInput `pulumi:"producerDestinations"`
}

func (LoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Logging)(nil)).Elem()
}

func (i LoggingArgs) ToLoggingOutput() LoggingOutput {
	return i.ToLoggingOutputWithContext(context.Background())
}

func (i LoggingArgs) ToLoggingOutputWithContext(ctx context.Context) LoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingOutput)
}

func (i LoggingArgs) ToLoggingPtrOutput() LoggingPtrOutput {
	return i.ToLoggingPtrOutputWithContext(context.Background())
}

func (i LoggingArgs) ToLoggingPtrOutputWithContext(ctx context.Context) LoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingOutput).ToLoggingPtrOutputWithContext(ctx)
}

// LoggingPtrInput is an input type that accepts LoggingArgs, LoggingPtr and LoggingPtrOutput values.
// You can construct a concrete instance of `LoggingPtrInput` via:
//
//          LoggingArgs{...}
//
//  or:
//
//          nil
type LoggingPtrInput interface {
	pulumi.Input

	ToLoggingPtrOutput() LoggingPtrOutput
	ToLoggingPtrOutputWithContext(context.Context) LoggingPtrOutput
}

type loggingPtrType LoggingArgs

func LoggingPtr(v *LoggingArgs) LoggingPtrInput {
	return (*loggingPtrType)(v)
}

func (*loggingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Logging)(nil)).Elem()
}

func (i *loggingPtrType) ToLoggingPtrOutput() LoggingPtrOutput {
	return i.ToLoggingPtrOutputWithContext(context.Background())
}

func (i *loggingPtrType) ToLoggingPtrOutputWithContext(ctx context.Context) LoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingPtrOutput)
}

// Logging configuration of the service. The following example shows how to configure logs to be sent to the producer and consumer projects. In the example, the `activity_history` log is sent to both the producer and consumer projects, whereas the `purchase_history` log is only sent to the producer project. monitored_resources: - type: library.googleapis.com/branch labels: - key: /city description: The city where the library branch is located in. - key: /name description: The name of the branch. logs: - name: activity_history labels: - key: /customer_id - name: purchase_history logging: producer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history - purchase_history consumer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history
type LoggingOutput struct{ *pulumi.OutputState }

func (LoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Logging)(nil)).Elem()
}

func (o LoggingOutput) ToLoggingOutput() LoggingOutput {
	return o
}

func (o LoggingOutput) ToLoggingOutputWithContext(ctx context.Context) LoggingOutput {
	return o
}

func (o LoggingOutput) ToLoggingPtrOutput() LoggingPtrOutput {
	return o.ToLoggingPtrOutputWithContext(context.Background())
}

func (o LoggingOutput) ToLoggingPtrOutputWithContext(ctx context.Context) LoggingPtrOutput {
	return o.ApplyT(func(v Logging) *Logging {
		return &v
	}).(LoggingPtrOutput)
}

// Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
func (o LoggingOutput) ConsumerDestinations() LoggingDestinationArrayOutput {
	return o.ApplyT(func(v Logging) []LoggingDestination { return v.ConsumerDestinations }).(LoggingDestinationArrayOutput)
}

// Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
func (o LoggingOutput) ProducerDestinations() LoggingDestinationArrayOutput {
	return o.ApplyT(func(v Logging) []LoggingDestination { return v.ProducerDestinations }).(LoggingDestinationArrayOutput)
}

type LoggingPtrOutput struct{ *pulumi.OutputState }

func (LoggingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Logging)(nil)).Elem()
}

func (o LoggingPtrOutput) ToLoggingPtrOutput() LoggingPtrOutput {
	return o
}

func (o LoggingPtrOutput) ToLoggingPtrOutputWithContext(ctx context.Context) LoggingPtrOutput {
	return o
}

func (o LoggingPtrOutput) Elem() LoggingOutput {
	return o.ApplyT(func(v *Logging) Logging { return *v }).(LoggingOutput)
}

// Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
func (o LoggingPtrOutput) ConsumerDestinations() LoggingDestinationArrayOutput {
	return o.ApplyT(func(v *Logging) []LoggingDestination {
		if v == nil {
			return nil
		}
		return v.ConsumerDestinations
	}).(LoggingDestinationArrayOutput)
}

// Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
func (o LoggingPtrOutput) ProducerDestinations() LoggingDestinationArrayOutput {
	return o.ApplyT(func(v *Logging) []LoggingDestination {
		if v == nil {
			return nil
		}
		return v.ProducerDestinations
	}).(LoggingDestinationArrayOutput)
}

// Configuration of a specific logging destination (the producer project or the consumer project).
type LoggingDestination struct {
	// Names of the logs to be sent to this destination. Each name must be defined in the Service.logs section. If the log name is not a domain scoped name, it will be automatically prefixed with the service name followed by "/".
	Logs []string `pulumi:"logs"`
	// The monitored resource type. The type must be defined in the Service.monitored_resources section.
	MonitoredResource *string `pulumi:"monitoredResource"`
}

// LoggingDestinationInput is an input type that accepts LoggingDestinationArgs and LoggingDestinationOutput values.
// You can construct a concrete instance of `LoggingDestinationInput` via:
//
//          LoggingDestinationArgs{...}
type LoggingDestinationInput interface {
	pulumi.Input

	ToLoggingDestinationOutput() LoggingDestinationOutput
	ToLoggingDestinationOutputWithContext(context.Context) LoggingDestinationOutput
}

// Configuration of a specific logging destination (the producer project or the consumer project).
type LoggingDestinationArgs struct {
	// Names of the logs to be sent to this destination. Each name must be defined in the Service.logs section. If the log name is not a domain scoped name, it will be automatically prefixed with the service name followed by "/".
	Logs pulumi.StringArrayInput `pulumi:"logs"`
	// The monitored resource type. The type must be defined in the Service.monitored_resources section.
	MonitoredResource pulumi.StringPtrInput `pulumi:"monitoredResource"`
}

func (LoggingDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingDestination)(nil)).Elem()
}

func (i LoggingDestinationArgs) ToLoggingDestinationOutput() LoggingDestinationOutput {
	return i.ToLoggingDestinationOutputWithContext(context.Background())
}

func (i LoggingDestinationArgs) ToLoggingDestinationOutputWithContext(ctx context.Context) LoggingDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingDestinationOutput)
}

// LoggingDestinationArrayInput is an input type that accepts LoggingDestinationArray and LoggingDestinationArrayOutput values.
// You can construct a concrete instance of `LoggingDestinationArrayInput` via:
//
//          LoggingDestinationArray{ LoggingDestinationArgs{...} }
type LoggingDestinationArrayInput interface {
	pulumi.Input

	ToLoggingDestinationArrayOutput() LoggingDestinationArrayOutput
	ToLoggingDestinationArrayOutputWithContext(context.Context) LoggingDestinationArrayOutput
}

type LoggingDestinationArray []LoggingDestinationInput

func (LoggingDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingDestination)(nil)).Elem()
}

func (i LoggingDestinationArray) ToLoggingDestinationArrayOutput() LoggingDestinationArrayOutput {
	return i.ToLoggingDestinationArrayOutputWithContext(context.Background())
}

func (i LoggingDestinationArray) ToLoggingDestinationArrayOutputWithContext(ctx context.Context) LoggingDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingDestinationArrayOutput)
}

// Configuration of a specific logging destination (the producer project or the consumer project).
type LoggingDestinationOutput struct{ *pulumi.OutputState }

func (LoggingDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingDestination)(nil)).Elem()
}

func (o LoggingDestinationOutput) ToLoggingDestinationOutput() LoggingDestinationOutput {
	return o
}

func (o LoggingDestinationOutput) ToLoggingDestinationOutputWithContext(ctx context.Context) LoggingDestinationOutput {
	return o
}

// Names of the logs to be sent to this destination. Each name must be defined in the Service.logs section. If the log name is not a domain scoped name, it will be automatically prefixed with the service name followed by "/".
func (o LoggingDestinationOutput) Logs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoggingDestination) []string { return v.Logs }).(pulumi.StringArrayOutput)
}

// The monitored resource type. The type must be defined in the Service.monitored_resources section.
func (o LoggingDestinationOutput) MonitoredResource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoggingDestination) *string { return v.MonitoredResource }).(pulumi.StringPtrOutput)
}

type LoggingDestinationArrayOutput struct{ *pulumi.OutputState }

func (LoggingDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingDestination)(nil)).Elem()
}

func (o LoggingDestinationArrayOutput) ToLoggingDestinationArrayOutput() LoggingDestinationArrayOutput {
	return o
}

func (o LoggingDestinationArrayOutput) ToLoggingDestinationArrayOutputWithContext(ctx context.Context) LoggingDestinationArrayOutput {
	return o
}

func (o LoggingDestinationArrayOutput) Index(i pulumi.IntInput) LoggingDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingDestination {
		return vs[0].([]LoggingDestination)[vs[1].(int)]
	}).(LoggingDestinationOutput)
}

// Method represents a method of an API interface.
type Method struct {
	// The simple name of this method.
	Name *string `pulumi:"name"`
	// Any metadata attached to the method.
	Options []Option `pulumi:"options"`
	// If true, the request is streamed.
	RequestStreaming *bool `pulumi:"requestStreaming"`
	// A URL of the input message type.
	RequestTypeUrl *string `pulumi:"requestTypeUrl"`
	// If true, the response is streamed.
	ResponseStreaming *bool `pulumi:"responseStreaming"`
	// The URL of the output message type.
	ResponseTypeUrl *string `pulumi:"responseTypeUrl"`
	// The source syntax of this method.
	Syntax *string `pulumi:"syntax"`
}

// MethodInput is an input type that accepts MethodArgs and MethodOutput values.
// You can construct a concrete instance of `MethodInput` via:
//
//          MethodArgs{...}
type MethodInput interface {
	pulumi.Input

	ToMethodOutput() MethodOutput
	ToMethodOutputWithContext(context.Context) MethodOutput
}

// Method represents a method of an API interface.
type MethodArgs struct {
	// The simple name of this method.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Any metadata attached to the method.
	Options OptionArrayInput `pulumi:"options"`
	// If true, the request is streamed.
	RequestStreaming pulumi.BoolPtrInput `pulumi:"requestStreaming"`
	// A URL of the input message type.
	RequestTypeUrl pulumi.StringPtrInput `pulumi:"requestTypeUrl"`
	// If true, the response is streamed.
	ResponseStreaming pulumi.BoolPtrInput `pulumi:"responseStreaming"`
	// The URL of the output message type.
	ResponseTypeUrl pulumi.StringPtrInput `pulumi:"responseTypeUrl"`
	// The source syntax of this method.
	Syntax pulumi.StringPtrInput `pulumi:"syntax"`
}

func (MethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Method)(nil)).Elem()
}

func (i MethodArgs) ToMethodOutput() MethodOutput {
	return i.ToMethodOutputWithContext(context.Background())
}

func (i MethodArgs) ToMethodOutputWithContext(ctx context.Context) MethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MethodOutput)
}

// MethodArrayInput is an input type that accepts MethodArray and MethodArrayOutput values.
// You can construct a concrete instance of `MethodArrayInput` via:
//
//          MethodArray{ MethodArgs{...} }
type MethodArrayInput interface {
	pulumi.Input

	ToMethodArrayOutput() MethodArrayOutput
	ToMethodArrayOutputWithContext(context.Context) MethodArrayOutput
}

type MethodArray []MethodInput

func (MethodArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Method)(nil)).Elem()
}

func (i MethodArray) ToMethodArrayOutput() MethodArrayOutput {
	return i.ToMethodArrayOutputWithContext(context.Background())
}

func (i MethodArray) ToMethodArrayOutputWithContext(ctx context.Context) MethodArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MethodArrayOutput)
}

// Method represents a method of an API interface.
type MethodOutput struct{ *pulumi.OutputState }

func (MethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Method)(nil)).Elem()
}

func (o MethodOutput) ToMethodOutput() MethodOutput {
	return o
}

func (o MethodOutput) ToMethodOutputWithContext(ctx context.Context) MethodOutput {
	return o
}

// The simple name of this method.
func (o MethodOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Method) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Any metadata attached to the method.
func (o MethodOutput) Options() OptionArrayOutput {
	return o.ApplyT(func(v Method) []Option { return v.Options }).(OptionArrayOutput)
}

// If true, the request is streamed.
func (o MethodOutput) RequestStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Method) *bool { return v.RequestStreaming }).(pulumi.BoolPtrOutput)
}

// A URL of the input message type.
func (o MethodOutput) RequestTypeUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Method) *string { return v.RequestTypeUrl }).(pulumi.StringPtrOutput)
}

// If true, the response is streamed.
func (o MethodOutput) ResponseStreaming() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Method) *bool { return v.ResponseStreaming }).(pulumi.BoolPtrOutput)
}

// The URL of the output message type.
func (o MethodOutput) ResponseTypeUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Method) *string { return v.ResponseTypeUrl }).(pulumi.StringPtrOutput)
}

// The source syntax of this method.
func (o MethodOutput) Syntax() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Method) *string { return v.Syntax }).(pulumi.StringPtrOutput)
}

type MethodArrayOutput struct{ *pulumi.OutputState }

func (MethodArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Method)(nil)).Elem()
}

func (o MethodArrayOutput) ToMethodArrayOutput() MethodArrayOutput {
	return o
}

func (o MethodArrayOutput) ToMethodArrayOutputWithContext(ctx context.Context) MethodArrayOutput {
	return o
}

func (o MethodArrayOutput) Index(i pulumi.IntInput) MethodOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Method {
		return vs[0].([]Method)[vs[1].(int)]
	}).(MethodOutput)
}

// Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable.
type MetricDescriptor struct {
	// A detailed description of the metric, which can be used in documentation.
	Description *string `pulumi:"description"`
	// A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
	DisplayName *string `pulumi:"displayName"`
	// The set of labels that can be used to describe a specific instance of this metric type. For example, the `appengine.googleapis.com/http/server/response_latencies` metric type has a label for the HTTP response code, `response_code`, so you can look at latencies for successful responses or just for responses that failed.
	Labels []LabelDescriptor `pulumi:"labels"`
	// Optional. The launch stage of the metric definition.
	LaunchStage *string `pulumi:"launchStage"`
	// Optional. Metadata which can be used to guide usage of the metric.
	Metadata *MetricDescriptorMetadata `pulumi:"metadata"`
	// Whether the metric records instantaneous values, changes to a value, etc. Some combinations of `metric_kind` and `value_type` might not be supported.
	MetricKind *string `pulumi:"metricKind"`
	// Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.
	MonitoredResourceTypes []string `pulumi:"monitoredResourceTypes"`
	// The resource name of the metric descriptor.
	Name *string `pulumi:"name"`
	// The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name `custom.googleapis.com` or `external.googleapis.com`. Metric types should use a natural hierarchical grouping. For example: "custom.googleapis.com/invoice/paid/amount" "external.googleapis.com/prometheus/up" "appengine.googleapis.com/http/server/response_latencies"
	Type *string `pulumi:"type"`
	// The units in which the metric value is reported. It is only applicable if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The `unit` defines the representation of the stored metric values. Different systems might scale the values to be more easily displayed (so a value of `0.02kBy` _might_ be displayed as `20By`, and a value of `3523kBy` _might_ be displayed as `3.5MBy`). However, if the `unit` is `kBy`, then the value of the metric is always in thousands of bytes, no matter how it might be displayed. If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an `INT64 CUMULATIVE` metric whose `unit` is `s{CPU}` (or equivalently `1s{CPU}` or just `s`). If the job uses 12,005 CPU-seconds, then the value is written as `12005`. Alternatively, if you want a custom metric to record data in a more granular way, you can create a `DOUBLE CUMULATIVE` metric whose `unit` is `ks{CPU}`, and then write the value `12.005` (which is `12005/1000`), or use `Kis{CPU}` and write `11.723` (which is `12005/1024`). The supported units are a subset of [The Unified Code for Units of Measure](https://unitsofmeasure.org/ucum.html) standard: **Basic units (UNIT)** * `bit` bit * `By` byte * `s` second * `min` minute * `h` hour * `d` day * `1` dimensionless **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12) * `P` peta (10^15) * `E` exa (10^18) * `Z` zetta (10^21) * `Y` yotta (10^24) * `m` milli (10^-3) * `u` micro (10^-6) * `n` nano (10^-9) * `p` pico (10^-12) * `f` femto (10^-15) * `a` atto (10^-18) * `z` zepto (10^-21) * `y` yocto (10^-24) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40) * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/` division or ratio (as an infix operator). For examples, `kBy/{email}` or `MiBy/10ms` (although you should almost never have `/s` in a metric `unit`; rates should always be computed at query time from the underlying cumulative or delta value). * `.` multiplication or composition (as an infix operator). For examples, `GBy.d` or `k{watt}.h`. The grammar for a unit is as follows: Expression = Component { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}" ; Notes: * `Annotation` is just a comment if it follows a `UNIT`. If the annotation is used alone, then the unit is equivalent to `1`. For examples, `{request}/s == 1/s`, `By{transmitted}/s == By/s`. * `NAME` is a sequence of non-blank printable ASCII characters not containing `{` or `}`. * `1` represents a unitary [dimensionless unit](https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in `1/s`. It is typically used when none of the basic units are appropriate. For example, "new users per day" can be represented as `1/d` or `{new-users}/d` (and a metric value `5` would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as `1000/d` or `k1/d` or `k{page_views}/d` (and a metric value of `5.3` would mean "5300 page views per day"). * `%` represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value `3` means "3 percent"). * `10^2.%` indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value `0.03` means "3 percent").
	Unit *string `pulumi:"unit"`
	// Whether the measurement is an integer, a floating-point number, etc. Some combinations of `metric_kind` and `value_type` might not be supported.
	ValueType *string `pulumi:"valueType"`
}

// MetricDescriptorInput is an input type that accepts MetricDescriptorArgs and MetricDescriptorOutput values.
// You can construct a concrete instance of `MetricDescriptorInput` via:
//
//          MetricDescriptorArgs{...}
type MetricDescriptorInput interface {
	pulumi.Input

	ToMetricDescriptorOutput() MetricDescriptorOutput
	ToMetricDescriptorOutputWithContext(context.Context) MetricDescriptorOutput
}

// Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable.
type MetricDescriptorArgs struct {
	// A detailed description of the metric, which can be used in documentation.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The set of labels that can be used to describe a specific instance of this metric type. For example, the `appengine.googleapis.com/http/server/response_latencies` metric type has a label for the HTTP response code, `response_code`, so you can look at latencies for successful responses or just for responses that failed.
	Labels LabelDescriptorArrayInput `pulumi:"labels"`
	// Optional. The launch stage of the metric definition.
	LaunchStage pulumi.StringPtrInput `pulumi:"launchStage"`
	// Optional. Metadata which can be used to guide usage of the metric.
	Metadata MetricDescriptorMetadataPtrInput `pulumi:"metadata"`
	// Whether the metric records instantaneous values, changes to a value, etc. Some combinations of `metric_kind` and `value_type` might not be supported.
	MetricKind pulumi.StringPtrInput `pulumi:"metricKind"`
	// Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.
	MonitoredResourceTypes pulumi.StringArrayInput `pulumi:"monitoredResourceTypes"`
	// The resource name of the metric descriptor.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name `custom.googleapis.com` or `external.googleapis.com`. Metric types should use a natural hierarchical grouping. For example: "custom.googleapis.com/invoice/paid/amount" "external.googleapis.com/prometheus/up" "appengine.googleapis.com/http/server/response_latencies"
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The units in which the metric value is reported. It is only applicable if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The `unit` defines the representation of the stored metric values. Different systems might scale the values to be more easily displayed (so a value of `0.02kBy` _might_ be displayed as `20By`, and a value of `3523kBy` _might_ be displayed as `3.5MBy`). However, if the `unit` is `kBy`, then the value of the metric is always in thousands of bytes, no matter how it might be displayed. If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an `INT64 CUMULATIVE` metric whose `unit` is `s{CPU}` (or equivalently `1s{CPU}` or just `s`). If the job uses 12,005 CPU-seconds, then the value is written as `12005`. Alternatively, if you want a custom metric to record data in a more granular way, you can create a `DOUBLE CUMULATIVE` metric whose `unit` is `ks{CPU}`, and then write the value `12.005` (which is `12005/1000`), or use `Kis{CPU}` and write `11.723` (which is `12005/1024`). The supported units are a subset of [The Unified Code for Units of Measure](https://unitsofmeasure.org/ucum.html) standard: **Basic units (UNIT)** * `bit` bit * `By` byte * `s` second * `min` minute * `h` hour * `d` day * `1` dimensionless **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12) * `P` peta (10^15) * `E` exa (10^18) * `Z` zetta (10^21) * `Y` yotta (10^24) * `m` milli (10^-3) * `u` micro (10^-6) * `n` nano (10^-9) * `p` pico (10^-12) * `f` femto (10^-15) * `a` atto (10^-18) * `z` zepto (10^-21) * `y` yocto (10^-24) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40) * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/` division or ratio (as an infix operator). For examples, `kBy/{email}` or `MiBy/10ms` (although you should almost never have `/s` in a metric `unit`; rates should always be computed at query time from the underlying cumulative or delta value). * `.` multiplication or composition (as an infix operator). For examples, `GBy.d` or `k{watt}.h`. The grammar for a unit is as follows: Expression = Component { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}" ; Notes: * `Annotation` is just a comment if it follows a `UNIT`. If the annotation is used alone, then the unit is equivalent to `1`. For examples, `{request}/s == 1/s`, `By{transmitted}/s == By/s`. * `NAME` is a sequence of non-blank printable ASCII characters not containing `{` or `}`. * `1` represents a unitary [dimensionless unit](https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in `1/s`. It is typically used when none of the basic units are appropriate. For example, "new users per day" can be represented as `1/d` or `{new-users}/d` (and a metric value `5` would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as `1000/d` or `k1/d` or `k{page_views}/d` (and a metric value of `5.3` would mean "5300 page views per day"). * `%` represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value `3` means "3 percent"). * `10^2.%` indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value `0.03` means "3 percent").
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// Whether the measurement is an integer, a floating-point number, etc. Some combinations of `metric_kind` and `value_type` might not be supported.
	ValueType pulumi.StringPtrInput `pulumi:"valueType"`
}

func (MetricDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptor)(nil)).Elem()
}

func (i MetricDescriptorArgs) ToMetricDescriptorOutput() MetricDescriptorOutput {
	return i.ToMetricDescriptorOutputWithContext(context.Background())
}

func (i MetricDescriptorArgs) ToMetricDescriptorOutputWithContext(ctx context.Context) MetricDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorOutput)
}

// MetricDescriptorArrayInput is an input type that accepts MetricDescriptorArray and MetricDescriptorArrayOutput values.
// You can construct a concrete instance of `MetricDescriptorArrayInput` via:
//
//          MetricDescriptorArray{ MetricDescriptorArgs{...} }
type MetricDescriptorArrayInput interface {
	pulumi.Input

	ToMetricDescriptorArrayOutput() MetricDescriptorArrayOutput
	ToMetricDescriptorArrayOutputWithContext(context.Context) MetricDescriptorArrayOutput
}

type MetricDescriptorArray []MetricDescriptorInput

func (MetricDescriptorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricDescriptor)(nil)).Elem()
}

func (i MetricDescriptorArray) ToMetricDescriptorArrayOutput() MetricDescriptorArrayOutput {
	return i.ToMetricDescriptorArrayOutputWithContext(context.Background())
}

func (i MetricDescriptorArray) ToMetricDescriptorArrayOutputWithContext(ctx context.Context) MetricDescriptorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorArrayOutput)
}

// Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable.
type MetricDescriptorOutput struct{ *pulumi.OutputState }

func (MetricDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptor)(nil)).Elem()
}

func (o MetricDescriptorOutput) ToMetricDescriptorOutput() MetricDescriptorOutput {
	return o
}

func (o MetricDescriptorOutput) ToMetricDescriptorOutputWithContext(ctx context.Context) MetricDescriptorOutput {
	return o
}

// A detailed description of the metric, which can be used in documentation.
func (o MetricDescriptorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
func (o MetricDescriptorOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The set of labels that can be used to describe a specific instance of this metric type. For example, the `appengine.googleapis.com/http/server/response_latencies` metric type has a label for the HTTP response code, `response_code`, so you can look at latencies for successful responses or just for responses that failed.
func (o MetricDescriptorOutput) Labels() LabelDescriptorArrayOutput {
	return o.ApplyT(func(v MetricDescriptor) []LabelDescriptor { return v.Labels }).(LabelDescriptorArrayOutput)
}

// Optional. The launch stage of the metric definition.
func (o MetricDescriptorOutput) LaunchStage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *string { return v.LaunchStage }).(pulumi.StringPtrOutput)
}

// Optional. Metadata which can be used to guide usage of the metric.
func (o MetricDescriptorOutput) Metadata() MetricDescriptorMetadataPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *MetricDescriptorMetadata { return v.Metadata }).(MetricDescriptorMetadataPtrOutput)
}

// Whether the metric records instantaneous values, changes to a value, etc. Some combinations of `metric_kind` and `value_type` might not be supported.
func (o MetricDescriptorOutput) MetricKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *string { return v.MetricKind }).(pulumi.StringPtrOutput)
}

// Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.
func (o MetricDescriptorOutput) MonitoredResourceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricDescriptor) []string { return v.MonitoredResourceTypes }).(pulumi.StringArrayOutput)
}

// The resource name of the metric descriptor.
func (o MetricDescriptorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name `custom.googleapis.com` or `external.googleapis.com`. Metric types should use a natural hierarchical grouping. For example: "custom.googleapis.com/invoice/paid/amount" "external.googleapis.com/prometheus/up" "appengine.googleapis.com/http/server/response_latencies"
func (o MetricDescriptorOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The units in which the metric value is reported. It is only applicable if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The `unit` defines the representation of the stored metric values. Different systems might scale the values to be more easily displayed (so a value of `0.02kBy` _might_ be displayed as `20By`, and a value of `3523kBy` _might_ be displayed as `3.5MBy`). However, if the `unit` is `kBy`, then the value of the metric is always in thousands of bytes, no matter how it might be displayed. If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an `INT64 CUMULATIVE` metric whose `unit` is `s{CPU}` (or equivalently `1s{CPU}` or just `s`). If the job uses 12,005 CPU-seconds, then the value is written as `12005`. Alternatively, if you want a custom metric to record data in a more granular way, you can create a `DOUBLE CUMULATIVE` metric whose `unit` is `ks{CPU}`, and then write the value `12.005` (which is `12005/1000`), or use `Kis{CPU}` and write `11.723` (which is `12005/1024`). The supported units are a subset of [The Unified Code for Units of Measure](https://unitsofmeasure.org/ucum.html) standard: **Basic units (UNIT)** * `bit` bit * `By` byte * `s` second * `min` minute * `h` hour * `d` day * `1` dimensionless **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12) * `P` peta (10^15) * `E` exa (10^18) * `Z` zetta (10^21) * `Y` yotta (10^24) * `m` milli (10^-3) * `u` micro (10^-6) * `n` nano (10^-9) * `p` pico (10^-12) * `f` femto (10^-15) * `a` atto (10^-18) * `z` zepto (10^-21) * `y` yocto (10^-24) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40) * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/` division or ratio (as an infix operator). For examples, `kBy/{email}` or `MiBy/10ms` (although you should almost never have `/s` in a metric `unit`; rates should always be computed at query time from the underlying cumulative or delta value). * `.` multiplication or composition (as an infix operator). For examples, `GBy.d` or `k{watt}.h`. The grammar for a unit is as follows: Expression = Component { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}" ; Notes: * `Annotation` is just a comment if it follows a `UNIT`. If the annotation is used alone, then the unit is equivalent to `1`. For examples, `{request}/s == 1/s`, `By{transmitted}/s == By/s`. * `NAME` is a sequence of non-blank printable ASCII characters not containing `{` or `}`. * `1` represents a unitary [dimensionless unit](https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in `1/s`. It is typically used when none of the basic units are appropriate. For example, "new users per day" can be represented as `1/d` or `{new-users}/d` (and a metric value `5` would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as `1000/d` or `k1/d` or `k{page_views}/d` (and a metric value of `5.3` would mean "5300 page views per day"). * `%` represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value `3` means "3 percent"). * `10^2.%` indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value `0.03` means "3 percent").
func (o MetricDescriptorOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// Whether the measurement is an integer, a floating-point number, etc. Some combinations of `metric_kind` and `value_type` might not be supported.
func (o MetricDescriptorOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptor) *string { return v.ValueType }).(pulumi.StringPtrOutput)
}

type MetricDescriptorArrayOutput struct{ *pulumi.OutputState }

func (MetricDescriptorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricDescriptor)(nil)).Elem()
}

func (o MetricDescriptorArrayOutput) ToMetricDescriptorArrayOutput() MetricDescriptorArrayOutput {
	return o
}

func (o MetricDescriptorArrayOutput) ToMetricDescriptorArrayOutputWithContext(ctx context.Context) MetricDescriptorArrayOutput {
	return o
}

func (o MetricDescriptorArrayOutput) Index(i pulumi.IntInput) MetricDescriptorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricDescriptor {
		return vs[0].([]MetricDescriptor)[vs[1].(int)]
	}).(MetricDescriptorOutput)
}

// Additional annotations that can be used to guide the usage of a metric.
type MetricDescriptorMetadata struct {
	// The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
	IngestDelay *string `pulumi:"ingestDelay"`
	// Deprecated. Must use the MetricDescriptor.launch_stage instead.
	LaunchStage *string `pulumi:"launchStage"`
	// The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
	SamplePeriod *string `pulumi:"samplePeriod"`
}

// MetricDescriptorMetadataInput is an input type that accepts MetricDescriptorMetadataArgs and MetricDescriptorMetadataOutput values.
// You can construct a concrete instance of `MetricDescriptorMetadataInput` via:
//
//          MetricDescriptorMetadataArgs{...}
type MetricDescriptorMetadataInput interface {
	pulumi.Input

	ToMetricDescriptorMetadataOutput() MetricDescriptorMetadataOutput
	ToMetricDescriptorMetadataOutputWithContext(context.Context) MetricDescriptorMetadataOutput
}

// Additional annotations that can be used to guide the usage of a metric.
type MetricDescriptorMetadataArgs struct {
	// The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
	IngestDelay pulumi.StringPtrInput `pulumi:"ingestDelay"`
	// Deprecated. Must use the MetricDescriptor.launch_stage instead.
	LaunchStage pulumi.StringPtrInput `pulumi:"launchStage"`
	// The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
	SamplePeriod pulumi.StringPtrInput `pulumi:"samplePeriod"`
}

func (MetricDescriptorMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptorMetadata)(nil)).Elem()
}

func (i MetricDescriptorMetadataArgs) ToMetricDescriptorMetadataOutput() MetricDescriptorMetadataOutput {
	return i.ToMetricDescriptorMetadataOutputWithContext(context.Background())
}

func (i MetricDescriptorMetadataArgs) ToMetricDescriptorMetadataOutputWithContext(ctx context.Context) MetricDescriptorMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorMetadataOutput)
}

func (i MetricDescriptorMetadataArgs) ToMetricDescriptorMetadataPtrOutput() MetricDescriptorMetadataPtrOutput {
	return i.ToMetricDescriptorMetadataPtrOutputWithContext(context.Background())
}

func (i MetricDescriptorMetadataArgs) ToMetricDescriptorMetadataPtrOutputWithContext(ctx context.Context) MetricDescriptorMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorMetadataOutput).ToMetricDescriptorMetadataPtrOutputWithContext(ctx)
}

// MetricDescriptorMetadataPtrInput is an input type that accepts MetricDescriptorMetadataArgs, MetricDescriptorMetadataPtr and MetricDescriptorMetadataPtrOutput values.
// You can construct a concrete instance of `MetricDescriptorMetadataPtrInput` via:
//
//          MetricDescriptorMetadataArgs{...}
//
//  or:
//
//          nil
type MetricDescriptorMetadataPtrInput interface {
	pulumi.Input

	ToMetricDescriptorMetadataPtrOutput() MetricDescriptorMetadataPtrOutput
	ToMetricDescriptorMetadataPtrOutputWithContext(context.Context) MetricDescriptorMetadataPtrOutput
}

type metricDescriptorMetadataPtrType MetricDescriptorMetadataArgs

func MetricDescriptorMetadataPtr(v *MetricDescriptorMetadataArgs) MetricDescriptorMetadataPtrInput {
	return (*metricDescriptorMetadataPtrType)(v)
}

func (*metricDescriptorMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricDescriptorMetadata)(nil)).Elem()
}

func (i *metricDescriptorMetadataPtrType) ToMetricDescriptorMetadataPtrOutput() MetricDescriptorMetadataPtrOutput {
	return i.ToMetricDescriptorMetadataPtrOutputWithContext(context.Background())
}

func (i *metricDescriptorMetadataPtrType) ToMetricDescriptorMetadataPtrOutputWithContext(ctx context.Context) MetricDescriptorMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDescriptorMetadataPtrOutput)
}

// Additional annotations that can be used to guide the usage of a metric.
type MetricDescriptorMetadataOutput struct{ *pulumi.OutputState }

func (MetricDescriptorMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDescriptorMetadata)(nil)).Elem()
}

func (o MetricDescriptorMetadataOutput) ToMetricDescriptorMetadataOutput() MetricDescriptorMetadataOutput {
	return o
}

func (o MetricDescriptorMetadataOutput) ToMetricDescriptorMetadataOutputWithContext(ctx context.Context) MetricDescriptorMetadataOutput {
	return o
}

func (o MetricDescriptorMetadataOutput) ToMetricDescriptorMetadataPtrOutput() MetricDescriptorMetadataPtrOutput {
	return o.ToMetricDescriptorMetadataPtrOutputWithContext(context.Background())
}

func (o MetricDescriptorMetadataOutput) ToMetricDescriptorMetadataPtrOutputWithContext(ctx context.Context) MetricDescriptorMetadataPtrOutput {
	return o.ApplyT(func(v MetricDescriptorMetadata) *MetricDescriptorMetadata {
		return &v
	}).(MetricDescriptorMetadataPtrOutput)
}

// The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
func (o MetricDescriptorMetadataOutput) IngestDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptorMetadata) *string { return v.IngestDelay }).(pulumi.StringPtrOutput)
}

// Deprecated. Must use the MetricDescriptor.launch_stage instead.
func (o MetricDescriptorMetadataOutput) LaunchStage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptorMetadata) *string { return v.LaunchStage }).(pulumi.StringPtrOutput)
}

// The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
func (o MetricDescriptorMetadataOutput) SamplePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricDescriptorMetadata) *string { return v.SamplePeriod }).(pulumi.StringPtrOutput)
}

type MetricDescriptorMetadataPtrOutput struct{ *pulumi.OutputState }

func (MetricDescriptorMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricDescriptorMetadata)(nil)).Elem()
}

func (o MetricDescriptorMetadataPtrOutput) ToMetricDescriptorMetadataPtrOutput() MetricDescriptorMetadataPtrOutput {
	return o
}

func (o MetricDescriptorMetadataPtrOutput) ToMetricDescriptorMetadataPtrOutputWithContext(ctx context.Context) MetricDescriptorMetadataPtrOutput {
	return o
}

func (o MetricDescriptorMetadataPtrOutput) Elem() MetricDescriptorMetadataOutput {
	return o.ApplyT(func(v *MetricDescriptorMetadata) MetricDescriptorMetadata { return *v }).(MetricDescriptorMetadataOutput)
}

// The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
func (o MetricDescriptorMetadataPtrOutput) IngestDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptorMetadata) *string {
		if v == nil {
			return nil
		}
		return v.IngestDelay
	}).(pulumi.StringPtrOutput)
}

// Deprecated. Must use the MetricDescriptor.launch_stage instead.
func (o MetricDescriptorMetadataPtrOutput) LaunchStage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptorMetadata) *string {
		if v == nil {
			return nil
		}
		return v.LaunchStage
	}).(pulumi.StringPtrOutput)
}

// The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
func (o MetricDescriptorMetadataPtrOutput) SamplePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricDescriptorMetadata) *string {
		if v == nil {
			return nil
		}
		return v.SamplePeriod
	}).(pulumi.StringPtrOutput)
}

// Bind API methods to metrics. Binding a method to a metric causes that metric's configured quota behaviors to apply to the method call.
type MetricRule struct {
	// Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.
	MetricCosts map[string]string `pulumi:"metricCosts"`
	// Selects the methods to which this rule applies. Refer to selector for syntax details.
	Selector *string `pulumi:"selector"`
}

// MetricRuleInput is an input type that accepts MetricRuleArgs and MetricRuleOutput values.
// You can construct a concrete instance of `MetricRuleInput` via:
//
//          MetricRuleArgs{...}
type MetricRuleInput interface {
	pulumi.Input

	ToMetricRuleOutput() MetricRuleOutput
	ToMetricRuleOutputWithContext(context.Context) MetricRuleOutput
}

// Bind API methods to metrics. Binding a method to a metric causes that metric's configured quota behaviors to apply to the method call.
type MetricRuleArgs struct {
	// Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.
	MetricCosts pulumi.StringMapInput `pulumi:"metricCosts"`
	// Selects the methods to which this rule applies. Refer to selector for syntax details.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
}

func (MetricRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRule)(nil)).Elem()
}

func (i MetricRuleArgs) ToMetricRuleOutput() MetricRuleOutput {
	return i.ToMetricRuleOutputWithContext(context.Background())
}

func (i MetricRuleArgs) ToMetricRuleOutputWithContext(ctx context.Context) MetricRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRuleOutput)
}

// MetricRuleArrayInput is an input type that accepts MetricRuleArray and MetricRuleArrayOutput values.
// You can construct a concrete instance of `MetricRuleArrayInput` via:
//
//          MetricRuleArray{ MetricRuleArgs{...} }
type MetricRuleArrayInput interface {
	pulumi.Input

	ToMetricRuleArrayOutput() MetricRuleArrayOutput
	ToMetricRuleArrayOutputWithContext(context.Context) MetricRuleArrayOutput
}

type MetricRuleArray []MetricRuleInput

func (MetricRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRule)(nil)).Elem()
}

func (i MetricRuleArray) ToMetricRuleArrayOutput() MetricRuleArrayOutput {
	return i.ToMetricRuleArrayOutputWithContext(context.Background())
}

func (i MetricRuleArray) ToMetricRuleArrayOutputWithContext(ctx context.Context) MetricRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRuleArrayOutput)
}

// Bind API methods to metrics. Binding a method to a metric causes that metric's configured quota behaviors to apply to the method call.
type MetricRuleOutput struct{ *pulumi.OutputState }

func (MetricRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRule)(nil)).Elem()
}

func (o MetricRuleOutput) ToMetricRuleOutput() MetricRuleOutput {
	return o
}

func (o MetricRuleOutput) ToMetricRuleOutputWithContext(ctx context.Context) MetricRuleOutput {
	return o
}

// Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.
func (o MetricRuleOutput) MetricCosts() pulumi.StringMapOutput {
	return o.ApplyT(func(v MetricRule) map[string]string { return v.MetricCosts }).(pulumi.StringMapOutput)
}

// Selects the methods to which this rule applies. Refer to selector for syntax details.
func (o MetricRuleOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricRule) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

type MetricRuleArrayOutput struct{ *pulumi.OutputState }

func (MetricRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricRule)(nil)).Elem()
}

func (o MetricRuleArrayOutput) ToMetricRuleArrayOutput() MetricRuleArrayOutput {
	return o
}

func (o MetricRuleArrayOutput) ToMetricRuleArrayOutputWithContext(ctx context.Context) MetricRuleArrayOutput {
	return o
}

func (o MetricRuleArrayOutput) Index(i pulumi.IntInput) MetricRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricRule {
		return vs[0].([]MetricRule)[vs[1].(int)]
	}).(MetricRuleOutput)
}

// Declares an API Interface to be included in this interface. The including interface must redeclare all the methods from the included interface, but documentation and options are inherited as follows: - If after comment and whitespace stripping, the documentation string of the redeclared method is empty, it will be inherited from the original method. - Each annotation belonging to the service config (http, visibility) which is not set in the redeclared method will be inherited. - If an http annotation is inherited, the path pattern will be modified as follows. Any version prefix will be replaced by the version of the including interface plus the root path if specified. Example of a simple mixin: package google.acl.v1; service AccessControl { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = "/v1/{resource=**}:getAcl"; } } package google.storage.v2; service Storage { // rpc GetAcl(GetAclRequest) returns (Acl); // Get a data record. rpc GetData(GetDataRequest) returns (Data) { option (google.api.http).get = "/v2/{resource=**}"; } } Example of a mixin configuration: apis: - name: google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl The mixin construct implies that all methods in `AccessControl` are also declared with same name and request/response types in `Storage`. A documentation generator or annotation processor will see the effective `Storage.GetAcl` method after inheriting documentation and annotations as follows: service Storage { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = "/v2/{resource=**}:getAcl"; } ... } Note how the version in the path pattern changed from `v1` to `v2`. If the `root` field in the mixin is specified, it should be a relative path under which inherited HTTP paths are placed. Example: apis: - name: google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl root: acls This implies the following inherited HTTP annotation: service Storage { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = "/v2/acls/{resource=**}:getAcl"; } ... }
type Mixin struct {
	// The fully qualified name of the interface which is included.
	Name *string `pulumi:"name"`
	// If non-empty specifies a path under which inherited HTTP paths are rooted.
	Root *string `pulumi:"root"`
}

// MixinInput is an input type that accepts MixinArgs and MixinOutput values.
// You can construct a concrete instance of `MixinInput` via:
//
//          MixinArgs{...}
type MixinInput interface {
	pulumi.Input

	ToMixinOutput() MixinOutput
	ToMixinOutputWithContext(context.Context) MixinOutput
}

// Declares an API Interface to be included in this interface. The including interface must redeclare all the methods from the included interface, but documentation and options are inherited as follows: - If after comment and whitespace stripping, the documentation string of the redeclared method is empty, it will be inherited from the original method. - Each annotation belonging to the service config (http, visibility) which is not set in the redeclared method will be inherited. - If an http annotation is inherited, the path pattern will be modified as follows. Any version prefix will be replaced by the version of the including interface plus the root path if specified. Example of a simple mixin: package google.acl.v1; service AccessControl { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = "/v1/{resource=**}:getAcl"; } } package google.storage.v2; service Storage { // rpc GetAcl(GetAclRequest) returns (Acl); // Get a data record. rpc GetData(GetDataRequest) returns (Data) { option (google.api.http).get = "/v2/{resource=**}"; } } Example of a mixin configuration: apis: - name: google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl The mixin construct implies that all methods in `AccessControl` are also declared with same name and request/response types in `Storage`. A documentation generator or annotation processor will see the effective `Storage.GetAcl` method after inheriting documentation and annotations as follows: service Storage { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = "/v2/{resource=**}:getAcl"; } ... } Note how the version in the path pattern changed from `v1` to `v2`. If the `root` field in the mixin is specified, it should be a relative path under which inherited HTTP paths are placed. Example: apis: - name: google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl root: acls This implies the following inherited HTTP annotation: service Storage { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = "/v2/acls/{resource=**}:getAcl"; } ... }
type MixinArgs struct {
	// The fully qualified name of the interface which is included.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If non-empty specifies a path under which inherited HTTP paths are rooted.
	Root pulumi.StringPtrInput `pulumi:"root"`
}

func (MixinArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Mixin)(nil)).Elem()
}

func (i MixinArgs) ToMixinOutput() MixinOutput {
	return i.ToMixinOutputWithContext(context.Background())
}

func (i MixinArgs) ToMixinOutputWithContext(ctx context.Context) MixinOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MixinOutput)
}

// MixinArrayInput is an input type that accepts MixinArray and MixinArrayOutput values.
// You can construct a concrete instance of `MixinArrayInput` via:
//
//          MixinArray{ MixinArgs{...} }
type MixinArrayInput interface {
	pulumi.Input

	ToMixinArrayOutput() MixinArrayOutput
	ToMixinArrayOutputWithContext(context.Context) MixinArrayOutput
}

type MixinArray []MixinInput

func (MixinArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Mixin)(nil)).Elem()
}

func (i MixinArray) ToMixinArrayOutput() MixinArrayOutput {
	return i.ToMixinArrayOutputWithContext(context.Background())
}

func (i MixinArray) ToMixinArrayOutputWithContext(ctx context.Context) MixinArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MixinArrayOutput)
}

// Declares an API Interface to be included in this interface. The including interface must redeclare all the methods from the included interface, but documentation and options are inherited as follows: - If after comment and whitespace stripping, the documentation string of the redeclared method is empty, it will be inherited from the original method. - Each annotation belonging to the service config (http, visibility) which is not set in the redeclared method will be inherited. - If an http annotation is inherited, the path pattern will be modified as follows. Any version prefix will be replaced by the version of the including interface plus the root path if specified. Example of a simple mixin: package google.acl.v1; service AccessControl { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = "/v1/{resource=**}:getAcl"; } } package google.storage.v2; service Storage { // rpc GetAcl(GetAclRequest) returns (Acl); // Get a data record. rpc GetData(GetDataRequest) returns (Data) { option (google.api.http).get = "/v2/{resource=**}"; } } Example of a mixin configuration: apis: - name: google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl The mixin construct implies that all methods in `AccessControl` are also declared with same name and request/response types in `Storage`. A documentation generator or annotation processor will see the effective `Storage.GetAcl` method after inheriting documentation and annotations as follows: service Storage { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = "/v2/{resource=**}:getAcl"; } ... } Note how the version in the path pattern changed from `v1` to `v2`. If the `root` field in the mixin is specified, it should be a relative path under which inherited HTTP paths are placed. Example: apis: - name: google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl root: acls This implies the following inherited HTTP annotation: service Storage { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = "/v2/acls/{resource=**}:getAcl"; } ... }
type MixinOutput struct{ *pulumi.OutputState }

func (MixinOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Mixin)(nil)).Elem()
}

func (o MixinOutput) ToMixinOutput() MixinOutput {
	return o
}

func (o MixinOutput) ToMixinOutputWithContext(ctx context.Context) MixinOutput {
	return o
}

// The fully qualified name of the interface which is included.
func (o MixinOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Mixin) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If non-empty specifies a path under which inherited HTTP paths are rooted.
func (o MixinOutput) Root() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Mixin) *string { return v.Root }).(pulumi.StringPtrOutput)
}

type MixinArrayOutput struct{ *pulumi.OutputState }

func (MixinArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Mixin)(nil)).Elem()
}

func (o MixinArrayOutput) ToMixinArrayOutput() MixinArrayOutput {
	return o
}

func (o MixinArrayOutput) ToMixinArrayOutputWithContext(ctx context.Context) MixinArrayOutput {
	return o
}

func (o MixinArrayOutput) Index(i pulumi.IntInput) MixinOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Mixin {
		return vs[0].([]Mixin)[vs[1].(int)]
	}).(MixinOutput)
}

// An object that describes the schema of a MonitoredResource object using a type name and a set of labels. For example, the monitored resource descriptor for Google Compute Engine VM instances has a type of `"gce_instance"` and specifies the use of the labels `"instance_id"` and `"zone"` to identify particular VM instances. Different APIs can support different monitored resource types. APIs generally provide a `list` method that returns the monitored resource descriptors used by the API.
type MonitoredResourceDescriptor struct {
	// Optional. A detailed description of the monitored resource type that might be used in documentation.
	Description *string `pulumi:"description"`
	// Optional. A concise name for the monitored resource type that might be displayed in user interfaces. It should be a Title Cased Noun Phrase, without any article or other determiners. For example, `"Google Cloud SQL Database"`.
	DisplayName *string `pulumi:"displayName"`
	// Required. A set of labels used to describe instances of this monitored resource type. For example, an individual Google Cloud SQL database is identified by values for the labels `"database_id"` and `"zone"`.
	Labels []LabelDescriptor `pulumi:"labels"`
	// Optional. The launch stage of the monitored resource definition.
	LaunchStage *string `pulumi:"launchStage"`
	// Optional. The resource name of the monitored resource descriptor: `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where {type} is the value of the `type` field in this object and {project_id} is a project ID that provides API-specific context for accessing the type. APIs that do not use project information can use the resource name format `"monitoredResourceDescriptors/{type}"`.
	Name *string `pulumi:"name"`
	// Required. The monitored resource type. For example, the type `"cloudsql_database"` represents databases in Google Cloud SQL.
	Type *string `pulumi:"type"`
}

// MonitoredResourceDescriptorInput is an input type that accepts MonitoredResourceDescriptorArgs and MonitoredResourceDescriptorOutput values.
// You can construct a concrete instance of `MonitoredResourceDescriptorInput` via:
//
//          MonitoredResourceDescriptorArgs{...}
type MonitoredResourceDescriptorInput interface {
	pulumi.Input

	ToMonitoredResourceDescriptorOutput() MonitoredResourceDescriptorOutput
	ToMonitoredResourceDescriptorOutputWithContext(context.Context) MonitoredResourceDescriptorOutput
}

// An object that describes the schema of a MonitoredResource object using a type name and a set of labels. For example, the monitored resource descriptor for Google Compute Engine VM instances has a type of `"gce_instance"` and specifies the use of the labels `"instance_id"` and `"zone"` to identify particular VM instances. Different APIs can support different monitored resource types. APIs generally provide a `list` method that returns the monitored resource descriptors used by the API.
type MonitoredResourceDescriptorArgs struct {
	// Optional. A detailed description of the monitored resource type that might be used in documentation.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Optional. A concise name for the monitored resource type that might be displayed in user interfaces. It should be a Title Cased Noun Phrase, without any article or other determiners. For example, `"Google Cloud SQL Database"`.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Required. A set of labels used to describe instances of this monitored resource type. For example, an individual Google Cloud SQL database is identified by values for the labels `"database_id"` and `"zone"`.
	Labels LabelDescriptorArrayInput `pulumi:"labels"`
	// Optional. The launch stage of the monitored resource definition.
	LaunchStage pulumi.StringPtrInput `pulumi:"launchStage"`
	// Optional. The resource name of the monitored resource descriptor: `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where {type} is the value of the `type` field in this object and {project_id} is a project ID that provides API-specific context for accessing the type. APIs that do not use project information can use the resource name format `"monitoredResourceDescriptors/{type}"`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Required. The monitored resource type. For example, the type `"cloudsql_database"` represents databases in Google Cloud SQL.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MonitoredResourceDescriptorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoredResourceDescriptor)(nil)).Elem()
}

func (i MonitoredResourceDescriptorArgs) ToMonitoredResourceDescriptorOutput() MonitoredResourceDescriptorOutput {
	return i.ToMonitoredResourceDescriptorOutputWithContext(context.Background())
}

func (i MonitoredResourceDescriptorArgs) ToMonitoredResourceDescriptorOutputWithContext(ctx context.Context) MonitoredResourceDescriptorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredResourceDescriptorOutput)
}

// MonitoredResourceDescriptorArrayInput is an input type that accepts MonitoredResourceDescriptorArray and MonitoredResourceDescriptorArrayOutput values.
// You can construct a concrete instance of `MonitoredResourceDescriptorArrayInput` via:
//
//          MonitoredResourceDescriptorArray{ MonitoredResourceDescriptorArgs{...} }
type MonitoredResourceDescriptorArrayInput interface {
	pulumi.Input

	ToMonitoredResourceDescriptorArrayOutput() MonitoredResourceDescriptorArrayOutput
	ToMonitoredResourceDescriptorArrayOutputWithContext(context.Context) MonitoredResourceDescriptorArrayOutput
}

type MonitoredResourceDescriptorArray []MonitoredResourceDescriptorInput

func (MonitoredResourceDescriptorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoredResourceDescriptor)(nil)).Elem()
}

func (i MonitoredResourceDescriptorArray) ToMonitoredResourceDescriptorArrayOutput() MonitoredResourceDescriptorArrayOutput {
	return i.ToMonitoredResourceDescriptorArrayOutputWithContext(context.Background())
}

func (i MonitoredResourceDescriptorArray) ToMonitoredResourceDescriptorArrayOutputWithContext(ctx context.Context) MonitoredResourceDescriptorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredResourceDescriptorArrayOutput)
}

// An object that describes the schema of a MonitoredResource object using a type name and a set of labels. For example, the monitored resource descriptor for Google Compute Engine VM instances has a type of `"gce_instance"` and specifies the use of the labels `"instance_id"` and `"zone"` to identify particular VM instances. Different APIs can support different monitored resource types. APIs generally provide a `list` method that returns the monitored resource descriptors used by the API.
type MonitoredResourceDescriptorOutput struct{ *pulumi.OutputState }

func (MonitoredResourceDescriptorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoredResourceDescriptor)(nil)).Elem()
}

func (o MonitoredResourceDescriptorOutput) ToMonitoredResourceDescriptorOutput() MonitoredResourceDescriptorOutput {
	return o
}

func (o MonitoredResourceDescriptorOutput) ToMonitoredResourceDescriptorOutputWithContext(ctx context.Context) MonitoredResourceDescriptorOutput {
	return o
}

// Optional. A detailed description of the monitored resource type that might be used in documentation.
func (o MonitoredResourceDescriptorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredResourceDescriptor) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional. A concise name for the monitored resource type that might be displayed in user interfaces. It should be a Title Cased Noun Phrase, without any article or other determiners. For example, `"Google Cloud SQL Database"`.
func (o MonitoredResourceDescriptorOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredResourceDescriptor) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Required. A set of labels used to describe instances of this monitored resource type. For example, an individual Google Cloud SQL database is identified by values for the labels `"database_id"` and `"zone"`.
func (o MonitoredResourceDescriptorOutput) Labels() LabelDescriptorArrayOutput {
	return o.ApplyT(func(v MonitoredResourceDescriptor) []LabelDescriptor { return v.Labels }).(LabelDescriptorArrayOutput)
}

// Optional. The launch stage of the monitored resource definition.
func (o MonitoredResourceDescriptorOutput) LaunchStage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredResourceDescriptor) *string { return v.LaunchStage }).(pulumi.StringPtrOutput)
}

// Optional. The resource name of the monitored resource descriptor: `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where {type} is the value of the `type` field in this object and {project_id} is a project ID that provides API-specific context for accessing the type. APIs that do not use project information can use the resource name format `"monitoredResourceDescriptors/{type}"`.
func (o MonitoredResourceDescriptorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredResourceDescriptor) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Required. The monitored resource type. For example, the type `"cloudsql_database"` represents databases in Google Cloud SQL.
func (o MonitoredResourceDescriptorOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredResourceDescriptor) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MonitoredResourceDescriptorArrayOutput struct{ *pulumi.OutputState }

func (MonitoredResourceDescriptorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoredResourceDescriptor)(nil)).Elem()
}

func (o MonitoredResourceDescriptorArrayOutput) ToMonitoredResourceDescriptorArrayOutput() MonitoredResourceDescriptorArrayOutput {
	return o
}

func (o MonitoredResourceDescriptorArrayOutput) ToMonitoredResourceDescriptorArrayOutputWithContext(ctx context.Context) MonitoredResourceDescriptorArrayOutput {
	return o
}

func (o MonitoredResourceDescriptorArrayOutput) Index(i pulumi.IntInput) MonitoredResourceDescriptorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitoredResourceDescriptor {
		return vs[0].([]MonitoredResourceDescriptor)[vs[1].(int)]
	}).(MonitoredResourceDescriptorOutput)
}

// Monitoring configuration of the service. The example below shows how to configure monitored resources and metrics for monitoring. In the example, a monitored resource and two metrics are defined. The `library.googleapis.com/book/returned_count` metric is sent to both producer and consumer projects, whereas the `library.googleapis.com/book/num_overdue` metric is only sent to the consumer project. monitored_resources: - type: library.googleapis.com/Branch display_name: "Library Branch" description: "A branch of a library." launch_stage: GA labels: - key: resource_container description: "The Cloud container (ie. project id) for the Branch." - key: location description: "The location of the library branch." - key: branch_id description: "The id of the branch." metrics: - name: library.googleapis.com/book/returned_count display_name: "Books Returned" description: "The count of books that have been returned." launch_stage: GA metric_kind: DELTA value_type: INT64 unit: "1" labels: - key: customer_id description: "The id of the customer." - name: library.googleapis.com/book/num_overdue display_name: "Books Overdue" description: "The current number of overdue books." launch_stage: GA metric_kind: GAUGE value_type: INT64 unit: "1" labels: - key: customer_id description: "The id of the customer." monitoring: producer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count consumer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count - library.googleapis.com/book/num_overdue
type Monitoring struct {
	// Monitoring configurations for sending metrics to the consumer project. There can be multiple consumer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration.
	ConsumerDestinations []MonitoringDestination `pulumi:"consumerDestinations"`
	// Monitoring configurations for sending metrics to the producer project. There can be multiple producer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration.
	ProducerDestinations []MonitoringDestination `pulumi:"producerDestinations"`
}

// MonitoringInput is an input type that accepts MonitoringArgs and MonitoringOutput values.
// You can construct a concrete instance of `MonitoringInput` via:
//
//          MonitoringArgs{...}
type MonitoringInput interface {
	pulumi.Input

	ToMonitoringOutput() MonitoringOutput
	ToMonitoringOutputWithContext(context.Context) MonitoringOutput
}

// Monitoring configuration of the service. The example below shows how to configure monitored resources and metrics for monitoring. In the example, a monitored resource and two metrics are defined. The `library.googleapis.com/book/returned_count` metric is sent to both producer and consumer projects, whereas the `library.googleapis.com/book/num_overdue` metric is only sent to the consumer project. monitored_resources: - type: library.googleapis.com/Branch display_name: "Library Branch" description: "A branch of a library." launch_stage: GA labels: - key: resource_container description: "The Cloud container (ie. project id) for the Branch." - key: location description: "The location of the library branch." - key: branch_id description: "The id of the branch." metrics: - name: library.googleapis.com/book/returned_count display_name: "Books Returned" description: "The count of books that have been returned." launch_stage: GA metric_kind: DELTA value_type: INT64 unit: "1" labels: - key: customer_id description: "The id of the customer." - name: library.googleapis.com/book/num_overdue display_name: "Books Overdue" description: "The current number of overdue books." launch_stage: GA metric_kind: GAUGE value_type: INT64 unit: "1" labels: - key: customer_id description: "The id of the customer." monitoring: producer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count consumer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count - library.googleapis.com/book/num_overdue
type MonitoringArgs struct {
	// Monitoring configurations for sending metrics to the consumer project. There can be multiple consumer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration.
	ConsumerDestinations MonitoringDestinationArrayInput `pulumi:"consumerDestinations"`
	// Monitoring configurations for sending metrics to the producer project. There can be multiple producer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration.
	ProducerDestinations MonitoringDestinationArrayInput `pulumi:"producerDestinations"`
}

func (MonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Monitoring)(nil)).Elem()
}

func (i MonitoringArgs) ToMonitoringOutput() MonitoringOutput {
	return i.ToMonitoringOutputWithContext(context.Background())
}

func (i MonitoringArgs) ToMonitoringOutputWithContext(ctx context.Context) MonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringOutput)
}

func (i MonitoringArgs) ToMonitoringPtrOutput() MonitoringPtrOutput {
	return i.ToMonitoringPtrOutputWithContext(context.Background())
}

func (i MonitoringArgs) ToMonitoringPtrOutputWithContext(ctx context.Context) MonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringOutput).ToMonitoringPtrOutputWithContext(ctx)
}

// MonitoringPtrInput is an input type that accepts MonitoringArgs, MonitoringPtr and MonitoringPtrOutput values.
// You can construct a concrete instance of `MonitoringPtrInput` via:
//
//          MonitoringArgs{...}
//
//  or:
//
//          nil
type MonitoringPtrInput interface {
	pulumi.Input

	ToMonitoringPtrOutput() MonitoringPtrOutput
	ToMonitoringPtrOutputWithContext(context.Context) MonitoringPtrOutput
}

type monitoringPtrType MonitoringArgs

func MonitoringPtr(v *MonitoringArgs) MonitoringPtrInput {
	return (*monitoringPtrType)(v)
}

func (*monitoringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Monitoring)(nil)).Elem()
}

func (i *monitoringPtrType) ToMonitoringPtrOutput() MonitoringPtrOutput {
	return i.ToMonitoringPtrOutputWithContext(context.Background())
}

func (i *monitoringPtrType) ToMonitoringPtrOutputWithContext(ctx context.Context) MonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringPtrOutput)
}

// Monitoring configuration of the service. The example below shows how to configure monitored resources and metrics for monitoring. In the example, a monitored resource and two metrics are defined. The `library.googleapis.com/book/returned_count` metric is sent to both producer and consumer projects, whereas the `library.googleapis.com/book/num_overdue` metric is only sent to the consumer project. monitored_resources: - type: library.googleapis.com/Branch display_name: "Library Branch" description: "A branch of a library." launch_stage: GA labels: - key: resource_container description: "The Cloud container (ie. project id) for the Branch." - key: location description: "The location of the library branch." - key: branch_id description: "The id of the branch." metrics: - name: library.googleapis.com/book/returned_count display_name: "Books Returned" description: "The count of books that have been returned." launch_stage: GA metric_kind: DELTA value_type: INT64 unit: "1" labels: - key: customer_id description: "The id of the customer." - name: library.googleapis.com/book/num_overdue display_name: "Books Overdue" description: "The current number of overdue books." launch_stage: GA metric_kind: GAUGE value_type: INT64 unit: "1" labels: - key: customer_id description: "The id of the customer." monitoring: producer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count consumer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count - library.googleapis.com/book/num_overdue
type MonitoringOutput struct{ *pulumi.OutputState }

func (MonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Monitoring)(nil)).Elem()
}

func (o MonitoringOutput) ToMonitoringOutput() MonitoringOutput {
	return o
}

func (o MonitoringOutput) ToMonitoringOutputWithContext(ctx context.Context) MonitoringOutput {
	return o
}

func (o MonitoringOutput) ToMonitoringPtrOutput() MonitoringPtrOutput {
	return o.ToMonitoringPtrOutputWithContext(context.Background())
}

func (o MonitoringOutput) ToMonitoringPtrOutputWithContext(ctx context.Context) MonitoringPtrOutput {
	return o.ApplyT(func(v Monitoring) *Monitoring {
		return &v
	}).(MonitoringPtrOutput)
}

// Monitoring configurations for sending metrics to the consumer project. There can be multiple consumer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration.
func (o MonitoringOutput) ConsumerDestinations() MonitoringDestinationArrayOutput {
	return o.ApplyT(func(v Monitoring) []MonitoringDestination { return v.ConsumerDestinations }).(MonitoringDestinationArrayOutput)
}

// Monitoring configurations for sending metrics to the producer project. There can be multiple producer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration.
func (o MonitoringOutput) ProducerDestinations() MonitoringDestinationArrayOutput {
	return o.ApplyT(func(v Monitoring) []MonitoringDestination { return v.ProducerDestinations }).(MonitoringDestinationArrayOutput)
}

type MonitoringPtrOutput struct{ *pulumi.OutputState }

func (MonitoringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Monitoring)(nil)).Elem()
}

func (o MonitoringPtrOutput) ToMonitoringPtrOutput() MonitoringPtrOutput {
	return o
}

func (o MonitoringPtrOutput) ToMonitoringPtrOutputWithContext(ctx context.Context) MonitoringPtrOutput {
	return o
}

func (o MonitoringPtrOutput) Elem() MonitoringOutput {
	return o.ApplyT(func(v *Monitoring) Monitoring { return *v }).(MonitoringOutput)
}

// Monitoring configurations for sending metrics to the consumer project. There can be multiple consumer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration.
func (o MonitoringPtrOutput) ConsumerDestinations() MonitoringDestinationArrayOutput {
	return o.ApplyT(func(v *Monitoring) []MonitoringDestination {
		if v == nil {
			return nil
		}
		return v.ConsumerDestinations
	}).(MonitoringDestinationArrayOutput)
}

// Monitoring configurations for sending metrics to the producer project. There can be multiple producer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration.
func (o MonitoringPtrOutput) ProducerDestinations() MonitoringDestinationArrayOutput {
	return o.ApplyT(func(v *Monitoring) []MonitoringDestination {
		if v == nil {
			return nil
		}
		return v.ProducerDestinations
	}).(MonitoringDestinationArrayOutput)
}

// Configuration of a specific monitoring destination (the producer project or the consumer project).
type MonitoringDestination struct {
	// Types of the metrics to report to this monitoring destination. Each type must be defined in Service.metrics section.
	Metrics []string `pulumi:"metrics"`
	// The monitored resource type. The type must be defined in Service.monitored_resources section.
	MonitoredResource *string `pulumi:"monitoredResource"`
}

// MonitoringDestinationInput is an input type that accepts MonitoringDestinationArgs and MonitoringDestinationOutput values.
// You can construct a concrete instance of `MonitoringDestinationInput` via:
//
//          MonitoringDestinationArgs{...}
type MonitoringDestinationInput interface {
	pulumi.Input

	ToMonitoringDestinationOutput() MonitoringDestinationOutput
	ToMonitoringDestinationOutputWithContext(context.Context) MonitoringDestinationOutput
}

// Configuration of a specific monitoring destination (the producer project or the consumer project).
type MonitoringDestinationArgs struct {
	// Types of the metrics to report to this monitoring destination. Each type must be defined in Service.metrics section.
	Metrics pulumi.StringArrayInput `pulumi:"metrics"`
	// The monitored resource type. The type must be defined in Service.monitored_resources section.
	MonitoredResource pulumi.StringPtrInput `pulumi:"monitoredResource"`
}

func (MonitoringDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringDestination)(nil)).Elem()
}

func (i MonitoringDestinationArgs) ToMonitoringDestinationOutput() MonitoringDestinationOutput {
	return i.ToMonitoringDestinationOutputWithContext(context.Background())
}

func (i MonitoringDestinationArgs) ToMonitoringDestinationOutputWithContext(ctx context.Context) MonitoringDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringDestinationOutput)
}

// MonitoringDestinationArrayInput is an input type that accepts MonitoringDestinationArray and MonitoringDestinationArrayOutput values.
// You can construct a concrete instance of `MonitoringDestinationArrayInput` via:
//
//          MonitoringDestinationArray{ MonitoringDestinationArgs{...} }
type MonitoringDestinationArrayInput interface {
	pulumi.Input

	ToMonitoringDestinationArrayOutput() MonitoringDestinationArrayOutput
	ToMonitoringDestinationArrayOutputWithContext(context.Context) MonitoringDestinationArrayOutput
}

type MonitoringDestinationArray []MonitoringDestinationInput

func (MonitoringDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoringDestination)(nil)).Elem()
}

func (i MonitoringDestinationArray) ToMonitoringDestinationArrayOutput() MonitoringDestinationArrayOutput {
	return i.ToMonitoringDestinationArrayOutputWithContext(context.Background())
}

func (i MonitoringDestinationArray) ToMonitoringDestinationArrayOutputWithContext(ctx context.Context) MonitoringDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringDestinationArrayOutput)
}

// Configuration of a specific monitoring destination (the producer project or the consumer project).
type MonitoringDestinationOutput struct{ *pulumi.OutputState }

func (MonitoringDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringDestination)(nil)).Elem()
}

func (o MonitoringDestinationOutput) ToMonitoringDestinationOutput() MonitoringDestinationOutput {
	return o
}

func (o MonitoringDestinationOutput) ToMonitoringDestinationOutputWithContext(ctx context.Context) MonitoringDestinationOutput {
	return o
}

// Types of the metrics to report to this monitoring destination. Each type must be defined in Service.metrics section.
func (o MonitoringDestinationOutput) Metrics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MonitoringDestination) []string { return v.Metrics }).(pulumi.StringArrayOutput)
}

// The monitored resource type. The type must be defined in Service.monitored_resources section.
func (o MonitoringDestinationOutput) MonitoredResource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringDestination) *string { return v.MonitoredResource }).(pulumi.StringPtrOutput)
}

type MonitoringDestinationArrayOutput struct{ *pulumi.OutputState }

func (MonitoringDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoringDestination)(nil)).Elem()
}

func (o MonitoringDestinationArrayOutput) ToMonitoringDestinationArrayOutput() MonitoringDestinationArrayOutput {
	return o
}

func (o MonitoringDestinationArrayOutput) ToMonitoringDestinationArrayOutputWithContext(ctx context.Context) MonitoringDestinationArrayOutput {
	return o
}

func (o MonitoringDestinationArrayOutput) Index(i pulumi.IntInput) MonitoringDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitoringDestination {
		return vs[0].([]MonitoringDestination)[vs[1].(int)]
	}).(MonitoringDestinationOutput)
}

// OAuth scopes are a way to define data and permissions on data. For example, there are scopes defined for "Read-only access to Google Calendar" and "Access to Cloud Platform". Users can consent to a scope for an application, giving it permission to access that data on their behalf. OAuth scope specifications should be fairly coarse grained; a user will need to see and understand the text description of what your scope means. In most cases: use one or at most two OAuth scopes for an entire family of products. If your product has multiple APIs, you should probably be sharing the OAuth scope across all of those APIs. When you need finer grained OAuth consent screens: talk with your product management about how developers will use them in practice. Please note that even though each of the canonical scopes is enough for a request to be accepted and passed to the backend, a request can still fail due to the backend requiring additional scopes or permissions.
type OAuthRequirements struct {
	// The list of publicly documented OAuth scopes that are allowed access. An OAuth token containing any of these scopes will be accepted. Example: canonical_scopes: https://www.googleapis.com/auth/calendar, https://www.googleapis.com/auth/calendar.read
	CanonicalScopes *string `pulumi:"canonicalScopes"`
}

// OAuthRequirementsInput is an input type that accepts OAuthRequirementsArgs and OAuthRequirementsOutput values.
// You can construct a concrete instance of `OAuthRequirementsInput` via:
//
//          OAuthRequirementsArgs{...}
type OAuthRequirementsInput interface {
	pulumi.Input

	ToOAuthRequirementsOutput() OAuthRequirementsOutput
	ToOAuthRequirementsOutputWithContext(context.Context) OAuthRequirementsOutput
}

// OAuth scopes are a way to define data and permissions on data. For example, there are scopes defined for "Read-only access to Google Calendar" and "Access to Cloud Platform". Users can consent to a scope for an application, giving it permission to access that data on their behalf. OAuth scope specifications should be fairly coarse grained; a user will need to see and understand the text description of what your scope means. In most cases: use one or at most two OAuth scopes for an entire family of products. If your product has multiple APIs, you should probably be sharing the OAuth scope across all of those APIs. When you need finer grained OAuth consent screens: talk with your product management about how developers will use them in practice. Please note that even though each of the canonical scopes is enough for a request to be accepted and passed to the backend, a request can still fail due to the backend requiring additional scopes or permissions.
type OAuthRequirementsArgs struct {
	// The list of publicly documented OAuth scopes that are allowed access. An OAuth token containing any of these scopes will be accepted. Example: canonical_scopes: https://www.googleapis.com/auth/calendar, https://www.googleapis.com/auth/calendar.read
	CanonicalScopes pulumi.StringPtrInput `pulumi:"canonicalScopes"`
}

func (OAuthRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthRequirements)(nil)).Elem()
}

func (i OAuthRequirementsArgs) ToOAuthRequirementsOutput() OAuthRequirementsOutput {
	return i.ToOAuthRequirementsOutputWithContext(context.Background())
}

func (i OAuthRequirementsArgs) ToOAuthRequirementsOutputWithContext(ctx context.Context) OAuthRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthRequirementsOutput)
}

func (i OAuthRequirementsArgs) ToOAuthRequirementsPtrOutput() OAuthRequirementsPtrOutput {
	return i.ToOAuthRequirementsPtrOutputWithContext(context.Background())
}

func (i OAuthRequirementsArgs) ToOAuthRequirementsPtrOutputWithContext(ctx context.Context) OAuthRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthRequirementsOutput).ToOAuthRequirementsPtrOutputWithContext(ctx)
}

// OAuthRequirementsPtrInput is an input type that accepts OAuthRequirementsArgs, OAuthRequirementsPtr and OAuthRequirementsPtrOutput values.
// You can construct a concrete instance of `OAuthRequirementsPtrInput` via:
//
//          OAuthRequirementsArgs{...}
//
//  or:
//
//          nil
type OAuthRequirementsPtrInput interface {
	pulumi.Input

	ToOAuthRequirementsPtrOutput() OAuthRequirementsPtrOutput
	ToOAuthRequirementsPtrOutputWithContext(context.Context) OAuthRequirementsPtrOutput
}

type oauthRequirementsPtrType OAuthRequirementsArgs

func OAuthRequirementsPtr(v *OAuthRequirementsArgs) OAuthRequirementsPtrInput {
	return (*oauthRequirementsPtrType)(v)
}

func (*oauthRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuthRequirements)(nil)).Elem()
}

func (i *oauthRequirementsPtrType) ToOAuthRequirementsPtrOutput() OAuthRequirementsPtrOutput {
	return i.ToOAuthRequirementsPtrOutputWithContext(context.Background())
}

func (i *oauthRequirementsPtrType) ToOAuthRequirementsPtrOutputWithContext(ctx context.Context) OAuthRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthRequirementsPtrOutput)
}

// OAuth scopes are a way to define data and permissions on data. For example, there are scopes defined for "Read-only access to Google Calendar" and "Access to Cloud Platform". Users can consent to a scope for an application, giving it permission to access that data on their behalf. OAuth scope specifications should be fairly coarse grained; a user will need to see and understand the text description of what your scope means. In most cases: use one or at most two OAuth scopes for an entire family of products. If your product has multiple APIs, you should probably be sharing the OAuth scope across all of those APIs. When you need finer grained OAuth consent screens: talk with your product management about how developers will use them in practice. Please note that even though each of the canonical scopes is enough for a request to be accepted and passed to the backend, a request can still fail due to the backend requiring additional scopes or permissions.
type OAuthRequirementsOutput struct{ *pulumi.OutputState }

func (OAuthRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthRequirements)(nil)).Elem()
}

func (o OAuthRequirementsOutput) ToOAuthRequirementsOutput() OAuthRequirementsOutput {
	return o
}

func (o OAuthRequirementsOutput) ToOAuthRequirementsOutputWithContext(ctx context.Context) OAuthRequirementsOutput {
	return o
}

func (o OAuthRequirementsOutput) ToOAuthRequirementsPtrOutput() OAuthRequirementsPtrOutput {
	return o.ToOAuthRequirementsPtrOutputWithContext(context.Background())
}

func (o OAuthRequirementsOutput) ToOAuthRequirementsPtrOutputWithContext(ctx context.Context) OAuthRequirementsPtrOutput {
	return o.ApplyT(func(v OAuthRequirements) *OAuthRequirements {
		return &v
	}).(OAuthRequirementsPtrOutput)
}

// The list of publicly documented OAuth scopes that are allowed access. An OAuth token containing any of these scopes will be accepted. Example: canonical_scopes: https://www.googleapis.com/auth/calendar, https://www.googleapis.com/auth/calendar.read
func (o OAuthRequirementsOutput) CanonicalScopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthRequirements) *string { return v.CanonicalScopes }).(pulumi.StringPtrOutput)
}

type OAuthRequirementsPtrOutput struct{ *pulumi.OutputState }

func (OAuthRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuthRequirements)(nil)).Elem()
}

func (o OAuthRequirementsPtrOutput) ToOAuthRequirementsPtrOutput() OAuthRequirementsPtrOutput {
	return o
}

func (o OAuthRequirementsPtrOutput) ToOAuthRequirementsPtrOutputWithContext(ctx context.Context) OAuthRequirementsPtrOutput {
	return o
}

func (o OAuthRequirementsPtrOutput) Elem() OAuthRequirementsOutput {
	return o.ApplyT(func(v *OAuthRequirements) OAuthRequirements { return *v }).(OAuthRequirementsOutput)
}

// The list of publicly documented OAuth scopes that are allowed access. An OAuth token containing any of these scopes will be accepted. Example: canonical_scopes: https://www.googleapis.com/auth/calendar, https://www.googleapis.com/auth/calendar.read
func (o OAuthRequirementsPtrOutput) CanonicalScopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthRequirements) *string {
		if v == nil {
			return nil
		}
		return v.CanonicalScopes
	}).(pulumi.StringPtrOutput)
}

// A protocol buffer option, which can be attached to a message, field, enumeration, etc.
type Option struct {
	// The option's name. For protobuf built-in options (options defined in descriptor.proto), this is the short name. For example, `"map_entry"`. For custom options, it should be the fully-qualified name. For example, `"google.api.http"`.
	Name *string `pulumi:"name"`
	// The option's value packed in an Any message. If the value is a primitive, the corresponding wrapper type defined in google/protobuf/wrappers.proto should be used. If the value is an enum, it should be stored as an int32 value using the google.protobuf.Int32Value type.
	Value map[string]string `pulumi:"value"`
}

// OptionInput is an input type that accepts OptionArgs and OptionOutput values.
// You can construct a concrete instance of `OptionInput` via:
//
//          OptionArgs{...}
type OptionInput interface {
	pulumi.Input

	ToOptionOutput() OptionOutput
	ToOptionOutputWithContext(context.Context) OptionOutput
}

// A protocol buffer option, which can be attached to a message, field, enumeration, etc.
type OptionArgs struct {
	// The option's name. For protobuf built-in options (options defined in descriptor.proto), this is the short name. For example, `"map_entry"`. For custom options, it should be the fully-qualified name. For example, `"google.api.http"`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The option's value packed in an Any message. If the value is a primitive, the corresponding wrapper type defined in google/protobuf/wrappers.proto should be used. If the value is an enum, it should be stored as an int32 value using the google.protobuf.Int32Value type.
	Value pulumi.StringMapInput `pulumi:"value"`
}

func (OptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Option)(nil)).Elem()
}

func (i OptionArgs) ToOptionOutput() OptionOutput {
	return i.ToOptionOutputWithContext(context.Background())
}

func (i OptionArgs) ToOptionOutputWithContext(ctx context.Context) OptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionOutput)
}

// OptionArrayInput is an input type that accepts OptionArray and OptionArrayOutput values.
// You can construct a concrete instance of `OptionArrayInput` via:
//
//          OptionArray{ OptionArgs{...} }
type OptionArrayInput interface {
	pulumi.Input

	ToOptionArrayOutput() OptionArrayOutput
	ToOptionArrayOutputWithContext(context.Context) OptionArrayOutput
}

type OptionArray []OptionInput

func (OptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Option)(nil)).Elem()
}

func (i OptionArray) ToOptionArrayOutput() OptionArrayOutput {
	return i.ToOptionArrayOutputWithContext(context.Background())
}

func (i OptionArray) ToOptionArrayOutputWithContext(ctx context.Context) OptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptionArrayOutput)
}

// A protocol buffer option, which can be attached to a message, field, enumeration, etc.
type OptionOutput struct{ *pulumi.OutputState }

func (OptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Option)(nil)).Elem()
}

func (o OptionOutput) ToOptionOutput() OptionOutput {
	return o
}

func (o OptionOutput) ToOptionOutputWithContext(ctx context.Context) OptionOutput {
	return o
}

// The option's name. For protobuf built-in options (options defined in descriptor.proto), this is the short name. For example, `"map_entry"`. For custom options, it should be the fully-qualified name. For example, `"google.api.http"`.
func (o OptionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Option) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The option's value packed in an Any message. If the value is a primitive, the corresponding wrapper type defined in google/protobuf/wrappers.proto should be used. If the value is an enum, it should be stored as an int32 value using the google.protobuf.Int32Value type.
func (o OptionOutput) Value() pulumi.StringMapOutput {
	return o.ApplyT(func(v Option) map[string]string { return v.Value }).(pulumi.StringMapOutput)
}

type OptionArrayOutput struct{ *pulumi.OutputState }

func (OptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Option)(nil)).Elem()
}

func (o OptionArrayOutput) ToOptionArrayOutput() OptionArrayOutput {
	return o
}

func (o OptionArrayOutput) ToOptionArrayOutputWithContext(ctx context.Context) OptionArrayOutput {
	return o
}

func (o OptionArrayOutput) Index(i pulumi.IntInput) OptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Option {
		return vs[0].([]Option)[vs[1].(int)]
	}).(OptionOutput)
}

// Represents a documentation page. A page can contain subpages to represent nested documentation set structure.
type Page struct {
	// The Markdown content of the page. You can use (== include {path} ==) to include content from a Markdown file.
	Content *string `pulumi:"content"`
	// The name of the page. It will be used as an identity of the page to generate URI of the page, text of the link to this page in navigation, etc. The full page name (start from the root page name to this page concatenated with `.`) can be used as reference to the page in your documentation. For example: pages: - name: Tutorial content: (== include tutorial.md ==) subpages: - name: Java content: (== include tutorial_java.md ==) You can reference `Java` page using Markdown reference link syntax: `Java`.
	Name *string `pulumi:"name"`
	// Subpages of this page. The order of subpages specified here will be honored in the generated docset.
	Subpages []Page `pulumi:"subpages"`
}

// PageInput is an input type that accepts PageArgs and PageOutput values.
// You can construct a concrete instance of `PageInput` via:
//
//          PageArgs{...}
type PageInput interface {
	pulumi.Input

	ToPageOutput() PageOutput
	ToPageOutputWithContext(context.Context) PageOutput
}

// Represents a documentation page. A page can contain subpages to represent nested documentation set structure.
type PageArgs struct {
	// The Markdown content of the page. You can use (== include {path} ==) to include content from a Markdown file.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// The name of the page. It will be used as an identity of the page to generate URI of the page, text of the link to this page in navigation, etc. The full page name (start from the root page name to this page concatenated with `.`) can be used as reference to the page in your documentation. For example: pages: - name: Tutorial content: (== include tutorial.md ==) subpages: - name: Java content: (== include tutorial_java.md ==) You can reference `Java` page using Markdown reference link syntax: `Java`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Subpages of this page. The order of subpages specified here will be honored in the generated docset.
	Subpages PageArrayInput `pulumi:"subpages"`
}

func (PageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Page)(nil)).Elem()
}

func (i PageArgs) ToPageOutput() PageOutput {
	return i.ToPageOutputWithContext(context.Background())
}

func (i PageArgs) ToPageOutputWithContext(ctx context.Context) PageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PageOutput)
}

// PageArrayInput is an input type that accepts PageArray and PageArrayOutput values.
// You can construct a concrete instance of `PageArrayInput` via:
//
//          PageArray{ PageArgs{...} }
type PageArrayInput interface {
	pulumi.Input

	ToPageArrayOutput() PageArrayOutput
	ToPageArrayOutputWithContext(context.Context) PageArrayOutput
}

type PageArray []PageInput

func (PageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Page)(nil)).Elem()
}

func (i PageArray) ToPageArrayOutput() PageArrayOutput {
	return i.ToPageArrayOutputWithContext(context.Background())
}

func (i PageArray) ToPageArrayOutputWithContext(ctx context.Context) PageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PageArrayOutput)
}

// Represents a documentation page. A page can contain subpages to represent nested documentation set structure.
type PageOutput struct{ *pulumi.OutputState }

func (PageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Page)(nil)).Elem()
}

func (o PageOutput) ToPageOutput() PageOutput {
	return o
}

func (o PageOutput) ToPageOutputWithContext(ctx context.Context) PageOutput {
	return o
}

// The Markdown content of the page. You can use (== include {path} ==) to include content from a Markdown file.
func (o PageOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Page) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// The name of the page. It will be used as an identity of the page to generate URI of the page, text of the link to this page in navigation, etc. The full page name (start from the root page name to this page concatenated with `.`) can be used as reference to the page in your documentation. For example: pages: - name: Tutorial content: (== include tutorial.md ==) subpages: - name: Java content: (== include tutorial_java.md ==) You can reference `Java` page using Markdown reference link syntax: `Java`.
func (o PageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Page) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Subpages of this page. The order of subpages specified here will be honored in the generated docset.
func (o PageOutput) Subpages() PageArrayOutput {
	return o.ApplyT(func(v Page) []Page { return v.Subpages }).(PageArrayOutput)
}

type PageArrayOutput struct{ *pulumi.OutputState }

func (PageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Page)(nil)).Elem()
}

func (o PageArrayOutput) ToPageArrayOutput() PageArrayOutput {
	return o
}

func (o PageArrayOutput) ToPageArrayOutputWithContext(ctx context.Context) PageArrayOutput {
	return o
}

func (o PageArrayOutput) Index(i pulumi.IntInput) PageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Page {
		return vs[0].([]Page)[vs[1].(int)]
	}).(PageOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type Policy struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs []AuditConfig `pulumi:"auditConfigs"`
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings []Binding `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag *string `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int `pulumi:"version"`
}

// PolicyInput is an input type that accepts PolicyArgs and PolicyOutput values.
// You can construct a concrete instance of `PolicyInput` via:
//
//          PolicyArgs{...}
type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(context.Context) PolicyOutput
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyArgs struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs AuditConfigArrayInput `pulumi:"auditConfigs"`
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings BindingArrayInput `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (i PolicyArgs) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

func (i PolicyArgs) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput).ToPolicyPtrOutputWithContext(ctx)
}

// PolicyPtrInput is an input type that accepts PolicyArgs, PolicyPtr and PolicyPtrOutput values.
// You can construct a concrete instance of `PolicyPtrInput` via:
//
//          PolicyArgs{...}
//
//  or:
//
//          nil
type PolicyPtrInput interface {
	pulumi.Input

	ToPolicyPtrOutput() PolicyPtrOutput
	ToPolicyPtrOutputWithContext(context.Context) PolicyPtrOutput
}

type policyPtrType PolicyArgs

func PolicyPtr(v *PolicyArgs) PolicyPtrInput {
	return (*policyPtrType)(v)
}

func (*policyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *policyPtrType) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i *policyPtrType) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o.ToPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o.ApplyT(func(v Policy) *Policy {
		return &v
	}).(PolicyPtrOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v Policy) []AuditConfig { return v.AuditConfigs }).(AuditConfigArrayOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v Policy) []Binding { return v.Bindings }).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Policy) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Policy) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type PolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyPtrOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) Elem() PolicyOutput {
	return o.ApplyT(func(v *Policy) Policy { return *v }).(PolicyOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyPtrOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v *Policy) []AuditConfig {
		if v == nil {
			return nil
		}
		return v.AuditConfigs
	}).(AuditConfigArrayOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyPtrOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v *Policy) []Binding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

// Quota configuration helps to achieve fairness and budgeting in service usage. The metric based quota configuration works this way: - The service configuration defines a set of metrics. - For API calls, the quota.metric_rules maps methods to metrics with corresponding costs. - The quota.limits defines limits on the metrics, which will be used for quota checks at runtime. An example quota configuration in yaml format: quota: limits: - name: apiWriteQpsPerProject metric: library.googleapis.com/write_calls unit: "1/min/{project}" # rate limit for consumer projects values: STANDARD: 10000 # The metric rules bind all methods to the read_calls metric, # except for the UpdateBook and DeleteBook methods. These two methods # are mapped to the write_calls metric, with the UpdateBook method # consuming at twice rate as the DeleteBook method. metric_rules: - selector: "*" metric_costs: library.googleapis.com/read_calls: 1 - selector: google.example.library.v1.LibraryService.UpdateBook metric_costs: library.googleapis.com/write_calls: 2 - selector: google.example.library.v1.LibraryService.DeleteBook metric_costs: library.googleapis.com/write_calls: 1 Corresponding Metric definition: metrics: - name: library.googleapis.com/read_calls display_name: Read requests metric_kind: DELTA value_type: INT64 - name: library.googleapis.com/write_calls display_name: Write requests metric_kind: DELTA value_type: INT64
type Quota struct {
	// List of `QuotaLimit` definitions for the service.
	Limits []QuotaLimit `pulumi:"limits"`
	// List of `MetricRule` definitions, each one mapping a selected method to one or more metrics.
	MetricRules []MetricRule `pulumi:"metricRules"`
}

// QuotaInput is an input type that accepts QuotaArgs and QuotaOutput values.
// You can construct a concrete instance of `QuotaInput` via:
//
//          QuotaArgs{...}
type QuotaInput interface {
	pulumi.Input

	ToQuotaOutput() QuotaOutput
	ToQuotaOutputWithContext(context.Context) QuotaOutput
}

// Quota configuration helps to achieve fairness and budgeting in service usage. The metric based quota configuration works this way: - The service configuration defines a set of metrics. - For API calls, the quota.metric_rules maps methods to metrics with corresponding costs. - The quota.limits defines limits on the metrics, which will be used for quota checks at runtime. An example quota configuration in yaml format: quota: limits: - name: apiWriteQpsPerProject metric: library.googleapis.com/write_calls unit: "1/min/{project}" # rate limit for consumer projects values: STANDARD: 10000 # The metric rules bind all methods to the read_calls metric, # except for the UpdateBook and DeleteBook methods. These two methods # are mapped to the write_calls metric, with the UpdateBook method # consuming at twice rate as the DeleteBook method. metric_rules: - selector: "*" metric_costs: library.googleapis.com/read_calls: 1 - selector: google.example.library.v1.LibraryService.UpdateBook metric_costs: library.googleapis.com/write_calls: 2 - selector: google.example.library.v1.LibraryService.DeleteBook metric_costs: library.googleapis.com/write_calls: 1 Corresponding Metric definition: metrics: - name: library.googleapis.com/read_calls display_name: Read requests metric_kind: DELTA value_type: INT64 - name: library.googleapis.com/write_calls display_name: Write requests metric_kind: DELTA value_type: INT64
type QuotaArgs struct {
	// List of `QuotaLimit` definitions for the service.
	Limits QuotaLimitArrayInput `pulumi:"limits"`
	// List of `MetricRule` definitions, each one mapping a selected method to one or more metrics.
	MetricRules MetricRuleArrayInput `pulumi:"metricRules"`
}

func (QuotaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Quota)(nil)).Elem()
}

func (i QuotaArgs) ToQuotaOutput() QuotaOutput {
	return i.ToQuotaOutputWithContext(context.Background())
}

func (i QuotaArgs) ToQuotaOutputWithContext(ctx context.Context) QuotaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuotaOutput)
}

func (i QuotaArgs) ToQuotaPtrOutput() QuotaPtrOutput {
	return i.ToQuotaPtrOutputWithContext(context.Background())
}

func (i QuotaArgs) ToQuotaPtrOutputWithContext(ctx context.Context) QuotaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuotaOutput).ToQuotaPtrOutputWithContext(ctx)
}

// QuotaPtrInput is an input type that accepts QuotaArgs, QuotaPtr and QuotaPtrOutput values.
// You can construct a concrete instance of `QuotaPtrInput` via:
//
//          QuotaArgs{...}
//
//  or:
//
//          nil
type QuotaPtrInput interface {
	pulumi.Input

	ToQuotaPtrOutput() QuotaPtrOutput
	ToQuotaPtrOutputWithContext(context.Context) QuotaPtrOutput
}

type quotaPtrType QuotaArgs

func QuotaPtr(v *QuotaArgs) QuotaPtrInput {
	return (*quotaPtrType)(v)
}

func (*quotaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Quota)(nil)).Elem()
}

func (i *quotaPtrType) ToQuotaPtrOutput() QuotaPtrOutput {
	return i.ToQuotaPtrOutputWithContext(context.Background())
}

func (i *quotaPtrType) ToQuotaPtrOutputWithContext(ctx context.Context) QuotaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuotaPtrOutput)
}

// Quota configuration helps to achieve fairness and budgeting in service usage. The metric based quota configuration works this way: - The service configuration defines a set of metrics. - For API calls, the quota.metric_rules maps methods to metrics with corresponding costs. - The quota.limits defines limits on the metrics, which will be used for quota checks at runtime. An example quota configuration in yaml format: quota: limits: - name: apiWriteQpsPerProject metric: library.googleapis.com/write_calls unit: "1/min/{project}" # rate limit for consumer projects values: STANDARD: 10000 # The metric rules bind all methods to the read_calls metric, # except for the UpdateBook and DeleteBook methods. These two methods # are mapped to the write_calls metric, with the UpdateBook method # consuming at twice rate as the DeleteBook method. metric_rules: - selector: "*" metric_costs: library.googleapis.com/read_calls: 1 - selector: google.example.library.v1.LibraryService.UpdateBook metric_costs: library.googleapis.com/write_calls: 2 - selector: google.example.library.v1.LibraryService.DeleteBook metric_costs: library.googleapis.com/write_calls: 1 Corresponding Metric definition: metrics: - name: library.googleapis.com/read_calls display_name: Read requests metric_kind: DELTA value_type: INT64 - name: library.googleapis.com/write_calls display_name: Write requests metric_kind: DELTA value_type: INT64
type QuotaOutput struct{ *pulumi.OutputState }

func (QuotaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Quota)(nil)).Elem()
}

func (o QuotaOutput) ToQuotaOutput() QuotaOutput {
	return o
}

func (o QuotaOutput) ToQuotaOutputWithContext(ctx context.Context) QuotaOutput {
	return o
}

func (o QuotaOutput) ToQuotaPtrOutput() QuotaPtrOutput {
	return o.ToQuotaPtrOutputWithContext(context.Background())
}

func (o QuotaOutput) ToQuotaPtrOutputWithContext(ctx context.Context) QuotaPtrOutput {
	return o.ApplyT(func(v Quota) *Quota {
		return &v
	}).(QuotaPtrOutput)
}

// List of `QuotaLimit` definitions for the service.
func (o QuotaOutput) Limits() QuotaLimitArrayOutput {
	return o.ApplyT(func(v Quota) []QuotaLimit { return v.Limits }).(QuotaLimitArrayOutput)
}

// List of `MetricRule` definitions, each one mapping a selected method to one or more metrics.
func (o QuotaOutput) MetricRules() MetricRuleArrayOutput {
	return o.ApplyT(func(v Quota) []MetricRule { return v.MetricRules }).(MetricRuleArrayOutput)
}

type QuotaPtrOutput struct{ *pulumi.OutputState }

func (QuotaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Quota)(nil)).Elem()
}

func (o QuotaPtrOutput) ToQuotaPtrOutput() QuotaPtrOutput {
	return o
}

func (o QuotaPtrOutput) ToQuotaPtrOutputWithContext(ctx context.Context) QuotaPtrOutput {
	return o
}

func (o QuotaPtrOutput) Elem() QuotaOutput {
	return o.ApplyT(func(v *Quota) Quota { return *v }).(QuotaOutput)
}

// List of `QuotaLimit` definitions for the service.
func (o QuotaPtrOutput) Limits() QuotaLimitArrayOutput {
	return o.ApplyT(func(v *Quota) []QuotaLimit {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(QuotaLimitArrayOutput)
}

// List of `MetricRule` definitions, each one mapping a selected method to one or more metrics.
func (o QuotaPtrOutput) MetricRules() MetricRuleArrayOutput {
	return o.ApplyT(func(v *Quota) []MetricRule {
		if v == nil {
			return nil
		}
		return v.MetricRules
	}).(MetricRuleArrayOutput)
}

// `QuotaLimit` defines a specific limit that applies over a specified duration for a limit type. There can be at most one limit for a duration and limit type combination defined within a `QuotaGroup`.
type QuotaLimit struct {
	// Default number of tokens that can be consumed during the specified duration. This is the number of tokens assigned when a client application developer activates the service for his/her project. Specifying a value of 0 will block all requests. This can be used if you are provisioning quota to selected consumers and blocking others. Similarly, a value of -1 will indicate an unlimited quota. No other negative values are allowed. Used by group-based quotas only.
	DefaultLimit *string `pulumi:"defaultLimit"`
	// Optional. User-visible, extended description for this quota limit. Should be used only when more context is needed to understand this limit than provided by the limit's display name (see: `display_name`).
	Description *string `pulumi:"description"`
	// User-visible display name for this limit. Optional. If not set, the UI will provide a default display name based on the quota configuration. This field can be used to override the default display name generated from the configuration.
	DisplayName *string `pulumi:"displayName"`
	// Duration of this limit in textual notation. Must be "100s" or "1d". Used by group-based quotas only.
	Duration *string `pulumi:"duration"`
	// Free tier value displayed in the Developers Console for this limit. The free tier is the number of tokens that will be subtracted from the billed amount when billing is enabled. This field can only be set on a limit with duration "1d", in a billable group; it is invalid on any other limit. If this field is not set, it defaults to 0, indicating that there is no free tier for this service. Used by group-based quotas only.
	FreeTier *string `pulumi:"freeTier"`
	// Maximum number of tokens that can be consumed during the specified duration. Client application developers can override the default limit up to this maximum. If specified, this value cannot be set to a value less than the default limit. If not specified, it is set to the default limit. To allow clients to apply overrides with no upper bound, set this to -1, indicating unlimited maximum quota. Used by group-based quotas only.
	MaxLimit *string `pulumi:"maxLimit"`
	// The name of the metric this quota limit applies to. The quota limits with the same metric will be checked together during runtime. The metric must be defined within the service config.
	Metric *string `pulumi:"metric"`
	// Name of the quota limit. The name must be provided, and it must be unique within the service. The name can only include alphanumeric characters as well as '-'. The maximum length of the limit name is 64 characters.
	Name *string `pulumi:"name"`
	// Specify the unit of the quota limit. It uses the same syntax as Metric.unit. The supported unit kinds are determined by the quota backend system. Here are some examples: * "1/min/{project}" for quota per minute per project. Note: the order of unit components is insignificant. The "1" at the beginning is required to follow the metric unit syntax.
	Unit *string `pulumi:"unit"`
	// Tiered limit values. You must specify this as a key:value pair, with an integer value that is the maximum number of requests allowed for the specified unit. Currently only STANDARD is supported.
	Values map[string]string `pulumi:"values"`
}

// QuotaLimitInput is an input type that accepts QuotaLimitArgs and QuotaLimitOutput values.
// You can construct a concrete instance of `QuotaLimitInput` via:
//
//          QuotaLimitArgs{...}
type QuotaLimitInput interface {
	pulumi.Input

	ToQuotaLimitOutput() QuotaLimitOutput
	ToQuotaLimitOutputWithContext(context.Context) QuotaLimitOutput
}

// `QuotaLimit` defines a specific limit that applies over a specified duration for a limit type. There can be at most one limit for a duration and limit type combination defined within a `QuotaGroup`.
type QuotaLimitArgs struct {
	// Default number of tokens that can be consumed during the specified duration. This is the number of tokens assigned when a client application developer activates the service for his/her project. Specifying a value of 0 will block all requests. This can be used if you are provisioning quota to selected consumers and blocking others. Similarly, a value of -1 will indicate an unlimited quota. No other negative values are allowed. Used by group-based quotas only.
	DefaultLimit pulumi.StringPtrInput `pulumi:"defaultLimit"`
	// Optional. User-visible, extended description for this quota limit. Should be used only when more context is needed to understand this limit than provided by the limit's display name (see: `display_name`).
	Description pulumi.StringPtrInput `pulumi:"description"`
	// User-visible display name for this limit. Optional. If not set, the UI will provide a default display name based on the quota configuration. This field can be used to override the default display name generated from the configuration.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Duration of this limit in textual notation. Must be "100s" or "1d". Used by group-based quotas only.
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// Free tier value displayed in the Developers Console for this limit. The free tier is the number of tokens that will be subtracted from the billed amount when billing is enabled. This field can only be set on a limit with duration "1d", in a billable group; it is invalid on any other limit. If this field is not set, it defaults to 0, indicating that there is no free tier for this service. Used by group-based quotas only.
	FreeTier pulumi.StringPtrInput `pulumi:"freeTier"`
	// Maximum number of tokens that can be consumed during the specified duration. Client application developers can override the default limit up to this maximum. If specified, this value cannot be set to a value less than the default limit. If not specified, it is set to the default limit. To allow clients to apply overrides with no upper bound, set this to -1, indicating unlimited maximum quota. Used by group-based quotas only.
	MaxLimit pulumi.StringPtrInput `pulumi:"maxLimit"`
	// The name of the metric this quota limit applies to. The quota limits with the same metric will be checked together during runtime. The metric must be defined within the service config.
	Metric pulumi.StringPtrInput `pulumi:"metric"`
	// Name of the quota limit. The name must be provided, and it must be unique within the service. The name can only include alphanumeric characters as well as '-'. The maximum length of the limit name is 64 characters.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify the unit of the quota limit. It uses the same syntax as Metric.unit. The supported unit kinds are determined by the quota backend system. Here are some examples: * "1/min/{project}" for quota per minute per project. Note: the order of unit components is insignificant. The "1" at the beginning is required to follow the metric unit syntax.
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// Tiered limit values. You must specify this as a key:value pair, with an integer value that is the maximum number of requests allowed for the specified unit. Currently only STANDARD is supported.
	Values pulumi.StringMapInput `pulumi:"values"`
}

func (QuotaLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QuotaLimit)(nil)).Elem()
}

func (i QuotaLimitArgs) ToQuotaLimitOutput() QuotaLimitOutput {
	return i.ToQuotaLimitOutputWithContext(context.Background())
}

func (i QuotaLimitArgs) ToQuotaLimitOutputWithContext(ctx context.Context) QuotaLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuotaLimitOutput)
}

// QuotaLimitArrayInput is an input type that accepts QuotaLimitArray and QuotaLimitArrayOutput values.
// You can construct a concrete instance of `QuotaLimitArrayInput` via:
//
//          QuotaLimitArray{ QuotaLimitArgs{...} }
type QuotaLimitArrayInput interface {
	pulumi.Input

	ToQuotaLimitArrayOutput() QuotaLimitArrayOutput
	ToQuotaLimitArrayOutputWithContext(context.Context) QuotaLimitArrayOutput
}

type QuotaLimitArray []QuotaLimitInput

func (QuotaLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuotaLimit)(nil)).Elem()
}

func (i QuotaLimitArray) ToQuotaLimitArrayOutput() QuotaLimitArrayOutput {
	return i.ToQuotaLimitArrayOutputWithContext(context.Background())
}

func (i QuotaLimitArray) ToQuotaLimitArrayOutputWithContext(ctx context.Context) QuotaLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QuotaLimitArrayOutput)
}

// `QuotaLimit` defines a specific limit that applies over a specified duration for a limit type. There can be at most one limit for a duration and limit type combination defined within a `QuotaGroup`.
type QuotaLimitOutput struct{ *pulumi.OutputState }

func (QuotaLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuotaLimit)(nil)).Elem()
}

func (o QuotaLimitOutput) ToQuotaLimitOutput() QuotaLimitOutput {
	return o
}

func (o QuotaLimitOutput) ToQuotaLimitOutputWithContext(ctx context.Context) QuotaLimitOutput {
	return o
}

// Default number of tokens that can be consumed during the specified duration. This is the number of tokens assigned when a client application developer activates the service for his/her project. Specifying a value of 0 will block all requests. This can be used if you are provisioning quota to selected consumers and blocking others. Similarly, a value of -1 will indicate an unlimited quota. No other negative values are allowed. Used by group-based quotas only.
func (o QuotaLimitOutput) DefaultLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuotaLimit) *string { return v.DefaultLimit }).(pulumi.StringPtrOutput)
}

// Optional. User-visible, extended description for this quota limit. Should be used only when more context is needed to understand this limit than provided by the limit's display name (see: `display_name`).
func (o QuotaLimitOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuotaLimit) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// User-visible display name for this limit. Optional. If not set, the UI will provide a default display name based on the quota configuration. This field can be used to override the default display name generated from the configuration.
func (o QuotaLimitOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuotaLimit) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Duration of this limit in textual notation. Must be "100s" or "1d". Used by group-based quotas only.
func (o QuotaLimitOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuotaLimit) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// Free tier value displayed in the Developers Console for this limit. The free tier is the number of tokens that will be subtracted from the billed amount when billing is enabled. This field can only be set on a limit with duration "1d", in a billable group; it is invalid on any other limit. If this field is not set, it defaults to 0, indicating that there is no free tier for this service. Used by group-based quotas only.
func (o QuotaLimitOutput) FreeTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuotaLimit) *string { return v.FreeTier }).(pulumi.StringPtrOutput)
}

// Maximum number of tokens that can be consumed during the specified duration. Client application developers can override the default limit up to this maximum. If specified, this value cannot be set to a value less than the default limit. If not specified, it is set to the default limit. To allow clients to apply overrides with no upper bound, set this to -1, indicating unlimited maximum quota. Used by group-based quotas only.
func (o QuotaLimitOutput) MaxLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuotaLimit) *string { return v.MaxLimit }).(pulumi.StringPtrOutput)
}

// The name of the metric this quota limit applies to. The quota limits with the same metric will be checked together during runtime. The metric must be defined within the service config.
func (o QuotaLimitOutput) Metric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuotaLimit) *string { return v.Metric }).(pulumi.StringPtrOutput)
}

// Name of the quota limit. The name must be provided, and it must be unique within the service. The name can only include alphanumeric characters as well as '-'. The maximum length of the limit name is 64 characters.
func (o QuotaLimitOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuotaLimit) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify the unit of the quota limit. It uses the same syntax as Metric.unit. The supported unit kinds are determined by the quota backend system. Here are some examples: * "1/min/{project}" for quota per minute per project. Note: the order of unit components is insignificant. The "1" at the beginning is required to follow the metric unit syntax.
func (o QuotaLimitOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QuotaLimit) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// Tiered limit values. You must specify this as a key:value pair, with an integer value that is the maximum number of requests allowed for the specified unit. Currently only STANDARD is supported.
func (o QuotaLimitOutput) Values() pulumi.StringMapOutput {
	return o.ApplyT(func(v QuotaLimit) map[string]string { return v.Values }).(pulumi.StringMapOutput)
}

type QuotaLimitArrayOutput struct{ *pulumi.OutputState }

func (QuotaLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QuotaLimit)(nil)).Elem()
}

func (o QuotaLimitArrayOutput) ToQuotaLimitArrayOutput() QuotaLimitArrayOutput {
	return o
}

func (o QuotaLimitArrayOutput) ToQuotaLimitArrayOutputWithContext(ctx context.Context) QuotaLimitArrayOutput {
	return o
}

func (o QuotaLimitArrayOutput) Index(i pulumi.IntInput) QuotaLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QuotaLimit {
		return vs[0].([]QuotaLimit)[vs[1].(int)]
	}).(QuotaLimitOutput)
}

// `SourceContext` represents information about the source of a protobuf element, like the file in which it is defined.
type SourceContext struct {
	// The path-qualified name of the .proto file that contained the associated protobuf element. For example: `"google/protobuf/source_context.proto"`.
	FileName *string `pulumi:"fileName"`
}

// SourceContextInput is an input type that accepts SourceContextArgs and SourceContextOutput values.
// You can construct a concrete instance of `SourceContextInput` via:
//
//          SourceContextArgs{...}
type SourceContextInput interface {
	pulumi.Input

	ToSourceContextOutput() SourceContextOutput
	ToSourceContextOutputWithContext(context.Context) SourceContextOutput
}

// `SourceContext` represents information about the source of a protobuf element, like the file in which it is defined.
type SourceContextArgs struct {
	// The path-qualified name of the .proto file that contained the associated protobuf element. For example: `"google/protobuf/source_context.proto"`.
	FileName pulumi.StringPtrInput `pulumi:"fileName"`
}

func (SourceContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceContext)(nil)).Elem()
}

func (i SourceContextArgs) ToSourceContextOutput() SourceContextOutput {
	return i.ToSourceContextOutputWithContext(context.Background())
}

func (i SourceContextArgs) ToSourceContextOutputWithContext(ctx context.Context) SourceContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextOutput)
}

func (i SourceContextArgs) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return i.ToSourceContextPtrOutputWithContext(context.Background())
}

func (i SourceContextArgs) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextOutput).ToSourceContextPtrOutputWithContext(ctx)
}

// SourceContextPtrInput is an input type that accepts SourceContextArgs, SourceContextPtr and SourceContextPtrOutput values.
// You can construct a concrete instance of `SourceContextPtrInput` via:
//
//          SourceContextArgs{...}
//
//  or:
//
//          nil
type SourceContextPtrInput interface {
	pulumi.Input

	ToSourceContextPtrOutput() SourceContextPtrOutput
	ToSourceContextPtrOutputWithContext(context.Context) SourceContextPtrOutput
}

type sourceContextPtrType SourceContextArgs

func SourceContextPtr(v *SourceContextArgs) SourceContextPtrInput {
	return (*sourceContextPtrType)(v)
}

func (*sourceContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceContext)(nil)).Elem()
}

func (i *sourceContextPtrType) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return i.ToSourceContextPtrOutputWithContext(context.Background())
}

func (i *sourceContextPtrType) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceContextPtrOutput)
}

// `SourceContext` represents information about the source of a protobuf element, like the file in which it is defined.
type SourceContextOutput struct{ *pulumi.OutputState }

func (SourceContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceContext)(nil)).Elem()
}

func (o SourceContextOutput) ToSourceContextOutput() SourceContextOutput {
	return o
}

func (o SourceContextOutput) ToSourceContextOutputWithContext(ctx context.Context) SourceContextOutput {
	return o
}

func (o SourceContextOutput) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return o.ToSourceContextPtrOutputWithContext(context.Background())
}

func (o SourceContextOutput) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return o.ApplyT(func(v SourceContext) *SourceContext {
		return &v
	}).(SourceContextPtrOutput)
}

// The path-qualified name of the .proto file that contained the associated protobuf element. For example: `"google/protobuf/source_context.proto"`.
func (o SourceContextOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceContext) *string { return v.FileName }).(pulumi.StringPtrOutput)
}

type SourceContextPtrOutput struct{ *pulumi.OutputState }

func (SourceContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceContext)(nil)).Elem()
}

func (o SourceContextPtrOutput) ToSourceContextPtrOutput() SourceContextPtrOutput {
	return o
}

func (o SourceContextPtrOutput) ToSourceContextPtrOutputWithContext(ctx context.Context) SourceContextPtrOutput {
	return o
}

func (o SourceContextPtrOutput) Elem() SourceContextOutput {
	return o.ApplyT(func(v *SourceContext) SourceContext { return *v }).(SourceContextOutput)
}

// The path-qualified name of the .proto file that contained the associated protobuf element. For example: `"google/protobuf/source_context.proto"`.
func (o SourceContextPtrOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceContext) *string {
		if v == nil {
			return nil
		}
		return v.FileName
	}).(pulumi.StringPtrOutput)
}

// Source information used to create a Service Config
type SourceInfo struct {
	// All files used during config generation.
	SourceFiles []map[string]string `pulumi:"sourceFiles"`
}

// SourceInfoInput is an input type that accepts SourceInfoArgs and SourceInfoOutput values.
// You can construct a concrete instance of `SourceInfoInput` via:
//
//          SourceInfoArgs{...}
type SourceInfoInput interface {
	pulumi.Input

	ToSourceInfoOutput() SourceInfoOutput
	ToSourceInfoOutputWithContext(context.Context) SourceInfoOutput
}

// Source information used to create a Service Config
type SourceInfoArgs struct {
	// All files used during config generation.
	SourceFiles pulumi.StringMapArrayInput `pulumi:"sourceFiles"`
}

func (SourceInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceInfo)(nil)).Elem()
}

func (i SourceInfoArgs) ToSourceInfoOutput() SourceInfoOutput {
	return i.ToSourceInfoOutputWithContext(context.Background())
}

func (i SourceInfoArgs) ToSourceInfoOutputWithContext(ctx context.Context) SourceInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceInfoOutput)
}

func (i SourceInfoArgs) ToSourceInfoPtrOutput() SourceInfoPtrOutput {
	return i.ToSourceInfoPtrOutputWithContext(context.Background())
}

func (i SourceInfoArgs) ToSourceInfoPtrOutputWithContext(ctx context.Context) SourceInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceInfoOutput).ToSourceInfoPtrOutputWithContext(ctx)
}

// SourceInfoPtrInput is an input type that accepts SourceInfoArgs, SourceInfoPtr and SourceInfoPtrOutput values.
// You can construct a concrete instance of `SourceInfoPtrInput` via:
//
//          SourceInfoArgs{...}
//
//  or:
//
//          nil
type SourceInfoPtrInput interface {
	pulumi.Input

	ToSourceInfoPtrOutput() SourceInfoPtrOutput
	ToSourceInfoPtrOutputWithContext(context.Context) SourceInfoPtrOutput
}

type sourceInfoPtrType SourceInfoArgs

func SourceInfoPtr(v *SourceInfoArgs) SourceInfoPtrInput {
	return (*sourceInfoPtrType)(v)
}

func (*sourceInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceInfo)(nil)).Elem()
}

func (i *sourceInfoPtrType) ToSourceInfoPtrOutput() SourceInfoPtrOutput {
	return i.ToSourceInfoPtrOutputWithContext(context.Background())
}

func (i *sourceInfoPtrType) ToSourceInfoPtrOutputWithContext(ctx context.Context) SourceInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceInfoPtrOutput)
}

// Source information used to create a Service Config
type SourceInfoOutput struct{ *pulumi.OutputState }

func (SourceInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceInfo)(nil)).Elem()
}

func (o SourceInfoOutput) ToSourceInfoOutput() SourceInfoOutput {
	return o
}

func (o SourceInfoOutput) ToSourceInfoOutputWithContext(ctx context.Context) SourceInfoOutput {
	return o
}

func (o SourceInfoOutput) ToSourceInfoPtrOutput() SourceInfoPtrOutput {
	return o.ToSourceInfoPtrOutputWithContext(context.Background())
}

func (o SourceInfoOutput) ToSourceInfoPtrOutputWithContext(ctx context.Context) SourceInfoPtrOutput {
	return o.ApplyT(func(v SourceInfo) *SourceInfo {
		return &v
	}).(SourceInfoPtrOutput)
}

// All files used during config generation.
func (o SourceInfoOutput) SourceFiles() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v SourceInfo) []map[string]string { return v.SourceFiles }).(pulumi.StringMapArrayOutput)
}

type SourceInfoPtrOutput struct{ *pulumi.OutputState }

func (SourceInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceInfo)(nil)).Elem()
}

func (o SourceInfoPtrOutput) ToSourceInfoPtrOutput() SourceInfoPtrOutput {
	return o
}

func (o SourceInfoPtrOutput) ToSourceInfoPtrOutputWithContext(ctx context.Context) SourceInfoPtrOutput {
	return o
}

func (o SourceInfoPtrOutput) Elem() SourceInfoOutput {
	return o.ApplyT(func(v *SourceInfo) SourceInfo { return *v }).(SourceInfoOutput)
}

// All files used during config generation.
func (o SourceInfoPtrOutput) SourceFiles() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *SourceInfo) []map[string]string {
		if v == nil {
			return nil
		}
		return v.SourceFiles
	}).(pulumi.StringMapArrayOutput)
}

// Define a parameter's name and location. The parameter may be passed as either an HTTP header or a URL query parameter, and if both are passed the behavior is implementation-dependent.
type SystemParameter struct {
	// Define the HTTP header name to use for the parameter. It is case insensitive.
	HttpHeader *string `pulumi:"httpHeader"`
	// Define the name of the parameter, such as "api_key" . It is case sensitive.
	Name *string `pulumi:"name"`
	// Define the URL query parameter name to use for the parameter. It is case sensitive.
	UrlQueryParameter *string `pulumi:"urlQueryParameter"`
}

// SystemParameterInput is an input type that accepts SystemParameterArgs and SystemParameterOutput values.
// You can construct a concrete instance of `SystemParameterInput` via:
//
//          SystemParameterArgs{...}
type SystemParameterInput interface {
	pulumi.Input

	ToSystemParameterOutput() SystemParameterOutput
	ToSystemParameterOutputWithContext(context.Context) SystemParameterOutput
}

// Define a parameter's name and location. The parameter may be passed as either an HTTP header or a URL query parameter, and if both are passed the behavior is implementation-dependent.
type SystemParameterArgs struct {
	// Define the HTTP header name to use for the parameter. It is case insensitive.
	HttpHeader pulumi.StringPtrInput `pulumi:"httpHeader"`
	// Define the name of the parameter, such as "api_key" . It is case sensitive.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Define the URL query parameter name to use for the parameter. It is case sensitive.
	UrlQueryParameter pulumi.StringPtrInput `pulumi:"urlQueryParameter"`
}

func (SystemParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemParameter)(nil)).Elem()
}

func (i SystemParameterArgs) ToSystemParameterOutput() SystemParameterOutput {
	return i.ToSystemParameterOutputWithContext(context.Background())
}

func (i SystemParameterArgs) ToSystemParameterOutputWithContext(ctx context.Context) SystemParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemParameterOutput)
}

// SystemParameterArrayInput is an input type that accepts SystemParameterArray and SystemParameterArrayOutput values.
// You can construct a concrete instance of `SystemParameterArrayInput` via:
//
//          SystemParameterArray{ SystemParameterArgs{...} }
type SystemParameterArrayInput interface {
	pulumi.Input

	ToSystemParameterArrayOutput() SystemParameterArrayOutput
	ToSystemParameterArrayOutputWithContext(context.Context) SystemParameterArrayOutput
}

type SystemParameterArray []SystemParameterInput

func (SystemParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemParameter)(nil)).Elem()
}

func (i SystemParameterArray) ToSystemParameterArrayOutput() SystemParameterArrayOutput {
	return i.ToSystemParameterArrayOutputWithContext(context.Background())
}

func (i SystemParameterArray) ToSystemParameterArrayOutputWithContext(ctx context.Context) SystemParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemParameterArrayOutput)
}

// Define a parameter's name and location. The parameter may be passed as either an HTTP header or a URL query parameter, and if both are passed the behavior is implementation-dependent.
type SystemParameterOutput struct{ *pulumi.OutputState }

func (SystemParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemParameter)(nil)).Elem()
}

func (o SystemParameterOutput) ToSystemParameterOutput() SystemParameterOutput {
	return o
}

func (o SystemParameterOutput) ToSystemParameterOutputWithContext(ctx context.Context) SystemParameterOutput {
	return o
}

// Define the HTTP header name to use for the parameter. It is case insensitive.
func (o SystemParameterOutput) HttpHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemParameter) *string { return v.HttpHeader }).(pulumi.StringPtrOutput)
}

// Define the name of the parameter, such as "api_key" . It is case sensitive.
func (o SystemParameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemParameter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Define the URL query parameter name to use for the parameter. It is case sensitive.
func (o SystemParameterOutput) UrlQueryParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemParameter) *string { return v.UrlQueryParameter }).(pulumi.StringPtrOutput)
}

type SystemParameterArrayOutput struct{ *pulumi.OutputState }

func (SystemParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemParameter)(nil)).Elem()
}

func (o SystemParameterArrayOutput) ToSystemParameterArrayOutput() SystemParameterArrayOutput {
	return o
}

func (o SystemParameterArrayOutput) ToSystemParameterArrayOutputWithContext(ctx context.Context) SystemParameterArrayOutput {
	return o
}

func (o SystemParameterArrayOutput) Index(i pulumi.IntInput) SystemParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemParameter {
		return vs[0].([]SystemParameter)[vs[1].(int)]
	}).(SystemParameterOutput)
}

// Define a system parameter rule mapping system parameter definitions to methods.
type SystemParameterRule struct {
	// Define parameters. Multiple names may be defined for a parameter. For a given method call, only one of them should be used. If multiple names are used the behavior is implementation-dependent. If none of the specified names are present the behavior is parameter-dependent.
	Parameters []SystemParameter `pulumi:"parameters"`
	// Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.
	Selector *string `pulumi:"selector"`
}

// SystemParameterRuleInput is an input type that accepts SystemParameterRuleArgs and SystemParameterRuleOutput values.
// You can construct a concrete instance of `SystemParameterRuleInput` via:
//
//          SystemParameterRuleArgs{...}
type SystemParameterRuleInput interface {
	pulumi.Input

	ToSystemParameterRuleOutput() SystemParameterRuleOutput
	ToSystemParameterRuleOutputWithContext(context.Context) SystemParameterRuleOutput
}

// Define a system parameter rule mapping system parameter definitions to methods.
type SystemParameterRuleArgs struct {
	// Define parameters. Multiple names may be defined for a parameter. For a given method call, only one of them should be used. If multiple names are used the behavior is implementation-dependent. If none of the specified names are present the behavior is parameter-dependent.
	Parameters SystemParameterArrayInput `pulumi:"parameters"`
	// Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
}

func (SystemParameterRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemParameterRule)(nil)).Elem()
}

func (i SystemParameterRuleArgs) ToSystemParameterRuleOutput() SystemParameterRuleOutput {
	return i.ToSystemParameterRuleOutputWithContext(context.Background())
}

func (i SystemParameterRuleArgs) ToSystemParameterRuleOutputWithContext(ctx context.Context) SystemParameterRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemParameterRuleOutput)
}

// SystemParameterRuleArrayInput is an input type that accepts SystemParameterRuleArray and SystemParameterRuleArrayOutput values.
// You can construct a concrete instance of `SystemParameterRuleArrayInput` via:
//
//          SystemParameterRuleArray{ SystemParameterRuleArgs{...} }
type SystemParameterRuleArrayInput interface {
	pulumi.Input

	ToSystemParameterRuleArrayOutput() SystemParameterRuleArrayOutput
	ToSystemParameterRuleArrayOutputWithContext(context.Context) SystemParameterRuleArrayOutput
}

type SystemParameterRuleArray []SystemParameterRuleInput

func (SystemParameterRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemParameterRule)(nil)).Elem()
}

func (i SystemParameterRuleArray) ToSystemParameterRuleArrayOutput() SystemParameterRuleArrayOutput {
	return i.ToSystemParameterRuleArrayOutputWithContext(context.Background())
}

func (i SystemParameterRuleArray) ToSystemParameterRuleArrayOutputWithContext(ctx context.Context) SystemParameterRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemParameterRuleArrayOutput)
}

// Define a system parameter rule mapping system parameter definitions to methods.
type SystemParameterRuleOutput struct{ *pulumi.OutputState }

func (SystemParameterRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemParameterRule)(nil)).Elem()
}

func (o SystemParameterRuleOutput) ToSystemParameterRuleOutput() SystemParameterRuleOutput {
	return o
}

func (o SystemParameterRuleOutput) ToSystemParameterRuleOutputWithContext(ctx context.Context) SystemParameterRuleOutput {
	return o
}

// Define parameters. Multiple names may be defined for a parameter. For a given method call, only one of them should be used. If multiple names are used the behavior is implementation-dependent. If none of the specified names are present the behavior is parameter-dependent.
func (o SystemParameterRuleOutput) Parameters() SystemParameterArrayOutput {
	return o.ApplyT(func(v SystemParameterRule) []SystemParameter { return v.Parameters }).(SystemParameterArrayOutput)
}

// Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.
func (o SystemParameterRuleOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemParameterRule) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

type SystemParameterRuleArrayOutput struct{ *pulumi.OutputState }

func (SystemParameterRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemParameterRule)(nil)).Elem()
}

func (o SystemParameterRuleArrayOutput) ToSystemParameterRuleArrayOutput() SystemParameterRuleArrayOutput {
	return o
}

func (o SystemParameterRuleArrayOutput) ToSystemParameterRuleArrayOutputWithContext(ctx context.Context) SystemParameterRuleArrayOutput {
	return o
}

func (o SystemParameterRuleArrayOutput) Index(i pulumi.IntInput) SystemParameterRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemParameterRule {
		return vs[0].([]SystemParameterRule)[vs[1].(int)]
	}).(SystemParameterRuleOutput)
}

// ### System parameter configuration A system parameter is a special kind of parameter defined by the API system, not by an individual API. It is typically mapped to an HTTP header and/or a URL query parameter. This configuration specifies which methods change the names of the system parameters.
type SystemParameters struct {
	// Define system parameters. The parameters defined here will override the default parameters implemented by the system. If this field is missing from the service config, default system parameters will be used. Default system parameters and names is implementation-dependent. Example: define api key for all methods system_parameters rules: - selector: "*" parameters: - name: api_key url_query_parameter: api_key Example: define 2 api key names for a specific method. system_parameters rules: - selector: "/ListShelves" parameters: - name: api_key http_header: Api-Key1 - name: api_key http_header: Api-Key2 **NOTE:** All service configuration rules follow "last one wins" order.
	Rules []SystemParameterRule `pulumi:"rules"`
}

// SystemParametersInput is an input type that accepts SystemParametersArgs and SystemParametersOutput values.
// You can construct a concrete instance of `SystemParametersInput` via:
//
//          SystemParametersArgs{...}
type SystemParametersInput interface {
	pulumi.Input

	ToSystemParametersOutput() SystemParametersOutput
	ToSystemParametersOutputWithContext(context.Context) SystemParametersOutput
}

// ### System parameter configuration A system parameter is a special kind of parameter defined by the API system, not by an individual API. It is typically mapped to an HTTP header and/or a URL query parameter. This configuration specifies which methods change the names of the system parameters.
type SystemParametersArgs struct {
	// Define system parameters. The parameters defined here will override the default parameters implemented by the system. If this field is missing from the service config, default system parameters will be used. Default system parameters and names is implementation-dependent. Example: define api key for all methods system_parameters rules: - selector: "*" parameters: - name: api_key url_query_parameter: api_key Example: define 2 api key names for a specific method. system_parameters rules: - selector: "/ListShelves" parameters: - name: api_key http_header: Api-Key1 - name: api_key http_header: Api-Key2 **NOTE:** All service configuration rules follow "last one wins" order.
	Rules SystemParameterRuleArrayInput `pulumi:"rules"`
}

func (SystemParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemParameters)(nil)).Elem()
}

func (i SystemParametersArgs) ToSystemParametersOutput() SystemParametersOutput {
	return i.ToSystemParametersOutputWithContext(context.Background())
}

func (i SystemParametersArgs) ToSystemParametersOutputWithContext(ctx context.Context) SystemParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemParametersOutput)
}

func (i SystemParametersArgs) ToSystemParametersPtrOutput() SystemParametersPtrOutput {
	return i.ToSystemParametersPtrOutputWithContext(context.Background())
}

func (i SystemParametersArgs) ToSystemParametersPtrOutputWithContext(ctx context.Context) SystemParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemParametersOutput).ToSystemParametersPtrOutputWithContext(ctx)
}

// SystemParametersPtrInput is an input type that accepts SystemParametersArgs, SystemParametersPtr and SystemParametersPtrOutput values.
// You can construct a concrete instance of `SystemParametersPtrInput` via:
//
//          SystemParametersArgs{...}
//
//  or:
//
//          nil
type SystemParametersPtrInput interface {
	pulumi.Input

	ToSystemParametersPtrOutput() SystemParametersPtrOutput
	ToSystemParametersPtrOutputWithContext(context.Context) SystemParametersPtrOutput
}

type systemParametersPtrType SystemParametersArgs

func SystemParametersPtr(v *SystemParametersArgs) SystemParametersPtrInput {
	return (*systemParametersPtrType)(v)
}

func (*systemParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemParameters)(nil)).Elem()
}

func (i *systemParametersPtrType) ToSystemParametersPtrOutput() SystemParametersPtrOutput {
	return i.ToSystemParametersPtrOutputWithContext(context.Background())
}

func (i *systemParametersPtrType) ToSystemParametersPtrOutputWithContext(ctx context.Context) SystemParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemParametersPtrOutput)
}

// ### System parameter configuration A system parameter is a special kind of parameter defined by the API system, not by an individual API. It is typically mapped to an HTTP header and/or a URL query parameter. This configuration specifies which methods change the names of the system parameters.
type SystemParametersOutput struct{ *pulumi.OutputState }

func (SystemParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemParameters)(nil)).Elem()
}

func (o SystemParametersOutput) ToSystemParametersOutput() SystemParametersOutput {
	return o
}

func (o SystemParametersOutput) ToSystemParametersOutputWithContext(ctx context.Context) SystemParametersOutput {
	return o
}

func (o SystemParametersOutput) ToSystemParametersPtrOutput() SystemParametersPtrOutput {
	return o.ToSystemParametersPtrOutputWithContext(context.Background())
}

func (o SystemParametersOutput) ToSystemParametersPtrOutputWithContext(ctx context.Context) SystemParametersPtrOutput {
	return o.ApplyT(func(v SystemParameters) *SystemParameters {
		return &v
	}).(SystemParametersPtrOutput)
}

// Define system parameters. The parameters defined here will override the default parameters implemented by the system. If this field is missing from the service config, default system parameters will be used. Default system parameters and names is implementation-dependent. Example: define api key for all methods system_parameters rules: - selector: "*" parameters: - name: api_key url_query_parameter: api_key Example: define 2 api key names for a specific method. system_parameters rules: - selector: "/ListShelves" parameters: - name: api_key http_header: Api-Key1 - name: api_key http_header: Api-Key2 **NOTE:** All service configuration rules follow "last one wins" order.
func (o SystemParametersOutput) Rules() SystemParameterRuleArrayOutput {
	return o.ApplyT(func(v SystemParameters) []SystemParameterRule { return v.Rules }).(SystemParameterRuleArrayOutput)
}

type SystemParametersPtrOutput struct{ *pulumi.OutputState }

func (SystemParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemParameters)(nil)).Elem()
}

func (o SystemParametersPtrOutput) ToSystemParametersPtrOutput() SystemParametersPtrOutput {
	return o
}

func (o SystemParametersPtrOutput) ToSystemParametersPtrOutputWithContext(ctx context.Context) SystemParametersPtrOutput {
	return o
}

func (o SystemParametersPtrOutput) Elem() SystemParametersOutput {
	return o.ApplyT(func(v *SystemParameters) SystemParameters { return *v }).(SystemParametersOutput)
}

// Define system parameters. The parameters defined here will override the default parameters implemented by the system. If this field is missing from the service config, default system parameters will be used. Default system parameters and names is implementation-dependent. Example: define api key for all methods system_parameters rules: - selector: "*" parameters: - name: api_key url_query_parameter: api_key Example: define 2 api key names for a specific method. system_parameters rules: - selector: "/ListShelves" parameters: - name: api_key http_header: Api-Key1 - name: api_key http_header: Api-Key2 **NOTE:** All service configuration rules follow "last one wins" order.
func (o SystemParametersPtrOutput) Rules() SystemParameterRuleArrayOutput {
	return o.ApplyT(func(v *SystemParameters) []SystemParameterRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(SystemParameterRuleArrayOutput)
}

// Strategy that specifies how clients of Google Service Controller want to send traffic to use different config versions. This is generally used by API proxy to split traffic based on your configured percentage for each config version. One example of how to gradually rollout a new service configuration using this strategy: Day 1 Rollout { id: "example.googleapis.com/rollout_20160206" traffic_percent_strategy { percentages: { "example.googleapis.com/20160201": 70.00 "example.googleapis.com/20160206": 30.00 } } } Day 2 Rollout { id: "example.googleapis.com/rollout_20160207" traffic_percent_strategy: { percentages: { "example.googleapis.com/20160206": 100.00 } } }
type TrafficPercentStrategy struct {
	// Maps service configuration IDs to their corresponding traffic percentage. Key is the service configuration ID, Value is the traffic percentage which must be greater than 0.0 and the sum must equal to 100.0.
	Percentages map[string]string `pulumi:"percentages"`
}

// TrafficPercentStrategyInput is an input type that accepts TrafficPercentStrategyArgs and TrafficPercentStrategyOutput values.
// You can construct a concrete instance of `TrafficPercentStrategyInput` via:
//
//          TrafficPercentStrategyArgs{...}
type TrafficPercentStrategyInput interface {
	pulumi.Input

	ToTrafficPercentStrategyOutput() TrafficPercentStrategyOutput
	ToTrafficPercentStrategyOutputWithContext(context.Context) TrafficPercentStrategyOutput
}

// Strategy that specifies how clients of Google Service Controller want to send traffic to use different config versions. This is generally used by API proxy to split traffic based on your configured percentage for each config version. One example of how to gradually rollout a new service configuration using this strategy: Day 1 Rollout { id: "example.googleapis.com/rollout_20160206" traffic_percent_strategy { percentages: { "example.googleapis.com/20160201": 70.00 "example.googleapis.com/20160206": 30.00 } } } Day 2 Rollout { id: "example.googleapis.com/rollout_20160207" traffic_percent_strategy: { percentages: { "example.googleapis.com/20160206": 100.00 } } }
type TrafficPercentStrategyArgs struct {
	// Maps service configuration IDs to their corresponding traffic percentage. Key is the service configuration ID, Value is the traffic percentage which must be greater than 0.0 and the sum must equal to 100.0.
	Percentages pulumi.StringMapInput `pulumi:"percentages"`
}

func (TrafficPercentStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficPercentStrategy)(nil)).Elem()
}

func (i TrafficPercentStrategyArgs) ToTrafficPercentStrategyOutput() TrafficPercentStrategyOutput {
	return i.ToTrafficPercentStrategyOutputWithContext(context.Background())
}

func (i TrafficPercentStrategyArgs) ToTrafficPercentStrategyOutputWithContext(ctx context.Context) TrafficPercentStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficPercentStrategyOutput)
}

func (i TrafficPercentStrategyArgs) ToTrafficPercentStrategyPtrOutput() TrafficPercentStrategyPtrOutput {
	return i.ToTrafficPercentStrategyPtrOutputWithContext(context.Background())
}

func (i TrafficPercentStrategyArgs) ToTrafficPercentStrategyPtrOutputWithContext(ctx context.Context) TrafficPercentStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficPercentStrategyOutput).ToTrafficPercentStrategyPtrOutputWithContext(ctx)
}

// TrafficPercentStrategyPtrInput is an input type that accepts TrafficPercentStrategyArgs, TrafficPercentStrategyPtr and TrafficPercentStrategyPtrOutput values.
// You can construct a concrete instance of `TrafficPercentStrategyPtrInput` via:
//
//          TrafficPercentStrategyArgs{...}
//
//  or:
//
//          nil
type TrafficPercentStrategyPtrInput interface {
	pulumi.Input

	ToTrafficPercentStrategyPtrOutput() TrafficPercentStrategyPtrOutput
	ToTrafficPercentStrategyPtrOutputWithContext(context.Context) TrafficPercentStrategyPtrOutput
}

type trafficPercentStrategyPtrType TrafficPercentStrategyArgs

func TrafficPercentStrategyPtr(v *TrafficPercentStrategyArgs) TrafficPercentStrategyPtrInput {
	return (*trafficPercentStrategyPtrType)(v)
}

func (*trafficPercentStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficPercentStrategy)(nil)).Elem()
}

func (i *trafficPercentStrategyPtrType) ToTrafficPercentStrategyPtrOutput() TrafficPercentStrategyPtrOutput {
	return i.ToTrafficPercentStrategyPtrOutputWithContext(context.Background())
}

func (i *trafficPercentStrategyPtrType) ToTrafficPercentStrategyPtrOutputWithContext(ctx context.Context) TrafficPercentStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficPercentStrategyPtrOutput)
}

// Strategy that specifies how clients of Google Service Controller want to send traffic to use different config versions. This is generally used by API proxy to split traffic based on your configured percentage for each config version. One example of how to gradually rollout a new service configuration using this strategy: Day 1 Rollout { id: "example.googleapis.com/rollout_20160206" traffic_percent_strategy { percentages: { "example.googleapis.com/20160201": 70.00 "example.googleapis.com/20160206": 30.00 } } } Day 2 Rollout { id: "example.googleapis.com/rollout_20160207" traffic_percent_strategy: { percentages: { "example.googleapis.com/20160206": 100.00 } } }
type TrafficPercentStrategyOutput struct{ *pulumi.OutputState }

func (TrafficPercentStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficPercentStrategy)(nil)).Elem()
}

func (o TrafficPercentStrategyOutput) ToTrafficPercentStrategyOutput() TrafficPercentStrategyOutput {
	return o
}

func (o TrafficPercentStrategyOutput) ToTrafficPercentStrategyOutputWithContext(ctx context.Context) TrafficPercentStrategyOutput {
	return o
}

func (o TrafficPercentStrategyOutput) ToTrafficPercentStrategyPtrOutput() TrafficPercentStrategyPtrOutput {
	return o.ToTrafficPercentStrategyPtrOutputWithContext(context.Background())
}

func (o TrafficPercentStrategyOutput) ToTrafficPercentStrategyPtrOutputWithContext(ctx context.Context) TrafficPercentStrategyPtrOutput {
	return o.ApplyT(func(v TrafficPercentStrategy) *TrafficPercentStrategy {
		return &v
	}).(TrafficPercentStrategyPtrOutput)
}

// Maps service configuration IDs to their corresponding traffic percentage. Key is the service configuration ID, Value is the traffic percentage which must be greater than 0.0 and the sum must equal to 100.0.
func (o TrafficPercentStrategyOutput) Percentages() pulumi.StringMapOutput {
	return o.ApplyT(func(v TrafficPercentStrategy) map[string]string { return v.Percentages }).(pulumi.StringMapOutput)
}

type TrafficPercentStrategyPtrOutput struct{ *pulumi.OutputState }

func (TrafficPercentStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficPercentStrategy)(nil)).Elem()
}

func (o TrafficPercentStrategyPtrOutput) ToTrafficPercentStrategyPtrOutput() TrafficPercentStrategyPtrOutput {
	return o
}

func (o TrafficPercentStrategyPtrOutput) ToTrafficPercentStrategyPtrOutputWithContext(ctx context.Context) TrafficPercentStrategyPtrOutput {
	return o
}

func (o TrafficPercentStrategyPtrOutput) Elem() TrafficPercentStrategyOutput {
	return o.ApplyT(func(v *TrafficPercentStrategy) TrafficPercentStrategy { return *v }).(TrafficPercentStrategyOutput)
}

// Maps service configuration IDs to their corresponding traffic percentage. Key is the service configuration ID, Value is the traffic percentage which must be greater than 0.0 and the sum must equal to 100.0.
func (o TrafficPercentStrategyPtrOutput) Percentages() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TrafficPercentStrategy) map[string]string {
		if v == nil {
			return nil
		}
		return v.Percentages
	}).(pulumi.StringMapOutput)
}

// A protocol buffer message type.
type Type struct {
	// The list of fields.
	Fields []Field `pulumi:"fields"`
	// The fully qualified message name.
	Name *string `pulumi:"name"`
	// The list of types appearing in `oneof` definitions in this type.
	Oneofs []string `pulumi:"oneofs"`
	// The protocol buffer options.
	Options []Option `pulumi:"options"`
	// The source context.
	SourceContext *SourceContext `pulumi:"sourceContext"`
	// The source syntax.
	Syntax *string `pulumi:"syntax"`
}

// TypeInput is an input type that accepts TypeArgs and TypeOutput values.
// You can construct a concrete instance of `TypeInput` via:
//
//          TypeArgs{...}
type TypeInput interface {
	pulumi.Input

	ToTypeOutput() TypeOutput
	ToTypeOutputWithContext(context.Context) TypeOutput
}

// A protocol buffer message type.
type TypeArgs struct {
	// The list of fields.
	Fields FieldArrayInput `pulumi:"fields"`
	// The fully qualified message name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The list of types appearing in `oneof` definitions in this type.
	Oneofs pulumi.StringArrayInput `pulumi:"oneofs"`
	// The protocol buffer options.
	Options OptionArrayInput `pulumi:"options"`
	// The source context.
	SourceContext SourceContextPtrInput `pulumi:"sourceContext"`
	// The source syntax.
	Syntax pulumi.StringPtrInput `pulumi:"syntax"`
}

func (TypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Type)(nil)).Elem()
}

func (i TypeArgs) ToTypeOutput() TypeOutput {
	return i.ToTypeOutputWithContext(context.Background())
}

func (i TypeArgs) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeOutput)
}

// TypeArrayInput is an input type that accepts TypeArray and TypeArrayOutput values.
// You can construct a concrete instance of `TypeArrayInput` via:
//
//          TypeArray{ TypeArgs{...} }
type TypeArrayInput interface {
	pulumi.Input

	ToTypeArrayOutput() TypeArrayOutput
	ToTypeArrayOutputWithContext(context.Context) TypeArrayOutput
}

type TypeArray []TypeInput

func (TypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Type)(nil)).Elem()
}

func (i TypeArray) ToTypeArrayOutput() TypeArrayOutput {
	return i.ToTypeArrayOutputWithContext(context.Background())
}

func (i TypeArray) ToTypeArrayOutputWithContext(ctx context.Context) TypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeArrayOutput)
}

// A protocol buffer message type.
type TypeOutput struct{ *pulumi.OutputState }

func (TypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Type)(nil)).Elem()
}

func (o TypeOutput) ToTypeOutput() TypeOutput {
	return o
}

func (o TypeOutput) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return o
}

// The list of fields.
func (o TypeOutput) Fields() FieldArrayOutput {
	return o.ApplyT(func(v Type) []Field { return v.Fields }).(FieldArrayOutput)
}

// The fully qualified message name.
func (o TypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Type) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of types appearing in `oneof` definitions in this type.
func (o TypeOutput) Oneofs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Type) []string { return v.Oneofs }).(pulumi.StringArrayOutput)
}

// The protocol buffer options.
func (o TypeOutput) Options() OptionArrayOutput {
	return o.ApplyT(func(v Type) []Option { return v.Options }).(OptionArrayOutput)
}

// The source context.
func (o TypeOutput) SourceContext() SourceContextPtrOutput {
	return o.ApplyT(func(v Type) *SourceContext { return v.SourceContext }).(SourceContextPtrOutput)
}

// The source syntax.
func (o TypeOutput) Syntax() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Type) *string { return v.Syntax }).(pulumi.StringPtrOutput)
}

type TypeArrayOutput struct{ *pulumi.OutputState }

func (TypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Type)(nil)).Elem()
}

func (o TypeArrayOutput) ToTypeArrayOutput() TypeArrayOutput {
	return o
}

func (o TypeArrayOutput) ToTypeArrayOutputWithContext(ctx context.Context) TypeArrayOutput {
	return o
}

func (o TypeArrayOutput) Index(i pulumi.IntInput) TypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Type {
		return vs[0].([]Type)[vs[1].(int)]
	}).(TypeOutput)
}

// Configuration controlling usage of a service.
type Usage struct {
	// The full resource name of a channel used for sending notifications to the service producer. Google Service Management currently only supports [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification channel. To use Google Cloud Pub/Sub as the channel, this must be the name of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format documented in https://cloud.google.com/pubsub/docs/overview.
	ProducerNotificationChannel *string `pulumi:"producerNotificationChannel"`
	// Requirements that must be satisfied before a consumer project can use the service. Each requirement is of the form /; for example 'serviceusage.googleapis.com/billing-enabled'. For Google APIs, a Terms of Service requirement must be included here. Google Cloud APIs must include "serviceusage.googleapis.com/tos/cloud". Other Google APIs should include "serviceusage.googleapis.com/tos/universal". Additional ToS can be included based on the business needs.
	Requirements []string `pulumi:"requirements"`
	// A list of usage rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
	Rules []UsageRule `pulumi:"rules"`
}

// UsageInput is an input type that accepts UsageArgs and UsageOutput values.
// You can construct a concrete instance of `UsageInput` via:
//
//          UsageArgs{...}
type UsageInput interface {
	pulumi.Input

	ToUsageOutput() UsageOutput
	ToUsageOutputWithContext(context.Context) UsageOutput
}

// Configuration controlling usage of a service.
type UsageArgs struct {
	// The full resource name of a channel used for sending notifications to the service producer. Google Service Management currently only supports [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification channel. To use Google Cloud Pub/Sub as the channel, this must be the name of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format documented in https://cloud.google.com/pubsub/docs/overview.
	ProducerNotificationChannel pulumi.StringPtrInput `pulumi:"producerNotificationChannel"`
	// Requirements that must be satisfied before a consumer project can use the service. Each requirement is of the form /; for example 'serviceusage.googleapis.com/billing-enabled'. For Google APIs, a Terms of Service requirement must be included here. Google Cloud APIs must include "serviceusage.googleapis.com/tos/cloud". Other Google APIs should include "serviceusage.googleapis.com/tos/universal". Additional ToS can be included based on the business needs.
	Requirements pulumi.StringArrayInput `pulumi:"requirements"`
	// A list of usage rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
	Rules UsageRuleArrayInput `pulumi:"rules"`
}

func (UsageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Usage)(nil)).Elem()
}

func (i UsageArgs) ToUsageOutput() UsageOutput {
	return i.ToUsageOutputWithContext(context.Background())
}

func (i UsageArgs) ToUsageOutputWithContext(ctx context.Context) UsageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageOutput)
}

func (i UsageArgs) ToUsagePtrOutput() UsagePtrOutput {
	return i.ToUsagePtrOutputWithContext(context.Background())
}

func (i UsageArgs) ToUsagePtrOutputWithContext(ctx context.Context) UsagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageOutput).ToUsagePtrOutputWithContext(ctx)
}

// UsagePtrInput is an input type that accepts UsageArgs, UsagePtr and UsagePtrOutput values.
// You can construct a concrete instance of `UsagePtrInput` via:
//
//          UsageArgs{...}
//
//  or:
//
//          nil
type UsagePtrInput interface {
	pulumi.Input

	ToUsagePtrOutput() UsagePtrOutput
	ToUsagePtrOutputWithContext(context.Context) UsagePtrOutput
}

type usagePtrType UsageArgs

func UsagePtr(v *UsageArgs) UsagePtrInput {
	return (*usagePtrType)(v)
}

func (*usagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Usage)(nil)).Elem()
}

func (i *usagePtrType) ToUsagePtrOutput() UsagePtrOutput {
	return i.ToUsagePtrOutputWithContext(context.Background())
}

func (i *usagePtrType) ToUsagePtrOutputWithContext(ctx context.Context) UsagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePtrOutput)
}

// Configuration controlling usage of a service.
type UsageOutput struct{ *pulumi.OutputState }

func (UsageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Usage)(nil)).Elem()
}

func (o UsageOutput) ToUsageOutput() UsageOutput {
	return o
}

func (o UsageOutput) ToUsageOutputWithContext(ctx context.Context) UsageOutput {
	return o
}

func (o UsageOutput) ToUsagePtrOutput() UsagePtrOutput {
	return o.ToUsagePtrOutputWithContext(context.Background())
}

func (o UsageOutput) ToUsagePtrOutputWithContext(ctx context.Context) UsagePtrOutput {
	return o.ApplyT(func(v Usage) *Usage {
		return &v
	}).(UsagePtrOutput)
}

// The full resource name of a channel used for sending notifications to the service producer. Google Service Management currently only supports [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification channel. To use Google Cloud Pub/Sub as the channel, this must be the name of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format documented in https://cloud.google.com/pubsub/docs/overview.
func (o UsageOutput) ProducerNotificationChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Usage) *string { return v.ProducerNotificationChannel }).(pulumi.StringPtrOutput)
}

// Requirements that must be satisfied before a consumer project can use the service. Each requirement is of the form /; for example 'serviceusage.googleapis.com/billing-enabled'. For Google APIs, a Terms of Service requirement must be included here. Google Cloud APIs must include "serviceusage.googleapis.com/tos/cloud". Other Google APIs should include "serviceusage.googleapis.com/tos/universal". Additional ToS can be included based on the business needs.
func (o UsageOutput) Requirements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Usage) []string { return v.Requirements }).(pulumi.StringArrayOutput)
}

// A list of usage rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
func (o UsageOutput) Rules() UsageRuleArrayOutput {
	return o.ApplyT(func(v Usage) []UsageRule { return v.Rules }).(UsageRuleArrayOutput)
}

type UsagePtrOutput struct{ *pulumi.OutputState }

func (UsagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Usage)(nil)).Elem()
}

func (o UsagePtrOutput) ToUsagePtrOutput() UsagePtrOutput {
	return o
}

func (o UsagePtrOutput) ToUsagePtrOutputWithContext(ctx context.Context) UsagePtrOutput {
	return o
}

func (o UsagePtrOutput) Elem() UsageOutput {
	return o.ApplyT(func(v *Usage) Usage { return *v }).(UsageOutput)
}

// The full resource name of a channel used for sending notifications to the service producer. Google Service Management currently only supports [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification channel. To use Google Cloud Pub/Sub as the channel, this must be the name of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format documented in https://cloud.google.com/pubsub/docs/overview.
func (o UsagePtrOutput) ProducerNotificationChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Usage) *string {
		if v == nil {
			return nil
		}
		return v.ProducerNotificationChannel
	}).(pulumi.StringPtrOutput)
}

// Requirements that must be satisfied before a consumer project can use the service. Each requirement is of the form /; for example 'serviceusage.googleapis.com/billing-enabled'. For Google APIs, a Terms of Service requirement must be included here. Google Cloud APIs must include "serviceusage.googleapis.com/tos/cloud". Other Google APIs should include "serviceusage.googleapis.com/tos/universal". Additional ToS can be included based on the business needs.
func (o UsagePtrOutput) Requirements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Usage) []string {
		if v == nil {
			return nil
		}
		return v.Requirements
	}).(pulumi.StringArrayOutput)
}

// A list of usage rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
func (o UsagePtrOutput) Rules() UsageRuleArrayOutput {
	return o.ApplyT(func(v *Usage) []UsageRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(UsageRuleArrayOutput)
}

// Usage configuration rules for the service. NOTE: Under development. Use this rule to configure unregistered calls for the service. Unregistered calls are calls that do not contain consumer project identity. (Example: calls that do not contain an API key). By default, API methods do not allow unregistered calls, and each method call must be identified by a consumer project identity. Use this rule to allow/disallow unregistered calls. Example of an API that wants to allow unregistered calls for entire service. usage: rules: - selector: "*" allow_unregistered_calls: true Example of a method that wants to allow unregistered calls. usage: rules: - selector: "google.example.library.v1.LibraryService.CreateBook" allow_unregistered_calls: true
type UsageRule struct {
	// If true, the selected method allows unregistered calls, e.g. calls that don't identify any user or application.
	AllowUnregisteredCalls *bool `pulumi:"allowUnregisteredCalls"`
	// Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.
	Selector *string `pulumi:"selector"`
	// If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud Endpoints to bypass checks for internal methods, such as service health check methods.
	SkipServiceControl *bool `pulumi:"skipServiceControl"`
}

// UsageRuleInput is an input type that accepts UsageRuleArgs and UsageRuleOutput values.
// You can construct a concrete instance of `UsageRuleInput` via:
//
//          UsageRuleArgs{...}
type UsageRuleInput interface {
	pulumi.Input

	ToUsageRuleOutput() UsageRuleOutput
	ToUsageRuleOutputWithContext(context.Context) UsageRuleOutput
}

// Usage configuration rules for the service. NOTE: Under development. Use this rule to configure unregistered calls for the service. Unregistered calls are calls that do not contain consumer project identity. (Example: calls that do not contain an API key). By default, API methods do not allow unregistered calls, and each method call must be identified by a consumer project identity. Use this rule to allow/disallow unregistered calls. Example of an API that wants to allow unregistered calls for entire service. usage: rules: - selector: "*" allow_unregistered_calls: true Example of a method that wants to allow unregistered calls. usage: rules: - selector: "google.example.library.v1.LibraryService.CreateBook" allow_unregistered_calls: true
type UsageRuleArgs struct {
	// If true, the selected method allows unregistered calls, e.g. calls that don't identify any user or application.
	AllowUnregisteredCalls pulumi.BoolPtrInput `pulumi:"allowUnregisteredCalls"`
	// Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	// If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud Endpoints to bypass checks for internal methods, such as service health check methods.
	SkipServiceControl pulumi.BoolPtrInput `pulumi:"skipServiceControl"`
}

func (UsageRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsageRule)(nil)).Elem()
}

func (i UsageRuleArgs) ToUsageRuleOutput() UsageRuleOutput {
	return i.ToUsageRuleOutputWithContext(context.Background())
}

func (i UsageRuleArgs) ToUsageRuleOutputWithContext(ctx context.Context) UsageRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageRuleOutput)
}

// UsageRuleArrayInput is an input type that accepts UsageRuleArray and UsageRuleArrayOutput values.
// You can construct a concrete instance of `UsageRuleArrayInput` via:
//
//          UsageRuleArray{ UsageRuleArgs{...} }
type UsageRuleArrayInput interface {
	pulumi.Input

	ToUsageRuleArrayOutput() UsageRuleArrayOutput
	ToUsageRuleArrayOutputWithContext(context.Context) UsageRuleArrayOutput
}

type UsageRuleArray []UsageRuleInput

func (UsageRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UsageRule)(nil)).Elem()
}

func (i UsageRuleArray) ToUsageRuleArrayOutput() UsageRuleArrayOutput {
	return i.ToUsageRuleArrayOutputWithContext(context.Background())
}

func (i UsageRuleArray) ToUsageRuleArrayOutputWithContext(ctx context.Context) UsageRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsageRuleArrayOutput)
}

// Usage configuration rules for the service. NOTE: Under development. Use this rule to configure unregistered calls for the service. Unregistered calls are calls that do not contain consumer project identity. (Example: calls that do not contain an API key). By default, API methods do not allow unregistered calls, and each method call must be identified by a consumer project identity. Use this rule to allow/disallow unregistered calls. Example of an API that wants to allow unregistered calls for entire service. usage: rules: - selector: "*" allow_unregistered_calls: true Example of a method that wants to allow unregistered calls. usage: rules: - selector: "google.example.library.v1.LibraryService.CreateBook" allow_unregistered_calls: true
type UsageRuleOutput struct{ *pulumi.OutputState }

func (UsageRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsageRule)(nil)).Elem()
}

func (o UsageRuleOutput) ToUsageRuleOutput() UsageRuleOutput {
	return o
}

func (o UsageRuleOutput) ToUsageRuleOutputWithContext(ctx context.Context) UsageRuleOutput {
	return o
}

// If true, the selected method allows unregistered calls, e.g. calls that don't identify any user or application.
func (o UsageRuleOutput) AllowUnregisteredCalls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UsageRule) *bool { return v.AllowUnregisteredCalls }).(pulumi.BoolPtrOutput)
}

// Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.
func (o UsageRuleOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsageRule) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

// If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud Endpoints to bypass checks for internal methods, such as service health check methods.
func (o UsageRuleOutput) SkipServiceControl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UsageRule) *bool { return v.SkipServiceControl }).(pulumi.BoolPtrOutput)
}

type UsageRuleArrayOutput struct{ *pulumi.OutputState }

func (UsageRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UsageRule)(nil)).Elem()
}

func (o UsageRuleArrayOutput) ToUsageRuleArrayOutput() UsageRuleArrayOutput {
	return o
}

func (o UsageRuleArrayOutput) ToUsageRuleArrayOutputWithContext(ctx context.Context) UsageRuleArrayOutput {
	return o
}

func (o UsageRuleArrayOutput) Index(i pulumi.IntInput) UsageRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UsageRule {
		return vs[0].([]UsageRule)[vs[1].(int)]
	}).(UsageRuleOutput)
}

func init() {
	pulumi.RegisterOutputType(ApiOutput{})
	pulumi.RegisterOutputType(ApiArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuthProviderOutput{})
	pulumi.RegisterOutputType(AuthProviderArrayOutput{})
	pulumi.RegisterOutputType(AuthRequirementOutput{})
	pulumi.RegisterOutputType(AuthRequirementArrayOutput{})
	pulumi.RegisterOutputType(AuthenticationOutput{})
	pulumi.RegisterOutputType(AuthenticationPtrOutput{})
	pulumi.RegisterOutputType(AuthenticationRuleOutput{})
	pulumi.RegisterOutputType(AuthenticationRuleArrayOutput{})
	pulumi.RegisterOutputType(BackendOutput{})
	pulumi.RegisterOutputType(BackendPtrOutput{})
	pulumi.RegisterOutputType(BackendRuleOutput{})
	pulumi.RegisterOutputType(BackendRuleArrayOutput{})
	pulumi.RegisterOutputType(BillingOutput{})
	pulumi.RegisterOutputType(BillingPtrOutput{})
	pulumi.RegisterOutputType(BillingDestinationOutput{})
	pulumi.RegisterOutputType(BillingDestinationArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(ContextOutput{})
	pulumi.RegisterOutputType(ContextPtrOutput{})
	pulumi.RegisterOutputType(ContextRuleOutput{})
	pulumi.RegisterOutputType(ContextRuleArrayOutput{})
	pulumi.RegisterOutputType(ControlOutput{})
	pulumi.RegisterOutputType(ControlPtrOutput{})
	pulumi.RegisterOutputType(CustomErrorOutput{})
	pulumi.RegisterOutputType(CustomErrorPtrOutput{})
	pulumi.RegisterOutputType(CustomErrorRuleOutput{})
	pulumi.RegisterOutputType(CustomErrorRuleArrayOutput{})
	pulumi.RegisterOutputType(CustomHttpPatternOutput{})
	pulumi.RegisterOutputType(CustomHttpPatternPtrOutput{})
	pulumi.RegisterOutputType(DeleteServiceStrategyOutput{})
	pulumi.RegisterOutputType(DeleteServiceStrategyPtrOutput{})
	pulumi.RegisterOutputType(DocumentationOutput{})
	pulumi.RegisterOutputType(DocumentationPtrOutput{})
	pulumi.RegisterOutputType(DocumentationRuleOutput{})
	pulumi.RegisterOutputType(DocumentationRuleArrayOutput{})
	pulumi.RegisterOutputType(EndpointOutput{})
	pulumi.RegisterOutputType(EndpointArrayOutput{})
	pulumi.RegisterOutputType(EnumOutput{})
	pulumi.RegisterOutputType(EnumArrayOutput{})
	pulumi.RegisterOutputType(EnumValueOutput{})
	pulumi.RegisterOutputType(EnumValueArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(FieldOutput{})
	pulumi.RegisterOutputType(FieldArrayOutput{})
	pulumi.RegisterOutputType(HttpOutput{})
	pulumi.RegisterOutputType(HttpPtrOutput{})
	pulumi.RegisterOutputType(HttpRuleOutput{})
	pulumi.RegisterOutputType(HttpRuleArrayOutput{})
	pulumi.RegisterOutputType(JwtLocationOutput{})
	pulumi.RegisterOutputType(JwtLocationArrayOutput{})
	pulumi.RegisterOutputType(LabelDescriptorOutput{})
	pulumi.RegisterOutputType(LabelDescriptorArrayOutput{})
	pulumi.RegisterOutputType(LogDescriptorOutput{})
	pulumi.RegisterOutputType(LogDescriptorArrayOutput{})
	pulumi.RegisterOutputType(LoggingOutput{})
	pulumi.RegisterOutputType(LoggingPtrOutput{})
	pulumi.RegisterOutputType(LoggingDestinationOutput{})
	pulumi.RegisterOutputType(LoggingDestinationArrayOutput{})
	pulumi.RegisterOutputType(MethodOutput{})
	pulumi.RegisterOutputType(MethodArrayOutput{})
	pulumi.RegisterOutputType(MetricDescriptorOutput{})
	pulumi.RegisterOutputType(MetricDescriptorArrayOutput{})
	pulumi.RegisterOutputType(MetricDescriptorMetadataOutput{})
	pulumi.RegisterOutputType(MetricDescriptorMetadataPtrOutput{})
	pulumi.RegisterOutputType(MetricRuleOutput{})
	pulumi.RegisterOutputType(MetricRuleArrayOutput{})
	pulumi.RegisterOutputType(MixinOutput{})
	pulumi.RegisterOutputType(MixinArrayOutput{})
	pulumi.RegisterOutputType(MonitoredResourceDescriptorOutput{})
	pulumi.RegisterOutputType(MonitoredResourceDescriptorArrayOutput{})
	pulumi.RegisterOutputType(MonitoringOutput{})
	pulumi.RegisterOutputType(MonitoringPtrOutput{})
	pulumi.RegisterOutputType(MonitoringDestinationOutput{})
	pulumi.RegisterOutputType(MonitoringDestinationArrayOutput{})
	pulumi.RegisterOutputType(OAuthRequirementsOutput{})
	pulumi.RegisterOutputType(OAuthRequirementsPtrOutput{})
	pulumi.RegisterOutputType(OptionOutput{})
	pulumi.RegisterOutputType(OptionArrayOutput{})
	pulumi.RegisterOutputType(PageOutput{})
	pulumi.RegisterOutputType(PageArrayOutput{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyPtrOutput{})
	pulumi.RegisterOutputType(QuotaOutput{})
	pulumi.RegisterOutputType(QuotaPtrOutput{})
	pulumi.RegisterOutputType(QuotaLimitOutput{})
	pulumi.RegisterOutputType(QuotaLimitArrayOutput{})
	pulumi.RegisterOutputType(SourceContextOutput{})
	pulumi.RegisterOutputType(SourceContextPtrOutput{})
	pulumi.RegisterOutputType(SourceInfoOutput{})
	pulumi.RegisterOutputType(SourceInfoPtrOutput{})
	pulumi.RegisterOutputType(SystemParameterOutput{})
	pulumi.RegisterOutputType(SystemParameterArrayOutput{})
	pulumi.RegisterOutputType(SystemParameterRuleOutput{})
	pulumi.RegisterOutputType(SystemParameterRuleArrayOutput{})
	pulumi.RegisterOutputType(SystemParametersOutput{})
	pulumi.RegisterOutputType(SystemParametersPtrOutput{})
	pulumi.RegisterOutputType(TrafficPercentStrategyOutput{})
	pulumi.RegisterOutputType(TrafficPercentStrategyPtrOutput{})
	pulumi.RegisterOutputType(TypeOutput{})
	pulumi.RegisterOutputType(TypeArrayOutput{})
	pulumi.RegisterOutputType(UsageOutput{})
	pulumi.RegisterOutputType(UsagePtrOutput{})
	pulumi.RegisterOutputType(UsageRuleOutput{})
	pulumi.RegisterOutputType(UsageRuleArrayOutput{})
}
