// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a PerfSampleSeries. May return any of the following error code(s): - NOT_FOUND - The specified PerfSampleSeries does not exist
func LookupPerfSampleSeries(ctx *pulumi.Context, args *LookupPerfSampleSeriesArgs, opts ...pulumi.InvokeOption) (*LookupPerfSampleSeriesResult, error) {
	var rv LookupPerfSampleSeriesResult
	err := ctx.Invoke("google-native:toolresults/v1beta3:getPerfSampleSeries", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPerfSampleSeriesArgs struct {
	ExecutionId    string  `pulumi:"executionId"`
	HistoryId      string  `pulumi:"historyId"`
	Project        *string `pulumi:"project"`
	SampleSeriesId string  `pulumi:"sampleSeriesId"`
	StepId         string  `pulumi:"stepId"`
}

type LookupPerfSampleSeriesResult struct {
	// Basic series represented by a line chart
	BasicPerfSampleSeries BasicPerfSampleSeriesResponse `pulumi:"basicPerfSampleSeries"`
	// A tool results execution ID.
	ExecutionId string `pulumi:"executionId"`
	// A tool results history ID.
	HistoryId string `pulumi:"historyId"`
	// The cloud project
	Project string `pulumi:"project"`
	// A sample series id
	SampleSeriesId string `pulumi:"sampleSeriesId"`
	// A tool results step ID.
	StepId string `pulumi:"stepId"`
}

func LookupPerfSampleSeriesOutput(ctx *pulumi.Context, args LookupPerfSampleSeriesOutputArgs, opts ...pulumi.InvokeOption) LookupPerfSampleSeriesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPerfSampleSeriesResult, error) {
			args := v.(LookupPerfSampleSeriesArgs)
			r, err := LookupPerfSampleSeries(ctx, &args, opts...)
			var s LookupPerfSampleSeriesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPerfSampleSeriesResultOutput)
}

type LookupPerfSampleSeriesOutputArgs struct {
	ExecutionId    pulumi.StringInput    `pulumi:"executionId"`
	HistoryId      pulumi.StringInput    `pulumi:"historyId"`
	Project        pulumi.StringPtrInput `pulumi:"project"`
	SampleSeriesId pulumi.StringInput    `pulumi:"sampleSeriesId"`
	StepId         pulumi.StringInput    `pulumi:"stepId"`
}

func (LookupPerfSampleSeriesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPerfSampleSeriesArgs)(nil)).Elem()
}

type LookupPerfSampleSeriesResultOutput struct{ *pulumi.OutputState }

func (LookupPerfSampleSeriesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPerfSampleSeriesResult)(nil)).Elem()
}

func (o LookupPerfSampleSeriesResultOutput) ToLookupPerfSampleSeriesResultOutput() LookupPerfSampleSeriesResultOutput {
	return o
}

func (o LookupPerfSampleSeriesResultOutput) ToLookupPerfSampleSeriesResultOutputWithContext(ctx context.Context) LookupPerfSampleSeriesResultOutput {
	return o
}

// Basic series represented by a line chart
func (o LookupPerfSampleSeriesResultOutput) BasicPerfSampleSeries() BasicPerfSampleSeriesResponseOutput {
	return o.ApplyT(func(v LookupPerfSampleSeriesResult) BasicPerfSampleSeriesResponse { return v.BasicPerfSampleSeries }).(BasicPerfSampleSeriesResponseOutput)
}

// A tool results execution ID.
func (o LookupPerfSampleSeriesResultOutput) ExecutionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPerfSampleSeriesResult) string { return v.ExecutionId }).(pulumi.StringOutput)
}

// A tool results history ID.
func (o LookupPerfSampleSeriesResultOutput) HistoryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPerfSampleSeriesResult) string { return v.HistoryId }).(pulumi.StringOutput)
}

// The cloud project
func (o LookupPerfSampleSeriesResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPerfSampleSeriesResult) string { return v.Project }).(pulumi.StringOutput)
}

// A sample series id
func (o LookupPerfSampleSeriesResultOutput) SampleSeriesId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPerfSampleSeriesResult) string { return v.SampleSeriesId }).(pulumi.StringOutput)
}

// A tool results step ID.
func (o LookupPerfSampleSeriesResultOutput) StepId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPerfSampleSeriesResult) string { return v.StepId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPerfSampleSeriesResultOutput{})
}
