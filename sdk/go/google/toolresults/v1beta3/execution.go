// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an Execution. The returned Execution will have the id set. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing History does not exist
// Auto-naming is currently not supported for this resource.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type Execution struct {
	pulumi.CustomResourceState

	// The time when the Execution status transitioned to COMPLETE. This value will be set automatically when state transitions to COMPLETE. - In response: set if the execution state is COMPLETE. - In create/update request: never set
	CompletionTime TimestampResponseOutput `pulumi:"completionTime"`
	// The time when the Execution was created. This value will be set automatically when CreateExecution is called. - In response: always set - In create/update request: never set
	CreationTime TimestampResponseOutput `pulumi:"creationTime"`
	// The dimensions along which different steps in this execution may vary. This must remain fixed over the life of the execution. Returns INVALID_ARGUMENT if this field is set in an update request. Returns INVALID_ARGUMENT if the same name occurs in more than one dimension_definition. Returns INVALID_ARGUMENT if the size of the list is over 100. - In response: present if set by create - In create request: optional - In update request: never set
	DimensionDefinitions MatrixDimensionDefinitionResponseArrayOutput `pulumi:"dimensionDefinitions"`
	// A unique identifier within a History for this Execution. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create/update request: never set
	ExecutionId pulumi.StringOutput `pulumi:"executionId"`
	HistoryId   pulumi.StringOutput `pulumi:"historyId"`
	// Classify the result, for example into SUCCESS or FAILURE - In response: present if set by create/update request - In create/update request: optional
	Outcome OutcomeResponseOutput `pulumi:"outcome"`
	Project pulumi.StringOutput   `pulumi:"project"`
	// A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Lightweight information about execution request. - In response: present if set by create - In create: optional - In update: optional
	Specification SpecificationResponseOutput `pulumi:"specification"`
	// The initial state is IN_PROGRESS. The only legal state transitions is from IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an invalid transition is requested. The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times. If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE. - In response always set - In create/update request: optional
	State pulumi.StringOutput `pulumi:"state"`
	// TestExecution Matrix ID that the TestExecutionService uses. - In response: present if set by create - In create: optional - In update: never set
	TestExecutionMatrixId pulumi.StringOutput `pulumi:"testExecutionMatrixId"`
}

// NewExecution registers a new resource with the given unique name, arguments, and options.
func NewExecution(ctx *pulumi.Context,
	name string, args *ExecutionArgs, opts ...pulumi.ResourceOption) (*Execution, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HistoryId == nil {
		return nil, errors.New("invalid value for required argument 'HistoryId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"historyId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Execution
	err := ctx.RegisterResource("google-native:toolresults/v1beta3:Execution", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExecution gets an existing Execution resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExecution(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExecutionState, opts ...pulumi.ResourceOption) (*Execution, error) {
	var resource Execution
	err := ctx.ReadResource("google-native:toolresults/v1beta3:Execution", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Execution resources.
type executionState struct {
}

type ExecutionState struct {
}

func (ExecutionState) ElementType() reflect.Type {
	return reflect.TypeOf((*executionState)(nil)).Elem()
}

type executionArgs struct {
	// The time when the Execution status transitioned to COMPLETE. This value will be set automatically when state transitions to COMPLETE. - In response: set if the execution state is COMPLETE. - In create/update request: never set
	CompletionTime *Timestamp `pulumi:"completionTime"`
	// The time when the Execution was created. This value will be set automatically when CreateExecution is called. - In response: always set - In create/update request: never set
	CreationTime *Timestamp `pulumi:"creationTime"`
	// The dimensions along which different steps in this execution may vary. This must remain fixed over the life of the execution. Returns INVALID_ARGUMENT if this field is set in an update request. Returns INVALID_ARGUMENT if the same name occurs in more than one dimension_definition. Returns INVALID_ARGUMENT if the size of the list is over 100. - In response: present if set by create - In create request: optional - In update request: never set
	DimensionDefinitions []MatrixDimensionDefinition `pulumi:"dimensionDefinitions"`
	// A unique identifier within a History for this Execution. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create/update request: never set
	ExecutionId *string `pulumi:"executionId"`
	HistoryId   string  `pulumi:"historyId"`
	// Classify the result, for example into SUCCESS or FAILURE - In response: present if set by create/update request - In create/update request: optional
	Outcome *Outcome `pulumi:"outcome"`
	Project *string  `pulumi:"project"`
	// A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.
	RequestId *string `pulumi:"requestId"`
	// Lightweight information about execution request. - In response: present if set by create - In create: optional - In update: optional
	Specification *Specification `pulumi:"specification"`
	// The initial state is IN_PROGRESS. The only legal state transitions is from IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an invalid transition is requested. The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times. If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE. - In response always set - In create/update request: optional
	State *ExecutionStateEnum `pulumi:"state"`
	// TestExecution Matrix ID that the TestExecutionService uses. - In response: present if set by create - In create: optional - In update: never set
	TestExecutionMatrixId *string `pulumi:"testExecutionMatrixId"`
}

// The set of arguments for constructing a Execution resource.
type ExecutionArgs struct {
	// The time when the Execution status transitioned to COMPLETE. This value will be set automatically when state transitions to COMPLETE. - In response: set if the execution state is COMPLETE. - In create/update request: never set
	CompletionTime TimestampPtrInput
	// The time when the Execution was created. This value will be set automatically when CreateExecution is called. - In response: always set - In create/update request: never set
	CreationTime TimestampPtrInput
	// The dimensions along which different steps in this execution may vary. This must remain fixed over the life of the execution. Returns INVALID_ARGUMENT if this field is set in an update request. Returns INVALID_ARGUMENT if the same name occurs in more than one dimension_definition. Returns INVALID_ARGUMENT if the size of the list is over 100. - In response: present if set by create - In create request: optional - In update request: never set
	DimensionDefinitions MatrixDimensionDefinitionArrayInput
	// A unique identifier within a History for this Execution. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create/update request: never set
	ExecutionId pulumi.StringPtrInput
	HistoryId   pulumi.StringInput
	// Classify the result, for example into SUCCESS or FAILURE - In response: present if set by create/update request - In create/update request: optional
	Outcome OutcomePtrInput
	Project pulumi.StringPtrInput
	// A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.
	RequestId pulumi.StringPtrInput
	// Lightweight information about execution request. - In response: present if set by create - In create: optional - In update: optional
	Specification SpecificationPtrInput
	// The initial state is IN_PROGRESS. The only legal state transitions is from IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an invalid transition is requested. The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times. If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE. - In response always set - In create/update request: optional
	State ExecutionStateEnumPtrInput
	// TestExecution Matrix ID that the TestExecutionService uses. - In response: present if set by create - In create: optional - In update: never set
	TestExecutionMatrixId pulumi.StringPtrInput
}

func (ExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*executionArgs)(nil)).Elem()
}

type ExecutionInput interface {
	pulumi.Input

	ToExecutionOutput() ExecutionOutput
	ToExecutionOutputWithContext(ctx context.Context) ExecutionOutput
}

func (*Execution) ElementType() reflect.Type {
	return reflect.TypeOf((**Execution)(nil)).Elem()
}

func (i *Execution) ToExecutionOutput() ExecutionOutput {
	return i.ToExecutionOutputWithContext(context.Background())
}

func (i *Execution) ToExecutionOutputWithContext(ctx context.Context) ExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionOutput)
}

type ExecutionOutput struct{ *pulumi.OutputState }

func (ExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Execution)(nil)).Elem()
}

func (o ExecutionOutput) ToExecutionOutput() ExecutionOutput {
	return o
}

func (o ExecutionOutput) ToExecutionOutputWithContext(ctx context.Context) ExecutionOutput {
	return o
}

// The time when the Execution status transitioned to COMPLETE. This value will be set automatically when state transitions to COMPLETE. - In response: set if the execution state is COMPLETE. - In create/update request: never set
func (o ExecutionOutput) CompletionTime() TimestampResponseOutput {
	return o.ApplyT(func(v *Execution) TimestampResponseOutput { return v.CompletionTime }).(TimestampResponseOutput)
}

// The time when the Execution was created. This value will be set automatically when CreateExecution is called. - In response: always set - In create/update request: never set
func (o ExecutionOutput) CreationTime() TimestampResponseOutput {
	return o.ApplyT(func(v *Execution) TimestampResponseOutput { return v.CreationTime }).(TimestampResponseOutput)
}

// The dimensions along which different steps in this execution may vary. This must remain fixed over the life of the execution. Returns INVALID_ARGUMENT if this field is set in an update request. Returns INVALID_ARGUMENT if the same name occurs in more than one dimension_definition. Returns INVALID_ARGUMENT if the size of the list is over 100. - In response: present if set by create - In create request: optional - In update request: never set
func (o ExecutionOutput) DimensionDefinitions() MatrixDimensionDefinitionResponseArrayOutput {
	return o.ApplyT(func(v *Execution) MatrixDimensionDefinitionResponseArrayOutput { return v.DimensionDefinitions }).(MatrixDimensionDefinitionResponseArrayOutput)
}

// A unique identifier within a History for this Execution. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create/update request: never set
func (o ExecutionOutput) ExecutionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringOutput { return v.ExecutionId }).(pulumi.StringOutput)
}

func (o ExecutionOutput) HistoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringOutput { return v.HistoryId }).(pulumi.StringOutput)
}

// Classify the result, for example into SUCCESS or FAILURE - In response: present if set by create/update request - In create/update request: optional
func (o ExecutionOutput) Outcome() OutcomeResponseOutput {
	return o.ApplyT(func(v *Execution) OutcomeResponseOutput { return v.Outcome }).(OutcomeResponseOutput)
}

func (o ExecutionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.
func (o ExecutionOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Lightweight information about execution request. - In response: present if set by create - In create: optional - In update: optional
func (o ExecutionOutput) Specification() SpecificationResponseOutput {
	return o.ApplyT(func(v *Execution) SpecificationResponseOutput { return v.Specification }).(SpecificationResponseOutput)
}

// The initial state is IN_PROGRESS. The only legal state transitions is from IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an invalid transition is requested. The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times. If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE. - In response always set - In create/update request: optional
func (o ExecutionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// TestExecution Matrix ID that the TestExecutionService uses. - In response: present if set by create - In create: optional - In update: never set
func (o ExecutionOutput) TestExecutionMatrixId() pulumi.StringOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringOutput { return v.TestExecutionMatrixId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionInput)(nil)).Elem(), &Execution{})
	pulumi.RegisterOutputType(ExecutionOutput{})
}
