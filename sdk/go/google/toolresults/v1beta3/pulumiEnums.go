// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BasicPerfSampleSeriesPerfMetricType pulumi.String

const (
	BasicPerfSampleSeriesPerfMetricTypePerfMetricTypeUnspecified = BasicPerfSampleSeriesPerfMetricType("perfMetricTypeUnspecified")
	BasicPerfSampleSeriesPerfMetricTypeMemory                    = BasicPerfSampleSeriesPerfMetricType("memory")
	BasicPerfSampleSeriesPerfMetricTypeCpu                       = BasicPerfSampleSeriesPerfMetricType("cpu")
	BasicPerfSampleSeriesPerfMetricTypeNetwork                   = BasicPerfSampleSeriesPerfMetricType("network")
	BasicPerfSampleSeriesPerfMetricTypeGraphics                  = BasicPerfSampleSeriesPerfMetricType("graphics")
)

func (BasicPerfSampleSeriesPerfMetricType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BasicPerfSampleSeriesPerfMetricType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BasicPerfSampleSeriesPerfMetricType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BasicPerfSampleSeriesPerfMetricType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BasicPerfSampleSeriesPerfMetricType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BasicPerfSampleSeriesPerfUnit pulumi.String

const (
	BasicPerfSampleSeriesPerfUnitPerfUnitUnspecified = BasicPerfSampleSeriesPerfUnit("perfUnitUnspecified")
	BasicPerfSampleSeriesPerfUnitKibibyte            = BasicPerfSampleSeriesPerfUnit("kibibyte")
	BasicPerfSampleSeriesPerfUnitPercent             = BasicPerfSampleSeriesPerfUnit("percent")
	BasicPerfSampleSeriesPerfUnitBytesPerSecond      = BasicPerfSampleSeriesPerfUnit("bytesPerSecond")
	BasicPerfSampleSeriesPerfUnitFramesPerSecond     = BasicPerfSampleSeriesPerfUnit("framesPerSecond")
	BasicPerfSampleSeriesPerfUnitByte                = BasicPerfSampleSeriesPerfUnit("byte")
)

func (BasicPerfSampleSeriesPerfUnit) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BasicPerfSampleSeriesPerfUnit) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BasicPerfSampleSeriesPerfUnit) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BasicPerfSampleSeriesPerfUnit) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BasicPerfSampleSeriesPerfUnit) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BasicPerfSampleSeriesSampleSeriesLabel pulumi.String

const (
	BasicPerfSampleSeriesSampleSeriesLabelSampleSeriesTypeUnspecified = BasicPerfSampleSeriesSampleSeriesLabel("sampleSeriesTypeUnspecified")
	// Memory sample series
	BasicPerfSampleSeriesSampleSeriesLabelMemoryRssPrivate = BasicPerfSampleSeriesSampleSeriesLabel("memoryRssPrivate")
	BasicPerfSampleSeriesSampleSeriesLabelMemoryRssShared  = BasicPerfSampleSeriesSampleSeriesLabel("memoryRssShared")
	BasicPerfSampleSeriesSampleSeriesLabelMemoryRssTotal   = BasicPerfSampleSeriesSampleSeriesLabel("memoryRssTotal")
	BasicPerfSampleSeriesSampleSeriesLabelMemoryTotal      = BasicPerfSampleSeriesSampleSeriesLabel("memoryTotal")
	// CPU sample series
	BasicPerfSampleSeriesSampleSeriesLabelCpuUser   = BasicPerfSampleSeriesSampleSeriesLabel("cpuUser")
	BasicPerfSampleSeriesSampleSeriesLabelCpuKernel = BasicPerfSampleSeriesSampleSeriesLabel("cpuKernel")
	BasicPerfSampleSeriesSampleSeriesLabelCpuTotal  = BasicPerfSampleSeriesSampleSeriesLabel("cpuTotal")
	// Network sample series
	BasicPerfSampleSeriesSampleSeriesLabelNtBytesTransferred = BasicPerfSampleSeriesSampleSeriesLabel("ntBytesTransferred")
	BasicPerfSampleSeriesSampleSeriesLabelNtBytesReceived    = BasicPerfSampleSeriesSampleSeriesLabel("ntBytesReceived")
	BasicPerfSampleSeriesSampleSeriesLabelNetworkSent        = BasicPerfSampleSeriesSampleSeriesLabel("networkSent")
	BasicPerfSampleSeriesSampleSeriesLabelNetworkReceived    = BasicPerfSampleSeriesSampleSeriesLabel("networkReceived")
	// Graphics sample series
	BasicPerfSampleSeriesSampleSeriesLabelGraphicsFrameRate = BasicPerfSampleSeriesSampleSeriesLabel("graphicsFrameRate")
)

func (BasicPerfSampleSeriesSampleSeriesLabel) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BasicPerfSampleSeriesSampleSeriesLabel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BasicPerfSampleSeriesSampleSeriesLabel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BasicPerfSampleSeriesSampleSeriesLabel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BasicPerfSampleSeriesSampleSeriesLabel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The initial state is IN_PROGRESS. The only legal state transitions is from IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an invalid transition is requested. The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times. If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE. - In response always set - In create/update request: optional
type ExecutionStateEnum pulumi.String

const (
	// Should never be in this state. Exists for proto deserialization backward compatibility.
	ExecutionStateEnumUnknownState = ExecutionStateEnum("unknownState")
	// The Execution/Step is created, ready to run, but not running yet. If an Execution/Step is created without initial state, it is assumed that the Execution/Step is in PENDING state.
	ExecutionStateEnumPending = ExecutionStateEnum("pending")
	// The Execution/Step is in progress.
	ExecutionStateEnumInProgress = ExecutionStateEnum("inProgress")
	// The finalized, immutable state. Steps/Executions in this state cannot be modified.
	ExecutionStateEnumComplete = ExecutionStateEnum("complete")
)

func (ExecutionStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ExecutionStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExecutionStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExecutionStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ExecutionStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The platform of the test history. - In response: always set. Returns the platform of the last execution if unknown.
type HistoryTestPlatform pulumi.String

const (
	HistoryTestPlatformUnknownPlatform = HistoryTestPlatform("unknownPlatform")
	HistoryTestPlatformAndroid         = HistoryTestPlatform("android")
	HistoryTestPlatformIos             = HistoryTestPlatform("ios")
)

func (HistoryTestPlatform) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e HistoryTestPlatform) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HistoryTestPlatform) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HistoryTestPlatform) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HistoryTestPlatform) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IndividualOutcomeOutcomeSummary pulumi.String

const (
	// Do not use. For proto versioning only.
	IndividualOutcomeOutcomeSummaryUnset = IndividualOutcomeOutcomeSummary("unset")
	// The test matrix run was successful, for instance: - All the test cases passed. - Robo did not detect a crash of the application under test.
	IndividualOutcomeOutcomeSummarySuccess = IndividualOutcomeOutcomeSummary("success")
	// A run failed, for instance: - One or more test case failed. - A test timed out. - The application under test crashed.
	IndividualOutcomeOutcomeSummaryFailure = IndividualOutcomeOutcomeSummary("failure")
	// Something unexpected happened. The run should still be considered unsuccessful but this is likely a transient problem and re-running the test might be successful.
	IndividualOutcomeOutcomeSummaryInconclusive = IndividualOutcomeOutcomeSummary("inconclusive")
	// All tests were skipped, for instance: - All device configurations were incompatible.
	IndividualOutcomeOutcomeSummarySkipped = IndividualOutcomeOutcomeSummary("skipped")
	// A group of steps that were run with the same configuration had both failure and success outcomes.
	IndividualOutcomeOutcomeSummaryFlaky = IndividualOutcomeOutcomeSummary("flaky")
)

func (IndividualOutcomeOutcomeSummary) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e IndividualOutcomeOutcomeSummary) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IndividualOutcomeOutcomeSummary) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IndividualOutcomeOutcomeSummary) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IndividualOutcomeOutcomeSummary) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The simplest way to interpret a result. Required
type OutcomeSummary pulumi.String

const (
	// Do not use. For proto versioning only.
	OutcomeSummaryUnset = OutcomeSummary("unset")
	// The test matrix run was successful, for instance: - All the test cases passed. - Robo did not detect a crash of the application under test.
	OutcomeSummarySuccess = OutcomeSummary("success")
	// A run failed, for instance: - One or more test case failed. - A test timed out. - The application under test crashed.
	OutcomeSummaryFailure = OutcomeSummary("failure")
	// Something unexpected happened. The run should still be considered unsuccessful but this is likely a transient problem and re-running the test might be successful.
	OutcomeSummaryInconclusive = OutcomeSummary("inconclusive")
	// All tests were skipped, for instance: - All device configurations were incompatible.
	OutcomeSummarySkipped = OutcomeSummary("skipped")
	// A group of steps that were run with the same configuration had both failure and success outcomes.
	OutcomeSummaryFlaky = OutcomeSummary("flaky")
)

func (OutcomeSummary) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e OutcomeSummary) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OutcomeSummary) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OutcomeSummary) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OutcomeSummary) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Rollup test status of multiple steps that were run with the same configuration as a group.
type PrimaryStepRollUp pulumi.String

const (
	// Do not use. For proto versioning only.
	PrimaryStepRollUpUnset = PrimaryStepRollUp("unset")
	// The test matrix run was successful, for instance: - All the test cases passed. - Robo did not detect a crash of the application under test.
	PrimaryStepRollUpSuccess = PrimaryStepRollUp("success")
	// A run failed, for instance: - One or more test case failed. - A test timed out. - The application under test crashed.
	PrimaryStepRollUpFailure = PrimaryStepRollUp("failure")
	// Something unexpected happened. The run should still be considered unsuccessful but this is likely a transient problem and re-running the test might be successful.
	PrimaryStepRollUpInconclusive = PrimaryStepRollUp("inconclusive")
	// All tests were skipped, for instance: - All device configurations were incompatible.
	PrimaryStepRollUpSkipped = PrimaryStepRollUp("skipped")
	// A group of steps that were run with the same configuration had both failure and success outcomes.
	PrimaryStepRollUpFlaky = PrimaryStepRollUp("flaky")
)

func (PrimaryStepRollUp) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e PrimaryStepRollUp) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PrimaryStepRollUp) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PrimaryStepRollUp) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PrimaryStepRollUp) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The initial state is IN_PROGRESS. The only legal state transitions are * IN_PROGRESS -> COMPLETE A PRECONDITION_FAILED will be returned if an invalid transition is requested. It is valid to create Step with a state set to COMPLETE. The state can only be set to COMPLETE once. A PRECONDITION_FAILED will be returned if the state is set to COMPLETE multiple times. - In response: always set - In create/update request: optional
type StepStateEnum pulumi.String

const (
	// Should never be in this state. Exists for proto deserialization backward compatibility.
	StepStateEnumUnknownState = StepStateEnum("unknownState")
	// The Execution/Step is created, ready to run, but not running yet. If an Execution/Step is created without initial state, it is assumed that the Execution/Step is in PENDING state.
	StepStateEnumPending = StepStateEnum("pending")
	// The Execution/Step is in progress.
	StepStateEnumInProgress = StepStateEnum("inProgress")
	// The finalized, immutable state. Steps/Executions in this state cannot be modified.
	StepStateEnumComplete = StepStateEnum("complete")
)

func (StepStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e StepStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StepStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StepStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StepStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Category of issue. Required.
type TestIssueCategory pulumi.String

const (
	// Default unspecified category. Do not use. For versioning only.
	TestIssueCategoryUnspecifiedCategory = TestIssueCategory("unspecifiedCategory")
	// Issue is not specific to a particular test kind (e.g., a native crash).
	TestIssueCategoryCommon = TestIssueCategory("common")
	// Issue is specific to Robo run.
	TestIssueCategoryRobo = TestIssueCategory("robo")
)

func (TestIssueCategory) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e TestIssueCategory) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TestIssueCategory) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TestIssueCategory) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TestIssueCategory) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Severity of issue. Required.
type TestIssueSeverity pulumi.String

const (
	// Default unspecified severity. Do not use. For versioning only.
	TestIssueSeverityUnspecifiedSeverity = TestIssueSeverity("unspecifiedSeverity")
	// Non critical issue, providing users with some info about the test run.
	TestIssueSeverityInfo = TestIssueSeverity("info")
	// Non critical issue, providing users with some hints on improving their testing experience, e.g., suggesting to use Game Loops.
	TestIssueSeveritySuggestion = TestIssueSeverity("suggestion")
	// Potentially critical issue.
	TestIssueSeverityWarning = TestIssueSeverity("warning")
	// Critical issue.
	TestIssueSeveritySevere = TestIssueSeverity("severe")
)

func (TestIssueSeverity) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e TestIssueSeverity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TestIssueSeverity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TestIssueSeverity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TestIssueSeverity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Type of issue. Required.
type TestIssueType pulumi.String

const (
	// Default unspecified type. Do not use. For versioning only.
	TestIssueTypeUnspecifiedType = TestIssueType("unspecifiedType")
	// Issue is a fatal exception.
	TestIssueTypeFatalException = TestIssueType("fatalException")
	// Issue is a native crash.
	TestIssueTypeNativeCrash = TestIssueType("nativeCrash")
	// Issue is an ANR crash.
	TestIssueTypeAnr = TestIssueType("anr")
	// Issue is an unused robo directive.
	TestIssueTypeUnusedRoboDirective = TestIssueType("unusedRoboDirective")
	// Issue is a suggestion to use orchestrator.
	TestIssueTypeCompatibleWithOrchestrator = TestIssueType("compatibleWithOrchestrator")
	// Issue with finding a launcher activity
	TestIssueTypeLauncherActivityNotFound = TestIssueType("launcherActivityNotFound")
	// Issue with resolving a user-provided intent to start an activity
	TestIssueTypeStartActivityNotFound = TestIssueType("startActivityNotFound")
	// A Robo script was not fully executed.
	TestIssueTypeIncompleteRoboScriptExecution = TestIssueType("incompleteRoboScriptExecution")
	// A Robo script was fully and successfully executed.
	TestIssueTypeCompleteRoboScriptExecution = TestIssueType("completeRoboScriptExecution")
	// The APK failed to install.
	TestIssueTypeFailedToInstall = TestIssueType("failedToInstall")
	// The app-under-test has deep links, but none were provided to Robo.
	TestIssueTypeAvailableDeepLinks = TestIssueType("availableDeepLinks")
	// App accessed a non-sdk Api.
	TestIssueTypeNonSdkApiUsageViolation = TestIssueType("nonSdkApiUsageViolation")
	// App accessed a non-sdk Api (new detailed report)
	TestIssueTypeNonSdkApiUsageReport = TestIssueType("nonSdkApiUsageReport")
	// Robo crawl encountered at least one screen with elements that are not Android UI widgets.
	TestIssueTypeEncounteredNonAndroidUiWidgetScreen = TestIssueType("encounteredNonAndroidUiWidgetScreen")
	// Robo crawl encountered at least one probable login screen.
	TestIssueTypeEncounteredLoginScreen = TestIssueType("encounteredLoginScreen")
	// Robo signed in with Google.
	TestIssueTypePerformedGoogleLogin = TestIssueType("performedGoogleLogin")
	// iOS App crashed with an exception.
	TestIssueTypeIosException = TestIssueType("iosException")
	// iOS App crashed without an exception (e.g. killed).
	TestIssueTypeIosCrash = TestIssueType("iosCrash")
	// Robo crawl involved performing some monkey actions.
	TestIssueTypePerformedMonkeyActions = TestIssueType("performedMonkeyActions")
	// Robo crawl used a Robo directive.
	TestIssueTypeUsedRoboDirective = TestIssueType("usedRoboDirective")
	// Robo crawl used a Robo directive to ignore an UI element.
	TestIssueTypeUsedRoboIgnoreDirective = TestIssueType("usedRoboIgnoreDirective")
	// Robo did not crawl some potentially important parts of the app.
	TestIssueTypeInsufficientCoverage = TestIssueType("insufficientCoverage")
	// Robo crawl involved some in-app purchases.
	TestIssueTypeInAppPurchases = TestIssueType("inAppPurchases")
	// Crash dialog was detected during the test execution
	TestIssueTypeCrashDialogError = TestIssueType("crashDialogError")
	// UI element depth is greater than the threshold
	TestIssueTypeUiElementsTooDeep = TestIssueType("uiElementsTooDeep")
	// Blank screen is found in the Robo crawl
	TestIssueTypeBlankScreen = TestIssueType("blankScreen")
	// Overlapping UI elements are found in the Robo crawl
	TestIssueTypeOverlappingUiElements = TestIssueType("overlappingUiElements")
	// An uncaught Unity exception was detected (these don't crash apps).
	TestIssueTypeUnityException = TestIssueType("unityException")
	// Device running out of memory was detected
	TestIssueTypeDeviceOutOfMemory = TestIssueType("deviceOutOfMemory")
	// Problems detected while collecting logcat
	TestIssueTypeLogcatCollectionError = TestIssueType("logcatCollectionError")
)

func (TestIssueType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e TestIssueType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TestIssueType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TestIssueType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TestIssueType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
