// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type BasicPerfSampleSeriesPerfMetricType string

const (
	BasicPerfSampleSeriesPerfMetricTypePerfMetricTypeUnspecified = BasicPerfSampleSeriesPerfMetricType("perfMetricTypeUnspecified")
	BasicPerfSampleSeriesPerfMetricTypeMemory                    = BasicPerfSampleSeriesPerfMetricType("memory")
	BasicPerfSampleSeriesPerfMetricTypeCpu                       = BasicPerfSampleSeriesPerfMetricType("cpu")
	BasicPerfSampleSeriesPerfMetricTypeNetwork                   = BasicPerfSampleSeriesPerfMetricType("network")
	BasicPerfSampleSeriesPerfMetricTypeGraphics                  = BasicPerfSampleSeriesPerfMetricType("graphics")
)

func (BasicPerfSampleSeriesPerfMetricType) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicPerfSampleSeriesPerfMetricType)(nil)).Elem()
}

func (e BasicPerfSampleSeriesPerfMetricType) ToBasicPerfSampleSeriesPerfMetricTypeOutput() BasicPerfSampleSeriesPerfMetricTypeOutput {
	return pulumi.ToOutput(e).(BasicPerfSampleSeriesPerfMetricTypeOutput)
}

func (e BasicPerfSampleSeriesPerfMetricType) ToBasicPerfSampleSeriesPerfMetricTypeOutputWithContext(ctx context.Context) BasicPerfSampleSeriesPerfMetricTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BasicPerfSampleSeriesPerfMetricTypeOutput)
}

func (e BasicPerfSampleSeriesPerfMetricType) ToBasicPerfSampleSeriesPerfMetricTypePtrOutput() BasicPerfSampleSeriesPerfMetricTypePtrOutput {
	return e.ToBasicPerfSampleSeriesPerfMetricTypePtrOutputWithContext(context.Background())
}

func (e BasicPerfSampleSeriesPerfMetricType) ToBasicPerfSampleSeriesPerfMetricTypePtrOutputWithContext(ctx context.Context) BasicPerfSampleSeriesPerfMetricTypePtrOutput {
	return BasicPerfSampleSeriesPerfMetricType(e).ToBasicPerfSampleSeriesPerfMetricTypeOutputWithContext(ctx).ToBasicPerfSampleSeriesPerfMetricTypePtrOutputWithContext(ctx)
}

func (e BasicPerfSampleSeriesPerfMetricType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BasicPerfSampleSeriesPerfMetricType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BasicPerfSampleSeriesPerfMetricType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BasicPerfSampleSeriesPerfMetricType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BasicPerfSampleSeriesPerfMetricTypeOutput struct{ *pulumi.OutputState }

func (BasicPerfSampleSeriesPerfMetricTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicPerfSampleSeriesPerfMetricType)(nil)).Elem()
}

func (o BasicPerfSampleSeriesPerfMetricTypeOutput) ToBasicPerfSampleSeriesPerfMetricTypeOutput() BasicPerfSampleSeriesPerfMetricTypeOutput {
	return o
}

func (o BasicPerfSampleSeriesPerfMetricTypeOutput) ToBasicPerfSampleSeriesPerfMetricTypeOutputWithContext(ctx context.Context) BasicPerfSampleSeriesPerfMetricTypeOutput {
	return o
}

func (o BasicPerfSampleSeriesPerfMetricTypeOutput) ToBasicPerfSampleSeriesPerfMetricTypePtrOutput() BasicPerfSampleSeriesPerfMetricTypePtrOutput {
	return o.ToBasicPerfSampleSeriesPerfMetricTypePtrOutputWithContext(context.Background())
}

func (o BasicPerfSampleSeriesPerfMetricTypeOutput) ToBasicPerfSampleSeriesPerfMetricTypePtrOutputWithContext(ctx context.Context) BasicPerfSampleSeriesPerfMetricTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BasicPerfSampleSeriesPerfMetricType) *BasicPerfSampleSeriesPerfMetricType {
		return &v
	}).(BasicPerfSampleSeriesPerfMetricTypePtrOutput)
}

func (o BasicPerfSampleSeriesPerfMetricTypeOutput) ToOutput(ctx context.Context) pulumix.Output[BasicPerfSampleSeriesPerfMetricType] {
	return pulumix.Output[BasicPerfSampleSeriesPerfMetricType]{
		OutputState: o.OutputState,
	}
}

func (o BasicPerfSampleSeriesPerfMetricTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BasicPerfSampleSeriesPerfMetricTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BasicPerfSampleSeriesPerfMetricType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BasicPerfSampleSeriesPerfMetricTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BasicPerfSampleSeriesPerfMetricTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BasicPerfSampleSeriesPerfMetricType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BasicPerfSampleSeriesPerfMetricTypePtrOutput struct{ *pulumi.OutputState }

func (BasicPerfSampleSeriesPerfMetricTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicPerfSampleSeriesPerfMetricType)(nil)).Elem()
}

func (o BasicPerfSampleSeriesPerfMetricTypePtrOutput) ToBasicPerfSampleSeriesPerfMetricTypePtrOutput() BasicPerfSampleSeriesPerfMetricTypePtrOutput {
	return o
}

func (o BasicPerfSampleSeriesPerfMetricTypePtrOutput) ToBasicPerfSampleSeriesPerfMetricTypePtrOutputWithContext(ctx context.Context) BasicPerfSampleSeriesPerfMetricTypePtrOutput {
	return o
}

func (o BasicPerfSampleSeriesPerfMetricTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BasicPerfSampleSeriesPerfMetricType] {
	return pulumix.Output[*BasicPerfSampleSeriesPerfMetricType]{
		OutputState: o.OutputState,
	}
}

func (o BasicPerfSampleSeriesPerfMetricTypePtrOutput) Elem() BasicPerfSampleSeriesPerfMetricTypeOutput {
	return o.ApplyT(func(v *BasicPerfSampleSeriesPerfMetricType) BasicPerfSampleSeriesPerfMetricType {
		if v != nil {
			return *v
		}
		var ret BasicPerfSampleSeriesPerfMetricType
		return ret
	}).(BasicPerfSampleSeriesPerfMetricTypeOutput)
}

func (o BasicPerfSampleSeriesPerfMetricTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BasicPerfSampleSeriesPerfMetricTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BasicPerfSampleSeriesPerfMetricType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BasicPerfSampleSeriesPerfMetricTypeInput is an input type that accepts BasicPerfSampleSeriesPerfMetricTypeArgs and BasicPerfSampleSeriesPerfMetricTypeOutput values.
// You can construct a concrete instance of `BasicPerfSampleSeriesPerfMetricTypeInput` via:
//
//	BasicPerfSampleSeriesPerfMetricTypeArgs{...}
type BasicPerfSampleSeriesPerfMetricTypeInput interface {
	pulumi.Input

	ToBasicPerfSampleSeriesPerfMetricTypeOutput() BasicPerfSampleSeriesPerfMetricTypeOutput
	ToBasicPerfSampleSeriesPerfMetricTypeOutputWithContext(context.Context) BasicPerfSampleSeriesPerfMetricTypeOutput
}

var basicPerfSampleSeriesPerfMetricTypePtrType = reflect.TypeOf((**BasicPerfSampleSeriesPerfMetricType)(nil)).Elem()

type BasicPerfSampleSeriesPerfMetricTypePtrInput interface {
	pulumi.Input

	ToBasicPerfSampleSeriesPerfMetricTypePtrOutput() BasicPerfSampleSeriesPerfMetricTypePtrOutput
	ToBasicPerfSampleSeriesPerfMetricTypePtrOutputWithContext(context.Context) BasicPerfSampleSeriesPerfMetricTypePtrOutput
}

type basicPerfSampleSeriesPerfMetricTypePtr string

func BasicPerfSampleSeriesPerfMetricTypePtr(v string) BasicPerfSampleSeriesPerfMetricTypePtrInput {
	return (*basicPerfSampleSeriesPerfMetricTypePtr)(&v)
}

func (*basicPerfSampleSeriesPerfMetricTypePtr) ElementType() reflect.Type {
	return basicPerfSampleSeriesPerfMetricTypePtrType
}

func (in *basicPerfSampleSeriesPerfMetricTypePtr) ToBasicPerfSampleSeriesPerfMetricTypePtrOutput() BasicPerfSampleSeriesPerfMetricTypePtrOutput {
	return pulumi.ToOutput(in).(BasicPerfSampleSeriesPerfMetricTypePtrOutput)
}

func (in *basicPerfSampleSeriesPerfMetricTypePtr) ToBasicPerfSampleSeriesPerfMetricTypePtrOutputWithContext(ctx context.Context) BasicPerfSampleSeriesPerfMetricTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BasicPerfSampleSeriesPerfMetricTypePtrOutput)
}

func (in *basicPerfSampleSeriesPerfMetricTypePtr) ToOutput(ctx context.Context) pulumix.Output[*BasicPerfSampleSeriesPerfMetricType] {
	return pulumix.Output[*BasicPerfSampleSeriesPerfMetricType]{
		OutputState: in.ToBasicPerfSampleSeriesPerfMetricTypePtrOutputWithContext(ctx).OutputState,
	}
}

type BasicPerfSampleSeriesPerfUnit string

const (
	BasicPerfSampleSeriesPerfUnitPerfUnitUnspecified = BasicPerfSampleSeriesPerfUnit("perfUnitUnspecified")
	BasicPerfSampleSeriesPerfUnitKibibyte            = BasicPerfSampleSeriesPerfUnit("kibibyte")
	BasicPerfSampleSeriesPerfUnitPercent             = BasicPerfSampleSeriesPerfUnit("percent")
	BasicPerfSampleSeriesPerfUnitBytesPerSecond      = BasicPerfSampleSeriesPerfUnit("bytesPerSecond")
	BasicPerfSampleSeriesPerfUnitFramesPerSecond     = BasicPerfSampleSeriesPerfUnit("framesPerSecond")
	BasicPerfSampleSeriesPerfUnitByte                = BasicPerfSampleSeriesPerfUnit("byte")
)

func (BasicPerfSampleSeriesPerfUnit) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicPerfSampleSeriesPerfUnit)(nil)).Elem()
}

func (e BasicPerfSampleSeriesPerfUnit) ToBasicPerfSampleSeriesPerfUnitOutput() BasicPerfSampleSeriesPerfUnitOutput {
	return pulumi.ToOutput(e).(BasicPerfSampleSeriesPerfUnitOutput)
}

func (e BasicPerfSampleSeriesPerfUnit) ToBasicPerfSampleSeriesPerfUnitOutputWithContext(ctx context.Context) BasicPerfSampleSeriesPerfUnitOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BasicPerfSampleSeriesPerfUnitOutput)
}

func (e BasicPerfSampleSeriesPerfUnit) ToBasicPerfSampleSeriesPerfUnitPtrOutput() BasicPerfSampleSeriesPerfUnitPtrOutput {
	return e.ToBasicPerfSampleSeriesPerfUnitPtrOutputWithContext(context.Background())
}

func (e BasicPerfSampleSeriesPerfUnit) ToBasicPerfSampleSeriesPerfUnitPtrOutputWithContext(ctx context.Context) BasicPerfSampleSeriesPerfUnitPtrOutput {
	return BasicPerfSampleSeriesPerfUnit(e).ToBasicPerfSampleSeriesPerfUnitOutputWithContext(ctx).ToBasicPerfSampleSeriesPerfUnitPtrOutputWithContext(ctx)
}

func (e BasicPerfSampleSeriesPerfUnit) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BasicPerfSampleSeriesPerfUnit) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BasicPerfSampleSeriesPerfUnit) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BasicPerfSampleSeriesPerfUnit) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BasicPerfSampleSeriesPerfUnitOutput struct{ *pulumi.OutputState }

func (BasicPerfSampleSeriesPerfUnitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicPerfSampleSeriesPerfUnit)(nil)).Elem()
}

func (o BasicPerfSampleSeriesPerfUnitOutput) ToBasicPerfSampleSeriesPerfUnitOutput() BasicPerfSampleSeriesPerfUnitOutput {
	return o
}

func (o BasicPerfSampleSeriesPerfUnitOutput) ToBasicPerfSampleSeriesPerfUnitOutputWithContext(ctx context.Context) BasicPerfSampleSeriesPerfUnitOutput {
	return o
}

func (o BasicPerfSampleSeriesPerfUnitOutput) ToBasicPerfSampleSeriesPerfUnitPtrOutput() BasicPerfSampleSeriesPerfUnitPtrOutput {
	return o.ToBasicPerfSampleSeriesPerfUnitPtrOutputWithContext(context.Background())
}

func (o BasicPerfSampleSeriesPerfUnitOutput) ToBasicPerfSampleSeriesPerfUnitPtrOutputWithContext(ctx context.Context) BasicPerfSampleSeriesPerfUnitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BasicPerfSampleSeriesPerfUnit) *BasicPerfSampleSeriesPerfUnit {
		return &v
	}).(BasicPerfSampleSeriesPerfUnitPtrOutput)
}

func (o BasicPerfSampleSeriesPerfUnitOutput) ToOutput(ctx context.Context) pulumix.Output[BasicPerfSampleSeriesPerfUnit] {
	return pulumix.Output[BasicPerfSampleSeriesPerfUnit]{
		OutputState: o.OutputState,
	}
}

func (o BasicPerfSampleSeriesPerfUnitOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BasicPerfSampleSeriesPerfUnitOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BasicPerfSampleSeriesPerfUnit) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BasicPerfSampleSeriesPerfUnitOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BasicPerfSampleSeriesPerfUnitOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BasicPerfSampleSeriesPerfUnit) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BasicPerfSampleSeriesPerfUnitPtrOutput struct{ *pulumi.OutputState }

func (BasicPerfSampleSeriesPerfUnitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicPerfSampleSeriesPerfUnit)(nil)).Elem()
}

func (o BasicPerfSampleSeriesPerfUnitPtrOutput) ToBasicPerfSampleSeriesPerfUnitPtrOutput() BasicPerfSampleSeriesPerfUnitPtrOutput {
	return o
}

func (o BasicPerfSampleSeriesPerfUnitPtrOutput) ToBasicPerfSampleSeriesPerfUnitPtrOutputWithContext(ctx context.Context) BasicPerfSampleSeriesPerfUnitPtrOutput {
	return o
}

func (o BasicPerfSampleSeriesPerfUnitPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BasicPerfSampleSeriesPerfUnit] {
	return pulumix.Output[*BasicPerfSampleSeriesPerfUnit]{
		OutputState: o.OutputState,
	}
}

func (o BasicPerfSampleSeriesPerfUnitPtrOutput) Elem() BasicPerfSampleSeriesPerfUnitOutput {
	return o.ApplyT(func(v *BasicPerfSampleSeriesPerfUnit) BasicPerfSampleSeriesPerfUnit {
		if v != nil {
			return *v
		}
		var ret BasicPerfSampleSeriesPerfUnit
		return ret
	}).(BasicPerfSampleSeriesPerfUnitOutput)
}

func (o BasicPerfSampleSeriesPerfUnitPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BasicPerfSampleSeriesPerfUnitPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BasicPerfSampleSeriesPerfUnit) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BasicPerfSampleSeriesPerfUnitInput is an input type that accepts BasicPerfSampleSeriesPerfUnitArgs and BasicPerfSampleSeriesPerfUnitOutput values.
// You can construct a concrete instance of `BasicPerfSampleSeriesPerfUnitInput` via:
//
//	BasicPerfSampleSeriesPerfUnitArgs{...}
type BasicPerfSampleSeriesPerfUnitInput interface {
	pulumi.Input

	ToBasicPerfSampleSeriesPerfUnitOutput() BasicPerfSampleSeriesPerfUnitOutput
	ToBasicPerfSampleSeriesPerfUnitOutputWithContext(context.Context) BasicPerfSampleSeriesPerfUnitOutput
}

var basicPerfSampleSeriesPerfUnitPtrType = reflect.TypeOf((**BasicPerfSampleSeriesPerfUnit)(nil)).Elem()

type BasicPerfSampleSeriesPerfUnitPtrInput interface {
	pulumi.Input

	ToBasicPerfSampleSeriesPerfUnitPtrOutput() BasicPerfSampleSeriesPerfUnitPtrOutput
	ToBasicPerfSampleSeriesPerfUnitPtrOutputWithContext(context.Context) BasicPerfSampleSeriesPerfUnitPtrOutput
}

type basicPerfSampleSeriesPerfUnitPtr string

func BasicPerfSampleSeriesPerfUnitPtr(v string) BasicPerfSampleSeriesPerfUnitPtrInput {
	return (*basicPerfSampleSeriesPerfUnitPtr)(&v)
}

func (*basicPerfSampleSeriesPerfUnitPtr) ElementType() reflect.Type {
	return basicPerfSampleSeriesPerfUnitPtrType
}

func (in *basicPerfSampleSeriesPerfUnitPtr) ToBasicPerfSampleSeriesPerfUnitPtrOutput() BasicPerfSampleSeriesPerfUnitPtrOutput {
	return pulumi.ToOutput(in).(BasicPerfSampleSeriesPerfUnitPtrOutput)
}

func (in *basicPerfSampleSeriesPerfUnitPtr) ToBasicPerfSampleSeriesPerfUnitPtrOutputWithContext(ctx context.Context) BasicPerfSampleSeriesPerfUnitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BasicPerfSampleSeriesPerfUnitPtrOutput)
}

func (in *basicPerfSampleSeriesPerfUnitPtr) ToOutput(ctx context.Context) pulumix.Output[*BasicPerfSampleSeriesPerfUnit] {
	return pulumix.Output[*BasicPerfSampleSeriesPerfUnit]{
		OutputState: in.ToBasicPerfSampleSeriesPerfUnitPtrOutputWithContext(ctx).OutputState,
	}
}

type BasicPerfSampleSeriesSampleSeriesLabel string

const (
	BasicPerfSampleSeriesSampleSeriesLabelSampleSeriesTypeUnspecified = BasicPerfSampleSeriesSampleSeriesLabel("sampleSeriesTypeUnspecified")
	// Memory sample series
	BasicPerfSampleSeriesSampleSeriesLabelMemoryRssPrivate = BasicPerfSampleSeriesSampleSeriesLabel("memoryRssPrivate")
	BasicPerfSampleSeriesSampleSeriesLabelMemoryRssShared  = BasicPerfSampleSeriesSampleSeriesLabel("memoryRssShared")
	BasicPerfSampleSeriesSampleSeriesLabelMemoryRssTotal   = BasicPerfSampleSeriesSampleSeriesLabel("memoryRssTotal")
	BasicPerfSampleSeriesSampleSeriesLabelMemoryTotal      = BasicPerfSampleSeriesSampleSeriesLabel("memoryTotal")
	// CPU sample series
	BasicPerfSampleSeriesSampleSeriesLabelCpuUser   = BasicPerfSampleSeriesSampleSeriesLabel("cpuUser")
	BasicPerfSampleSeriesSampleSeriesLabelCpuKernel = BasicPerfSampleSeriesSampleSeriesLabel("cpuKernel")
	BasicPerfSampleSeriesSampleSeriesLabelCpuTotal  = BasicPerfSampleSeriesSampleSeriesLabel("cpuTotal")
	// Network sample series
	BasicPerfSampleSeriesSampleSeriesLabelNtBytesTransferred = BasicPerfSampleSeriesSampleSeriesLabel("ntBytesTransferred")
	BasicPerfSampleSeriesSampleSeriesLabelNtBytesReceived    = BasicPerfSampleSeriesSampleSeriesLabel("ntBytesReceived")
	BasicPerfSampleSeriesSampleSeriesLabelNetworkSent        = BasicPerfSampleSeriesSampleSeriesLabel("networkSent")
	BasicPerfSampleSeriesSampleSeriesLabelNetworkReceived    = BasicPerfSampleSeriesSampleSeriesLabel("networkReceived")
	// Graphics sample series
	BasicPerfSampleSeriesSampleSeriesLabelGraphicsFrameRate = BasicPerfSampleSeriesSampleSeriesLabel("graphicsFrameRate")
)

func (BasicPerfSampleSeriesSampleSeriesLabel) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicPerfSampleSeriesSampleSeriesLabel)(nil)).Elem()
}

func (e BasicPerfSampleSeriesSampleSeriesLabel) ToBasicPerfSampleSeriesSampleSeriesLabelOutput() BasicPerfSampleSeriesSampleSeriesLabelOutput {
	return pulumi.ToOutput(e).(BasicPerfSampleSeriesSampleSeriesLabelOutput)
}

func (e BasicPerfSampleSeriesSampleSeriesLabel) ToBasicPerfSampleSeriesSampleSeriesLabelOutputWithContext(ctx context.Context) BasicPerfSampleSeriesSampleSeriesLabelOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BasicPerfSampleSeriesSampleSeriesLabelOutput)
}

func (e BasicPerfSampleSeriesSampleSeriesLabel) ToBasicPerfSampleSeriesSampleSeriesLabelPtrOutput() BasicPerfSampleSeriesSampleSeriesLabelPtrOutput {
	return e.ToBasicPerfSampleSeriesSampleSeriesLabelPtrOutputWithContext(context.Background())
}

func (e BasicPerfSampleSeriesSampleSeriesLabel) ToBasicPerfSampleSeriesSampleSeriesLabelPtrOutputWithContext(ctx context.Context) BasicPerfSampleSeriesSampleSeriesLabelPtrOutput {
	return BasicPerfSampleSeriesSampleSeriesLabel(e).ToBasicPerfSampleSeriesSampleSeriesLabelOutputWithContext(ctx).ToBasicPerfSampleSeriesSampleSeriesLabelPtrOutputWithContext(ctx)
}

func (e BasicPerfSampleSeriesSampleSeriesLabel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BasicPerfSampleSeriesSampleSeriesLabel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BasicPerfSampleSeriesSampleSeriesLabel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BasicPerfSampleSeriesSampleSeriesLabel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BasicPerfSampleSeriesSampleSeriesLabelOutput struct{ *pulumi.OutputState }

func (BasicPerfSampleSeriesSampleSeriesLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicPerfSampleSeriesSampleSeriesLabel)(nil)).Elem()
}

func (o BasicPerfSampleSeriesSampleSeriesLabelOutput) ToBasicPerfSampleSeriesSampleSeriesLabelOutput() BasicPerfSampleSeriesSampleSeriesLabelOutput {
	return o
}

func (o BasicPerfSampleSeriesSampleSeriesLabelOutput) ToBasicPerfSampleSeriesSampleSeriesLabelOutputWithContext(ctx context.Context) BasicPerfSampleSeriesSampleSeriesLabelOutput {
	return o
}

func (o BasicPerfSampleSeriesSampleSeriesLabelOutput) ToBasicPerfSampleSeriesSampleSeriesLabelPtrOutput() BasicPerfSampleSeriesSampleSeriesLabelPtrOutput {
	return o.ToBasicPerfSampleSeriesSampleSeriesLabelPtrOutputWithContext(context.Background())
}

func (o BasicPerfSampleSeriesSampleSeriesLabelOutput) ToBasicPerfSampleSeriesSampleSeriesLabelPtrOutputWithContext(ctx context.Context) BasicPerfSampleSeriesSampleSeriesLabelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BasicPerfSampleSeriesSampleSeriesLabel) *BasicPerfSampleSeriesSampleSeriesLabel {
		return &v
	}).(BasicPerfSampleSeriesSampleSeriesLabelPtrOutput)
}

func (o BasicPerfSampleSeriesSampleSeriesLabelOutput) ToOutput(ctx context.Context) pulumix.Output[BasicPerfSampleSeriesSampleSeriesLabel] {
	return pulumix.Output[BasicPerfSampleSeriesSampleSeriesLabel]{
		OutputState: o.OutputState,
	}
}

func (o BasicPerfSampleSeriesSampleSeriesLabelOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BasicPerfSampleSeriesSampleSeriesLabelOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BasicPerfSampleSeriesSampleSeriesLabel) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BasicPerfSampleSeriesSampleSeriesLabelOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BasicPerfSampleSeriesSampleSeriesLabelOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BasicPerfSampleSeriesSampleSeriesLabel) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BasicPerfSampleSeriesSampleSeriesLabelPtrOutput struct{ *pulumi.OutputState }

func (BasicPerfSampleSeriesSampleSeriesLabelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BasicPerfSampleSeriesSampleSeriesLabel)(nil)).Elem()
}

func (o BasicPerfSampleSeriesSampleSeriesLabelPtrOutput) ToBasicPerfSampleSeriesSampleSeriesLabelPtrOutput() BasicPerfSampleSeriesSampleSeriesLabelPtrOutput {
	return o
}

func (o BasicPerfSampleSeriesSampleSeriesLabelPtrOutput) ToBasicPerfSampleSeriesSampleSeriesLabelPtrOutputWithContext(ctx context.Context) BasicPerfSampleSeriesSampleSeriesLabelPtrOutput {
	return o
}

func (o BasicPerfSampleSeriesSampleSeriesLabelPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BasicPerfSampleSeriesSampleSeriesLabel] {
	return pulumix.Output[*BasicPerfSampleSeriesSampleSeriesLabel]{
		OutputState: o.OutputState,
	}
}

func (o BasicPerfSampleSeriesSampleSeriesLabelPtrOutput) Elem() BasicPerfSampleSeriesSampleSeriesLabelOutput {
	return o.ApplyT(func(v *BasicPerfSampleSeriesSampleSeriesLabel) BasicPerfSampleSeriesSampleSeriesLabel {
		if v != nil {
			return *v
		}
		var ret BasicPerfSampleSeriesSampleSeriesLabel
		return ret
	}).(BasicPerfSampleSeriesSampleSeriesLabelOutput)
}

func (o BasicPerfSampleSeriesSampleSeriesLabelPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BasicPerfSampleSeriesSampleSeriesLabelPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BasicPerfSampleSeriesSampleSeriesLabel) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BasicPerfSampleSeriesSampleSeriesLabelInput is an input type that accepts BasicPerfSampleSeriesSampleSeriesLabelArgs and BasicPerfSampleSeriesSampleSeriesLabelOutput values.
// You can construct a concrete instance of `BasicPerfSampleSeriesSampleSeriesLabelInput` via:
//
//	BasicPerfSampleSeriesSampleSeriesLabelArgs{...}
type BasicPerfSampleSeriesSampleSeriesLabelInput interface {
	pulumi.Input

	ToBasicPerfSampleSeriesSampleSeriesLabelOutput() BasicPerfSampleSeriesSampleSeriesLabelOutput
	ToBasicPerfSampleSeriesSampleSeriesLabelOutputWithContext(context.Context) BasicPerfSampleSeriesSampleSeriesLabelOutput
}

var basicPerfSampleSeriesSampleSeriesLabelPtrType = reflect.TypeOf((**BasicPerfSampleSeriesSampleSeriesLabel)(nil)).Elem()

type BasicPerfSampleSeriesSampleSeriesLabelPtrInput interface {
	pulumi.Input

	ToBasicPerfSampleSeriesSampleSeriesLabelPtrOutput() BasicPerfSampleSeriesSampleSeriesLabelPtrOutput
	ToBasicPerfSampleSeriesSampleSeriesLabelPtrOutputWithContext(context.Context) BasicPerfSampleSeriesSampleSeriesLabelPtrOutput
}

type basicPerfSampleSeriesSampleSeriesLabelPtr string

func BasicPerfSampleSeriesSampleSeriesLabelPtr(v string) BasicPerfSampleSeriesSampleSeriesLabelPtrInput {
	return (*basicPerfSampleSeriesSampleSeriesLabelPtr)(&v)
}

func (*basicPerfSampleSeriesSampleSeriesLabelPtr) ElementType() reflect.Type {
	return basicPerfSampleSeriesSampleSeriesLabelPtrType
}

func (in *basicPerfSampleSeriesSampleSeriesLabelPtr) ToBasicPerfSampleSeriesSampleSeriesLabelPtrOutput() BasicPerfSampleSeriesSampleSeriesLabelPtrOutput {
	return pulumi.ToOutput(in).(BasicPerfSampleSeriesSampleSeriesLabelPtrOutput)
}

func (in *basicPerfSampleSeriesSampleSeriesLabelPtr) ToBasicPerfSampleSeriesSampleSeriesLabelPtrOutputWithContext(ctx context.Context) BasicPerfSampleSeriesSampleSeriesLabelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BasicPerfSampleSeriesSampleSeriesLabelPtrOutput)
}

func (in *basicPerfSampleSeriesSampleSeriesLabelPtr) ToOutput(ctx context.Context) pulumix.Output[*BasicPerfSampleSeriesSampleSeriesLabel] {
	return pulumix.Output[*BasicPerfSampleSeriesSampleSeriesLabel]{
		OutputState: in.ToBasicPerfSampleSeriesSampleSeriesLabelPtrOutputWithContext(ctx).OutputState,
	}
}

// The initial state is IN_PROGRESS. The only legal state transitions is from IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an invalid transition is requested. The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times. If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE. - In response always set - In create/update request: optional
type ExecutionStateEnum string

const (
	// Should never be in this state. Exists for proto deserialization backward compatibility.
	ExecutionStateEnumUnknownState = ExecutionStateEnum("unknownState")
	// The Execution/Step is created, ready to run, but not running yet. If an Execution/Step is created without initial state, it is assumed that the Execution/Step is in PENDING state.
	ExecutionStateEnumPending = ExecutionStateEnum("pending")
	// The Execution/Step is in progress.
	ExecutionStateEnumInProgress = ExecutionStateEnum("inProgress")
	// The finalized, immutable state. Steps/Executions in this state cannot be modified.
	ExecutionStateEnumComplete = ExecutionStateEnum("complete")
)

func (ExecutionStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionStateEnum)(nil)).Elem()
}

func (e ExecutionStateEnum) ToExecutionStateEnumOutput() ExecutionStateEnumOutput {
	return pulumi.ToOutput(e).(ExecutionStateEnumOutput)
}

func (e ExecutionStateEnum) ToExecutionStateEnumOutputWithContext(ctx context.Context) ExecutionStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ExecutionStateEnumOutput)
}

func (e ExecutionStateEnum) ToExecutionStateEnumPtrOutput() ExecutionStateEnumPtrOutput {
	return e.ToExecutionStateEnumPtrOutputWithContext(context.Background())
}

func (e ExecutionStateEnum) ToExecutionStateEnumPtrOutputWithContext(ctx context.Context) ExecutionStateEnumPtrOutput {
	return ExecutionStateEnum(e).ToExecutionStateEnumOutputWithContext(ctx).ToExecutionStateEnumPtrOutputWithContext(ctx)
}

func (e ExecutionStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExecutionStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExecutionStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ExecutionStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ExecutionStateEnumOutput struct{ *pulumi.OutputState }

func (ExecutionStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionStateEnum)(nil)).Elem()
}

func (o ExecutionStateEnumOutput) ToExecutionStateEnumOutput() ExecutionStateEnumOutput {
	return o
}

func (o ExecutionStateEnumOutput) ToExecutionStateEnumOutputWithContext(ctx context.Context) ExecutionStateEnumOutput {
	return o
}

func (o ExecutionStateEnumOutput) ToExecutionStateEnumPtrOutput() ExecutionStateEnumPtrOutput {
	return o.ToExecutionStateEnumPtrOutputWithContext(context.Background())
}

func (o ExecutionStateEnumOutput) ToExecutionStateEnumPtrOutputWithContext(ctx context.Context) ExecutionStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExecutionStateEnum) *ExecutionStateEnum {
		return &v
	}).(ExecutionStateEnumPtrOutput)
}

func (o ExecutionStateEnumOutput) ToOutput(ctx context.Context) pulumix.Output[ExecutionStateEnum] {
	return pulumix.Output[ExecutionStateEnum]{
		OutputState: o.OutputState,
	}
}

func (o ExecutionStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ExecutionStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExecutionStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ExecutionStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExecutionStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExecutionStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ExecutionStateEnumPtrOutput struct{ *pulumi.OutputState }

func (ExecutionStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecutionStateEnum)(nil)).Elem()
}

func (o ExecutionStateEnumPtrOutput) ToExecutionStateEnumPtrOutput() ExecutionStateEnumPtrOutput {
	return o
}

func (o ExecutionStateEnumPtrOutput) ToExecutionStateEnumPtrOutputWithContext(ctx context.Context) ExecutionStateEnumPtrOutput {
	return o
}

func (o ExecutionStateEnumPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExecutionStateEnum] {
	return pulumix.Output[*ExecutionStateEnum]{
		OutputState: o.OutputState,
	}
}

func (o ExecutionStateEnumPtrOutput) Elem() ExecutionStateEnumOutput {
	return o.ApplyT(func(v *ExecutionStateEnum) ExecutionStateEnum {
		if v != nil {
			return *v
		}
		var ret ExecutionStateEnum
		return ret
	}).(ExecutionStateEnumOutput)
}

func (o ExecutionStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExecutionStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ExecutionStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ExecutionStateEnumInput is an input type that accepts ExecutionStateEnumArgs and ExecutionStateEnumOutput values.
// You can construct a concrete instance of `ExecutionStateEnumInput` via:
//
//	ExecutionStateEnumArgs{...}
type ExecutionStateEnumInput interface {
	pulumi.Input

	ToExecutionStateEnumOutput() ExecutionStateEnumOutput
	ToExecutionStateEnumOutputWithContext(context.Context) ExecutionStateEnumOutput
}

var executionStateEnumPtrType = reflect.TypeOf((**ExecutionStateEnum)(nil)).Elem()

type ExecutionStateEnumPtrInput interface {
	pulumi.Input

	ToExecutionStateEnumPtrOutput() ExecutionStateEnumPtrOutput
	ToExecutionStateEnumPtrOutputWithContext(context.Context) ExecutionStateEnumPtrOutput
}

type executionStateEnumPtr string

func ExecutionStateEnumPtr(v string) ExecutionStateEnumPtrInput {
	return (*executionStateEnumPtr)(&v)
}

func (*executionStateEnumPtr) ElementType() reflect.Type {
	return executionStateEnumPtrType
}

func (in *executionStateEnumPtr) ToExecutionStateEnumPtrOutput() ExecutionStateEnumPtrOutput {
	return pulumi.ToOutput(in).(ExecutionStateEnumPtrOutput)
}

func (in *executionStateEnumPtr) ToExecutionStateEnumPtrOutputWithContext(ctx context.Context) ExecutionStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ExecutionStateEnumPtrOutput)
}

func (in *executionStateEnumPtr) ToOutput(ctx context.Context) pulumix.Output[*ExecutionStateEnum] {
	return pulumix.Output[*ExecutionStateEnum]{
		OutputState: in.ToExecutionStateEnumPtrOutputWithContext(ctx).OutputState,
	}
}

// The platform of the test history. - In response: always set. Returns the platform of the last execution if unknown.
type HistoryTestPlatform string

const (
	HistoryTestPlatformUnknownPlatform = HistoryTestPlatform("unknownPlatform")
	HistoryTestPlatformAndroid         = HistoryTestPlatform("android")
	HistoryTestPlatformIos             = HistoryTestPlatform("ios")
)

func (HistoryTestPlatform) ElementType() reflect.Type {
	return reflect.TypeOf((*HistoryTestPlatform)(nil)).Elem()
}

func (e HistoryTestPlatform) ToHistoryTestPlatformOutput() HistoryTestPlatformOutput {
	return pulumi.ToOutput(e).(HistoryTestPlatformOutput)
}

func (e HistoryTestPlatform) ToHistoryTestPlatformOutputWithContext(ctx context.Context) HistoryTestPlatformOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HistoryTestPlatformOutput)
}

func (e HistoryTestPlatform) ToHistoryTestPlatformPtrOutput() HistoryTestPlatformPtrOutput {
	return e.ToHistoryTestPlatformPtrOutputWithContext(context.Background())
}

func (e HistoryTestPlatform) ToHistoryTestPlatformPtrOutputWithContext(ctx context.Context) HistoryTestPlatformPtrOutput {
	return HistoryTestPlatform(e).ToHistoryTestPlatformOutputWithContext(ctx).ToHistoryTestPlatformPtrOutputWithContext(ctx)
}

func (e HistoryTestPlatform) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HistoryTestPlatform) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HistoryTestPlatform) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HistoryTestPlatform) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HistoryTestPlatformOutput struct{ *pulumi.OutputState }

func (HistoryTestPlatformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HistoryTestPlatform)(nil)).Elem()
}

func (o HistoryTestPlatformOutput) ToHistoryTestPlatformOutput() HistoryTestPlatformOutput {
	return o
}

func (o HistoryTestPlatformOutput) ToHistoryTestPlatformOutputWithContext(ctx context.Context) HistoryTestPlatformOutput {
	return o
}

func (o HistoryTestPlatformOutput) ToHistoryTestPlatformPtrOutput() HistoryTestPlatformPtrOutput {
	return o.ToHistoryTestPlatformPtrOutputWithContext(context.Background())
}

func (o HistoryTestPlatformOutput) ToHistoryTestPlatformPtrOutputWithContext(ctx context.Context) HistoryTestPlatformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HistoryTestPlatform) *HistoryTestPlatform {
		return &v
	}).(HistoryTestPlatformPtrOutput)
}

func (o HistoryTestPlatformOutput) ToOutput(ctx context.Context) pulumix.Output[HistoryTestPlatform] {
	return pulumix.Output[HistoryTestPlatform]{
		OutputState: o.OutputState,
	}
}

func (o HistoryTestPlatformOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HistoryTestPlatformOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HistoryTestPlatform) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HistoryTestPlatformOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HistoryTestPlatformOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HistoryTestPlatform) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HistoryTestPlatformPtrOutput struct{ *pulumi.OutputState }

func (HistoryTestPlatformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HistoryTestPlatform)(nil)).Elem()
}

func (o HistoryTestPlatformPtrOutput) ToHistoryTestPlatformPtrOutput() HistoryTestPlatformPtrOutput {
	return o
}

func (o HistoryTestPlatformPtrOutput) ToHistoryTestPlatformPtrOutputWithContext(ctx context.Context) HistoryTestPlatformPtrOutput {
	return o
}

func (o HistoryTestPlatformPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HistoryTestPlatform] {
	return pulumix.Output[*HistoryTestPlatform]{
		OutputState: o.OutputState,
	}
}

func (o HistoryTestPlatformPtrOutput) Elem() HistoryTestPlatformOutput {
	return o.ApplyT(func(v *HistoryTestPlatform) HistoryTestPlatform {
		if v != nil {
			return *v
		}
		var ret HistoryTestPlatform
		return ret
	}).(HistoryTestPlatformOutput)
}

func (o HistoryTestPlatformPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HistoryTestPlatformPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *HistoryTestPlatform) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HistoryTestPlatformInput is an input type that accepts HistoryTestPlatformArgs and HistoryTestPlatformOutput values.
// You can construct a concrete instance of `HistoryTestPlatformInput` via:
//
//	HistoryTestPlatformArgs{...}
type HistoryTestPlatformInput interface {
	pulumi.Input

	ToHistoryTestPlatformOutput() HistoryTestPlatformOutput
	ToHistoryTestPlatformOutputWithContext(context.Context) HistoryTestPlatformOutput
}

var historyTestPlatformPtrType = reflect.TypeOf((**HistoryTestPlatform)(nil)).Elem()

type HistoryTestPlatformPtrInput interface {
	pulumi.Input

	ToHistoryTestPlatformPtrOutput() HistoryTestPlatformPtrOutput
	ToHistoryTestPlatformPtrOutputWithContext(context.Context) HistoryTestPlatformPtrOutput
}

type historyTestPlatformPtr string

func HistoryTestPlatformPtr(v string) HistoryTestPlatformPtrInput {
	return (*historyTestPlatformPtr)(&v)
}

func (*historyTestPlatformPtr) ElementType() reflect.Type {
	return historyTestPlatformPtrType
}

func (in *historyTestPlatformPtr) ToHistoryTestPlatformPtrOutput() HistoryTestPlatformPtrOutput {
	return pulumi.ToOutput(in).(HistoryTestPlatformPtrOutput)
}

func (in *historyTestPlatformPtr) ToHistoryTestPlatformPtrOutputWithContext(ctx context.Context) HistoryTestPlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HistoryTestPlatformPtrOutput)
}

func (in *historyTestPlatformPtr) ToOutput(ctx context.Context) pulumix.Output[*HistoryTestPlatform] {
	return pulumix.Output[*HistoryTestPlatform]{
		OutputState: in.ToHistoryTestPlatformPtrOutputWithContext(ctx).OutputState,
	}
}

type IndividualOutcomeOutcomeSummary string

const (
	// Do not use. For proto versioning only.
	IndividualOutcomeOutcomeSummaryUnset = IndividualOutcomeOutcomeSummary("unset")
	// The test matrix run was successful, for instance: - All the test cases passed. - Robo did not detect a crash of the application under test.
	IndividualOutcomeOutcomeSummarySuccess = IndividualOutcomeOutcomeSummary("success")
	// A run failed, for instance: - One or more test case failed. - A test timed out. - The application under test crashed.
	IndividualOutcomeOutcomeSummaryFailure = IndividualOutcomeOutcomeSummary("failure")
	// Something unexpected happened. The run should still be considered unsuccessful but this is likely a transient problem and re-running the test might be successful.
	IndividualOutcomeOutcomeSummaryInconclusive = IndividualOutcomeOutcomeSummary("inconclusive")
	// All tests were skipped, for instance: - All device configurations were incompatible.
	IndividualOutcomeOutcomeSummarySkipped = IndividualOutcomeOutcomeSummary("skipped")
	// A group of steps that were run with the same configuration had both failure and success outcomes.
	IndividualOutcomeOutcomeSummaryFlaky = IndividualOutcomeOutcomeSummary("flaky")
)

func (IndividualOutcomeOutcomeSummary) ElementType() reflect.Type {
	return reflect.TypeOf((*IndividualOutcomeOutcomeSummary)(nil)).Elem()
}

func (e IndividualOutcomeOutcomeSummary) ToIndividualOutcomeOutcomeSummaryOutput() IndividualOutcomeOutcomeSummaryOutput {
	return pulumi.ToOutput(e).(IndividualOutcomeOutcomeSummaryOutput)
}

func (e IndividualOutcomeOutcomeSummary) ToIndividualOutcomeOutcomeSummaryOutputWithContext(ctx context.Context) IndividualOutcomeOutcomeSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IndividualOutcomeOutcomeSummaryOutput)
}

func (e IndividualOutcomeOutcomeSummary) ToIndividualOutcomeOutcomeSummaryPtrOutput() IndividualOutcomeOutcomeSummaryPtrOutput {
	return e.ToIndividualOutcomeOutcomeSummaryPtrOutputWithContext(context.Background())
}

func (e IndividualOutcomeOutcomeSummary) ToIndividualOutcomeOutcomeSummaryPtrOutputWithContext(ctx context.Context) IndividualOutcomeOutcomeSummaryPtrOutput {
	return IndividualOutcomeOutcomeSummary(e).ToIndividualOutcomeOutcomeSummaryOutputWithContext(ctx).ToIndividualOutcomeOutcomeSummaryPtrOutputWithContext(ctx)
}

func (e IndividualOutcomeOutcomeSummary) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IndividualOutcomeOutcomeSummary) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IndividualOutcomeOutcomeSummary) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IndividualOutcomeOutcomeSummary) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IndividualOutcomeOutcomeSummaryOutput struct{ *pulumi.OutputState }

func (IndividualOutcomeOutcomeSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndividualOutcomeOutcomeSummary)(nil)).Elem()
}

func (o IndividualOutcomeOutcomeSummaryOutput) ToIndividualOutcomeOutcomeSummaryOutput() IndividualOutcomeOutcomeSummaryOutput {
	return o
}

func (o IndividualOutcomeOutcomeSummaryOutput) ToIndividualOutcomeOutcomeSummaryOutputWithContext(ctx context.Context) IndividualOutcomeOutcomeSummaryOutput {
	return o
}

func (o IndividualOutcomeOutcomeSummaryOutput) ToIndividualOutcomeOutcomeSummaryPtrOutput() IndividualOutcomeOutcomeSummaryPtrOutput {
	return o.ToIndividualOutcomeOutcomeSummaryPtrOutputWithContext(context.Background())
}

func (o IndividualOutcomeOutcomeSummaryOutput) ToIndividualOutcomeOutcomeSummaryPtrOutputWithContext(ctx context.Context) IndividualOutcomeOutcomeSummaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IndividualOutcomeOutcomeSummary) *IndividualOutcomeOutcomeSummary {
		return &v
	}).(IndividualOutcomeOutcomeSummaryPtrOutput)
}

func (o IndividualOutcomeOutcomeSummaryOutput) ToOutput(ctx context.Context) pulumix.Output[IndividualOutcomeOutcomeSummary] {
	return pulumix.Output[IndividualOutcomeOutcomeSummary]{
		OutputState: o.OutputState,
	}
}

func (o IndividualOutcomeOutcomeSummaryOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IndividualOutcomeOutcomeSummaryOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IndividualOutcomeOutcomeSummary) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IndividualOutcomeOutcomeSummaryOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IndividualOutcomeOutcomeSummaryOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IndividualOutcomeOutcomeSummary) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IndividualOutcomeOutcomeSummaryPtrOutput struct{ *pulumi.OutputState }

func (IndividualOutcomeOutcomeSummaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndividualOutcomeOutcomeSummary)(nil)).Elem()
}

func (o IndividualOutcomeOutcomeSummaryPtrOutput) ToIndividualOutcomeOutcomeSummaryPtrOutput() IndividualOutcomeOutcomeSummaryPtrOutput {
	return o
}

func (o IndividualOutcomeOutcomeSummaryPtrOutput) ToIndividualOutcomeOutcomeSummaryPtrOutputWithContext(ctx context.Context) IndividualOutcomeOutcomeSummaryPtrOutput {
	return o
}

func (o IndividualOutcomeOutcomeSummaryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IndividualOutcomeOutcomeSummary] {
	return pulumix.Output[*IndividualOutcomeOutcomeSummary]{
		OutputState: o.OutputState,
	}
}

func (o IndividualOutcomeOutcomeSummaryPtrOutput) Elem() IndividualOutcomeOutcomeSummaryOutput {
	return o.ApplyT(func(v *IndividualOutcomeOutcomeSummary) IndividualOutcomeOutcomeSummary {
		if v != nil {
			return *v
		}
		var ret IndividualOutcomeOutcomeSummary
		return ret
	}).(IndividualOutcomeOutcomeSummaryOutput)
}

func (o IndividualOutcomeOutcomeSummaryPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IndividualOutcomeOutcomeSummaryPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IndividualOutcomeOutcomeSummary) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IndividualOutcomeOutcomeSummaryInput is an input type that accepts IndividualOutcomeOutcomeSummaryArgs and IndividualOutcomeOutcomeSummaryOutput values.
// You can construct a concrete instance of `IndividualOutcomeOutcomeSummaryInput` via:
//
//	IndividualOutcomeOutcomeSummaryArgs{...}
type IndividualOutcomeOutcomeSummaryInput interface {
	pulumi.Input

	ToIndividualOutcomeOutcomeSummaryOutput() IndividualOutcomeOutcomeSummaryOutput
	ToIndividualOutcomeOutcomeSummaryOutputWithContext(context.Context) IndividualOutcomeOutcomeSummaryOutput
}

var individualOutcomeOutcomeSummaryPtrType = reflect.TypeOf((**IndividualOutcomeOutcomeSummary)(nil)).Elem()

type IndividualOutcomeOutcomeSummaryPtrInput interface {
	pulumi.Input

	ToIndividualOutcomeOutcomeSummaryPtrOutput() IndividualOutcomeOutcomeSummaryPtrOutput
	ToIndividualOutcomeOutcomeSummaryPtrOutputWithContext(context.Context) IndividualOutcomeOutcomeSummaryPtrOutput
}

type individualOutcomeOutcomeSummaryPtr string

func IndividualOutcomeOutcomeSummaryPtr(v string) IndividualOutcomeOutcomeSummaryPtrInput {
	return (*individualOutcomeOutcomeSummaryPtr)(&v)
}

func (*individualOutcomeOutcomeSummaryPtr) ElementType() reflect.Type {
	return individualOutcomeOutcomeSummaryPtrType
}

func (in *individualOutcomeOutcomeSummaryPtr) ToIndividualOutcomeOutcomeSummaryPtrOutput() IndividualOutcomeOutcomeSummaryPtrOutput {
	return pulumi.ToOutput(in).(IndividualOutcomeOutcomeSummaryPtrOutput)
}

func (in *individualOutcomeOutcomeSummaryPtr) ToIndividualOutcomeOutcomeSummaryPtrOutputWithContext(ctx context.Context) IndividualOutcomeOutcomeSummaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IndividualOutcomeOutcomeSummaryPtrOutput)
}

func (in *individualOutcomeOutcomeSummaryPtr) ToOutput(ctx context.Context) pulumix.Output[*IndividualOutcomeOutcomeSummary] {
	return pulumix.Output[*IndividualOutcomeOutcomeSummary]{
		OutputState: in.ToIndividualOutcomeOutcomeSummaryPtrOutputWithContext(ctx).OutputState,
	}
}

// The simplest way to interpret a result. Required
type OutcomeSummary string

const (
	// Do not use. For proto versioning only.
	OutcomeSummaryUnset = OutcomeSummary("unset")
	// The test matrix run was successful, for instance: - All the test cases passed. - Robo did not detect a crash of the application under test.
	OutcomeSummarySuccess = OutcomeSummary("success")
	// A run failed, for instance: - One or more test case failed. - A test timed out. - The application under test crashed.
	OutcomeSummaryFailure = OutcomeSummary("failure")
	// Something unexpected happened. The run should still be considered unsuccessful but this is likely a transient problem and re-running the test might be successful.
	OutcomeSummaryInconclusive = OutcomeSummary("inconclusive")
	// All tests were skipped, for instance: - All device configurations were incompatible.
	OutcomeSummarySkipped = OutcomeSummary("skipped")
	// A group of steps that were run with the same configuration had both failure and success outcomes.
	OutcomeSummaryFlaky = OutcomeSummary("flaky")
)

func (OutcomeSummary) ElementType() reflect.Type {
	return reflect.TypeOf((*OutcomeSummary)(nil)).Elem()
}

func (e OutcomeSummary) ToOutcomeSummaryOutput() OutcomeSummaryOutput {
	return pulumi.ToOutput(e).(OutcomeSummaryOutput)
}

func (e OutcomeSummary) ToOutcomeSummaryOutputWithContext(ctx context.Context) OutcomeSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OutcomeSummaryOutput)
}

func (e OutcomeSummary) ToOutcomeSummaryPtrOutput() OutcomeSummaryPtrOutput {
	return e.ToOutcomeSummaryPtrOutputWithContext(context.Background())
}

func (e OutcomeSummary) ToOutcomeSummaryPtrOutputWithContext(ctx context.Context) OutcomeSummaryPtrOutput {
	return OutcomeSummary(e).ToOutcomeSummaryOutputWithContext(ctx).ToOutcomeSummaryPtrOutputWithContext(ctx)
}

func (e OutcomeSummary) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OutcomeSummary) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OutcomeSummary) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OutcomeSummary) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OutcomeSummaryOutput struct{ *pulumi.OutputState }

func (OutcomeSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutcomeSummary)(nil)).Elem()
}

func (o OutcomeSummaryOutput) ToOutcomeSummaryOutput() OutcomeSummaryOutput {
	return o
}

func (o OutcomeSummaryOutput) ToOutcomeSummaryOutputWithContext(ctx context.Context) OutcomeSummaryOutput {
	return o
}

func (o OutcomeSummaryOutput) ToOutcomeSummaryPtrOutput() OutcomeSummaryPtrOutput {
	return o.ToOutcomeSummaryPtrOutputWithContext(context.Background())
}

func (o OutcomeSummaryOutput) ToOutcomeSummaryPtrOutputWithContext(ctx context.Context) OutcomeSummaryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OutcomeSummary) *OutcomeSummary {
		return &v
	}).(OutcomeSummaryPtrOutput)
}

func (o OutcomeSummaryOutput) ToOutput(ctx context.Context) pulumix.Output[OutcomeSummary] {
	return pulumix.Output[OutcomeSummary]{
		OutputState: o.OutputState,
	}
}

func (o OutcomeSummaryOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OutcomeSummaryOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OutcomeSummary) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OutcomeSummaryOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OutcomeSummaryOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OutcomeSummary) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OutcomeSummaryPtrOutput struct{ *pulumi.OutputState }

func (OutcomeSummaryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutcomeSummary)(nil)).Elem()
}

func (o OutcomeSummaryPtrOutput) ToOutcomeSummaryPtrOutput() OutcomeSummaryPtrOutput {
	return o
}

func (o OutcomeSummaryPtrOutput) ToOutcomeSummaryPtrOutputWithContext(ctx context.Context) OutcomeSummaryPtrOutput {
	return o
}

func (o OutcomeSummaryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OutcomeSummary] {
	return pulumix.Output[*OutcomeSummary]{
		OutputState: o.OutputState,
	}
}

func (o OutcomeSummaryPtrOutput) Elem() OutcomeSummaryOutput {
	return o.ApplyT(func(v *OutcomeSummary) OutcomeSummary {
		if v != nil {
			return *v
		}
		var ret OutcomeSummary
		return ret
	}).(OutcomeSummaryOutput)
}

func (o OutcomeSummaryPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OutcomeSummaryPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OutcomeSummary) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OutcomeSummaryInput is an input type that accepts OutcomeSummaryArgs and OutcomeSummaryOutput values.
// You can construct a concrete instance of `OutcomeSummaryInput` via:
//
//	OutcomeSummaryArgs{...}
type OutcomeSummaryInput interface {
	pulumi.Input

	ToOutcomeSummaryOutput() OutcomeSummaryOutput
	ToOutcomeSummaryOutputWithContext(context.Context) OutcomeSummaryOutput
}

var outcomeSummaryPtrType = reflect.TypeOf((**OutcomeSummary)(nil)).Elem()

type OutcomeSummaryPtrInput interface {
	pulumi.Input

	ToOutcomeSummaryPtrOutput() OutcomeSummaryPtrOutput
	ToOutcomeSummaryPtrOutputWithContext(context.Context) OutcomeSummaryPtrOutput
}

type outcomeSummaryPtr string

func OutcomeSummaryPtr(v string) OutcomeSummaryPtrInput {
	return (*outcomeSummaryPtr)(&v)
}

func (*outcomeSummaryPtr) ElementType() reflect.Type {
	return outcomeSummaryPtrType
}

func (in *outcomeSummaryPtr) ToOutcomeSummaryPtrOutput() OutcomeSummaryPtrOutput {
	return pulumi.ToOutput(in).(OutcomeSummaryPtrOutput)
}

func (in *outcomeSummaryPtr) ToOutcomeSummaryPtrOutputWithContext(ctx context.Context) OutcomeSummaryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OutcomeSummaryPtrOutput)
}

func (in *outcomeSummaryPtr) ToOutput(ctx context.Context) pulumix.Output[*OutcomeSummary] {
	return pulumix.Output[*OutcomeSummary]{
		OutputState: in.ToOutcomeSummaryPtrOutputWithContext(ctx).OutputState,
	}
}

// Rollup test status of multiple steps that were run with the same configuration as a group.
type PrimaryStepRollUp string

const (
	// Do not use. For proto versioning only.
	PrimaryStepRollUpUnset = PrimaryStepRollUp("unset")
	// The test matrix run was successful, for instance: - All the test cases passed. - Robo did not detect a crash of the application under test.
	PrimaryStepRollUpSuccess = PrimaryStepRollUp("success")
	// A run failed, for instance: - One or more test case failed. - A test timed out. - The application under test crashed.
	PrimaryStepRollUpFailure = PrimaryStepRollUp("failure")
	// Something unexpected happened. The run should still be considered unsuccessful but this is likely a transient problem and re-running the test might be successful.
	PrimaryStepRollUpInconclusive = PrimaryStepRollUp("inconclusive")
	// All tests were skipped, for instance: - All device configurations were incompatible.
	PrimaryStepRollUpSkipped = PrimaryStepRollUp("skipped")
	// A group of steps that were run with the same configuration had both failure and success outcomes.
	PrimaryStepRollUpFlaky = PrimaryStepRollUp("flaky")
)

func (PrimaryStepRollUp) ElementType() reflect.Type {
	return reflect.TypeOf((*PrimaryStepRollUp)(nil)).Elem()
}

func (e PrimaryStepRollUp) ToPrimaryStepRollUpOutput() PrimaryStepRollUpOutput {
	return pulumi.ToOutput(e).(PrimaryStepRollUpOutput)
}

func (e PrimaryStepRollUp) ToPrimaryStepRollUpOutputWithContext(ctx context.Context) PrimaryStepRollUpOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PrimaryStepRollUpOutput)
}

func (e PrimaryStepRollUp) ToPrimaryStepRollUpPtrOutput() PrimaryStepRollUpPtrOutput {
	return e.ToPrimaryStepRollUpPtrOutputWithContext(context.Background())
}

func (e PrimaryStepRollUp) ToPrimaryStepRollUpPtrOutputWithContext(ctx context.Context) PrimaryStepRollUpPtrOutput {
	return PrimaryStepRollUp(e).ToPrimaryStepRollUpOutputWithContext(ctx).ToPrimaryStepRollUpPtrOutputWithContext(ctx)
}

func (e PrimaryStepRollUp) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PrimaryStepRollUp) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PrimaryStepRollUp) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PrimaryStepRollUp) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PrimaryStepRollUpOutput struct{ *pulumi.OutputState }

func (PrimaryStepRollUpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrimaryStepRollUp)(nil)).Elem()
}

func (o PrimaryStepRollUpOutput) ToPrimaryStepRollUpOutput() PrimaryStepRollUpOutput {
	return o
}

func (o PrimaryStepRollUpOutput) ToPrimaryStepRollUpOutputWithContext(ctx context.Context) PrimaryStepRollUpOutput {
	return o
}

func (o PrimaryStepRollUpOutput) ToPrimaryStepRollUpPtrOutput() PrimaryStepRollUpPtrOutput {
	return o.ToPrimaryStepRollUpPtrOutputWithContext(context.Background())
}

func (o PrimaryStepRollUpOutput) ToPrimaryStepRollUpPtrOutputWithContext(ctx context.Context) PrimaryStepRollUpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrimaryStepRollUp) *PrimaryStepRollUp {
		return &v
	}).(PrimaryStepRollUpPtrOutput)
}

func (o PrimaryStepRollUpOutput) ToOutput(ctx context.Context) pulumix.Output[PrimaryStepRollUp] {
	return pulumix.Output[PrimaryStepRollUp]{
		OutputState: o.OutputState,
	}
}

func (o PrimaryStepRollUpOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PrimaryStepRollUpOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PrimaryStepRollUp) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PrimaryStepRollUpOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PrimaryStepRollUpOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PrimaryStepRollUp) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PrimaryStepRollUpPtrOutput struct{ *pulumi.OutputState }

func (PrimaryStepRollUpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrimaryStepRollUp)(nil)).Elem()
}

func (o PrimaryStepRollUpPtrOutput) ToPrimaryStepRollUpPtrOutput() PrimaryStepRollUpPtrOutput {
	return o
}

func (o PrimaryStepRollUpPtrOutput) ToPrimaryStepRollUpPtrOutputWithContext(ctx context.Context) PrimaryStepRollUpPtrOutput {
	return o
}

func (o PrimaryStepRollUpPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrimaryStepRollUp] {
	return pulumix.Output[*PrimaryStepRollUp]{
		OutputState: o.OutputState,
	}
}

func (o PrimaryStepRollUpPtrOutput) Elem() PrimaryStepRollUpOutput {
	return o.ApplyT(func(v *PrimaryStepRollUp) PrimaryStepRollUp {
		if v != nil {
			return *v
		}
		var ret PrimaryStepRollUp
		return ret
	}).(PrimaryStepRollUpOutput)
}

func (o PrimaryStepRollUpPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PrimaryStepRollUpPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PrimaryStepRollUp) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PrimaryStepRollUpInput is an input type that accepts PrimaryStepRollUpArgs and PrimaryStepRollUpOutput values.
// You can construct a concrete instance of `PrimaryStepRollUpInput` via:
//
//	PrimaryStepRollUpArgs{...}
type PrimaryStepRollUpInput interface {
	pulumi.Input

	ToPrimaryStepRollUpOutput() PrimaryStepRollUpOutput
	ToPrimaryStepRollUpOutputWithContext(context.Context) PrimaryStepRollUpOutput
}

var primaryStepRollUpPtrType = reflect.TypeOf((**PrimaryStepRollUp)(nil)).Elem()

type PrimaryStepRollUpPtrInput interface {
	pulumi.Input

	ToPrimaryStepRollUpPtrOutput() PrimaryStepRollUpPtrOutput
	ToPrimaryStepRollUpPtrOutputWithContext(context.Context) PrimaryStepRollUpPtrOutput
}

type primaryStepRollUpPtr string

func PrimaryStepRollUpPtr(v string) PrimaryStepRollUpPtrInput {
	return (*primaryStepRollUpPtr)(&v)
}

func (*primaryStepRollUpPtr) ElementType() reflect.Type {
	return primaryStepRollUpPtrType
}

func (in *primaryStepRollUpPtr) ToPrimaryStepRollUpPtrOutput() PrimaryStepRollUpPtrOutput {
	return pulumi.ToOutput(in).(PrimaryStepRollUpPtrOutput)
}

func (in *primaryStepRollUpPtr) ToPrimaryStepRollUpPtrOutputWithContext(ctx context.Context) PrimaryStepRollUpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PrimaryStepRollUpPtrOutput)
}

func (in *primaryStepRollUpPtr) ToOutput(ctx context.Context) pulumix.Output[*PrimaryStepRollUp] {
	return pulumix.Output[*PrimaryStepRollUp]{
		OutputState: in.ToPrimaryStepRollUpPtrOutputWithContext(ctx).OutputState,
	}
}

// The initial state is IN_PROGRESS. The only legal state transitions are * IN_PROGRESS -> COMPLETE A PRECONDITION_FAILED will be returned if an invalid transition is requested. It is valid to create Step with a state set to COMPLETE. The state can only be set to COMPLETE once. A PRECONDITION_FAILED will be returned if the state is set to COMPLETE multiple times. - In response: always set - In create/update request: optional
type StepStateEnum string

const (
	// Should never be in this state. Exists for proto deserialization backward compatibility.
	StepStateEnumUnknownState = StepStateEnum("unknownState")
	// The Execution/Step is created, ready to run, but not running yet. If an Execution/Step is created without initial state, it is assumed that the Execution/Step is in PENDING state.
	StepStateEnumPending = StepStateEnum("pending")
	// The Execution/Step is in progress.
	StepStateEnumInProgress = StepStateEnum("inProgress")
	// The finalized, immutable state. Steps/Executions in this state cannot be modified.
	StepStateEnumComplete = StepStateEnum("complete")
)

func (StepStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*StepStateEnum)(nil)).Elem()
}

func (e StepStateEnum) ToStepStateEnumOutput() StepStateEnumOutput {
	return pulumi.ToOutput(e).(StepStateEnumOutput)
}

func (e StepStateEnum) ToStepStateEnumOutputWithContext(ctx context.Context) StepStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StepStateEnumOutput)
}

func (e StepStateEnum) ToStepStateEnumPtrOutput() StepStateEnumPtrOutput {
	return e.ToStepStateEnumPtrOutputWithContext(context.Background())
}

func (e StepStateEnum) ToStepStateEnumPtrOutputWithContext(ctx context.Context) StepStateEnumPtrOutput {
	return StepStateEnum(e).ToStepStateEnumOutputWithContext(ctx).ToStepStateEnumPtrOutputWithContext(ctx)
}

func (e StepStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StepStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StepStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StepStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StepStateEnumOutput struct{ *pulumi.OutputState }

func (StepStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StepStateEnum)(nil)).Elem()
}

func (o StepStateEnumOutput) ToStepStateEnumOutput() StepStateEnumOutput {
	return o
}

func (o StepStateEnumOutput) ToStepStateEnumOutputWithContext(ctx context.Context) StepStateEnumOutput {
	return o
}

func (o StepStateEnumOutput) ToStepStateEnumPtrOutput() StepStateEnumPtrOutput {
	return o.ToStepStateEnumPtrOutputWithContext(context.Background())
}

func (o StepStateEnumOutput) ToStepStateEnumPtrOutputWithContext(ctx context.Context) StepStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StepStateEnum) *StepStateEnum {
		return &v
	}).(StepStateEnumPtrOutput)
}

func (o StepStateEnumOutput) ToOutput(ctx context.Context) pulumix.Output[StepStateEnum] {
	return pulumix.Output[StepStateEnum]{
		OutputState: o.OutputState,
	}
}

func (o StepStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StepStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StepStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StepStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StepStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StepStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StepStateEnumPtrOutput struct{ *pulumi.OutputState }

func (StepStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StepStateEnum)(nil)).Elem()
}

func (o StepStateEnumPtrOutput) ToStepStateEnumPtrOutput() StepStateEnumPtrOutput {
	return o
}

func (o StepStateEnumPtrOutput) ToStepStateEnumPtrOutputWithContext(ctx context.Context) StepStateEnumPtrOutput {
	return o
}

func (o StepStateEnumPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StepStateEnum] {
	return pulumix.Output[*StepStateEnum]{
		OutputState: o.OutputState,
	}
}

func (o StepStateEnumPtrOutput) Elem() StepStateEnumOutput {
	return o.ApplyT(func(v *StepStateEnum) StepStateEnum {
		if v != nil {
			return *v
		}
		var ret StepStateEnum
		return ret
	}).(StepStateEnumOutput)
}

func (o StepStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StepStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StepStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StepStateEnumInput is an input type that accepts StepStateEnumArgs and StepStateEnumOutput values.
// You can construct a concrete instance of `StepStateEnumInput` via:
//
//	StepStateEnumArgs{...}
type StepStateEnumInput interface {
	pulumi.Input

	ToStepStateEnumOutput() StepStateEnumOutput
	ToStepStateEnumOutputWithContext(context.Context) StepStateEnumOutput
}

var stepStateEnumPtrType = reflect.TypeOf((**StepStateEnum)(nil)).Elem()

type StepStateEnumPtrInput interface {
	pulumi.Input

	ToStepStateEnumPtrOutput() StepStateEnumPtrOutput
	ToStepStateEnumPtrOutputWithContext(context.Context) StepStateEnumPtrOutput
}

type stepStateEnumPtr string

func StepStateEnumPtr(v string) StepStateEnumPtrInput {
	return (*stepStateEnumPtr)(&v)
}

func (*stepStateEnumPtr) ElementType() reflect.Type {
	return stepStateEnumPtrType
}

func (in *stepStateEnumPtr) ToStepStateEnumPtrOutput() StepStateEnumPtrOutput {
	return pulumi.ToOutput(in).(StepStateEnumPtrOutput)
}

func (in *stepStateEnumPtr) ToStepStateEnumPtrOutputWithContext(ctx context.Context) StepStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StepStateEnumPtrOutput)
}

func (in *stepStateEnumPtr) ToOutput(ctx context.Context) pulumix.Output[*StepStateEnum] {
	return pulumix.Output[*StepStateEnum]{
		OutputState: in.ToStepStateEnumPtrOutputWithContext(ctx).OutputState,
	}
}

// Category of issue. Required.
type TestIssueCategory string

const (
	// Default unspecified category. Do not use. For versioning only.
	TestIssueCategoryUnspecifiedCategory = TestIssueCategory("unspecifiedCategory")
	// Issue is not specific to a particular test kind (e.g., a native crash).
	TestIssueCategoryCommon = TestIssueCategory("common")
	// Issue is specific to Robo run.
	TestIssueCategoryRobo = TestIssueCategory("robo")
)

func (TestIssueCategory) ElementType() reflect.Type {
	return reflect.TypeOf((*TestIssueCategory)(nil)).Elem()
}

func (e TestIssueCategory) ToTestIssueCategoryOutput() TestIssueCategoryOutput {
	return pulumi.ToOutput(e).(TestIssueCategoryOutput)
}

func (e TestIssueCategory) ToTestIssueCategoryOutputWithContext(ctx context.Context) TestIssueCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TestIssueCategoryOutput)
}

func (e TestIssueCategory) ToTestIssueCategoryPtrOutput() TestIssueCategoryPtrOutput {
	return e.ToTestIssueCategoryPtrOutputWithContext(context.Background())
}

func (e TestIssueCategory) ToTestIssueCategoryPtrOutputWithContext(ctx context.Context) TestIssueCategoryPtrOutput {
	return TestIssueCategory(e).ToTestIssueCategoryOutputWithContext(ctx).ToTestIssueCategoryPtrOutputWithContext(ctx)
}

func (e TestIssueCategory) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TestIssueCategory) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TestIssueCategory) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TestIssueCategory) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TestIssueCategoryOutput struct{ *pulumi.OutputState }

func (TestIssueCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestIssueCategory)(nil)).Elem()
}

func (o TestIssueCategoryOutput) ToTestIssueCategoryOutput() TestIssueCategoryOutput {
	return o
}

func (o TestIssueCategoryOutput) ToTestIssueCategoryOutputWithContext(ctx context.Context) TestIssueCategoryOutput {
	return o
}

func (o TestIssueCategoryOutput) ToTestIssueCategoryPtrOutput() TestIssueCategoryPtrOutput {
	return o.ToTestIssueCategoryPtrOutputWithContext(context.Background())
}

func (o TestIssueCategoryOutput) ToTestIssueCategoryPtrOutputWithContext(ctx context.Context) TestIssueCategoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TestIssueCategory) *TestIssueCategory {
		return &v
	}).(TestIssueCategoryPtrOutput)
}

func (o TestIssueCategoryOutput) ToOutput(ctx context.Context) pulumix.Output[TestIssueCategory] {
	return pulumix.Output[TestIssueCategory]{
		OutputState: o.OutputState,
	}
}

func (o TestIssueCategoryOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TestIssueCategoryOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TestIssueCategory) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TestIssueCategoryOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TestIssueCategoryOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TestIssueCategory) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TestIssueCategoryPtrOutput struct{ *pulumi.OutputState }

func (TestIssueCategoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestIssueCategory)(nil)).Elem()
}

func (o TestIssueCategoryPtrOutput) ToTestIssueCategoryPtrOutput() TestIssueCategoryPtrOutput {
	return o
}

func (o TestIssueCategoryPtrOutput) ToTestIssueCategoryPtrOutputWithContext(ctx context.Context) TestIssueCategoryPtrOutput {
	return o
}

func (o TestIssueCategoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TestIssueCategory] {
	return pulumix.Output[*TestIssueCategory]{
		OutputState: o.OutputState,
	}
}

func (o TestIssueCategoryPtrOutput) Elem() TestIssueCategoryOutput {
	return o.ApplyT(func(v *TestIssueCategory) TestIssueCategory {
		if v != nil {
			return *v
		}
		var ret TestIssueCategory
		return ret
	}).(TestIssueCategoryOutput)
}

func (o TestIssueCategoryPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TestIssueCategoryPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TestIssueCategory) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TestIssueCategoryInput is an input type that accepts TestIssueCategoryArgs and TestIssueCategoryOutput values.
// You can construct a concrete instance of `TestIssueCategoryInput` via:
//
//	TestIssueCategoryArgs{...}
type TestIssueCategoryInput interface {
	pulumi.Input

	ToTestIssueCategoryOutput() TestIssueCategoryOutput
	ToTestIssueCategoryOutputWithContext(context.Context) TestIssueCategoryOutput
}

var testIssueCategoryPtrType = reflect.TypeOf((**TestIssueCategory)(nil)).Elem()

type TestIssueCategoryPtrInput interface {
	pulumi.Input

	ToTestIssueCategoryPtrOutput() TestIssueCategoryPtrOutput
	ToTestIssueCategoryPtrOutputWithContext(context.Context) TestIssueCategoryPtrOutput
}

type testIssueCategoryPtr string

func TestIssueCategoryPtr(v string) TestIssueCategoryPtrInput {
	return (*testIssueCategoryPtr)(&v)
}

func (*testIssueCategoryPtr) ElementType() reflect.Type {
	return testIssueCategoryPtrType
}

func (in *testIssueCategoryPtr) ToTestIssueCategoryPtrOutput() TestIssueCategoryPtrOutput {
	return pulumi.ToOutput(in).(TestIssueCategoryPtrOutput)
}

func (in *testIssueCategoryPtr) ToTestIssueCategoryPtrOutputWithContext(ctx context.Context) TestIssueCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TestIssueCategoryPtrOutput)
}

func (in *testIssueCategoryPtr) ToOutput(ctx context.Context) pulumix.Output[*TestIssueCategory] {
	return pulumix.Output[*TestIssueCategory]{
		OutputState: in.ToTestIssueCategoryPtrOutputWithContext(ctx).OutputState,
	}
}

// Severity of issue. Required.
type TestIssueSeverity string

const (
	// Default unspecified severity. Do not use. For versioning only.
	TestIssueSeverityUnspecifiedSeverity = TestIssueSeverity("unspecifiedSeverity")
	// Non critical issue, providing users with some info about the test run.
	TestIssueSeverityInfo = TestIssueSeverity("info")
	// Non critical issue, providing users with some hints on improving their testing experience, e.g., suggesting to use Game Loops.
	TestIssueSeveritySuggestion = TestIssueSeverity("suggestion")
	// Potentially critical issue.
	TestIssueSeverityWarning = TestIssueSeverity("warning")
	// Critical issue.
	TestIssueSeveritySevere = TestIssueSeverity("severe")
)

func (TestIssueSeverity) ElementType() reflect.Type {
	return reflect.TypeOf((*TestIssueSeverity)(nil)).Elem()
}

func (e TestIssueSeverity) ToTestIssueSeverityOutput() TestIssueSeverityOutput {
	return pulumi.ToOutput(e).(TestIssueSeverityOutput)
}

func (e TestIssueSeverity) ToTestIssueSeverityOutputWithContext(ctx context.Context) TestIssueSeverityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TestIssueSeverityOutput)
}

func (e TestIssueSeverity) ToTestIssueSeverityPtrOutput() TestIssueSeverityPtrOutput {
	return e.ToTestIssueSeverityPtrOutputWithContext(context.Background())
}

func (e TestIssueSeverity) ToTestIssueSeverityPtrOutputWithContext(ctx context.Context) TestIssueSeverityPtrOutput {
	return TestIssueSeverity(e).ToTestIssueSeverityOutputWithContext(ctx).ToTestIssueSeverityPtrOutputWithContext(ctx)
}

func (e TestIssueSeverity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TestIssueSeverity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TestIssueSeverity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TestIssueSeverity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TestIssueSeverityOutput struct{ *pulumi.OutputState }

func (TestIssueSeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestIssueSeverity)(nil)).Elem()
}

func (o TestIssueSeverityOutput) ToTestIssueSeverityOutput() TestIssueSeverityOutput {
	return o
}

func (o TestIssueSeverityOutput) ToTestIssueSeverityOutputWithContext(ctx context.Context) TestIssueSeverityOutput {
	return o
}

func (o TestIssueSeverityOutput) ToTestIssueSeverityPtrOutput() TestIssueSeverityPtrOutput {
	return o.ToTestIssueSeverityPtrOutputWithContext(context.Background())
}

func (o TestIssueSeverityOutput) ToTestIssueSeverityPtrOutputWithContext(ctx context.Context) TestIssueSeverityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TestIssueSeverity) *TestIssueSeverity {
		return &v
	}).(TestIssueSeverityPtrOutput)
}

func (o TestIssueSeverityOutput) ToOutput(ctx context.Context) pulumix.Output[TestIssueSeverity] {
	return pulumix.Output[TestIssueSeverity]{
		OutputState: o.OutputState,
	}
}

func (o TestIssueSeverityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TestIssueSeverityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TestIssueSeverity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TestIssueSeverityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TestIssueSeverityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TestIssueSeverity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TestIssueSeverityPtrOutput struct{ *pulumi.OutputState }

func (TestIssueSeverityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestIssueSeverity)(nil)).Elem()
}

func (o TestIssueSeverityPtrOutput) ToTestIssueSeverityPtrOutput() TestIssueSeverityPtrOutput {
	return o
}

func (o TestIssueSeverityPtrOutput) ToTestIssueSeverityPtrOutputWithContext(ctx context.Context) TestIssueSeverityPtrOutput {
	return o
}

func (o TestIssueSeverityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TestIssueSeverity] {
	return pulumix.Output[*TestIssueSeverity]{
		OutputState: o.OutputState,
	}
}

func (o TestIssueSeverityPtrOutput) Elem() TestIssueSeverityOutput {
	return o.ApplyT(func(v *TestIssueSeverity) TestIssueSeverity {
		if v != nil {
			return *v
		}
		var ret TestIssueSeverity
		return ret
	}).(TestIssueSeverityOutput)
}

func (o TestIssueSeverityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TestIssueSeverityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TestIssueSeverity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TestIssueSeverityInput is an input type that accepts TestIssueSeverityArgs and TestIssueSeverityOutput values.
// You can construct a concrete instance of `TestIssueSeverityInput` via:
//
//	TestIssueSeverityArgs{...}
type TestIssueSeverityInput interface {
	pulumi.Input

	ToTestIssueSeverityOutput() TestIssueSeverityOutput
	ToTestIssueSeverityOutputWithContext(context.Context) TestIssueSeverityOutput
}

var testIssueSeverityPtrType = reflect.TypeOf((**TestIssueSeverity)(nil)).Elem()

type TestIssueSeverityPtrInput interface {
	pulumi.Input

	ToTestIssueSeverityPtrOutput() TestIssueSeverityPtrOutput
	ToTestIssueSeverityPtrOutputWithContext(context.Context) TestIssueSeverityPtrOutput
}

type testIssueSeverityPtr string

func TestIssueSeverityPtr(v string) TestIssueSeverityPtrInput {
	return (*testIssueSeverityPtr)(&v)
}

func (*testIssueSeverityPtr) ElementType() reflect.Type {
	return testIssueSeverityPtrType
}

func (in *testIssueSeverityPtr) ToTestIssueSeverityPtrOutput() TestIssueSeverityPtrOutput {
	return pulumi.ToOutput(in).(TestIssueSeverityPtrOutput)
}

func (in *testIssueSeverityPtr) ToTestIssueSeverityPtrOutputWithContext(ctx context.Context) TestIssueSeverityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TestIssueSeverityPtrOutput)
}

func (in *testIssueSeverityPtr) ToOutput(ctx context.Context) pulumix.Output[*TestIssueSeverity] {
	return pulumix.Output[*TestIssueSeverity]{
		OutputState: in.ToTestIssueSeverityPtrOutputWithContext(ctx).OutputState,
	}
}

// Type of issue. Required.
type TestIssueType string

const (
	// Default unspecified type. Do not use. For versioning only.
	TestIssueTypeUnspecifiedType = TestIssueType("unspecifiedType")
	// Issue is a fatal exception.
	TestIssueTypeFatalException = TestIssueType("fatalException")
	// Issue is a native crash.
	TestIssueTypeNativeCrash = TestIssueType("nativeCrash")
	// Issue is an ANR crash.
	TestIssueTypeAnr = TestIssueType("anr")
	// Issue is an unused robo directive.
	TestIssueTypeUnusedRoboDirective = TestIssueType("unusedRoboDirective")
	// Issue is a suggestion to use orchestrator.
	TestIssueTypeCompatibleWithOrchestrator = TestIssueType("compatibleWithOrchestrator")
	// Issue with finding a launcher activity
	TestIssueTypeLauncherActivityNotFound = TestIssueType("launcherActivityNotFound")
	// Issue with resolving a user-provided intent to start an activity
	TestIssueTypeStartActivityNotFound = TestIssueType("startActivityNotFound")
	// A Robo script was not fully executed.
	TestIssueTypeIncompleteRoboScriptExecution = TestIssueType("incompleteRoboScriptExecution")
	// A Robo script was fully and successfully executed.
	TestIssueTypeCompleteRoboScriptExecution = TestIssueType("completeRoboScriptExecution")
	// The APK failed to install.
	TestIssueTypeFailedToInstall = TestIssueType("failedToInstall")
	// The app-under-test has deep links, but none were provided to Robo.
	TestIssueTypeAvailableDeepLinks = TestIssueType("availableDeepLinks")
	// App accessed a non-sdk Api.
	TestIssueTypeNonSdkApiUsageViolation = TestIssueType("nonSdkApiUsageViolation")
	// App accessed a non-sdk Api (new detailed report)
	TestIssueTypeNonSdkApiUsageReport = TestIssueType("nonSdkApiUsageReport")
	// Robo crawl encountered at least one screen with elements that are not Android UI widgets.
	TestIssueTypeEncounteredNonAndroidUiWidgetScreen = TestIssueType("encounteredNonAndroidUiWidgetScreen")
	// Robo crawl encountered at least one probable login screen.
	TestIssueTypeEncounteredLoginScreen = TestIssueType("encounteredLoginScreen")
	// Robo signed in with Google.
	TestIssueTypePerformedGoogleLogin = TestIssueType("performedGoogleLogin")
	// iOS App crashed with an exception.
	TestIssueTypeIosException = TestIssueType("iosException")
	// iOS App crashed without an exception (e.g. killed).
	TestIssueTypeIosCrash = TestIssueType("iosCrash")
	// Robo crawl involved performing some monkey actions.
	TestIssueTypePerformedMonkeyActions = TestIssueType("performedMonkeyActions")
	// Robo crawl used a Robo directive.
	TestIssueTypeUsedRoboDirective = TestIssueType("usedRoboDirective")
	// Robo crawl used a Robo directive to ignore an UI element.
	TestIssueTypeUsedRoboIgnoreDirective = TestIssueType("usedRoboIgnoreDirective")
	// Robo did not crawl some potentially important parts of the app.
	TestIssueTypeInsufficientCoverage = TestIssueType("insufficientCoverage")
	// Robo crawl involved some in-app purchases.
	TestIssueTypeInAppPurchases = TestIssueType("inAppPurchases")
	// Crash dialog was detected during the test execution
	TestIssueTypeCrashDialogError = TestIssueType("crashDialogError")
	// UI element depth is greater than the threshold
	TestIssueTypeUiElementsTooDeep = TestIssueType("uiElementsTooDeep")
	// Blank screen is found in the Robo crawl
	TestIssueTypeBlankScreen = TestIssueType("blankScreen")
	// Overlapping UI elements are found in the Robo crawl
	TestIssueTypeOverlappingUiElements = TestIssueType("overlappingUiElements")
	// An uncaught Unity exception was detected (these don't crash apps).
	TestIssueTypeUnityException = TestIssueType("unityException")
	// Device running out of memory was detected
	TestIssueTypeDeviceOutOfMemory = TestIssueType("deviceOutOfMemory")
	// Problems detected while collecting logcat
	TestIssueTypeLogcatCollectionError = TestIssueType("logcatCollectionError")
	// Robo detected a splash screen provided by app (vs. Android OS splash screen).
	TestIssueTypeDetectedAppSplashScreen = TestIssueType("detectedAppSplashScreen")
)

func (TestIssueType) ElementType() reflect.Type {
	return reflect.TypeOf((*TestIssueType)(nil)).Elem()
}

func (e TestIssueType) ToTestIssueTypeOutput() TestIssueTypeOutput {
	return pulumi.ToOutput(e).(TestIssueTypeOutput)
}

func (e TestIssueType) ToTestIssueTypeOutputWithContext(ctx context.Context) TestIssueTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TestIssueTypeOutput)
}

func (e TestIssueType) ToTestIssueTypePtrOutput() TestIssueTypePtrOutput {
	return e.ToTestIssueTypePtrOutputWithContext(context.Background())
}

func (e TestIssueType) ToTestIssueTypePtrOutputWithContext(ctx context.Context) TestIssueTypePtrOutput {
	return TestIssueType(e).ToTestIssueTypeOutputWithContext(ctx).ToTestIssueTypePtrOutputWithContext(ctx)
}

func (e TestIssueType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TestIssueType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TestIssueType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TestIssueType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TestIssueTypeOutput struct{ *pulumi.OutputState }

func (TestIssueTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestIssueType)(nil)).Elem()
}

func (o TestIssueTypeOutput) ToTestIssueTypeOutput() TestIssueTypeOutput {
	return o
}

func (o TestIssueTypeOutput) ToTestIssueTypeOutputWithContext(ctx context.Context) TestIssueTypeOutput {
	return o
}

func (o TestIssueTypeOutput) ToTestIssueTypePtrOutput() TestIssueTypePtrOutput {
	return o.ToTestIssueTypePtrOutputWithContext(context.Background())
}

func (o TestIssueTypeOutput) ToTestIssueTypePtrOutputWithContext(ctx context.Context) TestIssueTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TestIssueType) *TestIssueType {
		return &v
	}).(TestIssueTypePtrOutput)
}

func (o TestIssueTypeOutput) ToOutput(ctx context.Context) pulumix.Output[TestIssueType] {
	return pulumix.Output[TestIssueType]{
		OutputState: o.OutputState,
	}
}

func (o TestIssueTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TestIssueTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TestIssueType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TestIssueTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TestIssueTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TestIssueType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TestIssueTypePtrOutput struct{ *pulumi.OutputState }

func (TestIssueTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestIssueType)(nil)).Elem()
}

func (o TestIssueTypePtrOutput) ToTestIssueTypePtrOutput() TestIssueTypePtrOutput {
	return o
}

func (o TestIssueTypePtrOutput) ToTestIssueTypePtrOutputWithContext(ctx context.Context) TestIssueTypePtrOutput {
	return o
}

func (o TestIssueTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TestIssueType] {
	return pulumix.Output[*TestIssueType]{
		OutputState: o.OutputState,
	}
}

func (o TestIssueTypePtrOutput) Elem() TestIssueTypeOutput {
	return o.ApplyT(func(v *TestIssueType) TestIssueType {
		if v != nil {
			return *v
		}
		var ret TestIssueType
		return ret
	}).(TestIssueTypeOutput)
}

func (o TestIssueTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TestIssueTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TestIssueType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TestIssueTypeInput is an input type that accepts TestIssueTypeArgs and TestIssueTypeOutput values.
// You can construct a concrete instance of `TestIssueTypeInput` via:
//
//	TestIssueTypeArgs{...}
type TestIssueTypeInput interface {
	pulumi.Input

	ToTestIssueTypeOutput() TestIssueTypeOutput
	ToTestIssueTypeOutputWithContext(context.Context) TestIssueTypeOutput
}

var testIssueTypePtrType = reflect.TypeOf((**TestIssueType)(nil)).Elem()

type TestIssueTypePtrInput interface {
	pulumi.Input

	ToTestIssueTypePtrOutput() TestIssueTypePtrOutput
	ToTestIssueTypePtrOutputWithContext(context.Context) TestIssueTypePtrOutput
}

type testIssueTypePtr string

func TestIssueTypePtr(v string) TestIssueTypePtrInput {
	return (*testIssueTypePtr)(&v)
}

func (*testIssueTypePtr) ElementType() reflect.Type {
	return testIssueTypePtrType
}

func (in *testIssueTypePtr) ToTestIssueTypePtrOutput() TestIssueTypePtrOutput {
	return pulumi.ToOutput(in).(TestIssueTypePtrOutput)
}

func (in *testIssueTypePtr) ToTestIssueTypePtrOutputWithContext(ctx context.Context) TestIssueTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TestIssueTypePtrOutput)
}

func (in *testIssueTypePtr) ToOutput(ctx context.Context) pulumix.Output[*TestIssueType] {
	return pulumix.Output[*TestIssueType]{
		OutputState: in.ToTestIssueTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BasicPerfSampleSeriesPerfMetricTypeInput)(nil)).Elem(), BasicPerfSampleSeriesPerfMetricType("perfMetricTypeUnspecified"))
	pulumi.RegisterInputType(reflect.TypeOf((*BasicPerfSampleSeriesPerfMetricTypePtrInput)(nil)).Elem(), BasicPerfSampleSeriesPerfMetricType("perfMetricTypeUnspecified"))
	pulumi.RegisterInputType(reflect.TypeOf((*BasicPerfSampleSeriesPerfUnitInput)(nil)).Elem(), BasicPerfSampleSeriesPerfUnit("perfUnitUnspecified"))
	pulumi.RegisterInputType(reflect.TypeOf((*BasicPerfSampleSeriesPerfUnitPtrInput)(nil)).Elem(), BasicPerfSampleSeriesPerfUnit("perfUnitUnspecified"))
	pulumi.RegisterInputType(reflect.TypeOf((*BasicPerfSampleSeriesSampleSeriesLabelInput)(nil)).Elem(), BasicPerfSampleSeriesSampleSeriesLabel("sampleSeriesTypeUnspecified"))
	pulumi.RegisterInputType(reflect.TypeOf((*BasicPerfSampleSeriesSampleSeriesLabelPtrInput)(nil)).Elem(), BasicPerfSampleSeriesSampleSeriesLabel("sampleSeriesTypeUnspecified"))
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionStateEnumInput)(nil)).Elem(), ExecutionStateEnum("unknownState"))
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionStateEnumPtrInput)(nil)).Elem(), ExecutionStateEnum("unknownState"))
	pulumi.RegisterInputType(reflect.TypeOf((*HistoryTestPlatformInput)(nil)).Elem(), HistoryTestPlatform("unknownPlatform"))
	pulumi.RegisterInputType(reflect.TypeOf((*HistoryTestPlatformPtrInput)(nil)).Elem(), HistoryTestPlatform("unknownPlatform"))
	pulumi.RegisterInputType(reflect.TypeOf((*IndividualOutcomeOutcomeSummaryInput)(nil)).Elem(), IndividualOutcomeOutcomeSummary("unset"))
	pulumi.RegisterInputType(reflect.TypeOf((*IndividualOutcomeOutcomeSummaryPtrInput)(nil)).Elem(), IndividualOutcomeOutcomeSummary("unset"))
	pulumi.RegisterInputType(reflect.TypeOf((*OutcomeSummaryInput)(nil)).Elem(), OutcomeSummary("unset"))
	pulumi.RegisterInputType(reflect.TypeOf((*OutcomeSummaryPtrInput)(nil)).Elem(), OutcomeSummary("unset"))
	pulumi.RegisterInputType(reflect.TypeOf((*PrimaryStepRollUpInput)(nil)).Elem(), PrimaryStepRollUp("unset"))
	pulumi.RegisterInputType(reflect.TypeOf((*PrimaryStepRollUpPtrInput)(nil)).Elem(), PrimaryStepRollUp("unset"))
	pulumi.RegisterInputType(reflect.TypeOf((*StepStateEnumInput)(nil)).Elem(), StepStateEnum("unknownState"))
	pulumi.RegisterInputType(reflect.TypeOf((*StepStateEnumPtrInput)(nil)).Elem(), StepStateEnum("unknownState"))
	pulumi.RegisterInputType(reflect.TypeOf((*TestIssueCategoryInput)(nil)).Elem(), TestIssueCategory("unspecifiedCategory"))
	pulumi.RegisterInputType(reflect.TypeOf((*TestIssueCategoryPtrInput)(nil)).Elem(), TestIssueCategory("unspecifiedCategory"))
	pulumi.RegisterInputType(reflect.TypeOf((*TestIssueSeverityInput)(nil)).Elem(), TestIssueSeverity("unspecifiedSeverity"))
	pulumi.RegisterInputType(reflect.TypeOf((*TestIssueSeverityPtrInput)(nil)).Elem(), TestIssueSeverity("unspecifiedSeverity"))
	pulumi.RegisterInputType(reflect.TypeOf((*TestIssueTypeInput)(nil)).Elem(), TestIssueType("unspecifiedType"))
	pulumi.RegisterInputType(reflect.TypeOf((*TestIssueTypePtrInput)(nil)).Elem(), TestIssueType("unspecifiedType"))
	pulumi.RegisterOutputType(BasicPerfSampleSeriesPerfMetricTypeOutput{})
	pulumi.RegisterOutputType(BasicPerfSampleSeriesPerfMetricTypePtrOutput{})
	pulumi.RegisterOutputType(BasicPerfSampleSeriesPerfUnitOutput{})
	pulumi.RegisterOutputType(BasicPerfSampleSeriesPerfUnitPtrOutput{})
	pulumi.RegisterOutputType(BasicPerfSampleSeriesSampleSeriesLabelOutput{})
	pulumi.RegisterOutputType(BasicPerfSampleSeriesSampleSeriesLabelPtrOutput{})
	pulumi.RegisterOutputType(ExecutionStateEnumOutput{})
	pulumi.RegisterOutputType(ExecutionStateEnumPtrOutput{})
	pulumi.RegisterOutputType(HistoryTestPlatformOutput{})
	pulumi.RegisterOutputType(HistoryTestPlatformPtrOutput{})
	pulumi.RegisterOutputType(IndividualOutcomeOutcomeSummaryOutput{})
	pulumi.RegisterOutputType(IndividualOutcomeOutcomeSummaryPtrOutput{})
	pulumi.RegisterOutputType(OutcomeSummaryOutput{})
	pulumi.RegisterOutputType(OutcomeSummaryPtrOutput{})
	pulumi.RegisterOutputType(PrimaryStepRollUpOutput{})
	pulumi.RegisterOutputType(PrimaryStepRollUpPtrOutput{})
	pulumi.RegisterOutputType(StepStateEnumOutput{})
	pulumi.RegisterOutputType(StepStateEnumPtrOutput{})
	pulumi.RegisterOutputType(TestIssueCategoryOutput{})
	pulumi.RegisterOutputType(TestIssueCategoryPtrOutput{})
	pulumi.RegisterOutputType(TestIssueSeverityOutput{})
	pulumi.RegisterOutputType(TestIssueSeverityPtrOutput{})
	pulumi.RegisterOutputType(TestIssueTypeOutput{})
	pulumi.RegisterOutputType(TestIssueTypePtrOutput{})
}
