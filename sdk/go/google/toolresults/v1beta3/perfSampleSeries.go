// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta3

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a PerfSampleSeries. May return any of the following error code(s): - ALREADY_EXISTS - PerfMetricSummary already exists for the given Step - NOT_FOUND - The containing Step does not exist
// Auto-naming is currently not supported for this resource.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type PerfSampleSeries struct {
	pulumi.CustomResourceState

	// Basic series represented by a line chart
	BasicPerfSampleSeries BasicPerfSampleSeriesResponseOutput `pulumi:"basicPerfSampleSeries"`
	// A tool results execution ID.
	ExecutionId pulumi.StringOutput `pulumi:"executionId"`
	// A tool results history ID.
	HistoryId pulumi.StringOutput `pulumi:"historyId"`
	// The cloud project
	Project pulumi.StringOutput `pulumi:"project"`
	// A sample series id
	SampleSeriesId pulumi.StringOutput `pulumi:"sampleSeriesId"`
	// A tool results step ID.
	StepId pulumi.StringOutput `pulumi:"stepId"`
}

// NewPerfSampleSeries registers a new resource with the given unique name, arguments, and options.
func NewPerfSampleSeries(ctx *pulumi.Context,
	name string, args *PerfSampleSeriesArgs, opts ...pulumi.ResourceOption) (*PerfSampleSeries, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExecutionId == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionId'")
	}
	if args.HistoryId == nil {
		return nil, errors.New("invalid value for required argument 'HistoryId'")
	}
	if args.StepId == nil {
		return nil, errors.New("invalid value for required argument 'StepId'")
	}
	var resource PerfSampleSeries
	err := ctx.RegisterResource("google-native:toolresults/v1beta3:PerfSampleSeries", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPerfSampleSeries gets an existing PerfSampleSeries resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPerfSampleSeries(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PerfSampleSeriesState, opts ...pulumi.ResourceOption) (*PerfSampleSeries, error) {
	var resource PerfSampleSeries
	err := ctx.ReadResource("google-native:toolresults/v1beta3:PerfSampleSeries", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PerfSampleSeries resources.
type perfSampleSeriesState struct {
}

type PerfSampleSeriesState struct {
}

func (PerfSampleSeriesState) ElementType() reflect.Type {
	return reflect.TypeOf((*perfSampleSeriesState)(nil)).Elem()
}

type perfSampleSeriesArgs struct {
	// Basic series represented by a line chart
	BasicPerfSampleSeries *BasicPerfSampleSeries `pulumi:"basicPerfSampleSeries"`
	ExecutionId           string                 `pulumi:"executionId"`
	HistoryId             string                 `pulumi:"historyId"`
	Project               *string                `pulumi:"project"`
	StepId                string                 `pulumi:"stepId"`
}

// The set of arguments for constructing a PerfSampleSeries resource.
type PerfSampleSeriesArgs struct {
	// Basic series represented by a line chart
	BasicPerfSampleSeries BasicPerfSampleSeriesPtrInput
	ExecutionId           pulumi.StringInput
	HistoryId             pulumi.StringInput
	Project               pulumi.StringPtrInput
	StepId                pulumi.StringInput
}

func (PerfSampleSeriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*perfSampleSeriesArgs)(nil)).Elem()
}

type PerfSampleSeriesInput interface {
	pulumi.Input

	ToPerfSampleSeriesOutput() PerfSampleSeriesOutput
	ToPerfSampleSeriesOutputWithContext(ctx context.Context) PerfSampleSeriesOutput
}

func (*PerfSampleSeries) ElementType() reflect.Type {
	return reflect.TypeOf((**PerfSampleSeries)(nil)).Elem()
}

func (i *PerfSampleSeries) ToPerfSampleSeriesOutput() PerfSampleSeriesOutput {
	return i.ToPerfSampleSeriesOutputWithContext(context.Background())
}

func (i *PerfSampleSeries) ToPerfSampleSeriesOutputWithContext(ctx context.Context) PerfSampleSeriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerfSampleSeriesOutput)
}

type PerfSampleSeriesOutput struct{ *pulumi.OutputState }

func (PerfSampleSeriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerfSampleSeries)(nil)).Elem()
}

func (o PerfSampleSeriesOutput) ToPerfSampleSeriesOutput() PerfSampleSeriesOutput {
	return o
}

func (o PerfSampleSeriesOutput) ToPerfSampleSeriesOutputWithContext(ctx context.Context) PerfSampleSeriesOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PerfSampleSeriesInput)(nil)).Elem(), &PerfSampleSeries{})
	pulumi.RegisterOutputType(PerfSampleSeriesOutput{})
}
