// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// A replication policy that replicates the Secret payload without any restrictions.
type Automatic struct {
	// Optional. The customer-managed encryption configuration of the Secret. If no configuration is provided, Google-managed default encryption is used. Updates to the Secret encryption configuration only apply to SecretVersions added afterwards. They do not apply retroactively to existing SecretVersions.
	CustomerManagedEncryption *CustomerManagedEncryption `pulumi:"customerManagedEncryption"`
}

// AutomaticInput is an input type that accepts AutomaticArgs and AutomaticOutput values.
// You can construct a concrete instance of `AutomaticInput` via:
//
//          AutomaticArgs{...}
type AutomaticInput interface {
	pulumi.Input

	ToAutomaticOutput() AutomaticOutput
	ToAutomaticOutputWithContext(context.Context) AutomaticOutput
}

// A replication policy that replicates the Secret payload without any restrictions.
type AutomaticArgs struct {
	// Optional. The customer-managed encryption configuration of the Secret. If no configuration is provided, Google-managed default encryption is used. Updates to the Secret encryption configuration only apply to SecretVersions added afterwards. They do not apply retroactively to existing SecretVersions.
	CustomerManagedEncryption CustomerManagedEncryptionPtrInput `pulumi:"customerManagedEncryption"`
}

func (AutomaticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Automatic)(nil)).Elem()
}

func (i AutomaticArgs) ToAutomaticOutput() AutomaticOutput {
	return i.ToAutomaticOutputWithContext(context.Background())
}

func (i AutomaticArgs) ToAutomaticOutputWithContext(ctx context.Context) AutomaticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticOutput)
}

func (i AutomaticArgs) ToAutomaticPtrOutput() AutomaticPtrOutput {
	return i.ToAutomaticPtrOutputWithContext(context.Background())
}

func (i AutomaticArgs) ToAutomaticPtrOutputWithContext(ctx context.Context) AutomaticPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticOutput).ToAutomaticPtrOutputWithContext(ctx)
}

// AutomaticPtrInput is an input type that accepts AutomaticArgs, AutomaticPtr and AutomaticPtrOutput values.
// You can construct a concrete instance of `AutomaticPtrInput` via:
//
//          AutomaticArgs{...}
//
//  or:
//
//          nil
type AutomaticPtrInput interface {
	pulumi.Input

	ToAutomaticPtrOutput() AutomaticPtrOutput
	ToAutomaticPtrOutputWithContext(context.Context) AutomaticPtrOutput
}

type automaticPtrType AutomaticArgs

func AutomaticPtr(v *AutomaticArgs) AutomaticPtrInput {
	return (*automaticPtrType)(v)
}

func (*automaticPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Automatic)(nil)).Elem()
}

func (i *automaticPtrType) ToAutomaticPtrOutput() AutomaticPtrOutput {
	return i.ToAutomaticPtrOutputWithContext(context.Background())
}

func (i *automaticPtrType) ToAutomaticPtrOutputWithContext(ctx context.Context) AutomaticPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomaticPtrOutput)
}

// A replication policy that replicates the Secret payload without any restrictions.
type AutomaticOutput struct{ *pulumi.OutputState }

func (AutomaticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Automatic)(nil)).Elem()
}

func (o AutomaticOutput) ToAutomaticOutput() AutomaticOutput {
	return o
}

func (o AutomaticOutput) ToAutomaticOutputWithContext(ctx context.Context) AutomaticOutput {
	return o
}

func (o AutomaticOutput) ToAutomaticPtrOutput() AutomaticPtrOutput {
	return o.ToAutomaticPtrOutputWithContext(context.Background())
}

func (o AutomaticOutput) ToAutomaticPtrOutputWithContext(ctx context.Context) AutomaticPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Automatic) *Automatic {
		return &v
	}).(AutomaticPtrOutput)
}

// Optional. The customer-managed encryption configuration of the Secret. If no configuration is provided, Google-managed default encryption is used. Updates to the Secret encryption configuration only apply to SecretVersions added afterwards. They do not apply retroactively to existing SecretVersions.
func (o AutomaticOutput) CustomerManagedEncryption() CustomerManagedEncryptionPtrOutput {
	return o.ApplyT(func(v Automatic) *CustomerManagedEncryption { return v.CustomerManagedEncryption }).(CustomerManagedEncryptionPtrOutput)
}

type AutomaticPtrOutput struct{ *pulumi.OutputState }

func (AutomaticPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Automatic)(nil)).Elem()
}

func (o AutomaticPtrOutput) ToAutomaticPtrOutput() AutomaticPtrOutput {
	return o
}

func (o AutomaticPtrOutput) ToAutomaticPtrOutputWithContext(ctx context.Context) AutomaticPtrOutput {
	return o
}

func (o AutomaticPtrOutput) Elem() AutomaticOutput {
	return o.ApplyT(func(v *Automatic) Automatic {
		if v != nil {
			return *v
		}
		var ret Automatic
		return ret
	}).(AutomaticOutput)
}

// Optional. The customer-managed encryption configuration of the Secret. If no configuration is provided, Google-managed default encryption is used. Updates to the Secret encryption configuration only apply to SecretVersions added afterwards. They do not apply retroactively to existing SecretVersions.
func (o AutomaticPtrOutput) CustomerManagedEncryption() CustomerManagedEncryptionPtrOutput {
	return o.ApplyT(func(v *Automatic) *CustomerManagedEncryption {
		if v == nil {
			return nil
		}
		return v.CustomerManagedEncryption
	}).(CustomerManagedEncryptionPtrOutput)
}

// A replication policy that replicates the Secret payload without any restrictions.
type AutomaticResponse struct {
	// Optional. The customer-managed encryption configuration of the Secret. If no configuration is provided, Google-managed default encryption is used. Updates to the Secret encryption configuration only apply to SecretVersions added afterwards. They do not apply retroactively to existing SecretVersions.
	CustomerManagedEncryption CustomerManagedEncryptionResponse `pulumi:"customerManagedEncryption"`
}

// A replication policy that replicates the Secret payload without any restrictions.
type AutomaticResponseOutput struct{ *pulumi.OutputState }

func (AutomaticResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomaticResponse)(nil)).Elem()
}

func (o AutomaticResponseOutput) ToAutomaticResponseOutput() AutomaticResponseOutput {
	return o
}

func (o AutomaticResponseOutput) ToAutomaticResponseOutputWithContext(ctx context.Context) AutomaticResponseOutput {
	return o
}

// Optional. The customer-managed encryption configuration of the Secret. If no configuration is provided, Google-managed default encryption is used. Updates to the Secret encryption configuration only apply to SecretVersions added afterwards. They do not apply retroactively to existing SecretVersions.
func (o AutomaticResponseOutput) CustomerManagedEncryption() CustomerManagedEncryptionResponseOutput {
	return o.ApplyT(func(v AutomaticResponse) CustomerManagedEncryptionResponse { return v.CustomerManagedEncryption }).(CustomerManagedEncryptionResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Configuration for encrypting secret payloads using customer-managed encryption keys (CMEK).
type CustomerManagedEncryption struct {
	// The resource name of the Cloud KMS CryptoKey used to encrypt secret payloads. For secrets using the UserManaged replication policy type, Cloud KMS CryptoKeys must reside in the same location as the replica location. For secrets using the Automatic replication policy type, Cloud KMS CryptoKeys must reside in `global`. The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// CustomerManagedEncryptionInput is an input type that accepts CustomerManagedEncryptionArgs and CustomerManagedEncryptionOutput values.
// You can construct a concrete instance of `CustomerManagedEncryptionInput` via:
//
//          CustomerManagedEncryptionArgs{...}
type CustomerManagedEncryptionInput interface {
	pulumi.Input

	ToCustomerManagedEncryptionOutput() CustomerManagedEncryptionOutput
	ToCustomerManagedEncryptionOutputWithContext(context.Context) CustomerManagedEncryptionOutput
}

// Configuration for encrypting secret payloads using customer-managed encryption keys (CMEK).
type CustomerManagedEncryptionArgs struct {
	// The resource name of the Cloud KMS CryptoKey used to encrypt secret payloads. For secrets using the UserManaged replication policy type, Cloud KMS CryptoKeys must reside in the same location as the replica location. For secrets using the Automatic replication policy type, Cloud KMS CryptoKeys must reside in `global`. The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	KmsKeyName pulumi.StringInput `pulumi:"kmsKeyName"`
}

func (CustomerManagedEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerManagedEncryption)(nil)).Elem()
}

func (i CustomerManagedEncryptionArgs) ToCustomerManagedEncryptionOutput() CustomerManagedEncryptionOutput {
	return i.ToCustomerManagedEncryptionOutputWithContext(context.Background())
}

func (i CustomerManagedEncryptionArgs) ToCustomerManagedEncryptionOutputWithContext(ctx context.Context) CustomerManagedEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedEncryptionOutput)
}

func (i CustomerManagedEncryptionArgs) ToCustomerManagedEncryptionPtrOutput() CustomerManagedEncryptionPtrOutput {
	return i.ToCustomerManagedEncryptionPtrOutputWithContext(context.Background())
}

func (i CustomerManagedEncryptionArgs) ToCustomerManagedEncryptionPtrOutputWithContext(ctx context.Context) CustomerManagedEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedEncryptionOutput).ToCustomerManagedEncryptionPtrOutputWithContext(ctx)
}

// CustomerManagedEncryptionPtrInput is an input type that accepts CustomerManagedEncryptionArgs, CustomerManagedEncryptionPtr and CustomerManagedEncryptionPtrOutput values.
// You can construct a concrete instance of `CustomerManagedEncryptionPtrInput` via:
//
//          CustomerManagedEncryptionArgs{...}
//
//  or:
//
//          nil
type CustomerManagedEncryptionPtrInput interface {
	pulumi.Input

	ToCustomerManagedEncryptionPtrOutput() CustomerManagedEncryptionPtrOutput
	ToCustomerManagedEncryptionPtrOutputWithContext(context.Context) CustomerManagedEncryptionPtrOutput
}

type customerManagedEncryptionPtrType CustomerManagedEncryptionArgs

func CustomerManagedEncryptionPtr(v *CustomerManagedEncryptionArgs) CustomerManagedEncryptionPtrInput {
	return (*customerManagedEncryptionPtrType)(v)
}

func (*customerManagedEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerManagedEncryption)(nil)).Elem()
}

func (i *customerManagedEncryptionPtrType) ToCustomerManagedEncryptionPtrOutput() CustomerManagedEncryptionPtrOutput {
	return i.ToCustomerManagedEncryptionPtrOutputWithContext(context.Background())
}

func (i *customerManagedEncryptionPtrType) ToCustomerManagedEncryptionPtrOutputWithContext(ctx context.Context) CustomerManagedEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedEncryptionPtrOutput)
}

// Configuration for encrypting secret payloads using customer-managed encryption keys (CMEK).
type CustomerManagedEncryptionOutput struct{ *pulumi.OutputState }

func (CustomerManagedEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerManagedEncryption)(nil)).Elem()
}

func (o CustomerManagedEncryptionOutput) ToCustomerManagedEncryptionOutput() CustomerManagedEncryptionOutput {
	return o
}

func (o CustomerManagedEncryptionOutput) ToCustomerManagedEncryptionOutputWithContext(ctx context.Context) CustomerManagedEncryptionOutput {
	return o
}

func (o CustomerManagedEncryptionOutput) ToCustomerManagedEncryptionPtrOutput() CustomerManagedEncryptionPtrOutput {
	return o.ToCustomerManagedEncryptionPtrOutputWithContext(context.Background())
}

func (o CustomerManagedEncryptionOutput) ToCustomerManagedEncryptionPtrOutputWithContext(ctx context.Context) CustomerManagedEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomerManagedEncryption) *CustomerManagedEncryption {
		return &v
	}).(CustomerManagedEncryptionPtrOutput)
}

// The resource name of the Cloud KMS CryptoKey used to encrypt secret payloads. For secrets using the UserManaged replication policy type, Cloud KMS CryptoKeys must reside in the same location as the replica location. For secrets using the Automatic replication policy type, Cloud KMS CryptoKeys must reside in `global`. The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
func (o CustomerManagedEncryptionOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerManagedEncryption) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type CustomerManagedEncryptionPtrOutput struct{ *pulumi.OutputState }

func (CustomerManagedEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerManagedEncryption)(nil)).Elem()
}

func (o CustomerManagedEncryptionPtrOutput) ToCustomerManagedEncryptionPtrOutput() CustomerManagedEncryptionPtrOutput {
	return o
}

func (o CustomerManagedEncryptionPtrOutput) ToCustomerManagedEncryptionPtrOutputWithContext(ctx context.Context) CustomerManagedEncryptionPtrOutput {
	return o
}

func (o CustomerManagedEncryptionPtrOutput) Elem() CustomerManagedEncryptionOutput {
	return o.ApplyT(func(v *CustomerManagedEncryption) CustomerManagedEncryption {
		if v != nil {
			return *v
		}
		var ret CustomerManagedEncryption
		return ret
	}).(CustomerManagedEncryptionOutput)
}

// The resource name of the Cloud KMS CryptoKey used to encrypt secret payloads. For secrets using the UserManaged replication policy type, Cloud KMS CryptoKeys must reside in the same location as the replica location. For secrets using the Automatic replication policy type, Cloud KMS CryptoKeys must reside in `global`. The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
func (o CustomerManagedEncryptionPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerManagedEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Configuration for encrypting secret payloads using customer-managed encryption keys (CMEK).
type CustomerManagedEncryptionResponse struct {
	// The resource name of the Cloud KMS CryptoKey used to encrypt secret payloads. For secrets using the UserManaged replication policy type, Cloud KMS CryptoKeys must reside in the same location as the replica location. For secrets using the Automatic replication policy type, Cloud KMS CryptoKeys must reside in `global`. The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// Configuration for encrypting secret payloads using customer-managed encryption keys (CMEK).
type CustomerManagedEncryptionResponseOutput struct{ *pulumi.OutputState }

func (CustomerManagedEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerManagedEncryptionResponse)(nil)).Elem()
}

func (o CustomerManagedEncryptionResponseOutput) ToCustomerManagedEncryptionResponseOutput() CustomerManagedEncryptionResponseOutput {
	return o
}

func (o CustomerManagedEncryptionResponseOutput) ToCustomerManagedEncryptionResponseOutputWithContext(ctx context.Context) CustomerManagedEncryptionResponseOutput {
	return o
}

// The resource name of the Cloud KMS CryptoKey used to encrypt secret payloads. For secrets using the UserManaged replication policy type, Cloud KMS CryptoKeys must reside in the same location as the replica location. For secrets using the Automatic replication policy type, Cloud KMS CryptoKeys must reside in `global`. The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
func (o CustomerManagedEncryptionResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerManagedEncryptionResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Represents a Replica for this Secret.
type Replica struct {
	// Optional. The customer-managed encryption configuration of the User-Managed Replica. If no configuration is provided, Google-managed default encryption is used. Updates to the Secret encryption configuration only apply to SecretVersions added afterwards. They do not apply retroactively to existing SecretVersions.
	CustomerManagedEncryption *CustomerManagedEncryption `pulumi:"customerManagedEncryption"`
	// The canonical IDs of the location to replicate data. For example: `"us-east1"`.
	Location *string `pulumi:"location"`
}

// ReplicaInput is an input type that accepts ReplicaArgs and ReplicaOutput values.
// You can construct a concrete instance of `ReplicaInput` via:
//
//          ReplicaArgs{...}
type ReplicaInput interface {
	pulumi.Input

	ToReplicaOutput() ReplicaOutput
	ToReplicaOutputWithContext(context.Context) ReplicaOutput
}

// Represents a Replica for this Secret.
type ReplicaArgs struct {
	// Optional. The customer-managed encryption configuration of the User-Managed Replica. If no configuration is provided, Google-managed default encryption is used. Updates to the Secret encryption configuration only apply to SecretVersions added afterwards. They do not apply retroactively to existing SecretVersions.
	CustomerManagedEncryption CustomerManagedEncryptionPtrInput `pulumi:"customerManagedEncryption"`
	// The canonical IDs of the location to replicate data. For example: `"us-east1"`.
	Location pulumi.StringPtrInput `pulumi:"location"`
}

func (ReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Replica)(nil)).Elem()
}

func (i ReplicaArgs) ToReplicaOutput() ReplicaOutput {
	return i.ToReplicaOutputWithContext(context.Background())
}

func (i ReplicaArgs) ToReplicaOutputWithContext(ctx context.Context) ReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaOutput)
}

// ReplicaArrayInput is an input type that accepts ReplicaArray and ReplicaArrayOutput values.
// You can construct a concrete instance of `ReplicaArrayInput` via:
//
//          ReplicaArray{ ReplicaArgs{...} }
type ReplicaArrayInput interface {
	pulumi.Input

	ToReplicaArrayOutput() ReplicaArrayOutput
	ToReplicaArrayOutputWithContext(context.Context) ReplicaArrayOutput
}

type ReplicaArray []ReplicaInput

func (ReplicaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Replica)(nil)).Elem()
}

func (i ReplicaArray) ToReplicaArrayOutput() ReplicaArrayOutput {
	return i.ToReplicaArrayOutputWithContext(context.Background())
}

func (i ReplicaArray) ToReplicaArrayOutputWithContext(ctx context.Context) ReplicaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaArrayOutput)
}

// Represents a Replica for this Secret.
type ReplicaOutput struct{ *pulumi.OutputState }

func (ReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Replica)(nil)).Elem()
}

func (o ReplicaOutput) ToReplicaOutput() ReplicaOutput {
	return o
}

func (o ReplicaOutput) ToReplicaOutputWithContext(ctx context.Context) ReplicaOutput {
	return o
}

// Optional. The customer-managed encryption configuration of the User-Managed Replica. If no configuration is provided, Google-managed default encryption is used. Updates to the Secret encryption configuration only apply to SecretVersions added afterwards. They do not apply retroactively to existing SecretVersions.
func (o ReplicaOutput) CustomerManagedEncryption() CustomerManagedEncryptionPtrOutput {
	return o.ApplyT(func(v Replica) *CustomerManagedEncryption { return v.CustomerManagedEncryption }).(CustomerManagedEncryptionPtrOutput)
}

// The canonical IDs of the location to replicate data. For example: `"us-east1"`.
func (o ReplicaOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Replica) *string { return v.Location }).(pulumi.StringPtrOutput)
}

type ReplicaArrayOutput struct{ *pulumi.OutputState }

func (ReplicaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Replica)(nil)).Elem()
}

func (o ReplicaArrayOutput) ToReplicaArrayOutput() ReplicaArrayOutput {
	return o
}

func (o ReplicaArrayOutput) ToReplicaArrayOutputWithContext(ctx context.Context) ReplicaArrayOutput {
	return o
}

func (o ReplicaArrayOutput) Index(i pulumi.IntInput) ReplicaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Replica {
		return vs[0].([]Replica)[vs[1].(int)]
	}).(ReplicaOutput)
}

// Represents a Replica for this Secret.
type ReplicaResponse struct {
	// Optional. The customer-managed encryption configuration of the User-Managed Replica. If no configuration is provided, Google-managed default encryption is used. Updates to the Secret encryption configuration only apply to SecretVersions added afterwards. They do not apply retroactively to existing SecretVersions.
	CustomerManagedEncryption CustomerManagedEncryptionResponse `pulumi:"customerManagedEncryption"`
	// The canonical IDs of the location to replicate data. For example: `"us-east1"`.
	Location string `pulumi:"location"`
}

// Represents a Replica for this Secret.
type ReplicaResponseOutput struct{ *pulumi.OutputState }

func (ReplicaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaResponse)(nil)).Elem()
}

func (o ReplicaResponseOutput) ToReplicaResponseOutput() ReplicaResponseOutput {
	return o
}

func (o ReplicaResponseOutput) ToReplicaResponseOutputWithContext(ctx context.Context) ReplicaResponseOutput {
	return o
}

// Optional. The customer-managed encryption configuration of the User-Managed Replica. If no configuration is provided, Google-managed default encryption is used. Updates to the Secret encryption configuration only apply to SecretVersions added afterwards. They do not apply retroactively to existing SecretVersions.
func (o ReplicaResponseOutput) CustomerManagedEncryption() CustomerManagedEncryptionResponseOutput {
	return o.ApplyT(func(v ReplicaResponse) CustomerManagedEncryptionResponse { return v.CustomerManagedEncryption }).(CustomerManagedEncryptionResponseOutput)
}

// The canonical IDs of the location to replicate data. For example: `"us-east1"`.
func (o ReplicaResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicaResponse) string { return v.Location }).(pulumi.StringOutput)
}

type ReplicaResponseArrayOutput struct{ *pulumi.OutputState }

func (ReplicaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicaResponse)(nil)).Elem()
}

func (o ReplicaResponseArrayOutput) ToReplicaResponseArrayOutput() ReplicaResponseArrayOutput {
	return o
}

func (o ReplicaResponseArrayOutput) ToReplicaResponseArrayOutputWithContext(ctx context.Context) ReplicaResponseArrayOutput {
	return o
}

func (o ReplicaResponseArrayOutput) Index(i pulumi.IntInput) ReplicaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicaResponse {
		return vs[0].([]ReplicaResponse)[vs[1].(int)]
	}).(ReplicaResponseOutput)
}

// A policy that defines the replication and encryption configuration of data.
type Replication struct {
	// The Secret will automatically be replicated without any restrictions.
	Automatic *Automatic `pulumi:"automatic"`
	// The Secret will only be replicated into the locations specified.
	UserManaged *UserManaged `pulumi:"userManaged"`
}

// ReplicationInput is an input type that accepts ReplicationArgs and ReplicationOutput values.
// You can construct a concrete instance of `ReplicationInput` via:
//
//          ReplicationArgs{...}
type ReplicationInput interface {
	pulumi.Input

	ToReplicationOutput() ReplicationOutput
	ToReplicationOutputWithContext(context.Context) ReplicationOutput
}

// A policy that defines the replication and encryption configuration of data.
type ReplicationArgs struct {
	// The Secret will automatically be replicated without any restrictions.
	Automatic AutomaticPtrInput `pulumi:"automatic"`
	// The Secret will only be replicated into the locations specified.
	UserManaged UserManagedPtrInput `pulumi:"userManaged"`
}

func (ReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Replication)(nil)).Elem()
}

func (i ReplicationArgs) ToReplicationOutput() ReplicationOutput {
	return i.ToReplicationOutputWithContext(context.Background())
}

func (i ReplicationArgs) ToReplicationOutputWithContext(ctx context.Context) ReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationOutput)
}

// A policy that defines the replication and encryption configuration of data.
type ReplicationOutput struct{ *pulumi.OutputState }

func (ReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Replication)(nil)).Elem()
}

func (o ReplicationOutput) ToReplicationOutput() ReplicationOutput {
	return o
}

func (o ReplicationOutput) ToReplicationOutputWithContext(ctx context.Context) ReplicationOutput {
	return o
}

// The Secret will automatically be replicated without any restrictions.
func (o ReplicationOutput) Automatic() AutomaticPtrOutput {
	return o.ApplyT(func(v Replication) *Automatic { return v.Automatic }).(AutomaticPtrOutput)
}

// The Secret will only be replicated into the locations specified.
func (o ReplicationOutput) UserManaged() UserManagedPtrOutput {
	return o.ApplyT(func(v Replication) *UserManaged { return v.UserManaged }).(UserManagedPtrOutput)
}

// A policy that defines the replication and encryption configuration of data.
type ReplicationResponse struct {
	// The Secret will automatically be replicated without any restrictions.
	Automatic AutomaticResponse `pulumi:"automatic"`
	// The Secret will only be replicated into the locations specified.
	UserManaged UserManagedResponse `pulumi:"userManaged"`
}

// A policy that defines the replication and encryption configuration of data.
type ReplicationResponseOutput struct{ *pulumi.OutputState }

func (ReplicationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationResponse)(nil)).Elem()
}

func (o ReplicationResponseOutput) ToReplicationResponseOutput() ReplicationResponseOutput {
	return o
}

func (o ReplicationResponseOutput) ToReplicationResponseOutputWithContext(ctx context.Context) ReplicationResponseOutput {
	return o
}

// The Secret will automatically be replicated without any restrictions.
func (o ReplicationResponseOutput) Automatic() AutomaticResponseOutput {
	return o.ApplyT(func(v ReplicationResponse) AutomaticResponse { return v.Automatic }).(AutomaticResponseOutput)
}

// The Secret will only be replicated into the locations specified.
func (o ReplicationResponseOutput) UserManaged() UserManagedResponseOutput {
	return o.ApplyT(func(v ReplicationResponse) UserManagedResponse { return v.UserManaged }).(UserManagedResponseOutput)
}

// The rotation time and period for a Secret. At next_rotation_time, Secret Manager will send a Pub/Sub notification to the topics configured on the Secret. Secret.topics must be set to configure rotation.
type Rotation struct {
	// Optional. Timestamp in UTC at which the Secret is scheduled to rotate. Cannot be set to less than 300s (5 min) in the future and at most 3153600000s (100 years). next_rotation_time MUST be set if rotation_period is set.
	NextRotationTime *string `pulumi:"nextRotationTime"`
	// Input only. The Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years). If rotation_period is set, next_rotation_time must be set. next_rotation_time will be advanced by this period when the service automatically sends rotation notifications.
	RotationPeriod *string `pulumi:"rotationPeriod"`
}

// RotationInput is an input type that accepts RotationArgs and RotationOutput values.
// You can construct a concrete instance of `RotationInput` via:
//
//          RotationArgs{...}
type RotationInput interface {
	pulumi.Input

	ToRotationOutput() RotationOutput
	ToRotationOutputWithContext(context.Context) RotationOutput
}

// The rotation time and period for a Secret. At next_rotation_time, Secret Manager will send a Pub/Sub notification to the topics configured on the Secret. Secret.topics must be set to configure rotation.
type RotationArgs struct {
	// Optional. Timestamp in UTC at which the Secret is scheduled to rotate. Cannot be set to less than 300s (5 min) in the future and at most 3153600000s (100 years). next_rotation_time MUST be set if rotation_period is set.
	NextRotationTime pulumi.StringPtrInput `pulumi:"nextRotationTime"`
	// Input only. The Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years). If rotation_period is set, next_rotation_time must be set. next_rotation_time will be advanced by this period when the service automatically sends rotation notifications.
	RotationPeriod pulumi.StringPtrInput `pulumi:"rotationPeriod"`
}

func (RotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Rotation)(nil)).Elem()
}

func (i RotationArgs) ToRotationOutput() RotationOutput {
	return i.ToRotationOutputWithContext(context.Background())
}

func (i RotationArgs) ToRotationOutputWithContext(ctx context.Context) RotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotationOutput)
}

func (i RotationArgs) ToRotationPtrOutput() RotationPtrOutput {
	return i.ToRotationPtrOutputWithContext(context.Background())
}

func (i RotationArgs) ToRotationPtrOutputWithContext(ctx context.Context) RotationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotationOutput).ToRotationPtrOutputWithContext(ctx)
}

// RotationPtrInput is an input type that accepts RotationArgs, RotationPtr and RotationPtrOutput values.
// You can construct a concrete instance of `RotationPtrInput` via:
//
//          RotationArgs{...}
//
//  or:
//
//          nil
type RotationPtrInput interface {
	pulumi.Input

	ToRotationPtrOutput() RotationPtrOutput
	ToRotationPtrOutputWithContext(context.Context) RotationPtrOutput
}

type rotationPtrType RotationArgs

func RotationPtr(v *RotationArgs) RotationPtrInput {
	return (*rotationPtrType)(v)
}

func (*rotationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Rotation)(nil)).Elem()
}

func (i *rotationPtrType) ToRotationPtrOutput() RotationPtrOutput {
	return i.ToRotationPtrOutputWithContext(context.Background())
}

func (i *rotationPtrType) ToRotationPtrOutputWithContext(ctx context.Context) RotationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotationPtrOutput)
}

// The rotation time and period for a Secret. At next_rotation_time, Secret Manager will send a Pub/Sub notification to the topics configured on the Secret. Secret.topics must be set to configure rotation.
type RotationOutput struct{ *pulumi.OutputState }

func (RotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Rotation)(nil)).Elem()
}

func (o RotationOutput) ToRotationOutput() RotationOutput {
	return o
}

func (o RotationOutput) ToRotationOutputWithContext(ctx context.Context) RotationOutput {
	return o
}

func (o RotationOutput) ToRotationPtrOutput() RotationPtrOutput {
	return o.ToRotationPtrOutputWithContext(context.Background())
}

func (o RotationOutput) ToRotationPtrOutputWithContext(ctx context.Context) RotationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Rotation) *Rotation {
		return &v
	}).(RotationPtrOutput)
}

// Optional. Timestamp in UTC at which the Secret is scheduled to rotate. Cannot be set to less than 300s (5 min) in the future and at most 3153600000s (100 years). next_rotation_time MUST be set if rotation_period is set.
func (o RotationOutput) NextRotationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rotation) *string { return v.NextRotationTime }).(pulumi.StringPtrOutput)
}

// Input only. The Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years). If rotation_period is set, next_rotation_time must be set. next_rotation_time will be advanced by this period when the service automatically sends rotation notifications.
func (o RotationOutput) RotationPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rotation) *string { return v.RotationPeriod }).(pulumi.StringPtrOutput)
}

type RotationPtrOutput struct{ *pulumi.OutputState }

func (RotationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rotation)(nil)).Elem()
}

func (o RotationPtrOutput) ToRotationPtrOutput() RotationPtrOutput {
	return o
}

func (o RotationPtrOutput) ToRotationPtrOutputWithContext(ctx context.Context) RotationPtrOutput {
	return o
}

func (o RotationPtrOutput) Elem() RotationOutput {
	return o.ApplyT(func(v *Rotation) Rotation {
		if v != nil {
			return *v
		}
		var ret Rotation
		return ret
	}).(RotationOutput)
}

// Optional. Timestamp in UTC at which the Secret is scheduled to rotate. Cannot be set to less than 300s (5 min) in the future and at most 3153600000s (100 years). next_rotation_time MUST be set if rotation_period is set.
func (o RotationPtrOutput) NextRotationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rotation) *string {
		if v == nil {
			return nil
		}
		return v.NextRotationTime
	}).(pulumi.StringPtrOutput)
}

// Input only. The Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years). If rotation_period is set, next_rotation_time must be set. next_rotation_time will be advanced by this period when the service automatically sends rotation notifications.
func (o RotationPtrOutput) RotationPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rotation) *string {
		if v == nil {
			return nil
		}
		return v.RotationPeriod
	}).(pulumi.StringPtrOutput)
}

// The rotation time and period for a Secret. At next_rotation_time, Secret Manager will send a Pub/Sub notification to the topics configured on the Secret. Secret.topics must be set to configure rotation.
type RotationResponse struct {
	// Optional. Timestamp in UTC at which the Secret is scheduled to rotate. Cannot be set to less than 300s (5 min) in the future and at most 3153600000s (100 years). next_rotation_time MUST be set if rotation_period is set.
	NextRotationTime string `pulumi:"nextRotationTime"`
	// Input only. The Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years). If rotation_period is set, next_rotation_time must be set. next_rotation_time will be advanced by this period when the service automatically sends rotation notifications.
	RotationPeriod string `pulumi:"rotationPeriod"`
}

// The rotation time and period for a Secret. At next_rotation_time, Secret Manager will send a Pub/Sub notification to the topics configured on the Secret. Secret.topics must be set to configure rotation.
type RotationResponseOutput struct{ *pulumi.OutputState }

func (RotationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RotationResponse)(nil)).Elem()
}

func (o RotationResponseOutput) ToRotationResponseOutput() RotationResponseOutput {
	return o
}

func (o RotationResponseOutput) ToRotationResponseOutputWithContext(ctx context.Context) RotationResponseOutput {
	return o
}

// Optional. Timestamp in UTC at which the Secret is scheduled to rotate. Cannot be set to less than 300s (5 min) in the future and at most 3153600000s (100 years). next_rotation_time MUST be set if rotation_period is set.
func (o RotationResponseOutput) NextRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v RotationResponse) string { return v.NextRotationTime }).(pulumi.StringOutput)
}

// Input only. The Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years). If rotation_period is set, next_rotation_time must be set. next_rotation_time will be advanced by this period when the service automatically sends rotation notifications.
func (o RotationResponseOutput) RotationPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v RotationResponse) string { return v.RotationPeriod }).(pulumi.StringOutput)
}

// A Pub/Sub topic which Secret Manager will publish to when control plane events occur on this secret.
type Topic struct {
	// The resource name of the Pub/Sub topic that will be published to, in the following format: `projects/*/topics/*`. For publication to succeed, the Secret Manager P4SA must have `pubsub.publisher` permissions on the topic.
	Name string `pulumi:"name"`
}

// TopicInput is an input type that accepts TopicArgs and TopicOutput values.
// You can construct a concrete instance of `TopicInput` via:
//
//          TopicArgs{...}
type TopicInput interface {
	pulumi.Input

	ToTopicOutput() TopicOutput
	ToTopicOutputWithContext(context.Context) TopicOutput
}

// A Pub/Sub topic which Secret Manager will publish to when control plane events occur on this secret.
type TopicArgs struct {
	// The resource name of the Pub/Sub topic that will be published to, in the following format: `projects/*/topics/*`. For publication to succeed, the Secret Manager P4SA must have `pubsub.publisher` permissions on the topic.
	Name pulumi.StringInput `pulumi:"name"`
}

func (TopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Topic)(nil)).Elem()
}

func (i TopicArgs) ToTopicOutput() TopicOutput {
	return i.ToTopicOutputWithContext(context.Background())
}

func (i TopicArgs) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicOutput)
}

// TopicArrayInput is an input type that accepts TopicArray and TopicArrayOutput values.
// You can construct a concrete instance of `TopicArrayInput` via:
//
//          TopicArray{ TopicArgs{...} }
type TopicArrayInput interface {
	pulumi.Input

	ToTopicArrayOutput() TopicArrayOutput
	ToTopicArrayOutputWithContext(context.Context) TopicArrayOutput
}

type TopicArray []TopicInput

func (TopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Topic)(nil)).Elem()
}

func (i TopicArray) ToTopicArrayOutput() TopicArrayOutput {
	return i.ToTopicArrayOutputWithContext(context.Background())
}

func (i TopicArray) ToTopicArrayOutputWithContext(ctx context.Context) TopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicArrayOutput)
}

// A Pub/Sub topic which Secret Manager will publish to when control plane events occur on this secret.
type TopicOutput struct{ *pulumi.OutputState }

func (TopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Topic)(nil)).Elem()
}

func (o TopicOutput) ToTopicOutput() TopicOutput {
	return o
}

func (o TopicOutput) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return o
}

// The resource name of the Pub/Sub topic that will be published to, in the following format: `projects/*/topics/*`. For publication to succeed, the Secret Manager P4SA must have `pubsub.publisher` permissions on the topic.
func (o TopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Topic) string { return v.Name }).(pulumi.StringOutput)
}

type TopicArrayOutput struct{ *pulumi.OutputState }

func (TopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Topic)(nil)).Elem()
}

func (o TopicArrayOutput) ToTopicArrayOutput() TopicArrayOutput {
	return o
}

func (o TopicArrayOutput) ToTopicArrayOutputWithContext(ctx context.Context) TopicArrayOutput {
	return o
}

func (o TopicArrayOutput) Index(i pulumi.IntInput) TopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Topic {
		return vs[0].([]Topic)[vs[1].(int)]
	}).(TopicOutput)
}

// A Pub/Sub topic which Secret Manager will publish to when control plane events occur on this secret.
type TopicResponse struct {
	// The resource name of the Pub/Sub topic that will be published to, in the following format: `projects/*/topics/*`. For publication to succeed, the Secret Manager P4SA must have `pubsub.publisher` permissions on the topic.
	Name string `pulumi:"name"`
}

// A Pub/Sub topic which Secret Manager will publish to when control plane events occur on this secret.
type TopicResponseOutput struct{ *pulumi.OutputState }

func (TopicResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicResponse)(nil)).Elem()
}

func (o TopicResponseOutput) ToTopicResponseOutput() TopicResponseOutput {
	return o
}

func (o TopicResponseOutput) ToTopicResponseOutputWithContext(ctx context.Context) TopicResponseOutput {
	return o
}

// The resource name of the Pub/Sub topic that will be published to, in the following format: `projects/*/topics/*`. For publication to succeed, the Secret Manager P4SA must have `pubsub.publisher` permissions on the topic.
func (o TopicResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TopicResponse) string { return v.Name }).(pulumi.StringOutput)
}

type TopicResponseArrayOutput struct{ *pulumi.OutputState }

func (TopicResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicResponse)(nil)).Elem()
}

func (o TopicResponseArrayOutput) ToTopicResponseArrayOutput() TopicResponseArrayOutput {
	return o
}

func (o TopicResponseArrayOutput) ToTopicResponseArrayOutputWithContext(ctx context.Context) TopicResponseArrayOutput {
	return o
}

func (o TopicResponseArrayOutput) Index(i pulumi.IntInput) TopicResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicResponse {
		return vs[0].([]TopicResponse)[vs[1].(int)]
	}).(TopicResponseOutput)
}

// A replication policy that replicates the Secret payload into the locations specified in Secret.replication.user_managed.replicas
type UserManaged struct {
	// The list of Replicas for this Secret. Cannot be empty.
	Replicas []Replica `pulumi:"replicas"`
}

// UserManagedInput is an input type that accepts UserManagedArgs and UserManagedOutput values.
// You can construct a concrete instance of `UserManagedInput` via:
//
//          UserManagedArgs{...}
type UserManagedInput interface {
	pulumi.Input

	ToUserManagedOutput() UserManagedOutput
	ToUserManagedOutputWithContext(context.Context) UserManagedOutput
}

// A replication policy that replicates the Secret payload into the locations specified in Secret.replication.user_managed.replicas
type UserManagedArgs struct {
	// The list of Replicas for this Secret. Cannot be empty.
	Replicas ReplicaArrayInput `pulumi:"replicas"`
}

func (UserManagedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserManaged)(nil)).Elem()
}

func (i UserManagedArgs) ToUserManagedOutput() UserManagedOutput {
	return i.ToUserManagedOutputWithContext(context.Background())
}

func (i UserManagedArgs) ToUserManagedOutputWithContext(ctx context.Context) UserManagedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserManagedOutput)
}

func (i UserManagedArgs) ToUserManagedPtrOutput() UserManagedPtrOutput {
	return i.ToUserManagedPtrOutputWithContext(context.Background())
}

func (i UserManagedArgs) ToUserManagedPtrOutputWithContext(ctx context.Context) UserManagedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserManagedOutput).ToUserManagedPtrOutputWithContext(ctx)
}

// UserManagedPtrInput is an input type that accepts UserManagedArgs, UserManagedPtr and UserManagedPtrOutput values.
// You can construct a concrete instance of `UserManagedPtrInput` via:
//
//          UserManagedArgs{...}
//
//  or:
//
//          nil
type UserManagedPtrInput interface {
	pulumi.Input

	ToUserManagedPtrOutput() UserManagedPtrOutput
	ToUserManagedPtrOutputWithContext(context.Context) UserManagedPtrOutput
}

type userManagedPtrType UserManagedArgs

func UserManagedPtr(v *UserManagedArgs) UserManagedPtrInput {
	return (*userManagedPtrType)(v)
}

func (*userManagedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserManaged)(nil)).Elem()
}

func (i *userManagedPtrType) ToUserManagedPtrOutput() UserManagedPtrOutput {
	return i.ToUserManagedPtrOutputWithContext(context.Background())
}

func (i *userManagedPtrType) ToUserManagedPtrOutputWithContext(ctx context.Context) UserManagedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserManagedPtrOutput)
}

// A replication policy that replicates the Secret payload into the locations specified in Secret.replication.user_managed.replicas
type UserManagedOutput struct{ *pulumi.OutputState }

func (UserManagedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserManaged)(nil)).Elem()
}

func (o UserManagedOutput) ToUserManagedOutput() UserManagedOutput {
	return o
}

func (o UserManagedOutput) ToUserManagedOutputWithContext(ctx context.Context) UserManagedOutput {
	return o
}

func (o UserManagedOutput) ToUserManagedPtrOutput() UserManagedPtrOutput {
	return o.ToUserManagedPtrOutputWithContext(context.Background())
}

func (o UserManagedOutput) ToUserManagedPtrOutputWithContext(ctx context.Context) UserManagedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserManaged) *UserManaged {
		return &v
	}).(UserManagedPtrOutput)
}

// The list of Replicas for this Secret. Cannot be empty.
func (o UserManagedOutput) Replicas() ReplicaArrayOutput {
	return o.ApplyT(func(v UserManaged) []Replica { return v.Replicas }).(ReplicaArrayOutput)
}

type UserManagedPtrOutput struct{ *pulumi.OutputState }

func (UserManagedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserManaged)(nil)).Elem()
}

func (o UserManagedPtrOutput) ToUserManagedPtrOutput() UserManagedPtrOutput {
	return o
}

func (o UserManagedPtrOutput) ToUserManagedPtrOutputWithContext(ctx context.Context) UserManagedPtrOutput {
	return o
}

func (o UserManagedPtrOutput) Elem() UserManagedOutput {
	return o.ApplyT(func(v *UserManaged) UserManaged {
		if v != nil {
			return *v
		}
		var ret UserManaged
		return ret
	}).(UserManagedOutput)
}

// The list of Replicas for this Secret. Cannot be empty.
func (o UserManagedPtrOutput) Replicas() ReplicaArrayOutput {
	return o.ApplyT(func(v *UserManaged) []Replica {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(ReplicaArrayOutput)
}

// A replication policy that replicates the Secret payload into the locations specified in Secret.replication.user_managed.replicas
type UserManagedResponse struct {
	// The list of Replicas for this Secret. Cannot be empty.
	Replicas []ReplicaResponse `pulumi:"replicas"`
}

// A replication policy that replicates the Secret payload into the locations specified in Secret.replication.user_managed.replicas
type UserManagedResponseOutput struct{ *pulumi.OutputState }

func (UserManagedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserManagedResponse)(nil)).Elem()
}

func (o UserManagedResponseOutput) ToUserManagedResponseOutput() UserManagedResponseOutput {
	return o
}

func (o UserManagedResponseOutput) ToUserManagedResponseOutputWithContext(ctx context.Context) UserManagedResponseOutput {
	return o
}

// The list of Replicas for this Secret. Cannot be empty.
func (o UserManagedResponseOutput) Replicas() ReplicaResponseArrayOutput {
	return o.ApplyT(func(v UserManagedResponse) []ReplicaResponse { return v.Replicas }).(ReplicaResponseArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomaticInput)(nil)).Elem(), AutomaticArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutomaticPtrInput)(nil)).Elem(), AutomaticArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerManagedEncryptionInput)(nil)).Elem(), CustomerManagedEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerManagedEncryptionPtrInput)(nil)).Elem(), CustomerManagedEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaInput)(nil)).Elem(), ReplicaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaArrayInput)(nil)).Elem(), ReplicaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationInput)(nil)).Elem(), ReplicationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotationInput)(nil)).Elem(), RotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotationPtrInput)(nil)).Elem(), RotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicInput)(nil)).Elem(), TopicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicArrayInput)(nil)).Elem(), TopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserManagedInput)(nil)).Elem(), UserManagedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserManagedPtrInput)(nil)).Elem(), UserManagedArgs{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AutomaticOutput{})
	pulumi.RegisterOutputType(AutomaticPtrOutput{})
	pulumi.RegisterOutputType(AutomaticResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(CustomerManagedEncryptionOutput{})
	pulumi.RegisterOutputType(CustomerManagedEncryptionPtrOutput{})
	pulumi.RegisterOutputType(CustomerManagedEncryptionResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(ReplicaOutput{})
	pulumi.RegisterOutputType(ReplicaArrayOutput{})
	pulumi.RegisterOutputType(ReplicaResponseOutput{})
	pulumi.RegisterOutputType(ReplicaResponseArrayOutput{})
	pulumi.RegisterOutputType(ReplicationOutput{})
	pulumi.RegisterOutputType(ReplicationResponseOutput{})
	pulumi.RegisterOutputType(RotationOutput{})
	pulumi.RegisterOutputType(RotationPtrOutput{})
	pulumi.RegisterOutputType(RotationResponseOutput{})
	pulumi.RegisterOutputType(TopicOutput{})
	pulumi.RegisterOutputType(TopicArrayOutput{})
	pulumi.RegisterOutputType(TopicResponseOutput{})
	pulumi.RegisterOutputType(TopicResponseArrayOutput{})
	pulumi.RegisterOutputType(UserManagedOutput{})
	pulumi.RegisterOutputType(UserManagedPtrOutput{})
	pulumi.RegisterOutputType(UserManagedResponseOutput{})
}
