// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.
type AttachedDiskMode string

const (
	// The disk mode is not known/set.
	AttachedDiskModeDiskModeUnspecified = AttachedDiskMode("DISK_MODE_UNSPECIFIED")
	// Attaches the disk in read-write mode. Only one TPU node can attach a disk in read-write mode at a time.
	AttachedDiskModeReadWrite = AttachedDiskMode("READ_WRITE")
	// Attaches the disk in read-only mode. Multiple TPU nodes can attach a disk in read-only mode at a time.
	AttachedDiskModeReadOnly = AttachedDiskMode("READ_ONLY")
)

func (AttachedDiskMode) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDiskMode)(nil)).Elem()
}

func (e AttachedDiskMode) ToAttachedDiskModeOutput() AttachedDiskModeOutput {
	return pulumi.ToOutput(e).(AttachedDiskModeOutput)
}

func (e AttachedDiskMode) ToAttachedDiskModeOutputWithContext(ctx context.Context) AttachedDiskModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AttachedDiskModeOutput)
}

func (e AttachedDiskMode) ToAttachedDiskModePtrOutput() AttachedDiskModePtrOutput {
	return e.ToAttachedDiskModePtrOutputWithContext(context.Background())
}

func (e AttachedDiskMode) ToAttachedDiskModePtrOutputWithContext(ctx context.Context) AttachedDiskModePtrOutput {
	return AttachedDiskMode(e).ToAttachedDiskModeOutputWithContext(ctx).ToAttachedDiskModePtrOutputWithContext(ctx)
}

func (e AttachedDiskMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttachedDiskMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttachedDiskMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AttachedDiskMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AttachedDiskModeOutput struct{ *pulumi.OutputState }

func (AttachedDiskModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDiskMode)(nil)).Elem()
}

func (o AttachedDiskModeOutput) ToAttachedDiskModeOutput() AttachedDiskModeOutput {
	return o
}

func (o AttachedDiskModeOutput) ToAttachedDiskModeOutputWithContext(ctx context.Context) AttachedDiskModeOutput {
	return o
}

func (o AttachedDiskModeOutput) ToAttachedDiskModePtrOutput() AttachedDiskModePtrOutput {
	return o.ToAttachedDiskModePtrOutputWithContext(context.Background())
}

func (o AttachedDiskModeOutput) ToAttachedDiskModePtrOutputWithContext(ctx context.Context) AttachedDiskModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AttachedDiskMode) *AttachedDiskMode {
		return &v
	}).(AttachedDiskModePtrOutput)
}

func (o AttachedDiskModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AttachedDiskModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AttachedDiskMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AttachedDiskModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AttachedDiskModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AttachedDiskMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AttachedDiskModePtrOutput struct{ *pulumi.OutputState }

func (AttachedDiskModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachedDiskMode)(nil)).Elem()
}

func (o AttachedDiskModePtrOutput) ToAttachedDiskModePtrOutput() AttachedDiskModePtrOutput {
	return o
}

func (o AttachedDiskModePtrOutput) ToAttachedDiskModePtrOutputWithContext(ctx context.Context) AttachedDiskModePtrOutput {
	return o
}

func (o AttachedDiskModePtrOutput) Elem() AttachedDiskModeOutput {
	return o.ApplyT(func(v *AttachedDiskMode) AttachedDiskMode {
		if v != nil {
			return *v
		}
		var ret AttachedDiskMode
		return ret
	}).(AttachedDiskModeOutput)
}

func (o AttachedDiskModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AttachedDiskModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AttachedDiskMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AttachedDiskModeInput is an input type that accepts AttachedDiskModeArgs and AttachedDiskModeOutput values.
// You can construct a concrete instance of `AttachedDiskModeInput` via:
//
//	AttachedDiskModeArgs{...}
type AttachedDiskModeInput interface {
	pulumi.Input

	ToAttachedDiskModeOutput() AttachedDiskModeOutput
	ToAttachedDiskModeOutputWithContext(context.Context) AttachedDiskModeOutput
}

var attachedDiskModePtrType = reflect.TypeOf((**AttachedDiskMode)(nil)).Elem()

type AttachedDiskModePtrInput interface {
	pulumi.Input

	ToAttachedDiskModePtrOutput() AttachedDiskModePtrOutput
	ToAttachedDiskModePtrOutputWithContext(context.Context) AttachedDiskModePtrOutput
}

type attachedDiskModePtr string

func AttachedDiskModePtr(v string) AttachedDiskModePtrInput {
	return (*attachedDiskModePtr)(&v)
}

func (*attachedDiskModePtr) ElementType() reflect.Type {
	return attachedDiskModePtrType
}

func (in *attachedDiskModePtr) ToAttachedDiskModePtrOutput() AttachedDiskModePtrOutput {
	return pulumi.ToOutput(in).(AttachedDiskModePtrOutput)
}

func (in *attachedDiskModePtr) ToAttachedDiskModePtrOutputWithContext(ctx context.Context) AttachedDiskModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AttachedDiskModePtrOutput)
}

// The health status of the TPU node.
type NodeHealth string

const (
	// Health status is unknown: not initialized or failed to retrieve.
	NodeHealthHealthUnspecified = NodeHealth("HEALTH_UNSPECIFIED")
	// The resource is healthy.
	NodeHealthHealthy = NodeHealth("HEALTHY")
	// The resource is unresponsive.
	NodeHealthTimeout = NodeHealth("TIMEOUT")
	// The in-guest ML stack is unhealthy.
	NodeHealthUnhealthyTensorflow = NodeHealth("UNHEALTHY_TENSORFLOW")
	// The node is under maintenance/priority boost caused rescheduling and will resume running once rescheduled.
	NodeHealthUnhealthyMaintenance = NodeHealth("UNHEALTHY_MAINTENANCE")
)

func (NodeHealth) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeHealth)(nil)).Elem()
}

func (e NodeHealth) ToNodeHealthOutput() NodeHealthOutput {
	return pulumi.ToOutput(e).(NodeHealthOutput)
}

func (e NodeHealth) ToNodeHealthOutputWithContext(ctx context.Context) NodeHealthOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NodeHealthOutput)
}

func (e NodeHealth) ToNodeHealthPtrOutput() NodeHealthPtrOutput {
	return e.ToNodeHealthPtrOutputWithContext(context.Background())
}

func (e NodeHealth) ToNodeHealthPtrOutputWithContext(ctx context.Context) NodeHealthPtrOutput {
	return NodeHealth(e).ToNodeHealthOutputWithContext(ctx).ToNodeHealthPtrOutputWithContext(ctx)
}

func (e NodeHealth) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeHealth) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NodeHealth) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NodeHealth) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NodeHealthOutput struct{ *pulumi.OutputState }

func (NodeHealthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeHealth)(nil)).Elem()
}

func (o NodeHealthOutput) ToNodeHealthOutput() NodeHealthOutput {
	return o
}

func (o NodeHealthOutput) ToNodeHealthOutputWithContext(ctx context.Context) NodeHealthOutput {
	return o
}

func (o NodeHealthOutput) ToNodeHealthPtrOutput() NodeHealthPtrOutput {
	return o.ToNodeHealthPtrOutputWithContext(context.Background())
}

func (o NodeHealthOutput) ToNodeHealthPtrOutputWithContext(ctx context.Context) NodeHealthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeHealth) *NodeHealth {
		return &v
	}).(NodeHealthPtrOutput)
}

func (o NodeHealthOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NodeHealthOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NodeHealth) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NodeHealthOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NodeHealthOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NodeHealth) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NodeHealthPtrOutput struct{ *pulumi.OutputState }

func (NodeHealthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeHealth)(nil)).Elem()
}

func (o NodeHealthPtrOutput) ToNodeHealthPtrOutput() NodeHealthPtrOutput {
	return o
}

func (o NodeHealthPtrOutput) ToNodeHealthPtrOutputWithContext(ctx context.Context) NodeHealthPtrOutput {
	return o
}

func (o NodeHealthPtrOutput) Elem() NodeHealthOutput {
	return o.ApplyT(func(v *NodeHealth) NodeHealth {
		if v != nil {
			return *v
		}
		var ret NodeHealth
		return ret
	}).(NodeHealthOutput)
}

func (o NodeHealthPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NodeHealthPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NodeHealth) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NodeHealthInput is an input type that accepts NodeHealthArgs and NodeHealthOutput values.
// You can construct a concrete instance of `NodeHealthInput` via:
//
//	NodeHealthArgs{...}
type NodeHealthInput interface {
	pulumi.Input

	ToNodeHealthOutput() NodeHealthOutput
	ToNodeHealthOutputWithContext(context.Context) NodeHealthOutput
}

var nodeHealthPtrType = reflect.TypeOf((**NodeHealth)(nil)).Elem()

type NodeHealthPtrInput interface {
	pulumi.Input

	ToNodeHealthPtrOutput() NodeHealthPtrOutput
	ToNodeHealthPtrOutputWithContext(context.Context) NodeHealthPtrOutput
}

type nodeHealthPtr string

func NodeHealthPtr(v string) NodeHealthPtrInput {
	return (*nodeHealthPtr)(&v)
}

func (*nodeHealthPtr) ElementType() reflect.Type {
	return nodeHealthPtrType
}

func (in *nodeHealthPtr) ToNodeHealthPtrOutput() NodeHealthPtrOutput {
	return pulumi.ToOutput(in).(NodeHealthPtrOutput)
}

func (in *nodeHealthPtr) ToNodeHealthPtrOutputWithContext(ctx context.Context) NodeHealthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NodeHealthPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedDiskModeInput)(nil)).Elem(), AttachedDiskMode("DISK_MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedDiskModePtrInput)(nil)).Elem(), AttachedDiskMode("DISK_MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*NodeHealthInput)(nil)).Elem(), NodeHealth("HEALTH_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*NodeHealthPtrInput)(nil)).Elem(), NodeHealth("HEALTH_UNSPECIFIED"))
	pulumi.RegisterOutputType(AttachedDiskModeOutput{})
	pulumi.RegisterOutputType(AttachedDiskModePtrOutput{})
	pulumi.RegisterOutputType(NodeHealthOutput{})
	pulumi.RegisterOutputType(NodeHealthPtrOutput{})
}
