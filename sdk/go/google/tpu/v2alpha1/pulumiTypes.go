// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// A TPU accelerator configuration.
type AcceleratorConfig struct {
	// Topology of TPU in chips.
	Topology string `pulumi:"topology"`
	// Type of TPU.
	Type AcceleratorConfigType `pulumi:"type"`
}

// AcceleratorConfigInput is an input type that accepts AcceleratorConfigArgs and AcceleratorConfigOutput values.
// You can construct a concrete instance of `AcceleratorConfigInput` via:
//
//	AcceleratorConfigArgs{...}
type AcceleratorConfigInput interface {
	pulumi.Input

	ToAcceleratorConfigOutput() AcceleratorConfigOutput
	ToAcceleratorConfigOutputWithContext(context.Context) AcceleratorConfigOutput
}

// A TPU accelerator configuration.
type AcceleratorConfigArgs struct {
	// Topology of TPU in chips.
	Topology pulumi.StringInput `pulumi:"topology"`
	// Type of TPU.
	Type AcceleratorConfigTypeInput `pulumi:"type"`
}

func (AcceleratorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return i.ToAcceleratorConfigOutputWithContext(context.Background())
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigOutput)
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput {
	return i.ToAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigPtrOutputWithContext(ctx context.Context) AcceleratorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigOutput).ToAcceleratorConfigPtrOutputWithContext(ctx)
}

// AcceleratorConfigPtrInput is an input type that accepts AcceleratorConfigArgs, AcceleratorConfigPtr and AcceleratorConfigPtrOutput values.
// You can construct a concrete instance of `AcceleratorConfigPtrInput` via:
//
//	        AcceleratorConfigArgs{...}
//
//	or:
//
//	        nil
type AcceleratorConfigPtrInput interface {
	pulumi.Input

	ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput
	ToAcceleratorConfigPtrOutputWithContext(context.Context) AcceleratorConfigPtrOutput
}

type acceleratorConfigPtrType AcceleratorConfigArgs

func AcceleratorConfigPtr(v *AcceleratorConfigArgs) AcceleratorConfigPtrInput {
	return (*acceleratorConfigPtrType)(v)
}

func (*acceleratorConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AcceleratorConfig)(nil)).Elem()
}

func (i *acceleratorConfigPtrType) ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput {
	return i.ToAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (i *acceleratorConfigPtrType) ToAcceleratorConfigPtrOutputWithContext(ctx context.Context) AcceleratorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigPtrOutput)
}

// A TPU accelerator configuration.
type AcceleratorConfigOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return o
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return o
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput {
	return o.ToAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigPtrOutputWithContext(ctx context.Context) AcceleratorConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AcceleratorConfig) *AcceleratorConfig {
		return &v
	}).(AcceleratorConfigPtrOutput)
}

// Topology of TPU in chips.
func (o AcceleratorConfigOutput) Topology() pulumi.StringOutput {
	return o.ApplyT(func(v AcceleratorConfig) string { return v.Topology }).(pulumi.StringOutput)
}

// Type of TPU.
func (o AcceleratorConfigOutput) Type() AcceleratorConfigTypeOutput {
	return o.ApplyT(func(v AcceleratorConfig) AcceleratorConfigType { return v.Type }).(AcceleratorConfigTypeOutput)
}

type AcceleratorConfigPtrOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigPtrOutput) ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput {
	return o
}

func (o AcceleratorConfigPtrOutput) ToAcceleratorConfigPtrOutputWithContext(ctx context.Context) AcceleratorConfigPtrOutput {
	return o
}

func (o AcceleratorConfigPtrOutput) Elem() AcceleratorConfigOutput {
	return o.ApplyT(func(v *AcceleratorConfig) AcceleratorConfig {
		if v != nil {
			return *v
		}
		var ret AcceleratorConfig
		return ret
	}).(AcceleratorConfigOutput)
}

// Topology of TPU in chips.
func (o AcceleratorConfigPtrOutput) Topology() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcceleratorConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Topology
	}).(pulumi.StringPtrOutput)
}

// Type of TPU.
func (o AcceleratorConfigPtrOutput) Type() AcceleratorConfigTypePtrOutput {
	return o.ApplyT(func(v *AcceleratorConfig) *AcceleratorConfigType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(AcceleratorConfigTypePtrOutput)
}

// A TPU accelerator configuration.
type AcceleratorConfigResponse struct {
	// Topology of TPU in chips.
	Topology string `pulumi:"topology"`
	// Type of TPU.
	Type string `pulumi:"type"`
}

// A TPU accelerator configuration.
type AcceleratorConfigResponseOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfigResponse)(nil)).Elem()
}

func (o AcceleratorConfigResponseOutput) ToAcceleratorConfigResponseOutput() AcceleratorConfigResponseOutput {
	return o
}

func (o AcceleratorConfigResponseOutput) ToAcceleratorConfigResponseOutputWithContext(ctx context.Context) AcceleratorConfigResponseOutput {
	return o
}

// Topology of TPU in chips.
func (o AcceleratorConfigResponseOutput) Topology() pulumi.StringOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) string { return v.Topology }).(pulumi.StringOutput)
}

// Type of TPU.
func (o AcceleratorConfigResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Further data for the accepted state.
type AcceptedDataResponse struct {
}

// Further data for the accepted state.
type AcceptedDataResponseOutput struct{ *pulumi.OutputState }

func (AcceptedDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceptedDataResponse)(nil)).Elem()
}

func (o AcceptedDataResponseOutput) ToAcceptedDataResponseOutput() AcceptedDataResponseOutput {
	return o
}

func (o AcceptedDataResponseOutput) ToAcceptedDataResponseOutputWithContext(ctx context.Context) AcceptedDataResponseOutput {
	return o
}

// An access config attached to the TPU worker.
type AccessConfigResponse struct {
	// An external IP address associated with the TPU worker.
	ExternalIp string `pulumi:"externalIp"`
}

// An access config attached to the TPU worker.
type AccessConfigResponseOutput struct{ *pulumi.OutputState }

func (AccessConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessConfigResponse)(nil)).Elem()
}

func (o AccessConfigResponseOutput) ToAccessConfigResponseOutput() AccessConfigResponseOutput {
	return o
}

func (o AccessConfigResponseOutput) ToAccessConfigResponseOutputWithContext(ctx context.Context) AccessConfigResponseOutput {
	return o
}

// An external IP address associated with the TPU worker.
func (o AccessConfigResponseOutput) ExternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v AccessConfigResponse) string { return v.ExternalIp }).(pulumi.StringOutput)
}

// Further data for the active state.
type ActiveDataResponse struct {
}

// Further data for the active state.
type ActiveDataResponseOutput struct{ *pulumi.OutputState }

func (ActiveDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDataResponse)(nil)).Elem()
}

func (o ActiveDataResponseOutput) ToActiveDataResponseOutput() ActiveDataResponseOutput {
	return o
}

func (o ActiveDataResponseOutput) ToActiveDataResponseOutputWithContext(ctx context.Context) ActiveDataResponseOutput {
	return o
}

// A node-attached disk resource. Next ID: 8;
type AttachedDisk struct {
	// The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.
	Mode *AttachedDiskMode `pulumi:"mode"`
	// Specifies the full path to an existing disk. For example: "projects/my-project/zones/us-central1-c/disks/my-disk".
	SourceDisk *string `pulumi:"sourceDisk"`
}

// AttachedDiskInput is an input type that accepts AttachedDiskArgs and AttachedDiskOutput values.
// You can construct a concrete instance of `AttachedDiskInput` via:
//
//	AttachedDiskArgs{...}
type AttachedDiskInput interface {
	pulumi.Input

	ToAttachedDiskOutput() AttachedDiskOutput
	ToAttachedDiskOutputWithContext(context.Context) AttachedDiskOutput
}

// A node-attached disk resource. Next ID: 8;
type AttachedDiskArgs struct {
	// The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.
	Mode AttachedDiskModePtrInput `pulumi:"mode"`
	// Specifies the full path to an existing disk. For example: "projects/my-project/zones/us-central1-c/disks/my-disk".
	SourceDisk pulumi.StringPtrInput `pulumi:"sourceDisk"`
}

func (AttachedDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDisk)(nil)).Elem()
}

func (i AttachedDiskArgs) ToAttachedDiskOutput() AttachedDiskOutput {
	return i.ToAttachedDiskOutputWithContext(context.Background())
}

func (i AttachedDiskArgs) ToAttachedDiskOutputWithContext(ctx context.Context) AttachedDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedDiskOutput)
}

// AttachedDiskArrayInput is an input type that accepts AttachedDiskArray and AttachedDiskArrayOutput values.
// You can construct a concrete instance of `AttachedDiskArrayInput` via:
//
//	AttachedDiskArray{ AttachedDiskArgs{...} }
type AttachedDiskArrayInput interface {
	pulumi.Input

	ToAttachedDiskArrayOutput() AttachedDiskArrayOutput
	ToAttachedDiskArrayOutputWithContext(context.Context) AttachedDiskArrayOutput
}

type AttachedDiskArray []AttachedDiskInput

func (AttachedDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttachedDisk)(nil)).Elem()
}

func (i AttachedDiskArray) ToAttachedDiskArrayOutput() AttachedDiskArrayOutput {
	return i.ToAttachedDiskArrayOutputWithContext(context.Background())
}

func (i AttachedDiskArray) ToAttachedDiskArrayOutputWithContext(ctx context.Context) AttachedDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedDiskArrayOutput)
}

// A node-attached disk resource. Next ID: 8;
type AttachedDiskOutput struct{ *pulumi.OutputState }

func (AttachedDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDisk)(nil)).Elem()
}

func (o AttachedDiskOutput) ToAttachedDiskOutput() AttachedDiskOutput {
	return o
}

func (o AttachedDiskOutput) ToAttachedDiskOutputWithContext(ctx context.Context) AttachedDiskOutput {
	return o
}

// The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.
func (o AttachedDiskOutput) Mode() AttachedDiskModePtrOutput {
	return o.ApplyT(func(v AttachedDisk) *AttachedDiskMode { return v.Mode }).(AttachedDiskModePtrOutput)
}

// Specifies the full path to an existing disk. For example: "projects/my-project/zones/us-central1-c/disks/my-disk".
func (o AttachedDiskOutput) SourceDisk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedDisk) *string { return v.SourceDisk }).(pulumi.StringPtrOutput)
}

type AttachedDiskArrayOutput struct{ *pulumi.OutputState }

func (AttachedDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttachedDisk)(nil)).Elem()
}

func (o AttachedDiskArrayOutput) ToAttachedDiskArrayOutput() AttachedDiskArrayOutput {
	return o
}

func (o AttachedDiskArrayOutput) ToAttachedDiskArrayOutputWithContext(ctx context.Context) AttachedDiskArrayOutput {
	return o
}

func (o AttachedDiskArrayOutput) Index(i pulumi.IntInput) AttachedDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AttachedDisk {
		return vs[0].([]AttachedDisk)[vs[1].(int)]
	}).(AttachedDiskOutput)
}

// A node-attached disk resource. Next ID: 8;
type AttachedDiskResponse struct {
	// The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.
	Mode string `pulumi:"mode"`
	// Specifies the full path to an existing disk. For example: "projects/my-project/zones/us-central1-c/disks/my-disk".
	SourceDisk string `pulumi:"sourceDisk"`
}

// A node-attached disk resource. Next ID: 8;
type AttachedDiskResponseOutput struct{ *pulumi.OutputState }

func (AttachedDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDiskResponse)(nil)).Elem()
}

func (o AttachedDiskResponseOutput) ToAttachedDiskResponseOutput() AttachedDiskResponseOutput {
	return o
}

func (o AttachedDiskResponseOutput) ToAttachedDiskResponseOutputWithContext(ctx context.Context) AttachedDiskResponseOutput {
	return o
}

// The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.
func (o AttachedDiskResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// Specifies the full path to an existing disk. For example: "projects/my-project/zones/us-central1-c/disks/my-disk".
func (o AttachedDiskResponseOutput) SourceDisk() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskResponse) string { return v.SourceDisk }).(pulumi.StringOutput)
}

type AttachedDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (AttachedDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttachedDiskResponse)(nil)).Elem()
}

func (o AttachedDiskResponseArrayOutput) ToAttachedDiskResponseArrayOutput() AttachedDiskResponseArrayOutput {
	return o
}

func (o AttachedDiskResponseArrayOutput) ToAttachedDiskResponseArrayOutputWithContext(ctx context.Context) AttachedDiskResponseArrayOutput {
	return o
}

func (o AttachedDiskResponseArrayOutput) Index(i pulumi.IntInput) AttachedDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AttachedDiskResponse {
		return vs[0].([]AttachedDiskResponse)[vs[1].(int)]
	}).(AttachedDiskResponseOutput)
}

// BestEffort tier definition.
type BestEffort struct {
}

// BestEffortInput is an input type that accepts BestEffortArgs and BestEffortOutput values.
// You can construct a concrete instance of `BestEffortInput` via:
//
//	BestEffortArgs{...}
type BestEffortInput interface {
	pulumi.Input

	ToBestEffortOutput() BestEffortOutput
	ToBestEffortOutputWithContext(context.Context) BestEffortOutput
}

// BestEffort tier definition.
type BestEffortArgs struct {
}

func (BestEffortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BestEffort)(nil)).Elem()
}

func (i BestEffortArgs) ToBestEffortOutput() BestEffortOutput {
	return i.ToBestEffortOutputWithContext(context.Background())
}

func (i BestEffortArgs) ToBestEffortOutputWithContext(ctx context.Context) BestEffortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BestEffortOutput)
}

func (i BestEffortArgs) ToBestEffortPtrOutput() BestEffortPtrOutput {
	return i.ToBestEffortPtrOutputWithContext(context.Background())
}

func (i BestEffortArgs) ToBestEffortPtrOutputWithContext(ctx context.Context) BestEffortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BestEffortOutput).ToBestEffortPtrOutputWithContext(ctx)
}

// BestEffortPtrInput is an input type that accepts BestEffortArgs, BestEffortPtr and BestEffortPtrOutput values.
// You can construct a concrete instance of `BestEffortPtrInput` via:
//
//	        BestEffortArgs{...}
//
//	or:
//
//	        nil
type BestEffortPtrInput interface {
	pulumi.Input

	ToBestEffortPtrOutput() BestEffortPtrOutput
	ToBestEffortPtrOutputWithContext(context.Context) BestEffortPtrOutput
}

type bestEffortPtrType BestEffortArgs

func BestEffortPtr(v *BestEffortArgs) BestEffortPtrInput {
	return (*bestEffortPtrType)(v)
}

func (*bestEffortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BestEffort)(nil)).Elem()
}

func (i *bestEffortPtrType) ToBestEffortPtrOutput() BestEffortPtrOutput {
	return i.ToBestEffortPtrOutputWithContext(context.Background())
}

func (i *bestEffortPtrType) ToBestEffortPtrOutputWithContext(ctx context.Context) BestEffortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BestEffortPtrOutput)
}

// BestEffort tier definition.
type BestEffortOutput struct{ *pulumi.OutputState }

func (BestEffortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BestEffort)(nil)).Elem()
}

func (o BestEffortOutput) ToBestEffortOutput() BestEffortOutput {
	return o
}

func (o BestEffortOutput) ToBestEffortOutputWithContext(ctx context.Context) BestEffortOutput {
	return o
}

func (o BestEffortOutput) ToBestEffortPtrOutput() BestEffortPtrOutput {
	return o.ToBestEffortPtrOutputWithContext(context.Background())
}

func (o BestEffortOutput) ToBestEffortPtrOutputWithContext(ctx context.Context) BestEffortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BestEffort) *BestEffort {
		return &v
	}).(BestEffortPtrOutput)
}

type BestEffortPtrOutput struct{ *pulumi.OutputState }

func (BestEffortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BestEffort)(nil)).Elem()
}

func (o BestEffortPtrOutput) ToBestEffortPtrOutput() BestEffortPtrOutput {
	return o
}

func (o BestEffortPtrOutput) ToBestEffortPtrOutputWithContext(ctx context.Context) BestEffortPtrOutput {
	return o
}

func (o BestEffortPtrOutput) Elem() BestEffortOutput {
	return o.ApplyT(func(v *BestEffort) BestEffort {
		if v != nil {
			return *v
		}
		var ret BestEffort
		return ret
	}).(BestEffortOutput)
}

// BestEffort tier definition.
type BestEffortResponse struct {
}

// BestEffort tier definition.
type BestEffortResponseOutput struct{ *pulumi.OutputState }

func (BestEffortResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BestEffortResponse)(nil)).Elem()
}

func (o BestEffortResponseOutput) ToBestEffortResponseOutput() BestEffortResponseOutput {
	return o
}

func (o BestEffortResponseOutput) ToBestEffortResponseOutputWithContext(ctx context.Context) BestEffortResponseOutput {
	return o
}

// Boot disk configurations.
type BootDiskConfig struct {
	// Optional. Customer encryption key for boot disk.
	CustomerEncryptionKey *CustomerEncryptionKey `pulumi:"customerEncryptionKey"`
	// Optional. Whether the boot disk will be created with confidential compute mode.
	EnableConfidentialCompute *bool `pulumi:"enableConfidentialCompute"`
}

// BootDiskConfigInput is an input type that accepts BootDiskConfigArgs and BootDiskConfigOutput values.
// You can construct a concrete instance of `BootDiskConfigInput` via:
//
//	BootDiskConfigArgs{...}
type BootDiskConfigInput interface {
	pulumi.Input

	ToBootDiskConfigOutput() BootDiskConfigOutput
	ToBootDiskConfigOutputWithContext(context.Context) BootDiskConfigOutput
}

// Boot disk configurations.
type BootDiskConfigArgs struct {
	// Optional. Customer encryption key for boot disk.
	CustomerEncryptionKey CustomerEncryptionKeyPtrInput `pulumi:"customerEncryptionKey"`
	// Optional. Whether the boot disk will be created with confidential compute mode.
	EnableConfidentialCompute pulumi.BoolPtrInput `pulumi:"enableConfidentialCompute"`
}

func (BootDiskConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiskConfig)(nil)).Elem()
}

func (i BootDiskConfigArgs) ToBootDiskConfigOutput() BootDiskConfigOutput {
	return i.ToBootDiskConfigOutputWithContext(context.Background())
}

func (i BootDiskConfigArgs) ToBootDiskConfigOutputWithContext(ctx context.Context) BootDiskConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootDiskConfigOutput)
}

func (i BootDiskConfigArgs) ToBootDiskConfigPtrOutput() BootDiskConfigPtrOutput {
	return i.ToBootDiskConfigPtrOutputWithContext(context.Background())
}

func (i BootDiskConfigArgs) ToBootDiskConfigPtrOutputWithContext(ctx context.Context) BootDiskConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootDiskConfigOutput).ToBootDiskConfigPtrOutputWithContext(ctx)
}

// BootDiskConfigPtrInput is an input type that accepts BootDiskConfigArgs, BootDiskConfigPtr and BootDiskConfigPtrOutput values.
// You can construct a concrete instance of `BootDiskConfigPtrInput` via:
//
//	        BootDiskConfigArgs{...}
//
//	or:
//
//	        nil
type BootDiskConfigPtrInput interface {
	pulumi.Input

	ToBootDiskConfigPtrOutput() BootDiskConfigPtrOutput
	ToBootDiskConfigPtrOutputWithContext(context.Context) BootDiskConfigPtrOutput
}

type bootDiskConfigPtrType BootDiskConfigArgs

func BootDiskConfigPtr(v *BootDiskConfigArgs) BootDiskConfigPtrInput {
	return (*bootDiskConfigPtrType)(v)
}

func (*bootDiskConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BootDiskConfig)(nil)).Elem()
}

func (i *bootDiskConfigPtrType) ToBootDiskConfigPtrOutput() BootDiskConfigPtrOutput {
	return i.ToBootDiskConfigPtrOutputWithContext(context.Background())
}

func (i *bootDiskConfigPtrType) ToBootDiskConfigPtrOutputWithContext(ctx context.Context) BootDiskConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootDiskConfigPtrOutput)
}

// Boot disk configurations.
type BootDiskConfigOutput struct{ *pulumi.OutputState }

func (BootDiskConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiskConfig)(nil)).Elem()
}

func (o BootDiskConfigOutput) ToBootDiskConfigOutput() BootDiskConfigOutput {
	return o
}

func (o BootDiskConfigOutput) ToBootDiskConfigOutputWithContext(ctx context.Context) BootDiskConfigOutput {
	return o
}

func (o BootDiskConfigOutput) ToBootDiskConfigPtrOutput() BootDiskConfigPtrOutput {
	return o.ToBootDiskConfigPtrOutputWithContext(context.Background())
}

func (o BootDiskConfigOutput) ToBootDiskConfigPtrOutputWithContext(ctx context.Context) BootDiskConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BootDiskConfig) *BootDiskConfig {
		return &v
	}).(BootDiskConfigPtrOutput)
}

// Optional. Customer encryption key for boot disk.
func (o BootDiskConfigOutput) CustomerEncryptionKey() CustomerEncryptionKeyPtrOutput {
	return o.ApplyT(func(v BootDiskConfig) *CustomerEncryptionKey { return v.CustomerEncryptionKey }).(CustomerEncryptionKeyPtrOutput)
}

// Optional. Whether the boot disk will be created with confidential compute mode.
func (o BootDiskConfigOutput) EnableConfidentialCompute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BootDiskConfig) *bool { return v.EnableConfidentialCompute }).(pulumi.BoolPtrOutput)
}

type BootDiskConfigPtrOutput struct{ *pulumi.OutputState }

func (BootDiskConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BootDiskConfig)(nil)).Elem()
}

func (o BootDiskConfigPtrOutput) ToBootDiskConfigPtrOutput() BootDiskConfigPtrOutput {
	return o
}

func (o BootDiskConfigPtrOutput) ToBootDiskConfigPtrOutputWithContext(ctx context.Context) BootDiskConfigPtrOutput {
	return o
}

func (o BootDiskConfigPtrOutput) Elem() BootDiskConfigOutput {
	return o.ApplyT(func(v *BootDiskConfig) BootDiskConfig {
		if v != nil {
			return *v
		}
		var ret BootDiskConfig
		return ret
	}).(BootDiskConfigOutput)
}

// Optional. Customer encryption key for boot disk.
func (o BootDiskConfigPtrOutput) CustomerEncryptionKey() CustomerEncryptionKeyPtrOutput {
	return o.ApplyT(func(v *BootDiskConfig) *CustomerEncryptionKey {
		if v == nil {
			return nil
		}
		return v.CustomerEncryptionKey
	}).(CustomerEncryptionKeyPtrOutput)
}

// Optional. Whether the boot disk will be created with confidential compute mode.
func (o BootDiskConfigPtrOutput) EnableConfidentialCompute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BootDiskConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableConfidentialCompute
	}).(pulumi.BoolPtrOutput)
}

// Boot disk configurations.
type BootDiskConfigResponse struct {
	// Optional. Customer encryption key for boot disk.
	CustomerEncryptionKey CustomerEncryptionKeyResponse `pulumi:"customerEncryptionKey"`
	// Optional. Whether the boot disk will be created with confidential compute mode.
	EnableConfidentialCompute bool `pulumi:"enableConfidentialCompute"`
}

// Boot disk configurations.
type BootDiskConfigResponseOutput struct{ *pulumi.OutputState }

func (BootDiskConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiskConfigResponse)(nil)).Elem()
}

func (o BootDiskConfigResponseOutput) ToBootDiskConfigResponseOutput() BootDiskConfigResponseOutput {
	return o
}

func (o BootDiskConfigResponseOutput) ToBootDiskConfigResponseOutputWithContext(ctx context.Context) BootDiskConfigResponseOutput {
	return o
}

// Optional. Customer encryption key for boot disk.
func (o BootDiskConfigResponseOutput) CustomerEncryptionKey() CustomerEncryptionKeyResponseOutput {
	return o.ApplyT(func(v BootDiskConfigResponse) CustomerEncryptionKeyResponse { return v.CustomerEncryptionKey }).(CustomerEncryptionKeyResponseOutput)
}

// Optional. Whether the boot disk will be created with confidential compute mode.
func (o BootDiskConfigResponseOutput) EnableConfidentialCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v BootDiskConfigResponse) bool { return v.EnableConfidentialCompute }).(pulumi.BoolOutput)
}

// Further data for the creating state.
type CreatingDataResponse struct {
}

// Further data for the creating state.
type CreatingDataResponseOutput struct{ *pulumi.OutputState }

func (CreatingDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreatingDataResponse)(nil)).Elem()
}

func (o CreatingDataResponseOutput) ToCreatingDataResponseOutput() CreatingDataResponseOutput {
	return o
}

func (o CreatingDataResponseOutput) ToCreatingDataResponseOutputWithContext(ctx context.Context) CreatingDataResponseOutput {
	return o
}

// Customer's encryption key.
type CustomerEncryptionKey struct {
	// The name of the encryption key that is stored in Google Cloud KMS. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key The fully-qualifed key name may be returned for resource GET requests. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key /cryptoKeyVersions/1
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// CustomerEncryptionKeyInput is an input type that accepts CustomerEncryptionKeyArgs and CustomerEncryptionKeyOutput values.
// You can construct a concrete instance of `CustomerEncryptionKeyInput` via:
//
//	CustomerEncryptionKeyArgs{...}
type CustomerEncryptionKeyInput interface {
	pulumi.Input

	ToCustomerEncryptionKeyOutput() CustomerEncryptionKeyOutput
	ToCustomerEncryptionKeyOutputWithContext(context.Context) CustomerEncryptionKeyOutput
}

// Customer's encryption key.
type CustomerEncryptionKeyArgs struct {
	// The name of the encryption key that is stored in Google Cloud KMS. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key The fully-qualifed key name may be returned for resource GET requests. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key /cryptoKeyVersions/1
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (CustomerEncryptionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerEncryptionKey)(nil)).Elem()
}

func (i CustomerEncryptionKeyArgs) ToCustomerEncryptionKeyOutput() CustomerEncryptionKeyOutput {
	return i.ToCustomerEncryptionKeyOutputWithContext(context.Background())
}

func (i CustomerEncryptionKeyArgs) ToCustomerEncryptionKeyOutputWithContext(ctx context.Context) CustomerEncryptionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerEncryptionKeyOutput)
}

func (i CustomerEncryptionKeyArgs) ToCustomerEncryptionKeyPtrOutput() CustomerEncryptionKeyPtrOutput {
	return i.ToCustomerEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i CustomerEncryptionKeyArgs) ToCustomerEncryptionKeyPtrOutputWithContext(ctx context.Context) CustomerEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerEncryptionKeyOutput).ToCustomerEncryptionKeyPtrOutputWithContext(ctx)
}

// CustomerEncryptionKeyPtrInput is an input type that accepts CustomerEncryptionKeyArgs, CustomerEncryptionKeyPtr and CustomerEncryptionKeyPtrOutput values.
// You can construct a concrete instance of `CustomerEncryptionKeyPtrInput` via:
//
//	        CustomerEncryptionKeyArgs{...}
//
//	or:
//
//	        nil
type CustomerEncryptionKeyPtrInput interface {
	pulumi.Input

	ToCustomerEncryptionKeyPtrOutput() CustomerEncryptionKeyPtrOutput
	ToCustomerEncryptionKeyPtrOutputWithContext(context.Context) CustomerEncryptionKeyPtrOutput
}

type customerEncryptionKeyPtrType CustomerEncryptionKeyArgs

func CustomerEncryptionKeyPtr(v *CustomerEncryptionKeyArgs) CustomerEncryptionKeyPtrInput {
	return (*customerEncryptionKeyPtrType)(v)
}

func (*customerEncryptionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerEncryptionKey)(nil)).Elem()
}

func (i *customerEncryptionKeyPtrType) ToCustomerEncryptionKeyPtrOutput() CustomerEncryptionKeyPtrOutput {
	return i.ToCustomerEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i *customerEncryptionKeyPtrType) ToCustomerEncryptionKeyPtrOutputWithContext(ctx context.Context) CustomerEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerEncryptionKeyPtrOutput)
}

// Customer's encryption key.
type CustomerEncryptionKeyOutput struct{ *pulumi.OutputState }

func (CustomerEncryptionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerEncryptionKey)(nil)).Elem()
}

func (o CustomerEncryptionKeyOutput) ToCustomerEncryptionKeyOutput() CustomerEncryptionKeyOutput {
	return o
}

func (o CustomerEncryptionKeyOutput) ToCustomerEncryptionKeyOutputWithContext(ctx context.Context) CustomerEncryptionKeyOutput {
	return o
}

func (o CustomerEncryptionKeyOutput) ToCustomerEncryptionKeyPtrOutput() CustomerEncryptionKeyPtrOutput {
	return o.ToCustomerEncryptionKeyPtrOutputWithContext(context.Background())
}

func (o CustomerEncryptionKeyOutput) ToCustomerEncryptionKeyPtrOutputWithContext(ctx context.Context) CustomerEncryptionKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomerEncryptionKey) *CustomerEncryptionKey {
		return &v
	}).(CustomerEncryptionKeyPtrOutput)
}

// The name of the encryption key that is stored in Google Cloud KMS. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key The fully-qualifed key name may be returned for resource GET requests. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key /cryptoKeyVersions/1
func (o CustomerEncryptionKeyOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerEncryptionKey) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type CustomerEncryptionKeyPtrOutput struct{ *pulumi.OutputState }

func (CustomerEncryptionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerEncryptionKey)(nil)).Elem()
}

func (o CustomerEncryptionKeyPtrOutput) ToCustomerEncryptionKeyPtrOutput() CustomerEncryptionKeyPtrOutput {
	return o
}

func (o CustomerEncryptionKeyPtrOutput) ToCustomerEncryptionKeyPtrOutputWithContext(ctx context.Context) CustomerEncryptionKeyPtrOutput {
	return o
}

func (o CustomerEncryptionKeyPtrOutput) Elem() CustomerEncryptionKeyOutput {
	return o.ApplyT(func(v *CustomerEncryptionKey) CustomerEncryptionKey {
		if v != nil {
			return *v
		}
		var ret CustomerEncryptionKey
		return ret
	}).(CustomerEncryptionKeyOutput)
}

// The name of the encryption key that is stored in Google Cloud KMS. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key The fully-qualifed key name may be returned for resource GET requests. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key /cryptoKeyVersions/1
func (o CustomerEncryptionKeyPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Customer's encryption key.
type CustomerEncryptionKeyResponse struct {
	// The name of the encryption key that is stored in Google Cloud KMS. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key The fully-qualifed key name may be returned for resource GET requests. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key /cryptoKeyVersions/1
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// Customer's encryption key.
type CustomerEncryptionKeyResponseOutput struct{ *pulumi.OutputState }

func (CustomerEncryptionKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerEncryptionKeyResponse)(nil)).Elem()
}

func (o CustomerEncryptionKeyResponseOutput) ToCustomerEncryptionKeyResponseOutput() CustomerEncryptionKeyResponseOutput {
	return o
}

func (o CustomerEncryptionKeyResponseOutput) ToCustomerEncryptionKeyResponseOutputWithContext(ctx context.Context) CustomerEncryptionKeyResponseOutput {
	return o
}

// The name of the encryption key that is stored in Google Cloud KMS. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key The fully-qualifed key name may be returned for resource GET requests. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key /cryptoKeyVersions/1
func (o CustomerEncryptionKeyResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerEncryptionKeyResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// Further data for the deleting state.
type DeletingDataResponse struct {
}

// Further data for the deleting state.
type DeletingDataResponseOutput struct{ *pulumi.OutputState }

func (DeletingDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeletingDataResponse)(nil)).Elem()
}

func (o DeletingDataResponseOutput) ToDeletingDataResponseOutput() DeletingDataResponseOutput {
	return o
}

func (o DeletingDataResponseOutput) ToDeletingDataResponseOutputWithContext(ctx context.Context) DeletingDataResponseOutput {
	return o
}

// Further data for the failed state.
type FailedDataResponse struct {
	// The error that caused the queued resource to enter the FAILED state.
	Error StatusResponse `pulumi:"error"`
}

// Further data for the failed state.
type FailedDataResponseOutput struct{ *pulumi.OutputState }

func (FailedDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailedDataResponse)(nil)).Elem()
}

func (o FailedDataResponseOutput) ToFailedDataResponseOutput() FailedDataResponseOutput {
	return o
}

func (o FailedDataResponseOutput) ToFailedDataResponseOutputWithContext(ctx context.Context) FailedDataResponseOutput {
	return o
}

// The error that caused the queued resource to enter the FAILED state.
func (o FailedDataResponseOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v FailedDataResponse) StatusResponse { return v.Error }).(StatusResponseOutput)
}

// Guaranteed tier definition.
type Guaranteed struct {
	// Optional. Defines the minimum duration of the guarantee. If specified, the requested resources will only be provisioned if they can be allocated for at least the given duration.
	MinDuration *string `pulumi:"minDuration"`
	// Optional. Specifies the request should be scheduled on reserved capacity.
	Reserved *bool `pulumi:"reserved"`
}

// GuaranteedInput is an input type that accepts GuaranteedArgs and GuaranteedOutput values.
// You can construct a concrete instance of `GuaranteedInput` via:
//
//	GuaranteedArgs{...}
type GuaranteedInput interface {
	pulumi.Input

	ToGuaranteedOutput() GuaranteedOutput
	ToGuaranteedOutputWithContext(context.Context) GuaranteedOutput
}

// Guaranteed tier definition.
type GuaranteedArgs struct {
	// Optional. Defines the minimum duration of the guarantee. If specified, the requested resources will only be provisioned if they can be allocated for at least the given duration.
	MinDuration pulumi.StringPtrInput `pulumi:"minDuration"`
	// Optional. Specifies the request should be scheduled on reserved capacity.
	Reserved pulumi.BoolPtrInput `pulumi:"reserved"`
}

func (GuaranteedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Guaranteed)(nil)).Elem()
}

func (i GuaranteedArgs) ToGuaranteedOutput() GuaranteedOutput {
	return i.ToGuaranteedOutputWithContext(context.Background())
}

func (i GuaranteedArgs) ToGuaranteedOutputWithContext(ctx context.Context) GuaranteedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuaranteedOutput)
}

func (i GuaranteedArgs) ToGuaranteedPtrOutput() GuaranteedPtrOutput {
	return i.ToGuaranteedPtrOutputWithContext(context.Background())
}

func (i GuaranteedArgs) ToGuaranteedPtrOutputWithContext(ctx context.Context) GuaranteedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuaranteedOutput).ToGuaranteedPtrOutputWithContext(ctx)
}

// GuaranteedPtrInput is an input type that accepts GuaranteedArgs, GuaranteedPtr and GuaranteedPtrOutput values.
// You can construct a concrete instance of `GuaranteedPtrInput` via:
//
//	        GuaranteedArgs{...}
//
//	or:
//
//	        nil
type GuaranteedPtrInput interface {
	pulumi.Input

	ToGuaranteedPtrOutput() GuaranteedPtrOutput
	ToGuaranteedPtrOutputWithContext(context.Context) GuaranteedPtrOutput
}

type guaranteedPtrType GuaranteedArgs

func GuaranteedPtr(v *GuaranteedArgs) GuaranteedPtrInput {
	return (*guaranteedPtrType)(v)
}

func (*guaranteedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Guaranteed)(nil)).Elem()
}

func (i *guaranteedPtrType) ToGuaranteedPtrOutput() GuaranteedPtrOutput {
	return i.ToGuaranteedPtrOutputWithContext(context.Background())
}

func (i *guaranteedPtrType) ToGuaranteedPtrOutputWithContext(ctx context.Context) GuaranteedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuaranteedPtrOutput)
}

// Guaranteed tier definition.
type GuaranteedOutput struct{ *pulumi.OutputState }

func (GuaranteedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Guaranteed)(nil)).Elem()
}

func (o GuaranteedOutput) ToGuaranteedOutput() GuaranteedOutput {
	return o
}

func (o GuaranteedOutput) ToGuaranteedOutputWithContext(ctx context.Context) GuaranteedOutput {
	return o
}

func (o GuaranteedOutput) ToGuaranteedPtrOutput() GuaranteedPtrOutput {
	return o.ToGuaranteedPtrOutputWithContext(context.Background())
}

func (o GuaranteedOutput) ToGuaranteedPtrOutputWithContext(ctx context.Context) GuaranteedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Guaranteed) *Guaranteed {
		return &v
	}).(GuaranteedPtrOutput)
}

// Optional. Defines the minimum duration of the guarantee. If specified, the requested resources will only be provisioned if they can be allocated for at least the given duration.
func (o GuaranteedOutput) MinDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Guaranteed) *string { return v.MinDuration }).(pulumi.StringPtrOutput)
}

// Optional. Specifies the request should be scheduled on reserved capacity.
func (o GuaranteedOutput) Reserved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Guaranteed) *bool { return v.Reserved }).(pulumi.BoolPtrOutput)
}

type GuaranteedPtrOutput struct{ *pulumi.OutputState }

func (GuaranteedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Guaranteed)(nil)).Elem()
}

func (o GuaranteedPtrOutput) ToGuaranteedPtrOutput() GuaranteedPtrOutput {
	return o
}

func (o GuaranteedPtrOutput) ToGuaranteedPtrOutputWithContext(ctx context.Context) GuaranteedPtrOutput {
	return o
}

func (o GuaranteedPtrOutput) Elem() GuaranteedOutput {
	return o.ApplyT(func(v *Guaranteed) Guaranteed {
		if v != nil {
			return *v
		}
		var ret Guaranteed
		return ret
	}).(GuaranteedOutput)
}

// Optional. Defines the minimum duration of the guarantee. If specified, the requested resources will only be provisioned if they can be allocated for at least the given duration.
func (o GuaranteedPtrOutput) MinDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Guaranteed) *string {
		if v == nil {
			return nil
		}
		return v.MinDuration
	}).(pulumi.StringPtrOutput)
}

// Optional. Specifies the request should be scheduled on reserved capacity.
func (o GuaranteedPtrOutput) Reserved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Guaranteed) *bool {
		if v == nil {
			return nil
		}
		return v.Reserved
	}).(pulumi.BoolPtrOutput)
}

// Guaranteed tier definition.
type GuaranteedResponse struct {
	// Optional. Defines the minimum duration of the guarantee. If specified, the requested resources will only be provisioned if they can be allocated for at least the given duration.
	MinDuration string `pulumi:"minDuration"`
	// Optional. Specifies the request should be scheduled on reserved capacity.
	Reserved bool `pulumi:"reserved"`
}

// Guaranteed tier definition.
type GuaranteedResponseOutput struct{ *pulumi.OutputState }

func (GuaranteedResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GuaranteedResponse)(nil)).Elem()
}

func (o GuaranteedResponseOutput) ToGuaranteedResponseOutput() GuaranteedResponseOutput {
	return o
}

func (o GuaranteedResponseOutput) ToGuaranteedResponseOutputWithContext(ctx context.Context) GuaranteedResponseOutput {
	return o
}

// Optional. Defines the minimum duration of the guarantee. If specified, the requested resources will only be provisioned if they can be allocated for at least the given duration.
func (o GuaranteedResponseOutput) MinDuration() pulumi.StringOutput {
	return o.ApplyT(func(v GuaranteedResponse) string { return v.MinDuration }).(pulumi.StringOutput)
}

// Optional. Specifies the request should be scheduled on reserved capacity.
func (o GuaranteedResponseOutput) Reserved() pulumi.BoolOutput {
	return o.ApplyT(func(v GuaranteedResponse) bool { return v.Reserved }).(pulumi.BoolOutput)
}

// Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.
type Interval struct {
	// Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.
	EndTime *string `pulumi:"endTime"`
	// Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.
	StartTime *string `pulumi:"startTime"`
}

// IntervalInput is an input type that accepts IntervalArgs and IntervalOutput values.
// You can construct a concrete instance of `IntervalInput` via:
//
//	IntervalArgs{...}
type IntervalInput interface {
	pulumi.Input

	ToIntervalOutput() IntervalOutput
	ToIntervalOutputWithContext(context.Context) IntervalOutput
}

// Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.
type IntervalArgs struct {
	// Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (IntervalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Interval)(nil)).Elem()
}

func (i IntervalArgs) ToIntervalOutput() IntervalOutput {
	return i.ToIntervalOutputWithContext(context.Background())
}

func (i IntervalArgs) ToIntervalOutputWithContext(ctx context.Context) IntervalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntervalOutput)
}

func (i IntervalArgs) ToIntervalPtrOutput() IntervalPtrOutput {
	return i.ToIntervalPtrOutputWithContext(context.Background())
}

func (i IntervalArgs) ToIntervalPtrOutputWithContext(ctx context.Context) IntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntervalOutput).ToIntervalPtrOutputWithContext(ctx)
}

// IntervalPtrInput is an input type that accepts IntervalArgs, IntervalPtr and IntervalPtrOutput values.
// You can construct a concrete instance of `IntervalPtrInput` via:
//
//	        IntervalArgs{...}
//
//	or:
//
//	        nil
type IntervalPtrInput interface {
	pulumi.Input

	ToIntervalPtrOutput() IntervalPtrOutput
	ToIntervalPtrOutputWithContext(context.Context) IntervalPtrOutput
}

type intervalPtrType IntervalArgs

func IntervalPtr(v *IntervalArgs) IntervalPtrInput {
	return (*intervalPtrType)(v)
}

func (*intervalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Interval)(nil)).Elem()
}

func (i *intervalPtrType) ToIntervalPtrOutput() IntervalPtrOutput {
	return i.ToIntervalPtrOutputWithContext(context.Background())
}

func (i *intervalPtrType) ToIntervalPtrOutputWithContext(ctx context.Context) IntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntervalPtrOutput)
}

// Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.
type IntervalOutput struct{ *pulumi.OutputState }

func (IntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Interval)(nil)).Elem()
}

func (o IntervalOutput) ToIntervalOutput() IntervalOutput {
	return o
}

func (o IntervalOutput) ToIntervalOutputWithContext(ctx context.Context) IntervalOutput {
	return o
}

func (o IntervalOutput) ToIntervalPtrOutput() IntervalPtrOutput {
	return o.ToIntervalPtrOutputWithContext(context.Background())
}

func (o IntervalOutput) ToIntervalPtrOutputWithContext(ctx context.Context) IntervalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Interval) *Interval {
		return &v
	}).(IntervalPtrOutput)
}

// Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.
func (o IntervalOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Interval) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.
func (o IntervalOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Interval) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type IntervalPtrOutput struct{ *pulumi.OutputState }

func (IntervalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Interval)(nil)).Elem()
}

func (o IntervalPtrOutput) ToIntervalPtrOutput() IntervalPtrOutput {
	return o
}

func (o IntervalPtrOutput) ToIntervalPtrOutputWithContext(ctx context.Context) IntervalPtrOutput {
	return o
}

func (o IntervalPtrOutput) Elem() IntervalOutput {
	return o.ApplyT(func(v *Interval) Interval {
		if v != nil {
			return *v
		}
		var ret Interval
		return ret
	}).(IntervalOutput)
}

// Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.
func (o IntervalPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interval) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.
func (o IntervalPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Interval) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.
type IntervalResponse struct {
	// Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.
	EndTime string `pulumi:"endTime"`
	// Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.
	StartTime string `pulumi:"startTime"`
}

// Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.
type IntervalResponseOutput struct{ *pulumi.OutputState }

func (IntervalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntervalResponse)(nil)).Elem()
}

func (o IntervalResponseOutput) ToIntervalResponseOutput() IntervalResponseOutput {
	return o
}

func (o IntervalResponseOutput) ToIntervalResponseOutputWithContext(ctx context.Context) IntervalResponseOutput {
	return o
}

// Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.
func (o IntervalResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v IntervalResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.
func (o IntervalResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v IntervalResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Parameters to specify for multi-node QueuedResource requests. This field must be populated in case of multi-node requests instead of node_id. It's an error to specify both node_id and multi_node_params.
type MultiNodeParams struct {
	// Number of nodes with this spec. The system will attempt to provison "node_count" nodes as part of the request. This needs to be > 1.
	NodeCount int `pulumi:"nodeCount"`
	// Prefix of node_ids in case of multi-node request Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. If node_count = 3 and node_id_prefix = "np", node ids of nodes created will be "np-0", "np-1", "np-2". If this field is not provided we use queued_resource_id as the node_id_prefix.
	NodeIdPrefix *string `pulumi:"nodeIdPrefix"`
}

// MultiNodeParamsInput is an input type that accepts MultiNodeParamsArgs and MultiNodeParamsOutput values.
// You can construct a concrete instance of `MultiNodeParamsInput` via:
//
//	MultiNodeParamsArgs{...}
type MultiNodeParamsInput interface {
	pulumi.Input

	ToMultiNodeParamsOutput() MultiNodeParamsOutput
	ToMultiNodeParamsOutputWithContext(context.Context) MultiNodeParamsOutput
}

// Parameters to specify for multi-node QueuedResource requests. This field must be populated in case of multi-node requests instead of node_id. It's an error to specify both node_id and multi_node_params.
type MultiNodeParamsArgs struct {
	// Number of nodes with this spec. The system will attempt to provison "node_count" nodes as part of the request. This needs to be > 1.
	NodeCount pulumi.IntInput `pulumi:"nodeCount"`
	// Prefix of node_ids in case of multi-node request Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. If node_count = 3 and node_id_prefix = "np", node ids of nodes created will be "np-0", "np-1", "np-2". If this field is not provided we use queued_resource_id as the node_id_prefix.
	NodeIdPrefix pulumi.StringPtrInput `pulumi:"nodeIdPrefix"`
}

func (MultiNodeParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiNodeParams)(nil)).Elem()
}

func (i MultiNodeParamsArgs) ToMultiNodeParamsOutput() MultiNodeParamsOutput {
	return i.ToMultiNodeParamsOutputWithContext(context.Background())
}

func (i MultiNodeParamsArgs) ToMultiNodeParamsOutputWithContext(ctx context.Context) MultiNodeParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiNodeParamsOutput)
}

func (i MultiNodeParamsArgs) ToMultiNodeParamsPtrOutput() MultiNodeParamsPtrOutput {
	return i.ToMultiNodeParamsPtrOutputWithContext(context.Background())
}

func (i MultiNodeParamsArgs) ToMultiNodeParamsPtrOutputWithContext(ctx context.Context) MultiNodeParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiNodeParamsOutput).ToMultiNodeParamsPtrOutputWithContext(ctx)
}

// MultiNodeParamsPtrInput is an input type that accepts MultiNodeParamsArgs, MultiNodeParamsPtr and MultiNodeParamsPtrOutput values.
// You can construct a concrete instance of `MultiNodeParamsPtrInput` via:
//
//	        MultiNodeParamsArgs{...}
//
//	or:
//
//	        nil
type MultiNodeParamsPtrInput interface {
	pulumi.Input

	ToMultiNodeParamsPtrOutput() MultiNodeParamsPtrOutput
	ToMultiNodeParamsPtrOutputWithContext(context.Context) MultiNodeParamsPtrOutput
}

type multiNodeParamsPtrType MultiNodeParamsArgs

func MultiNodeParamsPtr(v *MultiNodeParamsArgs) MultiNodeParamsPtrInput {
	return (*multiNodeParamsPtrType)(v)
}

func (*multiNodeParamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiNodeParams)(nil)).Elem()
}

func (i *multiNodeParamsPtrType) ToMultiNodeParamsPtrOutput() MultiNodeParamsPtrOutput {
	return i.ToMultiNodeParamsPtrOutputWithContext(context.Background())
}

func (i *multiNodeParamsPtrType) ToMultiNodeParamsPtrOutputWithContext(ctx context.Context) MultiNodeParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiNodeParamsPtrOutput)
}

// Parameters to specify for multi-node QueuedResource requests. This field must be populated in case of multi-node requests instead of node_id. It's an error to specify both node_id and multi_node_params.
type MultiNodeParamsOutput struct{ *pulumi.OutputState }

func (MultiNodeParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiNodeParams)(nil)).Elem()
}

func (o MultiNodeParamsOutput) ToMultiNodeParamsOutput() MultiNodeParamsOutput {
	return o
}

func (o MultiNodeParamsOutput) ToMultiNodeParamsOutputWithContext(ctx context.Context) MultiNodeParamsOutput {
	return o
}

func (o MultiNodeParamsOutput) ToMultiNodeParamsPtrOutput() MultiNodeParamsPtrOutput {
	return o.ToMultiNodeParamsPtrOutputWithContext(context.Background())
}

func (o MultiNodeParamsOutput) ToMultiNodeParamsPtrOutputWithContext(ctx context.Context) MultiNodeParamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MultiNodeParams) *MultiNodeParams {
		return &v
	}).(MultiNodeParamsPtrOutput)
}

// Number of nodes with this spec. The system will attempt to provison "node_count" nodes as part of the request. This needs to be > 1.
func (o MultiNodeParamsOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v MultiNodeParams) int { return v.NodeCount }).(pulumi.IntOutput)
}

// Prefix of node_ids in case of multi-node request Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. If node_count = 3 and node_id_prefix = "np", node ids of nodes created will be "np-0", "np-1", "np-2". If this field is not provided we use queued_resource_id as the node_id_prefix.
func (o MultiNodeParamsOutput) NodeIdPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MultiNodeParams) *string { return v.NodeIdPrefix }).(pulumi.StringPtrOutput)
}

type MultiNodeParamsPtrOutput struct{ *pulumi.OutputState }

func (MultiNodeParamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiNodeParams)(nil)).Elem()
}

func (o MultiNodeParamsPtrOutput) ToMultiNodeParamsPtrOutput() MultiNodeParamsPtrOutput {
	return o
}

func (o MultiNodeParamsPtrOutput) ToMultiNodeParamsPtrOutputWithContext(ctx context.Context) MultiNodeParamsPtrOutput {
	return o
}

func (o MultiNodeParamsPtrOutput) Elem() MultiNodeParamsOutput {
	return o.ApplyT(func(v *MultiNodeParams) MultiNodeParams {
		if v != nil {
			return *v
		}
		var ret MultiNodeParams
		return ret
	}).(MultiNodeParamsOutput)
}

// Number of nodes with this spec. The system will attempt to provison "node_count" nodes as part of the request. This needs to be > 1.
func (o MultiNodeParamsPtrOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MultiNodeParams) *int {
		if v == nil {
			return nil
		}
		return &v.NodeCount
	}).(pulumi.IntPtrOutput)
}

// Prefix of node_ids in case of multi-node request Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. If node_count = 3 and node_id_prefix = "np", node ids of nodes created will be "np-0", "np-1", "np-2". If this field is not provided we use queued_resource_id as the node_id_prefix.
func (o MultiNodeParamsPtrOutput) NodeIdPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultiNodeParams) *string {
		if v == nil {
			return nil
		}
		return v.NodeIdPrefix
	}).(pulumi.StringPtrOutput)
}

// Parameters to specify for multi-node QueuedResource requests. This field must be populated in case of multi-node requests instead of node_id. It's an error to specify both node_id and multi_node_params.
type MultiNodeParamsResponse struct {
	// Number of nodes with this spec. The system will attempt to provison "node_count" nodes as part of the request. This needs to be > 1.
	NodeCount int `pulumi:"nodeCount"`
	// Prefix of node_ids in case of multi-node request Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. If node_count = 3 and node_id_prefix = "np", node ids of nodes created will be "np-0", "np-1", "np-2". If this field is not provided we use queued_resource_id as the node_id_prefix.
	NodeIdPrefix string `pulumi:"nodeIdPrefix"`
}

// Parameters to specify for multi-node QueuedResource requests. This field must be populated in case of multi-node requests instead of node_id. It's an error to specify both node_id and multi_node_params.
type MultiNodeParamsResponseOutput struct{ *pulumi.OutputState }

func (MultiNodeParamsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiNodeParamsResponse)(nil)).Elem()
}

func (o MultiNodeParamsResponseOutput) ToMultiNodeParamsResponseOutput() MultiNodeParamsResponseOutput {
	return o
}

func (o MultiNodeParamsResponseOutput) ToMultiNodeParamsResponseOutputWithContext(ctx context.Context) MultiNodeParamsResponseOutput {
	return o
}

// Number of nodes with this spec. The system will attempt to provison "node_count" nodes as part of the request. This needs to be > 1.
func (o MultiNodeParamsResponseOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v MultiNodeParamsResponse) int { return v.NodeCount }).(pulumi.IntOutput)
}

// Prefix of node_ids in case of multi-node request Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. If node_count = 3 and node_id_prefix = "np", node ids of nodes created will be "np-0", "np-1", "np-2". If this field is not provided we use queued_resource_id as the node_id_prefix.
func (o MultiNodeParamsResponseOutput) NodeIdPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MultiNodeParamsResponse) string { return v.NodeIdPrefix }).(pulumi.StringOutput)
}

// Network related configurations.
type NetworkConfig struct {
	// Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.
	CanIpForward *bool `pulumi:"canIpForward"`
	// Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.
	EnableExternalIps *bool `pulumi:"enableExternalIps"`
	// The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, "default" will be used.
	Network *string `pulumi:"network"`
	// The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, "default" will be used.
	Subnetwork *string `pulumi:"subnetwork"`
}

// NetworkConfigInput is an input type that accepts NetworkConfigArgs and NetworkConfigOutput values.
// You can construct a concrete instance of `NetworkConfigInput` via:
//
//	NetworkConfigArgs{...}
type NetworkConfigInput interface {
	pulumi.Input

	ToNetworkConfigOutput() NetworkConfigOutput
	ToNetworkConfigOutputWithContext(context.Context) NetworkConfigOutput
}

// Network related configurations.
type NetworkConfigArgs struct {
	// Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.
	CanIpForward pulumi.BoolPtrInput `pulumi:"canIpForward"`
	// Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.
	EnableExternalIps pulumi.BoolPtrInput `pulumi:"enableExternalIps"`
	// The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, "default" will be used.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, "default" will be used.
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
}

func (NetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArgs) ToNetworkConfigOutput() NetworkConfigOutput {
	return i.ToNetworkConfigOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput)
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput).ToNetworkConfigPtrOutputWithContext(ctx)
}

// NetworkConfigPtrInput is an input type that accepts NetworkConfigArgs, NetworkConfigPtr and NetworkConfigPtrOutput values.
// You can construct a concrete instance of `NetworkConfigPtrInput` via:
//
//	        NetworkConfigArgs{...}
//
//	or:
//
//	        nil
type NetworkConfigPtrInput interface {
	pulumi.Input

	ToNetworkConfigPtrOutput() NetworkConfigPtrOutput
	ToNetworkConfigPtrOutputWithContext(context.Context) NetworkConfigPtrOutput
}

type networkConfigPtrType NetworkConfigArgs

func NetworkConfigPtr(v *NetworkConfigArgs) NetworkConfigPtrInput {
	return (*networkConfigPtrType)(v)
}

func (*networkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigPtrOutput)
}

// Network related configurations.
type NetworkConfigOutput struct{ *pulumi.OutputState }

func (NetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigOutput) ToNetworkConfigOutput() NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkConfig) *NetworkConfig {
		return &v
	}).(NetworkConfigPtrOutput)
}

// Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.
func (o NetworkConfigOutput) CanIpForward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *bool { return v.CanIpForward }).(pulumi.BoolPtrOutput)
}

// Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.
func (o NetworkConfigOutput) EnableExternalIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *bool { return v.EnableExternalIps }).(pulumi.BoolPtrOutput)
}

// The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, "default" will be used.
func (o NetworkConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, "default" will be used.
func (o NetworkConfigOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

type NetworkConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) Elem() NetworkConfigOutput {
	return o.ApplyT(func(v *NetworkConfig) NetworkConfig {
		if v != nil {
			return *v
		}
		var ret NetworkConfig
		return ret
	}).(NetworkConfigOutput)
}

// Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.
func (o NetworkConfigPtrOutput) CanIpForward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CanIpForward
	}).(pulumi.BoolPtrOutput)
}

// Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.
func (o NetworkConfigPtrOutput) EnableExternalIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExternalIps
	}).(pulumi.BoolPtrOutput)
}

// The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, "default" will be used.
func (o NetworkConfigPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, "default" will be used.
func (o NetworkConfigPtrOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.Subnetwork
	}).(pulumi.StringPtrOutput)
}

// Network related configurations.
type NetworkConfigResponse struct {
	// Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.
	CanIpForward bool `pulumi:"canIpForward"`
	// Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.
	EnableExternalIps bool `pulumi:"enableExternalIps"`
	// The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, "default" will be used.
	Network string `pulumi:"network"`
	// The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, "default" will be used.
	Subnetwork string `pulumi:"subnetwork"`
}

// Network related configurations.
type NetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutput() NetworkConfigResponseOutput {
	return o
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutputWithContext(ctx context.Context) NetworkConfigResponseOutput {
	return o
}

// Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.
func (o NetworkConfigResponseOutput) CanIpForward() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkConfigResponse) bool { return v.CanIpForward }).(pulumi.BoolOutput)
}

// Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.
func (o NetworkConfigResponseOutput) EnableExternalIps() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkConfigResponse) bool { return v.EnableExternalIps }).(pulumi.BoolOutput)
}

// The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, "default" will be used.
func (o NetworkConfigResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Network }).(pulumi.StringOutput)
}

// The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, "default" will be used.
func (o NetworkConfigResponseOutput) Subnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Subnetwork }).(pulumi.StringOutput)
}

// A network endpoint over which a TPU worker can be reached.
type NetworkEndpointResponse struct {
	// The access config for the TPU worker.
	AccessConfig AccessConfigResponse `pulumi:"accessConfig"`
	// The internal IP address of this network endpoint.
	IpAddress string `pulumi:"ipAddress"`
	// The port of this network endpoint.
	Port int `pulumi:"port"`
}

// A network endpoint over which a TPU worker can be reached.
type NetworkEndpointResponseOutput struct{ *pulumi.OutputState }

func (NetworkEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpointResponse)(nil)).Elem()
}

func (o NetworkEndpointResponseOutput) ToNetworkEndpointResponseOutput() NetworkEndpointResponseOutput {
	return o
}

func (o NetworkEndpointResponseOutput) ToNetworkEndpointResponseOutputWithContext(ctx context.Context) NetworkEndpointResponseOutput {
	return o
}

// The access config for the TPU worker.
func (o NetworkEndpointResponseOutput) AccessConfig() AccessConfigResponseOutput {
	return o.ApplyT(func(v NetworkEndpointResponse) AccessConfigResponse { return v.AccessConfig }).(AccessConfigResponseOutput)
}

// The internal IP address of this network endpoint.
func (o NetworkEndpointResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkEndpointResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The port of this network endpoint.
func (o NetworkEndpointResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v NetworkEndpointResponse) int { return v.Port }).(pulumi.IntOutput)
}

type NetworkEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkEndpointResponse)(nil)).Elem()
}

func (o NetworkEndpointResponseArrayOutput) ToNetworkEndpointResponseArrayOutput() NetworkEndpointResponseArrayOutput {
	return o
}

func (o NetworkEndpointResponseArrayOutput) ToNetworkEndpointResponseArrayOutputWithContext(ctx context.Context) NetworkEndpointResponseArrayOutput {
	return o
}

func (o NetworkEndpointResponseArrayOutput) Index(i pulumi.IntInput) NetworkEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkEndpointResponse {
		return vs[0].([]NetworkEndpointResponse)[vs[1].(int)]
	}).(NetworkEndpointResponseOutput)
}

// A TPU instance.
type NodeType struct {
	// The AccleratorConfig for the TPU Node.
	AcceleratorConfig *AcceleratorConfig `pulumi:"acceleratorConfig"`
	// The type of hardware accelerators associated with this node.
	AcceleratorType *string `pulumi:"acceleratorType"`
	// Optional. Whether Autocheckpoint is enabled.
	AutocheckpointEnabled *bool `pulumi:"autocheckpointEnabled"`
	// Optional. Boot disk configuration.
	BootDiskConfig *BootDiskConfig `pulumi:"bootDiskConfig"`
	// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
	CidrBlock *string `pulumi:"cidrBlock"`
	// The additional data disks for the Node.
	DataDisks []AttachedDisk `pulumi:"dataDisks"`
	// The user-supplied description of the TPU. Maximum of 512 characters.
	Description *string `pulumi:"description"`
	// The health status of the TPU node.
	Health *NodeHealth `pulumi:"health"`
	// Resource labels to represent user-provided metadata.
	Labels map[string]string `pulumi:"labels"`
	// Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
	Metadata map[string]string `pulumi:"metadata"`
	// Network configurations for the TPU node.
	NetworkConfig *NetworkConfig `pulumi:"networkConfig"`
	// The runtime version running in the Node.
	RuntimeVersion string `pulumi:"runtimeVersion"`
	// The scheduling options for this node.
	SchedulingConfig *SchedulingConfig `pulumi:"schedulingConfig"`
	// The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
	ServiceAccount *ServiceAccount `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig *ShieldedInstanceConfig `pulumi:"shieldedInstanceConfig"`
	// Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
	Tags []string `pulumi:"tags"`
}

// NodeTypeInput is an input type that accepts NodeTypeArgs and NodeTypeOutput values.
// You can construct a concrete instance of `NodeTypeInput` via:
//
//	NodeTypeArgs{...}
type NodeTypeInput interface {
	pulumi.Input

	ToNodeTypeOutput() NodeTypeOutput
	ToNodeTypeOutputWithContext(context.Context) NodeTypeOutput
}

// A TPU instance.
type NodeTypeArgs struct {
	// The AccleratorConfig for the TPU Node.
	AcceleratorConfig AcceleratorConfigPtrInput `pulumi:"acceleratorConfig"`
	// The type of hardware accelerators associated with this node.
	AcceleratorType pulumi.StringPtrInput `pulumi:"acceleratorType"`
	// Optional. Whether Autocheckpoint is enabled.
	AutocheckpointEnabled pulumi.BoolPtrInput `pulumi:"autocheckpointEnabled"`
	// Optional. Boot disk configuration.
	BootDiskConfig BootDiskConfigPtrInput `pulumi:"bootDiskConfig"`
	// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
	CidrBlock pulumi.StringPtrInput `pulumi:"cidrBlock"`
	// The additional data disks for the Node.
	DataDisks AttachedDiskArrayInput `pulumi:"dataDisks"`
	// The user-supplied description of the TPU. Maximum of 512 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The health status of the TPU node.
	Health NodeHealthPtrInput `pulumi:"health"`
	// Resource labels to represent user-provided metadata.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Network configurations for the TPU node.
	NetworkConfig NetworkConfigPtrInput `pulumi:"networkConfig"`
	// The runtime version running in the Node.
	RuntimeVersion pulumi.StringInput `pulumi:"runtimeVersion"`
	// The scheduling options for this node.
	SchedulingConfig SchedulingConfigPtrInput `pulumi:"schedulingConfig"`
	// The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
	ServiceAccount ServiceAccountPtrInput `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig ShieldedInstanceConfigPtrInput `pulumi:"shieldedInstanceConfig"`
	// Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (NodeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeType)(nil)).Elem()
}

func (i NodeTypeArgs) ToNodeTypeOutput() NodeTypeOutput {
	return i.ToNodeTypeOutputWithContext(context.Background())
}

func (i NodeTypeArgs) ToNodeTypeOutputWithContext(ctx context.Context) NodeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTypeOutput)
}

// A TPU instance.
type NodeTypeOutput struct{ *pulumi.OutputState }

func (NodeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeType)(nil)).Elem()
}

func (o NodeTypeOutput) ToNodeTypeOutput() NodeTypeOutput {
	return o
}

func (o NodeTypeOutput) ToNodeTypeOutputWithContext(ctx context.Context) NodeTypeOutput {
	return o
}

// The AccleratorConfig for the TPU Node.
func (o NodeTypeOutput) AcceleratorConfig() AcceleratorConfigPtrOutput {
	return o.ApplyT(func(v NodeType) *AcceleratorConfig { return v.AcceleratorConfig }).(AcceleratorConfigPtrOutput)
}

// The type of hardware accelerators associated with this node.
func (o NodeTypeOutput) AcceleratorType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeType) *string { return v.AcceleratorType }).(pulumi.StringPtrOutput)
}

// Optional. Whether Autocheckpoint is enabled.
func (o NodeTypeOutput) AutocheckpointEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeType) *bool { return v.AutocheckpointEnabled }).(pulumi.BoolPtrOutput)
}

// Optional. Boot disk configuration.
func (o NodeTypeOutput) BootDiskConfig() BootDiskConfigPtrOutput {
	return o.ApplyT(func(v NodeType) *BootDiskConfig { return v.BootDiskConfig }).(BootDiskConfigPtrOutput)
}

// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
func (o NodeTypeOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeType) *string { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

// The additional data disks for the Node.
func (o NodeTypeOutput) DataDisks() AttachedDiskArrayOutput {
	return o.ApplyT(func(v NodeType) []AttachedDisk { return v.DataDisks }).(AttachedDiskArrayOutput)
}

// The user-supplied description of the TPU. Maximum of 512 characters.
func (o NodeTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The health status of the TPU node.
func (o NodeTypeOutput) Health() NodeHealthPtrOutput {
	return o.ApplyT(func(v NodeType) *NodeHealth { return v.Health }).(NodeHealthPtrOutput)
}

// Resource labels to represent user-provided metadata.
func (o NodeTypeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeType) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
func (o NodeTypeOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeType) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Network configurations for the TPU node.
func (o NodeTypeOutput) NetworkConfig() NetworkConfigPtrOutput {
	return o.ApplyT(func(v NodeType) *NetworkConfig { return v.NetworkConfig }).(NetworkConfigPtrOutput)
}

// The runtime version running in the Node.
func (o NodeTypeOutput) RuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v NodeType) string { return v.RuntimeVersion }).(pulumi.StringOutput)
}

// The scheduling options for this node.
func (o NodeTypeOutput) SchedulingConfig() SchedulingConfigPtrOutput {
	return o.ApplyT(func(v NodeType) *SchedulingConfig { return v.SchedulingConfig }).(SchedulingConfigPtrOutput)
}

// The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
func (o NodeTypeOutput) ServiceAccount() ServiceAccountPtrOutput {
	return o.ApplyT(func(v NodeType) *ServiceAccount { return v.ServiceAccount }).(ServiceAccountPtrOutput)
}

// Shielded Instance options.
func (o NodeTypeOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v NodeType) *ShieldedInstanceConfig { return v.ShieldedInstanceConfig }).(ShieldedInstanceConfigPtrOutput)
}

// Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
func (o NodeTypeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeType) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// A TPU instance.
type NodeResponse struct {
	// The AccleratorConfig for the TPU Node.
	AcceleratorConfig AcceleratorConfigResponse `pulumi:"acceleratorConfig"`
	// The type of hardware accelerators associated with this node.
	AcceleratorType string `pulumi:"acceleratorType"`
	// The API version that created this Node.
	ApiVersion string `pulumi:"apiVersion"`
	// Optional. Whether Autocheckpoint is enabled.
	AutocheckpointEnabled bool `pulumi:"autocheckpointEnabled"`
	// Optional. Boot disk configuration.
	BootDiskConfig BootDiskConfigResponse `pulumi:"bootDiskConfig"`
	// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
	CidrBlock string `pulumi:"cidrBlock"`
	// The time when the node was created.
	CreateTime string `pulumi:"createTime"`
	// The additional data disks for the Node.
	DataDisks []AttachedDiskResponse `pulumi:"dataDisks"`
	// The user-supplied description of the TPU. Maximum of 512 characters.
	Description string `pulumi:"description"`
	// The health status of the TPU node.
	Health string `pulumi:"health"`
	// If this field is populated, it contains a description of why the TPU Node is unhealthy.
	HealthDescription string `pulumi:"healthDescription"`
	// Resource labels to represent user-provided metadata.
	Labels map[string]string `pulumi:"labels"`
	// Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
	Metadata map[string]string `pulumi:"metadata"`
	// Whether the Node belongs to a Multislice group.
	MultisliceNode bool `pulumi:"multisliceNode"`
	// Immutable. The name of the TPU.
	Name string `pulumi:"name"`
	// Network configurations for the TPU node.
	NetworkConfig NetworkConfigResponse `pulumi:"networkConfig"`
	// The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.
	NetworkEndpoints []NetworkEndpointResponse `pulumi:"networkEndpoints"`
	// The qualified name of the QueuedResource that requested this Node.
	QueuedResource string `pulumi:"queuedResource"`
	// The runtime version running in the Node.
	RuntimeVersion string `pulumi:"runtimeVersion"`
	// The scheduling options for this node.
	SchedulingConfig SchedulingConfigResponse `pulumi:"schedulingConfig"`
	// The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
	ServiceAccount ServiceAccountResponse `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig ShieldedInstanceConfigResponse `pulumi:"shieldedInstanceConfig"`
	// The current state for the TPU Node.
	State string `pulumi:"state"`
	// The Symptoms that have occurred to the TPU Node.
	Symptoms []SymptomResponse `pulumi:"symptoms"`
	// Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
	Tags []string `pulumi:"tags"`
}

// A TPU instance.
type NodeResponseOutput struct{ *pulumi.OutputState }

func (NodeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeResponse)(nil)).Elem()
}

func (o NodeResponseOutput) ToNodeResponseOutput() NodeResponseOutput {
	return o
}

func (o NodeResponseOutput) ToNodeResponseOutputWithContext(ctx context.Context) NodeResponseOutput {
	return o
}

// The AccleratorConfig for the TPU Node.
func (o NodeResponseOutput) AcceleratorConfig() AcceleratorConfigResponseOutput {
	return o.ApplyT(func(v NodeResponse) AcceleratorConfigResponse { return v.AcceleratorConfig }).(AcceleratorConfigResponseOutput)
}

// The type of hardware accelerators associated with this node.
func (o NodeResponseOutput) AcceleratorType() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.AcceleratorType }).(pulumi.StringOutput)
}

// The API version that created this Node.
func (o NodeResponseOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// Optional. Whether Autocheckpoint is enabled.
func (o NodeResponseOutput) AutocheckpointEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeResponse) bool { return v.AutocheckpointEnabled }).(pulumi.BoolOutput)
}

// Optional. Boot disk configuration.
func (o NodeResponseOutput) BootDiskConfig() BootDiskConfigResponseOutput {
	return o.ApplyT(func(v NodeResponse) BootDiskConfigResponse { return v.BootDiskConfig }).(BootDiskConfigResponseOutput)
}

// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
func (o NodeResponseOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// The time when the node was created.
func (o NodeResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The additional data disks for the Node.
func (o NodeResponseOutput) DataDisks() AttachedDiskResponseArrayOutput {
	return o.ApplyT(func(v NodeResponse) []AttachedDiskResponse { return v.DataDisks }).(AttachedDiskResponseArrayOutput)
}

// The user-supplied description of the TPU. Maximum of 512 characters.
func (o NodeResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The health status of the TPU node.
func (o NodeResponseOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.Health }).(pulumi.StringOutput)
}

// If this field is populated, it contains a description of why the TPU Node is unhealthy.
func (o NodeResponseOutput) HealthDescription() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.HealthDescription }).(pulumi.StringOutput)
}

// Resource labels to represent user-provided metadata.
func (o NodeResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
func (o NodeResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Whether the Node belongs to a Multislice group.
func (o NodeResponseOutput) MultisliceNode() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeResponse) bool { return v.MultisliceNode }).(pulumi.BoolOutput)
}

// Immutable. The name of the TPU.
func (o NodeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Network configurations for the TPU node.
func (o NodeResponseOutput) NetworkConfig() NetworkConfigResponseOutput {
	return o.ApplyT(func(v NodeResponse) NetworkConfigResponse { return v.NetworkConfig }).(NetworkConfigResponseOutput)
}

// The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.
func (o NodeResponseOutput) NetworkEndpoints() NetworkEndpointResponseArrayOutput {
	return o.ApplyT(func(v NodeResponse) []NetworkEndpointResponse { return v.NetworkEndpoints }).(NetworkEndpointResponseArrayOutput)
}

// The qualified name of the QueuedResource that requested this Node.
func (o NodeResponseOutput) QueuedResource() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.QueuedResource }).(pulumi.StringOutput)
}

// The runtime version running in the Node.
func (o NodeResponseOutput) RuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.RuntimeVersion }).(pulumi.StringOutput)
}

// The scheduling options for this node.
func (o NodeResponseOutput) SchedulingConfig() SchedulingConfigResponseOutput {
	return o.ApplyT(func(v NodeResponse) SchedulingConfigResponse { return v.SchedulingConfig }).(SchedulingConfigResponseOutput)
}

// The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
func (o NodeResponseOutput) ServiceAccount() ServiceAccountResponseOutput {
	return o.ApplyT(func(v NodeResponse) ServiceAccountResponse { return v.ServiceAccount }).(ServiceAccountResponseOutput)
}

// Shielded Instance options.
func (o NodeResponseOutput) ShieldedInstanceConfig() ShieldedInstanceConfigResponseOutput {
	return o.ApplyT(func(v NodeResponse) ShieldedInstanceConfigResponse { return v.ShieldedInstanceConfig }).(ShieldedInstanceConfigResponseOutput)
}

// The current state for the TPU Node.
func (o NodeResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.State }).(pulumi.StringOutput)
}

// The Symptoms that have occurred to the TPU Node.
func (o NodeResponseOutput) Symptoms() SymptomResponseArrayOutput {
	return o.ApplyT(func(v NodeResponse) []SymptomResponse { return v.Symptoms }).(SymptomResponseArrayOutput)
}

// Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
func (o NodeResponseOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeResponse) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Details of the TPU node(s) being requested. Users can request either a single node or multiple nodes. NodeSpec provides the specification for node(s) to be created.
type NodeSpec struct {
	// Optional. Fields to specify in case of multi-node request.
	MultiNodeParams *MultiNodeParams `pulumi:"multiNodeParams"`
	// The node.
	Node NodeType `pulumi:"node"`
	// The unqualified resource name. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. This is only specified when requesting a single node. In case of multi-node requests, multi_node_params must be populated instead. It's an error to specify both node_id and multi_node_params.
	NodeId *string `pulumi:"nodeId"`
	// The parent resource name.
	Parent string `pulumi:"parent"`
}

// NodeSpecInput is an input type that accepts NodeSpecArgs and NodeSpecOutput values.
// You can construct a concrete instance of `NodeSpecInput` via:
//
//	NodeSpecArgs{...}
type NodeSpecInput interface {
	pulumi.Input

	ToNodeSpecOutput() NodeSpecOutput
	ToNodeSpecOutputWithContext(context.Context) NodeSpecOutput
}

// Details of the TPU node(s) being requested. Users can request either a single node or multiple nodes. NodeSpec provides the specification for node(s) to be created.
type NodeSpecArgs struct {
	// Optional. Fields to specify in case of multi-node request.
	MultiNodeParams MultiNodeParamsPtrInput `pulumi:"multiNodeParams"`
	// The node.
	Node NodeTypeInput `pulumi:"node"`
	// The unqualified resource name. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. This is only specified when requesting a single node. In case of multi-node requests, multi_node_params must be populated instead. It's an error to specify both node_id and multi_node_params.
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
	// The parent resource name.
	Parent pulumi.StringInput `pulumi:"parent"`
}

func (NodeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSpec)(nil)).Elem()
}

func (i NodeSpecArgs) ToNodeSpecOutput() NodeSpecOutput {
	return i.ToNodeSpecOutputWithContext(context.Background())
}

func (i NodeSpecArgs) ToNodeSpecOutputWithContext(ctx context.Context) NodeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSpecOutput)
}

// NodeSpecArrayInput is an input type that accepts NodeSpecArray and NodeSpecArrayOutput values.
// You can construct a concrete instance of `NodeSpecArrayInput` via:
//
//	NodeSpecArray{ NodeSpecArgs{...} }
type NodeSpecArrayInput interface {
	pulumi.Input

	ToNodeSpecArrayOutput() NodeSpecArrayOutput
	ToNodeSpecArrayOutputWithContext(context.Context) NodeSpecArrayOutput
}

type NodeSpecArray []NodeSpecInput

func (NodeSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeSpec)(nil)).Elem()
}

func (i NodeSpecArray) ToNodeSpecArrayOutput() NodeSpecArrayOutput {
	return i.ToNodeSpecArrayOutputWithContext(context.Background())
}

func (i NodeSpecArray) ToNodeSpecArrayOutputWithContext(ctx context.Context) NodeSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeSpecArrayOutput)
}

// Details of the TPU node(s) being requested. Users can request either a single node or multiple nodes. NodeSpec provides the specification for node(s) to be created.
type NodeSpecOutput struct{ *pulumi.OutputState }

func (NodeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSpec)(nil)).Elem()
}

func (o NodeSpecOutput) ToNodeSpecOutput() NodeSpecOutput {
	return o
}

func (o NodeSpecOutput) ToNodeSpecOutputWithContext(ctx context.Context) NodeSpecOutput {
	return o
}

// Optional. Fields to specify in case of multi-node request.
func (o NodeSpecOutput) MultiNodeParams() MultiNodeParamsPtrOutput {
	return o.ApplyT(func(v NodeSpec) *MultiNodeParams { return v.MultiNodeParams }).(MultiNodeParamsPtrOutput)
}

// The node.
func (o NodeSpecOutput) Node() NodeTypeOutput {
	return o.ApplyT(func(v NodeSpec) NodeType { return v.Node }).(NodeTypeOutput)
}

// The unqualified resource name. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. This is only specified when requesting a single node. In case of multi-node requests, multi_node_params must be populated instead. It's an error to specify both node_id and multi_node_params.
func (o NodeSpecOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeSpec) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

// The parent resource name.
func (o NodeSpecOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v NodeSpec) string { return v.Parent }).(pulumi.StringOutput)
}

type NodeSpecArrayOutput struct{ *pulumi.OutputState }

func (NodeSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeSpec)(nil)).Elem()
}

func (o NodeSpecArrayOutput) ToNodeSpecArrayOutput() NodeSpecArrayOutput {
	return o
}

func (o NodeSpecArrayOutput) ToNodeSpecArrayOutputWithContext(ctx context.Context) NodeSpecArrayOutput {
	return o
}

func (o NodeSpecArrayOutput) Index(i pulumi.IntInput) NodeSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeSpec {
		return vs[0].([]NodeSpec)[vs[1].(int)]
	}).(NodeSpecOutput)
}

// Details of the TPU node(s) being requested. Users can request either a single node or multiple nodes. NodeSpec provides the specification for node(s) to be created.
type NodeSpecResponse struct {
	// Optional. Fields to specify in case of multi-node request.
	MultiNodeParams MultiNodeParamsResponse `pulumi:"multiNodeParams"`
	// The node.
	Node NodeResponse `pulumi:"node"`
	// The unqualified resource name. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. This is only specified when requesting a single node. In case of multi-node requests, multi_node_params must be populated instead. It's an error to specify both node_id and multi_node_params.
	NodeId string `pulumi:"nodeId"`
	// The parent resource name.
	Parent string `pulumi:"parent"`
}

// Details of the TPU node(s) being requested. Users can request either a single node or multiple nodes. NodeSpec provides the specification for node(s) to be created.
type NodeSpecResponseOutput struct{ *pulumi.OutputState }

func (NodeSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeSpecResponse)(nil)).Elem()
}

func (o NodeSpecResponseOutput) ToNodeSpecResponseOutput() NodeSpecResponseOutput {
	return o
}

func (o NodeSpecResponseOutput) ToNodeSpecResponseOutputWithContext(ctx context.Context) NodeSpecResponseOutput {
	return o
}

// Optional. Fields to specify in case of multi-node request.
func (o NodeSpecResponseOutput) MultiNodeParams() MultiNodeParamsResponseOutput {
	return o.ApplyT(func(v NodeSpecResponse) MultiNodeParamsResponse { return v.MultiNodeParams }).(MultiNodeParamsResponseOutput)
}

// The node.
func (o NodeSpecResponseOutput) Node() NodeResponseOutput {
	return o.ApplyT(func(v NodeSpecResponse) NodeResponse { return v.Node }).(NodeResponseOutput)
}

// The unqualified resource name. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. This is only specified when requesting a single node. In case of multi-node requests, multi_node_params must be populated instead. It's an error to specify both node_id and multi_node_params.
func (o NodeSpecResponseOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v NodeSpecResponse) string { return v.NodeId }).(pulumi.StringOutput)
}

// The parent resource name.
func (o NodeSpecResponseOutput) Parent() pulumi.StringOutput {
	return o.ApplyT(func(v NodeSpecResponse) string { return v.Parent }).(pulumi.StringOutput)
}

type NodeSpecResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeSpecResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeSpecResponse)(nil)).Elem()
}

func (o NodeSpecResponseArrayOutput) ToNodeSpecResponseArrayOutput() NodeSpecResponseArrayOutput {
	return o
}

func (o NodeSpecResponseArrayOutput) ToNodeSpecResponseArrayOutputWithContext(ctx context.Context) NodeSpecResponseArrayOutput {
	return o
}

func (o NodeSpecResponseArrayOutput) Index(i pulumi.IntInput) NodeSpecResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeSpecResponse {
		return vs[0].([]NodeSpecResponse)[vs[1].(int)]
	}).(NodeSpecResponseOutput)
}

// Further data for the provisioning state.
type ProvisioningDataResponse struct {
}

// Further data for the provisioning state.
type ProvisioningDataResponseOutput struct{ *pulumi.OutputState }

func (ProvisioningDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningDataResponse)(nil)).Elem()
}

func (o ProvisioningDataResponseOutput) ToProvisioningDataResponseOutput() ProvisioningDataResponseOutput {
	return o
}

func (o ProvisioningDataResponseOutput) ToProvisioningDataResponseOutputWithContext(ctx context.Context) ProvisioningDataResponseOutput {
	return o
}

// QueuedResourceState defines the details of the QueuedResource request.
type QueuedResourceStateResponse struct {
	// Further data for the accepted state.
	AcceptedData AcceptedDataResponse `pulumi:"acceptedData"`
	// Further data for the active state.
	ActiveData ActiveDataResponse `pulumi:"activeData"`
	// Further data for the creating state.
	CreatingData CreatingDataResponse `pulumi:"creatingData"`
	// Further data for the deleting state.
	DeletingData DeletingDataResponse `pulumi:"deletingData"`
	// Further data for the failed state.
	FailedData FailedDataResponse `pulumi:"failedData"`
	// Further data for the provisioning state.
	ProvisioningData ProvisioningDataResponse `pulumi:"provisioningData"`
	// State of the QueuedResource request.
	State string `pulumi:"state"`
	// The initiator of the QueuedResources's current state.
	StateInitiator string `pulumi:"stateInitiator"`
	// Further data for the suspended state.
	SuspendedData SuspendedDataResponse `pulumi:"suspendedData"`
	// Further data for the suspending state.
	SuspendingData SuspendingDataResponse `pulumi:"suspendingData"`
}

// QueuedResourceState defines the details of the QueuedResource request.
type QueuedResourceStateResponseOutput struct{ *pulumi.OutputState }

func (QueuedResourceStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueuedResourceStateResponse)(nil)).Elem()
}

func (o QueuedResourceStateResponseOutput) ToQueuedResourceStateResponseOutput() QueuedResourceStateResponseOutput {
	return o
}

func (o QueuedResourceStateResponseOutput) ToQueuedResourceStateResponseOutputWithContext(ctx context.Context) QueuedResourceStateResponseOutput {
	return o
}

// Further data for the accepted state.
func (o QueuedResourceStateResponseOutput) AcceptedData() AcceptedDataResponseOutput {
	return o.ApplyT(func(v QueuedResourceStateResponse) AcceptedDataResponse { return v.AcceptedData }).(AcceptedDataResponseOutput)
}

// Further data for the active state.
func (o QueuedResourceStateResponseOutput) ActiveData() ActiveDataResponseOutput {
	return o.ApplyT(func(v QueuedResourceStateResponse) ActiveDataResponse { return v.ActiveData }).(ActiveDataResponseOutput)
}

// Further data for the creating state.
func (o QueuedResourceStateResponseOutput) CreatingData() CreatingDataResponseOutput {
	return o.ApplyT(func(v QueuedResourceStateResponse) CreatingDataResponse { return v.CreatingData }).(CreatingDataResponseOutput)
}

// Further data for the deleting state.
func (o QueuedResourceStateResponseOutput) DeletingData() DeletingDataResponseOutput {
	return o.ApplyT(func(v QueuedResourceStateResponse) DeletingDataResponse { return v.DeletingData }).(DeletingDataResponseOutput)
}

// Further data for the failed state.
func (o QueuedResourceStateResponseOutput) FailedData() FailedDataResponseOutput {
	return o.ApplyT(func(v QueuedResourceStateResponse) FailedDataResponse { return v.FailedData }).(FailedDataResponseOutput)
}

// Further data for the provisioning state.
func (o QueuedResourceStateResponseOutput) ProvisioningData() ProvisioningDataResponseOutput {
	return o.ApplyT(func(v QueuedResourceStateResponse) ProvisioningDataResponse { return v.ProvisioningData }).(ProvisioningDataResponseOutput)
}

// State of the QueuedResource request.
func (o QueuedResourceStateResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v QueuedResourceStateResponse) string { return v.State }).(pulumi.StringOutput)
}

// The initiator of the QueuedResources's current state.
func (o QueuedResourceStateResponseOutput) StateInitiator() pulumi.StringOutput {
	return o.ApplyT(func(v QueuedResourceStateResponse) string { return v.StateInitiator }).(pulumi.StringOutput)
}

// Further data for the suspended state.
func (o QueuedResourceStateResponseOutput) SuspendedData() SuspendedDataResponseOutput {
	return o.ApplyT(func(v QueuedResourceStateResponse) SuspendedDataResponse { return v.SuspendedData }).(SuspendedDataResponseOutput)
}

// Further data for the suspending state.
func (o QueuedResourceStateResponseOutput) SuspendingData() SuspendingDataResponseOutput {
	return o.ApplyT(func(v QueuedResourceStateResponse) SuspendingDataResponse { return v.SuspendingData }).(SuspendingDataResponseOutput)
}

// Defines the policy of the QueuedRequest.
type QueueingPolicy struct {
	// A relative time after which resources may be created.
	ValidAfterDuration *string `pulumi:"validAfterDuration"`
	// An absolute time at which resources may be created.
	ValidAfterTime *string `pulumi:"validAfterTime"`
	// An absolute time interval within which resources may be created.
	ValidInterval *Interval `pulumi:"validInterval"`
	// A relative time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.
	ValidUntilDuration *string `pulumi:"validUntilDuration"`
	// An absolute time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.
	ValidUntilTime *string `pulumi:"validUntilTime"`
}

// QueueingPolicyInput is an input type that accepts QueueingPolicyArgs and QueueingPolicyOutput values.
// You can construct a concrete instance of `QueueingPolicyInput` via:
//
//	QueueingPolicyArgs{...}
type QueueingPolicyInput interface {
	pulumi.Input

	ToQueueingPolicyOutput() QueueingPolicyOutput
	ToQueueingPolicyOutputWithContext(context.Context) QueueingPolicyOutput
}

// Defines the policy of the QueuedRequest.
type QueueingPolicyArgs struct {
	// A relative time after which resources may be created.
	ValidAfterDuration pulumi.StringPtrInput `pulumi:"validAfterDuration"`
	// An absolute time at which resources may be created.
	ValidAfterTime pulumi.StringPtrInput `pulumi:"validAfterTime"`
	// An absolute time interval within which resources may be created.
	ValidInterval IntervalPtrInput `pulumi:"validInterval"`
	// A relative time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.
	ValidUntilDuration pulumi.StringPtrInput `pulumi:"validUntilDuration"`
	// An absolute time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.
	ValidUntilTime pulumi.StringPtrInput `pulumi:"validUntilTime"`
}

func (QueueingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueingPolicy)(nil)).Elem()
}

func (i QueueingPolicyArgs) ToQueueingPolicyOutput() QueueingPolicyOutput {
	return i.ToQueueingPolicyOutputWithContext(context.Background())
}

func (i QueueingPolicyArgs) ToQueueingPolicyOutputWithContext(ctx context.Context) QueueingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueingPolicyOutput)
}

func (i QueueingPolicyArgs) ToQueueingPolicyPtrOutput() QueueingPolicyPtrOutput {
	return i.ToQueueingPolicyPtrOutputWithContext(context.Background())
}

func (i QueueingPolicyArgs) ToQueueingPolicyPtrOutputWithContext(ctx context.Context) QueueingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueingPolicyOutput).ToQueueingPolicyPtrOutputWithContext(ctx)
}

// QueueingPolicyPtrInput is an input type that accepts QueueingPolicyArgs, QueueingPolicyPtr and QueueingPolicyPtrOutput values.
// You can construct a concrete instance of `QueueingPolicyPtrInput` via:
//
//	        QueueingPolicyArgs{...}
//
//	or:
//
//	        nil
type QueueingPolicyPtrInput interface {
	pulumi.Input

	ToQueueingPolicyPtrOutput() QueueingPolicyPtrOutput
	ToQueueingPolicyPtrOutputWithContext(context.Context) QueueingPolicyPtrOutput
}

type queueingPolicyPtrType QueueingPolicyArgs

func QueueingPolicyPtr(v *QueueingPolicyArgs) QueueingPolicyPtrInput {
	return (*queueingPolicyPtrType)(v)
}

func (*queueingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueingPolicy)(nil)).Elem()
}

func (i *queueingPolicyPtrType) ToQueueingPolicyPtrOutput() QueueingPolicyPtrOutput {
	return i.ToQueueingPolicyPtrOutputWithContext(context.Background())
}

func (i *queueingPolicyPtrType) ToQueueingPolicyPtrOutputWithContext(ctx context.Context) QueueingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueingPolicyPtrOutput)
}

// Defines the policy of the QueuedRequest.
type QueueingPolicyOutput struct{ *pulumi.OutputState }

func (QueueingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueingPolicy)(nil)).Elem()
}

func (o QueueingPolicyOutput) ToQueueingPolicyOutput() QueueingPolicyOutput {
	return o
}

func (o QueueingPolicyOutput) ToQueueingPolicyOutputWithContext(ctx context.Context) QueueingPolicyOutput {
	return o
}

func (o QueueingPolicyOutput) ToQueueingPolicyPtrOutput() QueueingPolicyPtrOutput {
	return o.ToQueueingPolicyPtrOutputWithContext(context.Background())
}

func (o QueueingPolicyOutput) ToQueueingPolicyPtrOutputWithContext(ctx context.Context) QueueingPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueueingPolicy) *QueueingPolicy {
		return &v
	}).(QueueingPolicyPtrOutput)
}

// A relative time after which resources may be created.
func (o QueueingPolicyOutput) ValidAfterDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueingPolicy) *string { return v.ValidAfterDuration }).(pulumi.StringPtrOutput)
}

// An absolute time at which resources may be created.
func (o QueueingPolicyOutput) ValidAfterTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueingPolicy) *string { return v.ValidAfterTime }).(pulumi.StringPtrOutput)
}

// An absolute time interval within which resources may be created.
func (o QueueingPolicyOutput) ValidInterval() IntervalPtrOutput {
	return o.ApplyT(func(v QueueingPolicy) *Interval { return v.ValidInterval }).(IntervalPtrOutput)
}

// A relative time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.
func (o QueueingPolicyOutput) ValidUntilDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueingPolicy) *string { return v.ValidUntilDuration }).(pulumi.StringPtrOutput)
}

// An absolute time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.
func (o QueueingPolicyOutput) ValidUntilTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueingPolicy) *string { return v.ValidUntilTime }).(pulumi.StringPtrOutput)
}

type QueueingPolicyPtrOutput struct{ *pulumi.OutputState }

func (QueueingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueingPolicy)(nil)).Elem()
}

func (o QueueingPolicyPtrOutput) ToQueueingPolicyPtrOutput() QueueingPolicyPtrOutput {
	return o
}

func (o QueueingPolicyPtrOutput) ToQueueingPolicyPtrOutputWithContext(ctx context.Context) QueueingPolicyPtrOutput {
	return o
}

func (o QueueingPolicyPtrOutput) Elem() QueueingPolicyOutput {
	return o.ApplyT(func(v *QueueingPolicy) QueueingPolicy {
		if v != nil {
			return *v
		}
		var ret QueueingPolicy
		return ret
	}).(QueueingPolicyOutput)
}

// A relative time after which resources may be created.
func (o QueueingPolicyPtrOutput) ValidAfterDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ValidAfterDuration
	}).(pulumi.StringPtrOutput)
}

// An absolute time at which resources may be created.
func (o QueueingPolicyPtrOutput) ValidAfterTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ValidAfterTime
	}).(pulumi.StringPtrOutput)
}

// An absolute time interval within which resources may be created.
func (o QueueingPolicyPtrOutput) ValidInterval() IntervalPtrOutput {
	return o.ApplyT(func(v *QueueingPolicy) *Interval {
		if v == nil {
			return nil
		}
		return v.ValidInterval
	}).(IntervalPtrOutput)
}

// A relative time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.
func (o QueueingPolicyPtrOutput) ValidUntilDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ValidUntilDuration
	}).(pulumi.StringPtrOutput)
}

// An absolute time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.
func (o QueueingPolicyPtrOutput) ValidUntilTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueingPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ValidUntilTime
	}).(pulumi.StringPtrOutput)
}

// Defines the policy of the QueuedRequest.
type QueueingPolicyResponse struct {
	// A relative time after which resources may be created.
	ValidAfterDuration string `pulumi:"validAfterDuration"`
	// An absolute time at which resources may be created.
	ValidAfterTime string `pulumi:"validAfterTime"`
	// An absolute time interval within which resources may be created.
	ValidInterval IntervalResponse `pulumi:"validInterval"`
	// A relative time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.
	ValidUntilDuration string `pulumi:"validUntilDuration"`
	// An absolute time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.
	ValidUntilTime string `pulumi:"validUntilTime"`
}

// Defines the policy of the QueuedRequest.
type QueueingPolicyResponseOutput struct{ *pulumi.OutputState }

func (QueueingPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueingPolicyResponse)(nil)).Elem()
}

func (o QueueingPolicyResponseOutput) ToQueueingPolicyResponseOutput() QueueingPolicyResponseOutput {
	return o
}

func (o QueueingPolicyResponseOutput) ToQueueingPolicyResponseOutputWithContext(ctx context.Context) QueueingPolicyResponseOutput {
	return o
}

// A relative time after which resources may be created.
func (o QueueingPolicyResponseOutput) ValidAfterDuration() pulumi.StringOutput {
	return o.ApplyT(func(v QueueingPolicyResponse) string { return v.ValidAfterDuration }).(pulumi.StringOutput)
}

// An absolute time at which resources may be created.
func (o QueueingPolicyResponseOutput) ValidAfterTime() pulumi.StringOutput {
	return o.ApplyT(func(v QueueingPolicyResponse) string { return v.ValidAfterTime }).(pulumi.StringOutput)
}

// An absolute time interval within which resources may be created.
func (o QueueingPolicyResponseOutput) ValidInterval() IntervalResponseOutput {
	return o.ApplyT(func(v QueueingPolicyResponse) IntervalResponse { return v.ValidInterval }).(IntervalResponseOutput)
}

// A relative time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.
func (o QueueingPolicyResponseOutput) ValidUntilDuration() pulumi.StringOutput {
	return o.ApplyT(func(v QueueingPolicyResponse) string { return v.ValidUntilDuration }).(pulumi.StringOutput)
}

// An absolute time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.
func (o QueueingPolicyResponseOutput) ValidUntilTime() pulumi.StringOutput {
	return o.ApplyT(func(v QueueingPolicyResponse) string { return v.ValidUntilTime }).(pulumi.StringOutput)
}

// Sets the scheduling options for this node.
type SchedulingConfig struct {
	// Defines whether the node is preemptible.
	Preemptible *bool `pulumi:"preemptible"`
	// Whether the node is created under a reservation.
	Reserved *bool `pulumi:"reserved"`
}

// SchedulingConfigInput is an input type that accepts SchedulingConfigArgs and SchedulingConfigOutput values.
// You can construct a concrete instance of `SchedulingConfigInput` via:
//
//	SchedulingConfigArgs{...}
type SchedulingConfigInput interface {
	pulumi.Input

	ToSchedulingConfigOutput() SchedulingConfigOutput
	ToSchedulingConfigOutputWithContext(context.Context) SchedulingConfigOutput
}

// Sets the scheduling options for this node.
type SchedulingConfigArgs struct {
	// Defines whether the node is preemptible.
	Preemptible pulumi.BoolPtrInput `pulumi:"preemptible"`
	// Whether the node is created under a reservation.
	Reserved pulumi.BoolPtrInput `pulumi:"reserved"`
}

func (SchedulingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingConfig)(nil)).Elem()
}

func (i SchedulingConfigArgs) ToSchedulingConfigOutput() SchedulingConfigOutput {
	return i.ToSchedulingConfigOutputWithContext(context.Background())
}

func (i SchedulingConfigArgs) ToSchedulingConfigOutputWithContext(ctx context.Context) SchedulingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingConfigOutput)
}

func (i SchedulingConfigArgs) ToSchedulingConfigPtrOutput() SchedulingConfigPtrOutput {
	return i.ToSchedulingConfigPtrOutputWithContext(context.Background())
}

func (i SchedulingConfigArgs) ToSchedulingConfigPtrOutputWithContext(ctx context.Context) SchedulingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingConfigOutput).ToSchedulingConfigPtrOutputWithContext(ctx)
}

// SchedulingConfigPtrInput is an input type that accepts SchedulingConfigArgs, SchedulingConfigPtr and SchedulingConfigPtrOutput values.
// You can construct a concrete instance of `SchedulingConfigPtrInput` via:
//
//	        SchedulingConfigArgs{...}
//
//	or:
//
//	        nil
type SchedulingConfigPtrInput interface {
	pulumi.Input

	ToSchedulingConfigPtrOutput() SchedulingConfigPtrOutput
	ToSchedulingConfigPtrOutputWithContext(context.Context) SchedulingConfigPtrOutput
}

type schedulingConfigPtrType SchedulingConfigArgs

func SchedulingConfigPtr(v *SchedulingConfigArgs) SchedulingConfigPtrInput {
	return (*schedulingConfigPtrType)(v)
}

func (*schedulingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingConfig)(nil)).Elem()
}

func (i *schedulingConfigPtrType) ToSchedulingConfigPtrOutput() SchedulingConfigPtrOutput {
	return i.ToSchedulingConfigPtrOutputWithContext(context.Background())
}

func (i *schedulingConfigPtrType) ToSchedulingConfigPtrOutputWithContext(ctx context.Context) SchedulingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingConfigPtrOutput)
}

// Sets the scheduling options for this node.
type SchedulingConfigOutput struct{ *pulumi.OutputState }

func (SchedulingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingConfig)(nil)).Elem()
}

func (o SchedulingConfigOutput) ToSchedulingConfigOutput() SchedulingConfigOutput {
	return o
}

func (o SchedulingConfigOutput) ToSchedulingConfigOutputWithContext(ctx context.Context) SchedulingConfigOutput {
	return o
}

func (o SchedulingConfigOutput) ToSchedulingConfigPtrOutput() SchedulingConfigPtrOutput {
	return o.ToSchedulingConfigPtrOutputWithContext(context.Background())
}

func (o SchedulingConfigOutput) ToSchedulingConfigPtrOutputWithContext(ctx context.Context) SchedulingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchedulingConfig) *SchedulingConfig {
		return &v
	}).(SchedulingConfigPtrOutput)
}

// Defines whether the node is preemptible.
func (o SchedulingConfigOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchedulingConfig) *bool { return v.Preemptible }).(pulumi.BoolPtrOutput)
}

// Whether the node is created under a reservation.
func (o SchedulingConfigOutput) Reserved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchedulingConfig) *bool { return v.Reserved }).(pulumi.BoolPtrOutput)
}

type SchedulingConfigPtrOutput struct{ *pulumi.OutputState }

func (SchedulingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingConfig)(nil)).Elem()
}

func (o SchedulingConfigPtrOutput) ToSchedulingConfigPtrOutput() SchedulingConfigPtrOutput {
	return o
}

func (o SchedulingConfigPtrOutput) ToSchedulingConfigPtrOutputWithContext(ctx context.Context) SchedulingConfigPtrOutput {
	return o
}

func (o SchedulingConfigPtrOutput) Elem() SchedulingConfigOutput {
	return o.ApplyT(func(v *SchedulingConfig) SchedulingConfig {
		if v != nil {
			return *v
		}
		var ret SchedulingConfig
		return ret
	}).(SchedulingConfigOutput)
}

// Defines whether the node is preemptible.
func (o SchedulingConfigPtrOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchedulingConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Preemptible
	}).(pulumi.BoolPtrOutput)
}

// Whether the node is created under a reservation.
func (o SchedulingConfigPtrOutput) Reserved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchedulingConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Reserved
	}).(pulumi.BoolPtrOutput)
}

// Sets the scheduling options for this node.
type SchedulingConfigResponse struct {
	// Defines whether the node is preemptible.
	Preemptible bool `pulumi:"preemptible"`
	// Whether the node is created under a reservation.
	Reserved bool `pulumi:"reserved"`
}

// Sets the scheduling options for this node.
type SchedulingConfigResponseOutput struct{ *pulumi.OutputState }

func (SchedulingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingConfigResponse)(nil)).Elem()
}

func (o SchedulingConfigResponseOutput) ToSchedulingConfigResponseOutput() SchedulingConfigResponseOutput {
	return o
}

func (o SchedulingConfigResponseOutput) ToSchedulingConfigResponseOutputWithContext(ctx context.Context) SchedulingConfigResponseOutput {
	return o
}

// Defines whether the node is preemptible.
func (o SchedulingConfigResponseOutput) Preemptible() pulumi.BoolOutput {
	return o.ApplyT(func(v SchedulingConfigResponse) bool { return v.Preemptible }).(pulumi.BoolOutput)
}

// Whether the node is created under a reservation.
func (o SchedulingConfigResponseOutput) Reserved() pulumi.BoolOutput {
	return o.ApplyT(func(v SchedulingConfigResponse) bool { return v.Reserved }).(pulumi.BoolOutput)
}

// A service account.
type ServiceAccount struct {
	// Email address of the service account. If empty, default Compute service account will be used.
	Email *string `pulumi:"email"`
	// The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.
	Scope []string `pulumi:"scope"`
}

// ServiceAccountInput is an input type that accepts ServiceAccountArgs and ServiceAccountOutput values.
// You can construct a concrete instance of `ServiceAccountInput` via:
//
//	ServiceAccountArgs{...}
type ServiceAccountInput interface {
	pulumi.Input

	ToServiceAccountOutput() ServiceAccountOutput
	ToServiceAccountOutputWithContext(context.Context) ServiceAccountOutput
}

// A service account.
type ServiceAccountArgs struct {
	// Email address of the service account. If empty, default Compute service account will be used.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.
	Scope pulumi.StringArrayInput `pulumi:"scope"`
}

func (ServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccount)(nil)).Elem()
}

func (i ServiceAccountArgs) ToServiceAccountOutput() ServiceAccountOutput {
	return i.ToServiceAccountOutputWithContext(context.Background())
}

func (i ServiceAccountArgs) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountOutput)
}

func (i ServiceAccountArgs) ToServiceAccountPtrOutput() ServiceAccountPtrOutput {
	return i.ToServiceAccountPtrOutputWithContext(context.Background())
}

func (i ServiceAccountArgs) ToServiceAccountPtrOutputWithContext(ctx context.Context) ServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountOutput).ToServiceAccountPtrOutputWithContext(ctx)
}

// ServiceAccountPtrInput is an input type that accepts ServiceAccountArgs, ServiceAccountPtr and ServiceAccountPtrOutput values.
// You can construct a concrete instance of `ServiceAccountPtrInput` via:
//
//	        ServiceAccountArgs{...}
//
//	or:
//
//	        nil
type ServiceAccountPtrInput interface {
	pulumi.Input

	ToServiceAccountPtrOutput() ServiceAccountPtrOutput
	ToServiceAccountPtrOutputWithContext(context.Context) ServiceAccountPtrOutput
}

type serviceAccountPtrType ServiceAccountArgs

func ServiceAccountPtr(v *ServiceAccountArgs) ServiceAccountPtrInput {
	return (*serviceAccountPtrType)(v)
}

func (*serviceAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccount)(nil)).Elem()
}

func (i *serviceAccountPtrType) ToServiceAccountPtrOutput() ServiceAccountPtrOutput {
	return i.ToServiceAccountPtrOutputWithContext(context.Background())
}

func (i *serviceAccountPtrType) ToServiceAccountPtrOutputWithContext(ctx context.Context) ServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountPtrOutput)
}

// A service account.
type ServiceAccountOutput struct{ *pulumi.OutputState }

func (ServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountOutput) ToServiceAccountOutput() ServiceAccountOutput {
	return o
}

func (o ServiceAccountOutput) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return o
}

func (o ServiceAccountOutput) ToServiceAccountPtrOutput() ServiceAccountPtrOutput {
	return o.ToServiceAccountPtrOutputWithContext(context.Background())
}

func (o ServiceAccountOutput) ToServiceAccountPtrOutputWithContext(ctx context.Context) ServiceAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAccount) *ServiceAccount {
		return &v
	}).(ServiceAccountPtrOutput)
}

// Email address of the service account. If empty, default Compute service account will be used.
func (o ServiceAccountOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccount) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.
func (o ServiceAccountOutput) Scope() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAccount) []string { return v.Scope }).(pulumi.StringArrayOutput)
}

type ServiceAccountPtrOutput struct{ *pulumi.OutputState }

func (ServiceAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountPtrOutput) ToServiceAccountPtrOutput() ServiceAccountPtrOutput {
	return o
}

func (o ServiceAccountPtrOutput) ToServiceAccountPtrOutputWithContext(ctx context.Context) ServiceAccountPtrOutput {
	return o
}

func (o ServiceAccountPtrOutput) Elem() ServiceAccountOutput {
	return o.ApplyT(func(v *ServiceAccount) ServiceAccount {
		if v != nil {
			return *v
		}
		var ret ServiceAccount
		return ret
	}).(ServiceAccountOutput)
}

// Email address of the service account. If empty, default Compute service account will be used.
func (o ServiceAccountPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.
func (o ServiceAccountPtrOutput) Scope() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceAccount) []string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringArrayOutput)
}

// A service account.
type ServiceAccountResponse struct {
	// Email address of the service account. If empty, default Compute service account will be used.
	Email string `pulumi:"email"`
	// The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.
	Scope []string `pulumi:"scope"`
}

// A service account.
type ServiceAccountResponseOutput struct{ *pulumi.OutputState }

func (ServiceAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountResponse)(nil)).Elem()
}

func (o ServiceAccountResponseOutput) ToServiceAccountResponseOutput() ServiceAccountResponseOutput {
	return o
}

func (o ServiceAccountResponseOutput) ToServiceAccountResponseOutputWithContext(ctx context.Context) ServiceAccountResponseOutput {
	return o
}

// Email address of the service account. If empty, default Compute service account will be used.
func (o ServiceAccountResponseOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAccountResponse) string { return v.Email }).(pulumi.StringOutput)
}

// The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.
func (o ServiceAccountResponseOutput) Scope() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAccountResponse) []string { return v.Scope }).(pulumi.StringArrayOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfig struct {
	// Defines whether the instance has Secure Boot enabled.
	EnableSecureBoot *bool `pulumi:"enableSecureBoot"`
}

// ShieldedInstanceConfigInput is an input type that accepts ShieldedInstanceConfigArgs and ShieldedInstanceConfigOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigInput` via:
//
//	ShieldedInstanceConfigArgs{...}
type ShieldedInstanceConfigInput interface {
	pulumi.Input

	ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput
	ToShieldedInstanceConfigOutputWithContext(context.Context) ShieldedInstanceConfigOutput
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigArgs struct {
	// Defines whether the instance has Secure Boot enabled.
	EnableSecureBoot pulumi.BoolPtrInput `pulumi:"enableSecureBoot"`
}

func (ShieldedInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return i.ToShieldedInstanceConfigOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput)
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput).ToShieldedInstanceConfigPtrOutputWithContext(ctx)
}

// ShieldedInstanceConfigPtrInput is an input type that accepts ShieldedInstanceConfigArgs, ShieldedInstanceConfigPtr and ShieldedInstanceConfigPtrOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigPtrInput` via:
//
//	        ShieldedInstanceConfigArgs{...}
//
//	or:
//
//	        nil
type ShieldedInstanceConfigPtrInput interface {
	pulumi.Input

	ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput
	ToShieldedInstanceConfigPtrOutputWithContext(context.Context) ShieldedInstanceConfigPtrOutput
}

type shieldedInstanceConfigPtrType ShieldedInstanceConfigArgs

func ShieldedInstanceConfigPtr(v *ShieldedInstanceConfigArgs) ShieldedInstanceConfigPtrInput {
	return (*shieldedInstanceConfigPtrType)(v)
}

func (*shieldedInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigPtrOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ShieldedInstanceConfig) *ShieldedInstanceConfig {
		return &v
	}).(ShieldedInstanceConfigPtrOutput)
}

// Defines whether the instance has Secure Boot enabled.
func (o ShieldedInstanceConfigOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

type ShieldedInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) Elem() ShieldedInstanceConfigOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) ShieldedInstanceConfig {
		if v != nil {
			return *v
		}
		var ret ShieldedInstanceConfig
		return ret
	}).(ShieldedInstanceConfigOutput)
}

// Defines whether the instance has Secure Boot enabled.
func (o ShieldedInstanceConfigPtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigResponse struct {
	// Defines whether the instance has Secure Boot enabled.
	EnableSecureBoot bool `pulumi:"enableSecureBoot"`
}

// A set of Shielded Instance options.
type ShieldedInstanceConfigResponseOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponseOutput() ShieldedInstanceConfigResponseOutput {
	return o
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponseOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponseOutput {
	return o
}

// Defines whether the instance has Secure Boot enabled.
func (o ShieldedInstanceConfigResponseOutput) EnableSecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableSecureBoot }).(pulumi.BoolOutput)
}

// Spot tier definition.
type Spot struct {
}

// SpotInput is an input type that accepts SpotArgs and SpotOutput values.
// You can construct a concrete instance of `SpotInput` via:
//
//	SpotArgs{...}
type SpotInput interface {
	pulumi.Input

	ToSpotOutput() SpotOutput
	ToSpotOutputWithContext(context.Context) SpotOutput
}

// Spot tier definition.
type SpotArgs struct {
}

func (SpotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Spot)(nil)).Elem()
}

func (i SpotArgs) ToSpotOutput() SpotOutput {
	return i.ToSpotOutputWithContext(context.Background())
}

func (i SpotArgs) ToSpotOutputWithContext(ctx context.Context) SpotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpotOutput)
}

func (i SpotArgs) ToSpotPtrOutput() SpotPtrOutput {
	return i.ToSpotPtrOutputWithContext(context.Background())
}

func (i SpotArgs) ToSpotPtrOutputWithContext(ctx context.Context) SpotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpotOutput).ToSpotPtrOutputWithContext(ctx)
}

// SpotPtrInput is an input type that accepts SpotArgs, SpotPtr and SpotPtrOutput values.
// You can construct a concrete instance of `SpotPtrInput` via:
//
//	        SpotArgs{...}
//
//	or:
//
//	        nil
type SpotPtrInput interface {
	pulumi.Input

	ToSpotPtrOutput() SpotPtrOutput
	ToSpotPtrOutputWithContext(context.Context) SpotPtrOutput
}

type spotPtrType SpotArgs

func SpotPtr(v *SpotArgs) SpotPtrInput {
	return (*spotPtrType)(v)
}

func (*spotPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Spot)(nil)).Elem()
}

func (i *spotPtrType) ToSpotPtrOutput() SpotPtrOutput {
	return i.ToSpotPtrOutputWithContext(context.Background())
}

func (i *spotPtrType) ToSpotPtrOutputWithContext(ctx context.Context) SpotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpotPtrOutput)
}

// Spot tier definition.
type SpotOutput struct{ *pulumi.OutputState }

func (SpotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Spot)(nil)).Elem()
}

func (o SpotOutput) ToSpotOutput() SpotOutput {
	return o
}

func (o SpotOutput) ToSpotOutputWithContext(ctx context.Context) SpotOutput {
	return o
}

func (o SpotOutput) ToSpotPtrOutput() SpotPtrOutput {
	return o.ToSpotPtrOutputWithContext(context.Background())
}

func (o SpotOutput) ToSpotPtrOutputWithContext(ctx context.Context) SpotPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Spot) *Spot {
		return &v
	}).(SpotPtrOutput)
}

type SpotPtrOutput struct{ *pulumi.OutputState }

func (SpotPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Spot)(nil)).Elem()
}

func (o SpotPtrOutput) ToSpotPtrOutput() SpotPtrOutput {
	return o
}

func (o SpotPtrOutput) ToSpotPtrOutputWithContext(ctx context.Context) SpotPtrOutput {
	return o
}

func (o SpotPtrOutput) Elem() SpotOutput {
	return o.ApplyT(func(v *Spot) Spot {
		if v != nil {
			return *v
		}
		var ret Spot
		return ret
	}).(SpotOutput)
}

// Spot tier definition.
type SpotResponse struct {
}

// Spot tier definition.
type SpotResponseOutput struct{ *pulumi.OutputState }

func (SpotResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpotResponse)(nil)).Elem()
}

func (o SpotResponseOutput) ToSpotResponseOutput() SpotResponseOutput {
	return o
}

func (o SpotResponseOutput) ToSpotResponseOutputWithContext(ctx context.Context) SpotResponseOutput {
	return o
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Further data for the suspended state.
type SuspendedDataResponse struct {
}

// Further data for the suspended state.
type SuspendedDataResponseOutput struct{ *pulumi.OutputState }

func (SuspendedDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuspendedDataResponse)(nil)).Elem()
}

func (o SuspendedDataResponseOutput) ToSuspendedDataResponseOutput() SuspendedDataResponseOutput {
	return o
}

func (o SuspendedDataResponseOutput) ToSuspendedDataResponseOutputWithContext(ctx context.Context) SuspendedDataResponseOutput {
	return o
}

// Further data for the suspending state.
type SuspendingDataResponse struct {
}

// Further data for the suspending state.
type SuspendingDataResponseOutput struct{ *pulumi.OutputState }

func (SuspendingDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuspendingDataResponse)(nil)).Elem()
}

func (o SuspendingDataResponseOutput) ToSuspendingDataResponseOutput() SuspendingDataResponseOutput {
	return o
}

func (o SuspendingDataResponseOutput) ToSuspendingDataResponseOutputWithContext(ctx context.Context) SuspendingDataResponseOutput {
	return o
}

// A Symptom instance.
type SymptomResponse struct {
	// Timestamp when the Symptom is created.
	CreateTime string `pulumi:"createTime"`
	// Detailed information of the current Symptom.
	Details string `pulumi:"details"`
	// Type of the Symptom.
	SymptomType string `pulumi:"symptomType"`
	// A string used to uniquely distinguish a worker within a TPU node.
	WorkerId string `pulumi:"workerId"`
}

// A Symptom instance.
type SymptomResponseOutput struct{ *pulumi.OutputState }

func (SymptomResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SymptomResponse)(nil)).Elem()
}

func (o SymptomResponseOutput) ToSymptomResponseOutput() SymptomResponseOutput {
	return o
}

func (o SymptomResponseOutput) ToSymptomResponseOutputWithContext(ctx context.Context) SymptomResponseOutput {
	return o
}

// Timestamp when the Symptom is created.
func (o SymptomResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v SymptomResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Detailed information of the current Symptom.
func (o SymptomResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v SymptomResponse) string { return v.Details }).(pulumi.StringOutput)
}

// Type of the Symptom.
func (o SymptomResponseOutput) SymptomType() pulumi.StringOutput {
	return o.ApplyT(func(v SymptomResponse) string { return v.SymptomType }).(pulumi.StringOutput)
}

// A string used to uniquely distinguish a worker within a TPU node.
func (o SymptomResponseOutput) WorkerId() pulumi.StringOutput {
	return o.ApplyT(func(v SymptomResponse) string { return v.WorkerId }).(pulumi.StringOutput)
}

type SymptomResponseArrayOutput struct{ *pulumi.OutputState }

func (SymptomResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SymptomResponse)(nil)).Elem()
}

func (o SymptomResponseArrayOutput) ToSymptomResponseArrayOutput() SymptomResponseArrayOutput {
	return o
}

func (o SymptomResponseArrayOutput) ToSymptomResponseArrayOutputWithContext(ctx context.Context) SymptomResponseArrayOutput {
	return o
}

func (o SymptomResponseArrayOutput) Index(i pulumi.IntInput) SymptomResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SymptomResponse {
		return vs[0].([]SymptomResponse)[vs[1].(int)]
	}).(SymptomResponseOutput)
}

// Details of the TPU resource(s) being requested.
type Tpu struct {
	// The TPU node(s) being requested.
	NodeSpec []NodeSpec `pulumi:"nodeSpec"`
}

// TpuInput is an input type that accepts TpuArgs and TpuOutput values.
// You can construct a concrete instance of `TpuInput` via:
//
//	TpuArgs{...}
type TpuInput interface {
	pulumi.Input

	ToTpuOutput() TpuOutput
	ToTpuOutputWithContext(context.Context) TpuOutput
}

// Details of the TPU resource(s) being requested.
type TpuArgs struct {
	// The TPU node(s) being requested.
	NodeSpec NodeSpecArrayInput `pulumi:"nodeSpec"`
}

func (TpuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Tpu)(nil)).Elem()
}

func (i TpuArgs) ToTpuOutput() TpuOutput {
	return i.ToTpuOutputWithContext(context.Background())
}

func (i TpuArgs) ToTpuOutputWithContext(ctx context.Context) TpuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TpuOutput)
}

func (i TpuArgs) ToTpuPtrOutput() TpuPtrOutput {
	return i.ToTpuPtrOutputWithContext(context.Background())
}

func (i TpuArgs) ToTpuPtrOutputWithContext(ctx context.Context) TpuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TpuOutput).ToTpuPtrOutputWithContext(ctx)
}

// TpuPtrInput is an input type that accepts TpuArgs, TpuPtr and TpuPtrOutput values.
// You can construct a concrete instance of `TpuPtrInput` via:
//
//	        TpuArgs{...}
//
//	or:
//
//	        nil
type TpuPtrInput interface {
	pulumi.Input

	ToTpuPtrOutput() TpuPtrOutput
	ToTpuPtrOutputWithContext(context.Context) TpuPtrOutput
}

type tpuPtrType TpuArgs

func TpuPtr(v *TpuArgs) TpuPtrInput {
	return (*tpuPtrType)(v)
}

func (*tpuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Tpu)(nil)).Elem()
}

func (i *tpuPtrType) ToTpuPtrOutput() TpuPtrOutput {
	return i.ToTpuPtrOutputWithContext(context.Background())
}

func (i *tpuPtrType) ToTpuPtrOutputWithContext(ctx context.Context) TpuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TpuPtrOutput)
}

// Details of the TPU resource(s) being requested.
type TpuOutput struct{ *pulumi.OutputState }

func (TpuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Tpu)(nil)).Elem()
}

func (o TpuOutput) ToTpuOutput() TpuOutput {
	return o
}

func (o TpuOutput) ToTpuOutputWithContext(ctx context.Context) TpuOutput {
	return o
}

func (o TpuOutput) ToTpuPtrOutput() TpuPtrOutput {
	return o.ToTpuPtrOutputWithContext(context.Background())
}

func (o TpuOutput) ToTpuPtrOutputWithContext(ctx context.Context) TpuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Tpu) *Tpu {
		return &v
	}).(TpuPtrOutput)
}

// The TPU node(s) being requested.
func (o TpuOutput) NodeSpec() NodeSpecArrayOutput {
	return o.ApplyT(func(v Tpu) []NodeSpec { return v.NodeSpec }).(NodeSpecArrayOutput)
}

type TpuPtrOutput struct{ *pulumi.OutputState }

func (TpuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tpu)(nil)).Elem()
}

func (o TpuPtrOutput) ToTpuPtrOutput() TpuPtrOutput {
	return o
}

func (o TpuPtrOutput) ToTpuPtrOutputWithContext(ctx context.Context) TpuPtrOutput {
	return o
}

func (o TpuPtrOutput) Elem() TpuOutput {
	return o.ApplyT(func(v *Tpu) Tpu {
		if v != nil {
			return *v
		}
		var ret Tpu
		return ret
	}).(TpuOutput)
}

// The TPU node(s) being requested.
func (o TpuPtrOutput) NodeSpec() NodeSpecArrayOutput {
	return o.ApplyT(func(v *Tpu) []NodeSpec {
		if v == nil {
			return nil
		}
		return v.NodeSpec
	}).(NodeSpecArrayOutput)
}

// Details of the TPU resource(s) being requested.
type TpuResponse struct {
	// The TPU node(s) being requested.
	NodeSpec []NodeSpecResponse `pulumi:"nodeSpec"`
}

// Details of the TPU resource(s) being requested.
type TpuResponseOutput struct{ *pulumi.OutputState }

func (TpuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TpuResponse)(nil)).Elem()
}

func (o TpuResponseOutput) ToTpuResponseOutput() TpuResponseOutput {
	return o
}

func (o TpuResponseOutput) ToTpuResponseOutputWithContext(ctx context.Context) TpuResponseOutput {
	return o
}

// The TPU node(s) being requested.
func (o TpuResponseOutput) NodeSpec() NodeSpecResponseArrayOutput {
	return o.ApplyT(func(v TpuResponse) []NodeSpecResponse { return v.NodeSpec }).(NodeSpecResponseArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AcceleratorConfigInput)(nil)).Elem(), AcceleratorConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcceleratorConfigPtrInput)(nil)).Elem(), AcceleratorConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedDiskInput)(nil)).Elem(), AttachedDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedDiskArrayInput)(nil)).Elem(), AttachedDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BestEffortInput)(nil)).Elem(), BestEffortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BestEffortPtrInput)(nil)).Elem(), BestEffortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BootDiskConfigInput)(nil)).Elem(), BootDiskConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BootDiskConfigPtrInput)(nil)).Elem(), BootDiskConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerEncryptionKeyInput)(nil)).Elem(), CustomerEncryptionKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerEncryptionKeyPtrInput)(nil)).Elem(), CustomerEncryptionKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GuaranteedInput)(nil)).Elem(), GuaranteedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GuaranteedPtrInput)(nil)).Elem(), GuaranteedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntervalInput)(nil)).Elem(), IntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntervalPtrInput)(nil)).Elem(), IntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiNodeParamsInput)(nil)).Elem(), MultiNodeParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiNodeParamsPtrInput)(nil)).Elem(), MultiNodeParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigPtrInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeTypeInput)(nil)).Elem(), NodeTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSpecInput)(nil)).Elem(), NodeSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeSpecArrayInput)(nil)).Elem(), NodeSpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueingPolicyInput)(nil)).Elem(), QueueingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueingPolicyPtrInput)(nil)).Elem(), QueueingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingConfigInput)(nil)).Elem(), SchedulingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingConfigPtrInput)(nil)).Elem(), SchedulingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountInput)(nil)).Elem(), ServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountPtrInput)(nil)).Elem(), ServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedInstanceConfigInput)(nil)).Elem(), ShieldedInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedInstanceConfigPtrInput)(nil)).Elem(), ShieldedInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpotInput)(nil)).Elem(), SpotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpotPtrInput)(nil)).Elem(), SpotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TpuInput)(nil)).Elem(), TpuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TpuPtrInput)(nil)).Elem(), TpuArgs{})
	pulumi.RegisterOutputType(AcceleratorConfigOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigPtrOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigResponseOutput{})
	pulumi.RegisterOutputType(AcceptedDataResponseOutput{})
	pulumi.RegisterOutputType(AccessConfigResponseOutput{})
	pulumi.RegisterOutputType(ActiveDataResponseOutput{})
	pulumi.RegisterOutputType(AttachedDiskOutput{})
	pulumi.RegisterOutputType(AttachedDiskArrayOutput{})
	pulumi.RegisterOutputType(AttachedDiskResponseOutput{})
	pulumi.RegisterOutputType(AttachedDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(BestEffortOutput{})
	pulumi.RegisterOutputType(BestEffortPtrOutput{})
	pulumi.RegisterOutputType(BestEffortResponseOutput{})
	pulumi.RegisterOutputType(BootDiskConfigOutput{})
	pulumi.RegisterOutputType(BootDiskConfigPtrOutput{})
	pulumi.RegisterOutputType(BootDiskConfigResponseOutput{})
	pulumi.RegisterOutputType(CreatingDataResponseOutput{})
	pulumi.RegisterOutputType(CustomerEncryptionKeyOutput{})
	pulumi.RegisterOutputType(CustomerEncryptionKeyPtrOutput{})
	pulumi.RegisterOutputType(CustomerEncryptionKeyResponseOutput{})
	pulumi.RegisterOutputType(DeletingDataResponseOutput{})
	pulumi.RegisterOutputType(FailedDataResponseOutput{})
	pulumi.RegisterOutputType(GuaranteedOutput{})
	pulumi.RegisterOutputType(GuaranteedPtrOutput{})
	pulumi.RegisterOutputType(GuaranteedResponseOutput{})
	pulumi.RegisterOutputType(IntervalOutput{})
	pulumi.RegisterOutputType(IntervalPtrOutput{})
	pulumi.RegisterOutputType(IntervalResponseOutput{})
	pulumi.RegisterOutputType(MultiNodeParamsOutput{})
	pulumi.RegisterOutputType(MultiNodeParamsPtrOutput{})
	pulumi.RegisterOutputType(MultiNodeParamsResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigOutput{})
	pulumi.RegisterOutputType(NetworkConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(NetworkEndpointResponseOutput{})
	pulumi.RegisterOutputType(NetworkEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(NodeTypeOutput{})
	pulumi.RegisterOutputType(NodeResponseOutput{})
	pulumi.RegisterOutputType(NodeSpecOutput{})
	pulumi.RegisterOutputType(NodeSpecArrayOutput{})
	pulumi.RegisterOutputType(NodeSpecResponseOutput{})
	pulumi.RegisterOutputType(NodeSpecResponseArrayOutput{})
	pulumi.RegisterOutputType(ProvisioningDataResponseOutput{})
	pulumi.RegisterOutputType(QueuedResourceStateResponseOutput{})
	pulumi.RegisterOutputType(QueueingPolicyOutput{})
	pulumi.RegisterOutputType(QueueingPolicyPtrOutput{})
	pulumi.RegisterOutputType(QueueingPolicyResponseOutput{})
	pulumi.RegisterOutputType(SchedulingConfigOutput{})
	pulumi.RegisterOutputType(SchedulingConfigPtrOutput{})
	pulumi.RegisterOutputType(SchedulingConfigResponseOutput{})
	pulumi.RegisterOutputType(ServiceAccountOutput{})
	pulumi.RegisterOutputType(ServiceAccountPtrOutput{})
	pulumi.RegisterOutputType(ServiceAccountResponseOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigResponseOutput{})
	pulumi.RegisterOutputType(SpotOutput{})
	pulumi.RegisterOutputType(SpotPtrOutput{})
	pulumi.RegisterOutputType(SpotResponseOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(SuspendedDataResponseOutput{})
	pulumi.RegisterOutputType(SuspendingDataResponseOutput{})
	pulumi.RegisterOutputType(SymptomResponseOutput{})
	pulumi.RegisterOutputType(SymptomResponseArrayOutput{})
	pulumi.RegisterOutputType(TpuOutput{})
	pulumi.RegisterOutputType(TpuPtrOutput{})
	pulumi.RegisterOutputType(TpuResponseOutput{})
}
