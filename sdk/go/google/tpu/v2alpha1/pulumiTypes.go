// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An access config attached to the TPU worker.
type AccessConfigResponse struct {
	// An external IP address associated with the TPU worker.
	ExternalIp string `pulumi:"externalIp"`
}

// AccessConfigResponseInput is an input type that accepts AccessConfigResponseArgs and AccessConfigResponseOutput values.
// You can construct a concrete instance of `AccessConfigResponseInput` via:
//
//          AccessConfigResponseArgs{...}
type AccessConfigResponseInput interface {
	pulumi.Input

	ToAccessConfigResponseOutput() AccessConfigResponseOutput
	ToAccessConfigResponseOutputWithContext(context.Context) AccessConfigResponseOutput
}

// An access config attached to the TPU worker.
type AccessConfigResponseArgs struct {
	// An external IP address associated with the TPU worker.
	ExternalIp pulumi.StringInput `pulumi:"externalIp"`
}

func (AccessConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessConfigResponse)(nil)).Elem()
}

func (i AccessConfigResponseArgs) ToAccessConfigResponseOutput() AccessConfigResponseOutput {
	return i.ToAccessConfigResponseOutputWithContext(context.Background())
}

func (i AccessConfigResponseArgs) ToAccessConfigResponseOutputWithContext(ctx context.Context) AccessConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessConfigResponseOutput)
}

// An access config attached to the TPU worker.
type AccessConfigResponseOutput struct{ *pulumi.OutputState }

func (AccessConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessConfigResponse)(nil)).Elem()
}

func (o AccessConfigResponseOutput) ToAccessConfigResponseOutput() AccessConfigResponseOutput {
	return o
}

func (o AccessConfigResponseOutput) ToAccessConfigResponseOutputWithContext(ctx context.Context) AccessConfigResponseOutput {
	return o
}

// An external IP address associated with the TPU worker.
func (o AccessConfigResponseOutput) ExternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v AccessConfigResponse) string { return v.ExternalIp }).(pulumi.StringOutput)
}

// A node-attached disk resource. Next ID: 8;
type AttachedDisk struct {
	// The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.
	Mode *AttachedDiskMode `pulumi:"mode"`
	// Specifies the full path to an existing disk. For example: "projects/my-project/zones/us-central1-c/disks/my-disk".
	SourceDisk *string `pulumi:"sourceDisk"`
}

// AttachedDiskInput is an input type that accepts AttachedDiskArgs and AttachedDiskOutput values.
// You can construct a concrete instance of `AttachedDiskInput` via:
//
//          AttachedDiskArgs{...}
type AttachedDiskInput interface {
	pulumi.Input

	ToAttachedDiskOutput() AttachedDiskOutput
	ToAttachedDiskOutputWithContext(context.Context) AttachedDiskOutput
}

// A node-attached disk resource. Next ID: 8;
type AttachedDiskArgs struct {
	// The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.
	Mode AttachedDiskModePtrInput `pulumi:"mode"`
	// Specifies the full path to an existing disk. For example: "projects/my-project/zones/us-central1-c/disks/my-disk".
	SourceDisk pulumi.StringPtrInput `pulumi:"sourceDisk"`
}

func (AttachedDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDisk)(nil)).Elem()
}

func (i AttachedDiskArgs) ToAttachedDiskOutput() AttachedDiskOutput {
	return i.ToAttachedDiskOutputWithContext(context.Background())
}

func (i AttachedDiskArgs) ToAttachedDiskOutputWithContext(ctx context.Context) AttachedDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedDiskOutput)
}

// AttachedDiskArrayInput is an input type that accepts AttachedDiskArray and AttachedDiskArrayOutput values.
// You can construct a concrete instance of `AttachedDiskArrayInput` via:
//
//          AttachedDiskArray{ AttachedDiskArgs{...} }
type AttachedDiskArrayInput interface {
	pulumi.Input

	ToAttachedDiskArrayOutput() AttachedDiskArrayOutput
	ToAttachedDiskArrayOutputWithContext(context.Context) AttachedDiskArrayOutput
}

type AttachedDiskArray []AttachedDiskInput

func (AttachedDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttachedDisk)(nil)).Elem()
}

func (i AttachedDiskArray) ToAttachedDiskArrayOutput() AttachedDiskArrayOutput {
	return i.ToAttachedDiskArrayOutputWithContext(context.Background())
}

func (i AttachedDiskArray) ToAttachedDiskArrayOutputWithContext(ctx context.Context) AttachedDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedDiskArrayOutput)
}

// A node-attached disk resource. Next ID: 8;
type AttachedDiskOutput struct{ *pulumi.OutputState }

func (AttachedDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDisk)(nil)).Elem()
}

func (o AttachedDiskOutput) ToAttachedDiskOutput() AttachedDiskOutput {
	return o
}

func (o AttachedDiskOutput) ToAttachedDiskOutputWithContext(ctx context.Context) AttachedDiskOutput {
	return o
}

// The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.
func (o AttachedDiskOutput) Mode() AttachedDiskModePtrOutput {
	return o.ApplyT(func(v AttachedDisk) *AttachedDiskMode { return v.Mode }).(AttachedDiskModePtrOutput)
}

// Specifies the full path to an existing disk. For example: "projects/my-project/zones/us-central1-c/disks/my-disk".
func (o AttachedDiskOutput) SourceDisk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AttachedDisk) *string { return v.SourceDisk }).(pulumi.StringPtrOutput)
}

type AttachedDiskArrayOutput struct{ *pulumi.OutputState }

func (AttachedDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttachedDisk)(nil)).Elem()
}

func (o AttachedDiskArrayOutput) ToAttachedDiskArrayOutput() AttachedDiskArrayOutput {
	return o
}

func (o AttachedDiskArrayOutput) ToAttachedDiskArrayOutputWithContext(ctx context.Context) AttachedDiskArrayOutput {
	return o
}

func (o AttachedDiskArrayOutput) Index(i pulumi.IntInput) AttachedDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AttachedDisk {
		return vs[0].([]AttachedDisk)[vs[1].(int)]
	}).(AttachedDiskOutput)
}

// A node-attached disk resource. Next ID: 8;
type AttachedDiskResponse struct {
	// The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.
	Mode string `pulumi:"mode"`
	// Specifies the full path to an existing disk. For example: "projects/my-project/zones/us-central1-c/disks/my-disk".
	SourceDisk string `pulumi:"sourceDisk"`
}

// AttachedDiskResponseInput is an input type that accepts AttachedDiskResponseArgs and AttachedDiskResponseOutput values.
// You can construct a concrete instance of `AttachedDiskResponseInput` via:
//
//          AttachedDiskResponseArgs{...}
type AttachedDiskResponseInput interface {
	pulumi.Input

	ToAttachedDiskResponseOutput() AttachedDiskResponseOutput
	ToAttachedDiskResponseOutputWithContext(context.Context) AttachedDiskResponseOutput
}

// A node-attached disk resource. Next ID: 8;
type AttachedDiskResponseArgs struct {
	// The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.
	Mode pulumi.StringInput `pulumi:"mode"`
	// Specifies the full path to an existing disk. For example: "projects/my-project/zones/us-central1-c/disks/my-disk".
	SourceDisk pulumi.StringInput `pulumi:"sourceDisk"`
}

func (AttachedDiskResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDiskResponse)(nil)).Elem()
}

func (i AttachedDiskResponseArgs) ToAttachedDiskResponseOutput() AttachedDiskResponseOutput {
	return i.ToAttachedDiskResponseOutputWithContext(context.Background())
}

func (i AttachedDiskResponseArgs) ToAttachedDiskResponseOutputWithContext(ctx context.Context) AttachedDiskResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedDiskResponseOutput)
}

// AttachedDiskResponseArrayInput is an input type that accepts AttachedDiskResponseArray and AttachedDiskResponseArrayOutput values.
// You can construct a concrete instance of `AttachedDiskResponseArrayInput` via:
//
//          AttachedDiskResponseArray{ AttachedDiskResponseArgs{...} }
type AttachedDiskResponseArrayInput interface {
	pulumi.Input

	ToAttachedDiskResponseArrayOutput() AttachedDiskResponseArrayOutput
	ToAttachedDiskResponseArrayOutputWithContext(context.Context) AttachedDiskResponseArrayOutput
}

type AttachedDiskResponseArray []AttachedDiskResponseInput

func (AttachedDiskResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttachedDiskResponse)(nil)).Elem()
}

func (i AttachedDiskResponseArray) ToAttachedDiskResponseArrayOutput() AttachedDiskResponseArrayOutput {
	return i.ToAttachedDiskResponseArrayOutputWithContext(context.Background())
}

func (i AttachedDiskResponseArray) ToAttachedDiskResponseArrayOutputWithContext(ctx context.Context) AttachedDiskResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedDiskResponseArrayOutput)
}

// A node-attached disk resource. Next ID: 8;
type AttachedDiskResponseOutput struct{ *pulumi.OutputState }

func (AttachedDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedDiskResponse)(nil)).Elem()
}

func (o AttachedDiskResponseOutput) ToAttachedDiskResponseOutput() AttachedDiskResponseOutput {
	return o
}

func (o AttachedDiskResponseOutput) ToAttachedDiskResponseOutputWithContext(ctx context.Context) AttachedDiskResponseOutput {
	return o
}

// The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.
func (o AttachedDiskResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// Specifies the full path to an existing disk. For example: "projects/my-project/zones/us-central1-c/disks/my-disk".
func (o AttachedDiskResponseOutput) SourceDisk() pulumi.StringOutput {
	return o.ApplyT(func(v AttachedDiskResponse) string { return v.SourceDisk }).(pulumi.StringOutput)
}

type AttachedDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (AttachedDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AttachedDiskResponse)(nil)).Elem()
}

func (o AttachedDiskResponseArrayOutput) ToAttachedDiskResponseArrayOutput() AttachedDiskResponseArrayOutput {
	return o
}

func (o AttachedDiskResponseArrayOutput) ToAttachedDiskResponseArrayOutputWithContext(ctx context.Context) AttachedDiskResponseArrayOutput {
	return o
}

func (o AttachedDiskResponseArrayOutput) Index(i pulumi.IntInput) AttachedDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AttachedDiskResponse {
		return vs[0].([]AttachedDiskResponse)[vs[1].(int)]
	}).(AttachedDiskResponseOutput)
}

// Network related configurations.
type NetworkConfig struct {
	// Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.
	CanIpForward *bool `pulumi:"canIpForward"`
	// Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.
	EnableExternalIps *bool `pulumi:"enableExternalIps"`
	// The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, "default" will be used.
	Network *string `pulumi:"network"`
	// The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, "default" will be used.
	Subnetwork *string `pulumi:"subnetwork"`
}

// NetworkConfigInput is an input type that accepts NetworkConfigArgs and NetworkConfigOutput values.
// You can construct a concrete instance of `NetworkConfigInput` via:
//
//          NetworkConfigArgs{...}
type NetworkConfigInput interface {
	pulumi.Input

	ToNetworkConfigOutput() NetworkConfigOutput
	ToNetworkConfigOutputWithContext(context.Context) NetworkConfigOutput
}

// Network related configurations.
type NetworkConfigArgs struct {
	// Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.
	CanIpForward pulumi.BoolPtrInput `pulumi:"canIpForward"`
	// Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.
	EnableExternalIps pulumi.BoolPtrInput `pulumi:"enableExternalIps"`
	// The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, "default" will be used.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, "default" will be used.
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
}

func (NetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArgs) ToNetworkConfigOutput() NetworkConfigOutput {
	return i.ToNetworkConfigOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput)
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput).ToNetworkConfigPtrOutputWithContext(ctx)
}

// NetworkConfigPtrInput is an input type that accepts NetworkConfigArgs, NetworkConfigPtr and NetworkConfigPtrOutput values.
// You can construct a concrete instance of `NetworkConfigPtrInput` via:
//
//          NetworkConfigArgs{...}
//
//  or:
//
//          nil
type NetworkConfigPtrInput interface {
	pulumi.Input

	ToNetworkConfigPtrOutput() NetworkConfigPtrOutput
	ToNetworkConfigPtrOutputWithContext(context.Context) NetworkConfigPtrOutput
}

type networkConfigPtrType NetworkConfigArgs

func NetworkConfigPtr(v *NetworkConfigArgs) NetworkConfigPtrInput {
	return (*networkConfigPtrType)(v)
}

func (*networkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigPtrOutput)
}

// Network related configurations.
type NetworkConfigOutput struct{ *pulumi.OutputState }

func (NetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigOutput) ToNetworkConfigOutput() NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkConfig) *NetworkConfig {
		return &v
	}).(NetworkConfigPtrOutput)
}

// Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.
func (o NetworkConfigOutput) CanIpForward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *bool { return v.CanIpForward }).(pulumi.BoolPtrOutput)
}

// Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.
func (o NetworkConfigOutput) EnableExternalIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *bool { return v.EnableExternalIps }).(pulumi.BoolPtrOutput)
}

// The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, "default" will be used.
func (o NetworkConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, "default" will be used.
func (o NetworkConfigOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

type NetworkConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) Elem() NetworkConfigOutput {
	return o.ApplyT(func(v *NetworkConfig) NetworkConfig {
		if v != nil {
			return *v
		}
		var ret NetworkConfig
		return ret
	}).(NetworkConfigOutput)
}

// Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.
func (o NetworkConfigPtrOutput) CanIpForward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CanIpForward
	}).(pulumi.BoolPtrOutput)
}

// Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.
func (o NetworkConfigPtrOutput) EnableExternalIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableExternalIps
	}).(pulumi.BoolPtrOutput)
}

// The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, "default" will be used.
func (o NetworkConfigPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, "default" will be used.
func (o NetworkConfigPtrOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.Subnetwork
	}).(pulumi.StringPtrOutput)
}

// Network related configurations.
type NetworkConfigResponse struct {
	// Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.
	CanIpForward bool `pulumi:"canIpForward"`
	// Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.
	EnableExternalIps bool `pulumi:"enableExternalIps"`
	// The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, "default" will be used.
	Network string `pulumi:"network"`
	// The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, "default" will be used.
	Subnetwork string `pulumi:"subnetwork"`
}

// NetworkConfigResponseInput is an input type that accepts NetworkConfigResponseArgs and NetworkConfigResponseOutput values.
// You can construct a concrete instance of `NetworkConfigResponseInput` via:
//
//          NetworkConfigResponseArgs{...}
type NetworkConfigResponseInput interface {
	pulumi.Input

	ToNetworkConfigResponseOutput() NetworkConfigResponseOutput
	ToNetworkConfigResponseOutputWithContext(context.Context) NetworkConfigResponseOutput
}

// Network related configurations.
type NetworkConfigResponseArgs struct {
	// Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.
	CanIpForward pulumi.BoolInput `pulumi:"canIpForward"`
	// Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.
	EnableExternalIps pulumi.BoolInput `pulumi:"enableExternalIps"`
	// The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, "default" will be used.
	Network pulumi.StringInput `pulumi:"network"`
	// The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, "default" will be used.
	Subnetwork pulumi.StringInput `pulumi:"subnetwork"`
}

func (NetworkConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigResponse)(nil)).Elem()
}

func (i NetworkConfigResponseArgs) ToNetworkConfigResponseOutput() NetworkConfigResponseOutput {
	return i.ToNetworkConfigResponseOutputWithContext(context.Background())
}

func (i NetworkConfigResponseArgs) ToNetworkConfigResponseOutputWithContext(ctx context.Context) NetworkConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigResponseOutput)
}

func (i NetworkConfigResponseArgs) ToNetworkConfigResponsePtrOutput() NetworkConfigResponsePtrOutput {
	return i.ToNetworkConfigResponsePtrOutputWithContext(context.Background())
}

func (i NetworkConfigResponseArgs) ToNetworkConfigResponsePtrOutputWithContext(ctx context.Context) NetworkConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigResponseOutput).ToNetworkConfigResponsePtrOutputWithContext(ctx)
}

// NetworkConfigResponsePtrInput is an input type that accepts NetworkConfigResponseArgs, NetworkConfigResponsePtr and NetworkConfigResponsePtrOutput values.
// You can construct a concrete instance of `NetworkConfigResponsePtrInput` via:
//
//          NetworkConfigResponseArgs{...}
//
//  or:
//
//          nil
type NetworkConfigResponsePtrInput interface {
	pulumi.Input

	ToNetworkConfigResponsePtrOutput() NetworkConfigResponsePtrOutput
	ToNetworkConfigResponsePtrOutputWithContext(context.Context) NetworkConfigResponsePtrOutput
}

type networkConfigResponsePtrType NetworkConfigResponseArgs

func NetworkConfigResponsePtr(v *NetworkConfigResponseArgs) NetworkConfigResponsePtrInput {
	return (*networkConfigResponsePtrType)(v)
}

func (*networkConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfigResponse)(nil)).Elem()
}

func (i *networkConfigResponsePtrType) ToNetworkConfigResponsePtrOutput() NetworkConfigResponsePtrOutput {
	return i.ToNetworkConfigResponsePtrOutputWithContext(context.Background())
}

func (i *networkConfigResponsePtrType) ToNetworkConfigResponsePtrOutputWithContext(ctx context.Context) NetworkConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigResponsePtrOutput)
}

// Network related configurations.
type NetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutput() NetworkConfigResponseOutput {
	return o
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutputWithContext(ctx context.Context) NetworkConfigResponseOutput {
	return o
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponsePtrOutput() NetworkConfigResponsePtrOutput {
	return o.ToNetworkConfigResponsePtrOutputWithContext(context.Background())
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponsePtrOutputWithContext(ctx context.Context) NetworkConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkConfigResponse) *NetworkConfigResponse {
		return &v
	}).(NetworkConfigResponsePtrOutput)
}

// Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.
func (o NetworkConfigResponseOutput) CanIpForward() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkConfigResponse) bool { return v.CanIpForward }).(pulumi.BoolOutput)
}

// Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.
func (o NetworkConfigResponseOutput) EnableExternalIps() pulumi.BoolOutput {
	return o.ApplyT(func(v NetworkConfigResponse) bool { return v.EnableExternalIps }).(pulumi.BoolOutput)
}

// The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, "default" will be used.
func (o NetworkConfigResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Network }).(pulumi.StringOutput)
}

// The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, "default" will be used.
func (o NetworkConfigResponseOutput) Subnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Subnetwork }).(pulumi.StringOutput)
}

type NetworkConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponsePtrOutput) ToNetworkConfigResponsePtrOutput() NetworkConfigResponsePtrOutput {
	return o
}

func (o NetworkConfigResponsePtrOutput) ToNetworkConfigResponsePtrOutputWithContext(ctx context.Context) NetworkConfigResponsePtrOutput {
	return o
}

func (o NetworkConfigResponsePtrOutput) Elem() NetworkConfigResponseOutput {
	return o.ApplyT(func(v *NetworkConfigResponse) NetworkConfigResponse {
		if v != nil {
			return *v
		}
		var ret NetworkConfigResponse
		return ret
	}).(NetworkConfigResponseOutput)
}

// Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.
func (o NetworkConfigResponsePtrOutput) CanIpForward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CanIpForward
	}).(pulumi.BoolPtrOutput)
}

// Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.
func (o NetworkConfigResponsePtrOutput) EnableExternalIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableExternalIps
	}).(pulumi.BoolPtrOutput)
}

// The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, "default" will be used.
func (o NetworkConfigResponsePtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Network
	}).(pulumi.StringPtrOutput)
}

// The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, "default" will be used.
func (o NetworkConfigResponsePtrOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Subnetwork
	}).(pulumi.StringPtrOutput)
}

// A network endpoint over which a TPU worker can be reached.
type NetworkEndpointResponse struct {
	// The access config for the TPU worker.
	AccessConfig AccessConfigResponse `pulumi:"accessConfig"`
	// The internal IP address of this network endpoint.
	IpAddress string `pulumi:"ipAddress"`
	// The port of this network endpoint.
	Port int `pulumi:"port"`
}

// NetworkEndpointResponseInput is an input type that accepts NetworkEndpointResponseArgs and NetworkEndpointResponseOutput values.
// You can construct a concrete instance of `NetworkEndpointResponseInput` via:
//
//          NetworkEndpointResponseArgs{...}
type NetworkEndpointResponseInput interface {
	pulumi.Input

	ToNetworkEndpointResponseOutput() NetworkEndpointResponseOutput
	ToNetworkEndpointResponseOutputWithContext(context.Context) NetworkEndpointResponseOutput
}

// A network endpoint over which a TPU worker can be reached.
type NetworkEndpointResponseArgs struct {
	// The access config for the TPU worker.
	AccessConfig AccessConfigResponseInput `pulumi:"accessConfig"`
	// The internal IP address of this network endpoint.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The port of this network endpoint.
	Port pulumi.IntInput `pulumi:"port"`
}

func (NetworkEndpointResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpointResponse)(nil)).Elem()
}

func (i NetworkEndpointResponseArgs) ToNetworkEndpointResponseOutput() NetworkEndpointResponseOutput {
	return i.ToNetworkEndpointResponseOutputWithContext(context.Background())
}

func (i NetworkEndpointResponseArgs) ToNetworkEndpointResponseOutputWithContext(ctx context.Context) NetworkEndpointResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointResponseOutput)
}

// NetworkEndpointResponseArrayInput is an input type that accepts NetworkEndpointResponseArray and NetworkEndpointResponseArrayOutput values.
// You can construct a concrete instance of `NetworkEndpointResponseArrayInput` via:
//
//          NetworkEndpointResponseArray{ NetworkEndpointResponseArgs{...} }
type NetworkEndpointResponseArrayInput interface {
	pulumi.Input

	ToNetworkEndpointResponseArrayOutput() NetworkEndpointResponseArrayOutput
	ToNetworkEndpointResponseArrayOutputWithContext(context.Context) NetworkEndpointResponseArrayOutput
}

type NetworkEndpointResponseArray []NetworkEndpointResponseInput

func (NetworkEndpointResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkEndpointResponse)(nil)).Elem()
}

func (i NetworkEndpointResponseArray) ToNetworkEndpointResponseArrayOutput() NetworkEndpointResponseArrayOutput {
	return i.ToNetworkEndpointResponseArrayOutputWithContext(context.Background())
}

func (i NetworkEndpointResponseArray) ToNetworkEndpointResponseArrayOutputWithContext(ctx context.Context) NetworkEndpointResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkEndpointResponseArrayOutput)
}

// A network endpoint over which a TPU worker can be reached.
type NetworkEndpointResponseOutput struct{ *pulumi.OutputState }

func (NetworkEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkEndpointResponse)(nil)).Elem()
}

func (o NetworkEndpointResponseOutput) ToNetworkEndpointResponseOutput() NetworkEndpointResponseOutput {
	return o
}

func (o NetworkEndpointResponseOutput) ToNetworkEndpointResponseOutputWithContext(ctx context.Context) NetworkEndpointResponseOutput {
	return o
}

// The access config for the TPU worker.
func (o NetworkEndpointResponseOutput) AccessConfig() AccessConfigResponseOutput {
	return o.ApplyT(func(v NetworkEndpointResponse) AccessConfigResponse { return v.AccessConfig }).(AccessConfigResponseOutput)
}

// The internal IP address of this network endpoint.
func (o NetworkEndpointResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkEndpointResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The port of this network endpoint.
func (o NetworkEndpointResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v NetworkEndpointResponse) int { return v.Port }).(pulumi.IntOutput)
}

type NetworkEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkEndpointResponse)(nil)).Elem()
}

func (o NetworkEndpointResponseArrayOutput) ToNetworkEndpointResponseArrayOutput() NetworkEndpointResponseArrayOutput {
	return o
}

func (o NetworkEndpointResponseArrayOutput) ToNetworkEndpointResponseArrayOutputWithContext(ctx context.Context) NetworkEndpointResponseArrayOutput {
	return o
}

func (o NetworkEndpointResponseArrayOutput) Index(i pulumi.IntInput) NetworkEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkEndpointResponse {
		return vs[0].([]NetworkEndpointResponse)[vs[1].(int)]
	}).(NetworkEndpointResponseOutput)
}

// Sets the scheduling options for this node.
type SchedulingConfig struct {
	// Defines whether the node is preemptible.
	Preemptible *bool `pulumi:"preemptible"`
	// Whether the node is created under a reservation.
	Reserved *bool `pulumi:"reserved"`
}

// SchedulingConfigInput is an input type that accepts SchedulingConfigArgs and SchedulingConfigOutput values.
// You can construct a concrete instance of `SchedulingConfigInput` via:
//
//          SchedulingConfigArgs{...}
type SchedulingConfigInput interface {
	pulumi.Input

	ToSchedulingConfigOutput() SchedulingConfigOutput
	ToSchedulingConfigOutputWithContext(context.Context) SchedulingConfigOutput
}

// Sets the scheduling options for this node.
type SchedulingConfigArgs struct {
	// Defines whether the node is preemptible.
	Preemptible pulumi.BoolPtrInput `pulumi:"preemptible"`
	// Whether the node is created under a reservation.
	Reserved pulumi.BoolPtrInput `pulumi:"reserved"`
}

func (SchedulingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingConfig)(nil)).Elem()
}

func (i SchedulingConfigArgs) ToSchedulingConfigOutput() SchedulingConfigOutput {
	return i.ToSchedulingConfigOutputWithContext(context.Background())
}

func (i SchedulingConfigArgs) ToSchedulingConfigOutputWithContext(ctx context.Context) SchedulingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingConfigOutput)
}

func (i SchedulingConfigArgs) ToSchedulingConfigPtrOutput() SchedulingConfigPtrOutput {
	return i.ToSchedulingConfigPtrOutputWithContext(context.Background())
}

func (i SchedulingConfigArgs) ToSchedulingConfigPtrOutputWithContext(ctx context.Context) SchedulingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingConfigOutput).ToSchedulingConfigPtrOutputWithContext(ctx)
}

// SchedulingConfigPtrInput is an input type that accepts SchedulingConfigArgs, SchedulingConfigPtr and SchedulingConfigPtrOutput values.
// You can construct a concrete instance of `SchedulingConfigPtrInput` via:
//
//          SchedulingConfigArgs{...}
//
//  or:
//
//          nil
type SchedulingConfigPtrInput interface {
	pulumi.Input

	ToSchedulingConfigPtrOutput() SchedulingConfigPtrOutput
	ToSchedulingConfigPtrOutputWithContext(context.Context) SchedulingConfigPtrOutput
}

type schedulingConfigPtrType SchedulingConfigArgs

func SchedulingConfigPtr(v *SchedulingConfigArgs) SchedulingConfigPtrInput {
	return (*schedulingConfigPtrType)(v)
}

func (*schedulingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingConfig)(nil)).Elem()
}

func (i *schedulingConfigPtrType) ToSchedulingConfigPtrOutput() SchedulingConfigPtrOutput {
	return i.ToSchedulingConfigPtrOutputWithContext(context.Background())
}

func (i *schedulingConfigPtrType) ToSchedulingConfigPtrOutputWithContext(ctx context.Context) SchedulingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingConfigPtrOutput)
}

// Sets the scheduling options for this node.
type SchedulingConfigOutput struct{ *pulumi.OutputState }

func (SchedulingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingConfig)(nil)).Elem()
}

func (o SchedulingConfigOutput) ToSchedulingConfigOutput() SchedulingConfigOutput {
	return o
}

func (o SchedulingConfigOutput) ToSchedulingConfigOutputWithContext(ctx context.Context) SchedulingConfigOutput {
	return o
}

func (o SchedulingConfigOutput) ToSchedulingConfigPtrOutput() SchedulingConfigPtrOutput {
	return o.ToSchedulingConfigPtrOutputWithContext(context.Background())
}

func (o SchedulingConfigOutput) ToSchedulingConfigPtrOutputWithContext(ctx context.Context) SchedulingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchedulingConfig) *SchedulingConfig {
		return &v
	}).(SchedulingConfigPtrOutput)
}

// Defines whether the node is preemptible.
func (o SchedulingConfigOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchedulingConfig) *bool { return v.Preemptible }).(pulumi.BoolPtrOutput)
}

// Whether the node is created under a reservation.
func (o SchedulingConfigOutput) Reserved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchedulingConfig) *bool { return v.Reserved }).(pulumi.BoolPtrOutput)
}

type SchedulingConfigPtrOutput struct{ *pulumi.OutputState }

func (SchedulingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingConfig)(nil)).Elem()
}

func (o SchedulingConfigPtrOutput) ToSchedulingConfigPtrOutput() SchedulingConfigPtrOutput {
	return o
}

func (o SchedulingConfigPtrOutput) ToSchedulingConfigPtrOutputWithContext(ctx context.Context) SchedulingConfigPtrOutput {
	return o
}

func (o SchedulingConfigPtrOutput) Elem() SchedulingConfigOutput {
	return o.ApplyT(func(v *SchedulingConfig) SchedulingConfig {
		if v != nil {
			return *v
		}
		var ret SchedulingConfig
		return ret
	}).(SchedulingConfigOutput)
}

// Defines whether the node is preemptible.
func (o SchedulingConfigPtrOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchedulingConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Preemptible
	}).(pulumi.BoolPtrOutput)
}

// Whether the node is created under a reservation.
func (o SchedulingConfigPtrOutput) Reserved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchedulingConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Reserved
	}).(pulumi.BoolPtrOutput)
}

// Sets the scheduling options for this node.
type SchedulingConfigResponse struct {
	// Defines whether the node is preemptible.
	Preemptible bool `pulumi:"preemptible"`
	// Whether the node is created under a reservation.
	Reserved bool `pulumi:"reserved"`
}

// SchedulingConfigResponseInput is an input type that accepts SchedulingConfigResponseArgs and SchedulingConfigResponseOutput values.
// You can construct a concrete instance of `SchedulingConfigResponseInput` via:
//
//          SchedulingConfigResponseArgs{...}
type SchedulingConfigResponseInput interface {
	pulumi.Input

	ToSchedulingConfigResponseOutput() SchedulingConfigResponseOutput
	ToSchedulingConfigResponseOutputWithContext(context.Context) SchedulingConfigResponseOutput
}

// Sets the scheduling options for this node.
type SchedulingConfigResponseArgs struct {
	// Defines whether the node is preemptible.
	Preemptible pulumi.BoolInput `pulumi:"preemptible"`
	// Whether the node is created under a reservation.
	Reserved pulumi.BoolInput `pulumi:"reserved"`
}

func (SchedulingConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingConfigResponse)(nil)).Elem()
}

func (i SchedulingConfigResponseArgs) ToSchedulingConfigResponseOutput() SchedulingConfigResponseOutput {
	return i.ToSchedulingConfigResponseOutputWithContext(context.Background())
}

func (i SchedulingConfigResponseArgs) ToSchedulingConfigResponseOutputWithContext(ctx context.Context) SchedulingConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingConfigResponseOutput)
}

func (i SchedulingConfigResponseArgs) ToSchedulingConfigResponsePtrOutput() SchedulingConfigResponsePtrOutput {
	return i.ToSchedulingConfigResponsePtrOutputWithContext(context.Background())
}

func (i SchedulingConfigResponseArgs) ToSchedulingConfigResponsePtrOutputWithContext(ctx context.Context) SchedulingConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingConfigResponseOutput).ToSchedulingConfigResponsePtrOutputWithContext(ctx)
}

// SchedulingConfigResponsePtrInput is an input type that accepts SchedulingConfigResponseArgs, SchedulingConfigResponsePtr and SchedulingConfigResponsePtrOutput values.
// You can construct a concrete instance of `SchedulingConfigResponsePtrInput` via:
//
//          SchedulingConfigResponseArgs{...}
//
//  or:
//
//          nil
type SchedulingConfigResponsePtrInput interface {
	pulumi.Input

	ToSchedulingConfigResponsePtrOutput() SchedulingConfigResponsePtrOutput
	ToSchedulingConfigResponsePtrOutputWithContext(context.Context) SchedulingConfigResponsePtrOutput
}

type schedulingConfigResponsePtrType SchedulingConfigResponseArgs

func SchedulingConfigResponsePtr(v *SchedulingConfigResponseArgs) SchedulingConfigResponsePtrInput {
	return (*schedulingConfigResponsePtrType)(v)
}

func (*schedulingConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingConfigResponse)(nil)).Elem()
}

func (i *schedulingConfigResponsePtrType) ToSchedulingConfigResponsePtrOutput() SchedulingConfigResponsePtrOutput {
	return i.ToSchedulingConfigResponsePtrOutputWithContext(context.Background())
}

func (i *schedulingConfigResponsePtrType) ToSchedulingConfigResponsePtrOutputWithContext(ctx context.Context) SchedulingConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulingConfigResponsePtrOutput)
}

// Sets the scheduling options for this node.
type SchedulingConfigResponseOutput struct{ *pulumi.OutputState }

func (SchedulingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulingConfigResponse)(nil)).Elem()
}

func (o SchedulingConfigResponseOutput) ToSchedulingConfigResponseOutput() SchedulingConfigResponseOutput {
	return o
}

func (o SchedulingConfigResponseOutput) ToSchedulingConfigResponseOutputWithContext(ctx context.Context) SchedulingConfigResponseOutput {
	return o
}

func (o SchedulingConfigResponseOutput) ToSchedulingConfigResponsePtrOutput() SchedulingConfigResponsePtrOutput {
	return o.ToSchedulingConfigResponsePtrOutputWithContext(context.Background())
}

func (o SchedulingConfigResponseOutput) ToSchedulingConfigResponsePtrOutputWithContext(ctx context.Context) SchedulingConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchedulingConfigResponse) *SchedulingConfigResponse {
		return &v
	}).(SchedulingConfigResponsePtrOutput)
}

// Defines whether the node is preemptible.
func (o SchedulingConfigResponseOutput) Preemptible() pulumi.BoolOutput {
	return o.ApplyT(func(v SchedulingConfigResponse) bool { return v.Preemptible }).(pulumi.BoolOutput)
}

// Whether the node is created under a reservation.
func (o SchedulingConfigResponseOutput) Reserved() pulumi.BoolOutput {
	return o.ApplyT(func(v SchedulingConfigResponse) bool { return v.Reserved }).(pulumi.BoolOutput)
}

type SchedulingConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (SchedulingConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulingConfigResponse)(nil)).Elem()
}

func (o SchedulingConfigResponsePtrOutput) ToSchedulingConfigResponsePtrOutput() SchedulingConfigResponsePtrOutput {
	return o
}

func (o SchedulingConfigResponsePtrOutput) ToSchedulingConfigResponsePtrOutputWithContext(ctx context.Context) SchedulingConfigResponsePtrOutput {
	return o
}

func (o SchedulingConfigResponsePtrOutput) Elem() SchedulingConfigResponseOutput {
	return o.ApplyT(func(v *SchedulingConfigResponse) SchedulingConfigResponse {
		if v != nil {
			return *v
		}
		var ret SchedulingConfigResponse
		return ret
	}).(SchedulingConfigResponseOutput)
}

// Defines whether the node is preemptible.
func (o SchedulingConfigResponsePtrOutput) Preemptible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchedulingConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Preemptible
	}).(pulumi.BoolPtrOutput)
}

// Whether the node is created under a reservation.
func (o SchedulingConfigResponsePtrOutput) Reserved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SchedulingConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Reserved
	}).(pulumi.BoolPtrOutput)
}

// A service account.
type ServiceAccount struct {
	// Email address of the service account. If empty, default Compute service account will be used.
	Email *string `pulumi:"email"`
	// The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.
	Scope []string `pulumi:"scope"`
}

// ServiceAccountInput is an input type that accepts ServiceAccountArgs and ServiceAccountOutput values.
// You can construct a concrete instance of `ServiceAccountInput` via:
//
//          ServiceAccountArgs{...}
type ServiceAccountInput interface {
	pulumi.Input

	ToServiceAccountOutput() ServiceAccountOutput
	ToServiceAccountOutputWithContext(context.Context) ServiceAccountOutput
}

// A service account.
type ServiceAccountArgs struct {
	// Email address of the service account. If empty, default Compute service account will be used.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.
	Scope pulumi.StringArrayInput `pulumi:"scope"`
}

func (ServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccount)(nil)).Elem()
}

func (i ServiceAccountArgs) ToServiceAccountOutput() ServiceAccountOutput {
	return i.ToServiceAccountOutputWithContext(context.Background())
}

func (i ServiceAccountArgs) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountOutput)
}

func (i ServiceAccountArgs) ToServiceAccountPtrOutput() ServiceAccountPtrOutput {
	return i.ToServiceAccountPtrOutputWithContext(context.Background())
}

func (i ServiceAccountArgs) ToServiceAccountPtrOutputWithContext(ctx context.Context) ServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountOutput).ToServiceAccountPtrOutputWithContext(ctx)
}

// ServiceAccountPtrInput is an input type that accepts ServiceAccountArgs, ServiceAccountPtr and ServiceAccountPtrOutput values.
// You can construct a concrete instance of `ServiceAccountPtrInput` via:
//
//          ServiceAccountArgs{...}
//
//  or:
//
//          nil
type ServiceAccountPtrInput interface {
	pulumi.Input

	ToServiceAccountPtrOutput() ServiceAccountPtrOutput
	ToServiceAccountPtrOutputWithContext(context.Context) ServiceAccountPtrOutput
}

type serviceAccountPtrType ServiceAccountArgs

func ServiceAccountPtr(v *ServiceAccountArgs) ServiceAccountPtrInput {
	return (*serviceAccountPtrType)(v)
}

func (*serviceAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccount)(nil)).Elem()
}

func (i *serviceAccountPtrType) ToServiceAccountPtrOutput() ServiceAccountPtrOutput {
	return i.ToServiceAccountPtrOutputWithContext(context.Background())
}

func (i *serviceAccountPtrType) ToServiceAccountPtrOutputWithContext(ctx context.Context) ServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountPtrOutput)
}

// A service account.
type ServiceAccountOutput struct{ *pulumi.OutputState }

func (ServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountOutput) ToServiceAccountOutput() ServiceAccountOutput {
	return o
}

func (o ServiceAccountOutput) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return o
}

func (o ServiceAccountOutput) ToServiceAccountPtrOutput() ServiceAccountPtrOutput {
	return o.ToServiceAccountPtrOutputWithContext(context.Background())
}

func (o ServiceAccountOutput) ToServiceAccountPtrOutputWithContext(ctx context.Context) ServiceAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAccount) *ServiceAccount {
		return &v
	}).(ServiceAccountPtrOutput)
}

// Email address of the service account. If empty, default Compute service account will be used.
func (o ServiceAccountOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccount) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.
func (o ServiceAccountOutput) Scope() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAccount) []string { return v.Scope }).(pulumi.StringArrayOutput)
}

type ServiceAccountPtrOutput struct{ *pulumi.OutputState }

func (ServiceAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountPtrOutput) ToServiceAccountPtrOutput() ServiceAccountPtrOutput {
	return o
}

func (o ServiceAccountPtrOutput) ToServiceAccountPtrOutputWithContext(ctx context.Context) ServiceAccountPtrOutput {
	return o
}

func (o ServiceAccountPtrOutput) Elem() ServiceAccountOutput {
	return o.ApplyT(func(v *ServiceAccount) ServiceAccount {
		if v != nil {
			return *v
		}
		var ret ServiceAccount
		return ret
	}).(ServiceAccountOutput)
}

// Email address of the service account. If empty, default Compute service account will be used.
func (o ServiceAccountPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.
func (o ServiceAccountPtrOutput) Scope() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceAccount) []string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringArrayOutput)
}

// A service account.
type ServiceAccountResponse struct {
	// Email address of the service account. If empty, default Compute service account will be used.
	Email string `pulumi:"email"`
	// The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.
	Scope []string `pulumi:"scope"`
}

// ServiceAccountResponseInput is an input type that accepts ServiceAccountResponseArgs and ServiceAccountResponseOutput values.
// You can construct a concrete instance of `ServiceAccountResponseInput` via:
//
//          ServiceAccountResponseArgs{...}
type ServiceAccountResponseInput interface {
	pulumi.Input

	ToServiceAccountResponseOutput() ServiceAccountResponseOutput
	ToServiceAccountResponseOutputWithContext(context.Context) ServiceAccountResponseOutput
}

// A service account.
type ServiceAccountResponseArgs struct {
	// Email address of the service account. If empty, default Compute service account will be used.
	Email pulumi.StringInput `pulumi:"email"`
	// The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.
	Scope pulumi.StringArrayInput `pulumi:"scope"`
}

func (ServiceAccountResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountResponse)(nil)).Elem()
}

func (i ServiceAccountResponseArgs) ToServiceAccountResponseOutput() ServiceAccountResponseOutput {
	return i.ToServiceAccountResponseOutputWithContext(context.Background())
}

func (i ServiceAccountResponseArgs) ToServiceAccountResponseOutputWithContext(ctx context.Context) ServiceAccountResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountResponseOutput)
}

func (i ServiceAccountResponseArgs) ToServiceAccountResponsePtrOutput() ServiceAccountResponsePtrOutput {
	return i.ToServiceAccountResponsePtrOutputWithContext(context.Background())
}

func (i ServiceAccountResponseArgs) ToServiceAccountResponsePtrOutputWithContext(ctx context.Context) ServiceAccountResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountResponseOutput).ToServiceAccountResponsePtrOutputWithContext(ctx)
}

// ServiceAccountResponsePtrInput is an input type that accepts ServiceAccountResponseArgs, ServiceAccountResponsePtr and ServiceAccountResponsePtrOutput values.
// You can construct a concrete instance of `ServiceAccountResponsePtrInput` via:
//
//          ServiceAccountResponseArgs{...}
//
//  or:
//
//          nil
type ServiceAccountResponsePtrInput interface {
	pulumi.Input

	ToServiceAccountResponsePtrOutput() ServiceAccountResponsePtrOutput
	ToServiceAccountResponsePtrOutputWithContext(context.Context) ServiceAccountResponsePtrOutput
}

type serviceAccountResponsePtrType ServiceAccountResponseArgs

func ServiceAccountResponsePtr(v *ServiceAccountResponseArgs) ServiceAccountResponsePtrInput {
	return (*serviceAccountResponsePtrType)(v)
}

func (*serviceAccountResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountResponse)(nil)).Elem()
}

func (i *serviceAccountResponsePtrType) ToServiceAccountResponsePtrOutput() ServiceAccountResponsePtrOutput {
	return i.ToServiceAccountResponsePtrOutputWithContext(context.Background())
}

func (i *serviceAccountResponsePtrType) ToServiceAccountResponsePtrOutputWithContext(ctx context.Context) ServiceAccountResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountResponsePtrOutput)
}

// A service account.
type ServiceAccountResponseOutput struct{ *pulumi.OutputState }

func (ServiceAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountResponse)(nil)).Elem()
}

func (o ServiceAccountResponseOutput) ToServiceAccountResponseOutput() ServiceAccountResponseOutput {
	return o
}

func (o ServiceAccountResponseOutput) ToServiceAccountResponseOutputWithContext(ctx context.Context) ServiceAccountResponseOutput {
	return o
}

func (o ServiceAccountResponseOutput) ToServiceAccountResponsePtrOutput() ServiceAccountResponsePtrOutput {
	return o.ToServiceAccountResponsePtrOutputWithContext(context.Background())
}

func (o ServiceAccountResponseOutput) ToServiceAccountResponsePtrOutputWithContext(ctx context.Context) ServiceAccountResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceAccountResponse) *ServiceAccountResponse {
		return &v
	}).(ServiceAccountResponsePtrOutput)
}

// Email address of the service account. If empty, default Compute service account will be used.
func (o ServiceAccountResponseOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAccountResponse) string { return v.Email }).(pulumi.StringOutput)
}

// The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.
func (o ServiceAccountResponseOutput) Scope() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAccountResponse) []string { return v.Scope }).(pulumi.StringArrayOutput)
}

type ServiceAccountResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceAccountResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAccountResponse)(nil)).Elem()
}

func (o ServiceAccountResponsePtrOutput) ToServiceAccountResponsePtrOutput() ServiceAccountResponsePtrOutput {
	return o
}

func (o ServiceAccountResponsePtrOutput) ToServiceAccountResponsePtrOutputWithContext(ctx context.Context) ServiceAccountResponsePtrOutput {
	return o
}

func (o ServiceAccountResponsePtrOutput) Elem() ServiceAccountResponseOutput {
	return o.ApplyT(func(v *ServiceAccountResponse) ServiceAccountResponse {
		if v != nil {
			return *v
		}
		var ret ServiceAccountResponse
		return ret
	}).(ServiceAccountResponseOutput)
}

// Email address of the service account. If empty, default Compute service account will be used.
func (o ServiceAccountResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceAccountResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.
func (o ServiceAccountResponsePtrOutput) Scope() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceAccountResponse) []string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringArrayOutput)
}

// A Symptom instance.
type SymptomResponse struct {
	// Timestamp when the Symptom is created.
	CreateTime string `pulumi:"createTime"`
	// Detailed information of the current Symptom.
	Details string `pulumi:"details"`
	// Type of the Symptom.
	SymptomType string `pulumi:"symptomType"`
	// A string used to uniquely distinguish a worker within a TPU node.
	WorkerId string `pulumi:"workerId"`
}

// SymptomResponseInput is an input type that accepts SymptomResponseArgs and SymptomResponseOutput values.
// You can construct a concrete instance of `SymptomResponseInput` via:
//
//          SymptomResponseArgs{...}
type SymptomResponseInput interface {
	pulumi.Input

	ToSymptomResponseOutput() SymptomResponseOutput
	ToSymptomResponseOutputWithContext(context.Context) SymptomResponseOutput
}

// A Symptom instance.
type SymptomResponseArgs struct {
	// Timestamp when the Symptom is created.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Detailed information of the current Symptom.
	Details pulumi.StringInput `pulumi:"details"`
	// Type of the Symptom.
	SymptomType pulumi.StringInput `pulumi:"symptomType"`
	// A string used to uniquely distinguish a worker within a TPU node.
	WorkerId pulumi.StringInput `pulumi:"workerId"`
}

func (SymptomResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SymptomResponse)(nil)).Elem()
}

func (i SymptomResponseArgs) ToSymptomResponseOutput() SymptomResponseOutput {
	return i.ToSymptomResponseOutputWithContext(context.Background())
}

func (i SymptomResponseArgs) ToSymptomResponseOutputWithContext(ctx context.Context) SymptomResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SymptomResponseOutput)
}

// SymptomResponseArrayInput is an input type that accepts SymptomResponseArray and SymptomResponseArrayOutput values.
// You can construct a concrete instance of `SymptomResponseArrayInput` via:
//
//          SymptomResponseArray{ SymptomResponseArgs{...} }
type SymptomResponseArrayInput interface {
	pulumi.Input

	ToSymptomResponseArrayOutput() SymptomResponseArrayOutput
	ToSymptomResponseArrayOutputWithContext(context.Context) SymptomResponseArrayOutput
}

type SymptomResponseArray []SymptomResponseInput

func (SymptomResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SymptomResponse)(nil)).Elem()
}

func (i SymptomResponseArray) ToSymptomResponseArrayOutput() SymptomResponseArrayOutput {
	return i.ToSymptomResponseArrayOutputWithContext(context.Background())
}

func (i SymptomResponseArray) ToSymptomResponseArrayOutputWithContext(ctx context.Context) SymptomResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SymptomResponseArrayOutput)
}

// A Symptom instance.
type SymptomResponseOutput struct{ *pulumi.OutputState }

func (SymptomResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SymptomResponse)(nil)).Elem()
}

func (o SymptomResponseOutput) ToSymptomResponseOutput() SymptomResponseOutput {
	return o
}

func (o SymptomResponseOutput) ToSymptomResponseOutputWithContext(ctx context.Context) SymptomResponseOutput {
	return o
}

// Timestamp when the Symptom is created.
func (o SymptomResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v SymptomResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Detailed information of the current Symptom.
func (o SymptomResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v SymptomResponse) string { return v.Details }).(pulumi.StringOutput)
}

// Type of the Symptom.
func (o SymptomResponseOutput) SymptomType() pulumi.StringOutput {
	return o.ApplyT(func(v SymptomResponse) string { return v.SymptomType }).(pulumi.StringOutput)
}

// A string used to uniquely distinguish a worker within a TPU node.
func (o SymptomResponseOutput) WorkerId() pulumi.StringOutput {
	return o.ApplyT(func(v SymptomResponse) string { return v.WorkerId }).(pulumi.StringOutput)
}

type SymptomResponseArrayOutput struct{ *pulumi.OutputState }

func (SymptomResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SymptomResponse)(nil)).Elem()
}

func (o SymptomResponseArrayOutput) ToSymptomResponseArrayOutput() SymptomResponseArrayOutput {
	return o
}

func (o SymptomResponseArrayOutput) ToSymptomResponseArrayOutputWithContext(ctx context.Context) SymptomResponseArrayOutput {
	return o
}

func (o SymptomResponseArrayOutput) Index(i pulumi.IntInput) SymptomResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SymptomResponse {
		return vs[0].([]SymptomResponse)[vs[1].(int)]
	}).(SymptomResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessConfigResponseInput)(nil)).Elem(), AccessConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedDiskInput)(nil)).Elem(), AttachedDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedDiskArrayInput)(nil)).Elem(), AttachedDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedDiskResponseInput)(nil)).Elem(), AttachedDiskResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachedDiskResponseArrayInput)(nil)).Elem(), AttachedDiskResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigPtrInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigResponseInput)(nil)).Elem(), NetworkConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigResponsePtrInput)(nil)).Elem(), NetworkConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkEndpointResponseInput)(nil)).Elem(), NetworkEndpointResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkEndpointResponseArrayInput)(nil)).Elem(), NetworkEndpointResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingConfigInput)(nil)).Elem(), SchedulingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingConfigPtrInput)(nil)).Elem(), SchedulingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingConfigResponseInput)(nil)).Elem(), SchedulingConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulingConfigResponsePtrInput)(nil)).Elem(), SchedulingConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountInput)(nil)).Elem(), ServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountPtrInput)(nil)).Elem(), ServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountResponseInput)(nil)).Elem(), ServiceAccountResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountResponsePtrInput)(nil)).Elem(), ServiceAccountResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SymptomResponseInput)(nil)).Elem(), SymptomResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SymptomResponseArrayInput)(nil)).Elem(), SymptomResponseArray{})
	pulumi.RegisterOutputType(AccessConfigResponseOutput{})
	pulumi.RegisterOutputType(AttachedDiskOutput{})
	pulumi.RegisterOutputType(AttachedDiskArrayOutput{})
	pulumi.RegisterOutputType(AttachedDiskResponseOutput{})
	pulumi.RegisterOutputType(AttachedDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkConfigOutput{})
	pulumi.RegisterOutputType(NetworkConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkEndpointResponseOutput{})
	pulumi.RegisterOutputType(NetworkEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(SchedulingConfigOutput{})
	pulumi.RegisterOutputType(SchedulingConfigPtrOutput{})
	pulumi.RegisterOutputType(SchedulingConfigResponseOutput{})
	pulumi.RegisterOutputType(SchedulingConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceAccountOutput{})
	pulumi.RegisterOutputType(ServiceAccountPtrOutput{})
	pulumi.RegisterOutputType(ServiceAccountResponseOutput{})
	pulumi.RegisterOutputType(ServiceAccountResponsePtrOutput{})
	pulumi.RegisterOutputType(SymptomResponseOutput{})
	pulumi.RegisterOutputType(SymptomResponseArrayOutput{})
}
