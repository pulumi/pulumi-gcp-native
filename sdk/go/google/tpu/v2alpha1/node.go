// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2alpha1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a node.
// Auto-naming is currently not supported for this resource.
type Node struct {
	pulumi.CustomResourceState

	// The type of hardware accelerators associated with this node.
	AcceleratorType pulumi.StringOutput `pulumi:"acceleratorType"`
	// The API version that created this Node.
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// The time when the node was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The additional data disks for the Node.
	DataDisks AttachedDiskResponseArrayOutput `pulumi:"dataDisks"`
	// The user-supplied description of the TPU. Maximum of 512 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// The health status of the TPU node.
	Health pulumi.StringOutput `pulumi:"health"`
	// If this field is populated, it contains a description of why the TPU Node is unhealthy.
	HealthDescription pulumi.StringOutput `pulumi:"healthDescription"`
	// Resource labels to represent user-provided metadata.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// Immutable. The name of the TPU.
	Name pulumi.StringOutput `pulumi:"name"`
	// Network configurations for the TPU node.
	NetworkConfig NetworkConfigResponseOutput `pulumi:"networkConfig"`
	// The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.
	NetworkEndpoints NetworkEndpointResponseArrayOutput `pulumi:"networkEndpoints"`
	// The unqualified resource name.
	NodeId  pulumi.StringPtrOutput `pulumi:"nodeId"`
	Project pulumi.StringOutput    `pulumi:"project"`
	// Idempotent request UUID.
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// The runtime version running in the Node.
	RuntimeVersion pulumi.StringOutput `pulumi:"runtimeVersion"`
	// The scheduling options for this node.
	SchedulingConfig SchedulingConfigResponseOutput `pulumi:"schedulingConfig"`
	// The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
	ServiceAccount ServiceAccountResponseOutput `pulumi:"serviceAccount"`
	// The current state for the TPU Node.
	State pulumi.StringOutput `pulumi:"state"`
	// The Symptoms that have occurred to the TPU Node.
	Symptoms SymptomResponseArrayOutput `pulumi:"symptoms"`
	// Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewNode registers a new resource with the given unique name, arguments, and options.
func NewNode(ctx *pulumi.Context,
	name string, args *NodeArgs, opts ...pulumi.ResourceOption) (*Node, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RuntimeVersion == nil {
		return nil, errors.New("invalid value for required argument 'RuntimeVersion'")
	}
	var resource Node
	err := ctx.RegisterResource("google-native:tpu/v2alpha1:Node", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNode gets an existing Node resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeState, opts ...pulumi.ResourceOption) (*Node, error) {
	var resource Node
	err := ctx.ReadResource("google-native:tpu/v2alpha1:Node", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Node resources.
type nodeState struct {
}

type NodeState struct {
}

func (NodeState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeState)(nil)).Elem()
}

type nodeArgs struct {
	// The type of hardware accelerators associated with this node.
	AcceleratorType *string `pulumi:"acceleratorType"`
	// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
	CidrBlock *string `pulumi:"cidrBlock"`
	// The additional data disks for the Node.
	DataDisks []AttachedDisk `pulumi:"dataDisks"`
	// The user-supplied description of the TPU. Maximum of 512 characters.
	Description *string `pulumi:"description"`
	// The health status of the TPU node.
	Health *NodeHealth `pulumi:"health"`
	// Resource labels to represent user-provided metadata.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
	Metadata map[string]string `pulumi:"metadata"`
	// Network configurations for the TPU node.
	NetworkConfig *NetworkConfig `pulumi:"networkConfig"`
	// The unqualified resource name.
	NodeId  *string `pulumi:"nodeId"`
	Project *string `pulumi:"project"`
	// Idempotent request UUID.
	RequestId *string `pulumi:"requestId"`
	// The runtime version running in the Node.
	RuntimeVersion string `pulumi:"runtimeVersion"`
	// The scheduling options for this node.
	SchedulingConfig *SchedulingConfig `pulumi:"schedulingConfig"`
	// The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
	ServiceAccount *ServiceAccount `pulumi:"serviceAccount"`
	// Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Node resource.
type NodeArgs struct {
	// The type of hardware accelerators associated with this node.
	AcceleratorType pulumi.StringPtrInput
	// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
	CidrBlock pulumi.StringPtrInput
	// The additional data disks for the Node.
	DataDisks AttachedDiskArrayInput
	// The user-supplied description of the TPU. Maximum of 512 characters.
	Description pulumi.StringPtrInput
	// The health status of the TPU node.
	Health NodeHealthPtrInput
	// Resource labels to represent user-provided metadata.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
	Metadata pulumi.StringMapInput
	// Network configurations for the TPU node.
	NetworkConfig NetworkConfigPtrInput
	// The unqualified resource name.
	NodeId  pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Idempotent request UUID.
	RequestId pulumi.StringPtrInput
	// The runtime version running in the Node.
	RuntimeVersion pulumi.StringInput
	// The scheduling options for this node.
	SchedulingConfig SchedulingConfigPtrInput
	// The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
	ServiceAccount ServiceAccountPtrInput
	// Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
	Tags pulumi.StringArrayInput
}

func (NodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeArgs)(nil)).Elem()
}

type NodeInput interface {
	pulumi.Input

	ToNodeOutput() NodeOutput
	ToNodeOutputWithContext(ctx context.Context) NodeOutput
}

func (*Node) ElementType() reflect.Type {
	return reflect.TypeOf((**Node)(nil)).Elem()
}

func (i *Node) ToNodeOutput() NodeOutput {
	return i.ToNodeOutputWithContext(context.Background())
}

func (i *Node) ToNodeOutputWithContext(ctx context.Context) NodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeOutput)
}

type NodeOutput struct{ *pulumi.OutputState }

func (NodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Node)(nil)).Elem()
}

func (o NodeOutput) ToNodeOutput() NodeOutput {
	return o
}

func (o NodeOutput) ToNodeOutputWithContext(ctx context.Context) NodeOutput {
	return o
}

// The type of hardware accelerators associated with this node.
func (o NodeOutput) AcceleratorType() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.AcceleratorType }).(pulumi.StringOutput)
}

// The API version that created this Node.
func (o NodeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
func (o NodeOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.CidrBlock }).(pulumi.StringOutput)
}

// The time when the node was created.
func (o NodeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The additional data disks for the Node.
func (o NodeOutput) DataDisks() AttachedDiskResponseArrayOutput {
	return o.ApplyT(func(v *Node) AttachedDiskResponseArrayOutput { return v.DataDisks }).(AttachedDiskResponseArrayOutput)
}

// The user-supplied description of the TPU. Maximum of 512 characters.
func (o NodeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The health status of the TPU node.
func (o NodeOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.Health }).(pulumi.StringOutput)
}

// If this field is populated, it contains a description of why the TPU Node is unhealthy.
func (o NodeOutput) HealthDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.HealthDescription }).(pulumi.StringOutput)
}

// Resource labels to represent user-provided metadata.
func (o NodeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Node) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o NodeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
func (o NodeOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Node) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// Immutable. The name of the TPU.
func (o NodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network configurations for the TPU node.
func (o NodeOutput) NetworkConfig() NetworkConfigResponseOutput {
	return o.ApplyT(func(v *Node) NetworkConfigResponseOutput { return v.NetworkConfig }).(NetworkConfigResponseOutput)
}

// The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.
func (o NodeOutput) NetworkEndpoints() NetworkEndpointResponseArrayOutput {
	return o.ApplyT(func(v *Node) NetworkEndpointResponseArrayOutput { return v.NetworkEndpoints }).(NetworkEndpointResponseArrayOutput)
}

// The unqualified resource name.
func (o NodeOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.NodeId }).(pulumi.StringPtrOutput)
}

func (o NodeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Idempotent request UUID.
func (o NodeOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Node) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// The runtime version running in the Node.
func (o NodeOutput) RuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.RuntimeVersion }).(pulumi.StringOutput)
}

// The scheduling options for this node.
func (o NodeOutput) SchedulingConfig() SchedulingConfigResponseOutput {
	return o.ApplyT(func(v *Node) SchedulingConfigResponseOutput { return v.SchedulingConfig }).(SchedulingConfigResponseOutput)
}

// The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
func (o NodeOutput) ServiceAccount() ServiceAccountResponseOutput {
	return o.ApplyT(func(v *Node) ServiceAccountResponseOutput { return v.ServiceAccount }).(ServiceAccountResponseOutput)
}

// The current state for the TPU Node.
func (o NodeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Node) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The Symptoms that have occurred to the TPU Node.
func (o NodeOutput) Symptoms() SymptomResponseArrayOutput {
	return o.ApplyT(func(v *Node) SymptomResponseArrayOutput { return v.Symptoms }).(SymptomResponseArrayOutput)
}

// Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
func (o NodeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Node) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodeInput)(nil)).Elem(), &Node{})
	pulumi.RegisterOutputType(NodeOutput{})
}
