// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the details of a node.
func LookupNode(ctx *pulumi.Context, args *LookupNodeArgs, opts ...pulumi.InvokeOption) (*LookupNodeResult, error) {
	var rv LookupNodeResult
	err := ctx.Invoke("google-native:tpu/v2alpha1:getNode", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupNodeArgs struct {
	Location string  `pulumi:"location"`
	NodeId   string  `pulumi:"nodeId"`
	Project  *string `pulumi:"project"`
}

type LookupNodeResult struct {
	// The type of hardware accelerators associated with this node.
	AcceleratorType string `pulumi:"acceleratorType"`
	// The API version that created this Node.
	ApiVersion string `pulumi:"apiVersion"`
	// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
	CidrBlock string `pulumi:"cidrBlock"`
	// The time when the node was created.
	CreateTime string `pulumi:"createTime"`
	// The additional data disks for the Node.
	DataDisks []AttachedDiskResponse `pulumi:"dataDisks"`
	// The user-supplied description of the TPU. Maximum of 512 characters.
	Description string `pulumi:"description"`
	// The health status of the TPU node.
	Health string `pulumi:"health"`
	// If this field is populated, it contains a description of why the TPU Node is unhealthy.
	HealthDescription string `pulumi:"healthDescription"`
	// Resource labels to represent user-provided metadata.
	Labels map[string]string `pulumi:"labels"`
	// Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
	Metadata map[string]string `pulumi:"metadata"`
	// Immutable. The name of the TPU.
	Name string `pulumi:"name"`
	// Network configurations for the TPU node.
	NetworkConfig NetworkConfigResponse `pulumi:"networkConfig"`
	// The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.
	NetworkEndpoints []NetworkEndpointResponse `pulumi:"networkEndpoints"`
	// The runtime version running in the Node.
	RuntimeVersion string `pulumi:"runtimeVersion"`
	// The scheduling options for this node.
	SchedulingConfig SchedulingConfigResponse `pulumi:"schedulingConfig"`
	// The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
	ServiceAccount ServiceAccountResponse `pulumi:"serviceAccount"`
	// Shielded Instance options.
	ShieldedInstanceConfig ShieldedInstanceConfigResponse `pulumi:"shieldedInstanceConfig"`
	// The current state for the TPU Node.
	State string `pulumi:"state"`
	// The Symptoms that have occurred to the TPU Node.
	Symptoms []SymptomResponse `pulumi:"symptoms"`
	// Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
	Tags []string `pulumi:"tags"`
}

func LookupNodeOutput(ctx *pulumi.Context, args LookupNodeOutputArgs, opts ...pulumi.InvokeOption) LookupNodeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNodeResult, error) {
			args := v.(LookupNodeArgs)
			r, err := LookupNode(ctx, &args, opts...)
			var s LookupNodeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNodeResultOutput)
}

type LookupNodeOutputArgs struct {
	Location pulumi.StringInput    `pulumi:"location"`
	NodeId   pulumi.StringInput    `pulumi:"nodeId"`
	Project  pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupNodeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNodeArgs)(nil)).Elem()
}

type LookupNodeResultOutput struct{ *pulumi.OutputState }

func (LookupNodeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNodeResult)(nil)).Elem()
}

func (o LookupNodeResultOutput) ToLookupNodeResultOutput() LookupNodeResultOutput {
	return o
}

func (o LookupNodeResultOutput) ToLookupNodeResultOutputWithContext(ctx context.Context) LookupNodeResultOutput {
	return o
}

// The type of hardware accelerators associated with this node.
func (o LookupNodeResultOutput) AcceleratorType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodeResult) string { return v.AcceleratorType }).(pulumi.StringOutput)
}

// The API version that created this Node.
func (o LookupNodeResultOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodeResult) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
func (o LookupNodeResultOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodeResult) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// The time when the node was created.
func (o LookupNodeResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodeResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The additional data disks for the Node.
func (o LookupNodeResultOutput) DataDisks() AttachedDiskResponseArrayOutput {
	return o.ApplyT(func(v LookupNodeResult) []AttachedDiskResponse { return v.DataDisks }).(AttachedDiskResponseArrayOutput)
}

// The user-supplied description of the TPU. Maximum of 512 characters.
func (o LookupNodeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodeResult) string { return v.Description }).(pulumi.StringOutput)
}

// The health status of the TPU node.
func (o LookupNodeResultOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodeResult) string { return v.Health }).(pulumi.StringOutput)
}

// If this field is populated, it contains a description of why the TPU Node is unhealthy.
func (o LookupNodeResultOutput) HealthDescription() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodeResult) string { return v.HealthDescription }).(pulumi.StringOutput)
}

// Resource labels to represent user-provided metadata.
func (o LookupNodeResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNodeResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script
func (o LookupNodeResultOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNodeResult) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Immutable. The name of the TPU.
func (o LookupNodeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodeResult) string { return v.Name }).(pulumi.StringOutput)
}

// Network configurations for the TPU node.
func (o LookupNodeResultOutput) NetworkConfig() NetworkConfigResponseOutput {
	return o.ApplyT(func(v LookupNodeResult) NetworkConfigResponse { return v.NetworkConfig }).(NetworkConfigResponseOutput)
}

// The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.
func (o LookupNodeResultOutput) NetworkEndpoints() NetworkEndpointResponseArrayOutput {
	return o.ApplyT(func(v LookupNodeResult) []NetworkEndpointResponse { return v.NetworkEndpoints }).(NetworkEndpointResponseArrayOutput)
}

// The runtime version running in the Node.
func (o LookupNodeResultOutput) RuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodeResult) string { return v.RuntimeVersion }).(pulumi.StringOutput)
}

// The scheduling options for this node.
func (o LookupNodeResultOutput) SchedulingConfig() SchedulingConfigResponseOutput {
	return o.ApplyT(func(v LookupNodeResult) SchedulingConfigResponse { return v.SchedulingConfig }).(SchedulingConfigResponseOutput)
}

// The Google Cloud Platform Service Account to be used by the TPU node VMs. If None is specified, the default compute service account will be used.
func (o LookupNodeResultOutput) ServiceAccount() ServiceAccountResponseOutput {
	return o.ApplyT(func(v LookupNodeResult) ServiceAccountResponse { return v.ServiceAccount }).(ServiceAccountResponseOutput)
}

// Shielded Instance options.
func (o LookupNodeResultOutput) ShieldedInstanceConfig() ShieldedInstanceConfigResponseOutput {
	return o.ApplyT(func(v LookupNodeResult) ShieldedInstanceConfigResponse { return v.ShieldedInstanceConfig }).(ShieldedInstanceConfigResponseOutput)
}

// The current state for the TPU Node.
func (o LookupNodeResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodeResult) string { return v.State }).(pulumi.StringOutput)
}

// The Symptoms that have occurred to the TPU Node.
func (o LookupNodeResultOutput) Symptoms() SymptomResponseArrayOutput {
	return o.ApplyT(func(v LookupNodeResult) []SymptomResponse { return v.Symptoms }).(SymptomResponseArrayOutput)
}

// Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.
func (o LookupNodeResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNodeResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNodeResultOutput{})
}
