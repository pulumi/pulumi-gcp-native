// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// URLs where a CertificateAuthority will publish content.
type AccessUrls struct {
	// The URL where this CertificateAuthority's CA certificate is published. This will only be set for CAs that have been activated.
	CaCertificateAccessUrl *string `pulumi:"caCertificateAccessUrl"`
	// The URL where this CertificateAuthority's CRLs are published. This will only be set for CAs that have been activated.
	CrlAccessUrl *string `pulumi:"crlAccessUrl"`
}

// AccessUrlsInput is an input type that accepts AccessUrlsArgs and AccessUrlsOutput values.
// You can construct a concrete instance of `AccessUrlsInput` via:
//
//          AccessUrlsArgs{...}
type AccessUrlsInput interface {
	pulumi.Input

	ToAccessUrlsOutput() AccessUrlsOutput
	ToAccessUrlsOutputWithContext(context.Context) AccessUrlsOutput
}

// URLs where a CertificateAuthority will publish content.
type AccessUrlsArgs struct {
	// The URL where this CertificateAuthority's CA certificate is published. This will only be set for CAs that have been activated.
	CaCertificateAccessUrl pulumi.StringPtrInput `pulumi:"caCertificateAccessUrl"`
	// The URL where this CertificateAuthority's CRLs are published. This will only be set for CAs that have been activated.
	CrlAccessUrl pulumi.StringPtrInput `pulumi:"crlAccessUrl"`
}

func (AccessUrlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessUrls)(nil)).Elem()
}

func (i AccessUrlsArgs) ToAccessUrlsOutput() AccessUrlsOutput {
	return i.ToAccessUrlsOutputWithContext(context.Background())
}

func (i AccessUrlsArgs) ToAccessUrlsOutputWithContext(ctx context.Context) AccessUrlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessUrlsOutput)
}

func (i AccessUrlsArgs) ToAccessUrlsPtrOutput() AccessUrlsPtrOutput {
	return i.ToAccessUrlsPtrOutputWithContext(context.Background())
}

func (i AccessUrlsArgs) ToAccessUrlsPtrOutputWithContext(ctx context.Context) AccessUrlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessUrlsOutput).ToAccessUrlsPtrOutputWithContext(ctx)
}

// AccessUrlsPtrInput is an input type that accepts AccessUrlsArgs, AccessUrlsPtr and AccessUrlsPtrOutput values.
// You can construct a concrete instance of `AccessUrlsPtrInput` via:
//
//          AccessUrlsArgs{...}
//
//  or:
//
//          nil
type AccessUrlsPtrInput interface {
	pulumi.Input

	ToAccessUrlsPtrOutput() AccessUrlsPtrOutput
	ToAccessUrlsPtrOutputWithContext(context.Context) AccessUrlsPtrOutput
}

type accessUrlsPtrType AccessUrlsArgs

func AccessUrlsPtr(v *AccessUrlsArgs) AccessUrlsPtrInput {
	return (*accessUrlsPtrType)(v)
}

func (*accessUrlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessUrls)(nil)).Elem()
}

func (i *accessUrlsPtrType) ToAccessUrlsPtrOutput() AccessUrlsPtrOutput {
	return i.ToAccessUrlsPtrOutputWithContext(context.Background())
}

func (i *accessUrlsPtrType) ToAccessUrlsPtrOutputWithContext(ctx context.Context) AccessUrlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessUrlsPtrOutput)
}

// URLs where a CertificateAuthority will publish content.
type AccessUrlsOutput struct{ *pulumi.OutputState }

func (AccessUrlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessUrls)(nil)).Elem()
}

func (o AccessUrlsOutput) ToAccessUrlsOutput() AccessUrlsOutput {
	return o
}

func (o AccessUrlsOutput) ToAccessUrlsOutputWithContext(ctx context.Context) AccessUrlsOutput {
	return o
}

func (o AccessUrlsOutput) ToAccessUrlsPtrOutput() AccessUrlsPtrOutput {
	return o.ToAccessUrlsPtrOutputWithContext(context.Background())
}

func (o AccessUrlsOutput) ToAccessUrlsPtrOutputWithContext(ctx context.Context) AccessUrlsPtrOutput {
	return o.ApplyT(func(v AccessUrls) *AccessUrls {
		return &v
	}).(AccessUrlsPtrOutput)
}

// The URL where this CertificateAuthority's CA certificate is published. This will only be set for CAs that have been activated.
func (o AccessUrlsOutput) CaCertificateAccessUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessUrls) *string { return v.CaCertificateAccessUrl }).(pulumi.StringPtrOutput)
}

// The URL where this CertificateAuthority's CRLs are published. This will only be set for CAs that have been activated.
func (o AccessUrlsOutput) CrlAccessUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessUrls) *string { return v.CrlAccessUrl }).(pulumi.StringPtrOutput)
}

type AccessUrlsPtrOutput struct{ *pulumi.OutputState }

func (AccessUrlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessUrls)(nil)).Elem()
}

func (o AccessUrlsPtrOutput) ToAccessUrlsPtrOutput() AccessUrlsPtrOutput {
	return o
}

func (o AccessUrlsPtrOutput) ToAccessUrlsPtrOutputWithContext(ctx context.Context) AccessUrlsPtrOutput {
	return o
}

func (o AccessUrlsPtrOutput) Elem() AccessUrlsOutput {
	return o.ApplyT(func(v *AccessUrls) AccessUrls { return *v }).(AccessUrlsOutput)
}

// The URL where this CertificateAuthority's CA certificate is published. This will only be set for CAs that have been activated.
func (o AccessUrlsPtrOutput) CaCertificateAccessUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessUrls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificateAccessUrl
	}).(pulumi.StringPtrOutput)
}

// The URL where this CertificateAuthority's CRLs are published. This will only be set for CAs that have been activated.
func (o AccessUrlsPtrOutput) CrlAccessUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessUrls) *string {
		if v == nil {
			return nil
		}
		return v.CrlAccessUrl
	}).(pulumi.StringPtrOutput)
}

type AllowedConfigList struct {
	// Required. All Certificates issued by the CertificateAuthority must match at least one listed ReusableConfigWrapper. If a ReusableConfigWrapper has an empty field, any value will be allowed for that field.
	AllowedConfigValues []ReusableConfigWrapper `pulumi:"allowedConfigValues"`
}

// AllowedConfigListInput is an input type that accepts AllowedConfigListArgs and AllowedConfigListOutput values.
// You can construct a concrete instance of `AllowedConfigListInput` via:
//
//          AllowedConfigListArgs{...}
type AllowedConfigListInput interface {
	pulumi.Input

	ToAllowedConfigListOutput() AllowedConfigListOutput
	ToAllowedConfigListOutputWithContext(context.Context) AllowedConfigListOutput
}

type AllowedConfigListArgs struct {
	// Required. All Certificates issued by the CertificateAuthority must match at least one listed ReusableConfigWrapper. If a ReusableConfigWrapper has an empty field, any value will be allowed for that field.
	AllowedConfigValues ReusableConfigWrapperArrayInput `pulumi:"allowedConfigValues"`
}

func (AllowedConfigListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedConfigList)(nil)).Elem()
}

func (i AllowedConfigListArgs) ToAllowedConfigListOutput() AllowedConfigListOutput {
	return i.ToAllowedConfigListOutputWithContext(context.Background())
}

func (i AllowedConfigListArgs) ToAllowedConfigListOutputWithContext(ctx context.Context) AllowedConfigListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedConfigListOutput)
}

func (i AllowedConfigListArgs) ToAllowedConfigListPtrOutput() AllowedConfigListPtrOutput {
	return i.ToAllowedConfigListPtrOutputWithContext(context.Background())
}

func (i AllowedConfigListArgs) ToAllowedConfigListPtrOutputWithContext(ctx context.Context) AllowedConfigListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedConfigListOutput).ToAllowedConfigListPtrOutputWithContext(ctx)
}

// AllowedConfigListPtrInput is an input type that accepts AllowedConfigListArgs, AllowedConfigListPtr and AllowedConfigListPtrOutput values.
// You can construct a concrete instance of `AllowedConfigListPtrInput` via:
//
//          AllowedConfigListArgs{...}
//
//  or:
//
//          nil
type AllowedConfigListPtrInput interface {
	pulumi.Input

	ToAllowedConfigListPtrOutput() AllowedConfigListPtrOutput
	ToAllowedConfigListPtrOutputWithContext(context.Context) AllowedConfigListPtrOutput
}

type allowedConfigListPtrType AllowedConfigListArgs

func AllowedConfigListPtr(v *AllowedConfigListArgs) AllowedConfigListPtrInput {
	return (*allowedConfigListPtrType)(v)
}

func (*allowedConfigListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedConfigList)(nil)).Elem()
}

func (i *allowedConfigListPtrType) ToAllowedConfigListPtrOutput() AllowedConfigListPtrOutput {
	return i.ToAllowedConfigListPtrOutputWithContext(context.Background())
}

func (i *allowedConfigListPtrType) ToAllowedConfigListPtrOutputWithContext(ctx context.Context) AllowedConfigListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedConfigListPtrOutput)
}

type AllowedConfigListOutput struct{ *pulumi.OutputState }

func (AllowedConfigListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedConfigList)(nil)).Elem()
}

func (o AllowedConfigListOutput) ToAllowedConfigListOutput() AllowedConfigListOutput {
	return o
}

func (o AllowedConfigListOutput) ToAllowedConfigListOutputWithContext(ctx context.Context) AllowedConfigListOutput {
	return o
}

func (o AllowedConfigListOutput) ToAllowedConfigListPtrOutput() AllowedConfigListPtrOutput {
	return o.ToAllowedConfigListPtrOutputWithContext(context.Background())
}

func (o AllowedConfigListOutput) ToAllowedConfigListPtrOutputWithContext(ctx context.Context) AllowedConfigListPtrOutput {
	return o.ApplyT(func(v AllowedConfigList) *AllowedConfigList {
		return &v
	}).(AllowedConfigListPtrOutput)
}

// Required. All Certificates issued by the CertificateAuthority must match at least one listed ReusableConfigWrapper. If a ReusableConfigWrapper has an empty field, any value will be allowed for that field.
func (o AllowedConfigListOutput) AllowedConfigValues() ReusableConfigWrapperArrayOutput {
	return o.ApplyT(func(v AllowedConfigList) []ReusableConfigWrapper { return v.AllowedConfigValues }).(ReusableConfigWrapperArrayOutput)
}

type AllowedConfigListPtrOutput struct{ *pulumi.OutputState }

func (AllowedConfigListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedConfigList)(nil)).Elem()
}

func (o AllowedConfigListPtrOutput) ToAllowedConfigListPtrOutput() AllowedConfigListPtrOutput {
	return o
}

func (o AllowedConfigListPtrOutput) ToAllowedConfigListPtrOutputWithContext(ctx context.Context) AllowedConfigListPtrOutput {
	return o
}

func (o AllowedConfigListPtrOutput) Elem() AllowedConfigListOutput {
	return o.ApplyT(func(v *AllowedConfigList) AllowedConfigList { return *v }).(AllowedConfigListOutput)
}

// Required. All Certificates issued by the CertificateAuthority must match at least one listed ReusableConfigWrapper. If a ReusableConfigWrapper has an empty field, any value will be allowed for that field.
func (o AllowedConfigListPtrOutput) AllowedConfigValues() ReusableConfigWrapperArrayOutput {
	return o.ApplyT(func(v *AllowedConfigList) []ReusableConfigWrapper {
		if v == nil {
			return nil
		}
		return v.AllowedConfigValues
	}).(ReusableConfigWrapperArrayOutput)
}

// AllowedSubjectAltNames specifies the allowed values for SubjectAltNames by the CertificateAuthority when issuing Certificates.
type AllowedSubjectAltNames struct {
	// Optional. Specifies if to allow custom X509Extension values.
	AllowCustomSans *bool `pulumi:"allowCustomSans"`
	// Optional. Specifies if glob patterns used for allowed_dns_names allow wildcard certificates. If this is set, certificate requests with wildcard domains will be permitted to match a glob pattern specified in allowed_dns_names. Otherwise, certificate requests with wildcard domains will be permitted only if allowed_dns_names contains a literal wildcard.
	AllowGlobbingDnsWildcards *bool `pulumi:"allowGlobbingDnsWildcards"`
	// Optional. Contains valid, fully-qualified host names. Glob patterns are also supported. To allow an explicit wildcard certificate, escape with backlash (i.e. "\*"). E.g. for globbed entries: '*bar.com' will allow 'foo.bar.com', but not '*.bar.com', unless the allow_globbing_dns_wildcards field is set. E.g. for wildcard entries: '\*.bar.com' will allow '*.bar.com', but not 'foo.bar.com'.
	AllowedDnsNames []string `pulumi:"allowedDnsNames"`
	// Optional. Contains valid RFC 2822 E-mail addresses. Glob patterns are also supported.
	AllowedEmailAddresses []string `pulumi:"allowedEmailAddresses"`
	// Optional. Contains valid 32-bit IPv4 addresses and subnet ranges or RFC 4291 IPv6 addresses and subnet ranges. Subnet ranges are specified using the '/' notation (e.g. 10.0.0.0/8, 2001:700:300:1800::/64). Glob patterns are supported only for ip address entries (i.e. not for subnet ranges).
	AllowedIps []string `pulumi:"allowedIps"`
	// Optional. Contains valid RFC 3986 URIs. Glob patterns are also supported. To match across path seperators (i.e. '/') use the double star glob pattern (i.e. '**').
	AllowedUris []string `pulumi:"allowedUris"`
}

// AllowedSubjectAltNamesInput is an input type that accepts AllowedSubjectAltNamesArgs and AllowedSubjectAltNamesOutput values.
// You can construct a concrete instance of `AllowedSubjectAltNamesInput` via:
//
//          AllowedSubjectAltNamesArgs{...}
type AllowedSubjectAltNamesInput interface {
	pulumi.Input

	ToAllowedSubjectAltNamesOutput() AllowedSubjectAltNamesOutput
	ToAllowedSubjectAltNamesOutputWithContext(context.Context) AllowedSubjectAltNamesOutput
}

// AllowedSubjectAltNames specifies the allowed values for SubjectAltNames by the CertificateAuthority when issuing Certificates.
type AllowedSubjectAltNamesArgs struct {
	// Optional. Specifies if to allow custom X509Extension values.
	AllowCustomSans pulumi.BoolPtrInput `pulumi:"allowCustomSans"`
	// Optional. Specifies if glob patterns used for allowed_dns_names allow wildcard certificates. If this is set, certificate requests with wildcard domains will be permitted to match a glob pattern specified in allowed_dns_names. Otherwise, certificate requests with wildcard domains will be permitted only if allowed_dns_names contains a literal wildcard.
	AllowGlobbingDnsWildcards pulumi.BoolPtrInput `pulumi:"allowGlobbingDnsWildcards"`
	// Optional. Contains valid, fully-qualified host names. Glob patterns are also supported. To allow an explicit wildcard certificate, escape with backlash (i.e. "\*"). E.g. for globbed entries: '*bar.com' will allow 'foo.bar.com', but not '*.bar.com', unless the allow_globbing_dns_wildcards field is set. E.g. for wildcard entries: '\*.bar.com' will allow '*.bar.com', but not 'foo.bar.com'.
	AllowedDnsNames pulumi.StringArrayInput `pulumi:"allowedDnsNames"`
	// Optional. Contains valid RFC 2822 E-mail addresses. Glob patterns are also supported.
	AllowedEmailAddresses pulumi.StringArrayInput `pulumi:"allowedEmailAddresses"`
	// Optional. Contains valid 32-bit IPv4 addresses and subnet ranges or RFC 4291 IPv6 addresses and subnet ranges. Subnet ranges are specified using the '/' notation (e.g. 10.0.0.0/8, 2001:700:300:1800::/64). Glob patterns are supported only for ip address entries (i.e. not for subnet ranges).
	AllowedIps pulumi.StringArrayInput `pulumi:"allowedIps"`
	// Optional. Contains valid RFC 3986 URIs. Glob patterns are also supported. To match across path seperators (i.e. '/') use the double star glob pattern (i.e. '**').
	AllowedUris pulumi.StringArrayInput `pulumi:"allowedUris"`
}

func (AllowedSubjectAltNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedSubjectAltNames)(nil)).Elem()
}

func (i AllowedSubjectAltNamesArgs) ToAllowedSubjectAltNamesOutput() AllowedSubjectAltNamesOutput {
	return i.ToAllowedSubjectAltNamesOutputWithContext(context.Background())
}

func (i AllowedSubjectAltNamesArgs) ToAllowedSubjectAltNamesOutputWithContext(ctx context.Context) AllowedSubjectAltNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedSubjectAltNamesOutput)
}

func (i AllowedSubjectAltNamesArgs) ToAllowedSubjectAltNamesPtrOutput() AllowedSubjectAltNamesPtrOutput {
	return i.ToAllowedSubjectAltNamesPtrOutputWithContext(context.Background())
}

func (i AllowedSubjectAltNamesArgs) ToAllowedSubjectAltNamesPtrOutputWithContext(ctx context.Context) AllowedSubjectAltNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedSubjectAltNamesOutput).ToAllowedSubjectAltNamesPtrOutputWithContext(ctx)
}

// AllowedSubjectAltNamesPtrInput is an input type that accepts AllowedSubjectAltNamesArgs, AllowedSubjectAltNamesPtr and AllowedSubjectAltNamesPtrOutput values.
// You can construct a concrete instance of `AllowedSubjectAltNamesPtrInput` via:
//
//          AllowedSubjectAltNamesArgs{...}
//
//  or:
//
//          nil
type AllowedSubjectAltNamesPtrInput interface {
	pulumi.Input

	ToAllowedSubjectAltNamesPtrOutput() AllowedSubjectAltNamesPtrOutput
	ToAllowedSubjectAltNamesPtrOutputWithContext(context.Context) AllowedSubjectAltNamesPtrOutput
}

type allowedSubjectAltNamesPtrType AllowedSubjectAltNamesArgs

func AllowedSubjectAltNamesPtr(v *AllowedSubjectAltNamesArgs) AllowedSubjectAltNamesPtrInput {
	return (*allowedSubjectAltNamesPtrType)(v)
}

func (*allowedSubjectAltNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedSubjectAltNames)(nil)).Elem()
}

func (i *allowedSubjectAltNamesPtrType) ToAllowedSubjectAltNamesPtrOutput() AllowedSubjectAltNamesPtrOutput {
	return i.ToAllowedSubjectAltNamesPtrOutputWithContext(context.Background())
}

func (i *allowedSubjectAltNamesPtrType) ToAllowedSubjectAltNamesPtrOutputWithContext(ctx context.Context) AllowedSubjectAltNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedSubjectAltNamesPtrOutput)
}

// AllowedSubjectAltNames specifies the allowed values for SubjectAltNames by the CertificateAuthority when issuing Certificates.
type AllowedSubjectAltNamesOutput struct{ *pulumi.OutputState }

func (AllowedSubjectAltNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedSubjectAltNames)(nil)).Elem()
}

func (o AllowedSubjectAltNamesOutput) ToAllowedSubjectAltNamesOutput() AllowedSubjectAltNamesOutput {
	return o
}

func (o AllowedSubjectAltNamesOutput) ToAllowedSubjectAltNamesOutputWithContext(ctx context.Context) AllowedSubjectAltNamesOutput {
	return o
}

func (o AllowedSubjectAltNamesOutput) ToAllowedSubjectAltNamesPtrOutput() AllowedSubjectAltNamesPtrOutput {
	return o.ToAllowedSubjectAltNamesPtrOutputWithContext(context.Background())
}

func (o AllowedSubjectAltNamesOutput) ToAllowedSubjectAltNamesPtrOutputWithContext(ctx context.Context) AllowedSubjectAltNamesPtrOutput {
	return o.ApplyT(func(v AllowedSubjectAltNames) *AllowedSubjectAltNames {
		return &v
	}).(AllowedSubjectAltNamesPtrOutput)
}

// Optional. Specifies if to allow custom X509Extension values.
func (o AllowedSubjectAltNamesOutput) AllowCustomSans() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AllowedSubjectAltNames) *bool { return v.AllowCustomSans }).(pulumi.BoolPtrOutput)
}

// Optional. Specifies if glob patterns used for allowed_dns_names allow wildcard certificates. If this is set, certificate requests with wildcard domains will be permitted to match a glob pattern specified in allowed_dns_names. Otherwise, certificate requests with wildcard domains will be permitted only if allowed_dns_names contains a literal wildcard.
func (o AllowedSubjectAltNamesOutput) AllowGlobbingDnsWildcards() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AllowedSubjectAltNames) *bool { return v.AllowGlobbingDnsWildcards }).(pulumi.BoolPtrOutput)
}

// Optional. Contains valid, fully-qualified host names. Glob patterns are also supported. To allow an explicit wildcard certificate, escape with backlash (i.e. "\*"). E.g. for globbed entries: '*bar.com' will allow 'foo.bar.com', but not '*.bar.com', unless the allow_globbing_dns_wildcards field is set. E.g. for wildcard entries: '\*.bar.com' will allow '*.bar.com', but not 'foo.bar.com'.
func (o AllowedSubjectAltNamesOutput) AllowedDnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowedSubjectAltNames) []string { return v.AllowedDnsNames }).(pulumi.StringArrayOutput)
}

// Optional. Contains valid RFC 2822 E-mail addresses. Glob patterns are also supported.
func (o AllowedSubjectAltNamesOutput) AllowedEmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowedSubjectAltNames) []string { return v.AllowedEmailAddresses }).(pulumi.StringArrayOutput)
}

// Optional. Contains valid 32-bit IPv4 addresses and subnet ranges or RFC 4291 IPv6 addresses and subnet ranges. Subnet ranges are specified using the '/' notation (e.g. 10.0.0.0/8, 2001:700:300:1800::/64). Glob patterns are supported only for ip address entries (i.e. not for subnet ranges).
func (o AllowedSubjectAltNamesOutput) AllowedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowedSubjectAltNames) []string { return v.AllowedIps }).(pulumi.StringArrayOutput)
}

// Optional. Contains valid RFC 3986 URIs. Glob patterns are also supported. To match across path seperators (i.e. '/') use the double star glob pattern (i.e. '**').
func (o AllowedSubjectAltNamesOutput) AllowedUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowedSubjectAltNames) []string { return v.AllowedUris }).(pulumi.StringArrayOutput)
}

type AllowedSubjectAltNamesPtrOutput struct{ *pulumi.OutputState }

func (AllowedSubjectAltNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedSubjectAltNames)(nil)).Elem()
}

func (o AllowedSubjectAltNamesPtrOutput) ToAllowedSubjectAltNamesPtrOutput() AllowedSubjectAltNamesPtrOutput {
	return o
}

func (o AllowedSubjectAltNamesPtrOutput) ToAllowedSubjectAltNamesPtrOutputWithContext(ctx context.Context) AllowedSubjectAltNamesPtrOutput {
	return o
}

func (o AllowedSubjectAltNamesPtrOutput) Elem() AllowedSubjectAltNamesOutput {
	return o.ApplyT(func(v *AllowedSubjectAltNames) AllowedSubjectAltNames { return *v }).(AllowedSubjectAltNamesOutput)
}

// Optional. Specifies if to allow custom X509Extension values.
func (o AllowedSubjectAltNamesPtrOutput) AllowCustomSans() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedSubjectAltNames) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCustomSans
	}).(pulumi.BoolPtrOutput)
}

// Optional. Specifies if glob patterns used for allowed_dns_names allow wildcard certificates. If this is set, certificate requests with wildcard domains will be permitted to match a glob pattern specified in allowed_dns_names. Otherwise, certificate requests with wildcard domains will be permitted only if allowed_dns_names contains a literal wildcard.
func (o AllowedSubjectAltNamesPtrOutput) AllowGlobbingDnsWildcards() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AllowedSubjectAltNames) *bool {
		if v == nil {
			return nil
		}
		return v.AllowGlobbingDnsWildcards
	}).(pulumi.BoolPtrOutput)
}

// Optional. Contains valid, fully-qualified host names. Glob patterns are also supported. To allow an explicit wildcard certificate, escape with backlash (i.e. "\*"). E.g. for globbed entries: '*bar.com' will allow 'foo.bar.com', but not '*.bar.com', unless the allow_globbing_dns_wildcards field is set. E.g. for wildcard entries: '\*.bar.com' will allow '*.bar.com', but not 'foo.bar.com'.
func (o AllowedSubjectAltNamesPtrOutput) AllowedDnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllowedSubjectAltNames) []string {
		if v == nil {
			return nil
		}
		return v.AllowedDnsNames
	}).(pulumi.StringArrayOutput)
}

// Optional. Contains valid RFC 2822 E-mail addresses. Glob patterns are also supported.
func (o AllowedSubjectAltNamesPtrOutput) AllowedEmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllowedSubjectAltNames) []string {
		if v == nil {
			return nil
		}
		return v.AllowedEmailAddresses
	}).(pulumi.StringArrayOutput)
}

// Optional. Contains valid 32-bit IPv4 addresses and subnet ranges or RFC 4291 IPv6 addresses and subnet ranges. Subnet ranges are specified using the '/' notation (e.g. 10.0.0.0/8, 2001:700:300:1800::/64). Glob patterns are supported only for ip address entries (i.e. not for subnet ranges).
func (o AllowedSubjectAltNamesPtrOutput) AllowedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllowedSubjectAltNames) []string {
		if v == nil {
			return nil
		}
		return v.AllowedIps
	}).(pulumi.StringArrayOutput)
}

// Optional. Contains valid RFC 3986 URIs. Glob patterns are also supported. To match across path seperators (i.e. '/') use the double star glob pattern (i.e. '**').
func (o AllowedSubjectAltNamesPtrOutput) AllowedUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllowedSubjectAltNames) []string {
		if v == nil {
			return nil
		}
		return v.AllowedUris
	}).(pulumi.StringArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *string `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType pulumi.StringPtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Describes values that are relevant in a CA certificate.
type CaOptions struct {
	// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
	IsCa *bool `pulumi:"isCa"`
	// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
	MaxIssuerPathLength *int `pulumi:"maxIssuerPathLength"`
}

// CaOptionsInput is an input type that accepts CaOptionsArgs and CaOptionsOutput values.
// You can construct a concrete instance of `CaOptionsInput` via:
//
//          CaOptionsArgs{...}
type CaOptionsInput interface {
	pulumi.Input

	ToCaOptionsOutput() CaOptionsOutput
	ToCaOptionsOutputWithContext(context.Context) CaOptionsOutput
}

// Describes values that are relevant in a CA certificate.
type CaOptionsArgs struct {
	// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
	IsCa pulumi.BoolPtrInput `pulumi:"isCa"`
	// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
	MaxIssuerPathLength pulumi.IntPtrInput `pulumi:"maxIssuerPathLength"`
}

func (CaOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CaOptions)(nil)).Elem()
}

func (i CaOptionsArgs) ToCaOptionsOutput() CaOptionsOutput {
	return i.ToCaOptionsOutputWithContext(context.Background())
}

func (i CaOptionsArgs) ToCaOptionsOutputWithContext(ctx context.Context) CaOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaOptionsOutput)
}

func (i CaOptionsArgs) ToCaOptionsPtrOutput() CaOptionsPtrOutput {
	return i.ToCaOptionsPtrOutputWithContext(context.Background())
}

func (i CaOptionsArgs) ToCaOptionsPtrOutputWithContext(ctx context.Context) CaOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaOptionsOutput).ToCaOptionsPtrOutputWithContext(ctx)
}

// CaOptionsPtrInput is an input type that accepts CaOptionsArgs, CaOptionsPtr and CaOptionsPtrOutput values.
// You can construct a concrete instance of `CaOptionsPtrInput` via:
//
//          CaOptionsArgs{...}
//
//  or:
//
//          nil
type CaOptionsPtrInput interface {
	pulumi.Input

	ToCaOptionsPtrOutput() CaOptionsPtrOutput
	ToCaOptionsPtrOutputWithContext(context.Context) CaOptionsPtrOutput
}

type caOptionsPtrType CaOptionsArgs

func CaOptionsPtr(v *CaOptionsArgs) CaOptionsPtrInput {
	return (*caOptionsPtrType)(v)
}

func (*caOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CaOptions)(nil)).Elem()
}

func (i *caOptionsPtrType) ToCaOptionsPtrOutput() CaOptionsPtrOutput {
	return i.ToCaOptionsPtrOutputWithContext(context.Background())
}

func (i *caOptionsPtrType) ToCaOptionsPtrOutputWithContext(ctx context.Context) CaOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaOptionsPtrOutput)
}

// Describes values that are relevant in a CA certificate.
type CaOptionsOutput struct{ *pulumi.OutputState }

func (CaOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaOptions)(nil)).Elem()
}

func (o CaOptionsOutput) ToCaOptionsOutput() CaOptionsOutput {
	return o
}

func (o CaOptionsOutput) ToCaOptionsOutputWithContext(ctx context.Context) CaOptionsOutput {
	return o
}

func (o CaOptionsOutput) ToCaOptionsPtrOutput() CaOptionsPtrOutput {
	return o.ToCaOptionsPtrOutputWithContext(context.Background())
}

func (o CaOptionsOutput) ToCaOptionsPtrOutputWithContext(ctx context.Context) CaOptionsPtrOutput {
	return o.ApplyT(func(v CaOptions) *CaOptions {
		return &v
	}).(CaOptionsPtrOutput)
}

// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
func (o CaOptionsOutput) IsCa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CaOptions) *bool { return v.IsCa }).(pulumi.BoolPtrOutput)
}

// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
func (o CaOptionsOutput) MaxIssuerPathLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CaOptions) *int { return v.MaxIssuerPathLength }).(pulumi.IntPtrOutput)
}

type CaOptionsPtrOutput struct{ *pulumi.OutputState }

func (CaOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CaOptions)(nil)).Elem()
}

func (o CaOptionsPtrOutput) ToCaOptionsPtrOutput() CaOptionsPtrOutput {
	return o
}

func (o CaOptionsPtrOutput) ToCaOptionsPtrOutputWithContext(ctx context.Context) CaOptionsPtrOutput {
	return o
}

func (o CaOptionsPtrOutput) Elem() CaOptionsOutput {
	return o.ApplyT(func(v *CaOptions) CaOptions { return *v }).(CaOptionsOutput)
}

// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
func (o CaOptionsPtrOutput) IsCa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CaOptions) *bool {
		if v == nil {
			return nil
		}
		return v.IsCa
	}).(pulumi.BoolPtrOutput)
}

// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
func (o CaOptionsPtrOutput) MaxIssuerPathLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CaOptions) *int {
		if v == nil {
			return nil
		}
		return v.MaxIssuerPathLength
	}).(pulumi.IntPtrOutput)
}

// The issuing policy for a CertificateAuthority. Certificates will not be successfully issued from this CertificateAuthority if they violate the policy.
type CertificateAuthorityPolicy struct {
	// Optional. If any value is specified here, then all Certificates issued by the CertificateAuthority must match at least one listed value. If no value is specified, all values will be allowed for this fied. Glob patterns are also supported.
	AllowedCommonNames []string `pulumi:"allowedCommonNames"`
	// Optional. All Certificates issued by the CertificateAuthority must match at least one listed ReusableConfigWrapper in the list.
	AllowedConfigList *AllowedConfigList `pulumi:"allowedConfigList"`
	// Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
	AllowedIssuanceModes *IssuanceModes `pulumi:"allowedIssuanceModes"`
	// Optional. If any Subject is specified here, then all Certificates issued by the CertificateAuthority must match at least one listed Subject. If a Subject has an empty field, any value will be allowed for that field.
	AllowedLocationsAndOrganizations []Subject `pulumi:"allowedLocationsAndOrganizations"`
	// Optional. If a AllowedSubjectAltNames is specified here, then all Certificates issued by the CertificateAuthority must match AllowedSubjectAltNames. If no value or an empty value is specified, any value will be allowed for the SubjectAltNames field.
	AllowedSans *AllowedSubjectAltNames `pulumi:"allowedSans"`
	// Optional. The maximum lifetime allowed by the CertificateAuthority. Note that if the any part if the issuing chain expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated.
	MaximumLifetime *string `pulumi:"maximumLifetime"`
	// Optional. All Certificates issued by the CertificateAuthority will use the provided configuration values, overwriting any requested configuration values.
	OverwriteConfigValues *ReusableConfigWrapper `pulumi:"overwriteConfigValues"`
}

// CertificateAuthorityPolicyInput is an input type that accepts CertificateAuthorityPolicyArgs and CertificateAuthorityPolicyOutput values.
// You can construct a concrete instance of `CertificateAuthorityPolicyInput` via:
//
//          CertificateAuthorityPolicyArgs{...}
type CertificateAuthorityPolicyInput interface {
	pulumi.Input

	ToCertificateAuthorityPolicyOutput() CertificateAuthorityPolicyOutput
	ToCertificateAuthorityPolicyOutputWithContext(context.Context) CertificateAuthorityPolicyOutput
}

// The issuing policy for a CertificateAuthority. Certificates will not be successfully issued from this CertificateAuthority if they violate the policy.
type CertificateAuthorityPolicyArgs struct {
	// Optional. If any value is specified here, then all Certificates issued by the CertificateAuthority must match at least one listed value. If no value is specified, all values will be allowed for this fied. Glob patterns are also supported.
	AllowedCommonNames pulumi.StringArrayInput `pulumi:"allowedCommonNames"`
	// Optional. All Certificates issued by the CertificateAuthority must match at least one listed ReusableConfigWrapper in the list.
	AllowedConfigList AllowedConfigListPtrInput `pulumi:"allowedConfigList"`
	// Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
	AllowedIssuanceModes IssuanceModesPtrInput `pulumi:"allowedIssuanceModes"`
	// Optional. If any Subject is specified here, then all Certificates issued by the CertificateAuthority must match at least one listed Subject. If a Subject has an empty field, any value will be allowed for that field.
	AllowedLocationsAndOrganizations SubjectArrayInput `pulumi:"allowedLocationsAndOrganizations"`
	// Optional. If a AllowedSubjectAltNames is specified here, then all Certificates issued by the CertificateAuthority must match AllowedSubjectAltNames. If no value or an empty value is specified, any value will be allowed for the SubjectAltNames field.
	AllowedSans AllowedSubjectAltNamesPtrInput `pulumi:"allowedSans"`
	// Optional. The maximum lifetime allowed by the CertificateAuthority. Note that if the any part if the issuing chain expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated.
	MaximumLifetime pulumi.StringPtrInput `pulumi:"maximumLifetime"`
	// Optional. All Certificates issued by the CertificateAuthority will use the provided configuration values, overwriting any requested configuration values.
	OverwriteConfigValues ReusableConfigWrapperPtrInput `pulumi:"overwriteConfigValues"`
}

func (CertificateAuthorityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityPolicy)(nil)).Elem()
}

func (i CertificateAuthorityPolicyArgs) ToCertificateAuthorityPolicyOutput() CertificateAuthorityPolicyOutput {
	return i.ToCertificateAuthorityPolicyOutputWithContext(context.Background())
}

func (i CertificateAuthorityPolicyArgs) ToCertificateAuthorityPolicyOutputWithContext(ctx context.Context) CertificateAuthorityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityPolicyOutput)
}

func (i CertificateAuthorityPolicyArgs) ToCertificateAuthorityPolicyPtrOutput() CertificateAuthorityPolicyPtrOutput {
	return i.ToCertificateAuthorityPolicyPtrOutputWithContext(context.Background())
}

func (i CertificateAuthorityPolicyArgs) ToCertificateAuthorityPolicyPtrOutputWithContext(ctx context.Context) CertificateAuthorityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityPolicyOutput).ToCertificateAuthorityPolicyPtrOutputWithContext(ctx)
}

// CertificateAuthorityPolicyPtrInput is an input type that accepts CertificateAuthorityPolicyArgs, CertificateAuthorityPolicyPtr and CertificateAuthorityPolicyPtrOutput values.
// You can construct a concrete instance of `CertificateAuthorityPolicyPtrInput` via:
//
//          CertificateAuthorityPolicyArgs{...}
//
//  or:
//
//          nil
type CertificateAuthorityPolicyPtrInput interface {
	pulumi.Input

	ToCertificateAuthorityPolicyPtrOutput() CertificateAuthorityPolicyPtrOutput
	ToCertificateAuthorityPolicyPtrOutputWithContext(context.Context) CertificateAuthorityPolicyPtrOutput
}

type certificateAuthorityPolicyPtrType CertificateAuthorityPolicyArgs

func CertificateAuthorityPolicyPtr(v *CertificateAuthorityPolicyArgs) CertificateAuthorityPolicyPtrInput {
	return (*certificateAuthorityPolicyPtrType)(v)
}

func (*certificateAuthorityPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateAuthorityPolicy)(nil)).Elem()
}

func (i *certificateAuthorityPolicyPtrType) ToCertificateAuthorityPolicyPtrOutput() CertificateAuthorityPolicyPtrOutput {
	return i.ToCertificateAuthorityPolicyPtrOutputWithContext(context.Background())
}

func (i *certificateAuthorityPolicyPtrType) ToCertificateAuthorityPolicyPtrOutputWithContext(ctx context.Context) CertificateAuthorityPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityPolicyPtrOutput)
}

// The issuing policy for a CertificateAuthority. Certificates will not be successfully issued from this CertificateAuthority if they violate the policy.
type CertificateAuthorityPolicyOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityPolicy)(nil)).Elem()
}

func (o CertificateAuthorityPolicyOutput) ToCertificateAuthorityPolicyOutput() CertificateAuthorityPolicyOutput {
	return o
}

func (o CertificateAuthorityPolicyOutput) ToCertificateAuthorityPolicyOutputWithContext(ctx context.Context) CertificateAuthorityPolicyOutput {
	return o
}

func (o CertificateAuthorityPolicyOutput) ToCertificateAuthorityPolicyPtrOutput() CertificateAuthorityPolicyPtrOutput {
	return o.ToCertificateAuthorityPolicyPtrOutputWithContext(context.Background())
}

func (o CertificateAuthorityPolicyOutput) ToCertificateAuthorityPolicyPtrOutputWithContext(ctx context.Context) CertificateAuthorityPolicyPtrOutput {
	return o.ApplyT(func(v CertificateAuthorityPolicy) *CertificateAuthorityPolicy {
		return &v
	}).(CertificateAuthorityPolicyPtrOutput)
}

// Optional. If any value is specified here, then all Certificates issued by the CertificateAuthority must match at least one listed value. If no value is specified, all values will be allowed for this fied. Glob patterns are also supported.
func (o CertificateAuthorityPolicyOutput) AllowedCommonNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateAuthorityPolicy) []string { return v.AllowedCommonNames }).(pulumi.StringArrayOutput)
}

// Optional. All Certificates issued by the CertificateAuthority must match at least one listed ReusableConfigWrapper in the list.
func (o CertificateAuthorityPolicyOutput) AllowedConfigList() AllowedConfigListPtrOutput {
	return o.ApplyT(func(v CertificateAuthorityPolicy) *AllowedConfigList { return v.AllowedConfigList }).(AllowedConfigListPtrOutput)
}

// Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
func (o CertificateAuthorityPolicyOutput) AllowedIssuanceModes() IssuanceModesPtrOutput {
	return o.ApplyT(func(v CertificateAuthorityPolicy) *IssuanceModes { return v.AllowedIssuanceModes }).(IssuanceModesPtrOutput)
}

// Optional. If any Subject is specified here, then all Certificates issued by the CertificateAuthority must match at least one listed Subject. If a Subject has an empty field, any value will be allowed for that field.
func (o CertificateAuthorityPolicyOutput) AllowedLocationsAndOrganizations() SubjectArrayOutput {
	return o.ApplyT(func(v CertificateAuthorityPolicy) []Subject { return v.AllowedLocationsAndOrganizations }).(SubjectArrayOutput)
}

// Optional. If a AllowedSubjectAltNames is specified here, then all Certificates issued by the CertificateAuthority must match AllowedSubjectAltNames. If no value or an empty value is specified, any value will be allowed for the SubjectAltNames field.
func (o CertificateAuthorityPolicyOutput) AllowedSans() AllowedSubjectAltNamesPtrOutput {
	return o.ApplyT(func(v CertificateAuthorityPolicy) *AllowedSubjectAltNames { return v.AllowedSans }).(AllowedSubjectAltNamesPtrOutput)
}

// Optional. The maximum lifetime allowed by the CertificateAuthority. Note that if the any part if the issuing chain expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated.
func (o CertificateAuthorityPolicyOutput) MaximumLifetime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateAuthorityPolicy) *string { return v.MaximumLifetime }).(pulumi.StringPtrOutput)
}

// Optional. All Certificates issued by the CertificateAuthority will use the provided configuration values, overwriting any requested configuration values.
func (o CertificateAuthorityPolicyOutput) OverwriteConfigValues() ReusableConfigWrapperPtrOutput {
	return o.ApplyT(func(v CertificateAuthorityPolicy) *ReusableConfigWrapper { return v.OverwriteConfigValues }).(ReusableConfigWrapperPtrOutput)
}

type CertificateAuthorityPolicyPtrOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateAuthorityPolicy)(nil)).Elem()
}

func (o CertificateAuthorityPolicyPtrOutput) ToCertificateAuthorityPolicyPtrOutput() CertificateAuthorityPolicyPtrOutput {
	return o
}

func (o CertificateAuthorityPolicyPtrOutput) ToCertificateAuthorityPolicyPtrOutputWithContext(ctx context.Context) CertificateAuthorityPolicyPtrOutput {
	return o
}

func (o CertificateAuthorityPolicyPtrOutput) Elem() CertificateAuthorityPolicyOutput {
	return o.ApplyT(func(v *CertificateAuthorityPolicy) CertificateAuthorityPolicy { return *v }).(CertificateAuthorityPolicyOutput)
}

// Optional. If any value is specified here, then all Certificates issued by the CertificateAuthority must match at least one listed value. If no value is specified, all values will be allowed for this fied. Glob patterns are also supported.
func (o CertificateAuthorityPolicyPtrOutput) AllowedCommonNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateAuthorityPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowedCommonNames
	}).(pulumi.StringArrayOutput)
}

// Optional. All Certificates issued by the CertificateAuthority must match at least one listed ReusableConfigWrapper in the list.
func (o CertificateAuthorityPolicyPtrOutput) AllowedConfigList() AllowedConfigListPtrOutput {
	return o.ApplyT(func(v *CertificateAuthorityPolicy) *AllowedConfigList {
		if v == nil {
			return nil
		}
		return v.AllowedConfigList
	}).(AllowedConfigListPtrOutput)
}

// Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
func (o CertificateAuthorityPolicyPtrOutput) AllowedIssuanceModes() IssuanceModesPtrOutput {
	return o.ApplyT(func(v *CertificateAuthorityPolicy) *IssuanceModes {
		if v == nil {
			return nil
		}
		return v.AllowedIssuanceModes
	}).(IssuanceModesPtrOutput)
}

// Optional. If any Subject is specified here, then all Certificates issued by the CertificateAuthority must match at least one listed Subject. If a Subject has an empty field, any value will be allowed for that field.
func (o CertificateAuthorityPolicyPtrOutput) AllowedLocationsAndOrganizations() SubjectArrayOutput {
	return o.ApplyT(func(v *CertificateAuthorityPolicy) []Subject {
		if v == nil {
			return nil
		}
		return v.AllowedLocationsAndOrganizations
	}).(SubjectArrayOutput)
}

// Optional. If a AllowedSubjectAltNames is specified here, then all Certificates issued by the CertificateAuthority must match AllowedSubjectAltNames. If no value or an empty value is specified, any value will be allowed for the SubjectAltNames field.
func (o CertificateAuthorityPolicyPtrOutput) AllowedSans() AllowedSubjectAltNamesPtrOutput {
	return o.ApplyT(func(v *CertificateAuthorityPolicy) *AllowedSubjectAltNames {
		if v == nil {
			return nil
		}
		return v.AllowedSans
	}).(AllowedSubjectAltNamesPtrOutput)
}

// Optional. The maximum lifetime allowed by the CertificateAuthority. Note that if the any part if the issuing chain expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated.
func (o CertificateAuthorityPolicyPtrOutput) MaximumLifetime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateAuthorityPolicy) *string {
		if v == nil {
			return nil
		}
		return v.MaximumLifetime
	}).(pulumi.StringPtrOutput)
}

// Optional. All Certificates issued by the CertificateAuthority will use the provided configuration values, overwriting any requested configuration values.
func (o CertificateAuthorityPolicyPtrOutput) OverwriteConfigValues() ReusableConfigWrapperPtrOutput {
	return o.ApplyT(func(v *CertificateAuthorityPolicy) *ReusableConfigWrapper {
		if v == nil {
			return nil
		}
		return v.OverwriteConfigValues
	}).(ReusableConfigWrapperPtrOutput)
}

// A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
type CertificateConfig struct {
	// Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
	PublicKey *PublicKey `pulumi:"publicKey"`
	// Required. Describes how some of the technical fields in a certificate should be populated.
	ReusableConfig *ReusableConfigWrapper `pulumi:"reusableConfig"`
	// Required. Specifies some of the values in a certificate that are related to the subject.
	SubjectConfig *SubjectConfig `pulumi:"subjectConfig"`
}

// CertificateConfigInput is an input type that accepts CertificateConfigArgs and CertificateConfigOutput values.
// You can construct a concrete instance of `CertificateConfigInput` via:
//
//          CertificateConfigArgs{...}
type CertificateConfigInput interface {
	pulumi.Input

	ToCertificateConfigOutput() CertificateConfigOutput
	ToCertificateConfigOutputWithContext(context.Context) CertificateConfigOutput
}

// A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
type CertificateConfigArgs struct {
	// Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
	PublicKey PublicKeyPtrInput `pulumi:"publicKey"`
	// Required. Describes how some of the technical fields in a certificate should be populated.
	ReusableConfig ReusableConfigWrapperPtrInput `pulumi:"reusableConfig"`
	// Required. Specifies some of the values in a certificate that are related to the subject.
	SubjectConfig SubjectConfigPtrInput `pulumi:"subjectConfig"`
}

func (CertificateConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateConfig)(nil)).Elem()
}

func (i CertificateConfigArgs) ToCertificateConfigOutput() CertificateConfigOutput {
	return i.ToCertificateConfigOutputWithContext(context.Background())
}

func (i CertificateConfigArgs) ToCertificateConfigOutputWithContext(ctx context.Context) CertificateConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateConfigOutput)
}

func (i CertificateConfigArgs) ToCertificateConfigPtrOutput() CertificateConfigPtrOutput {
	return i.ToCertificateConfigPtrOutputWithContext(context.Background())
}

func (i CertificateConfigArgs) ToCertificateConfigPtrOutputWithContext(ctx context.Context) CertificateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateConfigOutput).ToCertificateConfigPtrOutputWithContext(ctx)
}

// CertificateConfigPtrInput is an input type that accepts CertificateConfigArgs, CertificateConfigPtr and CertificateConfigPtrOutput values.
// You can construct a concrete instance of `CertificateConfigPtrInput` via:
//
//          CertificateConfigArgs{...}
//
//  or:
//
//          nil
type CertificateConfigPtrInput interface {
	pulumi.Input

	ToCertificateConfigPtrOutput() CertificateConfigPtrOutput
	ToCertificateConfigPtrOutputWithContext(context.Context) CertificateConfigPtrOutput
}

type certificateConfigPtrType CertificateConfigArgs

func CertificateConfigPtr(v *CertificateConfigArgs) CertificateConfigPtrInput {
	return (*certificateConfigPtrType)(v)
}

func (*certificateConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateConfig)(nil)).Elem()
}

func (i *certificateConfigPtrType) ToCertificateConfigPtrOutput() CertificateConfigPtrOutput {
	return i.ToCertificateConfigPtrOutputWithContext(context.Background())
}

func (i *certificateConfigPtrType) ToCertificateConfigPtrOutputWithContext(ctx context.Context) CertificateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateConfigPtrOutput)
}

// A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
type CertificateConfigOutput struct{ *pulumi.OutputState }

func (CertificateConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateConfig)(nil)).Elem()
}

func (o CertificateConfigOutput) ToCertificateConfigOutput() CertificateConfigOutput {
	return o
}

func (o CertificateConfigOutput) ToCertificateConfigOutputWithContext(ctx context.Context) CertificateConfigOutput {
	return o
}

func (o CertificateConfigOutput) ToCertificateConfigPtrOutput() CertificateConfigPtrOutput {
	return o.ToCertificateConfigPtrOutputWithContext(context.Background())
}

func (o CertificateConfigOutput) ToCertificateConfigPtrOutputWithContext(ctx context.Context) CertificateConfigPtrOutput {
	return o.ApplyT(func(v CertificateConfig) *CertificateConfig {
		return &v
	}).(CertificateConfigPtrOutput)
}

// Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
func (o CertificateConfigOutput) PublicKey() PublicKeyPtrOutput {
	return o.ApplyT(func(v CertificateConfig) *PublicKey { return v.PublicKey }).(PublicKeyPtrOutput)
}

// Required. Describes how some of the technical fields in a certificate should be populated.
func (o CertificateConfigOutput) ReusableConfig() ReusableConfigWrapperPtrOutput {
	return o.ApplyT(func(v CertificateConfig) *ReusableConfigWrapper { return v.ReusableConfig }).(ReusableConfigWrapperPtrOutput)
}

// Required. Specifies some of the values in a certificate that are related to the subject.
func (o CertificateConfigOutput) SubjectConfig() SubjectConfigPtrOutput {
	return o.ApplyT(func(v CertificateConfig) *SubjectConfig { return v.SubjectConfig }).(SubjectConfigPtrOutput)
}

type CertificateConfigPtrOutput struct{ *pulumi.OutputState }

func (CertificateConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateConfig)(nil)).Elem()
}

func (o CertificateConfigPtrOutput) ToCertificateConfigPtrOutput() CertificateConfigPtrOutput {
	return o
}

func (o CertificateConfigPtrOutput) ToCertificateConfigPtrOutputWithContext(ctx context.Context) CertificateConfigPtrOutput {
	return o
}

func (o CertificateConfigPtrOutput) Elem() CertificateConfigOutput {
	return o.ApplyT(func(v *CertificateConfig) CertificateConfig { return *v }).(CertificateConfigOutput)
}

// Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
func (o CertificateConfigPtrOutput) PublicKey() PublicKeyPtrOutput {
	return o.ApplyT(func(v *CertificateConfig) *PublicKey {
		if v == nil {
			return nil
		}
		return v.PublicKey
	}).(PublicKeyPtrOutput)
}

// Required. Describes how some of the technical fields in a certificate should be populated.
func (o CertificateConfigPtrOutput) ReusableConfig() ReusableConfigWrapperPtrOutput {
	return o.ApplyT(func(v *CertificateConfig) *ReusableConfigWrapper {
		if v == nil {
			return nil
		}
		return v.ReusableConfig
	}).(ReusableConfigWrapperPtrOutput)
}

// Required. Specifies some of the values in a certificate that are related to the subject.
func (o CertificateConfigPtrOutput) SubjectConfig() SubjectConfigPtrOutput {
	return o.ApplyT(func(v *CertificateConfig) *SubjectConfig {
		if v == nil {
			return nil
		}
		return v.SubjectConfig
	}).(SubjectConfigPtrOutput)
}

// A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.
type CertificateDescription struct {
	// Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access" extension in the certificate.
	AiaIssuingCertificateUrls []string `pulumi:"aiaIssuingCertificateUrls"`
	// Identifies the subject_key_id of the parent certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.1.1
	AuthorityKeyId *KeyId `pulumi:"authorityKeyId"`
	// The hash of the x.509 certificate.
	CertFingerprint *CertificateFingerprint `pulumi:"certFingerprint"`
	// Describes some of the technical fields in a certificate.
	ConfigValues *ReusableConfigValues `pulumi:"configValues"`
	// Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
	CrlDistributionPoints []string `pulumi:"crlDistributionPoints"`
	// The public key that corresponds to an issued certificate.
	PublicKey *PublicKey `pulumi:"publicKey"`
	// Describes some of the values in a certificate that are related to the subject and lifetime.
	SubjectDescription *SubjectDescription `pulumi:"subjectDescription"`
	// Provides a means of identifiying certificates that contain a particular public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
	SubjectKeyId *KeyId `pulumi:"subjectKeyId"`
}

// CertificateDescriptionInput is an input type that accepts CertificateDescriptionArgs and CertificateDescriptionOutput values.
// You can construct a concrete instance of `CertificateDescriptionInput` via:
//
//          CertificateDescriptionArgs{...}
type CertificateDescriptionInput interface {
	pulumi.Input

	ToCertificateDescriptionOutput() CertificateDescriptionOutput
	ToCertificateDescriptionOutputWithContext(context.Context) CertificateDescriptionOutput
}

// A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.
type CertificateDescriptionArgs struct {
	// Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access" extension in the certificate.
	AiaIssuingCertificateUrls pulumi.StringArrayInput `pulumi:"aiaIssuingCertificateUrls"`
	// Identifies the subject_key_id of the parent certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.1.1
	AuthorityKeyId KeyIdPtrInput `pulumi:"authorityKeyId"`
	// The hash of the x.509 certificate.
	CertFingerprint CertificateFingerprintPtrInput `pulumi:"certFingerprint"`
	// Describes some of the technical fields in a certificate.
	ConfigValues ReusableConfigValuesPtrInput `pulumi:"configValues"`
	// Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
	CrlDistributionPoints pulumi.StringArrayInput `pulumi:"crlDistributionPoints"`
	// The public key that corresponds to an issued certificate.
	PublicKey PublicKeyPtrInput `pulumi:"publicKey"`
	// Describes some of the values in a certificate that are related to the subject and lifetime.
	SubjectDescription SubjectDescriptionPtrInput `pulumi:"subjectDescription"`
	// Provides a means of identifiying certificates that contain a particular public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
	SubjectKeyId KeyIdPtrInput `pulumi:"subjectKeyId"`
}

func (CertificateDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDescription)(nil)).Elem()
}

func (i CertificateDescriptionArgs) ToCertificateDescriptionOutput() CertificateDescriptionOutput {
	return i.ToCertificateDescriptionOutputWithContext(context.Background())
}

func (i CertificateDescriptionArgs) ToCertificateDescriptionOutputWithContext(ctx context.Context) CertificateDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionOutput)
}

func (i CertificateDescriptionArgs) ToCertificateDescriptionPtrOutput() CertificateDescriptionPtrOutput {
	return i.ToCertificateDescriptionPtrOutputWithContext(context.Background())
}

func (i CertificateDescriptionArgs) ToCertificateDescriptionPtrOutputWithContext(ctx context.Context) CertificateDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionOutput).ToCertificateDescriptionPtrOutputWithContext(ctx)
}

// CertificateDescriptionPtrInput is an input type that accepts CertificateDescriptionArgs, CertificateDescriptionPtr and CertificateDescriptionPtrOutput values.
// You can construct a concrete instance of `CertificateDescriptionPtrInput` via:
//
//          CertificateDescriptionArgs{...}
//
//  or:
//
//          nil
type CertificateDescriptionPtrInput interface {
	pulumi.Input

	ToCertificateDescriptionPtrOutput() CertificateDescriptionPtrOutput
	ToCertificateDescriptionPtrOutputWithContext(context.Context) CertificateDescriptionPtrOutput
}

type certificateDescriptionPtrType CertificateDescriptionArgs

func CertificateDescriptionPtr(v *CertificateDescriptionArgs) CertificateDescriptionPtrInput {
	return (*certificateDescriptionPtrType)(v)
}

func (*certificateDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateDescription)(nil)).Elem()
}

func (i *certificateDescriptionPtrType) ToCertificateDescriptionPtrOutput() CertificateDescriptionPtrOutput {
	return i.ToCertificateDescriptionPtrOutputWithContext(context.Background())
}

func (i *certificateDescriptionPtrType) ToCertificateDescriptionPtrOutputWithContext(ctx context.Context) CertificateDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionPtrOutput)
}

// CertificateDescriptionArrayInput is an input type that accepts CertificateDescriptionArray and CertificateDescriptionArrayOutput values.
// You can construct a concrete instance of `CertificateDescriptionArrayInput` via:
//
//          CertificateDescriptionArray{ CertificateDescriptionArgs{...} }
type CertificateDescriptionArrayInput interface {
	pulumi.Input

	ToCertificateDescriptionArrayOutput() CertificateDescriptionArrayOutput
	ToCertificateDescriptionArrayOutputWithContext(context.Context) CertificateDescriptionArrayOutput
}

type CertificateDescriptionArray []CertificateDescriptionInput

func (CertificateDescriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateDescription)(nil)).Elem()
}

func (i CertificateDescriptionArray) ToCertificateDescriptionArrayOutput() CertificateDescriptionArrayOutput {
	return i.ToCertificateDescriptionArrayOutputWithContext(context.Background())
}

func (i CertificateDescriptionArray) ToCertificateDescriptionArrayOutputWithContext(ctx context.Context) CertificateDescriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionArrayOutput)
}

// A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.
type CertificateDescriptionOutput struct{ *pulumi.OutputState }

func (CertificateDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDescription)(nil)).Elem()
}

func (o CertificateDescriptionOutput) ToCertificateDescriptionOutput() CertificateDescriptionOutput {
	return o
}

func (o CertificateDescriptionOutput) ToCertificateDescriptionOutputWithContext(ctx context.Context) CertificateDescriptionOutput {
	return o
}

func (o CertificateDescriptionOutput) ToCertificateDescriptionPtrOutput() CertificateDescriptionPtrOutput {
	return o.ToCertificateDescriptionPtrOutputWithContext(context.Background())
}

func (o CertificateDescriptionOutput) ToCertificateDescriptionPtrOutputWithContext(ctx context.Context) CertificateDescriptionPtrOutput {
	return o.ApplyT(func(v CertificateDescription) *CertificateDescription {
		return &v
	}).(CertificateDescriptionPtrOutput)
}

// Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access" extension in the certificate.
func (o CertificateDescriptionOutput) AiaIssuingCertificateUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateDescription) []string { return v.AiaIssuingCertificateUrls }).(pulumi.StringArrayOutput)
}

// Identifies the subject_key_id of the parent certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.1.1
func (o CertificateDescriptionOutput) AuthorityKeyId() KeyIdPtrOutput {
	return o.ApplyT(func(v CertificateDescription) *KeyId { return v.AuthorityKeyId }).(KeyIdPtrOutput)
}

// The hash of the x.509 certificate.
func (o CertificateDescriptionOutput) CertFingerprint() CertificateFingerprintPtrOutput {
	return o.ApplyT(func(v CertificateDescription) *CertificateFingerprint { return v.CertFingerprint }).(CertificateFingerprintPtrOutput)
}

// Describes some of the technical fields in a certificate.
func (o CertificateDescriptionOutput) ConfigValues() ReusableConfigValuesPtrOutput {
	return o.ApplyT(func(v CertificateDescription) *ReusableConfigValues { return v.ConfigValues }).(ReusableConfigValuesPtrOutput)
}

// Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
func (o CertificateDescriptionOutput) CrlDistributionPoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateDescription) []string { return v.CrlDistributionPoints }).(pulumi.StringArrayOutput)
}

// The public key that corresponds to an issued certificate.
func (o CertificateDescriptionOutput) PublicKey() PublicKeyPtrOutput {
	return o.ApplyT(func(v CertificateDescription) *PublicKey { return v.PublicKey }).(PublicKeyPtrOutput)
}

// Describes some of the values in a certificate that are related to the subject and lifetime.
func (o CertificateDescriptionOutput) SubjectDescription() SubjectDescriptionPtrOutput {
	return o.ApplyT(func(v CertificateDescription) *SubjectDescription { return v.SubjectDescription }).(SubjectDescriptionPtrOutput)
}

// Provides a means of identifiying certificates that contain a particular public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
func (o CertificateDescriptionOutput) SubjectKeyId() KeyIdPtrOutput {
	return o.ApplyT(func(v CertificateDescription) *KeyId { return v.SubjectKeyId }).(KeyIdPtrOutput)
}

type CertificateDescriptionPtrOutput struct{ *pulumi.OutputState }

func (CertificateDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateDescription)(nil)).Elem()
}

func (o CertificateDescriptionPtrOutput) ToCertificateDescriptionPtrOutput() CertificateDescriptionPtrOutput {
	return o
}

func (o CertificateDescriptionPtrOutput) ToCertificateDescriptionPtrOutputWithContext(ctx context.Context) CertificateDescriptionPtrOutput {
	return o
}

func (o CertificateDescriptionPtrOutput) Elem() CertificateDescriptionOutput {
	return o.ApplyT(func(v *CertificateDescription) CertificateDescription { return *v }).(CertificateDescriptionOutput)
}

// Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access" extension in the certificate.
func (o CertificateDescriptionPtrOutput) AiaIssuingCertificateUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateDescription) []string {
		if v == nil {
			return nil
		}
		return v.AiaIssuingCertificateUrls
	}).(pulumi.StringArrayOutput)
}

// Identifies the subject_key_id of the parent certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.1.1
func (o CertificateDescriptionPtrOutput) AuthorityKeyId() KeyIdPtrOutput {
	return o.ApplyT(func(v *CertificateDescription) *KeyId {
		if v == nil {
			return nil
		}
		return v.AuthorityKeyId
	}).(KeyIdPtrOutput)
}

// The hash of the x.509 certificate.
func (o CertificateDescriptionPtrOutput) CertFingerprint() CertificateFingerprintPtrOutput {
	return o.ApplyT(func(v *CertificateDescription) *CertificateFingerprint {
		if v == nil {
			return nil
		}
		return v.CertFingerprint
	}).(CertificateFingerprintPtrOutput)
}

// Describes some of the technical fields in a certificate.
func (o CertificateDescriptionPtrOutput) ConfigValues() ReusableConfigValuesPtrOutput {
	return o.ApplyT(func(v *CertificateDescription) *ReusableConfigValues {
		if v == nil {
			return nil
		}
		return v.ConfigValues
	}).(ReusableConfigValuesPtrOutput)
}

// Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
func (o CertificateDescriptionPtrOutput) CrlDistributionPoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateDescription) []string {
		if v == nil {
			return nil
		}
		return v.CrlDistributionPoints
	}).(pulumi.StringArrayOutput)
}

// The public key that corresponds to an issued certificate.
func (o CertificateDescriptionPtrOutput) PublicKey() PublicKeyPtrOutput {
	return o.ApplyT(func(v *CertificateDescription) *PublicKey {
		if v == nil {
			return nil
		}
		return v.PublicKey
	}).(PublicKeyPtrOutput)
}

// Describes some of the values in a certificate that are related to the subject and lifetime.
func (o CertificateDescriptionPtrOutput) SubjectDescription() SubjectDescriptionPtrOutput {
	return o.ApplyT(func(v *CertificateDescription) *SubjectDescription {
		if v == nil {
			return nil
		}
		return v.SubjectDescription
	}).(SubjectDescriptionPtrOutput)
}

// Provides a means of identifiying certificates that contain a particular public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
func (o CertificateDescriptionPtrOutput) SubjectKeyId() KeyIdPtrOutput {
	return o.ApplyT(func(v *CertificateDescription) *KeyId {
		if v == nil {
			return nil
		}
		return v.SubjectKeyId
	}).(KeyIdPtrOutput)
}

type CertificateDescriptionArrayOutput struct{ *pulumi.OutputState }

func (CertificateDescriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateDescription)(nil)).Elem()
}

func (o CertificateDescriptionArrayOutput) ToCertificateDescriptionArrayOutput() CertificateDescriptionArrayOutput {
	return o
}

func (o CertificateDescriptionArrayOutput) ToCertificateDescriptionArrayOutputWithContext(ctx context.Context) CertificateDescriptionArrayOutput {
	return o
}

func (o CertificateDescriptionArrayOutput) Index(i pulumi.IntInput) CertificateDescriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateDescription {
		return vs[0].([]CertificateDescription)[vs[1].(int)]
	}).(CertificateDescriptionOutput)
}

// A group of fingerprints for the x509 certificate.
type CertificateFingerprint struct {
	// The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate.
	Sha256Hash *string `pulumi:"sha256Hash"`
}

// CertificateFingerprintInput is an input type that accepts CertificateFingerprintArgs and CertificateFingerprintOutput values.
// You can construct a concrete instance of `CertificateFingerprintInput` via:
//
//          CertificateFingerprintArgs{...}
type CertificateFingerprintInput interface {
	pulumi.Input

	ToCertificateFingerprintOutput() CertificateFingerprintOutput
	ToCertificateFingerprintOutputWithContext(context.Context) CertificateFingerprintOutput
}

// A group of fingerprints for the x509 certificate.
type CertificateFingerprintArgs struct {
	// The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate.
	Sha256Hash pulumi.StringPtrInput `pulumi:"sha256Hash"`
}

func (CertificateFingerprintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateFingerprint)(nil)).Elem()
}

func (i CertificateFingerprintArgs) ToCertificateFingerprintOutput() CertificateFingerprintOutput {
	return i.ToCertificateFingerprintOutputWithContext(context.Background())
}

func (i CertificateFingerprintArgs) ToCertificateFingerprintOutputWithContext(ctx context.Context) CertificateFingerprintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateFingerprintOutput)
}

func (i CertificateFingerprintArgs) ToCertificateFingerprintPtrOutput() CertificateFingerprintPtrOutput {
	return i.ToCertificateFingerprintPtrOutputWithContext(context.Background())
}

func (i CertificateFingerprintArgs) ToCertificateFingerprintPtrOutputWithContext(ctx context.Context) CertificateFingerprintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateFingerprintOutput).ToCertificateFingerprintPtrOutputWithContext(ctx)
}

// CertificateFingerprintPtrInput is an input type that accepts CertificateFingerprintArgs, CertificateFingerprintPtr and CertificateFingerprintPtrOutput values.
// You can construct a concrete instance of `CertificateFingerprintPtrInput` via:
//
//          CertificateFingerprintArgs{...}
//
//  or:
//
//          nil
type CertificateFingerprintPtrInput interface {
	pulumi.Input

	ToCertificateFingerprintPtrOutput() CertificateFingerprintPtrOutput
	ToCertificateFingerprintPtrOutputWithContext(context.Context) CertificateFingerprintPtrOutput
}

type certificateFingerprintPtrType CertificateFingerprintArgs

func CertificateFingerprintPtr(v *CertificateFingerprintArgs) CertificateFingerprintPtrInput {
	return (*certificateFingerprintPtrType)(v)
}

func (*certificateFingerprintPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateFingerprint)(nil)).Elem()
}

func (i *certificateFingerprintPtrType) ToCertificateFingerprintPtrOutput() CertificateFingerprintPtrOutput {
	return i.ToCertificateFingerprintPtrOutputWithContext(context.Background())
}

func (i *certificateFingerprintPtrType) ToCertificateFingerprintPtrOutputWithContext(ctx context.Context) CertificateFingerprintPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateFingerprintPtrOutput)
}

// A group of fingerprints for the x509 certificate.
type CertificateFingerprintOutput struct{ *pulumi.OutputState }

func (CertificateFingerprintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateFingerprint)(nil)).Elem()
}

func (o CertificateFingerprintOutput) ToCertificateFingerprintOutput() CertificateFingerprintOutput {
	return o
}

func (o CertificateFingerprintOutput) ToCertificateFingerprintOutputWithContext(ctx context.Context) CertificateFingerprintOutput {
	return o
}

func (o CertificateFingerprintOutput) ToCertificateFingerprintPtrOutput() CertificateFingerprintPtrOutput {
	return o.ToCertificateFingerprintPtrOutputWithContext(context.Background())
}

func (o CertificateFingerprintOutput) ToCertificateFingerprintPtrOutputWithContext(ctx context.Context) CertificateFingerprintPtrOutput {
	return o.ApplyT(func(v CertificateFingerprint) *CertificateFingerprint {
		return &v
	}).(CertificateFingerprintPtrOutput)
}

// The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate.
func (o CertificateFingerprintOutput) Sha256Hash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateFingerprint) *string { return v.Sha256Hash }).(pulumi.StringPtrOutput)
}

type CertificateFingerprintPtrOutput struct{ *pulumi.OutputState }

func (CertificateFingerprintPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateFingerprint)(nil)).Elem()
}

func (o CertificateFingerprintPtrOutput) ToCertificateFingerprintPtrOutput() CertificateFingerprintPtrOutput {
	return o
}

func (o CertificateFingerprintPtrOutput) ToCertificateFingerprintPtrOutputWithContext(ctx context.Context) CertificateFingerprintPtrOutput {
	return o
}

func (o CertificateFingerprintPtrOutput) Elem() CertificateFingerprintOutput {
	return o.ApplyT(func(v *CertificateFingerprint) CertificateFingerprint { return *v }).(CertificateFingerprintOutput)
}

// The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate.
func (o CertificateFingerprintPtrOutput) Sha256Hash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateFingerprint) *string {
		if v == nil {
			return nil
		}
		return v.Sha256Hash
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.
type ExtendedKeyUsageOptions struct {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	ClientAuth *bool `pulumi:"clientAuth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	CodeSigning *bool `pulumi:"codeSigning"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	EmailProtection *bool `pulumi:"emailProtection"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	OcspSigning *bool `pulumi:"ocspSigning"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	ServerAuth *bool `pulumi:"serverAuth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	TimeStamping *bool `pulumi:"timeStamping"`
}

// ExtendedKeyUsageOptionsInput is an input type that accepts ExtendedKeyUsageOptionsArgs and ExtendedKeyUsageOptionsOutput values.
// You can construct a concrete instance of `ExtendedKeyUsageOptionsInput` via:
//
//          ExtendedKeyUsageOptionsArgs{...}
type ExtendedKeyUsageOptionsInput interface {
	pulumi.Input

	ToExtendedKeyUsageOptionsOutput() ExtendedKeyUsageOptionsOutput
	ToExtendedKeyUsageOptionsOutputWithContext(context.Context) ExtendedKeyUsageOptionsOutput
}

// KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.
type ExtendedKeyUsageOptionsArgs struct {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	ClientAuth pulumi.BoolPtrInput `pulumi:"clientAuth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	CodeSigning pulumi.BoolPtrInput `pulumi:"codeSigning"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	EmailProtection pulumi.BoolPtrInput `pulumi:"emailProtection"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	OcspSigning pulumi.BoolPtrInput `pulumi:"ocspSigning"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	ServerAuth pulumi.BoolPtrInput `pulumi:"serverAuth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	TimeStamping pulumi.BoolPtrInput `pulumi:"timeStamping"`
}

func (ExtendedKeyUsageOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedKeyUsageOptions)(nil)).Elem()
}

func (i ExtendedKeyUsageOptionsArgs) ToExtendedKeyUsageOptionsOutput() ExtendedKeyUsageOptionsOutput {
	return i.ToExtendedKeyUsageOptionsOutputWithContext(context.Background())
}

func (i ExtendedKeyUsageOptionsArgs) ToExtendedKeyUsageOptionsOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedKeyUsageOptionsOutput)
}

func (i ExtendedKeyUsageOptionsArgs) ToExtendedKeyUsageOptionsPtrOutput() ExtendedKeyUsageOptionsPtrOutput {
	return i.ToExtendedKeyUsageOptionsPtrOutputWithContext(context.Background())
}

func (i ExtendedKeyUsageOptionsArgs) ToExtendedKeyUsageOptionsPtrOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedKeyUsageOptionsOutput).ToExtendedKeyUsageOptionsPtrOutputWithContext(ctx)
}

// ExtendedKeyUsageOptionsPtrInput is an input type that accepts ExtendedKeyUsageOptionsArgs, ExtendedKeyUsageOptionsPtr and ExtendedKeyUsageOptionsPtrOutput values.
// You can construct a concrete instance of `ExtendedKeyUsageOptionsPtrInput` via:
//
//          ExtendedKeyUsageOptionsArgs{...}
//
//  or:
//
//          nil
type ExtendedKeyUsageOptionsPtrInput interface {
	pulumi.Input

	ToExtendedKeyUsageOptionsPtrOutput() ExtendedKeyUsageOptionsPtrOutput
	ToExtendedKeyUsageOptionsPtrOutputWithContext(context.Context) ExtendedKeyUsageOptionsPtrOutput
}

type extendedKeyUsageOptionsPtrType ExtendedKeyUsageOptionsArgs

func ExtendedKeyUsageOptionsPtr(v *ExtendedKeyUsageOptionsArgs) ExtendedKeyUsageOptionsPtrInput {
	return (*extendedKeyUsageOptionsPtrType)(v)
}

func (*extendedKeyUsageOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedKeyUsageOptions)(nil)).Elem()
}

func (i *extendedKeyUsageOptionsPtrType) ToExtendedKeyUsageOptionsPtrOutput() ExtendedKeyUsageOptionsPtrOutput {
	return i.ToExtendedKeyUsageOptionsPtrOutputWithContext(context.Background())
}

func (i *extendedKeyUsageOptionsPtrType) ToExtendedKeyUsageOptionsPtrOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedKeyUsageOptionsPtrOutput)
}

// KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.
type ExtendedKeyUsageOptionsOutput struct{ *pulumi.OutputState }

func (ExtendedKeyUsageOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedKeyUsageOptions)(nil)).Elem()
}

func (o ExtendedKeyUsageOptionsOutput) ToExtendedKeyUsageOptionsOutput() ExtendedKeyUsageOptionsOutput {
	return o
}

func (o ExtendedKeyUsageOptionsOutput) ToExtendedKeyUsageOptionsOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsOutput {
	return o
}

func (o ExtendedKeyUsageOptionsOutput) ToExtendedKeyUsageOptionsPtrOutput() ExtendedKeyUsageOptionsPtrOutput {
	return o.ToExtendedKeyUsageOptionsPtrOutputWithContext(context.Background())
}

func (o ExtendedKeyUsageOptionsOutput) ToExtendedKeyUsageOptionsPtrOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsPtrOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptions) *ExtendedKeyUsageOptions {
		return &v
	}).(ExtendedKeyUsageOptionsPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
func (o ExtendedKeyUsageOptionsOutput) ClientAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptions) *bool { return v.ClientAuth }).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
func (o ExtendedKeyUsageOptionsOutput) CodeSigning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptions) *bool { return v.CodeSigning }).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
func (o ExtendedKeyUsageOptionsOutput) EmailProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptions) *bool { return v.EmailProtection }).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
func (o ExtendedKeyUsageOptionsOutput) OcspSigning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptions) *bool { return v.OcspSigning }).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
func (o ExtendedKeyUsageOptionsOutput) ServerAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptions) *bool { return v.ServerAuth }).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
func (o ExtendedKeyUsageOptionsOutput) TimeStamping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptions) *bool { return v.TimeStamping }).(pulumi.BoolPtrOutput)
}

type ExtendedKeyUsageOptionsPtrOutput struct{ *pulumi.OutputState }

func (ExtendedKeyUsageOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedKeyUsageOptions)(nil)).Elem()
}

func (o ExtendedKeyUsageOptionsPtrOutput) ToExtendedKeyUsageOptionsPtrOutput() ExtendedKeyUsageOptionsPtrOutput {
	return o
}

func (o ExtendedKeyUsageOptionsPtrOutput) ToExtendedKeyUsageOptionsPtrOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsPtrOutput {
	return o
}

func (o ExtendedKeyUsageOptionsPtrOutput) Elem() ExtendedKeyUsageOptionsOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptions) ExtendedKeyUsageOptions { return *v }).(ExtendedKeyUsageOptionsOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
func (o ExtendedKeyUsageOptionsPtrOutput) ClientAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.ClientAuth
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
func (o ExtendedKeyUsageOptionsPtrOutput) CodeSigning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.CodeSigning
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
func (o ExtendedKeyUsageOptionsPtrOutput) EmailProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EmailProtection
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
func (o ExtendedKeyUsageOptionsPtrOutput) OcspSigning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.OcspSigning
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
func (o ExtendedKeyUsageOptionsPtrOutput) ServerAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.ServerAuth
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
func (o ExtendedKeyUsageOptionsPtrOutput) TimeStamping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.TimeStamping
	}).(pulumi.BoolPtrOutput)
}

// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CertificateAuthority.
type IssuanceModes struct {
	// Required. When true, allows callers to create Certificates by specifying a CertificateConfig.
	AllowConfigBasedIssuance *bool `pulumi:"allowConfigBasedIssuance"`
	// Required. When true, allows callers to create Certificates by specifying a CSR.
	AllowCsrBasedIssuance *bool `pulumi:"allowCsrBasedIssuance"`
}

// IssuanceModesInput is an input type that accepts IssuanceModesArgs and IssuanceModesOutput values.
// You can construct a concrete instance of `IssuanceModesInput` via:
//
//          IssuanceModesArgs{...}
type IssuanceModesInput interface {
	pulumi.Input

	ToIssuanceModesOutput() IssuanceModesOutput
	ToIssuanceModesOutputWithContext(context.Context) IssuanceModesOutput
}

// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CertificateAuthority.
type IssuanceModesArgs struct {
	// Required. When true, allows callers to create Certificates by specifying a CertificateConfig.
	AllowConfigBasedIssuance pulumi.BoolPtrInput `pulumi:"allowConfigBasedIssuance"`
	// Required. When true, allows callers to create Certificates by specifying a CSR.
	AllowCsrBasedIssuance pulumi.BoolPtrInput `pulumi:"allowCsrBasedIssuance"`
}

func (IssuanceModesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IssuanceModes)(nil)).Elem()
}

func (i IssuanceModesArgs) ToIssuanceModesOutput() IssuanceModesOutput {
	return i.ToIssuanceModesOutputWithContext(context.Background())
}

func (i IssuanceModesArgs) ToIssuanceModesOutputWithContext(ctx context.Context) IssuanceModesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuanceModesOutput)
}

func (i IssuanceModesArgs) ToIssuanceModesPtrOutput() IssuanceModesPtrOutput {
	return i.ToIssuanceModesPtrOutputWithContext(context.Background())
}

func (i IssuanceModesArgs) ToIssuanceModesPtrOutputWithContext(ctx context.Context) IssuanceModesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuanceModesOutput).ToIssuanceModesPtrOutputWithContext(ctx)
}

// IssuanceModesPtrInput is an input type that accepts IssuanceModesArgs, IssuanceModesPtr and IssuanceModesPtrOutput values.
// You can construct a concrete instance of `IssuanceModesPtrInput` via:
//
//          IssuanceModesArgs{...}
//
//  or:
//
//          nil
type IssuanceModesPtrInput interface {
	pulumi.Input

	ToIssuanceModesPtrOutput() IssuanceModesPtrOutput
	ToIssuanceModesPtrOutputWithContext(context.Context) IssuanceModesPtrOutput
}

type issuanceModesPtrType IssuanceModesArgs

func IssuanceModesPtr(v *IssuanceModesArgs) IssuanceModesPtrInput {
	return (*issuanceModesPtrType)(v)
}

func (*issuanceModesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IssuanceModes)(nil)).Elem()
}

func (i *issuanceModesPtrType) ToIssuanceModesPtrOutput() IssuanceModesPtrOutput {
	return i.ToIssuanceModesPtrOutputWithContext(context.Background())
}

func (i *issuanceModesPtrType) ToIssuanceModesPtrOutputWithContext(ctx context.Context) IssuanceModesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuanceModesPtrOutput)
}

// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CertificateAuthority.
type IssuanceModesOutput struct{ *pulumi.OutputState }

func (IssuanceModesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IssuanceModes)(nil)).Elem()
}

func (o IssuanceModesOutput) ToIssuanceModesOutput() IssuanceModesOutput {
	return o
}

func (o IssuanceModesOutput) ToIssuanceModesOutputWithContext(ctx context.Context) IssuanceModesOutput {
	return o
}

func (o IssuanceModesOutput) ToIssuanceModesPtrOutput() IssuanceModesPtrOutput {
	return o.ToIssuanceModesPtrOutputWithContext(context.Background())
}

func (o IssuanceModesOutput) ToIssuanceModesPtrOutputWithContext(ctx context.Context) IssuanceModesPtrOutput {
	return o.ApplyT(func(v IssuanceModes) *IssuanceModes {
		return &v
	}).(IssuanceModesPtrOutput)
}

// Required. When true, allows callers to create Certificates by specifying a CertificateConfig.
func (o IssuanceModesOutput) AllowConfigBasedIssuance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IssuanceModes) *bool { return v.AllowConfigBasedIssuance }).(pulumi.BoolPtrOutput)
}

// Required. When true, allows callers to create Certificates by specifying a CSR.
func (o IssuanceModesOutput) AllowCsrBasedIssuance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IssuanceModes) *bool { return v.AllowCsrBasedIssuance }).(pulumi.BoolPtrOutput)
}

type IssuanceModesPtrOutput struct{ *pulumi.OutputState }

func (IssuanceModesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IssuanceModes)(nil)).Elem()
}

func (o IssuanceModesPtrOutput) ToIssuanceModesPtrOutput() IssuanceModesPtrOutput {
	return o
}

func (o IssuanceModesPtrOutput) ToIssuanceModesPtrOutputWithContext(ctx context.Context) IssuanceModesPtrOutput {
	return o
}

func (o IssuanceModesPtrOutput) Elem() IssuanceModesOutput {
	return o.ApplyT(func(v *IssuanceModes) IssuanceModes { return *v }).(IssuanceModesOutput)
}

// Required. When true, allows callers to create Certificates by specifying a CertificateConfig.
func (o IssuanceModesPtrOutput) AllowConfigBasedIssuance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IssuanceModes) *bool {
		if v == nil {
			return nil
		}
		return v.AllowConfigBasedIssuance
	}).(pulumi.BoolPtrOutput)
}

// Required. When true, allows callers to create Certificates by specifying a CSR.
func (o IssuanceModesPtrOutput) AllowCsrBasedIssuance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IssuanceModes) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCsrBasedIssuance
	}).(pulumi.BoolPtrOutput)
}

// Options that affect all certificates issued by a CertificateAuthority.
type IssuingOptions struct {
	// Required. When true, includes a URL to the issuing CA certificate in the "authority information access" X.509 extension.
	IncludeCaCertUrl *bool `pulumi:"includeCaCertUrl"`
	// Required. When true, includes a URL to the CRL corresponding to certificates issued from a CertificateAuthority. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
	IncludeCrlAccessUrl *bool `pulumi:"includeCrlAccessUrl"`
}

// IssuingOptionsInput is an input type that accepts IssuingOptionsArgs and IssuingOptionsOutput values.
// You can construct a concrete instance of `IssuingOptionsInput` via:
//
//          IssuingOptionsArgs{...}
type IssuingOptionsInput interface {
	pulumi.Input

	ToIssuingOptionsOutput() IssuingOptionsOutput
	ToIssuingOptionsOutputWithContext(context.Context) IssuingOptionsOutput
}

// Options that affect all certificates issued by a CertificateAuthority.
type IssuingOptionsArgs struct {
	// Required. When true, includes a URL to the issuing CA certificate in the "authority information access" X.509 extension.
	IncludeCaCertUrl pulumi.BoolPtrInput `pulumi:"includeCaCertUrl"`
	// Required. When true, includes a URL to the CRL corresponding to certificates issued from a CertificateAuthority. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
	IncludeCrlAccessUrl pulumi.BoolPtrInput `pulumi:"includeCrlAccessUrl"`
}

func (IssuingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IssuingOptions)(nil)).Elem()
}

func (i IssuingOptionsArgs) ToIssuingOptionsOutput() IssuingOptionsOutput {
	return i.ToIssuingOptionsOutputWithContext(context.Background())
}

func (i IssuingOptionsArgs) ToIssuingOptionsOutputWithContext(ctx context.Context) IssuingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuingOptionsOutput)
}

func (i IssuingOptionsArgs) ToIssuingOptionsPtrOutput() IssuingOptionsPtrOutput {
	return i.ToIssuingOptionsPtrOutputWithContext(context.Background())
}

func (i IssuingOptionsArgs) ToIssuingOptionsPtrOutputWithContext(ctx context.Context) IssuingOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuingOptionsOutput).ToIssuingOptionsPtrOutputWithContext(ctx)
}

// IssuingOptionsPtrInput is an input type that accepts IssuingOptionsArgs, IssuingOptionsPtr and IssuingOptionsPtrOutput values.
// You can construct a concrete instance of `IssuingOptionsPtrInput` via:
//
//          IssuingOptionsArgs{...}
//
//  or:
//
//          nil
type IssuingOptionsPtrInput interface {
	pulumi.Input

	ToIssuingOptionsPtrOutput() IssuingOptionsPtrOutput
	ToIssuingOptionsPtrOutputWithContext(context.Context) IssuingOptionsPtrOutput
}

type issuingOptionsPtrType IssuingOptionsArgs

func IssuingOptionsPtr(v *IssuingOptionsArgs) IssuingOptionsPtrInput {
	return (*issuingOptionsPtrType)(v)
}

func (*issuingOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IssuingOptions)(nil)).Elem()
}

func (i *issuingOptionsPtrType) ToIssuingOptionsPtrOutput() IssuingOptionsPtrOutput {
	return i.ToIssuingOptionsPtrOutputWithContext(context.Background())
}

func (i *issuingOptionsPtrType) ToIssuingOptionsPtrOutputWithContext(ctx context.Context) IssuingOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuingOptionsPtrOutput)
}

// Options that affect all certificates issued by a CertificateAuthority.
type IssuingOptionsOutput struct{ *pulumi.OutputState }

func (IssuingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IssuingOptions)(nil)).Elem()
}

func (o IssuingOptionsOutput) ToIssuingOptionsOutput() IssuingOptionsOutput {
	return o
}

func (o IssuingOptionsOutput) ToIssuingOptionsOutputWithContext(ctx context.Context) IssuingOptionsOutput {
	return o
}

func (o IssuingOptionsOutput) ToIssuingOptionsPtrOutput() IssuingOptionsPtrOutput {
	return o.ToIssuingOptionsPtrOutputWithContext(context.Background())
}

func (o IssuingOptionsOutput) ToIssuingOptionsPtrOutputWithContext(ctx context.Context) IssuingOptionsPtrOutput {
	return o.ApplyT(func(v IssuingOptions) *IssuingOptions {
		return &v
	}).(IssuingOptionsPtrOutput)
}

// Required. When true, includes a URL to the issuing CA certificate in the "authority information access" X.509 extension.
func (o IssuingOptionsOutput) IncludeCaCertUrl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IssuingOptions) *bool { return v.IncludeCaCertUrl }).(pulumi.BoolPtrOutput)
}

// Required. When true, includes a URL to the CRL corresponding to certificates issued from a CertificateAuthority. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
func (o IssuingOptionsOutput) IncludeCrlAccessUrl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IssuingOptions) *bool { return v.IncludeCrlAccessUrl }).(pulumi.BoolPtrOutput)
}

type IssuingOptionsPtrOutput struct{ *pulumi.OutputState }

func (IssuingOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IssuingOptions)(nil)).Elem()
}

func (o IssuingOptionsPtrOutput) ToIssuingOptionsPtrOutput() IssuingOptionsPtrOutput {
	return o
}

func (o IssuingOptionsPtrOutput) ToIssuingOptionsPtrOutputWithContext(ctx context.Context) IssuingOptionsPtrOutput {
	return o
}

func (o IssuingOptionsPtrOutput) Elem() IssuingOptionsOutput {
	return o.ApplyT(func(v *IssuingOptions) IssuingOptions { return *v }).(IssuingOptionsOutput)
}

// Required. When true, includes a URL to the issuing CA certificate in the "authority information access" X.509 extension.
func (o IssuingOptionsPtrOutput) IncludeCaCertUrl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IssuingOptions) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeCaCertUrl
	}).(pulumi.BoolPtrOutput)
}

// Required. When true, includes a URL to the CRL corresponding to certificates issued from a CertificateAuthority. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
func (o IssuingOptionsPtrOutput) IncludeCrlAccessUrl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IssuingOptions) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeCrlAccessUrl
	}).(pulumi.BoolPtrOutput)
}

// A KeyId identifies a specific public key, usually by hashing the public key.
type KeyId struct {
	// Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.
	KeyId *string `pulumi:"keyId"`
}

// KeyIdInput is an input type that accepts KeyIdArgs and KeyIdOutput values.
// You can construct a concrete instance of `KeyIdInput` via:
//
//          KeyIdArgs{...}
type KeyIdInput interface {
	pulumi.Input

	ToKeyIdOutput() KeyIdOutput
	ToKeyIdOutputWithContext(context.Context) KeyIdOutput
}

// A KeyId identifies a specific public key, usually by hashing the public key.
type KeyIdArgs struct {
	// Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.
	KeyId pulumi.StringPtrInput `pulumi:"keyId"`
}

func (KeyIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyId)(nil)).Elem()
}

func (i KeyIdArgs) ToKeyIdOutput() KeyIdOutput {
	return i.ToKeyIdOutputWithContext(context.Background())
}

func (i KeyIdArgs) ToKeyIdOutputWithContext(ctx context.Context) KeyIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyIdOutput)
}

func (i KeyIdArgs) ToKeyIdPtrOutput() KeyIdPtrOutput {
	return i.ToKeyIdPtrOutputWithContext(context.Background())
}

func (i KeyIdArgs) ToKeyIdPtrOutputWithContext(ctx context.Context) KeyIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyIdOutput).ToKeyIdPtrOutputWithContext(ctx)
}

// KeyIdPtrInput is an input type that accepts KeyIdArgs, KeyIdPtr and KeyIdPtrOutput values.
// You can construct a concrete instance of `KeyIdPtrInput` via:
//
//          KeyIdArgs{...}
//
//  or:
//
//          nil
type KeyIdPtrInput interface {
	pulumi.Input

	ToKeyIdPtrOutput() KeyIdPtrOutput
	ToKeyIdPtrOutputWithContext(context.Context) KeyIdPtrOutput
}

type keyIdPtrType KeyIdArgs

func KeyIdPtr(v *KeyIdArgs) KeyIdPtrInput {
	return (*keyIdPtrType)(v)
}

func (*keyIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyId)(nil)).Elem()
}

func (i *keyIdPtrType) ToKeyIdPtrOutput() KeyIdPtrOutput {
	return i.ToKeyIdPtrOutputWithContext(context.Background())
}

func (i *keyIdPtrType) ToKeyIdPtrOutputWithContext(ctx context.Context) KeyIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyIdPtrOutput)
}

// A KeyId identifies a specific public key, usually by hashing the public key.
type KeyIdOutput struct{ *pulumi.OutputState }

func (KeyIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyId)(nil)).Elem()
}

func (o KeyIdOutput) ToKeyIdOutput() KeyIdOutput {
	return o
}

func (o KeyIdOutput) ToKeyIdOutputWithContext(ctx context.Context) KeyIdOutput {
	return o
}

func (o KeyIdOutput) ToKeyIdPtrOutput() KeyIdPtrOutput {
	return o.ToKeyIdPtrOutputWithContext(context.Background())
}

func (o KeyIdOutput) ToKeyIdPtrOutputWithContext(ctx context.Context) KeyIdPtrOutput {
	return o.ApplyT(func(v KeyId) *KeyId {
		return &v
	}).(KeyIdPtrOutput)
}

// Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.
func (o KeyIdOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyId) *string { return v.KeyId }).(pulumi.StringPtrOutput)
}

type KeyIdPtrOutput struct{ *pulumi.OutputState }

func (KeyIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyId)(nil)).Elem()
}

func (o KeyIdPtrOutput) ToKeyIdPtrOutput() KeyIdPtrOutput {
	return o
}

func (o KeyIdPtrOutput) ToKeyIdPtrOutputWithContext(ctx context.Context) KeyIdPtrOutput {
	return o
}

func (o KeyIdPtrOutput) Elem() KeyIdOutput {
	return o.ApplyT(func(v *KeyId) KeyId { return *v }).(KeyIdOutput)
}

// Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.
func (o KeyIdPtrOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyId) *string {
		if v == nil {
			return nil
		}
		return v.KeyId
	}).(pulumi.StringPtrOutput)
}

// A KeyUsage describes key usage values that may appear in an X.509 certificate.
type KeyUsage struct {
	// Describes high-level ways in which a key may be used.
	BaseKeyUsage *KeyUsageOptions `pulumi:"baseKeyUsage"`
	// Detailed scenarios in which a key may be used.
	ExtendedKeyUsage *ExtendedKeyUsageOptions `pulumi:"extendedKeyUsage"`
	// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
	UnknownExtendedKeyUsages []ObjectId `pulumi:"unknownExtendedKeyUsages"`
}

// KeyUsageInput is an input type that accepts KeyUsageArgs and KeyUsageOutput values.
// You can construct a concrete instance of `KeyUsageInput` via:
//
//          KeyUsageArgs{...}
type KeyUsageInput interface {
	pulumi.Input

	ToKeyUsageOutput() KeyUsageOutput
	ToKeyUsageOutputWithContext(context.Context) KeyUsageOutput
}

// A KeyUsage describes key usage values that may appear in an X.509 certificate.
type KeyUsageArgs struct {
	// Describes high-level ways in which a key may be used.
	BaseKeyUsage KeyUsageOptionsPtrInput `pulumi:"baseKeyUsage"`
	// Detailed scenarios in which a key may be used.
	ExtendedKeyUsage ExtendedKeyUsageOptionsPtrInput `pulumi:"extendedKeyUsage"`
	// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
	UnknownExtendedKeyUsages ObjectIdArrayInput `pulumi:"unknownExtendedKeyUsages"`
}

func (KeyUsageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyUsage)(nil)).Elem()
}

func (i KeyUsageArgs) ToKeyUsageOutput() KeyUsageOutput {
	return i.ToKeyUsageOutputWithContext(context.Background())
}

func (i KeyUsageArgs) ToKeyUsageOutputWithContext(ctx context.Context) KeyUsageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsageOutput)
}

func (i KeyUsageArgs) ToKeyUsagePtrOutput() KeyUsagePtrOutput {
	return i.ToKeyUsagePtrOutputWithContext(context.Background())
}

func (i KeyUsageArgs) ToKeyUsagePtrOutputWithContext(ctx context.Context) KeyUsagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsageOutput).ToKeyUsagePtrOutputWithContext(ctx)
}

// KeyUsagePtrInput is an input type that accepts KeyUsageArgs, KeyUsagePtr and KeyUsagePtrOutput values.
// You can construct a concrete instance of `KeyUsagePtrInput` via:
//
//          KeyUsageArgs{...}
//
//  or:
//
//          nil
type KeyUsagePtrInput interface {
	pulumi.Input

	ToKeyUsagePtrOutput() KeyUsagePtrOutput
	ToKeyUsagePtrOutputWithContext(context.Context) KeyUsagePtrOutput
}

type keyUsagePtrType KeyUsageArgs

func KeyUsagePtr(v *KeyUsageArgs) KeyUsagePtrInput {
	return (*keyUsagePtrType)(v)
}

func (*keyUsagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyUsage)(nil)).Elem()
}

func (i *keyUsagePtrType) ToKeyUsagePtrOutput() KeyUsagePtrOutput {
	return i.ToKeyUsagePtrOutputWithContext(context.Background())
}

func (i *keyUsagePtrType) ToKeyUsagePtrOutputWithContext(ctx context.Context) KeyUsagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsagePtrOutput)
}

// A KeyUsage describes key usage values that may appear in an X.509 certificate.
type KeyUsageOutput struct{ *pulumi.OutputState }

func (KeyUsageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyUsage)(nil)).Elem()
}

func (o KeyUsageOutput) ToKeyUsageOutput() KeyUsageOutput {
	return o
}

func (o KeyUsageOutput) ToKeyUsageOutputWithContext(ctx context.Context) KeyUsageOutput {
	return o
}

func (o KeyUsageOutput) ToKeyUsagePtrOutput() KeyUsagePtrOutput {
	return o.ToKeyUsagePtrOutputWithContext(context.Background())
}

func (o KeyUsageOutput) ToKeyUsagePtrOutputWithContext(ctx context.Context) KeyUsagePtrOutput {
	return o.ApplyT(func(v KeyUsage) *KeyUsage {
		return &v
	}).(KeyUsagePtrOutput)
}

// Describes high-level ways in which a key may be used.
func (o KeyUsageOutput) BaseKeyUsage() KeyUsageOptionsPtrOutput {
	return o.ApplyT(func(v KeyUsage) *KeyUsageOptions { return v.BaseKeyUsage }).(KeyUsageOptionsPtrOutput)
}

// Detailed scenarios in which a key may be used.
func (o KeyUsageOutput) ExtendedKeyUsage() ExtendedKeyUsageOptionsPtrOutput {
	return o.ApplyT(func(v KeyUsage) *ExtendedKeyUsageOptions { return v.ExtendedKeyUsage }).(ExtendedKeyUsageOptionsPtrOutput)
}

// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
func (o KeyUsageOutput) UnknownExtendedKeyUsages() ObjectIdArrayOutput {
	return o.ApplyT(func(v KeyUsage) []ObjectId { return v.UnknownExtendedKeyUsages }).(ObjectIdArrayOutput)
}

type KeyUsagePtrOutput struct{ *pulumi.OutputState }

func (KeyUsagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyUsage)(nil)).Elem()
}

func (o KeyUsagePtrOutput) ToKeyUsagePtrOutput() KeyUsagePtrOutput {
	return o
}

func (o KeyUsagePtrOutput) ToKeyUsagePtrOutputWithContext(ctx context.Context) KeyUsagePtrOutput {
	return o
}

func (o KeyUsagePtrOutput) Elem() KeyUsageOutput {
	return o.ApplyT(func(v *KeyUsage) KeyUsage { return *v }).(KeyUsageOutput)
}

// Describes high-level ways in which a key may be used.
func (o KeyUsagePtrOutput) BaseKeyUsage() KeyUsageOptionsPtrOutput {
	return o.ApplyT(func(v *KeyUsage) *KeyUsageOptions {
		if v == nil {
			return nil
		}
		return v.BaseKeyUsage
	}).(KeyUsageOptionsPtrOutput)
}

// Detailed scenarios in which a key may be used.
func (o KeyUsagePtrOutput) ExtendedKeyUsage() ExtendedKeyUsageOptionsPtrOutput {
	return o.ApplyT(func(v *KeyUsage) *ExtendedKeyUsageOptions {
		if v == nil {
			return nil
		}
		return v.ExtendedKeyUsage
	}).(ExtendedKeyUsageOptionsPtrOutput)
}

// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
func (o KeyUsagePtrOutput) UnknownExtendedKeyUsages() ObjectIdArrayOutput {
	return o.ApplyT(func(v *KeyUsage) []ObjectId {
		if v == nil {
			return nil
		}
		return v.UnknownExtendedKeyUsages
	}).(ObjectIdArrayOutput)
}

// KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
type KeyUsageOptions struct {
	// The key may be used to sign certificates.
	CertSign *bool `pulumi:"certSign"`
	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	ContentCommitment *bool `pulumi:"contentCommitment"`
	// The key may be used sign certificate revocation lists.
	CrlSign *bool `pulumi:"crlSign"`
	// The key may be used to encipher data.
	DataEncipherment *bool `pulumi:"dataEncipherment"`
	// The key may be used to decipher only.
	DecipherOnly *bool `pulumi:"decipherOnly"`
	// The key may be used for digital signatures.
	DigitalSignature *bool `pulumi:"digitalSignature"`
	// The key may be used to encipher only.
	EncipherOnly *bool `pulumi:"encipherOnly"`
	// The key may be used in a key agreement protocol.
	KeyAgreement *bool `pulumi:"keyAgreement"`
	// The key may be used to encipher other keys.
	KeyEncipherment *bool `pulumi:"keyEncipherment"`
}

// KeyUsageOptionsInput is an input type that accepts KeyUsageOptionsArgs and KeyUsageOptionsOutput values.
// You can construct a concrete instance of `KeyUsageOptionsInput` via:
//
//          KeyUsageOptionsArgs{...}
type KeyUsageOptionsInput interface {
	pulumi.Input

	ToKeyUsageOptionsOutput() KeyUsageOptionsOutput
	ToKeyUsageOptionsOutputWithContext(context.Context) KeyUsageOptionsOutput
}

// KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
type KeyUsageOptionsArgs struct {
	// The key may be used to sign certificates.
	CertSign pulumi.BoolPtrInput `pulumi:"certSign"`
	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	ContentCommitment pulumi.BoolPtrInput `pulumi:"contentCommitment"`
	// The key may be used sign certificate revocation lists.
	CrlSign pulumi.BoolPtrInput `pulumi:"crlSign"`
	// The key may be used to encipher data.
	DataEncipherment pulumi.BoolPtrInput `pulumi:"dataEncipherment"`
	// The key may be used to decipher only.
	DecipherOnly pulumi.BoolPtrInput `pulumi:"decipherOnly"`
	// The key may be used for digital signatures.
	DigitalSignature pulumi.BoolPtrInput `pulumi:"digitalSignature"`
	// The key may be used to encipher only.
	EncipherOnly pulumi.BoolPtrInput `pulumi:"encipherOnly"`
	// The key may be used in a key agreement protocol.
	KeyAgreement pulumi.BoolPtrInput `pulumi:"keyAgreement"`
	// The key may be used to encipher other keys.
	KeyEncipherment pulumi.BoolPtrInput `pulumi:"keyEncipherment"`
}

func (KeyUsageOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyUsageOptions)(nil)).Elem()
}

func (i KeyUsageOptionsArgs) ToKeyUsageOptionsOutput() KeyUsageOptionsOutput {
	return i.ToKeyUsageOptionsOutputWithContext(context.Background())
}

func (i KeyUsageOptionsArgs) ToKeyUsageOptionsOutputWithContext(ctx context.Context) KeyUsageOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsageOptionsOutput)
}

func (i KeyUsageOptionsArgs) ToKeyUsageOptionsPtrOutput() KeyUsageOptionsPtrOutput {
	return i.ToKeyUsageOptionsPtrOutputWithContext(context.Background())
}

func (i KeyUsageOptionsArgs) ToKeyUsageOptionsPtrOutputWithContext(ctx context.Context) KeyUsageOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsageOptionsOutput).ToKeyUsageOptionsPtrOutputWithContext(ctx)
}

// KeyUsageOptionsPtrInput is an input type that accepts KeyUsageOptionsArgs, KeyUsageOptionsPtr and KeyUsageOptionsPtrOutput values.
// You can construct a concrete instance of `KeyUsageOptionsPtrInput` via:
//
//          KeyUsageOptionsArgs{...}
//
//  or:
//
//          nil
type KeyUsageOptionsPtrInput interface {
	pulumi.Input

	ToKeyUsageOptionsPtrOutput() KeyUsageOptionsPtrOutput
	ToKeyUsageOptionsPtrOutputWithContext(context.Context) KeyUsageOptionsPtrOutput
}

type keyUsageOptionsPtrType KeyUsageOptionsArgs

func KeyUsageOptionsPtr(v *KeyUsageOptionsArgs) KeyUsageOptionsPtrInput {
	return (*keyUsageOptionsPtrType)(v)
}

func (*keyUsageOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyUsageOptions)(nil)).Elem()
}

func (i *keyUsageOptionsPtrType) ToKeyUsageOptionsPtrOutput() KeyUsageOptionsPtrOutput {
	return i.ToKeyUsageOptionsPtrOutputWithContext(context.Background())
}

func (i *keyUsageOptionsPtrType) ToKeyUsageOptionsPtrOutputWithContext(ctx context.Context) KeyUsageOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsageOptionsPtrOutput)
}

// KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
type KeyUsageOptionsOutput struct{ *pulumi.OutputState }

func (KeyUsageOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyUsageOptions)(nil)).Elem()
}

func (o KeyUsageOptionsOutput) ToKeyUsageOptionsOutput() KeyUsageOptionsOutput {
	return o
}

func (o KeyUsageOptionsOutput) ToKeyUsageOptionsOutputWithContext(ctx context.Context) KeyUsageOptionsOutput {
	return o
}

func (o KeyUsageOptionsOutput) ToKeyUsageOptionsPtrOutput() KeyUsageOptionsPtrOutput {
	return o.ToKeyUsageOptionsPtrOutputWithContext(context.Background())
}

func (o KeyUsageOptionsOutput) ToKeyUsageOptionsPtrOutputWithContext(ctx context.Context) KeyUsageOptionsPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *KeyUsageOptions {
		return &v
	}).(KeyUsageOptionsPtrOutput)
}

// The key may be used to sign certificates.
func (o KeyUsageOptionsOutput) CertSign() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.CertSign }).(pulumi.BoolPtrOutput)
}

// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
func (o KeyUsageOptionsOutput) ContentCommitment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.ContentCommitment }).(pulumi.BoolPtrOutput)
}

// The key may be used sign certificate revocation lists.
func (o KeyUsageOptionsOutput) CrlSign() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.CrlSign }).(pulumi.BoolPtrOutput)
}

// The key may be used to encipher data.
func (o KeyUsageOptionsOutput) DataEncipherment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.DataEncipherment }).(pulumi.BoolPtrOutput)
}

// The key may be used to decipher only.
func (o KeyUsageOptionsOutput) DecipherOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.DecipherOnly }).(pulumi.BoolPtrOutput)
}

// The key may be used for digital signatures.
func (o KeyUsageOptionsOutput) DigitalSignature() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.DigitalSignature }).(pulumi.BoolPtrOutput)
}

// The key may be used to encipher only.
func (o KeyUsageOptionsOutput) EncipherOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.EncipherOnly }).(pulumi.BoolPtrOutput)
}

// The key may be used in a key agreement protocol.
func (o KeyUsageOptionsOutput) KeyAgreement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.KeyAgreement }).(pulumi.BoolPtrOutput)
}

// The key may be used to encipher other keys.
func (o KeyUsageOptionsOutput) KeyEncipherment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.KeyEncipherment }).(pulumi.BoolPtrOutput)
}

type KeyUsageOptionsPtrOutput struct{ *pulumi.OutputState }

func (KeyUsageOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyUsageOptions)(nil)).Elem()
}

func (o KeyUsageOptionsPtrOutput) ToKeyUsageOptionsPtrOutput() KeyUsageOptionsPtrOutput {
	return o
}

func (o KeyUsageOptionsPtrOutput) ToKeyUsageOptionsPtrOutputWithContext(ctx context.Context) KeyUsageOptionsPtrOutput {
	return o
}

func (o KeyUsageOptionsPtrOutput) Elem() KeyUsageOptionsOutput {
	return o.ApplyT(func(v *KeyUsageOptions) KeyUsageOptions { return *v }).(KeyUsageOptionsOutput)
}

// The key may be used to sign certificates.
func (o KeyUsageOptionsPtrOutput) CertSign() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.CertSign
	}).(pulumi.BoolPtrOutput)
}

// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
func (o KeyUsageOptionsPtrOutput) ContentCommitment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.ContentCommitment
	}).(pulumi.BoolPtrOutput)
}

// The key may be used sign certificate revocation lists.
func (o KeyUsageOptionsPtrOutput) CrlSign() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.CrlSign
	}).(pulumi.BoolPtrOutput)
}

// The key may be used to encipher data.
func (o KeyUsageOptionsPtrOutput) DataEncipherment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.DataEncipherment
	}).(pulumi.BoolPtrOutput)
}

// The key may be used to decipher only.
func (o KeyUsageOptionsPtrOutput) DecipherOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.DecipherOnly
	}).(pulumi.BoolPtrOutput)
}

// The key may be used for digital signatures.
func (o KeyUsageOptionsPtrOutput) DigitalSignature() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.DigitalSignature
	}).(pulumi.BoolPtrOutput)
}

// The key may be used to encipher only.
func (o KeyUsageOptionsPtrOutput) EncipherOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EncipherOnly
	}).(pulumi.BoolPtrOutput)
}

// The key may be used in a key agreement protocol.
func (o KeyUsageOptionsPtrOutput) KeyAgreement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.KeyAgreement
	}).(pulumi.BoolPtrOutput)
}

// The key may be used to encipher other keys.
func (o KeyUsageOptionsPtrOutput) KeyEncipherment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.KeyEncipherment
	}).(pulumi.BoolPtrOutput)
}

// A Cloud KMS key configuration that a CertificateAuthority will use.
type KeyVersionSpec struct {
	// Required. The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
	Algorithm *string `pulumi:"algorithm"`
	// Required. The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
	CloudKmsKeyVersion *string `pulumi:"cloudKmsKeyVersion"`
}

// KeyVersionSpecInput is an input type that accepts KeyVersionSpecArgs and KeyVersionSpecOutput values.
// You can construct a concrete instance of `KeyVersionSpecInput` via:
//
//          KeyVersionSpecArgs{...}
type KeyVersionSpecInput interface {
	pulumi.Input

	ToKeyVersionSpecOutput() KeyVersionSpecOutput
	ToKeyVersionSpecOutputWithContext(context.Context) KeyVersionSpecOutput
}

// A Cloud KMS key configuration that a CertificateAuthority will use.
type KeyVersionSpecArgs struct {
	// Required. The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
	Algorithm pulumi.StringPtrInput `pulumi:"algorithm"`
	// Required. The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
	CloudKmsKeyVersion pulumi.StringPtrInput `pulumi:"cloudKmsKeyVersion"`
}

func (KeyVersionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVersionSpec)(nil)).Elem()
}

func (i KeyVersionSpecArgs) ToKeyVersionSpecOutput() KeyVersionSpecOutput {
	return i.ToKeyVersionSpecOutputWithContext(context.Background())
}

func (i KeyVersionSpecArgs) ToKeyVersionSpecOutputWithContext(ctx context.Context) KeyVersionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVersionSpecOutput)
}

func (i KeyVersionSpecArgs) ToKeyVersionSpecPtrOutput() KeyVersionSpecPtrOutput {
	return i.ToKeyVersionSpecPtrOutputWithContext(context.Background())
}

func (i KeyVersionSpecArgs) ToKeyVersionSpecPtrOutputWithContext(ctx context.Context) KeyVersionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVersionSpecOutput).ToKeyVersionSpecPtrOutputWithContext(ctx)
}

// KeyVersionSpecPtrInput is an input type that accepts KeyVersionSpecArgs, KeyVersionSpecPtr and KeyVersionSpecPtrOutput values.
// You can construct a concrete instance of `KeyVersionSpecPtrInput` via:
//
//          KeyVersionSpecArgs{...}
//
//  or:
//
//          nil
type KeyVersionSpecPtrInput interface {
	pulumi.Input

	ToKeyVersionSpecPtrOutput() KeyVersionSpecPtrOutput
	ToKeyVersionSpecPtrOutputWithContext(context.Context) KeyVersionSpecPtrOutput
}

type keyVersionSpecPtrType KeyVersionSpecArgs

func KeyVersionSpecPtr(v *KeyVersionSpecArgs) KeyVersionSpecPtrInput {
	return (*keyVersionSpecPtrType)(v)
}

func (*keyVersionSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVersionSpec)(nil)).Elem()
}

func (i *keyVersionSpecPtrType) ToKeyVersionSpecPtrOutput() KeyVersionSpecPtrOutput {
	return i.ToKeyVersionSpecPtrOutputWithContext(context.Background())
}

func (i *keyVersionSpecPtrType) ToKeyVersionSpecPtrOutputWithContext(ctx context.Context) KeyVersionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVersionSpecPtrOutput)
}

// A Cloud KMS key configuration that a CertificateAuthority will use.
type KeyVersionSpecOutput struct{ *pulumi.OutputState }

func (KeyVersionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVersionSpec)(nil)).Elem()
}

func (o KeyVersionSpecOutput) ToKeyVersionSpecOutput() KeyVersionSpecOutput {
	return o
}

func (o KeyVersionSpecOutput) ToKeyVersionSpecOutputWithContext(ctx context.Context) KeyVersionSpecOutput {
	return o
}

func (o KeyVersionSpecOutput) ToKeyVersionSpecPtrOutput() KeyVersionSpecPtrOutput {
	return o.ToKeyVersionSpecPtrOutputWithContext(context.Background())
}

func (o KeyVersionSpecOutput) ToKeyVersionSpecPtrOutputWithContext(ctx context.Context) KeyVersionSpecPtrOutput {
	return o.ApplyT(func(v KeyVersionSpec) *KeyVersionSpec {
		return &v
	}).(KeyVersionSpecPtrOutput)
}

// Required. The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
func (o KeyVersionSpecOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVersionSpec) *string { return v.Algorithm }).(pulumi.StringPtrOutput)
}

// Required. The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
func (o KeyVersionSpecOutput) CloudKmsKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVersionSpec) *string { return v.CloudKmsKeyVersion }).(pulumi.StringPtrOutput)
}

type KeyVersionSpecPtrOutput struct{ *pulumi.OutputState }

func (KeyVersionSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVersionSpec)(nil)).Elem()
}

func (o KeyVersionSpecPtrOutput) ToKeyVersionSpecPtrOutput() KeyVersionSpecPtrOutput {
	return o
}

func (o KeyVersionSpecPtrOutput) ToKeyVersionSpecPtrOutputWithContext(ctx context.Context) KeyVersionSpecPtrOutput {
	return o
}

func (o KeyVersionSpecPtrOutput) Elem() KeyVersionSpecOutput {
	return o.ApplyT(func(v *KeyVersionSpec) KeyVersionSpec { return *v }).(KeyVersionSpecOutput)
}

// Required. The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
func (o KeyVersionSpecPtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVersionSpec) *string {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(pulumi.StringPtrOutput)
}

// Required. The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
func (o KeyVersionSpecPtrOutput) CloudKmsKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVersionSpec) *string {
		if v == nil {
			return nil
		}
		return v.CloudKmsKeyVersion
	}).(pulumi.StringPtrOutput)
}

// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
type ObjectId struct {
	// Required. The parts of an OID path. The most significant parts of the path come first.
	ObjectIdPath []int `pulumi:"objectIdPath"`
}

// ObjectIdInput is an input type that accepts ObjectIdArgs and ObjectIdOutput values.
// You can construct a concrete instance of `ObjectIdInput` via:
//
//          ObjectIdArgs{...}
type ObjectIdInput interface {
	pulumi.Input

	ToObjectIdOutput() ObjectIdOutput
	ToObjectIdOutputWithContext(context.Context) ObjectIdOutput
}

// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
type ObjectIdArgs struct {
	// Required. The parts of an OID path. The most significant parts of the path come first.
	ObjectIdPath pulumi.IntArrayInput `pulumi:"objectIdPath"`
}

func (ObjectIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectId)(nil)).Elem()
}

func (i ObjectIdArgs) ToObjectIdOutput() ObjectIdOutput {
	return i.ToObjectIdOutputWithContext(context.Background())
}

func (i ObjectIdArgs) ToObjectIdOutputWithContext(ctx context.Context) ObjectIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectIdOutput)
}

func (i ObjectIdArgs) ToObjectIdPtrOutput() ObjectIdPtrOutput {
	return i.ToObjectIdPtrOutputWithContext(context.Background())
}

func (i ObjectIdArgs) ToObjectIdPtrOutputWithContext(ctx context.Context) ObjectIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectIdOutput).ToObjectIdPtrOutputWithContext(ctx)
}

// ObjectIdPtrInput is an input type that accepts ObjectIdArgs, ObjectIdPtr and ObjectIdPtrOutput values.
// You can construct a concrete instance of `ObjectIdPtrInput` via:
//
//          ObjectIdArgs{...}
//
//  or:
//
//          nil
type ObjectIdPtrInput interface {
	pulumi.Input

	ToObjectIdPtrOutput() ObjectIdPtrOutput
	ToObjectIdPtrOutputWithContext(context.Context) ObjectIdPtrOutput
}

type objectIdPtrType ObjectIdArgs

func ObjectIdPtr(v *ObjectIdArgs) ObjectIdPtrInput {
	return (*objectIdPtrType)(v)
}

func (*objectIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectId)(nil)).Elem()
}

func (i *objectIdPtrType) ToObjectIdPtrOutput() ObjectIdPtrOutput {
	return i.ToObjectIdPtrOutputWithContext(context.Background())
}

func (i *objectIdPtrType) ToObjectIdPtrOutputWithContext(ctx context.Context) ObjectIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectIdPtrOutput)
}

// ObjectIdArrayInput is an input type that accepts ObjectIdArray and ObjectIdArrayOutput values.
// You can construct a concrete instance of `ObjectIdArrayInput` via:
//
//          ObjectIdArray{ ObjectIdArgs{...} }
type ObjectIdArrayInput interface {
	pulumi.Input

	ToObjectIdArrayOutput() ObjectIdArrayOutput
	ToObjectIdArrayOutputWithContext(context.Context) ObjectIdArrayOutput
}

type ObjectIdArray []ObjectIdInput

func (ObjectIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectId)(nil)).Elem()
}

func (i ObjectIdArray) ToObjectIdArrayOutput() ObjectIdArrayOutput {
	return i.ToObjectIdArrayOutputWithContext(context.Background())
}

func (i ObjectIdArray) ToObjectIdArrayOutputWithContext(ctx context.Context) ObjectIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectIdArrayOutput)
}

// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
type ObjectIdOutput struct{ *pulumi.OutputState }

func (ObjectIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectId)(nil)).Elem()
}

func (o ObjectIdOutput) ToObjectIdOutput() ObjectIdOutput {
	return o
}

func (o ObjectIdOutput) ToObjectIdOutputWithContext(ctx context.Context) ObjectIdOutput {
	return o
}

func (o ObjectIdOutput) ToObjectIdPtrOutput() ObjectIdPtrOutput {
	return o.ToObjectIdPtrOutputWithContext(context.Background())
}

func (o ObjectIdOutput) ToObjectIdPtrOutputWithContext(ctx context.Context) ObjectIdPtrOutput {
	return o.ApplyT(func(v ObjectId) *ObjectId {
		return &v
	}).(ObjectIdPtrOutput)
}

// Required. The parts of an OID path. The most significant parts of the path come first.
func (o ObjectIdOutput) ObjectIdPath() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ObjectId) []int { return v.ObjectIdPath }).(pulumi.IntArrayOutput)
}

type ObjectIdPtrOutput struct{ *pulumi.OutputState }

func (ObjectIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectId)(nil)).Elem()
}

func (o ObjectIdPtrOutput) ToObjectIdPtrOutput() ObjectIdPtrOutput {
	return o
}

func (o ObjectIdPtrOutput) ToObjectIdPtrOutputWithContext(ctx context.Context) ObjectIdPtrOutput {
	return o
}

func (o ObjectIdPtrOutput) Elem() ObjectIdOutput {
	return o.ApplyT(func(v *ObjectId) ObjectId { return *v }).(ObjectIdOutput)
}

// Required. The parts of an OID path. The most significant parts of the path come first.
func (o ObjectIdPtrOutput) ObjectIdPath() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ObjectId) []int {
		if v == nil {
			return nil
		}
		return v.ObjectIdPath
	}).(pulumi.IntArrayOutput)
}

type ObjectIdArrayOutput struct{ *pulumi.OutputState }

func (ObjectIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectId)(nil)).Elem()
}

func (o ObjectIdArrayOutput) ToObjectIdArrayOutput() ObjectIdArrayOutput {
	return o
}

func (o ObjectIdArrayOutput) ToObjectIdArrayOutputWithContext(ctx context.Context) ObjectIdArrayOutput {
	return o
}

func (o ObjectIdArrayOutput) Index(i pulumi.IntInput) ObjectIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectId {
		return vs[0].([]ObjectId)[vs[1].(int)]
	}).(ObjectIdOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type Policy struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs []AuditConfig `pulumi:"auditConfigs"`
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings []Binding `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag *string `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int `pulumi:"version"`
}

// PolicyInput is an input type that accepts PolicyArgs and PolicyOutput values.
// You can construct a concrete instance of `PolicyInput` via:
//
//          PolicyArgs{...}
type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(context.Context) PolicyOutput
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyArgs struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs AuditConfigArrayInput `pulumi:"auditConfigs"`
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings BindingArrayInput `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (i PolicyArgs) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

func (i PolicyArgs) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput).ToPolicyPtrOutputWithContext(ctx)
}

// PolicyPtrInput is an input type that accepts PolicyArgs, PolicyPtr and PolicyPtrOutput values.
// You can construct a concrete instance of `PolicyPtrInput` via:
//
//          PolicyArgs{...}
//
//  or:
//
//          nil
type PolicyPtrInput interface {
	pulumi.Input

	ToPolicyPtrOutput() PolicyPtrOutput
	ToPolicyPtrOutputWithContext(context.Context) PolicyPtrOutput
}

type policyPtrType PolicyArgs

func PolicyPtr(v *PolicyArgs) PolicyPtrInput {
	return (*policyPtrType)(v)
}

func (*policyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *policyPtrType) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i *policyPtrType) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o.ToPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o.ApplyT(func(v Policy) *Policy {
		return &v
	}).(PolicyPtrOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v Policy) []AuditConfig { return v.AuditConfigs }).(AuditConfigArrayOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v Policy) []Binding { return v.Bindings }).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Policy) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Policy) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type PolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyPtrOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) Elem() PolicyOutput {
	return o.ApplyT(func(v *Policy) Policy { return *v }).(PolicyOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyPtrOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v *Policy) []AuditConfig {
		if v == nil {
			return nil
		}
		return v.AuditConfigs
	}).(AuditConfigArrayOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyPtrOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v *Policy) []Binding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

// A PublicKey describes a public key.
type PublicKey struct {
	// Required. A public key. When this is specified in a request, the padding and encoding can be any of the options described by the respective 'KeyType' value. When this is generated by the service, it will always be an RFC 5280 [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1) structure containing an algorithm identifier and a key.
	Key *string `pulumi:"key"`
	// Optional. The type of public key. If specified, it must match the public key used for the`key` field.
	Type *string `pulumi:"type"`
}

// PublicKeyInput is an input type that accepts PublicKeyArgs and PublicKeyOutput values.
// You can construct a concrete instance of `PublicKeyInput` via:
//
//          PublicKeyArgs{...}
type PublicKeyInput interface {
	pulumi.Input

	ToPublicKeyOutput() PublicKeyOutput
	ToPublicKeyOutputWithContext(context.Context) PublicKeyOutput
}

// A PublicKey describes a public key.
type PublicKeyArgs struct {
	// Required. A public key. When this is specified in a request, the padding and encoding can be any of the options described by the respective 'KeyType' value. When this is generated by the service, it will always be an RFC 5280 [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1) structure containing an algorithm identifier and a key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Optional. The type of public key. If specified, it must match the public key used for the`key` field.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicKey)(nil)).Elem()
}

func (i PublicKeyArgs) ToPublicKeyOutput() PublicKeyOutput {
	return i.ToPublicKeyOutputWithContext(context.Background())
}

func (i PublicKeyArgs) ToPublicKeyOutputWithContext(ctx context.Context) PublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicKeyOutput)
}

func (i PublicKeyArgs) ToPublicKeyPtrOutput() PublicKeyPtrOutput {
	return i.ToPublicKeyPtrOutputWithContext(context.Background())
}

func (i PublicKeyArgs) ToPublicKeyPtrOutputWithContext(ctx context.Context) PublicKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicKeyOutput).ToPublicKeyPtrOutputWithContext(ctx)
}

// PublicKeyPtrInput is an input type that accepts PublicKeyArgs, PublicKeyPtr and PublicKeyPtrOutput values.
// You can construct a concrete instance of `PublicKeyPtrInput` via:
//
//          PublicKeyArgs{...}
//
//  or:
//
//          nil
type PublicKeyPtrInput interface {
	pulumi.Input

	ToPublicKeyPtrOutput() PublicKeyPtrOutput
	ToPublicKeyPtrOutputWithContext(context.Context) PublicKeyPtrOutput
}

type publicKeyPtrType PublicKeyArgs

func PublicKeyPtr(v *PublicKeyArgs) PublicKeyPtrInput {
	return (*publicKeyPtrType)(v)
}

func (*publicKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicKey)(nil)).Elem()
}

func (i *publicKeyPtrType) ToPublicKeyPtrOutput() PublicKeyPtrOutput {
	return i.ToPublicKeyPtrOutputWithContext(context.Background())
}

func (i *publicKeyPtrType) ToPublicKeyPtrOutputWithContext(ctx context.Context) PublicKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicKeyPtrOutput)
}

// A PublicKey describes a public key.
type PublicKeyOutput struct{ *pulumi.OutputState }

func (PublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicKey)(nil)).Elem()
}

func (o PublicKeyOutput) ToPublicKeyOutput() PublicKeyOutput {
	return o
}

func (o PublicKeyOutput) ToPublicKeyOutputWithContext(ctx context.Context) PublicKeyOutput {
	return o
}

func (o PublicKeyOutput) ToPublicKeyPtrOutput() PublicKeyPtrOutput {
	return o.ToPublicKeyPtrOutputWithContext(context.Background())
}

func (o PublicKeyOutput) ToPublicKeyPtrOutputWithContext(ctx context.Context) PublicKeyPtrOutput {
	return o.ApplyT(func(v PublicKey) *PublicKey {
		return &v
	}).(PublicKeyPtrOutput)
}

// Required. A public key. When this is specified in a request, the padding and encoding can be any of the options described by the respective 'KeyType' value. When this is generated by the service, it will always be an RFC 5280 [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1) structure containing an algorithm identifier and a key.
func (o PublicKeyOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicKey) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Optional. The type of public key. If specified, it must match the public key used for the`key` field.
func (o PublicKeyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicKey) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PublicKeyPtrOutput struct{ *pulumi.OutputState }

func (PublicKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicKey)(nil)).Elem()
}

func (o PublicKeyPtrOutput) ToPublicKeyPtrOutput() PublicKeyPtrOutput {
	return o
}

func (o PublicKeyPtrOutput) ToPublicKeyPtrOutputWithContext(ctx context.Context) PublicKeyPtrOutput {
	return o
}

func (o PublicKeyPtrOutput) Elem() PublicKeyOutput {
	return o.ApplyT(func(v *PublicKey) PublicKey { return *v }).(PublicKeyOutput)
}

// Required. A public key. When this is specified in a request, the padding and encoding can be any of the options described by the respective 'KeyType' value. When this is generated by the service, it will always be an RFC 5280 [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1) structure containing an algorithm identifier and a key.
func (o PublicKeyPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicKey) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Optional. The type of public key. If specified, it must match the public key used for the`key` field.
func (o PublicKeyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicKey) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// A ReusableConfigValues is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
type ReusableConfigValues struct {
	// Optional. Describes custom X.509 extensions.
	AdditionalExtensions []X509Extension `pulumi:"additionalExtensions"`
	// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
	AiaOcspServers []string `pulumi:"aiaOcspServers"`
	// Optional. Describes options in this ReusableConfigValues that are relevant in a CA certificate.
	CaOptions *CaOptions `pulumi:"caOptions"`
	// Optional. Indicates the intended use for keys that correspond to a certificate.
	KeyUsage *KeyUsage `pulumi:"keyUsage"`
	// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	PolicyIds []ObjectId `pulumi:"policyIds"`
}

// ReusableConfigValuesInput is an input type that accepts ReusableConfigValuesArgs and ReusableConfigValuesOutput values.
// You can construct a concrete instance of `ReusableConfigValuesInput` via:
//
//          ReusableConfigValuesArgs{...}
type ReusableConfigValuesInput interface {
	pulumi.Input

	ToReusableConfigValuesOutput() ReusableConfigValuesOutput
	ToReusableConfigValuesOutputWithContext(context.Context) ReusableConfigValuesOutput
}

// A ReusableConfigValues is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
type ReusableConfigValuesArgs struct {
	// Optional. Describes custom X.509 extensions.
	AdditionalExtensions X509ExtensionArrayInput `pulumi:"additionalExtensions"`
	// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
	AiaOcspServers pulumi.StringArrayInput `pulumi:"aiaOcspServers"`
	// Optional. Describes options in this ReusableConfigValues that are relevant in a CA certificate.
	CaOptions CaOptionsPtrInput `pulumi:"caOptions"`
	// Optional. Indicates the intended use for keys that correspond to a certificate.
	KeyUsage KeyUsagePtrInput `pulumi:"keyUsage"`
	// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	PolicyIds ObjectIdArrayInput `pulumi:"policyIds"`
}

func (ReusableConfigValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReusableConfigValues)(nil)).Elem()
}

func (i ReusableConfigValuesArgs) ToReusableConfigValuesOutput() ReusableConfigValuesOutput {
	return i.ToReusableConfigValuesOutputWithContext(context.Background())
}

func (i ReusableConfigValuesArgs) ToReusableConfigValuesOutputWithContext(ctx context.Context) ReusableConfigValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReusableConfigValuesOutput)
}

func (i ReusableConfigValuesArgs) ToReusableConfigValuesPtrOutput() ReusableConfigValuesPtrOutput {
	return i.ToReusableConfigValuesPtrOutputWithContext(context.Background())
}

func (i ReusableConfigValuesArgs) ToReusableConfigValuesPtrOutputWithContext(ctx context.Context) ReusableConfigValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReusableConfigValuesOutput).ToReusableConfigValuesPtrOutputWithContext(ctx)
}

// ReusableConfigValuesPtrInput is an input type that accepts ReusableConfigValuesArgs, ReusableConfigValuesPtr and ReusableConfigValuesPtrOutput values.
// You can construct a concrete instance of `ReusableConfigValuesPtrInput` via:
//
//          ReusableConfigValuesArgs{...}
//
//  or:
//
//          nil
type ReusableConfigValuesPtrInput interface {
	pulumi.Input

	ToReusableConfigValuesPtrOutput() ReusableConfigValuesPtrOutput
	ToReusableConfigValuesPtrOutputWithContext(context.Context) ReusableConfigValuesPtrOutput
}

type reusableConfigValuesPtrType ReusableConfigValuesArgs

func ReusableConfigValuesPtr(v *ReusableConfigValuesArgs) ReusableConfigValuesPtrInput {
	return (*reusableConfigValuesPtrType)(v)
}

func (*reusableConfigValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReusableConfigValues)(nil)).Elem()
}

func (i *reusableConfigValuesPtrType) ToReusableConfigValuesPtrOutput() ReusableConfigValuesPtrOutput {
	return i.ToReusableConfigValuesPtrOutputWithContext(context.Background())
}

func (i *reusableConfigValuesPtrType) ToReusableConfigValuesPtrOutputWithContext(ctx context.Context) ReusableConfigValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReusableConfigValuesPtrOutput)
}

// A ReusableConfigValues is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
type ReusableConfigValuesOutput struct{ *pulumi.OutputState }

func (ReusableConfigValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReusableConfigValues)(nil)).Elem()
}

func (o ReusableConfigValuesOutput) ToReusableConfigValuesOutput() ReusableConfigValuesOutput {
	return o
}

func (o ReusableConfigValuesOutput) ToReusableConfigValuesOutputWithContext(ctx context.Context) ReusableConfigValuesOutput {
	return o
}

func (o ReusableConfigValuesOutput) ToReusableConfigValuesPtrOutput() ReusableConfigValuesPtrOutput {
	return o.ToReusableConfigValuesPtrOutputWithContext(context.Background())
}

func (o ReusableConfigValuesOutput) ToReusableConfigValuesPtrOutputWithContext(ctx context.Context) ReusableConfigValuesPtrOutput {
	return o.ApplyT(func(v ReusableConfigValues) *ReusableConfigValues {
		return &v
	}).(ReusableConfigValuesPtrOutput)
}

// Optional. Describes custom X.509 extensions.
func (o ReusableConfigValuesOutput) AdditionalExtensions() X509ExtensionArrayOutput {
	return o.ApplyT(func(v ReusableConfigValues) []X509Extension { return v.AdditionalExtensions }).(X509ExtensionArrayOutput)
}

// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
func (o ReusableConfigValuesOutput) AiaOcspServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReusableConfigValues) []string { return v.AiaOcspServers }).(pulumi.StringArrayOutput)
}

// Optional. Describes options in this ReusableConfigValues that are relevant in a CA certificate.
func (o ReusableConfigValuesOutput) CaOptions() CaOptionsPtrOutput {
	return o.ApplyT(func(v ReusableConfigValues) *CaOptions { return v.CaOptions }).(CaOptionsPtrOutput)
}

// Optional. Indicates the intended use for keys that correspond to a certificate.
func (o ReusableConfigValuesOutput) KeyUsage() KeyUsagePtrOutput {
	return o.ApplyT(func(v ReusableConfigValues) *KeyUsage { return v.KeyUsage }).(KeyUsagePtrOutput)
}

// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
func (o ReusableConfigValuesOutput) PolicyIds() ObjectIdArrayOutput {
	return o.ApplyT(func(v ReusableConfigValues) []ObjectId { return v.PolicyIds }).(ObjectIdArrayOutput)
}

type ReusableConfigValuesPtrOutput struct{ *pulumi.OutputState }

func (ReusableConfigValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReusableConfigValues)(nil)).Elem()
}

func (o ReusableConfigValuesPtrOutput) ToReusableConfigValuesPtrOutput() ReusableConfigValuesPtrOutput {
	return o
}

func (o ReusableConfigValuesPtrOutput) ToReusableConfigValuesPtrOutputWithContext(ctx context.Context) ReusableConfigValuesPtrOutput {
	return o
}

func (o ReusableConfigValuesPtrOutput) Elem() ReusableConfigValuesOutput {
	return o.ApplyT(func(v *ReusableConfigValues) ReusableConfigValues { return *v }).(ReusableConfigValuesOutput)
}

// Optional. Describes custom X.509 extensions.
func (o ReusableConfigValuesPtrOutput) AdditionalExtensions() X509ExtensionArrayOutput {
	return o.ApplyT(func(v *ReusableConfigValues) []X509Extension {
		if v == nil {
			return nil
		}
		return v.AdditionalExtensions
	}).(X509ExtensionArrayOutput)
}

// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
func (o ReusableConfigValuesPtrOutput) AiaOcspServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReusableConfigValues) []string {
		if v == nil {
			return nil
		}
		return v.AiaOcspServers
	}).(pulumi.StringArrayOutput)
}

// Optional. Describes options in this ReusableConfigValues that are relevant in a CA certificate.
func (o ReusableConfigValuesPtrOutput) CaOptions() CaOptionsPtrOutput {
	return o.ApplyT(func(v *ReusableConfigValues) *CaOptions {
		if v == nil {
			return nil
		}
		return v.CaOptions
	}).(CaOptionsPtrOutput)
}

// Optional. Indicates the intended use for keys that correspond to a certificate.
func (o ReusableConfigValuesPtrOutput) KeyUsage() KeyUsagePtrOutput {
	return o.ApplyT(func(v *ReusableConfigValues) *KeyUsage {
		if v == nil {
			return nil
		}
		return v.KeyUsage
	}).(KeyUsagePtrOutput)
}

// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
func (o ReusableConfigValuesPtrOutput) PolicyIds() ObjectIdArrayOutput {
	return o.ApplyT(func(v *ReusableConfigValues) []ObjectId {
		if v == nil {
			return nil
		}
		return v.PolicyIds
	}).(ObjectIdArrayOutput)
}

// A ReusableConfigWrapper describes values that may assist in creating an X.509 certificate, or a reference to a pre-defined set of values.
type ReusableConfigWrapper struct {
	// Required. A resource path to a ReusableConfig in the format `projects/*/locations/*/reusableConfigs/*`.
	ReusableConfig *string `pulumi:"reusableConfig"`
	// Required. A user-specified inline ReusableConfigValues.
	ReusableConfigValues *ReusableConfigValues `pulumi:"reusableConfigValues"`
}

// ReusableConfigWrapperInput is an input type that accepts ReusableConfigWrapperArgs and ReusableConfigWrapperOutput values.
// You can construct a concrete instance of `ReusableConfigWrapperInput` via:
//
//          ReusableConfigWrapperArgs{...}
type ReusableConfigWrapperInput interface {
	pulumi.Input

	ToReusableConfigWrapperOutput() ReusableConfigWrapperOutput
	ToReusableConfigWrapperOutputWithContext(context.Context) ReusableConfigWrapperOutput
}

// A ReusableConfigWrapper describes values that may assist in creating an X.509 certificate, or a reference to a pre-defined set of values.
type ReusableConfigWrapperArgs struct {
	// Required. A resource path to a ReusableConfig in the format `projects/*/locations/*/reusableConfigs/*`.
	ReusableConfig pulumi.StringPtrInput `pulumi:"reusableConfig"`
	// Required. A user-specified inline ReusableConfigValues.
	ReusableConfigValues ReusableConfigValuesPtrInput `pulumi:"reusableConfigValues"`
}

func (ReusableConfigWrapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReusableConfigWrapper)(nil)).Elem()
}

func (i ReusableConfigWrapperArgs) ToReusableConfigWrapperOutput() ReusableConfigWrapperOutput {
	return i.ToReusableConfigWrapperOutputWithContext(context.Background())
}

func (i ReusableConfigWrapperArgs) ToReusableConfigWrapperOutputWithContext(ctx context.Context) ReusableConfigWrapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReusableConfigWrapperOutput)
}

func (i ReusableConfigWrapperArgs) ToReusableConfigWrapperPtrOutput() ReusableConfigWrapperPtrOutput {
	return i.ToReusableConfigWrapperPtrOutputWithContext(context.Background())
}

func (i ReusableConfigWrapperArgs) ToReusableConfigWrapperPtrOutputWithContext(ctx context.Context) ReusableConfigWrapperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReusableConfigWrapperOutput).ToReusableConfigWrapperPtrOutputWithContext(ctx)
}

// ReusableConfigWrapperPtrInput is an input type that accepts ReusableConfigWrapperArgs, ReusableConfigWrapperPtr and ReusableConfigWrapperPtrOutput values.
// You can construct a concrete instance of `ReusableConfigWrapperPtrInput` via:
//
//          ReusableConfigWrapperArgs{...}
//
//  or:
//
//          nil
type ReusableConfigWrapperPtrInput interface {
	pulumi.Input

	ToReusableConfigWrapperPtrOutput() ReusableConfigWrapperPtrOutput
	ToReusableConfigWrapperPtrOutputWithContext(context.Context) ReusableConfigWrapperPtrOutput
}

type reusableConfigWrapperPtrType ReusableConfigWrapperArgs

func ReusableConfigWrapperPtr(v *ReusableConfigWrapperArgs) ReusableConfigWrapperPtrInput {
	return (*reusableConfigWrapperPtrType)(v)
}

func (*reusableConfigWrapperPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReusableConfigWrapper)(nil)).Elem()
}

func (i *reusableConfigWrapperPtrType) ToReusableConfigWrapperPtrOutput() ReusableConfigWrapperPtrOutput {
	return i.ToReusableConfigWrapperPtrOutputWithContext(context.Background())
}

func (i *reusableConfigWrapperPtrType) ToReusableConfigWrapperPtrOutputWithContext(ctx context.Context) ReusableConfigWrapperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReusableConfigWrapperPtrOutput)
}

// ReusableConfigWrapperArrayInput is an input type that accepts ReusableConfigWrapperArray and ReusableConfigWrapperArrayOutput values.
// You can construct a concrete instance of `ReusableConfigWrapperArrayInput` via:
//
//          ReusableConfigWrapperArray{ ReusableConfigWrapperArgs{...} }
type ReusableConfigWrapperArrayInput interface {
	pulumi.Input

	ToReusableConfigWrapperArrayOutput() ReusableConfigWrapperArrayOutput
	ToReusableConfigWrapperArrayOutputWithContext(context.Context) ReusableConfigWrapperArrayOutput
}

type ReusableConfigWrapperArray []ReusableConfigWrapperInput

func (ReusableConfigWrapperArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReusableConfigWrapper)(nil)).Elem()
}

func (i ReusableConfigWrapperArray) ToReusableConfigWrapperArrayOutput() ReusableConfigWrapperArrayOutput {
	return i.ToReusableConfigWrapperArrayOutputWithContext(context.Background())
}

func (i ReusableConfigWrapperArray) ToReusableConfigWrapperArrayOutputWithContext(ctx context.Context) ReusableConfigWrapperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReusableConfigWrapperArrayOutput)
}

// A ReusableConfigWrapper describes values that may assist in creating an X.509 certificate, or a reference to a pre-defined set of values.
type ReusableConfigWrapperOutput struct{ *pulumi.OutputState }

func (ReusableConfigWrapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReusableConfigWrapper)(nil)).Elem()
}

func (o ReusableConfigWrapperOutput) ToReusableConfigWrapperOutput() ReusableConfigWrapperOutput {
	return o
}

func (o ReusableConfigWrapperOutput) ToReusableConfigWrapperOutputWithContext(ctx context.Context) ReusableConfigWrapperOutput {
	return o
}

func (o ReusableConfigWrapperOutput) ToReusableConfigWrapperPtrOutput() ReusableConfigWrapperPtrOutput {
	return o.ToReusableConfigWrapperPtrOutputWithContext(context.Background())
}

func (o ReusableConfigWrapperOutput) ToReusableConfigWrapperPtrOutputWithContext(ctx context.Context) ReusableConfigWrapperPtrOutput {
	return o.ApplyT(func(v ReusableConfigWrapper) *ReusableConfigWrapper {
		return &v
	}).(ReusableConfigWrapperPtrOutput)
}

// Required. A resource path to a ReusableConfig in the format `projects/*/locations/*/reusableConfigs/*`.
func (o ReusableConfigWrapperOutput) ReusableConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReusableConfigWrapper) *string { return v.ReusableConfig }).(pulumi.StringPtrOutput)
}

// Required. A user-specified inline ReusableConfigValues.
func (o ReusableConfigWrapperOutput) ReusableConfigValues() ReusableConfigValuesPtrOutput {
	return o.ApplyT(func(v ReusableConfigWrapper) *ReusableConfigValues { return v.ReusableConfigValues }).(ReusableConfigValuesPtrOutput)
}

type ReusableConfigWrapperPtrOutput struct{ *pulumi.OutputState }

func (ReusableConfigWrapperPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReusableConfigWrapper)(nil)).Elem()
}

func (o ReusableConfigWrapperPtrOutput) ToReusableConfigWrapperPtrOutput() ReusableConfigWrapperPtrOutput {
	return o
}

func (o ReusableConfigWrapperPtrOutput) ToReusableConfigWrapperPtrOutputWithContext(ctx context.Context) ReusableConfigWrapperPtrOutput {
	return o
}

func (o ReusableConfigWrapperPtrOutput) Elem() ReusableConfigWrapperOutput {
	return o.ApplyT(func(v *ReusableConfigWrapper) ReusableConfigWrapper { return *v }).(ReusableConfigWrapperOutput)
}

// Required. A resource path to a ReusableConfig in the format `projects/*/locations/*/reusableConfigs/*`.
func (o ReusableConfigWrapperPtrOutput) ReusableConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReusableConfigWrapper) *string {
		if v == nil {
			return nil
		}
		return v.ReusableConfig
	}).(pulumi.StringPtrOutput)
}

// Required. A user-specified inline ReusableConfigValues.
func (o ReusableConfigWrapperPtrOutput) ReusableConfigValues() ReusableConfigValuesPtrOutput {
	return o.ApplyT(func(v *ReusableConfigWrapper) *ReusableConfigValues {
		if v == nil {
			return nil
		}
		return v.ReusableConfigValues
	}).(ReusableConfigValuesPtrOutput)
}

type ReusableConfigWrapperArrayOutput struct{ *pulumi.OutputState }

func (ReusableConfigWrapperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReusableConfigWrapper)(nil)).Elem()
}

func (o ReusableConfigWrapperArrayOutput) ToReusableConfigWrapperArrayOutput() ReusableConfigWrapperArrayOutput {
	return o
}

func (o ReusableConfigWrapperArrayOutput) ToReusableConfigWrapperArrayOutputWithContext(ctx context.Context) ReusableConfigWrapperArrayOutput {
	return o
}

func (o ReusableConfigWrapperArrayOutput) Index(i pulumi.IntInput) ReusableConfigWrapperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReusableConfigWrapper {
		return vs[0].([]ReusableConfigWrapper)[vs[1].(int)]
	}).(ReusableConfigWrapperOutput)
}

// Describes fields that are relavent to the revocation of a Certificate.
type RevocationDetails struct {
	// Indicates why a Certificate was revoked.
	RevocationState *string `pulumi:"revocationState"`
	// The time at which this Certificate was revoked.
	RevocationTime *string `pulumi:"revocationTime"`
}

// RevocationDetailsInput is an input type that accepts RevocationDetailsArgs and RevocationDetailsOutput values.
// You can construct a concrete instance of `RevocationDetailsInput` via:
//
//          RevocationDetailsArgs{...}
type RevocationDetailsInput interface {
	pulumi.Input

	ToRevocationDetailsOutput() RevocationDetailsOutput
	ToRevocationDetailsOutputWithContext(context.Context) RevocationDetailsOutput
}

// Describes fields that are relavent to the revocation of a Certificate.
type RevocationDetailsArgs struct {
	// Indicates why a Certificate was revoked.
	RevocationState pulumi.StringPtrInput `pulumi:"revocationState"`
	// The time at which this Certificate was revoked.
	RevocationTime pulumi.StringPtrInput `pulumi:"revocationTime"`
}

func (RevocationDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RevocationDetails)(nil)).Elem()
}

func (i RevocationDetailsArgs) ToRevocationDetailsOutput() RevocationDetailsOutput {
	return i.ToRevocationDetailsOutputWithContext(context.Background())
}

func (i RevocationDetailsArgs) ToRevocationDetailsOutputWithContext(ctx context.Context) RevocationDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RevocationDetailsOutput)
}

func (i RevocationDetailsArgs) ToRevocationDetailsPtrOutput() RevocationDetailsPtrOutput {
	return i.ToRevocationDetailsPtrOutputWithContext(context.Background())
}

func (i RevocationDetailsArgs) ToRevocationDetailsPtrOutputWithContext(ctx context.Context) RevocationDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RevocationDetailsOutput).ToRevocationDetailsPtrOutputWithContext(ctx)
}

// RevocationDetailsPtrInput is an input type that accepts RevocationDetailsArgs, RevocationDetailsPtr and RevocationDetailsPtrOutput values.
// You can construct a concrete instance of `RevocationDetailsPtrInput` via:
//
//          RevocationDetailsArgs{...}
//
//  or:
//
//          nil
type RevocationDetailsPtrInput interface {
	pulumi.Input

	ToRevocationDetailsPtrOutput() RevocationDetailsPtrOutput
	ToRevocationDetailsPtrOutputWithContext(context.Context) RevocationDetailsPtrOutput
}

type revocationDetailsPtrType RevocationDetailsArgs

func RevocationDetailsPtr(v *RevocationDetailsArgs) RevocationDetailsPtrInput {
	return (*revocationDetailsPtrType)(v)
}

func (*revocationDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RevocationDetails)(nil)).Elem()
}

func (i *revocationDetailsPtrType) ToRevocationDetailsPtrOutput() RevocationDetailsPtrOutput {
	return i.ToRevocationDetailsPtrOutputWithContext(context.Background())
}

func (i *revocationDetailsPtrType) ToRevocationDetailsPtrOutputWithContext(ctx context.Context) RevocationDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RevocationDetailsPtrOutput)
}

// Describes fields that are relavent to the revocation of a Certificate.
type RevocationDetailsOutput struct{ *pulumi.OutputState }

func (RevocationDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RevocationDetails)(nil)).Elem()
}

func (o RevocationDetailsOutput) ToRevocationDetailsOutput() RevocationDetailsOutput {
	return o
}

func (o RevocationDetailsOutput) ToRevocationDetailsOutputWithContext(ctx context.Context) RevocationDetailsOutput {
	return o
}

func (o RevocationDetailsOutput) ToRevocationDetailsPtrOutput() RevocationDetailsPtrOutput {
	return o.ToRevocationDetailsPtrOutputWithContext(context.Background())
}

func (o RevocationDetailsOutput) ToRevocationDetailsPtrOutputWithContext(ctx context.Context) RevocationDetailsPtrOutput {
	return o.ApplyT(func(v RevocationDetails) *RevocationDetails {
		return &v
	}).(RevocationDetailsPtrOutput)
}

// Indicates why a Certificate was revoked.
func (o RevocationDetailsOutput) RevocationState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RevocationDetails) *string { return v.RevocationState }).(pulumi.StringPtrOutput)
}

// The time at which this Certificate was revoked.
func (o RevocationDetailsOutput) RevocationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RevocationDetails) *string { return v.RevocationTime }).(pulumi.StringPtrOutput)
}

type RevocationDetailsPtrOutput struct{ *pulumi.OutputState }

func (RevocationDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RevocationDetails)(nil)).Elem()
}

func (o RevocationDetailsPtrOutput) ToRevocationDetailsPtrOutput() RevocationDetailsPtrOutput {
	return o
}

func (o RevocationDetailsPtrOutput) ToRevocationDetailsPtrOutputWithContext(ctx context.Context) RevocationDetailsPtrOutput {
	return o
}

func (o RevocationDetailsPtrOutput) Elem() RevocationDetailsOutput {
	return o.ApplyT(func(v *RevocationDetails) RevocationDetails { return *v }).(RevocationDetailsOutput)
}

// Indicates why a Certificate was revoked.
func (o RevocationDetailsPtrOutput) RevocationState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RevocationDetails) *string {
		if v == nil {
			return nil
		}
		return v.RevocationState
	}).(pulumi.StringPtrOutput)
}

// The time at which this Certificate was revoked.
func (o RevocationDetailsPtrOutput) RevocationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RevocationDetails) *string {
		if v == nil {
			return nil
		}
		return v.RevocationTime
	}).(pulumi.StringPtrOutput)
}

// Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
type Subject struct {
	// The country code of the subject.
	CountryCode *string `pulumi:"countryCode"`
	// The locality or city of the subject.
	Locality *string `pulumi:"locality"`
	// The organization of the subject.
	Organization *string `pulumi:"organization"`
	// The organizational_unit of the subject.
	OrganizationalUnit *string `pulumi:"organizationalUnit"`
	// The postal code of the subject.
	PostalCode *string `pulumi:"postalCode"`
	// The province, territory, or regional state of the subject.
	Province *string `pulumi:"province"`
	// The street address of the subject.
	StreetAddress *string `pulumi:"streetAddress"`
}

// SubjectInput is an input type that accepts SubjectArgs and SubjectOutput values.
// You can construct a concrete instance of `SubjectInput` via:
//
//          SubjectArgs{...}
type SubjectInput interface {
	pulumi.Input

	ToSubjectOutput() SubjectOutput
	ToSubjectOutputWithContext(context.Context) SubjectOutput
}

// Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
type SubjectArgs struct {
	// The country code of the subject.
	CountryCode pulumi.StringPtrInput `pulumi:"countryCode"`
	// The locality or city of the subject.
	Locality pulumi.StringPtrInput `pulumi:"locality"`
	// The organization of the subject.
	Organization pulumi.StringPtrInput `pulumi:"organization"`
	// The organizational_unit of the subject.
	OrganizationalUnit pulumi.StringPtrInput `pulumi:"organizationalUnit"`
	// The postal code of the subject.
	PostalCode pulumi.StringPtrInput `pulumi:"postalCode"`
	// The province, territory, or regional state of the subject.
	Province pulumi.StringPtrInput `pulumi:"province"`
	// The street address of the subject.
	StreetAddress pulumi.StringPtrInput `pulumi:"streetAddress"`
}

func (SubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (i SubjectArgs) ToSubjectOutput() SubjectOutput {
	return i.ToSubjectOutputWithContext(context.Background())
}

func (i SubjectArgs) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectOutput)
}

func (i SubjectArgs) ToSubjectPtrOutput() SubjectPtrOutput {
	return i.ToSubjectPtrOutputWithContext(context.Background())
}

func (i SubjectArgs) ToSubjectPtrOutputWithContext(ctx context.Context) SubjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectOutput).ToSubjectPtrOutputWithContext(ctx)
}

// SubjectPtrInput is an input type that accepts SubjectArgs, SubjectPtr and SubjectPtrOutput values.
// You can construct a concrete instance of `SubjectPtrInput` via:
//
//          SubjectArgs{...}
//
//  or:
//
//          nil
type SubjectPtrInput interface {
	pulumi.Input

	ToSubjectPtrOutput() SubjectPtrOutput
	ToSubjectPtrOutputWithContext(context.Context) SubjectPtrOutput
}

type subjectPtrType SubjectArgs

func SubjectPtr(v *SubjectArgs) SubjectPtrInput {
	return (*subjectPtrType)(v)
}

func (*subjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Subject)(nil)).Elem()
}

func (i *subjectPtrType) ToSubjectPtrOutput() SubjectPtrOutput {
	return i.ToSubjectPtrOutputWithContext(context.Background())
}

func (i *subjectPtrType) ToSubjectPtrOutputWithContext(ctx context.Context) SubjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectPtrOutput)
}

// SubjectArrayInput is an input type that accepts SubjectArray and SubjectArrayOutput values.
// You can construct a concrete instance of `SubjectArrayInput` via:
//
//          SubjectArray{ SubjectArgs{...} }
type SubjectArrayInput interface {
	pulumi.Input

	ToSubjectArrayOutput() SubjectArrayOutput
	ToSubjectArrayOutputWithContext(context.Context) SubjectArrayOutput
}

type SubjectArray []SubjectInput

func (SubjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Subject)(nil)).Elem()
}

func (i SubjectArray) ToSubjectArrayOutput() SubjectArrayOutput {
	return i.ToSubjectArrayOutputWithContext(context.Background())
}

func (i SubjectArray) ToSubjectArrayOutputWithContext(ctx context.Context) SubjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectArrayOutput)
}

// Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
type SubjectOutput struct{ *pulumi.OutputState }

func (SubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (o SubjectOutput) ToSubjectOutput() SubjectOutput {
	return o
}

func (o SubjectOutput) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return o
}

func (o SubjectOutput) ToSubjectPtrOutput() SubjectPtrOutput {
	return o.ToSubjectPtrOutputWithContext(context.Background())
}

func (o SubjectOutput) ToSubjectPtrOutputWithContext(ctx context.Context) SubjectPtrOutput {
	return o.ApplyT(func(v Subject) *Subject {
		return &v
	}).(SubjectPtrOutput)
}

// The country code of the subject.
func (o SubjectOutput) CountryCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.CountryCode }).(pulumi.StringPtrOutput)
}

// The locality or city of the subject.
func (o SubjectOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.Locality }).(pulumi.StringPtrOutput)
}

// The organization of the subject.
func (o SubjectOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.Organization }).(pulumi.StringPtrOutput)
}

// The organizational_unit of the subject.
func (o SubjectOutput) OrganizationalUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.OrganizationalUnit }).(pulumi.StringPtrOutput)
}

// The postal code of the subject.
func (o SubjectOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.PostalCode }).(pulumi.StringPtrOutput)
}

// The province, territory, or regional state of the subject.
func (o SubjectOutput) Province() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.Province }).(pulumi.StringPtrOutput)
}

// The street address of the subject.
func (o SubjectOutput) StreetAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.StreetAddress }).(pulumi.StringPtrOutput)
}

type SubjectPtrOutput struct{ *pulumi.OutputState }

func (SubjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subject)(nil)).Elem()
}

func (o SubjectPtrOutput) ToSubjectPtrOutput() SubjectPtrOutput {
	return o
}

func (o SubjectPtrOutput) ToSubjectPtrOutputWithContext(ctx context.Context) SubjectPtrOutput {
	return o
}

func (o SubjectPtrOutput) Elem() SubjectOutput {
	return o.ApplyT(func(v *Subject) Subject { return *v }).(SubjectOutput)
}

// The country code of the subject.
func (o SubjectPtrOutput) CountryCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subject) *string {
		if v == nil {
			return nil
		}
		return v.CountryCode
	}).(pulumi.StringPtrOutput)
}

// The locality or city of the subject.
func (o SubjectPtrOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subject) *string {
		if v == nil {
			return nil
		}
		return v.Locality
	}).(pulumi.StringPtrOutput)
}

// The organization of the subject.
func (o SubjectPtrOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subject) *string {
		if v == nil {
			return nil
		}
		return v.Organization
	}).(pulumi.StringPtrOutput)
}

// The organizational_unit of the subject.
func (o SubjectPtrOutput) OrganizationalUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subject) *string {
		if v == nil {
			return nil
		}
		return v.OrganizationalUnit
	}).(pulumi.StringPtrOutput)
}

// The postal code of the subject.
func (o SubjectPtrOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subject) *string {
		if v == nil {
			return nil
		}
		return v.PostalCode
	}).(pulumi.StringPtrOutput)
}

// The province, territory, or regional state of the subject.
func (o SubjectPtrOutput) Province() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subject) *string {
		if v == nil {
			return nil
		}
		return v.Province
	}).(pulumi.StringPtrOutput)
}

// The street address of the subject.
func (o SubjectPtrOutput) StreetAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subject) *string {
		if v == nil {
			return nil
		}
		return v.StreetAddress
	}).(pulumi.StringPtrOutput)
}

type SubjectArrayOutput struct{ *pulumi.OutputState }

func (SubjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Subject)(nil)).Elem()
}

func (o SubjectArrayOutput) ToSubjectArrayOutput() SubjectArrayOutput {
	return o
}

func (o SubjectArrayOutput) ToSubjectArrayOutputWithContext(ctx context.Context) SubjectArrayOutput {
	return o
}

func (o SubjectArrayOutput) Index(i pulumi.IntInput) SubjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Subject {
		return vs[0].([]Subject)[vs[1].(int)]
	}).(SubjectOutput)
}

// SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the "common name" in the distinguished name).
type SubjectAltNames struct {
	// Contains additional subject alternative name values.
	CustomSans []X509Extension `pulumi:"customSans"`
	// Contains only valid, fully-qualified host names.
	DnsNames []string `pulumi:"dnsNames"`
	// Contains only valid RFC 2822 E-mail addresses.
	EmailAddresses []string `pulumi:"emailAddresses"`
	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	IpAddresses []string `pulumi:"ipAddresses"`
	// Contains only valid RFC 3986 URIs.
	Uris []string `pulumi:"uris"`
}

// SubjectAltNamesInput is an input type that accepts SubjectAltNamesArgs and SubjectAltNamesOutput values.
// You can construct a concrete instance of `SubjectAltNamesInput` via:
//
//          SubjectAltNamesArgs{...}
type SubjectAltNamesInput interface {
	pulumi.Input

	ToSubjectAltNamesOutput() SubjectAltNamesOutput
	ToSubjectAltNamesOutputWithContext(context.Context) SubjectAltNamesOutput
}

// SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the "common name" in the distinguished name).
type SubjectAltNamesArgs struct {
	// Contains additional subject alternative name values.
	CustomSans X509ExtensionArrayInput `pulumi:"customSans"`
	// Contains only valid, fully-qualified host names.
	DnsNames pulumi.StringArrayInput `pulumi:"dnsNames"`
	// Contains only valid RFC 2822 E-mail addresses.
	EmailAddresses pulumi.StringArrayInput `pulumi:"emailAddresses"`
	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	IpAddresses pulumi.StringArrayInput `pulumi:"ipAddresses"`
	// Contains only valid RFC 3986 URIs.
	Uris pulumi.StringArrayInput `pulumi:"uris"`
}

func (SubjectAltNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAltNames)(nil)).Elem()
}

func (i SubjectAltNamesArgs) ToSubjectAltNamesOutput() SubjectAltNamesOutput {
	return i.ToSubjectAltNamesOutputWithContext(context.Background())
}

func (i SubjectAltNamesArgs) ToSubjectAltNamesOutputWithContext(ctx context.Context) SubjectAltNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAltNamesOutput)
}

func (i SubjectAltNamesArgs) ToSubjectAltNamesPtrOutput() SubjectAltNamesPtrOutput {
	return i.ToSubjectAltNamesPtrOutputWithContext(context.Background())
}

func (i SubjectAltNamesArgs) ToSubjectAltNamesPtrOutputWithContext(ctx context.Context) SubjectAltNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAltNamesOutput).ToSubjectAltNamesPtrOutputWithContext(ctx)
}

// SubjectAltNamesPtrInput is an input type that accepts SubjectAltNamesArgs, SubjectAltNamesPtr and SubjectAltNamesPtrOutput values.
// You can construct a concrete instance of `SubjectAltNamesPtrInput` via:
//
//          SubjectAltNamesArgs{...}
//
//  or:
//
//          nil
type SubjectAltNamesPtrInput interface {
	pulumi.Input

	ToSubjectAltNamesPtrOutput() SubjectAltNamesPtrOutput
	ToSubjectAltNamesPtrOutputWithContext(context.Context) SubjectAltNamesPtrOutput
}

type subjectAltNamesPtrType SubjectAltNamesArgs

func SubjectAltNamesPtr(v *SubjectAltNamesArgs) SubjectAltNamesPtrInput {
	return (*subjectAltNamesPtrType)(v)
}

func (*subjectAltNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectAltNames)(nil)).Elem()
}

func (i *subjectAltNamesPtrType) ToSubjectAltNamesPtrOutput() SubjectAltNamesPtrOutput {
	return i.ToSubjectAltNamesPtrOutputWithContext(context.Background())
}

func (i *subjectAltNamesPtrType) ToSubjectAltNamesPtrOutputWithContext(ctx context.Context) SubjectAltNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAltNamesPtrOutput)
}

// SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the "common name" in the distinguished name).
type SubjectAltNamesOutput struct{ *pulumi.OutputState }

func (SubjectAltNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAltNames)(nil)).Elem()
}

func (o SubjectAltNamesOutput) ToSubjectAltNamesOutput() SubjectAltNamesOutput {
	return o
}

func (o SubjectAltNamesOutput) ToSubjectAltNamesOutputWithContext(ctx context.Context) SubjectAltNamesOutput {
	return o
}

func (o SubjectAltNamesOutput) ToSubjectAltNamesPtrOutput() SubjectAltNamesPtrOutput {
	return o.ToSubjectAltNamesPtrOutputWithContext(context.Background())
}

func (o SubjectAltNamesOutput) ToSubjectAltNamesPtrOutputWithContext(ctx context.Context) SubjectAltNamesPtrOutput {
	return o.ApplyT(func(v SubjectAltNames) *SubjectAltNames {
		return &v
	}).(SubjectAltNamesPtrOutput)
}

// Contains additional subject alternative name values.
func (o SubjectAltNamesOutput) CustomSans() X509ExtensionArrayOutput {
	return o.ApplyT(func(v SubjectAltNames) []X509Extension { return v.CustomSans }).(X509ExtensionArrayOutput)
}

// Contains only valid, fully-qualified host names.
func (o SubjectAltNamesOutput) DnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubjectAltNames) []string { return v.DnsNames }).(pulumi.StringArrayOutput)
}

// Contains only valid RFC 2822 E-mail addresses.
func (o SubjectAltNamesOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubjectAltNames) []string { return v.EmailAddresses }).(pulumi.StringArrayOutput)
}

// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
func (o SubjectAltNamesOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubjectAltNames) []string { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// Contains only valid RFC 3986 URIs.
func (o SubjectAltNamesOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubjectAltNames) []string { return v.Uris }).(pulumi.StringArrayOutput)
}

type SubjectAltNamesPtrOutput struct{ *pulumi.OutputState }

func (SubjectAltNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectAltNames)(nil)).Elem()
}

func (o SubjectAltNamesPtrOutput) ToSubjectAltNamesPtrOutput() SubjectAltNamesPtrOutput {
	return o
}

func (o SubjectAltNamesPtrOutput) ToSubjectAltNamesPtrOutputWithContext(ctx context.Context) SubjectAltNamesPtrOutput {
	return o
}

func (o SubjectAltNamesPtrOutput) Elem() SubjectAltNamesOutput {
	return o.ApplyT(func(v *SubjectAltNames) SubjectAltNames { return *v }).(SubjectAltNamesOutput)
}

// Contains additional subject alternative name values.
func (o SubjectAltNamesPtrOutput) CustomSans() X509ExtensionArrayOutput {
	return o.ApplyT(func(v *SubjectAltNames) []X509Extension {
		if v == nil {
			return nil
		}
		return v.CustomSans
	}).(X509ExtensionArrayOutput)
}

// Contains only valid, fully-qualified host names.
func (o SubjectAltNamesPtrOutput) DnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubjectAltNames) []string {
		if v == nil {
			return nil
		}
		return v.DnsNames
	}).(pulumi.StringArrayOutput)
}

// Contains only valid RFC 2822 E-mail addresses.
func (o SubjectAltNamesPtrOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubjectAltNames) []string {
		if v == nil {
			return nil
		}
		return v.EmailAddresses
	}).(pulumi.StringArrayOutput)
}

// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
func (o SubjectAltNamesPtrOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubjectAltNames) []string {
		if v == nil {
			return nil
		}
		return v.IpAddresses
	}).(pulumi.StringArrayOutput)
}

// Contains only valid RFC 3986 URIs.
func (o SubjectAltNamesPtrOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubjectAltNames) []string {
		if v == nil {
			return nil
		}
		return v.Uris
	}).(pulumi.StringArrayOutput)
}

// These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.
type SubjectConfig struct {
	// Optional. The "common name" of the distinguished name.
	CommonName *string `pulumi:"commonName"`
	// Required. Contains distinguished name fields such as the location and organization.
	Subject *Subject `pulumi:"subject"`
	// Optional. The subject alternative name fields.
	SubjectAltName *SubjectAltNames `pulumi:"subjectAltName"`
}

// SubjectConfigInput is an input type that accepts SubjectConfigArgs and SubjectConfigOutput values.
// You can construct a concrete instance of `SubjectConfigInput` via:
//
//          SubjectConfigArgs{...}
type SubjectConfigInput interface {
	pulumi.Input

	ToSubjectConfigOutput() SubjectConfigOutput
	ToSubjectConfigOutputWithContext(context.Context) SubjectConfigOutput
}

// These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.
type SubjectConfigArgs struct {
	// Optional. The "common name" of the distinguished name.
	CommonName pulumi.StringPtrInput `pulumi:"commonName"`
	// Required. Contains distinguished name fields such as the location and organization.
	Subject SubjectPtrInput `pulumi:"subject"`
	// Optional. The subject alternative name fields.
	SubjectAltName SubjectAltNamesPtrInput `pulumi:"subjectAltName"`
}

func (SubjectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectConfig)(nil)).Elem()
}

func (i SubjectConfigArgs) ToSubjectConfigOutput() SubjectConfigOutput {
	return i.ToSubjectConfigOutputWithContext(context.Background())
}

func (i SubjectConfigArgs) ToSubjectConfigOutputWithContext(ctx context.Context) SubjectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigOutput)
}

func (i SubjectConfigArgs) ToSubjectConfigPtrOutput() SubjectConfigPtrOutput {
	return i.ToSubjectConfigPtrOutputWithContext(context.Background())
}

func (i SubjectConfigArgs) ToSubjectConfigPtrOutputWithContext(ctx context.Context) SubjectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigOutput).ToSubjectConfigPtrOutputWithContext(ctx)
}

// SubjectConfigPtrInput is an input type that accepts SubjectConfigArgs, SubjectConfigPtr and SubjectConfigPtrOutput values.
// You can construct a concrete instance of `SubjectConfigPtrInput` via:
//
//          SubjectConfigArgs{...}
//
//  or:
//
//          nil
type SubjectConfigPtrInput interface {
	pulumi.Input

	ToSubjectConfigPtrOutput() SubjectConfigPtrOutput
	ToSubjectConfigPtrOutputWithContext(context.Context) SubjectConfigPtrOutput
}

type subjectConfigPtrType SubjectConfigArgs

func SubjectConfigPtr(v *SubjectConfigArgs) SubjectConfigPtrInput {
	return (*subjectConfigPtrType)(v)
}

func (*subjectConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectConfig)(nil)).Elem()
}

func (i *subjectConfigPtrType) ToSubjectConfigPtrOutput() SubjectConfigPtrOutput {
	return i.ToSubjectConfigPtrOutputWithContext(context.Background())
}

func (i *subjectConfigPtrType) ToSubjectConfigPtrOutputWithContext(ctx context.Context) SubjectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigPtrOutput)
}

// These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.
type SubjectConfigOutput struct{ *pulumi.OutputState }

func (SubjectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectConfig)(nil)).Elem()
}

func (o SubjectConfigOutput) ToSubjectConfigOutput() SubjectConfigOutput {
	return o
}

func (o SubjectConfigOutput) ToSubjectConfigOutputWithContext(ctx context.Context) SubjectConfigOutput {
	return o
}

func (o SubjectConfigOutput) ToSubjectConfigPtrOutput() SubjectConfigPtrOutput {
	return o.ToSubjectConfigPtrOutputWithContext(context.Background())
}

func (o SubjectConfigOutput) ToSubjectConfigPtrOutputWithContext(ctx context.Context) SubjectConfigPtrOutput {
	return o.ApplyT(func(v SubjectConfig) *SubjectConfig {
		return &v
	}).(SubjectConfigPtrOutput)
}

// Optional. The "common name" of the distinguished name.
func (o SubjectConfigOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectConfig) *string { return v.CommonName }).(pulumi.StringPtrOutput)
}

// Required. Contains distinguished name fields such as the location and organization.
func (o SubjectConfigOutput) Subject() SubjectPtrOutput {
	return o.ApplyT(func(v SubjectConfig) *Subject { return v.Subject }).(SubjectPtrOutput)
}

// Optional. The subject alternative name fields.
func (o SubjectConfigOutput) SubjectAltName() SubjectAltNamesPtrOutput {
	return o.ApplyT(func(v SubjectConfig) *SubjectAltNames { return v.SubjectAltName }).(SubjectAltNamesPtrOutput)
}

type SubjectConfigPtrOutput struct{ *pulumi.OutputState }

func (SubjectConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectConfig)(nil)).Elem()
}

func (o SubjectConfigPtrOutput) ToSubjectConfigPtrOutput() SubjectConfigPtrOutput {
	return o
}

func (o SubjectConfigPtrOutput) ToSubjectConfigPtrOutputWithContext(ctx context.Context) SubjectConfigPtrOutput {
	return o
}

func (o SubjectConfigPtrOutput) Elem() SubjectConfigOutput {
	return o.ApplyT(func(v *SubjectConfig) SubjectConfig { return *v }).(SubjectConfigOutput)
}

// Optional. The "common name" of the distinguished name.
func (o SubjectConfigPtrOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectConfig) *string {
		if v == nil {
			return nil
		}
		return v.CommonName
	}).(pulumi.StringPtrOutput)
}

// Required. Contains distinguished name fields such as the location and organization.
func (o SubjectConfigPtrOutput) Subject() SubjectPtrOutput {
	return o.ApplyT(func(v *SubjectConfig) *Subject {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(SubjectPtrOutput)
}

// Optional. The subject alternative name fields.
func (o SubjectConfigPtrOutput) SubjectAltName() SubjectAltNamesPtrOutput {
	return o.ApplyT(func(v *SubjectConfig) *SubjectAltNames {
		if v == nil {
			return nil
		}
		return v.SubjectAltName
	}).(SubjectAltNamesPtrOutput)
}

// These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.
type SubjectDescription struct {
	// The "common name" of the distinguished name.
	CommonName *string `pulumi:"commonName"`
	// The serial number encoded in lowercase hexadecimal.
	HexSerialNumber *string `pulumi:"hexSerialNumber"`
	// For convenience, the actual lifetime of an issued certificate. Corresponds to 'not_after_time' - 'not_before_time'.
	Lifetime *string `pulumi:"lifetime"`
	// The time at which the certificate expires.
	NotAfterTime *string `pulumi:"notAfterTime"`
	// The time at which the certificate becomes valid.
	NotBeforeTime *string `pulumi:"notBeforeTime"`
	// Contains distinguished name fields such as the location and organization.
	Subject *Subject `pulumi:"subject"`
	// The subject alternative name fields.
	SubjectAltName *SubjectAltNames `pulumi:"subjectAltName"`
}

// SubjectDescriptionInput is an input type that accepts SubjectDescriptionArgs and SubjectDescriptionOutput values.
// You can construct a concrete instance of `SubjectDescriptionInput` via:
//
//          SubjectDescriptionArgs{...}
type SubjectDescriptionInput interface {
	pulumi.Input

	ToSubjectDescriptionOutput() SubjectDescriptionOutput
	ToSubjectDescriptionOutputWithContext(context.Context) SubjectDescriptionOutput
}

// These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.
type SubjectDescriptionArgs struct {
	// The "common name" of the distinguished name.
	CommonName pulumi.StringPtrInput `pulumi:"commonName"`
	// The serial number encoded in lowercase hexadecimal.
	HexSerialNumber pulumi.StringPtrInput `pulumi:"hexSerialNumber"`
	// For convenience, the actual lifetime of an issued certificate. Corresponds to 'not_after_time' - 'not_before_time'.
	Lifetime pulumi.StringPtrInput `pulumi:"lifetime"`
	// The time at which the certificate expires.
	NotAfterTime pulumi.StringPtrInput `pulumi:"notAfterTime"`
	// The time at which the certificate becomes valid.
	NotBeforeTime pulumi.StringPtrInput `pulumi:"notBeforeTime"`
	// Contains distinguished name fields such as the location and organization.
	Subject SubjectPtrInput `pulumi:"subject"`
	// The subject alternative name fields.
	SubjectAltName SubjectAltNamesPtrInput `pulumi:"subjectAltName"`
}

func (SubjectDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectDescription)(nil)).Elem()
}

func (i SubjectDescriptionArgs) ToSubjectDescriptionOutput() SubjectDescriptionOutput {
	return i.ToSubjectDescriptionOutputWithContext(context.Background())
}

func (i SubjectDescriptionArgs) ToSubjectDescriptionOutputWithContext(ctx context.Context) SubjectDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectDescriptionOutput)
}

func (i SubjectDescriptionArgs) ToSubjectDescriptionPtrOutput() SubjectDescriptionPtrOutput {
	return i.ToSubjectDescriptionPtrOutputWithContext(context.Background())
}

func (i SubjectDescriptionArgs) ToSubjectDescriptionPtrOutputWithContext(ctx context.Context) SubjectDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectDescriptionOutput).ToSubjectDescriptionPtrOutputWithContext(ctx)
}

// SubjectDescriptionPtrInput is an input type that accepts SubjectDescriptionArgs, SubjectDescriptionPtr and SubjectDescriptionPtrOutput values.
// You can construct a concrete instance of `SubjectDescriptionPtrInput` via:
//
//          SubjectDescriptionArgs{...}
//
//  or:
//
//          nil
type SubjectDescriptionPtrInput interface {
	pulumi.Input

	ToSubjectDescriptionPtrOutput() SubjectDescriptionPtrOutput
	ToSubjectDescriptionPtrOutputWithContext(context.Context) SubjectDescriptionPtrOutput
}

type subjectDescriptionPtrType SubjectDescriptionArgs

func SubjectDescriptionPtr(v *SubjectDescriptionArgs) SubjectDescriptionPtrInput {
	return (*subjectDescriptionPtrType)(v)
}

func (*subjectDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectDescription)(nil)).Elem()
}

func (i *subjectDescriptionPtrType) ToSubjectDescriptionPtrOutput() SubjectDescriptionPtrOutput {
	return i.ToSubjectDescriptionPtrOutputWithContext(context.Background())
}

func (i *subjectDescriptionPtrType) ToSubjectDescriptionPtrOutputWithContext(ctx context.Context) SubjectDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectDescriptionPtrOutput)
}

// These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.
type SubjectDescriptionOutput struct{ *pulumi.OutputState }

func (SubjectDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectDescription)(nil)).Elem()
}

func (o SubjectDescriptionOutput) ToSubjectDescriptionOutput() SubjectDescriptionOutput {
	return o
}

func (o SubjectDescriptionOutput) ToSubjectDescriptionOutputWithContext(ctx context.Context) SubjectDescriptionOutput {
	return o
}

func (o SubjectDescriptionOutput) ToSubjectDescriptionPtrOutput() SubjectDescriptionPtrOutput {
	return o.ToSubjectDescriptionPtrOutputWithContext(context.Background())
}

func (o SubjectDescriptionOutput) ToSubjectDescriptionPtrOutputWithContext(ctx context.Context) SubjectDescriptionPtrOutput {
	return o.ApplyT(func(v SubjectDescription) *SubjectDescription {
		return &v
	}).(SubjectDescriptionPtrOutput)
}

// The "common name" of the distinguished name.
func (o SubjectDescriptionOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectDescription) *string { return v.CommonName }).(pulumi.StringPtrOutput)
}

// The serial number encoded in lowercase hexadecimal.
func (o SubjectDescriptionOutput) HexSerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectDescription) *string { return v.HexSerialNumber }).(pulumi.StringPtrOutput)
}

// For convenience, the actual lifetime of an issued certificate. Corresponds to 'not_after_time' - 'not_before_time'.
func (o SubjectDescriptionOutput) Lifetime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectDescription) *string { return v.Lifetime }).(pulumi.StringPtrOutput)
}

// The time at which the certificate expires.
func (o SubjectDescriptionOutput) NotAfterTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectDescription) *string { return v.NotAfterTime }).(pulumi.StringPtrOutput)
}

// The time at which the certificate becomes valid.
func (o SubjectDescriptionOutput) NotBeforeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubjectDescription) *string { return v.NotBeforeTime }).(pulumi.StringPtrOutput)
}

// Contains distinguished name fields such as the location and organization.
func (o SubjectDescriptionOutput) Subject() SubjectPtrOutput {
	return o.ApplyT(func(v SubjectDescription) *Subject { return v.Subject }).(SubjectPtrOutput)
}

// The subject alternative name fields.
func (o SubjectDescriptionOutput) SubjectAltName() SubjectAltNamesPtrOutput {
	return o.ApplyT(func(v SubjectDescription) *SubjectAltNames { return v.SubjectAltName }).(SubjectAltNamesPtrOutput)
}

type SubjectDescriptionPtrOutput struct{ *pulumi.OutputState }

func (SubjectDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectDescription)(nil)).Elem()
}

func (o SubjectDescriptionPtrOutput) ToSubjectDescriptionPtrOutput() SubjectDescriptionPtrOutput {
	return o
}

func (o SubjectDescriptionPtrOutput) ToSubjectDescriptionPtrOutputWithContext(ctx context.Context) SubjectDescriptionPtrOutput {
	return o
}

func (o SubjectDescriptionPtrOutput) Elem() SubjectDescriptionOutput {
	return o.ApplyT(func(v *SubjectDescription) SubjectDescription { return *v }).(SubjectDescriptionOutput)
}

// The "common name" of the distinguished name.
func (o SubjectDescriptionPtrOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectDescription) *string {
		if v == nil {
			return nil
		}
		return v.CommonName
	}).(pulumi.StringPtrOutput)
}

// The serial number encoded in lowercase hexadecimal.
func (o SubjectDescriptionPtrOutput) HexSerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectDescription) *string {
		if v == nil {
			return nil
		}
		return v.HexSerialNumber
	}).(pulumi.StringPtrOutput)
}

// For convenience, the actual lifetime of an issued certificate. Corresponds to 'not_after_time' - 'not_before_time'.
func (o SubjectDescriptionPtrOutput) Lifetime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectDescription) *string {
		if v == nil {
			return nil
		}
		return v.Lifetime
	}).(pulumi.StringPtrOutput)
}

// The time at which the certificate expires.
func (o SubjectDescriptionPtrOutput) NotAfterTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectDescription) *string {
		if v == nil {
			return nil
		}
		return v.NotAfterTime
	}).(pulumi.StringPtrOutput)
}

// The time at which the certificate becomes valid.
func (o SubjectDescriptionPtrOutput) NotBeforeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectDescription) *string {
		if v == nil {
			return nil
		}
		return v.NotBeforeTime
	}).(pulumi.StringPtrOutput)
}

// Contains distinguished name fields such as the location and organization.
func (o SubjectDescriptionPtrOutput) Subject() SubjectPtrOutput {
	return o.ApplyT(func(v *SubjectDescription) *Subject {
		if v == nil {
			return nil
		}
		return v.Subject
	}).(SubjectPtrOutput)
}

// The subject alternative name fields.
func (o SubjectDescriptionPtrOutput) SubjectAltName() SubjectAltNamesPtrOutput {
	return o.ApplyT(func(v *SubjectDescription) *SubjectAltNames {
		if v == nil {
			return nil
		}
		return v.SubjectAltName
	}).(SubjectAltNamesPtrOutput)
}

// Describes a subordinate CA's issuers. This is either a resource path to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
type SubordinateConfig struct {
	// Required. This can refer to a CertificateAuthority in the same project that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*/locations/*/certificateAuthorities/*`.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// Required. Contains the PEM certificate chain for the issuers of this CertificateAuthority, but not pem certificate for this CA itself.
	PemIssuerChain *SubordinateConfigChain `pulumi:"pemIssuerChain"`
}

// SubordinateConfigInput is an input type that accepts SubordinateConfigArgs and SubordinateConfigOutput values.
// You can construct a concrete instance of `SubordinateConfigInput` via:
//
//          SubordinateConfigArgs{...}
type SubordinateConfigInput interface {
	pulumi.Input

	ToSubordinateConfigOutput() SubordinateConfigOutput
	ToSubordinateConfigOutputWithContext(context.Context) SubordinateConfigOutput
}

// Describes a subordinate CA's issuers. This is either a resource path to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
type SubordinateConfigArgs struct {
	// Required. This can refer to a CertificateAuthority in the same project that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*/locations/*/certificateAuthorities/*`.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// Required. Contains the PEM certificate chain for the issuers of this CertificateAuthority, but not pem certificate for this CA itself.
	PemIssuerChain SubordinateConfigChainPtrInput `pulumi:"pemIssuerChain"`
}

func (SubordinateConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubordinateConfig)(nil)).Elem()
}

func (i SubordinateConfigArgs) ToSubordinateConfigOutput() SubordinateConfigOutput {
	return i.ToSubordinateConfigOutputWithContext(context.Background())
}

func (i SubordinateConfigArgs) ToSubordinateConfigOutputWithContext(ctx context.Context) SubordinateConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigOutput)
}

func (i SubordinateConfigArgs) ToSubordinateConfigPtrOutput() SubordinateConfigPtrOutput {
	return i.ToSubordinateConfigPtrOutputWithContext(context.Background())
}

func (i SubordinateConfigArgs) ToSubordinateConfigPtrOutputWithContext(ctx context.Context) SubordinateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigOutput).ToSubordinateConfigPtrOutputWithContext(ctx)
}

// SubordinateConfigPtrInput is an input type that accepts SubordinateConfigArgs, SubordinateConfigPtr and SubordinateConfigPtrOutput values.
// You can construct a concrete instance of `SubordinateConfigPtrInput` via:
//
//          SubordinateConfigArgs{...}
//
//  or:
//
//          nil
type SubordinateConfigPtrInput interface {
	pulumi.Input

	ToSubordinateConfigPtrOutput() SubordinateConfigPtrOutput
	ToSubordinateConfigPtrOutputWithContext(context.Context) SubordinateConfigPtrOutput
}

type subordinateConfigPtrType SubordinateConfigArgs

func SubordinateConfigPtr(v *SubordinateConfigArgs) SubordinateConfigPtrInput {
	return (*subordinateConfigPtrType)(v)
}

func (*subordinateConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubordinateConfig)(nil)).Elem()
}

func (i *subordinateConfigPtrType) ToSubordinateConfigPtrOutput() SubordinateConfigPtrOutput {
	return i.ToSubordinateConfigPtrOutputWithContext(context.Background())
}

func (i *subordinateConfigPtrType) ToSubordinateConfigPtrOutputWithContext(ctx context.Context) SubordinateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigPtrOutput)
}

// Describes a subordinate CA's issuers. This is either a resource path to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
type SubordinateConfigOutput struct{ *pulumi.OutputState }

func (SubordinateConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubordinateConfig)(nil)).Elem()
}

func (o SubordinateConfigOutput) ToSubordinateConfigOutput() SubordinateConfigOutput {
	return o
}

func (o SubordinateConfigOutput) ToSubordinateConfigOutputWithContext(ctx context.Context) SubordinateConfigOutput {
	return o
}

func (o SubordinateConfigOutput) ToSubordinateConfigPtrOutput() SubordinateConfigPtrOutput {
	return o.ToSubordinateConfigPtrOutputWithContext(context.Background())
}

func (o SubordinateConfigOutput) ToSubordinateConfigPtrOutputWithContext(ctx context.Context) SubordinateConfigPtrOutput {
	return o.ApplyT(func(v SubordinateConfig) *SubordinateConfig {
		return &v
	}).(SubordinateConfigPtrOutput)
}

// Required. This can refer to a CertificateAuthority in the same project that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*/locations/*/certificateAuthorities/*`.
func (o SubordinateConfigOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubordinateConfig) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// Required. Contains the PEM certificate chain for the issuers of this CertificateAuthority, but not pem certificate for this CA itself.
func (o SubordinateConfigOutput) PemIssuerChain() SubordinateConfigChainPtrOutput {
	return o.ApplyT(func(v SubordinateConfig) *SubordinateConfigChain { return v.PemIssuerChain }).(SubordinateConfigChainPtrOutput)
}

type SubordinateConfigPtrOutput struct{ *pulumi.OutputState }

func (SubordinateConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubordinateConfig)(nil)).Elem()
}

func (o SubordinateConfigPtrOutput) ToSubordinateConfigPtrOutput() SubordinateConfigPtrOutput {
	return o
}

func (o SubordinateConfigPtrOutput) ToSubordinateConfigPtrOutputWithContext(ctx context.Context) SubordinateConfigPtrOutput {
	return o
}

func (o SubordinateConfigPtrOutput) Elem() SubordinateConfigOutput {
	return o.ApplyT(func(v *SubordinateConfig) SubordinateConfig { return *v }).(SubordinateConfigOutput)
}

// Required. This can refer to a CertificateAuthority in the same project that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*/locations/*/certificateAuthorities/*`.
func (o SubordinateConfigPtrOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubordinateConfig) *string {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

// Required. Contains the PEM certificate chain for the issuers of this CertificateAuthority, but not pem certificate for this CA itself.
func (o SubordinateConfigPtrOutput) PemIssuerChain() SubordinateConfigChainPtrOutput {
	return o.ApplyT(func(v *SubordinateConfig) *SubordinateConfigChain {
		if v == nil {
			return nil
		}
		return v.PemIssuerChain
	}).(SubordinateConfigChainPtrOutput)
}

// This message describes a subordinate CA's issuer certificate chain. This wrapper exists for compatibility reasons.
type SubordinateConfigChain struct {
	// Required. Expected to be in leaf-to-root order according to RFC 5246.
	PemCertificates []string `pulumi:"pemCertificates"`
}

// SubordinateConfigChainInput is an input type that accepts SubordinateConfigChainArgs and SubordinateConfigChainOutput values.
// You can construct a concrete instance of `SubordinateConfigChainInput` via:
//
//          SubordinateConfigChainArgs{...}
type SubordinateConfigChainInput interface {
	pulumi.Input

	ToSubordinateConfigChainOutput() SubordinateConfigChainOutput
	ToSubordinateConfigChainOutputWithContext(context.Context) SubordinateConfigChainOutput
}

// This message describes a subordinate CA's issuer certificate chain. This wrapper exists for compatibility reasons.
type SubordinateConfigChainArgs struct {
	// Required. Expected to be in leaf-to-root order according to RFC 5246.
	PemCertificates pulumi.StringArrayInput `pulumi:"pemCertificates"`
}

func (SubordinateConfigChainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubordinateConfigChain)(nil)).Elem()
}

func (i SubordinateConfigChainArgs) ToSubordinateConfigChainOutput() SubordinateConfigChainOutput {
	return i.ToSubordinateConfigChainOutputWithContext(context.Background())
}

func (i SubordinateConfigChainArgs) ToSubordinateConfigChainOutputWithContext(ctx context.Context) SubordinateConfigChainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigChainOutput)
}

func (i SubordinateConfigChainArgs) ToSubordinateConfigChainPtrOutput() SubordinateConfigChainPtrOutput {
	return i.ToSubordinateConfigChainPtrOutputWithContext(context.Background())
}

func (i SubordinateConfigChainArgs) ToSubordinateConfigChainPtrOutputWithContext(ctx context.Context) SubordinateConfigChainPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigChainOutput).ToSubordinateConfigChainPtrOutputWithContext(ctx)
}

// SubordinateConfigChainPtrInput is an input type that accepts SubordinateConfigChainArgs, SubordinateConfigChainPtr and SubordinateConfigChainPtrOutput values.
// You can construct a concrete instance of `SubordinateConfigChainPtrInput` via:
//
//          SubordinateConfigChainArgs{...}
//
//  or:
//
//          nil
type SubordinateConfigChainPtrInput interface {
	pulumi.Input

	ToSubordinateConfigChainPtrOutput() SubordinateConfigChainPtrOutput
	ToSubordinateConfigChainPtrOutputWithContext(context.Context) SubordinateConfigChainPtrOutput
}

type subordinateConfigChainPtrType SubordinateConfigChainArgs

func SubordinateConfigChainPtr(v *SubordinateConfigChainArgs) SubordinateConfigChainPtrInput {
	return (*subordinateConfigChainPtrType)(v)
}

func (*subordinateConfigChainPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubordinateConfigChain)(nil)).Elem()
}

func (i *subordinateConfigChainPtrType) ToSubordinateConfigChainPtrOutput() SubordinateConfigChainPtrOutput {
	return i.ToSubordinateConfigChainPtrOutputWithContext(context.Background())
}

func (i *subordinateConfigChainPtrType) ToSubordinateConfigChainPtrOutputWithContext(ctx context.Context) SubordinateConfigChainPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigChainPtrOutput)
}

// This message describes a subordinate CA's issuer certificate chain. This wrapper exists for compatibility reasons.
type SubordinateConfigChainOutput struct{ *pulumi.OutputState }

func (SubordinateConfigChainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubordinateConfigChain)(nil)).Elem()
}

func (o SubordinateConfigChainOutput) ToSubordinateConfigChainOutput() SubordinateConfigChainOutput {
	return o
}

func (o SubordinateConfigChainOutput) ToSubordinateConfigChainOutputWithContext(ctx context.Context) SubordinateConfigChainOutput {
	return o
}

func (o SubordinateConfigChainOutput) ToSubordinateConfigChainPtrOutput() SubordinateConfigChainPtrOutput {
	return o.ToSubordinateConfigChainPtrOutputWithContext(context.Background())
}

func (o SubordinateConfigChainOutput) ToSubordinateConfigChainPtrOutputWithContext(ctx context.Context) SubordinateConfigChainPtrOutput {
	return o.ApplyT(func(v SubordinateConfigChain) *SubordinateConfigChain {
		return &v
	}).(SubordinateConfigChainPtrOutput)
}

// Required. Expected to be in leaf-to-root order according to RFC 5246.
func (o SubordinateConfigChainOutput) PemCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubordinateConfigChain) []string { return v.PemCertificates }).(pulumi.StringArrayOutput)
}

type SubordinateConfigChainPtrOutput struct{ *pulumi.OutputState }

func (SubordinateConfigChainPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubordinateConfigChain)(nil)).Elem()
}

func (o SubordinateConfigChainPtrOutput) ToSubordinateConfigChainPtrOutput() SubordinateConfigChainPtrOutput {
	return o
}

func (o SubordinateConfigChainPtrOutput) ToSubordinateConfigChainPtrOutputWithContext(ctx context.Context) SubordinateConfigChainPtrOutput {
	return o
}

func (o SubordinateConfigChainPtrOutput) Elem() SubordinateConfigChainOutput {
	return o.ApplyT(func(v *SubordinateConfigChain) SubordinateConfigChain { return *v }).(SubordinateConfigChainOutput)
}

// Required. Expected to be in leaf-to-root order according to RFC 5246.
func (o SubordinateConfigChainPtrOutput) PemCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubordinateConfigChain) []string {
		if v == nil {
			return nil
		}
		return v.PemCertificates
	}).(pulumi.StringArrayOutput)
}

// An X509Extension specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
type X509Extension struct {
	// Required. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
	Critical *bool `pulumi:"critical"`
	// Required. The OID for this X.509 extension.
	ObjectId *ObjectId `pulumi:"objectId"`
	// Required. The value of this X.509 extension.
	Value *string `pulumi:"value"`
}

// X509ExtensionInput is an input type that accepts X509ExtensionArgs and X509ExtensionOutput values.
// You can construct a concrete instance of `X509ExtensionInput` via:
//
//          X509ExtensionArgs{...}
type X509ExtensionInput interface {
	pulumi.Input

	ToX509ExtensionOutput() X509ExtensionOutput
	ToX509ExtensionOutputWithContext(context.Context) X509ExtensionOutput
}

// An X509Extension specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
type X509ExtensionArgs struct {
	// Required. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
	Critical pulumi.BoolPtrInput `pulumi:"critical"`
	// Required. The OID for this X.509 extension.
	ObjectId ObjectIdPtrInput `pulumi:"objectId"`
	// Required. The value of this X.509 extension.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (X509ExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X509Extension)(nil)).Elem()
}

func (i X509ExtensionArgs) ToX509ExtensionOutput() X509ExtensionOutput {
	return i.ToX509ExtensionOutputWithContext(context.Background())
}

func (i X509ExtensionArgs) ToX509ExtensionOutputWithContext(ctx context.Context) X509ExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509ExtensionOutput)
}

// X509ExtensionArrayInput is an input type that accepts X509ExtensionArray and X509ExtensionArrayOutput values.
// You can construct a concrete instance of `X509ExtensionArrayInput` via:
//
//          X509ExtensionArray{ X509ExtensionArgs{...} }
type X509ExtensionArrayInput interface {
	pulumi.Input

	ToX509ExtensionArrayOutput() X509ExtensionArrayOutput
	ToX509ExtensionArrayOutputWithContext(context.Context) X509ExtensionArrayOutput
}

type X509ExtensionArray []X509ExtensionInput

func (X509ExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X509Extension)(nil)).Elem()
}

func (i X509ExtensionArray) ToX509ExtensionArrayOutput() X509ExtensionArrayOutput {
	return i.ToX509ExtensionArrayOutputWithContext(context.Background())
}

func (i X509ExtensionArray) ToX509ExtensionArrayOutputWithContext(ctx context.Context) X509ExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509ExtensionArrayOutput)
}

// An X509Extension specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
type X509ExtensionOutput struct{ *pulumi.OutputState }

func (X509ExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X509Extension)(nil)).Elem()
}

func (o X509ExtensionOutput) ToX509ExtensionOutput() X509ExtensionOutput {
	return o
}

func (o X509ExtensionOutput) ToX509ExtensionOutputWithContext(ctx context.Context) X509ExtensionOutput {
	return o
}

// Required. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
func (o X509ExtensionOutput) Critical() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X509Extension) *bool { return v.Critical }).(pulumi.BoolPtrOutput)
}

// Required. The OID for this X.509 extension.
func (o X509ExtensionOutput) ObjectId() ObjectIdPtrOutput {
	return o.ApplyT(func(v X509Extension) *ObjectId { return v.ObjectId }).(ObjectIdPtrOutput)
}

// Required. The value of this X.509 extension.
func (o X509ExtensionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v X509Extension) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type X509ExtensionArrayOutput struct{ *pulumi.OutputState }

func (X509ExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X509Extension)(nil)).Elem()
}

func (o X509ExtensionArrayOutput) ToX509ExtensionArrayOutput() X509ExtensionArrayOutput {
	return o
}

func (o X509ExtensionArrayOutput) ToX509ExtensionArrayOutputWithContext(ctx context.Context) X509ExtensionArrayOutput {
	return o
}

func (o X509ExtensionArrayOutput) Index(i pulumi.IntInput) X509ExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X509Extension {
		return vs[0].([]X509Extension)[vs[1].(int)]
	}).(X509ExtensionOutput)
}

func init() {
	pulumi.RegisterOutputType(AccessUrlsOutput{})
	pulumi.RegisterOutputType(AccessUrlsPtrOutput{})
	pulumi.RegisterOutputType(AllowedConfigListOutput{})
	pulumi.RegisterOutputType(AllowedConfigListPtrOutput{})
	pulumi.RegisterOutputType(AllowedSubjectAltNamesOutput{})
	pulumi.RegisterOutputType(AllowedSubjectAltNamesPtrOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(CaOptionsOutput{})
	pulumi.RegisterOutputType(CaOptionsPtrOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityPolicyOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityPolicyPtrOutput{})
	pulumi.RegisterOutputType(CertificateConfigOutput{})
	pulumi.RegisterOutputType(CertificateConfigPtrOutput{})
	pulumi.RegisterOutputType(CertificateDescriptionOutput{})
	pulumi.RegisterOutputType(CertificateDescriptionPtrOutput{})
	pulumi.RegisterOutputType(CertificateDescriptionArrayOutput{})
	pulumi.RegisterOutputType(CertificateFingerprintOutput{})
	pulumi.RegisterOutputType(CertificateFingerprintPtrOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExtendedKeyUsageOptionsOutput{})
	pulumi.RegisterOutputType(ExtendedKeyUsageOptionsPtrOutput{})
	pulumi.RegisterOutputType(IssuanceModesOutput{})
	pulumi.RegisterOutputType(IssuanceModesPtrOutput{})
	pulumi.RegisterOutputType(IssuingOptionsOutput{})
	pulumi.RegisterOutputType(IssuingOptionsPtrOutput{})
	pulumi.RegisterOutputType(KeyIdOutput{})
	pulumi.RegisterOutputType(KeyIdPtrOutput{})
	pulumi.RegisterOutputType(KeyUsageOutput{})
	pulumi.RegisterOutputType(KeyUsagePtrOutput{})
	pulumi.RegisterOutputType(KeyUsageOptionsOutput{})
	pulumi.RegisterOutputType(KeyUsageOptionsPtrOutput{})
	pulumi.RegisterOutputType(KeyVersionSpecOutput{})
	pulumi.RegisterOutputType(KeyVersionSpecPtrOutput{})
	pulumi.RegisterOutputType(ObjectIdOutput{})
	pulumi.RegisterOutputType(ObjectIdPtrOutput{})
	pulumi.RegisterOutputType(ObjectIdArrayOutput{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyPtrOutput{})
	pulumi.RegisterOutputType(PublicKeyOutput{})
	pulumi.RegisterOutputType(PublicKeyPtrOutput{})
	pulumi.RegisterOutputType(ReusableConfigValuesOutput{})
	pulumi.RegisterOutputType(ReusableConfigValuesPtrOutput{})
	pulumi.RegisterOutputType(ReusableConfigWrapperOutput{})
	pulumi.RegisterOutputType(ReusableConfigWrapperPtrOutput{})
	pulumi.RegisterOutputType(ReusableConfigWrapperArrayOutput{})
	pulumi.RegisterOutputType(RevocationDetailsOutput{})
	pulumi.RegisterOutputType(RevocationDetailsPtrOutput{})
	pulumi.RegisterOutputType(SubjectOutput{})
	pulumi.RegisterOutputType(SubjectPtrOutput{})
	pulumi.RegisterOutputType(SubjectArrayOutput{})
	pulumi.RegisterOutputType(SubjectAltNamesOutput{})
	pulumi.RegisterOutputType(SubjectAltNamesPtrOutput{})
	pulumi.RegisterOutputType(SubjectConfigOutput{})
	pulumi.RegisterOutputType(SubjectConfigPtrOutput{})
	pulumi.RegisterOutputType(SubjectDescriptionOutput{})
	pulumi.RegisterOutputType(SubjectDescriptionPtrOutput{})
	pulumi.RegisterOutputType(SubordinateConfigOutput{})
	pulumi.RegisterOutputType(SubordinateConfigPtrOutput{})
	pulumi.RegisterOutputType(SubordinateConfigChainOutput{})
	pulumi.RegisterOutputType(SubordinateConfigChainPtrOutput{})
	pulumi.RegisterOutputType(X509ExtensionOutput{})
	pulumi.RegisterOutputType(X509ExtensionArrayOutput{})
}
