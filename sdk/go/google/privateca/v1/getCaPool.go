// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns a CaPool.
func LookupCaPool(ctx *pulumi.Context, args *LookupCaPoolArgs, opts ...pulumi.InvokeOption) (*LookupCaPoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCaPoolResult
	err := ctx.Invoke("google-native:privateca/v1:getCaPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCaPoolArgs struct {
	CaPoolId string  `pulumi:"caPoolId"`
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
}

type LookupCaPoolResult struct {
	// Optional. The IssuancePolicy to control how Certificates will be issued from this CaPool.
	IssuancePolicy IssuancePolicyResponse `pulumi:"issuancePolicy"`
	// Optional. Labels with user-defined metadata.
	Labels map[string]string `pulumi:"labels"`
	// The resource name for this CaPool in the format `projects/*/locations/*/caPools/*`.
	Name string `pulumi:"name"`
	// Optional. The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
	PublishingOptions PublishingOptionsResponse `pulumi:"publishingOptions"`
	// Immutable. The Tier of this CaPool.
	Tier string `pulumi:"tier"`
}

func LookupCaPoolOutput(ctx *pulumi.Context, args LookupCaPoolOutputArgs, opts ...pulumi.InvokeOption) LookupCaPoolResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCaPoolResult, error) {
			args := v.(LookupCaPoolArgs)
			r, err := LookupCaPool(ctx, &args, opts...)
			var s LookupCaPoolResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCaPoolResultOutput)
}

type LookupCaPoolOutputArgs struct {
	CaPoolId pulumi.StringInput    `pulumi:"caPoolId"`
	Location pulumi.StringInput    `pulumi:"location"`
	Project  pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupCaPoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCaPoolArgs)(nil)).Elem()
}

type LookupCaPoolResultOutput struct{ *pulumi.OutputState }

func (LookupCaPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCaPoolResult)(nil)).Elem()
}

func (o LookupCaPoolResultOutput) ToLookupCaPoolResultOutput() LookupCaPoolResultOutput {
	return o
}

func (o LookupCaPoolResultOutput) ToLookupCaPoolResultOutputWithContext(ctx context.Context) LookupCaPoolResultOutput {
	return o
}

// Optional. The IssuancePolicy to control how Certificates will be issued from this CaPool.
func (o LookupCaPoolResultOutput) IssuancePolicy() IssuancePolicyResponseOutput {
	return o.ApplyT(func(v LookupCaPoolResult) IssuancePolicyResponse { return v.IssuancePolicy }).(IssuancePolicyResponseOutput)
}

// Optional. Labels with user-defined metadata.
func (o LookupCaPoolResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCaPoolResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name for this CaPool in the format `projects/*/locations/*/caPools/*`.
func (o LookupCaPoolResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCaPoolResult) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
func (o LookupCaPoolResultOutput) PublishingOptions() PublishingOptionsResponseOutput {
	return o.ApplyT(func(v LookupCaPoolResult) PublishingOptionsResponse { return v.PublishingOptions }).(PublishingOptionsResponseOutput)
}

// Immutable. The Tier of this CaPool.
func (o LookupCaPoolResultOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCaPoolResult) string { return v.Tier }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCaPoolResultOutput{})
}
