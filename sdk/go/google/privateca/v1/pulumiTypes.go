// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// URLs where a CertificateAuthority will publish content.
type AccessUrlsResponse struct {
	// The URL where this CertificateAuthority's CA certificate is published. This will only be set for CAs that have been activated.
	CaCertificateAccessUrl string `pulumi:"caCertificateAccessUrl"`
	// The URLs where this CertificateAuthority's CRLs are published. This will only be set for CAs that have been activated.
	CrlAccessUrls []string `pulumi:"crlAccessUrls"`
}

// AccessUrlsResponseInput is an input type that accepts AccessUrlsResponseArgs and AccessUrlsResponseOutput values.
// You can construct a concrete instance of `AccessUrlsResponseInput` via:
//
//          AccessUrlsResponseArgs{...}
type AccessUrlsResponseInput interface {
	pulumi.Input

	ToAccessUrlsResponseOutput() AccessUrlsResponseOutput
	ToAccessUrlsResponseOutputWithContext(context.Context) AccessUrlsResponseOutput
}

// URLs where a CertificateAuthority will publish content.
type AccessUrlsResponseArgs struct {
	// The URL where this CertificateAuthority's CA certificate is published. This will only be set for CAs that have been activated.
	CaCertificateAccessUrl pulumi.StringInput `pulumi:"caCertificateAccessUrl"`
	// The URLs where this CertificateAuthority's CRLs are published. This will only be set for CAs that have been activated.
	CrlAccessUrls pulumi.StringArrayInput `pulumi:"crlAccessUrls"`
}

func (AccessUrlsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessUrlsResponse)(nil)).Elem()
}

func (i AccessUrlsResponseArgs) ToAccessUrlsResponseOutput() AccessUrlsResponseOutput {
	return i.ToAccessUrlsResponseOutputWithContext(context.Background())
}

func (i AccessUrlsResponseArgs) ToAccessUrlsResponseOutputWithContext(ctx context.Context) AccessUrlsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessUrlsResponseOutput)
}

func (i AccessUrlsResponseArgs) ToAccessUrlsResponsePtrOutput() AccessUrlsResponsePtrOutput {
	return i.ToAccessUrlsResponsePtrOutputWithContext(context.Background())
}

func (i AccessUrlsResponseArgs) ToAccessUrlsResponsePtrOutputWithContext(ctx context.Context) AccessUrlsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessUrlsResponseOutput).ToAccessUrlsResponsePtrOutputWithContext(ctx)
}

// AccessUrlsResponsePtrInput is an input type that accepts AccessUrlsResponseArgs, AccessUrlsResponsePtr and AccessUrlsResponsePtrOutput values.
// You can construct a concrete instance of `AccessUrlsResponsePtrInput` via:
//
//          AccessUrlsResponseArgs{...}
//
//  or:
//
//          nil
type AccessUrlsResponsePtrInput interface {
	pulumi.Input

	ToAccessUrlsResponsePtrOutput() AccessUrlsResponsePtrOutput
	ToAccessUrlsResponsePtrOutputWithContext(context.Context) AccessUrlsResponsePtrOutput
}

type accessUrlsResponsePtrType AccessUrlsResponseArgs

func AccessUrlsResponsePtr(v *AccessUrlsResponseArgs) AccessUrlsResponsePtrInput {
	return (*accessUrlsResponsePtrType)(v)
}

func (*accessUrlsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessUrlsResponse)(nil)).Elem()
}

func (i *accessUrlsResponsePtrType) ToAccessUrlsResponsePtrOutput() AccessUrlsResponsePtrOutput {
	return i.ToAccessUrlsResponsePtrOutputWithContext(context.Background())
}

func (i *accessUrlsResponsePtrType) ToAccessUrlsResponsePtrOutputWithContext(ctx context.Context) AccessUrlsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessUrlsResponsePtrOutput)
}

// URLs where a CertificateAuthority will publish content.
type AccessUrlsResponseOutput struct{ *pulumi.OutputState }

func (AccessUrlsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessUrlsResponse)(nil)).Elem()
}

func (o AccessUrlsResponseOutput) ToAccessUrlsResponseOutput() AccessUrlsResponseOutput {
	return o
}

func (o AccessUrlsResponseOutput) ToAccessUrlsResponseOutputWithContext(ctx context.Context) AccessUrlsResponseOutput {
	return o
}

func (o AccessUrlsResponseOutput) ToAccessUrlsResponsePtrOutput() AccessUrlsResponsePtrOutput {
	return o.ToAccessUrlsResponsePtrOutputWithContext(context.Background())
}

func (o AccessUrlsResponseOutput) ToAccessUrlsResponsePtrOutputWithContext(ctx context.Context) AccessUrlsResponsePtrOutput {
	return o.ApplyT(func(v AccessUrlsResponse) *AccessUrlsResponse {
		return &v
	}).(AccessUrlsResponsePtrOutput)
}

// The URL where this CertificateAuthority's CA certificate is published. This will only be set for CAs that have been activated.
func (o AccessUrlsResponseOutput) CaCertificateAccessUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AccessUrlsResponse) string { return v.CaCertificateAccessUrl }).(pulumi.StringOutput)
}

// The URLs where this CertificateAuthority's CRLs are published. This will only be set for CAs that have been activated.
func (o AccessUrlsResponseOutput) CrlAccessUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessUrlsResponse) []string { return v.CrlAccessUrls }).(pulumi.StringArrayOutput)
}

type AccessUrlsResponsePtrOutput struct{ *pulumi.OutputState }

func (AccessUrlsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessUrlsResponse)(nil)).Elem()
}

func (o AccessUrlsResponsePtrOutput) ToAccessUrlsResponsePtrOutput() AccessUrlsResponsePtrOutput {
	return o
}

func (o AccessUrlsResponsePtrOutput) ToAccessUrlsResponsePtrOutputWithContext(ctx context.Context) AccessUrlsResponsePtrOutput {
	return o
}

func (o AccessUrlsResponsePtrOutput) Elem() AccessUrlsResponseOutput {
	return o.ApplyT(func(v *AccessUrlsResponse) AccessUrlsResponse { return *v }).(AccessUrlsResponseOutput)
}

// The URL where this CertificateAuthority's CA certificate is published. This will only be set for CAs that have been activated.
func (o AccessUrlsResponsePtrOutput) CaCertificateAccessUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessUrlsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CaCertificateAccessUrl
	}).(pulumi.StringPtrOutput)
}

// The URLs where this CertificateAuthority's CRLs are published. This will only be set for CAs that have been activated.
func (o AccessUrlsResponsePtrOutput) CrlAccessUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessUrlsResponse) []string {
		if v == nil {
			return nil
		}
		return v.CrlAccessUrls
	}).(pulumi.StringArrayOutput)
}

// Describes a "type" of key that may be used in a Certificate issued from a CaPool. Note that a single AllowedKeyType may refer to either a fully-qualified key algorithm, such as RSA 4096, or a family of key algorithms, such as any RSA key.
type AllowedKeyType struct {
	// Represents an allowed Elliptic Curve key type.
	EllipticCurve *EcKeyType `pulumi:"ellipticCurve"`
	// Represents an allowed RSA key type.
	Rsa *RsaKeyType `pulumi:"rsa"`
}

// AllowedKeyTypeInput is an input type that accepts AllowedKeyTypeArgs and AllowedKeyTypeOutput values.
// You can construct a concrete instance of `AllowedKeyTypeInput` via:
//
//          AllowedKeyTypeArgs{...}
type AllowedKeyTypeInput interface {
	pulumi.Input

	ToAllowedKeyTypeOutput() AllowedKeyTypeOutput
	ToAllowedKeyTypeOutputWithContext(context.Context) AllowedKeyTypeOutput
}

// Describes a "type" of key that may be used in a Certificate issued from a CaPool. Note that a single AllowedKeyType may refer to either a fully-qualified key algorithm, such as RSA 4096, or a family of key algorithms, such as any RSA key.
type AllowedKeyTypeArgs struct {
	// Represents an allowed Elliptic Curve key type.
	EllipticCurve EcKeyTypePtrInput `pulumi:"ellipticCurve"`
	// Represents an allowed RSA key type.
	Rsa RsaKeyTypePtrInput `pulumi:"rsa"`
}

func (AllowedKeyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedKeyType)(nil)).Elem()
}

func (i AllowedKeyTypeArgs) ToAllowedKeyTypeOutput() AllowedKeyTypeOutput {
	return i.ToAllowedKeyTypeOutputWithContext(context.Background())
}

func (i AllowedKeyTypeArgs) ToAllowedKeyTypeOutputWithContext(ctx context.Context) AllowedKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedKeyTypeOutput)
}

// AllowedKeyTypeArrayInput is an input type that accepts AllowedKeyTypeArray and AllowedKeyTypeArrayOutput values.
// You can construct a concrete instance of `AllowedKeyTypeArrayInput` via:
//
//          AllowedKeyTypeArray{ AllowedKeyTypeArgs{...} }
type AllowedKeyTypeArrayInput interface {
	pulumi.Input

	ToAllowedKeyTypeArrayOutput() AllowedKeyTypeArrayOutput
	ToAllowedKeyTypeArrayOutputWithContext(context.Context) AllowedKeyTypeArrayOutput
}

type AllowedKeyTypeArray []AllowedKeyTypeInput

func (AllowedKeyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedKeyType)(nil)).Elem()
}

func (i AllowedKeyTypeArray) ToAllowedKeyTypeArrayOutput() AllowedKeyTypeArrayOutput {
	return i.ToAllowedKeyTypeArrayOutputWithContext(context.Background())
}

func (i AllowedKeyTypeArray) ToAllowedKeyTypeArrayOutputWithContext(ctx context.Context) AllowedKeyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedKeyTypeArrayOutput)
}

// Describes a "type" of key that may be used in a Certificate issued from a CaPool. Note that a single AllowedKeyType may refer to either a fully-qualified key algorithm, such as RSA 4096, or a family of key algorithms, such as any RSA key.
type AllowedKeyTypeOutput struct{ *pulumi.OutputState }

func (AllowedKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedKeyType)(nil)).Elem()
}

func (o AllowedKeyTypeOutput) ToAllowedKeyTypeOutput() AllowedKeyTypeOutput {
	return o
}

func (o AllowedKeyTypeOutput) ToAllowedKeyTypeOutputWithContext(ctx context.Context) AllowedKeyTypeOutput {
	return o
}

// Represents an allowed Elliptic Curve key type.
func (o AllowedKeyTypeOutput) EllipticCurve() EcKeyTypePtrOutput {
	return o.ApplyT(func(v AllowedKeyType) *EcKeyType { return v.EllipticCurve }).(EcKeyTypePtrOutput)
}

// Represents an allowed RSA key type.
func (o AllowedKeyTypeOutput) Rsa() RsaKeyTypePtrOutput {
	return o.ApplyT(func(v AllowedKeyType) *RsaKeyType { return v.Rsa }).(RsaKeyTypePtrOutput)
}

type AllowedKeyTypeArrayOutput struct{ *pulumi.OutputState }

func (AllowedKeyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedKeyType)(nil)).Elem()
}

func (o AllowedKeyTypeArrayOutput) ToAllowedKeyTypeArrayOutput() AllowedKeyTypeArrayOutput {
	return o
}

func (o AllowedKeyTypeArrayOutput) ToAllowedKeyTypeArrayOutputWithContext(ctx context.Context) AllowedKeyTypeArrayOutput {
	return o
}

func (o AllowedKeyTypeArrayOutput) Index(i pulumi.IntInput) AllowedKeyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowedKeyType {
		return vs[0].([]AllowedKeyType)[vs[1].(int)]
	}).(AllowedKeyTypeOutput)
}

// Describes a "type" of key that may be used in a Certificate issued from a CaPool. Note that a single AllowedKeyType may refer to either a fully-qualified key algorithm, such as RSA 4096, or a family of key algorithms, such as any RSA key.
type AllowedKeyTypeResponse struct {
	// Represents an allowed Elliptic Curve key type.
	EllipticCurve EcKeyTypeResponse `pulumi:"ellipticCurve"`
	// Represents an allowed RSA key type.
	Rsa RsaKeyTypeResponse `pulumi:"rsa"`
}

// AllowedKeyTypeResponseInput is an input type that accepts AllowedKeyTypeResponseArgs and AllowedKeyTypeResponseOutput values.
// You can construct a concrete instance of `AllowedKeyTypeResponseInput` via:
//
//          AllowedKeyTypeResponseArgs{...}
type AllowedKeyTypeResponseInput interface {
	pulumi.Input

	ToAllowedKeyTypeResponseOutput() AllowedKeyTypeResponseOutput
	ToAllowedKeyTypeResponseOutputWithContext(context.Context) AllowedKeyTypeResponseOutput
}

// Describes a "type" of key that may be used in a Certificate issued from a CaPool. Note that a single AllowedKeyType may refer to either a fully-qualified key algorithm, such as RSA 4096, or a family of key algorithms, such as any RSA key.
type AllowedKeyTypeResponseArgs struct {
	// Represents an allowed Elliptic Curve key type.
	EllipticCurve EcKeyTypeResponseInput `pulumi:"ellipticCurve"`
	// Represents an allowed RSA key type.
	Rsa RsaKeyTypeResponseInput `pulumi:"rsa"`
}

func (AllowedKeyTypeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedKeyTypeResponse)(nil)).Elem()
}

func (i AllowedKeyTypeResponseArgs) ToAllowedKeyTypeResponseOutput() AllowedKeyTypeResponseOutput {
	return i.ToAllowedKeyTypeResponseOutputWithContext(context.Background())
}

func (i AllowedKeyTypeResponseArgs) ToAllowedKeyTypeResponseOutputWithContext(ctx context.Context) AllowedKeyTypeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedKeyTypeResponseOutput)
}

// AllowedKeyTypeResponseArrayInput is an input type that accepts AllowedKeyTypeResponseArray and AllowedKeyTypeResponseArrayOutput values.
// You can construct a concrete instance of `AllowedKeyTypeResponseArrayInput` via:
//
//          AllowedKeyTypeResponseArray{ AllowedKeyTypeResponseArgs{...} }
type AllowedKeyTypeResponseArrayInput interface {
	pulumi.Input

	ToAllowedKeyTypeResponseArrayOutput() AllowedKeyTypeResponseArrayOutput
	ToAllowedKeyTypeResponseArrayOutputWithContext(context.Context) AllowedKeyTypeResponseArrayOutput
}

type AllowedKeyTypeResponseArray []AllowedKeyTypeResponseInput

func (AllowedKeyTypeResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedKeyTypeResponse)(nil)).Elem()
}

func (i AllowedKeyTypeResponseArray) ToAllowedKeyTypeResponseArrayOutput() AllowedKeyTypeResponseArrayOutput {
	return i.ToAllowedKeyTypeResponseArrayOutputWithContext(context.Background())
}

func (i AllowedKeyTypeResponseArray) ToAllowedKeyTypeResponseArrayOutputWithContext(ctx context.Context) AllowedKeyTypeResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedKeyTypeResponseArrayOutput)
}

// Describes a "type" of key that may be used in a Certificate issued from a CaPool. Note that a single AllowedKeyType may refer to either a fully-qualified key algorithm, such as RSA 4096, or a family of key algorithms, such as any RSA key.
type AllowedKeyTypeResponseOutput struct{ *pulumi.OutputState }

func (AllowedKeyTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedKeyTypeResponse)(nil)).Elem()
}

func (o AllowedKeyTypeResponseOutput) ToAllowedKeyTypeResponseOutput() AllowedKeyTypeResponseOutput {
	return o
}

func (o AllowedKeyTypeResponseOutput) ToAllowedKeyTypeResponseOutputWithContext(ctx context.Context) AllowedKeyTypeResponseOutput {
	return o
}

// Represents an allowed Elliptic Curve key type.
func (o AllowedKeyTypeResponseOutput) EllipticCurve() EcKeyTypeResponseOutput {
	return o.ApplyT(func(v AllowedKeyTypeResponse) EcKeyTypeResponse { return v.EllipticCurve }).(EcKeyTypeResponseOutput)
}

// Represents an allowed RSA key type.
func (o AllowedKeyTypeResponseOutput) Rsa() RsaKeyTypeResponseOutput {
	return o.ApplyT(func(v AllowedKeyTypeResponse) RsaKeyTypeResponse { return v.Rsa }).(RsaKeyTypeResponseOutput)
}

type AllowedKeyTypeResponseArrayOutput struct{ *pulumi.OutputState }

func (AllowedKeyTypeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowedKeyTypeResponse)(nil)).Elem()
}

func (o AllowedKeyTypeResponseArrayOutput) ToAllowedKeyTypeResponseArrayOutput() AllowedKeyTypeResponseArrayOutput {
	return o
}

func (o AllowedKeyTypeResponseArrayOutput) ToAllowedKeyTypeResponseArrayOutputWithContext(ctx context.Context) AllowedKeyTypeResponseArrayOutput {
	return o
}

func (o AllowedKeyTypeResponseArrayOutput) Index(i pulumi.IntInput) AllowedKeyTypeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowedKeyTypeResponse {
		return vs[0].([]AllowedKeyTypeResponse)[vs[1].(int)]
	}).(AllowedKeyTypeResponseOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// AuditConfigResponseInput is an input type that accepts AuditConfigResponseArgs and AuditConfigResponseOutput values.
// You can construct a concrete instance of `AuditConfigResponseInput` via:
//
//          AuditConfigResponseArgs{...}
type AuditConfigResponseInput interface {
	pulumi.Input

	ToAuditConfigResponseOutput() AuditConfigResponseOutput
	ToAuditConfigResponseOutputWithContext(context.Context) AuditConfigResponseOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigResponseArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringInput `pulumi:"service"`
}

func (AuditConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (i AuditConfigResponseArgs) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return i.ToAuditConfigResponseOutputWithContext(context.Background())
}

func (i AuditConfigResponseArgs) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigResponseOutput)
}

// AuditConfigResponseArrayInput is an input type that accepts AuditConfigResponseArray and AuditConfigResponseArrayOutput values.
// You can construct a concrete instance of `AuditConfigResponseArrayInput` via:
//
//          AuditConfigResponseArray{ AuditConfigResponseArgs{...} }
type AuditConfigResponseArrayInput interface {
	pulumi.Input

	ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput
	ToAuditConfigResponseArrayOutputWithContext(context.Context) AuditConfigResponseArrayOutput
}

type AuditConfigResponseArray []AuditConfigResponseInput

func (AuditConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (i AuditConfigResponseArray) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return i.ToAuditConfigResponseArrayOutputWithContext(context.Background())
}

func (i AuditConfigResponseArray) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigResponseArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// AuditLogConfigResponseInput is an input type that accepts AuditLogConfigResponseArgs and AuditLogConfigResponseOutput values.
// You can construct a concrete instance of `AuditLogConfigResponseInput` via:
//
//          AuditLogConfigResponseArgs{...}
type AuditLogConfigResponseInput interface {
	pulumi.Input

	ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput
	ToAuditLogConfigResponseOutputWithContext(context.Context) AuditLogConfigResponseOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType pulumi.StringInput `pulumi:"logType"`
}

func (AuditLogConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (i AuditLogConfigResponseArgs) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return i.ToAuditLogConfigResponseOutputWithContext(context.Background())
}

func (i AuditLogConfigResponseArgs) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigResponseOutput)
}

// AuditLogConfigResponseArrayInput is an input type that accepts AuditLogConfigResponseArray and AuditLogConfigResponseArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigResponseArrayInput` via:
//
//          AuditLogConfigResponseArray{ AuditLogConfigResponseArgs{...} }
type AuditLogConfigResponseArrayInput interface {
	pulumi.Input

	ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput
	ToAuditLogConfigResponseArrayOutputWithContext(context.Context) AuditLogConfigResponseArrayOutput
}

type AuditLogConfigResponseArray []AuditLogConfigResponseInput

func (AuditLogConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (i AuditLogConfigResponseArray) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return i.ToAuditLogConfigResponseArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigResponseArray) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigResponseArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members` with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// BindingResponseInput is an input type that accepts BindingResponseArgs and BindingResponseOutput values.
// You can construct a concrete instance of `BindingResponseInput` via:
//
//          BindingResponseArgs{...}
type BindingResponseInput interface {
	pulumi.Input

	ToBindingResponseOutput() BindingResponseOutput
	ToBindingResponseOutputWithContext(context.Context) BindingResponseOutput
}

// Associates `members` with a `role`.
type BindingResponseArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponseInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringInput `pulumi:"role"`
}

func (BindingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (i BindingResponseArgs) ToBindingResponseOutput() BindingResponseOutput {
	return i.ToBindingResponseOutputWithContext(context.Background())
}

func (i BindingResponseArgs) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseOutput)
}

// BindingResponseArrayInput is an input type that accepts BindingResponseArray and BindingResponseArrayOutput values.
// You can construct a concrete instance of `BindingResponseArrayInput` via:
//
//          BindingResponseArray{ BindingResponseArgs{...} }
type BindingResponseArrayInput interface {
	pulumi.Input

	ToBindingResponseArrayOutput() BindingResponseArrayOutput
	ToBindingResponseArrayOutputWithContext(context.Context) BindingResponseArrayOutput
}

type BindingResponseArray []BindingResponseInput

func (BindingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (i BindingResponseArray) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return i.ToBindingResponseArrayOutputWithContext(context.Background())
}

func (i BindingResponseArray) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseArrayOutput)
}

// Associates `members` with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Describes values that are relevant in a CA certificate.
type CaOptions struct {
	// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
	IsCa *bool `pulumi:"isCa"`
	// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
	MaxIssuerPathLength *int `pulumi:"maxIssuerPathLength"`
}

// CaOptionsInput is an input type that accepts CaOptionsArgs and CaOptionsOutput values.
// You can construct a concrete instance of `CaOptionsInput` via:
//
//          CaOptionsArgs{...}
type CaOptionsInput interface {
	pulumi.Input

	ToCaOptionsOutput() CaOptionsOutput
	ToCaOptionsOutputWithContext(context.Context) CaOptionsOutput
}

// Describes values that are relevant in a CA certificate.
type CaOptionsArgs struct {
	// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
	IsCa pulumi.BoolPtrInput `pulumi:"isCa"`
	// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
	MaxIssuerPathLength pulumi.IntPtrInput `pulumi:"maxIssuerPathLength"`
}

func (CaOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CaOptions)(nil)).Elem()
}

func (i CaOptionsArgs) ToCaOptionsOutput() CaOptionsOutput {
	return i.ToCaOptionsOutputWithContext(context.Background())
}

func (i CaOptionsArgs) ToCaOptionsOutputWithContext(ctx context.Context) CaOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaOptionsOutput)
}

func (i CaOptionsArgs) ToCaOptionsPtrOutput() CaOptionsPtrOutput {
	return i.ToCaOptionsPtrOutputWithContext(context.Background())
}

func (i CaOptionsArgs) ToCaOptionsPtrOutputWithContext(ctx context.Context) CaOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaOptionsOutput).ToCaOptionsPtrOutputWithContext(ctx)
}

// CaOptionsPtrInput is an input type that accepts CaOptionsArgs, CaOptionsPtr and CaOptionsPtrOutput values.
// You can construct a concrete instance of `CaOptionsPtrInput` via:
//
//          CaOptionsArgs{...}
//
//  or:
//
//          nil
type CaOptionsPtrInput interface {
	pulumi.Input

	ToCaOptionsPtrOutput() CaOptionsPtrOutput
	ToCaOptionsPtrOutputWithContext(context.Context) CaOptionsPtrOutput
}

type caOptionsPtrType CaOptionsArgs

func CaOptionsPtr(v *CaOptionsArgs) CaOptionsPtrInput {
	return (*caOptionsPtrType)(v)
}

func (*caOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CaOptions)(nil)).Elem()
}

func (i *caOptionsPtrType) ToCaOptionsPtrOutput() CaOptionsPtrOutput {
	return i.ToCaOptionsPtrOutputWithContext(context.Background())
}

func (i *caOptionsPtrType) ToCaOptionsPtrOutputWithContext(ctx context.Context) CaOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaOptionsPtrOutput)
}

// Describes values that are relevant in a CA certificate.
type CaOptionsOutput struct{ *pulumi.OutputState }

func (CaOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaOptions)(nil)).Elem()
}

func (o CaOptionsOutput) ToCaOptionsOutput() CaOptionsOutput {
	return o
}

func (o CaOptionsOutput) ToCaOptionsOutputWithContext(ctx context.Context) CaOptionsOutput {
	return o
}

func (o CaOptionsOutput) ToCaOptionsPtrOutput() CaOptionsPtrOutput {
	return o.ToCaOptionsPtrOutputWithContext(context.Background())
}

func (o CaOptionsOutput) ToCaOptionsPtrOutputWithContext(ctx context.Context) CaOptionsPtrOutput {
	return o.ApplyT(func(v CaOptions) *CaOptions {
		return &v
	}).(CaOptionsPtrOutput)
}

// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
func (o CaOptionsOutput) IsCa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CaOptions) *bool { return v.IsCa }).(pulumi.BoolPtrOutput)
}

// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
func (o CaOptionsOutput) MaxIssuerPathLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CaOptions) *int { return v.MaxIssuerPathLength }).(pulumi.IntPtrOutput)
}

type CaOptionsPtrOutput struct{ *pulumi.OutputState }

func (CaOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CaOptions)(nil)).Elem()
}

func (o CaOptionsPtrOutput) ToCaOptionsPtrOutput() CaOptionsPtrOutput {
	return o
}

func (o CaOptionsPtrOutput) ToCaOptionsPtrOutputWithContext(ctx context.Context) CaOptionsPtrOutput {
	return o
}

func (o CaOptionsPtrOutput) Elem() CaOptionsOutput {
	return o.ApplyT(func(v *CaOptions) CaOptions { return *v }).(CaOptionsOutput)
}

// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
func (o CaOptionsPtrOutput) IsCa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CaOptions) *bool {
		if v == nil {
			return nil
		}
		return v.IsCa
	}).(pulumi.BoolPtrOutput)
}

// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
func (o CaOptionsPtrOutput) MaxIssuerPathLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CaOptions) *int {
		if v == nil {
			return nil
		}
		return v.MaxIssuerPathLength
	}).(pulumi.IntPtrOutput)
}

// Describes values that are relevant in a CA certificate.
type CaOptionsResponse struct {
	// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
	IsCa bool `pulumi:"isCa"`
	// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
	MaxIssuerPathLength int `pulumi:"maxIssuerPathLength"`
}

// CaOptionsResponseInput is an input type that accepts CaOptionsResponseArgs and CaOptionsResponseOutput values.
// You can construct a concrete instance of `CaOptionsResponseInput` via:
//
//          CaOptionsResponseArgs{...}
type CaOptionsResponseInput interface {
	pulumi.Input

	ToCaOptionsResponseOutput() CaOptionsResponseOutput
	ToCaOptionsResponseOutputWithContext(context.Context) CaOptionsResponseOutput
}

// Describes values that are relevant in a CA certificate.
type CaOptionsResponseArgs struct {
	// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
	IsCa pulumi.BoolInput `pulumi:"isCa"`
	// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
	MaxIssuerPathLength pulumi.IntInput `pulumi:"maxIssuerPathLength"`
}

func (CaOptionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CaOptionsResponse)(nil)).Elem()
}

func (i CaOptionsResponseArgs) ToCaOptionsResponseOutput() CaOptionsResponseOutput {
	return i.ToCaOptionsResponseOutputWithContext(context.Background())
}

func (i CaOptionsResponseArgs) ToCaOptionsResponseOutputWithContext(ctx context.Context) CaOptionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaOptionsResponseOutput)
}

func (i CaOptionsResponseArgs) ToCaOptionsResponsePtrOutput() CaOptionsResponsePtrOutput {
	return i.ToCaOptionsResponsePtrOutputWithContext(context.Background())
}

func (i CaOptionsResponseArgs) ToCaOptionsResponsePtrOutputWithContext(ctx context.Context) CaOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaOptionsResponseOutput).ToCaOptionsResponsePtrOutputWithContext(ctx)
}

// CaOptionsResponsePtrInput is an input type that accepts CaOptionsResponseArgs, CaOptionsResponsePtr and CaOptionsResponsePtrOutput values.
// You can construct a concrete instance of `CaOptionsResponsePtrInput` via:
//
//          CaOptionsResponseArgs{...}
//
//  or:
//
//          nil
type CaOptionsResponsePtrInput interface {
	pulumi.Input

	ToCaOptionsResponsePtrOutput() CaOptionsResponsePtrOutput
	ToCaOptionsResponsePtrOutputWithContext(context.Context) CaOptionsResponsePtrOutput
}

type caOptionsResponsePtrType CaOptionsResponseArgs

func CaOptionsResponsePtr(v *CaOptionsResponseArgs) CaOptionsResponsePtrInput {
	return (*caOptionsResponsePtrType)(v)
}

func (*caOptionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CaOptionsResponse)(nil)).Elem()
}

func (i *caOptionsResponsePtrType) ToCaOptionsResponsePtrOutput() CaOptionsResponsePtrOutput {
	return i.ToCaOptionsResponsePtrOutputWithContext(context.Background())
}

func (i *caOptionsResponsePtrType) ToCaOptionsResponsePtrOutputWithContext(ctx context.Context) CaOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaOptionsResponsePtrOutput)
}

// Describes values that are relevant in a CA certificate.
type CaOptionsResponseOutput struct{ *pulumi.OutputState }

func (CaOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaOptionsResponse)(nil)).Elem()
}

func (o CaOptionsResponseOutput) ToCaOptionsResponseOutput() CaOptionsResponseOutput {
	return o
}

func (o CaOptionsResponseOutput) ToCaOptionsResponseOutputWithContext(ctx context.Context) CaOptionsResponseOutput {
	return o
}

func (o CaOptionsResponseOutput) ToCaOptionsResponsePtrOutput() CaOptionsResponsePtrOutput {
	return o.ToCaOptionsResponsePtrOutputWithContext(context.Background())
}

func (o CaOptionsResponseOutput) ToCaOptionsResponsePtrOutputWithContext(ctx context.Context) CaOptionsResponsePtrOutput {
	return o.ApplyT(func(v CaOptionsResponse) *CaOptionsResponse {
		return &v
	}).(CaOptionsResponsePtrOutput)
}

// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
func (o CaOptionsResponseOutput) IsCa() pulumi.BoolOutput {
	return o.ApplyT(func(v CaOptionsResponse) bool { return v.IsCa }).(pulumi.BoolOutput)
}

// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
func (o CaOptionsResponseOutput) MaxIssuerPathLength() pulumi.IntOutput {
	return o.ApplyT(func(v CaOptionsResponse) int { return v.MaxIssuerPathLength }).(pulumi.IntOutput)
}

type CaOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (CaOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CaOptionsResponse)(nil)).Elem()
}

func (o CaOptionsResponsePtrOutput) ToCaOptionsResponsePtrOutput() CaOptionsResponsePtrOutput {
	return o
}

func (o CaOptionsResponsePtrOutput) ToCaOptionsResponsePtrOutputWithContext(ctx context.Context) CaOptionsResponsePtrOutput {
	return o
}

func (o CaOptionsResponsePtrOutput) Elem() CaOptionsResponseOutput {
	return o.ApplyT(func(v *CaOptionsResponse) CaOptionsResponse { return *v }).(CaOptionsResponseOutput)
}

// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
func (o CaOptionsResponsePtrOutput) IsCa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CaOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsCa
	}).(pulumi.BoolPtrOutput)
}

// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
func (o CaOptionsResponsePtrOutput) MaxIssuerPathLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CaOptionsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxIssuerPathLength
	}).(pulumi.IntPtrOutput)
}

// A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
type CertificateConfig struct {
	// Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
	PublicKey *PublicKey `pulumi:"publicKey"`
	// Specifies some of the values in a certificate that are related to the subject.
	SubjectConfig SubjectConfig `pulumi:"subjectConfig"`
	// Describes how some of the technical X.509 fields in a certificate should be populated.
	X509Config X509Parameters `pulumi:"x509Config"`
}

// CertificateConfigInput is an input type that accepts CertificateConfigArgs and CertificateConfigOutput values.
// You can construct a concrete instance of `CertificateConfigInput` via:
//
//          CertificateConfigArgs{...}
type CertificateConfigInput interface {
	pulumi.Input

	ToCertificateConfigOutput() CertificateConfigOutput
	ToCertificateConfigOutputWithContext(context.Context) CertificateConfigOutput
}

// A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
type CertificateConfigArgs struct {
	// Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
	PublicKey PublicKeyPtrInput `pulumi:"publicKey"`
	// Specifies some of the values in a certificate that are related to the subject.
	SubjectConfig SubjectConfigInput `pulumi:"subjectConfig"`
	// Describes how some of the technical X.509 fields in a certificate should be populated.
	X509Config X509ParametersInput `pulumi:"x509Config"`
}

func (CertificateConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateConfig)(nil)).Elem()
}

func (i CertificateConfigArgs) ToCertificateConfigOutput() CertificateConfigOutput {
	return i.ToCertificateConfigOutputWithContext(context.Background())
}

func (i CertificateConfigArgs) ToCertificateConfigOutputWithContext(ctx context.Context) CertificateConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateConfigOutput)
}

func (i CertificateConfigArgs) ToCertificateConfigPtrOutput() CertificateConfigPtrOutput {
	return i.ToCertificateConfigPtrOutputWithContext(context.Background())
}

func (i CertificateConfigArgs) ToCertificateConfigPtrOutputWithContext(ctx context.Context) CertificateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateConfigOutput).ToCertificateConfigPtrOutputWithContext(ctx)
}

// CertificateConfigPtrInput is an input type that accepts CertificateConfigArgs, CertificateConfigPtr and CertificateConfigPtrOutput values.
// You can construct a concrete instance of `CertificateConfigPtrInput` via:
//
//          CertificateConfigArgs{...}
//
//  or:
//
//          nil
type CertificateConfigPtrInput interface {
	pulumi.Input

	ToCertificateConfigPtrOutput() CertificateConfigPtrOutput
	ToCertificateConfigPtrOutputWithContext(context.Context) CertificateConfigPtrOutput
}

type certificateConfigPtrType CertificateConfigArgs

func CertificateConfigPtr(v *CertificateConfigArgs) CertificateConfigPtrInput {
	return (*certificateConfigPtrType)(v)
}

func (*certificateConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateConfig)(nil)).Elem()
}

func (i *certificateConfigPtrType) ToCertificateConfigPtrOutput() CertificateConfigPtrOutput {
	return i.ToCertificateConfigPtrOutputWithContext(context.Background())
}

func (i *certificateConfigPtrType) ToCertificateConfigPtrOutputWithContext(ctx context.Context) CertificateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateConfigPtrOutput)
}

// A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
type CertificateConfigOutput struct{ *pulumi.OutputState }

func (CertificateConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateConfig)(nil)).Elem()
}

func (o CertificateConfigOutput) ToCertificateConfigOutput() CertificateConfigOutput {
	return o
}

func (o CertificateConfigOutput) ToCertificateConfigOutputWithContext(ctx context.Context) CertificateConfigOutput {
	return o
}

func (o CertificateConfigOutput) ToCertificateConfigPtrOutput() CertificateConfigPtrOutput {
	return o.ToCertificateConfigPtrOutputWithContext(context.Background())
}

func (o CertificateConfigOutput) ToCertificateConfigPtrOutputWithContext(ctx context.Context) CertificateConfigPtrOutput {
	return o.ApplyT(func(v CertificateConfig) *CertificateConfig {
		return &v
	}).(CertificateConfigPtrOutput)
}

// Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
func (o CertificateConfigOutput) PublicKey() PublicKeyPtrOutput {
	return o.ApplyT(func(v CertificateConfig) *PublicKey { return v.PublicKey }).(PublicKeyPtrOutput)
}

// Specifies some of the values in a certificate that are related to the subject.
func (o CertificateConfigOutput) SubjectConfig() SubjectConfigOutput {
	return o.ApplyT(func(v CertificateConfig) SubjectConfig { return v.SubjectConfig }).(SubjectConfigOutput)
}

// Describes how some of the technical X.509 fields in a certificate should be populated.
func (o CertificateConfigOutput) X509Config() X509ParametersOutput {
	return o.ApplyT(func(v CertificateConfig) X509Parameters { return v.X509Config }).(X509ParametersOutput)
}

type CertificateConfigPtrOutput struct{ *pulumi.OutputState }

func (CertificateConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateConfig)(nil)).Elem()
}

func (o CertificateConfigPtrOutput) ToCertificateConfigPtrOutput() CertificateConfigPtrOutput {
	return o
}

func (o CertificateConfigPtrOutput) ToCertificateConfigPtrOutputWithContext(ctx context.Context) CertificateConfigPtrOutput {
	return o
}

func (o CertificateConfigPtrOutput) Elem() CertificateConfigOutput {
	return o.ApplyT(func(v *CertificateConfig) CertificateConfig { return *v }).(CertificateConfigOutput)
}

// Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
func (o CertificateConfigPtrOutput) PublicKey() PublicKeyPtrOutput {
	return o.ApplyT(func(v *CertificateConfig) *PublicKey {
		if v == nil {
			return nil
		}
		return v.PublicKey
	}).(PublicKeyPtrOutput)
}

// Specifies some of the values in a certificate that are related to the subject.
func (o CertificateConfigPtrOutput) SubjectConfig() SubjectConfigPtrOutput {
	return o.ApplyT(func(v *CertificateConfig) *SubjectConfig {
		if v == nil {
			return nil
		}
		return &v.SubjectConfig
	}).(SubjectConfigPtrOutput)
}

// Describes how some of the technical X.509 fields in a certificate should be populated.
func (o CertificateConfigPtrOutput) X509Config() X509ParametersPtrOutput {
	return o.ApplyT(func(v *CertificateConfig) *X509Parameters {
		if v == nil {
			return nil
		}
		return &v.X509Config
	}).(X509ParametersPtrOutput)
}

// A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
type CertificateConfigResponse struct {
	// Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
	PublicKey PublicKeyResponse `pulumi:"publicKey"`
	// Specifies some of the values in a certificate that are related to the subject.
	SubjectConfig SubjectConfigResponse `pulumi:"subjectConfig"`
	// Describes how some of the technical X.509 fields in a certificate should be populated.
	X509Config X509ParametersResponse `pulumi:"x509Config"`
}

// CertificateConfigResponseInput is an input type that accepts CertificateConfigResponseArgs and CertificateConfigResponseOutput values.
// You can construct a concrete instance of `CertificateConfigResponseInput` via:
//
//          CertificateConfigResponseArgs{...}
type CertificateConfigResponseInput interface {
	pulumi.Input

	ToCertificateConfigResponseOutput() CertificateConfigResponseOutput
	ToCertificateConfigResponseOutputWithContext(context.Context) CertificateConfigResponseOutput
}

// A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
type CertificateConfigResponseArgs struct {
	// Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
	PublicKey PublicKeyResponseInput `pulumi:"publicKey"`
	// Specifies some of the values in a certificate that are related to the subject.
	SubjectConfig SubjectConfigResponseInput `pulumi:"subjectConfig"`
	// Describes how some of the technical X.509 fields in a certificate should be populated.
	X509Config X509ParametersResponseInput `pulumi:"x509Config"`
}

func (CertificateConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateConfigResponse)(nil)).Elem()
}

func (i CertificateConfigResponseArgs) ToCertificateConfigResponseOutput() CertificateConfigResponseOutput {
	return i.ToCertificateConfigResponseOutputWithContext(context.Background())
}

func (i CertificateConfigResponseArgs) ToCertificateConfigResponseOutputWithContext(ctx context.Context) CertificateConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateConfigResponseOutput)
}

func (i CertificateConfigResponseArgs) ToCertificateConfigResponsePtrOutput() CertificateConfigResponsePtrOutput {
	return i.ToCertificateConfigResponsePtrOutputWithContext(context.Background())
}

func (i CertificateConfigResponseArgs) ToCertificateConfigResponsePtrOutputWithContext(ctx context.Context) CertificateConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateConfigResponseOutput).ToCertificateConfigResponsePtrOutputWithContext(ctx)
}

// CertificateConfigResponsePtrInput is an input type that accepts CertificateConfigResponseArgs, CertificateConfigResponsePtr and CertificateConfigResponsePtrOutput values.
// You can construct a concrete instance of `CertificateConfigResponsePtrInput` via:
//
//          CertificateConfigResponseArgs{...}
//
//  or:
//
//          nil
type CertificateConfigResponsePtrInput interface {
	pulumi.Input

	ToCertificateConfigResponsePtrOutput() CertificateConfigResponsePtrOutput
	ToCertificateConfigResponsePtrOutputWithContext(context.Context) CertificateConfigResponsePtrOutput
}

type certificateConfigResponsePtrType CertificateConfigResponseArgs

func CertificateConfigResponsePtr(v *CertificateConfigResponseArgs) CertificateConfigResponsePtrInput {
	return (*certificateConfigResponsePtrType)(v)
}

func (*certificateConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateConfigResponse)(nil)).Elem()
}

func (i *certificateConfigResponsePtrType) ToCertificateConfigResponsePtrOutput() CertificateConfigResponsePtrOutput {
	return i.ToCertificateConfigResponsePtrOutputWithContext(context.Background())
}

func (i *certificateConfigResponsePtrType) ToCertificateConfigResponsePtrOutputWithContext(ctx context.Context) CertificateConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateConfigResponsePtrOutput)
}

// A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
type CertificateConfigResponseOutput struct{ *pulumi.OutputState }

func (CertificateConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateConfigResponse)(nil)).Elem()
}

func (o CertificateConfigResponseOutput) ToCertificateConfigResponseOutput() CertificateConfigResponseOutput {
	return o
}

func (o CertificateConfigResponseOutput) ToCertificateConfigResponseOutputWithContext(ctx context.Context) CertificateConfigResponseOutput {
	return o
}

func (o CertificateConfigResponseOutput) ToCertificateConfigResponsePtrOutput() CertificateConfigResponsePtrOutput {
	return o.ToCertificateConfigResponsePtrOutputWithContext(context.Background())
}

func (o CertificateConfigResponseOutput) ToCertificateConfigResponsePtrOutputWithContext(ctx context.Context) CertificateConfigResponsePtrOutput {
	return o.ApplyT(func(v CertificateConfigResponse) *CertificateConfigResponse {
		return &v
	}).(CertificateConfigResponsePtrOutput)
}

// Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
func (o CertificateConfigResponseOutput) PublicKey() PublicKeyResponseOutput {
	return o.ApplyT(func(v CertificateConfigResponse) PublicKeyResponse { return v.PublicKey }).(PublicKeyResponseOutput)
}

// Specifies some of the values in a certificate that are related to the subject.
func (o CertificateConfigResponseOutput) SubjectConfig() SubjectConfigResponseOutput {
	return o.ApplyT(func(v CertificateConfigResponse) SubjectConfigResponse { return v.SubjectConfig }).(SubjectConfigResponseOutput)
}

// Describes how some of the technical X.509 fields in a certificate should be populated.
func (o CertificateConfigResponseOutput) X509Config() X509ParametersResponseOutput {
	return o.ApplyT(func(v CertificateConfigResponse) X509ParametersResponse { return v.X509Config }).(X509ParametersResponseOutput)
}

type CertificateConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (CertificateConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateConfigResponse)(nil)).Elem()
}

func (o CertificateConfigResponsePtrOutput) ToCertificateConfigResponsePtrOutput() CertificateConfigResponsePtrOutput {
	return o
}

func (o CertificateConfigResponsePtrOutput) ToCertificateConfigResponsePtrOutputWithContext(ctx context.Context) CertificateConfigResponsePtrOutput {
	return o
}

func (o CertificateConfigResponsePtrOutput) Elem() CertificateConfigResponseOutput {
	return o.ApplyT(func(v *CertificateConfigResponse) CertificateConfigResponse { return *v }).(CertificateConfigResponseOutput)
}

// Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.
func (o CertificateConfigResponsePtrOutput) PublicKey() PublicKeyResponsePtrOutput {
	return o.ApplyT(func(v *CertificateConfigResponse) *PublicKeyResponse {
		if v == nil {
			return nil
		}
		return &v.PublicKey
	}).(PublicKeyResponsePtrOutput)
}

// Specifies some of the values in a certificate that are related to the subject.
func (o CertificateConfigResponsePtrOutput) SubjectConfig() SubjectConfigResponsePtrOutput {
	return o.ApplyT(func(v *CertificateConfigResponse) *SubjectConfigResponse {
		if v == nil {
			return nil
		}
		return &v.SubjectConfig
	}).(SubjectConfigResponsePtrOutput)
}

// Describes how some of the technical X.509 fields in a certificate should be populated.
func (o CertificateConfigResponsePtrOutput) X509Config() X509ParametersResponsePtrOutput {
	return o.ApplyT(func(v *CertificateConfigResponse) *X509ParametersResponse {
		if v == nil {
			return nil
		}
		return &v.X509Config
	}).(X509ParametersResponsePtrOutput)
}

// A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.
type CertificateDescriptionResponse struct {
	// Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access" extension in the certificate.
	AiaIssuingCertificateUrls []string `pulumi:"aiaIssuingCertificateUrls"`
	// Identifies the subject_key_id of the parent certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.1.1
	AuthorityKeyId KeyIdResponse `pulumi:"authorityKeyId"`
	// The hash of the x.509 certificate.
	CertFingerprint CertificateFingerprintResponse `pulumi:"certFingerprint"`
	// Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
	CrlDistributionPoints []string `pulumi:"crlDistributionPoints"`
	// The public key that corresponds to an issued certificate.
	PublicKey PublicKeyResponse `pulumi:"publicKey"`
	// Describes some of the values in a certificate that are related to the subject and lifetime.
	SubjectDescription SubjectDescriptionResponse `pulumi:"subjectDescription"`
	// Provides a means of identifiying certificates that contain a particular public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
	SubjectKeyId KeyIdResponse `pulumi:"subjectKeyId"`
	// Describes some of the technical X.509 fields in a certificate.
	X509Description X509ParametersResponse `pulumi:"x509Description"`
}

// CertificateDescriptionResponseInput is an input type that accepts CertificateDescriptionResponseArgs and CertificateDescriptionResponseOutput values.
// You can construct a concrete instance of `CertificateDescriptionResponseInput` via:
//
//          CertificateDescriptionResponseArgs{...}
type CertificateDescriptionResponseInput interface {
	pulumi.Input

	ToCertificateDescriptionResponseOutput() CertificateDescriptionResponseOutput
	ToCertificateDescriptionResponseOutputWithContext(context.Context) CertificateDescriptionResponseOutput
}

// A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.
type CertificateDescriptionResponseArgs struct {
	// Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access" extension in the certificate.
	AiaIssuingCertificateUrls pulumi.StringArrayInput `pulumi:"aiaIssuingCertificateUrls"`
	// Identifies the subject_key_id of the parent certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.1.1
	AuthorityKeyId KeyIdResponseInput `pulumi:"authorityKeyId"`
	// The hash of the x.509 certificate.
	CertFingerprint CertificateFingerprintResponseInput `pulumi:"certFingerprint"`
	// Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
	CrlDistributionPoints pulumi.StringArrayInput `pulumi:"crlDistributionPoints"`
	// The public key that corresponds to an issued certificate.
	PublicKey PublicKeyResponseInput `pulumi:"publicKey"`
	// Describes some of the values in a certificate that are related to the subject and lifetime.
	SubjectDescription SubjectDescriptionResponseInput `pulumi:"subjectDescription"`
	// Provides a means of identifiying certificates that contain a particular public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
	SubjectKeyId KeyIdResponseInput `pulumi:"subjectKeyId"`
	// Describes some of the technical X.509 fields in a certificate.
	X509Description X509ParametersResponseInput `pulumi:"x509Description"`
}

func (CertificateDescriptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDescriptionResponse)(nil)).Elem()
}

func (i CertificateDescriptionResponseArgs) ToCertificateDescriptionResponseOutput() CertificateDescriptionResponseOutput {
	return i.ToCertificateDescriptionResponseOutputWithContext(context.Background())
}

func (i CertificateDescriptionResponseArgs) ToCertificateDescriptionResponseOutputWithContext(ctx context.Context) CertificateDescriptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionResponseOutput)
}

func (i CertificateDescriptionResponseArgs) ToCertificateDescriptionResponsePtrOutput() CertificateDescriptionResponsePtrOutput {
	return i.ToCertificateDescriptionResponsePtrOutputWithContext(context.Background())
}

func (i CertificateDescriptionResponseArgs) ToCertificateDescriptionResponsePtrOutputWithContext(ctx context.Context) CertificateDescriptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionResponseOutput).ToCertificateDescriptionResponsePtrOutputWithContext(ctx)
}

// CertificateDescriptionResponsePtrInput is an input type that accepts CertificateDescriptionResponseArgs, CertificateDescriptionResponsePtr and CertificateDescriptionResponsePtrOutput values.
// You can construct a concrete instance of `CertificateDescriptionResponsePtrInput` via:
//
//          CertificateDescriptionResponseArgs{...}
//
//  or:
//
//          nil
type CertificateDescriptionResponsePtrInput interface {
	pulumi.Input

	ToCertificateDescriptionResponsePtrOutput() CertificateDescriptionResponsePtrOutput
	ToCertificateDescriptionResponsePtrOutputWithContext(context.Context) CertificateDescriptionResponsePtrOutput
}

type certificateDescriptionResponsePtrType CertificateDescriptionResponseArgs

func CertificateDescriptionResponsePtr(v *CertificateDescriptionResponseArgs) CertificateDescriptionResponsePtrInput {
	return (*certificateDescriptionResponsePtrType)(v)
}

func (*certificateDescriptionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateDescriptionResponse)(nil)).Elem()
}

func (i *certificateDescriptionResponsePtrType) ToCertificateDescriptionResponsePtrOutput() CertificateDescriptionResponsePtrOutput {
	return i.ToCertificateDescriptionResponsePtrOutputWithContext(context.Background())
}

func (i *certificateDescriptionResponsePtrType) ToCertificateDescriptionResponsePtrOutputWithContext(ctx context.Context) CertificateDescriptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionResponsePtrOutput)
}

// CertificateDescriptionResponseArrayInput is an input type that accepts CertificateDescriptionResponseArray and CertificateDescriptionResponseArrayOutput values.
// You can construct a concrete instance of `CertificateDescriptionResponseArrayInput` via:
//
//          CertificateDescriptionResponseArray{ CertificateDescriptionResponseArgs{...} }
type CertificateDescriptionResponseArrayInput interface {
	pulumi.Input

	ToCertificateDescriptionResponseArrayOutput() CertificateDescriptionResponseArrayOutput
	ToCertificateDescriptionResponseArrayOutputWithContext(context.Context) CertificateDescriptionResponseArrayOutput
}

type CertificateDescriptionResponseArray []CertificateDescriptionResponseInput

func (CertificateDescriptionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateDescriptionResponse)(nil)).Elem()
}

func (i CertificateDescriptionResponseArray) ToCertificateDescriptionResponseArrayOutput() CertificateDescriptionResponseArrayOutput {
	return i.ToCertificateDescriptionResponseArrayOutputWithContext(context.Background())
}

func (i CertificateDescriptionResponseArray) ToCertificateDescriptionResponseArrayOutputWithContext(ctx context.Context) CertificateDescriptionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDescriptionResponseArrayOutput)
}

// A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.
type CertificateDescriptionResponseOutput struct{ *pulumi.OutputState }

func (CertificateDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDescriptionResponse)(nil)).Elem()
}

func (o CertificateDescriptionResponseOutput) ToCertificateDescriptionResponseOutput() CertificateDescriptionResponseOutput {
	return o
}

func (o CertificateDescriptionResponseOutput) ToCertificateDescriptionResponseOutputWithContext(ctx context.Context) CertificateDescriptionResponseOutput {
	return o
}

func (o CertificateDescriptionResponseOutput) ToCertificateDescriptionResponsePtrOutput() CertificateDescriptionResponsePtrOutput {
	return o.ToCertificateDescriptionResponsePtrOutputWithContext(context.Background())
}

func (o CertificateDescriptionResponseOutput) ToCertificateDescriptionResponsePtrOutputWithContext(ctx context.Context) CertificateDescriptionResponsePtrOutput {
	return o.ApplyT(func(v CertificateDescriptionResponse) *CertificateDescriptionResponse {
		return &v
	}).(CertificateDescriptionResponsePtrOutput)
}

// Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access" extension in the certificate.
func (o CertificateDescriptionResponseOutput) AiaIssuingCertificateUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateDescriptionResponse) []string { return v.AiaIssuingCertificateUrls }).(pulumi.StringArrayOutput)
}

// Identifies the subject_key_id of the parent certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.1.1
func (o CertificateDescriptionResponseOutput) AuthorityKeyId() KeyIdResponseOutput {
	return o.ApplyT(func(v CertificateDescriptionResponse) KeyIdResponse { return v.AuthorityKeyId }).(KeyIdResponseOutput)
}

// The hash of the x.509 certificate.
func (o CertificateDescriptionResponseOutput) CertFingerprint() CertificateFingerprintResponseOutput {
	return o.ApplyT(func(v CertificateDescriptionResponse) CertificateFingerprintResponse { return v.CertFingerprint }).(CertificateFingerprintResponseOutput)
}

// Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
func (o CertificateDescriptionResponseOutput) CrlDistributionPoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateDescriptionResponse) []string { return v.CrlDistributionPoints }).(pulumi.StringArrayOutput)
}

// The public key that corresponds to an issued certificate.
func (o CertificateDescriptionResponseOutput) PublicKey() PublicKeyResponseOutput {
	return o.ApplyT(func(v CertificateDescriptionResponse) PublicKeyResponse { return v.PublicKey }).(PublicKeyResponseOutput)
}

// Describes some of the values in a certificate that are related to the subject and lifetime.
func (o CertificateDescriptionResponseOutput) SubjectDescription() SubjectDescriptionResponseOutput {
	return o.ApplyT(func(v CertificateDescriptionResponse) SubjectDescriptionResponse { return v.SubjectDescription }).(SubjectDescriptionResponseOutput)
}

// Provides a means of identifiying certificates that contain a particular public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
func (o CertificateDescriptionResponseOutput) SubjectKeyId() KeyIdResponseOutput {
	return o.ApplyT(func(v CertificateDescriptionResponse) KeyIdResponse { return v.SubjectKeyId }).(KeyIdResponseOutput)
}

// Describes some of the technical X.509 fields in a certificate.
func (o CertificateDescriptionResponseOutput) X509Description() X509ParametersResponseOutput {
	return o.ApplyT(func(v CertificateDescriptionResponse) X509ParametersResponse { return v.X509Description }).(X509ParametersResponseOutput)
}

type CertificateDescriptionResponsePtrOutput struct{ *pulumi.OutputState }

func (CertificateDescriptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateDescriptionResponse)(nil)).Elem()
}

func (o CertificateDescriptionResponsePtrOutput) ToCertificateDescriptionResponsePtrOutput() CertificateDescriptionResponsePtrOutput {
	return o
}

func (o CertificateDescriptionResponsePtrOutput) ToCertificateDescriptionResponsePtrOutputWithContext(ctx context.Context) CertificateDescriptionResponsePtrOutput {
	return o
}

func (o CertificateDescriptionResponsePtrOutput) Elem() CertificateDescriptionResponseOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) CertificateDescriptionResponse { return *v }).(CertificateDescriptionResponseOutput)
}

// Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access" extension in the certificate.
func (o CertificateDescriptionResponsePtrOutput) AiaIssuingCertificateUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) []string {
		if v == nil {
			return nil
		}
		return v.AiaIssuingCertificateUrls
	}).(pulumi.StringArrayOutput)
}

// Identifies the subject_key_id of the parent certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.1.1
func (o CertificateDescriptionResponsePtrOutput) AuthorityKeyId() KeyIdResponsePtrOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) *KeyIdResponse {
		if v == nil {
			return nil
		}
		return &v.AuthorityKeyId
	}).(KeyIdResponsePtrOutput)
}

// The hash of the x.509 certificate.
func (o CertificateDescriptionResponsePtrOutput) CertFingerprint() CertificateFingerprintResponsePtrOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) *CertificateFingerprintResponse {
		if v == nil {
			return nil
		}
		return &v.CertFingerprint
	}).(CertificateFingerprintResponsePtrOutput)
}

// Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
func (o CertificateDescriptionResponsePtrOutput) CrlDistributionPoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) []string {
		if v == nil {
			return nil
		}
		return v.CrlDistributionPoints
	}).(pulumi.StringArrayOutput)
}

// The public key that corresponds to an issued certificate.
func (o CertificateDescriptionResponsePtrOutput) PublicKey() PublicKeyResponsePtrOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) *PublicKeyResponse {
		if v == nil {
			return nil
		}
		return &v.PublicKey
	}).(PublicKeyResponsePtrOutput)
}

// Describes some of the values in a certificate that are related to the subject and lifetime.
func (o CertificateDescriptionResponsePtrOutput) SubjectDescription() SubjectDescriptionResponsePtrOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) *SubjectDescriptionResponse {
		if v == nil {
			return nil
		}
		return &v.SubjectDescription
	}).(SubjectDescriptionResponsePtrOutput)
}

// Provides a means of identifiying certificates that contain a particular public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
func (o CertificateDescriptionResponsePtrOutput) SubjectKeyId() KeyIdResponsePtrOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) *KeyIdResponse {
		if v == nil {
			return nil
		}
		return &v.SubjectKeyId
	}).(KeyIdResponsePtrOutput)
}

// Describes some of the technical X.509 fields in a certificate.
func (o CertificateDescriptionResponsePtrOutput) X509Description() X509ParametersResponsePtrOutput {
	return o.ApplyT(func(v *CertificateDescriptionResponse) *X509ParametersResponse {
		if v == nil {
			return nil
		}
		return &v.X509Description
	}).(X509ParametersResponsePtrOutput)
}

type CertificateDescriptionResponseArrayOutput struct{ *pulumi.OutputState }

func (CertificateDescriptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateDescriptionResponse)(nil)).Elem()
}

func (o CertificateDescriptionResponseArrayOutput) ToCertificateDescriptionResponseArrayOutput() CertificateDescriptionResponseArrayOutput {
	return o
}

func (o CertificateDescriptionResponseArrayOutput) ToCertificateDescriptionResponseArrayOutputWithContext(ctx context.Context) CertificateDescriptionResponseArrayOutput {
	return o
}

func (o CertificateDescriptionResponseArrayOutput) Index(i pulumi.IntInput) CertificateDescriptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateDescriptionResponse {
		return vs[0].([]CertificateDescriptionResponse)[vs[1].(int)]
	}).(CertificateDescriptionResponseOutput)
}

// Describes a set of X.509 extensions that may be part of some certificate issuance controls.
type CertificateExtensionConstraints struct {
	// Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
	AdditionalExtensions []ObjectId `pulumi:"additionalExtensions"`
	// Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
	KnownExtensions []CertificateExtensionConstraintsKnownExtensionsItem `pulumi:"knownExtensions"`
}

// CertificateExtensionConstraintsInput is an input type that accepts CertificateExtensionConstraintsArgs and CertificateExtensionConstraintsOutput values.
// You can construct a concrete instance of `CertificateExtensionConstraintsInput` via:
//
//          CertificateExtensionConstraintsArgs{...}
type CertificateExtensionConstraintsInput interface {
	pulumi.Input

	ToCertificateExtensionConstraintsOutput() CertificateExtensionConstraintsOutput
	ToCertificateExtensionConstraintsOutputWithContext(context.Context) CertificateExtensionConstraintsOutput
}

// Describes a set of X.509 extensions that may be part of some certificate issuance controls.
type CertificateExtensionConstraintsArgs struct {
	// Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
	AdditionalExtensions ObjectIdArrayInput `pulumi:"additionalExtensions"`
	// Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
	KnownExtensions CertificateExtensionConstraintsKnownExtensionsItemArrayInput `pulumi:"knownExtensions"`
}

func (CertificateExtensionConstraintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateExtensionConstraints)(nil)).Elem()
}

func (i CertificateExtensionConstraintsArgs) ToCertificateExtensionConstraintsOutput() CertificateExtensionConstraintsOutput {
	return i.ToCertificateExtensionConstraintsOutputWithContext(context.Background())
}

func (i CertificateExtensionConstraintsArgs) ToCertificateExtensionConstraintsOutputWithContext(ctx context.Context) CertificateExtensionConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateExtensionConstraintsOutput)
}

func (i CertificateExtensionConstraintsArgs) ToCertificateExtensionConstraintsPtrOutput() CertificateExtensionConstraintsPtrOutput {
	return i.ToCertificateExtensionConstraintsPtrOutputWithContext(context.Background())
}

func (i CertificateExtensionConstraintsArgs) ToCertificateExtensionConstraintsPtrOutputWithContext(ctx context.Context) CertificateExtensionConstraintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateExtensionConstraintsOutput).ToCertificateExtensionConstraintsPtrOutputWithContext(ctx)
}

// CertificateExtensionConstraintsPtrInput is an input type that accepts CertificateExtensionConstraintsArgs, CertificateExtensionConstraintsPtr and CertificateExtensionConstraintsPtrOutput values.
// You can construct a concrete instance of `CertificateExtensionConstraintsPtrInput` via:
//
//          CertificateExtensionConstraintsArgs{...}
//
//  or:
//
//          nil
type CertificateExtensionConstraintsPtrInput interface {
	pulumi.Input

	ToCertificateExtensionConstraintsPtrOutput() CertificateExtensionConstraintsPtrOutput
	ToCertificateExtensionConstraintsPtrOutputWithContext(context.Context) CertificateExtensionConstraintsPtrOutput
}

type certificateExtensionConstraintsPtrType CertificateExtensionConstraintsArgs

func CertificateExtensionConstraintsPtr(v *CertificateExtensionConstraintsArgs) CertificateExtensionConstraintsPtrInput {
	return (*certificateExtensionConstraintsPtrType)(v)
}

func (*certificateExtensionConstraintsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateExtensionConstraints)(nil)).Elem()
}

func (i *certificateExtensionConstraintsPtrType) ToCertificateExtensionConstraintsPtrOutput() CertificateExtensionConstraintsPtrOutput {
	return i.ToCertificateExtensionConstraintsPtrOutputWithContext(context.Background())
}

func (i *certificateExtensionConstraintsPtrType) ToCertificateExtensionConstraintsPtrOutputWithContext(ctx context.Context) CertificateExtensionConstraintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateExtensionConstraintsPtrOutput)
}

// Describes a set of X.509 extensions that may be part of some certificate issuance controls.
type CertificateExtensionConstraintsOutput struct{ *pulumi.OutputState }

func (CertificateExtensionConstraintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateExtensionConstraints)(nil)).Elem()
}

func (o CertificateExtensionConstraintsOutput) ToCertificateExtensionConstraintsOutput() CertificateExtensionConstraintsOutput {
	return o
}

func (o CertificateExtensionConstraintsOutput) ToCertificateExtensionConstraintsOutputWithContext(ctx context.Context) CertificateExtensionConstraintsOutput {
	return o
}

func (o CertificateExtensionConstraintsOutput) ToCertificateExtensionConstraintsPtrOutput() CertificateExtensionConstraintsPtrOutput {
	return o.ToCertificateExtensionConstraintsPtrOutputWithContext(context.Background())
}

func (o CertificateExtensionConstraintsOutput) ToCertificateExtensionConstraintsPtrOutputWithContext(ctx context.Context) CertificateExtensionConstraintsPtrOutput {
	return o.ApplyT(func(v CertificateExtensionConstraints) *CertificateExtensionConstraints {
		return &v
	}).(CertificateExtensionConstraintsPtrOutput)
}

// Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
func (o CertificateExtensionConstraintsOutput) AdditionalExtensions() ObjectIdArrayOutput {
	return o.ApplyT(func(v CertificateExtensionConstraints) []ObjectId { return v.AdditionalExtensions }).(ObjectIdArrayOutput)
}

// Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
func (o CertificateExtensionConstraintsOutput) KnownExtensions() CertificateExtensionConstraintsKnownExtensionsItemArrayOutput {
	return o.ApplyT(func(v CertificateExtensionConstraints) []CertificateExtensionConstraintsKnownExtensionsItem {
		return v.KnownExtensions
	}).(CertificateExtensionConstraintsKnownExtensionsItemArrayOutput)
}

type CertificateExtensionConstraintsPtrOutput struct{ *pulumi.OutputState }

func (CertificateExtensionConstraintsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateExtensionConstraints)(nil)).Elem()
}

func (o CertificateExtensionConstraintsPtrOutput) ToCertificateExtensionConstraintsPtrOutput() CertificateExtensionConstraintsPtrOutput {
	return o
}

func (o CertificateExtensionConstraintsPtrOutput) ToCertificateExtensionConstraintsPtrOutputWithContext(ctx context.Context) CertificateExtensionConstraintsPtrOutput {
	return o
}

func (o CertificateExtensionConstraintsPtrOutput) Elem() CertificateExtensionConstraintsOutput {
	return o.ApplyT(func(v *CertificateExtensionConstraints) CertificateExtensionConstraints { return *v }).(CertificateExtensionConstraintsOutput)
}

// Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
func (o CertificateExtensionConstraintsPtrOutput) AdditionalExtensions() ObjectIdArrayOutput {
	return o.ApplyT(func(v *CertificateExtensionConstraints) []ObjectId {
		if v == nil {
			return nil
		}
		return v.AdditionalExtensions
	}).(ObjectIdArrayOutput)
}

// Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
func (o CertificateExtensionConstraintsPtrOutput) KnownExtensions() CertificateExtensionConstraintsKnownExtensionsItemArrayOutput {
	return o.ApplyT(func(v *CertificateExtensionConstraints) []CertificateExtensionConstraintsKnownExtensionsItem {
		if v == nil {
			return nil
		}
		return v.KnownExtensions
	}).(CertificateExtensionConstraintsKnownExtensionsItemArrayOutput)
}

// Describes a set of X.509 extensions that may be part of some certificate issuance controls.
type CertificateExtensionConstraintsResponse struct {
	// Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
	AdditionalExtensions []ObjectIdResponse `pulumi:"additionalExtensions"`
	// Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
	KnownExtensions []string `pulumi:"knownExtensions"`
}

// CertificateExtensionConstraintsResponseInput is an input type that accepts CertificateExtensionConstraintsResponseArgs and CertificateExtensionConstraintsResponseOutput values.
// You can construct a concrete instance of `CertificateExtensionConstraintsResponseInput` via:
//
//          CertificateExtensionConstraintsResponseArgs{...}
type CertificateExtensionConstraintsResponseInput interface {
	pulumi.Input

	ToCertificateExtensionConstraintsResponseOutput() CertificateExtensionConstraintsResponseOutput
	ToCertificateExtensionConstraintsResponseOutputWithContext(context.Context) CertificateExtensionConstraintsResponseOutput
}

// Describes a set of X.509 extensions that may be part of some certificate issuance controls.
type CertificateExtensionConstraintsResponseArgs struct {
	// Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
	AdditionalExtensions ObjectIdResponseArrayInput `pulumi:"additionalExtensions"`
	// Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
	KnownExtensions pulumi.StringArrayInput `pulumi:"knownExtensions"`
}

func (CertificateExtensionConstraintsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateExtensionConstraintsResponse)(nil)).Elem()
}

func (i CertificateExtensionConstraintsResponseArgs) ToCertificateExtensionConstraintsResponseOutput() CertificateExtensionConstraintsResponseOutput {
	return i.ToCertificateExtensionConstraintsResponseOutputWithContext(context.Background())
}

func (i CertificateExtensionConstraintsResponseArgs) ToCertificateExtensionConstraintsResponseOutputWithContext(ctx context.Context) CertificateExtensionConstraintsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateExtensionConstraintsResponseOutput)
}

func (i CertificateExtensionConstraintsResponseArgs) ToCertificateExtensionConstraintsResponsePtrOutput() CertificateExtensionConstraintsResponsePtrOutput {
	return i.ToCertificateExtensionConstraintsResponsePtrOutputWithContext(context.Background())
}

func (i CertificateExtensionConstraintsResponseArgs) ToCertificateExtensionConstraintsResponsePtrOutputWithContext(ctx context.Context) CertificateExtensionConstraintsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateExtensionConstraintsResponseOutput).ToCertificateExtensionConstraintsResponsePtrOutputWithContext(ctx)
}

// CertificateExtensionConstraintsResponsePtrInput is an input type that accepts CertificateExtensionConstraintsResponseArgs, CertificateExtensionConstraintsResponsePtr and CertificateExtensionConstraintsResponsePtrOutput values.
// You can construct a concrete instance of `CertificateExtensionConstraintsResponsePtrInput` via:
//
//          CertificateExtensionConstraintsResponseArgs{...}
//
//  or:
//
//          nil
type CertificateExtensionConstraintsResponsePtrInput interface {
	pulumi.Input

	ToCertificateExtensionConstraintsResponsePtrOutput() CertificateExtensionConstraintsResponsePtrOutput
	ToCertificateExtensionConstraintsResponsePtrOutputWithContext(context.Context) CertificateExtensionConstraintsResponsePtrOutput
}

type certificateExtensionConstraintsResponsePtrType CertificateExtensionConstraintsResponseArgs

func CertificateExtensionConstraintsResponsePtr(v *CertificateExtensionConstraintsResponseArgs) CertificateExtensionConstraintsResponsePtrInput {
	return (*certificateExtensionConstraintsResponsePtrType)(v)
}

func (*certificateExtensionConstraintsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateExtensionConstraintsResponse)(nil)).Elem()
}

func (i *certificateExtensionConstraintsResponsePtrType) ToCertificateExtensionConstraintsResponsePtrOutput() CertificateExtensionConstraintsResponsePtrOutput {
	return i.ToCertificateExtensionConstraintsResponsePtrOutputWithContext(context.Background())
}

func (i *certificateExtensionConstraintsResponsePtrType) ToCertificateExtensionConstraintsResponsePtrOutputWithContext(ctx context.Context) CertificateExtensionConstraintsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateExtensionConstraintsResponsePtrOutput)
}

// Describes a set of X.509 extensions that may be part of some certificate issuance controls.
type CertificateExtensionConstraintsResponseOutput struct{ *pulumi.OutputState }

func (CertificateExtensionConstraintsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateExtensionConstraintsResponse)(nil)).Elem()
}

func (o CertificateExtensionConstraintsResponseOutput) ToCertificateExtensionConstraintsResponseOutput() CertificateExtensionConstraintsResponseOutput {
	return o
}

func (o CertificateExtensionConstraintsResponseOutput) ToCertificateExtensionConstraintsResponseOutputWithContext(ctx context.Context) CertificateExtensionConstraintsResponseOutput {
	return o
}

func (o CertificateExtensionConstraintsResponseOutput) ToCertificateExtensionConstraintsResponsePtrOutput() CertificateExtensionConstraintsResponsePtrOutput {
	return o.ToCertificateExtensionConstraintsResponsePtrOutputWithContext(context.Background())
}

func (o CertificateExtensionConstraintsResponseOutput) ToCertificateExtensionConstraintsResponsePtrOutputWithContext(ctx context.Context) CertificateExtensionConstraintsResponsePtrOutput {
	return o.ApplyT(func(v CertificateExtensionConstraintsResponse) *CertificateExtensionConstraintsResponse {
		return &v
	}).(CertificateExtensionConstraintsResponsePtrOutput)
}

// Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
func (o CertificateExtensionConstraintsResponseOutput) AdditionalExtensions() ObjectIdResponseArrayOutput {
	return o.ApplyT(func(v CertificateExtensionConstraintsResponse) []ObjectIdResponse { return v.AdditionalExtensions }).(ObjectIdResponseArrayOutput)
}

// Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
func (o CertificateExtensionConstraintsResponseOutput) KnownExtensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateExtensionConstraintsResponse) []string { return v.KnownExtensions }).(pulumi.StringArrayOutput)
}

type CertificateExtensionConstraintsResponsePtrOutput struct{ *pulumi.OutputState }

func (CertificateExtensionConstraintsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateExtensionConstraintsResponse)(nil)).Elem()
}

func (o CertificateExtensionConstraintsResponsePtrOutput) ToCertificateExtensionConstraintsResponsePtrOutput() CertificateExtensionConstraintsResponsePtrOutput {
	return o
}

func (o CertificateExtensionConstraintsResponsePtrOutput) ToCertificateExtensionConstraintsResponsePtrOutputWithContext(ctx context.Context) CertificateExtensionConstraintsResponsePtrOutput {
	return o
}

func (o CertificateExtensionConstraintsResponsePtrOutput) Elem() CertificateExtensionConstraintsResponseOutput {
	return o.ApplyT(func(v *CertificateExtensionConstraintsResponse) CertificateExtensionConstraintsResponse { return *v }).(CertificateExtensionConstraintsResponseOutput)
}

// Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
func (o CertificateExtensionConstraintsResponsePtrOutput) AdditionalExtensions() ObjectIdResponseArrayOutput {
	return o.ApplyT(func(v *CertificateExtensionConstraintsResponse) []ObjectIdResponse {
		if v == nil {
			return nil
		}
		return v.AdditionalExtensions
	}).(ObjectIdResponseArrayOutput)
}

// Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
func (o CertificateExtensionConstraintsResponsePtrOutput) KnownExtensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateExtensionConstraintsResponse) []string {
		if v == nil {
			return nil
		}
		return v.KnownExtensions
	}).(pulumi.StringArrayOutput)
}

// A group of fingerprints for the x509 certificate.
type CertificateFingerprintResponse struct {
	// The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate.
	Sha256Hash string `pulumi:"sha256Hash"`
}

// CertificateFingerprintResponseInput is an input type that accepts CertificateFingerprintResponseArgs and CertificateFingerprintResponseOutput values.
// You can construct a concrete instance of `CertificateFingerprintResponseInput` via:
//
//          CertificateFingerprintResponseArgs{...}
type CertificateFingerprintResponseInput interface {
	pulumi.Input

	ToCertificateFingerprintResponseOutput() CertificateFingerprintResponseOutput
	ToCertificateFingerprintResponseOutputWithContext(context.Context) CertificateFingerprintResponseOutput
}

// A group of fingerprints for the x509 certificate.
type CertificateFingerprintResponseArgs struct {
	// The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate.
	Sha256Hash pulumi.StringInput `pulumi:"sha256Hash"`
}

func (CertificateFingerprintResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateFingerprintResponse)(nil)).Elem()
}

func (i CertificateFingerprintResponseArgs) ToCertificateFingerprintResponseOutput() CertificateFingerprintResponseOutput {
	return i.ToCertificateFingerprintResponseOutputWithContext(context.Background())
}

func (i CertificateFingerprintResponseArgs) ToCertificateFingerprintResponseOutputWithContext(ctx context.Context) CertificateFingerprintResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateFingerprintResponseOutput)
}

func (i CertificateFingerprintResponseArgs) ToCertificateFingerprintResponsePtrOutput() CertificateFingerprintResponsePtrOutput {
	return i.ToCertificateFingerprintResponsePtrOutputWithContext(context.Background())
}

func (i CertificateFingerprintResponseArgs) ToCertificateFingerprintResponsePtrOutputWithContext(ctx context.Context) CertificateFingerprintResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateFingerprintResponseOutput).ToCertificateFingerprintResponsePtrOutputWithContext(ctx)
}

// CertificateFingerprintResponsePtrInput is an input type that accepts CertificateFingerprintResponseArgs, CertificateFingerprintResponsePtr and CertificateFingerprintResponsePtrOutput values.
// You can construct a concrete instance of `CertificateFingerprintResponsePtrInput` via:
//
//          CertificateFingerprintResponseArgs{...}
//
//  or:
//
//          nil
type CertificateFingerprintResponsePtrInput interface {
	pulumi.Input

	ToCertificateFingerprintResponsePtrOutput() CertificateFingerprintResponsePtrOutput
	ToCertificateFingerprintResponsePtrOutputWithContext(context.Context) CertificateFingerprintResponsePtrOutput
}

type certificateFingerprintResponsePtrType CertificateFingerprintResponseArgs

func CertificateFingerprintResponsePtr(v *CertificateFingerprintResponseArgs) CertificateFingerprintResponsePtrInput {
	return (*certificateFingerprintResponsePtrType)(v)
}

func (*certificateFingerprintResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateFingerprintResponse)(nil)).Elem()
}

func (i *certificateFingerprintResponsePtrType) ToCertificateFingerprintResponsePtrOutput() CertificateFingerprintResponsePtrOutput {
	return i.ToCertificateFingerprintResponsePtrOutputWithContext(context.Background())
}

func (i *certificateFingerprintResponsePtrType) ToCertificateFingerprintResponsePtrOutputWithContext(ctx context.Context) CertificateFingerprintResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateFingerprintResponsePtrOutput)
}

// A group of fingerprints for the x509 certificate.
type CertificateFingerprintResponseOutput struct{ *pulumi.OutputState }

func (CertificateFingerprintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateFingerprintResponse)(nil)).Elem()
}

func (o CertificateFingerprintResponseOutput) ToCertificateFingerprintResponseOutput() CertificateFingerprintResponseOutput {
	return o
}

func (o CertificateFingerprintResponseOutput) ToCertificateFingerprintResponseOutputWithContext(ctx context.Context) CertificateFingerprintResponseOutput {
	return o
}

func (o CertificateFingerprintResponseOutput) ToCertificateFingerprintResponsePtrOutput() CertificateFingerprintResponsePtrOutput {
	return o.ToCertificateFingerprintResponsePtrOutputWithContext(context.Background())
}

func (o CertificateFingerprintResponseOutput) ToCertificateFingerprintResponsePtrOutputWithContext(ctx context.Context) CertificateFingerprintResponsePtrOutput {
	return o.ApplyT(func(v CertificateFingerprintResponse) *CertificateFingerprintResponse {
		return &v
	}).(CertificateFingerprintResponsePtrOutput)
}

// The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate.
func (o CertificateFingerprintResponseOutput) Sha256Hash() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateFingerprintResponse) string { return v.Sha256Hash }).(pulumi.StringOutput)
}

type CertificateFingerprintResponsePtrOutput struct{ *pulumi.OutputState }

func (CertificateFingerprintResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateFingerprintResponse)(nil)).Elem()
}

func (o CertificateFingerprintResponsePtrOutput) ToCertificateFingerprintResponsePtrOutput() CertificateFingerprintResponsePtrOutput {
	return o
}

func (o CertificateFingerprintResponsePtrOutput) ToCertificateFingerprintResponsePtrOutputWithContext(ctx context.Context) CertificateFingerprintResponsePtrOutput {
	return o
}

func (o CertificateFingerprintResponsePtrOutput) Elem() CertificateFingerprintResponseOutput {
	return o.ApplyT(func(v *CertificateFingerprintResponse) CertificateFingerprintResponse { return *v }).(CertificateFingerprintResponseOutput)
}

// The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate.
func (o CertificateFingerprintResponsePtrOutput) Sha256Hash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateFingerprintResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Sha256Hash
	}).(pulumi.StringPtrOutput)
}

// Describes constraints on a Certificate's Subject and SubjectAltNames.
type CertificateIdentityConstraints struct {
	// If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
	AllowSubjectAltNamesPassthrough bool `pulumi:"allowSubjectAltNamesPassthrough"`
	// If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
	AllowSubjectPassthrough bool `pulumi:"allowSubjectPassthrough"`
	// Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
	CelExpression *Expr `pulumi:"celExpression"`
}

// CertificateIdentityConstraintsInput is an input type that accepts CertificateIdentityConstraintsArgs and CertificateIdentityConstraintsOutput values.
// You can construct a concrete instance of `CertificateIdentityConstraintsInput` via:
//
//          CertificateIdentityConstraintsArgs{...}
type CertificateIdentityConstraintsInput interface {
	pulumi.Input

	ToCertificateIdentityConstraintsOutput() CertificateIdentityConstraintsOutput
	ToCertificateIdentityConstraintsOutputWithContext(context.Context) CertificateIdentityConstraintsOutput
}

// Describes constraints on a Certificate's Subject and SubjectAltNames.
type CertificateIdentityConstraintsArgs struct {
	// If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
	AllowSubjectAltNamesPassthrough pulumi.BoolInput `pulumi:"allowSubjectAltNamesPassthrough"`
	// If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
	AllowSubjectPassthrough pulumi.BoolInput `pulumi:"allowSubjectPassthrough"`
	// Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
	CelExpression ExprPtrInput `pulumi:"celExpression"`
}

func (CertificateIdentityConstraintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateIdentityConstraints)(nil)).Elem()
}

func (i CertificateIdentityConstraintsArgs) ToCertificateIdentityConstraintsOutput() CertificateIdentityConstraintsOutput {
	return i.ToCertificateIdentityConstraintsOutputWithContext(context.Background())
}

func (i CertificateIdentityConstraintsArgs) ToCertificateIdentityConstraintsOutputWithContext(ctx context.Context) CertificateIdentityConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIdentityConstraintsOutput)
}

func (i CertificateIdentityConstraintsArgs) ToCertificateIdentityConstraintsPtrOutput() CertificateIdentityConstraintsPtrOutput {
	return i.ToCertificateIdentityConstraintsPtrOutputWithContext(context.Background())
}

func (i CertificateIdentityConstraintsArgs) ToCertificateIdentityConstraintsPtrOutputWithContext(ctx context.Context) CertificateIdentityConstraintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIdentityConstraintsOutput).ToCertificateIdentityConstraintsPtrOutputWithContext(ctx)
}

// CertificateIdentityConstraintsPtrInput is an input type that accepts CertificateIdentityConstraintsArgs, CertificateIdentityConstraintsPtr and CertificateIdentityConstraintsPtrOutput values.
// You can construct a concrete instance of `CertificateIdentityConstraintsPtrInput` via:
//
//          CertificateIdentityConstraintsArgs{...}
//
//  or:
//
//          nil
type CertificateIdentityConstraintsPtrInput interface {
	pulumi.Input

	ToCertificateIdentityConstraintsPtrOutput() CertificateIdentityConstraintsPtrOutput
	ToCertificateIdentityConstraintsPtrOutputWithContext(context.Context) CertificateIdentityConstraintsPtrOutput
}

type certificateIdentityConstraintsPtrType CertificateIdentityConstraintsArgs

func CertificateIdentityConstraintsPtr(v *CertificateIdentityConstraintsArgs) CertificateIdentityConstraintsPtrInput {
	return (*certificateIdentityConstraintsPtrType)(v)
}

func (*certificateIdentityConstraintsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateIdentityConstraints)(nil)).Elem()
}

func (i *certificateIdentityConstraintsPtrType) ToCertificateIdentityConstraintsPtrOutput() CertificateIdentityConstraintsPtrOutput {
	return i.ToCertificateIdentityConstraintsPtrOutputWithContext(context.Background())
}

func (i *certificateIdentityConstraintsPtrType) ToCertificateIdentityConstraintsPtrOutputWithContext(ctx context.Context) CertificateIdentityConstraintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIdentityConstraintsPtrOutput)
}

// Describes constraints on a Certificate's Subject and SubjectAltNames.
type CertificateIdentityConstraintsOutput struct{ *pulumi.OutputState }

func (CertificateIdentityConstraintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateIdentityConstraints)(nil)).Elem()
}

func (o CertificateIdentityConstraintsOutput) ToCertificateIdentityConstraintsOutput() CertificateIdentityConstraintsOutput {
	return o
}

func (o CertificateIdentityConstraintsOutput) ToCertificateIdentityConstraintsOutputWithContext(ctx context.Context) CertificateIdentityConstraintsOutput {
	return o
}

func (o CertificateIdentityConstraintsOutput) ToCertificateIdentityConstraintsPtrOutput() CertificateIdentityConstraintsPtrOutput {
	return o.ToCertificateIdentityConstraintsPtrOutputWithContext(context.Background())
}

func (o CertificateIdentityConstraintsOutput) ToCertificateIdentityConstraintsPtrOutputWithContext(ctx context.Context) CertificateIdentityConstraintsPtrOutput {
	return o.ApplyT(func(v CertificateIdentityConstraints) *CertificateIdentityConstraints {
		return &v
	}).(CertificateIdentityConstraintsPtrOutput)
}

// If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
func (o CertificateIdentityConstraintsOutput) AllowSubjectAltNamesPassthrough() pulumi.BoolOutput {
	return o.ApplyT(func(v CertificateIdentityConstraints) bool { return v.AllowSubjectAltNamesPassthrough }).(pulumi.BoolOutput)
}

// If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
func (o CertificateIdentityConstraintsOutput) AllowSubjectPassthrough() pulumi.BoolOutput {
	return o.ApplyT(func(v CertificateIdentityConstraints) bool { return v.AllowSubjectPassthrough }).(pulumi.BoolOutput)
}

// Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
func (o CertificateIdentityConstraintsOutput) CelExpression() ExprPtrOutput {
	return o.ApplyT(func(v CertificateIdentityConstraints) *Expr { return v.CelExpression }).(ExprPtrOutput)
}

type CertificateIdentityConstraintsPtrOutput struct{ *pulumi.OutputState }

func (CertificateIdentityConstraintsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateIdentityConstraints)(nil)).Elem()
}

func (o CertificateIdentityConstraintsPtrOutput) ToCertificateIdentityConstraintsPtrOutput() CertificateIdentityConstraintsPtrOutput {
	return o
}

func (o CertificateIdentityConstraintsPtrOutput) ToCertificateIdentityConstraintsPtrOutputWithContext(ctx context.Context) CertificateIdentityConstraintsPtrOutput {
	return o
}

func (o CertificateIdentityConstraintsPtrOutput) Elem() CertificateIdentityConstraintsOutput {
	return o.ApplyT(func(v *CertificateIdentityConstraints) CertificateIdentityConstraints { return *v }).(CertificateIdentityConstraintsOutput)
}

// If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
func (o CertificateIdentityConstraintsPtrOutput) AllowSubjectAltNamesPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertificateIdentityConstraints) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowSubjectAltNamesPassthrough
	}).(pulumi.BoolPtrOutput)
}

// If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
func (o CertificateIdentityConstraintsPtrOutput) AllowSubjectPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertificateIdentityConstraints) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowSubjectPassthrough
	}).(pulumi.BoolPtrOutput)
}

// Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
func (o CertificateIdentityConstraintsPtrOutput) CelExpression() ExprPtrOutput {
	return o.ApplyT(func(v *CertificateIdentityConstraints) *Expr {
		if v == nil {
			return nil
		}
		return v.CelExpression
	}).(ExprPtrOutput)
}

// Describes constraints on a Certificate's Subject and SubjectAltNames.
type CertificateIdentityConstraintsResponse struct {
	// If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
	AllowSubjectAltNamesPassthrough bool `pulumi:"allowSubjectAltNamesPassthrough"`
	// If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
	AllowSubjectPassthrough bool `pulumi:"allowSubjectPassthrough"`
	// Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
	CelExpression ExprResponse `pulumi:"celExpression"`
}

// CertificateIdentityConstraintsResponseInput is an input type that accepts CertificateIdentityConstraintsResponseArgs and CertificateIdentityConstraintsResponseOutput values.
// You can construct a concrete instance of `CertificateIdentityConstraintsResponseInput` via:
//
//          CertificateIdentityConstraintsResponseArgs{...}
type CertificateIdentityConstraintsResponseInput interface {
	pulumi.Input

	ToCertificateIdentityConstraintsResponseOutput() CertificateIdentityConstraintsResponseOutput
	ToCertificateIdentityConstraintsResponseOutputWithContext(context.Context) CertificateIdentityConstraintsResponseOutput
}

// Describes constraints on a Certificate's Subject and SubjectAltNames.
type CertificateIdentityConstraintsResponseArgs struct {
	// If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
	AllowSubjectAltNamesPassthrough pulumi.BoolInput `pulumi:"allowSubjectAltNamesPassthrough"`
	// If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
	AllowSubjectPassthrough pulumi.BoolInput `pulumi:"allowSubjectPassthrough"`
	// Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
	CelExpression ExprResponseInput `pulumi:"celExpression"`
}

func (CertificateIdentityConstraintsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateIdentityConstraintsResponse)(nil)).Elem()
}

func (i CertificateIdentityConstraintsResponseArgs) ToCertificateIdentityConstraintsResponseOutput() CertificateIdentityConstraintsResponseOutput {
	return i.ToCertificateIdentityConstraintsResponseOutputWithContext(context.Background())
}

func (i CertificateIdentityConstraintsResponseArgs) ToCertificateIdentityConstraintsResponseOutputWithContext(ctx context.Context) CertificateIdentityConstraintsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIdentityConstraintsResponseOutput)
}

func (i CertificateIdentityConstraintsResponseArgs) ToCertificateIdentityConstraintsResponsePtrOutput() CertificateIdentityConstraintsResponsePtrOutput {
	return i.ToCertificateIdentityConstraintsResponsePtrOutputWithContext(context.Background())
}

func (i CertificateIdentityConstraintsResponseArgs) ToCertificateIdentityConstraintsResponsePtrOutputWithContext(ctx context.Context) CertificateIdentityConstraintsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIdentityConstraintsResponseOutput).ToCertificateIdentityConstraintsResponsePtrOutputWithContext(ctx)
}

// CertificateIdentityConstraintsResponsePtrInput is an input type that accepts CertificateIdentityConstraintsResponseArgs, CertificateIdentityConstraintsResponsePtr and CertificateIdentityConstraintsResponsePtrOutput values.
// You can construct a concrete instance of `CertificateIdentityConstraintsResponsePtrInput` via:
//
//          CertificateIdentityConstraintsResponseArgs{...}
//
//  or:
//
//          nil
type CertificateIdentityConstraintsResponsePtrInput interface {
	pulumi.Input

	ToCertificateIdentityConstraintsResponsePtrOutput() CertificateIdentityConstraintsResponsePtrOutput
	ToCertificateIdentityConstraintsResponsePtrOutputWithContext(context.Context) CertificateIdentityConstraintsResponsePtrOutput
}

type certificateIdentityConstraintsResponsePtrType CertificateIdentityConstraintsResponseArgs

func CertificateIdentityConstraintsResponsePtr(v *CertificateIdentityConstraintsResponseArgs) CertificateIdentityConstraintsResponsePtrInput {
	return (*certificateIdentityConstraintsResponsePtrType)(v)
}

func (*certificateIdentityConstraintsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateIdentityConstraintsResponse)(nil)).Elem()
}

func (i *certificateIdentityConstraintsResponsePtrType) ToCertificateIdentityConstraintsResponsePtrOutput() CertificateIdentityConstraintsResponsePtrOutput {
	return i.ToCertificateIdentityConstraintsResponsePtrOutputWithContext(context.Background())
}

func (i *certificateIdentityConstraintsResponsePtrType) ToCertificateIdentityConstraintsResponsePtrOutputWithContext(ctx context.Context) CertificateIdentityConstraintsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIdentityConstraintsResponsePtrOutput)
}

// Describes constraints on a Certificate's Subject and SubjectAltNames.
type CertificateIdentityConstraintsResponseOutput struct{ *pulumi.OutputState }

func (CertificateIdentityConstraintsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateIdentityConstraintsResponse)(nil)).Elem()
}

func (o CertificateIdentityConstraintsResponseOutput) ToCertificateIdentityConstraintsResponseOutput() CertificateIdentityConstraintsResponseOutput {
	return o
}

func (o CertificateIdentityConstraintsResponseOutput) ToCertificateIdentityConstraintsResponseOutputWithContext(ctx context.Context) CertificateIdentityConstraintsResponseOutput {
	return o
}

func (o CertificateIdentityConstraintsResponseOutput) ToCertificateIdentityConstraintsResponsePtrOutput() CertificateIdentityConstraintsResponsePtrOutput {
	return o.ToCertificateIdentityConstraintsResponsePtrOutputWithContext(context.Background())
}

func (o CertificateIdentityConstraintsResponseOutput) ToCertificateIdentityConstraintsResponsePtrOutputWithContext(ctx context.Context) CertificateIdentityConstraintsResponsePtrOutput {
	return o.ApplyT(func(v CertificateIdentityConstraintsResponse) *CertificateIdentityConstraintsResponse {
		return &v
	}).(CertificateIdentityConstraintsResponsePtrOutput)
}

// If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
func (o CertificateIdentityConstraintsResponseOutput) AllowSubjectAltNamesPassthrough() pulumi.BoolOutput {
	return o.ApplyT(func(v CertificateIdentityConstraintsResponse) bool { return v.AllowSubjectAltNamesPassthrough }).(pulumi.BoolOutput)
}

// If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
func (o CertificateIdentityConstraintsResponseOutput) AllowSubjectPassthrough() pulumi.BoolOutput {
	return o.ApplyT(func(v CertificateIdentityConstraintsResponse) bool { return v.AllowSubjectPassthrough }).(pulumi.BoolOutput)
}

// Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
func (o CertificateIdentityConstraintsResponseOutput) CelExpression() ExprResponseOutput {
	return o.ApplyT(func(v CertificateIdentityConstraintsResponse) ExprResponse { return v.CelExpression }).(ExprResponseOutput)
}

type CertificateIdentityConstraintsResponsePtrOutput struct{ *pulumi.OutputState }

func (CertificateIdentityConstraintsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateIdentityConstraintsResponse)(nil)).Elem()
}

func (o CertificateIdentityConstraintsResponsePtrOutput) ToCertificateIdentityConstraintsResponsePtrOutput() CertificateIdentityConstraintsResponsePtrOutput {
	return o
}

func (o CertificateIdentityConstraintsResponsePtrOutput) ToCertificateIdentityConstraintsResponsePtrOutputWithContext(ctx context.Context) CertificateIdentityConstraintsResponsePtrOutput {
	return o
}

func (o CertificateIdentityConstraintsResponsePtrOutput) Elem() CertificateIdentityConstraintsResponseOutput {
	return o.ApplyT(func(v *CertificateIdentityConstraintsResponse) CertificateIdentityConstraintsResponse { return *v }).(CertificateIdentityConstraintsResponseOutput)
}

// If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
func (o CertificateIdentityConstraintsResponsePtrOutput) AllowSubjectAltNamesPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertificateIdentityConstraintsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowSubjectAltNamesPassthrough
	}).(pulumi.BoolPtrOutput)
}

// If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
func (o CertificateIdentityConstraintsResponsePtrOutput) AllowSubjectPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertificateIdentityConstraintsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowSubjectPassthrough
	}).(pulumi.BoolPtrOutput)
}

// Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
func (o CertificateIdentityConstraintsResponsePtrOutput) CelExpression() ExprResponsePtrOutput {
	return o.ApplyT(func(v *CertificateIdentityConstraintsResponse) *ExprResponse {
		if v == nil {
			return nil
		}
		return &v.CelExpression
	}).(ExprResponsePtrOutput)
}

// Describes an Elliptic Curve key that may be used in a Certificate issued from a CaPool.
type EcKeyType struct {
	// Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed.
	SignatureAlgorithm *EcKeyTypeSignatureAlgorithm `pulumi:"signatureAlgorithm"`
}

// EcKeyTypeInput is an input type that accepts EcKeyTypeArgs and EcKeyTypeOutput values.
// You can construct a concrete instance of `EcKeyTypeInput` via:
//
//          EcKeyTypeArgs{...}
type EcKeyTypeInput interface {
	pulumi.Input

	ToEcKeyTypeOutput() EcKeyTypeOutput
	ToEcKeyTypeOutputWithContext(context.Context) EcKeyTypeOutput
}

// Describes an Elliptic Curve key that may be used in a Certificate issued from a CaPool.
type EcKeyTypeArgs struct {
	// Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed.
	SignatureAlgorithm EcKeyTypeSignatureAlgorithmPtrInput `pulumi:"signatureAlgorithm"`
}

func (EcKeyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EcKeyType)(nil)).Elem()
}

func (i EcKeyTypeArgs) ToEcKeyTypeOutput() EcKeyTypeOutput {
	return i.ToEcKeyTypeOutputWithContext(context.Background())
}

func (i EcKeyTypeArgs) ToEcKeyTypeOutputWithContext(ctx context.Context) EcKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcKeyTypeOutput)
}

func (i EcKeyTypeArgs) ToEcKeyTypePtrOutput() EcKeyTypePtrOutput {
	return i.ToEcKeyTypePtrOutputWithContext(context.Background())
}

func (i EcKeyTypeArgs) ToEcKeyTypePtrOutputWithContext(ctx context.Context) EcKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcKeyTypeOutput).ToEcKeyTypePtrOutputWithContext(ctx)
}

// EcKeyTypePtrInput is an input type that accepts EcKeyTypeArgs, EcKeyTypePtr and EcKeyTypePtrOutput values.
// You can construct a concrete instance of `EcKeyTypePtrInput` via:
//
//          EcKeyTypeArgs{...}
//
//  or:
//
//          nil
type EcKeyTypePtrInput interface {
	pulumi.Input

	ToEcKeyTypePtrOutput() EcKeyTypePtrOutput
	ToEcKeyTypePtrOutputWithContext(context.Context) EcKeyTypePtrOutput
}

type ecKeyTypePtrType EcKeyTypeArgs

func EcKeyTypePtr(v *EcKeyTypeArgs) EcKeyTypePtrInput {
	return (*ecKeyTypePtrType)(v)
}

func (*ecKeyTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EcKeyType)(nil)).Elem()
}

func (i *ecKeyTypePtrType) ToEcKeyTypePtrOutput() EcKeyTypePtrOutput {
	return i.ToEcKeyTypePtrOutputWithContext(context.Background())
}

func (i *ecKeyTypePtrType) ToEcKeyTypePtrOutputWithContext(ctx context.Context) EcKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcKeyTypePtrOutput)
}

// Describes an Elliptic Curve key that may be used in a Certificate issued from a CaPool.
type EcKeyTypeOutput struct{ *pulumi.OutputState }

func (EcKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EcKeyType)(nil)).Elem()
}

func (o EcKeyTypeOutput) ToEcKeyTypeOutput() EcKeyTypeOutput {
	return o
}

func (o EcKeyTypeOutput) ToEcKeyTypeOutputWithContext(ctx context.Context) EcKeyTypeOutput {
	return o
}

func (o EcKeyTypeOutput) ToEcKeyTypePtrOutput() EcKeyTypePtrOutput {
	return o.ToEcKeyTypePtrOutputWithContext(context.Background())
}

func (o EcKeyTypeOutput) ToEcKeyTypePtrOutputWithContext(ctx context.Context) EcKeyTypePtrOutput {
	return o.ApplyT(func(v EcKeyType) *EcKeyType {
		return &v
	}).(EcKeyTypePtrOutput)
}

// Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed.
func (o EcKeyTypeOutput) SignatureAlgorithm() EcKeyTypeSignatureAlgorithmPtrOutput {
	return o.ApplyT(func(v EcKeyType) *EcKeyTypeSignatureAlgorithm { return v.SignatureAlgorithm }).(EcKeyTypeSignatureAlgorithmPtrOutput)
}

type EcKeyTypePtrOutput struct{ *pulumi.OutputState }

func (EcKeyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EcKeyType)(nil)).Elem()
}

func (o EcKeyTypePtrOutput) ToEcKeyTypePtrOutput() EcKeyTypePtrOutput {
	return o
}

func (o EcKeyTypePtrOutput) ToEcKeyTypePtrOutputWithContext(ctx context.Context) EcKeyTypePtrOutput {
	return o
}

func (o EcKeyTypePtrOutput) Elem() EcKeyTypeOutput {
	return o.ApplyT(func(v *EcKeyType) EcKeyType { return *v }).(EcKeyTypeOutput)
}

// Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed.
func (o EcKeyTypePtrOutput) SignatureAlgorithm() EcKeyTypeSignatureAlgorithmPtrOutput {
	return o.ApplyT(func(v *EcKeyType) *EcKeyTypeSignatureAlgorithm {
		if v == nil {
			return nil
		}
		return v.SignatureAlgorithm
	}).(EcKeyTypeSignatureAlgorithmPtrOutput)
}

// Describes an Elliptic Curve key that may be used in a Certificate issued from a CaPool.
type EcKeyTypeResponse struct {
	// Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed.
	SignatureAlgorithm string `pulumi:"signatureAlgorithm"`
}

// EcKeyTypeResponseInput is an input type that accepts EcKeyTypeResponseArgs and EcKeyTypeResponseOutput values.
// You can construct a concrete instance of `EcKeyTypeResponseInput` via:
//
//          EcKeyTypeResponseArgs{...}
type EcKeyTypeResponseInput interface {
	pulumi.Input

	ToEcKeyTypeResponseOutput() EcKeyTypeResponseOutput
	ToEcKeyTypeResponseOutputWithContext(context.Context) EcKeyTypeResponseOutput
}

// Describes an Elliptic Curve key that may be used in a Certificate issued from a CaPool.
type EcKeyTypeResponseArgs struct {
	// Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed.
	SignatureAlgorithm pulumi.StringInput `pulumi:"signatureAlgorithm"`
}

func (EcKeyTypeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EcKeyTypeResponse)(nil)).Elem()
}

func (i EcKeyTypeResponseArgs) ToEcKeyTypeResponseOutput() EcKeyTypeResponseOutput {
	return i.ToEcKeyTypeResponseOutputWithContext(context.Background())
}

func (i EcKeyTypeResponseArgs) ToEcKeyTypeResponseOutputWithContext(ctx context.Context) EcKeyTypeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EcKeyTypeResponseOutput)
}

// Describes an Elliptic Curve key that may be used in a Certificate issued from a CaPool.
type EcKeyTypeResponseOutput struct{ *pulumi.OutputState }

func (EcKeyTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EcKeyTypeResponse)(nil)).Elem()
}

func (o EcKeyTypeResponseOutput) ToEcKeyTypeResponseOutput() EcKeyTypeResponseOutput {
	return o
}

func (o EcKeyTypeResponseOutput) ToEcKeyTypeResponseOutputWithContext(ctx context.Context) EcKeyTypeResponseOutput {
	return o
}

// Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed.
func (o EcKeyTypeResponseOutput) SignatureAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v EcKeyTypeResponse) string { return v.SignatureAlgorithm }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// ExprResponseInput is an input type that accepts ExprResponseArgs and ExprResponseOutput values.
// You can construct a concrete instance of `ExprResponseInput` via:
//
//          ExprResponseArgs{...}
type ExprResponseInput interface {
	pulumi.Input

	ToExprResponseOutput() ExprResponseOutput
	ToExprResponseOutputWithContext(context.Context) ExprResponseOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringInput `pulumi:"title"`
}

func (ExprResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (i ExprResponseArgs) ToExprResponseOutput() ExprResponseOutput {
	return i.ToExprResponseOutputWithContext(context.Background())
}

func (i ExprResponseArgs) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprResponseOutput)
}

func (i ExprResponseArgs) ToExprResponsePtrOutput() ExprResponsePtrOutput {
	return i.ToExprResponsePtrOutputWithContext(context.Background())
}

func (i ExprResponseArgs) ToExprResponsePtrOutputWithContext(ctx context.Context) ExprResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprResponseOutput).ToExprResponsePtrOutputWithContext(ctx)
}

// ExprResponsePtrInput is an input type that accepts ExprResponseArgs, ExprResponsePtr and ExprResponsePtrOutput values.
// You can construct a concrete instance of `ExprResponsePtrInput` via:
//
//          ExprResponseArgs{...}
//
//  or:
//
//          nil
type ExprResponsePtrInput interface {
	pulumi.Input

	ToExprResponsePtrOutput() ExprResponsePtrOutput
	ToExprResponsePtrOutputWithContext(context.Context) ExprResponsePtrOutput
}

type exprResponsePtrType ExprResponseArgs

func ExprResponsePtr(v *ExprResponseArgs) ExprResponsePtrInput {
	return (*exprResponsePtrType)(v)
}

func (*exprResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExprResponse)(nil)).Elem()
}

func (i *exprResponsePtrType) ToExprResponsePtrOutput() ExprResponsePtrOutput {
	return i.ToExprResponsePtrOutputWithContext(context.Background())
}

func (i *exprResponsePtrType) ToExprResponsePtrOutputWithContext(ctx context.Context) ExprResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprResponsePtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponsePtrOutput() ExprResponsePtrOutput {
	return o.ToExprResponsePtrOutputWithContext(context.Background())
}

func (o ExprResponseOutput) ToExprResponsePtrOutputWithContext(ctx context.Context) ExprResponsePtrOutput {
	return o.ApplyT(func(v ExprResponse) *ExprResponse {
		return &v
	}).(ExprResponsePtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

type ExprResponsePtrOutput struct{ *pulumi.OutputState }

func (ExprResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExprResponse)(nil)).Elem()
}

func (o ExprResponsePtrOutput) ToExprResponsePtrOutput() ExprResponsePtrOutput {
	return o
}

func (o ExprResponsePtrOutput) ToExprResponsePtrOutputWithContext(ctx context.Context) ExprResponsePtrOutput {
	return o
}

func (o ExprResponsePtrOutput) Elem() ExprResponseOutput {
	return o.ApplyT(func(v *ExprResponse) ExprResponse { return *v }).(ExprResponseOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExprResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponsePtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExprResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponsePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExprResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponsePtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExprResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

// KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.
type ExtendedKeyUsageOptions struct {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	ClientAuth *bool `pulumi:"clientAuth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	CodeSigning *bool `pulumi:"codeSigning"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	EmailProtection *bool `pulumi:"emailProtection"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	OcspSigning *bool `pulumi:"ocspSigning"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	ServerAuth *bool `pulumi:"serverAuth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	TimeStamping *bool `pulumi:"timeStamping"`
}

// ExtendedKeyUsageOptionsInput is an input type that accepts ExtendedKeyUsageOptionsArgs and ExtendedKeyUsageOptionsOutput values.
// You can construct a concrete instance of `ExtendedKeyUsageOptionsInput` via:
//
//          ExtendedKeyUsageOptionsArgs{...}
type ExtendedKeyUsageOptionsInput interface {
	pulumi.Input

	ToExtendedKeyUsageOptionsOutput() ExtendedKeyUsageOptionsOutput
	ToExtendedKeyUsageOptionsOutputWithContext(context.Context) ExtendedKeyUsageOptionsOutput
}

// KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.
type ExtendedKeyUsageOptionsArgs struct {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	ClientAuth pulumi.BoolPtrInput `pulumi:"clientAuth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	CodeSigning pulumi.BoolPtrInput `pulumi:"codeSigning"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	EmailProtection pulumi.BoolPtrInput `pulumi:"emailProtection"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	OcspSigning pulumi.BoolPtrInput `pulumi:"ocspSigning"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	ServerAuth pulumi.BoolPtrInput `pulumi:"serverAuth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	TimeStamping pulumi.BoolPtrInput `pulumi:"timeStamping"`
}

func (ExtendedKeyUsageOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedKeyUsageOptions)(nil)).Elem()
}

func (i ExtendedKeyUsageOptionsArgs) ToExtendedKeyUsageOptionsOutput() ExtendedKeyUsageOptionsOutput {
	return i.ToExtendedKeyUsageOptionsOutputWithContext(context.Background())
}

func (i ExtendedKeyUsageOptionsArgs) ToExtendedKeyUsageOptionsOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedKeyUsageOptionsOutput)
}

func (i ExtendedKeyUsageOptionsArgs) ToExtendedKeyUsageOptionsPtrOutput() ExtendedKeyUsageOptionsPtrOutput {
	return i.ToExtendedKeyUsageOptionsPtrOutputWithContext(context.Background())
}

func (i ExtendedKeyUsageOptionsArgs) ToExtendedKeyUsageOptionsPtrOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedKeyUsageOptionsOutput).ToExtendedKeyUsageOptionsPtrOutputWithContext(ctx)
}

// ExtendedKeyUsageOptionsPtrInput is an input type that accepts ExtendedKeyUsageOptionsArgs, ExtendedKeyUsageOptionsPtr and ExtendedKeyUsageOptionsPtrOutput values.
// You can construct a concrete instance of `ExtendedKeyUsageOptionsPtrInput` via:
//
//          ExtendedKeyUsageOptionsArgs{...}
//
//  or:
//
//          nil
type ExtendedKeyUsageOptionsPtrInput interface {
	pulumi.Input

	ToExtendedKeyUsageOptionsPtrOutput() ExtendedKeyUsageOptionsPtrOutput
	ToExtendedKeyUsageOptionsPtrOutputWithContext(context.Context) ExtendedKeyUsageOptionsPtrOutput
}

type extendedKeyUsageOptionsPtrType ExtendedKeyUsageOptionsArgs

func ExtendedKeyUsageOptionsPtr(v *ExtendedKeyUsageOptionsArgs) ExtendedKeyUsageOptionsPtrInput {
	return (*extendedKeyUsageOptionsPtrType)(v)
}

func (*extendedKeyUsageOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedKeyUsageOptions)(nil)).Elem()
}

func (i *extendedKeyUsageOptionsPtrType) ToExtendedKeyUsageOptionsPtrOutput() ExtendedKeyUsageOptionsPtrOutput {
	return i.ToExtendedKeyUsageOptionsPtrOutputWithContext(context.Background())
}

func (i *extendedKeyUsageOptionsPtrType) ToExtendedKeyUsageOptionsPtrOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedKeyUsageOptionsPtrOutput)
}

// KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.
type ExtendedKeyUsageOptionsOutput struct{ *pulumi.OutputState }

func (ExtendedKeyUsageOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedKeyUsageOptions)(nil)).Elem()
}

func (o ExtendedKeyUsageOptionsOutput) ToExtendedKeyUsageOptionsOutput() ExtendedKeyUsageOptionsOutput {
	return o
}

func (o ExtendedKeyUsageOptionsOutput) ToExtendedKeyUsageOptionsOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsOutput {
	return o
}

func (o ExtendedKeyUsageOptionsOutput) ToExtendedKeyUsageOptionsPtrOutput() ExtendedKeyUsageOptionsPtrOutput {
	return o.ToExtendedKeyUsageOptionsPtrOutputWithContext(context.Background())
}

func (o ExtendedKeyUsageOptionsOutput) ToExtendedKeyUsageOptionsPtrOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsPtrOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptions) *ExtendedKeyUsageOptions {
		return &v
	}).(ExtendedKeyUsageOptionsPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
func (o ExtendedKeyUsageOptionsOutput) ClientAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptions) *bool { return v.ClientAuth }).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
func (o ExtendedKeyUsageOptionsOutput) CodeSigning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptions) *bool { return v.CodeSigning }).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
func (o ExtendedKeyUsageOptionsOutput) EmailProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptions) *bool { return v.EmailProtection }).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
func (o ExtendedKeyUsageOptionsOutput) OcspSigning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptions) *bool { return v.OcspSigning }).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
func (o ExtendedKeyUsageOptionsOutput) ServerAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptions) *bool { return v.ServerAuth }).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
func (o ExtendedKeyUsageOptionsOutput) TimeStamping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptions) *bool { return v.TimeStamping }).(pulumi.BoolPtrOutput)
}

type ExtendedKeyUsageOptionsPtrOutput struct{ *pulumi.OutputState }

func (ExtendedKeyUsageOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedKeyUsageOptions)(nil)).Elem()
}

func (o ExtendedKeyUsageOptionsPtrOutput) ToExtendedKeyUsageOptionsPtrOutput() ExtendedKeyUsageOptionsPtrOutput {
	return o
}

func (o ExtendedKeyUsageOptionsPtrOutput) ToExtendedKeyUsageOptionsPtrOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsPtrOutput {
	return o
}

func (o ExtendedKeyUsageOptionsPtrOutput) Elem() ExtendedKeyUsageOptionsOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptions) ExtendedKeyUsageOptions { return *v }).(ExtendedKeyUsageOptionsOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
func (o ExtendedKeyUsageOptionsPtrOutput) ClientAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.ClientAuth
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
func (o ExtendedKeyUsageOptionsPtrOutput) CodeSigning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.CodeSigning
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
func (o ExtendedKeyUsageOptionsPtrOutput) EmailProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EmailProtection
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
func (o ExtendedKeyUsageOptionsPtrOutput) OcspSigning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.OcspSigning
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
func (o ExtendedKeyUsageOptionsPtrOutput) ServerAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.ServerAuth
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
func (o ExtendedKeyUsageOptionsPtrOutput) TimeStamping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.TimeStamping
	}).(pulumi.BoolPtrOutput)
}

// KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.
type ExtendedKeyUsageOptionsResponse struct {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	ClientAuth bool `pulumi:"clientAuth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	CodeSigning bool `pulumi:"codeSigning"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	EmailProtection bool `pulumi:"emailProtection"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	OcspSigning bool `pulumi:"ocspSigning"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	ServerAuth bool `pulumi:"serverAuth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	TimeStamping bool `pulumi:"timeStamping"`
}

// ExtendedKeyUsageOptionsResponseInput is an input type that accepts ExtendedKeyUsageOptionsResponseArgs and ExtendedKeyUsageOptionsResponseOutput values.
// You can construct a concrete instance of `ExtendedKeyUsageOptionsResponseInput` via:
//
//          ExtendedKeyUsageOptionsResponseArgs{...}
type ExtendedKeyUsageOptionsResponseInput interface {
	pulumi.Input

	ToExtendedKeyUsageOptionsResponseOutput() ExtendedKeyUsageOptionsResponseOutput
	ToExtendedKeyUsageOptionsResponseOutputWithContext(context.Context) ExtendedKeyUsageOptionsResponseOutput
}

// KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.
type ExtendedKeyUsageOptionsResponseArgs struct {
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	ClientAuth pulumi.BoolInput `pulumi:"clientAuth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	CodeSigning pulumi.BoolInput `pulumi:"codeSigning"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	EmailProtection pulumi.BoolInput `pulumi:"emailProtection"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	OcspSigning pulumi.BoolInput `pulumi:"ocspSigning"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	ServerAuth pulumi.BoolInput `pulumi:"serverAuth"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	TimeStamping pulumi.BoolInput `pulumi:"timeStamping"`
}

func (ExtendedKeyUsageOptionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedKeyUsageOptionsResponse)(nil)).Elem()
}

func (i ExtendedKeyUsageOptionsResponseArgs) ToExtendedKeyUsageOptionsResponseOutput() ExtendedKeyUsageOptionsResponseOutput {
	return i.ToExtendedKeyUsageOptionsResponseOutputWithContext(context.Background())
}

func (i ExtendedKeyUsageOptionsResponseArgs) ToExtendedKeyUsageOptionsResponseOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedKeyUsageOptionsResponseOutput)
}

func (i ExtendedKeyUsageOptionsResponseArgs) ToExtendedKeyUsageOptionsResponsePtrOutput() ExtendedKeyUsageOptionsResponsePtrOutput {
	return i.ToExtendedKeyUsageOptionsResponsePtrOutputWithContext(context.Background())
}

func (i ExtendedKeyUsageOptionsResponseArgs) ToExtendedKeyUsageOptionsResponsePtrOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedKeyUsageOptionsResponseOutput).ToExtendedKeyUsageOptionsResponsePtrOutputWithContext(ctx)
}

// ExtendedKeyUsageOptionsResponsePtrInput is an input type that accepts ExtendedKeyUsageOptionsResponseArgs, ExtendedKeyUsageOptionsResponsePtr and ExtendedKeyUsageOptionsResponsePtrOutput values.
// You can construct a concrete instance of `ExtendedKeyUsageOptionsResponsePtrInput` via:
//
//          ExtendedKeyUsageOptionsResponseArgs{...}
//
//  or:
//
//          nil
type ExtendedKeyUsageOptionsResponsePtrInput interface {
	pulumi.Input

	ToExtendedKeyUsageOptionsResponsePtrOutput() ExtendedKeyUsageOptionsResponsePtrOutput
	ToExtendedKeyUsageOptionsResponsePtrOutputWithContext(context.Context) ExtendedKeyUsageOptionsResponsePtrOutput
}

type extendedKeyUsageOptionsResponsePtrType ExtendedKeyUsageOptionsResponseArgs

func ExtendedKeyUsageOptionsResponsePtr(v *ExtendedKeyUsageOptionsResponseArgs) ExtendedKeyUsageOptionsResponsePtrInput {
	return (*extendedKeyUsageOptionsResponsePtrType)(v)
}

func (*extendedKeyUsageOptionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedKeyUsageOptionsResponse)(nil)).Elem()
}

func (i *extendedKeyUsageOptionsResponsePtrType) ToExtendedKeyUsageOptionsResponsePtrOutput() ExtendedKeyUsageOptionsResponsePtrOutput {
	return i.ToExtendedKeyUsageOptionsResponsePtrOutputWithContext(context.Background())
}

func (i *extendedKeyUsageOptionsResponsePtrType) ToExtendedKeyUsageOptionsResponsePtrOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedKeyUsageOptionsResponsePtrOutput)
}

// KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.
type ExtendedKeyUsageOptionsResponseOutput struct{ *pulumi.OutputState }

func (ExtendedKeyUsageOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedKeyUsageOptionsResponse)(nil)).Elem()
}

func (o ExtendedKeyUsageOptionsResponseOutput) ToExtendedKeyUsageOptionsResponseOutput() ExtendedKeyUsageOptionsResponseOutput {
	return o
}

func (o ExtendedKeyUsageOptionsResponseOutput) ToExtendedKeyUsageOptionsResponseOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsResponseOutput {
	return o
}

func (o ExtendedKeyUsageOptionsResponseOutput) ToExtendedKeyUsageOptionsResponsePtrOutput() ExtendedKeyUsageOptionsResponsePtrOutput {
	return o.ToExtendedKeyUsageOptionsResponsePtrOutputWithContext(context.Background())
}

func (o ExtendedKeyUsageOptionsResponseOutput) ToExtendedKeyUsageOptionsResponsePtrOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsResponsePtrOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptionsResponse) *ExtendedKeyUsageOptionsResponse {
		return &v
	}).(ExtendedKeyUsageOptionsResponsePtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
func (o ExtendedKeyUsageOptionsResponseOutput) ClientAuth() pulumi.BoolOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptionsResponse) bool { return v.ClientAuth }).(pulumi.BoolOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
func (o ExtendedKeyUsageOptionsResponseOutput) CodeSigning() pulumi.BoolOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptionsResponse) bool { return v.CodeSigning }).(pulumi.BoolOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
func (o ExtendedKeyUsageOptionsResponseOutput) EmailProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptionsResponse) bool { return v.EmailProtection }).(pulumi.BoolOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
func (o ExtendedKeyUsageOptionsResponseOutput) OcspSigning() pulumi.BoolOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptionsResponse) bool { return v.OcspSigning }).(pulumi.BoolOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
func (o ExtendedKeyUsageOptionsResponseOutput) ServerAuth() pulumi.BoolOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptionsResponse) bool { return v.ServerAuth }).(pulumi.BoolOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
func (o ExtendedKeyUsageOptionsResponseOutput) TimeStamping() pulumi.BoolOutput {
	return o.ApplyT(func(v ExtendedKeyUsageOptionsResponse) bool { return v.TimeStamping }).(pulumi.BoolOutput)
}

type ExtendedKeyUsageOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (ExtendedKeyUsageOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedKeyUsageOptionsResponse)(nil)).Elem()
}

func (o ExtendedKeyUsageOptionsResponsePtrOutput) ToExtendedKeyUsageOptionsResponsePtrOutput() ExtendedKeyUsageOptionsResponsePtrOutput {
	return o
}

func (o ExtendedKeyUsageOptionsResponsePtrOutput) ToExtendedKeyUsageOptionsResponsePtrOutputWithContext(ctx context.Context) ExtendedKeyUsageOptionsResponsePtrOutput {
	return o
}

func (o ExtendedKeyUsageOptionsResponsePtrOutput) Elem() ExtendedKeyUsageOptionsResponseOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptionsResponse) ExtendedKeyUsageOptionsResponse { return *v }).(ExtendedKeyUsageOptionsResponseOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
func (o ExtendedKeyUsageOptionsResponsePtrOutput) ClientAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ClientAuth
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
func (o ExtendedKeyUsageOptionsResponsePtrOutput) CodeSigning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CodeSigning
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
func (o ExtendedKeyUsageOptionsResponsePtrOutput) EmailProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EmailProtection
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
func (o ExtendedKeyUsageOptionsResponsePtrOutput) OcspSigning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.OcspSigning
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
func (o ExtendedKeyUsageOptionsResponsePtrOutput) ServerAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ServerAuth
	}).(pulumi.BoolPtrOutput)
}

// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
func (o ExtendedKeyUsageOptionsResponsePtrOutput) TimeStamping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtendedKeyUsageOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.TimeStamping
	}).(pulumi.BoolPtrOutput)
}

// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
type IssuanceModes struct {
	// Optional. When true, allows callers to create Certificates by specifying a CertificateConfig.
	AllowConfigBasedIssuance *bool `pulumi:"allowConfigBasedIssuance"`
	// Optional. When true, allows callers to create Certificates by specifying a CSR.
	AllowCsrBasedIssuance *bool `pulumi:"allowCsrBasedIssuance"`
}

// IssuanceModesInput is an input type that accepts IssuanceModesArgs and IssuanceModesOutput values.
// You can construct a concrete instance of `IssuanceModesInput` via:
//
//          IssuanceModesArgs{...}
type IssuanceModesInput interface {
	pulumi.Input

	ToIssuanceModesOutput() IssuanceModesOutput
	ToIssuanceModesOutputWithContext(context.Context) IssuanceModesOutput
}

// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
type IssuanceModesArgs struct {
	// Optional. When true, allows callers to create Certificates by specifying a CertificateConfig.
	AllowConfigBasedIssuance pulumi.BoolPtrInput `pulumi:"allowConfigBasedIssuance"`
	// Optional. When true, allows callers to create Certificates by specifying a CSR.
	AllowCsrBasedIssuance pulumi.BoolPtrInput `pulumi:"allowCsrBasedIssuance"`
}

func (IssuanceModesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IssuanceModes)(nil)).Elem()
}

func (i IssuanceModesArgs) ToIssuanceModesOutput() IssuanceModesOutput {
	return i.ToIssuanceModesOutputWithContext(context.Background())
}

func (i IssuanceModesArgs) ToIssuanceModesOutputWithContext(ctx context.Context) IssuanceModesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuanceModesOutput)
}

func (i IssuanceModesArgs) ToIssuanceModesPtrOutput() IssuanceModesPtrOutput {
	return i.ToIssuanceModesPtrOutputWithContext(context.Background())
}

func (i IssuanceModesArgs) ToIssuanceModesPtrOutputWithContext(ctx context.Context) IssuanceModesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuanceModesOutput).ToIssuanceModesPtrOutputWithContext(ctx)
}

// IssuanceModesPtrInput is an input type that accepts IssuanceModesArgs, IssuanceModesPtr and IssuanceModesPtrOutput values.
// You can construct a concrete instance of `IssuanceModesPtrInput` via:
//
//          IssuanceModesArgs{...}
//
//  or:
//
//          nil
type IssuanceModesPtrInput interface {
	pulumi.Input

	ToIssuanceModesPtrOutput() IssuanceModesPtrOutput
	ToIssuanceModesPtrOutputWithContext(context.Context) IssuanceModesPtrOutput
}

type issuanceModesPtrType IssuanceModesArgs

func IssuanceModesPtr(v *IssuanceModesArgs) IssuanceModesPtrInput {
	return (*issuanceModesPtrType)(v)
}

func (*issuanceModesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IssuanceModes)(nil)).Elem()
}

func (i *issuanceModesPtrType) ToIssuanceModesPtrOutput() IssuanceModesPtrOutput {
	return i.ToIssuanceModesPtrOutputWithContext(context.Background())
}

func (i *issuanceModesPtrType) ToIssuanceModesPtrOutputWithContext(ctx context.Context) IssuanceModesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuanceModesPtrOutput)
}

// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
type IssuanceModesOutput struct{ *pulumi.OutputState }

func (IssuanceModesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IssuanceModes)(nil)).Elem()
}

func (o IssuanceModesOutput) ToIssuanceModesOutput() IssuanceModesOutput {
	return o
}

func (o IssuanceModesOutput) ToIssuanceModesOutputWithContext(ctx context.Context) IssuanceModesOutput {
	return o
}

func (o IssuanceModesOutput) ToIssuanceModesPtrOutput() IssuanceModesPtrOutput {
	return o.ToIssuanceModesPtrOutputWithContext(context.Background())
}

func (o IssuanceModesOutput) ToIssuanceModesPtrOutputWithContext(ctx context.Context) IssuanceModesPtrOutput {
	return o.ApplyT(func(v IssuanceModes) *IssuanceModes {
		return &v
	}).(IssuanceModesPtrOutput)
}

// Optional. When true, allows callers to create Certificates by specifying a CertificateConfig.
func (o IssuanceModesOutput) AllowConfigBasedIssuance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IssuanceModes) *bool { return v.AllowConfigBasedIssuance }).(pulumi.BoolPtrOutput)
}

// Optional. When true, allows callers to create Certificates by specifying a CSR.
func (o IssuanceModesOutput) AllowCsrBasedIssuance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IssuanceModes) *bool { return v.AllowCsrBasedIssuance }).(pulumi.BoolPtrOutput)
}

type IssuanceModesPtrOutput struct{ *pulumi.OutputState }

func (IssuanceModesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IssuanceModes)(nil)).Elem()
}

func (o IssuanceModesPtrOutput) ToIssuanceModesPtrOutput() IssuanceModesPtrOutput {
	return o
}

func (o IssuanceModesPtrOutput) ToIssuanceModesPtrOutputWithContext(ctx context.Context) IssuanceModesPtrOutput {
	return o
}

func (o IssuanceModesPtrOutput) Elem() IssuanceModesOutput {
	return o.ApplyT(func(v *IssuanceModes) IssuanceModes { return *v }).(IssuanceModesOutput)
}

// Optional. When true, allows callers to create Certificates by specifying a CertificateConfig.
func (o IssuanceModesPtrOutput) AllowConfigBasedIssuance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IssuanceModes) *bool {
		if v == nil {
			return nil
		}
		return v.AllowConfigBasedIssuance
	}).(pulumi.BoolPtrOutput)
}

// Optional. When true, allows callers to create Certificates by specifying a CSR.
func (o IssuanceModesPtrOutput) AllowCsrBasedIssuance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IssuanceModes) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCsrBasedIssuance
	}).(pulumi.BoolPtrOutput)
}

// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
type IssuanceModesResponse struct {
	// Optional. When true, allows callers to create Certificates by specifying a CertificateConfig.
	AllowConfigBasedIssuance bool `pulumi:"allowConfigBasedIssuance"`
	// Optional. When true, allows callers to create Certificates by specifying a CSR.
	AllowCsrBasedIssuance bool `pulumi:"allowCsrBasedIssuance"`
}

// IssuanceModesResponseInput is an input type that accepts IssuanceModesResponseArgs and IssuanceModesResponseOutput values.
// You can construct a concrete instance of `IssuanceModesResponseInput` via:
//
//          IssuanceModesResponseArgs{...}
type IssuanceModesResponseInput interface {
	pulumi.Input

	ToIssuanceModesResponseOutput() IssuanceModesResponseOutput
	ToIssuanceModesResponseOutputWithContext(context.Context) IssuanceModesResponseOutput
}

// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
type IssuanceModesResponseArgs struct {
	// Optional. When true, allows callers to create Certificates by specifying a CertificateConfig.
	AllowConfigBasedIssuance pulumi.BoolInput `pulumi:"allowConfigBasedIssuance"`
	// Optional. When true, allows callers to create Certificates by specifying a CSR.
	AllowCsrBasedIssuance pulumi.BoolInput `pulumi:"allowCsrBasedIssuance"`
}

func (IssuanceModesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IssuanceModesResponse)(nil)).Elem()
}

func (i IssuanceModesResponseArgs) ToIssuanceModesResponseOutput() IssuanceModesResponseOutput {
	return i.ToIssuanceModesResponseOutputWithContext(context.Background())
}

func (i IssuanceModesResponseArgs) ToIssuanceModesResponseOutputWithContext(ctx context.Context) IssuanceModesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuanceModesResponseOutput)
}

func (i IssuanceModesResponseArgs) ToIssuanceModesResponsePtrOutput() IssuanceModesResponsePtrOutput {
	return i.ToIssuanceModesResponsePtrOutputWithContext(context.Background())
}

func (i IssuanceModesResponseArgs) ToIssuanceModesResponsePtrOutputWithContext(ctx context.Context) IssuanceModesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuanceModesResponseOutput).ToIssuanceModesResponsePtrOutputWithContext(ctx)
}

// IssuanceModesResponsePtrInput is an input type that accepts IssuanceModesResponseArgs, IssuanceModesResponsePtr and IssuanceModesResponsePtrOutput values.
// You can construct a concrete instance of `IssuanceModesResponsePtrInput` via:
//
//          IssuanceModesResponseArgs{...}
//
//  or:
//
//          nil
type IssuanceModesResponsePtrInput interface {
	pulumi.Input

	ToIssuanceModesResponsePtrOutput() IssuanceModesResponsePtrOutput
	ToIssuanceModesResponsePtrOutputWithContext(context.Context) IssuanceModesResponsePtrOutput
}

type issuanceModesResponsePtrType IssuanceModesResponseArgs

func IssuanceModesResponsePtr(v *IssuanceModesResponseArgs) IssuanceModesResponsePtrInput {
	return (*issuanceModesResponsePtrType)(v)
}

func (*issuanceModesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IssuanceModesResponse)(nil)).Elem()
}

func (i *issuanceModesResponsePtrType) ToIssuanceModesResponsePtrOutput() IssuanceModesResponsePtrOutput {
	return i.ToIssuanceModesResponsePtrOutputWithContext(context.Background())
}

func (i *issuanceModesResponsePtrType) ToIssuanceModesResponsePtrOutputWithContext(ctx context.Context) IssuanceModesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuanceModesResponsePtrOutput)
}

// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
type IssuanceModesResponseOutput struct{ *pulumi.OutputState }

func (IssuanceModesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IssuanceModesResponse)(nil)).Elem()
}

func (o IssuanceModesResponseOutput) ToIssuanceModesResponseOutput() IssuanceModesResponseOutput {
	return o
}

func (o IssuanceModesResponseOutput) ToIssuanceModesResponseOutputWithContext(ctx context.Context) IssuanceModesResponseOutput {
	return o
}

func (o IssuanceModesResponseOutput) ToIssuanceModesResponsePtrOutput() IssuanceModesResponsePtrOutput {
	return o.ToIssuanceModesResponsePtrOutputWithContext(context.Background())
}

func (o IssuanceModesResponseOutput) ToIssuanceModesResponsePtrOutputWithContext(ctx context.Context) IssuanceModesResponsePtrOutput {
	return o.ApplyT(func(v IssuanceModesResponse) *IssuanceModesResponse {
		return &v
	}).(IssuanceModesResponsePtrOutput)
}

// Optional. When true, allows callers to create Certificates by specifying a CertificateConfig.
func (o IssuanceModesResponseOutput) AllowConfigBasedIssuance() pulumi.BoolOutput {
	return o.ApplyT(func(v IssuanceModesResponse) bool { return v.AllowConfigBasedIssuance }).(pulumi.BoolOutput)
}

// Optional. When true, allows callers to create Certificates by specifying a CSR.
func (o IssuanceModesResponseOutput) AllowCsrBasedIssuance() pulumi.BoolOutput {
	return o.ApplyT(func(v IssuanceModesResponse) bool { return v.AllowCsrBasedIssuance }).(pulumi.BoolOutput)
}

type IssuanceModesResponsePtrOutput struct{ *pulumi.OutputState }

func (IssuanceModesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IssuanceModesResponse)(nil)).Elem()
}

func (o IssuanceModesResponsePtrOutput) ToIssuanceModesResponsePtrOutput() IssuanceModesResponsePtrOutput {
	return o
}

func (o IssuanceModesResponsePtrOutput) ToIssuanceModesResponsePtrOutputWithContext(ctx context.Context) IssuanceModesResponsePtrOutput {
	return o
}

func (o IssuanceModesResponsePtrOutput) Elem() IssuanceModesResponseOutput {
	return o.ApplyT(func(v *IssuanceModesResponse) IssuanceModesResponse { return *v }).(IssuanceModesResponseOutput)
}

// Optional. When true, allows callers to create Certificates by specifying a CertificateConfig.
func (o IssuanceModesResponsePtrOutput) AllowConfigBasedIssuance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IssuanceModesResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowConfigBasedIssuance
	}).(pulumi.BoolPtrOutput)
}

// Optional. When true, allows callers to create Certificates by specifying a CSR.
func (o IssuanceModesResponsePtrOutput) AllowCsrBasedIssuance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IssuanceModesResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowCsrBasedIssuance
	}).(pulumi.BoolPtrOutput)
}

// Defines controls over all certificate issuance within a CaPool.
type IssuancePolicy struct {
	// Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
	AllowedIssuanceModes *IssuanceModes `pulumi:"allowedIssuanceModes"`
	// Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.
	AllowedKeyTypes []AllowedKeyType `pulumi:"allowedKeyTypes"`
	// Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
	BaselineValues *X509Parameters `pulumi:"baselineValues"`
	// Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
	IdentityConstraints *CertificateIdentityConstraints `pulumi:"identityConstraints"`
	// Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
	MaximumLifetime *string `pulumi:"maximumLifetime"`
	// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool's baseline_values.
	PassthroughExtensions *CertificateExtensionConstraints `pulumi:"passthroughExtensions"`
}

// IssuancePolicyInput is an input type that accepts IssuancePolicyArgs and IssuancePolicyOutput values.
// You can construct a concrete instance of `IssuancePolicyInput` via:
//
//          IssuancePolicyArgs{...}
type IssuancePolicyInput interface {
	pulumi.Input

	ToIssuancePolicyOutput() IssuancePolicyOutput
	ToIssuancePolicyOutputWithContext(context.Context) IssuancePolicyOutput
}

// Defines controls over all certificate issuance within a CaPool.
type IssuancePolicyArgs struct {
	// Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
	AllowedIssuanceModes IssuanceModesPtrInput `pulumi:"allowedIssuanceModes"`
	// Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.
	AllowedKeyTypes AllowedKeyTypeArrayInput `pulumi:"allowedKeyTypes"`
	// Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
	BaselineValues X509ParametersPtrInput `pulumi:"baselineValues"`
	// Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
	IdentityConstraints CertificateIdentityConstraintsPtrInput `pulumi:"identityConstraints"`
	// Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
	MaximumLifetime pulumi.StringPtrInput `pulumi:"maximumLifetime"`
	// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool's baseline_values.
	PassthroughExtensions CertificateExtensionConstraintsPtrInput `pulumi:"passthroughExtensions"`
}

func (IssuancePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IssuancePolicy)(nil)).Elem()
}

func (i IssuancePolicyArgs) ToIssuancePolicyOutput() IssuancePolicyOutput {
	return i.ToIssuancePolicyOutputWithContext(context.Background())
}

func (i IssuancePolicyArgs) ToIssuancePolicyOutputWithContext(ctx context.Context) IssuancePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuancePolicyOutput)
}

func (i IssuancePolicyArgs) ToIssuancePolicyPtrOutput() IssuancePolicyPtrOutput {
	return i.ToIssuancePolicyPtrOutputWithContext(context.Background())
}

func (i IssuancePolicyArgs) ToIssuancePolicyPtrOutputWithContext(ctx context.Context) IssuancePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuancePolicyOutput).ToIssuancePolicyPtrOutputWithContext(ctx)
}

// IssuancePolicyPtrInput is an input type that accepts IssuancePolicyArgs, IssuancePolicyPtr and IssuancePolicyPtrOutput values.
// You can construct a concrete instance of `IssuancePolicyPtrInput` via:
//
//          IssuancePolicyArgs{...}
//
//  or:
//
//          nil
type IssuancePolicyPtrInput interface {
	pulumi.Input

	ToIssuancePolicyPtrOutput() IssuancePolicyPtrOutput
	ToIssuancePolicyPtrOutputWithContext(context.Context) IssuancePolicyPtrOutput
}

type issuancePolicyPtrType IssuancePolicyArgs

func IssuancePolicyPtr(v *IssuancePolicyArgs) IssuancePolicyPtrInput {
	return (*issuancePolicyPtrType)(v)
}

func (*issuancePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IssuancePolicy)(nil)).Elem()
}

func (i *issuancePolicyPtrType) ToIssuancePolicyPtrOutput() IssuancePolicyPtrOutput {
	return i.ToIssuancePolicyPtrOutputWithContext(context.Background())
}

func (i *issuancePolicyPtrType) ToIssuancePolicyPtrOutputWithContext(ctx context.Context) IssuancePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuancePolicyPtrOutput)
}

// Defines controls over all certificate issuance within a CaPool.
type IssuancePolicyOutput struct{ *pulumi.OutputState }

func (IssuancePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IssuancePolicy)(nil)).Elem()
}

func (o IssuancePolicyOutput) ToIssuancePolicyOutput() IssuancePolicyOutput {
	return o
}

func (o IssuancePolicyOutput) ToIssuancePolicyOutputWithContext(ctx context.Context) IssuancePolicyOutput {
	return o
}

func (o IssuancePolicyOutput) ToIssuancePolicyPtrOutput() IssuancePolicyPtrOutput {
	return o.ToIssuancePolicyPtrOutputWithContext(context.Background())
}

func (o IssuancePolicyOutput) ToIssuancePolicyPtrOutputWithContext(ctx context.Context) IssuancePolicyPtrOutput {
	return o.ApplyT(func(v IssuancePolicy) *IssuancePolicy {
		return &v
	}).(IssuancePolicyPtrOutput)
}

// Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
func (o IssuancePolicyOutput) AllowedIssuanceModes() IssuanceModesPtrOutput {
	return o.ApplyT(func(v IssuancePolicy) *IssuanceModes { return v.AllowedIssuanceModes }).(IssuanceModesPtrOutput)
}

// Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.
func (o IssuancePolicyOutput) AllowedKeyTypes() AllowedKeyTypeArrayOutput {
	return o.ApplyT(func(v IssuancePolicy) []AllowedKeyType { return v.AllowedKeyTypes }).(AllowedKeyTypeArrayOutput)
}

// Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
func (o IssuancePolicyOutput) BaselineValues() X509ParametersPtrOutput {
	return o.ApplyT(func(v IssuancePolicy) *X509Parameters { return v.BaselineValues }).(X509ParametersPtrOutput)
}

// Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
func (o IssuancePolicyOutput) IdentityConstraints() CertificateIdentityConstraintsPtrOutput {
	return o.ApplyT(func(v IssuancePolicy) *CertificateIdentityConstraints { return v.IdentityConstraints }).(CertificateIdentityConstraintsPtrOutput)
}

// Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
func (o IssuancePolicyOutput) MaximumLifetime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IssuancePolicy) *string { return v.MaximumLifetime }).(pulumi.StringPtrOutput)
}

// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool's baseline_values.
func (o IssuancePolicyOutput) PassthroughExtensions() CertificateExtensionConstraintsPtrOutput {
	return o.ApplyT(func(v IssuancePolicy) *CertificateExtensionConstraints { return v.PassthroughExtensions }).(CertificateExtensionConstraintsPtrOutput)
}

type IssuancePolicyPtrOutput struct{ *pulumi.OutputState }

func (IssuancePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IssuancePolicy)(nil)).Elem()
}

func (o IssuancePolicyPtrOutput) ToIssuancePolicyPtrOutput() IssuancePolicyPtrOutput {
	return o
}

func (o IssuancePolicyPtrOutput) ToIssuancePolicyPtrOutputWithContext(ctx context.Context) IssuancePolicyPtrOutput {
	return o
}

func (o IssuancePolicyPtrOutput) Elem() IssuancePolicyOutput {
	return o.ApplyT(func(v *IssuancePolicy) IssuancePolicy { return *v }).(IssuancePolicyOutput)
}

// Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
func (o IssuancePolicyPtrOutput) AllowedIssuanceModes() IssuanceModesPtrOutput {
	return o.ApplyT(func(v *IssuancePolicy) *IssuanceModes {
		if v == nil {
			return nil
		}
		return v.AllowedIssuanceModes
	}).(IssuanceModesPtrOutput)
}

// Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.
func (o IssuancePolicyPtrOutput) AllowedKeyTypes() AllowedKeyTypeArrayOutput {
	return o.ApplyT(func(v *IssuancePolicy) []AllowedKeyType {
		if v == nil {
			return nil
		}
		return v.AllowedKeyTypes
	}).(AllowedKeyTypeArrayOutput)
}

// Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
func (o IssuancePolicyPtrOutput) BaselineValues() X509ParametersPtrOutput {
	return o.ApplyT(func(v *IssuancePolicy) *X509Parameters {
		if v == nil {
			return nil
		}
		return v.BaselineValues
	}).(X509ParametersPtrOutput)
}

// Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
func (o IssuancePolicyPtrOutput) IdentityConstraints() CertificateIdentityConstraintsPtrOutput {
	return o.ApplyT(func(v *IssuancePolicy) *CertificateIdentityConstraints {
		if v == nil {
			return nil
		}
		return v.IdentityConstraints
	}).(CertificateIdentityConstraintsPtrOutput)
}

// Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
func (o IssuancePolicyPtrOutput) MaximumLifetime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IssuancePolicy) *string {
		if v == nil {
			return nil
		}
		return v.MaximumLifetime
	}).(pulumi.StringPtrOutput)
}

// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool's baseline_values.
func (o IssuancePolicyPtrOutput) PassthroughExtensions() CertificateExtensionConstraintsPtrOutput {
	return o.ApplyT(func(v *IssuancePolicy) *CertificateExtensionConstraints {
		if v == nil {
			return nil
		}
		return v.PassthroughExtensions
	}).(CertificateExtensionConstraintsPtrOutput)
}

// Defines controls over all certificate issuance within a CaPool.
type IssuancePolicyResponse struct {
	// Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
	AllowedIssuanceModes IssuanceModesResponse `pulumi:"allowedIssuanceModes"`
	// Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.
	AllowedKeyTypes []AllowedKeyTypeResponse `pulumi:"allowedKeyTypes"`
	// Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
	BaselineValues X509ParametersResponse `pulumi:"baselineValues"`
	// Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
	IdentityConstraints CertificateIdentityConstraintsResponse `pulumi:"identityConstraints"`
	// Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
	MaximumLifetime string `pulumi:"maximumLifetime"`
	// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool's baseline_values.
	PassthroughExtensions CertificateExtensionConstraintsResponse `pulumi:"passthroughExtensions"`
}

// IssuancePolicyResponseInput is an input type that accepts IssuancePolicyResponseArgs and IssuancePolicyResponseOutput values.
// You can construct a concrete instance of `IssuancePolicyResponseInput` via:
//
//          IssuancePolicyResponseArgs{...}
type IssuancePolicyResponseInput interface {
	pulumi.Input

	ToIssuancePolicyResponseOutput() IssuancePolicyResponseOutput
	ToIssuancePolicyResponseOutputWithContext(context.Context) IssuancePolicyResponseOutput
}

// Defines controls over all certificate issuance within a CaPool.
type IssuancePolicyResponseArgs struct {
	// Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
	AllowedIssuanceModes IssuanceModesResponseInput `pulumi:"allowedIssuanceModes"`
	// Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.
	AllowedKeyTypes AllowedKeyTypeResponseArrayInput `pulumi:"allowedKeyTypes"`
	// Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
	BaselineValues X509ParametersResponseInput `pulumi:"baselineValues"`
	// Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
	IdentityConstraints CertificateIdentityConstraintsResponseInput `pulumi:"identityConstraints"`
	// Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
	MaximumLifetime pulumi.StringInput `pulumi:"maximumLifetime"`
	// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool's baseline_values.
	PassthroughExtensions CertificateExtensionConstraintsResponseInput `pulumi:"passthroughExtensions"`
}

func (IssuancePolicyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IssuancePolicyResponse)(nil)).Elem()
}

func (i IssuancePolicyResponseArgs) ToIssuancePolicyResponseOutput() IssuancePolicyResponseOutput {
	return i.ToIssuancePolicyResponseOutputWithContext(context.Background())
}

func (i IssuancePolicyResponseArgs) ToIssuancePolicyResponseOutputWithContext(ctx context.Context) IssuancePolicyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuancePolicyResponseOutput)
}

func (i IssuancePolicyResponseArgs) ToIssuancePolicyResponsePtrOutput() IssuancePolicyResponsePtrOutput {
	return i.ToIssuancePolicyResponsePtrOutputWithContext(context.Background())
}

func (i IssuancePolicyResponseArgs) ToIssuancePolicyResponsePtrOutputWithContext(ctx context.Context) IssuancePolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuancePolicyResponseOutput).ToIssuancePolicyResponsePtrOutputWithContext(ctx)
}

// IssuancePolicyResponsePtrInput is an input type that accepts IssuancePolicyResponseArgs, IssuancePolicyResponsePtr and IssuancePolicyResponsePtrOutput values.
// You can construct a concrete instance of `IssuancePolicyResponsePtrInput` via:
//
//          IssuancePolicyResponseArgs{...}
//
//  or:
//
//          nil
type IssuancePolicyResponsePtrInput interface {
	pulumi.Input

	ToIssuancePolicyResponsePtrOutput() IssuancePolicyResponsePtrOutput
	ToIssuancePolicyResponsePtrOutputWithContext(context.Context) IssuancePolicyResponsePtrOutput
}

type issuancePolicyResponsePtrType IssuancePolicyResponseArgs

func IssuancePolicyResponsePtr(v *IssuancePolicyResponseArgs) IssuancePolicyResponsePtrInput {
	return (*issuancePolicyResponsePtrType)(v)
}

func (*issuancePolicyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IssuancePolicyResponse)(nil)).Elem()
}

func (i *issuancePolicyResponsePtrType) ToIssuancePolicyResponsePtrOutput() IssuancePolicyResponsePtrOutput {
	return i.ToIssuancePolicyResponsePtrOutputWithContext(context.Background())
}

func (i *issuancePolicyResponsePtrType) ToIssuancePolicyResponsePtrOutputWithContext(ctx context.Context) IssuancePolicyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuancePolicyResponsePtrOutput)
}

// Defines controls over all certificate issuance within a CaPool.
type IssuancePolicyResponseOutput struct{ *pulumi.OutputState }

func (IssuancePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IssuancePolicyResponse)(nil)).Elem()
}

func (o IssuancePolicyResponseOutput) ToIssuancePolicyResponseOutput() IssuancePolicyResponseOutput {
	return o
}

func (o IssuancePolicyResponseOutput) ToIssuancePolicyResponseOutputWithContext(ctx context.Context) IssuancePolicyResponseOutput {
	return o
}

func (o IssuancePolicyResponseOutput) ToIssuancePolicyResponsePtrOutput() IssuancePolicyResponsePtrOutput {
	return o.ToIssuancePolicyResponsePtrOutputWithContext(context.Background())
}

func (o IssuancePolicyResponseOutput) ToIssuancePolicyResponsePtrOutputWithContext(ctx context.Context) IssuancePolicyResponsePtrOutput {
	return o.ApplyT(func(v IssuancePolicyResponse) *IssuancePolicyResponse {
		return &v
	}).(IssuancePolicyResponsePtrOutput)
}

// Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
func (o IssuancePolicyResponseOutput) AllowedIssuanceModes() IssuanceModesResponseOutput {
	return o.ApplyT(func(v IssuancePolicyResponse) IssuanceModesResponse { return v.AllowedIssuanceModes }).(IssuanceModesResponseOutput)
}

// Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.
func (o IssuancePolicyResponseOutput) AllowedKeyTypes() AllowedKeyTypeResponseArrayOutput {
	return o.ApplyT(func(v IssuancePolicyResponse) []AllowedKeyTypeResponse { return v.AllowedKeyTypes }).(AllowedKeyTypeResponseArrayOutput)
}

// Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
func (o IssuancePolicyResponseOutput) BaselineValues() X509ParametersResponseOutput {
	return o.ApplyT(func(v IssuancePolicyResponse) X509ParametersResponse { return v.BaselineValues }).(X509ParametersResponseOutput)
}

// Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
func (o IssuancePolicyResponseOutput) IdentityConstraints() CertificateIdentityConstraintsResponseOutput {
	return o.ApplyT(func(v IssuancePolicyResponse) CertificateIdentityConstraintsResponse { return v.IdentityConstraints }).(CertificateIdentityConstraintsResponseOutput)
}

// Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
func (o IssuancePolicyResponseOutput) MaximumLifetime() pulumi.StringOutput {
	return o.ApplyT(func(v IssuancePolicyResponse) string { return v.MaximumLifetime }).(pulumi.StringOutput)
}

// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool's baseline_values.
func (o IssuancePolicyResponseOutput) PassthroughExtensions() CertificateExtensionConstraintsResponseOutput {
	return o.ApplyT(func(v IssuancePolicyResponse) CertificateExtensionConstraintsResponse { return v.PassthroughExtensions }).(CertificateExtensionConstraintsResponseOutput)
}

type IssuancePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (IssuancePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IssuancePolicyResponse)(nil)).Elem()
}

func (o IssuancePolicyResponsePtrOutput) ToIssuancePolicyResponsePtrOutput() IssuancePolicyResponsePtrOutput {
	return o
}

func (o IssuancePolicyResponsePtrOutput) ToIssuancePolicyResponsePtrOutputWithContext(ctx context.Context) IssuancePolicyResponsePtrOutput {
	return o
}

func (o IssuancePolicyResponsePtrOutput) Elem() IssuancePolicyResponseOutput {
	return o.ApplyT(func(v *IssuancePolicyResponse) IssuancePolicyResponse { return *v }).(IssuancePolicyResponseOutput)
}

// Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.
func (o IssuancePolicyResponsePtrOutput) AllowedIssuanceModes() IssuanceModesResponsePtrOutput {
	return o.ApplyT(func(v *IssuancePolicyResponse) *IssuanceModesResponse {
		if v == nil {
			return nil
		}
		return &v.AllowedIssuanceModes
	}).(IssuanceModesResponsePtrOutput)
}

// Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.
func (o IssuancePolicyResponsePtrOutput) AllowedKeyTypes() AllowedKeyTypeResponseArrayOutput {
	return o.ApplyT(func(v *IssuancePolicyResponse) []AllowedKeyTypeResponse {
		if v == nil {
			return nil
		}
		return v.AllowedKeyTypes
	}).(AllowedKeyTypeResponseArrayOutput)
}

// Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.
func (o IssuancePolicyResponsePtrOutput) BaselineValues() X509ParametersResponsePtrOutput {
	return o.ApplyT(func(v *IssuancePolicyResponse) *X509ParametersResponse {
		if v == nil {
			return nil
		}
		return &v.BaselineValues
	}).(X509ParametersResponsePtrOutput)
}

// Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
func (o IssuancePolicyResponsePtrOutput) IdentityConstraints() CertificateIdentityConstraintsResponsePtrOutput {
	return o.ApplyT(func(v *IssuancePolicyResponse) *CertificateIdentityConstraintsResponse {
		if v == nil {
			return nil
		}
		return &v.IdentityConstraints
	}).(CertificateIdentityConstraintsResponsePtrOutput)
}

// Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
func (o IssuancePolicyResponsePtrOutput) MaximumLifetime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IssuancePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MaximumLifetime
	}).(pulumi.StringPtrOutput)
}

// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool's baseline_values.
func (o IssuancePolicyResponsePtrOutput) PassthroughExtensions() CertificateExtensionConstraintsResponsePtrOutput {
	return o.ApplyT(func(v *IssuancePolicyResponse) *CertificateExtensionConstraintsResponse {
		if v == nil {
			return nil
		}
		return &v.PassthroughExtensions
	}).(CertificateExtensionConstraintsResponsePtrOutput)
}

// A KeyId identifies a specific public key, usually by hashing the public key.
type KeyIdResponse struct {
	// Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.
	KeyId string `pulumi:"keyId"`
}

// KeyIdResponseInput is an input type that accepts KeyIdResponseArgs and KeyIdResponseOutput values.
// You can construct a concrete instance of `KeyIdResponseInput` via:
//
//          KeyIdResponseArgs{...}
type KeyIdResponseInput interface {
	pulumi.Input

	ToKeyIdResponseOutput() KeyIdResponseOutput
	ToKeyIdResponseOutputWithContext(context.Context) KeyIdResponseOutput
}

// A KeyId identifies a specific public key, usually by hashing the public key.
type KeyIdResponseArgs struct {
	// Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.
	KeyId pulumi.StringInput `pulumi:"keyId"`
}

func (KeyIdResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyIdResponse)(nil)).Elem()
}

func (i KeyIdResponseArgs) ToKeyIdResponseOutput() KeyIdResponseOutput {
	return i.ToKeyIdResponseOutputWithContext(context.Background())
}

func (i KeyIdResponseArgs) ToKeyIdResponseOutputWithContext(ctx context.Context) KeyIdResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyIdResponseOutput)
}

func (i KeyIdResponseArgs) ToKeyIdResponsePtrOutput() KeyIdResponsePtrOutput {
	return i.ToKeyIdResponsePtrOutputWithContext(context.Background())
}

func (i KeyIdResponseArgs) ToKeyIdResponsePtrOutputWithContext(ctx context.Context) KeyIdResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyIdResponseOutput).ToKeyIdResponsePtrOutputWithContext(ctx)
}

// KeyIdResponsePtrInput is an input type that accepts KeyIdResponseArgs, KeyIdResponsePtr and KeyIdResponsePtrOutput values.
// You can construct a concrete instance of `KeyIdResponsePtrInput` via:
//
//          KeyIdResponseArgs{...}
//
//  or:
//
//          nil
type KeyIdResponsePtrInput interface {
	pulumi.Input

	ToKeyIdResponsePtrOutput() KeyIdResponsePtrOutput
	ToKeyIdResponsePtrOutputWithContext(context.Context) KeyIdResponsePtrOutput
}

type keyIdResponsePtrType KeyIdResponseArgs

func KeyIdResponsePtr(v *KeyIdResponseArgs) KeyIdResponsePtrInput {
	return (*keyIdResponsePtrType)(v)
}

func (*keyIdResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyIdResponse)(nil)).Elem()
}

func (i *keyIdResponsePtrType) ToKeyIdResponsePtrOutput() KeyIdResponsePtrOutput {
	return i.ToKeyIdResponsePtrOutputWithContext(context.Background())
}

func (i *keyIdResponsePtrType) ToKeyIdResponsePtrOutputWithContext(ctx context.Context) KeyIdResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyIdResponsePtrOutput)
}

// A KeyId identifies a specific public key, usually by hashing the public key.
type KeyIdResponseOutput struct{ *pulumi.OutputState }

func (KeyIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyIdResponse)(nil)).Elem()
}

func (o KeyIdResponseOutput) ToKeyIdResponseOutput() KeyIdResponseOutput {
	return o
}

func (o KeyIdResponseOutput) ToKeyIdResponseOutputWithContext(ctx context.Context) KeyIdResponseOutput {
	return o
}

func (o KeyIdResponseOutput) ToKeyIdResponsePtrOutput() KeyIdResponsePtrOutput {
	return o.ToKeyIdResponsePtrOutputWithContext(context.Background())
}

func (o KeyIdResponseOutput) ToKeyIdResponsePtrOutputWithContext(ctx context.Context) KeyIdResponsePtrOutput {
	return o.ApplyT(func(v KeyIdResponse) *KeyIdResponse {
		return &v
	}).(KeyIdResponsePtrOutput)
}

// Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.
func (o KeyIdResponseOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v KeyIdResponse) string { return v.KeyId }).(pulumi.StringOutput)
}

type KeyIdResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyIdResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyIdResponse)(nil)).Elem()
}

func (o KeyIdResponsePtrOutput) ToKeyIdResponsePtrOutput() KeyIdResponsePtrOutput {
	return o
}

func (o KeyIdResponsePtrOutput) ToKeyIdResponsePtrOutputWithContext(ctx context.Context) KeyIdResponsePtrOutput {
	return o
}

func (o KeyIdResponsePtrOutput) Elem() KeyIdResponseOutput {
	return o.ApplyT(func(v *KeyIdResponse) KeyIdResponse { return *v }).(KeyIdResponseOutput)
}

// Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.
func (o KeyIdResponsePtrOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyIdResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyId
	}).(pulumi.StringPtrOutput)
}

// A KeyUsage describes key usage values that may appear in an X.509 certificate.
type KeyUsage struct {
	// Describes high-level ways in which a key may be used.
	BaseKeyUsage *KeyUsageOptions `pulumi:"baseKeyUsage"`
	// Detailed scenarios in which a key may be used.
	ExtendedKeyUsage *ExtendedKeyUsageOptions `pulumi:"extendedKeyUsage"`
	// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
	UnknownExtendedKeyUsages []ObjectId `pulumi:"unknownExtendedKeyUsages"`
}

// KeyUsageInput is an input type that accepts KeyUsageArgs and KeyUsageOutput values.
// You can construct a concrete instance of `KeyUsageInput` via:
//
//          KeyUsageArgs{...}
type KeyUsageInput interface {
	pulumi.Input

	ToKeyUsageOutput() KeyUsageOutput
	ToKeyUsageOutputWithContext(context.Context) KeyUsageOutput
}

// A KeyUsage describes key usage values that may appear in an X.509 certificate.
type KeyUsageArgs struct {
	// Describes high-level ways in which a key may be used.
	BaseKeyUsage KeyUsageOptionsPtrInput `pulumi:"baseKeyUsage"`
	// Detailed scenarios in which a key may be used.
	ExtendedKeyUsage ExtendedKeyUsageOptionsPtrInput `pulumi:"extendedKeyUsage"`
	// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
	UnknownExtendedKeyUsages ObjectIdArrayInput `pulumi:"unknownExtendedKeyUsages"`
}

func (KeyUsageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyUsage)(nil)).Elem()
}

func (i KeyUsageArgs) ToKeyUsageOutput() KeyUsageOutput {
	return i.ToKeyUsageOutputWithContext(context.Background())
}

func (i KeyUsageArgs) ToKeyUsageOutputWithContext(ctx context.Context) KeyUsageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsageOutput)
}

func (i KeyUsageArgs) ToKeyUsagePtrOutput() KeyUsagePtrOutput {
	return i.ToKeyUsagePtrOutputWithContext(context.Background())
}

func (i KeyUsageArgs) ToKeyUsagePtrOutputWithContext(ctx context.Context) KeyUsagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsageOutput).ToKeyUsagePtrOutputWithContext(ctx)
}

// KeyUsagePtrInput is an input type that accepts KeyUsageArgs, KeyUsagePtr and KeyUsagePtrOutput values.
// You can construct a concrete instance of `KeyUsagePtrInput` via:
//
//          KeyUsageArgs{...}
//
//  or:
//
//          nil
type KeyUsagePtrInput interface {
	pulumi.Input

	ToKeyUsagePtrOutput() KeyUsagePtrOutput
	ToKeyUsagePtrOutputWithContext(context.Context) KeyUsagePtrOutput
}

type keyUsagePtrType KeyUsageArgs

func KeyUsagePtr(v *KeyUsageArgs) KeyUsagePtrInput {
	return (*keyUsagePtrType)(v)
}

func (*keyUsagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyUsage)(nil)).Elem()
}

func (i *keyUsagePtrType) ToKeyUsagePtrOutput() KeyUsagePtrOutput {
	return i.ToKeyUsagePtrOutputWithContext(context.Background())
}

func (i *keyUsagePtrType) ToKeyUsagePtrOutputWithContext(ctx context.Context) KeyUsagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsagePtrOutput)
}

// A KeyUsage describes key usage values that may appear in an X.509 certificate.
type KeyUsageOutput struct{ *pulumi.OutputState }

func (KeyUsageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyUsage)(nil)).Elem()
}

func (o KeyUsageOutput) ToKeyUsageOutput() KeyUsageOutput {
	return o
}

func (o KeyUsageOutput) ToKeyUsageOutputWithContext(ctx context.Context) KeyUsageOutput {
	return o
}

func (o KeyUsageOutput) ToKeyUsagePtrOutput() KeyUsagePtrOutput {
	return o.ToKeyUsagePtrOutputWithContext(context.Background())
}

func (o KeyUsageOutput) ToKeyUsagePtrOutputWithContext(ctx context.Context) KeyUsagePtrOutput {
	return o.ApplyT(func(v KeyUsage) *KeyUsage {
		return &v
	}).(KeyUsagePtrOutput)
}

// Describes high-level ways in which a key may be used.
func (o KeyUsageOutput) BaseKeyUsage() KeyUsageOptionsPtrOutput {
	return o.ApplyT(func(v KeyUsage) *KeyUsageOptions { return v.BaseKeyUsage }).(KeyUsageOptionsPtrOutput)
}

// Detailed scenarios in which a key may be used.
func (o KeyUsageOutput) ExtendedKeyUsage() ExtendedKeyUsageOptionsPtrOutput {
	return o.ApplyT(func(v KeyUsage) *ExtendedKeyUsageOptions { return v.ExtendedKeyUsage }).(ExtendedKeyUsageOptionsPtrOutput)
}

// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
func (o KeyUsageOutput) UnknownExtendedKeyUsages() ObjectIdArrayOutput {
	return o.ApplyT(func(v KeyUsage) []ObjectId { return v.UnknownExtendedKeyUsages }).(ObjectIdArrayOutput)
}

type KeyUsagePtrOutput struct{ *pulumi.OutputState }

func (KeyUsagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyUsage)(nil)).Elem()
}

func (o KeyUsagePtrOutput) ToKeyUsagePtrOutput() KeyUsagePtrOutput {
	return o
}

func (o KeyUsagePtrOutput) ToKeyUsagePtrOutputWithContext(ctx context.Context) KeyUsagePtrOutput {
	return o
}

func (o KeyUsagePtrOutput) Elem() KeyUsageOutput {
	return o.ApplyT(func(v *KeyUsage) KeyUsage { return *v }).(KeyUsageOutput)
}

// Describes high-level ways in which a key may be used.
func (o KeyUsagePtrOutput) BaseKeyUsage() KeyUsageOptionsPtrOutput {
	return o.ApplyT(func(v *KeyUsage) *KeyUsageOptions {
		if v == nil {
			return nil
		}
		return v.BaseKeyUsage
	}).(KeyUsageOptionsPtrOutput)
}

// Detailed scenarios in which a key may be used.
func (o KeyUsagePtrOutput) ExtendedKeyUsage() ExtendedKeyUsageOptionsPtrOutput {
	return o.ApplyT(func(v *KeyUsage) *ExtendedKeyUsageOptions {
		if v == nil {
			return nil
		}
		return v.ExtendedKeyUsage
	}).(ExtendedKeyUsageOptionsPtrOutput)
}

// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
func (o KeyUsagePtrOutput) UnknownExtendedKeyUsages() ObjectIdArrayOutput {
	return o.ApplyT(func(v *KeyUsage) []ObjectId {
		if v == nil {
			return nil
		}
		return v.UnknownExtendedKeyUsages
	}).(ObjectIdArrayOutput)
}

// KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
type KeyUsageOptions struct {
	// The key may be used to sign certificates.
	CertSign *bool `pulumi:"certSign"`
	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	ContentCommitment *bool `pulumi:"contentCommitment"`
	// The key may be used sign certificate revocation lists.
	CrlSign *bool `pulumi:"crlSign"`
	// The key may be used to encipher data.
	DataEncipherment *bool `pulumi:"dataEncipherment"`
	// The key may be used to decipher only.
	DecipherOnly *bool `pulumi:"decipherOnly"`
	// The key may be used for digital signatures.
	DigitalSignature *bool `pulumi:"digitalSignature"`
	// The key may be used to encipher only.
	EncipherOnly *bool `pulumi:"encipherOnly"`
	// The key may be used in a key agreement protocol.
	KeyAgreement *bool `pulumi:"keyAgreement"`
	// The key may be used to encipher other keys.
	KeyEncipherment *bool `pulumi:"keyEncipherment"`
}

// KeyUsageOptionsInput is an input type that accepts KeyUsageOptionsArgs and KeyUsageOptionsOutput values.
// You can construct a concrete instance of `KeyUsageOptionsInput` via:
//
//          KeyUsageOptionsArgs{...}
type KeyUsageOptionsInput interface {
	pulumi.Input

	ToKeyUsageOptionsOutput() KeyUsageOptionsOutput
	ToKeyUsageOptionsOutputWithContext(context.Context) KeyUsageOptionsOutput
}

// KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
type KeyUsageOptionsArgs struct {
	// The key may be used to sign certificates.
	CertSign pulumi.BoolPtrInput `pulumi:"certSign"`
	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	ContentCommitment pulumi.BoolPtrInput `pulumi:"contentCommitment"`
	// The key may be used sign certificate revocation lists.
	CrlSign pulumi.BoolPtrInput `pulumi:"crlSign"`
	// The key may be used to encipher data.
	DataEncipherment pulumi.BoolPtrInput `pulumi:"dataEncipherment"`
	// The key may be used to decipher only.
	DecipherOnly pulumi.BoolPtrInput `pulumi:"decipherOnly"`
	// The key may be used for digital signatures.
	DigitalSignature pulumi.BoolPtrInput `pulumi:"digitalSignature"`
	// The key may be used to encipher only.
	EncipherOnly pulumi.BoolPtrInput `pulumi:"encipherOnly"`
	// The key may be used in a key agreement protocol.
	KeyAgreement pulumi.BoolPtrInput `pulumi:"keyAgreement"`
	// The key may be used to encipher other keys.
	KeyEncipherment pulumi.BoolPtrInput `pulumi:"keyEncipherment"`
}

func (KeyUsageOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyUsageOptions)(nil)).Elem()
}

func (i KeyUsageOptionsArgs) ToKeyUsageOptionsOutput() KeyUsageOptionsOutput {
	return i.ToKeyUsageOptionsOutputWithContext(context.Background())
}

func (i KeyUsageOptionsArgs) ToKeyUsageOptionsOutputWithContext(ctx context.Context) KeyUsageOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsageOptionsOutput)
}

func (i KeyUsageOptionsArgs) ToKeyUsageOptionsPtrOutput() KeyUsageOptionsPtrOutput {
	return i.ToKeyUsageOptionsPtrOutputWithContext(context.Background())
}

func (i KeyUsageOptionsArgs) ToKeyUsageOptionsPtrOutputWithContext(ctx context.Context) KeyUsageOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsageOptionsOutput).ToKeyUsageOptionsPtrOutputWithContext(ctx)
}

// KeyUsageOptionsPtrInput is an input type that accepts KeyUsageOptionsArgs, KeyUsageOptionsPtr and KeyUsageOptionsPtrOutput values.
// You can construct a concrete instance of `KeyUsageOptionsPtrInput` via:
//
//          KeyUsageOptionsArgs{...}
//
//  or:
//
//          nil
type KeyUsageOptionsPtrInput interface {
	pulumi.Input

	ToKeyUsageOptionsPtrOutput() KeyUsageOptionsPtrOutput
	ToKeyUsageOptionsPtrOutputWithContext(context.Context) KeyUsageOptionsPtrOutput
}

type keyUsageOptionsPtrType KeyUsageOptionsArgs

func KeyUsageOptionsPtr(v *KeyUsageOptionsArgs) KeyUsageOptionsPtrInput {
	return (*keyUsageOptionsPtrType)(v)
}

func (*keyUsageOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyUsageOptions)(nil)).Elem()
}

func (i *keyUsageOptionsPtrType) ToKeyUsageOptionsPtrOutput() KeyUsageOptionsPtrOutput {
	return i.ToKeyUsageOptionsPtrOutputWithContext(context.Background())
}

func (i *keyUsageOptionsPtrType) ToKeyUsageOptionsPtrOutputWithContext(ctx context.Context) KeyUsageOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsageOptionsPtrOutput)
}

// KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
type KeyUsageOptionsOutput struct{ *pulumi.OutputState }

func (KeyUsageOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyUsageOptions)(nil)).Elem()
}

func (o KeyUsageOptionsOutput) ToKeyUsageOptionsOutput() KeyUsageOptionsOutput {
	return o
}

func (o KeyUsageOptionsOutput) ToKeyUsageOptionsOutputWithContext(ctx context.Context) KeyUsageOptionsOutput {
	return o
}

func (o KeyUsageOptionsOutput) ToKeyUsageOptionsPtrOutput() KeyUsageOptionsPtrOutput {
	return o.ToKeyUsageOptionsPtrOutputWithContext(context.Background())
}

func (o KeyUsageOptionsOutput) ToKeyUsageOptionsPtrOutputWithContext(ctx context.Context) KeyUsageOptionsPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *KeyUsageOptions {
		return &v
	}).(KeyUsageOptionsPtrOutput)
}

// The key may be used to sign certificates.
func (o KeyUsageOptionsOutput) CertSign() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.CertSign }).(pulumi.BoolPtrOutput)
}

// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
func (o KeyUsageOptionsOutput) ContentCommitment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.ContentCommitment }).(pulumi.BoolPtrOutput)
}

// The key may be used sign certificate revocation lists.
func (o KeyUsageOptionsOutput) CrlSign() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.CrlSign }).(pulumi.BoolPtrOutput)
}

// The key may be used to encipher data.
func (o KeyUsageOptionsOutput) DataEncipherment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.DataEncipherment }).(pulumi.BoolPtrOutput)
}

// The key may be used to decipher only.
func (o KeyUsageOptionsOutput) DecipherOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.DecipherOnly }).(pulumi.BoolPtrOutput)
}

// The key may be used for digital signatures.
func (o KeyUsageOptionsOutput) DigitalSignature() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.DigitalSignature }).(pulumi.BoolPtrOutput)
}

// The key may be used to encipher only.
func (o KeyUsageOptionsOutput) EncipherOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.EncipherOnly }).(pulumi.BoolPtrOutput)
}

// The key may be used in a key agreement protocol.
func (o KeyUsageOptionsOutput) KeyAgreement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.KeyAgreement }).(pulumi.BoolPtrOutput)
}

// The key may be used to encipher other keys.
func (o KeyUsageOptionsOutput) KeyEncipherment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KeyUsageOptions) *bool { return v.KeyEncipherment }).(pulumi.BoolPtrOutput)
}

type KeyUsageOptionsPtrOutput struct{ *pulumi.OutputState }

func (KeyUsageOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyUsageOptions)(nil)).Elem()
}

func (o KeyUsageOptionsPtrOutput) ToKeyUsageOptionsPtrOutput() KeyUsageOptionsPtrOutput {
	return o
}

func (o KeyUsageOptionsPtrOutput) ToKeyUsageOptionsPtrOutputWithContext(ctx context.Context) KeyUsageOptionsPtrOutput {
	return o
}

func (o KeyUsageOptionsPtrOutput) Elem() KeyUsageOptionsOutput {
	return o.ApplyT(func(v *KeyUsageOptions) KeyUsageOptions { return *v }).(KeyUsageOptionsOutput)
}

// The key may be used to sign certificates.
func (o KeyUsageOptionsPtrOutput) CertSign() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.CertSign
	}).(pulumi.BoolPtrOutput)
}

// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
func (o KeyUsageOptionsPtrOutput) ContentCommitment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.ContentCommitment
	}).(pulumi.BoolPtrOutput)
}

// The key may be used sign certificate revocation lists.
func (o KeyUsageOptionsPtrOutput) CrlSign() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.CrlSign
	}).(pulumi.BoolPtrOutput)
}

// The key may be used to encipher data.
func (o KeyUsageOptionsPtrOutput) DataEncipherment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.DataEncipherment
	}).(pulumi.BoolPtrOutput)
}

// The key may be used to decipher only.
func (o KeyUsageOptionsPtrOutput) DecipherOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.DecipherOnly
	}).(pulumi.BoolPtrOutput)
}

// The key may be used for digital signatures.
func (o KeyUsageOptionsPtrOutput) DigitalSignature() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.DigitalSignature
	}).(pulumi.BoolPtrOutput)
}

// The key may be used to encipher only.
func (o KeyUsageOptionsPtrOutput) EncipherOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EncipherOnly
	}).(pulumi.BoolPtrOutput)
}

// The key may be used in a key agreement protocol.
func (o KeyUsageOptionsPtrOutput) KeyAgreement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.KeyAgreement
	}).(pulumi.BoolPtrOutput)
}

// The key may be used to encipher other keys.
func (o KeyUsageOptionsPtrOutput) KeyEncipherment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptions) *bool {
		if v == nil {
			return nil
		}
		return v.KeyEncipherment
	}).(pulumi.BoolPtrOutput)
}

// KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
type KeyUsageOptionsResponse struct {
	// The key may be used to sign certificates.
	CertSign bool `pulumi:"certSign"`
	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	ContentCommitment bool `pulumi:"contentCommitment"`
	// The key may be used sign certificate revocation lists.
	CrlSign bool `pulumi:"crlSign"`
	// The key may be used to encipher data.
	DataEncipherment bool `pulumi:"dataEncipherment"`
	// The key may be used to decipher only.
	DecipherOnly bool `pulumi:"decipherOnly"`
	// The key may be used for digital signatures.
	DigitalSignature bool `pulumi:"digitalSignature"`
	// The key may be used to encipher only.
	EncipherOnly bool `pulumi:"encipherOnly"`
	// The key may be used in a key agreement protocol.
	KeyAgreement bool `pulumi:"keyAgreement"`
	// The key may be used to encipher other keys.
	KeyEncipherment bool `pulumi:"keyEncipherment"`
}

// KeyUsageOptionsResponseInput is an input type that accepts KeyUsageOptionsResponseArgs and KeyUsageOptionsResponseOutput values.
// You can construct a concrete instance of `KeyUsageOptionsResponseInput` via:
//
//          KeyUsageOptionsResponseArgs{...}
type KeyUsageOptionsResponseInput interface {
	pulumi.Input

	ToKeyUsageOptionsResponseOutput() KeyUsageOptionsResponseOutput
	ToKeyUsageOptionsResponseOutputWithContext(context.Context) KeyUsageOptionsResponseOutput
}

// KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
type KeyUsageOptionsResponseArgs struct {
	// The key may be used to sign certificates.
	CertSign pulumi.BoolInput `pulumi:"certSign"`
	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	ContentCommitment pulumi.BoolInput `pulumi:"contentCommitment"`
	// The key may be used sign certificate revocation lists.
	CrlSign pulumi.BoolInput `pulumi:"crlSign"`
	// The key may be used to encipher data.
	DataEncipherment pulumi.BoolInput `pulumi:"dataEncipherment"`
	// The key may be used to decipher only.
	DecipherOnly pulumi.BoolInput `pulumi:"decipherOnly"`
	// The key may be used for digital signatures.
	DigitalSignature pulumi.BoolInput `pulumi:"digitalSignature"`
	// The key may be used to encipher only.
	EncipherOnly pulumi.BoolInput `pulumi:"encipherOnly"`
	// The key may be used in a key agreement protocol.
	KeyAgreement pulumi.BoolInput `pulumi:"keyAgreement"`
	// The key may be used to encipher other keys.
	KeyEncipherment pulumi.BoolInput `pulumi:"keyEncipherment"`
}

func (KeyUsageOptionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyUsageOptionsResponse)(nil)).Elem()
}

func (i KeyUsageOptionsResponseArgs) ToKeyUsageOptionsResponseOutput() KeyUsageOptionsResponseOutput {
	return i.ToKeyUsageOptionsResponseOutputWithContext(context.Background())
}

func (i KeyUsageOptionsResponseArgs) ToKeyUsageOptionsResponseOutputWithContext(ctx context.Context) KeyUsageOptionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsageOptionsResponseOutput)
}

func (i KeyUsageOptionsResponseArgs) ToKeyUsageOptionsResponsePtrOutput() KeyUsageOptionsResponsePtrOutput {
	return i.ToKeyUsageOptionsResponsePtrOutputWithContext(context.Background())
}

func (i KeyUsageOptionsResponseArgs) ToKeyUsageOptionsResponsePtrOutputWithContext(ctx context.Context) KeyUsageOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsageOptionsResponseOutput).ToKeyUsageOptionsResponsePtrOutputWithContext(ctx)
}

// KeyUsageOptionsResponsePtrInput is an input type that accepts KeyUsageOptionsResponseArgs, KeyUsageOptionsResponsePtr and KeyUsageOptionsResponsePtrOutput values.
// You can construct a concrete instance of `KeyUsageOptionsResponsePtrInput` via:
//
//          KeyUsageOptionsResponseArgs{...}
//
//  or:
//
//          nil
type KeyUsageOptionsResponsePtrInput interface {
	pulumi.Input

	ToKeyUsageOptionsResponsePtrOutput() KeyUsageOptionsResponsePtrOutput
	ToKeyUsageOptionsResponsePtrOutputWithContext(context.Context) KeyUsageOptionsResponsePtrOutput
}

type keyUsageOptionsResponsePtrType KeyUsageOptionsResponseArgs

func KeyUsageOptionsResponsePtr(v *KeyUsageOptionsResponseArgs) KeyUsageOptionsResponsePtrInput {
	return (*keyUsageOptionsResponsePtrType)(v)
}

func (*keyUsageOptionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyUsageOptionsResponse)(nil)).Elem()
}

func (i *keyUsageOptionsResponsePtrType) ToKeyUsageOptionsResponsePtrOutput() KeyUsageOptionsResponsePtrOutput {
	return i.ToKeyUsageOptionsResponsePtrOutputWithContext(context.Background())
}

func (i *keyUsageOptionsResponsePtrType) ToKeyUsageOptionsResponsePtrOutputWithContext(ctx context.Context) KeyUsageOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsageOptionsResponsePtrOutput)
}

// KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
type KeyUsageOptionsResponseOutput struct{ *pulumi.OutputState }

func (KeyUsageOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyUsageOptionsResponse)(nil)).Elem()
}

func (o KeyUsageOptionsResponseOutput) ToKeyUsageOptionsResponseOutput() KeyUsageOptionsResponseOutput {
	return o
}

func (o KeyUsageOptionsResponseOutput) ToKeyUsageOptionsResponseOutputWithContext(ctx context.Context) KeyUsageOptionsResponseOutput {
	return o
}

func (o KeyUsageOptionsResponseOutput) ToKeyUsageOptionsResponsePtrOutput() KeyUsageOptionsResponsePtrOutput {
	return o.ToKeyUsageOptionsResponsePtrOutputWithContext(context.Background())
}

func (o KeyUsageOptionsResponseOutput) ToKeyUsageOptionsResponsePtrOutputWithContext(ctx context.Context) KeyUsageOptionsResponsePtrOutput {
	return o.ApplyT(func(v KeyUsageOptionsResponse) *KeyUsageOptionsResponse {
		return &v
	}).(KeyUsageOptionsResponsePtrOutput)
}

// The key may be used to sign certificates.
func (o KeyUsageOptionsResponseOutput) CertSign() pulumi.BoolOutput {
	return o.ApplyT(func(v KeyUsageOptionsResponse) bool { return v.CertSign }).(pulumi.BoolOutput)
}

// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
func (o KeyUsageOptionsResponseOutput) ContentCommitment() pulumi.BoolOutput {
	return o.ApplyT(func(v KeyUsageOptionsResponse) bool { return v.ContentCommitment }).(pulumi.BoolOutput)
}

// The key may be used sign certificate revocation lists.
func (o KeyUsageOptionsResponseOutput) CrlSign() pulumi.BoolOutput {
	return o.ApplyT(func(v KeyUsageOptionsResponse) bool { return v.CrlSign }).(pulumi.BoolOutput)
}

// The key may be used to encipher data.
func (o KeyUsageOptionsResponseOutput) DataEncipherment() pulumi.BoolOutput {
	return o.ApplyT(func(v KeyUsageOptionsResponse) bool { return v.DataEncipherment }).(pulumi.BoolOutput)
}

// The key may be used to decipher only.
func (o KeyUsageOptionsResponseOutput) DecipherOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v KeyUsageOptionsResponse) bool { return v.DecipherOnly }).(pulumi.BoolOutput)
}

// The key may be used for digital signatures.
func (o KeyUsageOptionsResponseOutput) DigitalSignature() pulumi.BoolOutput {
	return o.ApplyT(func(v KeyUsageOptionsResponse) bool { return v.DigitalSignature }).(pulumi.BoolOutput)
}

// The key may be used to encipher only.
func (o KeyUsageOptionsResponseOutput) EncipherOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v KeyUsageOptionsResponse) bool { return v.EncipherOnly }).(pulumi.BoolOutput)
}

// The key may be used in a key agreement protocol.
func (o KeyUsageOptionsResponseOutput) KeyAgreement() pulumi.BoolOutput {
	return o.ApplyT(func(v KeyUsageOptionsResponse) bool { return v.KeyAgreement }).(pulumi.BoolOutput)
}

// The key may be used to encipher other keys.
func (o KeyUsageOptionsResponseOutput) KeyEncipherment() pulumi.BoolOutput {
	return o.ApplyT(func(v KeyUsageOptionsResponse) bool { return v.KeyEncipherment }).(pulumi.BoolOutput)
}

type KeyUsageOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyUsageOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyUsageOptionsResponse)(nil)).Elem()
}

func (o KeyUsageOptionsResponsePtrOutput) ToKeyUsageOptionsResponsePtrOutput() KeyUsageOptionsResponsePtrOutput {
	return o
}

func (o KeyUsageOptionsResponsePtrOutput) ToKeyUsageOptionsResponsePtrOutputWithContext(ctx context.Context) KeyUsageOptionsResponsePtrOutput {
	return o
}

func (o KeyUsageOptionsResponsePtrOutput) Elem() KeyUsageOptionsResponseOutput {
	return o.ApplyT(func(v *KeyUsageOptionsResponse) KeyUsageOptionsResponse { return *v }).(KeyUsageOptionsResponseOutput)
}

// The key may be used to sign certificates.
func (o KeyUsageOptionsResponsePtrOutput) CertSign() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CertSign
	}).(pulumi.BoolPtrOutput)
}

// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
func (o KeyUsageOptionsResponsePtrOutput) ContentCommitment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ContentCommitment
	}).(pulumi.BoolPtrOutput)
}

// The key may be used sign certificate revocation lists.
func (o KeyUsageOptionsResponsePtrOutput) CrlSign() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CrlSign
	}).(pulumi.BoolPtrOutput)
}

// The key may be used to encipher data.
func (o KeyUsageOptionsResponsePtrOutput) DataEncipherment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.DataEncipherment
	}).(pulumi.BoolPtrOutput)
}

// The key may be used to decipher only.
func (o KeyUsageOptionsResponsePtrOutput) DecipherOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.DecipherOnly
	}).(pulumi.BoolPtrOutput)
}

// The key may be used for digital signatures.
func (o KeyUsageOptionsResponsePtrOutput) DigitalSignature() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.DigitalSignature
	}).(pulumi.BoolPtrOutput)
}

// The key may be used to encipher only.
func (o KeyUsageOptionsResponsePtrOutput) EncipherOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EncipherOnly
	}).(pulumi.BoolPtrOutput)
}

// The key may be used in a key agreement protocol.
func (o KeyUsageOptionsResponsePtrOutput) KeyAgreement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.KeyAgreement
	}).(pulumi.BoolPtrOutput)
}

// The key may be used to encipher other keys.
func (o KeyUsageOptionsResponsePtrOutput) KeyEncipherment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyUsageOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.KeyEncipherment
	}).(pulumi.BoolPtrOutput)
}

// A KeyUsage describes key usage values that may appear in an X.509 certificate.
type KeyUsageResponse struct {
	// Describes high-level ways in which a key may be used.
	BaseKeyUsage KeyUsageOptionsResponse `pulumi:"baseKeyUsage"`
	// Detailed scenarios in which a key may be used.
	ExtendedKeyUsage ExtendedKeyUsageOptionsResponse `pulumi:"extendedKeyUsage"`
	// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
	UnknownExtendedKeyUsages []ObjectIdResponse `pulumi:"unknownExtendedKeyUsages"`
}

// KeyUsageResponseInput is an input type that accepts KeyUsageResponseArgs and KeyUsageResponseOutput values.
// You can construct a concrete instance of `KeyUsageResponseInput` via:
//
//          KeyUsageResponseArgs{...}
type KeyUsageResponseInput interface {
	pulumi.Input

	ToKeyUsageResponseOutput() KeyUsageResponseOutput
	ToKeyUsageResponseOutputWithContext(context.Context) KeyUsageResponseOutput
}

// A KeyUsage describes key usage values that may appear in an X.509 certificate.
type KeyUsageResponseArgs struct {
	// Describes high-level ways in which a key may be used.
	BaseKeyUsage KeyUsageOptionsResponseInput `pulumi:"baseKeyUsage"`
	// Detailed scenarios in which a key may be used.
	ExtendedKeyUsage ExtendedKeyUsageOptionsResponseInput `pulumi:"extendedKeyUsage"`
	// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
	UnknownExtendedKeyUsages ObjectIdResponseArrayInput `pulumi:"unknownExtendedKeyUsages"`
}

func (KeyUsageResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyUsageResponse)(nil)).Elem()
}

func (i KeyUsageResponseArgs) ToKeyUsageResponseOutput() KeyUsageResponseOutput {
	return i.ToKeyUsageResponseOutputWithContext(context.Background())
}

func (i KeyUsageResponseArgs) ToKeyUsageResponseOutputWithContext(ctx context.Context) KeyUsageResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsageResponseOutput)
}

func (i KeyUsageResponseArgs) ToKeyUsageResponsePtrOutput() KeyUsageResponsePtrOutput {
	return i.ToKeyUsageResponsePtrOutputWithContext(context.Background())
}

func (i KeyUsageResponseArgs) ToKeyUsageResponsePtrOutputWithContext(ctx context.Context) KeyUsageResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsageResponseOutput).ToKeyUsageResponsePtrOutputWithContext(ctx)
}

// KeyUsageResponsePtrInput is an input type that accepts KeyUsageResponseArgs, KeyUsageResponsePtr and KeyUsageResponsePtrOutput values.
// You can construct a concrete instance of `KeyUsageResponsePtrInput` via:
//
//          KeyUsageResponseArgs{...}
//
//  or:
//
//          nil
type KeyUsageResponsePtrInput interface {
	pulumi.Input

	ToKeyUsageResponsePtrOutput() KeyUsageResponsePtrOutput
	ToKeyUsageResponsePtrOutputWithContext(context.Context) KeyUsageResponsePtrOutput
}

type keyUsageResponsePtrType KeyUsageResponseArgs

func KeyUsageResponsePtr(v *KeyUsageResponseArgs) KeyUsageResponsePtrInput {
	return (*keyUsageResponsePtrType)(v)
}

func (*keyUsageResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyUsageResponse)(nil)).Elem()
}

func (i *keyUsageResponsePtrType) ToKeyUsageResponsePtrOutput() KeyUsageResponsePtrOutput {
	return i.ToKeyUsageResponsePtrOutputWithContext(context.Background())
}

func (i *keyUsageResponsePtrType) ToKeyUsageResponsePtrOutputWithContext(ctx context.Context) KeyUsageResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyUsageResponsePtrOutput)
}

// A KeyUsage describes key usage values that may appear in an X.509 certificate.
type KeyUsageResponseOutput struct{ *pulumi.OutputState }

func (KeyUsageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyUsageResponse)(nil)).Elem()
}

func (o KeyUsageResponseOutput) ToKeyUsageResponseOutput() KeyUsageResponseOutput {
	return o
}

func (o KeyUsageResponseOutput) ToKeyUsageResponseOutputWithContext(ctx context.Context) KeyUsageResponseOutput {
	return o
}

func (o KeyUsageResponseOutput) ToKeyUsageResponsePtrOutput() KeyUsageResponsePtrOutput {
	return o.ToKeyUsageResponsePtrOutputWithContext(context.Background())
}

func (o KeyUsageResponseOutput) ToKeyUsageResponsePtrOutputWithContext(ctx context.Context) KeyUsageResponsePtrOutput {
	return o.ApplyT(func(v KeyUsageResponse) *KeyUsageResponse {
		return &v
	}).(KeyUsageResponsePtrOutput)
}

// Describes high-level ways in which a key may be used.
func (o KeyUsageResponseOutput) BaseKeyUsage() KeyUsageOptionsResponseOutput {
	return o.ApplyT(func(v KeyUsageResponse) KeyUsageOptionsResponse { return v.BaseKeyUsage }).(KeyUsageOptionsResponseOutput)
}

// Detailed scenarios in which a key may be used.
func (o KeyUsageResponseOutput) ExtendedKeyUsage() ExtendedKeyUsageOptionsResponseOutput {
	return o.ApplyT(func(v KeyUsageResponse) ExtendedKeyUsageOptionsResponse { return v.ExtendedKeyUsage }).(ExtendedKeyUsageOptionsResponseOutput)
}

// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
func (o KeyUsageResponseOutput) UnknownExtendedKeyUsages() ObjectIdResponseArrayOutput {
	return o.ApplyT(func(v KeyUsageResponse) []ObjectIdResponse { return v.UnknownExtendedKeyUsages }).(ObjectIdResponseArrayOutput)
}

type KeyUsageResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyUsageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyUsageResponse)(nil)).Elem()
}

func (o KeyUsageResponsePtrOutput) ToKeyUsageResponsePtrOutput() KeyUsageResponsePtrOutput {
	return o
}

func (o KeyUsageResponsePtrOutput) ToKeyUsageResponsePtrOutputWithContext(ctx context.Context) KeyUsageResponsePtrOutput {
	return o
}

func (o KeyUsageResponsePtrOutput) Elem() KeyUsageResponseOutput {
	return o.ApplyT(func(v *KeyUsageResponse) KeyUsageResponse { return *v }).(KeyUsageResponseOutput)
}

// Describes high-level ways in which a key may be used.
func (o KeyUsageResponsePtrOutput) BaseKeyUsage() KeyUsageOptionsResponsePtrOutput {
	return o.ApplyT(func(v *KeyUsageResponse) *KeyUsageOptionsResponse {
		if v == nil {
			return nil
		}
		return &v.BaseKeyUsage
	}).(KeyUsageOptionsResponsePtrOutput)
}

// Detailed scenarios in which a key may be used.
func (o KeyUsageResponsePtrOutput) ExtendedKeyUsage() ExtendedKeyUsageOptionsResponsePtrOutput {
	return o.ApplyT(func(v *KeyUsageResponse) *ExtendedKeyUsageOptionsResponse {
		if v == nil {
			return nil
		}
		return &v.ExtendedKeyUsage
	}).(ExtendedKeyUsageOptionsResponsePtrOutput)
}

// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
func (o KeyUsageResponsePtrOutput) UnknownExtendedKeyUsages() ObjectIdResponseArrayOutput {
	return o.ApplyT(func(v *KeyUsageResponse) []ObjectIdResponse {
		if v == nil {
			return nil
		}
		return v.UnknownExtendedKeyUsages
	}).(ObjectIdResponseArrayOutput)
}

// A Cloud KMS key configuration that a CertificateAuthority will use.
type KeyVersionSpec struct {
	// The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
	Algorithm *KeyVersionSpecAlgorithm `pulumi:"algorithm"`
	// The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
	CloudKmsKeyVersion *string `pulumi:"cloudKmsKeyVersion"`
}

// KeyVersionSpecInput is an input type that accepts KeyVersionSpecArgs and KeyVersionSpecOutput values.
// You can construct a concrete instance of `KeyVersionSpecInput` via:
//
//          KeyVersionSpecArgs{...}
type KeyVersionSpecInput interface {
	pulumi.Input

	ToKeyVersionSpecOutput() KeyVersionSpecOutput
	ToKeyVersionSpecOutputWithContext(context.Context) KeyVersionSpecOutput
}

// A Cloud KMS key configuration that a CertificateAuthority will use.
type KeyVersionSpecArgs struct {
	// The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
	Algorithm KeyVersionSpecAlgorithmPtrInput `pulumi:"algorithm"`
	// The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
	CloudKmsKeyVersion pulumi.StringPtrInput `pulumi:"cloudKmsKeyVersion"`
}

func (KeyVersionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVersionSpec)(nil)).Elem()
}

func (i KeyVersionSpecArgs) ToKeyVersionSpecOutput() KeyVersionSpecOutput {
	return i.ToKeyVersionSpecOutputWithContext(context.Background())
}

func (i KeyVersionSpecArgs) ToKeyVersionSpecOutputWithContext(ctx context.Context) KeyVersionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVersionSpecOutput)
}

func (i KeyVersionSpecArgs) ToKeyVersionSpecPtrOutput() KeyVersionSpecPtrOutput {
	return i.ToKeyVersionSpecPtrOutputWithContext(context.Background())
}

func (i KeyVersionSpecArgs) ToKeyVersionSpecPtrOutputWithContext(ctx context.Context) KeyVersionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVersionSpecOutput).ToKeyVersionSpecPtrOutputWithContext(ctx)
}

// KeyVersionSpecPtrInput is an input type that accepts KeyVersionSpecArgs, KeyVersionSpecPtr and KeyVersionSpecPtrOutput values.
// You can construct a concrete instance of `KeyVersionSpecPtrInput` via:
//
//          KeyVersionSpecArgs{...}
//
//  or:
//
//          nil
type KeyVersionSpecPtrInput interface {
	pulumi.Input

	ToKeyVersionSpecPtrOutput() KeyVersionSpecPtrOutput
	ToKeyVersionSpecPtrOutputWithContext(context.Context) KeyVersionSpecPtrOutput
}

type keyVersionSpecPtrType KeyVersionSpecArgs

func KeyVersionSpecPtr(v *KeyVersionSpecArgs) KeyVersionSpecPtrInput {
	return (*keyVersionSpecPtrType)(v)
}

func (*keyVersionSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVersionSpec)(nil)).Elem()
}

func (i *keyVersionSpecPtrType) ToKeyVersionSpecPtrOutput() KeyVersionSpecPtrOutput {
	return i.ToKeyVersionSpecPtrOutputWithContext(context.Background())
}

func (i *keyVersionSpecPtrType) ToKeyVersionSpecPtrOutputWithContext(ctx context.Context) KeyVersionSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVersionSpecPtrOutput)
}

// A Cloud KMS key configuration that a CertificateAuthority will use.
type KeyVersionSpecOutput struct{ *pulumi.OutputState }

func (KeyVersionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVersionSpec)(nil)).Elem()
}

func (o KeyVersionSpecOutput) ToKeyVersionSpecOutput() KeyVersionSpecOutput {
	return o
}

func (o KeyVersionSpecOutput) ToKeyVersionSpecOutputWithContext(ctx context.Context) KeyVersionSpecOutput {
	return o
}

func (o KeyVersionSpecOutput) ToKeyVersionSpecPtrOutput() KeyVersionSpecPtrOutput {
	return o.ToKeyVersionSpecPtrOutputWithContext(context.Background())
}

func (o KeyVersionSpecOutput) ToKeyVersionSpecPtrOutputWithContext(ctx context.Context) KeyVersionSpecPtrOutput {
	return o.ApplyT(func(v KeyVersionSpec) *KeyVersionSpec {
		return &v
	}).(KeyVersionSpecPtrOutput)
}

// The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
func (o KeyVersionSpecOutput) Algorithm() KeyVersionSpecAlgorithmPtrOutput {
	return o.ApplyT(func(v KeyVersionSpec) *KeyVersionSpecAlgorithm { return v.Algorithm }).(KeyVersionSpecAlgorithmPtrOutput)
}

// The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
func (o KeyVersionSpecOutput) CloudKmsKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVersionSpec) *string { return v.CloudKmsKeyVersion }).(pulumi.StringPtrOutput)
}

type KeyVersionSpecPtrOutput struct{ *pulumi.OutputState }

func (KeyVersionSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVersionSpec)(nil)).Elem()
}

func (o KeyVersionSpecPtrOutput) ToKeyVersionSpecPtrOutput() KeyVersionSpecPtrOutput {
	return o
}

func (o KeyVersionSpecPtrOutput) ToKeyVersionSpecPtrOutputWithContext(ctx context.Context) KeyVersionSpecPtrOutput {
	return o
}

func (o KeyVersionSpecPtrOutput) Elem() KeyVersionSpecOutput {
	return o.ApplyT(func(v *KeyVersionSpec) KeyVersionSpec { return *v }).(KeyVersionSpecOutput)
}

// The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
func (o KeyVersionSpecPtrOutput) Algorithm() KeyVersionSpecAlgorithmPtrOutput {
	return o.ApplyT(func(v *KeyVersionSpec) *KeyVersionSpecAlgorithm {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(KeyVersionSpecAlgorithmPtrOutput)
}

// The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
func (o KeyVersionSpecPtrOutput) CloudKmsKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVersionSpec) *string {
		if v == nil {
			return nil
		}
		return v.CloudKmsKeyVersion
	}).(pulumi.StringPtrOutput)
}

// A Cloud KMS key configuration that a CertificateAuthority will use.
type KeyVersionSpecResponse struct {
	// The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
	Algorithm string `pulumi:"algorithm"`
	// The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
	CloudKmsKeyVersion string `pulumi:"cloudKmsKeyVersion"`
}

// KeyVersionSpecResponseInput is an input type that accepts KeyVersionSpecResponseArgs and KeyVersionSpecResponseOutput values.
// You can construct a concrete instance of `KeyVersionSpecResponseInput` via:
//
//          KeyVersionSpecResponseArgs{...}
type KeyVersionSpecResponseInput interface {
	pulumi.Input

	ToKeyVersionSpecResponseOutput() KeyVersionSpecResponseOutput
	ToKeyVersionSpecResponseOutputWithContext(context.Context) KeyVersionSpecResponseOutput
}

// A Cloud KMS key configuration that a CertificateAuthority will use.
type KeyVersionSpecResponseArgs struct {
	// The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	// The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
	CloudKmsKeyVersion pulumi.StringInput `pulumi:"cloudKmsKeyVersion"`
}

func (KeyVersionSpecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVersionSpecResponse)(nil)).Elem()
}

func (i KeyVersionSpecResponseArgs) ToKeyVersionSpecResponseOutput() KeyVersionSpecResponseOutput {
	return i.ToKeyVersionSpecResponseOutputWithContext(context.Background())
}

func (i KeyVersionSpecResponseArgs) ToKeyVersionSpecResponseOutputWithContext(ctx context.Context) KeyVersionSpecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVersionSpecResponseOutput)
}

func (i KeyVersionSpecResponseArgs) ToKeyVersionSpecResponsePtrOutput() KeyVersionSpecResponsePtrOutput {
	return i.ToKeyVersionSpecResponsePtrOutputWithContext(context.Background())
}

func (i KeyVersionSpecResponseArgs) ToKeyVersionSpecResponsePtrOutputWithContext(ctx context.Context) KeyVersionSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVersionSpecResponseOutput).ToKeyVersionSpecResponsePtrOutputWithContext(ctx)
}

// KeyVersionSpecResponsePtrInput is an input type that accepts KeyVersionSpecResponseArgs, KeyVersionSpecResponsePtr and KeyVersionSpecResponsePtrOutput values.
// You can construct a concrete instance of `KeyVersionSpecResponsePtrInput` via:
//
//          KeyVersionSpecResponseArgs{...}
//
//  or:
//
//          nil
type KeyVersionSpecResponsePtrInput interface {
	pulumi.Input

	ToKeyVersionSpecResponsePtrOutput() KeyVersionSpecResponsePtrOutput
	ToKeyVersionSpecResponsePtrOutputWithContext(context.Context) KeyVersionSpecResponsePtrOutput
}

type keyVersionSpecResponsePtrType KeyVersionSpecResponseArgs

func KeyVersionSpecResponsePtr(v *KeyVersionSpecResponseArgs) KeyVersionSpecResponsePtrInput {
	return (*keyVersionSpecResponsePtrType)(v)
}

func (*keyVersionSpecResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVersionSpecResponse)(nil)).Elem()
}

func (i *keyVersionSpecResponsePtrType) ToKeyVersionSpecResponsePtrOutput() KeyVersionSpecResponsePtrOutput {
	return i.ToKeyVersionSpecResponsePtrOutputWithContext(context.Background())
}

func (i *keyVersionSpecResponsePtrType) ToKeyVersionSpecResponsePtrOutputWithContext(ctx context.Context) KeyVersionSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVersionSpecResponsePtrOutput)
}

// A Cloud KMS key configuration that a CertificateAuthority will use.
type KeyVersionSpecResponseOutput struct{ *pulumi.OutputState }

func (KeyVersionSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVersionSpecResponse)(nil)).Elem()
}

func (o KeyVersionSpecResponseOutput) ToKeyVersionSpecResponseOutput() KeyVersionSpecResponseOutput {
	return o
}

func (o KeyVersionSpecResponseOutput) ToKeyVersionSpecResponseOutputWithContext(ctx context.Context) KeyVersionSpecResponseOutput {
	return o
}

func (o KeyVersionSpecResponseOutput) ToKeyVersionSpecResponsePtrOutput() KeyVersionSpecResponsePtrOutput {
	return o.ToKeyVersionSpecResponsePtrOutputWithContext(context.Background())
}

func (o KeyVersionSpecResponseOutput) ToKeyVersionSpecResponsePtrOutputWithContext(ctx context.Context) KeyVersionSpecResponsePtrOutput {
	return o.ApplyT(func(v KeyVersionSpecResponse) *KeyVersionSpecResponse {
		return &v
	}).(KeyVersionSpecResponsePtrOutput)
}

// The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
func (o KeyVersionSpecResponseOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVersionSpecResponse) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
func (o KeyVersionSpecResponseOutput) CloudKmsKeyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVersionSpecResponse) string { return v.CloudKmsKeyVersion }).(pulumi.StringOutput)
}

type KeyVersionSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVersionSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVersionSpecResponse)(nil)).Elem()
}

func (o KeyVersionSpecResponsePtrOutput) ToKeyVersionSpecResponsePtrOutput() KeyVersionSpecResponsePtrOutput {
	return o
}

func (o KeyVersionSpecResponsePtrOutput) ToKeyVersionSpecResponsePtrOutputWithContext(ctx context.Context) KeyVersionSpecResponsePtrOutput {
	return o
}

func (o KeyVersionSpecResponsePtrOutput) Elem() KeyVersionSpecResponseOutput {
	return o.ApplyT(func(v *KeyVersionSpecResponse) KeyVersionSpecResponse { return *v }).(KeyVersionSpecResponseOutput)
}

// The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
func (o KeyVersionSpecResponsePtrOutput) Algorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVersionSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Algorithm
	}).(pulumi.StringPtrOutput)
}

// The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
func (o KeyVersionSpecResponsePtrOutput) CloudKmsKeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVersionSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CloudKmsKeyVersion
	}).(pulumi.StringPtrOutput)
}

// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
type ObjectId struct {
	// The parts of an OID path. The most significant parts of the path come first.
	ObjectIdPath []int `pulumi:"objectIdPath"`
}

// ObjectIdInput is an input type that accepts ObjectIdArgs and ObjectIdOutput values.
// You can construct a concrete instance of `ObjectIdInput` via:
//
//          ObjectIdArgs{...}
type ObjectIdInput interface {
	pulumi.Input

	ToObjectIdOutput() ObjectIdOutput
	ToObjectIdOutputWithContext(context.Context) ObjectIdOutput
}

// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
type ObjectIdArgs struct {
	// The parts of an OID path. The most significant parts of the path come first.
	ObjectIdPath pulumi.IntArrayInput `pulumi:"objectIdPath"`
}

func (ObjectIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectId)(nil)).Elem()
}

func (i ObjectIdArgs) ToObjectIdOutput() ObjectIdOutput {
	return i.ToObjectIdOutputWithContext(context.Background())
}

func (i ObjectIdArgs) ToObjectIdOutputWithContext(ctx context.Context) ObjectIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectIdOutput)
}

// ObjectIdArrayInput is an input type that accepts ObjectIdArray and ObjectIdArrayOutput values.
// You can construct a concrete instance of `ObjectIdArrayInput` via:
//
//          ObjectIdArray{ ObjectIdArgs{...} }
type ObjectIdArrayInput interface {
	pulumi.Input

	ToObjectIdArrayOutput() ObjectIdArrayOutput
	ToObjectIdArrayOutputWithContext(context.Context) ObjectIdArrayOutput
}

type ObjectIdArray []ObjectIdInput

func (ObjectIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectId)(nil)).Elem()
}

func (i ObjectIdArray) ToObjectIdArrayOutput() ObjectIdArrayOutput {
	return i.ToObjectIdArrayOutputWithContext(context.Background())
}

func (i ObjectIdArray) ToObjectIdArrayOutputWithContext(ctx context.Context) ObjectIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectIdArrayOutput)
}

// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
type ObjectIdOutput struct{ *pulumi.OutputState }

func (ObjectIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectId)(nil)).Elem()
}

func (o ObjectIdOutput) ToObjectIdOutput() ObjectIdOutput {
	return o
}

func (o ObjectIdOutput) ToObjectIdOutputWithContext(ctx context.Context) ObjectIdOutput {
	return o
}

// The parts of an OID path. The most significant parts of the path come first.
func (o ObjectIdOutput) ObjectIdPath() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ObjectId) []int { return v.ObjectIdPath }).(pulumi.IntArrayOutput)
}

type ObjectIdArrayOutput struct{ *pulumi.OutputState }

func (ObjectIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectId)(nil)).Elem()
}

func (o ObjectIdArrayOutput) ToObjectIdArrayOutput() ObjectIdArrayOutput {
	return o
}

func (o ObjectIdArrayOutput) ToObjectIdArrayOutputWithContext(ctx context.Context) ObjectIdArrayOutput {
	return o
}

func (o ObjectIdArrayOutput) Index(i pulumi.IntInput) ObjectIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectId {
		return vs[0].([]ObjectId)[vs[1].(int)]
	}).(ObjectIdOutput)
}

// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
type ObjectIdResponse struct {
	// The parts of an OID path. The most significant parts of the path come first.
	ObjectIdPath []int `pulumi:"objectIdPath"`
}

// ObjectIdResponseInput is an input type that accepts ObjectIdResponseArgs and ObjectIdResponseOutput values.
// You can construct a concrete instance of `ObjectIdResponseInput` via:
//
//          ObjectIdResponseArgs{...}
type ObjectIdResponseInput interface {
	pulumi.Input

	ToObjectIdResponseOutput() ObjectIdResponseOutput
	ToObjectIdResponseOutputWithContext(context.Context) ObjectIdResponseOutput
}

// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
type ObjectIdResponseArgs struct {
	// The parts of an OID path. The most significant parts of the path come first.
	ObjectIdPath pulumi.IntArrayInput `pulumi:"objectIdPath"`
}

func (ObjectIdResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectIdResponse)(nil)).Elem()
}

func (i ObjectIdResponseArgs) ToObjectIdResponseOutput() ObjectIdResponseOutput {
	return i.ToObjectIdResponseOutputWithContext(context.Background())
}

func (i ObjectIdResponseArgs) ToObjectIdResponseOutputWithContext(ctx context.Context) ObjectIdResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectIdResponseOutput)
}

// ObjectIdResponseArrayInput is an input type that accepts ObjectIdResponseArray and ObjectIdResponseArrayOutput values.
// You can construct a concrete instance of `ObjectIdResponseArrayInput` via:
//
//          ObjectIdResponseArray{ ObjectIdResponseArgs{...} }
type ObjectIdResponseArrayInput interface {
	pulumi.Input

	ToObjectIdResponseArrayOutput() ObjectIdResponseArrayOutput
	ToObjectIdResponseArrayOutputWithContext(context.Context) ObjectIdResponseArrayOutput
}

type ObjectIdResponseArray []ObjectIdResponseInput

func (ObjectIdResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectIdResponse)(nil)).Elem()
}

func (i ObjectIdResponseArray) ToObjectIdResponseArrayOutput() ObjectIdResponseArrayOutput {
	return i.ToObjectIdResponseArrayOutputWithContext(context.Background())
}

func (i ObjectIdResponseArray) ToObjectIdResponseArrayOutputWithContext(ctx context.Context) ObjectIdResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectIdResponseArrayOutput)
}

// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
type ObjectIdResponseOutput struct{ *pulumi.OutputState }

func (ObjectIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectIdResponse)(nil)).Elem()
}

func (o ObjectIdResponseOutput) ToObjectIdResponseOutput() ObjectIdResponseOutput {
	return o
}

func (o ObjectIdResponseOutput) ToObjectIdResponseOutputWithContext(ctx context.Context) ObjectIdResponseOutput {
	return o
}

// The parts of an OID path. The most significant parts of the path come first.
func (o ObjectIdResponseOutput) ObjectIdPath() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ObjectIdResponse) []int { return v.ObjectIdPath }).(pulumi.IntArrayOutput)
}

type ObjectIdResponseArrayOutput struct{ *pulumi.OutputState }

func (ObjectIdResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectIdResponse)(nil)).Elem()
}

func (o ObjectIdResponseArrayOutput) ToObjectIdResponseArrayOutput() ObjectIdResponseArrayOutput {
	return o
}

func (o ObjectIdResponseArrayOutput) ToObjectIdResponseArrayOutputWithContext(ctx context.Context) ObjectIdResponseArrayOutput {
	return o
}

func (o ObjectIdResponseArrayOutput) Index(i pulumi.IntInput) ObjectIdResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectIdResponse {
		return vs[0].([]ObjectIdResponse)[vs[1].(int)]
	}).(ObjectIdResponseOutput)
}

// A PublicKey describes a public key.
type PublicKey struct {
	// The format of the public key.
	Format PublicKeyFormat `pulumi:"format"`
	// A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field.
	Key string `pulumi:"key"`
}

// PublicKeyInput is an input type that accepts PublicKeyArgs and PublicKeyOutput values.
// You can construct a concrete instance of `PublicKeyInput` via:
//
//          PublicKeyArgs{...}
type PublicKeyInput interface {
	pulumi.Input

	ToPublicKeyOutput() PublicKeyOutput
	ToPublicKeyOutputWithContext(context.Context) PublicKeyOutput
}

// A PublicKey describes a public key.
type PublicKeyArgs struct {
	// The format of the public key.
	Format PublicKeyFormatInput `pulumi:"format"`
	// A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field.
	Key pulumi.StringInput `pulumi:"key"`
}

func (PublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicKey)(nil)).Elem()
}

func (i PublicKeyArgs) ToPublicKeyOutput() PublicKeyOutput {
	return i.ToPublicKeyOutputWithContext(context.Background())
}

func (i PublicKeyArgs) ToPublicKeyOutputWithContext(ctx context.Context) PublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicKeyOutput)
}

func (i PublicKeyArgs) ToPublicKeyPtrOutput() PublicKeyPtrOutput {
	return i.ToPublicKeyPtrOutputWithContext(context.Background())
}

func (i PublicKeyArgs) ToPublicKeyPtrOutputWithContext(ctx context.Context) PublicKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicKeyOutput).ToPublicKeyPtrOutputWithContext(ctx)
}

// PublicKeyPtrInput is an input type that accepts PublicKeyArgs, PublicKeyPtr and PublicKeyPtrOutput values.
// You can construct a concrete instance of `PublicKeyPtrInput` via:
//
//          PublicKeyArgs{...}
//
//  or:
//
//          nil
type PublicKeyPtrInput interface {
	pulumi.Input

	ToPublicKeyPtrOutput() PublicKeyPtrOutput
	ToPublicKeyPtrOutputWithContext(context.Context) PublicKeyPtrOutput
}

type publicKeyPtrType PublicKeyArgs

func PublicKeyPtr(v *PublicKeyArgs) PublicKeyPtrInput {
	return (*publicKeyPtrType)(v)
}

func (*publicKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicKey)(nil)).Elem()
}

func (i *publicKeyPtrType) ToPublicKeyPtrOutput() PublicKeyPtrOutput {
	return i.ToPublicKeyPtrOutputWithContext(context.Background())
}

func (i *publicKeyPtrType) ToPublicKeyPtrOutputWithContext(ctx context.Context) PublicKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicKeyPtrOutput)
}

// A PublicKey describes a public key.
type PublicKeyOutput struct{ *pulumi.OutputState }

func (PublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicKey)(nil)).Elem()
}

func (o PublicKeyOutput) ToPublicKeyOutput() PublicKeyOutput {
	return o
}

func (o PublicKeyOutput) ToPublicKeyOutputWithContext(ctx context.Context) PublicKeyOutput {
	return o
}

func (o PublicKeyOutput) ToPublicKeyPtrOutput() PublicKeyPtrOutput {
	return o.ToPublicKeyPtrOutputWithContext(context.Background())
}

func (o PublicKeyOutput) ToPublicKeyPtrOutputWithContext(ctx context.Context) PublicKeyPtrOutput {
	return o.ApplyT(func(v PublicKey) *PublicKey {
		return &v
	}).(PublicKeyPtrOutput)
}

// The format of the public key.
func (o PublicKeyOutput) Format() PublicKeyFormatOutput {
	return o.ApplyT(func(v PublicKey) PublicKeyFormat { return v.Format }).(PublicKeyFormatOutput)
}

// A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field.
func (o PublicKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PublicKey) string { return v.Key }).(pulumi.StringOutput)
}

type PublicKeyPtrOutput struct{ *pulumi.OutputState }

func (PublicKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicKey)(nil)).Elem()
}

func (o PublicKeyPtrOutput) ToPublicKeyPtrOutput() PublicKeyPtrOutput {
	return o
}

func (o PublicKeyPtrOutput) ToPublicKeyPtrOutputWithContext(ctx context.Context) PublicKeyPtrOutput {
	return o
}

func (o PublicKeyPtrOutput) Elem() PublicKeyOutput {
	return o.ApplyT(func(v *PublicKey) PublicKey { return *v }).(PublicKeyOutput)
}

// The format of the public key.
func (o PublicKeyPtrOutput) Format() PublicKeyFormatPtrOutput {
	return o.ApplyT(func(v *PublicKey) *PublicKeyFormat {
		if v == nil {
			return nil
		}
		return &v.Format
	}).(PublicKeyFormatPtrOutput)
}

// A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field.
func (o PublicKeyPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicKey) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// A PublicKey describes a public key.
type PublicKeyResponse struct {
	// The format of the public key.
	Format string `pulumi:"format"`
	// A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field.
	Key string `pulumi:"key"`
}

// PublicKeyResponseInput is an input type that accepts PublicKeyResponseArgs and PublicKeyResponseOutput values.
// You can construct a concrete instance of `PublicKeyResponseInput` via:
//
//          PublicKeyResponseArgs{...}
type PublicKeyResponseInput interface {
	pulumi.Input

	ToPublicKeyResponseOutput() PublicKeyResponseOutput
	ToPublicKeyResponseOutputWithContext(context.Context) PublicKeyResponseOutput
}

// A PublicKey describes a public key.
type PublicKeyResponseArgs struct {
	// The format of the public key.
	Format pulumi.StringInput `pulumi:"format"`
	// A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field.
	Key pulumi.StringInput `pulumi:"key"`
}

func (PublicKeyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicKeyResponse)(nil)).Elem()
}

func (i PublicKeyResponseArgs) ToPublicKeyResponseOutput() PublicKeyResponseOutput {
	return i.ToPublicKeyResponseOutputWithContext(context.Background())
}

func (i PublicKeyResponseArgs) ToPublicKeyResponseOutputWithContext(ctx context.Context) PublicKeyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicKeyResponseOutput)
}

func (i PublicKeyResponseArgs) ToPublicKeyResponsePtrOutput() PublicKeyResponsePtrOutput {
	return i.ToPublicKeyResponsePtrOutputWithContext(context.Background())
}

func (i PublicKeyResponseArgs) ToPublicKeyResponsePtrOutputWithContext(ctx context.Context) PublicKeyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicKeyResponseOutput).ToPublicKeyResponsePtrOutputWithContext(ctx)
}

// PublicKeyResponsePtrInput is an input type that accepts PublicKeyResponseArgs, PublicKeyResponsePtr and PublicKeyResponsePtrOutput values.
// You can construct a concrete instance of `PublicKeyResponsePtrInput` via:
//
//          PublicKeyResponseArgs{...}
//
//  or:
//
//          nil
type PublicKeyResponsePtrInput interface {
	pulumi.Input

	ToPublicKeyResponsePtrOutput() PublicKeyResponsePtrOutput
	ToPublicKeyResponsePtrOutputWithContext(context.Context) PublicKeyResponsePtrOutput
}

type publicKeyResponsePtrType PublicKeyResponseArgs

func PublicKeyResponsePtr(v *PublicKeyResponseArgs) PublicKeyResponsePtrInput {
	return (*publicKeyResponsePtrType)(v)
}

func (*publicKeyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicKeyResponse)(nil)).Elem()
}

func (i *publicKeyResponsePtrType) ToPublicKeyResponsePtrOutput() PublicKeyResponsePtrOutput {
	return i.ToPublicKeyResponsePtrOutputWithContext(context.Background())
}

func (i *publicKeyResponsePtrType) ToPublicKeyResponsePtrOutputWithContext(ctx context.Context) PublicKeyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicKeyResponsePtrOutput)
}

// A PublicKey describes a public key.
type PublicKeyResponseOutput struct{ *pulumi.OutputState }

func (PublicKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicKeyResponse)(nil)).Elem()
}

func (o PublicKeyResponseOutput) ToPublicKeyResponseOutput() PublicKeyResponseOutput {
	return o
}

func (o PublicKeyResponseOutput) ToPublicKeyResponseOutputWithContext(ctx context.Context) PublicKeyResponseOutput {
	return o
}

func (o PublicKeyResponseOutput) ToPublicKeyResponsePtrOutput() PublicKeyResponsePtrOutput {
	return o.ToPublicKeyResponsePtrOutputWithContext(context.Background())
}

func (o PublicKeyResponseOutput) ToPublicKeyResponsePtrOutputWithContext(ctx context.Context) PublicKeyResponsePtrOutput {
	return o.ApplyT(func(v PublicKeyResponse) *PublicKeyResponse {
		return &v
	}).(PublicKeyResponsePtrOutput)
}

// The format of the public key.
func (o PublicKeyResponseOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v PublicKeyResponse) string { return v.Format }).(pulumi.StringOutput)
}

// A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field.
func (o PublicKeyResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PublicKeyResponse) string { return v.Key }).(pulumi.StringOutput)
}

type PublicKeyResponsePtrOutput struct{ *pulumi.OutputState }

func (PublicKeyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicKeyResponse)(nil)).Elem()
}

func (o PublicKeyResponsePtrOutput) ToPublicKeyResponsePtrOutput() PublicKeyResponsePtrOutput {
	return o
}

func (o PublicKeyResponsePtrOutput) ToPublicKeyResponsePtrOutputWithContext(ctx context.Context) PublicKeyResponsePtrOutput {
	return o
}

func (o PublicKeyResponsePtrOutput) Elem() PublicKeyResponseOutput {
	return o.ApplyT(func(v *PublicKeyResponse) PublicKeyResponse { return *v }).(PublicKeyResponseOutput)
}

// The format of the public key.
func (o PublicKeyResponsePtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicKeyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Format
	}).(pulumi.StringPtrOutput)
}

// A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field.
func (o PublicKeyResponsePtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicKeyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Options relating to the publication of each CertificateAuthority's CA certificate and CRLs and their inclusion as extensions in issued Certificates. The options set here apply to certificates issued by any CertificateAuthority in the CaPool.
type PublishingOptions struct {
	// Optional. When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access" X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.
	PublishCaCert *bool `pulumi:"publishCaCert"`
	// Optional. When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
	PublishCrl *bool `pulumi:"publishCrl"`
}

// PublishingOptionsInput is an input type that accepts PublishingOptionsArgs and PublishingOptionsOutput values.
// You can construct a concrete instance of `PublishingOptionsInput` via:
//
//          PublishingOptionsArgs{...}
type PublishingOptionsInput interface {
	pulumi.Input

	ToPublishingOptionsOutput() PublishingOptionsOutput
	ToPublishingOptionsOutputWithContext(context.Context) PublishingOptionsOutput
}

// Options relating to the publication of each CertificateAuthority's CA certificate and CRLs and their inclusion as extensions in issued Certificates. The options set here apply to certificates issued by any CertificateAuthority in the CaPool.
type PublishingOptionsArgs struct {
	// Optional. When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access" X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.
	PublishCaCert pulumi.BoolPtrInput `pulumi:"publishCaCert"`
	// Optional. When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
	PublishCrl pulumi.BoolPtrInput `pulumi:"publishCrl"`
}

func (PublishingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublishingOptions)(nil)).Elem()
}

func (i PublishingOptionsArgs) ToPublishingOptionsOutput() PublishingOptionsOutput {
	return i.ToPublishingOptionsOutputWithContext(context.Background())
}

func (i PublishingOptionsArgs) ToPublishingOptionsOutputWithContext(ctx context.Context) PublishingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishingOptionsOutput)
}

func (i PublishingOptionsArgs) ToPublishingOptionsPtrOutput() PublishingOptionsPtrOutput {
	return i.ToPublishingOptionsPtrOutputWithContext(context.Background())
}

func (i PublishingOptionsArgs) ToPublishingOptionsPtrOutputWithContext(ctx context.Context) PublishingOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishingOptionsOutput).ToPublishingOptionsPtrOutputWithContext(ctx)
}

// PublishingOptionsPtrInput is an input type that accepts PublishingOptionsArgs, PublishingOptionsPtr and PublishingOptionsPtrOutput values.
// You can construct a concrete instance of `PublishingOptionsPtrInput` via:
//
//          PublishingOptionsArgs{...}
//
//  or:
//
//          nil
type PublishingOptionsPtrInput interface {
	pulumi.Input

	ToPublishingOptionsPtrOutput() PublishingOptionsPtrOutput
	ToPublishingOptionsPtrOutputWithContext(context.Context) PublishingOptionsPtrOutput
}

type publishingOptionsPtrType PublishingOptionsArgs

func PublishingOptionsPtr(v *PublishingOptionsArgs) PublishingOptionsPtrInput {
	return (*publishingOptionsPtrType)(v)
}

func (*publishingOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PublishingOptions)(nil)).Elem()
}

func (i *publishingOptionsPtrType) ToPublishingOptionsPtrOutput() PublishingOptionsPtrOutput {
	return i.ToPublishingOptionsPtrOutputWithContext(context.Background())
}

func (i *publishingOptionsPtrType) ToPublishingOptionsPtrOutputWithContext(ctx context.Context) PublishingOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishingOptionsPtrOutput)
}

// Options relating to the publication of each CertificateAuthority's CA certificate and CRLs and their inclusion as extensions in issued Certificates. The options set here apply to certificates issued by any CertificateAuthority in the CaPool.
type PublishingOptionsOutput struct{ *pulumi.OutputState }

func (PublishingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublishingOptions)(nil)).Elem()
}

func (o PublishingOptionsOutput) ToPublishingOptionsOutput() PublishingOptionsOutput {
	return o
}

func (o PublishingOptionsOutput) ToPublishingOptionsOutputWithContext(ctx context.Context) PublishingOptionsOutput {
	return o
}

func (o PublishingOptionsOutput) ToPublishingOptionsPtrOutput() PublishingOptionsPtrOutput {
	return o.ToPublishingOptionsPtrOutputWithContext(context.Background())
}

func (o PublishingOptionsOutput) ToPublishingOptionsPtrOutputWithContext(ctx context.Context) PublishingOptionsPtrOutput {
	return o.ApplyT(func(v PublishingOptions) *PublishingOptions {
		return &v
	}).(PublishingOptionsPtrOutput)
}

// Optional. When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access" X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.
func (o PublishingOptionsOutput) PublishCaCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PublishingOptions) *bool { return v.PublishCaCert }).(pulumi.BoolPtrOutput)
}

// Optional. When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
func (o PublishingOptionsOutput) PublishCrl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PublishingOptions) *bool { return v.PublishCrl }).(pulumi.BoolPtrOutput)
}

type PublishingOptionsPtrOutput struct{ *pulumi.OutputState }

func (PublishingOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublishingOptions)(nil)).Elem()
}

func (o PublishingOptionsPtrOutput) ToPublishingOptionsPtrOutput() PublishingOptionsPtrOutput {
	return o
}

func (o PublishingOptionsPtrOutput) ToPublishingOptionsPtrOutputWithContext(ctx context.Context) PublishingOptionsPtrOutput {
	return o
}

func (o PublishingOptionsPtrOutput) Elem() PublishingOptionsOutput {
	return o.ApplyT(func(v *PublishingOptions) PublishingOptions { return *v }).(PublishingOptionsOutput)
}

// Optional. When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access" X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.
func (o PublishingOptionsPtrOutput) PublishCaCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PublishingOptions) *bool {
		if v == nil {
			return nil
		}
		return v.PublishCaCert
	}).(pulumi.BoolPtrOutput)
}

// Optional. When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
func (o PublishingOptionsPtrOutput) PublishCrl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PublishingOptions) *bool {
		if v == nil {
			return nil
		}
		return v.PublishCrl
	}).(pulumi.BoolPtrOutput)
}

// Options relating to the publication of each CertificateAuthority's CA certificate and CRLs and their inclusion as extensions in issued Certificates. The options set here apply to certificates issued by any CertificateAuthority in the CaPool.
type PublishingOptionsResponse struct {
	// Optional. When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access" X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.
	PublishCaCert bool `pulumi:"publishCaCert"`
	// Optional. When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
	PublishCrl bool `pulumi:"publishCrl"`
}

// PublishingOptionsResponseInput is an input type that accepts PublishingOptionsResponseArgs and PublishingOptionsResponseOutput values.
// You can construct a concrete instance of `PublishingOptionsResponseInput` via:
//
//          PublishingOptionsResponseArgs{...}
type PublishingOptionsResponseInput interface {
	pulumi.Input

	ToPublishingOptionsResponseOutput() PublishingOptionsResponseOutput
	ToPublishingOptionsResponseOutputWithContext(context.Context) PublishingOptionsResponseOutput
}

// Options relating to the publication of each CertificateAuthority's CA certificate and CRLs and their inclusion as extensions in issued Certificates. The options set here apply to certificates issued by any CertificateAuthority in the CaPool.
type PublishingOptionsResponseArgs struct {
	// Optional. When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access" X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.
	PublishCaCert pulumi.BoolInput `pulumi:"publishCaCert"`
	// Optional. When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
	PublishCrl pulumi.BoolInput `pulumi:"publishCrl"`
}

func (PublishingOptionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublishingOptionsResponse)(nil)).Elem()
}

func (i PublishingOptionsResponseArgs) ToPublishingOptionsResponseOutput() PublishingOptionsResponseOutput {
	return i.ToPublishingOptionsResponseOutputWithContext(context.Background())
}

func (i PublishingOptionsResponseArgs) ToPublishingOptionsResponseOutputWithContext(ctx context.Context) PublishingOptionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishingOptionsResponseOutput)
}

func (i PublishingOptionsResponseArgs) ToPublishingOptionsResponsePtrOutput() PublishingOptionsResponsePtrOutput {
	return i.ToPublishingOptionsResponsePtrOutputWithContext(context.Background())
}

func (i PublishingOptionsResponseArgs) ToPublishingOptionsResponsePtrOutputWithContext(ctx context.Context) PublishingOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishingOptionsResponseOutput).ToPublishingOptionsResponsePtrOutputWithContext(ctx)
}

// PublishingOptionsResponsePtrInput is an input type that accepts PublishingOptionsResponseArgs, PublishingOptionsResponsePtr and PublishingOptionsResponsePtrOutput values.
// You can construct a concrete instance of `PublishingOptionsResponsePtrInput` via:
//
//          PublishingOptionsResponseArgs{...}
//
//  or:
//
//          nil
type PublishingOptionsResponsePtrInput interface {
	pulumi.Input

	ToPublishingOptionsResponsePtrOutput() PublishingOptionsResponsePtrOutput
	ToPublishingOptionsResponsePtrOutputWithContext(context.Context) PublishingOptionsResponsePtrOutput
}

type publishingOptionsResponsePtrType PublishingOptionsResponseArgs

func PublishingOptionsResponsePtr(v *PublishingOptionsResponseArgs) PublishingOptionsResponsePtrInput {
	return (*publishingOptionsResponsePtrType)(v)
}

func (*publishingOptionsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PublishingOptionsResponse)(nil)).Elem()
}

func (i *publishingOptionsResponsePtrType) ToPublishingOptionsResponsePtrOutput() PublishingOptionsResponsePtrOutput {
	return i.ToPublishingOptionsResponsePtrOutputWithContext(context.Background())
}

func (i *publishingOptionsResponsePtrType) ToPublishingOptionsResponsePtrOutputWithContext(ctx context.Context) PublishingOptionsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublishingOptionsResponsePtrOutput)
}

// Options relating to the publication of each CertificateAuthority's CA certificate and CRLs and their inclusion as extensions in issued Certificates. The options set here apply to certificates issued by any CertificateAuthority in the CaPool.
type PublishingOptionsResponseOutput struct{ *pulumi.OutputState }

func (PublishingOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublishingOptionsResponse)(nil)).Elem()
}

func (o PublishingOptionsResponseOutput) ToPublishingOptionsResponseOutput() PublishingOptionsResponseOutput {
	return o
}

func (o PublishingOptionsResponseOutput) ToPublishingOptionsResponseOutputWithContext(ctx context.Context) PublishingOptionsResponseOutput {
	return o
}

func (o PublishingOptionsResponseOutput) ToPublishingOptionsResponsePtrOutput() PublishingOptionsResponsePtrOutput {
	return o.ToPublishingOptionsResponsePtrOutputWithContext(context.Background())
}

func (o PublishingOptionsResponseOutput) ToPublishingOptionsResponsePtrOutputWithContext(ctx context.Context) PublishingOptionsResponsePtrOutput {
	return o.ApplyT(func(v PublishingOptionsResponse) *PublishingOptionsResponse {
		return &v
	}).(PublishingOptionsResponsePtrOutput)
}

// Optional. When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access" X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.
func (o PublishingOptionsResponseOutput) PublishCaCert() pulumi.BoolOutput {
	return o.ApplyT(func(v PublishingOptionsResponse) bool { return v.PublishCaCert }).(pulumi.BoolOutput)
}

// Optional. When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
func (o PublishingOptionsResponseOutput) PublishCrl() pulumi.BoolOutput {
	return o.ApplyT(func(v PublishingOptionsResponse) bool { return v.PublishCrl }).(pulumi.BoolOutput)
}

type PublishingOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (PublishingOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublishingOptionsResponse)(nil)).Elem()
}

func (o PublishingOptionsResponsePtrOutput) ToPublishingOptionsResponsePtrOutput() PublishingOptionsResponsePtrOutput {
	return o
}

func (o PublishingOptionsResponsePtrOutput) ToPublishingOptionsResponsePtrOutputWithContext(ctx context.Context) PublishingOptionsResponsePtrOutput {
	return o
}

func (o PublishingOptionsResponsePtrOutput) Elem() PublishingOptionsResponseOutput {
	return o.ApplyT(func(v *PublishingOptionsResponse) PublishingOptionsResponse { return *v }).(PublishingOptionsResponseOutput)
}

// Optional. When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access" X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.
func (o PublishingOptionsResponsePtrOutput) PublishCaCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PublishingOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.PublishCaCert
	}).(pulumi.BoolPtrOutput)
}

// Optional. When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.
func (o PublishingOptionsResponsePtrOutput) PublishCrl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PublishingOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.PublishCrl
	}).(pulumi.BoolPtrOutput)
}

// Describes fields that are relavent to the revocation of a Certificate.
type RevocationDetailsResponse struct {
	// Indicates why a Certificate was revoked.
	RevocationState string `pulumi:"revocationState"`
	// The time at which this Certificate was revoked.
	RevocationTime string `pulumi:"revocationTime"`
}

// RevocationDetailsResponseInput is an input type that accepts RevocationDetailsResponseArgs and RevocationDetailsResponseOutput values.
// You can construct a concrete instance of `RevocationDetailsResponseInput` via:
//
//          RevocationDetailsResponseArgs{...}
type RevocationDetailsResponseInput interface {
	pulumi.Input

	ToRevocationDetailsResponseOutput() RevocationDetailsResponseOutput
	ToRevocationDetailsResponseOutputWithContext(context.Context) RevocationDetailsResponseOutput
}

// Describes fields that are relavent to the revocation of a Certificate.
type RevocationDetailsResponseArgs struct {
	// Indicates why a Certificate was revoked.
	RevocationState pulumi.StringInput `pulumi:"revocationState"`
	// The time at which this Certificate was revoked.
	RevocationTime pulumi.StringInput `pulumi:"revocationTime"`
}

func (RevocationDetailsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RevocationDetailsResponse)(nil)).Elem()
}

func (i RevocationDetailsResponseArgs) ToRevocationDetailsResponseOutput() RevocationDetailsResponseOutput {
	return i.ToRevocationDetailsResponseOutputWithContext(context.Background())
}

func (i RevocationDetailsResponseArgs) ToRevocationDetailsResponseOutputWithContext(ctx context.Context) RevocationDetailsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RevocationDetailsResponseOutput)
}

func (i RevocationDetailsResponseArgs) ToRevocationDetailsResponsePtrOutput() RevocationDetailsResponsePtrOutput {
	return i.ToRevocationDetailsResponsePtrOutputWithContext(context.Background())
}

func (i RevocationDetailsResponseArgs) ToRevocationDetailsResponsePtrOutputWithContext(ctx context.Context) RevocationDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RevocationDetailsResponseOutput).ToRevocationDetailsResponsePtrOutputWithContext(ctx)
}

// RevocationDetailsResponsePtrInput is an input type that accepts RevocationDetailsResponseArgs, RevocationDetailsResponsePtr and RevocationDetailsResponsePtrOutput values.
// You can construct a concrete instance of `RevocationDetailsResponsePtrInput` via:
//
//          RevocationDetailsResponseArgs{...}
//
//  or:
//
//          nil
type RevocationDetailsResponsePtrInput interface {
	pulumi.Input

	ToRevocationDetailsResponsePtrOutput() RevocationDetailsResponsePtrOutput
	ToRevocationDetailsResponsePtrOutputWithContext(context.Context) RevocationDetailsResponsePtrOutput
}

type revocationDetailsResponsePtrType RevocationDetailsResponseArgs

func RevocationDetailsResponsePtr(v *RevocationDetailsResponseArgs) RevocationDetailsResponsePtrInput {
	return (*revocationDetailsResponsePtrType)(v)
}

func (*revocationDetailsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RevocationDetailsResponse)(nil)).Elem()
}

func (i *revocationDetailsResponsePtrType) ToRevocationDetailsResponsePtrOutput() RevocationDetailsResponsePtrOutput {
	return i.ToRevocationDetailsResponsePtrOutputWithContext(context.Background())
}

func (i *revocationDetailsResponsePtrType) ToRevocationDetailsResponsePtrOutputWithContext(ctx context.Context) RevocationDetailsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RevocationDetailsResponsePtrOutput)
}

// Describes fields that are relavent to the revocation of a Certificate.
type RevocationDetailsResponseOutput struct{ *pulumi.OutputState }

func (RevocationDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RevocationDetailsResponse)(nil)).Elem()
}

func (o RevocationDetailsResponseOutput) ToRevocationDetailsResponseOutput() RevocationDetailsResponseOutput {
	return o
}

func (o RevocationDetailsResponseOutput) ToRevocationDetailsResponseOutputWithContext(ctx context.Context) RevocationDetailsResponseOutput {
	return o
}

func (o RevocationDetailsResponseOutput) ToRevocationDetailsResponsePtrOutput() RevocationDetailsResponsePtrOutput {
	return o.ToRevocationDetailsResponsePtrOutputWithContext(context.Background())
}

func (o RevocationDetailsResponseOutput) ToRevocationDetailsResponsePtrOutputWithContext(ctx context.Context) RevocationDetailsResponsePtrOutput {
	return o.ApplyT(func(v RevocationDetailsResponse) *RevocationDetailsResponse {
		return &v
	}).(RevocationDetailsResponsePtrOutput)
}

// Indicates why a Certificate was revoked.
func (o RevocationDetailsResponseOutput) RevocationState() pulumi.StringOutput {
	return o.ApplyT(func(v RevocationDetailsResponse) string { return v.RevocationState }).(pulumi.StringOutput)
}

// The time at which this Certificate was revoked.
func (o RevocationDetailsResponseOutput) RevocationTime() pulumi.StringOutput {
	return o.ApplyT(func(v RevocationDetailsResponse) string { return v.RevocationTime }).(pulumi.StringOutput)
}

type RevocationDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (RevocationDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RevocationDetailsResponse)(nil)).Elem()
}

func (o RevocationDetailsResponsePtrOutput) ToRevocationDetailsResponsePtrOutput() RevocationDetailsResponsePtrOutput {
	return o
}

func (o RevocationDetailsResponsePtrOutput) ToRevocationDetailsResponsePtrOutputWithContext(ctx context.Context) RevocationDetailsResponsePtrOutput {
	return o
}

func (o RevocationDetailsResponsePtrOutput) Elem() RevocationDetailsResponseOutput {
	return o.ApplyT(func(v *RevocationDetailsResponse) RevocationDetailsResponse { return *v }).(RevocationDetailsResponseOutput)
}

// Indicates why a Certificate was revoked.
func (o RevocationDetailsResponsePtrOutput) RevocationState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RevocationDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RevocationState
	}).(pulumi.StringPtrOutput)
}

// The time at which this Certificate was revoked.
func (o RevocationDetailsResponsePtrOutput) RevocationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RevocationDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RevocationTime
	}).(pulumi.StringPtrOutput)
}

// Describes an RSA key that may be used in a Certificate issued from a CaPool.
type RsaKeyType struct {
	// Optional. The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the service will not enforce an explicit upper bound on RSA modulus sizes.
	MaxModulusSize *string `pulumi:"maxModulusSize"`
	// Optional. The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the service-level min RSA modulus size will continue to apply.
	MinModulusSize *string `pulumi:"minModulusSize"`
}

// RsaKeyTypeInput is an input type that accepts RsaKeyTypeArgs and RsaKeyTypeOutput values.
// You can construct a concrete instance of `RsaKeyTypeInput` via:
//
//          RsaKeyTypeArgs{...}
type RsaKeyTypeInput interface {
	pulumi.Input

	ToRsaKeyTypeOutput() RsaKeyTypeOutput
	ToRsaKeyTypeOutputWithContext(context.Context) RsaKeyTypeOutput
}

// Describes an RSA key that may be used in a Certificate issued from a CaPool.
type RsaKeyTypeArgs struct {
	// Optional. The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the service will not enforce an explicit upper bound on RSA modulus sizes.
	MaxModulusSize pulumi.StringPtrInput `pulumi:"maxModulusSize"`
	// Optional. The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the service-level min RSA modulus size will continue to apply.
	MinModulusSize pulumi.StringPtrInput `pulumi:"minModulusSize"`
}

func (RsaKeyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RsaKeyType)(nil)).Elem()
}

func (i RsaKeyTypeArgs) ToRsaKeyTypeOutput() RsaKeyTypeOutput {
	return i.ToRsaKeyTypeOutputWithContext(context.Background())
}

func (i RsaKeyTypeArgs) ToRsaKeyTypeOutputWithContext(ctx context.Context) RsaKeyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RsaKeyTypeOutput)
}

func (i RsaKeyTypeArgs) ToRsaKeyTypePtrOutput() RsaKeyTypePtrOutput {
	return i.ToRsaKeyTypePtrOutputWithContext(context.Background())
}

func (i RsaKeyTypeArgs) ToRsaKeyTypePtrOutputWithContext(ctx context.Context) RsaKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RsaKeyTypeOutput).ToRsaKeyTypePtrOutputWithContext(ctx)
}

// RsaKeyTypePtrInput is an input type that accepts RsaKeyTypeArgs, RsaKeyTypePtr and RsaKeyTypePtrOutput values.
// You can construct a concrete instance of `RsaKeyTypePtrInput` via:
//
//          RsaKeyTypeArgs{...}
//
//  or:
//
//          nil
type RsaKeyTypePtrInput interface {
	pulumi.Input

	ToRsaKeyTypePtrOutput() RsaKeyTypePtrOutput
	ToRsaKeyTypePtrOutputWithContext(context.Context) RsaKeyTypePtrOutput
}

type rsaKeyTypePtrType RsaKeyTypeArgs

func RsaKeyTypePtr(v *RsaKeyTypeArgs) RsaKeyTypePtrInput {
	return (*rsaKeyTypePtrType)(v)
}

func (*rsaKeyTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RsaKeyType)(nil)).Elem()
}

func (i *rsaKeyTypePtrType) ToRsaKeyTypePtrOutput() RsaKeyTypePtrOutput {
	return i.ToRsaKeyTypePtrOutputWithContext(context.Background())
}

func (i *rsaKeyTypePtrType) ToRsaKeyTypePtrOutputWithContext(ctx context.Context) RsaKeyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RsaKeyTypePtrOutput)
}

// Describes an RSA key that may be used in a Certificate issued from a CaPool.
type RsaKeyTypeOutput struct{ *pulumi.OutputState }

func (RsaKeyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RsaKeyType)(nil)).Elem()
}

func (o RsaKeyTypeOutput) ToRsaKeyTypeOutput() RsaKeyTypeOutput {
	return o
}

func (o RsaKeyTypeOutput) ToRsaKeyTypeOutputWithContext(ctx context.Context) RsaKeyTypeOutput {
	return o
}

func (o RsaKeyTypeOutput) ToRsaKeyTypePtrOutput() RsaKeyTypePtrOutput {
	return o.ToRsaKeyTypePtrOutputWithContext(context.Background())
}

func (o RsaKeyTypeOutput) ToRsaKeyTypePtrOutputWithContext(ctx context.Context) RsaKeyTypePtrOutput {
	return o.ApplyT(func(v RsaKeyType) *RsaKeyType {
		return &v
	}).(RsaKeyTypePtrOutput)
}

// Optional. The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the service will not enforce an explicit upper bound on RSA modulus sizes.
func (o RsaKeyTypeOutput) MaxModulusSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RsaKeyType) *string { return v.MaxModulusSize }).(pulumi.StringPtrOutput)
}

// Optional. The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the service-level min RSA modulus size will continue to apply.
func (o RsaKeyTypeOutput) MinModulusSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RsaKeyType) *string { return v.MinModulusSize }).(pulumi.StringPtrOutput)
}

type RsaKeyTypePtrOutput struct{ *pulumi.OutputState }

func (RsaKeyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RsaKeyType)(nil)).Elem()
}

func (o RsaKeyTypePtrOutput) ToRsaKeyTypePtrOutput() RsaKeyTypePtrOutput {
	return o
}

func (o RsaKeyTypePtrOutput) ToRsaKeyTypePtrOutputWithContext(ctx context.Context) RsaKeyTypePtrOutput {
	return o
}

func (o RsaKeyTypePtrOutput) Elem() RsaKeyTypeOutput {
	return o.ApplyT(func(v *RsaKeyType) RsaKeyType { return *v }).(RsaKeyTypeOutput)
}

// Optional. The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the service will not enforce an explicit upper bound on RSA modulus sizes.
func (o RsaKeyTypePtrOutput) MaxModulusSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RsaKeyType) *string {
		if v == nil {
			return nil
		}
		return v.MaxModulusSize
	}).(pulumi.StringPtrOutput)
}

// Optional. The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the service-level min RSA modulus size will continue to apply.
func (o RsaKeyTypePtrOutput) MinModulusSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RsaKeyType) *string {
		if v == nil {
			return nil
		}
		return v.MinModulusSize
	}).(pulumi.StringPtrOutput)
}

// Describes an RSA key that may be used in a Certificate issued from a CaPool.
type RsaKeyTypeResponse struct {
	// Optional. The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the service will not enforce an explicit upper bound on RSA modulus sizes.
	MaxModulusSize string `pulumi:"maxModulusSize"`
	// Optional. The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the service-level min RSA modulus size will continue to apply.
	MinModulusSize string `pulumi:"minModulusSize"`
}

// RsaKeyTypeResponseInput is an input type that accepts RsaKeyTypeResponseArgs and RsaKeyTypeResponseOutput values.
// You can construct a concrete instance of `RsaKeyTypeResponseInput` via:
//
//          RsaKeyTypeResponseArgs{...}
type RsaKeyTypeResponseInput interface {
	pulumi.Input

	ToRsaKeyTypeResponseOutput() RsaKeyTypeResponseOutput
	ToRsaKeyTypeResponseOutputWithContext(context.Context) RsaKeyTypeResponseOutput
}

// Describes an RSA key that may be used in a Certificate issued from a CaPool.
type RsaKeyTypeResponseArgs struct {
	// Optional. The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the service will not enforce an explicit upper bound on RSA modulus sizes.
	MaxModulusSize pulumi.StringInput `pulumi:"maxModulusSize"`
	// Optional. The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the service-level min RSA modulus size will continue to apply.
	MinModulusSize pulumi.StringInput `pulumi:"minModulusSize"`
}

func (RsaKeyTypeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RsaKeyTypeResponse)(nil)).Elem()
}

func (i RsaKeyTypeResponseArgs) ToRsaKeyTypeResponseOutput() RsaKeyTypeResponseOutput {
	return i.ToRsaKeyTypeResponseOutputWithContext(context.Background())
}

func (i RsaKeyTypeResponseArgs) ToRsaKeyTypeResponseOutputWithContext(ctx context.Context) RsaKeyTypeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RsaKeyTypeResponseOutput)
}

// Describes an RSA key that may be used in a Certificate issued from a CaPool.
type RsaKeyTypeResponseOutput struct{ *pulumi.OutputState }

func (RsaKeyTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RsaKeyTypeResponse)(nil)).Elem()
}

func (o RsaKeyTypeResponseOutput) ToRsaKeyTypeResponseOutput() RsaKeyTypeResponseOutput {
	return o
}

func (o RsaKeyTypeResponseOutput) ToRsaKeyTypeResponseOutputWithContext(ctx context.Context) RsaKeyTypeResponseOutput {
	return o
}

// Optional. The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the service will not enforce an explicit upper bound on RSA modulus sizes.
func (o RsaKeyTypeResponseOutput) MaxModulusSize() pulumi.StringOutput {
	return o.ApplyT(func(v RsaKeyTypeResponse) string { return v.MaxModulusSize }).(pulumi.StringOutput)
}

// Optional. The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the service-level min RSA modulus size will continue to apply.
func (o RsaKeyTypeResponseOutput) MinModulusSize() pulumi.StringOutput {
	return o.ApplyT(func(v RsaKeyTypeResponse) string { return v.MinModulusSize }).(pulumi.StringOutput)
}

// Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
type Subject struct {
	// The "common name" of the subject.
	CommonName *string `pulumi:"commonName"`
	// The country code of the subject.
	CountryCode *string `pulumi:"countryCode"`
	// The locality or city of the subject.
	Locality *string `pulumi:"locality"`
	// The organization of the subject.
	Organization *string `pulumi:"organization"`
	// The organizational_unit of the subject.
	OrganizationalUnit *string `pulumi:"organizationalUnit"`
	// The postal code of the subject.
	PostalCode *string `pulumi:"postalCode"`
	// The province, territory, or regional state of the subject.
	Province *string `pulumi:"province"`
	// The street address of the subject.
	StreetAddress *string `pulumi:"streetAddress"`
}

// SubjectInput is an input type that accepts SubjectArgs and SubjectOutput values.
// You can construct a concrete instance of `SubjectInput` via:
//
//          SubjectArgs{...}
type SubjectInput interface {
	pulumi.Input

	ToSubjectOutput() SubjectOutput
	ToSubjectOutputWithContext(context.Context) SubjectOutput
}

// Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
type SubjectArgs struct {
	// The "common name" of the subject.
	CommonName pulumi.StringPtrInput `pulumi:"commonName"`
	// The country code of the subject.
	CountryCode pulumi.StringPtrInput `pulumi:"countryCode"`
	// The locality or city of the subject.
	Locality pulumi.StringPtrInput `pulumi:"locality"`
	// The organization of the subject.
	Organization pulumi.StringPtrInput `pulumi:"organization"`
	// The organizational_unit of the subject.
	OrganizationalUnit pulumi.StringPtrInput `pulumi:"organizationalUnit"`
	// The postal code of the subject.
	PostalCode pulumi.StringPtrInput `pulumi:"postalCode"`
	// The province, territory, or regional state of the subject.
	Province pulumi.StringPtrInput `pulumi:"province"`
	// The street address of the subject.
	StreetAddress pulumi.StringPtrInput `pulumi:"streetAddress"`
}

func (SubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (i SubjectArgs) ToSubjectOutput() SubjectOutput {
	return i.ToSubjectOutputWithContext(context.Background())
}

func (i SubjectArgs) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectOutput)
}

func (i SubjectArgs) ToSubjectPtrOutput() SubjectPtrOutput {
	return i.ToSubjectPtrOutputWithContext(context.Background())
}

func (i SubjectArgs) ToSubjectPtrOutputWithContext(ctx context.Context) SubjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectOutput).ToSubjectPtrOutputWithContext(ctx)
}

// SubjectPtrInput is an input type that accepts SubjectArgs, SubjectPtr and SubjectPtrOutput values.
// You can construct a concrete instance of `SubjectPtrInput` via:
//
//          SubjectArgs{...}
//
//  or:
//
//          nil
type SubjectPtrInput interface {
	pulumi.Input

	ToSubjectPtrOutput() SubjectPtrOutput
	ToSubjectPtrOutputWithContext(context.Context) SubjectPtrOutput
}

type subjectPtrType SubjectArgs

func SubjectPtr(v *SubjectArgs) SubjectPtrInput {
	return (*subjectPtrType)(v)
}

func (*subjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Subject)(nil)).Elem()
}

func (i *subjectPtrType) ToSubjectPtrOutput() SubjectPtrOutput {
	return i.ToSubjectPtrOutputWithContext(context.Background())
}

func (i *subjectPtrType) ToSubjectPtrOutputWithContext(ctx context.Context) SubjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectPtrOutput)
}

// Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
type SubjectOutput struct{ *pulumi.OutputState }

func (SubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Subject)(nil)).Elem()
}

func (o SubjectOutput) ToSubjectOutput() SubjectOutput {
	return o
}

func (o SubjectOutput) ToSubjectOutputWithContext(ctx context.Context) SubjectOutput {
	return o
}

func (o SubjectOutput) ToSubjectPtrOutput() SubjectPtrOutput {
	return o.ToSubjectPtrOutputWithContext(context.Background())
}

func (o SubjectOutput) ToSubjectPtrOutputWithContext(ctx context.Context) SubjectPtrOutput {
	return o.ApplyT(func(v Subject) *Subject {
		return &v
	}).(SubjectPtrOutput)
}

// The "common name" of the subject.
func (o SubjectOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.CommonName }).(pulumi.StringPtrOutput)
}

// The country code of the subject.
func (o SubjectOutput) CountryCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.CountryCode }).(pulumi.StringPtrOutput)
}

// The locality or city of the subject.
func (o SubjectOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.Locality }).(pulumi.StringPtrOutput)
}

// The organization of the subject.
func (o SubjectOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.Organization }).(pulumi.StringPtrOutput)
}

// The organizational_unit of the subject.
func (o SubjectOutput) OrganizationalUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.OrganizationalUnit }).(pulumi.StringPtrOutput)
}

// The postal code of the subject.
func (o SubjectOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.PostalCode }).(pulumi.StringPtrOutput)
}

// The province, territory, or regional state of the subject.
func (o SubjectOutput) Province() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.Province }).(pulumi.StringPtrOutput)
}

// The street address of the subject.
func (o SubjectOutput) StreetAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subject) *string { return v.StreetAddress }).(pulumi.StringPtrOutput)
}

type SubjectPtrOutput struct{ *pulumi.OutputState }

func (SubjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subject)(nil)).Elem()
}

func (o SubjectPtrOutput) ToSubjectPtrOutput() SubjectPtrOutput {
	return o
}

func (o SubjectPtrOutput) ToSubjectPtrOutputWithContext(ctx context.Context) SubjectPtrOutput {
	return o
}

func (o SubjectPtrOutput) Elem() SubjectOutput {
	return o.ApplyT(func(v *Subject) Subject { return *v }).(SubjectOutput)
}

// The "common name" of the subject.
func (o SubjectPtrOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subject) *string {
		if v == nil {
			return nil
		}
		return v.CommonName
	}).(pulumi.StringPtrOutput)
}

// The country code of the subject.
func (o SubjectPtrOutput) CountryCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subject) *string {
		if v == nil {
			return nil
		}
		return v.CountryCode
	}).(pulumi.StringPtrOutput)
}

// The locality or city of the subject.
func (o SubjectPtrOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subject) *string {
		if v == nil {
			return nil
		}
		return v.Locality
	}).(pulumi.StringPtrOutput)
}

// The organization of the subject.
func (o SubjectPtrOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subject) *string {
		if v == nil {
			return nil
		}
		return v.Organization
	}).(pulumi.StringPtrOutput)
}

// The organizational_unit of the subject.
func (o SubjectPtrOutput) OrganizationalUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subject) *string {
		if v == nil {
			return nil
		}
		return v.OrganizationalUnit
	}).(pulumi.StringPtrOutput)
}

// The postal code of the subject.
func (o SubjectPtrOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subject) *string {
		if v == nil {
			return nil
		}
		return v.PostalCode
	}).(pulumi.StringPtrOutput)
}

// The province, territory, or regional state of the subject.
func (o SubjectPtrOutput) Province() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subject) *string {
		if v == nil {
			return nil
		}
		return v.Province
	}).(pulumi.StringPtrOutput)
}

// The street address of the subject.
func (o SubjectPtrOutput) StreetAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subject) *string {
		if v == nil {
			return nil
		}
		return v.StreetAddress
	}).(pulumi.StringPtrOutput)
}

// SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the "common name" in the distinguished name).
type SubjectAltNames struct {
	// Contains additional subject alternative name values.
	CustomSans []X509Extension `pulumi:"customSans"`
	// Contains only valid, fully-qualified host names.
	DnsNames []string `pulumi:"dnsNames"`
	// Contains only valid RFC 2822 E-mail addresses.
	EmailAddresses []string `pulumi:"emailAddresses"`
	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	IpAddresses []string `pulumi:"ipAddresses"`
	// Contains only valid RFC 3986 URIs.
	Uris []string `pulumi:"uris"`
}

// SubjectAltNamesInput is an input type that accepts SubjectAltNamesArgs and SubjectAltNamesOutput values.
// You can construct a concrete instance of `SubjectAltNamesInput` via:
//
//          SubjectAltNamesArgs{...}
type SubjectAltNamesInput interface {
	pulumi.Input

	ToSubjectAltNamesOutput() SubjectAltNamesOutput
	ToSubjectAltNamesOutputWithContext(context.Context) SubjectAltNamesOutput
}

// SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the "common name" in the distinguished name).
type SubjectAltNamesArgs struct {
	// Contains additional subject alternative name values.
	CustomSans X509ExtensionArrayInput `pulumi:"customSans"`
	// Contains only valid, fully-qualified host names.
	DnsNames pulumi.StringArrayInput `pulumi:"dnsNames"`
	// Contains only valid RFC 2822 E-mail addresses.
	EmailAddresses pulumi.StringArrayInput `pulumi:"emailAddresses"`
	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	IpAddresses pulumi.StringArrayInput `pulumi:"ipAddresses"`
	// Contains only valid RFC 3986 URIs.
	Uris pulumi.StringArrayInput `pulumi:"uris"`
}

func (SubjectAltNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAltNames)(nil)).Elem()
}

func (i SubjectAltNamesArgs) ToSubjectAltNamesOutput() SubjectAltNamesOutput {
	return i.ToSubjectAltNamesOutputWithContext(context.Background())
}

func (i SubjectAltNamesArgs) ToSubjectAltNamesOutputWithContext(ctx context.Context) SubjectAltNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAltNamesOutput)
}

func (i SubjectAltNamesArgs) ToSubjectAltNamesPtrOutput() SubjectAltNamesPtrOutput {
	return i.ToSubjectAltNamesPtrOutputWithContext(context.Background())
}

func (i SubjectAltNamesArgs) ToSubjectAltNamesPtrOutputWithContext(ctx context.Context) SubjectAltNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAltNamesOutput).ToSubjectAltNamesPtrOutputWithContext(ctx)
}

// SubjectAltNamesPtrInput is an input type that accepts SubjectAltNamesArgs, SubjectAltNamesPtr and SubjectAltNamesPtrOutput values.
// You can construct a concrete instance of `SubjectAltNamesPtrInput` via:
//
//          SubjectAltNamesArgs{...}
//
//  or:
//
//          nil
type SubjectAltNamesPtrInput interface {
	pulumi.Input

	ToSubjectAltNamesPtrOutput() SubjectAltNamesPtrOutput
	ToSubjectAltNamesPtrOutputWithContext(context.Context) SubjectAltNamesPtrOutput
}

type subjectAltNamesPtrType SubjectAltNamesArgs

func SubjectAltNamesPtr(v *SubjectAltNamesArgs) SubjectAltNamesPtrInput {
	return (*subjectAltNamesPtrType)(v)
}

func (*subjectAltNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectAltNames)(nil)).Elem()
}

func (i *subjectAltNamesPtrType) ToSubjectAltNamesPtrOutput() SubjectAltNamesPtrOutput {
	return i.ToSubjectAltNamesPtrOutputWithContext(context.Background())
}

func (i *subjectAltNamesPtrType) ToSubjectAltNamesPtrOutputWithContext(ctx context.Context) SubjectAltNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAltNamesPtrOutput)
}

// SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the "common name" in the distinguished name).
type SubjectAltNamesOutput struct{ *pulumi.OutputState }

func (SubjectAltNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAltNames)(nil)).Elem()
}

func (o SubjectAltNamesOutput) ToSubjectAltNamesOutput() SubjectAltNamesOutput {
	return o
}

func (o SubjectAltNamesOutput) ToSubjectAltNamesOutputWithContext(ctx context.Context) SubjectAltNamesOutput {
	return o
}

func (o SubjectAltNamesOutput) ToSubjectAltNamesPtrOutput() SubjectAltNamesPtrOutput {
	return o.ToSubjectAltNamesPtrOutputWithContext(context.Background())
}

func (o SubjectAltNamesOutput) ToSubjectAltNamesPtrOutputWithContext(ctx context.Context) SubjectAltNamesPtrOutput {
	return o.ApplyT(func(v SubjectAltNames) *SubjectAltNames {
		return &v
	}).(SubjectAltNamesPtrOutput)
}

// Contains additional subject alternative name values.
func (o SubjectAltNamesOutput) CustomSans() X509ExtensionArrayOutput {
	return o.ApplyT(func(v SubjectAltNames) []X509Extension { return v.CustomSans }).(X509ExtensionArrayOutput)
}

// Contains only valid, fully-qualified host names.
func (o SubjectAltNamesOutput) DnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubjectAltNames) []string { return v.DnsNames }).(pulumi.StringArrayOutput)
}

// Contains only valid RFC 2822 E-mail addresses.
func (o SubjectAltNamesOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubjectAltNames) []string { return v.EmailAddresses }).(pulumi.StringArrayOutput)
}

// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
func (o SubjectAltNamesOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubjectAltNames) []string { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// Contains only valid RFC 3986 URIs.
func (o SubjectAltNamesOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubjectAltNames) []string { return v.Uris }).(pulumi.StringArrayOutput)
}

type SubjectAltNamesPtrOutput struct{ *pulumi.OutputState }

func (SubjectAltNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectAltNames)(nil)).Elem()
}

func (o SubjectAltNamesPtrOutput) ToSubjectAltNamesPtrOutput() SubjectAltNamesPtrOutput {
	return o
}

func (o SubjectAltNamesPtrOutput) ToSubjectAltNamesPtrOutputWithContext(ctx context.Context) SubjectAltNamesPtrOutput {
	return o
}

func (o SubjectAltNamesPtrOutput) Elem() SubjectAltNamesOutput {
	return o.ApplyT(func(v *SubjectAltNames) SubjectAltNames { return *v }).(SubjectAltNamesOutput)
}

// Contains additional subject alternative name values.
func (o SubjectAltNamesPtrOutput) CustomSans() X509ExtensionArrayOutput {
	return o.ApplyT(func(v *SubjectAltNames) []X509Extension {
		if v == nil {
			return nil
		}
		return v.CustomSans
	}).(X509ExtensionArrayOutput)
}

// Contains only valid, fully-qualified host names.
func (o SubjectAltNamesPtrOutput) DnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubjectAltNames) []string {
		if v == nil {
			return nil
		}
		return v.DnsNames
	}).(pulumi.StringArrayOutput)
}

// Contains only valid RFC 2822 E-mail addresses.
func (o SubjectAltNamesPtrOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubjectAltNames) []string {
		if v == nil {
			return nil
		}
		return v.EmailAddresses
	}).(pulumi.StringArrayOutput)
}

// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
func (o SubjectAltNamesPtrOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubjectAltNames) []string {
		if v == nil {
			return nil
		}
		return v.IpAddresses
	}).(pulumi.StringArrayOutput)
}

// Contains only valid RFC 3986 URIs.
func (o SubjectAltNamesPtrOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubjectAltNames) []string {
		if v == nil {
			return nil
		}
		return v.Uris
	}).(pulumi.StringArrayOutput)
}

// SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the "common name" in the distinguished name).
type SubjectAltNamesResponse struct {
	// Contains additional subject alternative name values.
	CustomSans []X509ExtensionResponse `pulumi:"customSans"`
	// Contains only valid, fully-qualified host names.
	DnsNames []string `pulumi:"dnsNames"`
	// Contains only valid RFC 2822 E-mail addresses.
	EmailAddresses []string `pulumi:"emailAddresses"`
	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	IpAddresses []string `pulumi:"ipAddresses"`
	// Contains only valid RFC 3986 URIs.
	Uris []string `pulumi:"uris"`
}

// SubjectAltNamesResponseInput is an input type that accepts SubjectAltNamesResponseArgs and SubjectAltNamesResponseOutput values.
// You can construct a concrete instance of `SubjectAltNamesResponseInput` via:
//
//          SubjectAltNamesResponseArgs{...}
type SubjectAltNamesResponseInput interface {
	pulumi.Input

	ToSubjectAltNamesResponseOutput() SubjectAltNamesResponseOutput
	ToSubjectAltNamesResponseOutputWithContext(context.Context) SubjectAltNamesResponseOutput
}

// SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the "common name" in the distinguished name).
type SubjectAltNamesResponseArgs struct {
	// Contains additional subject alternative name values.
	CustomSans X509ExtensionResponseArrayInput `pulumi:"customSans"`
	// Contains only valid, fully-qualified host names.
	DnsNames pulumi.StringArrayInput `pulumi:"dnsNames"`
	// Contains only valid RFC 2822 E-mail addresses.
	EmailAddresses pulumi.StringArrayInput `pulumi:"emailAddresses"`
	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	IpAddresses pulumi.StringArrayInput `pulumi:"ipAddresses"`
	// Contains only valid RFC 3986 URIs.
	Uris pulumi.StringArrayInput `pulumi:"uris"`
}

func (SubjectAltNamesResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAltNamesResponse)(nil)).Elem()
}

func (i SubjectAltNamesResponseArgs) ToSubjectAltNamesResponseOutput() SubjectAltNamesResponseOutput {
	return i.ToSubjectAltNamesResponseOutputWithContext(context.Background())
}

func (i SubjectAltNamesResponseArgs) ToSubjectAltNamesResponseOutputWithContext(ctx context.Context) SubjectAltNamesResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAltNamesResponseOutput)
}

func (i SubjectAltNamesResponseArgs) ToSubjectAltNamesResponsePtrOutput() SubjectAltNamesResponsePtrOutput {
	return i.ToSubjectAltNamesResponsePtrOutputWithContext(context.Background())
}

func (i SubjectAltNamesResponseArgs) ToSubjectAltNamesResponsePtrOutputWithContext(ctx context.Context) SubjectAltNamesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAltNamesResponseOutput).ToSubjectAltNamesResponsePtrOutputWithContext(ctx)
}

// SubjectAltNamesResponsePtrInput is an input type that accepts SubjectAltNamesResponseArgs, SubjectAltNamesResponsePtr and SubjectAltNamesResponsePtrOutput values.
// You can construct a concrete instance of `SubjectAltNamesResponsePtrInput` via:
//
//          SubjectAltNamesResponseArgs{...}
//
//  or:
//
//          nil
type SubjectAltNamesResponsePtrInput interface {
	pulumi.Input

	ToSubjectAltNamesResponsePtrOutput() SubjectAltNamesResponsePtrOutput
	ToSubjectAltNamesResponsePtrOutputWithContext(context.Context) SubjectAltNamesResponsePtrOutput
}

type subjectAltNamesResponsePtrType SubjectAltNamesResponseArgs

func SubjectAltNamesResponsePtr(v *SubjectAltNamesResponseArgs) SubjectAltNamesResponsePtrInput {
	return (*subjectAltNamesResponsePtrType)(v)
}

func (*subjectAltNamesResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectAltNamesResponse)(nil)).Elem()
}

func (i *subjectAltNamesResponsePtrType) ToSubjectAltNamesResponsePtrOutput() SubjectAltNamesResponsePtrOutput {
	return i.ToSubjectAltNamesResponsePtrOutputWithContext(context.Background())
}

func (i *subjectAltNamesResponsePtrType) ToSubjectAltNamesResponsePtrOutputWithContext(ctx context.Context) SubjectAltNamesResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectAltNamesResponsePtrOutput)
}

// SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the "common name" in the distinguished name).
type SubjectAltNamesResponseOutput struct{ *pulumi.OutputState }

func (SubjectAltNamesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectAltNamesResponse)(nil)).Elem()
}

func (o SubjectAltNamesResponseOutput) ToSubjectAltNamesResponseOutput() SubjectAltNamesResponseOutput {
	return o
}

func (o SubjectAltNamesResponseOutput) ToSubjectAltNamesResponseOutputWithContext(ctx context.Context) SubjectAltNamesResponseOutput {
	return o
}

func (o SubjectAltNamesResponseOutput) ToSubjectAltNamesResponsePtrOutput() SubjectAltNamesResponsePtrOutput {
	return o.ToSubjectAltNamesResponsePtrOutputWithContext(context.Background())
}

func (o SubjectAltNamesResponseOutput) ToSubjectAltNamesResponsePtrOutputWithContext(ctx context.Context) SubjectAltNamesResponsePtrOutput {
	return o.ApplyT(func(v SubjectAltNamesResponse) *SubjectAltNamesResponse {
		return &v
	}).(SubjectAltNamesResponsePtrOutput)
}

// Contains additional subject alternative name values.
func (o SubjectAltNamesResponseOutput) CustomSans() X509ExtensionResponseArrayOutput {
	return o.ApplyT(func(v SubjectAltNamesResponse) []X509ExtensionResponse { return v.CustomSans }).(X509ExtensionResponseArrayOutput)
}

// Contains only valid, fully-qualified host names.
func (o SubjectAltNamesResponseOutput) DnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubjectAltNamesResponse) []string { return v.DnsNames }).(pulumi.StringArrayOutput)
}

// Contains only valid RFC 2822 E-mail addresses.
func (o SubjectAltNamesResponseOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubjectAltNamesResponse) []string { return v.EmailAddresses }).(pulumi.StringArrayOutput)
}

// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
func (o SubjectAltNamesResponseOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubjectAltNamesResponse) []string { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// Contains only valid RFC 3986 URIs.
func (o SubjectAltNamesResponseOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubjectAltNamesResponse) []string { return v.Uris }).(pulumi.StringArrayOutput)
}

type SubjectAltNamesResponsePtrOutput struct{ *pulumi.OutputState }

func (SubjectAltNamesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectAltNamesResponse)(nil)).Elem()
}

func (o SubjectAltNamesResponsePtrOutput) ToSubjectAltNamesResponsePtrOutput() SubjectAltNamesResponsePtrOutput {
	return o
}

func (o SubjectAltNamesResponsePtrOutput) ToSubjectAltNamesResponsePtrOutputWithContext(ctx context.Context) SubjectAltNamesResponsePtrOutput {
	return o
}

func (o SubjectAltNamesResponsePtrOutput) Elem() SubjectAltNamesResponseOutput {
	return o.ApplyT(func(v *SubjectAltNamesResponse) SubjectAltNamesResponse { return *v }).(SubjectAltNamesResponseOutput)
}

// Contains additional subject alternative name values.
func (o SubjectAltNamesResponsePtrOutput) CustomSans() X509ExtensionResponseArrayOutput {
	return o.ApplyT(func(v *SubjectAltNamesResponse) []X509ExtensionResponse {
		if v == nil {
			return nil
		}
		return v.CustomSans
	}).(X509ExtensionResponseArrayOutput)
}

// Contains only valid, fully-qualified host names.
func (o SubjectAltNamesResponsePtrOutput) DnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubjectAltNamesResponse) []string {
		if v == nil {
			return nil
		}
		return v.DnsNames
	}).(pulumi.StringArrayOutput)
}

// Contains only valid RFC 2822 E-mail addresses.
func (o SubjectAltNamesResponsePtrOutput) EmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubjectAltNamesResponse) []string {
		if v == nil {
			return nil
		}
		return v.EmailAddresses
	}).(pulumi.StringArrayOutput)
}

// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
func (o SubjectAltNamesResponsePtrOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubjectAltNamesResponse) []string {
		if v == nil {
			return nil
		}
		return v.IpAddresses
	}).(pulumi.StringArrayOutput)
}

// Contains only valid RFC 3986 URIs.
func (o SubjectAltNamesResponsePtrOutput) Uris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubjectAltNamesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Uris
	}).(pulumi.StringArrayOutput)
}

// These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.
type SubjectConfig struct {
	// Contains distinguished name fields such as the common name, location and organization.
	Subject Subject `pulumi:"subject"`
	// Optional. The subject alternative name fields.
	SubjectAltName *SubjectAltNames `pulumi:"subjectAltName"`
}

// SubjectConfigInput is an input type that accepts SubjectConfigArgs and SubjectConfigOutput values.
// You can construct a concrete instance of `SubjectConfigInput` via:
//
//          SubjectConfigArgs{...}
type SubjectConfigInput interface {
	pulumi.Input

	ToSubjectConfigOutput() SubjectConfigOutput
	ToSubjectConfigOutputWithContext(context.Context) SubjectConfigOutput
}

// These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.
type SubjectConfigArgs struct {
	// Contains distinguished name fields such as the common name, location and organization.
	Subject SubjectInput `pulumi:"subject"`
	// Optional. The subject alternative name fields.
	SubjectAltName SubjectAltNamesPtrInput `pulumi:"subjectAltName"`
}

func (SubjectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectConfig)(nil)).Elem()
}

func (i SubjectConfigArgs) ToSubjectConfigOutput() SubjectConfigOutput {
	return i.ToSubjectConfigOutputWithContext(context.Background())
}

func (i SubjectConfigArgs) ToSubjectConfigOutputWithContext(ctx context.Context) SubjectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigOutput)
}

func (i SubjectConfigArgs) ToSubjectConfigPtrOutput() SubjectConfigPtrOutput {
	return i.ToSubjectConfigPtrOutputWithContext(context.Background())
}

func (i SubjectConfigArgs) ToSubjectConfigPtrOutputWithContext(ctx context.Context) SubjectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigOutput).ToSubjectConfigPtrOutputWithContext(ctx)
}

// SubjectConfigPtrInput is an input type that accepts SubjectConfigArgs, SubjectConfigPtr and SubjectConfigPtrOutput values.
// You can construct a concrete instance of `SubjectConfigPtrInput` via:
//
//          SubjectConfigArgs{...}
//
//  or:
//
//          nil
type SubjectConfigPtrInput interface {
	pulumi.Input

	ToSubjectConfigPtrOutput() SubjectConfigPtrOutput
	ToSubjectConfigPtrOutputWithContext(context.Context) SubjectConfigPtrOutput
}

type subjectConfigPtrType SubjectConfigArgs

func SubjectConfigPtr(v *SubjectConfigArgs) SubjectConfigPtrInput {
	return (*subjectConfigPtrType)(v)
}

func (*subjectConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectConfig)(nil)).Elem()
}

func (i *subjectConfigPtrType) ToSubjectConfigPtrOutput() SubjectConfigPtrOutput {
	return i.ToSubjectConfigPtrOutputWithContext(context.Background())
}

func (i *subjectConfigPtrType) ToSubjectConfigPtrOutputWithContext(ctx context.Context) SubjectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigPtrOutput)
}

// These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.
type SubjectConfigOutput struct{ *pulumi.OutputState }

func (SubjectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectConfig)(nil)).Elem()
}

func (o SubjectConfigOutput) ToSubjectConfigOutput() SubjectConfigOutput {
	return o
}

func (o SubjectConfigOutput) ToSubjectConfigOutputWithContext(ctx context.Context) SubjectConfigOutput {
	return o
}

func (o SubjectConfigOutput) ToSubjectConfigPtrOutput() SubjectConfigPtrOutput {
	return o.ToSubjectConfigPtrOutputWithContext(context.Background())
}

func (o SubjectConfigOutput) ToSubjectConfigPtrOutputWithContext(ctx context.Context) SubjectConfigPtrOutput {
	return o.ApplyT(func(v SubjectConfig) *SubjectConfig {
		return &v
	}).(SubjectConfigPtrOutput)
}

// Contains distinguished name fields such as the common name, location and organization.
func (o SubjectConfigOutput) Subject() SubjectOutput {
	return o.ApplyT(func(v SubjectConfig) Subject { return v.Subject }).(SubjectOutput)
}

// Optional. The subject alternative name fields.
func (o SubjectConfigOutput) SubjectAltName() SubjectAltNamesPtrOutput {
	return o.ApplyT(func(v SubjectConfig) *SubjectAltNames { return v.SubjectAltName }).(SubjectAltNamesPtrOutput)
}

type SubjectConfigPtrOutput struct{ *pulumi.OutputState }

func (SubjectConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectConfig)(nil)).Elem()
}

func (o SubjectConfigPtrOutput) ToSubjectConfigPtrOutput() SubjectConfigPtrOutput {
	return o
}

func (o SubjectConfigPtrOutput) ToSubjectConfigPtrOutputWithContext(ctx context.Context) SubjectConfigPtrOutput {
	return o
}

func (o SubjectConfigPtrOutput) Elem() SubjectConfigOutput {
	return o.ApplyT(func(v *SubjectConfig) SubjectConfig { return *v }).(SubjectConfigOutput)
}

// Contains distinguished name fields such as the common name, location and organization.
func (o SubjectConfigPtrOutput) Subject() SubjectPtrOutput {
	return o.ApplyT(func(v *SubjectConfig) *Subject {
		if v == nil {
			return nil
		}
		return &v.Subject
	}).(SubjectPtrOutput)
}

// Optional. The subject alternative name fields.
func (o SubjectConfigPtrOutput) SubjectAltName() SubjectAltNamesPtrOutput {
	return o.ApplyT(func(v *SubjectConfig) *SubjectAltNames {
		if v == nil {
			return nil
		}
		return v.SubjectAltName
	}).(SubjectAltNamesPtrOutput)
}

// These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.
type SubjectConfigResponse struct {
	// Contains distinguished name fields such as the common name, location and organization.
	Subject SubjectResponse `pulumi:"subject"`
	// Optional. The subject alternative name fields.
	SubjectAltName SubjectAltNamesResponse `pulumi:"subjectAltName"`
}

// SubjectConfigResponseInput is an input type that accepts SubjectConfigResponseArgs and SubjectConfigResponseOutput values.
// You can construct a concrete instance of `SubjectConfigResponseInput` via:
//
//          SubjectConfigResponseArgs{...}
type SubjectConfigResponseInput interface {
	pulumi.Input

	ToSubjectConfigResponseOutput() SubjectConfigResponseOutput
	ToSubjectConfigResponseOutputWithContext(context.Context) SubjectConfigResponseOutput
}

// These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.
type SubjectConfigResponseArgs struct {
	// Contains distinguished name fields such as the common name, location and organization.
	Subject SubjectResponseInput `pulumi:"subject"`
	// Optional. The subject alternative name fields.
	SubjectAltName SubjectAltNamesResponseInput `pulumi:"subjectAltName"`
}

func (SubjectConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectConfigResponse)(nil)).Elem()
}

func (i SubjectConfigResponseArgs) ToSubjectConfigResponseOutput() SubjectConfigResponseOutput {
	return i.ToSubjectConfigResponseOutputWithContext(context.Background())
}

func (i SubjectConfigResponseArgs) ToSubjectConfigResponseOutputWithContext(ctx context.Context) SubjectConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigResponseOutput)
}

func (i SubjectConfigResponseArgs) ToSubjectConfigResponsePtrOutput() SubjectConfigResponsePtrOutput {
	return i.ToSubjectConfigResponsePtrOutputWithContext(context.Background())
}

func (i SubjectConfigResponseArgs) ToSubjectConfigResponsePtrOutputWithContext(ctx context.Context) SubjectConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigResponseOutput).ToSubjectConfigResponsePtrOutputWithContext(ctx)
}

// SubjectConfigResponsePtrInput is an input type that accepts SubjectConfigResponseArgs, SubjectConfigResponsePtr and SubjectConfigResponsePtrOutput values.
// You can construct a concrete instance of `SubjectConfigResponsePtrInput` via:
//
//          SubjectConfigResponseArgs{...}
//
//  or:
//
//          nil
type SubjectConfigResponsePtrInput interface {
	pulumi.Input

	ToSubjectConfigResponsePtrOutput() SubjectConfigResponsePtrOutput
	ToSubjectConfigResponsePtrOutputWithContext(context.Context) SubjectConfigResponsePtrOutput
}

type subjectConfigResponsePtrType SubjectConfigResponseArgs

func SubjectConfigResponsePtr(v *SubjectConfigResponseArgs) SubjectConfigResponsePtrInput {
	return (*subjectConfigResponsePtrType)(v)
}

func (*subjectConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectConfigResponse)(nil)).Elem()
}

func (i *subjectConfigResponsePtrType) ToSubjectConfigResponsePtrOutput() SubjectConfigResponsePtrOutput {
	return i.ToSubjectConfigResponsePtrOutputWithContext(context.Background())
}

func (i *subjectConfigResponsePtrType) ToSubjectConfigResponsePtrOutputWithContext(ctx context.Context) SubjectConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectConfigResponsePtrOutput)
}

// These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.
type SubjectConfigResponseOutput struct{ *pulumi.OutputState }

func (SubjectConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectConfigResponse)(nil)).Elem()
}

func (o SubjectConfigResponseOutput) ToSubjectConfigResponseOutput() SubjectConfigResponseOutput {
	return o
}

func (o SubjectConfigResponseOutput) ToSubjectConfigResponseOutputWithContext(ctx context.Context) SubjectConfigResponseOutput {
	return o
}

func (o SubjectConfigResponseOutput) ToSubjectConfigResponsePtrOutput() SubjectConfigResponsePtrOutput {
	return o.ToSubjectConfigResponsePtrOutputWithContext(context.Background())
}

func (o SubjectConfigResponseOutput) ToSubjectConfigResponsePtrOutputWithContext(ctx context.Context) SubjectConfigResponsePtrOutput {
	return o.ApplyT(func(v SubjectConfigResponse) *SubjectConfigResponse {
		return &v
	}).(SubjectConfigResponsePtrOutput)
}

// Contains distinguished name fields such as the common name, location and organization.
func (o SubjectConfigResponseOutput) Subject() SubjectResponseOutput {
	return o.ApplyT(func(v SubjectConfigResponse) SubjectResponse { return v.Subject }).(SubjectResponseOutput)
}

// Optional. The subject alternative name fields.
func (o SubjectConfigResponseOutput) SubjectAltName() SubjectAltNamesResponseOutput {
	return o.ApplyT(func(v SubjectConfigResponse) SubjectAltNamesResponse { return v.SubjectAltName }).(SubjectAltNamesResponseOutput)
}

type SubjectConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (SubjectConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectConfigResponse)(nil)).Elem()
}

func (o SubjectConfigResponsePtrOutput) ToSubjectConfigResponsePtrOutput() SubjectConfigResponsePtrOutput {
	return o
}

func (o SubjectConfigResponsePtrOutput) ToSubjectConfigResponsePtrOutputWithContext(ctx context.Context) SubjectConfigResponsePtrOutput {
	return o
}

func (o SubjectConfigResponsePtrOutput) Elem() SubjectConfigResponseOutput {
	return o.ApplyT(func(v *SubjectConfigResponse) SubjectConfigResponse { return *v }).(SubjectConfigResponseOutput)
}

// Contains distinguished name fields such as the common name, location and organization.
func (o SubjectConfigResponsePtrOutput) Subject() SubjectResponsePtrOutput {
	return o.ApplyT(func(v *SubjectConfigResponse) *SubjectResponse {
		if v == nil {
			return nil
		}
		return &v.Subject
	}).(SubjectResponsePtrOutput)
}

// Optional. The subject alternative name fields.
func (o SubjectConfigResponsePtrOutput) SubjectAltName() SubjectAltNamesResponsePtrOutput {
	return o.ApplyT(func(v *SubjectConfigResponse) *SubjectAltNamesResponse {
		if v == nil {
			return nil
		}
		return &v.SubjectAltName
	}).(SubjectAltNamesResponsePtrOutput)
}

// These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.
type SubjectDescriptionResponse struct {
	// The serial number encoded in lowercase hexadecimal.
	HexSerialNumber string `pulumi:"hexSerialNumber"`
	// For convenience, the actual lifetime of an issued certificate.
	Lifetime string `pulumi:"lifetime"`
	// The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to 'not_before_time' + 'lifetime' - 1 second.
	NotAfterTime string `pulumi:"notAfterTime"`
	// The time at which the certificate becomes valid.
	NotBeforeTime string `pulumi:"notBeforeTime"`
	// Contains distinguished name fields such as the common name, location and / organization.
	Subject SubjectResponse `pulumi:"subject"`
	// The subject alternative name fields.
	SubjectAltName SubjectAltNamesResponse `pulumi:"subjectAltName"`
}

// SubjectDescriptionResponseInput is an input type that accepts SubjectDescriptionResponseArgs and SubjectDescriptionResponseOutput values.
// You can construct a concrete instance of `SubjectDescriptionResponseInput` via:
//
//          SubjectDescriptionResponseArgs{...}
type SubjectDescriptionResponseInput interface {
	pulumi.Input

	ToSubjectDescriptionResponseOutput() SubjectDescriptionResponseOutput
	ToSubjectDescriptionResponseOutputWithContext(context.Context) SubjectDescriptionResponseOutput
}

// These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.
type SubjectDescriptionResponseArgs struct {
	// The serial number encoded in lowercase hexadecimal.
	HexSerialNumber pulumi.StringInput `pulumi:"hexSerialNumber"`
	// For convenience, the actual lifetime of an issued certificate.
	Lifetime pulumi.StringInput `pulumi:"lifetime"`
	// The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to 'not_before_time' + 'lifetime' - 1 second.
	NotAfterTime pulumi.StringInput `pulumi:"notAfterTime"`
	// The time at which the certificate becomes valid.
	NotBeforeTime pulumi.StringInput `pulumi:"notBeforeTime"`
	// Contains distinguished name fields such as the common name, location and / organization.
	Subject SubjectResponseInput `pulumi:"subject"`
	// The subject alternative name fields.
	SubjectAltName SubjectAltNamesResponseInput `pulumi:"subjectAltName"`
}

func (SubjectDescriptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectDescriptionResponse)(nil)).Elem()
}

func (i SubjectDescriptionResponseArgs) ToSubjectDescriptionResponseOutput() SubjectDescriptionResponseOutput {
	return i.ToSubjectDescriptionResponseOutputWithContext(context.Background())
}

func (i SubjectDescriptionResponseArgs) ToSubjectDescriptionResponseOutputWithContext(ctx context.Context) SubjectDescriptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectDescriptionResponseOutput)
}

func (i SubjectDescriptionResponseArgs) ToSubjectDescriptionResponsePtrOutput() SubjectDescriptionResponsePtrOutput {
	return i.ToSubjectDescriptionResponsePtrOutputWithContext(context.Background())
}

func (i SubjectDescriptionResponseArgs) ToSubjectDescriptionResponsePtrOutputWithContext(ctx context.Context) SubjectDescriptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectDescriptionResponseOutput).ToSubjectDescriptionResponsePtrOutputWithContext(ctx)
}

// SubjectDescriptionResponsePtrInput is an input type that accepts SubjectDescriptionResponseArgs, SubjectDescriptionResponsePtr and SubjectDescriptionResponsePtrOutput values.
// You can construct a concrete instance of `SubjectDescriptionResponsePtrInput` via:
//
//          SubjectDescriptionResponseArgs{...}
//
//  or:
//
//          nil
type SubjectDescriptionResponsePtrInput interface {
	pulumi.Input

	ToSubjectDescriptionResponsePtrOutput() SubjectDescriptionResponsePtrOutput
	ToSubjectDescriptionResponsePtrOutputWithContext(context.Context) SubjectDescriptionResponsePtrOutput
}

type subjectDescriptionResponsePtrType SubjectDescriptionResponseArgs

func SubjectDescriptionResponsePtr(v *SubjectDescriptionResponseArgs) SubjectDescriptionResponsePtrInput {
	return (*subjectDescriptionResponsePtrType)(v)
}

func (*subjectDescriptionResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectDescriptionResponse)(nil)).Elem()
}

func (i *subjectDescriptionResponsePtrType) ToSubjectDescriptionResponsePtrOutput() SubjectDescriptionResponsePtrOutput {
	return i.ToSubjectDescriptionResponsePtrOutputWithContext(context.Background())
}

func (i *subjectDescriptionResponsePtrType) ToSubjectDescriptionResponsePtrOutputWithContext(ctx context.Context) SubjectDescriptionResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectDescriptionResponsePtrOutput)
}

// These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.
type SubjectDescriptionResponseOutput struct{ *pulumi.OutputState }

func (SubjectDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectDescriptionResponse)(nil)).Elem()
}

func (o SubjectDescriptionResponseOutput) ToSubjectDescriptionResponseOutput() SubjectDescriptionResponseOutput {
	return o
}

func (o SubjectDescriptionResponseOutput) ToSubjectDescriptionResponseOutputWithContext(ctx context.Context) SubjectDescriptionResponseOutput {
	return o
}

func (o SubjectDescriptionResponseOutput) ToSubjectDescriptionResponsePtrOutput() SubjectDescriptionResponsePtrOutput {
	return o.ToSubjectDescriptionResponsePtrOutputWithContext(context.Background())
}

func (o SubjectDescriptionResponseOutput) ToSubjectDescriptionResponsePtrOutputWithContext(ctx context.Context) SubjectDescriptionResponsePtrOutput {
	return o.ApplyT(func(v SubjectDescriptionResponse) *SubjectDescriptionResponse {
		return &v
	}).(SubjectDescriptionResponsePtrOutput)
}

// The serial number encoded in lowercase hexadecimal.
func (o SubjectDescriptionResponseOutput) HexSerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectDescriptionResponse) string { return v.HexSerialNumber }).(pulumi.StringOutput)
}

// For convenience, the actual lifetime of an issued certificate.
func (o SubjectDescriptionResponseOutput) Lifetime() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectDescriptionResponse) string { return v.Lifetime }).(pulumi.StringOutput)
}

// The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to 'not_before_time' + 'lifetime' - 1 second.
func (o SubjectDescriptionResponseOutput) NotAfterTime() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectDescriptionResponse) string { return v.NotAfterTime }).(pulumi.StringOutput)
}

// The time at which the certificate becomes valid.
func (o SubjectDescriptionResponseOutput) NotBeforeTime() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectDescriptionResponse) string { return v.NotBeforeTime }).(pulumi.StringOutput)
}

// Contains distinguished name fields such as the common name, location and / organization.
func (o SubjectDescriptionResponseOutput) Subject() SubjectResponseOutput {
	return o.ApplyT(func(v SubjectDescriptionResponse) SubjectResponse { return v.Subject }).(SubjectResponseOutput)
}

// The subject alternative name fields.
func (o SubjectDescriptionResponseOutput) SubjectAltName() SubjectAltNamesResponseOutput {
	return o.ApplyT(func(v SubjectDescriptionResponse) SubjectAltNamesResponse { return v.SubjectAltName }).(SubjectAltNamesResponseOutput)
}

type SubjectDescriptionResponsePtrOutput struct{ *pulumi.OutputState }

func (SubjectDescriptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectDescriptionResponse)(nil)).Elem()
}

func (o SubjectDescriptionResponsePtrOutput) ToSubjectDescriptionResponsePtrOutput() SubjectDescriptionResponsePtrOutput {
	return o
}

func (o SubjectDescriptionResponsePtrOutput) ToSubjectDescriptionResponsePtrOutputWithContext(ctx context.Context) SubjectDescriptionResponsePtrOutput {
	return o
}

func (o SubjectDescriptionResponsePtrOutput) Elem() SubjectDescriptionResponseOutput {
	return o.ApplyT(func(v *SubjectDescriptionResponse) SubjectDescriptionResponse { return *v }).(SubjectDescriptionResponseOutput)
}

// The serial number encoded in lowercase hexadecimal.
func (o SubjectDescriptionResponsePtrOutput) HexSerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectDescriptionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HexSerialNumber
	}).(pulumi.StringPtrOutput)
}

// For convenience, the actual lifetime of an issued certificate.
func (o SubjectDescriptionResponsePtrOutput) Lifetime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectDescriptionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Lifetime
	}).(pulumi.StringPtrOutput)
}

// The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to 'not_before_time' + 'lifetime' - 1 second.
func (o SubjectDescriptionResponsePtrOutput) NotAfterTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectDescriptionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NotAfterTime
	}).(pulumi.StringPtrOutput)
}

// The time at which the certificate becomes valid.
func (o SubjectDescriptionResponsePtrOutput) NotBeforeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectDescriptionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NotBeforeTime
	}).(pulumi.StringPtrOutput)
}

// Contains distinguished name fields such as the common name, location and / organization.
func (o SubjectDescriptionResponsePtrOutput) Subject() SubjectResponsePtrOutput {
	return o.ApplyT(func(v *SubjectDescriptionResponse) *SubjectResponse {
		if v == nil {
			return nil
		}
		return &v.Subject
	}).(SubjectResponsePtrOutput)
}

// The subject alternative name fields.
func (o SubjectDescriptionResponsePtrOutput) SubjectAltName() SubjectAltNamesResponsePtrOutput {
	return o.ApplyT(func(v *SubjectDescriptionResponse) *SubjectAltNamesResponse {
		if v == nil {
			return nil
		}
		return &v.SubjectAltName
	}).(SubjectAltNamesResponsePtrOutput)
}

// Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
type SubjectResponse struct {
	// The "common name" of the subject.
	CommonName string `pulumi:"commonName"`
	// The country code of the subject.
	CountryCode string `pulumi:"countryCode"`
	// The locality or city of the subject.
	Locality string `pulumi:"locality"`
	// The organization of the subject.
	Organization string `pulumi:"organization"`
	// The organizational_unit of the subject.
	OrganizationalUnit string `pulumi:"organizationalUnit"`
	// The postal code of the subject.
	PostalCode string `pulumi:"postalCode"`
	// The province, territory, or regional state of the subject.
	Province string `pulumi:"province"`
	// The street address of the subject.
	StreetAddress string `pulumi:"streetAddress"`
}

// SubjectResponseInput is an input type that accepts SubjectResponseArgs and SubjectResponseOutput values.
// You can construct a concrete instance of `SubjectResponseInput` via:
//
//          SubjectResponseArgs{...}
type SubjectResponseInput interface {
	pulumi.Input

	ToSubjectResponseOutput() SubjectResponseOutput
	ToSubjectResponseOutputWithContext(context.Context) SubjectResponseOutput
}

// Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
type SubjectResponseArgs struct {
	// The "common name" of the subject.
	CommonName pulumi.StringInput `pulumi:"commonName"`
	// The country code of the subject.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The locality or city of the subject.
	Locality pulumi.StringInput `pulumi:"locality"`
	// The organization of the subject.
	Organization pulumi.StringInput `pulumi:"organization"`
	// The organizational_unit of the subject.
	OrganizationalUnit pulumi.StringInput `pulumi:"organizationalUnit"`
	// The postal code of the subject.
	PostalCode pulumi.StringInput `pulumi:"postalCode"`
	// The province, territory, or regional state of the subject.
	Province pulumi.StringInput `pulumi:"province"`
	// The street address of the subject.
	StreetAddress pulumi.StringInput `pulumi:"streetAddress"`
}

func (SubjectResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectResponse)(nil)).Elem()
}

func (i SubjectResponseArgs) ToSubjectResponseOutput() SubjectResponseOutput {
	return i.ToSubjectResponseOutputWithContext(context.Background())
}

func (i SubjectResponseArgs) ToSubjectResponseOutputWithContext(ctx context.Context) SubjectResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectResponseOutput)
}

func (i SubjectResponseArgs) ToSubjectResponsePtrOutput() SubjectResponsePtrOutput {
	return i.ToSubjectResponsePtrOutputWithContext(context.Background())
}

func (i SubjectResponseArgs) ToSubjectResponsePtrOutputWithContext(ctx context.Context) SubjectResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectResponseOutput).ToSubjectResponsePtrOutputWithContext(ctx)
}

// SubjectResponsePtrInput is an input type that accepts SubjectResponseArgs, SubjectResponsePtr and SubjectResponsePtrOutput values.
// You can construct a concrete instance of `SubjectResponsePtrInput` via:
//
//          SubjectResponseArgs{...}
//
//  or:
//
//          nil
type SubjectResponsePtrInput interface {
	pulumi.Input

	ToSubjectResponsePtrOutput() SubjectResponsePtrOutput
	ToSubjectResponsePtrOutputWithContext(context.Context) SubjectResponsePtrOutput
}

type subjectResponsePtrType SubjectResponseArgs

func SubjectResponsePtr(v *SubjectResponseArgs) SubjectResponsePtrInput {
	return (*subjectResponsePtrType)(v)
}

func (*subjectResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectResponse)(nil)).Elem()
}

func (i *subjectResponsePtrType) ToSubjectResponsePtrOutput() SubjectResponsePtrOutput {
	return i.ToSubjectResponsePtrOutputWithContext(context.Background())
}

func (i *subjectResponsePtrType) ToSubjectResponsePtrOutputWithContext(ctx context.Context) SubjectResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubjectResponsePtrOutput)
}

// Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
type SubjectResponseOutput struct{ *pulumi.OutputState }

func (SubjectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubjectResponse)(nil)).Elem()
}

func (o SubjectResponseOutput) ToSubjectResponseOutput() SubjectResponseOutput {
	return o
}

func (o SubjectResponseOutput) ToSubjectResponseOutputWithContext(ctx context.Context) SubjectResponseOutput {
	return o
}

func (o SubjectResponseOutput) ToSubjectResponsePtrOutput() SubjectResponsePtrOutput {
	return o.ToSubjectResponsePtrOutputWithContext(context.Background())
}

func (o SubjectResponseOutput) ToSubjectResponsePtrOutputWithContext(ctx context.Context) SubjectResponsePtrOutput {
	return o.ApplyT(func(v SubjectResponse) *SubjectResponse {
		return &v
	}).(SubjectResponsePtrOutput)
}

// The "common name" of the subject.
func (o SubjectResponseOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectResponse) string { return v.CommonName }).(pulumi.StringOutput)
}

// The country code of the subject.
func (o SubjectResponseOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectResponse) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The locality or city of the subject.
func (o SubjectResponseOutput) Locality() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectResponse) string { return v.Locality }).(pulumi.StringOutput)
}

// The organization of the subject.
func (o SubjectResponseOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectResponse) string { return v.Organization }).(pulumi.StringOutput)
}

// The organizational_unit of the subject.
func (o SubjectResponseOutput) OrganizationalUnit() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectResponse) string { return v.OrganizationalUnit }).(pulumi.StringOutput)
}

// The postal code of the subject.
func (o SubjectResponseOutput) PostalCode() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectResponse) string { return v.PostalCode }).(pulumi.StringOutput)
}

// The province, territory, or regional state of the subject.
func (o SubjectResponseOutput) Province() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectResponse) string { return v.Province }).(pulumi.StringOutput)
}

// The street address of the subject.
func (o SubjectResponseOutput) StreetAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SubjectResponse) string { return v.StreetAddress }).(pulumi.StringOutput)
}

type SubjectResponsePtrOutput struct{ *pulumi.OutputState }

func (SubjectResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubjectResponse)(nil)).Elem()
}

func (o SubjectResponsePtrOutput) ToSubjectResponsePtrOutput() SubjectResponsePtrOutput {
	return o
}

func (o SubjectResponsePtrOutput) ToSubjectResponsePtrOutputWithContext(ctx context.Context) SubjectResponsePtrOutput {
	return o
}

func (o SubjectResponsePtrOutput) Elem() SubjectResponseOutput {
	return o.ApplyT(func(v *SubjectResponse) SubjectResponse { return *v }).(SubjectResponseOutput)
}

// The "common name" of the subject.
func (o SubjectResponsePtrOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CommonName
	}).(pulumi.StringPtrOutput)
}

// The country code of the subject.
func (o SubjectResponsePtrOutput) CountryCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CountryCode
	}).(pulumi.StringPtrOutput)
}

// The locality or city of the subject.
func (o SubjectResponsePtrOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Locality
	}).(pulumi.StringPtrOutput)
}

// The organization of the subject.
func (o SubjectResponsePtrOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Organization
	}).(pulumi.StringPtrOutput)
}

// The organizational_unit of the subject.
func (o SubjectResponsePtrOutput) OrganizationalUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OrganizationalUnit
	}).(pulumi.StringPtrOutput)
}

// The postal code of the subject.
func (o SubjectResponsePtrOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PostalCode
	}).(pulumi.StringPtrOutput)
}

// The province, territory, or regional state of the subject.
func (o SubjectResponsePtrOutput) Province() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Province
	}).(pulumi.StringPtrOutput)
}

// The street address of the subject.
func (o SubjectResponsePtrOutput) StreetAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubjectResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StreetAddress
	}).(pulumi.StringPtrOutput)
}

// Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
type SubordinateConfig struct {
	// This can refer to a CertificateAuthority in the same project that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
	CertificateAuthority string `pulumi:"certificateAuthority"`
	// Contains the PEM certificate chain for the issuers of this CertificateAuthority, but not pem certificate for this CA itself.
	PemIssuerChain SubordinateConfigChain `pulumi:"pemIssuerChain"`
}

// SubordinateConfigInput is an input type that accepts SubordinateConfigArgs and SubordinateConfigOutput values.
// You can construct a concrete instance of `SubordinateConfigInput` via:
//
//          SubordinateConfigArgs{...}
type SubordinateConfigInput interface {
	pulumi.Input

	ToSubordinateConfigOutput() SubordinateConfigOutput
	ToSubordinateConfigOutputWithContext(context.Context) SubordinateConfigOutput
}

// Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
type SubordinateConfigArgs struct {
	// This can refer to a CertificateAuthority in the same project that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
	CertificateAuthority pulumi.StringInput `pulumi:"certificateAuthority"`
	// Contains the PEM certificate chain for the issuers of this CertificateAuthority, but not pem certificate for this CA itself.
	PemIssuerChain SubordinateConfigChainInput `pulumi:"pemIssuerChain"`
}

func (SubordinateConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubordinateConfig)(nil)).Elem()
}

func (i SubordinateConfigArgs) ToSubordinateConfigOutput() SubordinateConfigOutput {
	return i.ToSubordinateConfigOutputWithContext(context.Background())
}

func (i SubordinateConfigArgs) ToSubordinateConfigOutputWithContext(ctx context.Context) SubordinateConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigOutput)
}

func (i SubordinateConfigArgs) ToSubordinateConfigPtrOutput() SubordinateConfigPtrOutput {
	return i.ToSubordinateConfigPtrOutputWithContext(context.Background())
}

func (i SubordinateConfigArgs) ToSubordinateConfigPtrOutputWithContext(ctx context.Context) SubordinateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigOutput).ToSubordinateConfigPtrOutputWithContext(ctx)
}

// SubordinateConfigPtrInput is an input type that accepts SubordinateConfigArgs, SubordinateConfigPtr and SubordinateConfigPtrOutput values.
// You can construct a concrete instance of `SubordinateConfigPtrInput` via:
//
//          SubordinateConfigArgs{...}
//
//  or:
//
//          nil
type SubordinateConfigPtrInput interface {
	pulumi.Input

	ToSubordinateConfigPtrOutput() SubordinateConfigPtrOutput
	ToSubordinateConfigPtrOutputWithContext(context.Context) SubordinateConfigPtrOutput
}

type subordinateConfigPtrType SubordinateConfigArgs

func SubordinateConfigPtr(v *SubordinateConfigArgs) SubordinateConfigPtrInput {
	return (*subordinateConfigPtrType)(v)
}

func (*subordinateConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubordinateConfig)(nil)).Elem()
}

func (i *subordinateConfigPtrType) ToSubordinateConfigPtrOutput() SubordinateConfigPtrOutput {
	return i.ToSubordinateConfigPtrOutputWithContext(context.Background())
}

func (i *subordinateConfigPtrType) ToSubordinateConfigPtrOutputWithContext(ctx context.Context) SubordinateConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigPtrOutput)
}

// Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
type SubordinateConfigOutput struct{ *pulumi.OutputState }

func (SubordinateConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubordinateConfig)(nil)).Elem()
}

func (o SubordinateConfigOutput) ToSubordinateConfigOutput() SubordinateConfigOutput {
	return o
}

func (o SubordinateConfigOutput) ToSubordinateConfigOutputWithContext(ctx context.Context) SubordinateConfigOutput {
	return o
}

func (o SubordinateConfigOutput) ToSubordinateConfigPtrOutput() SubordinateConfigPtrOutput {
	return o.ToSubordinateConfigPtrOutputWithContext(context.Background())
}

func (o SubordinateConfigOutput) ToSubordinateConfigPtrOutputWithContext(ctx context.Context) SubordinateConfigPtrOutput {
	return o.ApplyT(func(v SubordinateConfig) *SubordinateConfig {
		return &v
	}).(SubordinateConfigPtrOutput)
}

// This can refer to a CertificateAuthority in the same project that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
func (o SubordinateConfigOutput) CertificateAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v SubordinateConfig) string { return v.CertificateAuthority }).(pulumi.StringOutput)
}

// Contains the PEM certificate chain for the issuers of this CertificateAuthority, but not pem certificate for this CA itself.
func (o SubordinateConfigOutput) PemIssuerChain() SubordinateConfigChainOutput {
	return o.ApplyT(func(v SubordinateConfig) SubordinateConfigChain { return v.PemIssuerChain }).(SubordinateConfigChainOutput)
}

type SubordinateConfigPtrOutput struct{ *pulumi.OutputState }

func (SubordinateConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubordinateConfig)(nil)).Elem()
}

func (o SubordinateConfigPtrOutput) ToSubordinateConfigPtrOutput() SubordinateConfigPtrOutput {
	return o
}

func (o SubordinateConfigPtrOutput) ToSubordinateConfigPtrOutputWithContext(ctx context.Context) SubordinateConfigPtrOutput {
	return o
}

func (o SubordinateConfigPtrOutput) Elem() SubordinateConfigOutput {
	return o.ApplyT(func(v *SubordinateConfig) SubordinateConfig { return *v }).(SubordinateConfigOutput)
}

// This can refer to a CertificateAuthority in the same project that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
func (o SubordinateConfigPtrOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubordinateConfig) *string {
		if v == nil {
			return nil
		}
		return &v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

// Contains the PEM certificate chain for the issuers of this CertificateAuthority, but not pem certificate for this CA itself.
func (o SubordinateConfigPtrOutput) PemIssuerChain() SubordinateConfigChainPtrOutput {
	return o.ApplyT(func(v *SubordinateConfig) *SubordinateConfigChain {
		if v == nil {
			return nil
		}
		return &v.PemIssuerChain
	}).(SubordinateConfigChainPtrOutput)
}

// This message describes a subordinate CA's issuer certificate chain. This wrapper exists for compatibility reasons.
type SubordinateConfigChain struct {
	// Expected to be in leaf-to-root order according to RFC 5246.
	PemCertificates []string `pulumi:"pemCertificates"`
}

// SubordinateConfigChainInput is an input type that accepts SubordinateConfigChainArgs and SubordinateConfigChainOutput values.
// You can construct a concrete instance of `SubordinateConfigChainInput` via:
//
//          SubordinateConfigChainArgs{...}
type SubordinateConfigChainInput interface {
	pulumi.Input

	ToSubordinateConfigChainOutput() SubordinateConfigChainOutput
	ToSubordinateConfigChainOutputWithContext(context.Context) SubordinateConfigChainOutput
}

// This message describes a subordinate CA's issuer certificate chain. This wrapper exists for compatibility reasons.
type SubordinateConfigChainArgs struct {
	// Expected to be in leaf-to-root order according to RFC 5246.
	PemCertificates pulumi.StringArrayInput `pulumi:"pemCertificates"`
}

func (SubordinateConfigChainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubordinateConfigChain)(nil)).Elem()
}

func (i SubordinateConfigChainArgs) ToSubordinateConfigChainOutput() SubordinateConfigChainOutput {
	return i.ToSubordinateConfigChainOutputWithContext(context.Background())
}

func (i SubordinateConfigChainArgs) ToSubordinateConfigChainOutputWithContext(ctx context.Context) SubordinateConfigChainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigChainOutput)
}

func (i SubordinateConfigChainArgs) ToSubordinateConfigChainPtrOutput() SubordinateConfigChainPtrOutput {
	return i.ToSubordinateConfigChainPtrOutputWithContext(context.Background())
}

func (i SubordinateConfigChainArgs) ToSubordinateConfigChainPtrOutputWithContext(ctx context.Context) SubordinateConfigChainPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigChainOutput).ToSubordinateConfigChainPtrOutputWithContext(ctx)
}

// SubordinateConfigChainPtrInput is an input type that accepts SubordinateConfigChainArgs, SubordinateConfigChainPtr and SubordinateConfigChainPtrOutput values.
// You can construct a concrete instance of `SubordinateConfigChainPtrInput` via:
//
//          SubordinateConfigChainArgs{...}
//
//  or:
//
//          nil
type SubordinateConfigChainPtrInput interface {
	pulumi.Input

	ToSubordinateConfigChainPtrOutput() SubordinateConfigChainPtrOutput
	ToSubordinateConfigChainPtrOutputWithContext(context.Context) SubordinateConfigChainPtrOutput
}

type subordinateConfigChainPtrType SubordinateConfigChainArgs

func SubordinateConfigChainPtr(v *SubordinateConfigChainArgs) SubordinateConfigChainPtrInput {
	return (*subordinateConfigChainPtrType)(v)
}

func (*subordinateConfigChainPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubordinateConfigChain)(nil)).Elem()
}

func (i *subordinateConfigChainPtrType) ToSubordinateConfigChainPtrOutput() SubordinateConfigChainPtrOutput {
	return i.ToSubordinateConfigChainPtrOutputWithContext(context.Background())
}

func (i *subordinateConfigChainPtrType) ToSubordinateConfigChainPtrOutputWithContext(ctx context.Context) SubordinateConfigChainPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigChainPtrOutput)
}

// This message describes a subordinate CA's issuer certificate chain. This wrapper exists for compatibility reasons.
type SubordinateConfigChainOutput struct{ *pulumi.OutputState }

func (SubordinateConfigChainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubordinateConfigChain)(nil)).Elem()
}

func (o SubordinateConfigChainOutput) ToSubordinateConfigChainOutput() SubordinateConfigChainOutput {
	return o
}

func (o SubordinateConfigChainOutput) ToSubordinateConfigChainOutputWithContext(ctx context.Context) SubordinateConfigChainOutput {
	return o
}

func (o SubordinateConfigChainOutput) ToSubordinateConfigChainPtrOutput() SubordinateConfigChainPtrOutput {
	return o.ToSubordinateConfigChainPtrOutputWithContext(context.Background())
}

func (o SubordinateConfigChainOutput) ToSubordinateConfigChainPtrOutputWithContext(ctx context.Context) SubordinateConfigChainPtrOutput {
	return o.ApplyT(func(v SubordinateConfigChain) *SubordinateConfigChain {
		return &v
	}).(SubordinateConfigChainPtrOutput)
}

// Expected to be in leaf-to-root order according to RFC 5246.
func (o SubordinateConfigChainOutput) PemCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubordinateConfigChain) []string { return v.PemCertificates }).(pulumi.StringArrayOutput)
}

type SubordinateConfigChainPtrOutput struct{ *pulumi.OutputState }

func (SubordinateConfigChainPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubordinateConfigChain)(nil)).Elem()
}

func (o SubordinateConfigChainPtrOutput) ToSubordinateConfigChainPtrOutput() SubordinateConfigChainPtrOutput {
	return o
}

func (o SubordinateConfigChainPtrOutput) ToSubordinateConfigChainPtrOutputWithContext(ctx context.Context) SubordinateConfigChainPtrOutput {
	return o
}

func (o SubordinateConfigChainPtrOutput) Elem() SubordinateConfigChainOutput {
	return o.ApplyT(func(v *SubordinateConfigChain) SubordinateConfigChain { return *v }).(SubordinateConfigChainOutput)
}

// Expected to be in leaf-to-root order according to RFC 5246.
func (o SubordinateConfigChainPtrOutput) PemCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubordinateConfigChain) []string {
		if v == nil {
			return nil
		}
		return v.PemCertificates
	}).(pulumi.StringArrayOutput)
}

// This message describes a subordinate CA's issuer certificate chain. This wrapper exists for compatibility reasons.
type SubordinateConfigChainResponse struct {
	// Expected to be in leaf-to-root order according to RFC 5246.
	PemCertificates []string `pulumi:"pemCertificates"`
}

// SubordinateConfigChainResponseInput is an input type that accepts SubordinateConfigChainResponseArgs and SubordinateConfigChainResponseOutput values.
// You can construct a concrete instance of `SubordinateConfigChainResponseInput` via:
//
//          SubordinateConfigChainResponseArgs{...}
type SubordinateConfigChainResponseInput interface {
	pulumi.Input

	ToSubordinateConfigChainResponseOutput() SubordinateConfigChainResponseOutput
	ToSubordinateConfigChainResponseOutputWithContext(context.Context) SubordinateConfigChainResponseOutput
}

// This message describes a subordinate CA's issuer certificate chain. This wrapper exists for compatibility reasons.
type SubordinateConfigChainResponseArgs struct {
	// Expected to be in leaf-to-root order according to RFC 5246.
	PemCertificates pulumi.StringArrayInput `pulumi:"pemCertificates"`
}

func (SubordinateConfigChainResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubordinateConfigChainResponse)(nil)).Elem()
}

func (i SubordinateConfigChainResponseArgs) ToSubordinateConfigChainResponseOutput() SubordinateConfigChainResponseOutput {
	return i.ToSubordinateConfigChainResponseOutputWithContext(context.Background())
}

func (i SubordinateConfigChainResponseArgs) ToSubordinateConfigChainResponseOutputWithContext(ctx context.Context) SubordinateConfigChainResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigChainResponseOutput)
}

func (i SubordinateConfigChainResponseArgs) ToSubordinateConfigChainResponsePtrOutput() SubordinateConfigChainResponsePtrOutput {
	return i.ToSubordinateConfigChainResponsePtrOutputWithContext(context.Background())
}

func (i SubordinateConfigChainResponseArgs) ToSubordinateConfigChainResponsePtrOutputWithContext(ctx context.Context) SubordinateConfigChainResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigChainResponseOutput).ToSubordinateConfigChainResponsePtrOutputWithContext(ctx)
}

// SubordinateConfigChainResponsePtrInput is an input type that accepts SubordinateConfigChainResponseArgs, SubordinateConfigChainResponsePtr and SubordinateConfigChainResponsePtrOutput values.
// You can construct a concrete instance of `SubordinateConfigChainResponsePtrInput` via:
//
//          SubordinateConfigChainResponseArgs{...}
//
//  or:
//
//          nil
type SubordinateConfigChainResponsePtrInput interface {
	pulumi.Input

	ToSubordinateConfigChainResponsePtrOutput() SubordinateConfigChainResponsePtrOutput
	ToSubordinateConfigChainResponsePtrOutputWithContext(context.Context) SubordinateConfigChainResponsePtrOutput
}

type subordinateConfigChainResponsePtrType SubordinateConfigChainResponseArgs

func SubordinateConfigChainResponsePtr(v *SubordinateConfigChainResponseArgs) SubordinateConfigChainResponsePtrInput {
	return (*subordinateConfigChainResponsePtrType)(v)
}

func (*subordinateConfigChainResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubordinateConfigChainResponse)(nil)).Elem()
}

func (i *subordinateConfigChainResponsePtrType) ToSubordinateConfigChainResponsePtrOutput() SubordinateConfigChainResponsePtrOutput {
	return i.ToSubordinateConfigChainResponsePtrOutputWithContext(context.Background())
}

func (i *subordinateConfigChainResponsePtrType) ToSubordinateConfigChainResponsePtrOutputWithContext(ctx context.Context) SubordinateConfigChainResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigChainResponsePtrOutput)
}

// This message describes a subordinate CA's issuer certificate chain. This wrapper exists for compatibility reasons.
type SubordinateConfigChainResponseOutput struct{ *pulumi.OutputState }

func (SubordinateConfigChainResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubordinateConfigChainResponse)(nil)).Elem()
}

func (o SubordinateConfigChainResponseOutput) ToSubordinateConfigChainResponseOutput() SubordinateConfigChainResponseOutput {
	return o
}

func (o SubordinateConfigChainResponseOutput) ToSubordinateConfigChainResponseOutputWithContext(ctx context.Context) SubordinateConfigChainResponseOutput {
	return o
}

func (o SubordinateConfigChainResponseOutput) ToSubordinateConfigChainResponsePtrOutput() SubordinateConfigChainResponsePtrOutput {
	return o.ToSubordinateConfigChainResponsePtrOutputWithContext(context.Background())
}

func (o SubordinateConfigChainResponseOutput) ToSubordinateConfigChainResponsePtrOutputWithContext(ctx context.Context) SubordinateConfigChainResponsePtrOutput {
	return o.ApplyT(func(v SubordinateConfigChainResponse) *SubordinateConfigChainResponse {
		return &v
	}).(SubordinateConfigChainResponsePtrOutput)
}

// Expected to be in leaf-to-root order according to RFC 5246.
func (o SubordinateConfigChainResponseOutput) PemCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SubordinateConfigChainResponse) []string { return v.PemCertificates }).(pulumi.StringArrayOutput)
}

type SubordinateConfigChainResponsePtrOutput struct{ *pulumi.OutputState }

func (SubordinateConfigChainResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubordinateConfigChainResponse)(nil)).Elem()
}

func (o SubordinateConfigChainResponsePtrOutput) ToSubordinateConfigChainResponsePtrOutput() SubordinateConfigChainResponsePtrOutput {
	return o
}

func (o SubordinateConfigChainResponsePtrOutput) ToSubordinateConfigChainResponsePtrOutputWithContext(ctx context.Context) SubordinateConfigChainResponsePtrOutput {
	return o
}

func (o SubordinateConfigChainResponsePtrOutput) Elem() SubordinateConfigChainResponseOutput {
	return o.ApplyT(func(v *SubordinateConfigChainResponse) SubordinateConfigChainResponse { return *v }).(SubordinateConfigChainResponseOutput)
}

// Expected to be in leaf-to-root order according to RFC 5246.
func (o SubordinateConfigChainResponsePtrOutput) PemCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubordinateConfigChainResponse) []string {
		if v == nil {
			return nil
		}
		return v.PemCertificates
	}).(pulumi.StringArrayOutput)
}

// Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
type SubordinateConfigResponse struct {
	// This can refer to a CertificateAuthority in the same project that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
	CertificateAuthority string `pulumi:"certificateAuthority"`
	// Contains the PEM certificate chain for the issuers of this CertificateAuthority, but not pem certificate for this CA itself.
	PemIssuerChain SubordinateConfigChainResponse `pulumi:"pemIssuerChain"`
}

// SubordinateConfigResponseInput is an input type that accepts SubordinateConfigResponseArgs and SubordinateConfigResponseOutput values.
// You can construct a concrete instance of `SubordinateConfigResponseInput` via:
//
//          SubordinateConfigResponseArgs{...}
type SubordinateConfigResponseInput interface {
	pulumi.Input

	ToSubordinateConfigResponseOutput() SubordinateConfigResponseOutput
	ToSubordinateConfigResponseOutputWithContext(context.Context) SubordinateConfigResponseOutput
}

// Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
type SubordinateConfigResponseArgs struct {
	// This can refer to a CertificateAuthority in the same project that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
	CertificateAuthority pulumi.StringInput `pulumi:"certificateAuthority"`
	// Contains the PEM certificate chain for the issuers of this CertificateAuthority, but not pem certificate for this CA itself.
	PemIssuerChain SubordinateConfigChainResponseInput `pulumi:"pemIssuerChain"`
}

func (SubordinateConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubordinateConfigResponse)(nil)).Elem()
}

func (i SubordinateConfigResponseArgs) ToSubordinateConfigResponseOutput() SubordinateConfigResponseOutput {
	return i.ToSubordinateConfigResponseOutputWithContext(context.Background())
}

func (i SubordinateConfigResponseArgs) ToSubordinateConfigResponseOutputWithContext(ctx context.Context) SubordinateConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigResponseOutput)
}

func (i SubordinateConfigResponseArgs) ToSubordinateConfigResponsePtrOutput() SubordinateConfigResponsePtrOutput {
	return i.ToSubordinateConfigResponsePtrOutputWithContext(context.Background())
}

func (i SubordinateConfigResponseArgs) ToSubordinateConfigResponsePtrOutputWithContext(ctx context.Context) SubordinateConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigResponseOutput).ToSubordinateConfigResponsePtrOutputWithContext(ctx)
}

// SubordinateConfigResponsePtrInput is an input type that accepts SubordinateConfigResponseArgs, SubordinateConfigResponsePtr and SubordinateConfigResponsePtrOutput values.
// You can construct a concrete instance of `SubordinateConfigResponsePtrInput` via:
//
//          SubordinateConfigResponseArgs{...}
//
//  or:
//
//          nil
type SubordinateConfigResponsePtrInput interface {
	pulumi.Input

	ToSubordinateConfigResponsePtrOutput() SubordinateConfigResponsePtrOutput
	ToSubordinateConfigResponsePtrOutputWithContext(context.Context) SubordinateConfigResponsePtrOutput
}

type subordinateConfigResponsePtrType SubordinateConfigResponseArgs

func SubordinateConfigResponsePtr(v *SubordinateConfigResponseArgs) SubordinateConfigResponsePtrInput {
	return (*subordinateConfigResponsePtrType)(v)
}

func (*subordinateConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubordinateConfigResponse)(nil)).Elem()
}

func (i *subordinateConfigResponsePtrType) ToSubordinateConfigResponsePtrOutput() SubordinateConfigResponsePtrOutput {
	return i.ToSubordinateConfigResponsePtrOutputWithContext(context.Background())
}

func (i *subordinateConfigResponsePtrType) ToSubordinateConfigResponsePtrOutputWithContext(ctx context.Context) SubordinateConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubordinateConfigResponsePtrOutput)
}

// Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.
type SubordinateConfigResponseOutput struct{ *pulumi.OutputState }

func (SubordinateConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubordinateConfigResponse)(nil)).Elem()
}

func (o SubordinateConfigResponseOutput) ToSubordinateConfigResponseOutput() SubordinateConfigResponseOutput {
	return o
}

func (o SubordinateConfigResponseOutput) ToSubordinateConfigResponseOutputWithContext(ctx context.Context) SubordinateConfigResponseOutput {
	return o
}

func (o SubordinateConfigResponseOutput) ToSubordinateConfigResponsePtrOutput() SubordinateConfigResponsePtrOutput {
	return o.ToSubordinateConfigResponsePtrOutputWithContext(context.Background())
}

func (o SubordinateConfigResponseOutput) ToSubordinateConfigResponsePtrOutputWithContext(ctx context.Context) SubordinateConfigResponsePtrOutput {
	return o.ApplyT(func(v SubordinateConfigResponse) *SubordinateConfigResponse {
		return &v
	}).(SubordinateConfigResponsePtrOutput)
}

// This can refer to a CertificateAuthority in the same project that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
func (o SubordinateConfigResponseOutput) CertificateAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v SubordinateConfigResponse) string { return v.CertificateAuthority }).(pulumi.StringOutput)
}

// Contains the PEM certificate chain for the issuers of this CertificateAuthority, but not pem certificate for this CA itself.
func (o SubordinateConfigResponseOutput) PemIssuerChain() SubordinateConfigChainResponseOutput {
	return o.ApplyT(func(v SubordinateConfigResponse) SubordinateConfigChainResponse { return v.PemIssuerChain }).(SubordinateConfigChainResponseOutput)
}

type SubordinateConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (SubordinateConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubordinateConfigResponse)(nil)).Elem()
}

func (o SubordinateConfigResponsePtrOutput) ToSubordinateConfigResponsePtrOutput() SubordinateConfigResponsePtrOutput {
	return o
}

func (o SubordinateConfigResponsePtrOutput) ToSubordinateConfigResponsePtrOutputWithContext(ctx context.Context) SubordinateConfigResponsePtrOutput {
	return o
}

func (o SubordinateConfigResponsePtrOutput) Elem() SubordinateConfigResponseOutput {
	return o.ApplyT(func(v *SubordinateConfigResponse) SubordinateConfigResponse { return *v }).(SubordinateConfigResponseOutput)
}

// This can refer to a CertificateAuthority in the same project that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
func (o SubordinateConfigResponsePtrOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubordinateConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

// Contains the PEM certificate chain for the issuers of this CertificateAuthority, but not pem certificate for this CA itself.
func (o SubordinateConfigResponsePtrOutput) PemIssuerChain() SubordinateConfigChainResponsePtrOutput {
	return o.ApplyT(func(v *SubordinateConfigResponse) *SubordinateConfigChainResponse {
		if v == nil {
			return nil
		}
		return &v.PemIssuerChain
	}).(SubordinateConfigChainResponsePtrOutput)
}

// An X509Extension specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
type X509Extension struct {
	// Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
	Critical *bool `pulumi:"critical"`
	// The OID for this X.509 extension.
	ObjectId ObjectId `pulumi:"objectId"`
	// The value of this X.509 extension.
	Value string `pulumi:"value"`
}

// X509ExtensionInput is an input type that accepts X509ExtensionArgs and X509ExtensionOutput values.
// You can construct a concrete instance of `X509ExtensionInput` via:
//
//          X509ExtensionArgs{...}
type X509ExtensionInput interface {
	pulumi.Input

	ToX509ExtensionOutput() X509ExtensionOutput
	ToX509ExtensionOutputWithContext(context.Context) X509ExtensionOutput
}

// An X509Extension specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
type X509ExtensionArgs struct {
	// Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
	Critical pulumi.BoolPtrInput `pulumi:"critical"`
	// The OID for this X.509 extension.
	ObjectId ObjectIdInput `pulumi:"objectId"`
	// The value of this X.509 extension.
	Value pulumi.StringInput `pulumi:"value"`
}

func (X509ExtensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X509Extension)(nil)).Elem()
}

func (i X509ExtensionArgs) ToX509ExtensionOutput() X509ExtensionOutput {
	return i.ToX509ExtensionOutputWithContext(context.Background())
}

func (i X509ExtensionArgs) ToX509ExtensionOutputWithContext(ctx context.Context) X509ExtensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509ExtensionOutput)
}

// X509ExtensionArrayInput is an input type that accepts X509ExtensionArray and X509ExtensionArrayOutput values.
// You can construct a concrete instance of `X509ExtensionArrayInput` via:
//
//          X509ExtensionArray{ X509ExtensionArgs{...} }
type X509ExtensionArrayInput interface {
	pulumi.Input

	ToX509ExtensionArrayOutput() X509ExtensionArrayOutput
	ToX509ExtensionArrayOutputWithContext(context.Context) X509ExtensionArrayOutput
}

type X509ExtensionArray []X509ExtensionInput

func (X509ExtensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X509Extension)(nil)).Elem()
}

func (i X509ExtensionArray) ToX509ExtensionArrayOutput() X509ExtensionArrayOutput {
	return i.ToX509ExtensionArrayOutputWithContext(context.Background())
}

func (i X509ExtensionArray) ToX509ExtensionArrayOutputWithContext(ctx context.Context) X509ExtensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509ExtensionArrayOutput)
}

// An X509Extension specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
type X509ExtensionOutput struct{ *pulumi.OutputState }

func (X509ExtensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X509Extension)(nil)).Elem()
}

func (o X509ExtensionOutput) ToX509ExtensionOutput() X509ExtensionOutput {
	return o
}

func (o X509ExtensionOutput) ToX509ExtensionOutputWithContext(ctx context.Context) X509ExtensionOutput {
	return o
}

// Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
func (o X509ExtensionOutput) Critical() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v X509Extension) *bool { return v.Critical }).(pulumi.BoolPtrOutput)
}

// The OID for this X.509 extension.
func (o X509ExtensionOutput) ObjectId() ObjectIdOutput {
	return o.ApplyT(func(v X509Extension) ObjectId { return v.ObjectId }).(ObjectIdOutput)
}

// The value of this X.509 extension.
func (o X509ExtensionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v X509Extension) string { return v.Value }).(pulumi.StringOutput)
}

type X509ExtensionArrayOutput struct{ *pulumi.OutputState }

func (X509ExtensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X509Extension)(nil)).Elem()
}

func (o X509ExtensionArrayOutput) ToX509ExtensionArrayOutput() X509ExtensionArrayOutput {
	return o
}

func (o X509ExtensionArrayOutput) ToX509ExtensionArrayOutputWithContext(ctx context.Context) X509ExtensionArrayOutput {
	return o
}

func (o X509ExtensionArrayOutput) Index(i pulumi.IntInput) X509ExtensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X509Extension {
		return vs[0].([]X509Extension)[vs[1].(int)]
	}).(X509ExtensionOutput)
}

// An X509Extension specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
type X509ExtensionResponse struct {
	// Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
	Critical bool `pulumi:"critical"`
	// The OID for this X.509 extension.
	ObjectId ObjectIdResponse `pulumi:"objectId"`
	// The value of this X.509 extension.
	Value string `pulumi:"value"`
}

// X509ExtensionResponseInput is an input type that accepts X509ExtensionResponseArgs and X509ExtensionResponseOutput values.
// You can construct a concrete instance of `X509ExtensionResponseInput` via:
//
//          X509ExtensionResponseArgs{...}
type X509ExtensionResponseInput interface {
	pulumi.Input

	ToX509ExtensionResponseOutput() X509ExtensionResponseOutput
	ToX509ExtensionResponseOutputWithContext(context.Context) X509ExtensionResponseOutput
}

// An X509Extension specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
type X509ExtensionResponseArgs struct {
	// Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
	Critical pulumi.BoolInput `pulumi:"critical"`
	// The OID for this X.509 extension.
	ObjectId ObjectIdResponseInput `pulumi:"objectId"`
	// The value of this X.509 extension.
	Value pulumi.StringInput `pulumi:"value"`
}

func (X509ExtensionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X509ExtensionResponse)(nil)).Elem()
}

func (i X509ExtensionResponseArgs) ToX509ExtensionResponseOutput() X509ExtensionResponseOutput {
	return i.ToX509ExtensionResponseOutputWithContext(context.Background())
}

func (i X509ExtensionResponseArgs) ToX509ExtensionResponseOutputWithContext(ctx context.Context) X509ExtensionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509ExtensionResponseOutput)
}

// X509ExtensionResponseArrayInput is an input type that accepts X509ExtensionResponseArray and X509ExtensionResponseArrayOutput values.
// You can construct a concrete instance of `X509ExtensionResponseArrayInput` via:
//
//          X509ExtensionResponseArray{ X509ExtensionResponseArgs{...} }
type X509ExtensionResponseArrayInput interface {
	pulumi.Input

	ToX509ExtensionResponseArrayOutput() X509ExtensionResponseArrayOutput
	ToX509ExtensionResponseArrayOutputWithContext(context.Context) X509ExtensionResponseArrayOutput
}

type X509ExtensionResponseArray []X509ExtensionResponseInput

func (X509ExtensionResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X509ExtensionResponse)(nil)).Elem()
}

func (i X509ExtensionResponseArray) ToX509ExtensionResponseArrayOutput() X509ExtensionResponseArrayOutput {
	return i.ToX509ExtensionResponseArrayOutputWithContext(context.Background())
}

func (i X509ExtensionResponseArray) ToX509ExtensionResponseArrayOutputWithContext(ctx context.Context) X509ExtensionResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509ExtensionResponseArrayOutput)
}

// An X509Extension specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
type X509ExtensionResponseOutput struct{ *pulumi.OutputState }

func (X509ExtensionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X509ExtensionResponse)(nil)).Elem()
}

func (o X509ExtensionResponseOutput) ToX509ExtensionResponseOutput() X509ExtensionResponseOutput {
	return o
}

func (o X509ExtensionResponseOutput) ToX509ExtensionResponseOutputWithContext(ctx context.Context) X509ExtensionResponseOutput {
	return o
}

// Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
func (o X509ExtensionResponseOutput) Critical() pulumi.BoolOutput {
	return o.ApplyT(func(v X509ExtensionResponse) bool { return v.Critical }).(pulumi.BoolOutput)
}

// The OID for this X.509 extension.
func (o X509ExtensionResponseOutput) ObjectId() ObjectIdResponseOutput {
	return o.ApplyT(func(v X509ExtensionResponse) ObjectIdResponse { return v.ObjectId }).(ObjectIdResponseOutput)
}

// The value of this X.509 extension.
func (o X509ExtensionResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v X509ExtensionResponse) string { return v.Value }).(pulumi.StringOutput)
}

type X509ExtensionResponseArrayOutput struct{ *pulumi.OutputState }

func (X509ExtensionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]X509ExtensionResponse)(nil)).Elem()
}

func (o X509ExtensionResponseArrayOutput) ToX509ExtensionResponseArrayOutput() X509ExtensionResponseArrayOutput {
	return o
}

func (o X509ExtensionResponseArrayOutput) ToX509ExtensionResponseArrayOutputWithContext(ctx context.Context) X509ExtensionResponseArrayOutput {
	return o
}

func (o X509ExtensionResponseArrayOutput) Index(i pulumi.IntInput) X509ExtensionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) X509ExtensionResponse {
		return vs[0].([]X509ExtensionResponse)[vs[1].(int)]
	}).(X509ExtensionResponseOutput)
}

// An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
type X509Parameters struct {
	// Optional. Describes custom X.509 extensions.
	AdditionalExtensions []X509Extension `pulumi:"additionalExtensions"`
	// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
	AiaOcspServers []string `pulumi:"aiaOcspServers"`
	// Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
	CaOptions *CaOptions `pulumi:"caOptions"`
	// Optional. Indicates the intended use for keys that correspond to a certificate.
	KeyUsage *KeyUsage `pulumi:"keyUsage"`
	// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	PolicyIds []ObjectId `pulumi:"policyIds"`
}

// X509ParametersInput is an input type that accepts X509ParametersArgs and X509ParametersOutput values.
// You can construct a concrete instance of `X509ParametersInput` via:
//
//          X509ParametersArgs{...}
type X509ParametersInput interface {
	pulumi.Input

	ToX509ParametersOutput() X509ParametersOutput
	ToX509ParametersOutputWithContext(context.Context) X509ParametersOutput
}

// An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
type X509ParametersArgs struct {
	// Optional. Describes custom X.509 extensions.
	AdditionalExtensions X509ExtensionArrayInput `pulumi:"additionalExtensions"`
	// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
	AiaOcspServers pulumi.StringArrayInput `pulumi:"aiaOcspServers"`
	// Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
	CaOptions CaOptionsPtrInput `pulumi:"caOptions"`
	// Optional. Indicates the intended use for keys that correspond to a certificate.
	KeyUsage KeyUsagePtrInput `pulumi:"keyUsage"`
	// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	PolicyIds ObjectIdArrayInput `pulumi:"policyIds"`
}

func (X509ParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X509Parameters)(nil)).Elem()
}

func (i X509ParametersArgs) ToX509ParametersOutput() X509ParametersOutput {
	return i.ToX509ParametersOutputWithContext(context.Background())
}

func (i X509ParametersArgs) ToX509ParametersOutputWithContext(ctx context.Context) X509ParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509ParametersOutput)
}

func (i X509ParametersArgs) ToX509ParametersPtrOutput() X509ParametersPtrOutput {
	return i.ToX509ParametersPtrOutputWithContext(context.Background())
}

func (i X509ParametersArgs) ToX509ParametersPtrOutputWithContext(ctx context.Context) X509ParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509ParametersOutput).ToX509ParametersPtrOutputWithContext(ctx)
}

// X509ParametersPtrInput is an input type that accepts X509ParametersArgs, X509ParametersPtr and X509ParametersPtrOutput values.
// You can construct a concrete instance of `X509ParametersPtrInput` via:
//
//          X509ParametersArgs{...}
//
//  or:
//
//          nil
type X509ParametersPtrInput interface {
	pulumi.Input

	ToX509ParametersPtrOutput() X509ParametersPtrOutput
	ToX509ParametersPtrOutputWithContext(context.Context) X509ParametersPtrOutput
}

type x509parametersPtrType X509ParametersArgs

func X509ParametersPtr(v *X509ParametersArgs) X509ParametersPtrInput {
	return (*x509parametersPtrType)(v)
}

func (*x509parametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X509Parameters)(nil)).Elem()
}

func (i *x509parametersPtrType) ToX509ParametersPtrOutput() X509ParametersPtrOutput {
	return i.ToX509ParametersPtrOutputWithContext(context.Background())
}

func (i *x509parametersPtrType) ToX509ParametersPtrOutputWithContext(ctx context.Context) X509ParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509ParametersPtrOutput)
}

// An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
type X509ParametersOutput struct{ *pulumi.OutputState }

func (X509ParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X509Parameters)(nil)).Elem()
}

func (o X509ParametersOutput) ToX509ParametersOutput() X509ParametersOutput {
	return o
}

func (o X509ParametersOutput) ToX509ParametersOutputWithContext(ctx context.Context) X509ParametersOutput {
	return o
}

func (o X509ParametersOutput) ToX509ParametersPtrOutput() X509ParametersPtrOutput {
	return o.ToX509ParametersPtrOutputWithContext(context.Background())
}

func (o X509ParametersOutput) ToX509ParametersPtrOutputWithContext(ctx context.Context) X509ParametersPtrOutput {
	return o.ApplyT(func(v X509Parameters) *X509Parameters {
		return &v
	}).(X509ParametersPtrOutput)
}

// Optional. Describes custom X.509 extensions.
func (o X509ParametersOutput) AdditionalExtensions() X509ExtensionArrayOutput {
	return o.ApplyT(func(v X509Parameters) []X509Extension { return v.AdditionalExtensions }).(X509ExtensionArrayOutput)
}

// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
func (o X509ParametersOutput) AiaOcspServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v X509Parameters) []string { return v.AiaOcspServers }).(pulumi.StringArrayOutput)
}

// Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
func (o X509ParametersOutput) CaOptions() CaOptionsPtrOutput {
	return o.ApplyT(func(v X509Parameters) *CaOptions { return v.CaOptions }).(CaOptionsPtrOutput)
}

// Optional. Indicates the intended use for keys that correspond to a certificate.
func (o X509ParametersOutput) KeyUsage() KeyUsagePtrOutput {
	return o.ApplyT(func(v X509Parameters) *KeyUsage { return v.KeyUsage }).(KeyUsagePtrOutput)
}

// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
func (o X509ParametersOutput) PolicyIds() ObjectIdArrayOutput {
	return o.ApplyT(func(v X509Parameters) []ObjectId { return v.PolicyIds }).(ObjectIdArrayOutput)
}

type X509ParametersPtrOutput struct{ *pulumi.OutputState }

func (X509ParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X509Parameters)(nil)).Elem()
}

func (o X509ParametersPtrOutput) ToX509ParametersPtrOutput() X509ParametersPtrOutput {
	return o
}

func (o X509ParametersPtrOutput) ToX509ParametersPtrOutputWithContext(ctx context.Context) X509ParametersPtrOutput {
	return o
}

func (o X509ParametersPtrOutput) Elem() X509ParametersOutput {
	return o.ApplyT(func(v *X509Parameters) X509Parameters { return *v }).(X509ParametersOutput)
}

// Optional. Describes custom X.509 extensions.
func (o X509ParametersPtrOutput) AdditionalExtensions() X509ExtensionArrayOutput {
	return o.ApplyT(func(v *X509Parameters) []X509Extension {
		if v == nil {
			return nil
		}
		return v.AdditionalExtensions
	}).(X509ExtensionArrayOutput)
}

// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
func (o X509ParametersPtrOutput) AiaOcspServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *X509Parameters) []string {
		if v == nil {
			return nil
		}
		return v.AiaOcspServers
	}).(pulumi.StringArrayOutput)
}

// Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
func (o X509ParametersPtrOutput) CaOptions() CaOptionsPtrOutput {
	return o.ApplyT(func(v *X509Parameters) *CaOptions {
		if v == nil {
			return nil
		}
		return v.CaOptions
	}).(CaOptionsPtrOutput)
}

// Optional. Indicates the intended use for keys that correspond to a certificate.
func (o X509ParametersPtrOutput) KeyUsage() KeyUsagePtrOutput {
	return o.ApplyT(func(v *X509Parameters) *KeyUsage {
		if v == nil {
			return nil
		}
		return v.KeyUsage
	}).(KeyUsagePtrOutput)
}

// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
func (o X509ParametersPtrOutput) PolicyIds() ObjectIdArrayOutput {
	return o.ApplyT(func(v *X509Parameters) []ObjectId {
		if v == nil {
			return nil
		}
		return v.PolicyIds
	}).(ObjectIdArrayOutput)
}

// An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
type X509ParametersResponse struct {
	// Optional. Describes custom X.509 extensions.
	AdditionalExtensions []X509ExtensionResponse `pulumi:"additionalExtensions"`
	// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
	AiaOcspServers []string `pulumi:"aiaOcspServers"`
	// Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
	CaOptions CaOptionsResponse `pulumi:"caOptions"`
	// Optional. Indicates the intended use for keys that correspond to a certificate.
	KeyUsage KeyUsageResponse `pulumi:"keyUsage"`
	// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	PolicyIds []ObjectIdResponse `pulumi:"policyIds"`
}

// X509ParametersResponseInput is an input type that accepts X509ParametersResponseArgs and X509ParametersResponseOutput values.
// You can construct a concrete instance of `X509ParametersResponseInput` via:
//
//          X509ParametersResponseArgs{...}
type X509ParametersResponseInput interface {
	pulumi.Input

	ToX509ParametersResponseOutput() X509ParametersResponseOutput
	ToX509ParametersResponseOutputWithContext(context.Context) X509ParametersResponseOutput
}

// An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
type X509ParametersResponseArgs struct {
	// Optional. Describes custom X.509 extensions.
	AdditionalExtensions X509ExtensionResponseArrayInput `pulumi:"additionalExtensions"`
	// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
	AiaOcspServers pulumi.StringArrayInput `pulumi:"aiaOcspServers"`
	// Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
	CaOptions CaOptionsResponseInput `pulumi:"caOptions"`
	// Optional. Indicates the intended use for keys that correspond to a certificate.
	KeyUsage KeyUsageResponseInput `pulumi:"keyUsage"`
	// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	PolicyIds ObjectIdResponseArrayInput `pulumi:"policyIds"`
}

func (X509ParametersResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*X509ParametersResponse)(nil)).Elem()
}

func (i X509ParametersResponseArgs) ToX509ParametersResponseOutput() X509ParametersResponseOutput {
	return i.ToX509ParametersResponseOutputWithContext(context.Background())
}

func (i X509ParametersResponseArgs) ToX509ParametersResponseOutputWithContext(ctx context.Context) X509ParametersResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509ParametersResponseOutput)
}

func (i X509ParametersResponseArgs) ToX509ParametersResponsePtrOutput() X509ParametersResponsePtrOutput {
	return i.ToX509ParametersResponsePtrOutputWithContext(context.Background())
}

func (i X509ParametersResponseArgs) ToX509ParametersResponsePtrOutputWithContext(ctx context.Context) X509ParametersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509ParametersResponseOutput).ToX509ParametersResponsePtrOutputWithContext(ctx)
}

// X509ParametersResponsePtrInput is an input type that accepts X509ParametersResponseArgs, X509ParametersResponsePtr and X509ParametersResponsePtrOutput values.
// You can construct a concrete instance of `X509ParametersResponsePtrInput` via:
//
//          X509ParametersResponseArgs{...}
//
//  or:
//
//          nil
type X509ParametersResponsePtrInput interface {
	pulumi.Input

	ToX509ParametersResponsePtrOutput() X509ParametersResponsePtrOutput
	ToX509ParametersResponsePtrOutputWithContext(context.Context) X509ParametersResponsePtrOutput
}

type x509parametersResponsePtrType X509ParametersResponseArgs

func X509ParametersResponsePtr(v *X509ParametersResponseArgs) X509ParametersResponsePtrInput {
	return (*x509parametersResponsePtrType)(v)
}

func (*x509parametersResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**X509ParametersResponse)(nil)).Elem()
}

func (i *x509parametersResponsePtrType) ToX509ParametersResponsePtrOutput() X509ParametersResponsePtrOutput {
	return i.ToX509ParametersResponsePtrOutputWithContext(context.Background())
}

func (i *x509parametersResponsePtrType) ToX509ParametersResponsePtrOutputWithContext(ctx context.Context) X509ParametersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(X509ParametersResponsePtrOutput)
}

// An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.
type X509ParametersResponseOutput struct{ *pulumi.OutputState }

func (X509ParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*X509ParametersResponse)(nil)).Elem()
}

func (o X509ParametersResponseOutput) ToX509ParametersResponseOutput() X509ParametersResponseOutput {
	return o
}

func (o X509ParametersResponseOutput) ToX509ParametersResponseOutputWithContext(ctx context.Context) X509ParametersResponseOutput {
	return o
}

func (o X509ParametersResponseOutput) ToX509ParametersResponsePtrOutput() X509ParametersResponsePtrOutput {
	return o.ToX509ParametersResponsePtrOutputWithContext(context.Background())
}

func (o X509ParametersResponseOutput) ToX509ParametersResponsePtrOutputWithContext(ctx context.Context) X509ParametersResponsePtrOutput {
	return o.ApplyT(func(v X509ParametersResponse) *X509ParametersResponse {
		return &v
	}).(X509ParametersResponsePtrOutput)
}

// Optional. Describes custom X.509 extensions.
func (o X509ParametersResponseOutput) AdditionalExtensions() X509ExtensionResponseArrayOutput {
	return o.ApplyT(func(v X509ParametersResponse) []X509ExtensionResponse { return v.AdditionalExtensions }).(X509ExtensionResponseArrayOutput)
}

// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
func (o X509ParametersResponseOutput) AiaOcspServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v X509ParametersResponse) []string { return v.AiaOcspServers }).(pulumi.StringArrayOutput)
}

// Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
func (o X509ParametersResponseOutput) CaOptions() CaOptionsResponseOutput {
	return o.ApplyT(func(v X509ParametersResponse) CaOptionsResponse { return v.CaOptions }).(CaOptionsResponseOutput)
}

// Optional. Indicates the intended use for keys that correspond to a certificate.
func (o X509ParametersResponseOutput) KeyUsage() KeyUsageResponseOutput {
	return o.ApplyT(func(v X509ParametersResponse) KeyUsageResponse { return v.KeyUsage }).(KeyUsageResponseOutput)
}

// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
func (o X509ParametersResponseOutput) PolicyIds() ObjectIdResponseArrayOutput {
	return o.ApplyT(func(v X509ParametersResponse) []ObjectIdResponse { return v.PolicyIds }).(ObjectIdResponseArrayOutput)
}

type X509ParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (X509ParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**X509ParametersResponse)(nil)).Elem()
}

func (o X509ParametersResponsePtrOutput) ToX509ParametersResponsePtrOutput() X509ParametersResponsePtrOutput {
	return o
}

func (o X509ParametersResponsePtrOutput) ToX509ParametersResponsePtrOutputWithContext(ctx context.Context) X509ParametersResponsePtrOutput {
	return o
}

func (o X509ParametersResponsePtrOutput) Elem() X509ParametersResponseOutput {
	return o.ApplyT(func(v *X509ParametersResponse) X509ParametersResponse { return *v }).(X509ParametersResponseOutput)
}

// Optional. Describes custom X.509 extensions.
func (o X509ParametersResponsePtrOutput) AdditionalExtensions() X509ExtensionResponseArrayOutput {
	return o.ApplyT(func(v *X509ParametersResponse) []X509ExtensionResponse {
		if v == nil {
			return nil
		}
		return v.AdditionalExtensions
	}).(X509ExtensionResponseArrayOutput)
}

// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
func (o X509ParametersResponsePtrOutput) AiaOcspServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *X509ParametersResponse) []string {
		if v == nil {
			return nil
		}
		return v.AiaOcspServers
	}).(pulumi.StringArrayOutput)
}

// Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
func (o X509ParametersResponsePtrOutput) CaOptions() CaOptionsResponsePtrOutput {
	return o.ApplyT(func(v *X509ParametersResponse) *CaOptionsResponse {
		if v == nil {
			return nil
		}
		return &v.CaOptions
	}).(CaOptionsResponsePtrOutput)
}

// Optional. Indicates the intended use for keys that correspond to a certificate.
func (o X509ParametersResponsePtrOutput) KeyUsage() KeyUsageResponsePtrOutput {
	return o.ApplyT(func(v *X509ParametersResponse) *KeyUsageResponse {
		if v == nil {
			return nil
		}
		return &v.KeyUsage
	}).(KeyUsageResponsePtrOutput)
}

// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
func (o X509ParametersResponsePtrOutput) PolicyIds() ObjectIdResponseArrayOutput {
	return o.ApplyT(func(v *X509ParametersResponse) []ObjectIdResponse {
		if v == nil {
			return nil
		}
		return v.PolicyIds
	}).(ObjectIdResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(AccessUrlsResponseOutput{})
	pulumi.RegisterOutputType(AccessUrlsResponsePtrOutput{})
	pulumi.RegisterOutputType(AllowedKeyTypeOutput{})
	pulumi.RegisterOutputType(AllowedKeyTypeArrayOutput{})
	pulumi.RegisterOutputType(AllowedKeyTypeResponseOutput{})
	pulumi.RegisterOutputType(AllowedKeyTypeResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(CaOptionsOutput{})
	pulumi.RegisterOutputType(CaOptionsPtrOutput{})
	pulumi.RegisterOutputType(CaOptionsResponseOutput{})
	pulumi.RegisterOutputType(CaOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(CertificateConfigOutput{})
	pulumi.RegisterOutputType(CertificateConfigPtrOutput{})
	pulumi.RegisterOutputType(CertificateConfigResponseOutput{})
	pulumi.RegisterOutputType(CertificateConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(CertificateDescriptionResponseOutput{})
	pulumi.RegisterOutputType(CertificateDescriptionResponsePtrOutput{})
	pulumi.RegisterOutputType(CertificateDescriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(CertificateExtensionConstraintsOutput{})
	pulumi.RegisterOutputType(CertificateExtensionConstraintsPtrOutput{})
	pulumi.RegisterOutputType(CertificateExtensionConstraintsResponseOutput{})
	pulumi.RegisterOutputType(CertificateExtensionConstraintsResponsePtrOutput{})
	pulumi.RegisterOutputType(CertificateFingerprintResponseOutput{})
	pulumi.RegisterOutputType(CertificateFingerprintResponsePtrOutput{})
	pulumi.RegisterOutputType(CertificateIdentityConstraintsOutput{})
	pulumi.RegisterOutputType(CertificateIdentityConstraintsPtrOutput{})
	pulumi.RegisterOutputType(CertificateIdentityConstraintsResponseOutput{})
	pulumi.RegisterOutputType(CertificateIdentityConstraintsResponsePtrOutput{})
	pulumi.RegisterOutputType(EcKeyTypeOutput{})
	pulumi.RegisterOutputType(EcKeyTypePtrOutput{})
	pulumi.RegisterOutputType(EcKeyTypeResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(ExprResponsePtrOutput{})
	pulumi.RegisterOutputType(ExtendedKeyUsageOptionsOutput{})
	pulumi.RegisterOutputType(ExtendedKeyUsageOptionsPtrOutput{})
	pulumi.RegisterOutputType(ExtendedKeyUsageOptionsResponseOutput{})
	pulumi.RegisterOutputType(ExtendedKeyUsageOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(IssuanceModesOutput{})
	pulumi.RegisterOutputType(IssuanceModesPtrOutput{})
	pulumi.RegisterOutputType(IssuanceModesResponseOutput{})
	pulumi.RegisterOutputType(IssuanceModesResponsePtrOutput{})
	pulumi.RegisterOutputType(IssuancePolicyOutput{})
	pulumi.RegisterOutputType(IssuancePolicyPtrOutput{})
	pulumi.RegisterOutputType(IssuancePolicyResponseOutput{})
	pulumi.RegisterOutputType(IssuancePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyIdResponseOutput{})
	pulumi.RegisterOutputType(KeyIdResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyUsageOutput{})
	pulumi.RegisterOutputType(KeyUsagePtrOutput{})
	pulumi.RegisterOutputType(KeyUsageOptionsOutput{})
	pulumi.RegisterOutputType(KeyUsageOptionsPtrOutput{})
	pulumi.RegisterOutputType(KeyUsageOptionsResponseOutput{})
	pulumi.RegisterOutputType(KeyUsageOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyUsageResponseOutput{})
	pulumi.RegisterOutputType(KeyUsageResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVersionSpecOutput{})
	pulumi.RegisterOutputType(KeyVersionSpecPtrOutput{})
	pulumi.RegisterOutputType(KeyVersionSpecResponseOutput{})
	pulumi.RegisterOutputType(KeyVersionSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(ObjectIdOutput{})
	pulumi.RegisterOutputType(ObjectIdArrayOutput{})
	pulumi.RegisterOutputType(ObjectIdResponseOutput{})
	pulumi.RegisterOutputType(ObjectIdResponseArrayOutput{})
	pulumi.RegisterOutputType(PublicKeyOutput{})
	pulumi.RegisterOutputType(PublicKeyPtrOutput{})
	pulumi.RegisterOutputType(PublicKeyResponseOutput{})
	pulumi.RegisterOutputType(PublicKeyResponsePtrOutput{})
	pulumi.RegisterOutputType(PublishingOptionsOutput{})
	pulumi.RegisterOutputType(PublishingOptionsPtrOutput{})
	pulumi.RegisterOutputType(PublishingOptionsResponseOutput{})
	pulumi.RegisterOutputType(PublishingOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(RevocationDetailsResponseOutput{})
	pulumi.RegisterOutputType(RevocationDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(RsaKeyTypeOutput{})
	pulumi.RegisterOutputType(RsaKeyTypePtrOutput{})
	pulumi.RegisterOutputType(RsaKeyTypeResponseOutput{})
	pulumi.RegisterOutputType(SubjectOutput{})
	pulumi.RegisterOutputType(SubjectPtrOutput{})
	pulumi.RegisterOutputType(SubjectAltNamesOutput{})
	pulumi.RegisterOutputType(SubjectAltNamesPtrOutput{})
	pulumi.RegisterOutputType(SubjectAltNamesResponseOutput{})
	pulumi.RegisterOutputType(SubjectAltNamesResponsePtrOutput{})
	pulumi.RegisterOutputType(SubjectConfigOutput{})
	pulumi.RegisterOutputType(SubjectConfigPtrOutput{})
	pulumi.RegisterOutputType(SubjectConfigResponseOutput{})
	pulumi.RegisterOutputType(SubjectConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(SubjectDescriptionResponseOutput{})
	pulumi.RegisterOutputType(SubjectDescriptionResponsePtrOutput{})
	pulumi.RegisterOutputType(SubjectResponseOutput{})
	pulumi.RegisterOutputType(SubjectResponsePtrOutput{})
	pulumi.RegisterOutputType(SubordinateConfigOutput{})
	pulumi.RegisterOutputType(SubordinateConfigPtrOutput{})
	pulumi.RegisterOutputType(SubordinateConfigChainOutput{})
	pulumi.RegisterOutputType(SubordinateConfigChainPtrOutput{})
	pulumi.RegisterOutputType(SubordinateConfigChainResponseOutput{})
	pulumi.RegisterOutputType(SubordinateConfigChainResponsePtrOutput{})
	pulumi.RegisterOutputType(SubordinateConfigResponseOutput{})
	pulumi.RegisterOutputType(SubordinateConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(X509ExtensionOutput{})
	pulumi.RegisterOutputType(X509ExtensionArrayOutput{})
	pulumi.RegisterOutputType(X509ExtensionResponseOutput{})
	pulumi.RegisterOutputType(X509ExtensionResponseArrayOutput{})
	pulumi.RegisterOutputType(X509ParametersOutput{})
	pulumi.RegisterOutputType(X509ParametersPtrOutput{})
	pulumi.RegisterOutputType(X509ParametersResponseOutput{})
	pulumi.RegisterOutputType(X509ParametersResponsePtrOutput{})
}
