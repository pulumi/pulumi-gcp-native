// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The log type that this config enables.
type AuditLogConfigLogType string

const (
	// Default case. Should never be this.
	AuditLogConfigLogTypeLogTypeUnspecified = AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED")
	// Admin reads. Example: CloudIAM getIamPolicy
	AuditLogConfigLogTypeAdminRead = AuditLogConfigLogType("ADMIN_READ")
	// Data writes. Example: CloudSQL Users create
	AuditLogConfigLogTypeDataWrite = AuditLogConfigLogType("DATA_WRITE")
	// Data reads. Example: CloudSQL Users list
	AuditLogConfigLogTypeDataRead = AuditLogConfigLogType("DATA_READ")
)

func (AuditLogConfigLogType) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigLogType)(nil)).Elem()
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput {
	return pulumi.ToOutput(e).(AuditLogConfigLogTypeOutput)
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypeOutputWithContext(ctx context.Context) AuditLogConfigLogTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AuditLogConfigLogTypeOutput)
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return e.ToAuditLogConfigLogTypePtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return AuditLogConfigLogType(e).ToAuditLogConfigLogTypeOutputWithContext(ctx).ToAuditLogConfigLogTypePtrOutputWithContext(ctx)
}

func (e AuditLogConfigLogType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AuditLogConfigLogTypeOutput struct{ *pulumi.OutputState }

func (AuditLogConfigLogTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigLogType)(nil)).Elem()
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput {
	return o
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypeOutputWithContext(ctx context.Context) AuditLogConfigLogTypeOutput {
	return o
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return o.ToAuditLogConfigLogTypePtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuditLogConfigLogType) *AuditLogConfigLogType {
		return &v
	}).(AuditLogConfigLogTypePtrOutput)
}

func (o AuditLogConfigLogTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuditLogConfigLogType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AuditLogConfigLogTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuditLogConfigLogType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AuditLogConfigLogTypePtrOutput struct{ *pulumi.OutputState }

func (AuditLogConfigLogTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditLogConfigLogType)(nil)).Elem()
}

func (o AuditLogConfigLogTypePtrOutput) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return o
}

func (o AuditLogConfigLogTypePtrOutput) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return o
}

func (o AuditLogConfigLogTypePtrOutput) Elem() AuditLogConfigLogTypeOutput {
	return o.ApplyT(func(v *AuditLogConfigLogType) AuditLogConfigLogType {
		if v != nil {
			return *v
		}
		var ret AuditLogConfigLogType
		return ret
	}).(AuditLogConfigLogTypeOutput)
}

func (o AuditLogConfigLogTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuditLogConfigLogTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AuditLogConfigLogType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AuditLogConfigLogTypeInput is an input type that accepts AuditLogConfigLogTypeArgs and AuditLogConfigLogTypeOutput values.
// You can construct a concrete instance of `AuditLogConfigLogTypeInput` via:
//
//          AuditLogConfigLogTypeArgs{...}
type AuditLogConfigLogTypeInput interface {
	pulumi.Input

	ToAuditLogConfigLogTypeOutput() AuditLogConfigLogTypeOutput
	ToAuditLogConfigLogTypeOutputWithContext(context.Context) AuditLogConfigLogTypeOutput
}

var auditLogConfigLogTypePtrType = reflect.TypeOf((**AuditLogConfigLogType)(nil)).Elem()

type AuditLogConfigLogTypePtrInput interface {
	pulumi.Input

	ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput
	ToAuditLogConfigLogTypePtrOutputWithContext(context.Context) AuditLogConfigLogTypePtrOutput
}

type auditLogConfigLogTypePtr string

func AuditLogConfigLogTypePtr(v string) AuditLogConfigLogTypePtrInput {
	return (*auditLogConfigLogTypePtr)(&v)
}

func (*auditLogConfigLogTypePtr) ElementType() reflect.Type {
	return auditLogConfigLogTypePtrType
}

func (in *auditLogConfigLogTypePtr) ToAuditLogConfigLogTypePtrOutput() AuditLogConfigLogTypePtrOutput {
	return pulumi.ToOutput(in).(AuditLogConfigLogTypePtrOutput)
}

func (in *auditLogConfigLogTypePtr) ToAuditLogConfigLogTypePtrOutputWithContext(ctx context.Context) AuditLogConfigLogTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AuditLogConfigLogTypePtrOutput)
}

// Required. Immutable. The Tier of this CaPool.
type CaPoolTier string

const (
	// Not specified.
	CaPoolTierTierUnspecified = CaPoolTier("TIER_UNSPECIFIED")
	// Enterprise tier.
	CaPoolTierEnterprise = CaPoolTier("ENTERPRISE")
	// DevOps tier.
	CaPoolTierDevops = CaPoolTier("DEVOPS")
)

func (CaPoolTier) ElementType() reflect.Type {
	return reflect.TypeOf((*CaPoolTier)(nil)).Elem()
}

func (e CaPoolTier) ToCaPoolTierOutput() CaPoolTierOutput {
	return pulumi.ToOutput(e).(CaPoolTierOutput)
}

func (e CaPoolTier) ToCaPoolTierOutputWithContext(ctx context.Context) CaPoolTierOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CaPoolTierOutput)
}

func (e CaPoolTier) ToCaPoolTierPtrOutput() CaPoolTierPtrOutput {
	return e.ToCaPoolTierPtrOutputWithContext(context.Background())
}

func (e CaPoolTier) ToCaPoolTierPtrOutputWithContext(ctx context.Context) CaPoolTierPtrOutput {
	return CaPoolTier(e).ToCaPoolTierOutputWithContext(ctx).ToCaPoolTierPtrOutputWithContext(ctx)
}

func (e CaPoolTier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CaPoolTier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CaPoolTier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CaPoolTier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CaPoolTierOutput struct{ *pulumi.OutputState }

func (CaPoolTierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaPoolTier)(nil)).Elem()
}

func (o CaPoolTierOutput) ToCaPoolTierOutput() CaPoolTierOutput {
	return o
}

func (o CaPoolTierOutput) ToCaPoolTierOutputWithContext(ctx context.Context) CaPoolTierOutput {
	return o
}

func (o CaPoolTierOutput) ToCaPoolTierPtrOutput() CaPoolTierPtrOutput {
	return o.ToCaPoolTierPtrOutputWithContext(context.Background())
}

func (o CaPoolTierOutput) ToCaPoolTierPtrOutputWithContext(ctx context.Context) CaPoolTierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CaPoolTier) *CaPoolTier {
		return &v
	}).(CaPoolTierPtrOutput)
}

func (o CaPoolTierOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CaPoolTierOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CaPoolTier) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CaPoolTierOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CaPoolTierOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CaPoolTier) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CaPoolTierPtrOutput struct{ *pulumi.OutputState }

func (CaPoolTierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CaPoolTier)(nil)).Elem()
}

func (o CaPoolTierPtrOutput) ToCaPoolTierPtrOutput() CaPoolTierPtrOutput {
	return o
}

func (o CaPoolTierPtrOutput) ToCaPoolTierPtrOutputWithContext(ctx context.Context) CaPoolTierPtrOutput {
	return o
}

func (o CaPoolTierPtrOutput) Elem() CaPoolTierOutput {
	return o.ApplyT(func(v *CaPoolTier) CaPoolTier {
		if v != nil {
			return *v
		}
		var ret CaPoolTier
		return ret
	}).(CaPoolTierOutput)
}

func (o CaPoolTierPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CaPoolTierPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CaPoolTier) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CaPoolTierInput is an input type that accepts CaPoolTierArgs and CaPoolTierOutput values.
// You can construct a concrete instance of `CaPoolTierInput` via:
//
//          CaPoolTierArgs{...}
type CaPoolTierInput interface {
	pulumi.Input

	ToCaPoolTierOutput() CaPoolTierOutput
	ToCaPoolTierOutputWithContext(context.Context) CaPoolTierOutput
}

var caPoolTierPtrType = reflect.TypeOf((**CaPoolTier)(nil)).Elem()

type CaPoolTierPtrInput interface {
	pulumi.Input

	ToCaPoolTierPtrOutput() CaPoolTierPtrOutput
	ToCaPoolTierPtrOutputWithContext(context.Context) CaPoolTierPtrOutput
}

type caPoolTierPtr string

func CaPoolTierPtr(v string) CaPoolTierPtrInput {
	return (*caPoolTierPtr)(&v)
}

func (*caPoolTierPtr) ElementType() reflect.Type {
	return caPoolTierPtrType
}

func (in *caPoolTierPtr) ToCaPoolTierPtrOutput() CaPoolTierPtrOutput {
	return pulumi.ToOutput(in).(CaPoolTierPtrOutput)
}

func (in *caPoolTierPtr) ToCaPoolTierPtrOutputWithContext(ctx context.Context) CaPoolTierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CaPoolTierPtrOutput)
}

// Required. Immutable. The Type of this CertificateAuthority.
type CertificateAuthorityType string

const (
	// Not specified.
	CertificateAuthorityTypeTypeUnspecified = CertificateAuthorityType("TYPE_UNSPECIFIED")
	// Self-signed CA.
	CertificateAuthorityTypeSelfSigned = CertificateAuthorityType("SELF_SIGNED")
	// Subordinate CA. Could be issued by a Private CA CertificateAuthority or an unmanaged CA.
	CertificateAuthorityTypeSubordinate = CertificateAuthorityType("SUBORDINATE")
)

func (CertificateAuthorityType) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityType)(nil)).Elem()
}

func (e CertificateAuthorityType) ToCertificateAuthorityTypeOutput() CertificateAuthorityTypeOutput {
	return pulumi.ToOutput(e).(CertificateAuthorityTypeOutput)
}

func (e CertificateAuthorityType) ToCertificateAuthorityTypeOutputWithContext(ctx context.Context) CertificateAuthorityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CertificateAuthorityTypeOutput)
}

func (e CertificateAuthorityType) ToCertificateAuthorityTypePtrOutput() CertificateAuthorityTypePtrOutput {
	return e.ToCertificateAuthorityTypePtrOutputWithContext(context.Background())
}

func (e CertificateAuthorityType) ToCertificateAuthorityTypePtrOutputWithContext(ctx context.Context) CertificateAuthorityTypePtrOutput {
	return CertificateAuthorityType(e).ToCertificateAuthorityTypeOutputWithContext(ctx).ToCertificateAuthorityTypePtrOutputWithContext(ctx)
}

func (e CertificateAuthorityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateAuthorityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateAuthorityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CertificateAuthorityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CertificateAuthorityTypeOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityType)(nil)).Elem()
}

func (o CertificateAuthorityTypeOutput) ToCertificateAuthorityTypeOutput() CertificateAuthorityTypeOutput {
	return o
}

func (o CertificateAuthorityTypeOutput) ToCertificateAuthorityTypeOutputWithContext(ctx context.Context) CertificateAuthorityTypeOutput {
	return o
}

func (o CertificateAuthorityTypeOutput) ToCertificateAuthorityTypePtrOutput() CertificateAuthorityTypePtrOutput {
	return o.ToCertificateAuthorityTypePtrOutputWithContext(context.Background())
}

func (o CertificateAuthorityTypeOutput) ToCertificateAuthorityTypePtrOutputWithContext(ctx context.Context) CertificateAuthorityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateAuthorityType) *CertificateAuthorityType {
		return &v
	}).(CertificateAuthorityTypePtrOutput)
}

func (o CertificateAuthorityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CertificateAuthorityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateAuthorityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CertificateAuthorityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateAuthorityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateAuthorityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CertificateAuthorityTypePtrOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateAuthorityType)(nil)).Elem()
}

func (o CertificateAuthorityTypePtrOutput) ToCertificateAuthorityTypePtrOutput() CertificateAuthorityTypePtrOutput {
	return o
}

func (o CertificateAuthorityTypePtrOutput) ToCertificateAuthorityTypePtrOutputWithContext(ctx context.Context) CertificateAuthorityTypePtrOutput {
	return o
}

func (o CertificateAuthorityTypePtrOutput) Elem() CertificateAuthorityTypeOutput {
	return o.ApplyT(func(v *CertificateAuthorityType) CertificateAuthorityType {
		if v != nil {
			return *v
		}
		var ret CertificateAuthorityType
		return ret
	}).(CertificateAuthorityTypeOutput)
}

func (o CertificateAuthorityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateAuthorityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CertificateAuthorityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CertificateAuthorityTypeInput is an input type that accepts CertificateAuthorityTypeArgs and CertificateAuthorityTypeOutput values.
// You can construct a concrete instance of `CertificateAuthorityTypeInput` via:
//
//          CertificateAuthorityTypeArgs{...}
type CertificateAuthorityTypeInput interface {
	pulumi.Input

	ToCertificateAuthorityTypeOutput() CertificateAuthorityTypeOutput
	ToCertificateAuthorityTypeOutputWithContext(context.Context) CertificateAuthorityTypeOutput
}

var certificateAuthorityTypePtrType = reflect.TypeOf((**CertificateAuthorityType)(nil)).Elem()

type CertificateAuthorityTypePtrInput interface {
	pulumi.Input

	ToCertificateAuthorityTypePtrOutput() CertificateAuthorityTypePtrOutput
	ToCertificateAuthorityTypePtrOutputWithContext(context.Context) CertificateAuthorityTypePtrOutput
}

type certificateAuthorityTypePtr string

func CertificateAuthorityTypePtr(v string) CertificateAuthorityTypePtrInput {
	return (*certificateAuthorityTypePtr)(&v)
}

func (*certificateAuthorityTypePtr) ElementType() reflect.Type {
	return certificateAuthorityTypePtrType
}

func (in *certificateAuthorityTypePtr) ToCertificateAuthorityTypePtrOutput() CertificateAuthorityTypePtrOutput {
	return pulumi.ToOutput(in).(CertificateAuthorityTypePtrOutput)
}

func (in *certificateAuthorityTypePtr) ToCertificateAuthorityTypePtrOutputWithContext(ctx context.Context) CertificateAuthorityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CertificateAuthorityTypePtrOutput)
}

type CertificateExtensionConstraintsKnownExtensionsItem string

const (
	// Not specified.
	CertificateExtensionConstraintsKnownExtensionsItemKnownCertificateExtensionUnspecified = CertificateExtensionConstraintsKnownExtensionsItem("KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED")
	// Refers to a certificate's Key Usage extension, as described in [RFC 5280 section 4.2.1.3](https://tools.ietf.org/html/rfc5280#section-4.2.1.3). This corresponds to the KeyUsage.base_key_usage field.
	CertificateExtensionConstraintsKnownExtensionsItemBaseKeyUsage = CertificateExtensionConstraintsKnownExtensionsItem("BASE_KEY_USAGE")
	// Refers to a certificate's Extended Key Usage extension, as described in [RFC 5280 section 4.2.1.12](https://tools.ietf.org/html/rfc5280#section-4.2.1.12). This corresponds to the KeyUsage.extended_key_usage message.
	CertificateExtensionConstraintsKnownExtensionsItemExtendedKeyUsage = CertificateExtensionConstraintsKnownExtensionsItem("EXTENDED_KEY_USAGE")
	// Refers to a certificate's Basic Constraints extension, as described in [RFC 5280 section 4.2.1.9](https://tools.ietf.org/html/rfc5280#section-4.2.1.9). This corresponds to the X509Parameters.ca_options field.
	CertificateExtensionConstraintsKnownExtensionsItemCaOptions = CertificateExtensionConstraintsKnownExtensionsItem("CA_OPTIONS")
	// Refers to a certificate's Policy object identifiers, as described in [RFC 5280 section 4.2.1.4](https://tools.ietf.org/html/rfc5280#section-4.2.1.4). This corresponds to the X509Parameters.policy_ids field.
	CertificateExtensionConstraintsKnownExtensionsItemPolicyIds = CertificateExtensionConstraintsKnownExtensionsItem("POLICY_IDS")
	// Refers to OCSP servers in a certificate's Authority Information Access extension, as described in [RFC 5280 section 4.2.2.1](https://tools.ietf.org/html/rfc5280#section-4.2.2.1), This corresponds to the X509Parameters.aia_ocsp_servers field.
	CertificateExtensionConstraintsKnownExtensionsItemAiaOcspServers = CertificateExtensionConstraintsKnownExtensionsItem("AIA_OCSP_SERVERS")
)

func (CertificateExtensionConstraintsKnownExtensionsItem) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateExtensionConstraintsKnownExtensionsItem)(nil)).Elem()
}

func (e CertificateExtensionConstraintsKnownExtensionsItem) ToCertificateExtensionConstraintsKnownExtensionsItemOutput() CertificateExtensionConstraintsKnownExtensionsItemOutput {
	return pulumi.ToOutput(e).(CertificateExtensionConstraintsKnownExtensionsItemOutput)
}

func (e CertificateExtensionConstraintsKnownExtensionsItem) ToCertificateExtensionConstraintsKnownExtensionsItemOutputWithContext(ctx context.Context) CertificateExtensionConstraintsKnownExtensionsItemOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CertificateExtensionConstraintsKnownExtensionsItemOutput)
}

func (e CertificateExtensionConstraintsKnownExtensionsItem) ToCertificateExtensionConstraintsKnownExtensionsItemPtrOutput() CertificateExtensionConstraintsKnownExtensionsItemPtrOutput {
	return e.ToCertificateExtensionConstraintsKnownExtensionsItemPtrOutputWithContext(context.Background())
}

func (e CertificateExtensionConstraintsKnownExtensionsItem) ToCertificateExtensionConstraintsKnownExtensionsItemPtrOutputWithContext(ctx context.Context) CertificateExtensionConstraintsKnownExtensionsItemPtrOutput {
	return CertificateExtensionConstraintsKnownExtensionsItem(e).ToCertificateExtensionConstraintsKnownExtensionsItemOutputWithContext(ctx).ToCertificateExtensionConstraintsKnownExtensionsItemPtrOutputWithContext(ctx)
}

func (e CertificateExtensionConstraintsKnownExtensionsItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateExtensionConstraintsKnownExtensionsItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateExtensionConstraintsKnownExtensionsItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CertificateExtensionConstraintsKnownExtensionsItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CertificateExtensionConstraintsKnownExtensionsItemOutput struct{ *pulumi.OutputState }

func (CertificateExtensionConstraintsKnownExtensionsItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateExtensionConstraintsKnownExtensionsItem)(nil)).Elem()
}

func (o CertificateExtensionConstraintsKnownExtensionsItemOutput) ToCertificateExtensionConstraintsKnownExtensionsItemOutput() CertificateExtensionConstraintsKnownExtensionsItemOutput {
	return o
}

func (o CertificateExtensionConstraintsKnownExtensionsItemOutput) ToCertificateExtensionConstraintsKnownExtensionsItemOutputWithContext(ctx context.Context) CertificateExtensionConstraintsKnownExtensionsItemOutput {
	return o
}

func (o CertificateExtensionConstraintsKnownExtensionsItemOutput) ToCertificateExtensionConstraintsKnownExtensionsItemPtrOutput() CertificateExtensionConstraintsKnownExtensionsItemPtrOutput {
	return o.ToCertificateExtensionConstraintsKnownExtensionsItemPtrOutputWithContext(context.Background())
}

func (o CertificateExtensionConstraintsKnownExtensionsItemOutput) ToCertificateExtensionConstraintsKnownExtensionsItemPtrOutputWithContext(ctx context.Context) CertificateExtensionConstraintsKnownExtensionsItemPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateExtensionConstraintsKnownExtensionsItem) *CertificateExtensionConstraintsKnownExtensionsItem {
		return &v
	}).(CertificateExtensionConstraintsKnownExtensionsItemPtrOutput)
}

func (o CertificateExtensionConstraintsKnownExtensionsItemOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CertificateExtensionConstraintsKnownExtensionsItemOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateExtensionConstraintsKnownExtensionsItem) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CertificateExtensionConstraintsKnownExtensionsItemOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateExtensionConstraintsKnownExtensionsItemOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateExtensionConstraintsKnownExtensionsItem) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CertificateExtensionConstraintsKnownExtensionsItemPtrOutput struct{ *pulumi.OutputState }

func (CertificateExtensionConstraintsKnownExtensionsItemPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateExtensionConstraintsKnownExtensionsItem)(nil)).Elem()
}

func (o CertificateExtensionConstraintsKnownExtensionsItemPtrOutput) ToCertificateExtensionConstraintsKnownExtensionsItemPtrOutput() CertificateExtensionConstraintsKnownExtensionsItemPtrOutput {
	return o
}

func (o CertificateExtensionConstraintsKnownExtensionsItemPtrOutput) ToCertificateExtensionConstraintsKnownExtensionsItemPtrOutputWithContext(ctx context.Context) CertificateExtensionConstraintsKnownExtensionsItemPtrOutput {
	return o
}

func (o CertificateExtensionConstraintsKnownExtensionsItemPtrOutput) Elem() CertificateExtensionConstraintsKnownExtensionsItemOutput {
	return o.ApplyT(func(v *CertificateExtensionConstraintsKnownExtensionsItem) CertificateExtensionConstraintsKnownExtensionsItem {
		if v != nil {
			return *v
		}
		var ret CertificateExtensionConstraintsKnownExtensionsItem
		return ret
	}).(CertificateExtensionConstraintsKnownExtensionsItemOutput)
}

func (o CertificateExtensionConstraintsKnownExtensionsItemPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateExtensionConstraintsKnownExtensionsItemPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CertificateExtensionConstraintsKnownExtensionsItem) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CertificateExtensionConstraintsKnownExtensionsItemInput is an input type that accepts CertificateExtensionConstraintsKnownExtensionsItemArgs and CertificateExtensionConstraintsKnownExtensionsItemOutput values.
// You can construct a concrete instance of `CertificateExtensionConstraintsKnownExtensionsItemInput` via:
//
//          CertificateExtensionConstraintsKnownExtensionsItemArgs{...}
type CertificateExtensionConstraintsKnownExtensionsItemInput interface {
	pulumi.Input

	ToCertificateExtensionConstraintsKnownExtensionsItemOutput() CertificateExtensionConstraintsKnownExtensionsItemOutput
	ToCertificateExtensionConstraintsKnownExtensionsItemOutputWithContext(context.Context) CertificateExtensionConstraintsKnownExtensionsItemOutput
}

var certificateExtensionConstraintsKnownExtensionsItemPtrType = reflect.TypeOf((**CertificateExtensionConstraintsKnownExtensionsItem)(nil)).Elem()

type CertificateExtensionConstraintsKnownExtensionsItemPtrInput interface {
	pulumi.Input

	ToCertificateExtensionConstraintsKnownExtensionsItemPtrOutput() CertificateExtensionConstraintsKnownExtensionsItemPtrOutput
	ToCertificateExtensionConstraintsKnownExtensionsItemPtrOutputWithContext(context.Context) CertificateExtensionConstraintsKnownExtensionsItemPtrOutput
}

type certificateExtensionConstraintsKnownExtensionsItemPtr string

func CertificateExtensionConstraintsKnownExtensionsItemPtr(v string) CertificateExtensionConstraintsKnownExtensionsItemPtrInput {
	return (*certificateExtensionConstraintsKnownExtensionsItemPtr)(&v)
}

func (*certificateExtensionConstraintsKnownExtensionsItemPtr) ElementType() reflect.Type {
	return certificateExtensionConstraintsKnownExtensionsItemPtrType
}

func (in *certificateExtensionConstraintsKnownExtensionsItemPtr) ToCertificateExtensionConstraintsKnownExtensionsItemPtrOutput() CertificateExtensionConstraintsKnownExtensionsItemPtrOutput {
	return pulumi.ToOutput(in).(CertificateExtensionConstraintsKnownExtensionsItemPtrOutput)
}

func (in *certificateExtensionConstraintsKnownExtensionsItemPtr) ToCertificateExtensionConstraintsKnownExtensionsItemPtrOutputWithContext(ctx context.Context) CertificateExtensionConstraintsKnownExtensionsItemPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CertificateExtensionConstraintsKnownExtensionsItemPtrOutput)
}

// CertificateExtensionConstraintsKnownExtensionsItemArrayInput is an input type that accepts CertificateExtensionConstraintsKnownExtensionsItemArray and CertificateExtensionConstraintsKnownExtensionsItemArrayOutput values.
// You can construct a concrete instance of `CertificateExtensionConstraintsKnownExtensionsItemArrayInput` via:
//
//          CertificateExtensionConstraintsKnownExtensionsItemArray{ CertificateExtensionConstraintsKnownExtensionsItemArgs{...} }
type CertificateExtensionConstraintsKnownExtensionsItemArrayInput interface {
	pulumi.Input

	ToCertificateExtensionConstraintsKnownExtensionsItemArrayOutput() CertificateExtensionConstraintsKnownExtensionsItemArrayOutput
	ToCertificateExtensionConstraintsKnownExtensionsItemArrayOutputWithContext(context.Context) CertificateExtensionConstraintsKnownExtensionsItemArrayOutput
}

type CertificateExtensionConstraintsKnownExtensionsItemArray []CertificateExtensionConstraintsKnownExtensionsItem

func (CertificateExtensionConstraintsKnownExtensionsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateExtensionConstraintsKnownExtensionsItem)(nil)).Elem()
}

func (i CertificateExtensionConstraintsKnownExtensionsItemArray) ToCertificateExtensionConstraintsKnownExtensionsItemArrayOutput() CertificateExtensionConstraintsKnownExtensionsItemArrayOutput {
	return i.ToCertificateExtensionConstraintsKnownExtensionsItemArrayOutputWithContext(context.Background())
}

func (i CertificateExtensionConstraintsKnownExtensionsItemArray) ToCertificateExtensionConstraintsKnownExtensionsItemArrayOutputWithContext(ctx context.Context) CertificateExtensionConstraintsKnownExtensionsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateExtensionConstraintsKnownExtensionsItemArrayOutput)
}

type CertificateExtensionConstraintsKnownExtensionsItemArrayOutput struct{ *pulumi.OutputState }

func (CertificateExtensionConstraintsKnownExtensionsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateExtensionConstraintsKnownExtensionsItem)(nil)).Elem()
}

func (o CertificateExtensionConstraintsKnownExtensionsItemArrayOutput) ToCertificateExtensionConstraintsKnownExtensionsItemArrayOutput() CertificateExtensionConstraintsKnownExtensionsItemArrayOutput {
	return o
}

func (o CertificateExtensionConstraintsKnownExtensionsItemArrayOutput) ToCertificateExtensionConstraintsKnownExtensionsItemArrayOutputWithContext(ctx context.Context) CertificateExtensionConstraintsKnownExtensionsItemArrayOutput {
	return o
}

func (o CertificateExtensionConstraintsKnownExtensionsItemArrayOutput) Index(i pulumi.IntInput) CertificateExtensionConstraintsKnownExtensionsItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateExtensionConstraintsKnownExtensionsItem {
		return vs[0].([]CertificateExtensionConstraintsKnownExtensionsItem)[vs[1].(int)]
	}).(CertificateExtensionConstraintsKnownExtensionsItemOutput)
}

// Immutable. Specifies how the Certificate's identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.
type CertificateSubjectMode string

const (
	// Not specified.
	CertificateSubjectModeSubjectRequestModeUnspecified = CertificateSubjectMode("SUBJECT_REQUEST_MODE_UNSPECIFIED")
	// The default mode used in most cases. Indicates that the certificate's Subject and/or SubjectAltNames are specified in the certificate request. This mode requires the caller to have the `privateca.certificates.create` permission.
	CertificateSubjectModeDefault = CertificateSubjectMode("DEFAULT")
	// A mode reserved for special cases. Indicates that the certificate should have one or more SPIFFE SubjectAltNames set by the service based on the caller's identity. This mode will ignore any explicitly specified Subject and/or SubjectAltNames in the certificate request. This mode requires the caller to have the `privateca.certificates.createForSelf` permission.
	CertificateSubjectModeReflectedSpiffe = CertificateSubjectMode("REFLECTED_SPIFFE")
)

func (CertificateSubjectMode) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSubjectMode)(nil)).Elem()
}

func (e CertificateSubjectMode) ToCertificateSubjectModeOutput() CertificateSubjectModeOutput {
	return pulumi.ToOutput(e).(CertificateSubjectModeOutput)
}

func (e CertificateSubjectMode) ToCertificateSubjectModeOutputWithContext(ctx context.Context) CertificateSubjectModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CertificateSubjectModeOutput)
}

func (e CertificateSubjectMode) ToCertificateSubjectModePtrOutput() CertificateSubjectModePtrOutput {
	return e.ToCertificateSubjectModePtrOutputWithContext(context.Background())
}

func (e CertificateSubjectMode) ToCertificateSubjectModePtrOutputWithContext(ctx context.Context) CertificateSubjectModePtrOutput {
	return CertificateSubjectMode(e).ToCertificateSubjectModeOutputWithContext(ctx).ToCertificateSubjectModePtrOutputWithContext(ctx)
}

func (e CertificateSubjectMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateSubjectMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateSubjectMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CertificateSubjectMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CertificateSubjectModeOutput struct{ *pulumi.OutputState }

func (CertificateSubjectModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateSubjectMode)(nil)).Elem()
}

func (o CertificateSubjectModeOutput) ToCertificateSubjectModeOutput() CertificateSubjectModeOutput {
	return o
}

func (o CertificateSubjectModeOutput) ToCertificateSubjectModeOutputWithContext(ctx context.Context) CertificateSubjectModeOutput {
	return o
}

func (o CertificateSubjectModeOutput) ToCertificateSubjectModePtrOutput() CertificateSubjectModePtrOutput {
	return o.ToCertificateSubjectModePtrOutputWithContext(context.Background())
}

func (o CertificateSubjectModeOutput) ToCertificateSubjectModePtrOutputWithContext(ctx context.Context) CertificateSubjectModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateSubjectMode) *CertificateSubjectMode {
		return &v
	}).(CertificateSubjectModePtrOutput)
}

func (o CertificateSubjectModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CertificateSubjectModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateSubjectMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CertificateSubjectModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateSubjectModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateSubjectMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CertificateSubjectModePtrOutput struct{ *pulumi.OutputState }

func (CertificateSubjectModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateSubjectMode)(nil)).Elem()
}

func (o CertificateSubjectModePtrOutput) ToCertificateSubjectModePtrOutput() CertificateSubjectModePtrOutput {
	return o
}

func (o CertificateSubjectModePtrOutput) ToCertificateSubjectModePtrOutputWithContext(ctx context.Context) CertificateSubjectModePtrOutput {
	return o
}

func (o CertificateSubjectModePtrOutput) Elem() CertificateSubjectModeOutput {
	return o.ApplyT(func(v *CertificateSubjectMode) CertificateSubjectMode {
		if v != nil {
			return *v
		}
		var ret CertificateSubjectMode
		return ret
	}).(CertificateSubjectModeOutput)
}

func (o CertificateSubjectModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateSubjectModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CertificateSubjectMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CertificateSubjectModeInput is an input type that accepts CertificateSubjectModeArgs and CertificateSubjectModeOutput values.
// You can construct a concrete instance of `CertificateSubjectModeInput` via:
//
//          CertificateSubjectModeArgs{...}
type CertificateSubjectModeInput interface {
	pulumi.Input

	ToCertificateSubjectModeOutput() CertificateSubjectModeOutput
	ToCertificateSubjectModeOutputWithContext(context.Context) CertificateSubjectModeOutput
}

var certificateSubjectModePtrType = reflect.TypeOf((**CertificateSubjectMode)(nil)).Elem()

type CertificateSubjectModePtrInput interface {
	pulumi.Input

	ToCertificateSubjectModePtrOutput() CertificateSubjectModePtrOutput
	ToCertificateSubjectModePtrOutputWithContext(context.Context) CertificateSubjectModePtrOutput
}

type certificateSubjectModePtr string

func CertificateSubjectModePtr(v string) CertificateSubjectModePtrInput {
	return (*certificateSubjectModePtr)(&v)
}

func (*certificateSubjectModePtr) ElementType() reflect.Type {
	return certificateSubjectModePtrType
}

func (in *certificateSubjectModePtr) ToCertificateSubjectModePtrOutput() CertificateSubjectModePtrOutput {
	return pulumi.ToOutput(in).(CertificateSubjectModePtrOutput)
}

func (in *certificateSubjectModePtr) ToCertificateSubjectModePtrOutputWithContext(ctx context.Context) CertificateSubjectModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CertificateSubjectModePtrOutput)
}

// Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed.
type EcKeyTypeSignatureAlgorithm string

const (
	// Not specified. Signifies that any signature algorithm may be used.
	EcKeyTypeSignatureAlgorithmEcSignatureAlgorithmUnspecified = EcKeyTypeSignatureAlgorithm("EC_SIGNATURE_ALGORITHM_UNSPECIFIED")
	// Refers to the Elliptic Curve Digital Signature Algorithm over the NIST P-256 curve.
	EcKeyTypeSignatureAlgorithmEcdsaP256 = EcKeyTypeSignatureAlgorithm("ECDSA_P256")
	// Refers to the Elliptic Curve Digital Signature Algorithm over the NIST P-384 curve.
	EcKeyTypeSignatureAlgorithmEcdsaP384 = EcKeyTypeSignatureAlgorithm("ECDSA_P384")
	// Refers to the Edwards-curve Digital Signature Algorithm over curve 25519, as described in RFC 8410.
	EcKeyTypeSignatureAlgorithmEddsa25519 = EcKeyTypeSignatureAlgorithm("EDDSA_25519")
)

func (EcKeyTypeSignatureAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*EcKeyTypeSignatureAlgorithm)(nil)).Elem()
}

func (e EcKeyTypeSignatureAlgorithm) ToEcKeyTypeSignatureAlgorithmOutput() EcKeyTypeSignatureAlgorithmOutput {
	return pulumi.ToOutput(e).(EcKeyTypeSignatureAlgorithmOutput)
}

func (e EcKeyTypeSignatureAlgorithm) ToEcKeyTypeSignatureAlgorithmOutputWithContext(ctx context.Context) EcKeyTypeSignatureAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EcKeyTypeSignatureAlgorithmOutput)
}

func (e EcKeyTypeSignatureAlgorithm) ToEcKeyTypeSignatureAlgorithmPtrOutput() EcKeyTypeSignatureAlgorithmPtrOutput {
	return e.ToEcKeyTypeSignatureAlgorithmPtrOutputWithContext(context.Background())
}

func (e EcKeyTypeSignatureAlgorithm) ToEcKeyTypeSignatureAlgorithmPtrOutputWithContext(ctx context.Context) EcKeyTypeSignatureAlgorithmPtrOutput {
	return EcKeyTypeSignatureAlgorithm(e).ToEcKeyTypeSignatureAlgorithmOutputWithContext(ctx).ToEcKeyTypeSignatureAlgorithmPtrOutputWithContext(ctx)
}

func (e EcKeyTypeSignatureAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EcKeyTypeSignatureAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EcKeyTypeSignatureAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EcKeyTypeSignatureAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EcKeyTypeSignatureAlgorithmOutput struct{ *pulumi.OutputState }

func (EcKeyTypeSignatureAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EcKeyTypeSignatureAlgorithm)(nil)).Elem()
}

func (o EcKeyTypeSignatureAlgorithmOutput) ToEcKeyTypeSignatureAlgorithmOutput() EcKeyTypeSignatureAlgorithmOutput {
	return o
}

func (o EcKeyTypeSignatureAlgorithmOutput) ToEcKeyTypeSignatureAlgorithmOutputWithContext(ctx context.Context) EcKeyTypeSignatureAlgorithmOutput {
	return o
}

func (o EcKeyTypeSignatureAlgorithmOutput) ToEcKeyTypeSignatureAlgorithmPtrOutput() EcKeyTypeSignatureAlgorithmPtrOutput {
	return o.ToEcKeyTypeSignatureAlgorithmPtrOutputWithContext(context.Background())
}

func (o EcKeyTypeSignatureAlgorithmOutput) ToEcKeyTypeSignatureAlgorithmPtrOutputWithContext(ctx context.Context) EcKeyTypeSignatureAlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EcKeyTypeSignatureAlgorithm) *EcKeyTypeSignatureAlgorithm {
		return &v
	}).(EcKeyTypeSignatureAlgorithmPtrOutput)
}

func (o EcKeyTypeSignatureAlgorithmOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EcKeyTypeSignatureAlgorithmOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EcKeyTypeSignatureAlgorithm) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EcKeyTypeSignatureAlgorithmOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EcKeyTypeSignatureAlgorithmOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EcKeyTypeSignatureAlgorithm) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EcKeyTypeSignatureAlgorithmPtrOutput struct{ *pulumi.OutputState }

func (EcKeyTypeSignatureAlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EcKeyTypeSignatureAlgorithm)(nil)).Elem()
}

func (o EcKeyTypeSignatureAlgorithmPtrOutput) ToEcKeyTypeSignatureAlgorithmPtrOutput() EcKeyTypeSignatureAlgorithmPtrOutput {
	return o
}

func (o EcKeyTypeSignatureAlgorithmPtrOutput) ToEcKeyTypeSignatureAlgorithmPtrOutputWithContext(ctx context.Context) EcKeyTypeSignatureAlgorithmPtrOutput {
	return o
}

func (o EcKeyTypeSignatureAlgorithmPtrOutput) Elem() EcKeyTypeSignatureAlgorithmOutput {
	return o.ApplyT(func(v *EcKeyTypeSignatureAlgorithm) EcKeyTypeSignatureAlgorithm {
		if v != nil {
			return *v
		}
		var ret EcKeyTypeSignatureAlgorithm
		return ret
	}).(EcKeyTypeSignatureAlgorithmOutput)
}

func (o EcKeyTypeSignatureAlgorithmPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EcKeyTypeSignatureAlgorithmPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EcKeyTypeSignatureAlgorithm) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EcKeyTypeSignatureAlgorithmInput is an input type that accepts EcKeyTypeSignatureAlgorithmArgs and EcKeyTypeSignatureAlgorithmOutput values.
// You can construct a concrete instance of `EcKeyTypeSignatureAlgorithmInput` via:
//
//          EcKeyTypeSignatureAlgorithmArgs{...}
type EcKeyTypeSignatureAlgorithmInput interface {
	pulumi.Input

	ToEcKeyTypeSignatureAlgorithmOutput() EcKeyTypeSignatureAlgorithmOutput
	ToEcKeyTypeSignatureAlgorithmOutputWithContext(context.Context) EcKeyTypeSignatureAlgorithmOutput
}

var ecKeyTypeSignatureAlgorithmPtrType = reflect.TypeOf((**EcKeyTypeSignatureAlgorithm)(nil)).Elem()

type EcKeyTypeSignatureAlgorithmPtrInput interface {
	pulumi.Input

	ToEcKeyTypeSignatureAlgorithmPtrOutput() EcKeyTypeSignatureAlgorithmPtrOutput
	ToEcKeyTypeSignatureAlgorithmPtrOutputWithContext(context.Context) EcKeyTypeSignatureAlgorithmPtrOutput
}

type ecKeyTypeSignatureAlgorithmPtr string

func EcKeyTypeSignatureAlgorithmPtr(v string) EcKeyTypeSignatureAlgorithmPtrInput {
	return (*ecKeyTypeSignatureAlgorithmPtr)(&v)
}

func (*ecKeyTypeSignatureAlgorithmPtr) ElementType() reflect.Type {
	return ecKeyTypeSignatureAlgorithmPtrType
}

func (in *ecKeyTypeSignatureAlgorithmPtr) ToEcKeyTypeSignatureAlgorithmPtrOutput() EcKeyTypeSignatureAlgorithmPtrOutput {
	return pulumi.ToOutput(in).(EcKeyTypeSignatureAlgorithmPtrOutput)
}

func (in *ecKeyTypeSignatureAlgorithmPtr) ToEcKeyTypeSignatureAlgorithmPtrOutputWithContext(ctx context.Context) EcKeyTypeSignatureAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EcKeyTypeSignatureAlgorithmPtrOutput)
}

// The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
type KeyVersionSpecAlgorithm string

const (
	// Not specified.
	KeyVersionSpecAlgorithmSignHashAlgorithmUnspecified = KeyVersionSpecAlgorithm("SIGN_HASH_ALGORITHM_UNSPECIFIED")
	// maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PSS_2048_SHA256
	KeyVersionSpecAlgorithmRsaPss2048Sha256 = KeyVersionSpecAlgorithm("RSA_PSS_2048_SHA256")
	// maps to CryptoKeyVersionAlgorithm. RSA_SIGN_PSS_3072_SHA256
	KeyVersionSpecAlgorithmRsaPss3072Sha256 = KeyVersionSpecAlgorithm("RSA_PSS_3072_SHA256")
	// maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PSS_4096_SHA256
	KeyVersionSpecAlgorithmRsaPss4096Sha256 = KeyVersionSpecAlgorithm("RSA_PSS_4096_SHA256")
	// maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PKCS1_2048_SHA256
	KeyVersionSpecAlgorithmRsaPkcs12048Sha256 = KeyVersionSpecAlgorithm("RSA_PKCS1_2048_SHA256")
	// maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PKCS1_3072_SHA256
	KeyVersionSpecAlgorithmRsaPkcs13072Sha256 = KeyVersionSpecAlgorithm("RSA_PKCS1_3072_SHA256")
	// maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PKCS1_4096_SHA256
	KeyVersionSpecAlgorithmRsaPkcs14096Sha256 = KeyVersionSpecAlgorithm("RSA_PKCS1_4096_SHA256")
	// maps to CryptoKeyVersionAlgorithm.EC_SIGN_P256_SHA256
	KeyVersionSpecAlgorithmEcP256Sha256 = KeyVersionSpecAlgorithm("EC_P256_SHA256")
	// maps to CryptoKeyVersionAlgorithm.EC_SIGN_P384_SHA384
	KeyVersionSpecAlgorithmEcP384Sha384 = KeyVersionSpecAlgorithm("EC_P384_SHA384")
)

func (KeyVersionSpecAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVersionSpecAlgorithm)(nil)).Elem()
}

func (e KeyVersionSpecAlgorithm) ToKeyVersionSpecAlgorithmOutput() KeyVersionSpecAlgorithmOutput {
	return pulumi.ToOutput(e).(KeyVersionSpecAlgorithmOutput)
}

func (e KeyVersionSpecAlgorithm) ToKeyVersionSpecAlgorithmOutputWithContext(ctx context.Context) KeyVersionSpecAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, e).(KeyVersionSpecAlgorithmOutput)
}

func (e KeyVersionSpecAlgorithm) ToKeyVersionSpecAlgorithmPtrOutput() KeyVersionSpecAlgorithmPtrOutput {
	return e.ToKeyVersionSpecAlgorithmPtrOutputWithContext(context.Background())
}

func (e KeyVersionSpecAlgorithm) ToKeyVersionSpecAlgorithmPtrOutputWithContext(ctx context.Context) KeyVersionSpecAlgorithmPtrOutput {
	return KeyVersionSpecAlgorithm(e).ToKeyVersionSpecAlgorithmOutputWithContext(ctx).ToKeyVersionSpecAlgorithmPtrOutputWithContext(ctx)
}

func (e KeyVersionSpecAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e KeyVersionSpecAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e KeyVersionSpecAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e KeyVersionSpecAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type KeyVersionSpecAlgorithmOutput struct{ *pulumi.OutputState }

func (KeyVersionSpecAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVersionSpecAlgorithm)(nil)).Elem()
}

func (o KeyVersionSpecAlgorithmOutput) ToKeyVersionSpecAlgorithmOutput() KeyVersionSpecAlgorithmOutput {
	return o
}

func (o KeyVersionSpecAlgorithmOutput) ToKeyVersionSpecAlgorithmOutputWithContext(ctx context.Context) KeyVersionSpecAlgorithmOutput {
	return o
}

func (o KeyVersionSpecAlgorithmOutput) ToKeyVersionSpecAlgorithmPtrOutput() KeyVersionSpecAlgorithmPtrOutput {
	return o.ToKeyVersionSpecAlgorithmPtrOutputWithContext(context.Background())
}

func (o KeyVersionSpecAlgorithmOutput) ToKeyVersionSpecAlgorithmPtrOutputWithContext(ctx context.Context) KeyVersionSpecAlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVersionSpecAlgorithm) *KeyVersionSpecAlgorithm {
		return &v
	}).(KeyVersionSpecAlgorithmPtrOutput)
}

func (o KeyVersionSpecAlgorithmOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o KeyVersionSpecAlgorithmOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KeyVersionSpecAlgorithm) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o KeyVersionSpecAlgorithmOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KeyVersionSpecAlgorithmOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KeyVersionSpecAlgorithm) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type KeyVersionSpecAlgorithmPtrOutput struct{ *pulumi.OutputState }

func (KeyVersionSpecAlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVersionSpecAlgorithm)(nil)).Elem()
}

func (o KeyVersionSpecAlgorithmPtrOutput) ToKeyVersionSpecAlgorithmPtrOutput() KeyVersionSpecAlgorithmPtrOutput {
	return o
}

func (o KeyVersionSpecAlgorithmPtrOutput) ToKeyVersionSpecAlgorithmPtrOutputWithContext(ctx context.Context) KeyVersionSpecAlgorithmPtrOutput {
	return o
}

func (o KeyVersionSpecAlgorithmPtrOutput) Elem() KeyVersionSpecAlgorithmOutput {
	return o.ApplyT(func(v *KeyVersionSpecAlgorithm) KeyVersionSpecAlgorithm {
		if v != nil {
			return *v
		}
		var ret KeyVersionSpecAlgorithm
		return ret
	}).(KeyVersionSpecAlgorithmOutput)
}

func (o KeyVersionSpecAlgorithmPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KeyVersionSpecAlgorithmPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *KeyVersionSpecAlgorithm) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// KeyVersionSpecAlgorithmInput is an input type that accepts KeyVersionSpecAlgorithmArgs and KeyVersionSpecAlgorithmOutput values.
// You can construct a concrete instance of `KeyVersionSpecAlgorithmInput` via:
//
//          KeyVersionSpecAlgorithmArgs{...}
type KeyVersionSpecAlgorithmInput interface {
	pulumi.Input

	ToKeyVersionSpecAlgorithmOutput() KeyVersionSpecAlgorithmOutput
	ToKeyVersionSpecAlgorithmOutputWithContext(context.Context) KeyVersionSpecAlgorithmOutput
}

var keyVersionSpecAlgorithmPtrType = reflect.TypeOf((**KeyVersionSpecAlgorithm)(nil)).Elem()

type KeyVersionSpecAlgorithmPtrInput interface {
	pulumi.Input

	ToKeyVersionSpecAlgorithmPtrOutput() KeyVersionSpecAlgorithmPtrOutput
	ToKeyVersionSpecAlgorithmPtrOutputWithContext(context.Context) KeyVersionSpecAlgorithmPtrOutput
}

type keyVersionSpecAlgorithmPtr string

func KeyVersionSpecAlgorithmPtr(v string) KeyVersionSpecAlgorithmPtrInput {
	return (*keyVersionSpecAlgorithmPtr)(&v)
}

func (*keyVersionSpecAlgorithmPtr) ElementType() reflect.Type {
	return keyVersionSpecAlgorithmPtrType
}

func (in *keyVersionSpecAlgorithmPtr) ToKeyVersionSpecAlgorithmPtrOutput() KeyVersionSpecAlgorithmPtrOutput {
	return pulumi.ToOutput(in).(KeyVersionSpecAlgorithmPtrOutput)
}

func (in *keyVersionSpecAlgorithmPtr) ToKeyVersionSpecAlgorithmPtrOutputWithContext(ctx context.Context) KeyVersionSpecAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(KeyVersionSpecAlgorithmPtrOutput)
}

// Required. The format of the public key.
type PublicKeyFormat string

const (
	// Default unspecified value.
	PublicKeyFormatKeyFormatUnspecified = PublicKeyFormat("KEY_FORMAT_UNSPECIFIED")
	// The key is PEM-encoded as defined in [RFC 7468](https://tools.ietf.org/html/rfc7468). It can be any of the following: a PEM-encoded PKCS#1/RFC 3447 RSAPublicKey structure, an RFC 5280 [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1) or a PEM-encoded X.509 certificate signing request (CSR). If a [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1) is specified, it can contain a A PEM-encoded PKCS#1/RFC 3447 RSAPublicKey or a NIST P-256/secp256r1/prime256v1 or P-384 key. If a CSR is specified, it will used solely for the purpose of extracting the public key. When generated by the service, it will always be an RFC 5280 [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1) structure containing an algorithm identifier and a key.
	PublicKeyFormatPem = PublicKeyFormat("PEM")
)

func (PublicKeyFormat) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicKeyFormat)(nil)).Elem()
}

func (e PublicKeyFormat) ToPublicKeyFormatOutput() PublicKeyFormatOutput {
	return pulumi.ToOutput(e).(PublicKeyFormatOutput)
}

func (e PublicKeyFormat) ToPublicKeyFormatOutputWithContext(ctx context.Context) PublicKeyFormatOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PublicKeyFormatOutput)
}

func (e PublicKeyFormat) ToPublicKeyFormatPtrOutput() PublicKeyFormatPtrOutput {
	return e.ToPublicKeyFormatPtrOutputWithContext(context.Background())
}

func (e PublicKeyFormat) ToPublicKeyFormatPtrOutputWithContext(ctx context.Context) PublicKeyFormatPtrOutput {
	return PublicKeyFormat(e).ToPublicKeyFormatOutputWithContext(ctx).ToPublicKeyFormatPtrOutputWithContext(ctx)
}

func (e PublicKeyFormat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicKeyFormat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicKeyFormat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PublicKeyFormat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PublicKeyFormatOutput struct{ *pulumi.OutputState }

func (PublicKeyFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicKeyFormat)(nil)).Elem()
}

func (o PublicKeyFormatOutput) ToPublicKeyFormatOutput() PublicKeyFormatOutput {
	return o
}

func (o PublicKeyFormatOutput) ToPublicKeyFormatOutputWithContext(ctx context.Context) PublicKeyFormatOutput {
	return o
}

func (o PublicKeyFormatOutput) ToPublicKeyFormatPtrOutput() PublicKeyFormatPtrOutput {
	return o.ToPublicKeyFormatPtrOutputWithContext(context.Background())
}

func (o PublicKeyFormatOutput) ToPublicKeyFormatPtrOutputWithContext(ctx context.Context) PublicKeyFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PublicKeyFormat) *PublicKeyFormat {
		return &v
	}).(PublicKeyFormatPtrOutput)
}

func (o PublicKeyFormatOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PublicKeyFormatOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PublicKeyFormat) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PublicKeyFormatOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PublicKeyFormatOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PublicKeyFormat) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PublicKeyFormatPtrOutput struct{ *pulumi.OutputState }

func (PublicKeyFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicKeyFormat)(nil)).Elem()
}

func (o PublicKeyFormatPtrOutput) ToPublicKeyFormatPtrOutput() PublicKeyFormatPtrOutput {
	return o
}

func (o PublicKeyFormatPtrOutput) ToPublicKeyFormatPtrOutputWithContext(ctx context.Context) PublicKeyFormatPtrOutput {
	return o
}

func (o PublicKeyFormatPtrOutput) Elem() PublicKeyFormatOutput {
	return o.ApplyT(func(v *PublicKeyFormat) PublicKeyFormat {
		if v != nil {
			return *v
		}
		var ret PublicKeyFormat
		return ret
	}).(PublicKeyFormatOutput)
}

func (o PublicKeyFormatPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PublicKeyFormatPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PublicKeyFormat) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PublicKeyFormatInput is an input type that accepts PublicKeyFormatArgs and PublicKeyFormatOutput values.
// You can construct a concrete instance of `PublicKeyFormatInput` via:
//
//          PublicKeyFormatArgs{...}
type PublicKeyFormatInput interface {
	pulumi.Input

	ToPublicKeyFormatOutput() PublicKeyFormatOutput
	ToPublicKeyFormatOutputWithContext(context.Context) PublicKeyFormatOutput
}

var publicKeyFormatPtrType = reflect.TypeOf((**PublicKeyFormat)(nil)).Elem()

type PublicKeyFormatPtrInput interface {
	pulumi.Input

	ToPublicKeyFormatPtrOutput() PublicKeyFormatPtrOutput
	ToPublicKeyFormatPtrOutputWithContext(context.Context) PublicKeyFormatPtrOutput
}

type publicKeyFormatPtr string

func PublicKeyFormatPtr(v string) PublicKeyFormatPtrInput {
	return (*publicKeyFormatPtr)(&v)
}

func (*publicKeyFormatPtr) ElementType() reflect.Type {
	return publicKeyFormatPtrType
}

func (in *publicKeyFormatPtr) ToPublicKeyFormatPtrOutput() PublicKeyFormatPtrOutput {
	return pulumi.ToOutput(in).(PublicKeyFormatPtrOutput)
}

func (in *publicKeyFormatPtr) ToPublicKeyFormatPtrOutputWithContext(ctx context.Context) PublicKeyFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PublicKeyFormatPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigLogTypeInput)(nil)).Elem(), AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigLogTypePtrInput)(nil)).Elem(), AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CaPoolTierInput)(nil)).Elem(), CaPoolTier("TIER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CaPoolTierPtrInput)(nil)).Elem(), CaPoolTier("TIER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateAuthorityTypeInput)(nil)).Elem(), CertificateAuthorityType("TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateAuthorityTypePtrInput)(nil)).Elem(), CertificateAuthorityType("TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateExtensionConstraintsKnownExtensionsItemInput)(nil)).Elem(), CertificateExtensionConstraintsKnownExtensionsItem("KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateExtensionConstraintsKnownExtensionsItemPtrInput)(nil)).Elem(), CertificateExtensionConstraintsKnownExtensionsItem("KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateExtensionConstraintsKnownExtensionsItemArrayInput)(nil)).Elem(), CertificateExtensionConstraintsKnownExtensionsItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSubjectModeInput)(nil)).Elem(), CertificateSubjectMode("SUBJECT_REQUEST_MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateSubjectModePtrInput)(nil)).Elem(), CertificateSubjectMode("SUBJECT_REQUEST_MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*EcKeyTypeSignatureAlgorithmInput)(nil)).Elem(), EcKeyTypeSignatureAlgorithm("EC_SIGNATURE_ALGORITHM_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*EcKeyTypeSignatureAlgorithmPtrInput)(nil)).Elem(), EcKeyTypeSignatureAlgorithm("EC_SIGNATURE_ALGORITHM_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*KeyVersionSpecAlgorithmInput)(nil)).Elem(), KeyVersionSpecAlgorithm("SIGN_HASH_ALGORITHM_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*KeyVersionSpecAlgorithmPtrInput)(nil)).Elem(), KeyVersionSpecAlgorithm("SIGN_HASH_ALGORITHM_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PublicKeyFormatInput)(nil)).Elem(), PublicKeyFormat("KEY_FORMAT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*PublicKeyFormatPtrInput)(nil)).Elem(), PublicKeyFormat("KEY_FORMAT_UNSPECIFIED"))
	pulumi.RegisterOutputType(AuditLogConfigLogTypeOutput{})
	pulumi.RegisterOutputType(AuditLogConfigLogTypePtrOutput{})
	pulumi.RegisterOutputType(CaPoolTierOutput{})
	pulumi.RegisterOutputType(CaPoolTierPtrOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityTypeOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityTypePtrOutput{})
	pulumi.RegisterOutputType(CertificateExtensionConstraintsKnownExtensionsItemOutput{})
	pulumi.RegisterOutputType(CertificateExtensionConstraintsKnownExtensionsItemPtrOutput{})
	pulumi.RegisterOutputType(CertificateExtensionConstraintsKnownExtensionsItemArrayOutput{})
	pulumi.RegisterOutputType(CertificateSubjectModeOutput{})
	pulumi.RegisterOutputType(CertificateSubjectModePtrOutput{})
	pulumi.RegisterOutputType(EcKeyTypeSignatureAlgorithmOutput{})
	pulumi.RegisterOutputType(EcKeyTypeSignatureAlgorithmPtrOutput{})
	pulumi.RegisterOutputType(KeyVersionSpecAlgorithmOutput{})
	pulumi.RegisterOutputType(KeyVersionSpecAlgorithmPtrOutput{})
	pulumi.RegisterOutputType(PublicKeyFormatOutput{})
	pulumi.RegisterOutputType(PublicKeyFormatPtrOutput{})
}
