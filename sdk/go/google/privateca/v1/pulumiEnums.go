// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The log type that this config enables.
type AuditLogConfigLogType pulumi.String

const (
	// Default case. Should never be this.
	AuditLogConfigLogTypeLogTypeUnspecified = AuditLogConfigLogType("LOG_TYPE_UNSPECIFIED")
	// Admin reads. Example: CloudIAM getIamPolicy
	AuditLogConfigLogTypeAdminRead = AuditLogConfigLogType("ADMIN_READ")
	// Data writes. Example: CloudSQL Users create
	AuditLogConfigLogTypeDataWrite = AuditLogConfigLogType("DATA_WRITE")
	// Data reads. Example: CloudSQL Users list
	AuditLogConfigLogTypeDataRead = AuditLogConfigLogType("DATA_READ")
)

func (AuditLogConfigLogType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AuditLogConfigLogType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuditLogConfigLogType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuditLogConfigLogType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Required. Immutable. The Tier of this CaPool.
type CaPoolTier pulumi.String

const (
	// Not specified.
	CaPoolTierTierUnspecified = CaPoolTier("TIER_UNSPECIFIED")
	// Enterprise tier.
	CaPoolTierEnterprise = CaPoolTier("ENTERPRISE")
	// DevOps tier.
	CaPoolTierDevops = CaPoolTier("DEVOPS")
)

func (CaPoolTier) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e CaPoolTier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CaPoolTier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CaPoolTier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CaPoolTier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Required. Immutable. The Type of this CertificateAuthority.
type CertificateAuthorityType pulumi.String

const (
	// Not specified.
	CertificateAuthorityTypeTypeUnspecified = CertificateAuthorityType("TYPE_UNSPECIFIED")
	// Self-signed CA.
	CertificateAuthorityTypeSelfSigned = CertificateAuthorityType("SELF_SIGNED")
	// Subordinate CA. Could be issued by a Private CA CertificateAuthority or an unmanaged CA.
	CertificateAuthorityTypeSubordinate = CertificateAuthorityType("SUBORDINATE")
)

func (CertificateAuthorityType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e CertificateAuthorityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateAuthorityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateAuthorityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CertificateAuthorityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CertificateExtensionConstraintsKnownExtensionsItem pulumi.String

const (
	// Not specified.
	CertificateExtensionConstraintsKnownExtensionsItemKnownCertificateExtensionUnspecified = CertificateExtensionConstraintsKnownExtensionsItem("KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED")
	// Refers to a certificate's Key Usage extension, as described in [RFC 5280 section 4.2.1.3](https://tools.ietf.org/html/rfc5280#section-4.2.1.3). This corresponds to the KeyUsage.base_key_usage field.
	CertificateExtensionConstraintsKnownExtensionsItemBaseKeyUsage = CertificateExtensionConstraintsKnownExtensionsItem("BASE_KEY_USAGE")
	// Refers to a certificate's Extended Key Usage extension, as described in [RFC 5280 section 4.2.1.12](https://tools.ietf.org/html/rfc5280#section-4.2.1.12). This corresponds to the KeyUsage.extended_key_usage message.
	CertificateExtensionConstraintsKnownExtensionsItemExtendedKeyUsage = CertificateExtensionConstraintsKnownExtensionsItem("EXTENDED_KEY_USAGE")
	// Refers to a certificate's Basic Constraints extension, as described in [RFC 5280 section 4.2.1.9](https://tools.ietf.org/html/rfc5280#section-4.2.1.9). This corresponds to the X509Parameters.ca_options field.
	CertificateExtensionConstraintsKnownExtensionsItemCaOptions = CertificateExtensionConstraintsKnownExtensionsItem("CA_OPTIONS")
	// Refers to a certificate's Policy object identifiers, as described in [RFC 5280 section 4.2.1.4](https://tools.ietf.org/html/rfc5280#section-4.2.1.4). This corresponds to the X509Parameters.policy_ids field.
	CertificateExtensionConstraintsKnownExtensionsItemPolicyIds = CertificateExtensionConstraintsKnownExtensionsItem("POLICY_IDS")
	// Refers to OCSP servers in a certificate's Authority Information Access extension, as described in [RFC 5280 section 4.2.2.1](https://tools.ietf.org/html/rfc5280#section-4.2.2.1), This corresponds to the X509Parameters.aia_ocsp_servers field.
	CertificateExtensionConstraintsKnownExtensionsItemAiaOcspServers = CertificateExtensionConstraintsKnownExtensionsItem("AIA_OCSP_SERVERS")
)

func (CertificateExtensionConstraintsKnownExtensionsItem) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e CertificateExtensionConstraintsKnownExtensionsItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateExtensionConstraintsKnownExtensionsItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateExtensionConstraintsKnownExtensionsItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CertificateExtensionConstraintsKnownExtensionsItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// CertificateExtensionConstraintsKnownExtensionsItemArrayInput is an input type that accepts CertificateExtensionConstraintsKnownExtensionsItemArray and CertificateExtensionConstraintsKnownExtensionsItemArrayOutput values.
// You can construct a concrete instance of `CertificateExtensionConstraintsKnownExtensionsItemArrayInput` via:
//
//          CertificateExtensionConstraintsKnownExtensionsItemArray{ CertificateExtensionConstraintsKnownExtensionsItemArgs{...} }
type CertificateExtensionConstraintsKnownExtensionsItemArrayInput interface {
	pulumi.Input

	ToCertificateExtensionConstraintsKnownExtensionsItemArrayOutput() CertificateExtensionConstraintsKnownExtensionsItemArrayOutput
	ToCertificateExtensionConstraintsKnownExtensionsItemArrayOutputWithContext(context.Context) CertificateExtensionConstraintsKnownExtensionsItemArrayOutput
}

type CertificateExtensionConstraintsKnownExtensionsItemArray []CertificateExtensionConstraintsKnownExtensionsItem

func (CertificateExtensionConstraintsKnownExtensionsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateExtensionConstraintsKnownExtensionsItem)(nil)).Elem()
}

func (i CertificateExtensionConstraintsKnownExtensionsItemArray) ToCertificateExtensionConstraintsKnownExtensionsItemArrayOutput() CertificateExtensionConstraintsKnownExtensionsItemArrayOutput {
	return i.ToCertificateExtensionConstraintsKnownExtensionsItemArrayOutputWithContext(context.Background())
}

func (i CertificateExtensionConstraintsKnownExtensionsItemArray) ToCertificateExtensionConstraintsKnownExtensionsItemArrayOutputWithContext(ctx context.Context) CertificateExtensionConstraintsKnownExtensionsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateExtensionConstraintsKnownExtensionsItemArrayOutput)
}

type CertificateExtensionConstraintsKnownExtensionsItemArrayOutput struct{ *pulumi.OutputState }

func (CertificateExtensionConstraintsKnownExtensionsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateExtensionConstraintsKnownExtensionsItem)(nil)).Elem()
}

func (o CertificateExtensionConstraintsKnownExtensionsItemArrayOutput) ToCertificateExtensionConstraintsKnownExtensionsItemArrayOutput() CertificateExtensionConstraintsKnownExtensionsItemArrayOutput {
	return o
}

func (o CertificateExtensionConstraintsKnownExtensionsItemArrayOutput) ToCertificateExtensionConstraintsKnownExtensionsItemArrayOutputWithContext(ctx context.Context) CertificateExtensionConstraintsKnownExtensionsItemArrayOutput {
	return o
}

func (o CertificateExtensionConstraintsKnownExtensionsItemArrayOutput) Index(i pulumi.IntInput) pulumi.StringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) pulumi.StringOutput {
		return vs[0].([]CertificateExtensionConstraintsKnownExtensionsItem)[vs[1].(int)].ToStringOutput()
	}).(pulumi.StringOutput)
}

// Immutable. Specifies how the Certificate's identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.
type CertificateSubjectMode pulumi.String

const (
	// Not specified.
	CertificateSubjectModeSubjectRequestModeUnspecified = CertificateSubjectMode("SUBJECT_REQUEST_MODE_UNSPECIFIED")
	// The default mode used in most cases. Indicates that the certificate's Subject and/or SubjectAltNames are specified in the certificate request. This mode requires the caller to have the `privateca.certificates.create` permission.
	CertificateSubjectModeDefault = CertificateSubjectMode("DEFAULT")
	// A mode reserved for special cases. Indicates that the certificate should have one or more SPIFFE SubjectAltNames set by the service based on the caller's identity. This mode will ignore any explicitly specified Subject and/or SubjectAltNames in the certificate request. This mode requires the caller to have the `privateca.certificates.createForSelf` permission.
	CertificateSubjectModeReflectedSpiffe = CertificateSubjectMode("REFLECTED_SPIFFE")
)

func (CertificateSubjectMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e CertificateSubjectMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateSubjectMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateSubjectMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CertificateSubjectMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed.
type EcKeyTypeSignatureAlgorithm pulumi.String

const (
	// Not specified. Signifies that any signature algorithm may be used.
	EcKeyTypeSignatureAlgorithmEcSignatureAlgorithmUnspecified = EcKeyTypeSignatureAlgorithm("EC_SIGNATURE_ALGORITHM_UNSPECIFIED")
	// Refers to the Elliptic Curve Digital Signature Algorithm over the NIST P-256 curve.
	EcKeyTypeSignatureAlgorithmEcdsaP256 = EcKeyTypeSignatureAlgorithm("ECDSA_P256")
	// Refers to the Elliptic Curve Digital Signature Algorithm over the NIST P-384 curve.
	EcKeyTypeSignatureAlgorithmEcdsaP384 = EcKeyTypeSignatureAlgorithm("ECDSA_P384")
	// Refers to the Edwards-curve Digital Signature Algorithm over curve 25519, as described in RFC 8410.
	EcKeyTypeSignatureAlgorithmEddsa25519 = EcKeyTypeSignatureAlgorithm("EDDSA_25519")
)

func (EcKeyTypeSignatureAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e EcKeyTypeSignatureAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EcKeyTypeSignatureAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EcKeyTypeSignatureAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EcKeyTypeSignatureAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
type KeyVersionSpecAlgorithm pulumi.String

const (
	// Not specified.
	KeyVersionSpecAlgorithmSignHashAlgorithmUnspecified = KeyVersionSpecAlgorithm("SIGN_HASH_ALGORITHM_UNSPECIFIED")
	// maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PSS_2048_SHA256
	KeyVersionSpecAlgorithmRsaPss2048Sha256 = KeyVersionSpecAlgorithm("RSA_PSS_2048_SHA256")
	// maps to CryptoKeyVersionAlgorithm. RSA_SIGN_PSS_3072_SHA256
	KeyVersionSpecAlgorithmRsaPss3072Sha256 = KeyVersionSpecAlgorithm("RSA_PSS_3072_SHA256")
	// maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PSS_4096_SHA256
	KeyVersionSpecAlgorithmRsaPss4096Sha256 = KeyVersionSpecAlgorithm("RSA_PSS_4096_SHA256")
	// maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PKCS1_2048_SHA256
	KeyVersionSpecAlgorithmRsaPkcs12048Sha256 = KeyVersionSpecAlgorithm("RSA_PKCS1_2048_SHA256")
	// maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PKCS1_3072_SHA256
	KeyVersionSpecAlgorithmRsaPkcs13072Sha256 = KeyVersionSpecAlgorithm("RSA_PKCS1_3072_SHA256")
	// maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PKCS1_4096_SHA256
	KeyVersionSpecAlgorithmRsaPkcs14096Sha256 = KeyVersionSpecAlgorithm("RSA_PKCS1_4096_SHA256")
	// maps to CryptoKeyVersionAlgorithm.EC_SIGN_P256_SHA256
	KeyVersionSpecAlgorithmEcP256Sha256 = KeyVersionSpecAlgorithm("EC_P256_SHA256")
	// maps to CryptoKeyVersionAlgorithm.EC_SIGN_P384_SHA384
	KeyVersionSpecAlgorithmEcP384Sha384 = KeyVersionSpecAlgorithm("EC_P384_SHA384")
)

func (KeyVersionSpecAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e KeyVersionSpecAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e KeyVersionSpecAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e KeyVersionSpecAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e KeyVersionSpecAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Required. The format of the public key.
type PublicKeyFormat pulumi.String

const (
	// Default unspecified value.
	PublicKeyFormatKeyFormatUnspecified = PublicKeyFormat("KEY_FORMAT_UNSPECIFIED")
	// The key is PEM-encoded as defined in [RFC 7468](https://tools.ietf.org/html/rfc7468). It can be any of the following: a PEM-encoded PKCS#1/RFC 3447 RSAPublicKey structure, an RFC 5280 [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1) or a PEM-encoded X.509 certificate signing request (CSR). If a [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1) is specified, it can contain a A PEM-encoded PKCS#1/RFC 3447 RSAPublicKey or a NIST P-256/secp256r1/prime256v1 or P-384 key. If a CSR is specified, it will used solely for the purpose of extracting the public key. When generated by the service, it will always be an RFC 5280 [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1) structure containing an algorithm identifier and a key.
	PublicKeyFormatPem = PublicKeyFormat("PEM")
)

func (PublicKeyFormat) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e PublicKeyFormat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicKeyFormat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PublicKeyFormat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PublicKeyFormat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
