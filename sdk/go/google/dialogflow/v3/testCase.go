// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a test case for the given agent.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type TestCase struct {
	pulumi.CustomResourceState

	AgentId pulumi.StringOutput `pulumi:"agentId"`
	// When the test was created.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The human-readable name of the test case, unique within the agent. Limit of 200 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The latest test result.
	LastTestResult GoogleCloudDialogflowCxV3TestCaseResultResponseOutput `pulumi:"lastTestResult"`
	Location       pulumi.StringOutput                                   `pulumi:"location"`
	// The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: `projects//locations//agents/ /testCases/`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Additional freeform notes about the test case. Limit of 400 characters.
	Notes   pulumi.StringOutput `pulumi:"notes"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag should start with "#" and has a limit of 30 characters.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
	TestCaseConversationTurns GoogleCloudDialogflowCxV3ConversationTurnResponseArrayOutput `pulumi:"testCaseConversationTurns"`
	// Config for the test case.
	TestConfig GoogleCloudDialogflowCxV3TestConfigResponseOutput `pulumi:"testConfig"`
}

// NewTestCase registers a new resource with the given unique name, arguments, and options.
func NewTestCase(ctx *pulumi.Context,
	name string, args *TestCaseArgs, opts ...pulumi.ResourceOption) (*TestCase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgentId == nil {
		return nil, errors.New("invalid value for required argument 'AgentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"agentId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TestCase
	err := ctx.RegisterResource("google-native:dialogflow/v3:TestCase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTestCase gets an existing TestCase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTestCase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TestCaseState, opts ...pulumi.ResourceOption) (*TestCase, error) {
	var resource TestCase
	err := ctx.ReadResource("google-native:dialogflow/v3:TestCase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TestCase resources.
type testCaseState struct {
}

type TestCaseState struct {
}

func (TestCaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*testCaseState)(nil)).Elem()
}

type testCaseArgs struct {
	AgentId string `pulumi:"agentId"`
	// The human-readable name of the test case, unique within the agent. Limit of 200 characters.
	DisplayName string `pulumi:"displayName"`
	// The latest test result.
	LastTestResult *GoogleCloudDialogflowCxV3TestCaseResult `pulumi:"lastTestResult"`
	Location       *string                                  `pulumi:"location"`
	// The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: `projects//locations//agents/ /testCases/`.
	Name *string `pulumi:"name"`
	// Additional freeform notes about the test case. Limit of 400 characters.
	Notes   *string `pulumi:"notes"`
	Project *string `pulumi:"project"`
	// Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag should start with "#" and has a limit of 30 characters.
	Tags []string `pulumi:"tags"`
	// The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
	TestCaseConversationTurns []GoogleCloudDialogflowCxV3ConversationTurn `pulumi:"testCaseConversationTurns"`
	// Config for the test case.
	TestConfig *GoogleCloudDialogflowCxV3TestConfig `pulumi:"testConfig"`
}

// The set of arguments for constructing a TestCase resource.
type TestCaseArgs struct {
	AgentId pulumi.StringInput
	// The human-readable name of the test case, unique within the agent. Limit of 200 characters.
	DisplayName pulumi.StringInput
	// The latest test result.
	LastTestResult GoogleCloudDialogflowCxV3TestCaseResultPtrInput
	Location       pulumi.StringPtrInput
	// The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: `projects//locations//agents/ /testCases/`.
	Name pulumi.StringPtrInput
	// Additional freeform notes about the test case. Limit of 400 characters.
	Notes   pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag should start with "#" and has a limit of 30 characters.
	Tags pulumi.StringArrayInput
	// The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
	TestCaseConversationTurns GoogleCloudDialogflowCxV3ConversationTurnArrayInput
	// Config for the test case.
	TestConfig GoogleCloudDialogflowCxV3TestConfigPtrInput
}

func (TestCaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*testCaseArgs)(nil)).Elem()
}

type TestCaseInput interface {
	pulumi.Input

	ToTestCaseOutput() TestCaseOutput
	ToTestCaseOutputWithContext(ctx context.Context) TestCaseOutput
}

func (*TestCase) ElementType() reflect.Type {
	return reflect.TypeOf((**TestCase)(nil)).Elem()
}

func (i *TestCase) ToTestCaseOutput() TestCaseOutput {
	return i.ToTestCaseOutputWithContext(context.Background())
}

func (i *TestCase) ToTestCaseOutputWithContext(ctx context.Context) TestCaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestCaseOutput)
}

func (i *TestCase) ToOutput(ctx context.Context) pulumix.Output[*TestCase] {
	return pulumix.Output[*TestCase]{
		OutputState: i.ToTestCaseOutputWithContext(ctx).OutputState,
	}
}

type TestCaseOutput struct{ *pulumi.OutputState }

func (TestCaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestCase)(nil)).Elem()
}

func (o TestCaseOutput) ToTestCaseOutput() TestCaseOutput {
	return o
}

func (o TestCaseOutput) ToTestCaseOutputWithContext(ctx context.Context) TestCaseOutput {
	return o
}

func (o TestCaseOutput) ToOutput(ctx context.Context) pulumix.Output[*TestCase] {
	return pulumix.Output[*TestCase]{
		OutputState: o.OutputState,
	}
}

func (o TestCaseOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *TestCase) pulumi.StringOutput { return v.AgentId }).(pulumi.StringOutput)
}

// When the test was created.
func (o TestCaseOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TestCase) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The human-readable name of the test case, unique within the agent. Limit of 200 characters.
func (o TestCaseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *TestCase) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The latest test result.
func (o TestCaseOutput) LastTestResult() GoogleCloudDialogflowCxV3TestCaseResultResponseOutput {
	return o.ApplyT(func(v *TestCase) GoogleCloudDialogflowCxV3TestCaseResultResponseOutput { return v.LastTestResult }).(GoogleCloudDialogflowCxV3TestCaseResultResponseOutput)
}

func (o TestCaseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *TestCase) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: `projects//locations//agents/ /testCases/`.
func (o TestCaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TestCase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Additional freeform notes about the test case. Limit of 400 characters.
func (o TestCaseOutput) Notes() pulumi.StringOutput {
	return o.ApplyT(func(v *TestCase) pulumi.StringOutput { return v.Notes }).(pulumi.StringOutput)
}

func (o TestCaseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TestCase) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag should start with "#" and has a limit of 30 characters.
func (o TestCaseOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TestCase) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
func (o TestCaseOutput) TestCaseConversationTurns() GoogleCloudDialogflowCxV3ConversationTurnResponseArrayOutput {
	return o.ApplyT(func(v *TestCase) GoogleCloudDialogflowCxV3ConversationTurnResponseArrayOutput {
		return v.TestCaseConversationTurns
	}).(GoogleCloudDialogflowCxV3ConversationTurnResponseArrayOutput)
}

// Config for the test case.
func (o TestCaseOutput) TestConfig() GoogleCloudDialogflowCxV3TestConfigResponseOutput {
	return o.ApplyT(func(v *TestCase) GoogleCloudDialogflowCxV3TestConfigResponseOutput { return v.TestConfig }).(GoogleCloudDialogflowCxV3TestConfigResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TestCaseInput)(nil)).Elem(), &TestCase{})
	pulumi.RegisterOutputType(TestCaseOutput{})
}
