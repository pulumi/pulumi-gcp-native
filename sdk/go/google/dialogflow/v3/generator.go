// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v3

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a generator in the specified agent.
type Generator struct {
	pulumi.CustomResourceState

	AgentId pulumi.StringOutput `pulumi:"agentId"`
	// The human-readable name of the generator, unique within the agent. The prompt contains pre-defined parameters such as $conversation, $last-user-utterance, etc. populated by Dialogflow. It can also contain custom placeholders which will be resolved during fulfillment.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The language to create generators for the following fields: * `Generator.prompt_text.text` If not specified, the agent's default language is used.
	LanguageCode pulumi.StringPtrOutput `pulumi:"languageCode"`
	Location     pulumi.StringOutput    `pulumi:"location"`
	// The unique identifier of the generator. Must be set for the Generators.UpdateGenerator method. Generators.CreateGenerate populates the name automatically. Format: `projects//locations//agents//generators/`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. List of custom placeholders in the prompt text.
	Placeholders GoogleCloudDialogflowCxV3GeneratorPlaceholderResponseArrayOutput `pulumi:"placeholders"`
	Project      pulumi.StringOutput                                              `pulumi:"project"`
	// Prompt for the LLM model.
	PromptText GoogleCloudDialogflowCxV3PhraseResponseOutput `pulumi:"promptText"`
}

// NewGenerator registers a new resource with the given unique name, arguments, and options.
func NewGenerator(ctx *pulumi.Context,
	name string, args *GeneratorArgs, opts ...pulumi.ResourceOption) (*Generator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgentId == nil {
		return nil, errors.New("invalid value for required argument 'AgentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.PromptText == nil {
		return nil, errors.New("invalid value for required argument 'PromptText'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"agentId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Generator
	err := ctx.RegisterResource("google-native:dialogflow/v3:Generator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGenerator gets an existing Generator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGenerator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GeneratorState, opts ...pulumi.ResourceOption) (*Generator, error) {
	var resource Generator
	err := ctx.ReadResource("google-native:dialogflow/v3:Generator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Generator resources.
type generatorState struct {
}

type GeneratorState struct {
}

func (GeneratorState) ElementType() reflect.Type {
	return reflect.TypeOf((*generatorState)(nil)).Elem()
}

type generatorArgs struct {
	AgentId string `pulumi:"agentId"`
	// The human-readable name of the generator, unique within the agent. The prompt contains pre-defined parameters such as $conversation, $last-user-utterance, etc. populated by Dialogflow. It can also contain custom placeholders which will be resolved during fulfillment.
	DisplayName string `pulumi:"displayName"`
	// The language to create generators for the following fields: * `Generator.prompt_text.text` If not specified, the agent's default language is used.
	LanguageCode *string `pulumi:"languageCode"`
	Location     *string `pulumi:"location"`
	// The unique identifier of the generator. Must be set for the Generators.UpdateGenerator method. Generators.CreateGenerate populates the name automatically. Format: `projects//locations//agents//generators/`.
	Name *string `pulumi:"name"`
	// Optional. List of custom placeholders in the prompt text.
	Placeholders []GoogleCloudDialogflowCxV3GeneratorPlaceholder `pulumi:"placeholders"`
	Project      *string                                         `pulumi:"project"`
	// Prompt for the LLM model.
	PromptText GoogleCloudDialogflowCxV3Phrase `pulumi:"promptText"`
}

// The set of arguments for constructing a Generator resource.
type GeneratorArgs struct {
	AgentId pulumi.StringInput
	// The human-readable name of the generator, unique within the agent. The prompt contains pre-defined parameters such as $conversation, $last-user-utterance, etc. populated by Dialogflow. It can also contain custom placeholders which will be resolved during fulfillment.
	DisplayName pulumi.StringInput
	// The language to create generators for the following fields: * `Generator.prompt_text.text` If not specified, the agent's default language is used.
	LanguageCode pulumi.StringPtrInput
	Location     pulumi.StringPtrInput
	// The unique identifier of the generator. Must be set for the Generators.UpdateGenerator method. Generators.CreateGenerate populates the name automatically. Format: `projects//locations//agents//generators/`.
	Name pulumi.StringPtrInput
	// Optional. List of custom placeholders in the prompt text.
	Placeholders GoogleCloudDialogflowCxV3GeneratorPlaceholderArrayInput
	Project      pulumi.StringPtrInput
	// Prompt for the LLM model.
	PromptText GoogleCloudDialogflowCxV3PhraseInput
}

func (GeneratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*generatorArgs)(nil)).Elem()
}

type GeneratorInput interface {
	pulumi.Input

	ToGeneratorOutput() GeneratorOutput
	ToGeneratorOutputWithContext(ctx context.Context) GeneratorOutput
}

func (*Generator) ElementType() reflect.Type {
	return reflect.TypeOf((**Generator)(nil)).Elem()
}

func (i *Generator) ToGeneratorOutput() GeneratorOutput {
	return i.ToGeneratorOutputWithContext(context.Background())
}

func (i *Generator) ToGeneratorOutputWithContext(ctx context.Context) GeneratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneratorOutput)
}

type GeneratorOutput struct{ *pulumi.OutputState }

func (GeneratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Generator)(nil)).Elem()
}

func (o GeneratorOutput) ToGeneratorOutput() GeneratorOutput {
	return o
}

func (o GeneratorOutput) ToGeneratorOutputWithContext(ctx context.Context) GeneratorOutput {
	return o
}

func (o GeneratorOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Generator) pulumi.StringOutput { return v.AgentId }).(pulumi.StringOutput)
}

// The human-readable name of the generator, unique within the agent. The prompt contains pre-defined parameters such as $conversation, $last-user-utterance, etc. populated by Dialogflow. It can also contain custom placeholders which will be resolved during fulfillment.
func (o GeneratorOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Generator) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The language to create generators for the following fields: * `Generator.prompt_text.text` If not specified, the agent's default language is used.
func (o GeneratorOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Generator) pulumi.StringPtrOutput { return v.LanguageCode }).(pulumi.StringPtrOutput)
}

func (o GeneratorOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Generator) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The unique identifier of the generator. Must be set for the Generators.UpdateGenerator method. Generators.CreateGenerate populates the name automatically. Format: `projects//locations//agents//generators/`.
func (o GeneratorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Generator) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional. List of custom placeholders in the prompt text.
func (o GeneratorOutput) Placeholders() GoogleCloudDialogflowCxV3GeneratorPlaceholderResponseArrayOutput {
	return o.ApplyT(func(v *Generator) GoogleCloudDialogflowCxV3GeneratorPlaceholderResponseArrayOutput {
		return v.Placeholders
	}).(GoogleCloudDialogflowCxV3GeneratorPlaceholderResponseArrayOutput)
}

func (o GeneratorOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Generator) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Prompt for the LLM model.
func (o GeneratorOutput) PromptText() GoogleCloudDialogflowCxV3PhraseResponseOutput {
	return o.ApplyT(func(v *Generator) GoogleCloudDialogflowCxV3PhraseResponseOutput { return v.PromptText }).(GoogleCloudDialogflowCxV3PhraseResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GeneratorInput)(nil)).Elem(), &Generator{})
	pulumi.RegisterOutputType(GeneratorOutput{})
}
