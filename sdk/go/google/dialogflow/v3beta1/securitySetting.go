// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v3beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create security settings in the specified location.
type SecuritySetting struct {
	pulumi.CustomResourceState

	// The human-readable name of the security settings, unique within the location.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// DLP inspect template name. Use this template to define inspect base settings. If empty, we use the default DLP inspect config. The template name will have one of the following formats: `projects/PROJECT_ID/inspectTemplates/TEMPLATE_ID` OR `organizations/ORGANIZATION_ID/inspectTemplates/TEMPLATE_ID`
	InspectTemplate pulumi.StringOutput `pulumi:"inspectTemplate"`
	// Resource name of the settings. Format: `projects//locations//securitySettings/`.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of types of data to remove when retention settings triggers purge.
	PurgeDataTypes pulumi.StringArrayOutput `pulumi:"purgeDataTypes"`
	// Defines on what data we apply redaction. Note that we don't redact data to which we don't have access, e.g., Stackdriver logs.
	RedactionScope pulumi.StringOutput `pulumi:"redactionScope"`
	// Strategy that defines how we do redaction.
	RedactionStrategy pulumi.StringOutput `pulumi:"redactionStrategy"`
	// Retains the data for the specified number of days. User must Set a value lower than Dialogflow's default 30d TTL. Setting a value higher than that has no effect. A missing value or setting to 0 also means we use Dialogflow's default TTL.
	RetentionWindowDays pulumi.IntOutput `pulumi:"retentionWindowDays"`
}

// NewSecuritySetting registers a new resource with the given unique name, arguments, and options.
func NewSecuritySetting(ctx *pulumi.Context,
	name string, args *SecuritySettingArgs, opts ...pulumi.ResourceOption) (*SecuritySetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	var resource SecuritySetting
	err := ctx.RegisterResource("google-native:dialogflow/v3beta1:SecuritySetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecuritySetting gets an existing SecuritySetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecuritySetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecuritySettingState, opts ...pulumi.ResourceOption) (*SecuritySetting, error) {
	var resource SecuritySetting
	err := ctx.ReadResource("google-native:dialogflow/v3beta1:SecuritySetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecuritySetting resources.
type securitySettingState struct {
	// The human-readable name of the security settings, unique within the location.
	DisplayName *string `pulumi:"displayName"`
	// DLP inspect template name. Use this template to define inspect base settings. If empty, we use the default DLP inspect config. The template name will have one of the following formats: `projects/PROJECT_ID/inspectTemplates/TEMPLATE_ID` OR `organizations/ORGANIZATION_ID/inspectTemplates/TEMPLATE_ID`
	InspectTemplate *string `pulumi:"inspectTemplate"`
	// Resource name of the settings. Format: `projects//locations//securitySettings/`.
	Name *string `pulumi:"name"`
	// List of types of data to remove when retention settings triggers purge.
	PurgeDataTypes []string `pulumi:"purgeDataTypes"`
	// Defines on what data we apply redaction. Note that we don't redact data to which we don't have access, e.g., Stackdriver logs.
	RedactionScope *string `pulumi:"redactionScope"`
	// Strategy that defines how we do redaction.
	RedactionStrategy *string `pulumi:"redactionStrategy"`
	// Retains the data for the specified number of days. User must Set a value lower than Dialogflow's default 30d TTL. Setting a value higher than that has no effect. A missing value or setting to 0 also means we use Dialogflow's default TTL.
	RetentionWindowDays *int `pulumi:"retentionWindowDays"`
}

type SecuritySettingState struct {
	// The human-readable name of the security settings, unique within the location.
	DisplayName pulumi.StringPtrInput
	// DLP inspect template name. Use this template to define inspect base settings. If empty, we use the default DLP inspect config. The template name will have one of the following formats: `projects/PROJECT_ID/inspectTemplates/TEMPLATE_ID` OR `organizations/ORGANIZATION_ID/inspectTemplates/TEMPLATE_ID`
	InspectTemplate pulumi.StringPtrInput
	// Resource name of the settings. Format: `projects//locations//securitySettings/`.
	Name pulumi.StringPtrInput
	// List of types of data to remove when retention settings triggers purge.
	PurgeDataTypes pulumi.StringArrayInput
	// Defines on what data we apply redaction. Note that we don't redact data to which we don't have access, e.g., Stackdriver logs.
	RedactionScope pulumi.StringPtrInput
	// Strategy that defines how we do redaction.
	RedactionStrategy pulumi.StringPtrInput
	// Retains the data for the specified number of days. User must Set a value lower than Dialogflow's default 30d TTL. Setting a value higher than that has no effect. A missing value or setting to 0 also means we use Dialogflow's default TTL.
	RetentionWindowDays pulumi.IntPtrInput
}

func (SecuritySettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*securitySettingState)(nil)).Elem()
}

type securitySettingArgs struct {
	// The human-readable name of the security settings, unique within the location.
	DisplayName string `pulumi:"displayName"`
	// DLP inspect template name. Use this template to define inspect base settings. If empty, we use the default DLP inspect config. The template name will have one of the following formats: `projects/PROJECT_ID/inspectTemplates/TEMPLATE_ID` OR `organizations/ORGANIZATION_ID/inspectTemplates/TEMPLATE_ID`
	InspectTemplate *string `pulumi:"inspectTemplate"`
	Location        string  `pulumi:"location"`
	// Resource name of the settings. Format: `projects//locations//securitySettings/`.
	Name    string `pulumi:"name"`
	Project string `pulumi:"project"`
	// List of types of data to remove when retention settings triggers purge.
	PurgeDataTypes []string `pulumi:"purgeDataTypes"`
	// Defines on what data we apply redaction. Note that we don't redact data to which we don't have access, e.g., Stackdriver logs.
	RedactionScope *string `pulumi:"redactionScope"`
	// Strategy that defines how we do redaction.
	RedactionStrategy *string `pulumi:"redactionStrategy"`
	// Retains the data for the specified number of days. User must Set a value lower than Dialogflow's default 30d TTL. Setting a value higher than that has no effect. A missing value or setting to 0 also means we use Dialogflow's default TTL.
	RetentionWindowDays *int `pulumi:"retentionWindowDays"`
}

// The set of arguments for constructing a SecuritySetting resource.
type SecuritySettingArgs struct {
	// The human-readable name of the security settings, unique within the location.
	DisplayName pulumi.StringInput
	// DLP inspect template name. Use this template to define inspect base settings. If empty, we use the default DLP inspect config. The template name will have one of the following formats: `projects/PROJECT_ID/inspectTemplates/TEMPLATE_ID` OR `organizations/ORGANIZATION_ID/inspectTemplates/TEMPLATE_ID`
	InspectTemplate pulumi.StringPtrInput
	Location        pulumi.StringInput
	// Resource name of the settings. Format: `projects//locations//securitySettings/`.
	Name    pulumi.StringInput
	Project pulumi.StringInput
	// List of types of data to remove when retention settings triggers purge.
	PurgeDataTypes SecuritySettingPurgeDataTypesItemArrayInput
	// Defines on what data we apply redaction. Note that we don't redact data to which we don't have access, e.g., Stackdriver logs.
	RedactionScope *SecuritySettingRedactionScope
	// Strategy that defines how we do redaction.
	RedactionStrategy *SecuritySettingRedactionStrategy
	// Retains the data for the specified number of days. User must Set a value lower than Dialogflow's default 30d TTL. Setting a value higher than that has no effect. A missing value or setting to 0 also means we use Dialogflow's default TTL.
	RetentionWindowDays pulumi.IntPtrInput
}

func (SecuritySettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securitySettingArgs)(nil)).Elem()
}

type SecuritySettingInput interface {
	pulumi.Input

	ToSecuritySettingOutput() SecuritySettingOutput
	ToSecuritySettingOutputWithContext(ctx context.Context) SecuritySettingOutput
}

func (*SecuritySetting) ElementType() reflect.Type {
	return reflect.TypeOf((*SecuritySetting)(nil))
}

func (i *SecuritySetting) ToSecuritySettingOutput() SecuritySettingOutput {
	return i.ToSecuritySettingOutputWithContext(context.Background())
}

func (i *SecuritySetting) ToSecuritySettingOutputWithContext(ctx context.Context) SecuritySettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecuritySettingOutput)
}

type SecuritySettingOutput struct {
	*pulumi.OutputState
}

func (SecuritySettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecuritySetting)(nil))
}

func (o SecuritySettingOutput) ToSecuritySettingOutput() SecuritySettingOutput {
	return o
}

func (o SecuritySettingOutput) ToSecuritySettingOutputWithContext(ctx context.Context) SecuritySettingOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SecuritySettingOutput{})
}
