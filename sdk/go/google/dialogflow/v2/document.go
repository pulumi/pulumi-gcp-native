// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document
type Document struct {
	pulumi.CustomResourceState

	// The URI where the file content is located. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. NOTE: External URLs must correspond to public webpages, i.e., they must be indexed by Google Search. In particular, URLs for showing documents in Google Cloud Storage (i.e. the URL in your browser) are not supported. Instead use the `gs://` format URI described above.
	ContentUri pulumi.StringOutput `pulumi:"contentUri"`
	// The display name of the document. The name must be 1024 bytes or less; otherwise, the creation request fails.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Optional. If true, we try to automatically reload the document every day (at a time picked by the system). If false or unspecified, we don't try to automatically reload the document. Currently you can only enable automatic reload for documents sourced from a public url, see `source` field for the source types. Reload status can be tracked in `latest_reload_status`. If a reload fails, we will keep the document unchanged. If a reload fails with internal errors, the system will try to reload the document on the next day. If a reload fails with non-retriable errors (e.g. PERMISSION_DENIED), the system will not try to reload the document anymore. You need to manually reload the document successfully by calling `ReloadDocument` and clear the errors.
	EnableAutoReload pulumi.BoolOutput   `pulumi:"enableAutoReload"`
	KnowledgeBaseId  pulumi.StringOutput `pulumi:"knowledgeBaseId"`
	// The knowledge type of document content.
	KnowledgeTypes pulumi.StringArrayOutput `pulumi:"knowledgeTypes"`
	// The time and status of the latest reload. This reload may have been triggered automatically or manually and may not have succeeded.
	LatestReloadStatus GoogleCloudDialogflowV2DocumentReloadStatusResponseOutput `pulumi:"latestReloadStatus"`
	Location           pulumi.StringOutput                                       `pulumi:"location"`
	// Optional. Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document's title, an external URL distinct from the document's content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// The MIME type of this document.
	MimeType pulumi.StringOutput `pulumi:"mimeType"`
	// Optional. The document resource name. The name must be empty when creating a document. Format: `projects//locations//knowledgeBases//documents/`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types.
	RawContent pulumi.StringOutput `pulumi:"rawContent"`
	// The current state of the document.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewDocument registers a new resource with the given unique name, arguments, and options.
func NewDocument(ctx *pulumi.Context,
	name string, args *DocumentArgs, opts ...pulumi.ResourceOption) (*Document, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.KnowledgeBaseId == nil {
		return nil, errors.New("invalid value for required argument 'KnowledgeBaseId'")
	}
	if args.KnowledgeTypes == nil {
		return nil, errors.New("invalid value for required argument 'KnowledgeTypes'")
	}
	if args.MimeType == nil {
		return nil, errors.New("invalid value for required argument 'MimeType'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"knowledgeBaseId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Document
	err := ctx.RegisterResource("google-native:dialogflow/v2:Document", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocument gets an existing Document resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocument(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentState, opts ...pulumi.ResourceOption) (*Document, error) {
	var resource Document
	err := ctx.ReadResource("google-native:dialogflow/v2:Document", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Document resources.
type documentState struct {
}

type DocumentState struct {
}

func (DocumentState) ElementType() reflect.Type {
	return reflect.TypeOf((*documentState)(nil)).Elem()
}

type documentArgs struct {
	// The URI where the file content is located. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. NOTE: External URLs must correspond to public webpages, i.e., they must be indexed by Google Search. In particular, URLs for showing documents in Google Cloud Storage (i.e. the URL in your browser) are not supported. Instead use the `gs://` format URI described above.
	ContentUri *string `pulumi:"contentUri"`
	// The display name of the document. The name must be 1024 bytes or less; otherwise, the creation request fails.
	DisplayName string `pulumi:"displayName"`
	// Optional. If true, we try to automatically reload the document every day (at a time picked by the system). If false or unspecified, we don't try to automatically reload the document. Currently you can only enable automatic reload for documents sourced from a public url, see `source` field for the source types. Reload status can be tracked in `latest_reload_status`. If a reload fails, we will keep the document unchanged. If a reload fails with internal errors, the system will try to reload the document on the next day. If a reload fails with non-retriable errors (e.g. PERMISSION_DENIED), the system will not try to reload the document anymore. You need to manually reload the document successfully by calling `ReloadDocument` and clear the errors.
	EnableAutoReload *bool  `pulumi:"enableAutoReload"`
	KnowledgeBaseId  string `pulumi:"knowledgeBaseId"`
	// The knowledge type of document content.
	KnowledgeTypes []DocumentKnowledgeTypesItem `pulumi:"knowledgeTypes"`
	Location       *string                      `pulumi:"location"`
	// Optional. Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document's title, an external URL distinct from the document's content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes.
	Metadata map[string]string `pulumi:"metadata"`
	// The MIME type of this document.
	MimeType string `pulumi:"mimeType"`
	// Optional. The document resource name. The name must be empty when creating a document. Format: `projects//locations//knowledgeBases//documents/`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types.
	RawContent *string `pulumi:"rawContent"`
}

// The set of arguments for constructing a Document resource.
type DocumentArgs struct {
	// The URI where the file content is located. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. NOTE: External URLs must correspond to public webpages, i.e., they must be indexed by Google Search. In particular, URLs for showing documents in Google Cloud Storage (i.e. the URL in your browser) are not supported. Instead use the `gs://` format URI described above.
	ContentUri pulumi.StringPtrInput
	// The display name of the document. The name must be 1024 bytes or less; otherwise, the creation request fails.
	DisplayName pulumi.StringInput
	// Optional. If true, we try to automatically reload the document every day (at a time picked by the system). If false or unspecified, we don't try to automatically reload the document. Currently you can only enable automatic reload for documents sourced from a public url, see `source` field for the source types. Reload status can be tracked in `latest_reload_status`. If a reload fails, we will keep the document unchanged. If a reload fails with internal errors, the system will try to reload the document on the next day. If a reload fails with non-retriable errors (e.g. PERMISSION_DENIED), the system will not try to reload the document anymore. You need to manually reload the document successfully by calling `ReloadDocument` and clear the errors.
	EnableAutoReload pulumi.BoolPtrInput
	KnowledgeBaseId  pulumi.StringInput
	// The knowledge type of document content.
	KnowledgeTypes DocumentKnowledgeTypesItemArrayInput
	Location       pulumi.StringPtrInput
	// Optional. Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document's title, an external URL distinct from the document's content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes.
	Metadata pulumi.StringMapInput
	// The MIME type of this document.
	MimeType pulumi.StringInput
	// Optional. The document resource name. The name must be empty when creating a document. Format: `projects//locations//knowledgeBases//documents/`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types.
	RawContent pulumi.StringPtrInput
}

func (DocumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*documentArgs)(nil)).Elem()
}

type DocumentInput interface {
	pulumi.Input

	ToDocumentOutput() DocumentOutput
	ToDocumentOutputWithContext(ctx context.Context) DocumentOutput
}

func (*Document) ElementType() reflect.Type {
	return reflect.TypeOf((**Document)(nil)).Elem()
}

func (i *Document) ToDocumentOutput() DocumentOutput {
	return i.ToDocumentOutputWithContext(context.Background())
}

func (i *Document) ToDocumentOutputWithContext(ctx context.Context) DocumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentOutput)
}

func (i *Document) ToOutput(ctx context.Context) pulumix.Output[*Document] {
	return pulumix.Output[*Document]{
		OutputState: i.ToDocumentOutputWithContext(ctx).OutputState,
	}
}

type DocumentOutput struct{ *pulumi.OutputState }

func (DocumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Document)(nil)).Elem()
}

func (o DocumentOutput) ToDocumentOutput() DocumentOutput {
	return o
}

func (o DocumentOutput) ToDocumentOutputWithContext(ctx context.Context) DocumentOutput {
	return o
}

func (o DocumentOutput) ToOutput(ctx context.Context) pulumix.Output[*Document] {
	return pulumix.Output[*Document]{
		OutputState: o.OutputState,
	}
}

// The URI where the file content is located. For documents stored in Google Cloud Storage, these URIs must have the form `gs:///`. NOTE: External URLs must correspond to public webpages, i.e., they must be indexed by Google Search. In particular, URLs for showing documents in Google Cloud Storage (i.e. the URL in your browser) are not supported. Instead use the `gs://` format URI described above.
func (o DocumentOutput) ContentUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.ContentUri }).(pulumi.StringOutput)
}

// The display name of the document. The name must be 1024 bytes or less; otherwise, the creation request fails.
func (o DocumentOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Optional. If true, we try to automatically reload the document every day (at a time picked by the system). If false or unspecified, we don't try to automatically reload the document. Currently you can only enable automatic reload for documents sourced from a public url, see `source` field for the source types. Reload status can be tracked in `latest_reload_status`. If a reload fails, we will keep the document unchanged. If a reload fails with internal errors, the system will try to reload the document on the next day. If a reload fails with non-retriable errors (e.g. PERMISSION_DENIED), the system will not try to reload the document anymore. You need to manually reload the document successfully by calling `ReloadDocument` and clear the errors.
func (o DocumentOutput) EnableAutoReload() pulumi.BoolOutput {
	return o.ApplyT(func(v *Document) pulumi.BoolOutput { return v.EnableAutoReload }).(pulumi.BoolOutput)
}

func (o DocumentOutput) KnowledgeBaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.KnowledgeBaseId }).(pulumi.StringOutput)
}

// The knowledge type of document content.
func (o DocumentOutput) KnowledgeTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Document) pulumi.StringArrayOutput { return v.KnowledgeTypes }).(pulumi.StringArrayOutput)
}

// The time and status of the latest reload. This reload may have been triggered automatically or manually and may not have succeeded.
func (o DocumentOutput) LatestReloadStatus() GoogleCloudDialogflowV2DocumentReloadStatusResponseOutput {
	return o.ApplyT(func(v *Document) GoogleCloudDialogflowV2DocumentReloadStatusResponseOutput {
		return v.LatestReloadStatus
	}).(GoogleCloudDialogflowV2DocumentReloadStatusResponseOutput)
}

func (o DocumentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Optional. Metadata for the document. The metadata supports arbitrary key-value pairs. Suggested use cases include storing a document's title, an external URL distinct from the document's content_uri, etc. The max size of a `key` or a `value` of the metadata is 1024 bytes.
func (o DocumentOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Document) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// The MIME type of this document.
func (o DocumentOutput) MimeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.MimeType }).(pulumi.StringOutput)
}

// Optional. The document resource name. The name must be empty when creating a document. Format: `projects//locations//knowledgeBases//documents/`.
func (o DocumentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DocumentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The raw content of the document. This field is only permitted for EXTRACTIVE_QA and FAQ knowledge types.
func (o DocumentOutput) RawContent() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.RawContent }).(pulumi.StringOutput)
}

// The current state of the document.
func (o DocumentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentInput)(nil)).Elem(), &Document{})
	pulumi.RegisterOutputType(DocumentOutput{})
}
