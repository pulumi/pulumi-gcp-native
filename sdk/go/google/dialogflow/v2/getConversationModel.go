// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets conversation model.
func LookupConversationModel(ctx *pulumi.Context, args *LookupConversationModelArgs, opts ...pulumi.InvokeOption) (*LookupConversationModelResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConversationModelResult
	err := ctx.Invoke("google-native:dialogflow/v2:getConversationModel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupConversationModelArgs struct {
	ConversationModelId string  `pulumi:"conversationModelId"`
	Location            string  `pulumi:"location"`
	Project             *string `pulumi:"project"`
}

type LookupConversationModelResult struct {
	// Metadata for article suggestion models.
	ArticleSuggestionModelMetadata GoogleCloudDialogflowV2ArticleSuggestionModelMetadataResponse `pulumi:"articleSuggestionModelMetadata"`
	// Creation time of this model.
	CreateTime string `pulumi:"createTime"`
	// Datasets used to create model.
	Datasets []GoogleCloudDialogflowV2InputDatasetResponse `pulumi:"datasets"`
	// The display name of the model. At most 64 bytes long.
	DisplayName string `pulumi:"displayName"`
	// Language code for the conversation model. If not specified, the language is en-US. Language at ConversationModel should be set for all non en-us languages. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US".
	LanguageCode string `pulumi:"languageCode"`
	// ConversationModel resource name. Format: `projects//conversationModels/`
	Name string `pulumi:"name"`
	// Metadata for smart reply models.
	SmartReplyModelMetadata GoogleCloudDialogflowV2SmartReplyModelMetadataResponse `pulumi:"smartReplyModelMetadata"`
	// State of the model. A model can only serve prediction requests after it gets deployed.
	State string `pulumi:"state"`
}

func LookupConversationModelOutput(ctx *pulumi.Context, args LookupConversationModelOutputArgs, opts ...pulumi.InvokeOption) LookupConversationModelResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConversationModelResult, error) {
			args := v.(LookupConversationModelArgs)
			r, err := LookupConversationModel(ctx, &args, opts...)
			var s LookupConversationModelResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConversationModelResultOutput)
}

type LookupConversationModelOutputArgs struct {
	ConversationModelId pulumi.StringInput    `pulumi:"conversationModelId"`
	Location            pulumi.StringInput    `pulumi:"location"`
	Project             pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupConversationModelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConversationModelArgs)(nil)).Elem()
}

type LookupConversationModelResultOutput struct{ *pulumi.OutputState }

func (LookupConversationModelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConversationModelResult)(nil)).Elem()
}

func (o LookupConversationModelResultOutput) ToLookupConversationModelResultOutput() LookupConversationModelResultOutput {
	return o
}

func (o LookupConversationModelResultOutput) ToLookupConversationModelResultOutputWithContext(ctx context.Context) LookupConversationModelResultOutput {
	return o
}

func (o LookupConversationModelResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupConversationModelResult] {
	return pulumix.Output[LookupConversationModelResult]{
		OutputState: o.OutputState,
	}
}

// Metadata for article suggestion models.
func (o LookupConversationModelResultOutput) ArticleSuggestionModelMetadata() GoogleCloudDialogflowV2ArticleSuggestionModelMetadataResponseOutput {
	return o.ApplyT(func(v LookupConversationModelResult) GoogleCloudDialogflowV2ArticleSuggestionModelMetadataResponse {
		return v.ArticleSuggestionModelMetadata
	}).(GoogleCloudDialogflowV2ArticleSuggestionModelMetadataResponseOutput)
}

// Creation time of this model.
func (o LookupConversationModelResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConversationModelResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Datasets used to create model.
func (o LookupConversationModelResultOutput) Datasets() GoogleCloudDialogflowV2InputDatasetResponseArrayOutput {
	return o.ApplyT(func(v LookupConversationModelResult) []GoogleCloudDialogflowV2InputDatasetResponse { return v.Datasets }).(GoogleCloudDialogflowV2InputDatasetResponseArrayOutput)
}

// The display name of the model. At most 64 bytes long.
func (o LookupConversationModelResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConversationModelResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Language code for the conversation model. If not specified, the language is en-US. Language at ConversationModel should be set for all non en-us languages. This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: "en-US".
func (o LookupConversationModelResultOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConversationModelResult) string { return v.LanguageCode }).(pulumi.StringOutput)
}

// ConversationModel resource name. Format: `projects//conversationModels/`
func (o LookupConversationModelResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConversationModelResult) string { return v.Name }).(pulumi.StringOutput)
}

// Metadata for smart reply models.
func (o LookupConversationModelResultOutput) SmartReplyModelMetadata() GoogleCloudDialogflowV2SmartReplyModelMetadataResponseOutput {
	return o.ApplyT(func(v LookupConversationModelResult) GoogleCloudDialogflowV2SmartReplyModelMetadataResponse {
		return v.SmartReplyModelMetadata
	}).(GoogleCloudDialogflowV2SmartReplyModelMetadataResponseOutput)
}

// State of the model. A model can only serve prediction requests after it gets deployed.
func (o LookupConversationModelResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConversationModelResult) string { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConversationModelResultOutput{})
}
