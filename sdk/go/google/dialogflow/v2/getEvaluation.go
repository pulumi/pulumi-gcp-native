// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets an evaluation of conversation model.
func LookupEvaluation(ctx *pulumi.Context, args *LookupEvaluationArgs, opts ...pulumi.InvokeOption) (*LookupEvaluationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEvaluationResult
	err := ctx.Invoke("google-native:dialogflow/v2:getEvaluation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEvaluationArgs struct {
	ConversationModelId string  `pulumi:"conversationModelId"`
	EvaluationId        string  `pulumi:"evaluationId"`
	Location            string  `pulumi:"location"`
	Project             *string `pulumi:"project"`
}

type LookupEvaluationResult struct {
	// Creation time of this model.
	CreateTime string `pulumi:"createTime"`
	// Optional. The display name of the model evaluation. At most 64 bytes long.
	DisplayName string `pulumi:"displayName"`
	// Optional. The configuration of the evaluation task.
	EvaluationConfig GoogleCloudDialogflowV2EvaluationConfigResponse `pulumi:"evaluationConfig"`
	// The resource name of the evaluation. Format: `projects//conversationModels//evaluations/`
	Name string `pulumi:"name"`
	// Human eval template in csv format. It tooks real-world conversations provided through input dataset, generates example suggestions for customer to verify quality of the model. For Smart Reply, the generated csv file contains columns of Context, (Suggestions,Q1,Q2)*3, Actual reply. Context contains at most 10 latest messages in the conversation prior to the current suggestion. Q1: "Would you send it as the next message of agent?" Evaluated based on whether the suggest is appropriate to be sent by agent in current context. Q2: "Does the suggestion move the conversation closer to resolution?" Evaluated based on whether the suggestion provide solutions, or answers customer's question or collect information from customer to resolve the customer's issue. Actual reply column contains the actual agent reply sent in the context.
	RawHumanEvalTemplateCsv string `pulumi:"rawHumanEvalTemplateCsv"`
	// Only available when model is for smart reply.
	SmartReplyMetrics GoogleCloudDialogflowV2SmartReplyMetricsResponse `pulumi:"smartReplyMetrics"`
}

func LookupEvaluationOutput(ctx *pulumi.Context, args LookupEvaluationOutputArgs, opts ...pulumi.InvokeOption) LookupEvaluationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEvaluationResult, error) {
			args := v.(LookupEvaluationArgs)
			r, err := LookupEvaluation(ctx, &args, opts...)
			var s LookupEvaluationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEvaluationResultOutput)
}

type LookupEvaluationOutputArgs struct {
	ConversationModelId pulumi.StringInput    `pulumi:"conversationModelId"`
	EvaluationId        pulumi.StringInput    `pulumi:"evaluationId"`
	Location            pulumi.StringInput    `pulumi:"location"`
	Project             pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupEvaluationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEvaluationArgs)(nil)).Elem()
}

type LookupEvaluationResultOutput struct{ *pulumi.OutputState }

func (LookupEvaluationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEvaluationResult)(nil)).Elem()
}

func (o LookupEvaluationResultOutput) ToLookupEvaluationResultOutput() LookupEvaluationResultOutput {
	return o
}

func (o LookupEvaluationResultOutput) ToLookupEvaluationResultOutputWithContext(ctx context.Context) LookupEvaluationResultOutput {
	return o
}

func (o LookupEvaluationResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupEvaluationResult] {
	return pulumix.Output[LookupEvaluationResult]{
		OutputState: o.OutputState,
	}
}

// Creation time of this model.
func (o LookupEvaluationResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvaluationResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. The display name of the model evaluation. At most 64 bytes long.
func (o LookupEvaluationResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvaluationResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Optional. The configuration of the evaluation task.
func (o LookupEvaluationResultOutput) EvaluationConfig() GoogleCloudDialogflowV2EvaluationConfigResponseOutput {
	return o.ApplyT(func(v LookupEvaluationResult) GoogleCloudDialogflowV2EvaluationConfigResponse {
		return v.EvaluationConfig
	}).(GoogleCloudDialogflowV2EvaluationConfigResponseOutput)
}

// The resource name of the evaluation. Format: `projects//conversationModels//evaluations/`
func (o LookupEvaluationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvaluationResult) string { return v.Name }).(pulumi.StringOutput)
}

// Human eval template in csv format. It tooks real-world conversations provided through input dataset, generates example suggestions for customer to verify quality of the model. For Smart Reply, the generated csv file contains columns of Context, (Suggestions,Q1,Q2)*3, Actual reply. Context contains at most 10 latest messages in the conversation prior to the current suggestion. Q1: "Would you send it as the next message of agent?" Evaluated based on whether the suggest is appropriate to be sent by agent in current context. Q2: "Does the suggestion move the conversation closer to resolution?" Evaluated based on whether the suggestion provide solutions, or answers customer's question or collect information from customer to resolve the customer's issue. Actual reply column contains the actual agent reply sent in the context.
func (o LookupEvaluationResultOutput) RawHumanEvalTemplateCsv() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvaluationResult) string { return v.RawHumanEvalTemplateCsv }).(pulumi.StringOutput)
}

// Only available when model is for smart reply.
func (o LookupEvaluationResultOutput) SmartReplyMetrics() GoogleCloudDialogflowV2SmartReplyMetricsResponseOutput {
	return o.ApplyT(func(v LookupEvaluationResult) GoogleCloudDialogflowV2SmartReplyMetricsResponse {
		return v.SmartReplyMetrics
	}).(GoogleCloudDialogflowV2SmartReplyMetricsResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEvaluationResultOutput{})
}
