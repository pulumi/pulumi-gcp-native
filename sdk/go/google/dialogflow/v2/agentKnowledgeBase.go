// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a knowledge base.
type AgentKnowledgeBase struct {
	pulumi.CustomResourceState

	// Required. The display name of the knowledge base. The name must be 1024 bytes or less; otherwise, the creation request fails.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Language which represents the KnowledgeBase. When the KnowledgeBase is created/updated, expect this to be present for non en-us languages. When unspecified, the default language code en-us applies.
	LanguageCode pulumi.StringOutput `pulumi:"languageCode"`
	// The knowledge base resource name. The name must be empty when creating a knowledge base. Format: `projects//locations//knowledgeBases/`.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAgentKnowledgeBase registers a new resource with the given unique name, arguments, and options.
func NewAgentKnowledgeBase(ctx *pulumi.Context,
	name string, args *AgentKnowledgeBaseArgs, opts ...pulumi.ResourceOption) (*AgentKnowledgeBase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KnowledgeBaseId == nil {
		return nil, errors.New("invalid value for required argument 'KnowledgeBaseId'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	var resource AgentKnowledgeBase
	err := ctx.RegisterResource("google-native:dialogflow/v2:AgentKnowledgeBase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAgentKnowledgeBase gets an existing AgentKnowledgeBase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAgentKnowledgeBase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AgentKnowledgeBaseState, opts ...pulumi.ResourceOption) (*AgentKnowledgeBase, error) {
	var resource AgentKnowledgeBase
	err := ctx.ReadResource("google-native:dialogflow/v2:AgentKnowledgeBase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AgentKnowledgeBase resources.
type agentKnowledgeBaseState struct {
	// Required. The display name of the knowledge base. The name must be 1024 bytes or less; otherwise, the creation request fails.
	DisplayName *string `pulumi:"displayName"`
	// Language which represents the KnowledgeBase. When the KnowledgeBase is created/updated, expect this to be present for non en-us languages. When unspecified, the default language code en-us applies.
	LanguageCode *string `pulumi:"languageCode"`
	// The knowledge base resource name. The name must be empty when creating a knowledge base. Format: `projects//locations//knowledgeBases/`.
	Name *string `pulumi:"name"`
}

type AgentKnowledgeBaseState struct {
	// Required. The display name of the knowledge base. The name must be 1024 bytes or less; otherwise, the creation request fails.
	DisplayName pulumi.StringPtrInput
	// Language which represents the KnowledgeBase. When the KnowledgeBase is created/updated, expect this to be present for non en-us languages. When unspecified, the default language code en-us applies.
	LanguageCode pulumi.StringPtrInput
	// The knowledge base resource name. The name must be empty when creating a knowledge base. Format: `projects//locations//knowledgeBases/`.
	Name pulumi.StringPtrInput
}

func (AgentKnowledgeBaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*agentKnowledgeBaseState)(nil)).Elem()
}

type agentKnowledgeBaseArgs struct {
	// Required. The display name of the knowledge base. The name must be 1024 bytes or less; otherwise, the creation request fails.
	DisplayName     *string `pulumi:"displayName"`
	KnowledgeBaseId string  `pulumi:"knowledgeBaseId"`
	// Language which represents the KnowledgeBase. When the KnowledgeBase is created/updated, expect this to be present for non en-us languages. When unspecified, the default language code en-us applies.
	LanguageCode *string `pulumi:"languageCode"`
	// The knowledge base resource name. The name must be empty when creating a knowledge base. Format: `projects//locations//knowledgeBases/`.
	Name    *string `pulumi:"name"`
	Project string  `pulumi:"project"`
}

// The set of arguments for constructing a AgentKnowledgeBase resource.
type AgentKnowledgeBaseArgs struct {
	// Required. The display name of the knowledge base. The name must be 1024 bytes or less; otherwise, the creation request fails.
	DisplayName     pulumi.StringPtrInput
	KnowledgeBaseId pulumi.StringInput
	// Language which represents the KnowledgeBase. When the KnowledgeBase is created/updated, expect this to be present for non en-us languages. When unspecified, the default language code en-us applies.
	LanguageCode pulumi.StringPtrInput
	// The knowledge base resource name. The name must be empty when creating a knowledge base. Format: `projects//locations//knowledgeBases/`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringInput
}

func (AgentKnowledgeBaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*agentKnowledgeBaseArgs)(nil)).Elem()
}

type AgentKnowledgeBaseInput interface {
	pulumi.Input

	ToAgentKnowledgeBaseOutput() AgentKnowledgeBaseOutput
	ToAgentKnowledgeBaseOutputWithContext(ctx context.Context) AgentKnowledgeBaseOutput
}

func (*AgentKnowledgeBase) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentKnowledgeBase)(nil))
}

func (i *AgentKnowledgeBase) ToAgentKnowledgeBaseOutput() AgentKnowledgeBaseOutput {
	return i.ToAgentKnowledgeBaseOutputWithContext(context.Background())
}

func (i *AgentKnowledgeBase) ToAgentKnowledgeBaseOutputWithContext(ctx context.Context) AgentKnowledgeBaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentKnowledgeBaseOutput)
}

type AgentKnowledgeBaseOutput struct {
	*pulumi.OutputState
}

func (AgentKnowledgeBaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentKnowledgeBase)(nil))
}

func (o AgentKnowledgeBaseOutput) ToAgentKnowledgeBaseOutput() AgentKnowledgeBaseOutput {
	return o
}

func (o AgentKnowledgeBaseOutput) ToAgentKnowledgeBaseOutputWithContext(ctx context.Context) AgentKnowledgeBaseOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AgentKnowledgeBaseOutput{})
}
