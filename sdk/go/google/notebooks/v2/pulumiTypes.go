// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// An accelerator configuration for a VM instance Definition of a hardware accelerator. Note that there is no check on `type` and `core_count` combinations. TPUs are not supported. See [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination.
type AcceleratorConfig struct {
	// Optional. Count of cores of this accelerator.
	CoreCount *string `pulumi:"coreCount"`
	// Optional. Type of this accelerator.
	Type *AcceleratorConfigType `pulumi:"type"`
}

// AcceleratorConfigInput is an input type that accepts AcceleratorConfigArgs and AcceleratorConfigOutput values.
// You can construct a concrete instance of `AcceleratorConfigInput` via:
//
//	AcceleratorConfigArgs{...}
type AcceleratorConfigInput interface {
	pulumi.Input

	ToAcceleratorConfigOutput() AcceleratorConfigOutput
	ToAcceleratorConfigOutputWithContext(context.Context) AcceleratorConfigOutput
}

// An accelerator configuration for a VM instance Definition of a hardware accelerator. Note that there is no check on `type` and `core_count` combinations. TPUs are not supported. See [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination.
type AcceleratorConfigArgs struct {
	// Optional. Count of cores of this accelerator.
	CoreCount pulumi.StringPtrInput `pulumi:"coreCount"`
	// Optional. Type of this accelerator.
	Type AcceleratorConfigTypePtrInput `pulumi:"type"`
}

func (AcceleratorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return i.ToAcceleratorConfigOutputWithContext(context.Background())
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigOutput)
}

func (i AcceleratorConfigArgs) ToOutput(ctx context.Context) pulumix.Output[AcceleratorConfig] {
	return pulumix.Output[AcceleratorConfig]{
		OutputState: i.ToAcceleratorConfigOutputWithContext(ctx).OutputState,
	}
}

// AcceleratorConfigArrayInput is an input type that accepts AcceleratorConfigArray and AcceleratorConfigArrayOutput values.
// You can construct a concrete instance of `AcceleratorConfigArrayInput` via:
//
//	AcceleratorConfigArray{ AcceleratorConfigArgs{...} }
type AcceleratorConfigArrayInput interface {
	pulumi.Input

	ToAcceleratorConfigArrayOutput() AcceleratorConfigArrayOutput
	ToAcceleratorConfigArrayOutputWithContext(context.Context) AcceleratorConfigArrayOutput
}

type AcceleratorConfigArray []AcceleratorConfigInput

func (AcceleratorConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcceleratorConfig)(nil)).Elem()
}

func (i AcceleratorConfigArray) ToAcceleratorConfigArrayOutput() AcceleratorConfigArrayOutput {
	return i.ToAcceleratorConfigArrayOutputWithContext(context.Background())
}

func (i AcceleratorConfigArray) ToAcceleratorConfigArrayOutputWithContext(ctx context.Context) AcceleratorConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigArrayOutput)
}

func (i AcceleratorConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]AcceleratorConfig] {
	return pulumix.Output[[]AcceleratorConfig]{
		OutputState: i.ToAcceleratorConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// An accelerator configuration for a VM instance Definition of a hardware accelerator. Note that there is no check on `type` and `core_count` combinations. TPUs are not supported. See [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination.
type AcceleratorConfigOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return o
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return o
}

func (o AcceleratorConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AcceleratorConfig] {
	return pulumix.Output[AcceleratorConfig]{
		OutputState: o.OutputState,
	}
}

// Optional. Count of cores of this accelerator.
func (o AcceleratorConfigOutput) CoreCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *string { return v.CoreCount }).(pulumi.StringPtrOutput)
}

// Optional. Type of this accelerator.
func (o AcceleratorConfigOutput) Type() AcceleratorConfigTypePtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *AcceleratorConfigType { return v.Type }).(AcceleratorConfigTypePtrOutput)
}

type AcceleratorConfigArrayOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigArrayOutput) ToAcceleratorConfigArrayOutput() AcceleratorConfigArrayOutput {
	return o
}

func (o AcceleratorConfigArrayOutput) ToAcceleratorConfigArrayOutputWithContext(ctx context.Context) AcceleratorConfigArrayOutput {
	return o
}

func (o AcceleratorConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AcceleratorConfig] {
	return pulumix.Output[[]AcceleratorConfig]{
		OutputState: o.OutputState,
	}
}

func (o AcceleratorConfigArrayOutput) Index(i pulumi.IntInput) AcceleratorConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AcceleratorConfig {
		return vs[0].([]AcceleratorConfig)[vs[1].(int)]
	}).(AcceleratorConfigOutput)
}

// An accelerator configuration for a VM instance Definition of a hardware accelerator. Note that there is no check on `type` and `core_count` combinations. TPUs are not supported. See [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination.
type AcceleratorConfigResponse struct {
	// Optional. Count of cores of this accelerator.
	CoreCount string `pulumi:"coreCount"`
	// Optional. Type of this accelerator.
	Type string `pulumi:"type"`
}

// An accelerator configuration for a VM instance Definition of a hardware accelerator. Note that there is no check on `type` and `core_count` combinations. TPUs are not supported. See [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination.
type AcceleratorConfigResponseOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfigResponse)(nil)).Elem()
}

func (o AcceleratorConfigResponseOutput) ToAcceleratorConfigResponseOutput() AcceleratorConfigResponseOutput {
	return o
}

func (o AcceleratorConfigResponseOutput) ToAcceleratorConfigResponseOutputWithContext(ctx context.Context) AcceleratorConfigResponseOutput {
	return o
}

func (o AcceleratorConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AcceleratorConfigResponse] {
	return pulumix.Output[AcceleratorConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Count of cores of this accelerator.
func (o AcceleratorConfigResponseOutput) CoreCount() pulumi.StringOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) string { return v.CoreCount }).(pulumi.StringOutput)
}

// Optional. Type of this accelerator.
func (o AcceleratorConfigResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AcceleratorConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcceleratorConfigResponse)(nil)).Elem()
}

func (o AcceleratorConfigResponseArrayOutput) ToAcceleratorConfigResponseArrayOutput() AcceleratorConfigResponseArrayOutput {
	return o
}

func (o AcceleratorConfigResponseArrayOutput) ToAcceleratorConfigResponseArrayOutputWithContext(ctx context.Context) AcceleratorConfigResponseArrayOutput {
	return o
}

func (o AcceleratorConfigResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AcceleratorConfigResponse] {
	return pulumix.Output[[]AcceleratorConfigResponse]{
		OutputState: o.OutputState,
	}
}

func (o AcceleratorConfigResponseArrayOutput) Index(i pulumi.IntInput) AcceleratorConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AcceleratorConfigResponse {
		return vs[0].([]AcceleratorConfigResponse)[vs[1].(int)]
	}).(AcceleratorConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

func (i BindingArgs) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: i.ToBindingOutputWithContext(ctx).OutputState,
	}
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

func (i BindingArray) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: i.ToBindingArrayOutputWithContext(ctx).OutputState,
	}
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

func (o BindingOutput) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: o.OutputState,
	}
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BindingResponse] {
	return pulumix.Output[BindingResponse]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BindingResponse] {
	return pulumix.Output[[]BindingResponse]{
		OutputState: o.OutputState,
	}
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// The definition of a boot disk.
type BootDisk struct {
	// Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
	DiskEncryption *BootDiskDiskEncryption `pulumi:"diskEncryption"`
	// Optional. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to the recommended value of 150GB.
	DiskSizeGb *string `pulumi:"diskSizeGb"`
	// Optional. Indicates the type of the disk.
	DiskType *BootDiskDiskType `pulumi:"diskType"`
	// Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.
	KmsKey *string `pulumi:"kmsKey"`
}

// BootDiskInput is an input type that accepts BootDiskArgs and BootDiskOutput values.
// You can construct a concrete instance of `BootDiskInput` via:
//
//	BootDiskArgs{...}
type BootDiskInput interface {
	pulumi.Input

	ToBootDiskOutput() BootDiskOutput
	ToBootDiskOutputWithContext(context.Context) BootDiskOutput
}

// The definition of a boot disk.
type BootDiskArgs struct {
	// Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
	DiskEncryption BootDiskDiskEncryptionPtrInput `pulumi:"diskEncryption"`
	// Optional. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to the recommended value of 150GB.
	DiskSizeGb pulumi.StringPtrInput `pulumi:"diskSizeGb"`
	// Optional. Indicates the type of the disk.
	DiskType BootDiskDiskTypePtrInput `pulumi:"diskType"`
	// Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.
	KmsKey pulumi.StringPtrInput `pulumi:"kmsKey"`
}

func (BootDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDisk)(nil)).Elem()
}

func (i BootDiskArgs) ToBootDiskOutput() BootDiskOutput {
	return i.ToBootDiskOutputWithContext(context.Background())
}

func (i BootDiskArgs) ToBootDiskOutputWithContext(ctx context.Context) BootDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootDiskOutput)
}

func (i BootDiskArgs) ToOutput(ctx context.Context) pulumix.Output[BootDisk] {
	return pulumix.Output[BootDisk]{
		OutputState: i.ToBootDiskOutputWithContext(ctx).OutputState,
	}
}

func (i BootDiskArgs) ToBootDiskPtrOutput() BootDiskPtrOutput {
	return i.ToBootDiskPtrOutputWithContext(context.Background())
}

func (i BootDiskArgs) ToBootDiskPtrOutputWithContext(ctx context.Context) BootDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootDiskOutput).ToBootDiskPtrOutputWithContext(ctx)
}

// BootDiskPtrInput is an input type that accepts BootDiskArgs, BootDiskPtr and BootDiskPtrOutput values.
// You can construct a concrete instance of `BootDiskPtrInput` via:
//
//	        BootDiskArgs{...}
//
//	or:
//
//	        nil
type BootDiskPtrInput interface {
	pulumi.Input

	ToBootDiskPtrOutput() BootDiskPtrOutput
	ToBootDiskPtrOutputWithContext(context.Context) BootDiskPtrOutput
}

type bootDiskPtrType BootDiskArgs

func BootDiskPtr(v *BootDiskArgs) BootDiskPtrInput {
	return (*bootDiskPtrType)(v)
}

func (*bootDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BootDisk)(nil)).Elem()
}

func (i *bootDiskPtrType) ToBootDiskPtrOutput() BootDiskPtrOutput {
	return i.ToBootDiskPtrOutputWithContext(context.Background())
}

func (i *bootDiskPtrType) ToBootDiskPtrOutputWithContext(ctx context.Context) BootDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootDiskPtrOutput)
}

func (i *bootDiskPtrType) ToOutput(ctx context.Context) pulumix.Output[*BootDisk] {
	return pulumix.Output[*BootDisk]{
		OutputState: i.ToBootDiskPtrOutputWithContext(ctx).OutputState,
	}
}

// The definition of a boot disk.
type BootDiskOutput struct{ *pulumi.OutputState }

func (BootDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDisk)(nil)).Elem()
}

func (o BootDiskOutput) ToBootDiskOutput() BootDiskOutput {
	return o
}

func (o BootDiskOutput) ToBootDiskOutputWithContext(ctx context.Context) BootDiskOutput {
	return o
}

func (o BootDiskOutput) ToBootDiskPtrOutput() BootDiskPtrOutput {
	return o.ToBootDiskPtrOutputWithContext(context.Background())
}

func (o BootDiskOutput) ToBootDiskPtrOutputWithContext(ctx context.Context) BootDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BootDisk) *BootDisk {
		return &v
	}).(BootDiskPtrOutput)
}

func (o BootDiskOutput) ToOutput(ctx context.Context) pulumix.Output[BootDisk] {
	return pulumix.Output[BootDisk]{
		OutputState: o.OutputState,
	}
}

// Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
func (o BootDiskOutput) DiskEncryption() BootDiskDiskEncryptionPtrOutput {
	return o.ApplyT(func(v BootDisk) *BootDiskDiskEncryption { return v.DiskEncryption }).(BootDiskDiskEncryptionPtrOutput)
}

// Optional. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to the recommended value of 150GB.
func (o BootDiskOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BootDisk) *string { return v.DiskSizeGb }).(pulumi.StringPtrOutput)
}

// Optional. Indicates the type of the disk.
func (o BootDiskOutput) DiskType() BootDiskDiskTypePtrOutput {
	return o.ApplyT(func(v BootDisk) *BootDiskDiskType { return v.DiskType }).(BootDiskDiskTypePtrOutput)
}

// Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.
func (o BootDiskOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BootDisk) *string { return v.KmsKey }).(pulumi.StringPtrOutput)
}

type BootDiskPtrOutput struct{ *pulumi.OutputState }

func (BootDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BootDisk)(nil)).Elem()
}

func (o BootDiskPtrOutput) ToBootDiskPtrOutput() BootDiskPtrOutput {
	return o
}

func (o BootDiskPtrOutput) ToBootDiskPtrOutputWithContext(ctx context.Context) BootDiskPtrOutput {
	return o
}

func (o BootDiskPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BootDisk] {
	return pulumix.Output[*BootDisk]{
		OutputState: o.OutputState,
	}
}

func (o BootDiskPtrOutput) Elem() BootDiskOutput {
	return o.ApplyT(func(v *BootDisk) BootDisk {
		if v != nil {
			return *v
		}
		var ret BootDisk
		return ret
	}).(BootDiskOutput)
}

// Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
func (o BootDiskPtrOutput) DiskEncryption() BootDiskDiskEncryptionPtrOutput {
	return o.ApplyT(func(v *BootDisk) *BootDiskDiskEncryption {
		if v == nil {
			return nil
		}
		return v.DiskEncryption
	}).(BootDiskDiskEncryptionPtrOutput)
}

// Optional. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to the recommended value of 150GB.
func (o BootDiskPtrOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BootDisk) *string {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.StringPtrOutput)
}

// Optional. Indicates the type of the disk.
func (o BootDiskPtrOutput) DiskType() BootDiskDiskTypePtrOutput {
	return o.ApplyT(func(v *BootDisk) *BootDiskDiskType {
		if v == nil {
			return nil
		}
		return v.DiskType
	}).(BootDiskDiskTypePtrOutput)
}

// Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.
func (o BootDiskPtrOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BootDisk) *string {
		if v == nil {
			return nil
		}
		return v.KmsKey
	}).(pulumi.StringPtrOutput)
}

// The definition of a boot disk.
type BootDiskResponse struct {
	// Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
	DiskEncryption string `pulumi:"diskEncryption"`
	// Optional. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to the recommended value of 150GB.
	DiskSizeGb string `pulumi:"diskSizeGb"`
	// Optional. Indicates the type of the disk.
	DiskType string `pulumi:"diskType"`
	// Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.
	KmsKey string `pulumi:"kmsKey"`
}

// The definition of a boot disk.
type BootDiskResponseOutput struct{ *pulumi.OutputState }

func (BootDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiskResponse)(nil)).Elem()
}

func (o BootDiskResponseOutput) ToBootDiskResponseOutput() BootDiskResponseOutput {
	return o
}

func (o BootDiskResponseOutput) ToBootDiskResponseOutputWithContext(ctx context.Context) BootDiskResponseOutput {
	return o
}

func (o BootDiskResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BootDiskResponse] {
	return pulumix.Output[BootDiskResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
func (o BootDiskResponseOutput) DiskEncryption() pulumi.StringOutput {
	return o.ApplyT(func(v BootDiskResponse) string { return v.DiskEncryption }).(pulumi.StringOutput)
}

// Optional. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to the recommended value of 150GB.
func (o BootDiskResponseOutput) DiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v BootDiskResponse) string { return v.DiskSizeGb }).(pulumi.StringOutput)
}

// Optional. Indicates the type of the disk.
func (o BootDiskResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v BootDiskResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.
func (o BootDiskResponseOutput) KmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v BootDiskResponse) string { return v.KmsKey }).(pulumi.StringOutput)
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImage struct {
	// The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
	Repository string `pulumi:"repository"`
	// Optional. The tag of the container image. If not specified, this defaults to the latest tag.
	Tag *string `pulumi:"tag"`
}

// ContainerImageInput is an input type that accepts ContainerImageArgs and ContainerImageOutput values.
// You can construct a concrete instance of `ContainerImageInput` via:
//
//	ContainerImageArgs{...}
type ContainerImageInput interface {
	pulumi.Input

	ToContainerImageOutput() ContainerImageOutput
	ToContainerImageOutputWithContext(context.Context) ContainerImageOutput
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImageArgs struct {
	// The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
	Repository pulumi.StringInput `pulumi:"repository"`
	// Optional. The tag of the container image. If not specified, this defaults to the latest tag.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (ContainerImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImage)(nil)).Elem()
}

func (i ContainerImageArgs) ToContainerImageOutput() ContainerImageOutput {
	return i.ToContainerImageOutputWithContext(context.Background())
}

func (i ContainerImageArgs) ToContainerImageOutputWithContext(ctx context.Context) ContainerImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageOutput)
}

func (i ContainerImageArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerImage] {
	return pulumix.Output[ContainerImage]{
		OutputState: i.ToContainerImageOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerImageArgs) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return i.ToContainerImagePtrOutputWithContext(context.Background())
}

func (i ContainerImageArgs) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageOutput).ToContainerImagePtrOutputWithContext(ctx)
}

// ContainerImagePtrInput is an input type that accepts ContainerImageArgs, ContainerImagePtr and ContainerImagePtrOutput values.
// You can construct a concrete instance of `ContainerImagePtrInput` via:
//
//	        ContainerImageArgs{...}
//
//	or:
//
//	        nil
type ContainerImagePtrInput interface {
	pulumi.Input

	ToContainerImagePtrOutput() ContainerImagePtrOutput
	ToContainerImagePtrOutputWithContext(context.Context) ContainerImagePtrOutput
}

type containerImagePtrType ContainerImageArgs

func ContainerImagePtr(v *ContainerImageArgs) ContainerImagePtrInput {
	return (*containerImagePtrType)(v)
}

func (*containerImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImage)(nil)).Elem()
}

func (i *containerImagePtrType) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return i.ToContainerImagePtrOutputWithContext(context.Background())
}

func (i *containerImagePtrType) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImagePtrOutput)
}

func (i *containerImagePtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerImage] {
	return pulumix.Output[*ContainerImage]{
		OutputState: i.ToContainerImagePtrOutputWithContext(ctx).OutputState,
	}
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImageOutput struct{ *pulumi.OutputState }

func (ContainerImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImage)(nil)).Elem()
}

func (o ContainerImageOutput) ToContainerImageOutput() ContainerImageOutput {
	return o
}

func (o ContainerImageOutput) ToContainerImageOutputWithContext(ctx context.Context) ContainerImageOutput {
	return o
}

func (o ContainerImageOutput) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return o.ToContainerImagePtrOutputWithContext(context.Background())
}

func (o ContainerImageOutput) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerImage) *ContainerImage {
		return &v
	}).(ContainerImagePtrOutput)
}

func (o ContainerImageOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerImage] {
	return pulumix.Output[ContainerImage]{
		OutputState: o.OutputState,
	}
}

// The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
func (o ContainerImageOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerImage) string { return v.Repository }).(pulumi.StringOutput)
}

// Optional. The tag of the container image. If not specified, this defaults to the latest tag.
func (o ContainerImageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerImage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type ContainerImagePtrOutput struct{ *pulumi.OutputState }

func (ContainerImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImage)(nil)).Elem()
}

func (o ContainerImagePtrOutput) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return o
}

func (o ContainerImagePtrOutput) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return o
}

func (o ContainerImagePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerImage] {
	return pulumix.Output[*ContainerImage]{
		OutputState: o.OutputState,
	}
}

func (o ContainerImagePtrOutput) Elem() ContainerImageOutput {
	return o.ApplyT(func(v *ContainerImage) ContainerImage {
		if v != nil {
			return *v
		}
		var ret ContainerImage
		return ret
	}).(ContainerImageOutput)
}

// The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
func (o ContainerImagePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImage) *string {
		if v == nil {
			return nil
		}
		return &v.Repository
	}).(pulumi.StringPtrOutput)
}

// Optional. The tag of the container image. If not specified, this defaults to the latest tag.
func (o ContainerImagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImageResponse struct {
	// The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
	Repository string `pulumi:"repository"`
	// Optional. The tag of the container image. If not specified, this defaults to the latest tag.
	Tag string `pulumi:"tag"`
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImageResponseOutput struct{ *pulumi.OutputState }

func (ContainerImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImageResponse)(nil)).Elem()
}

func (o ContainerImageResponseOutput) ToContainerImageResponseOutput() ContainerImageResponseOutput {
	return o
}

func (o ContainerImageResponseOutput) ToContainerImageResponseOutputWithContext(ctx context.Context) ContainerImageResponseOutput {
	return o
}

func (o ContainerImageResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerImageResponse] {
	return pulumix.Output[ContainerImageResponse]{
		OutputState: o.OutputState,
	}
}

// The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
func (o ContainerImageResponseOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerImageResponse) string { return v.Repository }).(pulumi.StringOutput)
}

// Optional. The tag of the container image. If not specified, this defaults to the latest tag.
func (o ContainerImageResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerImageResponse) string { return v.Tag }).(pulumi.StringOutput)
}

// An instance-attached disk resource.
type DataDisk struct {
	// Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
	DiskEncryption *DataDiskDiskEncryption `pulumi:"diskEncryption"`
	// Optional. The size of the disk in GB attached to this VM instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to 100.
	DiskSizeGb *string `pulumi:"diskSizeGb"`
	// Optional. Input only. Indicates the type of the disk.
	DiskType *DataDiskDiskType `pulumi:"diskType"`
	// Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.
	KmsKey *string `pulumi:"kmsKey"`
}

// DataDiskInput is an input type that accepts DataDiskArgs and DataDiskOutput values.
// You can construct a concrete instance of `DataDiskInput` via:
//
//	DataDiskArgs{...}
type DataDiskInput interface {
	pulumi.Input

	ToDataDiskOutput() DataDiskOutput
	ToDataDiskOutputWithContext(context.Context) DataDiskOutput
}

// An instance-attached disk resource.
type DataDiskArgs struct {
	// Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
	DiskEncryption DataDiskDiskEncryptionPtrInput `pulumi:"diskEncryption"`
	// Optional. The size of the disk in GB attached to this VM instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to 100.
	DiskSizeGb pulumi.StringPtrInput `pulumi:"diskSizeGb"`
	// Optional. Input only. Indicates the type of the disk.
	DiskType DataDiskDiskTypePtrInput `pulumi:"diskType"`
	// Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.
	KmsKey pulumi.StringPtrInput `pulumi:"kmsKey"`
}

func (DataDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisk)(nil)).Elem()
}

func (i DataDiskArgs) ToDataDiskOutput() DataDiskOutput {
	return i.ToDataDiskOutputWithContext(context.Background())
}

func (i DataDiskArgs) ToDataDiskOutputWithContext(ctx context.Context) DataDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskOutput)
}

func (i DataDiskArgs) ToOutput(ctx context.Context) pulumix.Output[DataDisk] {
	return pulumix.Output[DataDisk]{
		OutputState: i.ToDataDiskOutputWithContext(ctx).OutputState,
	}
}

// DataDiskArrayInput is an input type that accepts DataDiskArray and DataDiskArrayOutput values.
// You can construct a concrete instance of `DataDiskArrayInput` via:
//
//	DataDiskArray{ DataDiskArgs{...} }
type DataDiskArrayInput interface {
	pulumi.Input

	ToDataDiskArrayOutput() DataDiskArrayOutput
	ToDataDiskArrayOutputWithContext(context.Context) DataDiskArrayOutput
}

type DataDiskArray []DataDiskInput

func (DataDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDisk)(nil)).Elem()
}

func (i DataDiskArray) ToDataDiskArrayOutput() DataDiskArrayOutput {
	return i.ToDataDiskArrayOutputWithContext(context.Background())
}

func (i DataDiskArray) ToDataDiskArrayOutputWithContext(ctx context.Context) DataDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiskArrayOutput)
}

func (i DataDiskArray) ToOutput(ctx context.Context) pulumix.Output[[]DataDisk] {
	return pulumix.Output[[]DataDisk]{
		OutputState: i.ToDataDiskArrayOutputWithContext(ctx).OutputState,
	}
}

// An instance-attached disk resource.
type DataDiskOutput struct{ *pulumi.OutputState }

func (DataDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisk)(nil)).Elem()
}

func (o DataDiskOutput) ToDataDiskOutput() DataDiskOutput {
	return o
}

func (o DataDiskOutput) ToDataDiskOutputWithContext(ctx context.Context) DataDiskOutput {
	return o
}

func (o DataDiskOutput) ToOutput(ctx context.Context) pulumix.Output[DataDisk] {
	return pulumix.Output[DataDisk]{
		OutputState: o.OutputState,
	}
}

// Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
func (o DataDiskOutput) DiskEncryption() DataDiskDiskEncryptionPtrOutput {
	return o.ApplyT(func(v DataDisk) *DataDiskDiskEncryption { return v.DiskEncryption }).(DataDiskDiskEncryptionPtrOutput)
}

// Optional. The size of the disk in GB attached to this VM instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to 100.
func (o DataDiskOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDisk) *string { return v.DiskSizeGb }).(pulumi.StringPtrOutput)
}

// Optional. Input only. Indicates the type of the disk.
func (o DataDiskOutput) DiskType() DataDiskDiskTypePtrOutput {
	return o.ApplyT(func(v DataDisk) *DataDiskDiskType { return v.DiskType }).(DataDiskDiskTypePtrOutput)
}

// Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.
func (o DataDiskOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataDisk) *string { return v.KmsKey }).(pulumi.StringPtrOutput)
}

type DataDiskArrayOutput struct{ *pulumi.OutputState }

func (DataDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDisk)(nil)).Elem()
}

func (o DataDiskArrayOutput) ToDataDiskArrayOutput() DataDiskArrayOutput {
	return o
}

func (o DataDiskArrayOutput) ToDataDiskArrayOutputWithContext(ctx context.Context) DataDiskArrayOutput {
	return o
}

func (o DataDiskArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataDisk] {
	return pulumix.Output[[]DataDisk]{
		OutputState: o.OutputState,
	}
}

func (o DataDiskArrayOutput) Index(i pulumi.IntInput) DataDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataDisk {
		return vs[0].([]DataDisk)[vs[1].(int)]
	}).(DataDiskOutput)
}

// An instance-attached disk resource.
type DataDiskResponse struct {
	// Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
	DiskEncryption string `pulumi:"diskEncryption"`
	// Optional. The size of the disk in GB attached to this VM instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to 100.
	DiskSizeGb string `pulumi:"diskSizeGb"`
	// Optional. Input only. Indicates the type of the disk.
	DiskType string `pulumi:"diskType"`
	// Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.
	KmsKey string `pulumi:"kmsKey"`
}

// An instance-attached disk resource.
type DataDiskResponseOutput struct{ *pulumi.OutputState }

func (DataDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDiskResponse)(nil)).Elem()
}

func (o DataDiskResponseOutput) ToDataDiskResponseOutput() DataDiskResponseOutput {
	return o
}

func (o DataDiskResponseOutput) ToDataDiskResponseOutputWithContext(ctx context.Context) DataDiskResponseOutput {
	return o
}

func (o DataDiskResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DataDiskResponse] {
	return pulumix.Output[DataDiskResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
func (o DataDiskResponseOutput) DiskEncryption() pulumi.StringOutput {
	return o.ApplyT(func(v DataDiskResponse) string { return v.DiskEncryption }).(pulumi.StringOutput)
}

// Optional. The size of the disk in GB attached to this VM instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to 100.
func (o DataDiskResponseOutput) DiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v DataDiskResponse) string { return v.DiskSizeGb }).(pulumi.StringOutput)
}

// Optional. Input only. Indicates the type of the disk.
func (o DataDiskResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v DataDiskResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.
func (o DataDiskResponseOutput) KmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v DataDiskResponse) string { return v.KmsKey }).(pulumi.StringOutput)
}

type DataDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (DataDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDiskResponse)(nil)).Elem()
}

func (o DataDiskResponseArrayOutput) ToDataDiskResponseArrayOutput() DataDiskResponseArrayOutput {
	return o
}

func (o DataDiskResponseArrayOutput) ToDataDiskResponseArrayOutputWithContext(ctx context.Context) DataDiskResponseArrayOutput {
	return o
}

func (o DataDiskResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DataDiskResponse] {
	return pulumix.Output[[]DataDiskResponse]{
		OutputState: o.OutputState,
	}
}

func (o DataDiskResponseArrayOutput) Index(i pulumi.IntInput) DataDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataDiskResponse {
		return vs[0].([]DataDiskResponse)[vs[1].(int)]
	}).(DataDiskResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: i.ToExprOutputWithContext(ctx).OutputState,
	}
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

func (i *exprPtrType) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: i.ToExprPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

func (o ExprOutput) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: o.OutputState,
	}
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExprResponse] {
	return pulumix.Output[ExprResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// A GPU driver configuration
type GPUDriverConfig struct {
	// Optional. Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
	CustomGpuDriverPath *string `pulumi:"customGpuDriverPath"`
	// Optional. Whether the end user authorizes Google Cloud to install GPU driver on this VM instance. If this field is empty or set to false, the GPU driver won't be installed. Only applicable to instances with GPUs.
	EnableGpuDriver *bool `pulumi:"enableGpuDriver"`
}

// GPUDriverConfigInput is an input type that accepts GPUDriverConfigArgs and GPUDriverConfigOutput values.
// You can construct a concrete instance of `GPUDriverConfigInput` via:
//
//	GPUDriverConfigArgs{...}
type GPUDriverConfigInput interface {
	pulumi.Input

	ToGPUDriverConfigOutput() GPUDriverConfigOutput
	ToGPUDriverConfigOutputWithContext(context.Context) GPUDriverConfigOutput
}

// A GPU driver configuration
type GPUDriverConfigArgs struct {
	// Optional. Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
	CustomGpuDriverPath pulumi.StringPtrInput `pulumi:"customGpuDriverPath"`
	// Optional. Whether the end user authorizes Google Cloud to install GPU driver on this VM instance. If this field is empty or set to false, the GPU driver won't be installed. Only applicable to instances with GPUs.
	EnableGpuDriver pulumi.BoolPtrInput `pulumi:"enableGpuDriver"`
}

func (GPUDriverConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GPUDriverConfig)(nil)).Elem()
}

func (i GPUDriverConfigArgs) ToGPUDriverConfigOutput() GPUDriverConfigOutput {
	return i.ToGPUDriverConfigOutputWithContext(context.Background())
}

func (i GPUDriverConfigArgs) ToGPUDriverConfigOutputWithContext(ctx context.Context) GPUDriverConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GPUDriverConfigOutput)
}

func (i GPUDriverConfigArgs) ToOutput(ctx context.Context) pulumix.Output[GPUDriverConfig] {
	return pulumix.Output[GPUDriverConfig]{
		OutputState: i.ToGPUDriverConfigOutputWithContext(ctx).OutputState,
	}
}

func (i GPUDriverConfigArgs) ToGPUDriverConfigPtrOutput() GPUDriverConfigPtrOutput {
	return i.ToGPUDriverConfigPtrOutputWithContext(context.Background())
}

func (i GPUDriverConfigArgs) ToGPUDriverConfigPtrOutputWithContext(ctx context.Context) GPUDriverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GPUDriverConfigOutput).ToGPUDriverConfigPtrOutputWithContext(ctx)
}

// GPUDriverConfigPtrInput is an input type that accepts GPUDriverConfigArgs, GPUDriverConfigPtr and GPUDriverConfigPtrOutput values.
// You can construct a concrete instance of `GPUDriverConfigPtrInput` via:
//
//	        GPUDriverConfigArgs{...}
//
//	or:
//
//	        nil
type GPUDriverConfigPtrInput interface {
	pulumi.Input

	ToGPUDriverConfigPtrOutput() GPUDriverConfigPtrOutput
	ToGPUDriverConfigPtrOutputWithContext(context.Context) GPUDriverConfigPtrOutput
}

type gpudriverConfigPtrType GPUDriverConfigArgs

func GPUDriverConfigPtr(v *GPUDriverConfigArgs) GPUDriverConfigPtrInput {
	return (*gpudriverConfigPtrType)(v)
}

func (*gpudriverConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GPUDriverConfig)(nil)).Elem()
}

func (i *gpudriverConfigPtrType) ToGPUDriverConfigPtrOutput() GPUDriverConfigPtrOutput {
	return i.ToGPUDriverConfigPtrOutputWithContext(context.Background())
}

func (i *gpudriverConfigPtrType) ToGPUDriverConfigPtrOutputWithContext(ctx context.Context) GPUDriverConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GPUDriverConfigPtrOutput)
}

func (i *gpudriverConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*GPUDriverConfig] {
	return pulumix.Output[*GPUDriverConfig]{
		OutputState: i.ToGPUDriverConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// A GPU driver configuration
type GPUDriverConfigOutput struct{ *pulumi.OutputState }

func (GPUDriverConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GPUDriverConfig)(nil)).Elem()
}

func (o GPUDriverConfigOutput) ToGPUDriverConfigOutput() GPUDriverConfigOutput {
	return o
}

func (o GPUDriverConfigOutput) ToGPUDriverConfigOutputWithContext(ctx context.Context) GPUDriverConfigOutput {
	return o
}

func (o GPUDriverConfigOutput) ToGPUDriverConfigPtrOutput() GPUDriverConfigPtrOutput {
	return o.ToGPUDriverConfigPtrOutputWithContext(context.Background())
}

func (o GPUDriverConfigOutput) ToGPUDriverConfigPtrOutputWithContext(ctx context.Context) GPUDriverConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GPUDriverConfig) *GPUDriverConfig {
		return &v
	}).(GPUDriverConfigPtrOutput)
}

func (o GPUDriverConfigOutput) ToOutput(ctx context.Context) pulumix.Output[GPUDriverConfig] {
	return pulumix.Output[GPUDriverConfig]{
		OutputState: o.OutputState,
	}
}

// Optional. Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
func (o GPUDriverConfigOutput) CustomGpuDriverPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GPUDriverConfig) *string { return v.CustomGpuDriverPath }).(pulumi.StringPtrOutput)
}

// Optional. Whether the end user authorizes Google Cloud to install GPU driver on this VM instance. If this field is empty or set to false, the GPU driver won't be installed. Only applicable to instances with GPUs.
func (o GPUDriverConfigOutput) EnableGpuDriver() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GPUDriverConfig) *bool { return v.EnableGpuDriver }).(pulumi.BoolPtrOutput)
}

type GPUDriverConfigPtrOutput struct{ *pulumi.OutputState }

func (GPUDriverConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GPUDriverConfig)(nil)).Elem()
}

func (o GPUDriverConfigPtrOutput) ToGPUDriverConfigPtrOutput() GPUDriverConfigPtrOutput {
	return o
}

func (o GPUDriverConfigPtrOutput) ToGPUDriverConfigPtrOutputWithContext(ctx context.Context) GPUDriverConfigPtrOutput {
	return o
}

func (o GPUDriverConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GPUDriverConfig] {
	return pulumix.Output[*GPUDriverConfig]{
		OutputState: o.OutputState,
	}
}

func (o GPUDriverConfigPtrOutput) Elem() GPUDriverConfigOutput {
	return o.ApplyT(func(v *GPUDriverConfig) GPUDriverConfig {
		if v != nil {
			return *v
		}
		var ret GPUDriverConfig
		return ret
	}).(GPUDriverConfigOutput)
}

// Optional. Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
func (o GPUDriverConfigPtrOutput) CustomGpuDriverPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GPUDriverConfig) *string {
		if v == nil {
			return nil
		}
		return v.CustomGpuDriverPath
	}).(pulumi.StringPtrOutput)
}

// Optional. Whether the end user authorizes Google Cloud to install GPU driver on this VM instance. If this field is empty or set to false, the GPU driver won't be installed. Only applicable to instances with GPUs.
func (o GPUDriverConfigPtrOutput) EnableGpuDriver() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GPUDriverConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableGpuDriver
	}).(pulumi.BoolPtrOutput)
}

// A GPU driver configuration
type GPUDriverConfigResponse struct {
	// Optional. Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
	CustomGpuDriverPath string `pulumi:"customGpuDriverPath"`
	// Optional. Whether the end user authorizes Google Cloud to install GPU driver on this VM instance. If this field is empty or set to false, the GPU driver won't be installed. Only applicable to instances with GPUs.
	EnableGpuDriver bool `pulumi:"enableGpuDriver"`
}

// A GPU driver configuration
type GPUDriverConfigResponseOutput struct{ *pulumi.OutputState }

func (GPUDriverConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GPUDriverConfigResponse)(nil)).Elem()
}

func (o GPUDriverConfigResponseOutput) ToGPUDriverConfigResponseOutput() GPUDriverConfigResponseOutput {
	return o
}

func (o GPUDriverConfigResponseOutput) ToGPUDriverConfigResponseOutputWithContext(ctx context.Context) GPUDriverConfigResponseOutput {
	return o
}

func (o GPUDriverConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GPUDriverConfigResponse] {
	return pulumix.Output[GPUDriverConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
func (o GPUDriverConfigResponseOutput) CustomGpuDriverPath() pulumi.StringOutput {
	return o.ApplyT(func(v GPUDriverConfigResponse) string { return v.CustomGpuDriverPath }).(pulumi.StringOutput)
}

// Optional. Whether the end user authorizes Google Cloud to install GPU driver on this VM instance. If this field is empty or set to false, the GPU driver won't be installed. Only applicable to instances with GPUs.
func (o GPUDriverConfigResponseOutput) EnableGpuDriver() pulumi.BoolOutput {
	return o.ApplyT(func(v GPUDriverConfigResponse) bool { return v.EnableGpuDriver }).(pulumi.BoolOutput)
}

// The definition of how to configure a VM instance outside of Resources and Identity.
type GceSetup struct {
	// Optional. The hardware accelerators used on this instance. If you use accelerators, make sure that your configuration has [enough vCPUs and memory to support the `machine_type` you have selected](https://cloud.google.com/compute/docs/gpus/#gpus-list). Currently supports only one accelerator configuration.
	AcceleratorConfigs []AcceleratorConfig `pulumi:"acceleratorConfigs"`
	// Optional. The boot disk for the VM.
	BootDisk *BootDisk `pulumi:"bootDisk"`
	// Optional. Use a container image to start the notebook instance.
	ContainerImage *ContainerImage `pulumi:"containerImage"`
	// Optional. Data disks attached to the VM instance. Currently supports only one data disk.
	DataDisks []DataDisk `pulumi:"dataDisks"`
	// Optional. If true, no external IP will be assigned to this VM instance.
	DisablePublicIp *bool `pulumi:"disablePublicIp"`
	// Optional. Flag to enable ip forwarding or not, default false/off. https://cloud.google.com/vpc/docs/using-routes#canipforward
	EnableIpForwarding *bool `pulumi:"enableIpForwarding"`
	// Optional. Configuration for GPU drivers.
	GpuDriverConfig *GPUDriverConfig `pulumi:"gpuDriverConfig"`
	// Optional. The machine type of the VM instance. https://cloud.google.com/compute/docs/machine-resource
	MachineType *string `pulumi:"machineType"`
	// Optional. Custom metadata to apply to this instance.
	Metadata map[string]string `pulumi:"metadata"`
	// Optional. The network interfaces for the VM. Supports only one interface.
	NetworkInterfaces []NetworkInterface `pulumi:"networkInterfaces"`
	// Optional. The service account that serves as an identity for the VM instance. Currently supports only one service account.
	ServiceAccounts []ServiceAccount `pulumi:"serviceAccounts"`
	// Optional. Shielded VM configuration. [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
	ShieldedInstanceConfig *ShieldedInstanceConfig `pulumi:"shieldedInstanceConfig"`
	// Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
	Tags []string `pulumi:"tags"`
	// Optional. Use a Compute Engine VM image to start the notebook instance.
	VmImage *VmImage `pulumi:"vmImage"`
}

// GceSetupInput is an input type that accepts GceSetupArgs and GceSetupOutput values.
// You can construct a concrete instance of `GceSetupInput` via:
//
//	GceSetupArgs{...}
type GceSetupInput interface {
	pulumi.Input

	ToGceSetupOutput() GceSetupOutput
	ToGceSetupOutputWithContext(context.Context) GceSetupOutput
}

// The definition of how to configure a VM instance outside of Resources and Identity.
type GceSetupArgs struct {
	// Optional. The hardware accelerators used on this instance. If you use accelerators, make sure that your configuration has [enough vCPUs and memory to support the `machine_type` you have selected](https://cloud.google.com/compute/docs/gpus/#gpus-list). Currently supports only one accelerator configuration.
	AcceleratorConfigs AcceleratorConfigArrayInput `pulumi:"acceleratorConfigs"`
	// Optional. The boot disk for the VM.
	BootDisk BootDiskPtrInput `pulumi:"bootDisk"`
	// Optional. Use a container image to start the notebook instance.
	ContainerImage ContainerImagePtrInput `pulumi:"containerImage"`
	// Optional. Data disks attached to the VM instance. Currently supports only one data disk.
	DataDisks DataDiskArrayInput `pulumi:"dataDisks"`
	// Optional. If true, no external IP will be assigned to this VM instance.
	DisablePublicIp pulumi.BoolPtrInput `pulumi:"disablePublicIp"`
	// Optional. Flag to enable ip forwarding or not, default false/off. https://cloud.google.com/vpc/docs/using-routes#canipforward
	EnableIpForwarding pulumi.BoolPtrInput `pulumi:"enableIpForwarding"`
	// Optional. Configuration for GPU drivers.
	GpuDriverConfig GPUDriverConfigPtrInput `pulumi:"gpuDriverConfig"`
	// Optional. The machine type of the VM instance. https://cloud.google.com/compute/docs/machine-resource
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// Optional. Custom metadata to apply to this instance.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Optional. The network interfaces for the VM. Supports only one interface.
	NetworkInterfaces NetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	// Optional. The service account that serves as an identity for the VM instance. Currently supports only one service account.
	ServiceAccounts ServiceAccountArrayInput `pulumi:"serviceAccounts"`
	// Optional. Shielded VM configuration. [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
	ShieldedInstanceConfig ShieldedInstanceConfigPtrInput `pulumi:"shieldedInstanceConfig"`
	// Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// Optional. Use a Compute Engine VM image to start the notebook instance.
	VmImage VmImagePtrInput `pulumi:"vmImage"`
}

func (GceSetupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GceSetup)(nil)).Elem()
}

func (i GceSetupArgs) ToGceSetupOutput() GceSetupOutput {
	return i.ToGceSetupOutputWithContext(context.Background())
}

func (i GceSetupArgs) ToGceSetupOutputWithContext(ctx context.Context) GceSetupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GceSetupOutput)
}

func (i GceSetupArgs) ToOutput(ctx context.Context) pulumix.Output[GceSetup] {
	return pulumix.Output[GceSetup]{
		OutputState: i.ToGceSetupOutputWithContext(ctx).OutputState,
	}
}

func (i GceSetupArgs) ToGceSetupPtrOutput() GceSetupPtrOutput {
	return i.ToGceSetupPtrOutputWithContext(context.Background())
}

func (i GceSetupArgs) ToGceSetupPtrOutputWithContext(ctx context.Context) GceSetupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GceSetupOutput).ToGceSetupPtrOutputWithContext(ctx)
}

// GceSetupPtrInput is an input type that accepts GceSetupArgs, GceSetupPtr and GceSetupPtrOutput values.
// You can construct a concrete instance of `GceSetupPtrInput` via:
//
//	        GceSetupArgs{...}
//
//	or:
//
//	        nil
type GceSetupPtrInput interface {
	pulumi.Input

	ToGceSetupPtrOutput() GceSetupPtrOutput
	ToGceSetupPtrOutputWithContext(context.Context) GceSetupPtrOutput
}

type gceSetupPtrType GceSetupArgs

func GceSetupPtr(v *GceSetupArgs) GceSetupPtrInput {
	return (*gceSetupPtrType)(v)
}

func (*gceSetupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GceSetup)(nil)).Elem()
}

func (i *gceSetupPtrType) ToGceSetupPtrOutput() GceSetupPtrOutput {
	return i.ToGceSetupPtrOutputWithContext(context.Background())
}

func (i *gceSetupPtrType) ToGceSetupPtrOutputWithContext(ctx context.Context) GceSetupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GceSetupPtrOutput)
}

func (i *gceSetupPtrType) ToOutput(ctx context.Context) pulumix.Output[*GceSetup] {
	return pulumix.Output[*GceSetup]{
		OutputState: i.ToGceSetupPtrOutputWithContext(ctx).OutputState,
	}
}

// The definition of how to configure a VM instance outside of Resources and Identity.
type GceSetupOutput struct{ *pulumi.OutputState }

func (GceSetupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GceSetup)(nil)).Elem()
}

func (o GceSetupOutput) ToGceSetupOutput() GceSetupOutput {
	return o
}

func (o GceSetupOutput) ToGceSetupOutputWithContext(ctx context.Context) GceSetupOutput {
	return o
}

func (o GceSetupOutput) ToGceSetupPtrOutput() GceSetupPtrOutput {
	return o.ToGceSetupPtrOutputWithContext(context.Background())
}

func (o GceSetupOutput) ToGceSetupPtrOutputWithContext(ctx context.Context) GceSetupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GceSetup) *GceSetup {
		return &v
	}).(GceSetupPtrOutput)
}

func (o GceSetupOutput) ToOutput(ctx context.Context) pulumix.Output[GceSetup] {
	return pulumix.Output[GceSetup]{
		OutputState: o.OutputState,
	}
}

// Optional. The hardware accelerators used on this instance. If you use accelerators, make sure that your configuration has [enough vCPUs and memory to support the `machine_type` you have selected](https://cloud.google.com/compute/docs/gpus/#gpus-list). Currently supports only one accelerator configuration.
func (o GceSetupOutput) AcceleratorConfigs() AcceleratorConfigArrayOutput {
	return o.ApplyT(func(v GceSetup) []AcceleratorConfig { return v.AcceleratorConfigs }).(AcceleratorConfigArrayOutput)
}

// Optional. The boot disk for the VM.
func (o GceSetupOutput) BootDisk() BootDiskPtrOutput {
	return o.ApplyT(func(v GceSetup) *BootDisk { return v.BootDisk }).(BootDiskPtrOutput)
}

// Optional. Use a container image to start the notebook instance.
func (o GceSetupOutput) ContainerImage() ContainerImagePtrOutput {
	return o.ApplyT(func(v GceSetup) *ContainerImage { return v.ContainerImage }).(ContainerImagePtrOutput)
}

// Optional. Data disks attached to the VM instance. Currently supports only one data disk.
func (o GceSetupOutput) DataDisks() DataDiskArrayOutput {
	return o.ApplyT(func(v GceSetup) []DataDisk { return v.DataDisks }).(DataDiskArrayOutput)
}

// Optional. If true, no external IP will be assigned to this VM instance.
func (o GceSetupOutput) DisablePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GceSetup) *bool { return v.DisablePublicIp }).(pulumi.BoolPtrOutput)
}

// Optional. Flag to enable ip forwarding or not, default false/off. https://cloud.google.com/vpc/docs/using-routes#canipforward
func (o GceSetupOutput) EnableIpForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GceSetup) *bool { return v.EnableIpForwarding }).(pulumi.BoolPtrOutput)
}

// Optional. Configuration for GPU drivers.
func (o GceSetupOutput) GpuDriverConfig() GPUDriverConfigPtrOutput {
	return o.ApplyT(func(v GceSetup) *GPUDriverConfig { return v.GpuDriverConfig }).(GPUDriverConfigPtrOutput)
}

// Optional. The machine type of the VM instance. https://cloud.google.com/compute/docs/machine-resource
func (o GceSetupOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GceSetup) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// Optional. Custom metadata to apply to this instance.
func (o GceSetupOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v GceSetup) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Optional. The network interfaces for the VM. Supports only one interface.
func (o GceSetupOutput) NetworkInterfaces() NetworkInterfaceArrayOutput {
	return o.ApplyT(func(v GceSetup) []NetworkInterface { return v.NetworkInterfaces }).(NetworkInterfaceArrayOutput)
}

// Optional. The service account that serves as an identity for the VM instance. Currently supports only one service account.
func (o GceSetupOutput) ServiceAccounts() ServiceAccountArrayOutput {
	return o.ApplyT(func(v GceSetup) []ServiceAccount { return v.ServiceAccounts }).(ServiceAccountArrayOutput)
}

// Optional. Shielded VM configuration. [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
func (o GceSetupOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v GceSetup) *ShieldedInstanceConfig { return v.ShieldedInstanceConfig }).(ShieldedInstanceConfigPtrOutput)
}

// Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
func (o GceSetupOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GceSetup) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Optional. Use a Compute Engine VM image to start the notebook instance.
func (o GceSetupOutput) VmImage() VmImagePtrOutput {
	return o.ApplyT(func(v GceSetup) *VmImage { return v.VmImage }).(VmImagePtrOutput)
}

type GceSetupPtrOutput struct{ *pulumi.OutputState }

func (GceSetupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GceSetup)(nil)).Elem()
}

func (o GceSetupPtrOutput) ToGceSetupPtrOutput() GceSetupPtrOutput {
	return o
}

func (o GceSetupPtrOutput) ToGceSetupPtrOutputWithContext(ctx context.Context) GceSetupPtrOutput {
	return o
}

func (o GceSetupPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GceSetup] {
	return pulumix.Output[*GceSetup]{
		OutputState: o.OutputState,
	}
}

func (o GceSetupPtrOutput) Elem() GceSetupOutput {
	return o.ApplyT(func(v *GceSetup) GceSetup {
		if v != nil {
			return *v
		}
		var ret GceSetup
		return ret
	}).(GceSetupOutput)
}

// Optional. The hardware accelerators used on this instance. If you use accelerators, make sure that your configuration has [enough vCPUs and memory to support the `machine_type` you have selected](https://cloud.google.com/compute/docs/gpus/#gpus-list). Currently supports only one accelerator configuration.
func (o GceSetupPtrOutput) AcceleratorConfigs() AcceleratorConfigArrayOutput {
	return o.ApplyT(func(v *GceSetup) []AcceleratorConfig {
		if v == nil {
			return nil
		}
		return v.AcceleratorConfigs
	}).(AcceleratorConfigArrayOutput)
}

// Optional. The boot disk for the VM.
func (o GceSetupPtrOutput) BootDisk() BootDiskPtrOutput {
	return o.ApplyT(func(v *GceSetup) *BootDisk {
		if v == nil {
			return nil
		}
		return v.BootDisk
	}).(BootDiskPtrOutput)
}

// Optional. Use a container image to start the notebook instance.
func (o GceSetupPtrOutput) ContainerImage() ContainerImagePtrOutput {
	return o.ApplyT(func(v *GceSetup) *ContainerImage {
		if v == nil {
			return nil
		}
		return v.ContainerImage
	}).(ContainerImagePtrOutput)
}

// Optional. Data disks attached to the VM instance. Currently supports only one data disk.
func (o GceSetupPtrOutput) DataDisks() DataDiskArrayOutput {
	return o.ApplyT(func(v *GceSetup) []DataDisk {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(DataDiskArrayOutput)
}

// Optional. If true, no external IP will be assigned to this VM instance.
func (o GceSetupPtrOutput) DisablePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GceSetup) *bool {
		if v == nil {
			return nil
		}
		return v.DisablePublicIp
	}).(pulumi.BoolPtrOutput)
}

// Optional. Flag to enable ip forwarding or not, default false/off. https://cloud.google.com/vpc/docs/using-routes#canipforward
func (o GceSetupPtrOutput) EnableIpForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GceSetup) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIpForwarding
	}).(pulumi.BoolPtrOutput)
}

// Optional. Configuration for GPU drivers.
func (o GceSetupPtrOutput) GpuDriverConfig() GPUDriverConfigPtrOutput {
	return o.ApplyT(func(v *GceSetup) *GPUDriverConfig {
		if v == nil {
			return nil
		}
		return v.GpuDriverConfig
	}).(GPUDriverConfigPtrOutput)
}

// Optional. The machine type of the VM instance. https://cloud.google.com/compute/docs/machine-resource
func (o GceSetupPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GceSetup) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Optional. Custom metadata to apply to this instance.
func (o GceSetupPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GceSetup) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Optional. The network interfaces for the VM. Supports only one interface.
func (o GceSetupPtrOutput) NetworkInterfaces() NetworkInterfaceArrayOutput {
	return o.ApplyT(func(v *GceSetup) []NetworkInterface {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaces
	}).(NetworkInterfaceArrayOutput)
}

// Optional. The service account that serves as an identity for the VM instance. Currently supports only one service account.
func (o GceSetupPtrOutput) ServiceAccounts() ServiceAccountArrayOutput {
	return o.ApplyT(func(v *GceSetup) []ServiceAccount {
		if v == nil {
			return nil
		}
		return v.ServiceAccounts
	}).(ServiceAccountArrayOutput)
}

// Optional. Shielded VM configuration. [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
func (o GceSetupPtrOutput) ShieldedInstanceConfig() ShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v *GceSetup) *ShieldedInstanceConfig {
		if v == nil {
			return nil
		}
		return v.ShieldedInstanceConfig
	}).(ShieldedInstanceConfigPtrOutput)
}

// Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
func (o GceSetupPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GceSetup) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// Optional. Use a Compute Engine VM image to start the notebook instance.
func (o GceSetupPtrOutput) VmImage() VmImagePtrOutput {
	return o.ApplyT(func(v *GceSetup) *VmImage {
		if v == nil {
			return nil
		}
		return v.VmImage
	}).(VmImagePtrOutput)
}

// The definition of how to configure a VM instance outside of Resources and Identity.
type GceSetupResponse struct {
	// Optional. The hardware accelerators used on this instance. If you use accelerators, make sure that your configuration has [enough vCPUs and memory to support the `machine_type` you have selected](https://cloud.google.com/compute/docs/gpus/#gpus-list). Currently supports only one accelerator configuration.
	AcceleratorConfigs []AcceleratorConfigResponse `pulumi:"acceleratorConfigs"`
	// Optional. The boot disk for the VM.
	BootDisk BootDiskResponse `pulumi:"bootDisk"`
	// Optional. Use a container image to start the notebook instance.
	ContainerImage ContainerImageResponse `pulumi:"containerImage"`
	// Optional. Data disks attached to the VM instance. Currently supports only one data disk.
	DataDisks []DataDiskResponse `pulumi:"dataDisks"`
	// Optional. If true, no external IP will be assigned to this VM instance.
	DisablePublicIp bool `pulumi:"disablePublicIp"`
	// Optional. Flag to enable ip forwarding or not, default false/off. https://cloud.google.com/vpc/docs/using-routes#canipforward
	EnableIpForwarding bool `pulumi:"enableIpForwarding"`
	// Optional. Configuration for GPU drivers.
	GpuDriverConfig GPUDriverConfigResponse `pulumi:"gpuDriverConfig"`
	// Optional. The machine type of the VM instance. https://cloud.google.com/compute/docs/machine-resource
	MachineType string `pulumi:"machineType"`
	// Optional. Custom metadata to apply to this instance.
	Metadata map[string]string `pulumi:"metadata"`
	// Optional. The network interfaces for the VM. Supports only one interface.
	NetworkInterfaces []NetworkInterfaceResponse `pulumi:"networkInterfaces"`
	// Optional. The service account that serves as an identity for the VM instance. Currently supports only one service account.
	ServiceAccounts []ServiceAccountResponse `pulumi:"serviceAccounts"`
	// Optional. Shielded VM configuration. [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
	ShieldedInstanceConfig ShieldedInstanceConfigResponse `pulumi:"shieldedInstanceConfig"`
	// Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
	Tags []string `pulumi:"tags"`
	// Optional. Use a Compute Engine VM image to start the notebook instance.
	VmImage VmImageResponse `pulumi:"vmImage"`
}

// The definition of how to configure a VM instance outside of Resources and Identity.
type GceSetupResponseOutput struct{ *pulumi.OutputState }

func (GceSetupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GceSetupResponse)(nil)).Elem()
}

func (o GceSetupResponseOutput) ToGceSetupResponseOutput() GceSetupResponseOutput {
	return o
}

func (o GceSetupResponseOutput) ToGceSetupResponseOutputWithContext(ctx context.Context) GceSetupResponseOutput {
	return o
}

func (o GceSetupResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GceSetupResponse] {
	return pulumix.Output[GceSetupResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. The hardware accelerators used on this instance. If you use accelerators, make sure that your configuration has [enough vCPUs and memory to support the `machine_type` you have selected](https://cloud.google.com/compute/docs/gpus/#gpus-list). Currently supports only one accelerator configuration.
func (o GceSetupResponseOutput) AcceleratorConfigs() AcceleratorConfigResponseArrayOutput {
	return o.ApplyT(func(v GceSetupResponse) []AcceleratorConfigResponse { return v.AcceleratorConfigs }).(AcceleratorConfigResponseArrayOutput)
}

// Optional. The boot disk for the VM.
func (o GceSetupResponseOutput) BootDisk() BootDiskResponseOutput {
	return o.ApplyT(func(v GceSetupResponse) BootDiskResponse { return v.BootDisk }).(BootDiskResponseOutput)
}

// Optional. Use a container image to start the notebook instance.
func (o GceSetupResponseOutput) ContainerImage() ContainerImageResponseOutput {
	return o.ApplyT(func(v GceSetupResponse) ContainerImageResponse { return v.ContainerImage }).(ContainerImageResponseOutput)
}

// Optional. Data disks attached to the VM instance. Currently supports only one data disk.
func (o GceSetupResponseOutput) DataDisks() DataDiskResponseArrayOutput {
	return o.ApplyT(func(v GceSetupResponse) []DataDiskResponse { return v.DataDisks }).(DataDiskResponseArrayOutput)
}

// Optional. If true, no external IP will be assigned to this VM instance.
func (o GceSetupResponseOutput) DisablePublicIp() pulumi.BoolOutput {
	return o.ApplyT(func(v GceSetupResponse) bool { return v.DisablePublicIp }).(pulumi.BoolOutput)
}

// Optional. Flag to enable ip forwarding or not, default false/off. https://cloud.google.com/vpc/docs/using-routes#canipforward
func (o GceSetupResponseOutput) EnableIpForwarding() pulumi.BoolOutput {
	return o.ApplyT(func(v GceSetupResponse) bool { return v.EnableIpForwarding }).(pulumi.BoolOutput)
}

// Optional. Configuration for GPU drivers.
func (o GceSetupResponseOutput) GpuDriverConfig() GPUDriverConfigResponseOutput {
	return o.ApplyT(func(v GceSetupResponse) GPUDriverConfigResponse { return v.GpuDriverConfig }).(GPUDriverConfigResponseOutput)
}

// Optional. The machine type of the VM instance. https://cloud.google.com/compute/docs/machine-resource
func (o GceSetupResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v GceSetupResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// Optional. Custom metadata to apply to this instance.
func (o GceSetupResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v GceSetupResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Optional. The network interfaces for the VM. Supports only one interface.
func (o GceSetupResponseOutput) NetworkInterfaces() NetworkInterfaceResponseArrayOutput {
	return o.ApplyT(func(v GceSetupResponse) []NetworkInterfaceResponse { return v.NetworkInterfaces }).(NetworkInterfaceResponseArrayOutput)
}

// Optional. The service account that serves as an identity for the VM instance. Currently supports only one service account.
func (o GceSetupResponseOutput) ServiceAccounts() ServiceAccountResponseArrayOutput {
	return o.ApplyT(func(v GceSetupResponse) []ServiceAccountResponse { return v.ServiceAccounts }).(ServiceAccountResponseArrayOutput)
}

// Optional. Shielded VM configuration. [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
func (o GceSetupResponseOutput) ShieldedInstanceConfig() ShieldedInstanceConfigResponseOutput {
	return o.ApplyT(func(v GceSetupResponse) ShieldedInstanceConfigResponse { return v.ShieldedInstanceConfig }).(ShieldedInstanceConfigResponseOutput)
}

// Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
func (o GceSetupResponseOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GceSetupResponse) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Optional. Use a Compute Engine VM image to start the notebook instance.
func (o GceSetupResponseOutput) VmImage() VmImageResponseOutput {
	return o.ApplyT(func(v GceSetupResponse) VmImageResponse { return v.VmImage }).(VmImageResponseOutput)
}

// The definition of a network interface resource attached to a VM.
type NetworkInterface struct {
	// Optional. The name of the VPC that this VM instance is in. Format: `projects/{project_id}/global/networks/{network_id}`
	Network *string `pulumi:"network"`
	// Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
	NicType *NetworkInterfaceNicType `pulumi:"nicType"`
	// Optional. The name of the subnet that this VM instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
	Subnet *string `pulumi:"subnet"`
}

// NetworkInterfaceInput is an input type that accepts NetworkInterfaceArgs and NetworkInterfaceOutput values.
// You can construct a concrete instance of `NetworkInterfaceInput` via:
//
//	NetworkInterfaceArgs{...}
type NetworkInterfaceInput interface {
	pulumi.Input

	ToNetworkInterfaceOutput() NetworkInterfaceOutput
	ToNetworkInterfaceOutputWithContext(context.Context) NetworkInterfaceOutput
}

// The definition of a network interface resource attached to a VM.
type NetworkInterfaceArgs struct {
	// Optional. The name of the VPC that this VM instance is in. Format: `projects/{project_id}/global/networks/{network_id}`
	Network pulumi.StringPtrInput `pulumi:"network"`
	// Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
	NicType NetworkInterfaceNicTypePtrInput `pulumi:"nicType"`
	// Optional. The name of the subnet that this VM instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
}

func (NetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterface)(nil)).Elem()
}

func (i NetworkInterfaceArgs) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return i.ToNetworkInterfaceOutputWithContext(context.Background())
}

func (i NetworkInterfaceArgs) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceOutput)
}

func (i NetworkInterfaceArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkInterface] {
	return pulumix.Output[NetworkInterface]{
		OutputState: i.ToNetworkInterfaceOutputWithContext(ctx).OutputState,
	}
}

// NetworkInterfaceArrayInput is an input type that accepts NetworkInterfaceArray and NetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceArrayInput` via:
//
//	NetworkInterfaceArray{ NetworkInterfaceArgs{...} }
type NetworkInterfaceArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput
	ToNetworkInterfaceArrayOutputWithContext(context.Context) NetworkInterfaceArrayOutput
}

type NetworkInterfaceArray []NetworkInterfaceInput

func (NetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterface)(nil)).Elem()
}

func (i NetworkInterfaceArray) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return i.ToNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceArray) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceArrayOutput)
}

func (i NetworkInterfaceArray) ToOutput(ctx context.Context) pulumix.Output[[]NetworkInterface] {
	return pulumix.Output[[]NetworkInterface]{
		OutputState: i.ToNetworkInterfaceArrayOutputWithContext(ctx).OutputState,
	}
}

// The definition of a network interface resource attached to a VM.
type NetworkInterfaceOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkInterface] {
	return pulumix.Output[NetworkInterface]{
		OutputState: o.OutputState,
	}
}

// Optional. The name of the VPC that this VM instance is in. Format: `projects/{project_id}/global/networks/{network_id}`
func (o NetworkInterfaceOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
func (o NetworkInterfaceOutput) NicType() NetworkInterfaceNicTypePtrOutput {
	return o.ApplyT(func(v NetworkInterface) *NetworkInterfaceNicType { return v.NicType }).(NetworkInterfaceNicTypePtrOutput)
}

// Optional. The name of the subnet that this VM instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
func (o NetworkInterfaceOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

type NetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NetworkInterface] {
	return pulumix.Output[[]NetworkInterface]{
		OutputState: o.OutputState,
	}
}

func (o NetworkInterfaceArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterface {
		return vs[0].([]NetworkInterface)[vs[1].(int)]
	}).(NetworkInterfaceOutput)
}

// The definition of a network interface resource attached to a VM.
type NetworkInterfaceResponse struct {
	// Optional. The name of the VPC that this VM instance is in. Format: `projects/{project_id}/global/networks/{network_id}`
	Network string `pulumi:"network"`
	// Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
	NicType string `pulumi:"nicType"`
	// Optional. The name of the subnet that this VM instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
	Subnet string `pulumi:"subnet"`
}

// The definition of a network interface resource attached to a VM.
type NetworkInterfaceResponseOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceResponse)(nil)).Elem()
}

func (o NetworkInterfaceResponseOutput) ToNetworkInterfaceResponseOutput() NetworkInterfaceResponseOutput {
	return o
}

func (o NetworkInterfaceResponseOutput) ToNetworkInterfaceResponseOutputWithContext(ctx context.Context) NetworkInterfaceResponseOutput {
	return o
}

func (o NetworkInterfaceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkInterfaceResponse] {
	return pulumix.Output[NetworkInterfaceResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. The name of the VPC that this VM instance is in. Format: `projects/{project_id}/global/networks/{network_id}`
func (o NetworkInterfaceResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.Network }).(pulumi.StringOutput)
}

// Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
func (o NetworkInterfaceResponseOutput) NicType() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.NicType }).(pulumi.StringOutput)
}

// Optional. The name of the subnet that this VM instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
func (o NetworkInterfaceResponseOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkInterfaceResponse) string { return v.Subnet }).(pulumi.StringOutput)
}

type NetworkInterfaceResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceResponse)(nil)).Elem()
}

func (o NetworkInterfaceResponseArrayOutput) ToNetworkInterfaceResponseArrayOutput() NetworkInterfaceResponseArrayOutput {
	return o
}

func (o NetworkInterfaceResponseArrayOutput) ToNetworkInterfaceResponseArrayOutputWithContext(ctx context.Context) NetworkInterfaceResponseArrayOutput {
	return o
}

func (o NetworkInterfaceResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NetworkInterfaceResponse] {
	return pulumix.Output[[]NetworkInterfaceResponse]{
		OutputState: o.OutputState,
	}
}

func (o NetworkInterfaceResponseArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterfaceResponse {
		return vs[0].([]NetworkInterfaceResponse)[vs[1].(int)]
	}).(NetworkInterfaceResponseOutput)
}

// A service account that acts as an identity.
type ServiceAccount struct {
	// Optional. Email address of the service account.
	Email *string `pulumi:"email"`
}

// ServiceAccountInput is an input type that accepts ServiceAccountArgs and ServiceAccountOutput values.
// You can construct a concrete instance of `ServiceAccountInput` via:
//
//	ServiceAccountArgs{...}
type ServiceAccountInput interface {
	pulumi.Input

	ToServiceAccountOutput() ServiceAccountOutput
	ToServiceAccountOutputWithContext(context.Context) ServiceAccountOutput
}

// A service account that acts as an identity.
type ServiceAccountArgs struct {
	// Optional. Email address of the service account.
	Email pulumi.StringPtrInput `pulumi:"email"`
}

func (ServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccount)(nil)).Elem()
}

func (i ServiceAccountArgs) ToServiceAccountOutput() ServiceAccountOutput {
	return i.ToServiceAccountOutputWithContext(context.Background())
}

func (i ServiceAccountArgs) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountOutput)
}

func (i ServiceAccountArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceAccount] {
	return pulumix.Output[ServiceAccount]{
		OutputState: i.ToServiceAccountOutputWithContext(ctx).OutputState,
	}
}

// ServiceAccountArrayInput is an input type that accepts ServiceAccountArray and ServiceAccountArrayOutput values.
// You can construct a concrete instance of `ServiceAccountArrayInput` via:
//
//	ServiceAccountArray{ ServiceAccountArgs{...} }
type ServiceAccountArrayInput interface {
	pulumi.Input

	ToServiceAccountArrayOutput() ServiceAccountArrayOutput
	ToServiceAccountArrayOutputWithContext(context.Context) ServiceAccountArrayOutput
}

type ServiceAccountArray []ServiceAccountInput

func (ServiceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccount)(nil)).Elem()
}

func (i ServiceAccountArray) ToServiceAccountArrayOutput() ServiceAccountArrayOutput {
	return i.ToServiceAccountArrayOutputWithContext(context.Background())
}

func (i ServiceAccountArray) ToServiceAccountArrayOutputWithContext(ctx context.Context) ServiceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountArrayOutput)
}

func (i ServiceAccountArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceAccount] {
	return pulumix.Output[[]ServiceAccount]{
		OutputState: i.ToServiceAccountArrayOutputWithContext(ctx).OutputState,
	}
}

// A service account that acts as an identity.
type ServiceAccountOutput struct{ *pulumi.OutputState }

func (ServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountOutput) ToServiceAccountOutput() ServiceAccountOutput {
	return o
}

func (o ServiceAccountOutput) ToServiceAccountOutputWithContext(ctx context.Context) ServiceAccountOutput {
	return o
}

func (o ServiceAccountOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceAccount] {
	return pulumix.Output[ServiceAccount]{
		OutputState: o.OutputState,
	}
}

// Optional. Email address of the service account.
func (o ServiceAccountOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccount) *string { return v.Email }).(pulumi.StringPtrOutput)
}

type ServiceAccountArrayOutput struct{ *pulumi.OutputState }

func (ServiceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccount)(nil)).Elem()
}

func (o ServiceAccountArrayOutput) ToServiceAccountArrayOutput() ServiceAccountArrayOutput {
	return o
}

func (o ServiceAccountArrayOutput) ToServiceAccountArrayOutputWithContext(ctx context.Context) ServiceAccountArrayOutput {
	return o
}

func (o ServiceAccountArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceAccount] {
	return pulumix.Output[[]ServiceAccount]{
		OutputState: o.OutputState,
	}
}

func (o ServiceAccountArrayOutput) Index(i pulumi.IntInput) ServiceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAccount {
		return vs[0].([]ServiceAccount)[vs[1].(int)]
	}).(ServiceAccountOutput)
}

// A service account that acts as an identity.
type ServiceAccountResponse struct {
	// Optional. Email address of the service account.
	Email string `pulumi:"email"`
	// The list of scopes to be made available for this service account. Set by the CLH to https://www.googleapis.com/auth/cloud-platform
	Scopes []string `pulumi:"scopes"`
}

// A service account that acts as an identity.
type ServiceAccountResponseOutput struct{ *pulumi.OutputState }

func (ServiceAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountResponse)(nil)).Elem()
}

func (o ServiceAccountResponseOutput) ToServiceAccountResponseOutput() ServiceAccountResponseOutput {
	return o
}

func (o ServiceAccountResponseOutput) ToServiceAccountResponseOutputWithContext(ctx context.Context) ServiceAccountResponseOutput {
	return o
}

func (o ServiceAccountResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceAccountResponse] {
	return pulumix.Output[ServiceAccountResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Email address of the service account.
func (o ServiceAccountResponseOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAccountResponse) string { return v.Email }).(pulumi.StringOutput)
}

// The list of scopes to be made available for this service account. Set by the CLH to https://www.googleapis.com/auth/cloud-platform
func (o ServiceAccountResponseOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceAccountResponse) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type ServiceAccountResponseArrayOutput struct{ *pulumi.OutputState }

func (ServiceAccountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccountResponse)(nil)).Elem()
}

func (o ServiceAccountResponseArrayOutput) ToServiceAccountResponseArrayOutput() ServiceAccountResponseArrayOutput {
	return o
}

func (o ServiceAccountResponseArrayOutput) ToServiceAccountResponseArrayOutputWithContext(ctx context.Context) ServiceAccountResponseArrayOutput {
	return o
}

func (o ServiceAccountResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceAccountResponse] {
	return pulumix.Output[[]ServiceAccountResponse]{
		OutputState: o.OutputState,
	}
}

func (o ServiceAccountResponseArrayOutput) Index(i pulumi.IntInput) ServiceAccountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAccountResponse {
		return vs[0].([]ServiceAccountResponse)[vs[1].(int)]
	}).(ServiceAccountResponseOutput)
}

// A set of Shielded Instance options. See [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
type ShieldedInstanceConfig struct {
	// Optional. Defines whether the VM instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the VM instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the VM instance is created. Enabled by default.
	EnableIntegrityMonitoring *bool `pulumi:"enableIntegrityMonitoring"`
	// Optional. Defines whether the VM instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
	EnableSecureBoot *bool `pulumi:"enableSecureBoot"`
	// Optional. Defines whether the VM instance has the vTPM enabled. Enabled by default.
	EnableVtpm *bool `pulumi:"enableVtpm"`
}

// ShieldedInstanceConfigInput is an input type that accepts ShieldedInstanceConfigArgs and ShieldedInstanceConfigOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigInput` via:
//
//	ShieldedInstanceConfigArgs{...}
type ShieldedInstanceConfigInput interface {
	pulumi.Input

	ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput
	ToShieldedInstanceConfigOutputWithContext(context.Context) ShieldedInstanceConfigOutput
}

// A set of Shielded Instance options. See [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
type ShieldedInstanceConfigArgs struct {
	// Optional. Defines whether the VM instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the VM instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the VM instance is created. Enabled by default.
	EnableIntegrityMonitoring pulumi.BoolPtrInput `pulumi:"enableIntegrityMonitoring"`
	// Optional. Defines whether the VM instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
	EnableSecureBoot pulumi.BoolPtrInput `pulumi:"enableSecureBoot"`
	// Optional. Defines whether the VM instance has the vTPM enabled. Enabled by default.
	EnableVtpm pulumi.BoolPtrInput `pulumi:"enableVtpm"`
}

func (ShieldedInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return i.ToShieldedInstanceConfigOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput)
}

func (i ShieldedInstanceConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ShieldedInstanceConfig] {
	return pulumix.Output[ShieldedInstanceConfig]{
		OutputState: i.ToShieldedInstanceConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput).ToShieldedInstanceConfigPtrOutputWithContext(ctx)
}

// ShieldedInstanceConfigPtrInput is an input type that accepts ShieldedInstanceConfigArgs, ShieldedInstanceConfigPtr and ShieldedInstanceConfigPtrOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigPtrInput` via:
//
//	        ShieldedInstanceConfigArgs{...}
//
//	or:
//
//	        nil
type ShieldedInstanceConfigPtrInput interface {
	pulumi.Input

	ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput
	ToShieldedInstanceConfigPtrOutputWithContext(context.Context) ShieldedInstanceConfigPtrOutput
}

type shieldedInstanceConfigPtrType ShieldedInstanceConfigArgs

func ShieldedInstanceConfigPtr(v *ShieldedInstanceConfigArgs) ShieldedInstanceConfigPtrInput {
	return (*shieldedInstanceConfigPtrType)(v)
}

func (*shieldedInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigPtrOutput)
}

func (i *shieldedInstanceConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ShieldedInstanceConfig] {
	return pulumix.Output[*ShieldedInstanceConfig]{
		OutputState: i.ToShieldedInstanceConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// A set of Shielded Instance options. See [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
type ShieldedInstanceConfigOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ShieldedInstanceConfig) *ShieldedInstanceConfig {
		return &v
	}).(ShieldedInstanceConfigPtrOutput)
}

func (o ShieldedInstanceConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ShieldedInstanceConfig] {
	return pulumix.Output[ShieldedInstanceConfig]{
		OutputState: o.OutputState,
	}
}

// Optional. Defines whether the VM instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the VM instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the VM instance is created. Enabled by default.
func (o ShieldedInstanceConfigOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolPtrOutput)
}

// Optional. Defines whether the VM instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
func (o ShieldedInstanceConfigOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

// Optional. Defines whether the VM instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableVtpm }).(pulumi.BoolPtrOutput)
}

type ShieldedInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ShieldedInstanceConfig] {
	return pulumix.Output[*ShieldedInstanceConfig]{
		OutputState: o.OutputState,
	}
}

func (o ShieldedInstanceConfigPtrOutput) Elem() ShieldedInstanceConfigOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) ShieldedInstanceConfig {
		if v != nil {
			return *v
		}
		var ret ShieldedInstanceConfig
		return ret
	}).(ShieldedInstanceConfigOutput)
}

// Optional. Defines whether the VM instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the VM instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the VM instance is created. Enabled by default.
func (o ShieldedInstanceConfigPtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Optional. Defines whether the VM instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
func (o ShieldedInstanceConfigPtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// Optional. Defines whether the VM instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigPtrOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVtpm
	}).(pulumi.BoolPtrOutput)
}

// A set of Shielded Instance options. See [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
type ShieldedInstanceConfigResponse struct {
	// Optional. Defines whether the VM instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the VM instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the VM instance is created. Enabled by default.
	EnableIntegrityMonitoring bool `pulumi:"enableIntegrityMonitoring"`
	// Optional. Defines whether the VM instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
	EnableSecureBoot bool `pulumi:"enableSecureBoot"`
	// Optional. Defines whether the VM instance has the vTPM enabled. Enabled by default.
	EnableVtpm bool `pulumi:"enableVtpm"`
}

// A set of Shielded Instance options. See [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
type ShieldedInstanceConfigResponseOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponseOutput() ShieldedInstanceConfigResponseOutput {
	return o
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponseOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponseOutput {
	return o
}

func (o ShieldedInstanceConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ShieldedInstanceConfigResponse] {
	return pulumix.Output[ShieldedInstanceConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Defines whether the VM instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the VM instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the VM instance is created. Enabled by default.
func (o ShieldedInstanceConfigResponseOutput) EnableIntegrityMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolOutput)
}

// Optional. Defines whether the VM instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
func (o ShieldedInstanceConfigResponseOutput) EnableSecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableSecureBoot }).(pulumi.BoolOutput)
}

// Optional. Defines whether the VM instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigResponseOutput) EnableVtpm() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableVtpm }).(pulumi.BoolOutput)
}

// The entry of VM image upgrade history.
type UpgradeHistoryEntryResponse struct {
	// Optional. Action. Rolloback or Upgrade.
	Action string `pulumi:"action"`
	// Optional. The container image before this instance upgrade.
	ContainerImage string `pulumi:"containerImage"`
	// Immutable. The time that this instance upgrade history entry is created.
	CreateTime string `pulumi:"createTime"`
	// Optional. The framework of this notebook instance.
	Framework string `pulumi:"framework"`
	// Optional. The snapshot of the boot disk of this notebook instance before upgrade.
	Snapshot string `pulumi:"snapshot"`
	// The state of this instance upgrade history entry.
	State string `pulumi:"state"`
	// Optional. Target VM Version, like m63.
	TargetVersion string `pulumi:"targetVersion"`
	// Optional. The version of the notebook instance before this upgrade.
	Version string `pulumi:"version"`
	// Optional. The VM image before this instance upgrade.
	VmImage string `pulumi:"vmImage"`
}

// The entry of VM image upgrade history.
type UpgradeHistoryEntryResponseOutput struct{ *pulumi.OutputState }

func (UpgradeHistoryEntryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeHistoryEntryResponse)(nil)).Elem()
}

func (o UpgradeHistoryEntryResponseOutput) ToUpgradeHistoryEntryResponseOutput() UpgradeHistoryEntryResponseOutput {
	return o
}

func (o UpgradeHistoryEntryResponseOutput) ToUpgradeHistoryEntryResponseOutputWithContext(ctx context.Context) UpgradeHistoryEntryResponseOutput {
	return o
}

func (o UpgradeHistoryEntryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UpgradeHistoryEntryResponse] {
	return pulumix.Output[UpgradeHistoryEntryResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Action. Rolloback or Upgrade.
func (o UpgradeHistoryEntryResponseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.Action }).(pulumi.StringOutput)
}

// Optional. The container image before this instance upgrade.
func (o UpgradeHistoryEntryResponseOutput) ContainerImage() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.ContainerImage }).(pulumi.StringOutput)
}

// Immutable. The time that this instance upgrade history entry is created.
func (o UpgradeHistoryEntryResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. The framework of this notebook instance.
func (o UpgradeHistoryEntryResponseOutput) Framework() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.Framework }).(pulumi.StringOutput)
}

// Optional. The snapshot of the boot disk of this notebook instance before upgrade.
func (o UpgradeHistoryEntryResponseOutput) Snapshot() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.Snapshot }).(pulumi.StringOutput)
}

// The state of this instance upgrade history entry.
func (o UpgradeHistoryEntryResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.State }).(pulumi.StringOutput)
}

// Optional. Target VM Version, like m63.
func (o UpgradeHistoryEntryResponseOutput) TargetVersion() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.TargetVersion }).(pulumi.StringOutput)
}

// Optional. The version of the notebook instance before this upgrade.
func (o UpgradeHistoryEntryResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Optional. The VM image before this instance upgrade.
func (o UpgradeHistoryEntryResponseOutput) VmImage() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.VmImage }).(pulumi.StringOutput)
}

type UpgradeHistoryEntryResponseArrayOutput struct{ *pulumi.OutputState }

func (UpgradeHistoryEntryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeHistoryEntryResponse)(nil)).Elem()
}

func (o UpgradeHistoryEntryResponseArrayOutput) ToUpgradeHistoryEntryResponseArrayOutput() UpgradeHistoryEntryResponseArrayOutput {
	return o
}

func (o UpgradeHistoryEntryResponseArrayOutput) ToUpgradeHistoryEntryResponseArrayOutputWithContext(ctx context.Context) UpgradeHistoryEntryResponseArrayOutput {
	return o
}

func (o UpgradeHistoryEntryResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]UpgradeHistoryEntryResponse] {
	return pulumix.Output[[]UpgradeHistoryEntryResponse]{
		OutputState: o.OutputState,
	}
}

func (o UpgradeHistoryEntryResponseArrayOutput) Index(i pulumi.IntInput) UpgradeHistoryEntryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpgradeHistoryEntryResponse {
		return vs[0].([]UpgradeHistoryEntryResponse)[vs[1].(int)]
	}).(UpgradeHistoryEntryResponseOutput)
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImage struct {
	// Optional. Use this VM image family to find the image; the newest image in this family will be used.
	Family *string `pulumi:"family"`
	// Optional. Use VM image name to find the image.
	Name *string `pulumi:"name"`
	// The name of the Google Cloud project that this VM image belongs to. Format: `{project_id}`
	Project string `pulumi:"project"`
}

// VmImageInput is an input type that accepts VmImageArgs and VmImageOutput values.
// You can construct a concrete instance of `VmImageInput` via:
//
//	VmImageArgs{...}
type VmImageInput interface {
	pulumi.Input

	ToVmImageOutput() VmImageOutput
	ToVmImageOutputWithContext(context.Context) VmImageOutput
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImageArgs struct {
	// Optional. Use this VM image family to find the image; the newest image in this family will be used.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// Optional. Use VM image name to find the image.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name of the Google Cloud project that this VM image belongs to. Format: `{project_id}`
	Project pulumi.StringInput `pulumi:"project"`
}

func (VmImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmImage)(nil)).Elem()
}

func (i VmImageArgs) ToVmImageOutput() VmImageOutput {
	return i.ToVmImageOutputWithContext(context.Background())
}

func (i VmImageArgs) ToVmImageOutputWithContext(ctx context.Context) VmImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmImageOutput)
}

func (i VmImageArgs) ToOutput(ctx context.Context) pulumix.Output[VmImage] {
	return pulumix.Output[VmImage]{
		OutputState: i.ToVmImageOutputWithContext(ctx).OutputState,
	}
}

func (i VmImageArgs) ToVmImagePtrOutput() VmImagePtrOutput {
	return i.ToVmImagePtrOutputWithContext(context.Background())
}

func (i VmImageArgs) ToVmImagePtrOutputWithContext(ctx context.Context) VmImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmImageOutput).ToVmImagePtrOutputWithContext(ctx)
}

// VmImagePtrInput is an input type that accepts VmImageArgs, VmImagePtr and VmImagePtrOutput values.
// You can construct a concrete instance of `VmImagePtrInput` via:
//
//	        VmImageArgs{...}
//
//	or:
//
//	        nil
type VmImagePtrInput interface {
	pulumi.Input

	ToVmImagePtrOutput() VmImagePtrOutput
	ToVmImagePtrOutputWithContext(context.Context) VmImagePtrOutput
}

type vmImagePtrType VmImageArgs

func VmImagePtr(v *VmImageArgs) VmImagePtrInput {
	return (*vmImagePtrType)(v)
}

func (*vmImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmImage)(nil)).Elem()
}

func (i *vmImagePtrType) ToVmImagePtrOutput() VmImagePtrOutput {
	return i.ToVmImagePtrOutputWithContext(context.Background())
}

func (i *vmImagePtrType) ToVmImagePtrOutputWithContext(ctx context.Context) VmImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmImagePtrOutput)
}

func (i *vmImagePtrType) ToOutput(ctx context.Context) pulumix.Output[*VmImage] {
	return pulumix.Output[*VmImage]{
		OutputState: i.ToVmImagePtrOutputWithContext(ctx).OutputState,
	}
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImageOutput struct{ *pulumi.OutputState }

func (VmImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmImage)(nil)).Elem()
}

func (o VmImageOutput) ToVmImageOutput() VmImageOutput {
	return o
}

func (o VmImageOutput) ToVmImageOutputWithContext(ctx context.Context) VmImageOutput {
	return o
}

func (o VmImageOutput) ToVmImagePtrOutput() VmImagePtrOutput {
	return o.ToVmImagePtrOutputWithContext(context.Background())
}

func (o VmImageOutput) ToVmImagePtrOutputWithContext(ctx context.Context) VmImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmImage) *VmImage {
		return &v
	}).(VmImagePtrOutput)
}

func (o VmImageOutput) ToOutput(ctx context.Context) pulumix.Output[VmImage] {
	return pulumix.Output[VmImage]{
		OutputState: o.OutputState,
	}
}

// Optional. Use this VM image family to find the image; the newest image in this family will be used.
func (o VmImageOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmImage) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// Optional. Use VM image name to find the image.
func (o VmImageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmImage) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The name of the Google Cloud project that this VM image belongs to. Format: `{project_id}`
func (o VmImageOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v VmImage) string { return v.Project }).(pulumi.StringOutput)
}

type VmImagePtrOutput struct{ *pulumi.OutputState }

func (VmImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmImage)(nil)).Elem()
}

func (o VmImagePtrOutput) ToVmImagePtrOutput() VmImagePtrOutput {
	return o
}

func (o VmImagePtrOutput) ToVmImagePtrOutputWithContext(ctx context.Context) VmImagePtrOutput {
	return o
}

func (o VmImagePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VmImage] {
	return pulumix.Output[*VmImage]{
		OutputState: o.OutputState,
	}
}

func (o VmImagePtrOutput) Elem() VmImageOutput {
	return o.ApplyT(func(v *VmImage) VmImage {
		if v != nil {
			return *v
		}
		var ret VmImage
		return ret
	}).(VmImageOutput)
}

// Optional. Use this VM image family to find the image; the newest image in this family will be used.
func (o VmImagePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmImage) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// Optional. Use VM image name to find the image.
func (o VmImagePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmImage) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The name of the Google Cloud project that this VM image belongs to. Format: `{project_id}`
func (o VmImagePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmImage) *string {
		if v == nil {
			return nil
		}
		return &v.Project
	}).(pulumi.StringPtrOutput)
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImageResponse struct {
	// Optional. Use this VM image family to find the image; the newest image in this family will be used.
	Family string `pulumi:"family"`
	// Optional. Use VM image name to find the image.
	Name string `pulumi:"name"`
	// The name of the Google Cloud project that this VM image belongs to. Format: `{project_id}`
	Project string `pulumi:"project"`
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImageResponseOutput struct{ *pulumi.OutputState }

func (VmImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmImageResponse)(nil)).Elem()
}

func (o VmImageResponseOutput) ToVmImageResponseOutput() VmImageResponseOutput {
	return o
}

func (o VmImageResponseOutput) ToVmImageResponseOutputWithContext(ctx context.Context) VmImageResponseOutput {
	return o
}

func (o VmImageResponseOutput) ToOutput(ctx context.Context) pulumix.Output[VmImageResponse] {
	return pulumix.Output[VmImageResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Use this VM image family to find the image; the newest image in this family will be used.
func (o VmImageResponseOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v VmImageResponse) string { return v.Family }).(pulumi.StringOutput)
}

// Optional. Use VM image name to find the image.
func (o VmImageResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VmImageResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the Google Cloud project that this VM image belongs to. Format: `{project_id}`
func (o VmImageResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v VmImageResponse) string { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AcceleratorConfigInput)(nil)).Elem(), AcceleratorConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcceleratorConfigArrayInput)(nil)).Elem(), AcceleratorConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BootDiskInput)(nil)).Elem(), BootDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BootDiskPtrInput)(nil)).Elem(), BootDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerImageInput)(nil)).Elem(), ContainerImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerImagePtrInput)(nil)).Elem(), ContainerImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataDiskInput)(nil)).Elem(), DataDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataDiskArrayInput)(nil)).Elem(), DataDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GPUDriverConfigInput)(nil)).Elem(), GPUDriverConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GPUDriverConfigPtrInput)(nil)).Elem(), GPUDriverConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GceSetupInput)(nil)).Elem(), GceSetupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GceSetupPtrInput)(nil)).Elem(), GceSetupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceInput)(nil)).Elem(), NetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceArrayInput)(nil)).Elem(), NetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountInput)(nil)).Elem(), ServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountArrayInput)(nil)).Elem(), ServiceAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedInstanceConfigInput)(nil)).Elem(), ShieldedInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedInstanceConfigPtrInput)(nil)).Elem(), ShieldedInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmImageInput)(nil)).Elem(), VmImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmImagePtrInput)(nil)).Elem(), VmImageArgs{})
	pulumi.RegisterOutputType(AcceleratorConfigOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigArrayOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigResponseOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(BootDiskOutput{})
	pulumi.RegisterOutputType(BootDiskPtrOutput{})
	pulumi.RegisterOutputType(BootDiskResponseOutput{})
	pulumi.RegisterOutputType(ContainerImageOutput{})
	pulumi.RegisterOutputType(ContainerImagePtrOutput{})
	pulumi.RegisterOutputType(ContainerImageResponseOutput{})
	pulumi.RegisterOutputType(DataDiskOutput{})
	pulumi.RegisterOutputType(DataDiskArrayOutput{})
	pulumi.RegisterOutputType(DataDiskResponseOutput{})
	pulumi.RegisterOutputType(DataDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GPUDriverConfigOutput{})
	pulumi.RegisterOutputType(GPUDriverConfigPtrOutput{})
	pulumi.RegisterOutputType(GPUDriverConfigResponseOutput{})
	pulumi.RegisterOutputType(GceSetupOutput{})
	pulumi.RegisterOutputType(GceSetupPtrOutput{})
	pulumi.RegisterOutputType(GceSetupResponseOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceResponseOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceAccountOutput{})
	pulumi.RegisterOutputType(ServiceAccountArrayOutput{})
	pulumi.RegisterOutputType(ServiceAccountResponseOutput{})
	pulumi.RegisterOutputType(ServiceAccountResponseArrayOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigResponseOutput{})
	pulumi.RegisterOutputType(UpgradeHistoryEntryResponseOutput{})
	pulumi.RegisterOutputType(UpgradeHistoryEntryResponseArrayOutput{})
	pulumi.RegisterOutputType(VmImageOutput{})
	pulumi.RegisterOutputType(VmImagePtrOutput{})
	pulumi.RegisterOutputType(VmImageResponseOutput{})
}
