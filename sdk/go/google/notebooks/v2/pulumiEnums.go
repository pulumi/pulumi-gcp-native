// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Optional. Type of this accelerator.
type AcceleratorConfigType string

const (
	// Accelerator type is not specified.
	AcceleratorConfigTypeAcceleratorTypeUnspecified = AcceleratorConfigType("ACCELERATOR_TYPE_UNSPECIFIED")
	// Accelerator type is Nvidia Tesla P100.
	AcceleratorConfigTypeNvidiaTeslaP100 = AcceleratorConfigType("NVIDIA_TESLA_P100")
	// Accelerator type is Nvidia Tesla V100.
	AcceleratorConfigTypeNvidiaTeslaV100 = AcceleratorConfigType("NVIDIA_TESLA_V100")
	// Accelerator type is Nvidia Tesla P4.
	AcceleratorConfigTypeNvidiaTeslaP4 = AcceleratorConfigType("NVIDIA_TESLA_P4")
	// Accelerator type is Nvidia Tesla T4.
	AcceleratorConfigTypeNvidiaTeslaT4 = AcceleratorConfigType("NVIDIA_TESLA_T4")
	// Accelerator type is Nvidia Tesla A100 - 40GB.
	AcceleratorConfigTypeNvidiaTeslaA100 = AcceleratorConfigType("NVIDIA_TESLA_A100")
	// Accelerator type is Nvidia Tesla A100 - 80GB.
	AcceleratorConfigTypeNvidiaA10080gb = AcceleratorConfigType("NVIDIA_A100_80GB")
	// Accelerator type is Nvidia Tesla L4.
	AcceleratorConfigTypeNvidiaL4 = AcceleratorConfigType("NVIDIA_L4")
	// Accelerator type is NVIDIA Tesla T4 Virtual Workstations.
	AcceleratorConfigTypeNvidiaTeslaT4Vws = AcceleratorConfigType("NVIDIA_TESLA_T4_VWS")
	// Accelerator type is NVIDIA Tesla P100 Virtual Workstations.
	AcceleratorConfigTypeNvidiaTeslaP100Vws = AcceleratorConfigType("NVIDIA_TESLA_P100_VWS")
	// Accelerator type is NVIDIA Tesla P4 Virtual Workstations.
	AcceleratorConfigTypeNvidiaTeslaP4Vws = AcceleratorConfigType("NVIDIA_TESLA_P4_VWS")
)

func (AcceleratorConfigType) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfigType)(nil)).Elem()
}

func (e AcceleratorConfigType) ToAcceleratorConfigTypeOutput() AcceleratorConfigTypeOutput {
	return pulumi.ToOutput(e).(AcceleratorConfigTypeOutput)
}

func (e AcceleratorConfigType) ToAcceleratorConfigTypeOutputWithContext(ctx context.Context) AcceleratorConfigTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AcceleratorConfigTypeOutput)
}

func (e AcceleratorConfigType) ToAcceleratorConfigTypePtrOutput() AcceleratorConfigTypePtrOutput {
	return e.ToAcceleratorConfigTypePtrOutputWithContext(context.Background())
}

func (e AcceleratorConfigType) ToAcceleratorConfigTypePtrOutputWithContext(ctx context.Context) AcceleratorConfigTypePtrOutput {
	return AcceleratorConfigType(e).ToAcceleratorConfigTypeOutputWithContext(ctx).ToAcceleratorConfigTypePtrOutputWithContext(ctx)
}

func (e AcceleratorConfigType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AcceleratorConfigType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AcceleratorConfigType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AcceleratorConfigType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AcceleratorConfigTypeOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfigType)(nil)).Elem()
}

func (o AcceleratorConfigTypeOutput) ToAcceleratorConfigTypeOutput() AcceleratorConfigTypeOutput {
	return o
}

func (o AcceleratorConfigTypeOutput) ToAcceleratorConfigTypeOutputWithContext(ctx context.Context) AcceleratorConfigTypeOutput {
	return o
}

func (o AcceleratorConfigTypeOutput) ToAcceleratorConfigTypePtrOutput() AcceleratorConfigTypePtrOutput {
	return o.ToAcceleratorConfigTypePtrOutputWithContext(context.Background())
}

func (o AcceleratorConfigTypeOutput) ToAcceleratorConfigTypePtrOutputWithContext(ctx context.Context) AcceleratorConfigTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AcceleratorConfigType) *AcceleratorConfigType {
		return &v
	}).(AcceleratorConfigTypePtrOutput)
}

func (o AcceleratorConfigTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AcceleratorConfigTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AcceleratorConfigType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AcceleratorConfigTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AcceleratorConfigTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AcceleratorConfigType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AcceleratorConfigTypePtrOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AcceleratorConfigType)(nil)).Elem()
}

func (o AcceleratorConfigTypePtrOutput) ToAcceleratorConfigTypePtrOutput() AcceleratorConfigTypePtrOutput {
	return o
}

func (o AcceleratorConfigTypePtrOutput) ToAcceleratorConfigTypePtrOutputWithContext(ctx context.Context) AcceleratorConfigTypePtrOutput {
	return o
}

func (o AcceleratorConfigTypePtrOutput) Elem() AcceleratorConfigTypeOutput {
	return o.ApplyT(func(v *AcceleratorConfigType) AcceleratorConfigType {
		if v != nil {
			return *v
		}
		var ret AcceleratorConfigType
		return ret
	}).(AcceleratorConfigTypeOutput)
}

func (o AcceleratorConfigTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AcceleratorConfigTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AcceleratorConfigType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AcceleratorConfigTypeInput is an input type that accepts AcceleratorConfigTypeArgs and AcceleratorConfigTypeOutput values.
// You can construct a concrete instance of `AcceleratorConfigTypeInput` via:
//
//	AcceleratorConfigTypeArgs{...}
type AcceleratorConfigTypeInput interface {
	pulumi.Input

	ToAcceleratorConfigTypeOutput() AcceleratorConfigTypeOutput
	ToAcceleratorConfigTypeOutputWithContext(context.Context) AcceleratorConfigTypeOutput
}

var acceleratorConfigTypePtrType = reflect.TypeOf((**AcceleratorConfigType)(nil)).Elem()

type AcceleratorConfigTypePtrInput interface {
	pulumi.Input

	ToAcceleratorConfigTypePtrOutput() AcceleratorConfigTypePtrOutput
	ToAcceleratorConfigTypePtrOutputWithContext(context.Context) AcceleratorConfigTypePtrOutput
}

type acceleratorConfigTypePtr string

func AcceleratorConfigTypePtr(v string) AcceleratorConfigTypePtrInput {
	return (*acceleratorConfigTypePtr)(&v)
}

func (*acceleratorConfigTypePtr) ElementType() reflect.Type {
	return acceleratorConfigTypePtrType
}

func (in *acceleratorConfigTypePtr) ToAcceleratorConfigTypePtrOutput() AcceleratorConfigTypePtrOutput {
	return pulumi.ToOutput(in).(AcceleratorConfigTypePtrOutput)
}

func (in *acceleratorConfigTypePtr) ToAcceleratorConfigTypePtrOutputWithContext(ctx context.Context) AcceleratorConfigTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AcceleratorConfigTypePtrOutput)
}

func (in *acceleratorConfigTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AcceleratorConfigType] {
	return pulumix.Output[*AcceleratorConfigType]{
		OutputState: in.ToAcceleratorConfigTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
type BootDiskDiskEncryption string

const (
	// Disk encryption is not specified.
	BootDiskDiskEncryptionDiskEncryptionUnspecified = BootDiskDiskEncryption("DISK_ENCRYPTION_UNSPECIFIED")
	// Use Google managed encryption keys to encrypt the boot disk.
	BootDiskDiskEncryptionGmek = BootDiskDiskEncryption("GMEK")
	// Use customer managed encryption keys to encrypt the boot disk.
	BootDiskDiskEncryptionCmek = BootDiskDiskEncryption("CMEK")
)

func (BootDiskDiskEncryption) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiskDiskEncryption)(nil)).Elem()
}

func (e BootDiskDiskEncryption) ToBootDiskDiskEncryptionOutput() BootDiskDiskEncryptionOutput {
	return pulumi.ToOutput(e).(BootDiskDiskEncryptionOutput)
}

func (e BootDiskDiskEncryption) ToBootDiskDiskEncryptionOutputWithContext(ctx context.Context) BootDiskDiskEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BootDiskDiskEncryptionOutput)
}

func (e BootDiskDiskEncryption) ToBootDiskDiskEncryptionPtrOutput() BootDiskDiskEncryptionPtrOutput {
	return e.ToBootDiskDiskEncryptionPtrOutputWithContext(context.Background())
}

func (e BootDiskDiskEncryption) ToBootDiskDiskEncryptionPtrOutputWithContext(ctx context.Context) BootDiskDiskEncryptionPtrOutput {
	return BootDiskDiskEncryption(e).ToBootDiskDiskEncryptionOutputWithContext(ctx).ToBootDiskDiskEncryptionPtrOutputWithContext(ctx)
}

func (e BootDiskDiskEncryption) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BootDiskDiskEncryption) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BootDiskDiskEncryption) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BootDiskDiskEncryption) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BootDiskDiskEncryptionOutput struct{ *pulumi.OutputState }

func (BootDiskDiskEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiskDiskEncryption)(nil)).Elem()
}

func (o BootDiskDiskEncryptionOutput) ToBootDiskDiskEncryptionOutput() BootDiskDiskEncryptionOutput {
	return o
}

func (o BootDiskDiskEncryptionOutput) ToBootDiskDiskEncryptionOutputWithContext(ctx context.Context) BootDiskDiskEncryptionOutput {
	return o
}

func (o BootDiskDiskEncryptionOutput) ToBootDiskDiskEncryptionPtrOutput() BootDiskDiskEncryptionPtrOutput {
	return o.ToBootDiskDiskEncryptionPtrOutputWithContext(context.Background())
}

func (o BootDiskDiskEncryptionOutput) ToBootDiskDiskEncryptionPtrOutputWithContext(ctx context.Context) BootDiskDiskEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BootDiskDiskEncryption) *BootDiskDiskEncryption {
		return &v
	}).(BootDiskDiskEncryptionPtrOutput)
}

func (o BootDiskDiskEncryptionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BootDiskDiskEncryptionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BootDiskDiskEncryption) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BootDiskDiskEncryptionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BootDiskDiskEncryptionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BootDiskDiskEncryption) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BootDiskDiskEncryptionPtrOutput struct{ *pulumi.OutputState }

func (BootDiskDiskEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BootDiskDiskEncryption)(nil)).Elem()
}

func (o BootDiskDiskEncryptionPtrOutput) ToBootDiskDiskEncryptionPtrOutput() BootDiskDiskEncryptionPtrOutput {
	return o
}

func (o BootDiskDiskEncryptionPtrOutput) ToBootDiskDiskEncryptionPtrOutputWithContext(ctx context.Context) BootDiskDiskEncryptionPtrOutput {
	return o
}

func (o BootDiskDiskEncryptionPtrOutput) Elem() BootDiskDiskEncryptionOutput {
	return o.ApplyT(func(v *BootDiskDiskEncryption) BootDiskDiskEncryption {
		if v != nil {
			return *v
		}
		var ret BootDiskDiskEncryption
		return ret
	}).(BootDiskDiskEncryptionOutput)
}

func (o BootDiskDiskEncryptionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BootDiskDiskEncryptionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BootDiskDiskEncryption) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BootDiskDiskEncryptionInput is an input type that accepts BootDiskDiskEncryptionArgs and BootDiskDiskEncryptionOutput values.
// You can construct a concrete instance of `BootDiskDiskEncryptionInput` via:
//
//	BootDiskDiskEncryptionArgs{...}
type BootDiskDiskEncryptionInput interface {
	pulumi.Input

	ToBootDiskDiskEncryptionOutput() BootDiskDiskEncryptionOutput
	ToBootDiskDiskEncryptionOutputWithContext(context.Context) BootDiskDiskEncryptionOutput
}

var bootDiskDiskEncryptionPtrType = reflect.TypeOf((**BootDiskDiskEncryption)(nil)).Elem()

type BootDiskDiskEncryptionPtrInput interface {
	pulumi.Input

	ToBootDiskDiskEncryptionPtrOutput() BootDiskDiskEncryptionPtrOutput
	ToBootDiskDiskEncryptionPtrOutputWithContext(context.Context) BootDiskDiskEncryptionPtrOutput
}

type bootDiskDiskEncryptionPtr string

func BootDiskDiskEncryptionPtr(v string) BootDiskDiskEncryptionPtrInput {
	return (*bootDiskDiskEncryptionPtr)(&v)
}

func (*bootDiskDiskEncryptionPtr) ElementType() reflect.Type {
	return bootDiskDiskEncryptionPtrType
}

func (in *bootDiskDiskEncryptionPtr) ToBootDiskDiskEncryptionPtrOutput() BootDiskDiskEncryptionPtrOutput {
	return pulumi.ToOutput(in).(BootDiskDiskEncryptionPtrOutput)
}

func (in *bootDiskDiskEncryptionPtr) ToBootDiskDiskEncryptionPtrOutputWithContext(ctx context.Context) BootDiskDiskEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BootDiskDiskEncryptionPtrOutput)
}

func (in *bootDiskDiskEncryptionPtr) ToOutput(ctx context.Context) pulumix.Output[*BootDiskDiskEncryption] {
	return pulumix.Output[*BootDiskDiskEncryption]{
		OutputState: in.ToBootDiskDiskEncryptionPtrOutputWithContext(ctx).OutputState,
	}
}

// Optional. Indicates the type of the disk.
type BootDiskDiskType string

const (
	// Disk type not set.
	BootDiskDiskTypeDiskTypeUnspecified = BootDiskDiskType("DISK_TYPE_UNSPECIFIED")
	// Standard persistent disk type.
	BootDiskDiskTypePdStandard = BootDiskDiskType("PD_STANDARD")
	// SSD persistent disk type.
	BootDiskDiskTypePdSsd = BootDiskDiskType("PD_SSD")
	// Balanced persistent disk type.
	BootDiskDiskTypePdBalanced = BootDiskDiskType("PD_BALANCED")
	// Extreme persistent disk type.
	BootDiskDiskTypePdExtreme = BootDiskDiskType("PD_EXTREME")
)

func (BootDiskDiskType) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiskDiskType)(nil)).Elem()
}

func (e BootDiskDiskType) ToBootDiskDiskTypeOutput() BootDiskDiskTypeOutput {
	return pulumi.ToOutput(e).(BootDiskDiskTypeOutput)
}

func (e BootDiskDiskType) ToBootDiskDiskTypeOutputWithContext(ctx context.Context) BootDiskDiskTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BootDiskDiskTypeOutput)
}

func (e BootDiskDiskType) ToBootDiskDiskTypePtrOutput() BootDiskDiskTypePtrOutput {
	return e.ToBootDiskDiskTypePtrOutputWithContext(context.Background())
}

func (e BootDiskDiskType) ToBootDiskDiskTypePtrOutputWithContext(ctx context.Context) BootDiskDiskTypePtrOutput {
	return BootDiskDiskType(e).ToBootDiskDiskTypeOutputWithContext(ctx).ToBootDiskDiskTypePtrOutputWithContext(ctx)
}

func (e BootDiskDiskType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BootDiskDiskType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BootDiskDiskType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BootDiskDiskType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BootDiskDiskTypeOutput struct{ *pulumi.OutputState }

func (BootDiskDiskTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootDiskDiskType)(nil)).Elem()
}

func (o BootDiskDiskTypeOutput) ToBootDiskDiskTypeOutput() BootDiskDiskTypeOutput {
	return o
}

func (o BootDiskDiskTypeOutput) ToBootDiskDiskTypeOutputWithContext(ctx context.Context) BootDiskDiskTypeOutput {
	return o
}

func (o BootDiskDiskTypeOutput) ToBootDiskDiskTypePtrOutput() BootDiskDiskTypePtrOutput {
	return o.ToBootDiskDiskTypePtrOutputWithContext(context.Background())
}

func (o BootDiskDiskTypeOutput) ToBootDiskDiskTypePtrOutputWithContext(ctx context.Context) BootDiskDiskTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BootDiskDiskType) *BootDiskDiskType {
		return &v
	}).(BootDiskDiskTypePtrOutput)
}

func (o BootDiskDiskTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BootDiskDiskTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BootDiskDiskType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BootDiskDiskTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BootDiskDiskTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BootDiskDiskType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BootDiskDiskTypePtrOutput struct{ *pulumi.OutputState }

func (BootDiskDiskTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BootDiskDiskType)(nil)).Elem()
}

func (o BootDiskDiskTypePtrOutput) ToBootDiskDiskTypePtrOutput() BootDiskDiskTypePtrOutput {
	return o
}

func (o BootDiskDiskTypePtrOutput) ToBootDiskDiskTypePtrOutputWithContext(ctx context.Context) BootDiskDiskTypePtrOutput {
	return o
}

func (o BootDiskDiskTypePtrOutput) Elem() BootDiskDiskTypeOutput {
	return o.ApplyT(func(v *BootDiskDiskType) BootDiskDiskType {
		if v != nil {
			return *v
		}
		var ret BootDiskDiskType
		return ret
	}).(BootDiskDiskTypeOutput)
}

func (o BootDiskDiskTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BootDiskDiskTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BootDiskDiskType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BootDiskDiskTypeInput is an input type that accepts BootDiskDiskTypeArgs and BootDiskDiskTypeOutput values.
// You can construct a concrete instance of `BootDiskDiskTypeInput` via:
//
//	BootDiskDiskTypeArgs{...}
type BootDiskDiskTypeInput interface {
	pulumi.Input

	ToBootDiskDiskTypeOutput() BootDiskDiskTypeOutput
	ToBootDiskDiskTypeOutputWithContext(context.Context) BootDiskDiskTypeOutput
}

var bootDiskDiskTypePtrType = reflect.TypeOf((**BootDiskDiskType)(nil)).Elem()

type BootDiskDiskTypePtrInput interface {
	pulumi.Input

	ToBootDiskDiskTypePtrOutput() BootDiskDiskTypePtrOutput
	ToBootDiskDiskTypePtrOutputWithContext(context.Context) BootDiskDiskTypePtrOutput
}

type bootDiskDiskTypePtr string

func BootDiskDiskTypePtr(v string) BootDiskDiskTypePtrInput {
	return (*bootDiskDiskTypePtr)(&v)
}

func (*bootDiskDiskTypePtr) ElementType() reflect.Type {
	return bootDiskDiskTypePtrType
}

func (in *bootDiskDiskTypePtr) ToBootDiskDiskTypePtrOutput() BootDiskDiskTypePtrOutput {
	return pulumi.ToOutput(in).(BootDiskDiskTypePtrOutput)
}

func (in *bootDiskDiskTypePtr) ToBootDiskDiskTypePtrOutputWithContext(ctx context.Context) BootDiskDiskTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BootDiskDiskTypePtrOutput)
}

func (in *bootDiskDiskTypePtr) ToOutput(ctx context.Context) pulumix.Output[*BootDiskDiskType] {
	return pulumix.Output[*BootDiskDiskType]{
		OutputState: in.ToBootDiskDiskTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.
type DataDiskDiskEncryption string

const (
	// Disk encryption is not specified.
	DataDiskDiskEncryptionDiskEncryptionUnspecified = DataDiskDiskEncryption("DISK_ENCRYPTION_UNSPECIFIED")
	// Use Google managed encryption keys to encrypt the boot disk.
	DataDiskDiskEncryptionGmek = DataDiskDiskEncryption("GMEK")
	// Use customer managed encryption keys to encrypt the boot disk.
	DataDiskDiskEncryptionCmek = DataDiskDiskEncryption("CMEK")
)

func (DataDiskDiskEncryption) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDiskDiskEncryption)(nil)).Elem()
}

func (e DataDiskDiskEncryption) ToDataDiskDiskEncryptionOutput() DataDiskDiskEncryptionOutput {
	return pulumi.ToOutput(e).(DataDiskDiskEncryptionOutput)
}

func (e DataDiskDiskEncryption) ToDataDiskDiskEncryptionOutputWithContext(ctx context.Context) DataDiskDiskEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DataDiskDiskEncryptionOutput)
}

func (e DataDiskDiskEncryption) ToDataDiskDiskEncryptionPtrOutput() DataDiskDiskEncryptionPtrOutput {
	return e.ToDataDiskDiskEncryptionPtrOutputWithContext(context.Background())
}

func (e DataDiskDiskEncryption) ToDataDiskDiskEncryptionPtrOutputWithContext(ctx context.Context) DataDiskDiskEncryptionPtrOutput {
	return DataDiskDiskEncryption(e).ToDataDiskDiskEncryptionOutputWithContext(ctx).ToDataDiskDiskEncryptionPtrOutputWithContext(ctx)
}

func (e DataDiskDiskEncryption) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataDiskDiskEncryption) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataDiskDiskEncryption) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DataDiskDiskEncryption) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DataDiskDiskEncryptionOutput struct{ *pulumi.OutputState }

func (DataDiskDiskEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDiskDiskEncryption)(nil)).Elem()
}

func (o DataDiskDiskEncryptionOutput) ToDataDiskDiskEncryptionOutput() DataDiskDiskEncryptionOutput {
	return o
}

func (o DataDiskDiskEncryptionOutput) ToDataDiskDiskEncryptionOutputWithContext(ctx context.Context) DataDiskDiskEncryptionOutput {
	return o
}

func (o DataDiskDiskEncryptionOutput) ToDataDiskDiskEncryptionPtrOutput() DataDiskDiskEncryptionPtrOutput {
	return o.ToDataDiskDiskEncryptionPtrOutputWithContext(context.Background())
}

func (o DataDiskDiskEncryptionOutput) ToDataDiskDiskEncryptionPtrOutputWithContext(ctx context.Context) DataDiskDiskEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataDiskDiskEncryption) *DataDiskDiskEncryption {
		return &v
	}).(DataDiskDiskEncryptionPtrOutput)
}

func (o DataDiskDiskEncryptionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DataDiskDiskEncryptionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataDiskDiskEncryption) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DataDiskDiskEncryptionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataDiskDiskEncryptionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataDiskDiskEncryption) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DataDiskDiskEncryptionPtrOutput struct{ *pulumi.OutputState }

func (DataDiskDiskEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataDiskDiskEncryption)(nil)).Elem()
}

func (o DataDiskDiskEncryptionPtrOutput) ToDataDiskDiskEncryptionPtrOutput() DataDiskDiskEncryptionPtrOutput {
	return o
}

func (o DataDiskDiskEncryptionPtrOutput) ToDataDiskDiskEncryptionPtrOutputWithContext(ctx context.Context) DataDiskDiskEncryptionPtrOutput {
	return o
}

func (o DataDiskDiskEncryptionPtrOutput) Elem() DataDiskDiskEncryptionOutput {
	return o.ApplyT(func(v *DataDiskDiskEncryption) DataDiskDiskEncryption {
		if v != nil {
			return *v
		}
		var ret DataDiskDiskEncryption
		return ret
	}).(DataDiskDiskEncryptionOutput)
}

func (o DataDiskDiskEncryptionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataDiskDiskEncryptionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DataDiskDiskEncryption) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DataDiskDiskEncryptionInput is an input type that accepts DataDiskDiskEncryptionArgs and DataDiskDiskEncryptionOutput values.
// You can construct a concrete instance of `DataDiskDiskEncryptionInput` via:
//
//	DataDiskDiskEncryptionArgs{...}
type DataDiskDiskEncryptionInput interface {
	pulumi.Input

	ToDataDiskDiskEncryptionOutput() DataDiskDiskEncryptionOutput
	ToDataDiskDiskEncryptionOutputWithContext(context.Context) DataDiskDiskEncryptionOutput
}

var dataDiskDiskEncryptionPtrType = reflect.TypeOf((**DataDiskDiskEncryption)(nil)).Elem()

type DataDiskDiskEncryptionPtrInput interface {
	pulumi.Input

	ToDataDiskDiskEncryptionPtrOutput() DataDiskDiskEncryptionPtrOutput
	ToDataDiskDiskEncryptionPtrOutputWithContext(context.Context) DataDiskDiskEncryptionPtrOutput
}

type dataDiskDiskEncryptionPtr string

func DataDiskDiskEncryptionPtr(v string) DataDiskDiskEncryptionPtrInput {
	return (*dataDiskDiskEncryptionPtr)(&v)
}

func (*dataDiskDiskEncryptionPtr) ElementType() reflect.Type {
	return dataDiskDiskEncryptionPtrType
}

func (in *dataDiskDiskEncryptionPtr) ToDataDiskDiskEncryptionPtrOutput() DataDiskDiskEncryptionPtrOutput {
	return pulumi.ToOutput(in).(DataDiskDiskEncryptionPtrOutput)
}

func (in *dataDiskDiskEncryptionPtr) ToDataDiskDiskEncryptionPtrOutputWithContext(ctx context.Context) DataDiskDiskEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DataDiskDiskEncryptionPtrOutput)
}

func (in *dataDiskDiskEncryptionPtr) ToOutput(ctx context.Context) pulumix.Output[*DataDiskDiskEncryption] {
	return pulumix.Output[*DataDiskDiskEncryption]{
		OutputState: in.ToDataDiskDiskEncryptionPtrOutputWithContext(ctx).OutputState,
	}
}

// Optional. Input only. Indicates the type of the disk.
type DataDiskDiskType string

const (
	// Disk type not set.
	DataDiskDiskTypeDiskTypeUnspecified = DataDiskDiskType("DISK_TYPE_UNSPECIFIED")
	// Standard persistent disk type.
	DataDiskDiskTypePdStandard = DataDiskDiskType("PD_STANDARD")
	// SSD persistent disk type.
	DataDiskDiskTypePdSsd = DataDiskDiskType("PD_SSD")
	// Balanced persistent disk type.
	DataDiskDiskTypePdBalanced = DataDiskDiskType("PD_BALANCED")
	// Extreme persistent disk type.
	DataDiskDiskTypePdExtreme = DataDiskDiskType("PD_EXTREME")
)

func (DataDiskDiskType) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDiskDiskType)(nil)).Elem()
}

func (e DataDiskDiskType) ToDataDiskDiskTypeOutput() DataDiskDiskTypeOutput {
	return pulumi.ToOutput(e).(DataDiskDiskTypeOutput)
}

func (e DataDiskDiskType) ToDataDiskDiskTypeOutputWithContext(ctx context.Context) DataDiskDiskTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DataDiskDiskTypeOutput)
}

func (e DataDiskDiskType) ToDataDiskDiskTypePtrOutput() DataDiskDiskTypePtrOutput {
	return e.ToDataDiskDiskTypePtrOutputWithContext(context.Background())
}

func (e DataDiskDiskType) ToDataDiskDiskTypePtrOutputWithContext(ctx context.Context) DataDiskDiskTypePtrOutput {
	return DataDiskDiskType(e).ToDataDiskDiskTypeOutputWithContext(ctx).ToDataDiskDiskTypePtrOutputWithContext(ctx)
}

func (e DataDiskDiskType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataDiskDiskType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataDiskDiskType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DataDiskDiskType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DataDiskDiskTypeOutput struct{ *pulumi.OutputState }

func (DataDiskDiskTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDiskDiskType)(nil)).Elem()
}

func (o DataDiskDiskTypeOutput) ToDataDiskDiskTypeOutput() DataDiskDiskTypeOutput {
	return o
}

func (o DataDiskDiskTypeOutput) ToDataDiskDiskTypeOutputWithContext(ctx context.Context) DataDiskDiskTypeOutput {
	return o
}

func (o DataDiskDiskTypeOutput) ToDataDiskDiskTypePtrOutput() DataDiskDiskTypePtrOutput {
	return o.ToDataDiskDiskTypePtrOutputWithContext(context.Background())
}

func (o DataDiskDiskTypeOutput) ToDataDiskDiskTypePtrOutputWithContext(ctx context.Context) DataDiskDiskTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataDiskDiskType) *DataDiskDiskType {
		return &v
	}).(DataDiskDiskTypePtrOutput)
}

func (o DataDiskDiskTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DataDiskDiskTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataDiskDiskType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DataDiskDiskTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataDiskDiskTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataDiskDiskType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DataDiskDiskTypePtrOutput struct{ *pulumi.OutputState }

func (DataDiskDiskTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataDiskDiskType)(nil)).Elem()
}

func (o DataDiskDiskTypePtrOutput) ToDataDiskDiskTypePtrOutput() DataDiskDiskTypePtrOutput {
	return o
}

func (o DataDiskDiskTypePtrOutput) ToDataDiskDiskTypePtrOutputWithContext(ctx context.Context) DataDiskDiskTypePtrOutput {
	return o
}

func (o DataDiskDiskTypePtrOutput) Elem() DataDiskDiskTypeOutput {
	return o.ApplyT(func(v *DataDiskDiskType) DataDiskDiskType {
		if v != nil {
			return *v
		}
		var ret DataDiskDiskType
		return ret
	}).(DataDiskDiskTypeOutput)
}

func (o DataDiskDiskTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataDiskDiskTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DataDiskDiskType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DataDiskDiskTypeInput is an input type that accepts DataDiskDiskTypeArgs and DataDiskDiskTypeOutput values.
// You can construct a concrete instance of `DataDiskDiskTypeInput` via:
//
//	DataDiskDiskTypeArgs{...}
type DataDiskDiskTypeInput interface {
	pulumi.Input

	ToDataDiskDiskTypeOutput() DataDiskDiskTypeOutput
	ToDataDiskDiskTypeOutputWithContext(context.Context) DataDiskDiskTypeOutput
}

var dataDiskDiskTypePtrType = reflect.TypeOf((**DataDiskDiskType)(nil)).Elem()

type DataDiskDiskTypePtrInput interface {
	pulumi.Input

	ToDataDiskDiskTypePtrOutput() DataDiskDiskTypePtrOutput
	ToDataDiskDiskTypePtrOutputWithContext(context.Context) DataDiskDiskTypePtrOutput
}

type dataDiskDiskTypePtr string

func DataDiskDiskTypePtr(v string) DataDiskDiskTypePtrInput {
	return (*dataDiskDiskTypePtr)(&v)
}

func (*dataDiskDiskTypePtr) ElementType() reflect.Type {
	return dataDiskDiskTypePtrType
}

func (in *dataDiskDiskTypePtr) ToDataDiskDiskTypePtrOutput() DataDiskDiskTypePtrOutput {
	return pulumi.ToOutput(in).(DataDiskDiskTypePtrOutput)
}

func (in *dataDiskDiskTypePtr) ToDataDiskDiskTypePtrOutputWithContext(ctx context.Context) DataDiskDiskTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DataDiskDiskTypePtrOutput)
}

func (in *dataDiskDiskTypePtr) ToOutput(ctx context.Context) pulumix.Output[*DataDiskDiskType] {
	return pulumix.Output[*DataDiskDiskType]{
		OutputState: in.ToDataDiskDiskTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
type NetworkInterfaceNicType string

const (
	// No type specified.
	NetworkInterfaceNicTypeNicTypeUnspecified = NetworkInterfaceNicType("NIC_TYPE_UNSPECIFIED")
	// VIRTIO
	NetworkInterfaceNicTypeVirtioNet = NetworkInterfaceNicType("VIRTIO_NET")
	// GVNIC
	NetworkInterfaceNicTypeGvnic = NetworkInterfaceNicType("GVNIC")
)

func (NetworkInterfaceNicType) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceNicType)(nil)).Elem()
}

func (e NetworkInterfaceNicType) ToNetworkInterfaceNicTypeOutput() NetworkInterfaceNicTypeOutput {
	return pulumi.ToOutput(e).(NetworkInterfaceNicTypeOutput)
}

func (e NetworkInterfaceNicType) ToNetworkInterfaceNicTypeOutputWithContext(ctx context.Context) NetworkInterfaceNicTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NetworkInterfaceNicTypeOutput)
}

func (e NetworkInterfaceNicType) ToNetworkInterfaceNicTypePtrOutput() NetworkInterfaceNicTypePtrOutput {
	return e.ToNetworkInterfaceNicTypePtrOutputWithContext(context.Background())
}

func (e NetworkInterfaceNicType) ToNetworkInterfaceNicTypePtrOutputWithContext(ctx context.Context) NetworkInterfaceNicTypePtrOutput {
	return NetworkInterfaceNicType(e).ToNetworkInterfaceNicTypeOutputWithContext(ctx).ToNetworkInterfaceNicTypePtrOutputWithContext(ctx)
}

func (e NetworkInterfaceNicType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkInterfaceNicType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkInterfaceNicType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NetworkInterfaceNicType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NetworkInterfaceNicTypeOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceNicTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceNicType)(nil)).Elem()
}

func (o NetworkInterfaceNicTypeOutput) ToNetworkInterfaceNicTypeOutput() NetworkInterfaceNicTypeOutput {
	return o
}

func (o NetworkInterfaceNicTypeOutput) ToNetworkInterfaceNicTypeOutputWithContext(ctx context.Context) NetworkInterfaceNicTypeOutput {
	return o
}

func (o NetworkInterfaceNicTypeOutput) ToNetworkInterfaceNicTypePtrOutput() NetworkInterfaceNicTypePtrOutput {
	return o.ToNetworkInterfaceNicTypePtrOutputWithContext(context.Background())
}

func (o NetworkInterfaceNicTypeOutput) ToNetworkInterfaceNicTypePtrOutputWithContext(ctx context.Context) NetworkInterfaceNicTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkInterfaceNicType) *NetworkInterfaceNicType {
		return &v
	}).(NetworkInterfaceNicTypePtrOutput)
}

func (o NetworkInterfaceNicTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NetworkInterfaceNicTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NetworkInterfaceNicType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NetworkInterfaceNicTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NetworkInterfaceNicTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NetworkInterfaceNicType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NetworkInterfaceNicTypePtrOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceNicTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInterfaceNicType)(nil)).Elem()
}

func (o NetworkInterfaceNicTypePtrOutput) ToNetworkInterfaceNicTypePtrOutput() NetworkInterfaceNicTypePtrOutput {
	return o
}

func (o NetworkInterfaceNicTypePtrOutput) ToNetworkInterfaceNicTypePtrOutputWithContext(ctx context.Context) NetworkInterfaceNicTypePtrOutput {
	return o
}

func (o NetworkInterfaceNicTypePtrOutput) Elem() NetworkInterfaceNicTypeOutput {
	return o.ApplyT(func(v *NetworkInterfaceNicType) NetworkInterfaceNicType {
		if v != nil {
			return *v
		}
		var ret NetworkInterfaceNicType
		return ret
	}).(NetworkInterfaceNicTypeOutput)
}

func (o NetworkInterfaceNicTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NetworkInterfaceNicTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NetworkInterfaceNicType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NetworkInterfaceNicTypeInput is an input type that accepts NetworkInterfaceNicTypeArgs and NetworkInterfaceNicTypeOutput values.
// You can construct a concrete instance of `NetworkInterfaceNicTypeInput` via:
//
//	NetworkInterfaceNicTypeArgs{...}
type NetworkInterfaceNicTypeInput interface {
	pulumi.Input

	ToNetworkInterfaceNicTypeOutput() NetworkInterfaceNicTypeOutput
	ToNetworkInterfaceNicTypeOutputWithContext(context.Context) NetworkInterfaceNicTypeOutput
}

var networkInterfaceNicTypePtrType = reflect.TypeOf((**NetworkInterfaceNicType)(nil)).Elem()

type NetworkInterfaceNicTypePtrInput interface {
	pulumi.Input

	ToNetworkInterfaceNicTypePtrOutput() NetworkInterfaceNicTypePtrOutput
	ToNetworkInterfaceNicTypePtrOutputWithContext(context.Context) NetworkInterfaceNicTypePtrOutput
}

type networkInterfaceNicTypePtr string

func NetworkInterfaceNicTypePtr(v string) NetworkInterfaceNicTypePtrInput {
	return (*networkInterfaceNicTypePtr)(&v)
}

func (*networkInterfaceNicTypePtr) ElementType() reflect.Type {
	return networkInterfaceNicTypePtrType
}

func (in *networkInterfaceNicTypePtr) ToNetworkInterfaceNicTypePtrOutput() NetworkInterfaceNicTypePtrOutput {
	return pulumi.ToOutput(in).(NetworkInterfaceNicTypePtrOutput)
}

func (in *networkInterfaceNicTypePtr) ToNetworkInterfaceNicTypePtrOutputWithContext(ctx context.Context) NetworkInterfaceNicTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NetworkInterfaceNicTypePtrOutput)
}

func (in *networkInterfaceNicTypePtr) ToOutput(ctx context.Context) pulumix.Output[*NetworkInterfaceNicType] {
	return pulumix.Output[*NetworkInterfaceNicType]{
		OutputState: in.ToNetworkInterfaceNicTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AcceleratorConfigTypeInput)(nil)).Elem(), AcceleratorConfigType("ACCELERATOR_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AcceleratorConfigTypePtrInput)(nil)).Elem(), AcceleratorConfigType("ACCELERATOR_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*BootDiskDiskEncryptionInput)(nil)).Elem(), BootDiskDiskEncryption("DISK_ENCRYPTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*BootDiskDiskEncryptionPtrInput)(nil)).Elem(), BootDiskDiskEncryption("DISK_ENCRYPTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*BootDiskDiskTypeInput)(nil)).Elem(), BootDiskDiskType("DISK_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*BootDiskDiskTypePtrInput)(nil)).Elem(), BootDiskDiskType("DISK_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DataDiskDiskEncryptionInput)(nil)).Elem(), DataDiskDiskEncryption("DISK_ENCRYPTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DataDiskDiskEncryptionPtrInput)(nil)).Elem(), DataDiskDiskEncryption("DISK_ENCRYPTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DataDiskDiskTypeInput)(nil)).Elem(), DataDiskDiskType("DISK_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*DataDiskDiskTypePtrInput)(nil)).Elem(), DataDiskDiskType("DISK_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceNicTypeInput)(nil)).Elem(), NetworkInterfaceNicType("NIC_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceNicTypePtrInput)(nil)).Elem(), NetworkInterfaceNicType("NIC_TYPE_UNSPECIFIED"))
	pulumi.RegisterOutputType(AcceleratorConfigTypeOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigTypePtrOutput{})
	pulumi.RegisterOutputType(BootDiskDiskEncryptionOutput{})
	pulumi.RegisterOutputType(BootDiskDiskEncryptionPtrOutput{})
	pulumi.RegisterOutputType(BootDiskDiskTypeOutput{})
	pulumi.RegisterOutputType(BootDiskDiskTypePtrOutput{})
	pulumi.RegisterOutputType(DataDiskDiskEncryptionOutput{})
	pulumi.RegisterOutputType(DataDiskDiskEncryptionPtrOutput{})
	pulumi.RegisterOutputType(DataDiskDiskTypeOutput{})
	pulumi.RegisterOutputType(DataDiskDiskTypePtrOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceNicTypeOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceNicTypePtrOutput{})
}
