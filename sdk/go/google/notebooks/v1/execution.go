// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new Scheduled Notebook in a given project and location.
type Execution struct {
	pulumi.CustomResourceState

	// Time the Execution was instantiated.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A brief description of this execution.
	Description pulumi.StringOutput `pulumi:"description"`
	// Name used for UI purposes. Name can only contain alphanumeric characters and underscores '_'.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// execute metadata including name, hardware spec, region, labels, etc.
	ExecutionTemplate ExecutionTemplateResponseOutput `pulumi:"executionTemplate"`
	// The resource name of the execute. Format: `projects/{project_id}/locations/{location}/execution/{execution_id}
	Name pulumi.StringOutput `pulumi:"name"`
	// Output notebook file generated by this execution
	OutputNotebookFile pulumi.StringOutput `pulumi:"outputNotebookFile"`
	// State of the underlying AI Platform job.
	State pulumi.StringOutput `pulumi:"state"`
	// Time the Execution was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewExecution registers a new resource with the given unique name, arguments, and options.
func NewExecution(ctx *pulumi.Context,
	name string, args *ExecutionArgs, opts ...pulumi.ResourceOption) (*Execution, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExecutionsId == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionsId'")
	}
	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource Execution
	err := ctx.RegisterResource("google-cloud:notebooks/v1:Execution", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExecution gets an existing Execution resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExecution(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExecutionState, opts ...pulumi.ResourceOption) (*Execution, error) {
	var resource Execution
	err := ctx.ReadResource("google-cloud:notebooks/v1:Execution", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Execution resources.
type executionState struct {
	// Time the Execution was instantiated.
	CreateTime *string `pulumi:"createTime"`
	// A brief description of this execution.
	Description *string `pulumi:"description"`
	// Name used for UI purposes. Name can only contain alphanumeric characters and underscores '_'.
	DisplayName *string `pulumi:"displayName"`
	// execute metadata including name, hardware spec, region, labels, etc.
	ExecutionTemplate *ExecutionTemplateResponse `pulumi:"executionTemplate"`
	// The resource name of the execute. Format: `projects/{project_id}/locations/{location}/execution/{execution_id}
	Name *string `pulumi:"name"`
	// Output notebook file generated by this execution
	OutputNotebookFile *string `pulumi:"outputNotebookFile"`
	// State of the underlying AI Platform job.
	State *string `pulumi:"state"`
	// Time the Execution was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

type ExecutionState struct {
	// Time the Execution was instantiated.
	CreateTime pulumi.StringPtrInput
	// A brief description of this execution.
	Description pulumi.StringPtrInput
	// Name used for UI purposes. Name can only contain alphanumeric characters and underscores '_'.
	DisplayName pulumi.StringPtrInput
	// execute metadata including name, hardware spec, region, labels, etc.
	ExecutionTemplate ExecutionTemplateResponsePtrInput
	// The resource name of the execute. Format: `projects/{project_id}/locations/{location}/execution/{execution_id}
	Name pulumi.StringPtrInput
	// Output notebook file generated by this execution
	OutputNotebookFile pulumi.StringPtrInput
	// State of the underlying AI Platform job.
	State pulumi.StringPtrInput
	// Time the Execution was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (ExecutionState) ElementType() reflect.Type {
	return reflect.TypeOf((*executionState)(nil)).Elem()
}

type executionArgs struct {
	// A brief description of this execution.
	Description *string `pulumi:"description"`
	// execute metadata including name, hardware spec, region, labels, etc.
	ExecutionTemplate *ExecutionTemplate `pulumi:"executionTemplate"`
	ExecutionsId      string             `pulumi:"executionsId"`
	LocationsId       string             `pulumi:"locationsId"`
	// Output notebook file generated by this execution
	OutputNotebookFile *string `pulumi:"outputNotebookFile"`
	ProjectsId         string  `pulumi:"projectsId"`
}

// The set of arguments for constructing a Execution resource.
type ExecutionArgs struct {
	// A brief description of this execution.
	Description pulumi.StringPtrInput
	// execute metadata including name, hardware spec, region, labels, etc.
	ExecutionTemplate ExecutionTemplatePtrInput
	ExecutionsId      pulumi.StringInput
	LocationsId       pulumi.StringInput
	// Output notebook file generated by this execution
	OutputNotebookFile pulumi.StringPtrInput
	ProjectsId         pulumi.StringInput
}

func (ExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*executionArgs)(nil)).Elem()
}

type ExecutionInput interface {
	pulumi.Input

	ToExecutionOutput() ExecutionOutput
	ToExecutionOutputWithContext(ctx context.Context) ExecutionOutput
}

func (*Execution) ElementType() reflect.Type {
	return reflect.TypeOf((*Execution)(nil))
}

func (i *Execution) ToExecutionOutput() ExecutionOutput {
	return i.ToExecutionOutputWithContext(context.Background())
}

func (i *Execution) ToExecutionOutputWithContext(ctx context.Context) ExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionOutput)
}

type ExecutionOutput struct {
	*pulumi.OutputState
}

func (ExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Execution)(nil))
}

func (o ExecutionOutput) ToExecutionOutput() ExecutionOutput {
	return o
}

func (o ExecutionOutput) ToExecutionOutputWithContext(ctx context.Context) ExecutionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ExecutionOutput{})
}
