// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new Execution in a given project and location.
// Auto-naming is currently not supported for this resource.
type Execution struct {
	pulumi.CustomResourceState

	// Time the Execution was instantiated.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A brief description of this execution.
	Description pulumi.StringOutput `pulumi:"description"`
	// Name used for UI purposes. Name can only contain alphanumeric characters and underscores '_'.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Required. User-defined unique ID of this execution.
	ExecutionId pulumi.StringOutput `pulumi:"executionId"`
	// execute metadata including name, hardware spec, region, labels, etc.
	ExecutionTemplate ExecutionTemplateResponseOutput `pulumi:"executionTemplate"`
	// The URI of the external job used to execute the notebook.
	JobUri   pulumi.StringOutput `pulumi:"jobUri"`
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name of the execute. Format: `projects/{project_id}/locations/{location}/executions/{execution_id}`
	Name pulumi.StringOutput `pulumi:"name"`
	// Output notebook file generated by this execution
	OutputNotebookFile pulumi.StringOutput `pulumi:"outputNotebookFile"`
	Project            pulumi.StringOutput `pulumi:"project"`
	// State of the underlying AI Platform job.
	State pulumi.StringOutput `pulumi:"state"`
	// Time the Execution was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewExecution registers a new resource with the given unique name, arguments, and options.
func NewExecution(ctx *pulumi.Context,
	name string, args *ExecutionArgs, opts ...pulumi.ResourceOption) (*Execution, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExecutionId == nil {
		return nil, errors.New("invalid value for required argument 'ExecutionId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"executionId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Execution
	err := ctx.RegisterResource("google-native:notebooks/v1:Execution", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExecution gets an existing Execution resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExecution(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExecutionState, opts ...pulumi.ResourceOption) (*Execution, error) {
	var resource Execution
	err := ctx.ReadResource("google-native:notebooks/v1:Execution", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Execution resources.
type executionState struct {
}

type ExecutionState struct {
}

func (ExecutionState) ElementType() reflect.Type {
	return reflect.TypeOf((*executionState)(nil)).Elem()
}

type executionArgs struct {
	// A brief description of this execution.
	Description *string `pulumi:"description"`
	// Required. User-defined unique ID of this execution.
	ExecutionId string `pulumi:"executionId"`
	// execute metadata including name, hardware spec, region, labels, etc.
	ExecutionTemplate *ExecutionTemplate `pulumi:"executionTemplate"`
	Location          *string            `pulumi:"location"`
	// Output notebook file generated by this execution
	OutputNotebookFile *string `pulumi:"outputNotebookFile"`
	Project            *string `pulumi:"project"`
}

// The set of arguments for constructing a Execution resource.
type ExecutionArgs struct {
	// A brief description of this execution.
	Description pulumi.StringPtrInput
	// Required. User-defined unique ID of this execution.
	ExecutionId pulumi.StringInput
	// execute metadata including name, hardware spec, region, labels, etc.
	ExecutionTemplate ExecutionTemplatePtrInput
	Location          pulumi.StringPtrInput
	// Output notebook file generated by this execution
	OutputNotebookFile pulumi.StringPtrInput
	Project            pulumi.StringPtrInput
}

func (ExecutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*executionArgs)(nil)).Elem()
}

type ExecutionInput interface {
	pulumi.Input

	ToExecutionOutput() ExecutionOutput
	ToExecutionOutputWithContext(ctx context.Context) ExecutionOutput
}

func (*Execution) ElementType() reflect.Type {
	return reflect.TypeOf((**Execution)(nil)).Elem()
}

func (i *Execution) ToExecutionOutput() ExecutionOutput {
	return i.ToExecutionOutputWithContext(context.Background())
}

func (i *Execution) ToExecutionOutputWithContext(ctx context.Context) ExecutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionOutput)
}

func (i *Execution) ToOutput(ctx context.Context) pulumix.Output[*Execution] {
	return pulumix.Output[*Execution]{
		OutputState: i.ToExecutionOutputWithContext(ctx).OutputState,
	}
}

type ExecutionOutput struct{ *pulumi.OutputState }

func (ExecutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Execution)(nil)).Elem()
}

func (o ExecutionOutput) ToExecutionOutput() ExecutionOutput {
	return o
}

func (o ExecutionOutput) ToExecutionOutputWithContext(ctx context.Context) ExecutionOutput {
	return o
}

func (o ExecutionOutput) ToOutput(ctx context.Context) pulumix.Output[*Execution] {
	return pulumix.Output[*Execution]{
		OutputState: o.OutputState,
	}
}

// Time the Execution was instantiated.
func (o ExecutionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A brief description of this execution.
func (o ExecutionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Name used for UI purposes. Name can only contain alphanumeric characters and underscores '_'.
func (o ExecutionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Required. User-defined unique ID of this execution.
func (o ExecutionOutput) ExecutionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringOutput { return v.ExecutionId }).(pulumi.StringOutput)
}

// execute metadata including name, hardware spec, region, labels, etc.
func (o ExecutionOutput) ExecutionTemplate() ExecutionTemplateResponseOutput {
	return o.ApplyT(func(v *Execution) ExecutionTemplateResponseOutput { return v.ExecutionTemplate }).(ExecutionTemplateResponseOutput)
}

// The URI of the external job used to execute the notebook.
func (o ExecutionOutput) JobUri() pulumi.StringOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringOutput { return v.JobUri }).(pulumi.StringOutput)
}

func (o ExecutionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name of the execute. Format: `projects/{project_id}/locations/{location}/executions/{execution_id}`
func (o ExecutionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Output notebook file generated by this execution
func (o ExecutionOutput) OutputNotebookFile() pulumi.StringOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringOutput { return v.OutputNotebookFile }).(pulumi.StringOutput)
}

func (o ExecutionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// State of the underlying AI Platform job.
func (o ExecutionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Time the Execution was last updated.
func (o ExecutionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Execution) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionInput)(nil)).Elem(), &Execution{})
	pulumi.RegisterOutputType(ExecutionOutput{})
}
