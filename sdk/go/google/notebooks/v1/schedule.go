// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new Scheduled Notebook in a given project and location.
type Schedule struct {
	pulumi.CustomResourceState
}

// NewSchedule registers a new resource with the given unique name, arguments, and options.
func NewSchedule(ctx *pulumi.Context,
	name string, args *ScheduleArgs, opts ...pulumi.ResourceOption) (*Schedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.SchedulesId == nil {
		return nil, errors.New("invalid value for required argument 'SchedulesId'")
	}
	var resource Schedule
	err := ctx.RegisterResource("google-cloud:notebooks/v1:Schedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchedule gets an existing Schedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleState, opts ...pulumi.ResourceOption) (*Schedule, error) {
	var resource Schedule
	err := ctx.ReadResource("google-cloud:notebooks/v1:Schedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schedule resources.
type scheduleState struct {
}

type ScheduleState struct {
}

func (ScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleState)(nil)).Elem()
}

type scheduleArgs struct {
	// Output only. Time the schedule was created.
	CreateTime *string `pulumi:"createTime"`
	// Cron-tab formatted schedule by which the job will execute Format: minute, hour, day of month, month, day of week e.g. 0 0 * * WED = every Wednesday More examples: https://crontab.guru/examples.html
	CronSchedule *string `pulumi:"cronSchedule"`
	// A brief description of this environment.
	Description *string `pulumi:"description"`
	// Output only. Display name used for UI purposes. Name can only contain alphanumeric characters, hyphens ‘-’, and underscores ‘_’.
	DisplayName *string `pulumi:"displayName"`
	// Notebook Execution Template corresponding to this schedule.
	ExecutionTemplate *ExecutionTemplate `pulumi:"executionTemplate"`
	LocationsId       string             `pulumi:"locationsId"`
	// Output only. The name of this schedule. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
	Name       *string `pulumi:"name"`
	ProjectsId string  `pulumi:"projectsId"`
	// Output only. The most recent execution names triggered from this schedule and their corresponding states.
	RecentExecutions []ExecutionType `pulumi:"recentExecutions"`
	SchedulesId      string          `pulumi:"schedulesId"`
	State            *string         `pulumi:"state"`
	// Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
	TimeZone *string `pulumi:"timeZone"`
	// Output only. Time the schedule was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

// The set of arguments for constructing a Schedule resource.
type ScheduleArgs struct {
	// Output only. Time the schedule was created.
	CreateTime pulumi.StringPtrInput
	// Cron-tab formatted schedule by which the job will execute Format: minute, hour, day of month, month, day of week e.g. 0 0 * * WED = every Wednesday More examples: https://crontab.guru/examples.html
	CronSchedule pulumi.StringPtrInput
	// A brief description of this environment.
	Description pulumi.StringPtrInput
	// Output only. Display name used for UI purposes. Name can only contain alphanumeric characters, hyphens ‘-’, and underscores ‘_’.
	DisplayName pulumi.StringPtrInput
	// Notebook Execution Template corresponding to this schedule.
	ExecutionTemplate ExecutionTemplatePtrInput
	LocationsId       pulumi.StringInput
	// Output only. The name of this schedule. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
	Name       pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	// Output only. The most recent execution names triggered from this schedule and their corresponding states.
	RecentExecutions ExecutionTypeArrayInput
	SchedulesId      pulumi.StringInput
	State            pulumi.StringPtrInput
	// Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
	TimeZone pulumi.StringPtrInput
	// Output only. Time the schedule was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleArgs)(nil)).Elem()
}

type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput
}

func (*Schedule) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil))
}

func (i *Schedule) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i *Schedule) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

type ScheduleOutput struct {
	*pulumi.OutputState
}

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil))
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ScheduleOutput{})
}
