// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new Scheduled Notebook in a given project and location.
// Auto-naming is currently not supported for this resource.
type Schedule struct {
	pulumi.CustomResourceState

	// Time the schedule was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. `0 0 * * WED` = every Wednesday More examples: https://crontab.guru/examples.html
	CronSchedule pulumi.StringOutput `pulumi:"cronSchedule"`
	// A brief description of this environment.
	Description pulumi.StringOutput `pulumi:"description"`
	// Display name used for UI purposes. Name can only contain alphanumeric characters, hyphens `-`, and underscores `_`.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Notebook Execution Template corresponding to this schedule.
	ExecutionTemplate ExecutionTemplateResponseOutput `pulumi:"executionTemplate"`
	Location          pulumi.StringOutput             `pulumi:"location"`
	// The name of this schedule. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The most recent execution names triggered from this schedule and their corresponding states.
	RecentExecutions ExecutionResponseArrayOutput `pulumi:"recentExecutions"`
	// Required. User-defined unique ID of this schedule.
	ScheduleId pulumi.StringOutput `pulumi:"scheduleId"`
	State      pulumi.StringOutput `pulumi:"state"`
	// Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
	TimeZone pulumi.StringOutput `pulumi:"timeZone"`
	// Time the schedule was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewSchedule registers a new resource with the given unique name, arguments, and options.
func NewSchedule(ctx *pulumi.Context,
	name string, args *ScheduleArgs, opts ...pulumi.ResourceOption) (*Schedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScheduleId == nil {
		return nil, errors.New("invalid value for required argument 'ScheduleId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"scheduleId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Schedule
	err := ctx.RegisterResource("google-native:notebooks/v1:Schedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchedule gets an existing Schedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleState, opts ...pulumi.ResourceOption) (*Schedule, error) {
	var resource Schedule
	err := ctx.ReadResource("google-native:notebooks/v1:Schedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schedule resources.
type scheduleState struct {
}

type ScheduleState struct {
}

func (ScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleState)(nil)).Elem()
}

type scheduleArgs struct {
	// Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. `0 0 * * WED` = every Wednesday More examples: https://crontab.guru/examples.html
	CronSchedule *string `pulumi:"cronSchedule"`
	// A brief description of this environment.
	Description *string `pulumi:"description"`
	// Notebook Execution Template corresponding to this schedule.
	ExecutionTemplate *ExecutionTemplate `pulumi:"executionTemplate"`
	Location          *string            `pulumi:"location"`
	Project           *string            `pulumi:"project"`
	// Required. User-defined unique ID of this schedule.
	ScheduleId string             `pulumi:"scheduleId"`
	State      *ScheduleStateEnum `pulumi:"state"`
	// Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
	TimeZone *string `pulumi:"timeZone"`
}

// The set of arguments for constructing a Schedule resource.
type ScheduleArgs struct {
	// Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. `0 0 * * WED` = every Wednesday More examples: https://crontab.guru/examples.html
	CronSchedule pulumi.StringPtrInput
	// A brief description of this environment.
	Description pulumi.StringPtrInput
	// Notebook Execution Template corresponding to this schedule.
	ExecutionTemplate ExecutionTemplatePtrInput
	Location          pulumi.StringPtrInput
	Project           pulumi.StringPtrInput
	// Required. User-defined unique ID of this schedule.
	ScheduleId pulumi.StringInput
	State      ScheduleStateEnumPtrInput
	// Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
	TimeZone pulumi.StringPtrInput
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleArgs)(nil)).Elem()
}

type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput
}

func (*Schedule) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (i *Schedule) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i *Schedule) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

// Time the schedule was created.
func (o ScheduleOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. `0 0 * * WED` = every Wednesday More examples: https://crontab.guru/examples.html
func (o ScheduleOutput) CronSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.CronSchedule }).(pulumi.StringOutput)
}

// A brief description of this environment.
func (o ScheduleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Display name used for UI purposes. Name can only contain alphanumeric characters, hyphens `-`, and underscores `_`.
func (o ScheduleOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Notebook Execution Template corresponding to this schedule.
func (o ScheduleOutput) ExecutionTemplate() ExecutionTemplateResponseOutput {
	return o.ApplyT(func(v *Schedule) ExecutionTemplateResponseOutput { return v.ExecutionTemplate }).(ExecutionTemplateResponseOutput)
}

func (o ScheduleOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of this schedule. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
func (o ScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ScheduleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The most recent execution names triggered from this schedule and their corresponding states.
func (o ScheduleOutput) RecentExecutions() ExecutionResponseArrayOutput {
	return o.ApplyT(func(v *Schedule) ExecutionResponseArrayOutput { return v.RecentExecutions }).(ExecutionResponseArrayOutput)
}

// Required. User-defined unique ID of this schedule.
func (o ScheduleOutput) ScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.ScheduleId }).(pulumi.StringOutput)
}

func (o ScheduleOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
func (o ScheduleOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

// Time the schedule was last updated.
func (o ScheduleOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Schedule) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleInput)(nil)).Elem(), &Schedule{})
	pulumi.RegisterOutputType(ScheduleOutput{})
}
