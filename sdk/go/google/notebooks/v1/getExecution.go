// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of executions
func LookupExecution(ctx *pulumi.Context, args *LookupExecutionArgs, opts ...pulumi.InvokeOption) (*LookupExecutionResult, error) {
	var rv LookupExecutionResult
	err := ctx.Invoke("google-native:notebooks/v1:getExecution", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupExecutionArgs struct {
	ExecutionId string  `pulumi:"executionId"`
	Location    string  `pulumi:"location"`
	Project     *string `pulumi:"project"`
}

type LookupExecutionResult struct {
	// Time the Execution was instantiated.
	CreateTime string `pulumi:"createTime"`
	// A brief description of this execution.
	Description string `pulumi:"description"`
	// Name used for UI purposes. Name can only contain alphanumeric characters and underscores '_'.
	DisplayName string `pulumi:"displayName"`
	// execute metadata including name, hardware spec, region, labels, etc.
	ExecutionTemplate ExecutionTemplateResponse `pulumi:"executionTemplate"`
	// The URI of the external job used to execute the notebook.
	JobUri string `pulumi:"jobUri"`
	// The resource name of the execute. Format: `projects/{project_id}/locations/{location}/executions/{execution_id}`
	Name string `pulumi:"name"`
	// Output notebook file generated by this execution
	OutputNotebookFile string `pulumi:"outputNotebookFile"`
	// State of the underlying AI Platform job.
	State string `pulumi:"state"`
	// Time the Execution was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupExecutionOutput(ctx *pulumi.Context, args LookupExecutionOutputArgs, opts ...pulumi.InvokeOption) LookupExecutionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupExecutionResult, error) {
			args := v.(LookupExecutionArgs)
			r, err := LookupExecution(ctx, &args, opts...)
			var s LookupExecutionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupExecutionResultOutput)
}

type LookupExecutionOutputArgs struct {
	ExecutionId pulumi.StringInput    `pulumi:"executionId"`
	Location    pulumi.StringInput    `pulumi:"location"`
	Project     pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupExecutionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupExecutionArgs)(nil)).Elem()
}

type LookupExecutionResultOutput struct{ *pulumi.OutputState }

func (LookupExecutionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupExecutionResult)(nil)).Elem()
}

func (o LookupExecutionResultOutput) ToLookupExecutionResultOutput() LookupExecutionResultOutput {
	return o
}

func (o LookupExecutionResultOutput) ToLookupExecutionResultOutputWithContext(ctx context.Context) LookupExecutionResultOutput {
	return o
}

// Time the Execution was instantiated.
func (o LookupExecutionResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// A brief description of this execution.
func (o LookupExecutionResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.Description }).(pulumi.StringOutput)
}

// Name used for UI purposes. Name can only contain alphanumeric characters and underscores '_'.
func (o LookupExecutionResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// execute metadata including name, hardware spec, region, labels, etc.
func (o LookupExecutionResultOutput) ExecutionTemplate() ExecutionTemplateResponseOutput {
	return o.ApplyT(func(v LookupExecutionResult) ExecutionTemplateResponse { return v.ExecutionTemplate }).(ExecutionTemplateResponseOutput)
}

// The URI of the external job used to execute the notebook.
func (o LookupExecutionResultOutput) JobUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.JobUri }).(pulumi.StringOutput)
}

// The resource name of the execute. Format: `projects/{project_id}/locations/{location}/executions/{execution_id}`
func (o LookupExecutionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.Name }).(pulumi.StringOutput)
}

// Output notebook file generated by this execution
func (o LookupExecutionResultOutput) OutputNotebookFile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.OutputNotebookFile }).(pulumi.StringOutput)
}

// State of the underlying AI Platform job.
func (o LookupExecutionResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.State }).(pulumi.StringOutput)
}

// Time the Execution was last updated.
func (o LookupExecutionResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupExecutionResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupExecutionResultOutput{})
}
