// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
type AcceleratorConfig struct {
	// Count of cores of this accelerator.
	CoreCount *string `pulumi:"coreCount"`
	// Type of this accelerator.
	Type *AcceleratorConfigType `pulumi:"type"`
}

// AcceleratorConfigInput is an input type that accepts AcceleratorConfigArgs and AcceleratorConfigOutput values.
// You can construct a concrete instance of `AcceleratorConfigInput` via:
//
//	AcceleratorConfigArgs{...}
type AcceleratorConfigInput interface {
	pulumi.Input

	ToAcceleratorConfigOutput() AcceleratorConfigOutput
	ToAcceleratorConfigOutputWithContext(context.Context) AcceleratorConfigOutput
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
type AcceleratorConfigArgs struct {
	// Count of cores of this accelerator.
	CoreCount pulumi.StringPtrInput `pulumi:"coreCount"`
	// Type of this accelerator.
	Type AcceleratorConfigTypePtrInput `pulumi:"type"`
}

func (AcceleratorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return i.ToAcceleratorConfigOutputWithContext(context.Background())
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigOutput)
}

func (i AcceleratorConfigArgs) ToOutput(ctx context.Context) pulumix.Output[AcceleratorConfig] {
	return pulumix.Output[AcceleratorConfig]{
		OutputState: i.ToAcceleratorConfigOutputWithContext(ctx).OutputState,
	}
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput {
	return i.ToAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (i AcceleratorConfigArgs) ToAcceleratorConfigPtrOutputWithContext(ctx context.Context) AcceleratorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigOutput).ToAcceleratorConfigPtrOutputWithContext(ctx)
}

// AcceleratorConfigPtrInput is an input type that accepts AcceleratorConfigArgs, AcceleratorConfigPtr and AcceleratorConfigPtrOutput values.
// You can construct a concrete instance of `AcceleratorConfigPtrInput` via:
//
//	        AcceleratorConfigArgs{...}
//
//	or:
//
//	        nil
type AcceleratorConfigPtrInput interface {
	pulumi.Input

	ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput
	ToAcceleratorConfigPtrOutputWithContext(context.Context) AcceleratorConfigPtrOutput
}

type acceleratorConfigPtrType AcceleratorConfigArgs

func AcceleratorConfigPtr(v *AcceleratorConfigArgs) AcceleratorConfigPtrInput {
	return (*acceleratorConfigPtrType)(v)
}

func (*acceleratorConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AcceleratorConfig)(nil)).Elem()
}

func (i *acceleratorConfigPtrType) ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput {
	return i.ToAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (i *acceleratorConfigPtrType) ToAcceleratorConfigPtrOutputWithContext(ctx context.Context) AcceleratorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcceleratorConfigPtrOutput)
}

func (i *acceleratorConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*AcceleratorConfig] {
	return pulumix.Output[*AcceleratorConfig]{
		OutputState: i.ToAcceleratorConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
type AcceleratorConfigOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutput() AcceleratorConfigOutput {
	return o
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigOutputWithContext(ctx context.Context) AcceleratorConfigOutput {
	return o
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput {
	return o.ToAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (o AcceleratorConfigOutput) ToAcceleratorConfigPtrOutputWithContext(ctx context.Context) AcceleratorConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AcceleratorConfig) *AcceleratorConfig {
		return &v
	}).(AcceleratorConfigPtrOutput)
}

func (o AcceleratorConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AcceleratorConfig] {
	return pulumix.Output[AcceleratorConfig]{
		OutputState: o.OutputState,
	}
}

// Count of cores of this accelerator.
func (o AcceleratorConfigOutput) CoreCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *string { return v.CoreCount }).(pulumi.StringPtrOutput)
}

// Type of this accelerator.
func (o AcceleratorConfigOutput) Type() AcceleratorConfigTypePtrOutput {
	return o.ApplyT(func(v AcceleratorConfig) *AcceleratorConfigType { return v.Type }).(AcceleratorConfigTypePtrOutput)
}

type AcceleratorConfigPtrOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AcceleratorConfig)(nil)).Elem()
}

func (o AcceleratorConfigPtrOutput) ToAcceleratorConfigPtrOutput() AcceleratorConfigPtrOutput {
	return o
}

func (o AcceleratorConfigPtrOutput) ToAcceleratorConfigPtrOutputWithContext(ctx context.Context) AcceleratorConfigPtrOutput {
	return o
}

func (o AcceleratorConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AcceleratorConfig] {
	return pulumix.Output[*AcceleratorConfig]{
		OutputState: o.OutputState,
	}
}

func (o AcceleratorConfigPtrOutput) Elem() AcceleratorConfigOutput {
	return o.ApplyT(func(v *AcceleratorConfig) AcceleratorConfig {
		if v != nil {
			return *v
		}
		var ret AcceleratorConfig
		return ret
	}).(AcceleratorConfigOutput)
}

// Count of cores of this accelerator.
func (o AcceleratorConfigPtrOutput) CoreCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcceleratorConfig) *string {
		if v == nil {
			return nil
		}
		return v.CoreCount
	}).(pulumi.StringPtrOutput)
}

// Type of this accelerator.
func (o AcceleratorConfigPtrOutput) Type() AcceleratorConfigTypePtrOutput {
	return o.ApplyT(func(v *AcceleratorConfig) *AcceleratorConfigType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(AcceleratorConfigTypePtrOutput)
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
type AcceleratorConfigResponse struct {
	// Count of cores of this accelerator.
	CoreCount string `pulumi:"coreCount"`
	// Type of this accelerator.
	Type string `pulumi:"type"`
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.
type AcceleratorConfigResponseOutput struct{ *pulumi.OutputState }

func (AcceleratorConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcceleratorConfigResponse)(nil)).Elem()
}

func (o AcceleratorConfigResponseOutput) ToAcceleratorConfigResponseOutput() AcceleratorConfigResponseOutput {
	return o
}

func (o AcceleratorConfigResponseOutput) ToAcceleratorConfigResponseOutputWithContext(ctx context.Context) AcceleratorConfigResponseOutput {
	return o
}

func (o AcceleratorConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AcceleratorConfigResponse] {
	return pulumix.Output[AcceleratorConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Count of cores of this accelerator.
func (o AcceleratorConfigResponseOutput) CoreCount() pulumi.StringOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) string { return v.CoreCount }).(pulumi.StringOutput)
}

// Type of this accelerator.
func (o AcceleratorConfigResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AcceleratorConfigResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

func (i BindingArgs) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: i.ToBindingOutputWithContext(ctx).OutputState,
	}
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

func (i BindingArray) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: i.ToBindingArrayOutputWithContext(ctx).OutputState,
	}
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

func (o BindingOutput) ToOutput(ctx context.Context) pulumix.Output[Binding] {
	return pulumix.Output[Binding]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Binding] {
	return pulumix.Output[[]Binding]{
		OutputState: o.OutputState,
	}
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BindingResponse] {
	return pulumix.Output[BindingResponse]{
		OutputState: o.OutputState,
	}
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BindingResponse] {
	return pulumix.Output[[]BindingResponse]{
		OutputState: o.OutputState,
	}
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Definition of the boot image used by the Runtime. Used to facilitate runtime upgradeability.
type BootImage struct {
}

// BootImageInput is an input type that accepts BootImageArgs and BootImageOutput values.
// You can construct a concrete instance of `BootImageInput` via:
//
//	BootImageArgs{...}
type BootImageInput interface {
	pulumi.Input

	ToBootImageOutput() BootImageOutput
	ToBootImageOutputWithContext(context.Context) BootImageOutput
}

// Definition of the boot image used by the Runtime. Used to facilitate runtime upgradeability.
type BootImageArgs struct {
}

func (BootImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BootImage)(nil)).Elem()
}

func (i BootImageArgs) ToBootImageOutput() BootImageOutput {
	return i.ToBootImageOutputWithContext(context.Background())
}

func (i BootImageArgs) ToBootImageOutputWithContext(ctx context.Context) BootImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootImageOutput)
}

func (i BootImageArgs) ToOutput(ctx context.Context) pulumix.Output[BootImage] {
	return pulumix.Output[BootImage]{
		OutputState: i.ToBootImageOutputWithContext(ctx).OutputState,
	}
}

func (i BootImageArgs) ToBootImagePtrOutput() BootImagePtrOutput {
	return i.ToBootImagePtrOutputWithContext(context.Background())
}

func (i BootImageArgs) ToBootImagePtrOutputWithContext(ctx context.Context) BootImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootImageOutput).ToBootImagePtrOutputWithContext(ctx)
}

// BootImagePtrInput is an input type that accepts BootImageArgs, BootImagePtr and BootImagePtrOutput values.
// You can construct a concrete instance of `BootImagePtrInput` via:
//
//	        BootImageArgs{...}
//
//	or:
//
//	        nil
type BootImagePtrInput interface {
	pulumi.Input

	ToBootImagePtrOutput() BootImagePtrOutput
	ToBootImagePtrOutputWithContext(context.Context) BootImagePtrOutput
}

type bootImagePtrType BootImageArgs

func BootImagePtr(v *BootImageArgs) BootImagePtrInput {
	return (*bootImagePtrType)(v)
}

func (*bootImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BootImage)(nil)).Elem()
}

func (i *bootImagePtrType) ToBootImagePtrOutput() BootImagePtrOutput {
	return i.ToBootImagePtrOutputWithContext(context.Background())
}

func (i *bootImagePtrType) ToBootImagePtrOutputWithContext(ctx context.Context) BootImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BootImagePtrOutput)
}

func (i *bootImagePtrType) ToOutput(ctx context.Context) pulumix.Output[*BootImage] {
	return pulumix.Output[*BootImage]{
		OutputState: i.ToBootImagePtrOutputWithContext(ctx).OutputState,
	}
}

// Definition of the boot image used by the Runtime. Used to facilitate runtime upgradeability.
type BootImageOutput struct{ *pulumi.OutputState }

func (BootImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootImage)(nil)).Elem()
}

func (o BootImageOutput) ToBootImageOutput() BootImageOutput {
	return o
}

func (o BootImageOutput) ToBootImageOutputWithContext(ctx context.Context) BootImageOutput {
	return o
}

func (o BootImageOutput) ToBootImagePtrOutput() BootImagePtrOutput {
	return o.ToBootImagePtrOutputWithContext(context.Background())
}

func (o BootImageOutput) ToBootImagePtrOutputWithContext(ctx context.Context) BootImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BootImage) *BootImage {
		return &v
	}).(BootImagePtrOutput)
}

func (o BootImageOutput) ToOutput(ctx context.Context) pulumix.Output[BootImage] {
	return pulumix.Output[BootImage]{
		OutputState: o.OutputState,
	}
}

type BootImagePtrOutput struct{ *pulumi.OutputState }

func (BootImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BootImage)(nil)).Elem()
}

func (o BootImagePtrOutput) ToBootImagePtrOutput() BootImagePtrOutput {
	return o
}

func (o BootImagePtrOutput) ToBootImagePtrOutputWithContext(ctx context.Context) BootImagePtrOutput {
	return o
}

func (o BootImagePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BootImage] {
	return pulumix.Output[*BootImage]{
		OutputState: o.OutputState,
	}
}

func (o BootImagePtrOutput) Elem() BootImageOutput {
	return o.ApplyT(func(v *BootImage) BootImage {
		if v != nil {
			return *v
		}
		var ret BootImage
		return ret
	}).(BootImageOutput)
}

// Definition of the boot image used by the Runtime. Used to facilitate runtime upgradeability.
type BootImageResponse struct {
}

// Definition of the boot image used by the Runtime. Used to facilitate runtime upgradeability.
type BootImageResponseOutput struct{ *pulumi.OutputState }

func (BootImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootImageResponse)(nil)).Elem()
}

func (o BootImageResponseOutput) ToBootImageResponseOutput() BootImageResponseOutput {
	return o
}

func (o BootImageResponseOutput) ToBootImageResponseOutputWithContext(ctx context.Context) BootImageResponseOutput {
	return o
}

func (o BootImageResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BootImageResponse] {
	return pulumix.Output[BootImageResponse]{
		OutputState: o.OutputState,
	}
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImage struct {
	// The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
	Repository string `pulumi:"repository"`
	// The tag of the container image. If not specified, this defaults to the latest tag.
	Tag *string `pulumi:"tag"`
}

// ContainerImageInput is an input type that accepts ContainerImageArgs and ContainerImageOutput values.
// You can construct a concrete instance of `ContainerImageInput` via:
//
//	ContainerImageArgs{...}
type ContainerImageInput interface {
	pulumi.Input

	ToContainerImageOutput() ContainerImageOutput
	ToContainerImageOutputWithContext(context.Context) ContainerImageOutput
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImageArgs struct {
	// The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
	Repository pulumi.StringInput `pulumi:"repository"`
	// The tag of the container image. If not specified, this defaults to the latest tag.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (ContainerImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImage)(nil)).Elem()
}

func (i ContainerImageArgs) ToContainerImageOutput() ContainerImageOutput {
	return i.ToContainerImageOutputWithContext(context.Background())
}

func (i ContainerImageArgs) ToContainerImageOutputWithContext(ctx context.Context) ContainerImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageOutput)
}

func (i ContainerImageArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerImage] {
	return pulumix.Output[ContainerImage]{
		OutputState: i.ToContainerImageOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerImageArgs) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return i.ToContainerImagePtrOutputWithContext(context.Background())
}

func (i ContainerImageArgs) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageOutput).ToContainerImagePtrOutputWithContext(ctx)
}

// ContainerImagePtrInput is an input type that accepts ContainerImageArgs, ContainerImagePtr and ContainerImagePtrOutput values.
// You can construct a concrete instance of `ContainerImagePtrInput` via:
//
//	        ContainerImageArgs{...}
//
//	or:
//
//	        nil
type ContainerImagePtrInput interface {
	pulumi.Input

	ToContainerImagePtrOutput() ContainerImagePtrOutput
	ToContainerImagePtrOutputWithContext(context.Context) ContainerImagePtrOutput
}

type containerImagePtrType ContainerImageArgs

func ContainerImagePtr(v *ContainerImageArgs) ContainerImagePtrInput {
	return (*containerImagePtrType)(v)
}

func (*containerImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImage)(nil)).Elem()
}

func (i *containerImagePtrType) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return i.ToContainerImagePtrOutputWithContext(context.Background())
}

func (i *containerImagePtrType) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImagePtrOutput)
}

func (i *containerImagePtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerImage] {
	return pulumix.Output[*ContainerImage]{
		OutputState: i.ToContainerImagePtrOutputWithContext(ctx).OutputState,
	}
}

// ContainerImageArrayInput is an input type that accepts ContainerImageArray and ContainerImageArrayOutput values.
// You can construct a concrete instance of `ContainerImageArrayInput` via:
//
//	ContainerImageArray{ ContainerImageArgs{...} }
type ContainerImageArrayInput interface {
	pulumi.Input

	ToContainerImageArrayOutput() ContainerImageArrayOutput
	ToContainerImageArrayOutputWithContext(context.Context) ContainerImageArrayOutput
}

type ContainerImageArray []ContainerImageInput

func (ContainerImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerImage)(nil)).Elem()
}

func (i ContainerImageArray) ToContainerImageArrayOutput() ContainerImageArrayOutput {
	return i.ToContainerImageArrayOutputWithContext(context.Background())
}

func (i ContainerImageArray) ToContainerImageArrayOutputWithContext(ctx context.Context) ContainerImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerImageArrayOutput)
}

func (i ContainerImageArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerImage] {
	return pulumix.Output[[]ContainerImage]{
		OutputState: i.ToContainerImageArrayOutputWithContext(ctx).OutputState,
	}
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImageOutput struct{ *pulumi.OutputState }

func (ContainerImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImage)(nil)).Elem()
}

func (o ContainerImageOutput) ToContainerImageOutput() ContainerImageOutput {
	return o
}

func (o ContainerImageOutput) ToContainerImageOutputWithContext(ctx context.Context) ContainerImageOutput {
	return o
}

func (o ContainerImageOutput) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return o.ToContainerImagePtrOutputWithContext(context.Background())
}

func (o ContainerImageOutput) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerImage) *ContainerImage {
		return &v
	}).(ContainerImagePtrOutput)
}

func (o ContainerImageOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerImage] {
	return pulumix.Output[ContainerImage]{
		OutputState: o.OutputState,
	}
}

// The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
func (o ContainerImageOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerImage) string { return v.Repository }).(pulumi.StringOutput)
}

// The tag of the container image. If not specified, this defaults to the latest tag.
func (o ContainerImageOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerImage) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type ContainerImagePtrOutput struct{ *pulumi.OutputState }

func (ContainerImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerImage)(nil)).Elem()
}

func (o ContainerImagePtrOutput) ToContainerImagePtrOutput() ContainerImagePtrOutput {
	return o
}

func (o ContainerImagePtrOutput) ToContainerImagePtrOutputWithContext(ctx context.Context) ContainerImagePtrOutput {
	return o
}

func (o ContainerImagePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerImage] {
	return pulumix.Output[*ContainerImage]{
		OutputState: o.OutputState,
	}
}

func (o ContainerImagePtrOutput) Elem() ContainerImageOutput {
	return o.ApplyT(func(v *ContainerImage) ContainerImage {
		if v != nil {
			return *v
		}
		var ret ContainerImage
		return ret
	}).(ContainerImageOutput)
}

// The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
func (o ContainerImagePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImage) *string {
		if v == nil {
			return nil
		}
		return &v.Repository
	}).(pulumi.StringPtrOutput)
}

// The tag of the container image. If not specified, this defaults to the latest tag.
func (o ContainerImagePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerImage) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

type ContainerImageArrayOutput struct{ *pulumi.OutputState }

func (ContainerImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerImage)(nil)).Elem()
}

func (o ContainerImageArrayOutput) ToContainerImageArrayOutput() ContainerImageArrayOutput {
	return o
}

func (o ContainerImageArrayOutput) ToContainerImageArrayOutputWithContext(ctx context.Context) ContainerImageArrayOutput {
	return o
}

func (o ContainerImageArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerImage] {
	return pulumix.Output[[]ContainerImage]{
		OutputState: o.OutputState,
	}
}

func (o ContainerImageArrayOutput) Index(i pulumi.IntInput) ContainerImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerImage {
		return vs[0].([]ContainerImage)[vs[1].(int)]
	}).(ContainerImageOutput)
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImageResponse struct {
	// The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
	Repository string `pulumi:"repository"`
	// The tag of the container image. If not specified, this defaults to the latest tag.
	Tag string `pulumi:"tag"`
}

// Definition of a container image for starting a notebook instance with the environment installed in a container.
type ContainerImageResponseOutput struct{ *pulumi.OutputState }

func (ContainerImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerImageResponse)(nil)).Elem()
}

func (o ContainerImageResponseOutput) ToContainerImageResponseOutput() ContainerImageResponseOutput {
	return o
}

func (o ContainerImageResponseOutput) ToContainerImageResponseOutputWithContext(ctx context.Context) ContainerImageResponseOutput {
	return o
}

func (o ContainerImageResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerImageResponse] {
	return pulumix.Output[ContainerImageResponse]{
		OutputState: o.OutputState,
	}
}

// The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`
func (o ContainerImageResponseOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerImageResponse) string { return v.Repository }).(pulumi.StringOutput)
}

// The tag of the container image. If not specified, this defaults to the latest tag.
func (o ContainerImageResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerImageResponse) string { return v.Tag }).(pulumi.StringOutput)
}

type ContainerImageResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerImageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerImageResponse)(nil)).Elem()
}

func (o ContainerImageResponseArrayOutput) ToContainerImageResponseArrayOutput() ContainerImageResponseArrayOutput {
	return o
}

func (o ContainerImageResponseArrayOutput) ToContainerImageResponseArrayOutputWithContext(ctx context.Context) ContainerImageResponseArrayOutput {
	return o
}

func (o ContainerImageResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerImageResponse] {
	return pulumix.Output[[]ContainerImageResponse]{
		OutputState: o.OutputState,
	}
}

func (o ContainerImageResponseArrayOutput) Index(i pulumi.IntInput) ContainerImageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerImageResponse {
		return vs[0].([]ContainerImageResponse)[vs[1].(int)]
	}).(ContainerImageResponseOutput)
}

// Parameters used in Dataproc JobType executions.
type DataprocParameters struct {
	// URI for cluster used to run Dataproc execution. Format: `projects/{PROJECT_ID}/regions/{REGION}/clusters/{CLUSTER_NAME}`
	Cluster *string `pulumi:"cluster"`
}

// DataprocParametersInput is an input type that accepts DataprocParametersArgs and DataprocParametersOutput values.
// You can construct a concrete instance of `DataprocParametersInput` via:
//
//	DataprocParametersArgs{...}
type DataprocParametersInput interface {
	pulumi.Input

	ToDataprocParametersOutput() DataprocParametersOutput
	ToDataprocParametersOutputWithContext(context.Context) DataprocParametersOutput
}

// Parameters used in Dataproc JobType executions.
type DataprocParametersArgs struct {
	// URI for cluster used to run Dataproc execution. Format: `projects/{PROJECT_ID}/regions/{REGION}/clusters/{CLUSTER_NAME}`
	Cluster pulumi.StringPtrInput `pulumi:"cluster"`
}

func (DataprocParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataprocParameters)(nil)).Elem()
}

func (i DataprocParametersArgs) ToDataprocParametersOutput() DataprocParametersOutput {
	return i.ToDataprocParametersOutputWithContext(context.Background())
}

func (i DataprocParametersArgs) ToDataprocParametersOutputWithContext(ctx context.Context) DataprocParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataprocParametersOutput)
}

func (i DataprocParametersArgs) ToOutput(ctx context.Context) pulumix.Output[DataprocParameters] {
	return pulumix.Output[DataprocParameters]{
		OutputState: i.ToDataprocParametersOutputWithContext(ctx).OutputState,
	}
}

func (i DataprocParametersArgs) ToDataprocParametersPtrOutput() DataprocParametersPtrOutput {
	return i.ToDataprocParametersPtrOutputWithContext(context.Background())
}

func (i DataprocParametersArgs) ToDataprocParametersPtrOutputWithContext(ctx context.Context) DataprocParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataprocParametersOutput).ToDataprocParametersPtrOutputWithContext(ctx)
}

// DataprocParametersPtrInput is an input type that accepts DataprocParametersArgs, DataprocParametersPtr and DataprocParametersPtrOutput values.
// You can construct a concrete instance of `DataprocParametersPtrInput` via:
//
//	        DataprocParametersArgs{...}
//
//	or:
//
//	        nil
type DataprocParametersPtrInput interface {
	pulumi.Input

	ToDataprocParametersPtrOutput() DataprocParametersPtrOutput
	ToDataprocParametersPtrOutputWithContext(context.Context) DataprocParametersPtrOutput
}

type dataprocParametersPtrType DataprocParametersArgs

func DataprocParametersPtr(v *DataprocParametersArgs) DataprocParametersPtrInput {
	return (*dataprocParametersPtrType)(v)
}

func (*dataprocParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataprocParameters)(nil)).Elem()
}

func (i *dataprocParametersPtrType) ToDataprocParametersPtrOutput() DataprocParametersPtrOutput {
	return i.ToDataprocParametersPtrOutputWithContext(context.Background())
}

func (i *dataprocParametersPtrType) ToDataprocParametersPtrOutputWithContext(ctx context.Context) DataprocParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataprocParametersPtrOutput)
}

func (i *dataprocParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*DataprocParameters] {
	return pulumix.Output[*DataprocParameters]{
		OutputState: i.ToDataprocParametersPtrOutputWithContext(ctx).OutputState,
	}
}

// Parameters used in Dataproc JobType executions.
type DataprocParametersOutput struct{ *pulumi.OutputState }

func (DataprocParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataprocParameters)(nil)).Elem()
}

func (o DataprocParametersOutput) ToDataprocParametersOutput() DataprocParametersOutput {
	return o
}

func (o DataprocParametersOutput) ToDataprocParametersOutputWithContext(ctx context.Context) DataprocParametersOutput {
	return o
}

func (o DataprocParametersOutput) ToDataprocParametersPtrOutput() DataprocParametersPtrOutput {
	return o.ToDataprocParametersPtrOutputWithContext(context.Background())
}

func (o DataprocParametersOutput) ToDataprocParametersPtrOutputWithContext(ctx context.Context) DataprocParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataprocParameters) *DataprocParameters {
		return &v
	}).(DataprocParametersPtrOutput)
}

func (o DataprocParametersOutput) ToOutput(ctx context.Context) pulumix.Output[DataprocParameters] {
	return pulumix.Output[DataprocParameters]{
		OutputState: o.OutputState,
	}
}

// URI for cluster used to run Dataproc execution. Format: `projects/{PROJECT_ID}/regions/{REGION}/clusters/{CLUSTER_NAME}`
func (o DataprocParametersOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataprocParameters) *string { return v.Cluster }).(pulumi.StringPtrOutput)
}

type DataprocParametersPtrOutput struct{ *pulumi.OutputState }

func (DataprocParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataprocParameters)(nil)).Elem()
}

func (o DataprocParametersPtrOutput) ToDataprocParametersPtrOutput() DataprocParametersPtrOutput {
	return o
}

func (o DataprocParametersPtrOutput) ToDataprocParametersPtrOutputWithContext(ctx context.Context) DataprocParametersPtrOutput {
	return o
}

func (o DataprocParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataprocParameters] {
	return pulumix.Output[*DataprocParameters]{
		OutputState: o.OutputState,
	}
}

func (o DataprocParametersPtrOutput) Elem() DataprocParametersOutput {
	return o.ApplyT(func(v *DataprocParameters) DataprocParameters {
		if v != nil {
			return *v
		}
		var ret DataprocParameters
		return ret
	}).(DataprocParametersOutput)
}

// URI for cluster used to run Dataproc execution. Format: `projects/{PROJECT_ID}/regions/{REGION}/clusters/{CLUSTER_NAME}`
func (o DataprocParametersPtrOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataprocParameters) *string {
		if v == nil {
			return nil
		}
		return v.Cluster
	}).(pulumi.StringPtrOutput)
}

// Parameters used in Dataproc JobType executions.
type DataprocParametersResponse struct {
	// URI for cluster used to run Dataproc execution. Format: `projects/{PROJECT_ID}/regions/{REGION}/clusters/{CLUSTER_NAME}`
	Cluster string `pulumi:"cluster"`
}

// Parameters used in Dataproc JobType executions.
type DataprocParametersResponseOutput struct{ *pulumi.OutputState }

func (DataprocParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataprocParametersResponse)(nil)).Elem()
}

func (o DataprocParametersResponseOutput) ToDataprocParametersResponseOutput() DataprocParametersResponseOutput {
	return o
}

func (o DataprocParametersResponseOutput) ToDataprocParametersResponseOutputWithContext(ctx context.Context) DataprocParametersResponseOutput {
	return o
}

func (o DataprocParametersResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DataprocParametersResponse] {
	return pulumix.Output[DataprocParametersResponse]{
		OutputState: o.OutputState,
	}
}

// URI for cluster used to run Dataproc execution. Format: `projects/{PROJECT_ID}/regions/{REGION}/clusters/{CLUSTER_NAME}`
func (o DataprocParametersResponseOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v DataprocParametersResponse) string { return v.Cluster }).(pulumi.StringOutput)
}

// An instance-attached disk resource.
type DiskResponse struct {
	// Indicates whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
	AutoDelete bool `pulumi:"autoDelete"`
	// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
	Boot bool `pulumi:"boot"`
	// Indicates a unique device name of your choice that is reflected into the `/dev/disk/by-id/google-*` tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine.This field is only applicable for persistent disks.
	DeviceName string `pulumi:"deviceName"`
	// Indicates the size of the disk in base-2 GB.
	DiskSizeGb string `pulumi:"diskSizeGb"`
	// Indicates a list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
	GuestOsFeatures []GuestOsFeatureResponse `pulumi:"guestOsFeatures"`
	// A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
	Index string `pulumi:"index"`
	// Indicates the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: * `NVME` * `SCSI`
	Interface string `pulumi:"interface"`
	// Type of the resource. Always compute#attachedDisk for attached disks.
	Kind string `pulumi:"kind"`
	// A list of publicly visible licenses. Reserved for Google's use. A License represents billing and aggregate usage data for public and marketplace images.
	Licenses []string `pulumi:"licenses"`
	// The mode in which to attach this disk, either `READ_WRITE` or `READ_ONLY`. If not specified, the default is to attach the disk in `READ_WRITE` mode. Valid values: * `READ_ONLY` * `READ_WRITE`
	Mode string `pulumi:"mode"`
	// Indicates a valid partial or full URL to an existing Persistent Disk resource.
	Source string `pulumi:"source"`
	// Indicates the type of the disk, either `SCRATCH` or `PERSISTENT`. Valid values: * `PERSISTENT` * `SCRATCH`
	Type string `pulumi:"type"`
}

// An instance-attached disk resource.
type DiskResponseOutput struct{ *pulumi.OutputState }

func (DiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskResponse)(nil)).Elem()
}

func (o DiskResponseOutput) ToDiskResponseOutput() DiskResponseOutput {
	return o
}

func (o DiskResponseOutput) ToDiskResponseOutputWithContext(ctx context.Context) DiskResponseOutput {
	return o
}

func (o DiskResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DiskResponse] {
	return pulumix.Output[DiskResponse]{
		OutputState: o.OutputState,
	}
}

// Indicates whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
func (o DiskResponseOutput) AutoDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v DiskResponse) bool { return v.AutoDelete }).(pulumi.BoolOutput)
}

// Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
func (o DiskResponseOutput) Boot() pulumi.BoolOutput {
	return o.ApplyT(func(v DiskResponse) bool { return v.Boot }).(pulumi.BoolOutput)
}

// Indicates a unique device name of your choice that is reflected into the `/dev/disk/by-id/google-*` tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine.This field is only applicable for persistent disks.
func (o DiskResponseOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.DeviceName }).(pulumi.StringOutput)
}

// Indicates the size of the disk in base-2 GB.
func (o DiskResponseOutput) DiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.DiskSizeGb }).(pulumi.StringOutput)
}

// Indicates a list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
func (o DiskResponseOutput) GuestOsFeatures() GuestOsFeatureResponseArrayOutput {
	return o.ApplyT(func(v DiskResponse) []GuestOsFeatureResponse { return v.GuestOsFeatures }).(GuestOsFeatureResponseArrayOutput)
}

// A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
func (o DiskResponseOutput) Index() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Index }).(pulumi.StringOutput)
}

// Indicates the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: * `NVME` * `SCSI`
func (o DiskResponseOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Interface }).(pulumi.StringOutput)
}

// Type of the resource. Always compute#attachedDisk for attached disks.
func (o DiskResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// A list of publicly visible licenses. Reserved for Google's use. A License represents billing and aggregate usage data for public and marketplace images.
func (o DiskResponseOutput) Licenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DiskResponse) []string { return v.Licenses }).(pulumi.StringArrayOutput)
}

// The mode in which to attach this disk, either `READ_WRITE` or `READ_ONLY`. If not specified, the default is to attach the disk in `READ_WRITE` mode. Valid values: * `READ_ONLY` * `READ_WRITE`
func (o DiskResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// Indicates a valid partial or full URL to an existing Persistent Disk resource.
func (o DiskResponseOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Source }).(pulumi.StringOutput)
}

// Indicates the type of the disk, either `SCRATCH` or `PERSISTENT`. Valid values: * `PERSISTENT` * `SCRATCH`
func (o DiskResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DiskResponseArrayOutput struct{ *pulumi.OutputState }

func (DiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskResponse)(nil)).Elem()
}

func (o DiskResponseArrayOutput) ToDiskResponseArrayOutput() DiskResponseArrayOutput {
	return o
}

func (o DiskResponseArrayOutput) ToDiskResponseArrayOutputWithContext(ctx context.Context) DiskResponseArrayOutput {
	return o
}

func (o DiskResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DiskResponse] {
	return pulumix.Output[[]DiskResponse]{
		OutputState: o.OutputState,
	}
}

func (o DiskResponseArrayOutput) Index(i pulumi.IntInput) DiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskResponse {
		return vs[0].([]DiskResponse)[vs[1].(int)]
	}).(DiskResponseOutput)
}

// Represents a custom encryption key configuration that can be applied to a resource. This will encrypt all disks in Virtual Machine.
type EncryptionConfig struct {
	// The Cloud KMS resource identifier of the customer-managed encryption key used to protect a resource, such as a disks. It has the following format: `projects/{PROJECT_ID}/locations/{REGION}/keyRings/{KEY_RING_NAME}/cryptoKeys/{KEY_NAME}`
	KmsKey *string `pulumi:"kmsKey"`
}

// EncryptionConfigInput is an input type that accepts EncryptionConfigArgs and EncryptionConfigOutput values.
// You can construct a concrete instance of `EncryptionConfigInput` via:
//
//	EncryptionConfigArgs{...}
type EncryptionConfigInput interface {
	pulumi.Input

	ToEncryptionConfigOutput() EncryptionConfigOutput
	ToEncryptionConfigOutputWithContext(context.Context) EncryptionConfigOutput
}

// Represents a custom encryption key configuration that can be applied to a resource. This will encrypt all disks in Virtual Machine.
type EncryptionConfigArgs struct {
	// The Cloud KMS resource identifier of the customer-managed encryption key used to protect a resource, such as a disks. It has the following format: `projects/{PROJECT_ID}/locations/{REGION}/keyRings/{KEY_RING_NAME}/cryptoKeys/{KEY_NAME}`
	KmsKey pulumi.StringPtrInput `pulumi:"kmsKey"`
}

func (EncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return i.ToEncryptionConfigOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput)
}

func (i EncryptionConfigArgs) ToOutput(ctx context.Context) pulumix.Output[EncryptionConfig] {
	return pulumix.Output[EncryptionConfig]{
		OutputState: i.ToEncryptionConfigOutputWithContext(ctx).OutputState,
	}
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigArgs) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigOutput).ToEncryptionConfigPtrOutputWithContext(ctx)
}

// EncryptionConfigPtrInput is an input type that accepts EncryptionConfigArgs, EncryptionConfigPtr and EncryptionConfigPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigPtrInput` via:
//
//	        EncryptionConfigArgs{...}
//
//	or:
//
//	        nil
type EncryptionConfigPtrInput interface {
	pulumi.Input

	ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput
	ToEncryptionConfigPtrOutputWithContext(context.Context) EncryptionConfigPtrOutput
}

type encryptionConfigPtrType EncryptionConfigArgs

func EncryptionConfigPtr(v *EncryptionConfigArgs) EncryptionConfigPtrInput {
	return (*encryptionConfigPtrType)(v)
}

func (*encryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return i.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigPtrType) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigPtrOutput)
}

func (i *encryptionConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*EncryptionConfig] {
	return pulumix.Output[*EncryptionConfig]{
		OutputState: i.ToEncryptionConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a custom encryption key configuration that can be applied to a resource. This will encrypt all disks in Virtual Machine.
type EncryptionConfigOutput struct{ *pulumi.OutputState }

func (EncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutput() EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigOutputWithContext(ctx context.Context) EncryptionConfigOutput {
	return o
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o.ToEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionConfig) *EncryptionConfig {
		return &v
	}).(EncryptionConfigPtrOutput)
}

func (o EncryptionConfigOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionConfig] {
	return pulumix.Output[EncryptionConfig]{
		OutputState: o.OutputState,
	}
}

// The Cloud KMS resource identifier of the customer-managed encryption key used to protect a resource, such as a disks. It has the following format: `projects/{PROJECT_ID}/locations/{REGION}/keyRings/{KEY_RING_NAME}/cryptoKeys/{KEY_NAME}`
func (o EncryptionConfigOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfig) *string { return v.KmsKey }).(pulumi.StringPtrOutput)
}

type EncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfig)(nil)).Elem()
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutput() EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) ToEncryptionConfigPtrOutputWithContext(ctx context.Context) EncryptionConfigPtrOutput {
	return o
}

func (o EncryptionConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EncryptionConfig] {
	return pulumix.Output[*EncryptionConfig]{
		OutputState: o.OutputState,
	}
}

func (o EncryptionConfigPtrOutput) Elem() EncryptionConfigOutput {
	return o.ApplyT(func(v *EncryptionConfig) EncryptionConfig {
		if v != nil {
			return *v
		}
		var ret EncryptionConfig
		return ret
	}).(EncryptionConfigOutput)
}

// The Cloud KMS resource identifier of the customer-managed encryption key used to protect a resource, such as a disks. It has the following format: `projects/{PROJECT_ID}/locations/{REGION}/keyRings/{KEY_RING_NAME}/cryptoKeys/{KEY_NAME}`
func (o EncryptionConfigPtrOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfig) *string {
		if v == nil {
			return nil
		}
		return v.KmsKey
	}).(pulumi.StringPtrOutput)
}

// Represents a custom encryption key configuration that can be applied to a resource. This will encrypt all disks in Virtual Machine.
type EncryptionConfigResponse struct {
	// The Cloud KMS resource identifier of the customer-managed encryption key used to protect a resource, such as a disks. It has the following format: `projects/{PROJECT_ID}/locations/{REGION}/keyRings/{KEY_RING_NAME}/cryptoKeys/{KEY_NAME}`
	KmsKey string `pulumi:"kmsKey"`
}

// Represents a custom encryption key configuration that can be applied to a resource. This will encrypt all disks in Virtual Machine.
type EncryptionConfigResponseOutput struct{ *pulumi.OutputState }

func (EncryptionConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfigResponse)(nil)).Elem()
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponseOutput() EncryptionConfigResponseOutput {
	return o
}

func (o EncryptionConfigResponseOutput) ToEncryptionConfigResponseOutputWithContext(ctx context.Context) EncryptionConfigResponseOutput {
	return o
}

func (o EncryptionConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionConfigResponse] {
	return pulumix.Output[EncryptionConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The Cloud KMS resource identifier of the customer-managed encryption key used to protect a resource, such as a disks. It has the following format: `projects/{PROJECT_ID}/locations/{REGION}/keyRings/{KEY_RING_NAME}/cryptoKeys/{KEY_NAME}`
func (o EncryptionConfigResponseOutput) KmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigResponse) string { return v.KmsKey }).(pulumi.StringOutput)
}

// The definition of a single executed notebook.
type ExecutionResponse struct {
	// Time the Execution was instantiated.
	CreateTime string `pulumi:"createTime"`
	// A brief description of this execution.
	Description string `pulumi:"description"`
	// Name used for UI purposes. Name can only contain alphanumeric characters and underscores '_'.
	DisplayName string `pulumi:"displayName"`
	// execute metadata including name, hardware spec, region, labels, etc.
	ExecutionTemplate ExecutionTemplateResponse `pulumi:"executionTemplate"`
	// The URI of the external job used to execute the notebook.
	JobUri string `pulumi:"jobUri"`
	// The resource name of the execute. Format: `projects/{project_id}/locations/{location}/executions/{execution_id}`
	Name string `pulumi:"name"`
	// Output notebook file generated by this execution
	OutputNotebookFile string `pulumi:"outputNotebookFile"`
	// State of the underlying AI Platform job.
	State string `pulumi:"state"`
	// Time the Execution was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

// The definition of a single executed notebook.
type ExecutionResponseOutput struct{ *pulumi.OutputState }

func (ExecutionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionResponse)(nil)).Elem()
}

func (o ExecutionResponseOutput) ToExecutionResponseOutput() ExecutionResponseOutput {
	return o
}

func (o ExecutionResponseOutput) ToExecutionResponseOutputWithContext(ctx context.Context) ExecutionResponseOutput {
	return o
}

func (o ExecutionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExecutionResponse] {
	return pulumix.Output[ExecutionResponse]{
		OutputState: o.OutputState,
	}
}

// Time the Execution was instantiated.
func (o ExecutionResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// A brief description of this execution.
func (o ExecutionResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Name used for UI purposes. Name can only contain alphanumeric characters and underscores '_'.
func (o ExecutionResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// execute metadata including name, hardware spec, region, labels, etc.
func (o ExecutionResponseOutput) ExecutionTemplate() ExecutionTemplateResponseOutput {
	return o.ApplyT(func(v ExecutionResponse) ExecutionTemplateResponse { return v.ExecutionTemplate }).(ExecutionTemplateResponseOutput)
}

// The URI of the external job used to execute the notebook.
func (o ExecutionResponseOutput) JobUri() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionResponse) string { return v.JobUri }).(pulumi.StringOutput)
}

// The resource name of the execute. Format: `projects/{project_id}/locations/{location}/executions/{execution_id}`
func (o ExecutionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Output notebook file generated by this execution
func (o ExecutionResponseOutput) OutputNotebookFile() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionResponse) string { return v.OutputNotebookFile }).(pulumi.StringOutput)
}

// State of the underlying AI Platform job.
func (o ExecutionResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionResponse) string { return v.State }).(pulumi.StringOutput)
}

// Time the Execution was last updated.
func (o ExecutionResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type ExecutionResponseArrayOutput struct{ *pulumi.OutputState }

func (ExecutionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExecutionResponse)(nil)).Elem()
}

func (o ExecutionResponseArrayOutput) ToExecutionResponseArrayOutput() ExecutionResponseArrayOutput {
	return o
}

func (o ExecutionResponseArrayOutput) ToExecutionResponseArrayOutputWithContext(ctx context.Context) ExecutionResponseArrayOutput {
	return o
}

func (o ExecutionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ExecutionResponse] {
	return pulumix.Output[[]ExecutionResponse]{
		OutputState: o.OutputState,
	}
}

func (o ExecutionResponseArrayOutput) Index(i pulumi.IntInput) ExecutionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExecutionResponse {
		return vs[0].([]ExecutionResponse)[vs[1].(int)]
	}).(ExecutionResponseOutput)
}

// The description a notebook execution workload.
type ExecutionTemplate struct {
	// Configuration (count and accelerator type) for hardware running notebook execution.
	AcceleratorConfig *SchedulerAcceleratorConfig `pulumi:"acceleratorConfig"`
	// Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
	ContainerImageUri *string `pulumi:"containerImageUri"`
	// Parameters used in Dataproc JobType executions.
	DataprocParameters *DataprocParameters `pulumi:"dataprocParameters"`
	// Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: `gs://{bucket_name}/{folder}/{notebook_file_name}` Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb`
	InputNotebookFile *string `pulumi:"inputNotebookFile"`
	// The type of Job to be used on this execution.
	JobType *ExecutionTemplateJobType `pulumi:"jobType"`
	// Name of the kernel spec to use. This must be specified if the kernel spec name on the execution target does not match the name in the input notebook file.
	KernelSpec *string `pulumi:"kernelSpec"`
	// Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU](https://cloud.google.com/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).
	MasterType *string `pulumi:"masterType"`
	// Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: `gs://{bucket_name}/{folder}` Ex: `gs://notebook_user/scheduled_notebooks`
	OutputNotebookFolder *string `pulumi:"outputNotebookFolder"`
	// Parameters used within the 'input_notebook_file' notebook.
	Parameters *string `pulumi:"parameters"`
	// Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml`
	ParamsYamlFile *string `pulumi:"paramsYamlFile"`
	// Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
	//
	// Deprecated: Required. Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
	ScaleTier ExecutionTemplateScaleTier `pulumi:"scaleTier"`
	// The email address of a service account to use when running the execution. You must have the `iam.serviceAccounts.actAs` permission for the specified service account.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The name of a Vertex AI [Tensorboard] resource to which this execution will upload Tensorboard logs. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
	Tensorboard *string `pulumi:"tensorboard"`
	// Parameters used in Vertex AI JobType executions.
	VertexAiParameters *VertexAIParameters `pulumi:"vertexAiParameters"`
}

// ExecutionTemplateInput is an input type that accepts ExecutionTemplateArgs and ExecutionTemplateOutput values.
// You can construct a concrete instance of `ExecutionTemplateInput` via:
//
//	ExecutionTemplateArgs{...}
type ExecutionTemplateInput interface {
	pulumi.Input

	ToExecutionTemplateOutput() ExecutionTemplateOutput
	ToExecutionTemplateOutputWithContext(context.Context) ExecutionTemplateOutput
}

// The description a notebook execution workload.
type ExecutionTemplateArgs struct {
	// Configuration (count and accelerator type) for hardware running notebook execution.
	AcceleratorConfig SchedulerAcceleratorConfigPtrInput `pulumi:"acceleratorConfig"`
	// Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
	ContainerImageUri pulumi.StringPtrInput `pulumi:"containerImageUri"`
	// Parameters used in Dataproc JobType executions.
	DataprocParameters DataprocParametersPtrInput `pulumi:"dataprocParameters"`
	// Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: `gs://{bucket_name}/{folder}/{notebook_file_name}` Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb`
	InputNotebookFile pulumi.StringPtrInput `pulumi:"inputNotebookFile"`
	// The type of Job to be used on this execution.
	JobType ExecutionTemplateJobTypePtrInput `pulumi:"jobType"`
	// Name of the kernel spec to use. This must be specified if the kernel spec name on the execution target does not match the name in the input notebook file.
	KernelSpec pulumi.StringPtrInput `pulumi:"kernelSpec"`
	// Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU](https://cloud.google.com/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).
	MasterType pulumi.StringPtrInput `pulumi:"masterType"`
	// Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: `gs://{bucket_name}/{folder}` Ex: `gs://notebook_user/scheduled_notebooks`
	OutputNotebookFolder pulumi.StringPtrInput `pulumi:"outputNotebookFolder"`
	// Parameters used within the 'input_notebook_file' notebook.
	Parameters pulumi.StringPtrInput `pulumi:"parameters"`
	// Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml`
	ParamsYamlFile pulumi.StringPtrInput `pulumi:"paramsYamlFile"`
	// Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
	//
	// Deprecated: Required. Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
	ScaleTier ExecutionTemplateScaleTierInput `pulumi:"scaleTier"`
	// The email address of a service account to use when running the execution. You must have the `iam.serviceAccounts.actAs` permission for the specified service account.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// The name of a Vertex AI [Tensorboard] resource to which this execution will upload Tensorboard logs. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
	Tensorboard pulumi.StringPtrInput `pulumi:"tensorboard"`
	// Parameters used in Vertex AI JobType executions.
	VertexAiParameters VertexAIParametersPtrInput `pulumi:"vertexAiParameters"`
}

func (ExecutionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionTemplate)(nil)).Elem()
}

func (i ExecutionTemplateArgs) ToExecutionTemplateOutput() ExecutionTemplateOutput {
	return i.ToExecutionTemplateOutputWithContext(context.Background())
}

func (i ExecutionTemplateArgs) ToExecutionTemplateOutputWithContext(ctx context.Context) ExecutionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionTemplateOutput)
}

func (i ExecutionTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[ExecutionTemplate] {
	return pulumix.Output[ExecutionTemplate]{
		OutputState: i.ToExecutionTemplateOutputWithContext(ctx).OutputState,
	}
}

func (i ExecutionTemplateArgs) ToExecutionTemplatePtrOutput() ExecutionTemplatePtrOutput {
	return i.ToExecutionTemplatePtrOutputWithContext(context.Background())
}

func (i ExecutionTemplateArgs) ToExecutionTemplatePtrOutputWithContext(ctx context.Context) ExecutionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionTemplateOutput).ToExecutionTemplatePtrOutputWithContext(ctx)
}

// ExecutionTemplatePtrInput is an input type that accepts ExecutionTemplateArgs, ExecutionTemplatePtr and ExecutionTemplatePtrOutput values.
// You can construct a concrete instance of `ExecutionTemplatePtrInput` via:
//
//	        ExecutionTemplateArgs{...}
//
//	or:
//
//	        nil
type ExecutionTemplatePtrInput interface {
	pulumi.Input

	ToExecutionTemplatePtrOutput() ExecutionTemplatePtrOutput
	ToExecutionTemplatePtrOutputWithContext(context.Context) ExecutionTemplatePtrOutput
}

type executionTemplatePtrType ExecutionTemplateArgs

func ExecutionTemplatePtr(v *ExecutionTemplateArgs) ExecutionTemplatePtrInput {
	return (*executionTemplatePtrType)(v)
}

func (*executionTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecutionTemplate)(nil)).Elem()
}

func (i *executionTemplatePtrType) ToExecutionTemplatePtrOutput() ExecutionTemplatePtrOutput {
	return i.ToExecutionTemplatePtrOutputWithContext(context.Background())
}

func (i *executionTemplatePtrType) ToExecutionTemplatePtrOutputWithContext(ctx context.Context) ExecutionTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionTemplatePtrOutput)
}

func (i *executionTemplatePtrType) ToOutput(ctx context.Context) pulumix.Output[*ExecutionTemplate] {
	return pulumix.Output[*ExecutionTemplate]{
		OutputState: i.ToExecutionTemplatePtrOutputWithContext(ctx).OutputState,
	}
}

// The description a notebook execution workload.
type ExecutionTemplateOutput struct{ *pulumi.OutputState }

func (ExecutionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionTemplate)(nil)).Elem()
}

func (o ExecutionTemplateOutput) ToExecutionTemplateOutput() ExecutionTemplateOutput {
	return o
}

func (o ExecutionTemplateOutput) ToExecutionTemplateOutputWithContext(ctx context.Context) ExecutionTemplateOutput {
	return o
}

func (o ExecutionTemplateOutput) ToExecutionTemplatePtrOutput() ExecutionTemplatePtrOutput {
	return o.ToExecutionTemplatePtrOutputWithContext(context.Background())
}

func (o ExecutionTemplateOutput) ToExecutionTemplatePtrOutputWithContext(ctx context.Context) ExecutionTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExecutionTemplate) *ExecutionTemplate {
		return &v
	}).(ExecutionTemplatePtrOutput)
}

func (o ExecutionTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[ExecutionTemplate] {
	return pulumix.Output[ExecutionTemplate]{
		OutputState: o.OutputState,
	}
}

// Configuration (count and accelerator type) for hardware running notebook execution.
func (o ExecutionTemplateOutput) AcceleratorConfig() SchedulerAcceleratorConfigPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *SchedulerAcceleratorConfig { return v.AcceleratorConfig }).(SchedulerAcceleratorConfigPtrOutput)
}

// Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
func (o ExecutionTemplateOutput) ContainerImageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *string { return v.ContainerImageUri }).(pulumi.StringPtrOutput)
}

// Parameters used in Dataproc JobType executions.
func (o ExecutionTemplateOutput) DataprocParameters() DataprocParametersPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *DataprocParameters { return v.DataprocParameters }).(DataprocParametersPtrOutput)
}

// Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: `gs://{bucket_name}/{folder}/{notebook_file_name}` Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb`
func (o ExecutionTemplateOutput) InputNotebookFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *string { return v.InputNotebookFile }).(pulumi.StringPtrOutput)
}

// The type of Job to be used on this execution.
func (o ExecutionTemplateOutput) JobType() ExecutionTemplateJobTypePtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *ExecutionTemplateJobType { return v.JobType }).(ExecutionTemplateJobTypePtrOutput)
}

// Name of the kernel spec to use. This must be specified if the kernel spec name on the execution target does not match the name in the input notebook file.
func (o ExecutionTemplateOutput) KernelSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *string { return v.KernelSpec }).(pulumi.StringPtrOutput)
}

// Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
func (o ExecutionTemplateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ExecutionTemplate) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU](https://cloud.google.com/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).
func (o ExecutionTemplateOutput) MasterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *string { return v.MasterType }).(pulumi.StringPtrOutput)
}

// Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: `gs://{bucket_name}/{folder}` Ex: `gs://notebook_user/scheduled_notebooks`
func (o ExecutionTemplateOutput) OutputNotebookFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *string { return v.OutputNotebookFolder }).(pulumi.StringPtrOutput)
}

// Parameters used within the 'input_notebook_file' notebook.
func (o ExecutionTemplateOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *string { return v.Parameters }).(pulumi.StringPtrOutput)
}

// Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml`
func (o ExecutionTemplateOutput) ParamsYamlFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *string { return v.ParamsYamlFile }).(pulumi.StringPtrOutput)
}

// Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
//
// Deprecated: Required. Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
func (o ExecutionTemplateOutput) ScaleTier() ExecutionTemplateScaleTierOutput {
	return o.ApplyT(func(v ExecutionTemplate) ExecutionTemplateScaleTier { return v.ScaleTier }).(ExecutionTemplateScaleTierOutput)
}

// The email address of a service account to use when running the execution. You must have the `iam.serviceAccounts.actAs` permission for the specified service account.
func (o ExecutionTemplateOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The name of a Vertex AI [Tensorboard] resource to which this execution will upload Tensorboard logs. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
func (o ExecutionTemplateOutput) Tensorboard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *string { return v.Tensorboard }).(pulumi.StringPtrOutput)
}

// Parameters used in Vertex AI JobType executions.
func (o ExecutionTemplateOutput) VertexAiParameters() VertexAIParametersPtrOutput {
	return o.ApplyT(func(v ExecutionTemplate) *VertexAIParameters { return v.VertexAiParameters }).(VertexAIParametersPtrOutput)
}

type ExecutionTemplatePtrOutput struct{ *pulumi.OutputState }

func (ExecutionTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExecutionTemplate)(nil)).Elem()
}

func (o ExecutionTemplatePtrOutput) ToExecutionTemplatePtrOutput() ExecutionTemplatePtrOutput {
	return o
}

func (o ExecutionTemplatePtrOutput) ToExecutionTemplatePtrOutputWithContext(ctx context.Context) ExecutionTemplatePtrOutput {
	return o
}

func (o ExecutionTemplatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExecutionTemplate] {
	return pulumix.Output[*ExecutionTemplate]{
		OutputState: o.OutputState,
	}
}

func (o ExecutionTemplatePtrOutput) Elem() ExecutionTemplateOutput {
	return o.ApplyT(func(v *ExecutionTemplate) ExecutionTemplate {
		if v != nil {
			return *v
		}
		var ret ExecutionTemplate
		return ret
	}).(ExecutionTemplateOutput)
}

// Configuration (count and accelerator type) for hardware running notebook execution.
func (o ExecutionTemplatePtrOutput) AcceleratorConfig() SchedulerAcceleratorConfigPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *SchedulerAcceleratorConfig {
		if v == nil {
			return nil
		}
		return v.AcceleratorConfig
	}).(SchedulerAcceleratorConfigPtrOutput)
}

// Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
func (o ExecutionTemplatePtrOutput) ContainerImageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ContainerImageUri
	}).(pulumi.StringPtrOutput)
}

// Parameters used in Dataproc JobType executions.
func (o ExecutionTemplatePtrOutput) DataprocParameters() DataprocParametersPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *DataprocParameters {
		if v == nil {
			return nil
		}
		return v.DataprocParameters
	}).(DataprocParametersPtrOutput)
}

// Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: `gs://{bucket_name}/{folder}/{notebook_file_name}` Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb`
func (o ExecutionTemplatePtrOutput) InputNotebookFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.InputNotebookFile
	}).(pulumi.StringPtrOutput)
}

// The type of Job to be used on this execution.
func (o ExecutionTemplatePtrOutput) JobType() ExecutionTemplateJobTypePtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *ExecutionTemplateJobType {
		if v == nil {
			return nil
		}
		return v.JobType
	}).(ExecutionTemplateJobTypePtrOutput)
}

// Name of the kernel spec to use. This must be specified if the kernel spec name on the execution target does not match the name in the input notebook file.
func (o ExecutionTemplatePtrOutput) KernelSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.KernelSpec
	}).(pulumi.StringPtrOutput)
}

// Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
func (o ExecutionTemplatePtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExecutionTemplate) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU](https://cloud.google.com/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).
func (o ExecutionTemplatePtrOutput) MasterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.MasterType
	}).(pulumi.StringPtrOutput)
}

// Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: `gs://{bucket_name}/{folder}` Ex: `gs://notebook_user/scheduled_notebooks`
func (o ExecutionTemplatePtrOutput) OutputNotebookFolder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.OutputNotebookFolder
	}).(pulumi.StringPtrOutput)
}

// Parameters used within the 'input_notebook_file' notebook.
func (o ExecutionTemplatePtrOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.StringPtrOutput)
}

// Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml`
func (o ExecutionTemplatePtrOutput) ParamsYamlFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ParamsYamlFile
	}).(pulumi.StringPtrOutput)
}

// Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
//
// Deprecated: Required. Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
func (o ExecutionTemplatePtrOutput) ScaleTier() ExecutionTemplateScaleTierPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *ExecutionTemplateScaleTier {
		if v == nil {
			return nil
		}
		return &v.ScaleTier
	}).(ExecutionTemplateScaleTierPtrOutput)
}

// The email address of a service account to use when running the execution. You must have the `iam.serviceAccounts.actAs` permission for the specified service account.
func (o ExecutionTemplatePtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// The name of a Vertex AI [Tensorboard] resource to which this execution will upload Tensorboard logs. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
func (o ExecutionTemplatePtrOutput) Tensorboard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Tensorboard
	}).(pulumi.StringPtrOutput)
}

// Parameters used in Vertex AI JobType executions.
func (o ExecutionTemplatePtrOutput) VertexAiParameters() VertexAIParametersPtrOutput {
	return o.ApplyT(func(v *ExecutionTemplate) *VertexAIParameters {
		if v == nil {
			return nil
		}
		return v.VertexAiParameters
	}).(VertexAIParametersPtrOutput)
}

// The description a notebook execution workload.
type ExecutionTemplateResponse struct {
	// Configuration (count and accelerator type) for hardware running notebook execution.
	AcceleratorConfig SchedulerAcceleratorConfigResponse `pulumi:"acceleratorConfig"`
	// Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
	ContainerImageUri string `pulumi:"containerImageUri"`
	// Parameters used in Dataproc JobType executions.
	DataprocParameters DataprocParametersResponse `pulumi:"dataprocParameters"`
	// Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: `gs://{bucket_name}/{folder}/{notebook_file_name}` Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb`
	InputNotebookFile string `pulumi:"inputNotebookFile"`
	// The type of Job to be used on this execution.
	JobType string `pulumi:"jobType"`
	// Name of the kernel spec to use. This must be specified if the kernel spec name on the execution target does not match the name in the input notebook file.
	KernelSpec string `pulumi:"kernelSpec"`
	// Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU](https://cloud.google.com/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).
	MasterType string `pulumi:"masterType"`
	// Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: `gs://{bucket_name}/{folder}` Ex: `gs://notebook_user/scheduled_notebooks`
	OutputNotebookFolder string `pulumi:"outputNotebookFolder"`
	// Parameters used within the 'input_notebook_file' notebook.
	Parameters string `pulumi:"parameters"`
	// Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml`
	ParamsYamlFile string `pulumi:"paramsYamlFile"`
	// Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
	//
	// Deprecated: Required. Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
	ScaleTier string `pulumi:"scaleTier"`
	// The email address of a service account to use when running the execution. You must have the `iam.serviceAccounts.actAs` permission for the specified service account.
	ServiceAccount string `pulumi:"serviceAccount"`
	// The name of a Vertex AI [Tensorboard] resource to which this execution will upload Tensorboard logs. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
	Tensorboard string `pulumi:"tensorboard"`
	// Parameters used in Vertex AI JobType executions.
	VertexAiParameters VertexAIParametersResponse `pulumi:"vertexAiParameters"`
}

// The description a notebook execution workload.
type ExecutionTemplateResponseOutput struct{ *pulumi.OutputState }

func (ExecutionTemplateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionTemplateResponse)(nil)).Elem()
}

func (o ExecutionTemplateResponseOutput) ToExecutionTemplateResponseOutput() ExecutionTemplateResponseOutput {
	return o
}

func (o ExecutionTemplateResponseOutput) ToExecutionTemplateResponseOutputWithContext(ctx context.Context) ExecutionTemplateResponseOutput {
	return o
}

func (o ExecutionTemplateResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExecutionTemplateResponse] {
	return pulumix.Output[ExecutionTemplateResponse]{
		OutputState: o.OutputState,
	}
}

// Configuration (count and accelerator type) for hardware running notebook execution.
func (o ExecutionTemplateResponseOutput) AcceleratorConfig() SchedulerAcceleratorConfigResponseOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) SchedulerAcceleratorConfigResponse { return v.AcceleratorConfig }).(SchedulerAcceleratorConfigResponseOutput)
}

// Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container
func (o ExecutionTemplateResponseOutput) ContainerImageUri() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.ContainerImageUri }).(pulumi.StringOutput)
}

// Parameters used in Dataproc JobType executions.
func (o ExecutionTemplateResponseOutput) DataprocParameters() DataprocParametersResponseOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) DataprocParametersResponse { return v.DataprocParameters }).(DataprocParametersResponseOutput)
}

// Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: `gs://{bucket_name}/{folder}/{notebook_file_name}` Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb`
func (o ExecutionTemplateResponseOutput) InputNotebookFile() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.InputNotebookFile }).(pulumi.StringOutput)
}

// The type of Job to be used on this execution.
func (o ExecutionTemplateResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Name of the kernel spec to use. This must be specified if the kernel spec name on the execution target does not match the name in the input notebook file.
func (o ExecutionTemplateResponseOutput) KernelSpec() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.KernelSpec }).(pulumi.StringOutput)
}

// Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.
func (o ExecutionTemplateResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU](https://cloud.google.com/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).
func (o ExecutionTemplateResponseOutput) MasterType() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.MasterType }).(pulumi.StringOutput)
}

// Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: `gs://{bucket_name}/{folder}` Ex: `gs://notebook_user/scheduled_notebooks`
func (o ExecutionTemplateResponseOutput) OutputNotebookFolder() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.OutputNotebookFolder }).(pulumi.StringOutput)
}

// Parameters used within the 'input_notebook_file' notebook.
func (o ExecutionTemplateResponseOutput) Parameters() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.Parameters }).(pulumi.StringOutput)
}

// Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: `gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml`
func (o ExecutionTemplateResponseOutput) ParamsYamlFile() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.ParamsYamlFile }).(pulumi.StringOutput)
}

// Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
//
// Deprecated: Required. Scale tier of the hardware used for notebook execution. DEPRECATED Will be discontinued. As right now only CUSTOM is supported.
func (o ExecutionTemplateResponseOutput) ScaleTier() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.ScaleTier }).(pulumi.StringOutput)
}

// The email address of a service account to use when running the execution. You must have the `iam.serviceAccounts.actAs` permission for the specified service account.
func (o ExecutionTemplateResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The name of a Vertex AI [Tensorboard] resource to which this execution will upload Tensorboard logs. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}`
func (o ExecutionTemplateResponseOutput) Tensorboard() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) string { return v.Tensorboard }).(pulumi.StringOutput)
}

// Parameters used in Vertex AI JobType executions.
func (o ExecutionTemplateResponseOutput) VertexAiParameters() VertexAIParametersResponseOutput {
	return o.ApplyT(func(v ExecutionTemplateResponse) VertexAIParametersResponse { return v.VertexAiParameters }).(VertexAIParametersResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: i.ToExprOutputWithContext(ctx).OutputState,
	}
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

func (i *exprPtrType) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: i.ToExprPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

func (o ExprOutput) ToOutput(ctx context.Context) pulumix.Output[Expr] {
	return pulumix.Output[Expr]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Expr] {
	return pulumix.Output[*Expr]{
		OutputState: o.OutputState,
	}
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExprResponse] {
	return pulumix.Output[ExprResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Guest OS features for boot disk.
type GuestOsFeatureResponse struct {
	// The ID of a supported feature. Read Enabling guest operating system features to see a list of available options. Valid values: * `FEATURE_TYPE_UNSPECIFIED` * `MULTI_IP_SUBNET` * `SECURE_BOOT` * `UEFI_COMPATIBLE` * `VIRTIO_SCSI_MULTIQUEUE` * `WINDOWS`
	Type string `pulumi:"type"`
}

// Guest OS features for boot disk.
type GuestOsFeatureResponseOutput struct{ *pulumi.OutputState }

func (GuestOsFeatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GuestOsFeatureResponse)(nil)).Elem()
}

func (o GuestOsFeatureResponseOutput) ToGuestOsFeatureResponseOutput() GuestOsFeatureResponseOutput {
	return o
}

func (o GuestOsFeatureResponseOutput) ToGuestOsFeatureResponseOutputWithContext(ctx context.Context) GuestOsFeatureResponseOutput {
	return o
}

func (o GuestOsFeatureResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GuestOsFeatureResponse] {
	return pulumix.Output[GuestOsFeatureResponse]{
		OutputState: o.OutputState,
	}
}

// The ID of a supported feature. Read Enabling guest operating system features to see a list of available options. Valid values: * `FEATURE_TYPE_UNSPECIFIED` * `MULTI_IP_SUBNET` * `SECURE_BOOT` * `UEFI_COMPATIBLE` * `VIRTIO_SCSI_MULTIQUEUE` * `WINDOWS`
func (o GuestOsFeatureResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GuestOsFeatureResponse) string { return v.Type }).(pulumi.StringOutput)
}

type GuestOsFeatureResponseArrayOutput struct{ *pulumi.OutputState }

func (GuestOsFeatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GuestOsFeatureResponse)(nil)).Elem()
}

func (o GuestOsFeatureResponseArrayOutput) ToGuestOsFeatureResponseArrayOutput() GuestOsFeatureResponseArrayOutput {
	return o
}

func (o GuestOsFeatureResponseArrayOutput) ToGuestOsFeatureResponseArrayOutputWithContext(ctx context.Context) GuestOsFeatureResponseArrayOutput {
	return o
}

func (o GuestOsFeatureResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GuestOsFeatureResponse] {
	return pulumix.Output[[]GuestOsFeatureResponse]{
		OutputState: o.OutputState,
	}
}

func (o GuestOsFeatureResponseArrayOutput) Index(i pulumi.IntInput) GuestOsFeatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GuestOsFeatureResponse {
		return vs[0].([]GuestOsFeatureResponse)[vs[1].(int)]
	}).(GuestOsFeatureResponseOutput)
}

// A Local attached disk resource.
type LocalDisk struct {
	// Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
	InitializeParams *LocalDiskInitializeParams `pulumi:"initializeParams"`
	// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: * `NVME` * `SCSI`
	Interface *string `pulumi:"interface"`
	// The mode in which to attach this disk, either `READ_WRITE` or `READ_ONLY`. If not specified, the default is to attach the disk in `READ_WRITE` mode. Valid values: * `READ_ONLY` * `READ_WRITE`
	Mode *string `pulumi:"mode"`
	// Specifies a valid partial or full URL to an existing Persistent Disk resource.
	Source *string `pulumi:"source"`
	// Specifies the type of the disk, either `SCRATCH` or `PERSISTENT`. If not specified, the default is `PERSISTENT`. Valid values: * `PERSISTENT` * `SCRATCH`
	Type *string `pulumi:"type"`
}

// LocalDiskInput is an input type that accepts LocalDiskArgs and LocalDiskOutput values.
// You can construct a concrete instance of `LocalDiskInput` via:
//
//	LocalDiskArgs{...}
type LocalDiskInput interface {
	pulumi.Input

	ToLocalDiskOutput() LocalDiskOutput
	ToLocalDiskOutputWithContext(context.Context) LocalDiskOutput
}

// A Local attached disk resource.
type LocalDiskArgs struct {
	// Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
	InitializeParams LocalDiskInitializeParamsPtrInput `pulumi:"initializeParams"`
	// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: * `NVME` * `SCSI`
	Interface pulumi.StringPtrInput `pulumi:"interface"`
	// The mode in which to attach this disk, either `READ_WRITE` or `READ_ONLY`. If not specified, the default is to attach the disk in `READ_WRITE` mode. Valid values: * `READ_ONLY` * `READ_WRITE`
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Specifies a valid partial or full URL to an existing Persistent Disk resource.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// Specifies the type of the disk, either `SCRATCH` or `PERSISTENT`. If not specified, the default is `PERSISTENT`. Valid values: * `PERSISTENT` * `SCRATCH`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LocalDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalDisk)(nil)).Elem()
}

func (i LocalDiskArgs) ToLocalDiskOutput() LocalDiskOutput {
	return i.ToLocalDiskOutputWithContext(context.Background())
}

func (i LocalDiskArgs) ToLocalDiskOutputWithContext(ctx context.Context) LocalDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalDiskOutput)
}

func (i LocalDiskArgs) ToOutput(ctx context.Context) pulumix.Output[LocalDisk] {
	return pulumix.Output[LocalDisk]{
		OutputState: i.ToLocalDiskOutputWithContext(ctx).OutputState,
	}
}

func (i LocalDiskArgs) ToLocalDiskPtrOutput() LocalDiskPtrOutput {
	return i.ToLocalDiskPtrOutputWithContext(context.Background())
}

func (i LocalDiskArgs) ToLocalDiskPtrOutputWithContext(ctx context.Context) LocalDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalDiskOutput).ToLocalDiskPtrOutputWithContext(ctx)
}

// LocalDiskPtrInput is an input type that accepts LocalDiskArgs, LocalDiskPtr and LocalDiskPtrOutput values.
// You can construct a concrete instance of `LocalDiskPtrInput` via:
//
//	        LocalDiskArgs{...}
//
//	or:
//
//	        nil
type LocalDiskPtrInput interface {
	pulumi.Input

	ToLocalDiskPtrOutput() LocalDiskPtrOutput
	ToLocalDiskPtrOutputWithContext(context.Context) LocalDiskPtrOutput
}

type localDiskPtrType LocalDiskArgs

func LocalDiskPtr(v *LocalDiskArgs) LocalDiskPtrInput {
	return (*localDiskPtrType)(v)
}

func (*localDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalDisk)(nil)).Elem()
}

func (i *localDiskPtrType) ToLocalDiskPtrOutput() LocalDiskPtrOutput {
	return i.ToLocalDiskPtrOutputWithContext(context.Background())
}

func (i *localDiskPtrType) ToLocalDiskPtrOutputWithContext(ctx context.Context) LocalDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalDiskPtrOutput)
}

func (i *localDiskPtrType) ToOutput(ctx context.Context) pulumix.Output[*LocalDisk] {
	return pulumix.Output[*LocalDisk]{
		OutputState: i.ToLocalDiskPtrOutputWithContext(ctx).OutputState,
	}
}

// A Local attached disk resource.
type LocalDiskOutput struct{ *pulumi.OutputState }

func (LocalDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalDisk)(nil)).Elem()
}

func (o LocalDiskOutput) ToLocalDiskOutput() LocalDiskOutput {
	return o
}

func (o LocalDiskOutput) ToLocalDiskOutputWithContext(ctx context.Context) LocalDiskOutput {
	return o
}

func (o LocalDiskOutput) ToLocalDiskPtrOutput() LocalDiskPtrOutput {
	return o.ToLocalDiskPtrOutputWithContext(context.Background())
}

func (o LocalDiskOutput) ToLocalDiskPtrOutputWithContext(ctx context.Context) LocalDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocalDisk) *LocalDisk {
		return &v
	}).(LocalDiskPtrOutput)
}

func (o LocalDiskOutput) ToOutput(ctx context.Context) pulumix.Output[LocalDisk] {
	return pulumix.Output[LocalDisk]{
		OutputState: o.OutputState,
	}
}

// Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
func (o LocalDiskOutput) InitializeParams() LocalDiskInitializeParamsPtrOutput {
	return o.ApplyT(func(v LocalDisk) *LocalDiskInitializeParams { return v.InitializeParams }).(LocalDiskInitializeParamsPtrOutput)
}

// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: * `NVME` * `SCSI`
func (o LocalDiskOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalDisk) *string { return v.Interface }).(pulumi.StringPtrOutput)
}

// The mode in which to attach this disk, either `READ_WRITE` or `READ_ONLY`. If not specified, the default is to attach the disk in `READ_WRITE` mode. Valid values: * `READ_ONLY` * `READ_WRITE`
func (o LocalDiskOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalDisk) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Specifies a valid partial or full URL to an existing Persistent Disk resource.
func (o LocalDiskOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalDisk) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Specifies the type of the disk, either `SCRATCH` or `PERSISTENT`. If not specified, the default is `PERSISTENT`. Valid values: * `PERSISTENT` * `SCRATCH`
func (o LocalDiskOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalDisk) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type LocalDiskPtrOutput struct{ *pulumi.OutputState }

func (LocalDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalDisk)(nil)).Elem()
}

func (o LocalDiskPtrOutput) ToLocalDiskPtrOutput() LocalDiskPtrOutput {
	return o
}

func (o LocalDiskPtrOutput) ToLocalDiskPtrOutputWithContext(ctx context.Context) LocalDiskPtrOutput {
	return o
}

func (o LocalDiskPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LocalDisk] {
	return pulumix.Output[*LocalDisk]{
		OutputState: o.OutputState,
	}
}

func (o LocalDiskPtrOutput) Elem() LocalDiskOutput {
	return o.ApplyT(func(v *LocalDisk) LocalDisk {
		if v != nil {
			return *v
		}
		var ret LocalDisk
		return ret
	}).(LocalDiskOutput)
}

// Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
func (o LocalDiskPtrOutput) InitializeParams() LocalDiskInitializeParamsPtrOutput {
	return o.ApplyT(func(v *LocalDisk) *LocalDiskInitializeParams {
		if v == nil {
			return nil
		}
		return v.InitializeParams
	}).(LocalDiskInitializeParamsPtrOutput)
}

// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: * `NVME` * `SCSI`
func (o LocalDiskPtrOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalDisk) *string {
		if v == nil {
			return nil
		}
		return v.Interface
	}).(pulumi.StringPtrOutput)
}

// The mode in which to attach this disk, either `READ_WRITE` or `READ_ONLY`. If not specified, the default is to attach the disk in `READ_WRITE` mode. Valid values: * `READ_ONLY` * `READ_WRITE`
func (o LocalDiskPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalDisk) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Specifies a valid partial or full URL to an existing Persistent Disk resource.
func (o LocalDiskPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalDisk) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

// Specifies the type of the disk, either `SCRATCH` or `PERSISTENT`. If not specified, the default is `PERSISTENT`. Valid values: * `PERSISTENT` * `SCRATCH`
func (o LocalDiskPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalDisk) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new runtime. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
type LocalDiskInitializeParams struct {
	// Optional. Provide this property when creating the disk.
	Description *string `pulumi:"description"`
	// Optional. Specifies the disk name. If not specified, the default is to use the name of the instance. If the disk with the instance name exists already in the given zone/region, a new name will be automatically generated.
	DiskName *string `pulumi:"diskName"`
	// Optional. Specifies the size of the disk in base-2 GB. If not specified, the disk will be the same size as the image (usually 10GB). If specified, the size must be equal to or larger than 10GB. Default 100 GB.
	DiskSizeGb *string `pulumi:"diskSizeGb"`
	// Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
	DiskType *LocalDiskInitializeParamsDiskType `pulumi:"diskType"`
	// Optional. Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
	Labels map[string]string `pulumi:"labels"`
}

// LocalDiskInitializeParamsInput is an input type that accepts LocalDiskInitializeParamsArgs and LocalDiskInitializeParamsOutput values.
// You can construct a concrete instance of `LocalDiskInitializeParamsInput` via:
//
//	LocalDiskInitializeParamsArgs{...}
type LocalDiskInitializeParamsInput interface {
	pulumi.Input

	ToLocalDiskInitializeParamsOutput() LocalDiskInitializeParamsOutput
	ToLocalDiskInitializeParamsOutputWithContext(context.Context) LocalDiskInitializeParamsOutput
}

// Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new runtime. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
type LocalDiskInitializeParamsArgs struct {
	// Optional. Provide this property when creating the disk.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Optional. Specifies the disk name. If not specified, the default is to use the name of the instance. If the disk with the instance name exists already in the given zone/region, a new name will be automatically generated.
	DiskName pulumi.StringPtrInput `pulumi:"diskName"`
	// Optional. Specifies the size of the disk in base-2 GB. If not specified, the disk will be the same size as the image (usually 10GB). If specified, the size must be equal to or larger than 10GB. Default 100 GB.
	DiskSizeGb pulumi.StringPtrInput `pulumi:"diskSizeGb"`
	// Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
	DiskType LocalDiskInitializeParamsDiskTypePtrInput `pulumi:"diskType"`
	// Optional. Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (LocalDiskInitializeParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalDiskInitializeParams)(nil)).Elem()
}

func (i LocalDiskInitializeParamsArgs) ToLocalDiskInitializeParamsOutput() LocalDiskInitializeParamsOutput {
	return i.ToLocalDiskInitializeParamsOutputWithContext(context.Background())
}

func (i LocalDiskInitializeParamsArgs) ToLocalDiskInitializeParamsOutputWithContext(ctx context.Context) LocalDiskInitializeParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalDiskInitializeParamsOutput)
}

func (i LocalDiskInitializeParamsArgs) ToOutput(ctx context.Context) pulumix.Output[LocalDiskInitializeParams] {
	return pulumix.Output[LocalDiskInitializeParams]{
		OutputState: i.ToLocalDiskInitializeParamsOutputWithContext(ctx).OutputState,
	}
}

func (i LocalDiskInitializeParamsArgs) ToLocalDiskInitializeParamsPtrOutput() LocalDiskInitializeParamsPtrOutput {
	return i.ToLocalDiskInitializeParamsPtrOutputWithContext(context.Background())
}

func (i LocalDiskInitializeParamsArgs) ToLocalDiskInitializeParamsPtrOutputWithContext(ctx context.Context) LocalDiskInitializeParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalDiskInitializeParamsOutput).ToLocalDiskInitializeParamsPtrOutputWithContext(ctx)
}

// LocalDiskInitializeParamsPtrInput is an input type that accepts LocalDiskInitializeParamsArgs, LocalDiskInitializeParamsPtr and LocalDiskInitializeParamsPtrOutput values.
// You can construct a concrete instance of `LocalDiskInitializeParamsPtrInput` via:
//
//	        LocalDiskInitializeParamsArgs{...}
//
//	or:
//
//	        nil
type LocalDiskInitializeParamsPtrInput interface {
	pulumi.Input

	ToLocalDiskInitializeParamsPtrOutput() LocalDiskInitializeParamsPtrOutput
	ToLocalDiskInitializeParamsPtrOutputWithContext(context.Context) LocalDiskInitializeParamsPtrOutput
}

type localDiskInitializeParamsPtrType LocalDiskInitializeParamsArgs

func LocalDiskInitializeParamsPtr(v *LocalDiskInitializeParamsArgs) LocalDiskInitializeParamsPtrInput {
	return (*localDiskInitializeParamsPtrType)(v)
}

func (*localDiskInitializeParamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalDiskInitializeParams)(nil)).Elem()
}

func (i *localDiskInitializeParamsPtrType) ToLocalDiskInitializeParamsPtrOutput() LocalDiskInitializeParamsPtrOutput {
	return i.ToLocalDiskInitializeParamsPtrOutputWithContext(context.Background())
}

func (i *localDiskInitializeParamsPtrType) ToLocalDiskInitializeParamsPtrOutputWithContext(ctx context.Context) LocalDiskInitializeParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocalDiskInitializeParamsPtrOutput)
}

func (i *localDiskInitializeParamsPtrType) ToOutput(ctx context.Context) pulumix.Output[*LocalDiskInitializeParams] {
	return pulumix.Output[*LocalDiskInitializeParams]{
		OutputState: i.ToLocalDiskInitializeParamsPtrOutputWithContext(ctx).OutputState,
	}
}

// Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new runtime. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
type LocalDiskInitializeParamsOutput struct{ *pulumi.OutputState }

func (LocalDiskInitializeParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalDiskInitializeParams)(nil)).Elem()
}

func (o LocalDiskInitializeParamsOutput) ToLocalDiskInitializeParamsOutput() LocalDiskInitializeParamsOutput {
	return o
}

func (o LocalDiskInitializeParamsOutput) ToLocalDiskInitializeParamsOutputWithContext(ctx context.Context) LocalDiskInitializeParamsOutput {
	return o
}

func (o LocalDiskInitializeParamsOutput) ToLocalDiskInitializeParamsPtrOutput() LocalDiskInitializeParamsPtrOutput {
	return o.ToLocalDiskInitializeParamsPtrOutputWithContext(context.Background())
}

func (o LocalDiskInitializeParamsOutput) ToLocalDiskInitializeParamsPtrOutputWithContext(ctx context.Context) LocalDiskInitializeParamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocalDiskInitializeParams) *LocalDiskInitializeParams {
		return &v
	}).(LocalDiskInitializeParamsPtrOutput)
}

func (o LocalDiskInitializeParamsOutput) ToOutput(ctx context.Context) pulumix.Output[LocalDiskInitializeParams] {
	return pulumix.Output[LocalDiskInitializeParams]{
		OutputState: o.OutputState,
	}
}

// Optional. Provide this property when creating the disk.
func (o LocalDiskInitializeParamsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalDiskInitializeParams) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional. Specifies the disk name. If not specified, the default is to use the name of the instance. If the disk with the instance name exists already in the given zone/region, a new name will be automatically generated.
func (o LocalDiskInitializeParamsOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalDiskInitializeParams) *string { return v.DiskName }).(pulumi.StringPtrOutput)
}

// Optional. Specifies the size of the disk in base-2 GB. If not specified, the disk will be the same size as the image (usually 10GB). If specified, the size must be equal to or larger than 10GB. Default 100 GB.
func (o LocalDiskInitializeParamsOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocalDiskInitializeParams) *string { return v.DiskSizeGb }).(pulumi.StringPtrOutput)
}

// Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
func (o LocalDiskInitializeParamsOutput) DiskType() LocalDiskInitializeParamsDiskTypePtrOutput {
	return o.ApplyT(func(v LocalDiskInitializeParams) *LocalDiskInitializeParamsDiskType { return v.DiskType }).(LocalDiskInitializeParamsDiskTypePtrOutput)
}

// Optional. Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
func (o LocalDiskInitializeParamsOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LocalDiskInitializeParams) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type LocalDiskInitializeParamsPtrOutput struct{ *pulumi.OutputState }

func (LocalDiskInitializeParamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocalDiskInitializeParams)(nil)).Elem()
}

func (o LocalDiskInitializeParamsPtrOutput) ToLocalDiskInitializeParamsPtrOutput() LocalDiskInitializeParamsPtrOutput {
	return o
}

func (o LocalDiskInitializeParamsPtrOutput) ToLocalDiskInitializeParamsPtrOutputWithContext(ctx context.Context) LocalDiskInitializeParamsPtrOutput {
	return o
}

func (o LocalDiskInitializeParamsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LocalDiskInitializeParams] {
	return pulumix.Output[*LocalDiskInitializeParams]{
		OutputState: o.OutputState,
	}
}

func (o LocalDiskInitializeParamsPtrOutput) Elem() LocalDiskInitializeParamsOutput {
	return o.ApplyT(func(v *LocalDiskInitializeParams) LocalDiskInitializeParams {
		if v != nil {
			return *v
		}
		var ret LocalDiskInitializeParams
		return ret
	}).(LocalDiskInitializeParamsOutput)
}

// Optional. Provide this property when creating the disk.
func (o LocalDiskInitializeParamsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalDiskInitializeParams) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Optional. Specifies the disk name. If not specified, the default is to use the name of the instance. If the disk with the instance name exists already in the given zone/region, a new name will be automatically generated.
func (o LocalDiskInitializeParamsPtrOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalDiskInitializeParams) *string {
		if v == nil {
			return nil
		}
		return v.DiskName
	}).(pulumi.StringPtrOutput)
}

// Optional. Specifies the size of the disk in base-2 GB. If not specified, the disk will be the same size as the image (usually 10GB). If specified, the size must be equal to or larger than 10GB. Default 100 GB.
func (o LocalDiskInitializeParamsPtrOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocalDiskInitializeParams) *string {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.StringPtrOutput)
}

// Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
func (o LocalDiskInitializeParamsPtrOutput) DiskType() LocalDiskInitializeParamsDiskTypePtrOutput {
	return o.ApplyT(func(v *LocalDiskInitializeParams) *LocalDiskInitializeParamsDiskType {
		if v == nil {
			return nil
		}
		return v.DiskType
	}).(LocalDiskInitializeParamsDiskTypePtrOutput)
}

// Optional. Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
func (o LocalDiskInitializeParamsPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LocalDiskInitializeParams) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new runtime. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
type LocalDiskInitializeParamsResponse struct {
	// Optional. Provide this property when creating the disk.
	Description string `pulumi:"description"`
	// Optional. Specifies the disk name. If not specified, the default is to use the name of the instance. If the disk with the instance name exists already in the given zone/region, a new name will be automatically generated.
	DiskName string `pulumi:"diskName"`
	// Optional. Specifies the size of the disk in base-2 GB. If not specified, the disk will be the same size as the image (usually 10GB). If specified, the size must be equal to or larger than 10GB. Default 100 GB.
	DiskSizeGb string `pulumi:"diskSizeGb"`
	// Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
	DiskType string `pulumi:"diskType"`
	// Optional. Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
	Labels map[string]string `pulumi:"labels"`
}

// Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new runtime. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
type LocalDiskInitializeParamsResponseOutput struct{ *pulumi.OutputState }

func (LocalDiskInitializeParamsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalDiskInitializeParamsResponse)(nil)).Elem()
}

func (o LocalDiskInitializeParamsResponseOutput) ToLocalDiskInitializeParamsResponseOutput() LocalDiskInitializeParamsResponseOutput {
	return o
}

func (o LocalDiskInitializeParamsResponseOutput) ToLocalDiskInitializeParamsResponseOutputWithContext(ctx context.Context) LocalDiskInitializeParamsResponseOutput {
	return o
}

func (o LocalDiskInitializeParamsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LocalDiskInitializeParamsResponse] {
	return pulumix.Output[LocalDiskInitializeParamsResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Provide this property when creating the disk.
func (o LocalDiskInitializeParamsResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LocalDiskInitializeParamsResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. Specifies the disk name. If not specified, the default is to use the name of the instance. If the disk with the instance name exists already in the given zone/region, a new name will be automatically generated.
func (o LocalDiskInitializeParamsResponseOutput) DiskName() pulumi.StringOutput {
	return o.ApplyT(func(v LocalDiskInitializeParamsResponse) string { return v.DiskName }).(pulumi.StringOutput)
}

// Optional. Specifies the size of the disk in base-2 GB. If not specified, the disk will be the same size as the image (usually 10GB). If specified, the size must be equal to or larger than 10GB. Default 100 GB.
func (o LocalDiskInitializeParamsResponseOutput) DiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v LocalDiskInitializeParamsResponse) string { return v.DiskSizeGb }).(pulumi.StringOutput)
}

// Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).
func (o LocalDiskInitializeParamsResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v LocalDiskInitializeParamsResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// Optional. Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
func (o LocalDiskInitializeParamsResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LocalDiskInitializeParamsResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// A Local attached disk resource.
type LocalDiskResponse struct {
	// Optional. Output only. Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
	AutoDelete bool `pulumi:"autoDelete"`
	// Optional. Output only. Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
	Boot bool `pulumi:"boot"`
	// Optional. Output only. Specifies a unique device name of your choice that is reflected into the `/dev/disk/by-id/google-*` tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
	DeviceName string `pulumi:"deviceName"`
	// Indicates a list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
	GuestOsFeatures []RuntimeGuestOsFeatureResponse `pulumi:"guestOsFeatures"`
	// A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
	Index int `pulumi:"index"`
	// Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
	InitializeParams LocalDiskInitializeParamsResponse `pulumi:"initializeParams"`
	// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: * `NVME` * `SCSI`
	Interface string `pulumi:"interface"`
	// Type of the resource. Always compute#attachedDisk for attached disks.
	Kind string `pulumi:"kind"`
	// Any valid publicly visible licenses.
	Licenses []string `pulumi:"licenses"`
	// The mode in which to attach this disk, either `READ_WRITE` or `READ_ONLY`. If not specified, the default is to attach the disk in `READ_WRITE` mode. Valid values: * `READ_ONLY` * `READ_WRITE`
	Mode string `pulumi:"mode"`
	// Specifies a valid partial or full URL to an existing Persistent Disk resource.
	Source string `pulumi:"source"`
	// Specifies the type of the disk, either `SCRATCH` or `PERSISTENT`. If not specified, the default is `PERSISTENT`. Valid values: * `PERSISTENT` * `SCRATCH`
	Type string `pulumi:"type"`
}

// A Local attached disk resource.
type LocalDiskResponseOutput struct{ *pulumi.OutputState }

func (LocalDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocalDiskResponse)(nil)).Elem()
}

func (o LocalDiskResponseOutput) ToLocalDiskResponseOutput() LocalDiskResponseOutput {
	return o
}

func (o LocalDiskResponseOutput) ToLocalDiskResponseOutputWithContext(ctx context.Context) LocalDiskResponseOutput {
	return o
}

func (o LocalDiskResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LocalDiskResponse] {
	return pulumix.Output[LocalDiskResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Output only. Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
func (o LocalDiskResponseOutput) AutoDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v LocalDiskResponse) bool { return v.AutoDelete }).(pulumi.BoolOutput)
}

// Optional. Output only. Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
func (o LocalDiskResponseOutput) Boot() pulumi.BoolOutput {
	return o.ApplyT(func(v LocalDiskResponse) bool { return v.Boot }).(pulumi.BoolOutput)
}

// Optional. Output only. Specifies a unique device name of your choice that is reflected into the `/dev/disk/by-id/google-*` tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
func (o LocalDiskResponseOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v LocalDiskResponse) string { return v.DeviceName }).(pulumi.StringOutput)
}

// Indicates a list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
func (o LocalDiskResponseOutput) GuestOsFeatures() RuntimeGuestOsFeatureResponseArrayOutput {
	return o.ApplyT(func(v LocalDiskResponse) []RuntimeGuestOsFeatureResponse { return v.GuestOsFeatures }).(RuntimeGuestOsFeatureResponseArrayOutput)
}

// A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
func (o LocalDiskResponseOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v LocalDiskResponse) int { return v.Index }).(pulumi.IntOutput)
}

// Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
func (o LocalDiskResponseOutput) InitializeParams() LocalDiskInitializeParamsResponseOutput {
	return o.ApplyT(func(v LocalDiskResponse) LocalDiskInitializeParamsResponse { return v.InitializeParams }).(LocalDiskInitializeParamsResponseOutput)
}

// Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: * `NVME` * `SCSI`
func (o LocalDiskResponseOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v LocalDiskResponse) string { return v.Interface }).(pulumi.StringOutput)
}

// Type of the resource. Always compute#attachedDisk for attached disks.
func (o LocalDiskResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LocalDiskResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Any valid publicly visible licenses.
func (o LocalDiskResponseOutput) Licenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LocalDiskResponse) []string { return v.Licenses }).(pulumi.StringArrayOutput)
}

// The mode in which to attach this disk, either `READ_WRITE` or `READ_ONLY`. If not specified, the default is to attach the disk in `READ_WRITE` mode. Valid values: * `READ_ONLY` * `READ_WRITE`
func (o LocalDiskResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v LocalDiskResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// Specifies a valid partial or full URL to an existing Persistent Disk resource.
func (o LocalDiskResponseOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v LocalDiskResponse) string { return v.Source }).(pulumi.StringOutput)
}

// Specifies the type of the disk, either `SCRATCH` or `PERSISTENT`. If not specified, the default is `PERSISTENT`. Valid values: * `PERSISTENT` * `SCRATCH`
func (o LocalDiskResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LocalDiskResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Reservation Affinity for consuming Zonal reservation.
type ReservationAffinity struct {
	// Optional. Type of reservation to consume
	ConsumeReservationType *ReservationAffinityConsumeReservationType `pulumi:"consumeReservationType"`
	// Optional. Corresponds to the label key of reservation resource.
	Key *string `pulumi:"key"`
	// Optional. Corresponds to the label values of reservation resource.
	Values []string `pulumi:"values"`
}

// ReservationAffinityInput is an input type that accepts ReservationAffinityArgs and ReservationAffinityOutput values.
// You can construct a concrete instance of `ReservationAffinityInput` via:
//
//	ReservationAffinityArgs{...}
type ReservationAffinityInput interface {
	pulumi.Input

	ToReservationAffinityOutput() ReservationAffinityOutput
	ToReservationAffinityOutputWithContext(context.Context) ReservationAffinityOutput
}

// Reservation Affinity for consuming Zonal reservation.
type ReservationAffinityArgs struct {
	// Optional. Type of reservation to consume
	ConsumeReservationType ReservationAffinityConsumeReservationTypePtrInput `pulumi:"consumeReservationType"`
	// Optional. Corresponds to the label key of reservation resource.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Optional. Corresponds to the label values of reservation resource.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ReservationAffinityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAffinity)(nil)).Elem()
}

func (i ReservationAffinityArgs) ToReservationAffinityOutput() ReservationAffinityOutput {
	return i.ToReservationAffinityOutputWithContext(context.Background())
}

func (i ReservationAffinityArgs) ToReservationAffinityOutputWithContext(ctx context.Context) ReservationAffinityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityOutput)
}

func (i ReservationAffinityArgs) ToOutput(ctx context.Context) pulumix.Output[ReservationAffinity] {
	return pulumix.Output[ReservationAffinity]{
		OutputState: i.ToReservationAffinityOutputWithContext(ctx).OutputState,
	}
}

func (i ReservationAffinityArgs) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return i.ToReservationAffinityPtrOutputWithContext(context.Background())
}

func (i ReservationAffinityArgs) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityOutput).ToReservationAffinityPtrOutputWithContext(ctx)
}

// ReservationAffinityPtrInput is an input type that accepts ReservationAffinityArgs, ReservationAffinityPtr and ReservationAffinityPtrOutput values.
// You can construct a concrete instance of `ReservationAffinityPtrInput` via:
//
//	        ReservationAffinityArgs{...}
//
//	or:
//
//	        nil
type ReservationAffinityPtrInput interface {
	pulumi.Input

	ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput
	ToReservationAffinityPtrOutputWithContext(context.Context) ReservationAffinityPtrOutput
}

type reservationAffinityPtrType ReservationAffinityArgs

func ReservationAffinityPtr(v *ReservationAffinityArgs) ReservationAffinityPtrInput {
	return (*reservationAffinityPtrType)(v)
}

func (*reservationAffinityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationAffinity)(nil)).Elem()
}

func (i *reservationAffinityPtrType) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return i.ToReservationAffinityPtrOutputWithContext(context.Background())
}

func (i *reservationAffinityPtrType) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationAffinityPtrOutput)
}

func (i *reservationAffinityPtrType) ToOutput(ctx context.Context) pulumix.Output[*ReservationAffinity] {
	return pulumix.Output[*ReservationAffinity]{
		OutputState: i.ToReservationAffinityPtrOutputWithContext(ctx).OutputState,
	}
}

// Reservation Affinity for consuming Zonal reservation.
type ReservationAffinityOutput struct{ *pulumi.OutputState }

func (ReservationAffinityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAffinity)(nil)).Elem()
}

func (o ReservationAffinityOutput) ToReservationAffinityOutput() ReservationAffinityOutput {
	return o
}

func (o ReservationAffinityOutput) ToReservationAffinityOutputWithContext(ctx context.Context) ReservationAffinityOutput {
	return o
}

func (o ReservationAffinityOutput) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return o.ToReservationAffinityPtrOutputWithContext(context.Background())
}

func (o ReservationAffinityOutput) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReservationAffinity) *ReservationAffinity {
		return &v
	}).(ReservationAffinityPtrOutput)
}

func (o ReservationAffinityOutput) ToOutput(ctx context.Context) pulumix.Output[ReservationAffinity] {
	return pulumix.Output[ReservationAffinity]{
		OutputState: o.OutputState,
	}
}

// Optional. Type of reservation to consume
func (o ReservationAffinityOutput) ConsumeReservationType() ReservationAffinityConsumeReservationTypePtrOutput {
	return o.ApplyT(func(v ReservationAffinity) *ReservationAffinityConsumeReservationType {
		return v.ConsumeReservationType
	}).(ReservationAffinityConsumeReservationTypePtrOutput)
}

// Optional. Corresponds to the label key of reservation resource.
func (o ReservationAffinityOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservationAffinity) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Optional. Corresponds to the label values of reservation resource.
func (o ReservationAffinityOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReservationAffinity) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ReservationAffinityPtrOutput struct{ *pulumi.OutputState }

func (ReservationAffinityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservationAffinity)(nil)).Elem()
}

func (o ReservationAffinityPtrOutput) ToReservationAffinityPtrOutput() ReservationAffinityPtrOutput {
	return o
}

func (o ReservationAffinityPtrOutput) ToReservationAffinityPtrOutputWithContext(ctx context.Context) ReservationAffinityPtrOutput {
	return o
}

func (o ReservationAffinityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ReservationAffinity] {
	return pulumix.Output[*ReservationAffinity]{
		OutputState: o.OutputState,
	}
}

func (o ReservationAffinityPtrOutput) Elem() ReservationAffinityOutput {
	return o.ApplyT(func(v *ReservationAffinity) ReservationAffinity {
		if v != nil {
			return *v
		}
		var ret ReservationAffinity
		return ret
	}).(ReservationAffinityOutput)
}

// Optional. Type of reservation to consume
func (o ReservationAffinityPtrOutput) ConsumeReservationType() ReservationAffinityConsumeReservationTypePtrOutput {
	return o.ApplyT(func(v *ReservationAffinity) *ReservationAffinityConsumeReservationType {
		if v == nil {
			return nil
		}
		return v.ConsumeReservationType
	}).(ReservationAffinityConsumeReservationTypePtrOutput)
}

// Optional. Corresponds to the label key of reservation resource.
func (o ReservationAffinityPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReservationAffinity) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Optional. Corresponds to the label values of reservation resource.
func (o ReservationAffinityPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReservationAffinity) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Reservation Affinity for consuming Zonal reservation.
type ReservationAffinityResponse struct {
	// Optional. Type of reservation to consume
	ConsumeReservationType string `pulumi:"consumeReservationType"`
	// Optional. Corresponds to the label key of reservation resource.
	Key string `pulumi:"key"`
	// Optional. Corresponds to the label values of reservation resource.
	Values []string `pulumi:"values"`
}

// Reservation Affinity for consuming Zonal reservation.
type ReservationAffinityResponseOutput struct{ *pulumi.OutputState }

func (ReservationAffinityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationAffinityResponse)(nil)).Elem()
}

func (o ReservationAffinityResponseOutput) ToReservationAffinityResponseOutput() ReservationAffinityResponseOutput {
	return o
}

func (o ReservationAffinityResponseOutput) ToReservationAffinityResponseOutputWithContext(ctx context.Context) ReservationAffinityResponseOutput {
	return o
}

func (o ReservationAffinityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ReservationAffinityResponse] {
	return pulumix.Output[ReservationAffinityResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Type of reservation to consume
func (o ReservationAffinityResponseOutput) ConsumeReservationType() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationAffinityResponse) string { return v.ConsumeReservationType }).(pulumi.StringOutput)
}

// Optional. Corresponds to the label key of reservation resource.
func (o ReservationAffinityResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationAffinityResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Optional. Corresponds to the label values of reservation resource.
func (o ReservationAffinityResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReservationAffinityResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// Definition of the types of hardware accelerators that can be used. Definition of the types of hardware accelerators that can be used. See [Compute Engine AcceleratorTypes](https://cloud.google.com/compute/docs/reference/beta/acceleratorTypes). Examples: * `nvidia-tesla-k80` * `nvidia-tesla-p100` * `nvidia-tesla-v100` * `nvidia-tesla-p4` * `nvidia-tesla-t4` * `nvidia-tesla-a100`
type RuntimeAcceleratorConfig struct {
	// Count of cores of this accelerator.
	CoreCount *string `pulumi:"coreCount"`
	// Accelerator model.
	Type *RuntimeAcceleratorConfigType `pulumi:"type"`
}

// RuntimeAcceleratorConfigInput is an input type that accepts RuntimeAcceleratorConfigArgs and RuntimeAcceleratorConfigOutput values.
// You can construct a concrete instance of `RuntimeAcceleratorConfigInput` via:
//
//	RuntimeAcceleratorConfigArgs{...}
type RuntimeAcceleratorConfigInput interface {
	pulumi.Input

	ToRuntimeAcceleratorConfigOutput() RuntimeAcceleratorConfigOutput
	ToRuntimeAcceleratorConfigOutputWithContext(context.Context) RuntimeAcceleratorConfigOutput
}

// Definition of the types of hardware accelerators that can be used. Definition of the types of hardware accelerators that can be used. See [Compute Engine AcceleratorTypes](https://cloud.google.com/compute/docs/reference/beta/acceleratorTypes). Examples: * `nvidia-tesla-k80` * `nvidia-tesla-p100` * `nvidia-tesla-v100` * `nvidia-tesla-p4` * `nvidia-tesla-t4` * `nvidia-tesla-a100`
type RuntimeAcceleratorConfigArgs struct {
	// Count of cores of this accelerator.
	CoreCount pulumi.StringPtrInput `pulumi:"coreCount"`
	// Accelerator model.
	Type RuntimeAcceleratorConfigTypePtrInput `pulumi:"type"`
}

func (RuntimeAcceleratorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeAcceleratorConfig)(nil)).Elem()
}

func (i RuntimeAcceleratorConfigArgs) ToRuntimeAcceleratorConfigOutput() RuntimeAcceleratorConfigOutput {
	return i.ToRuntimeAcceleratorConfigOutputWithContext(context.Background())
}

func (i RuntimeAcceleratorConfigArgs) ToRuntimeAcceleratorConfigOutputWithContext(ctx context.Context) RuntimeAcceleratorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeAcceleratorConfigOutput)
}

func (i RuntimeAcceleratorConfigArgs) ToOutput(ctx context.Context) pulumix.Output[RuntimeAcceleratorConfig] {
	return pulumix.Output[RuntimeAcceleratorConfig]{
		OutputState: i.ToRuntimeAcceleratorConfigOutputWithContext(ctx).OutputState,
	}
}

func (i RuntimeAcceleratorConfigArgs) ToRuntimeAcceleratorConfigPtrOutput() RuntimeAcceleratorConfigPtrOutput {
	return i.ToRuntimeAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (i RuntimeAcceleratorConfigArgs) ToRuntimeAcceleratorConfigPtrOutputWithContext(ctx context.Context) RuntimeAcceleratorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeAcceleratorConfigOutput).ToRuntimeAcceleratorConfigPtrOutputWithContext(ctx)
}

// RuntimeAcceleratorConfigPtrInput is an input type that accepts RuntimeAcceleratorConfigArgs, RuntimeAcceleratorConfigPtr and RuntimeAcceleratorConfigPtrOutput values.
// You can construct a concrete instance of `RuntimeAcceleratorConfigPtrInput` via:
//
//	        RuntimeAcceleratorConfigArgs{...}
//
//	or:
//
//	        nil
type RuntimeAcceleratorConfigPtrInput interface {
	pulumi.Input

	ToRuntimeAcceleratorConfigPtrOutput() RuntimeAcceleratorConfigPtrOutput
	ToRuntimeAcceleratorConfigPtrOutputWithContext(context.Context) RuntimeAcceleratorConfigPtrOutput
}

type runtimeAcceleratorConfigPtrType RuntimeAcceleratorConfigArgs

func RuntimeAcceleratorConfigPtr(v *RuntimeAcceleratorConfigArgs) RuntimeAcceleratorConfigPtrInput {
	return (*runtimeAcceleratorConfigPtrType)(v)
}

func (*runtimeAcceleratorConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeAcceleratorConfig)(nil)).Elem()
}

func (i *runtimeAcceleratorConfigPtrType) ToRuntimeAcceleratorConfigPtrOutput() RuntimeAcceleratorConfigPtrOutput {
	return i.ToRuntimeAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (i *runtimeAcceleratorConfigPtrType) ToRuntimeAcceleratorConfigPtrOutputWithContext(ctx context.Context) RuntimeAcceleratorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeAcceleratorConfigPtrOutput)
}

func (i *runtimeAcceleratorConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*RuntimeAcceleratorConfig] {
	return pulumix.Output[*RuntimeAcceleratorConfig]{
		OutputState: i.ToRuntimeAcceleratorConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Definition of the types of hardware accelerators that can be used. Definition of the types of hardware accelerators that can be used. See [Compute Engine AcceleratorTypes](https://cloud.google.com/compute/docs/reference/beta/acceleratorTypes). Examples: * `nvidia-tesla-k80` * `nvidia-tesla-p100` * `nvidia-tesla-v100` * `nvidia-tesla-p4` * `nvidia-tesla-t4` * `nvidia-tesla-a100`
type RuntimeAcceleratorConfigOutput struct{ *pulumi.OutputState }

func (RuntimeAcceleratorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeAcceleratorConfig)(nil)).Elem()
}

func (o RuntimeAcceleratorConfigOutput) ToRuntimeAcceleratorConfigOutput() RuntimeAcceleratorConfigOutput {
	return o
}

func (o RuntimeAcceleratorConfigOutput) ToRuntimeAcceleratorConfigOutputWithContext(ctx context.Context) RuntimeAcceleratorConfigOutput {
	return o
}

func (o RuntimeAcceleratorConfigOutput) ToRuntimeAcceleratorConfigPtrOutput() RuntimeAcceleratorConfigPtrOutput {
	return o.ToRuntimeAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (o RuntimeAcceleratorConfigOutput) ToRuntimeAcceleratorConfigPtrOutputWithContext(ctx context.Context) RuntimeAcceleratorConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuntimeAcceleratorConfig) *RuntimeAcceleratorConfig {
		return &v
	}).(RuntimeAcceleratorConfigPtrOutput)
}

func (o RuntimeAcceleratorConfigOutput) ToOutput(ctx context.Context) pulumix.Output[RuntimeAcceleratorConfig] {
	return pulumix.Output[RuntimeAcceleratorConfig]{
		OutputState: o.OutputState,
	}
}

// Count of cores of this accelerator.
func (o RuntimeAcceleratorConfigOutput) CoreCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeAcceleratorConfig) *string { return v.CoreCount }).(pulumi.StringPtrOutput)
}

// Accelerator model.
func (o RuntimeAcceleratorConfigOutput) Type() RuntimeAcceleratorConfigTypePtrOutput {
	return o.ApplyT(func(v RuntimeAcceleratorConfig) *RuntimeAcceleratorConfigType { return v.Type }).(RuntimeAcceleratorConfigTypePtrOutput)
}

type RuntimeAcceleratorConfigPtrOutput struct{ *pulumi.OutputState }

func (RuntimeAcceleratorConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeAcceleratorConfig)(nil)).Elem()
}

func (o RuntimeAcceleratorConfigPtrOutput) ToRuntimeAcceleratorConfigPtrOutput() RuntimeAcceleratorConfigPtrOutput {
	return o
}

func (o RuntimeAcceleratorConfigPtrOutput) ToRuntimeAcceleratorConfigPtrOutputWithContext(ctx context.Context) RuntimeAcceleratorConfigPtrOutput {
	return o
}

func (o RuntimeAcceleratorConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RuntimeAcceleratorConfig] {
	return pulumix.Output[*RuntimeAcceleratorConfig]{
		OutputState: o.OutputState,
	}
}

func (o RuntimeAcceleratorConfigPtrOutput) Elem() RuntimeAcceleratorConfigOutput {
	return o.ApplyT(func(v *RuntimeAcceleratorConfig) RuntimeAcceleratorConfig {
		if v != nil {
			return *v
		}
		var ret RuntimeAcceleratorConfig
		return ret
	}).(RuntimeAcceleratorConfigOutput)
}

// Count of cores of this accelerator.
func (o RuntimeAcceleratorConfigPtrOutput) CoreCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeAcceleratorConfig) *string {
		if v == nil {
			return nil
		}
		return v.CoreCount
	}).(pulumi.StringPtrOutput)
}

// Accelerator model.
func (o RuntimeAcceleratorConfigPtrOutput) Type() RuntimeAcceleratorConfigTypePtrOutput {
	return o.ApplyT(func(v *RuntimeAcceleratorConfig) *RuntimeAcceleratorConfigType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(RuntimeAcceleratorConfigTypePtrOutput)
}

// Definition of the types of hardware accelerators that can be used. Definition of the types of hardware accelerators that can be used. See [Compute Engine AcceleratorTypes](https://cloud.google.com/compute/docs/reference/beta/acceleratorTypes). Examples: * `nvidia-tesla-k80` * `nvidia-tesla-p100` * `nvidia-tesla-v100` * `nvidia-tesla-p4` * `nvidia-tesla-t4` * `nvidia-tesla-a100`
type RuntimeAcceleratorConfigResponse struct {
	// Count of cores of this accelerator.
	CoreCount string `pulumi:"coreCount"`
	// Accelerator model.
	Type string `pulumi:"type"`
}

// Definition of the types of hardware accelerators that can be used. Definition of the types of hardware accelerators that can be used. See [Compute Engine AcceleratorTypes](https://cloud.google.com/compute/docs/reference/beta/acceleratorTypes). Examples: * `nvidia-tesla-k80` * `nvidia-tesla-p100` * `nvidia-tesla-v100` * `nvidia-tesla-p4` * `nvidia-tesla-t4` * `nvidia-tesla-a100`
type RuntimeAcceleratorConfigResponseOutput struct{ *pulumi.OutputState }

func (RuntimeAcceleratorConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeAcceleratorConfigResponse)(nil)).Elem()
}

func (o RuntimeAcceleratorConfigResponseOutput) ToRuntimeAcceleratorConfigResponseOutput() RuntimeAcceleratorConfigResponseOutput {
	return o
}

func (o RuntimeAcceleratorConfigResponseOutput) ToRuntimeAcceleratorConfigResponseOutputWithContext(ctx context.Context) RuntimeAcceleratorConfigResponseOutput {
	return o
}

func (o RuntimeAcceleratorConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RuntimeAcceleratorConfigResponse] {
	return pulumix.Output[RuntimeAcceleratorConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Count of cores of this accelerator.
func (o RuntimeAcceleratorConfigResponseOutput) CoreCount() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeAcceleratorConfigResponse) string { return v.CoreCount }).(pulumi.StringOutput)
}

// Accelerator model.
func (o RuntimeAcceleratorConfigResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeAcceleratorConfigResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies the login configuration for Runtime
type RuntimeAccessConfig struct {
	// The type of access mode this instance.
	AccessType *RuntimeAccessConfigAccessType `pulumi:"accessType"`
	// The owner of this runtime after creation. Format: `alias@example.com` Currently supports one owner only.
	RuntimeOwner *string `pulumi:"runtimeOwner"`
}

// RuntimeAccessConfigInput is an input type that accepts RuntimeAccessConfigArgs and RuntimeAccessConfigOutput values.
// You can construct a concrete instance of `RuntimeAccessConfigInput` via:
//
//	RuntimeAccessConfigArgs{...}
type RuntimeAccessConfigInput interface {
	pulumi.Input

	ToRuntimeAccessConfigOutput() RuntimeAccessConfigOutput
	ToRuntimeAccessConfigOutputWithContext(context.Context) RuntimeAccessConfigOutput
}

// Specifies the login configuration for Runtime
type RuntimeAccessConfigArgs struct {
	// The type of access mode this instance.
	AccessType RuntimeAccessConfigAccessTypePtrInput `pulumi:"accessType"`
	// The owner of this runtime after creation. Format: `alias@example.com` Currently supports one owner only.
	RuntimeOwner pulumi.StringPtrInput `pulumi:"runtimeOwner"`
}

func (RuntimeAccessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeAccessConfig)(nil)).Elem()
}

func (i RuntimeAccessConfigArgs) ToRuntimeAccessConfigOutput() RuntimeAccessConfigOutput {
	return i.ToRuntimeAccessConfigOutputWithContext(context.Background())
}

func (i RuntimeAccessConfigArgs) ToRuntimeAccessConfigOutputWithContext(ctx context.Context) RuntimeAccessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeAccessConfigOutput)
}

func (i RuntimeAccessConfigArgs) ToOutput(ctx context.Context) pulumix.Output[RuntimeAccessConfig] {
	return pulumix.Output[RuntimeAccessConfig]{
		OutputState: i.ToRuntimeAccessConfigOutputWithContext(ctx).OutputState,
	}
}

func (i RuntimeAccessConfigArgs) ToRuntimeAccessConfigPtrOutput() RuntimeAccessConfigPtrOutput {
	return i.ToRuntimeAccessConfigPtrOutputWithContext(context.Background())
}

func (i RuntimeAccessConfigArgs) ToRuntimeAccessConfigPtrOutputWithContext(ctx context.Context) RuntimeAccessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeAccessConfigOutput).ToRuntimeAccessConfigPtrOutputWithContext(ctx)
}

// RuntimeAccessConfigPtrInput is an input type that accepts RuntimeAccessConfigArgs, RuntimeAccessConfigPtr and RuntimeAccessConfigPtrOutput values.
// You can construct a concrete instance of `RuntimeAccessConfigPtrInput` via:
//
//	        RuntimeAccessConfigArgs{...}
//
//	or:
//
//	        nil
type RuntimeAccessConfigPtrInput interface {
	pulumi.Input

	ToRuntimeAccessConfigPtrOutput() RuntimeAccessConfigPtrOutput
	ToRuntimeAccessConfigPtrOutputWithContext(context.Context) RuntimeAccessConfigPtrOutput
}

type runtimeAccessConfigPtrType RuntimeAccessConfigArgs

func RuntimeAccessConfigPtr(v *RuntimeAccessConfigArgs) RuntimeAccessConfigPtrInput {
	return (*runtimeAccessConfigPtrType)(v)
}

func (*runtimeAccessConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeAccessConfig)(nil)).Elem()
}

func (i *runtimeAccessConfigPtrType) ToRuntimeAccessConfigPtrOutput() RuntimeAccessConfigPtrOutput {
	return i.ToRuntimeAccessConfigPtrOutputWithContext(context.Background())
}

func (i *runtimeAccessConfigPtrType) ToRuntimeAccessConfigPtrOutputWithContext(ctx context.Context) RuntimeAccessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeAccessConfigPtrOutput)
}

func (i *runtimeAccessConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*RuntimeAccessConfig] {
	return pulumix.Output[*RuntimeAccessConfig]{
		OutputState: i.ToRuntimeAccessConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies the login configuration for Runtime
type RuntimeAccessConfigOutput struct{ *pulumi.OutputState }

func (RuntimeAccessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeAccessConfig)(nil)).Elem()
}

func (o RuntimeAccessConfigOutput) ToRuntimeAccessConfigOutput() RuntimeAccessConfigOutput {
	return o
}

func (o RuntimeAccessConfigOutput) ToRuntimeAccessConfigOutputWithContext(ctx context.Context) RuntimeAccessConfigOutput {
	return o
}

func (o RuntimeAccessConfigOutput) ToRuntimeAccessConfigPtrOutput() RuntimeAccessConfigPtrOutput {
	return o.ToRuntimeAccessConfigPtrOutputWithContext(context.Background())
}

func (o RuntimeAccessConfigOutput) ToRuntimeAccessConfigPtrOutputWithContext(ctx context.Context) RuntimeAccessConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuntimeAccessConfig) *RuntimeAccessConfig {
		return &v
	}).(RuntimeAccessConfigPtrOutput)
}

func (o RuntimeAccessConfigOutput) ToOutput(ctx context.Context) pulumix.Output[RuntimeAccessConfig] {
	return pulumix.Output[RuntimeAccessConfig]{
		OutputState: o.OutputState,
	}
}

// The type of access mode this instance.
func (o RuntimeAccessConfigOutput) AccessType() RuntimeAccessConfigAccessTypePtrOutput {
	return o.ApplyT(func(v RuntimeAccessConfig) *RuntimeAccessConfigAccessType { return v.AccessType }).(RuntimeAccessConfigAccessTypePtrOutput)
}

// The owner of this runtime after creation. Format: `alias@example.com` Currently supports one owner only.
func (o RuntimeAccessConfigOutput) RuntimeOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeAccessConfig) *string { return v.RuntimeOwner }).(pulumi.StringPtrOutput)
}

type RuntimeAccessConfigPtrOutput struct{ *pulumi.OutputState }

func (RuntimeAccessConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeAccessConfig)(nil)).Elem()
}

func (o RuntimeAccessConfigPtrOutput) ToRuntimeAccessConfigPtrOutput() RuntimeAccessConfigPtrOutput {
	return o
}

func (o RuntimeAccessConfigPtrOutput) ToRuntimeAccessConfigPtrOutputWithContext(ctx context.Context) RuntimeAccessConfigPtrOutput {
	return o
}

func (o RuntimeAccessConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RuntimeAccessConfig] {
	return pulumix.Output[*RuntimeAccessConfig]{
		OutputState: o.OutputState,
	}
}

func (o RuntimeAccessConfigPtrOutput) Elem() RuntimeAccessConfigOutput {
	return o.ApplyT(func(v *RuntimeAccessConfig) RuntimeAccessConfig {
		if v != nil {
			return *v
		}
		var ret RuntimeAccessConfig
		return ret
	}).(RuntimeAccessConfigOutput)
}

// The type of access mode this instance.
func (o RuntimeAccessConfigPtrOutput) AccessType() RuntimeAccessConfigAccessTypePtrOutput {
	return o.ApplyT(func(v *RuntimeAccessConfig) *RuntimeAccessConfigAccessType {
		if v == nil {
			return nil
		}
		return v.AccessType
	}).(RuntimeAccessConfigAccessTypePtrOutput)
}

// The owner of this runtime after creation. Format: `alias@example.com` Currently supports one owner only.
func (o RuntimeAccessConfigPtrOutput) RuntimeOwner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeAccessConfig) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeOwner
	}).(pulumi.StringPtrOutput)
}

// Specifies the login configuration for Runtime
type RuntimeAccessConfigResponse struct {
	// The type of access mode this instance.
	AccessType string `pulumi:"accessType"`
	// The proxy endpoint that is used to access the runtime.
	ProxyUri string `pulumi:"proxyUri"`
	// The owner of this runtime after creation. Format: `alias@example.com` Currently supports one owner only.
	RuntimeOwner string `pulumi:"runtimeOwner"`
}

// Specifies the login configuration for Runtime
type RuntimeAccessConfigResponseOutput struct{ *pulumi.OutputState }

func (RuntimeAccessConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeAccessConfigResponse)(nil)).Elem()
}

func (o RuntimeAccessConfigResponseOutput) ToRuntimeAccessConfigResponseOutput() RuntimeAccessConfigResponseOutput {
	return o
}

func (o RuntimeAccessConfigResponseOutput) ToRuntimeAccessConfigResponseOutputWithContext(ctx context.Context) RuntimeAccessConfigResponseOutput {
	return o
}

func (o RuntimeAccessConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RuntimeAccessConfigResponse] {
	return pulumix.Output[RuntimeAccessConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The type of access mode this instance.
func (o RuntimeAccessConfigResponseOutput) AccessType() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeAccessConfigResponse) string { return v.AccessType }).(pulumi.StringOutput)
}

// The proxy endpoint that is used to access the runtime.
func (o RuntimeAccessConfigResponseOutput) ProxyUri() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeAccessConfigResponse) string { return v.ProxyUri }).(pulumi.StringOutput)
}

// The owner of this runtime after creation. Format: `alias@example.com` Currently supports one owner only.
func (o RuntimeAccessConfigResponseOutput) RuntimeOwner() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeAccessConfigResponse) string { return v.RuntimeOwner }).(pulumi.StringOutput)
}

// Optional. A list of features to enable on the guest operating system. Applicable only for bootable images. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options. Guest OS features for boot disk.
type RuntimeGuestOsFeatureResponse struct {
	// The ID of a supported feature. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options. Valid values: * `FEATURE_TYPE_UNSPECIFIED` * `MULTI_IP_SUBNET` * `SECURE_BOOT` * `UEFI_COMPATIBLE` * `VIRTIO_SCSI_MULTIQUEUE` * `WINDOWS`
	Type string `pulumi:"type"`
}

// Optional. A list of features to enable on the guest operating system. Applicable only for bootable images. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options. Guest OS features for boot disk.
type RuntimeGuestOsFeatureResponseOutput struct{ *pulumi.OutputState }

func (RuntimeGuestOsFeatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeGuestOsFeatureResponse)(nil)).Elem()
}

func (o RuntimeGuestOsFeatureResponseOutput) ToRuntimeGuestOsFeatureResponseOutput() RuntimeGuestOsFeatureResponseOutput {
	return o
}

func (o RuntimeGuestOsFeatureResponseOutput) ToRuntimeGuestOsFeatureResponseOutputWithContext(ctx context.Context) RuntimeGuestOsFeatureResponseOutput {
	return o
}

func (o RuntimeGuestOsFeatureResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RuntimeGuestOsFeatureResponse] {
	return pulumix.Output[RuntimeGuestOsFeatureResponse]{
		OutputState: o.OutputState,
	}
}

// The ID of a supported feature. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options. Valid values: * `FEATURE_TYPE_UNSPECIFIED` * `MULTI_IP_SUBNET` * `SECURE_BOOT` * `UEFI_COMPATIBLE` * `VIRTIO_SCSI_MULTIQUEUE` * `WINDOWS`
func (o RuntimeGuestOsFeatureResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeGuestOsFeatureResponse) string { return v.Type }).(pulumi.StringOutput)
}

type RuntimeGuestOsFeatureResponseArrayOutput struct{ *pulumi.OutputState }

func (RuntimeGuestOsFeatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuntimeGuestOsFeatureResponse)(nil)).Elem()
}

func (o RuntimeGuestOsFeatureResponseArrayOutput) ToRuntimeGuestOsFeatureResponseArrayOutput() RuntimeGuestOsFeatureResponseArrayOutput {
	return o
}

func (o RuntimeGuestOsFeatureResponseArrayOutput) ToRuntimeGuestOsFeatureResponseArrayOutputWithContext(ctx context.Context) RuntimeGuestOsFeatureResponseArrayOutput {
	return o
}

func (o RuntimeGuestOsFeatureResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RuntimeGuestOsFeatureResponse] {
	return pulumix.Output[[]RuntimeGuestOsFeatureResponse]{
		OutputState: o.OutputState,
	}
}

func (o RuntimeGuestOsFeatureResponseArrayOutput) Index(i pulumi.IntInput) RuntimeGuestOsFeatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuntimeGuestOsFeatureResponse {
		return vs[0].([]RuntimeGuestOsFeatureResponse)[vs[1].(int)]
	}).(RuntimeGuestOsFeatureResponseOutput)
}

// Contains runtime daemon metrics, such as OS and kernels and sessions stats.
type RuntimeMetricsResponse struct {
	// The system metrics.
	SystemMetrics map[string]string `pulumi:"systemMetrics"`
}

// Contains runtime daemon metrics, such as OS and kernels and sessions stats.
type RuntimeMetricsResponseOutput struct{ *pulumi.OutputState }

func (RuntimeMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeMetricsResponse)(nil)).Elem()
}

func (o RuntimeMetricsResponseOutput) ToRuntimeMetricsResponseOutput() RuntimeMetricsResponseOutput {
	return o
}

func (o RuntimeMetricsResponseOutput) ToRuntimeMetricsResponseOutputWithContext(ctx context.Context) RuntimeMetricsResponseOutput {
	return o
}

func (o RuntimeMetricsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RuntimeMetricsResponse] {
	return pulumix.Output[RuntimeMetricsResponse]{
		OutputState: o.OutputState,
	}
}

// The system metrics.
func (o RuntimeMetricsResponseOutput) SystemMetrics() pulumi.StringMapOutput {
	return o.ApplyT(func(v RuntimeMetricsResponse) map[string]string { return v.SystemMetrics }).(pulumi.StringMapOutput)
}

// A set of Shielded Instance options. Check [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
type RuntimeShieldedInstanceConfig struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
	EnableIntegrityMonitoring *bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
	EnableSecureBoot *bool `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm *bool `pulumi:"enableVtpm"`
}

// RuntimeShieldedInstanceConfigInput is an input type that accepts RuntimeShieldedInstanceConfigArgs and RuntimeShieldedInstanceConfigOutput values.
// You can construct a concrete instance of `RuntimeShieldedInstanceConfigInput` via:
//
//	RuntimeShieldedInstanceConfigArgs{...}
type RuntimeShieldedInstanceConfigInput interface {
	pulumi.Input

	ToRuntimeShieldedInstanceConfigOutput() RuntimeShieldedInstanceConfigOutput
	ToRuntimeShieldedInstanceConfigOutputWithContext(context.Context) RuntimeShieldedInstanceConfigOutput
}

// A set of Shielded Instance options. Check [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
type RuntimeShieldedInstanceConfigArgs struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
	EnableIntegrityMonitoring pulumi.BoolPtrInput `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
	EnableSecureBoot pulumi.BoolPtrInput `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm pulumi.BoolPtrInput `pulumi:"enableVtpm"`
}

func (RuntimeShieldedInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeShieldedInstanceConfig)(nil)).Elem()
}

func (i RuntimeShieldedInstanceConfigArgs) ToRuntimeShieldedInstanceConfigOutput() RuntimeShieldedInstanceConfigOutput {
	return i.ToRuntimeShieldedInstanceConfigOutputWithContext(context.Background())
}

func (i RuntimeShieldedInstanceConfigArgs) ToRuntimeShieldedInstanceConfigOutputWithContext(ctx context.Context) RuntimeShieldedInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeShieldedInstanceConfigOutput)
}

func (i RuntimeShieldedInstanceConfigArgs) ToOutput(ctx context.Context) pulumix.Output[RuntimeShieldedInstanceConfig] {
	return pulumix.Output[RuntimeShieldedInstanceConfig]{
		OutputState: i.ToRuntimeShieldedInstanceConfigOutputWithContext(ctx).OutputState,
	}
}

func (i RuntimeShieldedInstanceConfigArgs) ToRuntimeShieldedInstanceConfigPtrOutput() RuntimeShieldedInstanceConfigPtrOutput {
	return i.ToRuntimeShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i RuntimeShieldedInstanceConfigArgs) ToRuntimeShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) RuntimeShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeShieldedInstanceConfigOutput).ToRuntimeShieldedInstanceConfigPtrOutputWithContext(ctx)
}

// RuntimeShieldedInstanceConfigPtrInput is an input type that accepts RuntimeShieldedInstanceConfigArgs, RuntimeShieldedInstanceConfigPtr and RuntimeShieldedInstanceConfigPtrOutput values.
// You can construct a concrete instance of `RuntimeShieldedInstanceConfigPtrInput` via:
//
//	        RuntimeShieldedInstanceConfigArgs{...}
//
//	or:
//
//	        nil
type RuntimeShieldedInstanceConfigPtrInput interface {
	pulumi.Input

	ToRuntimeShieldedInstanceConfigPtrOutput() RuntimeShieldedInstanceConfigPtrOutput
	ToRuntimeShieldedInstanceConfigPtrOutputWithContext(context.Context) RuntimeShieldedInstanceConfigPtrOutput
}

type runtimeShieldedInstanceConfigPtrType RuntimeShieldedInstanceConfigArgs

func RuntimeShieldedInstanceConfigPtr(v *RuntimeShieldedInstanceConfigArgs) RuntimeShieldedInstanceConfigPtrInput {
	return (*runtimeShieldedInstanceConfigPtrType)(v)
}

func (*runtimeShieldedInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeShieldedInstanceConfig)(nil)).Elem()
}

func (i *runtimeShieldedInstanceConfigPtrType) ToRuntimeShieldedInstanceConfigPtrOutput() RuntimeShieldedInstanceConfigPtrOutput {
	return i.ToRuntimeShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *runtimeShieldedInstanceConfigPtrType) ToRuntimeShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) RuntimeShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeShieldedInstanceConfigPtrOutput)
}

func (i *runtimeShieldedInstanceConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*RuntimeShieldedInstanceConfig] {
	return pulumix.Output[*RuntimeShieldedInstanceConfig]{
		OutputState: i.ToRuntimeShieldedInstanceConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// A set of Shielded Instance options. Check [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
type RuntimeShieldedInstanceConfigOutput struct{ *pulumi.OutputState }

func (RuntimeShieldedInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeShieldedInstanceConfig)(nil)).Elem()
}

func (o RuntimeShieldedInstanceConfigOutput) ToRuntimeShieldedInstanceConfigOutput() RuntimeShieldedInstanceConfigOutput {
	return o
}

func (o RuntimeShieldedInstanceConfigOutput) ToRuntimeShieldedInstanceConfigOutputWithContext(ctx context.Context) RuntimeShieldedInstanceConfigOutput {
	return o
}

func (o RuntimeShieldedInstanceConfigOutput) ToRuntimeShieldedInstanceConfigPtrOutput() RuntimeShieldedInstanceConfigPtrOutput {
	return o.ToRuntimeShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (o RuntimeShieldedInstanceConfigOutput) ToRuntimeShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) RuntimeShieldedInstanceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuntimeShieldedInstanceConfig) *RuntimeShieldedInstanceConfig {
		return &v
	}).(RuntimeShieldedInstanceConfigPtrOutput)
}

func (o RuntimeShieldedInstanceConfigOutput) ToOutput(ctx context.Context) pulumix.Output[RuntimeShieldedInstanceConfig] {
	return pulumix.Output[RuntimeShieldedInstanceConfig]{
		OutputState: o.OutputState,
	}
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
func (o RuntimeShieldedInstanceConfigOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuntimeShieldedInstanceConfig) *bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
func (o RuntimeShieldedInstanceConfigOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuntimeShieldedInstanceConfig) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o RuntimeShieldedInstanceConfigOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuntimeShieldedInstanceConfig) *bool { return v.EnableVtpm }).(pulumi.BoolPtrOutput)
}

type RuntimeShieldedInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (RuntimeShieldedInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeShieldedInstanceConfig)(nil)).Elem()
}

func (o RuntimeShieldedInstanceConfigPtrOutput) ToRuntimeShieldedInstanceConfigPtrOutput() RuntimeShieldedInstanceConfigPtrOutput {
	return o
}

func (o RuntimeShieldedInstanceConfigPtrOutput) ToRuntimeShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) RuntimeShieldedInstanceConfigPtrOutput {
	return o
}

func (o RuntimeShieldedInstanceConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RuntimeShieldedInstanceConfig] {
	return pulumix.Output[*RuntimeShieldedInstanceConfig]{
		OutputState: o.OutputState,
	}
}

func (o RuntimeShieldedInstanceConfigPtrOutput) Elem() RuntimeShieldedInstanceConfigOutput {
	return o.ApplyT(func(v *RuntimeShieldedInstanceConfig) RuntimeShieldedInstanceConfig {
		if v != nil {
			return *v
		}
		var ret RuntimeShieldedInstanceConfig
		return ret
	}).(RuntimeShieldedInstanceConfigOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
func (o RuntimeShieldedInstanceConfigPtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuntimeShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
func (o RuntimeShieldedInstanceConfigPtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuntimeShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o RuntimeShieldedInstanceConfigPtrOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuntimeShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVtpm
	}).(pulumi.BoolPtrOutput)
}

// A set of Shielded Instance options. Check [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
type RuntimeShieldedInstanceConfigResponse struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
	EnableIntegrityMonitoring bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
	EnableSecureBoot bool `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm bool `pulumi:"enableVtpm"`
}

// A set of Shielded Instance options. Check [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
type RuntimeShieldedInstanceConfigResponseOutput struct{ *pulumi.OutputState }

func (RuntimeShieldedInstanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeShieldedInstanceConfigResponse)(nil)).Elem()
}

func (o RuntimeShieldedInstanceConfigResponseOutput) ToRuntimeShieldedInstanceConfigResponseOutput() RuntimeShieldedInstanceConfigResponseOutput {
	return o
}

func (o RuntimeShieldedInstanceConfigResponseOutput) ToRuntimeShieldedInstanceConfigResponseOutputWithContext(ctx context.Context) RuntimeShieldedInstanceConfigResponseOutput {
	return o
}

func (o RuntimeShieldedInstanceConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RuntimeShieldedInstanceConfigResponse] {
	return pulumix.Output[RuntimeShieldedInstanceConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
func (o RuntimeShieldedInstanceConfigResponseOutput) EnableIntegrityMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v RuntimeShieldedInstanceConfigResponse) bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
func (o RuntimeShieldedInstanceConfigResponseOutput) EnableSecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v RuntimeShieldedInstanceConfigResponse) bool { return v.EnableSecureBoot }).(pulumi.BoolOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o RuntimeShieldedInstanceConfigResponseOutput) EnableVtpm() pulumi.BoolOutput {
	return o.ApplyT(func(v RuntimeShieldedInstanceConfigResponse) bool { return v.EnableVtpm }).(pulumi.BoolOutput)
}

// Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
type RuntimeSoftwareConfig struct {
	// Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
	CustomGpuDriverPath *string `pulumi:"customGpuDriverPath"`
	// Bool indicating whether JupyterLab terminal will be available or not. Default: False
	DisableTerminal *bool `pulumi:"disableTerminal"`
	// Verifies core internal services are running. Default: True
	EnableHealthMonitoring *bool `pulumi:"enableHealthMonitoring"`
	// Runtime will automatically shutdown after idle_shutdown_time. Default: True
	IdleShutdown *bool `pulumi:"idleShutdown"`
	// Time in minutes to wait before shutting down runtime. Default: 180 minutes
	IdleShutdownTimeout *int `pulumi:"idleShutdownTimeout"`
	// Install Nvidia Driver automatically. Default: True
	InstallGpuDriver *bool `pulumi:"installGpuDriver"`
	// Optional. Use a list of container images to use as Kernels in the notebook instance.
	Kernels []ContainerImage `pulumi:"kernels"`
	// Bool indicating whether mixer client should be disabled. Default: False
	MixerDisabled *bool `pulumi:"mixerDisabled"`
	// Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
	NotebookUpgradeSchedule *string `pulumi:"notebookUpgradeSchedule"`
	// Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
	PostStartupScript *string `pulumi:"postStartupScript"`
	// Behavior for the post startup script.
	PostStartupScriptBehavior *RuntimeSoftwareConfigPostStartupScriptBehavior `pulumi:"postStartupScriptBehavior"`
}

// RuntimeSoftwareConfigInput is an input type that accepts RuntimeSoftwareConfigArgs and RuntimeSoftwareConfigOutput values.
// You can construct a concrete instance of `RuntimeSoftwareConfigInput` via:
//
//	RuntimeSoftwareConfigArgs{...}
type RuntimeSoftwareConfigInput interface {
	pulumi.Input

	ToRuntimeSoftwareConfigOutput() RuntimeSoftwareConfigOutput
	ToRuntimeSoftwareConfigOutputWithContext(context.Context) RuntimeSoftwareConfigOutput
}

// Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
type RuntimeSoftwareConfigArgs struct {
	// Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
	CustomGpuDriverPath pulumi.StringPtrInput `pulumi:"customGpuDriverPath"`
	// Bool indicating whether JupyterLab terminal will be available or not. Default: False
	DisableTerminal pulumi.BoolPtrInput `pulumi:"disableTerminal"`
	// Verifies core internal services are running. Default: True
	EnableHealthMonitoring pulumi.BoolPtrInput `pulumi:"enableHealthMonitoring"`
	// Runtime will automatically shutdown after idle_shutdown_time. Default: True
	IdleShutdown pulumi.BoolPtrInput `pulumi:"idleShutdown"`
	// Time in minutes to wait before shutting down runtime. Default: 180 minutes
	IdleShutdownTimeout pulumi.IntPtrInput `pulumi:"idleShutdownTimeout"`
	// Install Nvidia Driver automatically. Default: True
	InstallGpuDriver pulumi.BoolPtrInput `pulumi:"installGpuDriver"`
	// Optional. Use a list of container images to use as Kernels in the notebook instance.
	Kernels ContainerImageArrayInput `pulumi:"kernels"`
	// Bool indicating whether mixer client should be disabled. Default: False
	MixerDisabled pulumi.BoolPtrInput `pulumi:"mixerDisabled"`
	// Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
	NotebookUpgradeSchedule pulumi.StringPtrInput `pulumi:"notebookUpgradeSchedule"`
	// Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
	PostStartupScript pulumi.StringPtrInput `pulumi:"postStartupScript"`
	// Behavior for the post startup script.
	PostStartupScriptBehavior RuntimeSoftwareConfigPostStartupScriptBehaviorPtrInput `pulumi:"postStartupScriptBehavior"`
}

func (RuntimeSoftwareConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeSoftwareConfig)(nil)).Elem()
}

func (i RuntimeSoftwareConfigArgs) ToRuntimeSoftwareConfigOutput() RuntimeSoftwareConfigOutput {
	return i.ToRuntimeSoftwareConfigOutputWithContext(context.Background())
}

func (i RuntimeSoftwareConfigArgs) ToRuntimeSoftwareConfigOutputWithContext(ctx context.Context) RuntimeSoftwareConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeSoftwareConfigOutput)
}

func (i RuntimeSoftwareConfigArgs) ToOutput(ctx context.Context) pulumix.Output[RuntimeSoftwareConfig] {
	return pulumix.Output[RuntimeSoftwareConfig]{
		OutputState: i.ToRuntimeSoftwareConfigOutputWithContext(ctx).OutputState,
	}
}

func (i RuntimeSoftwareConfigArgs) ToRuntimeSoftwareConfigPtrOutput() RuntimeSoftwareConfigPtrOutput {
	return i.ToRuntimeSoftwareConfigPtrOutputWithContext(context.Background())
}

func (i RuntimeSoftwareConfigArgs) ToRuntimeSoftwareConfigPtrOutputWithContext(ctx context.Context) RuntimeSoftwareConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeSoftwareConfigOutput).ToRuntimeSoftwareConfigPtrOutputWithContext(ctx)
}

// RuntimeSoftwareConfigPtrInput is an input type that accepts RuntimeSoftwareConfigArgs, RuntimeSoftwareConfigPtr and RuntimeSoftwareConfigPtrOutput values.
// You can construct a concrete instance of `RuntimeSoftwareConfigPtrInput` via:
//
//	        RuntimeSoftwareConfigArgs{...}
//
//	or:
//
//	        nil
type RuntimeSoftwareConfigPtrInput interface {
	pulumi.Input

	ToRuntimeSoftwareConfigPtrOutput() RuntimeSoftwareConfigPtrOutput
	ToRuntimeSoftwareConfigPtrOutputWithContext(context.Context) RuntimeSoftwareConfigPtrOutput
}

type runtimeSoftwareConfigPtrType RuntimeSoftwareConfigArgs

func RuntimeSoftwareConfigPtr(v *RuntimeSoftwareConfigArgs) RuntimeSoftwareConfigPtrInput {
	return (*runtimeSoftwareConfigPtrType)(v)
}

func (*runtimeSoftwareConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeSoftwareConfig)(nil)).Elem()
}

func (i *runtimeSoftwareConfigPtrType) ToRuntimeSoftwareConfigPtrOutput() RuntimeSoftwareConfigPtrOutput {
	return i.ToRuntimeSoftwareConfigPtrOutputWithContext(context.Background())
}

func (i *runtimeSoftwareConfigPtrType) ToRuntimeSoftwareConfigPtrOutputWithContext(ctx context.Context) RuntimeSoftwareConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeSoftwareConfigPtrOutput)
}

func (i *runtimeSoftwareConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*RuntimeSoftwareConfig] {
	return pulumix.Output[*RuntimeSoftwareConfig]{
		OutputState: i.ToRuntimeSoftwareConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
type RuntimeSoftwareConfigOutput struct{ *pulumi.OutputState }

func (RuntimeSoftwareConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeSoftwareConfig)(nil)).Elem()
}

func (o RuntimeSoftwareConfigOutput) ToRuntimeSoftwareConfigOutput() RuntimeSoftwareConfigOutput {
	return o
}

func (o RuntimeSoftwareConfigOutput) ToRuntimeSoftwareConfigOutputWithContext(ctx context.Context) RuntimeSoftwareConfigOutput {
	return o
}

func (o RuntimeSoftwareConfigOutput) ToRuntimeSoftwareConfigPtrOutput() RuntimeSoftwareConfigPtrOutput {
	return o.ToRuntimeSoftwareConfigPtrOutputWithContext(context.Background())
}

func (o RuntimeSoftwareConfigOutput) ToRuntimeSoftwareConfigPtrOutputWithContext(ctx context.Context) RuntimeSoftwareConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuntimeSoftwareConfig) *RuntimeSoftwareConfig {
		return &v
	}).(RuntimeSoftwareConfigPtrOutput)
}

func (o RuntimeSoftwareConfigOutput) ToOutput(ctx context.Context) pulumix.Output[RuntimeSoftwareConfig] {
	return pulumix.Output[RuntimeSoftwareConfig]{
		OutputState: o.OutputState,
	}
}

// Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
func (o RuntimeSoftwareConfigOutput) CustomGpuDriverPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfig) *string { return v.CustomGpuDriverPath }).(pulumi.StringPtrOutput)
}

// Bool indicating whether JupyterLab terminal will be available or not. Default: False
func (o RuntimeSoftwareConfigOutput) DisableTerminal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfig) *bool { return v.DisableTerminal }).(pulumi.BoolPtrOutput)
}

// Verifies core internal services are running. Default: True
func (o RuntimeSoftwareConfigOutput) EnableHealthMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfig) *bool { return v.EnableHealthMonitoring }).(pulumi.BoolPtrOutput)
}

// Runtime will automatically shutdown after idle_shutdown_time. Default: True
func (o RuntimeSoftwareConfigOutput) IdleShutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfig) *bool { return v.IdleShutdown }).(pulumi.BoolPtrOutput)
}

// Time in minutes to wait before shutting down runtime. Default: 180 minutes
func (o RuntimeSoftwareConfigOutput) IdleShutdownTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfig) *int { return v.IdleShutdownTimeout }).(pulumi.IntPtrOutput)
}

// Install Nvidia Driver automatically. Default: True
func (o RuntimeSoftwareConfigOutput) InstallGpuDriver() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfig) *bool { return v.InstallGpuDriver }).(pulumi.BoolPtrOutput)
}

// Optional. Use a list of container images to use as Kernels in the notebook instance.
func (o RuntimeSoftwareConfigOutput) Kernels() ContainerImageArrayOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfig) []ContainerImage { return v.Kernels }).(ContainerImageArrayOutput)
}

// Bool indicating whether mixer client should be disabled. Default: False
func (o RuntimeSoftwareConfigOutput) MixerDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfig) *bool { return v.MixerDisabled }).(pulumi.BoolPtrOutput)
}

// Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
func (o RuntimeSoftwareConfigOutput) NotebookUpgradeSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfig) *string { return v.NotebookUpgradeSchedule }).(pulumi.StringPtrOutput)
}

// Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
func (o RuntimeSoftwareConfigOutput) PostStartupScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfig) *string { return v.PostStartupScript }).(pulumi.StringPtrOutput)
}

// Behavior for the post startup script.
func (o RuntimeSoftwareConfigOutput) PostStartupScriptBehavior() RuntimeSoftwareConfigPostStartupScriptBehaviorPtrOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfig) *RuntimeSoftwareConfigPostStartupScriptBehavior {
		return v.PostStartupScriptBehavior
	}).(RuntimeSoftwareConfigPostStartupScriptBehaviorPtrOutput)
}

type RuntimeSoftwareConfigPtrOutput struct{ *pulumi.OutputState }

func (RuntimeSoftwareConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeSoftwareConfig)(nil)).Elem()
}

func (o RuntimeSoftwareConfigPtrOutput) ToRuntimeSoftwareConfigPtrOutput() RuntimeSoftwareConfigPtrOutput {
	return o
}

func (o RuntimeSoftwareConfigPtrOutput) ToRuntimeSoftwareConfigPtrOutputWithContext(ctx context.Context) RuntimeSoftwareConfigPtrOutput {
	return o
}

func (o RuntimeSoftwareConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RuntimeSoftwareConfig] {
	return pulumix.Output[*RuntimeSoftwareConfig]{
		OutputState: o.OutputState,
	}
}

func (o RuntimeSoftwareConfigPtrOutput) Elem() RuntimeSoftwareConfigOutput {
	return o.ApplyT(func(v *RuntimeSoftwareConfig) RuntimeSoftwareConfig {
		if v != nil {
			return *v
		}
		var ret RuntimeSoftwareConfig
		return ret
	}).(RuntimeSoftwareConfigOutput)
}

// Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
func (o RuntimeSoftwareConfigPtrOutput) CustomGpuDriverPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeSoftwareConfig) *string {
		if v == nil {
			return nil
		}
		return v.CustomGpuDriverPath
	}).(pulumi.StringPtrOutput)
}

// Bool indicating whether JupyterLab terminal will be available or not. Default: False
func (o RuntimeSoftwareConfigPtrOutput) DisableTerminal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuntimeSoftwareConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DisableTerminal
	}).(pulumi.BoolPtrOutput)
}

// Verifies core internal services are running. Default: True
func (o RuntimeSoftwareConfigPtrOutput) EnableHealthMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuntimeSoftwareConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableHealthMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Runtime will automatically shutdown after idle_shutdown_time. Default: True
func (o RuntimeSoftwareConfigPtrOutput) IdleShutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuntimeSoftwareConfig) *bool {
		if v == nil {
			return nil
		}
		return v.IdleShutdown
	}).(pulumi.BoolPtrOutput)
}

// Time in minutes to wait before shutting down runtime. Default: 180 minutes
func (o RuntimeSoftwareConfigPtrOutput) IdleShutdownTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuntimeSoftwareConfig) *int {
		if v == nil {
			return nil
		}
		return v.IdleShutdownTimeout
	}).(pulumi.IntPtrOutput)
}

// Install Nvidia Driver automatically. Default: True
func (o RuntimeSoftwareConfigPtrOutput) InstallGpuDriver() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuntimeSoftwareConfig) *bool {
		if v == nil {
			return nil
		}
		return v.InstallGpuDriver
	}).(pulumi.BoolPtrOutput)
}

// Optional. Use a list of container images to use as Kernels in the notebook instance.
func (o RuntimeSoftwareConfigPtrOutput) Kernels() ContainerImageArrayOutput {
	return o.ApplyT(func(v *RuntimeSoftwareConfig) []ContainerImage {
		if v == nil {
			return nil
		}
		return v.Kernels
	}).(ContainerImageArrayOutput)
}

// Bool indicating whether mixer client should be disabled. Default: False
func (o RuntimeSoftwareConfigPtrOutput) MixerDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuntimeSoftwareConfig) *bool {
		if v == nil {
			return nil
		}
		return v.MixerDisabled
	}).(pulumi.BoolPtrOutput)
}

// Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
func (o RuntimeSoftwareConfigPtrOutput) NotebookUpgradeSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeSoftwareConfig) *string {
		if v == nil {
			return nil
		}
		return v.NotebookUpgradeSchedule
	}).(pulumi.StringPtrOutput)
}

// Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
func (o RuntimeSoftwareConfigPtrOutput) PostStartupScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeSoftwareConfig) *string {
		if v == nil {
			return nil
		}
		return v.PostStartupScript
	}).(pulumi.StringPtrOutput)
}

// Behavior for the post startup script.
func (o RuntimeSoftwareConfigPtrOutput) PostStartupScriptBehavior() RuntimeSoftwareConfigPostStartupScriptBehaviorPtrOutput {
	return o.ApplyT(func(v *RuntimeSoftwareConfig) *RuntimeSoftwareConfigPostStartupScriptBehavior {
		if v == nil {
			return nil
		}
		return v.PostStartupScriptBehavior
	}).(RuntimeSoftwareConfigPostStartupScriptBehaviorPtrOutput)
}

// Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
type RuntimeSoftwareConfigResponse struct {
	// Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
	CustomGpuDriverPath string `pulumi:"customGpuDriverPath"`
	// Bool indicating whether JupyterLab terminal will be available or not. Default: False
	DisableTerminal bool `pulumi:"disableTerminal"`
	// Verifies core internal services are running. Default: True
	EnableHealthMonitoring bool `pulumi:"enableHealthMonitoring"`
	// Runtime will automatically shutdown after idle_shutdown_time. Default: True
	IdleShutdown bool `pulumi:"idleShutdown"`
	// Time in minutes to wait before shutting down runtime. Default: 180 minutes
	IdleShutdownTimeout int `pulumi:"idleShutdownTimeout"`
	// Install Nvidia Driver automatically. Default: True
	InstallGpuDriver bool `pulumi:"installGpuDriver"`
	// Optional. Use a list of container images to use as Kernels in the notebook instance.
	Kernels []ContainerImageResponse `pulumi:"kernels"`
	// Bool indicating whether mixer client should be disabled. Default: False
	MixerDisabled bool `pulumi:"mixerDisabled"`
	// Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
	NotebookUpgradeSchedule string `pulumi:"notebookUpgradeSchedule"`
	// Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
	PostStartupScript string `pulumi:"postStartupScript"`
	// Behavior for the post startup script.
	PostStartupScriptBehavior string `pulumi:"postStartupScriptBehavior"`
	// Bool indicating whether an newer image is available in an image family.
	Upgradeable bool `pulumi:"upgradeable"`
	// version of boot image such as M100, from release label of the image.
	Version string `pulumi:"version"`
}

// Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
type RuntimeSoftwareConfigResponseOutput struct{ *pulumi.OutputState }

func (RuntimeSoftwareConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeSoftwareConfigResponse)(nil)).Elem()
}

func (o RuntimeSoftwareConfigResponseOutput) ToRuntimeSoftwareConfigResponseOutput() RuntimeSoftwareConfigResponseOutput {
	return o
}

func (o RuntimeSoftwareConfigResponseOutput) ToRuntimeSoftwareConfigResponseOutputWithContext(ctx context.Context) RuntimeSoftwareConfigResponseOutput {
	return o
}

func (o RuntimeSoftwareConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RuntimeSoftwareConfigResponse] {
	return pulumix.Output[RuntimeSoftwareConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
func (o RuntimeSoftwareConfigResponseOutput) CustomGpuDriverPath() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfigResponse) string { return v.CustomGpuDriverPath }).(pulumi.StringOutput)
}

// Bool indicating whether JupyterLab terminal will be available or not. Default: False
func (o RuntimeSoftwareConfigResponseOutput) DisableTerminal() pulumi.BoolOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfigResponse) bool { return v.DisableTerminal }).(pulumi.BoolOutput)
}

// Verifies core internal services are running. Default: True
func (o RuntimeSoftwareConfigResponseOutput) EnableHealthMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfigResponse) bool { return v.EnableHealthMonitoring }).(pulumi.BoolOutput)
}

// Runtime will automatically shutdown after idle_shutdown_time. Default: True
func (o RuntimeSoftwareConfigResponseOutput) IdleShutdown() pulumi.BoolOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfigResponse) bool { return v.IdleShutdown }).(pulumi.BoolOutput)
}

// Time in minutes to wait before shutting down runtime. Default: 180 minutes
func (o RuntimeSoftwareConfigResponseOutput) IdleShutdownTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfigResponse) int { return v.IdleShutdownTimeout }).(pulumi.IntOutput)
}

// Install Nvidia Driver automatically. Default: True
func (o RuntimeSoftwareConfigResponseOutput) InstallGpuDriver() pulumi.BoolOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfigResponse) bool { return v.InstallGpuDriver }).(pulumi.BoolOutput)
}

// Optional. Use a list of container images to use as Kernels in the notebook instance.
func (o RuntimeSoftwareConfigResponseOutput) Kernels() ContainerImageResponseArrayOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfigResponse) []ContainerImageResponse { return v.Kernels }).(ContainerImageResponseArrayOutput)
}

// Bool indicating whether mixer client should be disabled. Default: False
func (o RuntimeSoftwareConfigResponseOutput) MixerDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfigResponse) bool { return v.MixerDisabled }).(pulumi.BoolOutput)
}

// Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
func (o RuntimeSoftwareConfigResponseOutput) NotebookUpgradeSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfigResponse) string { return v.NotebookUpgradeSchedule }).(pulumi.StringOutput)
}

// Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
func (o RuntimeSoftwareConfigResponseOutput) PostStartupScript() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfigResponse) string { return v.PostStartupScript }).(pulumi.StringOutput)
}

// Behavior for the post startup script.
func (o RuntimeSoftwareConfigResponseOutput) PostStartupScriptBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfigResponse) string { return v.PostStartupScriptBehavior }).(pulumi.StringOutput)
}

// Bool indicating whether an newer image is available in an image family.
func (o RuntimeSoftwareConfigResponseOutput) Upgradeable() pulumi.BoolOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfigResponse) bool { return v.Upgradeable }).(pulumi.BoolOutput)
}

// version of boot image such as M100, from release label of the image.
func (o RuntimeSoftwareConfigResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeSoftwareConfigResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus) to find a valid combination. TPUs are not supported.
type SchedulerAcceleratorConfig struct {
	// Count of cores of this accelerator.
	CoreCount *string `pulumi:"coreCount"`
	// Type of this accelerator.
	Type *SchedulerAcceleratorConfigType `pulumi:"type"`
}

// SchedulerAcceleratorConfigInput is an input type that accepts SchedulerAcceleratorConfigArgs and SchedulerAcceleratorConfigOutput values.
// You can construct a concrete instance of `SchedulerAcceleratorConfigInput` via:
//
//	SchedulerAcceleratorConfigArgs{...}
type SchedulerAcceleratorConfigInput interface {
	pulumi.Input

	ToSchedulerAcceleratorConfigOutput() SchedulerAcceleratorConfigOutput
	ToSchedulerAcceleratorConfigOutputWithContext(context.Context) SchedulerAcceleratorConfigOutput
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus) to find a valid combination. TPUs are not supported.
type SchedulerAcceleratorConfigArgs struct {
	// Count of cores of this accelerator.
	CoreCount pulumi.StringPtrInput `pulumi:"coreCount"`
	// Type of this accelerator.
	Type SchedulerAcceleratorConfigTypePtrInput `pulumi:"type"`
}

func (SchedulerAcceleratorConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulerAcceleratorConfig)(nil)).Elem()
}

func (i SchedulerAcceleratorConfigArgs) ToSchedulerAcceleratorConfigOutput() SchedulerAcceleratorConfigOutput {
	return i.ToSchedulerAcceleratorConfigOutputWithContext(context.Background())
}

func (i SchedulerAcceleratorConfigArgs) ToSchedulerAcceleratorConfigOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulerAcceleratorConfigOutput)
}

func (i SchedulerAcceleratorConfigArgs) ToOutput(ctx context.Context) pulumix.Output[SchedulerAcceleratorConfig] {
	return pulumix.Output[SchedulerAcceleratorConfig]{
		OutputState: i.ToSchedulerAcceleratorConfigOutputWithContext(ctx).OutputState,
	}
}

func (i SchedulerAcceleratorConfigArgs) ToSchedulerAcceleratorConfigPtrOutput() SchedulerAcceleratorConfigPtrOutput {
	return i.ToSchedulerAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (i SchedulerAcceleratorConfigArgs) ToSchedulerAcceleratorConfigPtrOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulerAcceleratorConfigOutput).ToSchedulerAcceleratorConfigPtrOutputWithContext(ctx)
}

// SchedulerAcceleratorConfigPtrInput is an input type that accepts SchedulerAcceleratorConfigArgs, SchedulerAcceleratorConfigPtr and SchedulerAcceleratorConfigPtrOutput values.
// You can construct a concrete instance of `SchedulerAcceleratorConfigPtrInput` via:
//
//	        SchedulerAcceleratorConfigArgs{...}
//
//	or:
//
//	        nil
type SchedulerAcceleratorConfigPtrInput interface {
	pulumi.Input

	ToSchedulerAcceleratorConfigPtrOutput() SchedulerAcceleratorConfigPtrOutput
	ToSchedulerAcceleratorConfigPtrOutputWithContext(context.Context) SchedulerAcceleratorConfigPtrOutput
}

type schedulerAcceleratorConfigPtrType SchedulerAcceleratorConfigArgs

func SchedulerAcceleratorConfigPtr(v *SchedulerAcceleratorConfigArgs) SchedulerAcceleratorConfigPtrInput {
	return (*schedulerAcceleratorConfigPtrType)(v)
}

func (*schedulerAcceleratorConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulerAcceleratorConfig)(nil)).Elem()
}

func (i *schedulerAcceleratorConfigPtrType) ToSchedulerAcceleratorConfigPtrOutput() SchedulerAcceleratorConfigPtrOutput {
	return i.ToSchedulerAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (i *schedulerAcceleratorConfigPtrType) ToSchedulerAcceleratorConfigPtrOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchedulerAcceleratorConfigPtrOutput)
}

func (i *schedulerAcceleratorConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*SchedulerAcceleratorConfig] {
	return pulumix.Output[*SchedulerAcceleratorConfig]{
		OutputState: i.ToSchedulerAcceleratorConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus) to find a valid combination. TPUs are not supported.
type SchedulerAcceleratorConfigOutput struct{ *pulumi.OutputState }

func (SchedulerAcceleratorConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulerAcceleratorConfig)(nil)).Elem()
}

func (o SchedulerAcceleratorConfigOutput) ToSchedulerAcceleratorConfigOutput() SchedulerAcceleratorConfigOutput {
	return o
}

func (o SchedulerAcceleratorConfigOutput) ToSchedulerAcceleratorConfigOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigOutput {
	return o
}

func (o SchedulerAcceleratorConfigOutput) ToSchedulerAcceleratorConfigPtrOutput() SchedulerAcceleratorConfigPtrOutput {
	return o.ToSchedulerAcceleratorConfigPtrOutputWithContext(context.Background())
}

func (o SchedulerAcceleratorConfigOutput) ToSchedulerAcceleratorConfigPtrOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchedulerAcceleratorConfig) *SchedulerAcceleratorConfig {
		return &v
	}).(SchedulerAcceleratorConfigPtrOutput)
}

func (o SchedulerAcceleratorConfigOutput) ToOutput(ctx context.Context) pulumix.Output[SchedulerAcceleratorConfig] {
	return pulumix.Output[SchedulerAcceleratorConfig]{
		OutputState: o.OutputState,
	}
}

// Count of cores of this accelerator.
func (o SchedulerAcceleratorConfigOutput) CoreCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchedulerAcceleratorConfig) *string { return v.CoreCount }).(pulumi.StringPtrOutput)
}

// Type of this accelerator.
func (o SchedulerAcceleratorConfigOutput) Type() SchedulerAcceleratorConfigTypePtrOutput {
	return o.ApplyT(func(v SchedulerAcceleratorConfig) *SchedulerAcceleratorConfigType { return v.Type }).(SchedulerAcceleratorConfigTypePtrOutput)
}

type SchedulerAcceleratorConfigPtrOutput struct{ *pulumi.OutputState }

func (SchedulerAcceleratorConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchedulerAcceleratorConfig)(nil)).Elem()
}

func (o SchedulerAcceleratorConfigPtrOutput) ToSchedulerAcceleratorConfigPtrOutput() SchedulerAcceleratorConfigPtrOutput {
	return o
}

func (o SchedulerAcceleratorConfigPtrOutput) ToSchedulerAcceleratorConfigPtrOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigPtrOutput {
	return o
}

func (o SchedulerAcceleratorConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SchedulerAcceleratorConfig] {
	return pulumix.Output[*SchedulerAcceleratorConfig]{
		OutputState: o.OutputState,
	}
}

func (o SchedulerAcceleratorConfigPtrOutput) Elem() SchedulerAcceleratorConfigOutput {
	return o.ApplyT(func(v *SchedulerAcceleratorConfig) SchedulerAcceleratorConfig {
		if v != nil {
			return *v
		}
		var ret SchedulerAcceleratorConfig
		return ret
	}).(SchedulerAcceleratorConfigOutput)
}

// Count of cores of this accelerator.
func (o SchedulerAcceleratorConfigPtrOutput) CoreCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchedulerAcceleratorConfig) *string {
		if v == nil {
			return nil
		}
		return v.CoreCount
	}).(pulumi.StringPtrOutput)
}

// Type of this accelerator.
func (o SchedulerAcceleratorConfigPtrOutput) Type() SchedulerAcceleratorConfigTypePtrOutput {
	return o.ApplyT(func(v *SchedulerAcceleratorConfig) *SchedulerAcceleratorConfigType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(SchedulerAcceleratorConfigTypePtrOutput)
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus) to find a valid combination. TPUs are not supported.
type SchedulerAcceleratorConfigResponse struct {
	// Count of cores of this accelerator.
	CoreCount string `pulumi:"coreCount"`
	// Type of this accelerator.
	Type string `pulumi:"type"`
}

// Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus) to find a valid combination. TPUs are not supported.
type SchedulerAcceleratorConfigResponseOutput struct{ *pulumi.OutputState }

func (SchedulerAcceleratorConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchedulerAcceleratorConfigResponse)(nil)).Elem()
}

func (o SchedulerAcceleratorConfigResponseOutput) ToSchedulerAcceleratorConfigResponseOutput() SchedulerAcceleratorConfigResponseOutput {
	return o
}

func (o SchedulerAcceleratorConfigResponseOutput) ToSchedulerAcceleratorConfigResponseOutputWithContext(ctx context.Context) SchedulerAcceleratorConfigResponseOutput {
	return o
}

func (o SchedulerAcceleratorConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SchedulerAcceleratorConfigResponse] {
	return pulumix.Output[SchedulerAcceleratorConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Count of cores of this accelerator.
func (o SchedulerAcceleratorConfigResponseOutput) CoreCount() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulerAcceleratorConfigResponse) string { return v.CoreCount }).(pulumi.StringOutput)
}

// Type of this accelerator.
func (o SchedulerAcceleratorConfigResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SchedulerAcceleratorConfigResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A set of Shielded Instance options. Check [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
type ShieldedInstanceConfig struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
	EnableIntegrityMonitoring *bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
	EnableSecureBoot *bool `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm *bool `pulumi:"enableVtpm"`
}

// ShieldedInstanceConfigInput is an input type that accepts ShieldedInstanceConfigArgs and ShieldedInstanceConfigOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigInput` via:
//
//	ShieldedInstanceConfigArgs{...}
type ShieldedInstanceConfigInput interface {
	pulumi.Input

	ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput
	ToShieldedInstanceConfigOutputWithContext(context.Context) ShieldedInstanceConfigOutput
}

// A set of Shielded Instance options. Check [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
type ShieldedInstanceConfigArgs struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
	EnableIntegrityMonitoring pulumi.BoolPtrInput `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
	EnableSecureBoot pulumi.BoolPtrInput `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm pulumi.BoolPtrInput `pulumi:"enableVtpm"`
}

func (ShieldedInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return i.ToShieldedInstanceConfigOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput)
}

func (i ShieldedInstanceConfigArgs) ToOutput(ctx context.Context) pulumix.Output[ShieldedInstanceConfig] {
	return pulumix.Output[ShieldedInstanceConfig]{
		OutputState: i.ToShieldedInstanceConfigOutputWithContext(ctx).OutputState,
	}
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i ShieldedInstanceConfigArgs) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigOutput).ToShieldedInstanceConfigPtrOutputWithContext(ctx)
}

// ShieldedInstanceConfigPtrInput is an input type that accepts ShieldedInstanceConfigArgs, ShieldedInstanceConfigPtr and ShieldedInstanceConfigPtrOutput values.
// You can construct a concrete instance of `ShieldedInstanceConfigPtrInput` via:
//
//	        ShieldedInstanceConfigArgs{...}
//
//	or:
//
//	        nil
type ShieldedInstanceConfigPtrInput interface {
	pulumi.Input

	ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput
	ToShieldedInstanceConfigPtrOutputWithContext(context.Context) ShieldedInstanceConfigPtrOutput
}

type shieldedInstanceConfigPtrType ShieldedInstanceConfigArgs

func ShieldedInstanceConfigPtr(v *ShieldedInstanceConfigArgs) ShieldedInstanceConfigPtrInput {
	return (*shieldedInstanceConfigPtrType)(v)
}

func (*shieldedInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return i.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *shieldedInstanceConfigPtrType) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShieldedInstanceConfigPtrOutput)
}

func (i *shieldedInstanceConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*ShieldedInstanceConfig] {
	return pulumix.Output[*ShieldedInstanceConfig]{
		OutputState: i.ToShieldedInstanceConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// A set of Shielded Instance options. Check [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
type ShieldedInstanceConfigOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutput() ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigOutputWithContext(ctx context.Context) ShieldedInstanceConfigOutput {
	return o
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o.ToShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (o ShieldedInstanceConfigOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ShieldedInstanceConfig) *ShieldedInstanceConfig {
		return &v
	}).(ShieldedInstanceConfigPtrOutput)
}

func (o ShieldedInstanceConfigOutput) ToOutput(ctx context.Context) pulumix.Output[ShieldedInstanceConfig] {
	return pulumix.Output[ShieldedInstanceConfig]{
		OutputState: o.OutputState,
	}
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
func (o ShieldedInstanceConfigOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
func (o ShieldedInstanceConfigOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShieldedInstanceConfig) *bool { return v.EnableVtpm }).(pulumi.BoolPtrOutput)
}

type ShieldedInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShieldedInstanceConfig)(nil)).Elem()
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutput() ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) ToShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) ShieldedInstanceConfigPtrOutput {
	return o
}

func (o ShieldedInstanceConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ShieldedInstanceConfig] {
	return pulumix.Output[*ShieldedInstanceConfig]{
		OutputState: o.OutputState,
	}
}

func (o ShieldedInstanceConfigPtrOutput) Elem() ShieldedInstanceConfigOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) ShieldedInstanceConfig {
		if v != nil {
			return *v
		}
		var ret ShieldedInstanceConfig
		return ret
	}).(ShieldedInstanceConfigOutput)
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
func (o ShieldedInstanceConfigPtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
func (o ShieldedInstanceConfigPtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigPtrOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVtpm
	}).(pulumi.BoolPtrOutput)
}

// A set of Shielded Instance options. Check [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
type ShieldedInstanceConfigResponse struct {
	// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
	EnableIntegrityMonitoring bool `pulumi:"enableIntegrityMonitoring"`
	// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
	EnableSecureBoot bool `pulumi:"enableSecureBoot"`
	// Defines whether the instance has the vTPM enabled. Enabled by default.
	EnableVtpm bool `pulumi:"enableVtpm"`
}

// A set of Shielded Instance options. Check [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.
type ShieldedInstanceConfigResponseOutput struct{ *pulumi.OutputState }

func (ShieldedInstanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShieldedInstanceConfigResponse)(nil)).Elem()
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponseOutput() ShieldedInstanceConfigResponseOutput {
	return o
}

func (o ShieldedInstanceConfigResponseOutput) ToShieldedInstanceConfigResponseOutputWithContext(ctx context.Context) ShieldedInstanceConfigResponseOutput {
	return o
}

func (o ShieldedInstanceConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ShieldedInstanceConfigResponse] {
	return pulumix.Output[ShieldedInstanceConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.
func (o ShieldedInstanceConfigResponseOutput) EnableIntegrityMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolOutput)
}

// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.
func (o ShieldedInstanceConfigResponseOutput) EnableSecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableSecureBoot }).(pulumi.BoolOutput)
}

// Defines whether the instance has the vTPM enabled. Enabled by default.
func (o ShieldedInstanceConfigResponseOutput) EnableVtpm() pulumi.BoolOutput {
	return o.ApplyT(func(v ShieldedInstanceConfigResponse) bool { return v.EnableVtpm }).(pulumi.BoolOutput)
}

// The entry of VM image upgrade history.
type UpgradeHistoryEntry struct {
	// Action. Rolloback or Upgrade.
	Action *UpgradeHistoryEntryAction `pulumi:"action"`
	// The container image before this instance upgrade.
	ContainerImage *string `pulumi:"containerImage"`
	// The time that this instance upgrade history entry is created.
	CreateTime *string `pulumi:"createTime"`
	// The framework of this notebook instance.
	Framework *string `pulumi:"framework"`
	// The snapshot of the boot disk of this notebook instance before upgrade.
	Snapshot *string `pulumi:"snapshot"`
	// The state of this instance upgrade history entry.
	State *UpgradeHistoryEntryState `pulumi:"state"`
	// Target VM Image. Format: `ainotebooks-vm/project/image-name/name`.
	TargetImage *string `pulumi:"targetImage"`
	// Target VM Version, like m63.
	TargetVersion *string `pulumi:"targetVersion"`
	// The version of the notebook instance before this upgrade.
	Version *string `pulumi:"version"`
	// The VM image before this instance upgrade.
	VmImage *string `pulumi:"vmImage"`
}

// UpgradeHistoryEntryInput is an input type that accepts UpgradeHistoryEntryArgs and UpgradeHistoryEntryOutput values.
// You can construct a concrete instance of `UpgradeHistoryEntryInput` via:
//
//	UpgradeHistoryEntryArgs{...}
type UpgradeHistoryEntryInput interface {
	pulumi.Input

	ToUpgradeHistoryEntryOutput() UpgradeHistoryEntryOutput
	ToUpgradeHistoryEntryOutputWithContext(context.Context) UpgradeHistoryEntryOutput
}

// The entry of VM image upgrade history.
type UpgradeHistoryEntryArgs struct {
	// Action. Rolloback or Upgrade.
	Action UpgradeHistoryEntryActionPtrInput `pulumi:"action"`
	// The container image before this instance upgrade.
	ContainerImage pulumi.StringPtrInput `pulumi:"containerImage"`
	// The time that this instance upgrade history entry is created.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// The framework of this notebook instance.
	Framework pulumi.StringPtrInput `pulumi:"framework"`
	// The snapshot of the boot disk of this notebook instance before upgrade.
	Snapshot pulumi.StringPtrInput `pulumi:"snapshot"`
	// The state of this instance upgrade history entry.
	State UpgradeHistoryEntryStatePtrInput `pulumi:"state"`
	// Target VM Image. Format: `ainotebooks-vm/project/image-name/name`.
	TargetImage pulumi.StringPtrInput `pulumi:"targetImage"`
	// Target VM Version, like m63.
	TargetVersion pulumi.StringPtrInput `pulumi:"targetVersion"`
	// The version of the notebook instance before this upgrade.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// The VM image before this instance upgrade.
	VmImage pulumi.StringPtrInput `pulumi:"vmImage"`
}

func (UpgradeHistoryEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeHistoryEntry)(nil)).Elem()
}

func (i UpgradeHistoryEntryArgs) ToUpgradeHistoryEntryOutput() UpgradeHistoryEntryOutput {
	return i.ToUpgradeHistoryEntryOutputWithContext(context.Background())
}

func (i UpgradeHistoryEntryArgs) ToUpgradeHistoryEntryOutputWithContext(ctx context.Context) UpgradeHistoryEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeHistoryEntryOutput)
}

func (i UpgradeHistoryEntryArgs) ToOutput(ctx context.Context) pulumix.Output[UpgradeHistoryEntry] {
	return pulumix.Output[UpgradeHistoryEntry]{
		OutputState: i.ToUpgradeHistoryEntryOutputWithContext(ctx).OutputState,
	}
}

// UpgradeHistoryEntryArrayInput is an input type that accepts UpgradeHistoryEntryArray and UpgradeHistoryEntryArrayOutput values.
// You can construct a concrete instance of `UpgradeHistoryEntryArrayInput` via:
//
//	UpgradeHistoryEntryArray{ UpgradeHistoryEntryArgs{...} }
type UpgradeHistoryEntryArrayInput interface {
	pulumi.Input

	ToUpgradeHistoryEntryArrayOutput() UpgradeHistoryEntryArrayOutput
	ToUpgradeHistoryEntryArrayOutputWithContext(context.Context) UpgradeHistoryEntryArrayOutput
}

type UpgradeHistoryEntryArray []UpgradeHistoryEntryInput

func (UpgradeHistoryEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeHistoryEntry)(nil)).Elem()
}

func (i UpgradeHistoryEntryArray) ToUpgradeHistoryEntryArrayOutput() UpgradeHistoryEntryArrayOutput {
	return i.ToUpgradeHistoryEntryArrayOutputWithContext(context.Background())
}

func (i UpgradeHistoryEntryArray) ToUpgradeHistoryEntryArrayOutputWithContext(ctx context.Context) UpgradeHistoryEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeHistoryEntryArrayOutput)
}

func (i UpgradeHistoryEntryArray) ToOutput(ctx context.Context) pulumix.Output[[]UpgradeHistoryEntry] {
	return pulumix.Output[[]UpgradeHistoryEntry]{
		OutputState: i.ToUpgradeHistoryEntryArrayOutputWithContext(ctx).OutputState,
	}
}

// The entry of VM image upgrade history.
type UpgradeHistoryEntryOutput struct{ *pulumi.OutputState }

func (UpgradeHistoryEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeHistoryEntry)(nil)).Elem()
}

func (o UpgradeHistoryEntryOutput) ToUpgradeHistoryEntryOutput() UpgradeHistoryEntryOutput {
	return o
}

func (o UpgradeHistoryEntryOutput) ToUpgradeHistoryEntryOutputWithContext(ctx context.Context) UpgradeHistoryEntryOutput {
	return o
}

func (o UpgradeHistoryEntryOutput) ToOutput(ctx context.Context) pulumix.Output[UpgradeHistoryEntry] {
	return pulumix.Output[UpgradeHistoryEntry]{
		OutputState: o.OutputState,
	}
}

// Action. Rolloback or Upgrade.
func (o UpgradeHistoryEntryOutput) Action() UpgradeHistoryEntryActionPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *UpgradeHistoryEntryAction { return v.Action }).(UpgradeHistoryEntryActionPtrOutput)
}

// The container image before this instance upgrade.
func (o UpgradeHistoryEntryOutput) ContainerImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.ContainerImage }).(pulumi.StringPtrOutput)
}

// The time that this instance upgrade history entry is created.
func (o UpgradeHistoryEntryOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// The framework of this notebook instance.
func (o UpgradeHistoryEntryOutput) Framework() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.Framework }).(pulumi.StringPtrOutput)
}

// The snapshot of the boot disk of this notebook instance before upgrade.
func (o UpgradeHistoryEntryOutput) Snapshot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.Snapshot }).(pulumi.StringPtrOutput)
}

// The state of this instance upgrade history entry.
func (o UpgradeHistoryEntryOutput) State() UpgradeHistoryEntryStatePtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *UpgradeHistoryEntryState { return v.State }).(UpgradeHistoryEntryStatePtrOutput)
}

// Target VM Image. Format: `ainotebooks-vm/project/image-name/name`.
func (o UpgradeHistoryEntryOutput) TargetImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.TargetImage }).(pulumi.StringPtrOutput)
}

// Target VM Version, like m63.
func (o UpgradeHistoryEntryOutput) TargetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.TargetVersion }).(pulumi.StringPtrOutput)
}

// The version of the notebook instance before this upgrade.
func (o UpgradeHistoryEntryOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// The VM image before this instance upgrade.
func (o UpgradeHistoryEntryOutput) VmImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpgradeHistoryEntry) *string { return v.VmImage }).(pulumi.StringPtrOutput)
}

type UpgradeHistoryEntryArrayOutput struct{ *pulumi.OutputState }

func (UpgradeHistoryEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeHistoryEntry)(nil)).Elem()
}

func (o UpgradeHistoryEntryArrayOutput) ToUpgradeHistoryEntryArrayOutput() UpgradeHistoryEntryArrayOutput {
	return o
}

func (o UpgradeHistoryEntryArrayOutput) ToUpgradeHistoryEntryArrayOutputWithContext(ctx context.Context) UpgradeHistoryEntryArrayOutput {
	return o
}

func (o UpgradeHistoryEntryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]UpgradeHistoryEntry] {
	return pulumix.Output[[]UpgradeHistoryEntry]{
		OutputState: o.OutputState,
	}
}

func (o UpgradeHistoryEntryArrayOutput) Index(i pulumi.IntInput) UpgradeHistoryEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpgradeHistoryEntry {
		return vs[0].([]UpgradeHistoryEntry)[vs[1].(int)]
	}).(UpgradeHistoryEntryOutput)
}

// The entry of VM image upgrade history.
type UpgradeHistoryEntryResponse struct {
	// Action. Rolloback or Upgrade.
	Action string `pulumi:"action"`
	// The container image before this instance upgrade.
	ContainerImage string `pulumi:"containerImage"`
	// The time that this instance upgrade history entry is created.
	CreateTime string `pulumi:"createTime"`
	// The framework of this notebook instance.
	Framework string `pulumi:"framework"`
	// The snapshot of the boot disk of this notebook instance before upgrade.
	Snapshot string `pulumi:"snapshot"`
	// The state of this instance upgrade history entry.
	State string `pulumi:"state"`
	// Target VM Image. Format: `ainotebooks-vm/project/image-name/name`.
	TargetImage string `pulumi:"targetImage"`
	// Target VM Version, like m63.
	TargetVersion string `pulumi:"targetVersion"`
	// The version of the notebook instance before this upgrade.
	Version string `pulumi:"version"`
	// The VM image before this instance upgrade.
	VmImage string `pulumi:"vmImage"`
}

// The entry of VM image upgrade history.
type UpgradeHistoryEntryResponseOutput struct{ *pulumi.OutputState }

func (UpgradeHistoryEntryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpgradeHistoryEntryResponse)(nil)).Elem()
}

func (o UpgradeHistoryEntryResponseOutput) ToUpgradeHistoryEntryResponseOutput() UpgradeHistoryEntryResponseOutput {
	return o
}

func (o UpgradeHistoryEntryResponseOutput) ToUpgradeHistoryEntryResponseOutputWithContext(ctx context.Context) UpgradeHistoryEntryResponseOutput {
	return o
}

func (o UpgradeHistoryEntryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UpgradeHistoryEntryResponse] {
	return pulumix.Output[UpgradeHistoryEntryResponse]{
		OutputState: o.OutputState,
	}
}

// Action. Rolloback or Upgrade.
func (o UpgradeHistoryEntryResponseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.Action }).(pulumi.StringOutput)
}

// The container image before this instance upgrade.
func (o UpgradeHistoryEntryResponseOutput) ContainerImage() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.ContainerImage }).(pulumi.StringOutput)
}

// The time that this instance upgrade history entry is created.
func (o UpgradeHistoryEntryResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The framework of this notebook instance.
func (o UpgradeHistoryEntryResponseOutput) Framework() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.Framework }).(pulumi.StringOutput)
}

// The snapshot of the boot disk of this notebook instance before upgrade.
func (o UpgradeHistoryEntryResponseOutput) Snapshot() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.Snapshot }).(pulumi.StringOutput)
}

// The state of this instance upgrade history entry.
func (o UpgradeHistoryEntryResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.State }).(pulumi.StringOutput)
}

// Target VM Image. Format: `ainotebooks-vm/project/image-name/name`.
func (o UpgradeHistoryEntryResponseOutput) TargetImage() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.TargetImage }).(pulumi.StringOutput)
}

// Target VM Version, like m63.
func (o UpgradeHistoryEntryResponseOutput) TargetVersion() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.TargetVersion }).(pulumi.StringOutput)
}

// The version of the notebook instance before this upgrade.
func (o UpgradeHistoryEntryResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.Version }).(pulumi.StringOutput)
}

// The VM image before this instance upgrade.
func (o UpgradeHistoryEntryResponseOutput) VmImage() pulumi.StringOutput {
	return o.ApplyT(func(v UpgradeHistoryEntryResponse) string { return v.VmImage }).(pulumi.StringOutput)
}

type UpgradeHistoryEntryResponseArrayOutput struct{ *pulumi.OutputState }

func (UpgradeHistoryEntryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UpgradeHistoryEntryResponse)(nil)).Elem()
}

func (o UpgradeHistoryEntryResponseArrayOutput) ToUpgradeHistoryEntryResponseArrayOutput() UpgradeHistoryEntryResponseArrayOutput {
	return o
}

func (o UpgradeHistoryEntryResponseArrayOutput) ToUpgradeHistoryEntryResponseArrayOutputWithContext(ctx context.Context) UpgradeHistoryEntryResponseArrayOutput {
	return o
}

func (o UpgradeHistoryEntryResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]UpgradeHistoryEntryResponse] {
	return pulumix.Output[[]UpgradeHistoryEntryResponse]{
		OutputState: o.OutputState,
	}
}

func (o UpgradeHistoryEntryResponseArrayOutput) Index(i pulumi.IntInput) UpgradeHistoryEntryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UpgradeHistoryEntryResponse {
		return vs[0].([]UpgradeHistoryEntryResponse)[vs[1].(int)]
	}).(UpgradeHistoryEntryResponseOutput)
}

// Parameters used in Vertex AI JobType executions.
type VertexAIParameters struct {
	// Environment variables. At most 100 environment variables can be specified and unique. Example: `GCP_BUCKET=gs://my-bucket/samples/`
	Env map[string]string `pulumi:"env"`
	// The full name of the Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the Job should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where `{project}` is a project number, as in `12345`, and `{network}` is a network name. Private services access must already be configured for the network. If left unspecified, the job is not peered with any network.
	Network *string `pulumi:"network"`
}

// VertexAIParametersInput is an input type that accepts VertexAIParametersArgs and VertexAIParametersOutput values.
// You can construct a concrete instance of `VertexAIParametersInput` via:
//
//	VertexAIParametersArgs{...}
type VertexAIParametersInput interface {
	pulumi.Input

	ToVertexAIParametersOutput() VertexAIParametersOutput
	ToVertexAIParametersOutputWithContext(context.Context) VertexAIParametersOutput
}

// Parameters used in Vertex AI JobType executions.
type VertexAIParametersArgs struct {
	// Environment variables. At most 100 environment variables can be specified and unique. Example: `GCP_BUCKET=gs://my-bucket/samples/`
	Env pulumi.StringMapInput `pulumi:"env"`
	// The full name of the Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the Job should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where `{project}` is a project number, as in `12345`, and `{network}` is a network name. Private services access must already be configured for the network. If left unspecified, the job is not peered with any network.
	Network pulumi.StringPtrInput `pulumi:"network"`
}

func (VertexAIParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VertexAIParameters)(nil)).Elem()
}

func (i VertexAIParametersArgs) ToVertexAIParametersOutput() VertexAIParametersOutput {
	return i.ToVertexAIParametersOutputWithContext(context.Background())
}

func (i VertexAIParametersArgs) ToVertexAIParametersOutputWithContext(ctx context.Context) VertexAIParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexAIParametersOutput)
}

func (i VertexAIParametersArgs) ToOutput(ctx context.Context) pulumix.Output[VertexAIParameters] {
	return pulumix.Output[VertexAIParameters]{
		OutputState: i.ToVertexAIParametersOutputWithContext(ctx).OutputState,
	}
}

func (i VertexAIParametersArgs) ToVertexAIParametersPtrOutput() VertexAIParametersPtrOutput {
	return i.ToVertexAIParametersPtrOutputWithContext(context.Background())
}

func (i VertexAIParametersArgs) ToVertexAIParametersPtrOutputWithContext(ctx context.Context) VertexAIParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexAIParametersOutput).ToVertexAIParametersPtrOutputWithContext(ctx)
}

// VertexAIParametersPtrInput is an input type that accepts VertexAIParametersArgs, VertexAIParametersPtr and VertexAIParametersPtrOutput values.
// You can construct a concrete instance of `VertexAIParametersPtrInput` via:
//
//	        VertexAIParametersArgs{...}
//
//	or:
//
//	        nil
type VertexAIParametersPtrInput interface {
	pulumi.Input

	ToVertexAIParametersPtrOutput() VertexAIParametersPtrOutput
	ToVertexAIParametersPtrOutputWithContext(context.Context) VertexAIParametersPtrOutput
}

type vertexAIParametersPtrType VertexAIParametersArgs

func VertexAIParametersPtr(v *VertexAIParametersArgs) VertexAIParametersPtrInput {
	return (*vertexAIParametersPtrType)(v)
}

func (*vertexAIParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAIParameters)(nil)).Elem()
}

func (i *vertexAIParametersPtrType) ToVertexAIParametersPtrOutput() VertexAIParametersPtrOutput {
	return i.ToVertexAIParametersPtrOutputWithContext(context.Background())
}

func (i *vertexAIParametersPtrType) ToVertexAIParametersPtrOutputWithContext(ctx context.Context) VertexAIParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VertexAIParametersPtrOutput)
}

func (i *vertexAIParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*VertexAIParameters] {
	return pulumix.Output[*VertexAIParameters]{
		OutputState: i.ToVertexAIParametersPtrOutputWithContext(ctx).OutputState,
	}
}

// Parameters used in Vertex AI JobType executions.
type VertexAIParametersOutput struct{ *pulumi.OutputState }

func (VertexAIParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VertexAIParameters)(nil)).Elem()
}

func (o VertexAIParametersOutput) ToVertexAIParametersOutput() VertexAIParametersOutput {
	return o
}

func (o VertexAIParametersOutput) ToVertexAIParametersOutputWithContext(ctx context.Context) VertexAIParametersOutput {
	return o
}

func (o VertexAIParametersOutput) ToVertexAIParametersPtrOutput() VertexAIParametersPtrOutput {
	return o.ToVertexAIParametersPtrOutputWithContext(context.Background())
}

func (o VertexAIParametersOutput) ToVertexAIParametersPtrOutputWithContext(ctx context.Context) VertexAIParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VertexAIParameters) *VertexAIParameters {
		return &v
	}).(VertexAIParametersPtrOutput)
}

func (o VertexAIParametersOutput) ToOutput(ctx context.Context) pulumix.Output[VertexAIParameters] {
	return pulumix.Output[VertexAIParameters]{
		OutputState: o.OutputState,
	}
}

// Environment variables. At most 100 environment variables can be specified and unique. Example: `GCP_BUCKET=gs://my-bucket/samples/`
func (o VertexAIParametersOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v VertexAIParameters) map[string]string { return v.Env }).(pulumi.StringMapOutput)
}

// The full name of the Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the Job should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where `{project}` is a project number, as in `12345`, and `{network}` is a network name. Private services access must already be configured for the network. If left unspecified, the job is not peered with any network.
func (o VertexAIParametersOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VertexAIParameters) *string { return v.Network }).(pulumi.StringPtrOutput)
}

type VertexAIParametersPtrOutput struct{ *pulumi.OutputState }

func (VertexAIParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VertexAIParameters)(nil)).Elem()
}

func (o VertexAIParametersPtrOutput) ToVertexAIParametersPtrOutput() VertexAIParametersPtrOutput {
	return o
}

func (o VertexAIParametersPtrOutput) ToVertexAIParametersPtrOutputWithContext(ctx context.Context) VertexAIParametersPtrOutput {
	return o
}

func (o VertexAIParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VertexAIParameters] {
	return pulumix.Output[*VertexAIParameters]{
		OutputState: o.OutputState,
	}
}

func (o VertexAIParametersPtrOutput) Elem() VertexAIParametersOutput {
	return o.ApplyT(func(v *VertexAIParameters) VertexAIParameters {
		if v != nil {
			return *v
		}
		var ret VertexAIParameters
		return ret
	}).(VertexAIParametersOutput)
}

// Environment variables. At most 100 environment variables can be specified and unique. Example: `GCP_BUCKET=gs://my-bucket/samples/`
func (o VertexAIParametersPtrOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VertexAIParameters) map[string]string {
		if v == nil {
			return nil
		}
		return v.Env
	}).(pulumi.StringMapOutput)
}

// The full name of the Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the Job should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where `{project}` is a project number, as in `12345`, and `{network}` is a network name. Private services access must already be configured for the network. If left unspecified, the job is not peered with any network.
func (o VertexAIParametersPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VertexAIParameters) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// Parameters used in Vertex AI JobType executions.
type VertexAIParametersResponse struct {
	// Environment variables. At most 100 environment variables can be specified and unique. Example: `GCP_BUCKET=gs://my-bucket/samples/`
	Env map[string]string `pulumi:"env"`
	// The full name of the Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the Job should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where `{project}` is a project number, as in `12345`, and `{network}` is a network name. Private services access must already be configured for the network. If left unspecified, the job is not peered with any network.
	Network string `pulumi:"network"`
}

// Parameters used in Vertex AI JobType executions.
type VertexAIParametersResponseOutput struct{ *pulumi.OutputState }

func (VertexAIParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VertexAIParametersResponse)(nil)).Elem()
}

func (o VertexAIParametersResponseOutput) ToVertexAIParametersResponseOutput() VertexAIParametersResponseOutput {
	return o
}

func (o VertexAIParametersResponseOutput) ToVertexAIParametersResponseOutputWithContext(ctx context.Context) VertexAIParametersResponseOutput {
	return o
}

func (o VertexAIParametersResponseOutput) ToOutput(ctx context.Context) pulumix.Output[VertexAIParametersResponse] {
	return pulumix.Output[VertexAIParametersResponse]{
		OutputState: o.OutputState,
	}
}

// Environment variables. At most 100 environment variables can be specified and unique. Example: `GCP_BUCKET=gs://my-bucket/samples/`
func (o VertexAIParametersResponseOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v VertexAIParametersResponse) map[string]string { return v.Env }).(pulumi.StringMapOutput)
}

// The full name of the Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the Job should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where `{project}` is a project number, as in `12345`, and `{network}` is a network name. Private services access must already be configured for the network. If left unspecified, the job is not peered with any network.
func (o VertexAIParametersResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v VertexAIParametersResponse) string { return v.Network }).(pulumi.StringOutput)
}

// Runtime using Virtual Machine for computing.
type VirtualMachine struct {
	// Virtual Machine configuration settings.
	VirtualMachineConfig *VirtualMachineConfig `pulumi:"virtualMachineConfig"`
}

// VirtualMachineInput is an input type that accepts VirtualMachineArgs and VirtualMachineOutput values.
// You can construct a concrete instance of `VirtualMachineInput` via:
//
//	VirtualMachineArgs{...}
type VirtualMachineInput interface {
	pulumi.Input

	ToVirtualMachineOutput() VirtualMachineOutput
	ToVirtualMachineOutputWithContext(context.Context) VirtualMachineOutput
}

// Runtime using Virtual Machine for computing.
type VirtualMachineArgs struct {
	// Virtual Machine configuration settings.
	VirtualMachineConfig VirtualMachineConfigPtrInput `pulumi:"virtualMachineConfig"`
}

func (VirtualMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineArgs) ToVirtualMachineOutput() VirtualMachineOutput {
	return i.ToVirtualMachineOutputWithContext(context.Background())
}

func (i VirtualMachineArgs) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOutput)
}

func (i VirtualMachineArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachine] {
	return pulumix.Output[VirtualMachine]{
		OutputState: i.ToVirtualMachineOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineArgs) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return i.ToVirtualMachinePtrOutputWithContext(context.Background())
}

func (i VirtualMachineArgs) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOutput).ToVirtualMachinePtrOutputWithContext(ctx)
}

// VirtualMachinePtrInput is an input type that accepts VirtualMachineArgs, VirtualMachinePtr and VirtualMachinePtrOutput values.
// You can construct a concrete instance of `VirtualMachinePtrInput` via:
//
//	        VirtualMachineArgs{...}
//
//	or:
//
//	        nil
type VirtualMachinePtrInput interface {
	pulumi.Input

	ToVirtualMachinePtrOutput() VirtualMachinePtrOutput
	ToVirtualMachinePtrOutputWithContext(context.Context) VirtualMachinePtrOutput
}

type virtualMachinePtrType VirtualMachineArgs

func VirtualMachinePtr(v *VirtualMachineArgs) VirtualMachinePtrInput {
	return (*virtualMachinePtrType)(v)
}

func (*virtualMachinePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (i *virtualMachinePtrType) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return i.ToVirtualMachinePtrOutputWithContext(context.Background())
}

func (i *virtualMachinePtrType) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePtrOutput)
}

func (i *virtualMachinePtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachine] {
	return pulumix.Output[*VirtualMachine]{
		OutputState: i.ToVirtualMachinePtrOutputWithContext(ctx).OutputState,
	}
}

// Runtime using Virtual Machine for computing.
type VirtualMachineOutput struct{ *pulumi.OutputState }

func (VirtualMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineOutput) ToVirtualMachineOutput() VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return o.ToVirtualMachinePtrOutputWithContext(context.Background())
}

func (o VirtualMachineOutput) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachine) *VirtualMachine {
		return &v
	}).(VirtualMachinePtrOutput)
}

func (o VirtualMachineOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachine] {
	return pulumix.Output[VirtualMachine]{
		OutputState: o.OutputState,
	}
}

// Virtual Machine configuration settings.
func (o VirtualMachineOutput) VirtualMachineConfig() VirtualMachineConfigPtrOutput {
	return o.ApplyT(func(v VirtualMachine) *VirtualMachineConfig { return v.VirtualMachineConfig }).(VirtualMachineConfigPtrOutput)
}

type VirtualMachinePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachinePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (o VirtualMachinePtrOutput) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return o
}

func (o VirtualMachinePtrOutput) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return o
}

func (o VirtualMachinePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachine] {
	return pulumix.Output[*VirtualMachine]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachinePtrOutput) Elem() VirtualMachineOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachine {
		if v != nil {
			return *v
		}
		var ret VirtualMachine
		return ret
	}).(VirtualMachineOutput)
}

// Virtual Machine configuration settings.
func (o VirtualMachinePtrOutput) VirtualMachineConfig() VirtualMachineConfigPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) *VirtualMachineConfig {
		if v == nil {
			return nil
		}
		return v.VirtualMachineConfig
	}).(VirtualMachineConfigPtrOutput)
}

// The config settings for virtual machine.
type VirtualMachineConfig struct {
	// Optional. The Compute Engine accelerator configuration for this runtime.
	AcceleratorConfig *RuntimeAcceleratorConfig `pulumi:"acceleratorConfig"`
	// Optional. Boot image metadata used for runtime upgradeability.
	BootImage *BootImage `pulumi:"bootImage"`
	// Optional. Use a list of container images to use as Kernels in the notebook instance.
	ContainerImages []ContainerImage `pulumi:"containerImages"`
	// Data disk option configuration settings.
	DataDisk LocalDisk `pulumi:"dataDisk"`
	// Optional. Encryption settings for virtual machine data disk.
	EncryptionConfig *EncryptionConfig `pulumi:"encryptionConfig"`
	// Optional. If true, runtime will only have internal IP addresses. By default, runtimes are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each vm. This `internal_ip_only` restriction can only be enabled for subnetwork enabled networks, and all dependencies must be configured to be accessible without external IP addresses.
	InternalIpOnly *bool `pulumi:"internalIpOnly"`
	// Optional. The labels to associate with this runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
	Labels map[string]string `pulumi:"labels"`
	// The Compute Engine machine type used for runtimes. Short name is valid. Examples: * `n1-standard-2` * `e2-standard-8`
	MachineType string `pulumi:"machineType"`
	// Optional. The Compute Engine metadata entries to add to virtual machine. (see [Project and instance metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
	Metadata map[string]string `pulumi:"metadata"`
	// Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork. If neither `network` nor `subnet` is specified, the "default" network of the project is used, if it exists. A full URL or partial URI. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default` * `projects/[project_id]/global/networks/default` Runtimes are managed resources inside Google Infrastructure. Runtimes support the following network configurations: * Google Managed Network (Network & subnet are empty) * Consumer Project VPC (network & subnet are required). Requires configuring Private Service Access. * Shared VPC (network & subnet are required). Requires configuring Private Service Access.
	Network *string `pulumi:"network"`
	// Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
	NicType *VirtualMachineConfigNicType `pulumi:"nicType"`
	// Optional. Reserved IP Range name is used for VPC Peering. The subnetwork allocation will use the range *name* if it's assigned. Example: managed-notebooks-range-c PEERING_RANGE_NAME_3=managed-notebooks-range-c gcloud compute addresses create $PEERING_RANGE_NAME_3 \ --global \ --prefix-length=24 \ --description="Google Cloud Managed Notebooks Range 24 c" \ --network=$NETWORK \ --addresses=192.168.0.0 \ --purpose=VPC_PEERING Field value will be: `managed-notebooks-range-c`
	ReservedIpRange *string `pulumi:"reservedIpRange"`
	// Optional. Shielded VM Instance configuration settings.
	ShieldedInstanceConfig *RuntimeShieldedInstanceConfig `pulumi:"shieldedInstanceConfig"`
	// Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network. A full URL or partial URI are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/subnetworks/sub0` * `projects/[project_id]/regions/us-east1/subnetworks/sub0`
	Subnet *string `pulumi:"subnet"`
	// Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
	Tags []string `pulumi:"tags"`
}

// VirtualMachineConfigInput is an input type that accepts VirtualMachineConfigArgs and VirtualMachineConfigOutput values.
// You can construct a concrete instance of `VirtualMachineConfigInput` via:
//
//	VirtualMachineConfigArgs{...}
type VirtualMachineConfigInput interface {
	pulumi.Input

	ToVirtualMachineConfigOutput() VirtualMachineConfigOutput
	ToVirtualMachineConfigOutputWithContext(context.Context) VirtualMachineConfigOutput
}

// The config settings for virtual machine.
type VirtualMachineConfigArgs struct {
	// Optional. The Compute Engine accelerator configuration for this runtime.
	AcceleratorConfig RuntimeAcceleratorConfigPtrInput `pulumi:"acceleratorConfig"`
	// Optional. Boot image metadata used for runtime upgradeability.
	BootImage BootImagePtrInput `pulumi:"bootImage"`
	// Optional. Use a list of container images to use as Kernels in the notebook instance.
	ContainerImages ContainerImageArrayInput `pulumi:"containerImages"`
	// Data disk option configuration settings.
	DataDisk LocalDiskInput `pulumi:"dataDisk"`
	// Optional. Encryption settings for virtual machine data disk.
	EncryptionConfig EncryptionConfigPtrInput `pulumi:"encryptionConfig"`
	// Optional. If true, runtime will only have internal IP addresses. By default, runtimes are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each vm. This `internal_ip_only` restriction can only be enabled for subnetwork enabled networks, and all dependencies must be configured to be accessible without external IP addresses.
	InternalIpOnly pulumi.BoolPtrInput `pulumi:"internalIpOnly"`
	// Optional. The labels to associate with this runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The Compute Engine machine type used for runtimes. Short name is valid. Examples: * `n1-standard-2` * `e2-standard-8`
	MachineType pulumi.StringInput `pulumi:"machineType"`
	// Optional. The Compute Engine metadata entries to add to virtual machine. (see [Project and instance metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork. If neither `network` nor `subnet` is specified, the "default" network of the project is used, if it exists. A full URL or partial URI. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default` * `projects/[project_id]/global/networks/default` Runtimes are managed resources inside Google Infrastructure. Runtimes support the following network configurations: * Google Managed Network (Network & subnet are empty) * Consumer Project VPC (network & subnet are required). Requires configuring Private Service Access. * Shared VPC (network & subnet are required). Requires configuring Private Service Access.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
	NicType VirtualMachineConfigNicTypePtrInput `pulumi:"nicType"`
	// Optional. Reserved IP Range name is used for VPC Peering. The subnetwork allocation will use the range *name* if it's assigned. Example: managed-notebooks-range-c PEERING_RANGE_NAME_3=managed-notebooks-range-c gcloud compute addresses create $PEERING_RANGE_NAME_3 \ --global \ --prefix-length=24 \ --description="Google Cloud Managed Notebooks Range 24 c" \ --network=$NETWORK \ --addresses=192.168.0.0 \ --purpose=VPC_PEERING Field value will be: `managed-notebooks-range-c`
	ReservedIpRange pulumi.StringPtrInput `pulumi:"reservedIpRange"`
	// Optional. Shielded VM Instance configuration settings.
	ShieldedInstanceConfig RuntimeShieldedInstanceConfigPtrInput `pulumi:"shieldedInstanceConfig"`
	// Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network. A full URL or partial URI are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/subnetworks/sub0` * `projects/[project_id]/regions/us-east1/subnetworks/sub0`
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
	// Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (VirtualMachineConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfig)(nil)).Elem()
}

func (i VirtualMachineConfigArgs) ToVirtualMachineConfigOutput() VirtualMachineConfigOutput {
	return i.ToVirtualMachineConfigOutputWithContext(context.Background())
}

func (i VirtualMachineConfigArgs) ToVirtualMachineConfigOutputWithContext(ctx context.Context) VirtualMachineConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigOutput)
}

func (i VirtualMachineConfigArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineConfig] {
	return pulumix.Output[VirtualMachineConfig]{
		OutputState: i.ToVirtualMachineConfigOutputWithContext(ctx).OutputState,
	}
}

func (i VirtualMachineConfigArgs) ToVirtualMachineConfigPtrOutput() VirtualMachineConfigPtrOutput {
	return i.ToVirtualMachineConfigPtrOutputWithContext(context.Background())
}

func (i VirtualMachineConfigArgs) ToVirtualMachineConfigPtrOutputWithContext(ctx context.Context) VirtualMachineConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigOutput).ToVirtualMachineConfigPtrOutputWithContext(ctx)
}

// VirtualMachineConfigPtrInput is an input type that accepts VirtualMachineConfigArgs, VirtualMachineConfigPtr and VirtualMachineConfigPtrOutput values.
// You can construct a concrete instance of `VirtualMachineConfigPtrInput` via:
//
//	        VirtualMachineConfigArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineConfigPtrInput interface {
	pulumi.Input

	ToVirtualMachineConfigPtrOutput() VirtualMachineConfigPtrOutput
	ToVirtualMachineConfigPtrOutputWithContext(context.Context) VirtualMachineConfigPtrOutput
}

type virtualMachineConfigPtrType VirtualMachineConfigArgs

func VirtualMachineConfigPtr(v *VirtualMachineConfigArgs) VirtualMachineConfigPtrInput {
	return (*virtualMachineConfigPtrType)(v)
}

func (*virtualMachineConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfig)(nil)).Elem()
}

func (i *virtualMachineConfigPtrType) ToVirtualMachineConfigPtrOutput() VirtualMachineConfigPtrOutput {
	return i.ToVirtualMachineConfigPtrOutputWithContext(context.Background())
}

func (i *virtualMachineConfigPtrType) ToVirtualMachineConfigPtrOutputWithContext(ctx context.Context) VirtualMachineConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigPtrOutput)
}

func (i *virtualMachineConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineConfig] {
	return pulumix.Output[*VirtualMachineConfig]{
		OutputState: i.ToVirtualMachineConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// The config settings for virtual machine.
type VirtualMachineConfigOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfig)(nil)).Elem()
}

func (o VirtualMachineConfigOutput) ToVirtualMachineConfigOutput() VirtualMachineConfigOutput {
	return o
}

func (o VirtualMachineConfigOutput) ToVirtualMachineConfigOutputWithContext(ctx context.Context) VirtualMachineConfigOutput {
	return o
}

func (o VirtualMachineConfigOutput) ToVirtualMachineConfigPtrOutput() VirtualMachineConfigPtrOutput {
	return o.ToVirtualMachineConfigPtrOutputWithContext(context.Background())
}

func (o VirtualMachineConfigOutput) ToVirtualMachineConfigPtrOutputWithContext(ctx context.Context) VirtualMachineConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineConfig) *VirtualMachineConfig {
		return &v
	}).(VirtualMachineConfigPtrOutput)
}

func (o VirtualMachineConfigOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineConfig] {
	return pulumix.Output[VirtualMachineConfig]{
		OutputState: o.OutputState,
	}
}

// Optional. The Compute Engine accelerator configuration for this runtime.
func (o VirtualMachineConfigOutput) AcceleratorConfig() RuntimeAcceleratorConfigPtrOutput {
	return o.ApplyT(func(v VirtualMachineConfig) *RuntimeAcceleratorConfig { return v.AcceleratorConfig }).(RuntimeAcceleratorConfigPtrOutput)
}

// Optional. Boot image metadata used for runtime upgradeability.
func (o VirtualMachineConfigOutput) BootImage() BootImagePtrOutput {
	return o.ApplyT(func(v VirtualMachineConfig) *BootImage { return v.BootImage }).(BootImagePtrOutput)
}

// Optional. Use a list of container images to use as Kernels in the notebook instance.
func (o VirtualMachineConfigOutput) ContainerImages() ContainerImageArrayOutput {
	return o.ApplyT(func(v VirtualMachineConfig) []ContainerImage { return v.ContainerImages }).(ContainerImageArrayOutput)
}

// Data disk option configuration settings.
func (o VirtualMachineConfigOutput) DataDisk() LocalDiskOutput {
	return o.ApplyT(func(v VirtualMachineConfig) LocalDisk { return v.DataDisk }).(LocalDiskOutput)
}

// Optional. Encryption settings for virtual machine data disk.
func (o VirtualMachineConfigOutput) EncryptionConfig() EncryptionConfigPtrOutput {
	return o.ApplyT(func(v VirtualMachineConfig) *EncryptionConfig { return v.EncryptionConfig }).(EncryptionConfigPtrOutput)
}

// Optional. If true, runtime will only have internal IP addresses. By default, runtimes are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each vm. This `internal_ip_only` restriction can only be enabled for subnetwork enabled networks, and all dependencies must be configured to be accessible without external IP addresses.
func (o VirtualMachineConfigOutput) InternalIpOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineConfig) *bool { return v.InternalIpOnly }).(pulumi.BoolPtrOutput)
}

// Optional. The labels to associate with this runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
func (o VirtualMachineConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualMachineConfig) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The Compute Engine machine type used for runtimes. Short name is valid. Examples: * `n1-standard-2` * `e2-standard-8`
func (o VirtualMachineConfigOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineConfig) string { return v.MachineType }).(pulumi.StringOutput)
}

// Optional. The Compute Engine metadata entries to add to virtual machine. (see [Project and instance metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
func (o VirtualMachineConfigOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualMachineConfig) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork. If neither `network` nor `subnet` is specified, the "default" network of the project is used, if it exists. A full URL or partial URI. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default` * `projects/[project_id]/global/networks/default` Runtimes are managed resources inside Google Infrastructure. Runtimes support the following network configurations: * Google Managed Network (Network & subnet are empty) * Consumer Project VPC (network & subnet are required). Requires configuring Private Service Access. * Shared VPC (network & subnet are required). Requires configuring Private Service Access.
func (o VirtualMachineConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
func (o VirtualMachineConfigOutput) NicType() VirtualMachineConfigNicTypePtrOutput {
	return o.ApplyT(func(v VirtualMachineConfig) *VirtualMachineConfigNicType { return v.NicType }).(VirtualMachineConfigNicTypePtrOutput)
}

// Optional. Reserved IP Range name is used for VPC Peering. The subnetwork allocation will use the range *name* if it's assigned. Example: managed-notebooks-range-c PEERING_RANGE_NAME_3=managed-notebooks-range-c gcloud compute addresses create $PEERING_RANGE_NAME_3 \ --global \ --prefix-length=24 \ --description="Google Cloud Managed Notebooks Range 24 c" \ --network=$NETWORK \ --addresses=192.168.0.0 \ --purpose=VPC_PEERING Field value will be: `managed-notebooks-range-c`
func (o VirtualMachineConfigOutput) ReservedIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineConfig) *string { return v.ReservedIpRange }).(pulumi.StringPtrOutput)
}

// Optional. Shielded VM Instance configuration settings.
func (o VirtualMachineConfigOutput) ShieldedInstanceConfig() RuntimeShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v VirtualMachineConfig) *RuntimeShieldedInstanceConfig { return v.ShieldedInstanceConfig }).(RuntimeShieldedInstanceConfigPtrOutput)
}

// Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network. A full URL or partial URI are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/subnetworks/sub0` * `projects/[project_id]/regions/us-east1/subnetworks/sub0`
func (o VirtualMachineConfigOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineConfig) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
func (o VirtualMachineConfigOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineConfig) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type VirtualMachineConfigPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfig)(nil)).Elem()
}

func (o VirtualMachineConfigPtrOutput) ToVirtualMachineConfigPtrOutput() VirtualMachineConfigPtrOutput {
	return o
}

func (o VirtualMachineConfigPtrOutput) ToVirtualMachineConfigPtrOutputWithContext(ctx context.Context) VirtualMachineConfigPtrOutput {
	return o
}

func (o VirtualMachineConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VirtualMachineConfig] {
	return pulumix.Output[*VirtualMachineConfig]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachineConfigPtrOutput) Elem() VirtualMachineConfigOutput {
	return o.ApplyT(func(v *VirtualMachineConfig) VirtualMachineConfig {
		if v != nil {
			return *v
		}
		var ret VirtualMachineConfig
		return ret
	}).(VirtualMachineConfigOutput)
}

// Optional. The Compute Engine accelerator configuration for this runtime.
func (o VirtualMachineConfigPtrOutput) AcceleratorConfig() RuntimeAcceleratorConfigPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfig) *RuntimeAcceleratorConfig {
		if v == nil {
			return nil
		}
		return v.AcceleratorConfig
	}).(RuntimeAcceleratorConfigPtrOutput)
}

// Optional. Boot image metadata used for runtime upgradeability.
func (o VirtualMachineConfigPtrOutput) BootImage() BootImagePtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfig) *BootImage {
		if v == nil {
			return nil
		}
		return v.BootImage
	}).(BootImagePtrOutput)
}

// Optional. Use a list of container images to use as Kernels in the notebook instance.
func (o VirtualMachineConfigPtrOutput) ContainerImages() ContainerImageArrayOutput {
	return o.ApplyT(func(v *VirtualMachineConfig) []ContainerImage {
		if v == nil {
			return nil
		}
		return v.ContainerImages
	}).(ContainerImageArrayOutput)
}

// Data disk option configuration settings.
func (o VirtualMachineConfigPtrOutput) DataDisk() LocalDiskPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfig) *LocalDisk {
		if v == nil {
			return nil
		}
		return &v.DataDisk
	}).(LocalDiskPtrOutput)
}

// Optional. Encryption settings for virtual machine data disk.
func (o VirtualMachineConfigPtrOutput) EncryptionConfig() EncryptionConfigPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfig) *EncryptionConfig {
		if v == nil {
			return nil
		}
		return v.EncryptionConfig
	}).(EncryptionConfigPtrOutput)
}

// Optional. If true, runtime will only have internal IP addresses. By default, runtimes are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each vm. This `internal_ip_only` restriction can only be enabled for subnetwork enabled networks, and all dependencies must be configured to be accessible without external IP addresses.
func (o VirtualMachineConfigPtrOutput) InternalIpOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfig) *bool {
		if v == nil {
			return nil
		}
		return v.InternalIpOnly
	}).(pulumi.BoolPtrOutput)
}

// Optional. The labels to associate with this runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
func (o VirtualMachineConfigPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachineConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The Compute Engine machine type used for runtimes. Short name is valid. Examples: * `n1-standard-2` * `e2-standard-8`
func (o VirtualMachineConfigPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfig) *string {
		if v == nil {
			return nil
		}
		return &v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine metadata entries to add to virtual machine. (see [Project and instance metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
func (o VirtualMachineConfigPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualMachineConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork. If neither `network` nor `subnet` is specified, the "default" network of the project is used, if it exists. A full URL or partial URI. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default` * `projects/[project_id]/global/networks/default` Runtimes are managed resources inside Google Infrastructure. Runtimes support the following network configurations: * Google Managed Network (Network & subnet are empty) * Consumer Project VPC (network & subnet are required). Requires configuring Private Service Access. * Shared VPC (network & subnet are required). Requires configuring Private Service Access.
func (o VirtualMachineConfigPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfig) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
func (o VirtualMachineConfigPtrOutput) NicType() VirtualMachineConfigNicTypePtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfig) *VirtualMachineConfigNicType {
		if v == nil {
			return nil
		}
		return v.NicType
	}).(VirtualMachineConfigNicTypePtrOutput)
}

// Optional. Reserved IP Range name is used for VPC Peering. The subnetwork allocation will use the range *name* if it's assigned. Example: managed-notebooks-range-c PEERING_RANGE_NAME_3=managed-notebooks-range-c gcloud compute addresses create $PEERING_RANGE_NAME_3 \ --global \ --prefix-length=24 \ --description="Google Cloud Managed Notebooks Range 24 c" \ --network=$NETWORK \ --addresses=192.168.0.0 \ --purpose=VPC_PEERING Field value will be: `managed-notebooks-range-c`
func (o VirtualMachineConfigPtrOutput) ReservedIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfig) *string {
		if v == nil {
			return nil
		}
		return v.ReservedIpRange
	}).(pulumi.StringPtrOutput)
}

// Optional. Shielded VM Instance configuration settings.
func (o VirtualMachineConfigPtrOutput) ShieldedInstanceConfig() RuntimeShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfig) *RuntimeShieldedInstanceConfig {
		if v == nil {
			return nil
		}
		return v.ShieldedInstanceConfig
	}).(RuntimeShieldedInstanceConfigPtrOutput)
}

// Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network. A full URL or partial URI are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/subnetworks/sub0` * `projects/[project_id]/regions/us-east1/subnetworks/sub0`
func (o VirtualMachineConfigPtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfig) *string {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
func (o VirtualMachineConfigPtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualMachineConfig) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// The config settings for virtual machine.
type VirtualMachineConfigResponse struct {
	// Optional. The Compute Engine accelerator configuration for this runtime.
	AcceleratorConfig RuntimeAcceleratorConfigResponse `pulumi:"acceleratorConfig"`
	// Optional. Boot image metadata used for runtime upgradeability.
	BootImage BootImageResponse `pulumi:"bootImage"`
	// Optional. Use a list of container images to use as Kernels in the notebook instance.
	ContainerImages []ContainerImageResponse `pulumi:"containerImages"`
	// Data disk option configuration settings.
	DataDisk LocalDiskResponse `pulumi:"dataDisk"`
	// Optional. Encryption settings for virtual machine data disk.
	EncryptionConfig EncryptionConfigResponse `pulumi:"encryptionConfig"`
	// The Compute Engine guest attributes. (see [Project and instance guest attributes](https://cloud.google.com/compute/docs/storing-retrieving-metadata#guest_attributes)).
	GuestAttributes map[string]string `pulumi:"guestAttributes"`
	// Optional. If true, runtime will only have internal IP addresses. By default, runtimes are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each vm. This `internal_ip_only` restriction can only be enabled for subnetwork enabled networks, and all dependencies must be configured to be accessible without external IP addresses.
	InternalIpOnly bool `pulumi:"internalIpOnly"`
	// Optional. The labels to associate with this runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
	Labels map[string]string `pulumi:"labels"`
	// The Compute Engine machine type used for runtimes. Short name is valid. Examples: * `n1-standard-2` * `e2-standard-8`
	MachineType string `pulumi:"machineType"`
	// Optional. The Compute Engine metadata entries to add to virtual machine. (see [Project and instance metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
	Metadata map[string]string `pulumi:"metadata"`
	// Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork. If neither `network` nor `subnet` is specified, the "default" network of the project is used, if it exists. A full URL or partial URI. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default` * `projects/[project_id]/global/networks/default` Runtimes are managed resources inside Google Infrastructure. Runtimes support the following network configurations: * Google Managed Network (Network & subnet are empty) * Consumer Project VPC (network & subnet are required). Requires configuring Private Service Access. * Shared VPC (network & subnet are required). Requires configuring Private Service Access.
	Network string `pulumi:"network"`
	// Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
	NicType string `pulumi:"nicType"`
	// Optional. Reserved IP Range name is used for VPC Peering. The subnetwork allocation will use the range *name* if it's assigned. Example: managed-notebooks-range-c PEERING_RANGE_NAME_3=managed-notebooks-range-c gcloud compute addresses create $PEERING_RANGE_NAME_3 \ --global \ --prefix-length=24 \ --description="Google Cloud Managed Notebooks Range 24 c" \ --network=$NETWORK \ --addresses=192.168.0.0 \ --purpose=VPC_PEERING Field value will be: `managed-notebooks-range-c`
	ReservedIpRange string `pulumi:"reservedIpRange"`
	// Optional. Shielded VM Instance configuration settings.
	ShieldedInstanceConfig RuntimeShieldedInstanceConfigResponse `pulumi:"shieldedInstanceConfig"`
	// Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network. A full URL or partial URI are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/subnetworks/sub0` * `projects/[project_id]/regions/us-east1/subnetworks/sub0`
	Subnet string `pulumi:"subnet"`
	// Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
	Tags []string `pulumi:"tags"`
	// The zone where the virtual machine is located. If using regional request, the notebooks service will pick a location in the corresponding runtime region. On a get request, zone will always be present. Example: * `us-central1-b`
	Zone string `pulumi:"zone"`
}

// The config settings for virtual machine.
type VirtualMachineConfigResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfigResponse)(nil)).Elem()
}

func (o VirtualMachineConfigResponseOutput) ToVirtualMachineConfigResponseOutput() VirtualMachineConfigResponseOutput {
	return o
}

func (o VirtualMachineConfigResponseOutput) ToVirtualMachineConfigResponseOutputWithContext(ctx context.Context) VirtualMachineConfigResponseOutput {
	return o
}

func (o VirtualMachineConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineConfigResponse] {
	return pulumix.Output[VirtualMachineConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. The Compute Engine accelerator configuration for this runtime.
func (o VirtualMachineConfigResponseOutput) AcceleratorConfig() RuntimeAcceleratorConfigResponseOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) RuntimeAcceleratorConfigResponse { return v.AcceleratorConfig }).(RuntimeAcceleratorConfigResponseOutput)
}

// Optional. Boot image metadata used for runtime upgradeability.
func (o VirtualMachineConfigResponseOutput) BootImage() BootImageResponseOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) BootImageResponse { return v.BootImage }).(BootImageResponseOutput)
}

// Optional. Use a list of container images to use as Kernels in the notebook instance.
func (o VirtualMachineConfigResponseOutput) ContainerImages() ContainerImageResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) []ContainerImageResponse { return v.ContainerImages }).(ContainerImageResponseArrayOutput)
}

// Data disk option configuration settings.
func (o VirtualMachineConfigResponseOutput) DataDisk() LocalDiskResponseOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) LocalDiskResponse { return v.DataDisk }).(LocalDiskResponseOutput)
}

// Optional. Encryption settings for virtual machine data disk.
func (o VirtualMachineConfigResponseOutput) EncryptionConfig() EncryptionConfigResponseOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) EncryptionConfigResponse { return v.EncryptionConfig }).(EncryptionConfigResponseOutput)
}

// The Compute Engine guest attributes. (see [Project and instance guest attributes](https://cloud.google.com/compute/docs/storing-retrieving-metadata#guest_attributes)).
func (o VirtualMachineConfigResponseOutput) GuestAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) map[string]string { return v.GuestAttributes }).(pulumi.StringMapOutput)
}

// Optional. If true, runtime will only have internal IP addresses. By default, runtimes are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each vm. This `internal_ip_only` restriction can only be enabled for subnetwork enabled networks, and all dependencies must be configured to be accessible without external IP addresses.
func (o VirtualMachineConfigResponseOutput) InternalIpOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) bool { return v.InternalIpOnly }).(pulumi.BoolOutput)
}

// Optional. The labels to associate with this runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
func (o VirtualMachineConfigResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The Compute Engine machine type used for runtimes. Short name is valid. Examples: * `n1-standard-2` * `e2-standard-8`
func (o VirtualMachineConfigResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// Optional. The Compute Engine metadata entries to add to virtual machine. (see [Project and instance metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
func (o VirtualMachineConfigResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork. If neither `network` nor `subnet` is specified, the "default" network of the project is used, if it exists. A full URL or partial URI. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default` * `projects/[project_id]/global/networks/default` Runtimes are managed resources inside Google Infrastructure. Runtimes support the following network configurations: * Google Managed Network (Network & subnet are empty) * Consumer Project VPC (network & subnet are required). Requires configuring Private Service Access. * Shared VPC (network & subnet are required). Requires configuring Private Service Access.
func (o VirtualMachineConfigResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) string { return v.Network }).(pulumi.StringOutput)
}

// Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
func (o VirtualMachineConfigResponseOutput) NicType() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) string { return v.NicType }).(pulumi.StringOutput)
}

// Optional. Reserved IP Range name is used for VPC Peering. The subnetwork allocation will use the range *name* if it's assigned. Example: managed-notebooks-range-c PEERING_RANGE_NAME_3=managed-notebooks-range-c gcloud compute addresses create $PEERING_RANGE_NAME_3 \ --global \ --prefix-length=24 \ --description="Google Cloud Managed Notebooks Range 24 c" \ --network=$NETWORK \ --addresses=192.168.0.0 \ --purpose=VPC_PEERING Field value will be: `managed-notebooks-range-c`
func (o VirtualMachineConfigResponseOutput) ReservedIpRange() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) string { return v.ReservedIpRange }).(pulumi.StringOutput)
}

// Optional. Shielded VM Instance configuration settings.
func (o VirtualMachineConfigResponseOutput) ShieldedInstanceConfig() RuntimeShieldedInstanceConfigResponseOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) RuntimeShieldedInstanceConfigResponse {
		return v.ShieldedInstanceConfig
	}).(RuntimeShieldedInstanceConfigResponseOutput)
}

// Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network. A full URL or partial URI are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/subnetworks/sub0` * `projects/[project_id]/regions/us-east1/subnetworks/sub0`
func (o VirtualMachineConfigResponseOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) string { return v.Subnet }).(pulumi.StringOutput)
}

// Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
func (o VirtualMachineConfigResponseOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The zone where the virtual machine is located. If using regional request, the notebooks service will pick a location in the corresponding runtime region. On a get request, zone will always be present. Example: * `us-central1-b`
func (o VirtualMachineConfigResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineConfigResponse) string { return v.Zone }).(pulumi.StringOutput)
}

// Runtime using Virtual Machine for computing.
type VirtualMachineResponse struct {
	// The unique identifier of the Managed Compute Engine instance.
	InstanceId string `pulumi:"instanceId"`
	// The user-friendly name of the Managed Compute Engine instance.
	InstanceName string `pulumi:"instanceName"`
	// Virtual Machine configuration settings.
	VirtualMachineConfig VirtualMachineConfigResponse `pulumi:"virtualMachineConfig"`
}

// Runtime using Virtual Machine for computing.
type VirtualMachineResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineResponse)(nil)).Elem()
}

func (o VirtualMachineResponseOutput) ToVirtualMachineResponseOutput() VirtualMachineResponseOutput {
	return o
}

func (o VirtualMachineResponseOutput) ToVirtualMachineResponseOutputWithContext(ctx context.Context) VirtualMachineResponseOutput {
	return o
}

func (o VirtualMachineResponseOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachineResponse] {
	return pulumix.Output[VirtualMachineResponse]{
		OutputState: o.OutputState,
	}
}

// The unique identifier of the Managed Compute Engine instance.
func (o VirtualMachineResponseOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineResponse) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The user-friendly name of the Managed Compute Engine instance.
func (o VirtualMachineResponseOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineResponse) string { return v.InstanceName }).(pulumi.StringOutput)
}

// Virtual Machine configuration settings.
func (o VirtualMachineResponseOutput) VirtualMachineConfig() VirtualMachineConfigResponseOutput {
	return o.ApplyT(func(v VirtualMachineResponse) VirtualMachineConfigResponse { return v.VirtualMachineConfig }).(VirtualMachineConfigResponseOutput)
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImage struct {
	// Use this VM image family to find the image; the newest image in this family will be used.
	ImageFamily *string `pulumi:"imageFamily"`
	// Use VM image name to find the image.
	ImageName *string `pulumi:"imageName"`
	// The name of the Google Cloud project that this VM image belongs to. Format: `{project_id}`
	Project string `pulumi:"project"`
}

// VmImageInput is an input type that accepts VmImageArgs and VmImageOutput values.
// You can construct a concrete instance of `VmImageInput` via:
//
//	VmImageArgs{...}
type VmImageInput interface {
	pulumi.Input

	ToVmImageOutput() VmImageOutput
	ToVmImageOutputWithContext(context.Context) VmImageOutput
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImageArgs struct {
	// Use this VM image family to find the image; the newest image in this family will be used.
	ImageFamily pulumi.StringPtrInput `pulumi:"imageFamily"`
	// Use VM image name to find the image.
	ImageName pulumi.StringPtrInput `pulumi:"imageName"`
	// The name of the Google Cloud project that this VM image belongs to. Format: `{project_id}`
	Project pulumi.StringInput `pulumi:"project"`
}

func (VmImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmImage)(nil)).Elem()
}

func (i VmImageArgs) ToVmImageOutput() VmImageOutput {
	return i.ToVmImageOutputWithContext(context.Background())
}

func (i VmImageArgs) ToVmImageOutputWithContext(ctx context.Context) VmImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmImageOutput)
}

func (i VmImageArgs) ToOutput(ctx context.Context) pulumix.Output[VmImage] {
	return pulumix.Output[VmImage]{
		OutputState: i.ToVmImageOutputWithContext(ctx).OutputState,
	}
}

func (i VmImageArgs) ToVmImagePtrOutput() VmImagePtrOutput {
	return i.ToVmImagePtrOutputWithContext(context.Background())
}

func (i VmImageArgs) ToVmImagePtrOutputWithContext(ctx context.Context) VmImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmImageOutput).ToVmImagePtrOutputWithContext(ctx)
}

// VmImagePtrInput is an input type that accepts VmImageArgs, VmImagePtr and VmImagePtrOutput values.
// You can construct a concrete instance of `VmImagePtrInput` via:
//
//	        VmImageArgs{...}
//
//	or:
//
//	        nil
type VmImagePtrInput interface {
	pulumi.Input

	ToVmImagePtrOutput() VmImagePtrOutput
	ToVmImagePtrOutputWithContext(context.Context) VmImagePtrOutput
}

type vmImagePtrType VmImageArgs

func VmImagePtr(v *VmImageArgs) VmImagePtrInput {
	return (*vmImagePtrType)(v)
}

func (*vmImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VmImage)(nil)).Elem()
}

func (i *vmImagePtrType) ToVmImagePtrOutput() VmImagePtrOutput {
	return i.ToVmImagePtrOutputWithContext(context.Background())
}

func (i *vmImagePtrType) ToVmImagePtrOutputWithContext(ctx context.Context) VmImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmImagePtrOutput)
}

func (i *vmImagePtrType) ToOutput(ctx context.Context) pulumix.Output[*VmImage] {
	return pulumix.Output[*VmImage]{
		OutputState: i.ToVmImagePtrOutputWithContext(ctx).OutputState,
	}
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImageOutput struct{ *pulumi.OutputState }

func (VmImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmImage)(nil)).Elem()
}

func (o VmImageOutput) ToVmImageOutput() VmImageOutput {
	return o
}

func (o VmImageOutput) ToVmImageOutputWithContext(ctx context.Context) VmImageOutput {
	return o
}

func (o VmImageOutput) ToVmImagePtrOutput() VmImagePtrOutput {
	return o.ToVmImagePtrOutputWithContext(context.Background())
}

func (o VmImageOutput) ToVmImagePtrOutputWithContext(ctx context.Context) VmImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VmImage) *VmImage {
		return &v
	}).(VmImagePtrOutput)
}

func (o VmImageOutput) ToOutput(ctx context.Context) pulumix.Output[VmImage] {
	return pulumix.Output[VmImage]{
		OutputState: o.OutputState,
	}
}

// Use this VM image family to find the image; the newest image in this family will be used.
func (o VmImageOutput) ImageFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmImage) *string { return v.ImageFamily }).(pulumi.StringPtrOutput)
}

// Use VM image name to find the image.
func (o VmImageOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmImage) *string { return v.ImageName }).(pulumi.StringPtrOutput)
}

// The name of the Google Cloud project that this VM image belongs to. Format: `{project_id}`
func (o VmImageOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v VmImage) string { return v.Project }).(pulumi.StringOutput)
}

type VmImagePtrOutput struct{ *pulumi.OutputState }

func (VmImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmImage)(nil)).Elem()
}

func (o VmImagePtrOutput) ToVmImagePtrOutput() VmImagePtrOutput {
	return o
}

func (o VmImagePtrOutput) ToVmImagePtrOutputWithContext(ctx context.Context) VmImagePtrOutput {
	return o
}

func (o VmImagePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VmImage] {
	return pulumix.Output[*VmImage]{
		OutputState: o.OutputState,
	}
}

func (o VmImagePtrOutput) Elem() VmImageOutput {
	return o.ApplyT(func(v *VmImage) VmImage {
		if v != nil {
			return *v
		}
		var ret VmImage
		return ret
	}).(VmImageOutput)
}

// Use this VM image family to find the image; the newest image in this family will be used.
func (o VmImagePtrOutput) ImageFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmImage) *string {
		if v == nil {
			return nil
		}
		return v.ImageFamily
	}).(pulumi.StringPtrOutput)
}

// Use VM image name to find the image.
func (o VmImagePtrOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmImage) *string {
		if v == nil {
			return nil
		}
		return v.ImageName
	}).(pulumi.StringPtrOutput)
}

// The name of the Google Cloud project that this VM image belongs to. Format: `{project_id}`
func (o VmImagePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VmImage) *string {
		if v == nil {
			return nil
		}
		return &v.Project
	}).(pulumi.StringPtrOutput)
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImageResponse struct {
	// Use this VM image family to find the image; the newest image in this family will be used.
	ImageFamily string `pulumi:"imageFamily"`
	// Use VM image name to find the image.
	ImageName string `pulumi:"imageName"`
	// The name of the Google Cloud project that this VM image belongs to. Format: `{project_id}`
	Project string `pulumi:"project"`
}

// Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.
type VmImageResponseOutput struct{ *pulumi.OutputState }

func (VmImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmImageResponse)(nil)).Elem()
}

func (o VmImageResponseOutput) ToVmImageResponseOutput() VmImageResponseOutput {
	return o
}

func (o VmImageResponseOutput) ToVmImageResponseOutputWithContext(ctx context.Context) VmImageResponseOutput {
	return o
}

func (o VmImageResponseOutput) ToOutput(ctx context.Context) pulumix.Output[VmImageResponse] {
	return pulumix.Output[VmImageResponse]{
		OutputState: o.OutputState,
	}
}

// Use this VM image family to find the image; the newest image in this family will be used.
func (o VmImageResponseOutput) ImageFamily() pulumi.StringOutput {
	return o.ApplyT(func(v VmImageResponse) string { return v.ImageFamily }).(pulumi.StringOutput)
}

// Use VM image name to find the image.
func (o VmImageResponseOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v VmImageResponse) string { return v.ImageName }).(pulumi.StringOutput)
}

// The name of the Google Cloud project that this VM image belongs to. Format: `{project_id}`
func (o VmImageResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v VmImageResponse) string { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AcceleratorConfigInput)(nil)).Elem(), AcceleratorConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcceleratorConfigPtrInput)(nil)).Elem(), AcceleratorConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BootImageInput)(nil)).Elem(), BootImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BootImagePtrInput)(nil)).Elem(), BootImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerImageInput)(nil)).Elem(), ContainerImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerImagePtrInput)(nil)).Elem(), ContainerImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerImageArrayInput)(nil)).Elem(), ContainerImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataprocParametersInput)(nil)).Elem(), DataprocParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataprocParametersPtrInput)(nil)).Elem(), DataprocParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigInput)(nil)).Elem(), EncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigPtrInput)(nil)).Elem(), EncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionTemplateInput)(nil)).Elem(), ExecutionTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionTemplatePtrInput)(nil)).Elem(), ExecutionTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalDiskInput)(nil)).Elem(), LocalDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalDiskPtrInput)(nil)).Elem(), LocalDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalDiskInitializeParamsInput)(nil)).Elem(), LocalDiskInitializeParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocalDiskInitializeParamsPtrInput)(nil)).Elem(), LocalDiskInitializeParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservationAffinityInput)(nil)).Elem(), ReservationAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservationAffinityPtrInput)(nil)).Elem(), ReservationAffinityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeAcceleratorConfigInput)(nil)).Elem(), RuntimeAcceleratorConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeAcceleratorConfigPtrInput)(nil)).Elem(), RuntimeAcceleratorConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeAccessConfigInput)(nil)).Elem(), RuntimeAccessConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeAccessConfigPtrInput)(nil)).Elem(), RuntimeAccessConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeShieldedInstanceConfigInput)(nil)).Elem(), RuntimeShieldedInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeShieldedInstanceConfigPtrInput)(nil)).Elem(), RuntimeShieldedInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeSoftwareConfigInput)(nil)).Elem(), RuntimeSoftwareConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeSoftwareConfigPtrInput)(nil)).Elem(), RuntimeSoftwareConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulerAcceleratorConfigInput)(nil)).Elem(), SchedulerAcceleratorConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchedulerAcceleratorConfigPtrInput)(nil)).Elem(), SchedulerAcceleratorConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedInstanceConfigInput)(nil)).Elem(), ShieldedInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShieldedInstanceConfigPtrInput)(nil)).Elem(), ShieldedInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeHistoryEntryInput)(nil)).Elem(), UpgradeHistoryEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeHistoryEntryArrayInput)(nil)).Elem(), UpgradeHistoryEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VertexAIParametersInput)(nil)).Elem(), VertexAIParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VertexAIParametersPtrInput)(nil)).Elem(), VertexAIParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineInput)(nil)).Elem(), VirtualMachineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachinePtrInput)(nil)).Elem(), VirtualMachineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineConfigInput)(nil)).Elem(), VirtualMachineConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualMachineConfigPtrInput)(nil)).Elem(), VirtualMachineConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmImageInput)(nil)).Elem(), VmImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmImagePtrInput)(nil)).Elem(), VmImageArgs{})
	pulumi.RegisterOutputType(AcceleratorConfigOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigPtrOutput{})
	pulumi.RegisterOutputType(AcceleratorConfigResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(BootImageOutput{})
	pulumi.RegisterOutputType(BootImagePtrOutput{})
	pulumi.RegisterOutputType(BootImageResponseOutput{})
	pulumi.RegisterOutputType(ContainerImageOutput{})
	pulumi.RegisterOutputType(ContainerImagePtrOutput{})
	pulumi.RegisterOutputType(ContainerImageArrayOutput{})
	pulumi.RegisterOutputType(ContainerImageResponseOutput{})
	pulumi.RegisterOutputType(ContainerImageResponseArrayOutput{})
	pulumi.RegisterOutputType(DataprocParametersOutput{})
	pulumi.RegisterOutputType(DataprocParametersPtrOutput{})
	pulumi.RegisterOutputType(DataprocParametersResponseOutput{})
	pulumi.RegisterOutputType(DiskResponseOutput{})
	pulumi.RegisterOutputType(DiskResponseArrayOutput{})
	pulumi.RegisterOutputType(EncryptionConfigOutput{})
	pulumi.RegisterOutputType(EncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigResponseOutput{})
	pulumi.RegisterOutputType(ExecutionResponseOutput{})
	pulumi.RegisterOutputType(ExecutionResponseArrayOutput{})
	pulumi.RegisterOutputType(ExecutionTemplateOutput{})
	pulumi.RegisterOutputType(ExecutionTemplatePtrOutput{})
	pulumi.RegisterOutputType(ExecutionTemplateResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GuestOsFeatureResponseOutput{})
	pulumi.RegisterOutputType(GuestOsFeatureResponseArrayOutput{})
	pulumi.RegisterOutputType(LocalDiskOutput{})
	pulumi.RegisterOutputType(LocalDiskPtrOutput{})
	pulumi.RegisterOutputType(LocalDiskInitializeParamsOutput{})
	pulumi.RegisterOutputType(LocalDiskInitializeParamsPtrOutput{})
	pulumi.RegisterOutputType(LocalDiskInitializeParamsResponseOutput{})
	pulumi.RegisterOutputType(LocalDiskResponseOutput{})
	pulumi.RegisterOutputType(ReservationAffinityOutput{})
	pulumi.RegisterOutputType(ReservationAffinityPtrOutput{})
	pulumi.RegisterOutputType(ReservationAffinityResponseOutput{})
	pulumi.RegisterOutputType(RuntimeAcceleratorConfigOutput{})
	pulumi.RegisterOutputType(RuntimeAcceleratorConfigPtrOutput{})
	pulumi.RegisterOutputType(RuntimeAcceleratorConfigResponseOutput{})
	pulumi.RegisterOutputType(RuntimeAccessConfigOutput{})
	pulumi.RegisterOutputType(RuntimeAccessConfigPtrOutput{})
	pulumi.RegisterOutputType(RuntimeAccessConfigResponseOutput{})
	pulumi.RegisterOutputType(RuntimeGuestOsFeatureResponseOutput{})
	pulumi.RegisterOutputType(RuntimeGuestOsFeatureResponseArrayOutput{})
	pulumi.RegisterOutputType(RuntimeMetricsResponseOutput{})
	pulumi.RegisterOutputType(RuntimeShieldedInstanceConfigOutput{})
	pulumi.RegisterOutputType(RuntimeShieldedInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(RuntimeShieldedInstanceConfigResponseOutput{})
	pulumi.RegisterOutputType(RuntimeSoftwareConfigOutput{})
	pulumi.RegisterOutputType(RuntimeSoftwareConfigPtrOutput{})
	pulumi.RegisterOutputType(RuntimeSoftwareConfigResponseOutput{})
	pulumi.RegisterOutputType(SchedulerAcceleratorConfigOutput{})
	pulumi.RegisterOutputType(SchedulerAcceleratorConfigPtrOutput{})
	pulumi.RegisterOutputType(SchedulerAcceleratorConfigResponseOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(ShieldedInstanceConfigResponseOutput{})
	pulumi.RegisterOutputType(UpgradeHistoryEntryOutput{})
	pulumi.RegisterOutputType(UpgradeHistoryEntryArrayOutput{})
	pulumi.RegisterOutputType(UpgradeHistoryEntryResponseOutput{})
	pulumi.RegisterOutputType(UpgradeHistoryEntryResponseArrayOutput{})
	pulumi.RegisterOutputType(VertexAIParametersOutput{})
	pulumi.RegisterOutputType(VertexAIParametersPtrOutput{})
	pulumi.RegisterOutputType(VertexAIParametersResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineOutput{})
	pulumi.RegisterOutputType(VirtualMachinePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineResponseOutput{})
	pulumi.RegisterOutputType(VmImageOutput{})
	pulumi.RegisterOutputType(VmImagePtrOutput{})
	pulumi.RegisterOutputType(VmImageResponseOutput{})
}
